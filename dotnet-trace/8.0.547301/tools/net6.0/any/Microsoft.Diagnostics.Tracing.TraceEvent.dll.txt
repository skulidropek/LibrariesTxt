internal class ComStreamWrapper : object {
    private Stream stream;
    public ComStreamWrapper(Stream stream);
    public sealed virtual void Commit(UInt32 grfCommitFlags);
    public sealed virtual void RemoteRead(Byte& pv, UInt32 cb, UInt32& pcbRead);
    public sealed virtual void RemoteSeek(_LARGE_INTEGER dlibMove, UInt32 origin, _ULARGE_INTEGER& plibNewPosition);
    public sealed virtual void SetSize(_ULARGE_INTEGER libNewSize);
    public sealed virtual void Stat(tagSTATSTG& pstatstg, UInt32 grfStatFlag);
    public sealed virtual void RemoteWrite(Byte& pv, UInt32 cb, UInt32& pcbWritten);
    public sealed virtual void Clone(IStream& ppstm);
    public sealed virtual void RemoteCopyTo(IStream pstm, _ULARGE_INTEGER cb, _ULARGE_INTEGER& pcbRead, _ULARGE_INTEGER& pcbWritten);
    public sealed virtual void LockRegion(_ULARGE_INTEGER libOffset, _ULARGE_INTEGER cb, UInt32 lockType);
    public sealed virtual void Revert();
    public sealed virtual void UnlockRegion(_ULARGE_INTEGER libOffset, _ULARGE_INTEGER cb, UInt32 lockType);
}
internal static class Dia2Lib.DiaLoader : object {
    private static bool s_loadedNativeDll;
    public static IDiaDataSource3 GetDiaSourceObject();
    private static object DllGetClassObject(Guid rclsid, Guid riid);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("52585014-e2b6-49fe-aa72-3a1e178682ee")]
internal interface Dia2Lib.IDiaSession3 {
    public abstract virtual void Reserved01();
    public abstract virtual void Reserved02();
    public abstract virtual void Reserved03();
    public abstract virtual void Reserved04();
    public abstract virtual void Reserved05();
    public abstract virtual void Reserved06();
    public abstract virtual void Reserved07();
    public abstract virtual void Reserved08();
    public abstract virtual void Reserved09();
    public abstract virtual void Reserved10();
    public abstract virtual void Reserved11();
    public abstract virtual void Reserved12();
    public abstract virtual void Reserved13();
    public abstract virtual void Reserved14();
    public abstract virtual void Reserved15();
    public abstract virtual void Reserved16();
    public abstract virtual void Reserved17();
    public abstract virtual void Reserved18();
    public abstract virtual void Reserved19();
    public abstract virtual void Reserved20();
    public abstract virtual void Reserved21();
    public abstract virtual void Reserved22();
    public abstract virtual void Reserved23();
    public abstract virtual void Reserved24();
    public abstract virtual void Reserved25();
    public abstract virtual void Reserved26();
    public abstract virtual void Reserved27();
    public abstract virtual void Reserved28();
    public abstract virtual void Reserved29();
    public abstract virtual void Reserved30();
    public abstract virtual void Reserved31();
    public abstract virtual void Reserved32();
    public abstract virtual void Reserved33();
    public abstract virtual void Reserved34();
    public abstract virtual void Reserved35();
    public abstract virtual void Reserved36();
    public abstract virtual void Reserved37();
    public abstract virtual void Reserved38();
    public abstract virtual void Reserved39();
    public abstract virtual void Reserved40();
    public abstract virtual void Reserved41();
    public abstract virtual void Reserved42();
    public abstract virtual void Reserved43();
    public abstract virtual void Reserved44();
    public abstract virtual void Reserved45();
    public abstract virtual void Reserved46();
    public abstract virtual void Reserved47();
    public abstract virtual void Reserved48();
    public abstract virtual void Reserved49();
    public abstract virtual void Reserved50();
    public abstract virtual void Reserved51();
    public abstract virtual void Reserved52();
    public abstract virtual void Reserved53();
    public abstract virtual void Reserved54();
    public abstract virtual void Reserved55();
    public abstract virtual void Reserved56();
    public abstract virtual void Reserved57();
    public abstract virtual void Reserved58();
    public abstract virtual void Reserved59();
    public abstract virtual void Reserved60();
    public abstract virtual void Reserved61();
    public abstract virtual void Reserved62();
    public abstract virtual void Reserved63();
    public abstract virtual void Reserved64();
    public abstract virtual void Reserved65();
    public abstract virtual void Reserved66();
    public abstract virtual void Reserved67();
    public abstract virtual void Reserved68();
    public abstract virtual void Reserved69();
    public abstract virtual void Reserved70();
    public abstract virtual int dispose();
}
public class Diagnostics.Tracing.StackSources.AggregateStackSource : StackSource {
    private String[] m_sourceNames;
    private StackSource[] m_sources;
    private Double[] m_firstSampleTime;
    private PseudoStackSource m_pseudo;
    private IndexMap m_stackMap;
    private IndexMap m_frameMap;
    private IndexMap m_sampleMap;
    private int m_sourceCount;
    private double m_RelativeMSecLimit;
    private StackSourceSample m_sampleStorage;
    public bool SamplesImmutable { get; }
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public int SampleIndexLimit { get; }
    public String[] ScenarioNames { get; }
    public double SampleTimeRelativeMSecLimit { get; }
    public int ScenarioCount { get; }
    public AggregateStackSource(IEnumerable`1<KeyValuePair`2<string, StackSource>> sources);
    public virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual bool get_SamplesImmutable();
    public void ForEach(Action`1<StackSourceSample> callback, Boolean[] scenariosIncluded);
    public void ParallelForEach(Action`1<StackSourceSample> callback, Boolean[] scenariosIncluded, int desiredParallelism);
    public virtual StackSourceSample GetSampleByIndex(StackSourceSampleIndex sampleIndex);
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool verboseName);
    public virtual int get_CallStackIndexLimit();
    public virtual int get_CallFrameIndexLimit();
    public virtual int get_SampleIndexLimit();
    public String[] get_ScenarioNames();
    public virtual double get_SampleTimeRelativeMSecLimit();
    public virtual int get_ScenarioCount();
    private StackSourceSample ConvertSample(StackSourceSample input, StackSourceSample storage, int sourceIdx);
}
public class Diagnostics.Tracing.StackSources.FilterParams : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTimeRelativeMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTimeRelativeMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinInclusiveTimePercent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FoldRegExs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeRegExs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeRegExs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupRegExs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ScenarioList>k__BackingField;
    public string Name { get; public set; }
    public string StartTimeRelativeMSec { get; public set; }
    public string EndTimeRelativeMSec { get; public set; }
    public string MinInclusiveTimePercent { get; public set; }
    public string FoldRegExs { get; public set; }
    public string IncludeRegExs { get; public set; }
    public string ExcludeRegExs { get; public set; }
    public string GroupRegExs { get; public set; }
    public string TypePriority { get; public set; }
    public Int32[] ScenarioList { get; public set; }
    public string Scenarios { get; public set; }
    public FilterParams(FilterParams other);
    public void Set(FilterParams filterParams);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_StartTimeRelativeMSec();
    [CompilerGeneratedAttribute]
public void set_StartTimeRelativeMSec(string value);
    [CompilerGeneratedAttribute]
public string get_EndTimeRelativeMSec();
    [CompilerGeneratedAttribute]
public void set_EndTimeRelativeMSec(string value);
    [CompilerGeneratedAttribute]
public string get_MinInclusiveTimePercent();
    [CompilerGeneratedAttribute]
public void set_MinInclusiveTimePercent(string value);
    [CompilerGeneratedAttribute]
public string get_FoldRegExs();
    [CompilerGeneratedAttribute]
public void set_FoldRegExs(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeRegExs();
    [CompilerGeneratedAttribute]
public void set_IncludeRegExs(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeRegExs();
    [CompilerGeneratedAttribute]
public void set_ExcludeRegExs(string value);
    [CompilerGeneratedAttribute]
public string get_GroupRegExs();
    [CompilerGeneratedAttribute]
public void set_GroupRegExs(string value);
    [CompilerGeneratedAttribute]
public string get_TypePriority();
    [CompilerGeneratedAttribute]
public void set_TypePriority(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_ScenarioList();
    [CompilerGeneratedAttribute]
public void set_ScenarioList(Int32[] value);
    public string get_Scenarios();
    public void set_Scenarios(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static string EscapeRegEx(string str);
    public void WriteToXml(XmlWriter writer);
    public string ToXml();
}
public class Diagnostics.Tracing.StackSources.FilterStackSource : StackSource {
    private static FrameInfo MatchesNothing;
    private static FrameInfo Discard;
    private static FrameInfo Fold;
    private double m_minTimeRelativeMSec;
    private double m_maxTimeRelativeMSec;
    private GroupPattern[] m_groups;
    private Regex[] m_includePats;
    private Regex[] m_excludePats;
    private Regex[] m_foldPats;
    private Boolean[] m_scenarioIncluded;
    private StackSource m_baseStackSource;
    private ScalingPolicyKind m_scalingPolicy;
    private FrameInfo[] m_frameIdToFrameInfo;
    private Dictionary`2<string, StackSourceFrameIndex> m_GroupNameToFrameInfo;
    private Dictionary`2<string, FrameInfo> m_ByFrameName;
    private static int StackInfoCacheSize;
    private StackInfo[] m_stackInfoCache;
    public double SampleTimeRelativeMSecLimit { get; }
    public int ScenarioCount { get; }
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public StackSource BaseStackSource { get; }
    public bool IsGraphSource { get; }
    public int SampleIndexLimit { get; }
    public FilterStackSource(FilterParams filterParams, StackSource stackSource, ScalingPolicyKind scalingPolicy);
    private static FilterStackSource();
    public virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public virtual int GetNumberOfFoldedFrames(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool fullName);
    public virtual double get_SampleTimeRelativeMSecLimit();
    public virtual int get_ScenarioCount();
    public virtual int get_CallStackIndexLimit();
    public virtual int get_CallFrameIndexLimit();
    public virtual StackSourceSample GetSampleByIndex(StackSourceSampleIndex sampleIndex);
    public virtual StackSource get_BaseStackSource();
    public virtual bool get_IsGraphSource();
    public virtual void GetReferences(StackSourceSampleIndex nodeIndex, RefDirection dir, Action`1<StackSourceSampleIndex> callback);
    public virtual int get_SampleIndexLimit();
    private StackInfo GetStackInfo(StackSourceCallStackIndex stackIndex, RecursionGuard recursionGuard);
    private void GenerateStackInfo(StackSourceCallStackIndex stackIndex, StackInfo stackInfoRet, RecursionGuard recursionGuard);
    private FrameInfo GetFrameInfo(StackSourceFrameIndex frameIndex);
    private static GroupPattern[] ParseGroups(string groupPatternStr);
    private string FindGroupNameFromFrameName(string frameName, Boolean& isEntryGroup);
    private static Regex[] ParseRegExList(string patterns);
    private static int IsMatch(Regex[] pats, string str);
    private static Int32[] MatchSet(Regex[] pats, string str);
    private bool SameSet(Int32[] set1, Int32[] set2);
    public static string ToDotNetRegEx(string str);
}
[ExtensionAttribute]
internal static class Diagnostics.Tracing.StackSources.IndexMapExtensions : object {
    [ExtensionAttribute]
public static int SourceOf(IndexMap map, StackSourceCallStackIndex aggregate);
    [ExtensionAttribute]
public static StackSourceCallStackIndex OffsetOf(IndexMap map, int source, StackSourceCallStackIndex aggregate);
    [ExtensionAttribute]
public static StackSourceCallStackIndex IndexOf(IndexMap map, int source, StackSourceCallStackIndex offset);
    [ExtensionAttribute]
public static int SourceOf(IndexMap map, StackSourceFrameIndex aggregate);
    [ExtensionAttribute]
public static StackSourceFrameIndex OffsetOf(IndexMap map, int source, StackSourceFrameIndex aggregate);
    [ExtensionAttribute]
public static StackSourceFrameIndex IndexOf(IndexMap map, int source, StackSourceFrameIndex offset);
    [ExtensionAttribute]
public static int SourceOf(IndexMap map, StackSourceSampleIndex aggregate);
    [ExtensionAttribute]
public static StackSourceSampleIndex OffsetOf(IndexMap map, int source, StackSourceSampleIndex aggregate);
    [ExtensionAttribute]
public static StackSourceSampleIndex IndexOf(IndexMap map, int source, StackSourceSampleIndex offset);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Microsoft.Diagnostics.Symbols.ManagedSymbolModule : object {
    [CompilerGeneratedAttribute]
private string <ExePath>k__BackingField;
    private string _pdbPath;
    private SymbolReader _reader;
    private List`1<Tuple`2<string, string>> _sourceLinkMapping;
    private bool _sourceLinkMappingInited;
    public string ExePath { get; public set; }
    public string SymbolFilePath { get; }
    public Guid PdbGuid { get; }
    public int PdbAge { get; }
    public SymbolReader SymbolReader { get; }
    internal TextWriter _log { get; }
    protected ManagedSymbolModule(SymbolReader reader, string path);
    [CompilerGeneratedAttribute]
public string get_ExePath();
    [CompilerGeneratedAttribute]
public void set_ExePath(string value);
    public string get_SymbolFilePath();
    public virtual Guid get_PdbGuid();
    public virtual int get_PdbAge();
    public SymbolReader get_SymbolReader();
    public abstract virtual SourceLocation SourceLocationForManagedCode(UInt32 methodMetadataToken, int ilOffset);
    protected virtual IEnumerable`1<string> GetSourceLinkJson();
    internal TextWriter get__log();
    internal bool GetUrlForFilePathUsingSourceLink(string buildTimeFilePath, String& url, String& relativeFilePath);
    private List`1<Tuple`2<string, string>> ParseSourceLinkJson(IEnumerable`1<string> sourceLinkContents);
}
public class Microsoft.Diagnostics.Symbols.NativeSymbolModule : ManagedSymbolModule {
    private bool m_isDisposed;
    private bool m_checkedForMergedAssemblies;
    private Dictionary`2<int, string> m_mergedAssemblies;
    private string m_managedPdbName;
    private Guid m_managedPdbGuid;
    private int m_managedPdbAge;
    private ManagedSymbolModule m_managedPdb;
    private bool m_managedPdbAttempted;
    internal IDiaSession m_session;
    private SymbolReader m_reader;
    private IDiaDataSource3 m_source;
    private IDiaEnumSymbolsByAddr m_symbolsByAddr;
    private Lazy`1<IReadOnlyDictionary`2<UInt32, string>> m_heapAllocationSites;
    private static Guid guidMD5;
    private static Guid guidSHA1;
    private static Guid guidSHA256;
    public Symbol GlobalSymbol { get; }
    public Guid PdbGuid { get; }
    public int PdbAge { get; }
    internal ManagedSymbolModule PdbForSourceServer { get; }
    private NativeSymbolModule(SymbolReader reader, string pdbFilePath, Action`1<IDiaDataSource3> loadData);
    internal NativeSymbolModule(SymbolReader reader, string pdbFilePath);
    internal NativeSymbolModule(SymbolReader reader, string pdbFilePath, Stream pdbStream);
    private static NativeSymbolModule();
    public string GetTypeForHeapAllocationSite(UInt32 rva);
    public string FindNameForRva(UInt32 rva);
    public string FindNameForRva(UInt32 rva, UInt32& symbolStartRva);
    private static string GetAssemblyNameFromModuleIndex(Dictionary`2<int, string> mergedAssembliesMap, int moduleIndex, string defaultValue);
    public SourceLocation SourceLocationForRva(UInt32 rva);
    public SourceLocation SourceLocationForRva(UInt32 rva, String& ilAssemblyName, UInt32& methodMetadataToken, Int32& ilOffset);
    public virtual SourceLocation SourceLocationForManagedCode(UInt32 methodMetadataToken, int ilOffset);
    public Symbol get_GlobalSymbol();
    public virtual Guid get_PdbGuid();
    public virtual int get_PdbAge();
    internal void LogManagedInfo(string pdbName, Guid pdbGuid, int pdbAge);
    internal string GetSrcSrvStream();
    private string GetUTF8PDBStream(string name, UInt32 len);
    protected virtual IEnumerable`1<string> GetSourceLinkJson();
    internal ManagedSymbolModule get_PdbForSourceServer();
    public Dictionary`2<int, string> GetMergedAssembliesMap();
    public MemoryStream GetEmbeddedILImage();
    public MemoryStream GetPseudoAssembly();
    public Byte[] GetFuncMDTokenMap();
    public Byte[] GetTypeMDTokenMap();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<UInt32, string> <.ctor>b__14_0();
}
internal class Microsoft.Diagnostics.Symbols.PortableSymbolModule : ManagedSymbolModule {
    private static Guid SourceLinkKind;
    private static Guid EmbeddedSourceKind;
    internal MetadataReader _metaData;
    private MetadataReaderProvider _provider;
    public Guid PdbGuid { get; }
    public PortableSymbolModule(SymbolReader reader, string pdbFileName);
    public PortableSymbolModule(SymbolReader reader, Stream stream, string pdbFileName);
    private static PortableSymbolModule();
    public sealed virtual void Dispose();
    public virtual Guid get_PdbGuid();
    public virtual SourceLocation SourceLocationForManagedCode(UInt32 methodMetadataToken, int ilOffset);
    protected virtual IEnumerable`1<string> GetSourceLinkJson();
    private bool TryGetEmbeddedSource(DocumentHandle documentHandle, BlobHandle& sourceBlobHandle);
    private SourceFile GetSourceFile(DocumentHandle documentHandle);
}
public abstract class Microsoft.Diagnostics.Symbols.SourceFile : object {
    [CompilerGeneratedAttribute]
private string <BuildTimeFilePath>k__BackingField;
    protected Byte[] _hash;
    protected HashAlgorithm _hashAlgorithm;
    protected ManagedSymbolModule _symbolModule;
    protected SHA256 _sha256;
    protected string _filePath;
    private bool _getSourceCalled;
    private bool _checksumMatches;
    public string BuildTimeFilePath { get; protected set; }
    public string Url { get; }
    public bool HasChecksum { get; }
    public string ChecksumAlgorithm { get; }
    public IReadOnlyCollection`1<byte> ChecksumValue { get; }
    public bool ChecksumMatches { get; }
    protected TextWriter _log { get; }
    protected SourceFile(ManagedSymbolModule symbolModule);
    [CompilerGeneratedAttribute]
public string get_BuildTimeFilePath();
    [CompilerGeneratedAttribute]
protected void set_BuildTimeFilePath(string value);
    public virtual string get_Url();
    public virtual string GetSourceFile(bool requireChecksumMatch);
    public bool get_HasChecksum();
    public string get_ChecksumAlgorithm();
    public IReadOnlyCollection`1<byte> get_ChecksumValue();
    public bool get_ChecksumMatches();
    public virtual bool GetSourceLinkInfo(String& url, String& relativePath);
    protected TextWriter get__log();
    protected virtual string GetSourceFromSrcServer();
    private bool ProbeForBestMatch(string filePath);
    private bool ComputeChecksumMatch(string filePath);
    private Byte[] ComputeHashWithSwappedLineEndings(FileStream fs);
    private static bool ArrayEquals(Byte[] bytes1, Byte[] bytes2);
    [CompilerGeneratedAttribute]
internal static void <ComputeHashWithSwappedLineEndings>g__AppendLine|22_0(<>c__DisplayClass22_0& , <>c__DisplayClass22_1& , <>c__DisplayClass22_2& );
}
public class Microsoft.Diagnostics.Symbols.SourceLocation : object {
    [CompilerGeneratedAttribute]
private SourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumberEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumberEnd>k__BackingField;
    public SourceFile SourceFile { get; private set; }
    public int LineNumber { get; private set; }
    public int LineNumberEnd { get; private set; }
    public int ColumnNumber { get; private set; }
    public int ColumnNumberEnd { get; private set; }
    internal SourceLocation(SourceFile sourceFile, int lineNumberBegin, int lineNumberEnd, int columnNumberBegin, int columnNumberEnd);
    [CompilerGeneratedAttribute]
public SourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(SourceFile value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LineNumberEnd();
    [CompilerGeneratedAttribute]
private void set_LineNumberEnd(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumberEnd();
    [CompilerGeneratedAttribute]
private void set_ColumnNumberEnd(int value);
    private int SanitizeLineNumber(int lineNumber);
}
public class Microsoft.Diagnostics.Symbols.Symbol : object {
    private string m_name;
    private IDiaSymbol m_diaSymbol;
    private NativeSymbolModule m_module;
    public string Name { get; }
    public UInt32 RVA { get; }
    public ulong Length { get; }
    public UInt32 Id { get; }
    public string UndecoratedName { get; }
    internal Symbol(NativeSymbolModule module, IDiaSymbol diaSymbol);
    public string get_Name();
    public UInt32 get_RVA();
    public ulong get_Length();
    public UInt32 get_Id();
    public string get_UndecoratedName();
    public static bool InSameSection(Symbol a, Symbol b);
    public IEnumerable`1<Symbol> GetChildren();
    public IEnumerable`1<Symbol> GetChildren(SymTagEnum tag);
    public sealed virtual int CompareTo(Symbol other);
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Symbols.SymbolPath : object {
    private List`1<SymbolPathElement> m_elements;
    private static string s_MicrosoftSymbolServerPath;
    public static string SymbolPathFromEnvironment { get; public set; }
    public static string MicrosoftSymbolServerPath { get; }
    public ICollection`1<SymbolPathElement> Elements { get; }
    public SymbolPath(string path);
    public static string get_SymbolPathFromEnvironment();
    public static void set_SymbolPathFromEnvironment(string value);
    internal static SymbolPath CleanSymbolPath();
    public static string get_MicrosoftSymbolServerPath();
    public ICollection`1<SymbolPathElement> get_Elements();
    public SymbolPath Add(string path);
    public SymbolPath Add(SymbolPathElement elem);
    public SymbolPath Insert(string path);
    public SymbolPath Insert(SymbolPathElement elem);
    public string DefaultSymbolCache(bool localOnly);
    public SymbolPath InsureHasCache(string defaultCachePath);
    public SymbolPath LocalOnly();
    public SymbolPath CacheFirst();
    public virtual string ToString();
    public void ToXml(TextWriter writer, string indent);
    public static bool ComputerNameExists(string computerName, int timeoutMSec);
}
public class Microsoft.Diagnostics.Symbols.SymbolPathElement : object {
    [CompilerGeneratedAttribute]
private bool <IsSymServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public bool IsSymServer { get; private set; }
    public string Cache { get; private set; }
    public string Target { get; private set; }
    public bool IsRemote { get; }
    internal SymbolPathElement(bool isSymServer, string cache, string target);
    internal SymbolPathElement(string strElem);
    [CompilerGeneratedAttribute]
public bool get_IsSymServer();
    [CompilerGeneratedAttribute]
private void set_IsSymServer(bool value);
    [CompilerGeneratedAttribute]
public string get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(string value);
    public bool get_IsRemote();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal SymbolPathElement InsureHasCache(string defaultCachePath);
    internal SymbolPathElement LocalOnly();
}
public class Microsoft.Diagnostics.Symbols.SymbolReader : object {
    private SymbolReaderOptions _Options;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <SecurityCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<string, Guid, int> OnSymbolFileFound;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    private string m_SourcePath;
    internal List`1<string> m_parsedSourcePath;
    internal TextWriter m_log;
    private List`1<string> m_deadServers;
    private DateTime m_lastDeadTimeUtc;
    private string m_SymbolCacheDirectory;
    private string m_SourceCacheDirectory;
    private Cache`2<string, ManagedSymbolModule> m_symbolModuleCache;
    private Cache`2<PdbSignature, string> m_pdbPathCache;
    private string m_symbolPath;
    public string SymbolPath { get; public set; }
    public string SourcePath { get; public set; }
    public string SymbolCacheDirectory { get; }
    public string SourceCacheDirectory { get; public set; }
    public SymbolReaderOptions Options { get; public set; }
    public Func`2<string, bool> SecurityCheck { get; public set; }
    public TextWriter Log { get; }
    internal HttpClient HttpClient { get; private set; }
    internal List`1<string> ParsedSourcePath { get; }
    public SymbolReader(TextWriter log, string nt_symbol_path, DelegatingHandler httpClientDelegatingHandler);
    public string FindSymbolFilePathForModule(string dllFilePath, bool ilPDB);
    public string FindSymbolFilePath(string pdbFileName, Guid pdbIndexGuid, int pdbIndexAge, string dllFilePath, string fileVersion, bool portablePdbMatch);
    public string FindExecutableFilePath(string fileName, int buildTimestamp, int sizeOfImage, bool sybmolServerOnly);
    public ManagedSymbolModule OpenSymbolFile(string pdbFilePath);
    public NativeSymbolModule OpenNativeSymbolFile(string pdbFileName);
    public string get_SymbolPath();
    public void set_SymbolPath(string value);
    public string get_SourcePath();
    public void set_SourcePath(string value);
    public string get_SymbolCacheDirectory();
    public string get_SourceCacheDirectory();
    public void set_SourceCacheDirectory(string value);
    public SymbolReaderOptions get_Options();
    public void set_Options(SymbolReaderOptions value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_SecurityCheck();
    [CompilerGeneratedAttribute]
public void set_SecurityCheck(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public void add_OnSymbolFileFound(Action`3<string, Guid, int> value);
    [CompilerGeneratedAttribute]
public void remove_OnSymbolFileFound(Action`3<string, Guid, int> value);
    public TextWriter get_Log();
    [CompilerGeneratedAttribute]
internal HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
private void set_HttpClient(HttpClient value);
    public string GenerateNGenSymbolsForModule(string ngenImageFullPath, string outputDirectory);
    private string HandleNetCorePdbs(string ngenImageFullPath, string pdbPath);
    private static string getNugetPackageDir();
    private string GetCrossGenExePath(string ngenImageFullPath);
    private void InsurePathIsInNIC(TextWriter log, String& ngenImageFullPath);
    public sealed virtual void Dispose();
    private bool PdbMatches(string filePath, Guid pdbGuid, int pdbAge, bool checkSecurity);
    internal bool GetPhysicalFileFromServer(string serverPath, string pdbIndexPath, string fullDestPath, Predicate`1<string> contentTypeFilter);
    private string BuildFullUri(string serverPath, string pdbIndexPath);
    private long CopyStreamToFile(Stream fromStream, string fromUri, string fullDestPath, Boolean& canceled);
    private string GetFileFromServer(string urlForServer, string fileIndexPath, string targetPath);
    private static string GetClrDirectoryForNGenImage(string ngenImagePath, TextWriter log, String& privateRuntimeVerStr);
    internal List`1<string> get_ParsedSourcePath();
    private bool CheckSecurity(string pdbName);
    internal static string BypassSystem32FileRedirection(string path);
    [CompilerGeneratedAttribute]
private bool <GetFileFromServer>b__44_0(string contentType);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Symbols.SymbolReaderOptions : Enum {
    public int value__;
    public static SymbolReaderOptions None;
    public static SymbolReaderOptions CacheOnly;
    public static SymbolReaderOptions NoNGenSymbolCreation;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.ActivityComputer : object {
    [CompilerGeneratedAttribute]
private Action`2<TraceActivity, TraceEvent> Create;
    [CompilerGeneratedAttribute]
private Action`2<TraceActivity, TraceEvent> Start;
    [CompilerGeneratedAttribute]
private Action`2<TraceActivity, TraceEvent> Stop;
    [CompilerGeneratedAttribute]
private Action`3<TraceActivity, TraceEvent, TraceThread> AfterStop;
    [CompilerGeneratedAttribute]
private Action`2<TraceActivity, TraceEvent> AwaitUnblocks;
    public bool NoCache;
    private MethodFlags[] m_methodFlags;
    private Boolean[] m_threadNeedsToAutoStart;
    private TraceActivity[] m_threadToCurrentActivity;
    private Dictionary`2<ulong, TraceActivity> m_rawIDToActivity;
    private GrowableArray`1<TraceActivity> m_indexToActivity;
    private GrowableArray`1<StackSourceCallStackIndex> m_activityStackCache;
    private GrowableArray`1<List`1<TraceActivity>> m_beginWaits;
    private TraceEventDispatcher m_source;
    private TraceLog m_eventLog;
    private SymbolReader m_symbolReader;
    private MutableTraceEventStackSource m_outputSource;
    private TraceEvent m_curEvent;
    private GCReferenceComputer m_gcReferenceComputer;
    private CallStackCache m_callStackCache;
    public TraceLog Log { get; }
    public TraceActivity Item { get; }
    public ActivityComputer(TraceLogEventSource source, SymbolReader reader, GCReferenceComputer gcReferenceComputer);
    public TraceLog get_Log();
    [CompilerGeneratedAttribute]
public void add_Create(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void remove_Create(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void add_Start(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void remove_Start(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void add_Stop(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void remove_Stop(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void add_AfterStop(Action`3<TraceActivity, TraceEvent, TraceThread> value);
    [CompilerGeneratedAttribute]
public void remove_AfterStop(Action`3<TraceActivity, TraceEvent, TraceThread> value);
    [CompilerGeneratedAttribute]
public void add_AwaitUnblocks(Action`2<TraceActivity, TraceEvent> value);
    [CompilerGeneratedAttribute]
public void remove_AwaitUnblocks(Action`2<TraceActivity, TraceEvent> value);
    public TraceActivity GetCurrentActivity(TraceThread thread);
    public TraceActivity GetActivityRepresentingThread(TraceThread thread);
    public TraceActivity get_Item(ActivityIndex index);
    public StackSourceCallStackIndex GetCallStack(MutableTraceEventStackSource outputStackSource, TraceEvent data, Func`2<TraceThread, StackSourceCallStackIndex> topFrames, bool trimEtwFrames);
    public StackSourceCallStackIndex GetCallStackForActivity(MutableTraceEventStackSource outputStackSource, TraceActivity activity, Func`2<TraceThread, StackSourceCallStackIndex> topFrames);
    public StackSourceCallStackIndex GetActivityStack(MutableTraceEventStackSource outputStackSource, TraceActivity activity);
    private void AutoRestartIfNecessary(TraceEvent data);
    private void AutoRestart(TraceEvent data, TraceThread thread);
    internal static bool IsThreadParkedInThreadPool(TraceLog eventLog, CallStackIndex callStackIndex);
    private static bool NeedsImplicitCompletion(ActivityKind kind);
    private static ActivityKind ToActivityKind(ThreadTransferKind threadTransferKind);
    private TraceActivity OnCreated(TraceEvent data, ulong rawScheduledActivityId, ActivityKind kind);
    private void OnStart(TraceEvent data, ulong rawActivityId, bool isAwaitEnd);
    private void OnStop(TraceEvent data, TraceActivity activity, TraceThread thread);
    private static ulong GetTPLRawID(TraceEvent data, int taskID, IDType idType);
    private static ulong GetTimerRawID(TraceEvent data, GCReferenceID gcReference);
    private static ulong GetClrIORawID(TraceEvent data, ulong nativeOverlapped);
    private static ulong GetClrRawID(TraceEvent data, ulong workId);
    private static IDType GetTypeFromRawID(ulong rawID);
    private StackSourceCallStackIndex GetCallStackWithActivityFrames(CallStackIndex baseStack, TraceActivity activity, Func`2<TraceThread, StackSourceCallStackIndex> topFrames);
    private CallStackIndex TrimETWFrames(CallStackIndex callStackIndex);
    private StackSourceFrameIndex IsRecursiveTask(CallStackIndex startStack, CallStackIndex stopStack, StackSourceCallStackIndex baseStack);
    private StackSourceCallStackIndex SpliceStack(CallStackIndex startStack, CallStackIndex stopStack, StackSourceCallStackIndex baseStack);
    private CallStackIndex FindThreadPoolTransition(CallStackIndex callStackIndex);
    private void ResolveWellKnownSymbols();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(TaskScheduledArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(TaskStartedArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_2(TaskCompletedArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_3(AwaitTaskContinuationScheduledArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_4(TaskWaitSendArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_5(TaskWaitStopArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_6(ThreadTransferSendArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_7(ThreadTransferReceiveArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_8(ThreadPoolEnqueueWorkArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_9(ThreadPoolDequeueWorkArgs data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_10(ThreadPoolWorkerThreadTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_11(ThreadPoolIOWorkEnqueueTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_12(ThreadPoolIOWorkTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_13(ThreadPoolIOWorkTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_14(ThreadPoolWorkTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_15(ThreadPoolWorkTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_16(TraceEvent data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_17(CSwitchTraceData data);
}
internal class Microsoft.Diagnostics.Tracing.Analysis.CircularBuffer`1 : object {
    private int StartIndex;
    private int AfterEndIndex;
    private int Size;
    private T[] Items;
    public CircularBuffer`1(int size);
    public void Add(T item);
    private int Next(int i);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Analysis.CircularBuffer`1/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.BGCAllocWaitInfo : object {
    public double WaitStartRelativeMSec;
    public double WaitStopRelativeMSec;
    public BGCAllocWaitReason Reason;
    public bool GetWaitTime(Double& pauseMSec);
    public bool IsLOHWaitLong(double pauseMSecMin);
    public virtual string ToString();
}
public enum Microsoft.Diagnostics.Tracing.Analysis.GC.CondemnedReasonGroup : Enum {
    public int value__;
    public static CondemnedReasonGroup Initial_Generation;
    public static CondemnedReasonGroup Final_Generation;
    public static CondemnedReasonGroup Alloc_Exceeded;
    public static CondemnedReasonGroup Time_Tuning;
    public static CondemnedReasonGroup Induced;
    public static CondemnedReasonGroup Low_Ephemeral;
    public static CondemnedReasonGroup Expand_Heap;
    public static CondemnedReasonGroup Fragmented_Ephemeral;
    public static CondemnedReasonGroup Fragmented_Gen1_To_Gen2;
    public static CondemnedReasonGroup Fragmented_Gen2;
    public static CondemnedReasonGroup Fragmented_Gen2_High_Mem;
    public static CondemnedReasonGroup GC_Before_OOM;
    public static CondemnedReasonGroup Too_Small_For_BGC;
    public static CondemnedReasonGroup Ephemeral_Before_BGC;
    public static CondemnedReasonGroup Internal_Tuning;
    public static CondemnedReasonGroup Almost_Max_Alloc;
    public static CondemnedReasonGroup Avoid_Unproductive;
    public static CondemnedReasonGroup Pm_Induced_Fullgc_p;
    public static CondemnedReasonGroup Pm_Alloc_LOH;
    public static CondemnedReasonGroup Gen1_In_Pm;
    public static CondemnedReasonGroup Limit_Before_OOM;
    public static CondemnedReasonGroup Limit_LOH_Frag;
    public static CondemnedReasonGroup Limit_LOH_Reclaim;
    public static CondemnedReasonGroup Servo_Initial;
    public static CondemnedReasonGroup Servo_NGC;
    public static CondemnedReasonGroup Servo_BGC;
    public static CondemnedReasonGroup Servo_Postpone;
    public static CondemnedReasonGroup Stress_Mix;
    public static CondemnedReasonGroup Stress;
    public static CondemnedReasonGroup Max;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.EncodedCondemnedReasons : ValueType {
    public int Reasons;
    public int ReasonsEx;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.FreeListEfficiency : object {
    public bool Valid;
    public double Allocated;
    public double FreeListConsumed;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GCCondemnedReasons : object {
    public EncodedCondemnedReasons EncodedReasons;
    public Byte[] CondemnedReasonGroups;
    public void Decode(int Version);
    private int GetReasonWithGenNumber(Condemned_Reason_Generation Reason_GenNumber);
    private bool GetReasonWithCondition(Condemned_Reason_Condition Reason_Condition, int Version);
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GCGlobalHeapHistory : object {
    public long FinalYoungestDesired;
    public int NumHeaps;
    public int CondemnedGeneration;
    public int Gen0ReductionCount;
    public GCReason Reason;
    public GCGlobalMechanisms GlobalMechanisms;
    public GCPauseMode PauseMode;
    public int MemoryPressure;
    public bool HasMemoryPressure;
    public int CondemnReasons0;
    public bool HasCondemnReasons0;
    public int CondemnReasons1;
    public bool HasCondemnReasons1;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GCHeapStats : object {
    public long TotalHeapSize;
    public long TotalPromoted;
    public int Depth;
    public long GenerationSize0;
    public long TotalPromotedSize0;
    public long GenerationSize1;
    public long TotalPromotedSize1;
    public long GenerationSize2;
    public long TotalPromotedSize2;
    public long GenerationSize3;
    public long TotalPromotedSize3;
    public long GenerationSize4;
    public long TotalPromotedSize4;
    public long FinalizationPromotedSize;
    public long FinalizationPromotedCount;
    public int PinnedObjectCount;
    public int SinkBlockCount;
    public int GCHandleCount;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GcJoin : object {
    public int Heap;
    public double RelativeTimestampMsc;
    public double AbsoluteTimestampMsc;
    public GcJoinType Type;
    public GcJoinTime Time;
    public int JoinID;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GCPerHeapHistory : object {
    public int MemoryPressure;
    public bool HasMemoryPressure;
    public bool VersionRecognized;
    public long FreeListAllocated;
    public bool HasAllocatedInfo;
    public long FreeListRejected;
    public long EndOfSegAllocated;
    public long CondemnedAllocated;
    public long PinnedAllocated;
    public long PinnedAllocatedAdvance;
    public int RunningFreeListEfficiency;
    public int CondemnReasons0;
    public int CondemnReasons1;
    public bool HasCondemnReasons1;
    public int CompactMechanisms;
    public int ExpandMechanisms;
    public long ExtraGen0Commit;
    public bool HasExtraGen0Commit;
    public int Version;
    public GCPerHeapHistoryGenData[] GenData;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GCStats : object {
    public int Count;
    public int NumInduced;
    public long PinnedObjectSizes;
    public int PinnedObjectPercentage;
    public long NumWithPinEvents;
    public long NumWithPinPlugEvents;
    public double MaxPauseDurationMSec;
    public double TotalPauseTimeMSec;
    public double MaxSuspendDurationMSec;
    public double MaxSizePeakMB;
    public double MaxAllocRateMBSec;
    public double TotalAllocatedMB;
    public double TotalCpuMSec;
    public double TotalPromotedMB;
    public double TotalSizeAfterMB;
    public double TotalSizePeakMB;
    public Dictionary`2<string, long> FinalizedObjects;
    public double ProcessDuration;
    [CompilerGeneratedAttribute]
private bool <GCVersionInfoMismatch>k__BackingField;
    public int IsServerGCUsed;
    public int HeapCount;
    public bool HasDetailedGCInfo;
    internal Double[] allocTickCurrentMB;
    internal Double[] allocTickAtLastGC;
    internal bool HasAllocTickEvents;
    internal bool SeenBadAllocTick;
    internal double lastRestartEndTimeRelativeMSec;
    internal TraceGC currentBGC;
    internal Dictionary`2<int, int> ThreadId2Priority;
    internal Dictionary`2<int, int> ServerGcHeap2ThreadId;
    internal int suspendThreadIDOther;
    internal int suspendThreadIDBGC;
    internal int suspendThreadIDGC;
    internal double suspendTimeRelativeMSec;
    internal double suspendEndTimeRelativeMSec;
    internal GCSuspendEEReason lastSuspendReason;
    internal double ProcessCpuAtLastGC;
    internal Dictionary`2<int, object> backgroundGCThreads;
    internal TraceGC lastCompletedGC;
    internal bool gotThreadInfo;
    internal Dictionary`2<int, int> serverGCThreads;
    public double MeanPauseDurationMSec { get; }
    public double MeanSizeAfterMB { get; }
    public double MeanSizePeakMB { get; }
    public double MeanCpuMSec { get; }
    public bool Interesting { get; }
    public bool GCVersionInfoMismatch { get; private set; }
    public double get_MeanPauseDurationMSec();
    public double get_MeanSizeAfterMB();
    public double get_MeanSizePeakMB();
    public double get_MeanCpuMSec();
    public bool get_Interesting();
    public double GetGCPauseTimePercentage();
    [CompilerGeneratedAttribute]
public bool get_GCVersionInfoMismatch();
    [CompilerGeneratedAttribute]
private void set_GCVersionInfoMismatch(bool value);
    private static TraceGC GetLastGC(TraceLoadedDotNetRuntime proc);
    internal static TraceGC GetLastBGC(TraceLoadedDotNetRuntime proc);
    internal void AddConcurrentPauseTime(TraceGC _event, double RestartEEMSec);
    internal void AddServerGCThreadFromMark(int ThreadID, int HeapNum);
    internal static void ProcessGlobalHistory(TraceLoadedDotNetRuntime proc, GCGlobalHeapHistoryTraceData data);
    internal static void ProcessPerHeapHistory(TraceLoadedDotNetRuntime proc, GCPerHeapHistoryTraceData data);
    internal bool IsBGCThread(int threadID);
    internal int IsServerGCThread(int threadID);
    internal void SetUpServerGcHistory(int id, TraceGC gc);
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.GcWorkSpan : ThreadWorkSpan {
    public WorkSpanType Type;
    public double RelativeTimestampMsc;
    public GcWorkSpan(ThreadWorkSpan span);
}
public enum Microsoft.Diagnostics.Tracing.Analysis.GC.InducedType : Enum {
    public int value__;
    public static InducedType Blocking;
    public static InducedType NotForced;
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.MarkInfo : object {
    public Double[] MarkTimes;
    public Int64[] MarkPromoted;
    public MarkInfo(bool initPromoted);
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.ServerGcHistory : object {
    public int HeapId;
    public int ProcessId;
    public int GcWorkingThreadId;
    public int GcWorkingThreadPriority;
    public List`1<GcWorkSpan> SwitchSpans;
    public List`1<GcWorkSpan> SampleSpans;
    public List`1<GcJoin> GcJoins;
    internal void AddSampleEvent(ThreadWorkSpan sample, double pauseStartRelativeMSec);
    internal void AddSwitchEvent(ThreadWorkSpan switchData, double pauseStartRelativeMSec);
    internal void GCEnd(double pauseDurationMSec);
    private WorkSpanType GetSpanType(ThreadWorkSpan span);
    internal void AddJoin(GCJoinTraceData data, double pauseStartRelativeMSec);
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.ThreadWorkSpan : object {
    public int ThreadId;
    public int ProcessId;
    public string ProcessName;
    public int ProcessorNumber;
    public double AbsoluteTimestampMsc;
    public double DurationMsc;
    public int Priority;
    public int WaitReason;
    public ThreadWorkSpan(CSwitchTraceData switchData);
    public ThreadWorkSpan(ThreadWorkSpan span);
    public ThreadWorkSpan(SampledProfileTraceData sample);
}
public class Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC : object {
    public int Number;
    public GCType Type;
    public GCReason Reason;
    public int Generation;
    public double StartRelativeMSec;
    public double DurationMSec;
    public double PauseDurationMSec;
    public double SuspendDurationMSec;
    public double ProcessCpuMSec;
    public double GCCpuMSec;
    public Dictionary`2<int, MarkInfo> PerHeapMarkTimes;
    internal bool fMarkTimesConverted;
    public double DurationSinceLastRestartMSec;
    public double PauseStartRelativeMSec;
    public bool IsComplete;
    public BGCPhase BGCCurrentPhase;
    public BGCRevisitInfo[][] BGCRevisitInfoArr;
    public double BGCFinalPauseMSec;
    public List`1<ServerGcHistory> ServerGcHeapHistories;
    public Double[] AllocedSinceLastGCBasedOnAllocTickMB;
    [CompilerGeneratedAttribute]
private int <HeapCount>k__BackingField;
    public List`1<GCPerHeapHistory> PerHeapHistories;
    public long TotalPinnedPlugSize;
    public long TotalUserPinnedPlugSize;
    public GCHeapStats HeapStats;
    public Dictionary`2<int, BGCAllocWaitInfo> LOHWaitThreads;
    public GCGlobalHeapHistory GlobalHeapHistory;
    public FreeListEfficiency FreeList;
    public double AllocedSinceLastGCMB;
    public double RatioPeakAfter;
    public double AllocRateMBSec;
    public double HeapSizePeakMB;
    public Double[] UserAllocated;
    public double HeapSizeBeforeMB;
    public Double[] GenSizeBeforeMB;
    public double PauseTimePercentageSinceLastGC;
    internal bool IsConcurrentGC;
    internal Dictionary`2<ulong, long> PinnedObjects;
    internal int Index;
    internal bool is20Event;
    internal double ProcessCpuAtLastGC;
    internal bool HasAllocTickEvents;
    internal List`1<PinnedPlug> PinnedPlugs;
    private long pinnedObjectSizes;
    internal long duplicatedPinningReports;
    private GCCondemnedReasons[] _PerHeapCondemnedReasons;
    private GCCondemnedReasons _GlobalCondemnedReasons;
    private double _TotalGCTimeMSec;
    private Single[] GCCpuServerGCThreads;
    public double PercentTimeInGC { get; }
    public int HeapCount { get; private set; }
    public int GenerationCount { get; }
    public object GCGenerationName { get; }
    public double HeapSizeAfterMB { get; }
    public double PromotedMB { get; }
    public GCCondemnedReasons GlobalCondemnedReasons { get; }
    public GCCondemnedReasons[] PerHeapCondemnedReasons { get; }
    public TraceGC(int heapCount);
    public double get_PercentTimeInGC();
    public void EnsureBGCRevisitInfoAlloc();
    [CompilerGeneratedAttribute]
public int get_HeapCount();
    [CompilerGeneratedAttribute]
private void set_HeapCount(int value);
    public int get_GenerationCount();
    public long GetPinnedObjectSizes();
    public int GetPinnedObjectPercentage();
    public double GetTotalGCTime();
    public object get_GCGenerationName();
    public double get_HeapSizeAfterMB();
    public double get_PromotedMB();
    public double SurvivalPercent(Gens gen);
    public double GenSizeAfterMB(Gens gen);
    public double GenFragmentationMB(Gens gen);
    public double GenFragmentationPercent(Gens gen);
    public double GenInMB(Gens gen);
    public double GenOutMB(Gens gen);
    public double GenPromotedMB(Gens gen);
    public double GenBudgetMB(Gens gen);
    public double GenObjSizeAfterMB(Gens gen);
    public GCCondemnedReasons get_GlobalCondemnedReasons();
    public GCCondemnedReasons[] get_PerHeapCondemnedReasons();
    public int FindFirstHighestCondemnedHeap();
    public bool IsLowEphemeral();
    public bool IsNotCompacting();
    public void GetCondemnedReasons(Dictionary`2<CondemnedReasonGroup, int> ReasonsInfo);
    internal void OnEnd(TraceGarbageCollector details);
    internal static double GetProcessDuration(GCStats stats, List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetPauseTimePercentageSinceLastGC(List`1<TraceGC> GCs, TraceGC gc);
    internal static FreeListEfficiency GetFreeListEfficiency(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetAllocedSinceLastGCMB(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetRatioPeakAfter(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetAllocRateMBSec(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetHeapSizePeakMB(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetUserAllocated(List`1<TraceGC> GCs, TraceGC gc, Gens gen);
    internal static double GetHeapSizeBeforeMB(List`1<TraceGC> GCs, TraceGC gc);
    internal static double GetGenSizeBeforeMB(List`1<TraceGC> GCs, TraceGC gc, Gens gen);
    private static double GetUserAllocatedPerHeap(List`1<TraceGC> GCs, TraceGC gc, int HeapIndex, Gens gen);
    private static double EstimateAllocSurv0(List`1<TraceGC> GCs, TraceGC gc, int HeapIndex, Gens gen);
    internal void SetHeapCount(int count);
    internal void AddServerGCThreadTime(int heapIndex, float cpuMSec);
    internal void AddServerGcThreadSwitch(ThreadWorkSpan cswitch);
    internal void AddServerGcSample(ThreadWorkSpan sample);
    internal void AddGcJoin(GCJoinTraceData data);
    internal void BlockingGCEnd();
    private void ConvertMarkTimes();
    private bool CondemnedReasonGroupSet(CondemnedReasonGroup Group);
    private void AddCondemnedReason(Dictionary`2<CondemnedReasonGroup, int> ReasonsInfo, CondemnedReasonGroup Reason);
    internal void AddLOHWaitThreadInfo(int TID, double time, int reason, bool IsStart);
}
public enum Microsoft.Diagnostics.Tracing.Analysis.GC.WorkSpanType : Enum {
    public int value__;
    public static WorkSpanType GcThread;
    public static WorkSpanType RivalThread;
    public static WorkSpanType LowPriThread;
    public static WorkSpanType Idle;
}
public enum Microsoft.Diagnostics.Tracing.Analysis.JIT.CompilationThreadKind : Enum {
    public int value__;
    public static CompilationThreadKind Foreground;
    public static CompilationThreadKind MulticoreJitBackground;
    public static CompilationThreadKind TieredCompilationBackground;
}
public class Microsoft.Diagnostics.Tracing.Analysis.JIT.InliningFailureResult : ValueType {
    public string MethodBeingCompiled;
    public string Inliner;
    public string Inlinee;
    public string Reason;
}
public class Microsoft.Diagnostics.Tracing.Analysis.JIT.InliningSuccessResult : ValueType {
    public string MethodBeingCompiled;
    public string Inliner;
    public string Inlinee;
}
public class Microsoft.Diagnostics.Tracing.Analysis.JIT.JITStats : object {
    public long Count;
    public double TotalCpuTimeMSec;
    public long CountForeground;
    public double TotalForegroundCpuTimeMSec;
    public long CountBackgroundMultiCoreJit;
    public double TotalBackgroundMultiCoreJitCpuTimeMSec;
    public long CountBackgroundTieredCompilation;
    public double TotalBackgroundTieredCompilationCpuTimeMSec;
    public long TotalILSize;
    public long TotalNativeSize;
    public long TotalHotCodeAllocSize;
    public long TotalRODataAllocSize;
    public long TotalAllocSizeForJitCode;
    public bool IsJitAllocSizePresent;
    public bool IsClr4;
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public double BackgroundJitAbortedAtMSec;
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public string LastAssemblyLoadNameBeforeAbort;
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public double LastAssemblyLoadBeforeAbortMSec;
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public bool LastAssemblyLoadBeforeAbortSuccessful;
    public int BackgroundJitThread;
    public bool BackgroundJITEventsOn;
    public bool HasAtLeastOneKnownOptimizationTier;
    public List`1<InliningSuccessResult> InliningSuccesses;
    public List`1<InliningFailureResult> InliningFailures;
    public HashSet`1<string> RecordedModules;
    public HashSet`1<string> SymbolsMissing;
    internal string LastBlockedReason;
    internal bool warnedUser;
    internal bool playbackAborted;
    internal Dictionary`2<MethodKey, TraceJittedMethod> backgroundJitEvents;
    internal Dictionary`2<long, string> moduleNamesFromID;
    public bool Interesting { get; }
    public bool get_Interesting();
    public void AddMethodToStatistics(TraceJittedMethod method);
    internal static TraceJittedMethod MethodComplete(TraceLoadedDotNetRuntime stats, MethodLoadUnloadTraceDataBase data, string methodName, int rejitID, Boolean& createdNewMethod);
    internal static void LogJitMethodAllocation(TraceLoadedDotNetRuntime stats, MethodJitMemoryAllocatedForCodeTraceData data);
    internal TraceJittedMethod LogJitStart(TraceLoadedDotNetRuntime proc, TraceEvent data, string methodName, int ILSize, long moduleID, long methodID);
    internal static string GetMethodName(MethodJittingStartedTraceData data);
    internal static string GetMethodName(R2RGetEntryPointTraceData data);
    internal static string GetMethodName(MethodLoadUnloadVerboseTraceData data);
    private TraceJittedMethod FindIncompleteJitEventOnThread(TraceLoadedDotNetRuntime proc, int threadID);
}
public class Microsoft.Diagnostics.Tracing.Analysis.JIT.TraceJittedMethod : object {
    public double CompileCpuTimeMSec;
    public int ILSize;
    public int NativeSize;
    public long JitHotCodeRequestSize;
    public long JitRODataRequestSize;
    public long AllocatedSizeForJitCode;
    public int JitAllocFlag;
    public double StartTimeMSec;
    public string MethodName;
    public string ModuleILPath;
    public int ThreadID;
    public CompilationThreadKind CompilationThreadKind;
    public double RunCpuTimeMSec;
    [CompilerGeneratedAttribute]
private OptimizationTier <OptimizationTier>k__BackingField;
    public int VersionID;
    [CompilerGeneratedAttribute]
private bool <IsJitAllocSizePresent>k__BackingField;
    internal double ForegroundMethodRequestTimeMSec;
    internal string _blockedReason;
    internal int Completed;
    internal long ModuleID;
    [ObsoleteAttribute("Use CompilationThreadKind")]
public bool IsBackground { get; }
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public double DistanceAhead { get; }
    [ObsoleteAttribute("This is experimental, you should not use it yet for non-experimental purposes.")]
public string BlockedReason { get; public set; }
    public OptimizationTier OptimizationTier { get; private set; }
    public bool IsDefaultVersion { get; }
    public bool IsJitAllocSizePresent { get; public set; }
    public bool get_IsBackground();
    public double get_DistanceAhead();
    public string get_BlockedReason();
    public void set_BlockedReason(string value);
    [CompilerGeneratedAttribute]
public OptimizationTier get_OptimizationTier();
    [CompilerGeneratedAttribute]
private void set_OptimizationTier(OptimizationTier value);
    public bool get_IsDefaultVersion();
    [CompilerGeneratedAttribute]
public bool get_IsJitAllocSizePresent();
    [CompilerGeneratedAttribute]
public void set_IsJitAllocSizePresent(bool value);
    internal void SetOptimizationTier(OptimizationTier optimizationTier, TraceLoadedDotNetRuntime stats);
}
public enum Microsoft.Diagnostics.Tracing.Analysis.ProcessIndex : Enum {
    public int value__;
    public static ProcessIndex Invalid;
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceEvents : object {
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceGarbageCollector : object {
    internal List`1<TraceGC> m_gcs;
    private GCStats[] m_generations;
    internal GCStats m_stats;
    private int m_prvcount;
    private int m_prvCompleted;
    internal double NextRelativeTimeStampMsec;
    public List`1<TraceGC> GCs { get; }
    public GCStats Stats();
    public GCStats[] Generations();
    public List`1<TraceGC> get_GCs();
    internal static TraceGC GetCurrentGC(TraceLoadedDotNetRuntime proc);
    private void Calculate();
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceJitCompiler : object {
    internal JITStats m_stats;
    internal List`1<TraceJittedMethod> m_methods;
    internal double NextRelativeTimeStampMsec;
    public List`1<TraceJittedMethod> Methods { get; }
    public JITStats Stats();
    public List`1<TraceJittedMethod> get_Methods();
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceLoadedDotNetRuntime : object {
    [CompilerGeneratedAttribute]
private StartupFlags <StartupFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <RuntimeBuiltTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceGarbageCollector <GC>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<TraceProcess, TraceGC> GCStart;
    [CompilerGeneratedAttribute]
private Action`2<TraceProcess, TraceGC> GCEnd;
    [CompilerGeneratedAttribute]
private TraceJitCompiler <JIT>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<TraceProcess, TraceJittedMethod> JITMethodStart;
    [CompilerGeneratedAttribute]
private Action`2<TraceProcess, TraceJittedMethod> JITMethodEnd;
    public bool HasAnyKnownOptimizationTier;
    public bool IsTieredCompilationEnabled;
    private Version runtimeVersion;
    public string RuntimeVersion { get; }
    public StartupFlags StartupFlags { get; internal set; }
    public DateTime RuntimeBuiltTime { get; internal set; }
    public TraceGarbageCollector GC { get; }
    public TraceJitCompiler JIT { get; }
    internal TraceLoadedDotNetRuntime(TraceProcess proc);
    public string get_RuntimeVersion();
    [CompilerGeneratedAttribute]
public StartupFlags get_StartupFlags();
    [CompilerGeneratedAttribute]
internal void set_StartupFlags(StartupFlags value);
    [CompilerGeneratedAttribute]
public DateTime get_RuntimeBuiltTime();
    [CompilerGeneratedAttribute]
internal void set_RuntimeBuiltTime(DateTime value);
    [CompilerGeneratedAttribute]
public TraceGarbageCollector get_GC();
    [CompilerGeneratedAttribute]
public void add_GCStart(Action`2<TraceProcess, TraceGC> value);
    [CompilerGeneratedAttribute]
public void remove_GCStart(Action`2<TraceProcess, TraceGC> value);
    [CompilerGeneratedAttribute]
public void add_GCEnd(Action`2<TraceProcess, TraceGC> value);
    [CompilerGeneratedAttribute]
public void remove_GCEnd(Action`2<TraceProcess, TraceGC> value);
    [CompilerGeneratedAttribute]
public TraceJitCompiler get_JIT();
    [CompilerGeneratedAttribute]
public void add_JITMethodStart(Action`2<TraceProcess, TraceJittedMethod> value);
    [CompilerGeneratedAttribute]
public void remove_JITMethodStart(Action`2<TraceProcess, TraceJittedMethod> value);
    [CompilerGeneratedAttribute]
public void add_JITMethodEnd(Action`2<TraceProcess, TraceJittedMethod> value);
    [CompilerGeneratedAttribute]
public void remove_JITMethodEnd(Action`2<TraceProcess, TraceJittedMethod> value);
    public virtual string ToString();
    internal static void SetupCallbacks(TraceEventDispatcher source);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.Analysis.TraceLoadedDotNetRuntimeExtensions : object {
    private static WeakReference m_weakCurrentSource;
    private static TraceLoadedDotNetRuntimeExtensions();
    [ExtensionAttribute]
public static void NeedLoadedDotNetRuntimes(TraceEventDispatcher source);
    [ExtensionAttribute]
public static TraceLoadedDotNetRuntime LoadedDotNetRuntime(TraceProcess process);
    [ExtensionAttribute]
public static void AddCallbackOnDotNetRuntimeLoad(TraceProcess process, Action`1<TraceLoadedDotNetRuntime> OnDotNetRuntimeLoaded);
    [ExtensionAttribute]
public static void SetMutableTraceEventStackSource(TraceProcess process, MutableTraceEventStackSource stackSource);
    [ExtensionAttribute]
public static MutableTraceEventStackSource MutableTraceEventStackSource(TraceProcess process);
    [ExtensionAttribute]
public static bool HasMutableTraceEventStackSource(TraceEventDispatcher source);
    [ExtensionAttribute]
internal static void OnDotNetRuntimeLoaded(TraceProcess process, TraceLoadedDotNetRuntime runtime);
    [ExtensionAttribute]
internal static void OnDotNetRuntimeUnloaded(TraceProcess process);
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceLoadedModules : object {
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceLog : object {
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceProcess : object {
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessIndex <ProcessIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartTimeRelativeMsec>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndTimeRelativeMsec>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentID>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceProcess <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExitStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CPUMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is64Bit>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PeakWorkingSet>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PeakVirtual>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TraceThread> <Threads>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLoadedModules <LoadedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEvents <EventsInProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEvents <EventsDuringProcess>k__BackingField;
    internal string name;
    internal long firstEventSeenQPC;
    internal long startTimeQPC;
    internal long endTimeQPC;
    internal TraceEventDispatcher Source;
    public int ProcessID { get; internal set; }
    public ProcessIndex ProcessIndex { get; internal set; }
    public string Name { get; internal set; }
    public string CommandLine { get; internal set; }
    public string ImageFileName { get; internal set; }
    public DateTime StartTime { get; private set; }
    public double StartTimeRelativeMsec { get; internal set; }
    public DateTime EndTime { get; private set; }
    public double EndTimeRelativeMsec { get; internal set; }
    public int ParentID { get; internal set; }
    public TraceProcess Parent { get; private set; }
    public Nullable`1<int> ExitStatus { get; internal set; }
    public float CPUMSec { get; internal set; }
    public bool Is64Bit { get; internal set; }
    public TraceLog Log { get; public set; }
    public double PeakWorkingSet { get; internal set; }
    public double PeakVirtual { get; internal set; }
    public IEnumerable`1<TraceThread> Threads { get; private set; }
    public TraceLoadedModules LoadedModules { get; private set; }
    public TraceEvents EventsInProcess { get; private set; }
    public TraceEvents EventsDuringProcess { get; private set; }
    internal TraceProcess(int processID, ProcessIndex processIndex);
    internal TraceProcess(int processID, TraceLog log, ProcessIndex processIndex, TraceEventDispatcher source);
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    [CompilerGeneratedAttribute]
internal void set_ProcessID(int value);
    [CompilerGeneratedAttribute]
public ProcessIndex get_ProcessIndex();
    [CompilerGeneratedAttribute]
internal void set_ProcessIndex(ProcessIndex value);
    public string get_Name();
    internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
internal void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public string get_ImageFileName();
    [CompilerGeneratedAttribute]
internal void set_ImageFileName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
private void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public double get_StartTimeRelativeMsec();
    [CompilerGeneratedAttribute]
internal void set_StartTimeRelativeMsec(double value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(DateTime value);
    [CompilerGeneratedAttribute]
public double get_EndTimeRelativeMsec();
    [CompilerGeneratedAttribute]
internal void set_EndTimeRelativeMsec(double value);
    [CompilerGeneratedAttribute]
public int get_ParentID();
    [CompilerGeneratedAttribute]
internal void set_ParentID(int value);
    [CompilerGeneratedAttribute]
public TraceProcess get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TraceProcess value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExitStatus();
    [CompilerGeneratedAttribute]
internal void set_ExitStatus(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public float get_CPUMSec();
    [CompilerGeneratedAttribute]
internal void set_CPUMSec(float value);
    [CompilerGeneratedAttribute]
public bool get_Is64Bit();
    [CompilerGeneratedAttribute]
internal void set_Is64Bit(bool value);
    [CompilerGeneratedAttribute]
public TraceLog get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(TraceLog value);
    [CompilerGeneratedAttribute]
public double get_PeakWorkingSet();
    [CompilerGeneratedAttribute]
internal void set_PeakWorkingSet(double value);
    [CompilerGeneratedAttribute]
public double get_PeakVirtual();
    [CompilerGeneratedAttribute]
internal void set_PeakVirtual(double value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TraceThread> get_Threads();
    [CompilerGeneratedAttribute]
private void set_Threads(IEnumerable`1<TraceThread> value);
    [CompilerGeneratedAttribute]
public TraceLoadedModules get_LoadedModules();
    [CompilerGeneratedAttribute]
private void set_LoadedModules(TraceLoadedModules value);
    [CompilerGeneratedAttribute]
public TraceEvents get_EventsInProcess();
    [CompilerGeneratedAttribute]
private void set_EventsInProcess(TraceEvents value);
    [CompilerGeneratedAttribute]
public TraceEvents get_EventsDuringProcess();
    [CompilerGeneratedAttribute]
private void set_EventsDuringProcess(TraceEvents value);
    public virtual string ToString();
    internal void ProcessStart(ProcessTraceData data);
    internal void ProcessStop(ProcessTraceData data);
    private void Initialize(int processID, ProcessIndex processIndex, TraceEventDispatcher source);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Analysis.TraceProcesses : object {
    private GrowableArray`1<TraceProcess> processes;
    private GrowableArray`1<TraceProcess> processesByPID;
    private TraceLog log;
    private TraceEventDispatcher source;
    [CompilerGeneratedAttribute]
private Action`1<TraceProcess> OnProcessStart;
    [CompilerGeneratedAttribute]
private Action`1<TraceProcess> OnProcessStop;
    private static Func`3<int, TraceProcess, int> compareByProcessID;
    public TraceLog Log { get; }
    public int Count { get; }
    public TraceProcess Item { get; internal set; }
    internal TraceProcesses(TraceLog log, TraceEventDispatcher source);
    private static TraceProcesses();
    public TraceLog get_Log();
    public int get_Count();
    public TraceProcess get_Item(ProcessIndex processIndex);
    internal void set_Item(ProcessIndex processIndex, TraceProcess value);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Analysis.TraceProcesses/<System-Collections-Generic-IEnumerable<Microsoft-Diagnostics-Tracing-Analysis-TraceProcess>-GetEnumerator>d__8")]
private sealed virtual override IEnumerator`1<TraceProcess> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.Analysis.TraceProcess>.GetEnumerator();
    internal TraceProcess GetProcess(int processID, long timeQPC);
    internal TraceProcess GetOrCreateProcess(int processID, long timeQPC, bool isProcessStartEvent);
    internal void ProcessStop(ProcessTraceData data);
    internal void CleanupOldProcesses(ProcessTraceData data);
    internal TraceProcess FindProcessAndIndex(int processID, long timeQPC, Int32& index);
    [CompilerGeneratedAttribute]
internal void add_OnProcessStart(Action`1<TraceProcess> value);
    [CompilerGeneratedAttribute]
internal void remove_OnProcessStart(Action`1<TraceProcess> value);
    [CompilerGeneratedAttribute]
internal void add_OnProcessStop(Action`1<TraceProcess> value);
    [CompilerGeneratedAttribute]
internal void remove_OnProcessStop(Action`1<TraceProcess> value);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Analysis.TraceProcesses/<System-Collections-IEnumerable-GetEnumerator>d__26")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.Analysis.TraceProcessesExtensions : object {
    private static WeakReference m_weakCurrentSource;
    private static TraceProcessesExtensions();
    [ExtensionAttribute]
public static void NeedProcesses(TraceEventDispatcher source);
    [ExtensionAttribute]
public static TraceProcesses Processes(TraceEventSource source);
    [ExtensionAttribute]
public static TraceProcess Process(TraceEvent _event);
    [ExtensionAttribute]
public static void AddCallbackOnProcessStart(TraceEventDispatcher source, Action`1<TraceProcess> OnProcessStart);
    [ExtensionAttribute]
public static void AddCallbackOnProcessStop(TraceEventDispatcher source, Action`1<TraceProcess> OnProcessStop);
    [ExtensionAttribute]
public static void SetSampleIntervalMSec(TraceProcess process, float sampleIntervalMSec);
    [ExtensionAttribute]
public static float SampleIntervalMSec(TraceProcess process);
    public static void SetupCallbacks(TraceEventDispatcher source);
}
public class Microsoft.Diagnostics.Tracing.Analysis.TraceThread : object {
}
public abstract class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.Analyzer : object {
    protected abstract virtual AnalyzerExecutionResult Execute(AnalyzerExecutionContext executionContext);
    internal virtual AnalyzerExecutionResult RunAnalyzer(AnalyzerExecutionContext executionContext, ProcessContext processContext);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerConfiguration : object {
    private Dictionary`2<string, string> _properties;
    public void Add(string key, string value);
    public bool TryGetValue(string key, String& value);
    public bool TryGetValueAsDouble(string key, Double& value);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerExecutionContext : object {
    private Configuration _configuration;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private AnalyzerIssueCollection <Issues>k__BackingField;
    public AnalyzerConfiguration Configuration { get; }
    public ITrace Trace { get; }
    internal AnalyzerIssueCollection Issues { get; }
    internal AnalyzerExecutionContext(Configuration configuration, ITrace trace);
    public AnalyzerConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal AnalyzerIssueCollection get_Issues();
    public void AddIssue(Process process, AnalyzerIssue issue);
}
public enum Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerExecutionResult : Enum {
    public int value__;
    public static AnalyzerExecutionResult Success;
    public static AnalyzerExecutionResult Fail;
    public static AnalyzerExecutionResult Skip;
}
internal class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerExecutionScope : object {
    [ThreadStaticAttribute]
private static AnalyzerExecutionScope _current;
    [CompilerGeneratedAttribute]
private Analyzer <ExecutingAnalyzer>k__BackingField;
    internal static AnalyzerExecutionScope Current { get; }
    internal Analyzer ExecutingAnalyzer { get; private set; }
    internal AnalyzerExecutionScope(Analyzer executingAnalyzer);
    internal static AnalyzerExecutionScope get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
internal Analyzer get_ExecutingAnalyzer();
    [CompilerGeneratedAttribute]
private void set_ExecutingAnalyzer(Analyzer value);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerIssue : object {
    [CompilerGeneratedAttribute]
private Analyzer <Analyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URL>k__BackingField;
    public Analyzer Analyzer { get; private set; }
    public string Title { get; protected set; }
    public string Description { get; protected set; }
    public string URL { get; protected set; }
    public AnalyzerIssue(string title, string description, string url);
    [CompilerGeneratedAttribute]
public Analyzer get_Analyzer();
    [CompilerGeneratedAttribute]
private void set_Analyzer(Analyzer value);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
protected virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
protected virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_URL();
    [CompilerGeneratedAttribute]
protected virtual void set_URL(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerIssueCollection : object {
    private Dictionary`2<Process, List`1<AnalyzerIssue>> _issues;
    public List`1<AnalyzerIssue> Item { get; }
    public List`1<AnalyzerIssue> get_Item(Process process);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Process, List`1<AnalyzerIssue>>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Diagnostics.Tracing.AutomatedAnalysis.Process,System.Collections.Generic.List<Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerIssue>>>.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerLoadContext : object {
    [CompilerGeneratedAttribute]
private Analyzer <Analyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRun>k__BackingField;
    public Analyzer Analyzer { get; private set; }
    public bool ShouldRun { get; public set; }
    [CompilerGeneratedAttribute]
public Analyzer get_Analyzer();
    [CompilerGeneratedAttribute]
private void set_Analyzer(Analyzer value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRun();
    [CompilerGeneratedAttribute]
public void set_ShouldRun(bool value);
    internal void Reset(Analyzer analyzer);
}
[AttributeUsageAttribute("1")]
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ProviderType>k__BackingField;
    public Type ProviderType { get; }
    public AnalyzerProviderAttribute(Type providerType);
    [CompilerGeneratedAttribute]
public Type get_ProviderType();
}
public abstract class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AnalyzerResolver : object {
    private List`1<Analyzer> _analyzers;
    private Configuration _configuration;
    internal IEnumerable`1<Analyzer> ResolvedAnalyzers { get; }
    internal Configuration Configuration { get; }
    internal IEnumerable`1<Analyzer> get_ResolvedAnalyzers();
    internal Configuration get_Configuration();
    protected virtual void OnAnalyzerLoaded(AnalyzerLoadContext loadContext);
    protected void ConsumeAssembly(Assembly analyzerAssembly);
    internal void ConsumeConfiguration(Configuration configuration);
    protected internal abstract virtual void Resolve();
}
[EventSourceAttribute]
internal class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AutomatedAnalysisEventSource : EventSource {
    internal static AutomatedAnalysisEventSource Log;
    private static AutomatedAnalysisEventSource();
    [EventAttribute("1")]
public void Error(string message);
    [EventAttribute("2")]
public void Verbose(string message);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AutomatedAnalysisTextWriter : TextWriter {
    [ThreadStaticAttribute]
private static StringBuilder _builder;
    public static AutomatedAnalysisTextWriter Instance;
    public Encoding Encoding { get; }
    private static AutomatedAnalysisTextWriter();
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AutomatedAnalysisTraceLog : object {
    [CompilerGeneratedAttribute]
private TraceLog <UnderlyingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolReader <SymbolReader>k__BackingField;
    public TraceLog UnderlyingSource { get; }
    internal SymbolReader SymbolReader { get; }
    private IEnumerable`1<Process> Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ITrace.Processes { get; }
    public AutomatedAnalysisTraceLog(TraceLog traceLog, SymbolReader symbolReader);
    [CompilerGeneratedAttribute]
public TraceLog get_UnderlyingSource();
    [CompilerGeneratedAttribute]
internal SymbolReader get_SymbolReader();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.AutomatedAnalysis.AutomatedAnalysisTraceLog/<Microsoft-Diagnostics-Tracing-AutomatedAnalysis-ITrace-get_Processes>d__8")]
private sealed virtual override IEnumerable`1<Process> Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ITrace.get_Processes();
    private sealed virtual override StackView Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ITrace.GetStacks(Process process, string stackType);
    private StackView GetCPUStacks(Process process);
}
internal class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.Configuration : object {
    private Dictionary`2<string, AnalyzerConfiguration> _analyzerConfigurations;
    internal void AddConfigurationFile(string path);
    internal bool TryGetAnalyzerConfiguration(Analyzer analyzer, AnalyzerConfiguration& config);
}
internal class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ConfigurationFile : object {
    private static string AnalyzerSectionName;
    private static string AnalyzerName;
    private static string PropertyTagName;
    private static string PropertyNameTagName;
    private static string PropertyValueTagName;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AnalyzerConfiguration> <Analyzers>k__BackingField;
    internal Dictionary`2<string, AnalyzerConfiguration> Analyzers { get; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, AnalyzerConfiguration> get_Analyzers();
    internal static ConfigurationFile FromFile(string path);
    private static AnalyzerConfiguration ReadAnalyzerSection(XmlReader reader);
    private static void SkipToNextElement(XmlReader reader);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.DirectoryAnalyzerResolver : AnalyzerResolver {
    private static string _baseDirectory;
    public DirectoryAnalyzerResolver(string baseDirectory);
    protected internal virtual void Resolve();
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.Extensions : object {
    [ExtensionAttribute]
public static StackSource CPUStacks(TraceLog eventLog, TraceProcess process, Predicate`1<TraceEvent> predicate);
    [ExtensionAttribute]
public static bool ManagedProcess(TraceProcess process);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.HtmlReportGenerator : object {
    private TextWriter _writer;
    public HtmlReportGenerator(TextWriter writer);
    private sealed virtual override void System.IDisposable.Dispose();
    private void StartReport();
    private void EndReport();
    public void WriteIssuesForProcess(Process process, List`1<AnalyzerIssue> issues);
    public void WriteExecutedAnalyzerList(IEnumerable`1<Analyzer> analyzers);
}
public interface Microsoft.Diagnostics.Tracing.AutomatedAnalysis.IAnalyzerProvider {
    public abstract virtual IEnumerable`1<Analyzer> GetAnalyzers();
}
public interface Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ITrace {
    public IEnumerable`1<Process> Processes { get; }
    public abstract virtual IEnumerable`1<Process> get_Processes();
    public abstract virtual StackView GetStacks(Process process, string stackType);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.Process : object {
    [CompilerGeneratedAttribute]
private int <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DisplayID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsManagedCode>k__BackingField;
    public int UniqueID { get; public set; }
    public int DisplayID { get; public set; }
    public string Description { get; public set; }
    public bool ContainsManagedCode { get; }
    public Process(int uniqueID, int displayID, string description, bool containsManagedCode);
    [CompilerGeneratedAttribute]
public int get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(int value);
    [CompilerGeneratedAttribute]
public int get_DisplayID();
    [CompilerGeneratedAttribute]
public void set_DisplayID(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_ContainsManagedCode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ProcessAnalyzer : Analyzer {
    protected abstract virtual AnalyzerExecutionResult Execute(AnalyzerExecutionContext executionContext, ProcessContext processContext);
    internal virtual AnalyzerExecutionResult RunAnalyzer(AnalyzerExecutionContext executionContext, ProcessContext processContext);
    protected virtual AnalyzerExecutionResult Execute(AnalyzerExecutionContext executionContext);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.ProcessContext : object {
    private StackView _cpuStacks;
    private AnalyzerExecutionContext _executionContext;
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    public Process Process { get; }
    public StackView CPUStacks { get; }
    internal ProcessContext(AnalyzerExecutionContext executionContext, Process process);
    [CompilerGeneratedAttribute]
public Process get_Process();
    public StackView get_CPUStacks();
    public void AddIssue(AnalyzerIssue issue);
}
public static class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.StackTypes : object {
    [CompilerGeneratedAttribute]
private static string <CPU>k__BackingField;
    public static string CPU { get; }
    private static StackTypes();
    [CompilerGeneratedAttribute]
public static string get_CPU();
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.StackView : object {
    private static Char[] SymbolSeparator;
    private TraceLog _traceLog;
    private StackSource _rawStackSource;
    private SymbolReader _symbolReader;
    private CallTree _callTree;
    private List`1<CallTreeNodeBase> _byName;
    private HashSet`1<string> _resolvedSymbolModules;
    public CallTree CallTree { get; }
    private IEnumerable`1<CallTreeNodeBase> ByName { get; }
    public StackView(TraceLog traceLog, StackSource stackSource, SymbolReader symbolReader);
    private static StackView();
    public CallTree get_CallTree();
    private IEnumerable`1<CallTreeNodeBase> get_ByName();
    public CallTreeNodeBase FindNodeByName(string nodeNamePat);
    public CallTreeNode GetCallers(string symbolName);
    public CallTreeNode GetCallees(string symbolName);
    public CallTreeNodeBase GetCallTreeNode(string symbolName);
    private void LookupWarmNGENSymbols();
    private static TraceEventStackSource GetTraceEventStackSource(StackSource source);
    private void InvalidateCachedStructures();
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.TraceProcessor : object {
    private IEnumerable`1<Analyzer> _analyzers;
    private Configuration _configuration;
    public TraceProcessor(AnalyzerResolver analyzerResolver);
    public TraceProcessorResult ProcessTrace(ITrace trace);
}
public class Microsoft.Diagnostics.Tracing.AutomatedAnalysis.TraceProcessorResult : object {
    private IEnumerable`1<Analyzer> _executedAnalyzers;
    private AnalyzerExecutionContext _executionContext;
    public IEnumerable`1<Analyzer> ExecutedAnalyzers { get; }
    public AnalyzerIssueCollection Issues { get; }
    internal TraceProcessorResult(IEnumerable`1<Analyzer> executedAnalyzers, AnalyzerExecutionContext executionContext);
    public IEnumerable`1<Analyzer> get_ExecutedAnalyzers();
    public AnalyzerIssueCollection get_Issues();
}
public class Microsoft.Diagnostics.Tracing.BPerfEventSource : TraceEventDispatcher {
    private static int OffsetToExtendedData;
    private static int OffsetToUTCOffsetMinutes;
    private static int BufferSize;
    private static int ReadAheadBufferSize;
    private static int BPerfManagedSymbolDatabaseLocationEventId;
    private static Guid BPerfGuid;
    private static Guid ClrGuid;
    private static Guid EventTraceGuid;
    private static Guid ImageLoadGuid;
    private static Guid VolumeMappingGuid;
    private static Guid ProcessGuid;
    private static Guid KernelTraceControlImageIdGuid;
    private static Guid KernelTraceControlMetaDataGuid;
    private string btlFilePath;
    private Byte[] uncompressedBuffer;
    private Byte[] compressedBuffer;
    private Dictionary`2<int, string> processNameForID;
    private long endQPCForManagedSymbolsInclusion;
    private long skipQPC;
    private long endFileOffset;
    private bool canResolveSymbols;
    private int eventsLost;
    private long startFileOffset;
    private BPerfEventSourceDecompress DecompressDelegate;
    public int EventsLost { get; }
    public long Size { get; }
    public BPerfEventSource(string btlFilePath);
    public BPerfEventSource(string btlFilePath, TraceEventDispatcherOptions traceEventDispatcherOptions);
    public BPerfEventSource(string btlFilePath, TraceEventDispatcherOptions options, Byte[] uncompressedBuffer, Byte[] compressedBuffer, bool skipReadingUnreachableEvents, BPerfEventSourceDecompress decompressDelegate);
    private static BPerfEventSource();
    public virtual int get_EventsLost();
    public virtual long get_Size();
    public virtual bool Process();
    internal virtual string ProcessName(int processID, long time100ns);
    private bool ProcessMetadataEvents();
    private void ProcessInner();
    private bool Initialize(EVENT_RECORD* eventRecord);
    private EVENT_RECORD* DeserializeEventRecord(Byte* buffer, Int32& retVal);
    private void ParseBPerfManagedSymbol(EVENT_RECORD* eventRecord);
    private void ProcessEventRecord(EVENT_RECORD* eventRecord, bool dispatch);
    private int ProcessBTLInner(int eof);
    private static int AlignUp(int num, int align);
    private static long GetOffset(string indexFile, DateTime requestTimestamp, Int64& sessionStartQPC, Int64& ts);
    private static int ULZ777Decompress(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputLength);
    private static UInt32 DecodeMod(Byte*& p);
    private static void WildCopy(Byte* d, Byte* s, int n);
    private static int ULZ777DecompressInternal(Byte* input, int inputLength, Byte* output, int outputLength);
    [CompilerGeneratedAttribute]
private void <Initialize>b__35_0(EventTraceHeaderTraceData data);
    [CompilerGeneratedAttribute]
private void <Initialize>b__35_1(ProcessTraceData data);
    [CompilerGeneratedAttribute]
private void <Initialize>b__35_2(ProcessTraceData data);
}
public class Microsoft.Diagnostics.Tracing.BPerfEventSourceDecompress : MulticastDelegate {
    public BPerfEventSourceDecompress(object object, IntPtr method);
    public virtual int Invoke(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputLength);
    public virtual IAsyncResult BeginInvoke(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputLength, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class Microsoft.Diagnostics.Tracing.CLRRuntimeActivityComputer : object {
    private RuntimeLoaderStatsData _startStopData;
    private Dictionary`2<IdOfIncompleteAction, IncompleteActionDesc> _incompleteJitEvents;
    private Dictionary`2<IdOfIncompleteAction, IncompleteActionDesc> _incompleteR2REvents;
    private Dictionary`2<IdOfIncompleteAction, IncompleteActionDesc> _incompleteTypeLoadEvents;
    private Dictionary`2<int, RuntimeLoaderProcessData> _processSpecificDataInProgress;
    public RuntimeLoaderStatsData RuntimeLoaderData { get; }
    public CLRRuntimeActivityComputer(TraceEventDispatcher source);
    public RuntimeLoaderStatsData get_RuntimeLoaderData();
    private void ProcessingComplete();
    private void AddStartStopData(int processID, int threadId, EventUID start, EventUID end, string name);
    private void Kernel_ProcessStop(ProcessTraceData traceData);
    private void Clr_LoaderAssemblyLoad(AssemblyLoadUnloadTraceData obj);
    private void Clr_MethodLoad(MethodLoadUnloadTraceData obj);
    private void Clr_MethodLoadVerbose(MethodLoadUnloadVerboseTraceData obj);
    private void MethodJittedEvent(TraceEvent evt, long methodID);
    private void Clr_MethodJittingStarted(MethodJittingStartedTraceData obj);
    private void Clr_R2RGetEntryPointStart(R2RGetEntryPointStartTraceData obj);
    private void Clr_MethodR2RGetEntryPoint(R2RGetEntryPointTraceData obj);
    private void Clr_TypeLoadStart(TypeLoadStartTraceData obj);
    private void Clr_TypeLoadStop(TypeLoadStopTraceData obj);
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.Tracing.Compatibility.Extentions : object {
    [ExtensionAttribute]
public static IntPtr GetHandle(Process process);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetEnvironment(ProcessStartInfo startInfo);
}
internal enum Microsoft.Diagnostics.Tracing.ControllerCommand : Enum {
    public int value__;
    public static ControllerCommand Update;
    public static ControllerCommand SendManifest;
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfArray : CtfMetadataType {
    [CompilerGeneratedAttribute]
private CtfMetadataType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    public int Align { get; }
    public CtfMetadataType Type { get; private set; }
    public string Index { get; private set; }
    public CtfArray(CtfMetadataType type, string index);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public CtfMetadataType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(CtfMetadataType value);
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(string value);
    public virtual string ToString();
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual int GetSize();
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfChannel : Stream {
    private CtfMetadata _metadata;
    private CtfStream _ctfStream;
    private Stream _stream;
    private Byte[] _buffer;
    private GCHandle _handle;
    private long _packetSize;
    private long _contentSize;
    public CtfStream CtfStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CtfChannel(Stream stream, CtfMetadata metadata);
    public CtfStream get_CtfStream();
    protected virtual void Dispose(bool disposing);
    private bool ReadContext();
    private bool ReadTraceHeader();
    private bool ReadPacketContext();
    private void ReadHeader();
    private bool ReadStruct(T& result);
    public virtual bool get_CanRead();
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private int TryReadExactlyCount(Byte[] buffer, int offset, int count);
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfClock : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Frequency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UUID>k__BackingField;
    public string Description { get; private set; }
    public ulong Frequency { get; private set; }
    public string Name { get; private set; }
    public ulong Offset { get; private set; }
    public Guid UUID { get; private set; }
    public CtfClock(CtfPropertyBag bag);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public ulong get_Frequency();
    [CompilerGeneratedAttribute]
private void set_Frequency(ulong value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(ulong value);
    [CompilerGeneratedAttribute]
public Guid get_UUID();
    [CompilerGeneratedAttribute]
private void set_UUID(Guid value);
}
internal enum Microsoft.Diagnostics.Tracing.Ctf.CtfDeclarationTypes : Enum {
    public int value__;
    public static CtfDeclarationTypes Unknown;
    public static CtfDeclarationTypes TypeAlias;
    public static CtfDeclarationTypes Trace;
    public static CtfDeclarationTypes Environment;
    public static CtfDeclarationTypes Clock;
    public static CtfDeclarationTypes Struct;
    public static CtfDeclarationTypes Stream;
    public static CtfDeclarationTypes Event;
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfEnum : CtfMetadataType {
    [CompilerGeneratedAttribute]
private CtfMetadataType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfNamedRange[] <Values>k__BackingField;
    public int Align { get; }
    public CtfMetadataType Type { get; private set; }
    public CtfNamedRange[] Values { get; private set; }
    public CtfEnum(CtfMetadataType type, CtfNamedRange[] ranges);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public CtfMetadataType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(CtfMetadataType value);
    [CompilerGeneratedAttribute]
public CtfNamedRange[] get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(CtfNamedRange[] value);
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    internal string GetName(int value);
    public virtual int GetSize();
    internal CtfNamedRange GetValue(string name);
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TracerName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TracerMajor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TracerMinor>k__BackingField;
    public string Domain { get; private set; }
    public string HostName { get; private set; }
    public string TracerName { get; private set; }
    public int TracerMajor { get; private set; }
    public int TracerMinor { get; private set; }
    public CtfEnvironment(CtfPropertyBag bag);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
private void set_HostName(string value);
    [CompilerGeneratedAttribute]
public string get_TracerName();
    [CompilerGeneratedAttribute]
private void set_TracerName(string value);
    [CompilerGeneratedAttribute]
public int get_TracerMajor();
    [CompilerGeneratedAttribute]
private void set_TracerMajor(int value);
    [CompilerGeneratedAttribute]
public int get_TracerMinor();
    [CompilerGeneratedAttribute]
private void set_TracerMinor(int value);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfEvent : object {
    private static int SizeUninitialized;
    internal static int SizeIndeterminate;
    private Nullable`1<bool> _isPacked;
    private int _size;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfStruct <Definition>k__BackingField;
    public bool IsFixedSize { get; }
    public int Size { get; }
    public int ID { get; private set; }
    public string Name { get; private set; }
    public int Stream { get; private set; }
    public UInt32 LogLevel { get; private set; }
    public CtfStruct Definition { get; private set; }
    public bool IsPacked { get; }
    public CtfEvent(CtfPropertyBag bag);
    public bool get_IsFixedSize();
    public int get_Size();
    [CompilerGeneratedAttribute]
public int get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_LogLevel();
    [CompilerGeneratedAttribute]
private void set_LogLevel(UInt32 value);
    [CompilerGeneratedAttribute]
public CtfStruct get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(CtfStruct value);
    public bool get_IsPacked();
    internal void ResolveReferences(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual string ToString();
    public int GetFieldOffset(string name);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfEventHeader : object {
    public CtfEvent Event;
    public ulong Timestamp;
    public int Pid;
    public int Tid;
    public string ProcessName;
    public void Clear();
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfField : object {
    [CompilerGeneratedAttribute]
private int <BitOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfMetadataType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int BitOffset { get; public set; }
    public CtfMetadataType Type { get; private set; }
    public string Name { get; private set; }
    public CtfField(CtfMetadataType type, string name);
    [CompilerGeneratedAttribute]
public int get_BitOffset();
    [CompilerGeneratedAttribute]
public void set_BitOffset(int value);
    [CompilerGeneratedAttribute]
public CtfMetadataType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(CtfMetadataType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    internal void ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    internal object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfFloat : CtfMetadataType {
    private int _align;
    [CompilerGeneratedAttribute]
private string <ByteOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Exp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Mant>k__BackingField;
    public int Align { get; }
    public string ByteOrder { get; private set; }
    public int Exp { get; private set; }
    public int Mant { get; private set; }
    public CtfFloat(CtfPropertyBag bag);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public string get_ByteOrder();
    [CompilerGeneratedAttribute]
private void set_ByteOrder(string value);
    [CompilerGeneratedAttribute]
public int get_Exp();
    [CompilerGeneratedAttribute]
private void set_Exp(int value);
    [CompilerGeneratedAttribute]
public int get_Mant();
    [CompilerGeneratedAttribute]
private void set_Mant(int value);
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual int GetSize();
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfInteger : CtfMetadataType {
    private int _align;
    [CompilerGeneratedAttribute]
private short <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Signed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Map>k__BackingField;
    public int Align { get; }
    public short Size { get; private set; }
    public bool Signed { get; private set; }
    public string Encoding { get; private set; }
    public short Base { get; private set; }
    public string Map { get; private set; }
    public CtfInteger(CtfPropertyBag bag);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public short get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(short value);
    [CompilerGeneratedAttribute]
public bool get_Signed();
    [CompilerGeneratedAttribute]
private void set_Signed(bool value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public short get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(short value);
    [CompilerGeneratedAttribute]
public string get_Map();
    [CompilerGeneratedAttribute]
private void set_Map(string value);
    public virtual string ToString();
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual int GetSize();
    public static T ReadInt(CtfMetadataType type, Byte[] buffer, int bitOffset);
    public object Read(Byte[] buffer, int bitOffset);
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfMetadata : object {
    private Dictionary`2<string, CtfClock> _clocks;
    [CompilerGeneratedAttribute]
private CtfTrace <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfStream[] <Streams>k__BackingField;
    public CtfTrace Trace { get; private set; }
    public CtfEnvironment Environment { get; private set; }
    public CtfStream[] Streams { get; private set; }
    public ICollection`1<CtfClock> Clocks { get; }
    public CtfMetadata(CtfMetadataParser parser);
    [CompilerGeneratedAttribute]
public CtfTrace get_Trace();
    [CompilerGeneratedAttribute]
private void set_Trace(CtfTrace value);
    [CompilerGeneratedAttribute]
public CtfEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(CtfEnvironment value);
    [CompilerGeneratedAttribute]
public CtfStream[] get_Streams();
    [CompilerGeneratedAttribute]
private void set_Streams(CtfStream[] value);
    public ICollection`1<CtfClock> get_Clocks();
    public void Load(CtfMetadataParser parser);
    private void ResolveReferences(Dictionary`2<string, CtfMetadataType> typeAlias);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataDeclaration : object {
    [CompilerGeneratedAttribute]
private CtfDeclarationTypes <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfPropertyBag <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfMetadataType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawText>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfField[] <Fields>k__BackingField;
    public CtfDeclarationTypes Definition { get; private set; }
    public CtfPropertyBag Properties { get; private set; }
    public CtfMetadataType Type { get; private set; }
    public string Name { get; private set; }
    public string RawText { get; private set; }
    public CtfField[] Fields { get; private set; }
    public CtfMetadataDeclaration(CtfDeclarationTypes declaration, CtfMetadataType type, string name, string text);
    public CtfMetadataDeclaration(CtfDeclarationTypes declaration, CtfPropertyBag bag, string name, string text);
    public CtfMetadataDeclaration(CtfDeclarationTypes declaration, CtfPropertyBag bag, CtfField[] fields, string name, string text);
    [CompilerGeneratedAttribute]
public CtfDeclarationTypes get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(CtfDeclarationTypes value);
    [CompilerGeneratedAttribute]
public CtfPropertyBag get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(CtfPropertyBag value);
    [CompilerGeneratedAttribute]
public CtfMetadataType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(CtfMetadataType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_RawText();
    [CompilerGeneratedAttribute]
private void set_RawText(string value);
    [CompilerGeneratedAttribute]
public CtfField[] get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(CtfField[] value);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataLegacyParser : CtfMetadataParser {
    private static Regex s_align;
    private static Regex s_integer;
    private static Regex s_variable;
    private static Regex s_variant;
    private static Regex s_enum;
    private static Regex s_range;
    private static Regex s_struct;
    private static Regex s_float;
    private Stream _stream;
    public CtfMetadataLegacyParser(string filename);
    public CtfMetadataLegacyParser(Stream stream);
    private static CtfMetadataLegacyParser();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataLegacyParser/<Parse>d__11")]
public virtual IEnumerable`1<CtfMetadataDeclaration> Parse();
    private CtfMetadataDeclaration ParseOneDeclaration(string metadata, int index, Int32& end);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataLegacyParser/<ParseStructFields>d__13")]
private IEnumerable`1<CtfField> ParseStructFields(string metadata, int begin, int end);
    private CtfMetadataType ParseOneType(string statement, int start, Int32& index);
    private CtfMetadataType ParseOneType(string statement, Int32& index);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataLegacyParser/<ParseNamedRanges>d__16")]
private IEnumerable`1<CtfNamedRange> ParseNamedRanges(string str, int open, int close);
    private CtfPropertyBag GetPropertyBag(string str);
    private CtfPropertyBag GetPropertyBag(string str, int start, int stop);
    private static string StripComments(string rawStatement);
    public string GetMetadata();
    private static int FindCloseBrace(string str, int open);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataLegacyParser/<EnumerateStatements>d__22")]
private static IEnumerable`1<string> EnumerateStatements(string str, int start, int stop, char delimiter);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
}
internal abstract class Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataParser : object {
    public abstract virtual IEnumerable`1<CtfMetadataDeclaration> Parse();
}
internal abstract class Microsoft.Diagnostics.Tracing.Ctf.CtfMetadataType : object {
    [CompilerGeneratedAttribute]
private int <BitOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfTypes <CtfType>k__BackingField;
    public int BitOffset { get; public set; }
    public int Align { get; }
    public CtfTypes CtfType { get; protected set; }
    public CtfMetadataType(CtfTypes type);
    [CompilerGeneratedAttribute]
public int get_BitOffset();
    [CompilerGeneratedAttribute]
public void set_BitOffset(int value);
    public abstract virtual int get_Align();
    [CompilerGeneratedAttribute]
public CtfTypes get_CtfType();
    [CompilerGeneratedAttribute]
protected void set_CtfType(CtfTypes value);
    internal abstract virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public abstract virtual int GetSize();
    public abstract virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfNamedRange : ValueType {
    public string Name;
    public int Begin;
    public int End;
    public CtfNamedRange(string name, int begin, int end);
    public virtual string ToString();
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfPropertyBag : object {
    private Dictionary`2<string, string> _properties;
    private Dictionary`2<string, CtfMetadataType> _typeProperties;
    public void Clear();
    public bool GetBoolean(string name);
    public short GetShort(string name);
    public Nullable`1<short> GetShortOrNull(string name);
    public string GetString(string name);
    public Nullable`1<int> GetIntOrNull(string name);
    public int GetInt(string name);
    public ulong GetUlong(string name);
    public CtfMetadataType GetType(string name);
    public CtfStruct GetStruct(string name);
    internal void AddValue(string name, string value);
    internal void AddValue(string name, CtfMetadataType value);
    internal Nullable`1<UInt32> GetUIntOrNull(string name);
    internal UInt32 GetUInt(string name);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfReader : object {
    private Stream _stream;
    private Byte[] _buffer;
    private CtfMetadata _metadata;
    private CtfStream _streamDefinition;
    private CtfEventHeader _header;
    private bool _eof;
    private GCHandle _handle;
    private int _bitOffset;
    private int _bufferLength;
    private bool _readHeader;
    public int BufferLength { get; }
    public Byte[] Buffer { get; }
    public IntPtr BufferPtr { get; }
    public CtfReader(Stream stream, CtfMetadata metadata, CtfStream ctfStream);
    public int get_BufferLength();
    public Byte[] get_Buffer();
    public IntPtr get_BufferPtr();
    protected virtual override void Finalize();
    private Byte[] ReallocateBuffer(int size);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Ctf.CtfReader/<EnumerateEventHeaders>d__19")]
public IEnumerable`1<CtfEventHeader> EnumerateEventHeaders();
    public void ResetBuffer();
    internal void ReadEventIntoBuffer(CtfEvent evt);
    private void ReadPackedEvent();
    public void ReadStruct(CtfStruct strct);
    public void ReadTypeIntoBuffer(CtfStruct context, CtfMetadataType type);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void Align(int bits);
    private int ReadBits(int bits);
    private void FillBuffer(int offset, int count);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfStream : object {
    private List`1<CtfEvent> _events;
    private CtfMetadataType _header;
    private CtfMetadataType _context;
    private CtfMetadataType _eventContext;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    public int ID { get; private set; }
    public CtfStruct EventHeader { get; }
    public CtfStruct PacketContext { get; }
    public CtfStruct EventContext { get; }
    public List`1<CtfEvent> Events { get; }
    public CtfStream(CtfPropertyBag properties);
    [CompilerGeneratedAttribute]
public int get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(int value);
    public CtfStruct get_EventHeader();
    public CtfStruct get_PacketContext();
    public CtfStruct get_EventContext();
    public List`1<CtfEvent> get_Events();
    public void AddEvent(CtfEvent evt);
    internal void ResolveReferences(Dictionary`2<string, CtfMetadataType> typealias);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfString : CtfMetadataType {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; public set; }
    public int Align { get; }
    public bool IsAscii { get; }
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    public virtual int get_Align();
    public bool get_IsAscii();
    public virtual string ToString();
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual int GetSize();
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfStruct : CtfMetadataType {
    private int _align;
    private bool _resolved;
    [CompilerGeneratedAttribute]
private CtfField[] <Fields>k__BackingField;
    public int Align { get; }
    public CtfField[] Fields { get; private set; }
    public CtfStruct(CtfPropertyBag props, CtfField[] fields);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public CtfField[] get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(CtfField[] value);
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    internal CtfField GetField(string name);
    public virtual int GetSize();
    internal int GetFieldOffset(string name);
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfTrace : object {
    [CompilerGeneratedAttribute]
private short <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UUID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ByteOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfStruct <Header>k__BackingField;
    public short Major { get; private set; }
    public short Minor { get; private set; }
    public Guid UUID { get; private set; }
    public string ByteOrder { get; private set; }
    public CtfStruct Header { get; private set; }
    public CtfTrace(CtfPropertyBag bag);
    [CompilerGeneratedAttribute]
public short get_Major();
    [CompilerGeneratedAttribute]
private void set_Major(short value);
    [CompilerGeneratedAttribute]
public short get_Minor();
    [CompilerGeneratedAttribute]
private void set_Minor(short value);
    [CompilerGeneratedAttribute]
public Guid get_UUID();
    [CompilerGeneratedAttribute]
private void set_UUID(Guid value);
    [CompilerGeneratedAttribute]
public string get_ByteOrder();
    [CompilerGeneratedAttribute]
private void set_ByteOrder(string value);
    [CompilerGeneratedAttribute]
public CtfStruct get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(CtfStruct value);
    internal void WriteLine(TextWriter output, int indent);
    internal void ResolveReferences(Dictionary`2<string, CtfMetadataType> typealias);
}
internal enum Microsoft.Diagnostics.Tracing.Ctf.CtfTypes : Enum {
    public int value__;
    public static CtfTypes Unknown;
    public static CtfTypes Unresolved;
    public static CtfTypes String;
    public static CtfTypes Integer;
    public static CtfTypes Struct;
    public static CtfTypes Array;
    public static CtfTypes Enum;
    public static CtfTypes Variant;
    public static CtfTypes Float;
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfUnresolvedType : CtfMetadataType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public int Align { get; }
    public CtfUnresolvedType(string name);
    public CtfUnresolvedType(CtfTypes type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual int get_Align();
    public virtual string ToString();
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    public virtual int GetSize();
    public virtual object Read(Byte[] buffer);
}
internal class Microsoft.Diagnostics.Tracing.Ctf.CtfVariant : CtfMetadataType {
    private bool _resolved;
    [CompilerGeneratedAttribute]
private string <Switch>k__BackingField;
    [CompilerGeneratedAttribute]
private CtfField[] <Union>k__BackingField;
    public int Align { get; }
    public string Switch { get; private set; }
    public CtfField[] Union { get; private set; }
    public CtfVariant(string switchName, CtfField[] union);
    public virtual int get_Align();
    [CompilerGeneratedAttribute]
public string get_Switch();
    [CompilerGeneratedAttribute]
private void set_Switch(string value);
    [CompilerGeneratedAttribute]
public CtfField[] get_Union();
    [CompilerGeneratedAttribute]
private void set_Union(CtfField[] value);
    internal virtual CtfMetadataType ResolveReference(Dictionary`2<string, CtfMetadataType> typealias);
    internal CtfField GetVariant(string name);
    public virtual int GetSize();
    public virtual object Read(Byte[] buffer);
}
internal static class Microsoft.Diagnostics.Tracing.Ctf.IntHelpers : object {
    public static int AlignUp(int val, int alignment);
    public static long AlignUp(long val, int alignment);
    public static int AlignDown(int val, int alignment);
}
public class Microsoft.Diagnostics.Tracing.CtfTraceEventSource : TraceEventDispatcher {
    private string _filename;
    private ZipArchive _zip;
    private List`1<Tuple`2<ZipArchiveEntry, CtfMetadata>> _channels;
    private EVENT_RECORD* _header;
    private Dictionary`2<string, ETWMapping> _eventMapping;
    private Dictionary`2<int, string> _processNames;
    public int EventsLost { get; }
    public CtfTraceEventSource(string fileName);
    private static Dictionary`2<string, ETWMapping> InitEventMap();
    protected virtual override void Finalize();
    public virtual int get_EventsLost();
    public virtual bool Process();
    internal virtual string ProcessName(int processID, long timeQPC);
    private EVENT_RECORD* InitEventRecord(CtfEventHeader header, CtfReader stream, ETWMapping etw);
    private ETWMapping GetTraceEvent(CtfEvent evt);
    public void ParseMetadata();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Diagnostics.Tracing.EmptyTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EmptyTraceData> Action;
    public String[] PayloadNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    public EmptyTraceData(Action`1<EmptyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<EmptyTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<EmptyTraceData> value);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
}
public enum Microsoft.Diagnostics.Tracing.Etlx.ActivityIndex : Enum {
    public int value__;
    public static ActivityIndex Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Etlx.CallStackIndex : Enum {
    public int value__;
    public static CallStackIndex Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Etlx.CodeAddressIndex : Enum {
    public int value__;
    public static CodeAddressIndex Invalid;
}
internal class Microsoft.Diagnostics.Tracing.Etlx.JavaScriptSourceKey : ValueType {
    public long SourceID;
    public ulong ScriptContextID;
    public JavaScriptSourceKey(long sourceID, ulong scriptContextID);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JavaScriptSourceKey other);
}
public enum Microsoft.Diagnostics.Tracing.Etlx.MethodIndex : Enum {
    public int value__;
    public static MethodIndex Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Etlx.ModuleFileIndex : Enum {
    public int value__;
    public static ModuleFileIndex Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Etlx.ProcessIndex : Enum {
    public int value__;
    public static ProcessIndex Invalid;
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.Tracing.Etlx.SerializerExtentions : object {
    [ExtensionAttribute]
public static void WriteAddress(Serializer serializer, ulong address);
    [ExtensionAttribute]
public static void ReadAddress(Deserializer deserializer, UInt64& address);
}
public enum Microsoft.Diagnostics.Tracing.Etlx.ThreadIndex : Enum {
    public int value__;
    public static ThreadIndex Invalid;
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceActivity : object {
    private ActivityIndex activityIndex;
    internal TraceActivity creator;
    private EventIndex creationEventIndex;
    private CallStackIndex creationCallStackIndex;
    internal TraceThread thread;
    internal long creationTimeQPC;
    internal long startTimeQPC;
    internal long endTimeQPC;
    private bool multiTrigger;
    private bool gcBound;
    internal ActivityKind kind;
    internal ulong rawID;
    internal TraceActivity prevActivityOnThread;
    public ActivityIndex Index { get; }
    public TraceActivity Creator { get; }
    public string ID { get; }
    internal string Path { get; }
    public TraceThread Thread { get; public set; }
    public bool MultiTrigger { get; }
    public string Name { get; }
    public bool IsThreadActivity { get; }
    public double StartTimeRelativeMSec { get; }
    public double EndTimeRelativeMSec { get; }
    public EventIndex CreationEventIndex { get; }
    public CallStackIndex CreationCallStackIndex { get; }
    public double CreationTimeRelativeMSec { get; }
    internal TraceActivity(ActivityIndex activityIndex, TraceActivity creator, EventIndex creationEventIndex, CallStackIndex creationCallStackIndex, long creationTimeQPC, ulong rawID, bool multiTrigger, bool gcBound, ActivityKind kind);
    private static string ActivityKindToString(ActivityKind kind);
    public ActivityIndex get_Index();
    public TraceActivity get_Creator();
    public string get_ID();
    internal string get_Path();
    public TraceThread get_Thread();
    public void set_Thread(TraceThread value);
    public bool get_MultiTrigger();
    public string get_Name();
    public bool get_IsThreadActivity();
    public double get_StartTimeRelativeMSec();
    public double get_EndTimeRelativeMSec();
    public EventIndex get_CreationEventIndex();
    public CallStackIndex get_CreationCallStackIndex();
    public double get_CreationTimeRelativeMSec();
    public virtual string ToString();
    internal static ulong GuidToLongId(Guid& guid);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceCallStack : object {
    private TraceCallStacks callStacks;
    private CallStackIndex stackIndex;
    public CallStackIndex CallStackIndex { get; }
    public TraceCodeAddress CodeAddress { get; }
    public TraceCallStack Caller { get; }
    public int Depth { get; }
    internal TraceCallStack(TraceCallStacks stacks, CallStackIndex stackIndex);
    public CallStackIndex get_CallStackIndex();
    public TraceCodeAddress get_CodeAddress();
    public TraceCallStack get_Caller();
    public int get_Depth();
    public virtual string ToString();
    public StringBuilder ToString(StringBuilder sb);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceCallStacks : object {
    private GrowableArray`1<List`1<CallStackIndex>> callees;
    private GrowableArray`1<List`1<CallStackIndex>> threads;
    private GrowableArray`1<CallStackInfo> callStacks;
    private DeferedRegion lazyCallStacks;
    private TraceCodeAddresses codeAddresses;
    private TraceLog log;
    public int Count { get; }
    public TraceCallStack Item { get; }
    public TraceCodeAddresses CodeAddresses { get; }
    internal TraceCallStacks(TraceLog log, TraceCodeAddresses codeAddresses);
    public int get_Count();
    public CodeAddressIndex CodeAddressIndex(CallStackIndex stackIndex);
    public CallStackIndex Caller(CallStackIndex stackIndex);
    public int Depth(CallStackIndex stackIndex);
    public TraceCallStack get_Item(CallStackIndex callStackIndex);
    public TraceCodeAddresses get_CodeAddresses();
    public ThreadIndex ThreadIndex(CallStackIndex stackIndex);
    public TraceThread Thread(CallStackIndex stackIndex);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceCallStacks/<GetEnumerator>d__12")]
public sealed virtual IEnumerator`1<TraceCallStack> GetEnumerator();
    internal void SetSize(int origSize);
    internal static CallStackIndex GetRootForThread(ThreadIndex threadIndex);
    private static ThreadIndex GetThreadForRoot(CallStackIndex root);
    internal CallStackIndex GetStackIndexForStackEvent(Void* addresses, int addressCount, int pointerSize, TraceThread thread, CallStackIndex start);
    private CallStackIndex GetStackIndexForStackEvent32(UInt32* addresses, int addressCount, TraceProcess process, CallStackIndex start);
    private CallStackIndex GetStackIndexForStackEvent64(UInt64* addresses, int addressCount, TraceProcess process, CallStackIndex start);
    internal CallStackIndex InternCallStackIndex(CodeAddressIndex codeAddressIndex, CallStackIndex callerIndex);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceCodeAddress : object {
    private TraceCodeAddresses codeAddresses;
    private CodeAddressIndex codeAddressIndex;
    public CodeAddressIndex CodeAddressIndex { get; }
    public ulong Address { get; }
    public string FullMethodName { get; }
    public TraceMethod Method { get; }
    public int ILOffset { get; }
    public TraceModuleFile ModuleFile { get; }
    public string ModuleName { get; }
    public string ModuleFilePath { get; }
    public TraceCodeAddresses CodeAddresses { get; }
    internal TraceCodeAddress(TraceCodeAddresses codeAddresses, CodeAddressIndex codeAddressIndex);
    public CodeAddressIndex get_CodeAddressIndex();
    public ulong get_Address();
    public string get_FullMethodName();
    public TraceMethod get_Method();
    public int get_ILOffset();
    public SourceLocation GetSourceLine(SymbolReader reader);
    public TraceModuleFile get_ModuleFile();
    public string get_ModuleName();
    public string get_ModuleFilePath();
    public TraceCodeAddresses get_CodeAddresses();
    public virtual string ToString();
    public StringBuilder ToString(StringBuilder sb);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceCodeAddresses : object {
    private static int ChunkSize;
    [CompilerGeneratedAttribute]
private bool <UnsafePDBMatching>k__BackingField;
    private static int CodeAddressInfoSerializationVersion;
    private GrowableArray`1<ILToNativeMap> ILToNativeMaps;
    private Dictionary`2<long, ILMapIndex> methodIDToILToNativeMap;
    private TraceCodeAddress[][] codeAddressObjects;
    private String[] names;
    private int managedMethodRecordCount;
    internal int totalCodeAddresses;
    private TraceLog log;
    private TraceModuleFiles moduleFiles;
    private TraceMethods methods;
    private DeferedRegion lazyCodeAddresses;
    internal GrowableArray`1<CodeAddressInfo> codeAddresses;
    public int Count { get; }
    public TraceCodeAddress Item { get; }
    public TraceMethods Methods { get; }
    public TraceModuleFiles ModuleFiles { get; }
    public int ManagedMethodRecordCount { get; }
    public int TotalCodeAddresses { get; }
    public bool UnsafePDBMatching { get; public set; }
    internal IEnumerable`1<CodeAddressIndex> GetAllIndexes { get; }
    internal TraceCodeAddresses(TraceLog log, TraceModuleFiles moduleFiles);
    public int get_Count();
    public string Name(CodeAddressIndex codeAddressIndex);
    public ulong Address(CodeAddressIndex codeAddressIndex);
    public ModuleFileIndex ModuleFileIndex(CodeAddressIndex codeAddressIndex);
    public MethodIndex MethodIndex(CodeAddressIndex codeAddressIndex);
    public TraceModuleFile ModuleFile(CodeAddressIndex codeAddressIndex);
    public int ILOffset(CodeAddressIndex codeAddressIndex);
    public OptimizationTier OptimizationTier(CodeAddressIndex codeAddressIndex);
    public TraceCodeAddress get_Item(CodeAddressIndex codeAddressIndex);
    public TraceMethods get_Methods();
    public TraceModuleFiles get_ModuleFiles();
    public int get_ManagedMethodRecordCount();
    public void LookupSymbolsForModule(SymbolReader reader, TraceModuleFile file);
    public SourceLocation GetSourceLine(SymbolReader reader, CodeAddressIndex codeAddressIndex);
    public int get_TotalCodeAddresses();
    [CompilerGeneratedAttribute]
public bool get_UnsafePDBMatching();
    [CompilerGeneratedAttribute]
public void set_UnsafePDBMatching(bool value);
    public virtual string ToString();
    internal ILToNativeMap NativeMap(CodeAddressIndex codeAddressIndex);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceCodeAddresses/<get_GetAllIndexes>d__29")]
internal IEnumerable`1<CodeAddressIndex> get_GetAllIndexes();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceCodeAddresses/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<TraceCodeAddress> GetEnumerator();
    internal void AddMethod(MethodLoadUnloadVerboseTraceData data);
    internal void AddMethod(MethodLoadUnloadJSTraceData data, Dictionary`2<JavaScriptSourceKey, string> sourceById);
    internal MethodIndex MakeJavaScriptMethod(MethodLoadUnloadJSTraceData data, Dictionary`2<JavaScriptSourceKey, string> sourceById);
    internal void ForAllUnresolvedCodeAddressesInRange(TraceProcess process, ulong start, int length, bool considerResolved, ForAllCodeAddrAction body);
    internal CodeAddressIndex GetOrCreateCodeAddressIndex(TraceProcess process, ulong address);
    private TraceProcess ProcessForAddress(TraceProcess process, ulong address);
    private IEnumerable`1<CodeAddressIndex> GetSortedCodeAddressIndexes();
    internal void LookupSymbols(TraceLogOptions options);
    private void LookupSymbolsForModule(SymbolReader reader, TraceModuleFile moduleFile, IEnumerator`1<CodeAddressIndex> codeAddressIndexCursor, bool enumerateAll, Int32& totalAddressCount);
    private ManagedSymbolModule OpenPdbForModuleFile(SymbolReader symReader, TraceModuleFile moduleFile);
    private bool TraceModuleUnchanged(TraceModuleFile moduleFile, TextWriter log, string overrideModuleFilePath);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private ILMapIndex UnloadILMapForMethod(MethodIndex methodIndex, MethodLoadUnloadVerboseTraceData data);
    private ILToNativeMap FindAndRemove(long methodID, ProcessIndex processIndex, ILMapIndex& mapIdxRet);
    internal void AddILMapping(MethodILToNativeMapTraceData data);
    [CompilerGeneratedAttribute]
private int <LookupSymbolsForModule>b__18_0(CodeAddressIndex x, CodeAddressIndex y);
    [CompilerGeneratedAttribute]
private int <ForAllUnresolvedCodeAddressesInRange>b__36_0(CodeAddressIndex x, CodeAddressIndex y);
    [CompilerGeneratedAttribute]
private int <ForAllUnresolvedCodeAddressesInRange>b__36_1(ulong addr, CodeAddressIndex codeIdx);
    [CompilerGeneratedAttribute]
private int <GetSortedCodeAddressIndexes>b__39_0(CodeAddressIndex x, CodeAddressIndex y);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceEventCounts : object {
    private TraceEventStats m_stats;
    internal TraceEventCountsKey m_key;
    internal long m_eventDataLenTotal;
    internal int m_count;
    internal int m_stackCount;
    private bool m_templateInited;
    private TraceEvent m_template;
    public string ProviderName { get; }
    public string EventName { get; }
    public String[] PayloadNames { get; }
    public bool IsClassic { get; }
    public Guid ProviderGuid { get; }
    public TraceEventID EventID { get; }
    public Guid TaskGuid { get; }
    public TraceEventOpcode Opcode { get; }
    public double AveragePayloadSize { get; }
    public int Count { get; }
    public int StackCount { get; }
    public string FullName { get; }
    private TraceEvent Template { get; }
    internal TraceEventCounts(TraceEventStats stats, TraceEvent data);
    public string get_ProviderName();
    public string get_EventName();
    public String[] get_PayloadNames();
    public bool get_IsClassic();
    public Guid get_ProviderGuid();
    public TraceEventID get_EventID();
    public Guid get_TaskGuid();
    public TraceEventOpcode get_Opcode();
    public double get_AveragePayloadSize();
    public int get_Count();
    public int get_StackCount();
    public string get_FullName();
    public virtual string ToString();
    private TraceEvent get_Template();
    public virtual int GetHashCode();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
internal class Microsoft.Diagnostics.Tracing.Etlx.TraceEventCountsKey : ValueType {
    public bool m_classicProvider;
    public Guid m_providerGuid;
    public TraceEventID m_eventId;
    public TraceEventCountsKey(TraceEvent data);
    internal TraceEventCountsKey(Deserializer deserializer);
    public sealed virtual bool Equals(TraceEventCountsKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Serialize(Serializer serializer);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceEvents : object {
    internal TraceLog log;
    internal long startTimeQPC;
    internal long endTimeQPC;
    internal Predicate`1<TraceEvent> predicate;
    internal bool backwards;
    public TraceLog Log { get; }
    public DateTime StartTime { get; }
    public double StartTimeRelativeMSec { get; }
    public DateTime EndTime { get; }
    public double EndTimeRelativeMSec { get; }
    internal TraceEvents(TraceLog log);
    internal TraceEvents(TraceLog log, long startTimeQPC, long endTimeQPC, Predicate`1<TraceEvent> predicate, bool backwards);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceEvents/<ByEventType>d__0`1")]
public IEnumerable`1<T> ByEventType();
    public TraceLogEventSource GetSource();
    public TraceEvents Backwards();
    public TraceEvents FilterByTime(DateTime startTime, DateTime endTime);
    public TraceEvents FilterByTime(double startTimeRelativeMSec, double endTimeRelativeMSec);
    public TraceEvents Filter(Predicate`1<TraceEvent> predicate);
    public TraceLog get_Log();
    public DateTime get_StartTime();
    public double get_StartTimeRelativeMSec();
    public DateTime get_EndTime();
    public double get_EndTimeRelativeMSec();
    private sealed virtual override IEnumerator`1<TraceEvent> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.TraceEvent>.GetEnumerator();
    internal TraceEvents Filter(long startTimeQPC, long endTimeQPC, Predicate`1<TraceEvent> predicate);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceEventStats : object {
    private Dictionary`2<TraceEventCountsKey, TraceEventCounts> m_counts;
    internal TraceLog m_log;
    public int Count { get; }
    internal TraceEventStats(TraceLog log);
    public int get_Count();
    public virtual string ToString();
    internal TraceEventCounts GetEventCounts(TraceEvent data);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator`1<TraceEventCounts> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.Etlx.TraceEventCounts>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceLoadedModule : object {
    internal ulong key;
    internal bool overlaps;
    internal long loadTimeQPC;
    internal long unloadTimeQPC;
    internal TraceManagedModule managedModule;
    private TraceProcess process;
    private TraceModuleFile moduleFile;
    internal int stackVisitedID;
    public ulong ImageBase { get; }
    public DateTime LoadTime { get; }
    public double LoadTimeRelativeMSec { get; }
    public DateTime UnloadTime { get; }
    public double UnloadTimeRelativeMSec { get; }
    public TraceProcess Process { get; }
    public long ModuleID { get; }
    public TraceModuleFile ModuleFile { get; }
    public string FilePath { get; }
    public string Name { get; }
    public TraceManagedModule ManagedModule { get; }
    internal TraceLoadedModule(TraceProcess process, TraceModuleFile moduleFile, ulong imageBase);
    internal TraceLoadedModule(TraceProcess process, TraceModuleFile moduleFile, long moduleID);
    public ulong get_ImageBase();
    public DateTime get_LoadTime();
    public double get_LoadTimeRelativeMSec();
    public DateTime get_UnloadTime();
    public double get_UnloadTimeRelativeMSec();
    public TraceProcess get_Process();
    public virtual long get_ModuleID();
    public TraceModuleFile get_ModuleFile();
    public string get_FilePath();
    public string get_Name();
    public TraceManagedModule get_ManagedModule();
    public virtual string ToString();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    internal void ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    internal void FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceLoadedModules : object {
    internal static Func`3<ulong, TraceLoadedModule, int> compareByKey;
    private TraceProcess process;
    private GrowableArray`1<TraceLoadedModule> modules;
    public TraceProcess Process { get; }
    internal TraceLoadedModules(TraceProcess process);
    private static TraceLoadedModules();
    public TraceProcess get_Process();
    public TraceLoadedModule GetModuleContainingAddress(ulong address, double timeRelativeMSec);
    public TraceLoadedModule GetLoadedModule(string fileName, double timeRelativeMSec);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceLoadedModules/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<TraceLoadedModule> GetEnumerator();
    internal TraceLoadedModule GetLoadedModule(string fileName, long timeQPC);
    internal TraceModuleFile ImageLoadOrUnload(ImageLoadTraceData data, bool isLoad, string dataFileName);
    internal void ManagedModuleLoadOrUnload(ModuleLoadUnloadTraceData data, bool isLoad, bool isDCStartStop);
    internal TraceManagedModule GetOrCreateManagedModule(long managedModuleID, long timeQPC);
    private TraceManagedModule FindManagedModuleAndIndex(long moduleID, long timeQPC, Int32& index);
    internal TraceLoadedModule FindModuleAndIndexContainingAddress(ulong address, long timeQPC, Int32& index);
    private void InsertAndSetOverlap(int moduleIndex, TraceLoadedModule module);
    [ConditionalAttribute("DEBUG")]
private void CheckClassInvarients();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceLog : TraceEventSource {
    private int m_orphanedStacks;
    private PastEventInfo pastEventInfo;
    private IncompleteStack freeEventStackInfos;
    private Dictionary`2<ulong, IncompleteStack> kernelStackKeyToInfo;
    private Dictionary`2<ulong, IncompleteStack> userStackKeyToInfo;
    private static Char[] s_directorySeparators;
    internal static int headerSize;
    private string etlxFilePath;
    private int memorySizeMeg;
    private int eventsLost;
    private string osName;
    private string osBuild;
    private long bootTime100ns;
    private bool hasPdbInfo;
    private bool truncated;
    private EventIndex firstTimeInversion;
    private int sampleProfileInterval100ns;
    private string machineName;
    private TraceProcesses processes;
    private TraceThreads threads;
    private TraceCallStacks callStacks;
    private TraceCodeAddresses codeAddresses;
    private TraceEventStats stats;
    private DeferedRegion lazyRawEvents;
    private DeferedRegion lazyEventsToStacks;
    private DeferedRegion lazyEventsToCodeAddresses;
    private DeferedRegion lazyCswitchBlockingEventsToStacks;
    private TraceEvents events;
    private GrowableArray`1<EventPageEntry> eventPages;
    private int eventCount;
    private bool processingDisabled;
    private int numberOnPage;
    private bool removeFromStream;
    private bool bookKeepingEvent;
    private bool bookeepingEventThatMayHaveStack;
    private bool noStack;
    private TraceThread thread;
    private List`1<MethodLoadUnloadVerboseTraceData> jittedMethods;
    private List`1<MethodLoadUnloadJSTraceData> jsJittedMethods;
    private Dictionary`2<JavaScriptSourceKey, string> sourceFilesByID;
    private TraceModuleFiles moduleFiles;
    private GrowableArray`1<EventsToStackIndex> eventsToStacks;
    private GrowableArray`1<EventsToStackIndex> cswitchBlockingEventsToStacks;
    private GrowableArray`1<EventsToCodeAddressIndex> eventsToCodeAddresses;
    private TraceEventDispatcher freeLookup;
    private PinnedStreamReader freeReader;
    private Dictionary`2<string, TraceEventParser> parsers;
    internal GrowableArray`1<Guid> relatedActivityIDs;
    internal GrowableArray`1<string> containerIDs;
    internal static int eventsPerPage;
    private static Func`3<EventIndex, EventsToStackIndex, int> stackComparer;
    private static Func`3<EventIndex, EventsToCodeAddressIndex, int> CodeAddressComparer;
    internal TraceEventDispatcher rawEventSourceToConvert;
    internal TraceEventDispatcher rawKernelEventSource;
    internal TraceLogOptions options;
    internal bool registeringStandardParsers;
    internal TraceLogEventSource realTimeSource;
    private Queue`1<QueueEntry> realTimeQueue;
    private Timer realTimeFlushTimer;
    private Func`3<TraceEvent, ulong, bool> fnAddAddressToCodeAddressMap;
    public TraceEvents Events { get; }
    public TraceProcesses Processes { get; }
    public TraceThreads Threads { get; }
    public TraceModuleFiles ModuleFiles { get; }
    public TraceCallStacks CallStacks { get; }
    public TraceCodeAddresses CodeAddresses { get; }
    public TraceEventStats Stats { get; }
    public EventIndex MaxEventIndex { get; }
    public int EventCount { get; }
    public long Size { get; }
    public int EventsLost { get; }
    public string FilePath { get; }
    public string MachineName { get; }
    public string OSName { get; }
    public string OSBuild { get; }
    public DateTime BootTime { get; }
    public Nullable`1<int> UTCOffsetMinutes { get; }
    public bool HasPdbInfo { get; }
    public int MemorySizeMeg { get; }
    public bool HasCallStacks { get; }
    public TimeSpan SampleProfileInterval { get; }
    public bool Truncated { get; }
    public EventIndex FirstTimeInversion { get; }
    public IEnumerable`1<TraceEventParser> Parsers { get; }
    private int FastSerialization.IFastSerializableVersion.Version { get; }
    private int FastSerialization.IFastSerializableVersion.MinimumVersionCanRead { get; }
    private int FastSerialization.IFastSerializableVersion.MinimumReaderVersion { get; }
    public TraceLog(string etlxFilePath);
    private TraceLog(TraceEventSession session);
    private static TraceLog();
    public static string CreateFromEventTraceLogFile(string filePath, string etlxFilePath, TraceLogOptions options, TraceEventDispatcherOptions traceEventDispatcherOptions);
    public static string CreateFromEventTraceLogFile(TraceEventDispatcher source, string etlxFilePath, TraceLogOptions options);
    public static TraceLog OpenOrConvert(string etlOrEtlxFilePath, TraceLogOptions options);
    public static TraceLogEventSource CreateFromTraceEventSession(TraceEventSession session);
    public static string CreateFromLttngTextDataFile(string filePath, string etlxFilePath, TraceLogOptions options);
    public static string CreateFromEventPipeDataFile(string filePath, string etlxFilePath, TraceLogOptions options);
    public TraceEvents get_Events();
    public TraceProcesses get_Processes();
    public TraceThreads get_Threads();
    public TraceModuleFiles get_ModuleFiles();
    public TraceCallStacks get_CallStacks();
    public TraceCodeAddresses get_CodeAddresses();
    public TraceEventStats get_Stats();
    public TraceCallStack GetCallStackForEvent(TraceEvent anEvent);
    public CallStackIndex GetCallStackIndexForEvent(TraceEvent anEvent);
    public EventIndex get_MaxEventIndex();
    public TraceEvent GetEvent(EventIndex eventIndex);
    public int get_EventCount();
    public virtual long get_Size();
    public virtual int get_EventsLost();
    public string get_FilePath();
    public string get_MachineName();
    public string get_OSName();
    public string get_OSBuild();
    public DateTime get_BootTime();
    public Nullable`1<int> get_UTCOffsetMinutes();
    public bool get_HasPdbInfo();
    public int get_MemorySizeMeg();
    public bool get_HasCallStacks();
    public TimeSpan get_SampleProfileInterval();
    public bool CurrentMachineIsCollectionMachine();
    public bool get_Truncated();
    public EventIndex get_FirstTimeInversion();
    public IEnumerable`1<TraceEventParser> get_Parsers();
    public virtual string ToString();
    internal virtual void RegisterEventTemplateImpl(TraceEvent template);
    internal virtual void UnregisterEventTemplateImpl(Delegate action, Guid providerGuid, int eventId);
    internal virtual void RegisterParserImpl(TraceEventParser parser);
    internal virtual void RegisterUnhandledEventImpl(Func`2<TraceEvent, bool> callback);
    internal virtual string TaskNameForGuidImpl(Guid guid);
    internal virtual string ProviderNameForGuidImpl(Guid taskOrProviderGuid);
    private static void RemoveAllButLastEntries(GrowableArray`1& growableArray, int keepCount);
    private void DispatchClonedEvent(TraceEvent toSend);
    private void FlushRealTimeEvents(object notUsed);
    public CodeAddressIndex GetCodeAddressIndexAtEvent(ulong address, TraceEvent context);
    internal TraceCodeAddress GetCodeAddressAtEvent(ulong address, TraceEvent context);
    internal CallStackIndex GetCallStackIndexForEventIndex(EventIndex eventIndex);
    internal static void CreateFromLinuxEventSources(CtfTraceEventSource source, string etlxFilePath, TraceLogOptions options);
    internal static void CreateFromEventPipeEventSources(TraceEventDispatcher source, string etlxFilePath, TraceLogOptions options);
    internal CallStackIndex GetCallStackIndexForCSwitchBlockingEventIndex(EventIndex eventIndex);
    internal static void CreateFromTraceEventSource(TraceEventDispatcher source, string etlxFilePath, TraceLogOptions options);
    internal void RegisterStandardParsers();
    internal virtual Guid GetRelatedActivityID(EVENT_RECORD* eventRecord);
    internal virtual string GetContainerID(EVENT_RECORD* eventRecord);
    internal virtual int LastChanceGetThreadID(TraceEvent data);
    internal virtual int LastChanceGetProcessID(TraceEvent data);
    private void AddMarkThread(int threadID, long timeStamp, int heapNum);
    private void SetupCallbacks(TraceEventDispatcher rawEvents);
    private void CopyRawEvents(TraceEventDispatcher rawEvents, IStreamWriter writer);
    private static bool RoughDllPdbMatch(string dllPath, string pdbPath);
    private bool AddAddressToCodeAddressMap(TraceEvent data, ulong address);
    private void GenerateMemInfoRecordsPerProcess(MemoryProcessMemInfoTraceData data, IStreamWriter writer);
    private IncompleteStack GetIncompleteStackForStackEvent(TraceEvent stackEvent, long eventTimeStampQPC);
    private bool EmitStackOnExitFromKernel(IncompleteStack& listOfIncompleteKernelStacks, CallStackIndex userModeStack, IncompleteStack target);
    private bool EmitStackOnExitFromKernel(IncompleteStack& listOfIncompleteKernelStacks, ulong userModeKey, IncompleteStack target);
    private void LogStackDefinition(StackWalkDefTraceData data);
    private IncompleteStack AllocateIncompleteStack(EventIndex eventIndex, TraceThread thread, EventIndex blockingEventIndex);
    private void FreeIncompleteStack(IncompleteStack toFree);
    private void CategorizeThread(TraceEvent data, string category, bool overwrite);
    internal static bool IsWindowsKernelAddress(ulong ip, int pointerSize);
    internal bool ProcessExtendedData(TraceEvent data, ushort extendedDataCount, TraceEventCounts countForEvent);
    internal virtual string ProcessName(int processID, long timeQPC);
    protected virtual void Dispose(bool disposing);
    private static void WriteBlob(IntPtr source, IStreamWriter writer, int byteCount);
    internal void DebugWarn(bool condition, string message, TraceEvent data);
    internal static string GetFullName(MethodLoadUnloadVerboseTraceData data);
    internal int FindPageIndex(long timeQPC);
    internal void SeekToTimeOnPage(PinnedStreamReader reader, long timeQPC, int pageIndex, Int32& indexOnPage, StreamLabel[] positions);
    internal PinnedStreamReader AllocReader();
    internal void FreeReader(PinnedStreamReader reader);
    internal TraceLogEventSource AddAllTemplatesToDispatcher(TraceLogEventSource etlxSource);
    private void AddTemplatesForParser(TraceEventParser parser, TraceLogEventSource ret);
    internal TraceEventDispatcher AllocLookup();
    internal void FreeLookup(TraceEventDispatcher lookup);
    private void InitializeFromFile(string etlxFilePath);
    internal static string GetFileNameWithoutExtensionNoIllegalChars(string filePath);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override int FastSerialization.IFastSerializableVersion.get_Version();
    private sealed virtual override int FastSerialization.IFastSerializableVersion.get_MinimumVersionCanRead();
    private sealed virtual override int FastSerialization.IFastSerializableVersion.get_MinimumReaderVersion();
    internal void AddStackToEvent(EventIndex eventIndex, CallStackIndex stackIndex);
    [CompilerGeneratedAttribute]
private void <.ctor>b__67_0(TraceEvent data);
    [CompilerGeneratedAttribute]
private IFastSerializable <InitializeFromFile>b__117_1();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceLogEventSource : TraceEventDispatcher {
    private TraceEvents events;
    private bool registeredUnhandledEvents;
    internal bool ownsItsTraceLog;
    public TraceLog TraceLog { get; }
    public EventIndex CurrentEventIndex { get; }
    public int EventsLost { get; }
    internal TraceLogEventSource(TraceEvents events, bool ownsItsTraceLog);
    public TraceLog get_TraceLog();
    public EventIndex get_CurrentEventIndex();
    public virtual bool Process();
    public virtual int get_EventsLost();
    protected virtual void Dispose(bool disposing);
    internal virtual string ProcessName(int processID, long timeQPC);
    internal virtual void RegisterEventTemplateImpl(TraceEvent template);
    internal virtual Guid GetRelatedActivityID(EVENT_RECORD* eventRecord);
    internal virtual string GetContainerID(EVENT_RECORD* eventRecord);
    [CompilerGeneratedAttribute]
private void <Process>b__4_0();
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.Etlx.TraceLogExtensions : object {
    [ExtensionAttribute]
public static TraceProcess Process(TraceEvent anEvent);
    [ExtensionAttribute]
public static TraceThread Thread(TraceEvent anEvent);
    [ExtensionAttribute]
public static TraceLog Log(TraceEvent anEvent);
    [ExtensionAttribute]
public static TraceCallStack CallStack(TraceEvent anEvent);
    [ExtensionAttribute]
public static CallStackIndex CallStackIndex(TraceEvent anEvent);
    [ExtensionAttribute]
public static CallStackIndex BlockingStack(CSwitchTraceData anEvent);
    [ExtensionAttribute]
public static TraceCallStacks CallStacks(TraceEvent anEvent);
    [ExtensionAttribute]
[ObsoleteAttribute("Likely to be removed Replaced by ActivityMap.GetActivityC(TraceEvent)")]
public static TraceActivity Activity(TraceEvent anEvent);
    [ExtensionAttribute]
public static ActivityIndex ActivityIndex(TraceEvent anEvent);
    [ExtensionAttribute]
public static TraceCodeAddress ProgramCounterAddress(MemoryPageFaultTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex ProgramCounterAddressIndex(MemoryPageFaultTraceData anEvent);
    [ExtensionAttribute]
public static TraceCodeAddress IntructionPointerCodeAddress(SampledProfileTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex IntructionPointerCodeAddressIndex(SampledProfileTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex SysCallAddress(SysCallEnterTraceData anEvent);
    [ExtensionAttribute]
public static TraceCodeAddress IntructionPointerCodeAddress(PMCCounterProfTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex IntructionPointerCodeAddressIndex(PMCCounterProfTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex RoutineCodeAddressIndex(ISRTraceData anEvent);
    [ExtensionAttribute]
public static CodeAddressIndex RoutineCodeAddressIndex(DPCTraceData anEvent);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceLogOptions : object {
    public Predicate`1<string> ShouldResolveSymbols;
    public bool LocalSymbolsOnly;
    public bool AlwaysResolveSymbols;
    public string ConversionLogName;
    public bool KeepAllEvents;
    public int MaxEventCount;
    public double SkipMSec;
    public Action`3<bool, int, int> OnLostEvents;
    public string ExplicitManifestDir;
    public bool ContinueOnError;
    private TextWriter m_ConversionLog;
    public TextWriter ConversionLog { get; public set; }
    public TextWriter get_ConversionLog();
    public void set_ConversionLog(TextWriter value);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceManagedModule : TraceLoadedModule {
    internal TraceLoadedModule nativeModule;
    internal long assemblyID;
    internal ModuleFlags flags;
    public long ModuleID { get; }
    public long AssemblyID { get; }
    public bool IsAppDomainNeutral { get; }
    public TraceLoadedModule NativeModule { get; }
    internal TraceManagedModule(TraceProcess process, TraceModuleFile moduleFile, long moduleID);
    public virtual long get_ModuleID();
    public long get_AssemblyID();
    public bool get_IsAppDomainNeutral();
    public TraceLoadedModule get_NativeModule();
    public virtual string ToString();
    internal void InitializeNativeModuleIsReadyToRun();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceMethod : object {
    private TraceMethods methods;
    private MethodIndex methodIndex;
    public MethodIndex MethodIndex { get; }
    public string FullMethodName { get; }
    public int MethodToken { get; }
    public int MethodRva { get; }
    public ModuleFileIndex MethodModuleFileIndex { get; }
    public TraceModuleFile MethodModuleFile { get; }
    internal TraceMethod(TraceMethods methods, MethodIndex methodIndex);
    public MethodIndex get_MethodIndex();
    public string get_FullMethodName();
    public int get_MethodToken();
    public int get_MethodRva();
    public ModuleFileIndex get_MethodModuleFileIndex();
    public TraceModuleFile get_MethodModuleFile();
    public virtual string ToString();
    public StringBuilder ToString(StringBuilder sb);
    internal static string PrefixOptimizationTier(string str, OptimizationTier optimizationTier);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceMethods : object {
    private DeferedRegion lazyMethods;
    private GrowableArray`1<MethodInfo> methods;
    private TraceMethod[] methodObjects;
    internal TraceCodeAddresses codeAddresses;
    public int Count { get; }
    public TraceMethod Item { get; }
    internal TraceMethods(TraceCodeAddresses codeAddresses);
    public int get_Count();
    public int MethodToken(MethodIndex methodIndex);
    public int MethodRva(MethodIndex methodIndex);
    public ModuleFileIndex MethodModuleFileIndex(MethodIndex methodIndex);
    public string FullMethodName(MethodIndex methodIndex);
    public TraceMethod get_Item(MethodIndex methodIndex);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceMethods/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<TraceMethod> GetEnumerator();
    internal MethodIndex NewMethod(string fullMethodName, ModuleFileIndex moduleIndex, int methodTokenOrRva);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceModuleFile : object {
    internal string fileName;
    internal int imageSize;
    internal ulong imageBase;
    internal string name;
    private ModuleFileIndex moduleFileIndex;
    internal bool isReadyToRun;
    internal TraceModuleFile next;
    internal string pdbName;
    internal Guid pdbSignature;
    internal int pdbAge;
    internal string fileVersion;
    internal string productName;
    internal string productVersion;
    internal int timeDateStamp;
    internal int imageChecksum;
    internal int codeAddressesInModule;
    internal TraceModuleFile managedModule;
    public ModuleFileIndex ModuleFileIndex { get; }
    public string FilePath { get; }
    public string Name { get; }
    public ulong ImageBase { get; }
    public int ImageSize { get; }
    public ulong ImageEnd { get; }
    public string PdbName { get; }
    public Guid PdbSignature { get; }
    public int PdbAge { get; }
    public string FileVersion { get; }
    public string ProductName { get; }
    public string ProductVersion { get; }
    public int ImageChecksum { get; }
    public int ImageId { get; }
    public bool IsReadyToRun { get; }
    public string GitCommitHash { get; }
    public DateTime BuildTime { get; }
    public int CodeAddressesInModule { get; }
    public TraceModuleFile ManagedModule { get; }
    internal TraceModuleFile(string fileName, ulong imageBase, ModuleFileIndex moduleFileIndex);
    public ModuleFileIndex get_ModuleFileIndex();
    public string get_FilePath();
    public string get_Name();
    public ulong get_ImageBase();
    public int get_ImageSize();
    public ulong get_ImageEnd();
    public string get_PdbName();
    public Guid get_PdbSignature();
    public int get_PdbAge();
    public string get_FileVersion();
    public string get_ProductName();
    public string get_ProductVersion();
    public int get_ImageChecksum();
    public int get_ImageId();
    public bool get_IsReadyToRun();
    public string get_GitCommitHash();
    public DateTime get_BuildTime();
    public int get_CodeAddressesInModule();
    public TraceModuleFile get_ManagedModule();
    public virtual string ToString();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceModuleFiles : object {
    private TraceLog log;
    private Dictionary`2<string, TraceModuleFile> moduleFilesByName;
    private GrowableArray`1<TraceModuleFile> moduleFiles;
    public int Count { get; }
    public TraceModuleFile Item { get; }
    public TraceLog Log { get; }
    internal TraceModuleFiles(TraceLog log);
    public int get_Count();
    public TraceModuleFile get_Item(ModuleFileIndex moduleFileIndex);
    public TraceLog get_Log();
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceModuleFiles/<System-Collections-Generic-IEnumerable<Microsoft-Diagnostics-Tracing-Etlx-TraceModuleFile>-GetEnumerator>d__7")]
private sealed virtual override IEnumerator`1<TraceModuleFile> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.Etlx.TraceModuleFile>.GetEnumerator();
    internal void SetModuleFileName(TraceModuleFile moduleFile, string fileName);
    internal TraceModuleFile GetOrCreateModuleFile(string nativePath, ulong imageBase);
    internal TraceModuleFile GetModuleFile(string fileName, ulong imageBase);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceProcess : object {
    private int processID;
    internal ProcessIndex processIndex;
    private TraceLog log;
    private string commandLine;
    internal string imageFileName;
    private string name;
    internal long firstEventSeenQPC;
    internal long startTimeQPC;
    internal long endTimeQPC;
    private Nullable`1<int> exitStatus;
    private int parentID;
    private TraceProcess parent;
    internal int cpuSamples;
    internal bool loadedAModuleHigh;
    internal bool anyModuleLoaded;
    internal bool anyThreads;
    internal bool isServerGC;
    internal bool shouldCheckIsServerGC;
    internal Dictionary`2<int, int> markThreadsInGC;
    private TraceLoadedModules loadedModules;
    internal Dictionary`2<ulong, CodeAddressIndex> codeAddressesInProcess;
    internal GrowableArray`1<CodeAddressIndex> unresolvedCodeAddresses;
    internal bool unresolvedCodeAddressesIsSorted;
    internal bool seenVersion2GCStartEvents;
    internal GrowableArray`1<GrowableArray`1<MethodLookupInfo>> jitMethods;
    internal Dictionary`2<ulong, ActivityIndex> scheduledActivityIdToActivityIndex;
    public int ProcessID { get; }
    public ProcessIndex ProcessIndex { get; }
    public string Name { get; }
    public string CommandLine { get; }
    public string ImageFileName { get; }
    public DateTime StartTime { get; }
    public double StartTimeRelativeMsec { get; }
    public DateTime EndTime { get; }
    public double EndTimeRelativeMsec { get; }
    public int ParentID { get; }
    public TraceProcess Parent { get; }
    public Nullable`1<int> ExitStatus { get; }
    public float CPUMSec { get; }
    public bool Is64Bit { get; }
    public TraceLog Log { get; }
    public IEnumerable`1<TraceThread> Threads { get; }
    public TraceLoadedModules LoadedModules { get; }
    public TraceEvents EventsInProcess { get; }
    public TraceEvents EventsDuringProcess { get; }
    internal TraceProcess(int processID, TraceLog log, ProcessIndex processIndex);
    public int get_ProcessID();
    public ProcessIndex get_ProcessIndex();
    public string get_Name();
    public string get_CommandLine();
    public string get_ImageFileName();
    public DateTime get_StartTime();
    public double get_StartTimeRelativeMsec();
    public DateTime get_EndTime();
    public double get_EndTimeRelativeMsec();
    public int get_ParentID();
    public TraceProcess get_Parent();
    public Nullable`1<int> get_ExitStatus();
    public float get_CPUMSec();
    public bool get_Is64Bit();
    public TraceLog get_Log();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceProcess/<get_Threads>d__31")]
public IEnumerable`1<TraceThread> get_Threads();
    public TraceLoadedModules get_LoadedModules();
    public TraceEvents get_EventsInProcess();
    public TraceEvents get_EventsDuringProcess();
    public virtual string ToString();
    internal void ProcessStart(ProcessTraceData data);
    internal void ProcessEnd(ProcessTraceData data);
    internal void SetParentForProcess(TraceProcess sentinel);
    internal bool IsKernelAddress(ulong ip, int pointerSize);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    internal MethodIndex FindJITTEDMethodFromAddress(ulong codeAddress);
    internal void InsertJITTEDMethod(ulong startAddress, int length, Func`1<MethodLookupInfo> onInsert);
    [ConditionalAttribute("DEBUG")]
private void CheckJitTables();
    [CompilerGeneratedAttribute]
private bool <get_EventsInProcess>b__35_0(TraceEvent anEvent);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceProcesses : object {
    private GrowableArray`1<TraceProcess> processes;
    private GrowableArray`1<TraceProcess> processesByPID;
    private TraceLog log;
    private static Func`3<int, TraceProcess, int> compareByProcessID;
    public TraceLog Log { get; }
    public int Count { get; }
    public TraceProcess Item { get; }
    internal TraceProcesses(TraceLog log);
    private static TraceProcesses();
    public TraceLog get_Log();
    public int get_Count();
    public TraceProcess get_Item(ProcessIndex processIndex);
    public TraceProcess GetProcess(int processID, double timeRelativeMSec);
    public TraceProcess LastProcessWithID(int processID);
    public TraceProcess FirstProcessWithName(string processName, double afterTimeRelativeMSec);
    public TraceProcess LastProcessWithName(string processName, double afterTimeRelativeMSec);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceProcesses/<System-Collections-Generic-IEnumerable<Microsoft-Diagnostics-Tracing-Etlx-TraceProcess>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<TraceProcess> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.Etlx.TraceProcess>.GetEnumerator();
    internal TraceProcess GetProcess(int processID, long timeQPC);
    internal TraceProcess GetOrCreateProcess(int processID, long timeQPC, bool isProcessStartEvent);
    internal TraceProcess FindProcessAndIndex(int processID, long timeQPC, Int32& index);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceProcesses/<System-Collections-IEnumerable-GetEnumerator>d__20")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Etlx.TraceThread : object {
    private int threadID;
    private ThreadIndex threadIndex;
    internal TraceProcess process;
    internal long startTimeQPC;
    internal long endTimeQPC;
    internal int cpuSamples;
    internal string threadInfo;
    internal ulong userStackBase;
    private string verboseThreadName;
    internal GrowableArray`1<ActivityIndex> activityIds;
    internal IncompleteStack lastEntryIntoKernel;
    internal long lastEmitStackOnExitFromKernelQPC;
    internal EventIndex lastBlockingCSwitchEventIndex;
    public int ThreadID { get; }
    public ThreadIndex ThreadIndex { get; }
    public TraceProcess Process { get; }
    public DateTime StartTime { get; }
    public double StartTimeRelativeMSec { get; }
    public DateTime EndTime { get; }
    public double EndTimeRelativeMSec { get; }
    public float CPUMSec { get; }
    public TraceEvents EventsInThread { get; }
    public TraceEvents EventsDuringThread { get; }
    [ObsoleteAttribute("Likely to be removed Replaced by ActivityComputer.GetDefaultActivity(TraceThread)")]
public ActivityIndex DefaultActivityIndex { get; }
    public string ThreadInfo { get; }
    public string VerboseThreadName { get; }
    public ulong UserStackBase { get; }
    internal TraceThread(int threadID, TraceProcess process, ThreadIndex threadIndex);
    public int get_ThreadID();
    public ThreadIndex get_ThreadIndex();
    public TraceProcess get_Process();
    public DateTime get_StartTime();
    public double get_StartTimeRelativeMSec();
    public DateTime get_EndTime();
    public double get_EndTimeRelativeMSec();
    public float get_CPUMSec();
    public TraceEvents get_EventsInThread();
    public TraceEvents get_EventsDuringThread();
    [ObsoleteAttribute("Likely to be removed Replaced by ActivityMap.GetActivity(TraceThread, double)")]
public ActivityIndex GetActivityIndex(double relativeMSec);
    public ActivityIndex get_DefaultActivityIndex();
    internal void ThreadEnd(ThreadTraceData data, TraceProcess process);
    public string get_ThreadInfo();
    public string get_VerboseThreadName();
    public ulong get_UserStackBase();
    public virtual string ToString();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    [CompilerGeneratedAttribute]
private bool <get_EventsInThread>b__17_0(TraceEvent anEvent);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Etlx.TraceThreads : object {
    private GrowableArray`1<TraceThread> threads;
    private TraceLog log;
    internal HistoryDictionary`2<int, TraceThread> threadIDtoThread;
    public int Count { get; }
    public TraceThread Item { get; }
    internal TraceThreads(TraceLog log);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Etlx.TraceThreads/<System-Collections-Generic-IEnumerable<Microsoft-Diagnostics-Tracing-Etlx-TraceThread>-GetEnumerator>d__0")]
private sealed virtual override IEnumerator`1<TraceThread> System.Collections.Generic.IEnumerable<Microsoft.Diagnostics.Tracing.Etlx.TraceThread>.GetEnumerator();
    public int get_Count();
    public TraceThread get_Item(ThreadIndex threadIndex);
    public TraceThread GetThread(int threadID, double timeRelativeMSec);
    public virtual string ToString();
    internal TraceThread GetThread(int threadID, long timeQPC);
    private void InitThread();
    internal TraceThread GetOrCreateThread(int threadID, long timeQPC, TraceProcess process, bool isThreadCreateEvent);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Diagnostics.Tracing.ETWMapping : ValueType {
    public Guid Guid;
    public TraceEventOpcode Opcode;
    public TraceEventID Id;
    public byte Version;
    public bool IsNull { get; }
    public ETWMapping(Guid guid, int opcode, int id, int version);
    public bool get_IsNull();
}
public class Microsoft.Diagnostics.Tracing.ETWReloggerTraceEventSource : TraceEventDispatcher {
    private EventListener m_eventListener;
    private CTraceRelogger m_relogger;
    private ulong m_traceHandleForFirstStream;
    private ReloggerCallbacks m_myCallbacks;
    private int m_eventsLost;
    private Byte* m_scratchBuffer;
    private int m_scratchBufferSize;
    private ITraceEvent m_curITraceEvent;
    private EVENT_RECORD* m_curTraceEventRecord;
    private TraceLoggingEventId m_traceLoggingEventId;
    unknown bool OutputUsesCompressedFormat {public set; }
    public int EventsLost { get; }
    public ETWReloggerTraceEventSource(string inputFileName, string outputFileName);
    public ETWReloggerTraceEventSource(string fileOrSessionName, TraceEventSourceType type, string outputFileName);
    public void set_OutputUsesCompressedFormat(bool value);
    public void WriteEvent(TraceEvent data);
    public void ConnectEventSource(EventSource eventSource);
    public void WriteEvent(Guid providerId, _EVENT_DESCRIPTOR& eventDescriptor, TraceEvent template, Object[] payload);
    public void WriteEvent(Guid providerId, _EVENT_DESCRIPTOR& eventDescriptor, DateTime timeStamp, int processId, int processorIndex, int threadID, Guid activityID, Object[] payload);
    public virtual int get_EventsLost();
    public virtual bool Process();
    protected virtual void Dispose(bool disposing);
    public virtual void StopProcessing();
    private void SetPayload(ITraceEvent newEvent, IList`1<object> payloadArgs);
    private void EnsureSratchBufferSpace(int requriedSize);
    internal void SendManifest(Byte[] rawManifest, EventSource eventSource);
}
public class Microsoft.Diagnostics.Tracing.ETWTraceEventSource : TraceEventDispatcher {
    private bool processTraceCalled;
    private EVENT_RECORD* convertedHeader;
    private EVENT_TRACE_LOGFILEW[] logFiles;
    private UInt64[] handles;
    private IEnumerable`1<string> fileNames;
    internal object lockObj;
    private Dictionary`2<int, string> processNameForID;
    private TraceLoggingEventId traceLoggingEventId;
    public string LogFileName { get; }
    public string SessionName { get; }
    public long Size { get; }
    public int EventsLost { get; }
    public bool CanReset { get; }
    public ETWTraceEventSource(string fileName);
    public ETWTraceEventSource(string fileOrSessionName, TraceEventSourceType type);
    public ETWTraceEventSource(IEnumerable`1<string> fileNames, TraceEventSourceType type);
    public ETWTraceEventSource(IEnumerable`1<string> fileNames);
    public virtual bool Process();
    [ObsoleteAttribute("Not obsolete but experimental.   We may change this in the future.")]
public void ReprocessEvent(TraceEvent ev);
    public string get_LogFileName();
    public string get_SessionName();
    public virtual long get_Size();
    public virtual int get_EventsLost();
    public bool get_CanReset();
    public void SynchronizeClock();
    public static IEnumerable`1<string> GetModulesNeedingSymbols(string etlFile, ModuleSymbolOptions options);
    private void Initialize(IEnumerable`1<string> fileNames);
    private void Initialize(string fileOrSessionName, TraceEventSourceType type);
    private void InitializeFiles();
    internal static int GetOSPointerSize();
    internal static DateTime SafeFromFileTimeUtc(long fileTime);
    internal static List`1<string> GetMergeAllLogFiles(string fileName);
    private bool ProcessOneFile();
    private void RawDispatchClassic(EVENT_RECORD* eventData);
    private void RawDispatch(EVENT_RECORD* rawData);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void Reset();
    private bool TraceEventBufferCallback(IntPtr rawLogFile);
    internal virtual string ProcessName(int processID, long time100ns);
    [CompilerGeneratedAttribute]
private void <InitializeFiles>b__22_0(ProcessTraceData data);
    [CompilerGeneratedAttribute]
private void <InitializeFiles>b__22_1(ProcessTraceData data);
    [CompilerGeneratedAttribute]
private void <InitializeFiles>b__22_2(EventTraceHeaderTraceData data);
}
internal enum Microsoft.Diagnostics.Tracing.EventBlockFlags : Enum {
    public short value__;
    public static EventBlockFlags Uncompressed;
    public static EventBlockFlags HeaderCompression;
}
public enum Microsoft.Diagnostics.Tracing.EventFilterResponse : Enum {
    public int value__;
    public static EventFilterResponse RejectEvent;
    public static EventFilterResponse RejectProvider;
    public static EventFilterResponse AcceptEvent;
}
public enum Microsoft.Diagnostics.Tracing.EventIndex : Enum {
    public UInt32 value__;
    public static EventIndex Invalid;
}
public class Microsoft.Diagnostics.Tracing.EventPipe.ClrThreadSampleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ClrThreadSampleTraceData> Action;
    public ClrThreadSampleType Type { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ClrThreadSampleTraceData(Action`1<ClrThreadSampleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ClrThreadSampleType get_Type();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ClrThreadSampleTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ClrThreadSampleTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.EventPipe.ClrThreadSampleType : Enum {
    public int value__;
    public static ClrThreadSampleType Error;
    public static ClrThreadSampleType External;
    public static ClrThreadSampleType Managed;
}
public class Microsoft.Diagnostics.Tracing.EventPipe.ClrThreadStackWalkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ClrThreadStackWalkTraceData> Action;
    public int FrameCount { get; }
    internal Void* InstructionPointers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ClrThreadStackWalkTraceData(Action`1<ClrThreadStackWalkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_FrameCount();
    public ulong InstructionPointer(int index);
    internal Void* get_InstructionPointers();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ClrThreadStackWalkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ClrThreadStackWalkTraceData> value);
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.EventCache : object {
    [CompilerGeneratedAttribute]
private ParseBufferItemFunction OnEvent;
    [CompilerGeneratedAttribute]
private Action`1<int> OnEventsDropped;
    private Dictionary`2<long, EventCacheThread> _threads;
    [CompilerGeneratedAttribute]
public void add_OnEvent(ParseBufferItemFunction value);
    [CompilerGeneratedAttribute]
public void remove_OnEvent(ParseBufferItemFunction value);
    [CompilerGeneratedAttribute]
public void add_OnEventsDropped(Action`1<int> value);
    [CompilerGeneratedAttribute]
public void remove_OnEventsDropped(Action`1<int> value);
    public void ProcessEventBlock(Byte[] eventBlockData);
    public void ProcessSequencePointBlock(Byte[] sequencePointBytes);
    public void Flush();
    private void SortAndDispatch(long stopTimestamp);
    private void AddThread(long captureThreadId, EventCacheThread thread);
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.EventCacheThread : object {
    public Queue`1<EventMarker> Events;
    public int SequenceNumber;
    public long LastCachedEventTimestamp;
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.EventMarker : object {
    public EventPipeEventHeader Header;
    public PinnedBuffer Buffer;
    public EventMarker(PinnedBuffer buffer);
}
public class Microsoft.Diagnostics.Tracing.EventPipe.EventPipeTraceEventParser : ExternalTraceEventParser {
    public EventPipeTraceEventParser(TraceEventSource source, bool dontRegister);
    internal virtual DynamicTraceEventData TryLookup(TraceEvent unknownEvent);
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.ParseBufferItemFunction : MulticastDelegate {
    public ParseBufferItemFunction(object object, IntPtr method);
    public virtual void Invoke(EventPipeEventHeader& header);
    public virtual IAsyncResult BeginInvoke(EventPipeEventHeader& header, AsyncCallback callback, object object);
    public virtual void EndInvoke(EventPipeEventHeader& header, IAsyncResult result);
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.PinnedBuffer : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private GCHandle <PinningHandle>k__BackingField;
    public Byte[] Data { get; private set; }
    public GCHandle PinningHandle { get; private set; }
    public PinnedBuffer(Byte[] data);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public GCHandle get_PinningHandle();
    [CompilerGeneratedAttribute]
private void set_PinningHandle(GCHandle value);
}
public class Microsoft.Diagnostics.Tracing.EventPipe.SampleProfilerTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public SampleProfilerTraceEventParser(TraceEventSource source);
    private static SampleProfilerTraceEventParser();
    public void add_ThreadSample(Action`1<ClrThreadSampleTraceData> value);
    public void remove_ThreadSample(Action`1<ClrThreadSampleTraceData> value);
    public void add_ThreadStackWalk(Action`1<ClrThreadStackWalkTraceData> value);
    public void remove_ThreadStackWalk(Action`1<ClrThreadStackWalkTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private void RegisterTemplate(TraceEvent template);
}
internal class Microsoft.Diagnostics.Tracing.EventPipe.StackCache : object {
    private Dictionary`2<int, StackMarker> _stacks;
    public bool TryGetStack(int stackId, Int32& stackBytesSize, IntPtr& stackBytes);
    public void ProcessStackBlock(Byte[] stackBlock);
    public void Flush();
}
internal abstract class Microsoft.Diagnostics.Tracing.EventPipeBlock : object {
    protected StreamLabel _startEventData;
    protected StreamLabel _endEventData;
    protected EventPipeEventSource _source;
    public int Version { get; }
    public int MinimumVersionCanRead { get; }
    public int MinimumReaderVersion { get; }
    public EventPipeBlock(EventPipeEventSource source);
    protected abstract virtual void ReadBlockContents(PinnedStreamReader reader);
    public sealed virtual void FromStream(Deserializer deserializer);
    public sealed virtual void ToStream(Serializer serializer);
    public sealed virtual int get_Version();
    public sealed virtual int get_MinimumVersionCanRead();
    public sealed virtual int get_MinimumReaderVersion();
}
internal class Microsoft.Diagnostics.Tracing.EventPipeEventBlock : EventPipeBlock {
    public EventPipeEventBlock(EventPipeEventSource source);
    protected virtual void ReadBlockContents(PinnedStreamReader reader);
}
internal class Microsoft.Diagnostics.Tracing.EventPipeEventHeader : ValueType {
    private int EventSize;
    public int MetaDataId;
    public int SequenceNumber;
    public long CaptureThreadId;
    public int CaptureProcNumber;
    public long ThreadId;
    public long TimeStamp;
    public Guid ActivityID;
    public Guid RelatedActivityID;
    public bool IsSorted;
    public int PayloadSize;
    public IntPtr Payload;
    public int StackId;
    public int StackBytesSize;
    public IntPtr StackBytes;
    public int HeaderSize;
    public int TotalNonHeaderSize;
    public static void ReadFromFormatV3(Byte* headerPtr, EventPipeEventHeader& header);
    private static UInt32 ReadVarUInt32(Byte*& pCursor);
    private static ulong ReadVarUInt64(Byte*& pCursor);
    public static void ReadFromFormatV4(Byte* headerPtr, bool useHeaderCompresion, EventPipeEventHeader& header);
    public bool IsMetadata();
    public static int GetTotalEventSize(Byte* headerPtr, int formatVersion);
    public static int GetHeaderSize(int formatVersion);
    public static Guid GetRelatedActivityID(Byte* headerPtr);
}
internal class Microsoft.Diagnostics.Tracing.EventPipeEventMetaDataHeader : object {
    [CompilerGeneratedAttribute]
private int <MetaDataId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsParameterMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private EventPipeMetaDataVersion <EncodingVersion>k__BackingField;
    private EVENT_RECORD* _eventRecord;
    public int MetaDataId { get; internal set; }
    public bool ContainsParameterMetadata { get; private set; }
    public string ProviderName { get; internal set; }
    public string EventName { get; private set; }
    public Guid ProviderId { get; }
    public int EventId { get; }
    public int EventVersion { get; }
    public ulong Keywords { get; }
    public int Level { get; }
    public EventPipeMetaDataVersion EncodingVersion { get; internal set; }
    public byte Opcode { get; internal set; }
    public EventPipeEventMetaDataHeader(PinnedStreamReader reader, int length, EventPipeMetaDataVersion encodingVersion, int pointerSize, int processId, int metadataId, string providerName);
    protected virtual override void Finalize();
    internal EVENT_RECORD* GetEventRecordForEventData(EventPipeEventHeader& eventData);
    [CompilerGeneratedAttribute]
public int get_MetaDataId();
    [CompilerGeneratedAttribute]
internal void set_MetaDataId(int value);
    [CompilerGeneratedAttribute]
public bool get_ContainsParameterMetadata();
    [CompilerGeneratedAttribute]
private void set_ContainsParameterMetadata(bool value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
internal void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
private void set_EventName(string value);
    public Guid get_ProviderId();
    public int get_EventId();
    public int get_EventVersion();
    public ulong get_Keywords();
    public int get_Level();
    [CompilerGeneratedAttribute]
public EventPipeMetaDataVersion get_EncodingVersion();
    [CompilerGeneratedAttribute]
internal void set_EncodingVersion(EventPipeMetaDataVersion value);
    public byte get_Opcode();
    internal void set_Opcode(byte value);
    private void ReadNetTraceMetadata(PinnedStreamReader reader);
    private void ReadMetadataCommon(PinnedStreamReader reader);
    private void ReadObsoleteEventMetaData(PinnedStreamReader reader, EventPipeMetaDataVersion metaDataVersion);
    private static void ClearMemory(Void* buffer, int length);
    public static Guid GetProviderGuidFromProviderName(string name);
}
public class Microsoft.Diagnostics.Tracing.EventPipeEventSource : TraceEventDispatcher {
    [CompilerGeneratedAttribute]
private int <FileFormatVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCache <EventCache>k__BackingField;
    [CompilerGeneratedAttribute]
private StackCache <StackCache>k__BackingField;
    internal static TypeCode GuidTypeCode;
    internal static TypeCode ArrayTypeCode;
    private StreamLabel _endOfEventStream;
    private Dictionary`2<int, EventPipeEventMetaDataHeader> _eventMetadataDictionary;
    private Deserializer _deserializer;
    private Dictionary`2<TraceEvent, DynamicTraceEventData> _metadataTemplates;
    private EventPipeEventHeader _compressedHeader;
    private int _eventsLost;
    private Guid _relatedActivityId;
    internal int _processId;
    internal int _expectedCPUSamplingRate;
    private Func`1<Deserializer> _deserializerIntializer;
    public int EventsLost { get; }
    public int Version { get; }
    public int MinimumReaderVersion { get; }
    public int MinimumVersionCanRead { get; }
    internal int FileFormatVersionNumber { get; private set; }
    internal EventCache EventCache { get; private set; }
    internal StackCache StackCache { get; private set; }
    public EventPipeEventSource(string fileName);
    public EventPipeEventSource(Stream stream);
    private EventPipeEventSource(PinnedStreamReader streamReader, string name, bool isStreaming);
    public DateTime QPCTimeToTimeStamp(long QPCTime);
    public virtual int get_EventsLost();
    public sealed virtual int get_Version();
    public sealed virtual int get_MinimumReaderVersion();
    public sealed virtual int get_MinimumVersionCanRead();
    protected virtual void Dispose(bool disposing);
    public virtual bool Process();
    [CompilerGeneratedAttribute]
internal int get_FileFormatVersionNumber();
    [CompilerGeneratedAttribute]
private void set_FileFormatVersionNumber(int value);
    [CompilerGeneratedAttribute]
internal EventCache get_EventCache();
    [CompilerGeneratedAttribute]
private void set_EventCache(EventCache value);
    [CompilerGeneratedAttribute]
internal StackCache get_StackCache();
    [CompilerGeneratedAttribute]
private void set_StackCache(StackCache value);
    internal virtual string ProcessName(int processID, long timeQPC);
    internal void ReadAndDispatchEvent(PinnedStreamReader reader, bool useHeaderCompression);
    internal void DispatchEventRecord(EVENT_RECORD* eventRecord);
    internal void ResetCompressedHeader();
    internal EVENT_RECORD* ReadEvent(PinnedStreamReader reader, bool useHeaderCompression);
    private void ReadEventHeader(Byte* headerPtr, bool useHeaderCompression, EventPipeEventHeader& eventData);
    private EVENT_RECORD* ReadEvent(EventPipeEventHeader eventData, PinnedStreamReader reader);
    private static EventPipeMetaDataVersion GetMetaDataVersion(int fileFormatVersion);
    private EVENT_RECORD* ConvertEventHeaderToRecord(EventPipeEventHeader& eventData);
    internal virtual Guid GetRelatedActivityID(EVENT_RECORD* eventRecord);
    public sealed virtual void ToStream(Serializer serializer);
    public sealed virtual void FromStream(Deserializer deserializer);
    private void EventCache_OnEvent(EventPipeEventHeader& header);
    private void EventCache_OnEventsDropped(int droppedEventCount);
    internal bool TryGetTemplateFromMetadata(TraceEvent unhandledEvent, DynamicTraceEventData& template);
    private static void CreateDefaultParameters(DynamicTraceEventData eventTemplate);
    private void ParseEventParameters(DynamicTraceEventData template, EventPipeEventMetaDataHeader eventMetaDataHeader, PinnedStreamReader readerForParameters, StreamLabel metadataBlobEnd, NetTraceFieldLayoutVersion fieldLayoutVersion);
    private void SetOpcode(DynamicTraceEventData template, int opcode);
    private DynamicTraceEventData CreateTemplate(EventPipeEventMetaDataHeader eventMetaDataHeader);
    private string FilterOpcodeNameFromEventName(string eventName, int opcode);
    private PayloadFetchClassInfo CheckForWellKnownEventFields(EventPipeEventMetaDataHeader eventMetaDataHeader);
    private PayloadFetchClassInfo ParseFields(PinnedStreamReader reader, int numFields, StreamLabel metadataBlobEnd, NetTraceFieldLayoutVersion fieldLayoutVersion);
    private PayloadFetch ParseType(PinnedStreamReader reader, ushort offset, StreamLabel fieldEnd, string fieldName, NetTraceFieldLayoutVersion fieldLayoutVersion);
    private static void GetOpcodeFromEventName(string eventName, Int32& opcode, String& opcodeName);
}
internal class Microsoft.Diagnostics.Tracing.EventPipeMetadataBlock : EventPipeBlock {
    public EventPipeMetadataBlock(EventPipeEventSource source);
    protected virtual void ReadBlockContents(PinnedStreamReader reader);
}
internal enum Microsoft.Diagnostics.Tracing.EventPipeMetadataTag : Enum {
    public int value__;
    public static EventPipeMetadataTag Opcode;
    public static EventPipeMetadataTag ParameterPayloadV2;
}
internal enum Microsoft.Diagnostics.Tracing.EventPipeMetaDataVersion : Enum {
    public int value__;
    public static EventPipeMetaDataVersion LegacyV1;
    public static EventPipeMetaDataVersion LegacyV2;
    public static EventPipeMetaDataVersion NetTrace;
}
internal class Microsoft.Diagnostics.Tracing.EventPipeSequencePointBlock : EventPipeBlock {
    public EventPipeSequencePointBlock(EventPipeEventSource source);
    protected virtual void ReadBlockContents(PinnedStreamReader reader);
}
internal class Microsoft.Diagnostics.Tracing.EventPipeStackBlock : EventPipeBlock {
    public EventPipeStackBlock(EventPipeEventSource source);
    protected virtual void ReadBlockContents(PinnedStreamReader reader);
}
public class Microsoft.Diagnostics.Tracing.GCReferenceComputer : object {
    public GCReferenceComputer(TraceEventDispatcher source);
    public GCReferenceID GetReferenceForGCAddress(ulong GcAddress);
    public void DisposeGCReference(GCReferenceID GCReferenceID);
}
public enum Microsoft.Diagnostics.Tracing.GCReferenceID : Enum {
    public int value__;
    public static GCReferenceID Dead;
}
public interface Microsoft.Diagnostics.Tracing.ITraceParserServices {
    public abstract virtual void RegisterEventTemplate(TraceEvent template);
    public abstract virtual void UnregisterEventTemplate(Delegate action, int eventId, Guid providerGuid);
    public abstract virtual void RegisterParser(TraceEventParser parser);
    public abstract virtual void RegisterUnhandledEvent(Func`2<TraceEvent, bool> callback);
    public abstract virtual string TaskNameForGuid(Guid taskGuid);
    public abstract virtual string ProviderNameForGuid(Guid taskOrProviderGuid);
}
internal enum Microsoft.Diagnostics.Tracing.NetTraceFieldLayoutVersion : Enum {
    public int value__;
    public static NetTraceFieldLayoutVersion V1;
    public static NetTraceFieldLayoutVersion V2;
}
internal class Microsoft.Diagnostics.Tracing.NewThreadTimeComputer : object {
    private TraceLog m_eventLog;
    private SymbolReader m_symbolReader;
    public TraceLog Log { get; }
    public NewThreadTimeComputer(TraceLog eventLog, SymbolReader symbolReader);
    public TraceLog get_Log();
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.ObservableExtensions : object {
    [ExtensionAttribute]
public static IObservable`1<T> Observe(TraceEventParser parser, string eventName);
    [ExtensionAttribute]
public static IObservable`1<T> Observe(TraceEventParser parser, Predicate`1<string> eventNameFilter);
    [ExtensionAttribute]
public static IObservable`1<TraceEvent> Observe(TraceEventParser parser, string providerName, string eventName);
    [ExtensionAttribute]
public static IObservable`1<TraceEvent> Observe(TraceEventParser parser, Func`3<string, string, EventFilterResponse> eventsToObserve);
    [ExtensionAttribute]
public static IObservable`1<TraceEvent> ObserveAll(TraceEventDispatcher source);
    [ExtensionAttribute]
public static IObservable`1<TraceEvent> ObserveUnhandled(TraceEventDispatcher source);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.EightStringsTemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EightStringsTemplateEATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string data4 { get; }
    public string data5 { get; }
    public string data6 { get; }
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EightStringsTemplateEATraceData(Action`1<EightStringsTemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_data4();
    public string get_data5();
    public string get_data6();
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<EightStringsTemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<EightStringsTemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.FiveStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FiveStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string data4 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FiveStringsTemplateATraceData(Action`1<FiveStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_data4();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FiveStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FiveStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.FourStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FourStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FourStringsTemplateATraceData(Action`1<FourStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FourStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FourStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.FourStringsTemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FourStringsTemplateEATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FourStringsTemplateEATraceData(Action`1<FourStringsTemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FourStringsTemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FourStringsTemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata0TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata0TemplateATraceData> Action;
    public string appdomainName { get; }
    public string processName { get; }
    public string processId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata0TemplateATraceData(Action`1<Multidata0TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_appdomainName();
    public string get_processName();
    public string get_processId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata0TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata0TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata100TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata100TemplateHATraceData> Action;
    public string tokenID { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata100TemplateHATraceData(Action`1<Multidata100TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_tokenID();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata100TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata100TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata101TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata101TemplateHATraceData> Action;
    public string issuerName { get; }
    public string tokenID { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata101TemplateHATraceData(Action`1<Multidata101TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_issuerName();
    public string get_tokenID();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata101TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata101TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata102TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata102TemplateHATraceData> Action;
    public string tokenType { get; }
    public string tokenID { get; }
    public string errorMessage { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata102TemplateHATraceData(Action`1<Multidata102TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_tokenType();
    public string get_tokenID();
    public string get_errorMessage();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata102TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata102TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata103TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata103TemplateHATraceData> Action;
    public string tokenType { get; }
    public string tokenID { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata103TemplateHATraceData(Action`1<Multidata103TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_tokenType();
    public string get_tokenID();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata103TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata103TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata10TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata10TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string SourceName { get; }
    public string SourceId { get; }
    public string SourceInstanceId { get; }
    public string SourceTypeName { get; }
    public string Exception { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata10TemplateHATraceData(Action`1<Multidata10TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_SourceName();
    public string get_SourceId();
    public string get_SourceInstanceId();
    public string get_SourceTypeName();
    public string get_Exception();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata10TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata10TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata11TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata11TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string State { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string WorkflowDefinitionIdentity { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata11TemplateHATraceData(Action`1<Multidata11TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_State();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_WorkflowDefinitionIdentity();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata11TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata11TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata12TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata12TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string Reason { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string WorkflowDefinitionIdentity { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata12TemplateHATraceData(Action`1<Multidata12TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_Reason();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_WorkflowDefinitionIdentity();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata12TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata12TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata13TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata13TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string SourceName { get; }
    public string SourceId { get; }
    public string SourceInstanceId { get; }
    public string SourceTypeName { get; }
    public string Exception { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string WorkflowDefinitionIdentity { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata13TemplateHATraceData(Action`1<Multidata13TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_SourceName();
    public string get_SourceId();
    public string get_SourceInstanceId();
    public string get_SourceTypeName();
    public string get_Exception();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_WorkflowDefinitionIdentity();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata13TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata13TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata14TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata14TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string State { get; }
    public string OriginalDefinitionIdentity { get; }
    public string UpdatedDefinitionIdentity { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata14TemplateHATraceData(Action`1<Multidata14TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_State();
    public string get_OriginalDefinitionIdentity();
    public string get_UpdatedDefinitionIdentity();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata14TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata14TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata15TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata15TemplateATraceData> Action;
    public long RecordNumber { get; }
    public Guid ProviderId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata15TemplateATraceData(Action`1<Multidata15TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_RecordNumber();
    public Guid get_ProviderId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata15TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata15TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata16TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata16TemplateATraceData> Action;
    public string Data { get; }
    public string Activity { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata16TemplateATraceData(Action`1<Multidata16TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Data();
    public string get_Activity();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata16TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata16TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata17TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata17TemplateATraceData> Action;
    public Guid Id { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata17TemplateATraceData(Action`1<Multidata17TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_Id();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata17TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata17TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata18TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata18TemplateATraceData> Action;
    public string name { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata18TemplateATraceData(Action`1<Multidata18TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_name();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata18TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata18TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata19TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata19TemplateATraceData> Action;
    public string id { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata19TemplateATraceData(Action`1<Multidata19TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_id();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata19TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata19TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata1TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata1TemplateATraceData> Action;
    public int Size { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata1TemplateATraceData(Action`1<Multidata1TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Size();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata1TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata1TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata20TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata20TemplateATraceData> Action;
    public string expr { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata20TemplateATraceData(Action`1<Multidata20TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_expr();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata20TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata20TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata21TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata21TemplateATraceData> Action;
    public string activityName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata21TemplateATraceData(Action`1<Multidata21TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_activityName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata21TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata21TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata22TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata22TemplateHATraceData> Action;
    public string ServiceAction { get; }
    public string ContractName { get; }
    public string Destination { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata22TemplateHATraceData(Action`1<Multidata22TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ServiceAction();
    public string get_ContractName();
    public string get_Destination();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata22TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata22TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata23TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata23TemplateHATraceData> Action;
    public string TypeName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata23TemplateHATraceData(Action`1<Multidata23TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata23TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata23TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata24TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata24TemplateHATraceData> Action;
    public string MethodName { get; }
    public string CallerInfo { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata24TemplateHATraceData(Action`1<Multidata24TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodName();
    public string get_CallerInfo();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata24TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata24TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata25TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata25TemplateHATraceData> Action;
    public string TypeName { get; }
    public int Handled { get; }
    public string ExceptionTypeName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata25TemplateHATraceData(Action`1<Multidata25TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public int get_Handled();
    public string get_ExceptionTypeName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata25TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata25TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata26TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata26TemplateHATraceData> Action;
    public string TypeName { get; }
    public string ExceptionTypeName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata26TemplateHATraceData(Action`1<Multidata26TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_ExceptionTypeName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata26TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata26TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata27TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata27TemplateHATraceData> Action;
    public string ThrottleName { get; }
    public long Limit { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata27TemplateHATraceData(Action`1<Multidata27TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ThrottleName();
    public long get_Limit();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata27TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata27TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata28TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata28TemplateHATraceData> Action;
    public string MethodName { get; }
    public long Duration { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata28TemplateHATraceData(Action`1<Multidata28TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodName();
    public long get_Duration();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata28TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata28TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata29TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata29TemplateHATraceData> Action;
    public string ListenAddress { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata29TemplateHATraceData(Action`1<Multidata29TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ListenAddress();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata29TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata29TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata2TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata2TemplateATraceData> Action;
    public int PoolSize { get; }
    public int Delta { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata2TemplateATraceData(Action`1<Multidata2TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PoolSize();
    public int get_Delta();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata2TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata2TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata30TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata30TemplateHATraceData> Action;
    public string DestinationAddress { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata30TemplateHATraceData(Action`1<Multidata30TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_DestinationAddress();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata30TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata30TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata31TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata31TemplateHATraceData> Action;
    public string ExceptionToString { get; }
    public string ExceptionTypeName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata31TemplateHATraceData(Action`1<Multidata31TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ExceptionToString();
    public string get_ExceptionTypeName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata31TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata31TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata32TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata32TemplateHATraceData> Action;
    public Guid CorrelationId { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata32TemplateHATraceData(Action`1<Multidata32TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_CorrelationId();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata32TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata32TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata33TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata33TemplateATraceData> Action;
    public string TypeName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata33TemplateATraceData(Action`1<Multidata33TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata33TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata33TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata34TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata34TemplateATraceData> Action;
    public string TypeName { get; }
    public string ExceptionToString { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata34TemplateATraceData(Action`1<Multidata34TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_ExceptionToString();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata34TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata34TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata35TemplateSATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata35TemplateSATraceData> Action;
    public int Count { get; }
    public int MaxNum { get; }
    public string EventSource { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata35TemplateSATraceData(Action`1<Multidata35TemplateSATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_MaxNum();
    public string get_EventSource();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata35TemplateSATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata35TemplateSATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata36TemplateSATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata36TemplateSATraceData> Action;
    public int Count { get; }
    public string EventSource { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata36TemplateSATraceData(Action`1<Multidata36TemplateSATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public string get_EventSource();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata36TemplateSATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata36TemplateSATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata37TemplateSATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata37TemplateSATraceData> Action;
    public string TypeName { get; }
    public string Uri { get; }
    public string EventSource { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata37TemplateSATraceData(Action`1<Multidata37TemplateSATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_Uri();
    public string get_EventSource();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata37TemplateSATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata37TemplateSATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata38TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata38TemplateHATraceData> Action;
    public string OperationName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata38TemplateHATraceData(Action`1<Multidata38TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_OperationName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata38TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata38TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata39TemplateSATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata39TemplateSATraceData> Action;
    public int Size { get; }
    public string EventSource { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata39TemplateSATraceData(Action`1<Multidata39TemplateSATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Size();
    public string get_EventSource();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata39TemplateSATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata39TemplateSATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata3TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata3TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string Name { get; }
    public string ActivityId { get; }
    public string ActivityInstanceId { get; }
    public string ActivityTypeName { get; }
    public string ChildActivityName { get; }
    public string ChildActivityId { get; }
    public string ChildActivityInstanceId { get; }
    public string ChildActivityTypeName { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata3TemplateHATraceData(Action`1<Multidata3TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_Name();
    public string get_ActivityId();
    public string get_ActivityInstanceId();
    public string get_ActivityTypeName();
    public string get_ChildActivityName();
    public string get_ChildActivityId();
    public string get_ChildActivityInstanceId();
    public string get_ChildActivityTypeName();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata3TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata3TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata40TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata40TemplateATraceData> Action;
    public string RemoteAddress { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata40TemplateATraceData(Action`1<Multidata40TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_RemoteAddress();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata40TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata40TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata41TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata41TemplateATraceData> Action;
    public int ListenerHashCode { get; }
    public int SocketHashCode { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata41TemplateATraceData(Action`1<Multidata41TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ListenerHashCode();
    public int get_SocketHashCode();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata41TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata41TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata42TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata42TemplateATraceData> Action;
    public string PoolKey { get; }
    public int busy { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata42TemplateATraceData(Action`1<Multidata42TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_PoolKey();
    public int get_busy();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata42TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata42TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata43TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata43TemplateATraceData> Action;
    public int ChannelId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata43TemplateATraceData(Action`1<Multidata43TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ChannelId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata43TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata43TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata44TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata44TemplateATraceData> Action;
    public string uri { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata44TemplateATraceData(Action`1<Multidata44TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_uri();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata44TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata44TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata45TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata45TemplateATraceData> Action;
    public string Key { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata45TemplateATraceData(Action`1<Multidata45TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Key();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata45TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata45TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata46TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata46TemplateATraceData> Action;
    public string Via { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata46TemplateATraceData(Action`1<Multidata46TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Via();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata46TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata46TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata47TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata47TemplateATraceData> Action;
    public string FaultString { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata47TemplateATraceData(Action`1<Multidata47TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FaultString();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata47TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata47TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata48TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata48TemplateATraceData> Action;
    public string Uri { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata48TemplateATraceData(Action`1<Multidata48TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Uri();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata48TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata48TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata49TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata49TemplateATraceData> Action;
    public int SocketId { get; }
    public string Uri { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata49TemplateATraceData(Action`1<Multidata49TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_SocketId();
    public string get_Uri();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata49TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata49TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata4TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata4TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string State { get; }
    public string Name { get; }
    public string ActivityId { get; }
    public string ActivityInstanceId { get; }
    public string ActivityTypeName { get; }
    public string Arguments { get; }
    public string Variables { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata4TemplateHATraceData(Action`1<Multidata4TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_State();
    public string get_Name();
    public string get_ActivityId();
    public string get_ActivityInstanceId();
    public string get_ActivityTypeName();
    public string get_Arguments();
    public string get_Variables();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata4TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata4TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata50TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata50TemplateATraceData> Action;
    public string Status { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata50TemplateATraceData(Action`1<Multidata50TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Status();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata50TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata50TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata51TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata51TemplateATraceData> Action;
    public int SocketId { get; }
    public int Size { get; }
    public string Endpoint { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata51TemplateATraceData(Action`1<Multidata51TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_SocketId();
    public int get_Size();
    public string get_Endpoint();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata51TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata51TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata52TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata52TemplateATraceData> Action;
    public string SessionId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata52TemplateATraceData(Action`1<Multidata52TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_SessionId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata52TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata52TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata53TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata53TemplateATraceData> Action;
    public int SocketId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata53TemplateATraceData(Action`1<Multidata53TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_SocketId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata53TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata53TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata54TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata54TemplateATraceData> Action;
    public string LocalId { get; }
    public Guid Distributed { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata54TemplateATraceData(Action`1<Multidata54TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_LocalId();
    public Guid get_Distributed();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata54TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata54TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata55TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata55TemplateATraceData> Action;
    public int BufferId { get; }
    public int Size { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata55TemplateATraceData(Action`1<Multidata55TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_BufferId();
    public int get_Size();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata55TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata55TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata56TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata56TemplateATraceData> Action;
    public string msg { get; }
    public string key { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata56TemplateATraceData(Action`1<Multidata56TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_msg();
    public string get_key();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata56TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata56TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata57TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata57TemplateATraceData> Action;
    public string msg { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata57TemplateATraceData(Action`1<Multidata57TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_msg();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata57TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata57TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata58TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata58TemplateATraceData> Action;
    public int cur { get; }
    public int max { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata58TemplateATraceData(Action`1<Multidata58TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_cur();
    public int get_max();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata58TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata58TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata59TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata59TemplateATraceData> Action;
    public string itemTypeName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata59TemplateATraceData(Action`1<Multidata59TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_itemTypeName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata59TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata59TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata5TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata5TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string Name { get; }
    public Guid SubInstanceID { get; }
    public string OwnerActivityName { get; }
    public string OwnerActivityId { get; }
    public string OwnerActivityInstanceId { get; }
    public string OwnerActivityTypeName { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata5TemplateHATraceData(Action`1<Multidata5TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_Name();
    public Guid get_SubInstanceID();
    public string get_OwnerActivityName();
    public string get_OwnerActivityId();
    public string get_OwnerActivityInstanceId();
    public string get_OwnerActivityTypeName();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata5TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata5TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata60TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata60TemplateATraceData> Action;
    public string sharedMemoryName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata60TemplateATraceData(Action`1<Multidata60TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_sharedMemoryName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata60TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata60TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata61TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata61TemplateATraceData> Action;
    public string pipeName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata61TemplateATraceData(Action`1<Multidata61TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_pipeName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata61TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata61TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata62TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata62TemplateATraceData> Action;
    public string remoteAddress { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata62TemplateATraceData(Action`1<Multidata62TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_remoteAddress();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata62TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata62TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata63TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata63TemplateATraceData> Action;
    public int websocketId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata63TemplateATraceData(Action`1<Multidata63TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_websocketId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata63TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata63TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata64TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata64TemplateATraceData> Action;
    public string errorMessage { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata64TemplateATraceData(Action`1<Multidata64TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_errorMessage();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata64TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata64TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata65TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata65TemplateATraceData> Action;
    public int websocketId { get; }
    public int byteCount { get; }
    public string remoteAddress { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata65TemplateATraceData(Action`1<Multidata65TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_websocketId();
    public int get_byteCount();
    public string get_remoteAddress();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata65TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata65TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata66TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata66TemplateATraceData> Action;
    public int websocketId { get; }
    public string remoteAddress { get; }
    public string closeStatus { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata66TemplateATraceData(Action`1<Multidata66TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_websocketId();
    public string get_remoteAddress();
    public string get_closeStatus();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata66TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata66TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata67TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata67TemplateATraceData> Action;
    public int websocketId { get; }
    public string closeStatus { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata67TemplateATraceData(Action`1<Multidata67TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_websocketId();
    public string get_closeStatus();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata67TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata67TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata68TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata68TemplateATraceData> Action;
    public string clientWebSocketFactoryType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata68TemplateATraceData(Action`1<Multidata68TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_clientWebSocketFactoryType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata68TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata68TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata69TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata69TemplateATraceData> Action;
    public string AppDomainFriendlyName { get; }
    public string VirtualPath { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata69TemplateATraceData(Action`1<Multidata69TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AppDomainFriendlyName();
    public string get_VirtualPath();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata69TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata69TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata6TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata6TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string FaultSourceActivityName { get; }
    public string FaultSourceActivityId { get; }
    public string FaultSourceActivityInstanceId { get; }
    public string FaultSourceActivityTypeName { get; }
    public string FaultHandlerActivityName { get; }
    public string FaultHandlerActivityId { get; }
    public string FaultHandlerActivityInstanceId { get; }
    public string FaultHandlerActivityTypeName { get; }
    public string Fault { get; }
    public int IsFaultSource { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata6TemplateHATraceData(Action`1<Multidata6TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_FaultSourceActivityName();
    public string get_FaultSourceActivityId();
    public string get_FaultSourceActivityInstanceId();
    public string get_FaultSourceActivityTypeName();
    public string get_FaultHandlerActivityName();
    public string get_FaultHandlerActivityId();
    public string get_FaultHandlerActivityInstanceId();
    public string get_FaultHandlerActivityTypeName();
    public string get_Fault();
    public int get_IsFaultSource();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata6TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata6TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata70TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata70TemplateATraceData> Action;
    public string IncomingAddress { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata70TemplateATraceData(Action`1<Multidata70TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_IncomingAddress();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata70TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata70TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata71TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata71TemplateATraceData> Action;
    public string AspNetRoutePrefix { get; }
    public string ServiceType { get; }
    public string ServiceHostFactoryType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata71TemplateATraceData(Action`1<Multidata71TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AspNetRoutePrefix();
    public string get_ServiceType();
    public string get_ServiceHostFactoryType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata71TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata71TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata72TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata72TemplateHATraceData> Action;
    public string ServiceTypeName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata72TemplateHATraceData(Action`1<Multidata72TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ServiceTypeName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata72TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata72TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata73TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata73TemplateATraceData> Action;
    public int ClosedCount { get; }
    public int TotalCount { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata73TemplateATraceData(Action`1<Multidata73TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClosedCount();
    public int get_TotalCount();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata73TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata73TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata74TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata74TemplateATraceData> Action;
    public string RelativeAddress { get; }
    public string NormalizedAddress { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata74TemplateATraceData(Action`1<Multidata74TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_RelativeAddress();
    public string get_NormalizedAddress();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata74TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata74TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata75TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata75TemplateATraceData> Action;
    public string Data { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata75TemplateATraceData(Action`1<Multidata75TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Data();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata75TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata75TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata76TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata76TemplateATraceData> Action;
    public long availableMemoryBytes { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata76TemplateATraceData(Action`1<Multidata76TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_availableMemoryBytes();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata76TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata76TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata77TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata77TemplateATraceData> Action;
    public string via { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata77TemplateATraceData(Action`1<Multidata77TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_via();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata77TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata77TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata78TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata78TemplateATraceData> Action;
    public string Endpoint { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata78TemplateATraceData(Action`1<Multidata78TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Endpoint();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata78TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata78TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata79TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata79TemplateATraceData> Action;
    public string Uri { get; }
    public int count { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata79TemplateATraceData(Action`1<Multidata79TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Uri();
    public int get_count();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata79TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata79TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata7TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata7TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string Name { get; }
    public string ActivityName { get; }
    public string ActivityId { get; }
    public string ActivityInstanceId { get; }
    public string ActivityTypeName { get; }
    public string Data { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata7TemplateHATraceData(Action`1<Multidata7TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_Name();
    public string get_ActivityName();
    public string get_ActivityId();
    public string get_ActivityInstanceId();
    public string get_ActivityTypeName();
    public string get_Data();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata7TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata7TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata80TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata80TemplateATraceData> Action;
    public string Uri { get; }
    public string Status { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata80TemplateATraceData(Action`1<Multidata80TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Uri();
    public string get_Status();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata80TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata80TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata81TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata81TemplateATraceData> Action;
    public string Status { get; }
    public string Uri { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata81TemplateATraceData(Action`1<Multidata81TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Status();
    public string get_Uri();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata81TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata81TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata82TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata82TemplateATraceData> Action;
    public string hresult { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata82TemplateATraceData(Action`1<Multidata82TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_hresult();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata82TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata82TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata83TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata83TemplateATraceData> Action;
    public int curr { get; }
    public int max { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata83TemplateATraceData(Action`1<Multidata83TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_curr();
    public int get_max();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata83TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata83TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata84TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata84TemplateATraceData> Action;
    public int limit { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata84TemplateATraceData(Action`1<Multidata84TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_limit();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata84TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata84TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata85TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata85TemplateATraceData> Action;
    public string TrackingProfile { get; }
    public string ActivityDefinitionId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata85TemplateATraceData(Action`1<Multidata85TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TrackingProfile();
    public string get_ActivityDefinitionId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata85TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata85TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata86TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata86TemplateHATraceData> Action;
    public Guid InstanceKey { get; }
    public string Values { get; }
    public string ParentScope { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata86TemplateHATraceData(Action`1<Multidata86TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceKey();
    public string get_Values();
    public string get_ParentScope();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata86TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata86TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata87TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata87TemplateATraceData> Action;
    public string discoveryMessageName { get; }
    public string messageId { get; }
    public string discoveryOperationName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata87TemplateATraceData(Action`1<Multidata87TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_discoveryMessageName();
    public string get_messageId();
    public string get_discoveryOperationName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata87TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata87TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata88TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata88TemplateATraceData> Action;
    public string messageType { get; }
    public string messageId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata88TemplateATraceData(Action`1<Multidata88TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_messageType();
    public string get_messageId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata88TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata88TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata89TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata89TemplateATraceData> Action;
    public string discoveryMessageName { get; }
    public string messageId { get; }
    public string relatesTo { get; }
    public string discoveryOperationName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata89TemplateATraceData(Action`1<Multidata89TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_discoveryMessageName();
    public string get_messageId();
    public string get_relatesTo();
    public string get_discoveryOperationName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata89TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata89TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata8TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata8TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string Reason { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata8TemplateHATraceData(Action`1<Multidata8TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_Reason();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata8TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata8TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata90TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata90TemplateATraceData> Action;
    public string messageId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata90TemplateATraceData(Action`1<Multidata90TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_messageId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata90TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata90TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata91TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata91TemplateATraceData> Action;
    public string messageType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata91TemplateATraceData(Action`1<Multidata91TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_messageType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata91TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata91TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata92TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata92TemplateATraceData> Action;
    public string discoveryMessageName { get; }
    public string messageId { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata92TemplateATraceData(Action`1<Multidata92TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_discoveryMessageName();
    public string get_messageId();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata92TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata92TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata93TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata93TemplateATraceData> Action;
    public string endpointAddress { get; }
    public string listenUri { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata93TemplateATraceData(Action`1<Multidata93TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_endpointAddress();
    public string get_listenUri();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata93TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata93TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata94TemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata94TemplateEATraceData> Action;
    public string endpointAddress { get; }
    public string via { get; }
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata94TemplateEATraceData(Action`1<Multidata94TemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_endpointAddress();
    public string get_via();
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata94TemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata94TemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata95TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata95TemplateATraceData> Action;
    public string endpointAddress { get; }
    public string via { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata95TemplateATraceData(Action`1<Multidata95TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_endpointAddress();
    public string get_via();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata95TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata95TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata96TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata96TemplateATraceData> Action;
    public string synchronizationContextType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata96TemplateATraceData(Action`1<Multidata96TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_synchronizationContextType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata96TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata96TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata97TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata97TemplateATraceData> Action;
    public string SurrogateType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata97TemplateATraceData(Action`1<Multidata97TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_SurrogateType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata97TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata97TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata98TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata98TemplateATraceData> Action;
    public string Kind { get; }
    public string TypeName { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata98TemplateATraceData(Action`1<Multidata98TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Kind();
    public string get_TypeName();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata98TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata98TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata99TemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata99TemplateATraceData> Action;
    public string DCType { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata99TemplateATraceData(Action`1<Multidata99TemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_DCType();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata99TemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata99TemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.Multidata9TemplateHATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Multidata9TemplateHATraceData> Action;
    public Guid InstanceId { get; }
    public long RecordNumber { get; }
    public string ActivityDefinitionId { get; }
    public string State { get; }
    public string Annotations { get; }
    public string ProfileName { get; }
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Multidata9TemplateHATraceData(Action`1<Multidata9TemplateHATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_InstanceId();
    public long get_RecordNumber();
    public string get_ActivityDefinitionId();
    public string get_State();
    public string get_Annotations();
    public string get_ProfileName();
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Multidata9TemplateHATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Multidata9TemplateHATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.OneStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<OneStringsTemplateATraceData> Action;
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal OneStringsTemplateATraceData(Action`1<OneStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<OneStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<OneStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.SevenStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SevenStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string data4 { get; }
    public string data5 { get; }
    public string data6 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SevenStringsTemplateATraceData(Action`1<SevenStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_data4();
    public string get_data5();
    public string get_data6();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SevenStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SevenStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.SixStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SixStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string data4 { get; }
    public string data5 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SixStringsTemplateATraceData(Action`1<SixStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_data4();
    public string get_data5();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SixStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SixStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.SixStringsTemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SixStringsTemplateEATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string data3 { get; }
    public string data4 { get; }
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SixStringsTemplateEATraceData(Action`1<SixStringsTemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_data3();
    public string get_data4();
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SixStringsTemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SixStringsTemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.ThreeStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreeStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string data2 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreeStringsTemplateATraceData(Action`1<ThreeStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_data2();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreeStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreeStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.ThreeStringsTemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreeStringsTemplateEATraceData> Action;
    public string data1 { get; }
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreeStringsTemplateEATraceData(Action`1<ThreeStringsTemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreeStringsTemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreeStringsTemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TransferEmittedTemplateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TransferEmittedTemplateTraceData> Action;
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TransferEmittedTemplateTraceData(Action`1<TransferEmittedTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TransferEmittedTemplateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TransferEmittedTemplateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TwoStringsTemplateATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TwoStringsTemplateATraceData> Action;
    public string data1 { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TwoStringsTemplateATraceData(Action`1<TwoStringsTemplateATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_data1();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TwoStringsTemplateATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TwoStringsTemplateATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TwoStringsTemplateEATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TwoStringsTemplateEATraceData> Action;
    public string SerializedException { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TwoStringsTemplateEATraceData(Action`1<TwoStringsTemplateEATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_SerializedException();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TwoStringsTemplateEATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TwoStringsTemplateEATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TwoStringsTemplateSATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TwoStringsTemplateSATraceData> Action;
    public string EventSource { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TwoStringsTemplateSATraceData(Action`1<TwoStringsTemplateSATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_EventSource();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TwoStringsTemplateSATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TwoStringsTemplateSATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TwoStringsTemplateTATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TwoStringsTemplateTATraceData> Action;
    public string ExtendedData { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TwoStringsTemplateTATraceData(Action`1<TwoStringsTemplateTATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ExtendedData();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TwoStringsTemplateTATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TwoStringsTemplateTATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.TwoStringsTemplateVATraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TwoStringsTemplateVATraceData> Action;
    public string HostReference { get; }
    public string AppDomain { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TwoStringsTemplateVATraceData(Action`1<TwoStringsTemplateVATraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_HostReference();
    public string get_AppDomain();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TwoStringsTemplateVATraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TwoStringsTemplateVATraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServer.UserEventsTemplateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UserEventsTemplateTraceData> Action;
    public string Name { get; }
    public string HostReference { get; }
    public string Payload { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UserEventsTemplateTraceData(Action`1<UserEventsTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Name();
    public string get_HostReference();
    public string get_Payload();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<UserEventsTemplateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<UserEventsTemplateTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.ApplicationServerTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEventID WorkflowInstanceRecordEventID;
    private static TraceEventID WorkflowInstanceUnhandledExceptionRecordEventID;
    private static TraceEventID WorkflowInstanceAbortedRecordEventID;
    private static TraceEventID ActivityStateRecordEventID;
    private static TraceEventID ActivityScheduledRecordEventID;
    private static TraceEventID FaultPropagationRecordEventID;
    private static TraceEventID CancelRequestedRecordEventID;
    private static TraceEventID BookmarkResumptionRecordEventID;
    private static TraceEventID CustomTrackingRecordInfoEventID;
    private static TraceEventID CustomTrackingRecordWarningEventID;
    private static TraceEventID CustomTrackingRecordErrorEventID;
    private static TraceEventID WorkflowInstanceSuspendedRecordEventID;
    private static TraceEventID WorkflowInstanceTerminatedRecordEventID;
    private static TraceEventID WorkflowInstanceRecordWithIdEventID;
    private static TraceEventID WorkflowInstanceAbortedRecordWithIdEventID;
    private static TraceEventID WorkflowInstanceSuspendedRecordWithIdEventID;
    private static TraceEventID WorkflowInstanceTerminatedRecordWithIdEventID;
    private static TraceEventID WorkflowInstanceUnhandledExceptionRecordWithIdEventID;
    private static TraceEventID WorkflowInstanceUpdatedRecordEventID;
    private static TraceEventID BufferPoolAllocationEventID;
    private static TraceEventID BufferPoolChangeQuotaEventID;
    private static TraceEventID ActionItemScheduledEventID;
    private static TraceEventID ActionItemCallbackInvokedEventID;
    private static TraceEventID ClientMessageInspectorAfterReceiveInvokedEventID;
    private static TraceEventID ClientMessageInspectorBeforeSendInvokedEventID;
    private static TraceEventID ClientParameterInspectorAfterCallInvokedEventID;
    private static TraceEventID ClientParameterInspectorBeforeCallInvokedEventID;
    private static TraceEventID OperationInvokedEventID;
    private static TraceEventID ErrorHandlerInvokedEventID;
    private static TraceEventID FaultProviderInvokedEventID;
    private static TraceEventID MessageInspectorAfterReceiveInvokedEventID;
    private static TraceEventID MessageInspectorBeforeSendInvokedEventID;
    private static TraceEventID MessageThrottleExceededEventID;
    private static TraceEventID ParameterInspectorAfterCallInvokedEventID;
    private static TraceEventID ParameterInspectorBeforeCallInvokedEventID;
    private static TraceEventID ServiceHostStartedEventID;
    private static TraceEventID OperationCompletedEventID;
    private static TraceEventID MessageReceivedByTransportEventID;
    private static TraceEventID MessageSentByTransportEventID;
    private static TraceEventID ClientOperationPreparedEventID;
    private static TraceEventID ServiceChannelCallStopEventID;
    private static TraceEventID ServiceExceptionEventID;
    private static TraceEventID MessageSentToTransportEventID;
    private static TraceEventID MessageReceivedFromTransportEventID;
    private static TraceEventID OperationFailedEventID;
    private static TraceEventID OperationFaultedEventID;
    private static TraceEventID MessageThrottleAtSeventyPercentEventID;
    private static TraceEventID TraceCorrelationKeysEventID;
    private static TraceEventID IdleServicesClosedEventID;
    private static TraceEventID UserDefinedErrorOccurredEventID;
    private static TraceEventID UserDefinedWarningOccurredEventID;
    private static TraceEventID UserDefinedInformationEventOccuredEventID;
    private static TraceEventID StopSignpostEventEventID;
    private static TraceEventID StartSignpostEventEventID;
    private static TraceEventID SuspendSignpostEventEventID;
    private static TraceEventID ResumeSignpostEventEventID;
    private static TraceEventID StartSignpostEvent1EventID;
    private static TraceEventID StopSignpostEvent1EventID;
    private static TraceEventID MessageLogInfoEventID;
    private static TraceEventID MessageLogWarningEventID;
    private static TraceEventID TransferEmittedEventID;
    private static TraceEventID CompilationStartEventID;
    private static TraceEventID CompilationStopEventID;
    private static TraceEventID ServiceHostFactoryCreationStartEventID;
    private static TraceEventID ServiceHostFactoryCreationStopEventID;
    private static TraceEventID CreateServiceHostStartEventID;
    private static TraceEventID CreateServiceHostStopEventID;
    private static TraceEventID HostedTransportConfigurationManagerConfigInitStartEventID;
    private static TraceEventID HostedTransportConfigurationManagerConfigInitStopEventID;
    private static TraceEventID ServiceHostOpenStartEventID;
    private static TraceEventID ServiceHostOpenStopEventID;
    private static TraceEventID WebHostRequestStartEventID;
    private static TraceEventID WebHostRequestStopEventID;
    private static TraceEventID CBAEntryReadEventID;
    private static TraceEventID CBAMatchFoundEventID;
    private static TraceEventID AspNetRoutingServiceEventID;
    private static TraceEventID AspNetRouteEventID;
    private static TraceEventID IncrementBusyCountEventID;
    private static TraceEventID DecrementBusyCountEventID;
    private static TraceEventID ServiceChannelOpenStartEventID;
    private static TraceEventID ServiceChannelOpenStopEventID;
    private static TraceEventID ServiceChannelCallStartEventID;
    private static TraceEventID ServiceChannelBeginCallStartEventID;
    private static TraceEventID HttpSendMessageStartEventID;
    private static TraceEventID HttpSendStopEventID;
    private static TraceEventID HttpMessageReceiveStartEventID;
    private static TraceEventID DispatchMessageStartEventID;
    private static TraceEventID HttpContextBeforeProcessAuthenticationEventID;
    private static TraceEventID DispatchMessageBeforeAuthorizationEventID;
    private static TraceEventID DispatchMessageStopEventID;
    private static TraceEventID ClientChannelOpenStartEventID;
    private static TraceEventID ClientChannelOpenStopEventID;
    private static TraceEventID HttpSendStreamedMessageStartEventID;
    private static TraceEventID WorkflowApplicationCompletedEventID;
    private static TraceEventID WorkflowApplicationTerminatedEventID;
    private static TraceEventID WorkflowInstanceCanceledEventID;
    private static TraceEventID WorkflowInstanceAbortedEventID;
    private static TraceEventID WorkflowApplicationIdledEventID;
    private static TraceEventID WorkflowApplicationUnhandledExceptionEventID;
    private static TraceEventID WorkflowApplicationPersistedEventID;
    private static TraceEventID WorkflowApplicationUnloadedEventID;
    private static TraceEventID ActivityScheduledEventID;
    private static TraceEventID ActivityCompletedEventID;
    private static TraceEventID ScheduleExecuteActivityWorkItemEventID;
    private static TraceEventID StartExecuteActivityWorkItemEventID;
    private static TraceEventID CompleteExecuteActivityWorkItemEventID;
    private static TraceEventID ScheduleCompletionWorkItemEventID;
    private static TraceEventID StartCompletionWorkItemEventID;
    private static TraceEventID CompleteCompletionWorkItemEventID;
    private static TraceEventID ScheduleCancelActivityWorkItemEventID;
    private static TraceEventID StartCancelActivityWorkItemEventID;
    private static TraceEventID CompleteCancelActivityWorkItemEventID;
    private static TraceEventID CreateBookmarkEventID;
    private static TraceEventID ScheduleBookmarkWorkItemEventID;
    private static TraceEventID StartBookmarkWorkItemEventID;
    private static TraceEventID CompleteBookmarkWorkItemEventID;
    private static TraceEventID CreateBookmarkScopeEventID;
    private static TraceEventID BookmarkScopeInitializedEventID;
    private static TraceEventID ScheduleTransactionContextWorkItemEventID;
    private static TraceEventID StartTransactionContextWorkItemEventID;
    private static TraceEventID CompleteTransactionContextWorkItemEventID;
    private static TraceEventID ScheduleFaultWorkItemEventID;
    private static TraceEventID StartFaultWorkItemEventID;
    private static TraceEventID CompleteFaultWorkItemEventID;
    private static TraceEventID ScheduleRuntimeWorkItemEventID;
    private static TraceEventID StartRuntimeWorkItemEventID;
    private static TraceEventID CompleteRuntimeWorkItemEventID;
    private static TraceEventID RuntimeTransactionSetEventID;
    private static TraceEventID RuntimeTransactionCompletionRequestedEventID;
    private static TraceEventID RuntimeTransactionCompleteEventID;
    private static TraceEventID EnterNoPersistBlockEventID;
    private static TraceEventID ExitNoPersistBlockEventID;
    private static TraceEventID InArgumentBoundEventID;
    private static TraceEventID WorkflowApplicationPersistableIdleEventID;
    private static TraceEventID WorkflowActivityStartEventID;
    private static TraceEventID WorkflowActivityStopEventID;
    private static TraceEventID WorkflowActivitySuspendEventID;
    private static TraceEventID WorkflowActivityResumeEventID;
    private static TraceEventID InvokeMethodIsStaticEventID;
    private static TraceEventID InvokeMethodIsNotStaticEventID;
    private static TraceEventID InvokedMethodThrewExceptionEventID;
    private static TraceEventID InvokeMethodUseAsyncPatternEventID;
    private static TraceEventID InvokeMethodDoesNotUseAsyncPatternEventID;
    private static TraceEventID FlowchartStartEventID;
    private static TraceEventID FlowchartEmptyEventID;
    private static TraceEventID FlowchartNextNullEventID;
    private static TraceEventID FlowchartSwitchCaseEventID;
    private static TraceEventID FlowchartSwitchDefaultEventID;
    private static TraceEventID FlowchartSwitchCaseNotFoundEventID;
    private static TraceEventID CompensationStateEventID;
    private static TraceEventID SwitchCaseNotFoundEventID;
    private static TraceEventID ChannelInitializationTimeoutEventID;
    private static TraceEventID CloseTimeoutEventID;
    private static TraceEventID IdleTimeoutEventID;
    private static TraceEventID LeaseTimeoutEventID;
    private static TraceEventID OpenTimeoutEventID;
    private static TraceEventID ReceiveTimeoutEventID;
    private static TraceEventID SendTimeoutEventID;
    private static TraceEventID InactivityTimeoutEventID;
    private static TraceEventID MaxReceivedMessageSizeExceededEventID;
    private static TraceEventID MaxSentMessageSizeExceededEventID;
    private static TraceEventID MaxOutboundConnectionsPerEndpointExceededEventID;
    private static TraceEventID MaxPendingConnectionsExceededEventID;
    private static TraceEventID ReaderQuotaExceededEventID;
    private static TraceEventID NegotiateTokenAuthenticatorStateCacheExceededEventID;
    private static TraceEventID NegotiateTokenAuthenticatorStateCacheRatioEventID;
    private static TraceEventID SecuritySessionRatioEventID;
    private static TraceEventID PendingConnectionsRatioEventID;
    private static TraceEventID ConcurrentCallsRatioEventID;
    private static TraceEventID ConcurrentSessionsRatioEventID;
    private static TraceEventID OutboundConnectionsPerEndpointRatioEventID;
    private static TraceEventID PendingMessagesPerChannelRatioEventID;
    private static TraceEventID ConcurrentInstancesRatioEventID;
    private static TraceEventID PendingAcceptsAtZeroEventID;
    private static TraceEventID MaxSessionSizeReachedEventID;
    private static TraceEventID ReceiveRetryCountReachedEventID;
    private static TraceEventID MaxRetryCyclesExceededMsmqEventID;
    private static TraceEventID ReadPoolMissEventID;
    private static TraceEventID WritePoolMissEventID;
    private static TraceEventID WfMessageReceivedEventID;
    private static TraceEventID WfMessageSentEventID;
    private static TraceEventID MaxRetryCyclesExceededEventID;
    private static TraceEventID ExecuteWorkItemStartEventID;
    private static TraceEventID ExecuteWorkItemStopEventID;
    private static TraceEventID SendMessageChannelCacheMissEventID;
    private static TraceEventID InternalCacheMetadataStartEventID;
    private static TraceEventID InternalCacheMetadataStopEventID;
    private static TraceEventID CompileVbExpressionStartEventID;
    private static TraceEventID CacheRootMetadataStartEventID;
    private static TraceEventID CacheRootMetadataStopEventID;
    private static TraceEventID CompileVbExpressionStopEventID;
    private static TraceEventID TryCatchExceptionFromTryEventID;
    private static TraceEventID TryCatchExceptionDuringCancelationEventID;
    private static TraceEventID TryCatchExceptionFromCatchOrFinallyEventID;
    private static TraceEventID ReceiveContextCompleteFailedEventID;
    private static TraceEventID ReceiveContextAbandonFailedEventID;
    private static TraceEventID ReceiveContextFaultedEventID;
    private static TraceEventID ReceiveContextAbandonWithExceptionEventID;
    private static TraceEventID ClientBaseCachedChannelFactoryCountEventID;
    private static TraceEventID ClientBaseChannelFactoryAgedOutofCacheEventID;
    private static TraceEventID ClientBaseChannelFactoryCacheHitEventID;
    private static TraceEventID ClientBaseUsingLocalChannelFactoryEventID;
    private static TraceEventID QueryCompositionExecutedEventID;
    private static TraceEventID DispatchFailedEventID;
    private static TraceEventID DispatchSuccessfulEventID;
    private static TraceEventID MessageReadByEncoderEventID;
    private static TraceEventID MessageWrittenByEncoderEventID;
    private static TraceEventID SessionIdleTimeoutEventID;
    private static TraceEventID SocketAcceptEnqueuedEventID;
    private static TraceEventID SocketAcceptedEventID;
    private static TraceEventID ConnectionPoolMissEventID;
    private static TraceEventID DispatchFormatterDeserializeRequestStartEventID;
    private static TraceEventID DispatchFormatterDeserializeRequestStopEventID;
    private static TraceEventID DispatchFormatterSerializeReplyStartEventID;
    private static TraceEventID DispatchFormatterSerializeReplyStopEventID;
    private static TraceEventID ClientFormatterSerializeRequestStartEventID;
    private static TraceEventID ClientFormatterSerializeRequestStopEventID;
    private static TraceEventID ClientFormatterDeserializeReplyStartEventID;
    private static TraceEventID ClientFormatterDeserializeReplyStopEventID;
    private static TraceEventID SecurityNegotiationStartEventID;
    private static TraceEventID SecurityNegotiationStopEventID;
    private static TraceEventID SecurityTokenProviderOpenedEventID;
    private static TraceEventID OutgoingMessageSecuredEventID;
    private static TraceEventID IncomingMessageVerifiedEventID;
    private static TraceEventID GetServiceInstanceStartEventID;
    private static TraceEventID GetServiceInstanceStopEventID;
    private static TraceEventID ChannelReceiveStartEventID;
    private static TraceEventID ChannelReceiveStopEventID;
    private static TraceEventID ChannelFactoryCreatedEventID;
    private static TraceEventID PipeConnectionAcceptStartEventID;
    private static TraceEventID PipeConnectionAcceptStopEventID;
    private static TraceEventID EstablishConnectionStartEventID;
    private static TraceEventID EstablishConnectionStopEventID;
    private static TraceEventID SessionPreambleUnderstoodEventID;
    private static TraceEventID ConnectionReaderSendFaultEventID;
    private static TraceEventID SocketAcceptClosedEventID;
    private static TraceEventID ServiceHostFaultedEventID;
    private static TraceEventID ListenerOpenStartEventID;
    private static TraceEventID ListenerOpenStopEventID;
    private static TraceEventID ServerMaxPooledConnectionsQuotaReachedEventID;
    private static TraceEventID TcpConnectionTimedOutEventID;
    private static TraceEventID TcpConnectionResetErrorEventID;
    private static TraceEventID ServiceSecurityNegotiationCompletedEventID;
    private static TraceEventID SecurityNegotiationProcessingFailureEventID;
    private static TraceEventID SecurityIdentityVerificationSuccessEventID;
    private static TraceEventID SecurityIdentityVerificationFailureEventID;
    private static TraceEventID PortSharingDuplicatedSocketEventID;
    private static TraceEventID SecurityImpersonationSuccessEventID;
    private static TraceEventID SecurityImpersonationFailureEventID;
    private static TraceEventID HttpChannelRequestAbortedEventID;
    private static TraceEventID HttpChannelResponseAbortedEventID;
    private static TraceEventID HttpAuthFailedEventID;
    private static TraceEventID SharedListenerProxyRegisterStartEventID;
    private static TraceEventID SharedListenerProxyRegisterStopEventID;
    private static TraceEventID SharedListenerProxyRegisterFailedEventID;
    private static TraceEventID ConnectionPoolPreambleFailedEventID;
    private static TraceEventID SslOnInitiateUpgradeEventID;
    private static TraceEventID SslOnAcceptUpgradeEventID;
    private static TraceEventID BinaryMessageEncodingStartEventID;
    private static TraceEventID MtomMessageEncodingStartEventID;
    private static TraceEventID TextMessageEncodingStartEventID;
    private static TraceEventID BinaryMessageDecodingStartEventID;
    private static TraceEventID MtomMessageDecodingStartEventID;
    private static TraceEventID TextMessageDecodingStartEventID;
    private static TraceEventID HttpResponseReceiveStartEventID;
    private static TraceEventID SocketReadStopEventID;
    private static TraceEventID SocketAsyncReadStopEventID;
    private static TraceEventID SocketWriteStartEventID;
    private static TraceEventID SocketAsyncWriteStartEventID;
    private static TraceEventID SequenceAcknowledgementSentEventID;
    private static TraceEventID ClientReliableSessionReconnectEventID;
    private static TraceEventID ReliableSessionChannelFaultedEventID;
    private static TraceEventID WindowsStreamSecurityOnInitiateUpgradeEventID;
    private static TraceEventID WindowsStreamSecurityOnAcceptUpgradeEventID;
    private static TraceEventID SocketConnectionAbortEventID;
    private static TraceEventID HttpGetContextStartEventID;
    private static TraceEventID ClientSendPreambleStartEventID;
    private static TraceEventID ClientSendPreambleStopEventID;
    private static TraceEventID HttpMessageReceiveFailedEventID;
    private static TraceEventID TransactionScopeCreateEventID;
    private static TraceEventID StreamedMessageReadByEncoderEventID;
    private static TraceEventID StreamedMessageWrittenByEncoderEventID;
    private static TraceEventID MessageWrittenAsynchronouslyByEncoderEventID;
    private static TraceEventID BufferedAsyncWriteStartEventID;
    private static TraceEventID BufferedAsyncWriteStopEventID;
    private static TraceEventID PipeSharedMemoryCreatedEventID;
    private static TraceEventID NamedPipeCreatedEventID;
    private static TraceEventID SignatureVerificationStartEventID;
    private static TraceEventID SignatureVerificationSuccessEventID;
    private static TraceEventID WrappedKeyDecryptionStartEventID;
    private static TraceEventID WrappedKeyDecryptionSuccessEventID;
    private static TraceEventID EncryptedDataProcessingStartEventID;
    private static TraceEventID EncryptedDataProcessingSuccessEventID;
    private static TraceEventID HttpPipelineProcessInboundRequestStartEventID;
    private static TraceEventID HttpPipelineBeginProcessInboundRequestStartEventID;
    private static TraceEventID HttpPipelineProcessInboundRequestStopEventID;
    private static TraceEventID HttpPipelineFaultedEventID;
    private static TraceEventID HttpPipelineTimeoutExceptionEventID;
    private static TraceEventID HttpPipelineProcessResponseStartEventID;
    private static TraceEventID HttpPipelineBeginProcessResponseStartEventID;
    private static TraceEventID HttpPipelineProcessResponseStopEventID;
    private static TraceEventID WebSocketConnectionRequestSendStartEventID;
    private static TraceEventID WebSocketConnectionRequestSendStopEventID;
    private static TraceEventID WebSocketConnectionAcceptStartEventID;
    private static TraceEventID WebSocketConnectionAcceptedEventID;
    private static TraceEventID WebSocketConnectionDeclinedEventID;
    private static TraceEventID WebSocketConnectionFailedEventID;
    private static TraceEventID WebSocketConnectionAbortedEventID;
    private static TraceEventID WebSocketAsyncWriteStartEventID;
    private static TraceEventID WebSocketAsyncWriteStopEventID;
    private static TraceEventID WebSocketAsyncReadStartEventID;
    private static TraceEventID WebSocketAsyncReadStopEventID;
    private static TraceEventID WebSocketCloseSentEventID;
    private static TraceEventID WebSocketCloseOutputSentEventID;
    private static TraceEventID WebSocketConnectionClosedEventID;
    private static TraceEventID WebSocketCloseStatusReceivedEventID;
    private static TraceEventID WebSocketUseVersionFromClientWebSocketFactoryEventID;
    private static TraceEventID WebSocketCreateClientWebSocketWithFactoryEventID;
    private static TraceEventID InferredContractDescriptionEventID;
    private static TraceEventID InferredOperationDescriptionEventID;
    private static TraceEventID DuplicateCorrelationQueryEventID;
    private static TraceEventID ServiceEndpointAddedEventID;
    private static TraceEventID TrackingProfileNotFoundEventID;
    private static TraceEventID BufferOutOfOrderMessageNoInstanceEventID;
    private static TraceEventID BufferOutOfOrderMessageNoBookmarkEventID;
    private static TraceEventID MaxPendingMessagesPerChannelExceededEventID;
    private static TraceEventID XamlServicesLoadStartEventID;
    private static TraceEventID XamlServicesLoadStopEventID;
    private static TraceEventID CreateWorkflowServiceHostStartEventID;
    private static TraceEventID CreateWorkflowServiceHostStopEventID;
    private static TraceEventID TransactedReceiveScopeEndCommitFailedEventID;
    private static TraceEventID ServiceActivationStartEventID;
    private static TraceEventID ServiceActivationStopEventID;
    private static TraceEventID ServiceActivationAvailableMemoryEventID;
    private static TraceEventID ServiceActivationExceptionEventID;
    private static TraceEventID RoutingServiceClosingClientEventID;
    private static TraceEventID RoutingServiceChannelFaultedEventID;
    private static TraceEventID RoutingServiceCompletingOneWayEventID;
    private static TraceEventID RoutingServiceProcessingFailureEventID;
    private static TraceEventID RoutingServiceCreatingClientForEndpointEventID;
    private static TraceEventID RoutingServiceDisplayConfigEventID;
    private static TraceEventID RoutingServiceCompletingTwoWayEventID;
    private static TraceEventID RoutingServiceMessageRoutedToEndpointsEventID;
    private static TraceEventID RoutingServiceConfigurationAppliedEventID;
    private static TraceEventID RoutingServiceProcessingMessageEventID;
    private static TraceEventID RoutingServiceTransmittingMessageEventID;
    private static TraceEventID RoutingServiceCommittingTransactionEventID;
    private static TraceEventID RoutingServiceDuplexCallbackExceptionEventID;
    private static TraceEventID RoutingServiceMovedToBackupEventID;
    private static TraceEventID RoutingServiceCreatingTransactionEventID;
    private static TraceEventID RoutingServiceCloseFailedEventID;
    private static TraceEventID RoutingServiceSendingResponseEventID;
    private static TraceEventID RoutingServiceSendingFaultResponseEventID;
    private static TraceEventID RoutingServiceCompletingReceiveContextEventID;
    private static TraceEventID RoutingServiceAbandoningReceiveContextEventID;
    private static TraceEventID RoutingServiceUsingExistingTransactionEventID;
    private static TraceEventID RoutingServiceTransmitFailedEventID;
    private static TraceEventID RoutingServiceFilterTableMatchStartEventID;
    private static TraceEventID RoutingServiceFilterTableMatchStopEventID;
    private static TraceEventID RoutingServiceAbortingChannelEventID;
    private static TraceEventID RoutingServiceHandledExceptionEventID;
    private static TraceEventID RoutingServiceTransmitSucceededEventID;
    private static TraceEventID TransportListenerSessionsReceivedEventID;
    private static TraceEventID FailFastExceptionEventID;
    private static TraceEventID ServiceStartPipeErrorEventID;
    private static TraceEventID DispatchSessionStartEventID;
    private static TraceEventID PendingSessionQueueFullEventID;
    private static TraceEventID MessageQueueRegisterStartEventID;
    private static TraceEventID MessageQueueRegisterAbortEventID;
    private static TraceEventID MessageQueueUnregisterSucceededEventID;
    private static TraceEventID MessageQueueRegisterFailedEventID;
    private static TraceEventID MessageQueueRegisterCompletedEventID;
    private static TraceEventID MessageQueueDuplicatedSocketErrorEventID;
    private static TraceEventID MessageQueueDuplicatedSocketCompleteEventID;
    private static TraceEventID TcpTransportListenerListeningStartEventID;
    private static TraceEventID TcpTransportListenerListeningStopEventID;
    private static TraceEventID WebhostUnregisterProtocolFailedEventID;
    private static TraceEventID WasCloseAllListenerChannelInstancesCompletedEventID;
    private static TraceEventID WasCloseAllListenerChannelInstancesFailedEventID;
    private static TraceEventID OpenListenerChannelInstanceFailedEventID;
    private static TraceEventID WasConnectedEventID;
    private static TraceEventID WasDisconnectedEventID;
    private static TraceEventID PipeTransportListenerListeningStartEventID;
    private static TraceEventID PipeTransportListenerListeningStopEventID;
    private static TraceEventID DispatchSessionSuccessEventID;
    private static TraceEventID DispatchSessionFailedEventID;
    private static TraceEventID WasConnectionTimedoutEventID;
    private static TraceEventID RoutingTableLookupStartEventID;
    private static TraceEventID RoutingTableLookupStopEventID;
    private static TraceEventID PendingSessionQueueRatioEventID;
    private static TraceEventID EndSqlCommandExecuteEventID;
    private static TraceEventID StartSqlCommandExecuteEventID;
    private static TraceEventID RenewLockSystemErrorEventID;
    private static TraceEventID FoundProcessingErrorEventID;
    private static TraceEventID UnlockInstanceExceptionEventID;
    private static TraceEventID MaximumRetriesExceededForSqlCommandEventID;
    private static TraceEventID RetryingSqlCommandDueToSqlErrorEventID;
    private static TraceEventID TimeoutOpeningSqlConnectionEventID;
    private static TraceEventID SqlExceptionCaughtEventID;
    private static TraceEventID QueuingSqlRetryEventID;
    private static TraceEventID LockRetryTimeoutEventID;
    private static TraceEventID RunnableInstancesDetectionErrorEventID;
    private static TraceEventID InstanceLocksRecoveryErrorEventID;
    private static TraceEventID MessageLogEventSizeExceededEventID;
    private static TraceEventID DiscoveryClientInClientChannelFailedToCloseEventID;
    private static TraceEventID DiscoveryClientProtocolExceptionSuppressedEventID;
    private static TraceEventID DiscoveryClientReceivedMulticastSuppressionEventID;
    private static TraceEventID DiscoveryMessageReceivedAfterOperationCompletedEventID;
    private static TraceEventID DiscoveryMessageWithInvalidContentEventID;
    private static TraceEventID DiscoveryMessageWithInvalidRelatesToOrOperationCompletedEventID;
    private static TraceEventID DiscoveryMessageWithInvalidReplyToEventID;
    private static TraceEventID DiscoveryMessageWithNoContentEventID;
    private static TraceEventID DiscoveryMessageWithNullMessageIdEventID;
    private static TraceEventID DiscoveryMessageWithNullMessageSequenceEventID;
    private static TraceEventID DiscoveryMessageWithNullRelatesToEventID;
    private static TraceEventID DiscoveryMessageWithNullReplyToEventID;
    private static TraceEventID DuplicateDiscoveryMessageEventID;
    private static TraceEventID EndpointDiscoverabilityDisabledEventID;
    private static TraceEventID EndpointDiscoverabilityEnabledEventID;
    private static TraceEventID FindInitiatedInDiscoveryClientChannelEventID;
    private static TraceEventID InnerChannelCreationFailedEventID;
    private static TraceEventID InnerChannelOpenFailedEventID;
    private static TraceEventID InnerChannelOpenSucceededEventID;
    private static TraceEventID SynchronizationContextResetEventID;
    private static TraceEventID SynchronizationContextSetToNullEventID;
    private static TraceEventID DCSerializeWithSurrogateStartEventID;
    private static TraceEventID DCSerializeWithSurrogateStopEventID;
    private static TraceEventID DCDeserializeWithSurrogateStartEventID;
    private static TraceEventID DCDeserializeWithSurrogateStopEventID;
    private static TraceEventID ImportKnownTypesStartEventID;
    private static TraceEventID ImportKnownTypesStopEventID;
    private static TraceEventID DCResolverResolveEventID;
    private static TraceEventID DCGenWriterStartEventID;
    private static TraceEventID DCGenWriterStopEventID;
    private static TraceEventID DCGenReaderStartEventID;
    private static TraceEventID DCGenReaderStopEventID;
    private static TraceEventID DCJsonGenReaderStartEventID;
    private static TraceEventID DCJsonGenReaderStopEventID;
    private static TraceEventID DCJsonGenWriterStartEventID;
    private static TraceEventID DCJsonGenWriterStopEventID;
    private static TraceEventID GenXmlSerializableStartEventID;
    private static TraceEventID GenXmlSerializableStopEventID;
    private static TraceEventID JsonMessageDecodingStartEventID;
    private static TraceEventID JsonMessageEncodingStartEventID;
    private static TraceEventID TokenValidationStartedEventID;
    private static TraceEventID TokenValidationSuccessEventID;
    private static TraceEventID TokenValidationFailureEventID;
    private static TraceEventID GetIssuerNameSuccessEventID;
    private static TraceEventID GetIssuerNameFailureEventID;
    private static TraceEventID FederationMessageProcessingStartedEventID;
    private static TraceEventID FederationMessageProcessingSuccessEventID;
    private static TraceEventID FederationMessageCreationStartedEventID;
    private static TraceEventID FederationMessageCreationSuccessEventID;
    private static TraceEventID SessionCookieReadingStartedEventID;
    private static TraceEventID SessionCookieReadingSuccessEventID;
    private static TraceEventID PrincipalSettingFromSessionTokenStartedEventID;
    private static TraceEventID PrincipalSettingFromSessionTokenSuccessEventID;
    private static TraceEventID TrackingRecordDroppedEventID;
    private static TraceEventID TrackingRecordRaisedEventID;
    private static TraceEventID TrackingRecordTruncatedEventID;
    private static TraceEventID TrackingDataExtractedEventID;
    private static TraceEventID TrackingValueNotSerializableEventID;
    private static TraceEventID AppDomainUnloadEventID;
    private static TraceEventID HandledExceptionEventID;
    private static TraceEventID ShipAssertExceptionMessageEventID;
    private static TraceEventID ThrowingExceptionEventID;
    private static TraceEventID UnhandledExceptionEventID;
    private static TraceEventID MaxInstancesExceededEventID;
    private static TraceEventID TraceCodeEventLogCriticalEventID;
    private static TraceEventID TraceCodeEventLogErrorEventID;
    private static TraceEventID TraceCodeEventLogInfoEventID;
    private static TraceEventID TraceCodeEventLogVerboseEventID;
    private static TraceEventID TraceCodeEventLogWarningEventID;
    private static TraceEventID HandledExceptionWarningEventID;
    private static TraceEventID HandledExceptionErrorEventID;
    private static TraceEventID HandledExceptionVerboseEventID;
    private static TraceEventID ThrowingExceptionVerboseEventID;
    private static TraceEventID EtwUnhandledExceptionEventID;
    private static TraceEventID ThrowingEtwExceptionVerboseEventID;
    private static TraceEventID ThrowingEtwExceptionEventID;
    private static TraceEventID HttpHandlerPickedForUrlEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid ActivationDispatchSessionTaskGuid;
    private static Guid ActivationDuplicateSocketTaskGuid;
    private static Guid ActivationListenerOpenTaskGuid;
    private static Guid ActivationPipeListenerListeningTaskGuid;
    private static Guid ActivationRoutingTableLookupTaskGuid;
    private static Guid ActivationServiceStartTaskGuid;
    private static Guid ActivationTcpListenerListeningTaskGuid;
    private static Guid AddServiceEndpointTaskGuid;
    private static Guid BufferOutOfOrderTaskGuid;
    private static Guid BufferPoolingTaskGuid;
    private static Guid CacheRootMetadataTaskGuid;
    private static Guid ChannelFactoryCachingTaskGuid;
    private static Guid ChannelFactoryCreateTaskGuid;
    private static Guid ChannelReceiveTaskGuid;
    private static Guid ClientRuntimeTaskGuid;
    private static Guid ClientSendPreambleTaskGuid;
    private static Guid CompensationStateTaskGuid;
    private static Guid CompleteActivityTaskGuid;
    private static Guid CompleteWorkItemTaskGuid;
    private static Guid ConnectTaskGuid;
    private static Guid ConnectionAbortTaskGuid;
    private static Guid ConnectionAcceptTaskGuid;
    private static Guid ConnectionPoolingTaskGuid;
    private static Guid CorrelationTaskGuid;
    private static Guid CreateBookmarkTaskGuid;
    private static Guid CreateHttpMessageHandlerTaskGuid;
    private static Guid CreateWorkflowServiceHostTaskGuid;
    private static Guid CustomTrackingRecordTaskGuid;
    private static Guid DataContractResolverTaskGuid;
    private static Guid DiscoveryClientTaskGuid;
    private static Guid DiscoveryClientChannelTaskGuid;
    private static Guid DiscoveryMessageTaskGuid;
    private static Guid DiscoverySynchronizationContextTaskGuid;
    private static Guid DispatchMessageTaskGuid;
    private static Guid EndpointDiscoverabilityTaskGuid;
    private static Guid ExecuteActivityTaskGuid;
    private static Guid ExecuteFlowchartTaskGuid;
    private static Guid ExecuteWorkItemTaskGuid;
    private static Guid ExpressionResultTaskGuid;
    private static Guid FormatterDeserializeReplyTaskGuid;
    private static Guid FormatterDeserializeRequestTaskGuid;
    private static Guid FormatterSerializeReplyTaskGuid;
    private static Guid FormatterSerializeRequestTaskGuid;
    private static Guid GenerateDeserializerTaskGuid;
    private static Guid GenerateSerializerTaskGuid;
    private static Guid GenerateXmlSerializableTaskGuid;
    private static Guid HostedTransportConfigurationManagerConfigInitTaskGuid;
    private static Guid ImportKnownTypeTaskGuid;
    private static Guid InferDescriptionTaskGuid;
    private static Guid InitializeBookmarkScopeTaskGuid;
    private static Guid InternalCacheMetadataTaskGuid;
    private static Guid InvokeMethodTaskGuid;
    private static Guid ListenerOpenTaskGuid;
    private static Guid LockWorkflowInstanceTaskGuid;
    private static Guid MessageChannelCacheTaskGuid;
    private static Guid MessageDecodingTaskGuid;
    private static Guid MessageEncodingTaskGuid;
    private static Guid MessageQueueRegisterTaskGuid;
    private static Guid MsmqQuotasTaskGuid;
    private static Guid NoPersistBlockTaskGuid;
    private static Guid QuotasTaskGuid;
    private static Guid ReliableSessionTaskGuid;
    private static Guid RoutingServiceTaskGuid;
    private static Guid RoutingServiceClientTaskGuid;
    private static Guid RoutingServiceFilterTableMatchTaskGuid;
    private static Guid RoutingServiceMessageTaskGuid;
    private static Guid RoutingServiceReceiveContextTaskGuid;
    private static Guid RoutingServiceTransactionTaskGuid;
    private static Guid RuntimeTransactionTaskGuid;
    private static Guid ScheduleActivityTaskGuid;
    private static Guid ScheduleWorkItemTaskGuid;
    private static Guid SecureMessageTaskGuid;
    private static Guid SecurityImpersonationTaskGuid;
    private static Guid SecurityNegotiationTaskGuid;
    private static Guid SecurityVerificationTaskGuid;
    private static Guid ServiceActivationTaskGuid;
    private static Guid ServiceChannelCallTaskGuid;
    private static Guid ServiceChannelOpenTaskGuid;
    private static Guid ServiceHostActivationTaskGuid;
    private static Guid ServiceHostCompilationTaskGuid;
    private static Guid ServiceHostCreateTaskGuid;
    private static Guid ServiceHostFactoryCreationTaskGuid;
    private static Guid ServiceHostFaultTaskGuid;
    private static Guid ServiceHostOpenTaskGuid;
    private static Guid ServiceInstanceTaskGuid;
    private static Guid ServiceShutdownTaskGuid;
    private static Guid SessionStartTaskGuid;
    private static Guid SessionUpgradeTaskGuid;
    private static Guid SignpostTaskGuid;
    private static Guid SqlCommandExecuteTaskGuid;
    private static Guid StartWorkItemTaskGuid;
    private static Guid SurrogateDeserializeTaskGuid;
    private static Guid SurrogateSerializeTaskGuid;
    private static Guid ThreadSchedulingTaskGuid;
    private static Guid ThrottlesTaskGuid;
    private static Guid TimeoutTaskGuid;
    private static Guid TimeoutExceptionTaskGuid;
    private static Guid TrackingProfileTaskGuid;
    private static Guid TrackingRecordTaskGuid;
    private static Guid TransportReceiveTaskGuid;
    private static Guid TransportSendTaskGuid;
    private static Guid TryCatchExceptionTaskGuid;
    private static Guid VBExpressionCompileTaskGuid;
    private static Guid WASActivationTaskGuid;
    private static Guid WebHostRequestTaskGuid;
    private static Guid WFApplicationStateChangeTaskGuid;
    private static Guid WFMessageTaskGuid;
    private static Guid WorkflowActivityTaskGuid;
    private static Guid WorkflowInstanceRecordTaskGuid;
    private static Guid WorkflowTrackingTaskGuid;
    private static Guid XamlServicesLoadTaskGuid;
    private static Guid SignatureVerificationTaskGuid;
    private static Guid TokenValidationTaskGuid;
    private static Guid GetIssuerNameTaskGuid;
    private static Guid WrappedKeyDecryptionTaskGuid;
    private static Guid EncryptedDataProcessingTaskGuid;
    private static Guid FederationMessageProcessingTaskGuid;
    private static Guid FederationMessageCreationTaskGuid;
    private static Guid SessionCookieReadingTaskGuid;
    private static Guid PrincipalSettingTaskGuid;
    public ApplicationServerTraceEventParser(TraceEventSource source);
    private static ApplicationServerTraceEventParser();
    public void add_WorkflowInstanceRecord(Action`1<Multidata9TemplateHATraceData> value);
    public void remove_WorkflowInstanceRecord(Action`1<Multidata9TemplateHATraceData> value);
    public void add_WorkflowInstanceUnhandledExceptionRecord(Action`1<Multidata10TemplateHATraceData> value);
    public void remove_WorkflowInstanceUnhandledExceptionRecord(Action`1<Multidata10TemplateHATraceData> value);
    public void add_WorkflowInstanceAbortedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void remove_WorkflowInstanceAbortedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void add_ActivityStateRecord(Action`1<Multidata4TemplateHATraceData> value);
    public void remove_ActivityStateRecord(Action`1<Multidata4TemplateHATraceData> value);
    public void add_ActivityScheduledRecord(Action`1<Multidata3TemplateHATraceData> value);
    public void remove_ActivityScheduledRecord(Action`1<Multidata3TemplateHATraceData> value);
    public void add_FaultPropagationRecord(Action`1<Multidata6TemplateHATraceData> value);
    public void remove_FaultPropagationRecord(Action`1<Multidata6TemplateHATraceData> value);
    public void add_CancelRequestedRecord(Action`1<Multidata3TemplateHATraceData> value);
    public void remove_CancelRequestedRecord(Action`1<Multidata3TemplateHATraceData> value);
    public void add_BookmarkResumptionRecord(Action`1<Multidata5TemplateHATraceData> value);
    public void remove_BookmarkResumptionRecord(Action`1<Multidata5TemplateHATraceData> value);
    public void add_CustomTrackingRecordInfo(Action`1<Multidata7TemplateHATraceData> value);
    public void remove_CustomTrackingRecordInfo(Action`1<Multidata7TemplateHATraceData> value);
    public void add_CustomTrackingRecordWarning(Action`1<Multidata7TemplateHATraceData> value);
    public void remove_CustomTrackingRecordWarning(Action`1<Multidata7TemplateHATraceData> value);
    public void add_CustomTrackingRecordError(Action`1<Multidata7TemplateHATraceData> value);
    public void remove_CustomTrackingRecordError(Action`1<Multidata7TemplateHATraceData> value);
    public void add_WorkflowInstanceSuspendedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void remove_WorkflowInstanceSuspendedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void add_WorkflowInstanceTerminatedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void remove_WorkflowInstanceTerminatedRecord(Action`1<Multidata8TemplateHATraceData> value);
    public void add_WorkflowInstanceRecordWithId(Action`1<Multidata11TemplateHATraceData> value);
    public void remove_WorkflowInstanceRecordWithId(Action`1<Multidata11TemplateHATraceData> value);
    public void add_WorkflowInstanceAbortedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void remove_WorkflowInstanceAbortedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void add_WorkflowInstanceSuspendedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void remove_WorkflowInstanceSuspendedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void add_WorkflowInstanceTerminatedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void remove_WorkflowInstanceTerminatedRecordWithId(Action`1<Multidata12TemplateHATraceData> value);
    public void add_WorkflowInstanceUnhandledExceptionRecordWithId(Action`1<Multidata13TemplateHATraceData> value);
    public void remove_WorkflowInstanceUnhandledExceptionRecordWithId(Action`1<Multidata13TemplateHATraceData> value);
    public void add_WorkflowInstanceUpdatedRecord(Action`1<Multidata14TemplateHATraceData> value);
    public void remove_WorkflowInstanceUpdatedRecord(Action`1<Multidata14TemplateHATraceData> value);
    public void add_BufferPoolAllocation(Action`1<Multidata1TemplateATraceData> value);
    public void remove_BufferPoolAllocation(Action`1<Multidata1TemplateATraceData> value);
    public void add_BufferPoolChangeQuota(Action`1<Multidata2TemplateATraceData> value);
    public void remove_BufferPoolChangeQuota(Action`1<Multidata2TemplateATraceData> value);
    public void add_ActionItemScheduled(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ActionItemScheduled(Action`1<OneStringsTemplateATraceData> value);
    public void add_ActionItemCallbackInvoked(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ActionItemCallbackInvoked(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientMessageInspectorAfterReceiveInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ClientMessageInspectorAfterReceiveInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_ClientMessageInspectorBeforeSendInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ClientMessageInspectorBeforeSendInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_ClientParameterInspectorAfterCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ClientParameterInspectorAfterCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_ClientParameterInspectorBeforeCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ClientParameterInspectorBeforeCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_OperationInvoked(Action`1<Multidata24TemplateHATraceData> value);
    public void remove_OperationInvoked(Action`1<Multidata24TemplateHATraceData> value);
    public void add_ErrorHandlerInvoked(Action`1<Multidata25TemplateHATraceData> value);
    public void remove_ErrorHandlerInvoked(Action`1<Multidata25TemplateHATraceData> value);
    public void add_FaultProviderInvoked(Action`1<Multidata26TemplateHATraceData> value);
    public void remove_FaultProviderInvoked(Action`1<Multidata26TemplateHATraceData> value);
    public void add_MessageInspectorAfterReceiveInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_MessageInspectorAfterReceiveInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_MessageInspectorBeforeSendInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_MessageInspectorBeforeSendInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_MessageThrottleExceeded(Action`1<Multidata27TemplateHATraceData> value);
    public void remove_MessageThrottleExceeded(Action`1<Multidata27TemplateHATraceData> value);
    public void add_ParameterInspectorAfterCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ParameterInspectorAfterCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_ParameterInspectorBeforeCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void remove_ParameterInspectorBeforeCallInvoked(Action`1<Multidata23TemplateHATraceData> value);
    public void add_ServiceHostStarted(Action`1<Multidata72TemplateHATraceData> value);
    public void remove_ServiceHostStarted(Action`1<Multidata72TemplateHATraceData> value);
    public void add_OperationCompleted(Action`1<Multidata28TemplateHATraceData> value);
    public void remove_OperationCompleted(Action`1<Multidata28TemplateHATraceData> value);
    public void add_MessageReceivedByTransport(Action`1<Multidata29TemplateHATraceData> value);
    public void remove_MessageReceivedByTransport(Action`1<Multidata29TemplateHATraceData> value);
    public void add_MessageSentByTransport(Action`1<Multidata30TemplateHATraceData> value);
    public void remove_MessageSentByTransport(Action`1<Multidata30TemplateHATraceData> value);
    public void add_ClientOperationPrepared(Action`1<Multidata22TemplateHATraceData> value);
    public void remove_ClientOperationPrepared(Action`1<Multidata22TemplateHATraceData> value);
    public void add_ServiceChannelCallStop(Action`1<Multidata22TemplateHATraceData> value);
    public void remove_ServiceChannelCallStop(Action`1<Multidata22TemplateHATraceData> value);
    public void add_ServiceException(Action`1<Multidata31TemplateHATraceData> value);
    public void remove_ServiceException(Action`1<Multidata31TemplateHATraceData> value);
    public void add_MessageSentToTransport(Action`1<Multidata32TemplateHATraceData> value);
    public void remove_MessageSentToTransport(Action`1<Multidata32TemplateHATraceData> value);
    public void add_MessageReceivedFromTransport(Action`1<Multidata32TemplateHATraceData> value);
    public void remove_MessageReceivedFromTransport(Action`1<Multidata32TemplateHATraceData> value);
    public void add_OperationFailed(Action`1<Multidata28TemplateHATraceData> value);
    public void remove_OperationFailed(Action`1<Multidata28TemplateHATraceData> value);
    public void add_OperationFaulted(Action`1<Multidata28TemplateHATraceData> value);
    public void remove_OperationFaulted(Action`1<Multidata28TemplateHATraceData> value);
    public void add_MessageThrottleAtSeventyPercent(Action`1<Multidata27TemplateHATraceData> value);
    public void remove_MessageThrottleAtSeventyPercent(Action`1<Multidata27TemplateHATraceData> value);
    public void add_TraceCorrelationKeys(Action`1<Multidata86TemplateHATraceData> value);
    public void remove_TraceCorrelationKeys(Action`1<Multidata86TemplateHATraceData> value);
    public void add_IdleServicesClosed(Action`1<Multidata73TemplateATraceData> value);
    public void remove_IdleServicesClosed(Action`1<Multidata73TemplateATraceData> value);
    public void add_UserDefinedErrorOccurred(Action`1<UserEventsTemplateTraceData> value);
    public void remove_UserDefinedErrorOccurred(Action`1<UserEventsTemplateTraceData> value);
    public void add_UserDefinedWarningOccurred(Action`1<UserEventsTemplateTraceData> value);
    public void remove_UserDefinedWarningOccurred(Action`1<UserEventsTemplateTraceData> value);
    public void add_UserDefinedInformationEventOccured(Action`1<UserEventsTemplateTraceData> value);
    public void remove_UserDefinedInformationEventOccured(Action`1<UserEventsTemplateTraceData> value);
    public void add_StopSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_StopSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_StartSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_StartSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_SuspendSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_SuspendSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_ResumeSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_ResumeSignpostEvent(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_StartSignpostEvent1(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_StartSignpostEvent1(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_StopSignpostEvent1(Action`1<TwoStringsTemplateTATraceData> value);
    public void remove_StopSignpostEvent1(Action`1<TwoStringsTemplateTATraceData> value);
    public void add_MessageLogInfo(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MessageLogInfo(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MessageLogWarning(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MessageLogWarning(Action`1<TwoStringsTemplateATraceData> value);
    public void add_TransferEmitted(Action`1<TransferEmittedTemplateTraceData> value);
    public void remove_TransferEmitted(Action`1<TransferEmittedTemplateTraceData> value);
    public void add_CompilationStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CompilationStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_CompilationStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CompilationStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceHostFactoryCreationStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceHostFactoryCreationStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceHostFactoryCreationStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceHostFactoryCreationStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_CreateServiceHostStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CreateServiceHostStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_CreateServiceHostStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CreateServiceHostStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_HostedTransportConfigurationManagerConfigInitStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HostedTransportConfigurationManagerConfigInitStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HostedTransportConfigurationManagerConfigInitStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HostedTransportConfigurationManagerConfigInitStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceHostOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceHostOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceHostOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceHostOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_WebHostRequestStart(Action`1<Multidata69TemplateATraceData> value);
    public void remove_WebHostRequestStart(Action`1<Multidata69TemplateATraceData> value);
    public void add_WebHostRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WebHostRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_CBAEntryRead(Action`1<Multidata74TemplateATraceData> value);
    public void remove_CBAEntryRead(Action`1<Multidata74TemplateATraceData> value);
    public void add_CBAMatchFound(Action`1<Multidata70TemplateATraceData> value);
    public void remove_CBAMatchFound(Action`1<Multidata70TemplateATraceData> value);
    public void add_AspNetRoutingService(Action`1<Multidata70TemplateATraceData> value);
    public void remove_AspNetRoutingService(Action`1<Multidata70TemplateATraceData> value);
    public void add_AspNetRoute(Action`1<Multidata71TemplateATraceData> value);
    public void remove_AspNetRoute(Action`1<Multidata71TemplateATraceData> value);
    public void add_IncrementBusyCount(Action`1<Multidata75TemplateATraceData> value);
    public void remove_IncrementBusyCount(Action`1<Multidata75TemplateATraceData> value);
    public void add_DecrementBusyCount(Action`1<Multidata75TemplateATraceData> value);
    public void remove_DecrementBusyCount(Action`1<Multidata75TemplateATraceData> value);
    public void add_ServiceChannelOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceChannelOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceChannelOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceChannelOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceChannelCallStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceChannelCallStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceChannelBeginCallStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceChannelBeginCallStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpSendMessageStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpSendMessageStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpSendStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpSendStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpMessageReceiveStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpMessageReceiveStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchMessageStart(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_DispatchMessageStart(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_HttpContextBeforeProcessAuthentication(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpContextBeforeProcessAuthentication(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchMessageBeforeAuthorization(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchMessageBeforeAuthorization(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchMessageStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchMessageStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientChannelOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientChannelOpenStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientChannelOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientChannelOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpSendStreamedMessageStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpSendStreamedMessageStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_WorkflowApplicationCompleted(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_WorkflowApplicationCompleted(Action`1<TwoStringsTemplateATraceData> value);
    public void add_WorkflowApplicationTerminated(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_WorkflowApplicationTerminated(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_WorkflowInstanceCanceled(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_WorkflowInstanceCanceled(Action`1<TwoStringsTemplateATraceData> value);
    public void add_WorkflowInstanceAborted(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_WorkflowInstanceAborted(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_WorkflowApplicationIdled(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_WorkflowApplicationIdled(Action`1<TwoStringsTemplateATraceData> value);
    public void add_WorkflowApplicationUnhandledException(Action`1<SixStringsTemplateEATraceData> value);
    public void remove_WorkflowApplicationUnhandledException(Action`1<SixStringsTemplateEATraceData> value);
    public void add_WorkflowApplicationPersisted(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_WorkflowApplicationPersisted(Action`1<TwoStringsTemplateATraceData> value);
    public void add_WorkflowApplicationUnloaded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_WorkflowApplicationUnloaded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ActivityScheduled(Action`1<SevenStringsTemplateATraceData> value);
    public void remove_ActivityScheduled(Action`1<SevenStringsTemplateATraceData> value);
    public void add_ActivityCompleted(Action`1<FiveStringsTemplateATraceData> value);
    public void remove_ActivityCompleted(Action`1<FiveStringsTemplateATraceData> value);
    public void add_ScheduleExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_ScheduleExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_StartExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_StartExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_CompleteExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_CompleteExecuteActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_ScheduleCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void remove_ScheduleCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void add_StartCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void remove_StartCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void add_CompleteCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void remove_CompleteCompletionWorkItem(Action`1<SevenStringsTemplateATraceData> value);
    public void add_ScheduleCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_ScheduleCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_StartCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_StartCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_CompleteCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_CompleteCancelActivityWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_CreateBookmark(Action`1<SixStringsTemplateATraceData> value);
    public void remove_CreateBookmark(Action`1<SixStringsTemplateATraceData> value);
    public void add_ScheduleBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void remove_ScheduleBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void add_StartBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void remove_StartBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void add_CompleteBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void remove_CompleteBookmarkWorkItem(Action`1<SixStringsTemplateATraceData> value);
    public void add_CreateBookmarkScope(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_CreateBookmarkScope(Action`1<TwoStringsTemplateATraceData> value);
    public void add_BookmarkScopeInitialized(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_BookmarkScopeInitialized(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_ScheduleTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_ScheduleTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_StartTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_StartTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_CompleteTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_CompleteTransactionContextWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_ScheduleFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void remove_ScheduleFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void add_StartFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void remove_StartFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void add_CompleteFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void remove_CompleteFaultWorkItem(Action`1<EightStringsTemplateEATraceData> value);
    public void add_ScheduleRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_ScheduleRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_StartRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_StartRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_CompleteRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void remove_CompleteRuntimeWorkItem(Action`1<FourStringsTemplateATraceData> value);
    public void add_RuntimeTransactionSet(Action`1<SevenStringsTemplateATraceData> value);
    public void remove_RuntimeTransactionSet(Action`1<SevenStringsTemplateATraceData> value);
    public void add_RuntimeTransactionCompletionRequested(Action`1<FourStringsTemplateATraceData> value);
    public void remove_RuntimeTransactionCompletionRequested(Action`1<FourStringsTemplateATraceData> value);
    public void add_RuntimeTransactionComplete(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RuntimeTransactionComplete(Action`1<TwoStringsTemplateATraceData> value);
    public void add_EnterNoPersistBlock(Action`1<OneStringsTemplateATraceData> value);
    public void remove_EnterNoPersistBlock(Action`1<OneStringsTemplateATraceData> value);
    public void add_ExitNoPersistBlock(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ExitNoPersistBlock(Action`1<OneStringsTemplateATraceData> value);
    public void add_InArgumentBound(Action`1<SixStringsTemplateATraceData> value);
    public void remove_InArgumentBound(Action`1<SixStringsTemplateATraceData> value);
    public void add_WorkflowApplicationPersistableIdle(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_WorkflowApplicationPersistableIdle(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_WorkflowActivityStart(Action`1<Multidata17TemplateATraceData> value);
    public void remove_WorkflowActivityStart(Action`1<Multidata17TemplateATraceData> value);
    public void add_WorkflowActivityStop(Action`1<Multidata17TemplateATraceData> value);
    public void remove_WorkflowActivityStop(Action`1<Multidata17TemplateATraceData> value);
    public void add_WorkflowActivitySuspend(Action`1<Multidata17TemplateATraceData> value);
    public void remove_WorkflowActivitySuspend(Action`1<Multidata17TemplateATraceData> value);
    public void add_WorkflowActivityResume(Action`1<Multidata17TemplateATraceData> value);
    public void remove_WorkflowActivityResume(Action`1<Multidata17TemplateATraceData> value);
    public void add_InvokeMethodIsStatic(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_InvokeMethodIsStatic(Action`1<TwoStringsTemplateATraceData> value);
    public void add_InvokeMethodIsNotStatic(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_InvokeMethodIsNotStatic(Action`1<TwoStringsTemplateATraceData> value);
    public void add_InvokedMethodThrewException(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_InvokedMethodThrewException(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_InvokeMethodUseAsyncPattern(Action`1<FourStringsTemplateATraceData> value);
    public void remove_InvokeMethodUseAsyncPattern(Action`1<FourStringsTemplateATraceData> value);
    public void add_InvokeMethodDoesNotUseAsyncPattern(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_InvokeMethodDoesNotUseAsyncPattern(Action`1<TwoStringsTemplateATraceData> value);
    public void add_FlowchartStart(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_FlowchartStart(Action`1<TwoStringsTemplateATraceData> value);
    public void add_FlowchartEmpty(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_FlowchartEmpty(Action`1<TwoStringsTemplateATraceData> value);
    public void add_FlowchartNextNull(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_FlowchartNextNull(Action`1<TwoStringsTemplateATraceData> value);
    public void add_FlowchartSwitchCase(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_FlowchartSwitchCase(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_FlowchartSwitchDefault(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_FlowchartSwitchDefault(Action`1<TwoStringsTemplateATraceData> value);
    public void add_FlowchartSwitchCaseNotFound(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_FlowchartSwitchCaseNotFound(Action`1<TwoStringsTemplateATraceData> value);
    public void add_CompensationState(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_CompensationState(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_SwitchCaseNotFound(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_SwitchCaseNotFound(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ChannelInitializationTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_ChannelInitializationTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_CloseTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_CloseTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_IdleTimeout(Action`1<Multidata56TemplateATraceData> value);
    public void remove_IdleTimeout(Action`1<Multidata56TemplateATraceData> value);
    public void add_LeaseTimeout(Action`1<Multidata56TemplateATraceData> value);
    public void remove_LeaseTimeout(Action`1<Multidata56TemplateATraceData> value);
    public void add_OpenTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_OpenTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ReceiveTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_ReceiveTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_SendTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_SendTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_InactivityTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_InactivityTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaxReceivedMessageSizeExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxReceivedMessageSizeExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaxSentMessageSizeExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxSentMessageSizeExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaxOutboundConnectionsPerEndpointExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxOutboundConnectionsPerEndpointExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaxPendingConnectionsExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxPendingConnectionsExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ReaderQuotaExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_ReaderQuotaExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_NegotiateTokenAuthenticatorStateCacheExceeded(Action`1<Multidata57TemplateATraceData> value);
    public void remove_NegotiateTokenAuthenticatorStateCacheExceeded(Action`1<Multidata57TemplateATraceData> value);
    public void add_NegotiateTokenAuthenticatorStateCacheRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_NegotiateTokenAuthenticatorStateCacheRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_SecuritySessionRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_SecuritySessionRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_PendingConnectionsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_PendingConnectionsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_ConcurrentCallsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_ConcurrentCallsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_ConcurrentSessionsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_ConcurrentSessionsRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_OutboundConnectionsPerEndpointRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_OutboundConnectionsPerEndpointRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_PendingMessagesPerChannelRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_PendingMessagesPerChannelRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_ConcurrentInstancesRatio(Action`1<Multidata58TemplateATraceData> value);
    public void remove_ConcurrentInstancesRatio(Action`1<Multidata58TemplateATraceData> value);
    public void add_PendingAcceptsAtZero(Action`1<OneStringsTemplateATraceData> value);
    public void remove_PendingAcceptsAtZero(Action`1<OneStringsTemplateATraceData> value);
    public void add_MaxSessionSizeReached(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxSessionSizeReached(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ReceiveRetryCountReached(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_ReceiveRetryCountReached(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaxRetryCyclesExceededMsmq(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxRetryCyclesExceededMsmq(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ReadPoolMiss(Action`1<Multidata59TemplateATraceData> value);
    public void remove_ReadPoolMiss(Action`1<Multidata59TemplateATraceData> value);
    public void add_WritePoolMiss(Action`1<Multidata59TemplateATraceData> value);
    public void remove_WritePoolMiss(Action`1<Multidata59TemplateATraceData> value);
    public void add_WfMessageReceived(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WfMessageReceived(Action`1<OneStringsTemplateATraceData> value);
    public void add_WfMessageSent(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WfMessageSent(Action`1<OneStringsTemplateATraceData> value);
    public void add_MaxRetryCyclesExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_MaxRetryCyclesExceeded(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ExecuteWorkItemStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ExecuteWorkItemStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ExecuteWorkItemStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ExecuteWorkItemStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_SendMessageChannelCacheMiss(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SendMessageChannelCacheMiss(Action`1<OneStringsTemplateATraceData> value);
    public void add_InternalCacheMetadataStart(Action`1<Multidata19TemplateATraceData> value);
    public void remove_InternalCacheMetadataStart(Action`1<Multidata19TemplateATraceData> value);
    public void add_InternalCacheMetadataStop(Action`1<Multidata19TemplateATraceData> value);
    public void remove_InternalCacheMetadataStop(Action`1<Multidata19TemplateATraceData> value);
    public void add_CompileVbExpressionStart(Action`1<Multidata20TemplateATraceData> value);
    public void remove_CompileVbExpressionStart(Action`1<Multidata20TemplateATraceData> value);
    public void add_CacheRootMetadataStart(Action`1<Multidata21TemplateATraceData> value);
    public void remove_CacheRootMetadataStart(Action`1<Multidata21TemplateATraceData> value);
    public void add_CacheRootMetadataStop(Action`1<Multidata21TemplateATraceData> value);
    public void remove_CacheRootMetadataStop(Action`1<Multidata21TemplateATraceData> value);
    public void add_CompileVbExpressionStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CompileVbExpressionStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_TryCatchExceptionFromTry(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_TryCatchExceptionFromTry(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_TryCatchExceptionDuringCancelation(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_TryCatchExceptionDuringCancelation(Action`1<TwoStringsTemplateATraceData> value);
    public void add_TryCatchExceptionFromCatchOrFinally(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_TryCatchExceptionFromCatchOrFinally(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ReceiveContextCompleteFailed(Action`1<Multidata33TemplateATraceData> value);
    public void remove_ReceiveContextCompleteFailed(Action`1<Multidata33TemplateATraceData> value);
    public void add_ReceiveContextAbandonFailed(Action`1<Multidata33TemplateATraceData> value);
    public void remove_ReceiveContextAbandonFailed(Action`1<Multidata33TemplateATraceData> value);
    public void add_ReceiveContextFaulted(Action`1<TwoStringsTemplateSATraceData> value);
    public void remove_ReceiveContextFaulted(Action`1<TwoStringsTemplateSATraceData> value);
    public void add_ReceiveContextAbandonWithException(Action`1<Multidata34TemplateATraceData> value);
    public void remove_ReceiveContextAbandonWithException(Action`1<Multidata34TemplateATraceData> value);
    public void add_ClientBaseCachedChannelFactoryCount(Action`1<Multidata35TemplateSATraceData> value);
    public void remove_ClientBaseCachedChannelFactoryCount(Action`1<Multidata35TemplateSATraceData> value);
    public void add_ClientBaseChannelFactoryAgedOutofCache(Action`1<Multidata36TemplateSATraceData> value);
    public void remove_ClientBaseChannelFactoryAgedOutofCache(Action`1<Multidata36TemplateSATraceData> value);
    public void add_ClientBaseChannelFactoryCacheHit(Action`1<TwoStringsTemplateSATraceData> value);
    public void remove_ClientBaseChannelFactoryCacheHit(Action`1<TwoStringsTemplateSATraceData> value);
    public void add_ClientBaseUsingLocalChannelFactory(Action`1<TwoStringsTemplateSATraceData> value);
    public void remove_ClientBaseUsingLocalChannelFactory(Action`1<TwoStringsTemplateSATraceData> value);
    public void add_QueryCompositionExecuted(Action`1<Multidata37TemplateSATraceData> value);
    public void remove_QueryCompositionExecuted(Action`1<Multidata37TemplateSATraceData> value);
    public void add_DispatchFailed(Action`1<Multidata38TemplateHATraceData> value);
    public void remove_DispatchFailed(Action`1<Multidata38TemplateHATraceData> value);
    public void add_DispatchSuccessful(Action`1<Multidata38TemplateHATraceData> value);
    public void remove_DispatchSuccessful(Action`1<Multidata38TemplateHATraceData> value);
    public void add_MessageReadByEncoder(Action`1<Multidata39TemplateSATraceData> value);
    public void remove_MessageReadByEncoder(Action`1<Multidata39TemplateSATraceData> value);
    public void add_MessageWrittenByEncoder(Action`1<Multidata39TemplateSATraceData> value);
    public void remove_MessageWrittenByEncoder(Action`1<Multidata39TemplateSATraceData> value);
    public void add_SessionIdleTimeout(Action`1<Multidata40TemplateATraceData> value);
    public void remove_SessionIdleTimeout(Action`1<Multidata40TemplateATraceData> value);
    public void add_SocketAcceptEnqueued(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SocketAcceptEnqueued(Action`1<OneStringsTemplateATraceData> value);
    public void add_SocketAccepted(Action`1<Multidata41TemplateATraceData> value);
    public void remove_SocketAccepted(Action`1<Multidata41TemplateATraceData> value);
    public void add_ConnectionPoolMiss(Action`1<Multidata42TemplateATraceData> value);
    public void remove_ConnectionPoolMiss(Action`1<Multidata42TemplateATraceData> value);
    public void add_DispatchFormatterDeserializeRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchFormatterDeserializeRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchFormatterDeserializeRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchFormatterDeserializeRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchFormatterSerializeReplyStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchFormatterSerializeReplyStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchFormatterSerializeReplyStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchFormatterSerializeReplyStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientFormatterSerializeRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientFormatterSerializeRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientFormatterSerializeRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientFormatterSerializeRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientFormatterDeserializeReplyStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientFormatterDeserializeReplyStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientFormatterDeserializeReplyStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientFormatterDeserializeReplyStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityNegotiationStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityNegotiationStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityNegotiationStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityNegotiationStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityTokenProviderOpened(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityTokenProviderOpened(Action`1<OneStringsTemplateATraceData> value);
    public void add_OutgoingMessageSecured(Action`1<OneStringsTemplateATraceData> value);
    public void remove_OutgoingMessageSecured(Action`1<OneStringsTemplateATraceData> value);
    public void add_IncomingMessageVerified(Action`1<OneStringsTemplateATraceData> value);
    public void remove_IncomingMessageVerified(Action`1<OneStringsTemplateATraceData> value);
    public void add_GetServiceInstanceStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_GetServiceInstanceStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_GetServiceInstanceStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_GetServiceInstanceStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ChannelReceiveStart(Action`1<Multidata43TemplateATraceData> value);
    public void remove_ChannelReceiveStart(Action`1<Multidata43TemplateATraceData> value);
    public void add_ChannelReceiveStop(Action`1<Multidata43TemplateATraceData> value);
    public void remove_ChannelReceiveStop(Action`1<Multidata43TemplateATraceData> value);
    public void add_ChannelFactoryCreated(Action`1<TwoStringsTemplateSATraceData> value);
    public void remove_ChannelFactoryCreated(Action`1<TwoStringsTemplateSATraceData> value);
    public void add_PipeConnectionAcceptStart(Action`1<Multidata44TemplateATraceData> value);
    public void remove_PipeConnectionAcceptStart(Action`1<Multidata44TemplateATraceData> value);
    public void add_PipeConnectionAcceptStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_PipeConnectionAcceptStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_EstablishConnectionStart(Action`1<Multidata45TemplateATraceData> value);
    public void remove_EstablishConnectionStart(Action`1<Multidata45TemplateATraceData> value);
    public void add_EstablishConnectionStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_EstablishConnectionStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_SessionPreambleUnderstood(Action`1<Multidata46TemplateATraceData> value);
    public void remove_SessionPreambleUnderstood(Action`1<Multidata46TemplateATraceData> value);
    public void add_ConnectionReaderSendFault(Action`1<Multidata47TemplateATraceData> value);
    public void remove_ConnectionReaderSendFault(Action`1<Multidata47TemplateATraceData> value);
    public void add_SocketAcceptClosed(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SocketAcceptClosed(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceHostFaulted(Action`1<TwoStringsTemplateSATraceData> value);
    public void remove_ServiceHostFaulted(Action`1<TwoStringsTemplateSATraceData> value);
    public void add_ListenerOpenStart(Action`1<Multidata48TemplateATraceData> value);
    public void remove_ListenerOpenStart(Action`1<Multidata48TemplateATraceData> value);
    public void add_ListenerOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ListenerOpenStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServerMaxPooledConnectionsQuotaReached(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServerMaxPooledConnectionsQuotaReached(Action`1<OneStringsTemplateATraceData> value);
    public void add_TcpConnectionTimedOut(Action`1<Multidata49TemplateATraceData> value);
    public void remove_TcpConnectionTimedOut(Action`1<Multidata49TemplateATraceData> value);
    public void add_TcpConnectionResetError(Action`1<Multidata49TemplateATraceData> value);
    public void remove_TcpConnectionResetError(Action`1<Multidata49TemplateATraceData> value);
    public void add_ServiceSecurityNegotiationCompleted(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceSecurityNegotiationCompleted(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityNegotiationProcessingFailure(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityNegotiationProcessingFailure(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityIdentityVerificationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityIdentityVerificationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityIdentityVerificationFailure(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityIdentityVerificationFailure(Action`1<OneStringsTemplateATraceData> value);
    public void add_PortSharingDuplicatedSocket(Action`1<Multidata48TemplateATraceData> value);
    public void remove_PortSharingDuplicatedSocket(Action`1<Multidata48TemplateATraceData> value);
    public void add_SecurityImpersonationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityImpersonationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_SecurityImpersonationFailure(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SecurityImpersonationFailure(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpChannelRequestAborted(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpChannelRequestAborted(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpChannelResponseAborted(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpChannelResponseAborted(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpAuthFailed(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpAuthFailed(Action`1<OneStringsTemplateATraceData> value);
    public void add_SharedListenerProxyRegisterStart(Action`1<Multidata48TemplateATraceData> value);
    public void remove_SharedListenerProxyRegisterStart(Action`1<Multidata48TemplateATraceData> value);
    public void add_SharedListenerProxyRegisterStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SharedListenerProxyRegisterStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_SharedListenerProxyRegisterFailed(Action`1<Multidata50TemplateATraceData> value);
    public void remove_SharedListenerProxyRegisterFailed(Action`1<Multidata50TemplateATraceData> value);
    public void add_ConnectionPoolPreambleFailed(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ConnectionPoolPreambleFailed(Action`1<OneStringsTemplateATraceData> value);
    public void add_SslOnInitiateUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SslOnInitiateUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void add_SslOnAcceptUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SslOnAcceptUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void add_BinaryMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_BinaryMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_MtomMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MtomMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_TextMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_TextMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_BinaryMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_BinaryMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_MtomMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MtomMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_TextMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_TextMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpResponseReceiveStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpResponseReceiveStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_SocketReadStop(Action`1<Multidata51TemplateATraceData> value);
    public void remove_SocketReadStop(Action`1<Multidata51TemplateATraceData> value);
    public void add_SocketAsyncReadStop(Action`1<Multidata51TemplateATraceData> value);
    public void remove_SocketAsyncReadStop(Action`1<Multidata51TemplateATraceData> value);
    public void add_SocketWriteStart(Action`1<Multidata51TemplateATraceData> value);
    public void remove_SocketWriteStart(Action`1<Multidata51TemplateATraceData> value);
    public void add_SocketAsyncWriteStart(Action`1<Multidata51TemplateATraceData> value);
    public void remove_SocketAsyncWriteStart(Action`1<Multidata51TemplateATraceData> value);
    public void add_SequenceAcknowledgementSent(Action`1<Multidata52TemplateATraceData> value);
    public void remove_SequenceAcknowledgementSent(Action`1<Multidata52TemplateATraceData> value);
    public void add_ClientReliableSessionReconnect(Action`1<Multidata52TemplateATraceData> value);
    public void remove_ClientReliableSessionReconnect(Action`1<Multidata52TemplateATraceData> value);
    public void add_ReliableSessionChannelFaulted(Action`1<Multidata52TemplateATraceData> value);
    public void remove_ReliableSessionChannelFaulted(Action`1<Multidata52TemplateATraceData> value);
    public void add_WindowsStreamSecurityOnInitiateUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WindowsStreamSecurityOnInitiateUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void add_WindowsStreamSecurityOnAcceptUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WindowsStreamSecurityOnAcceptUpgrade(Action`1<OneStringsTemplateATraceData> value);
    public void add_SocketConnectionAbort(Action`1<Multidata53TemplateATraceData> value);
    public void remove_SocketConnectionAbort(Action`1<Multidata53TemplateATraceData> value);
    public void add_HttpGetContextStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpGetContextStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientSendPreambleStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientSendPreambleStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ClientSendPreambleStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ClientSendPreambleStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpMessageReceiveFailed(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpMessageReceiveFailed(Action`1<OneStringsTemplateATraceData> value);
    public void add_TransactionScopeCreate(Action`1<Multidata54TemplateATraceData> value);
    public void remove_TransactionScopeCreate(Action`1<Multidata54TemplateATraceData> value);
    public void add_StreamedMessageReadByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void remove_StreamedMessageReadByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void add_StreamedMessageWrittenByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void remove_StreamedMessageWrittenByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void add_MessageWrittenAsynchronouslyByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MessageWrittenAsynchronouslyByEncoder(Action`1<OneStringsTemplateATraceData> value);
    public void add_BufferedAsyncWriteStart(Action`1<Multidata55TemplateATraceData> value);
    public void remove_BufferedAsyncWriteStart(Action`1<Multidata55TemplateATraceData> value);
    public void add_BufferedAsyncWriteStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_BufferedAsyncWriteStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_PipeSharedMemoryCreated(Action`1<Multidata60TemplateATraceData> value);
    public void remove_PipeSharedMemoryCreated(Action`1<Multidata60TemplateATraceData> value);
    public void add_NamedPipeCreated(Action`1<Multidata61TemplateATraceData> value);
    public void remove_NamedPipeCreated(Action`1<Multidata61TemplateATraceData> value);
    public void add_SignatureVerificationStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SignatureVerificationStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_SignatureVerificationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SignatureVerificationSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_WrappedKeyDecryptionStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WrappedKeyDecryptionStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_WrappedKeyDecryptionSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WrappedKeyDecryptionSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_EncryptedDataProcessingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_EncryptedDataProcessingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_EncryptedDataProcessingSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_EncryptedDataProcessingSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineProcessInboundRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineProcessInboundRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineBeginProcessInboundRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineBeginProcessInboundRequestStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineProcessInboundRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineProcessInboundRequestStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineFaulted(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineFaulted(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineTimeoutException(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineTimeoutException(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineProcessResponseStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineProcessResponseStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineBeginProcessResponseStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineBeginProcessResponseStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_HttpPipelineProcessResponseStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_HttpPipelineProcessResponseStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_WebSocketConnectionRequestSendStart(Action`1<Multidata62TemplateATraceData> value);
    public void remove_WebSocketConnectionRequestSendStart(Action`1<Multidata62TemplateATraceData> value);
    public void add_WebSocketConnectionRequestSendStop(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketConnectionRequestSendStop(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketConnectionAcceptStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WebSocketConnectionAcceptStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_WebSocketConnectionAccepted(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketConnectionAccepted(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketConnectionDeclined(Action`1<Multidata64TemplateATraceData> value);
    public void remove_WebSocketConnectionDeclined(Action`1<Multidata64TemplateATraceData> value);
    public void add_WebSocketConnectionFailed(Action`1<Multidata64TemplateATraceData> value);
    public void remove_WebSocketConnectionFailed(Action`1<Multidata64TemplateATraceData> value);
    public void add_WebSocketConnectionAborted(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketConnectionAborted(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketAsyncWriteStart(Action`1<Multidata65TemplateATraceData> value);
    public void remove_WebSocketAsyncWriteStart(Action`1<Multidata65TemplateATraceData> value);
    public void add_WebSocketAsyncWriteStop(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketAsyncWriteStop(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketAsyncReadStart(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketAsyncReadStart(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketAsyncReadStop(Action`1<Multidata65TemplateATraceData> value);
    public void remove_WebSocketAsyncReadStop(Action`1<Multidata65TemplateATraceData> value);
    public void add_WebSocketCloseSent(Action`1<Multidata66TemplateATraceData> value);
    public void remove_WebSocketCloseSent(Action`1<Multidata66TemplateATraceData> value);
    public void add_WebSocketCloseOutputSent(Action`1<Multidata66TemplateATraceData> value);
    public void remove_WebSocketCloseOutputSent(Action`1<Multidata66TemplateATraceData> value);
    public void add_WebSocketConnectionClosed(Action`1<Multidata63TemplateATraceData> value);
    public void remove_WebSocketConnectionClosed(Action`1<Multidata63TemplateATraceData> value);
    public void add_WebSocketCloseStatusReceived(Action`1<Multidata67TemplateATraceData> value);
    public void remove_WebSocketCloseStatusReceived(Action`1<Multidata67TemplateATraceData> value);
    public void add_WebSocketUseVersionFromClientWebSocketFactory(Action`1<Multidata68TemplateATraceData> value);
    public void remove_WebSocketUseVersionFromClientWebSocketFactory(Action`1<Multidata68TemplateATraceData> value);
    public void add_WebSocketCreateClientWebSocketWithFactory(Action`1<Multidata68TemplateATraceData> value);
    public void remove_WebSocketCreateClientWebSocketWithFactory(Action`1<Multidata68TemplateATraceData> value);
    public void add_InferredContractDescription(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_InferredContractDescription(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_InferredOperationDescription(Action`1<FourStringsTemplateATraceData> value);
    public void remove_InferredOperationDescription(Action`1<FourStringsTemplateATraceData> value);
    public void add_DuplicateCorrelationQuery(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_DuplicateCorrelationQuery(Action`1<TwoStringsTemplateATraceData> value);
    public void add_ServiceEndpointAdded(Action`1<FourStringsTemplateATraceData> value);
    public void remove_ServiceEndpointAdded(Action`1<FourStringsTemplateATraceData> value);
    public void add_TrackingProfileNotFound(Action`1<Multidata85TemplateATraceData> value);
    public void remove_TrackingProfileNotFound(Action`1<Multidata85TemplateATraceData> value);
    public void add_BufferOutOfOrderMessageNoInstance(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_BufferOutOfOrderMessageNoInstance(Action`1<TwoStringsTemplateATraceData> value);
    public void add_BufferOutOfOrderMessageNoBookmark(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_BufferOutOfOrderMessageNoBookmark(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_MaxPendingMessagesPerChannelExceeded(Action`1<Multidata84TemplateATraceData> value);
    public void remove_MaxPendingMessagesPerChannelExceeded(Action`1<Multidata84TemplateATraceData> value);
    public void add_XamlServicesLoadStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_XamlServicesLoadStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_XamlServicesLoadStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_XamlServicesLoadStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_CreateWorkflowServiceHostStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CreateWorkflowServiceHostStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_CreateWorkflowServiceHostStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_CreateWorkflowServiceHostStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_TransactedReceiveScopeEndCommitFailed(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_TransactedReceiveScopeEndCommitFailed(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_ServiceActivationStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceActivationStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceActivationStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ServiceActivationStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ServiceActivationAvailableMemory(Action`1<Multidata76TemplateATraceData> value);
    public void remove_ServiceActivationAvailableMemory(Action`1<Multidata76TemplateATraceData> value);
    public void add_ServiceActivationException(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_ServiceActivationException(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_RoutingServiceClosingClient(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceClosingClient(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceChannelFaulted(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceChannelFaulted(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceCompletingOneWay(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_RoutingServiceCompletingOneWay(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_RoutingServiceProcessingFailure(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_RoutingServiceProcessingFailure(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_RoutingServiceCreatingClientForEndpoint(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceCreatingClientForEndpoint(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceDisplayConfig(Action`1<FourStringsTemplateATraceData> value);
    public void remove_RoutingServiceDisplayConfig(Action`1<FourStringsTemplateATraceData> value);
    public void add_RoutingServiceCompletingTwoWay(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingServiceCompletingTwoWay(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingServiceMessageRoutedToEndpoints(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_RoutingServiceMessageRoutedToEndpoints(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_RoutingServiceConfigurationApplied(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingServiceConfigurationApplied(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingServiceProcessingMessage(Action`1<FiveStringsTemplateATraceData> value);
    public void remove_RoutingServiceProcessingMessage(Action`1<FiveStringsTemplateATraceData> value);
    public void add_RoutingServiceTransmittingMessage(Action`1<FourStringsTemplateATraceData> value);
    public void remove_RoutingServiceTransmittingMessage(Action`1<FourStringsTemplateATraceData> value);
    public void add_RoutingServiceCommittingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceCommittingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceDuplexCallbackException(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_RoutingServiceDuplexCallbackException(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_RoutingServiceMovedToBackup(Action`1<FourStringsTemplateATraceData> value);
    public void remove_RoutingServiceMovedToBackup(Action`1<FourStringsTemplateATraceData> value);
    public void add_RoutingServiceCreatingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceCreatingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceCloseFailed(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_RoutingServiceCloseFailed(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_RoutingServiceSendingResponse(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceSendingResponse(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceSendingFaultResponse(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceSendingFaultResponse(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceCompletingReceiveContext(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceCompletingReceiveContext(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceAbandoningReceiveContext(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceAbandoningReceiveContext(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceUsingExistingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceUsingExistingTransaction(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceTransmitFailed(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_RoutingServiceTransmitFailed(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_RoutingServiceFilterTableMatchStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingServiceFilterTableMatchStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingServiceFilterTableMatchStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingServiceFilterTableMatchStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingServiceAbortingChannel(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RoutingServiceAbortingChannel(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RoutingServiceHandledException(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_RoutingServiceHandledException(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_RoutingServiceTransmitSucceeded(Action`1<FourStringsTemplateATraceData> value);
    public void remove_RoutingServiceTransmitSucceeded(Action`1<FourStringsTemplateATraceData> value);
    public void add_TransportListenerSessionsReceived(Action`1<Multidata77TemplateATraceData> value);
    public void remove_TransportListenerSessionsReceived(Action`1<Multidata77TemplateATraceData> value);
    public void add_FailFastException(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_FailFastException(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_ServiceStartPipeError(Action`1<Multidata78TemplateATraceData> value);
    public void remove_ServiceStartPipeError(Action`1<Multidata78TemplateATraceData> value);
    public void add_DispatchSessionStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchSessionStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_PendingSessionQueueFull(Action`1<Multidata79TemplateATraceData> value);
    public void remove_PendingSessionQueueFull(Action`1<Multidata79TemplateATraceData> value);
    public void add_MessageQueueRegisterStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MessageQueueRegisterStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_MessageQueueRegisterAbort(Action`1<Multidata81TemplateATraceData> value);
    public void remove_MessageQueueRegisterAbort(Action`1<Multidata81TemplateATraceData> value);
    public void add_MessageQueueUnregisterSucceeded(Action`1<Multidata48TemplateATraceData> value);
    public void remove_MessageQueueUnregisterSucceeded(Action`1<Multidata48TemplateATraceData> value);
    public void add_MessageQueueRegisterFailed(Action`1<Multidata80TemplateATraceData> value);
    public void remove_MessageQueueRegisterFailed(Action`1<Multidata80TemplateATraceData> value);
    public void add_MessageQueueRegisterCompleted(Action`1<Multidata48TemplateATraceData> value);
    public void remove_MessageQueueRegisterCompleted(Action`1<Multidata48TemplateATraceData> value);
    public void add_MessageQueueDuplicatedSocketError(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MessageQueueDuplicatedSocketError(Action`1<OneStringsTemplateATraceData> value);
    public void add_MessageQueueDuplicatedSocketComplete(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MessageQueueDuplicatedSocketComplete(Action`1<OneStringsTemplateATraceData> value);
    public void add_TcpTransportListenerListeningStart(Action`1<Multidata48TemplateATraceData> value);
    public void remove_TcpTransportListenerListeningStart(Action`1<Multidata48TemplateATraceData> value);
    public void add_TcpTransportListenerListeningStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_TcpTransportListenerListeningStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_WebhostUnregisterProtocolFailed(Action`1<Multidata82TemplateATraceData> value);
    public void remove_WebhostUnregisterProtocolFailed(Action`1<Multidata82TemplateATraceData> value);
    public void add_WasCloseAllListenerChannelInstancesCompleted(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WasCloseAllListenerChannelInstancesCompleted(Action`1<OneStringsTemplateATraceData> value);
    public void add_WasCloseAllListenerChannelInstancesFailed(Action`1<Multidata82TemplateATraceData> value);
    public void remove_WasCloseAllListenerChannelInstancesFailed(Action`1<Multidata82TemplateATraceData> value);
    public void add_OpenListenerChannelInstanceFailed(Action`1<Multidata82TemplateATraceData> value);
    public void remove_OpenListenerChannelInstanceFailed(Action`1<Multidata82TemplateATraceData> value);
    public void add_WasConnected(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WasConnected(Action`1<OneStringsTemplateATraceData> value);
    public void add_WasDisconnected(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WasDisconnected(Action`1<OneStringsTemplateATraceData> value);
    public void add_PipeTransportListenerListeningStart(Action`1<Multidata48TemplateATraceData> value);
    public void remove_PipeTransportListenerListeningStart(Action`1<Multidata48TemplateATraceData> value);
    public void add_PipeTransportListenerListeningStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_PipeTransportListenerListeningStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchSessionSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchSessionSuccess(Action`1<OneStringsTemplateATraceData> value);
    public void add_DispatchSessionFailed(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DispatchSessionFailed(Action`1<OneStringsTemplateATraceData> value);
    public void add_WasConnectionTimedout(Action`1<OneStringsTemplateATraceData> value);
    public void remove_WasConnectionTimedout(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingTableLookupStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingTableLookupStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_RoutingTableLookupStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RoutingTableLookupStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_PendingSessionQueueRatio(Action`1<Multidata83TemplateATraceData> value);
    public void remove_PendingSessionQueueRatio(Action`1<Multidata83TemplateATraceData> value);
    public void add_EndSqlCommandExecute(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_EndSqlCommandExecute(Action`1<TwoStringsTemplateATraceData> value);
    public void add_StartSqlCommandExecute(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_StartSqlCommandExecute(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RenewLockSystemError(Action`1<OneStringsTemplateATraceData> value);
    public void remove_RenewLockSystemError(Action`1<OneStringsTemplateATraceData> value);
    public void add_FoundProcessingError(Action`1<ThreeStringsTemplateEATraceData> value);
    public void remove_FoundProcessingError(Action`1<ThreeStringsTemplateEATraceData> value);
    public void add_UnlockInstanceException(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_UnlockInstanceException(Action`1<TwoStringsTemplateATraceData> value);
    public void add_MaximumRetriesExceededForSqlCommand(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MaximumRetriesExceededForSqlCommand(Action`1<OneStringsTemplateATraceData> value);
    public void add_RetryingSqlCommandDueToSqlError(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_RetryingSqlCommandDueToSqlError(Action`1<TwoStringsTemplateATraceData> value);
    public void add_TimeoutOpeningSqlConnection(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_TimeoutOpeningSqlConnection(Action`1<TwoStringsTemplateATraceData> value);
    public void add_SqlExceptionCaught(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_SqlExceptionCaught(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_QueuingSqlRetry(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_QueuingSqlRetry(Action`1<TwoStringsTemplateATraceData> value);
    public void add_LockRetryTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void remove_LockRetryTimeout(Action`1<TwoStringsTemplateATraceData> value);
    public void add_RunnableInstancesDetectionError(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_RunnableInstancesDetectionError(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_InstanceLocksRecoveryError(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_InstanceLocksRecoveryError(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_MessageLogEventSizeExceeded(Action`1<OneStringsTemplateATraceData> value);
    public void remove_MessageLogEventSizeExceeded(Action`1<OneStringsTemplateATraceData> value);
    public void add_DiscoveryClientInClientChannelFailedToClose(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_DiscoveryClientInClientChannelFailedToClose(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_DiscoveryClientProtocolExceptionSuppressed(Action`1<TwoStringsTemplateEATraceData> value);
    public void remove_DiscoveryClientProtocolExceptionSuppressed(Action`1<TwoStringsTemplateEATraceData> value);
    public void add_DiscoveryClientReceivedMulticastSuppression(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DiscoveryClientReceivedMulticastSuppression(Action`1<OneStringsTemplateATraceData> value);
    public void add_DiscoveryMessageReceivedAfterOperationCompleted(Action`1<Multidata87TemplateATraceData> value);
    public void remove_DiscoveryMessageReceivedAfterOperationCompleted(Action`1<Multidata87TemplateATraceData> value);
    public void add_DiscoveryMessageWithInvalidContent(Action`1<Multidata88TemplateATraceData> value);
    public void remove_DiscoveryMessageWithInvalidContent(Action`1<Multidata88TemplateATraceData> value);
    public void add_DiscoveryMessageWithInvalidRelatesToOrOperationCompleted(Action`1<Multidata89TemplateATraceData> value);
    public void remove_DiscoveryMessageWithInvalidRelatesToOrOperationCompleted(Action`1<Multidata89TemplateATraceData> value);
    public void add_DiscoveryMessageWithInvalidReplyTo(Action`1<Multidata90TemplateATraceData> value);
    public void remove_DiscoveryMessageWithInvalidReplyTo(Action`1<Multidata90TemplateATraceData> value);
    public void add_DiscoveryMessageWithNoContent(Action`1<Multidata91TemplateATraceData> value);
    public void remove_DiscoveryMessageWithNoContent(Action`1<Multidata91TemplateATraceData> value);
    public void add_DiscoveryMessageWithNullMessageId(Action`1<Multidata91TemplateATraceData> value);
    public void remove_DiscoveryMessageWithNullMessageId(Action`1<Multidata91TemplateATraceData> value);
    public void add_DiscoveryMessageWithNullMessageSequence(Action`1<Multidata92TemplateATraceData> value);
    public void remove_DiscoveryMessageWithNullMessageSequence(Action`1<Multidata92TemplateATraceData> value);
    public void add_DiscoveryMessageWithNullRelatesTo(Action`1<Multidata92TemplateATraceData> value);
    public void remove_DiscoveryMessageWithNullRelatesTo(Action`1<Multidata92TemplateATraceData> value);
    public void add_DiscoveryMessageWithNullReplyTo(Action`1<Multidata90TemplateATraceData> value);
    public void remove_DiscoveryMessageWithNullReplyTo(Action`1<Multidata90TemplateATraceData> value);
    public void add_DuplicateDiscoveryMessage(Action`1<Multidata88TemplateATraceData> value);
    public void remove_DuplicateDiscoveryMessage(Action`1<Multidata88TemplateATraceData> value);
    public void add_EndpointDiscoverabilityDisabled(Action`1<Multidata93TemplateATraceData> value);
    public void remove_EndpointDiscoverabilityDisabled(Action`1<Multidata93TemplateATraceData> value);
    public void add_EndpointDiscoverabilityEnabled(Action`1<Multidata93TemplateATraceData> value);
    public void remove_EndpointDiscoverabilityEnabled(Action`1<Multidata93TemplateATraceData> value);
    public void add_FindInitiatedInDiscoveryClientChannel(Action`1<OneStringsTemplateATraceData> value);
    public void remove_FindInitiatedInDiscoveryClientChannel(Action`1<OneStringsTemplateATraceData> value);
    public void add_InnerChannelCreationFailed(Action`1<Multidata94TemplateEATraceData> value);
    public void remove_InnerChannelCreationFailed(Action`1<Multidata94TemplateEATraceData> value);
    public void add_InnerChannelOpenFailed(Action`1<Multidata94TemplateEATraceData> value);
    public void remove_InnerChannelOpenFailed(Action`1<Multidata94TemplateEATraceData> value);
    public void add_InnerChannelOpenSucceeded(Action`1<Multidata95TemplateATraceData> value);
    public void remove_InnerChannelOpenSucceeded(Action`1<Multidata95TemplateATraceData> value);
    public void add_SynchronizationContextReset(Action`1<Multidata96TemplateATraceData> value);
    public void remove_SynchronizationContextReset(Action`1<Multidata96TemplateATraceData> value);
    public void add_SynchronizationContextSetToNull(Action`1<OneStringsTemplateATraceData> value);
    public void remove_SynchronizationContextSetToNull(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCSerializeWithSurrogateStart(Action`1<Multidata97TemplateATraceData> value);
    public void remove_DCSerializeWithSurrogateStart(Action`1<Multidata97TemplateATraceData> value);
    public void add_DCSerializeWithSurrogateStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCSerializeWithSurrogateStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCDeserializeWithSurrogateStart(Action`1<Multidata97TemplateATraceData> value);
    public void remove_DCDeserializeWithSurrogateStart(Action`1<Multidata97TemplateATraceData> value);
    public void add_DCDeserializeWithSurrogateStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCDeserializeWithSurrogateStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_ImportKnownTypesStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ImportKnownTypesStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_ImportKnownTypesStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_ImportKnownTypesStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCResolverResolve(Action`1<Multidata33TemplateATraceData> value);
    public void remove_DCResolverResolve(Action`1<Multidata33TemplateATraceData> value);
    public void add_DCGenWriterStart(Action`1<Multidata98TemplateATraceData> value);
    public void remove_DCGenWriterStart(Action`1<Multidata98TemplateATraceData> value);
    public void add_DCGenWriterStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCGenWriterStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCGenReaderStart(Action`1<Multidata98TemplateATraceData> value);
    public void remove_DCGenReaderStart(Action`1<Multidata98TemplateATraceData> value);
    public void add_DCGenReaderStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCGenReaderStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCJsonGenReaderStart(Action`1<Multidata98TemplateATraceData> value);
    public void remove_DCJsonGenReaderStart(Action`1<Multidata98TemplateATraceData> value);
    public void add_DCJsonGenReaderStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCJsonGenReaderStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_DCJsonGenWriterStart(Action`1<Multidata98TemplateATraceData> value);
    public void remove_DCJsonGenWriterStart(Action`1<Multidata98TemplateATraceData> value);
    public void add_DCJsonGenWriterStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_DCJsonGenWriterStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_GenXmlSerializableStart(Action`1<Multidata99TemplateATraceData> value);
    public void remove_GenXmlSerializableStart(Action`1<Multidata99TemplateATraceData> value);
    public void add_GenXmlSerializableStop(Action`1<OneStringsTemplateATraceData> value);
    public void remove_GenXmlSerializableStop(Action`1<OneStringsTemplateATraceData> value);
    public void add_JsonMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_JsonMessageDecodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_JsonMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void remove_JsonMessageEncodingStart(Action`1<OneStringsTemplateATraceData> value);
    public void add_TokenValidationStarted(Action`1<Multidata103TemplateHATraceData> value);
    public void remove_TokenValidationStarted(Action`1<Multidata103TemplateHATraceData> value);
    public void add_TokenValidationSuccess(Action`1<Multidata103TemplateHATraceData> value);
    public void remove_TokenValidationSuccess(Action`1<Multidata103TemplateHATraceData> value);
    public void add_TokenValidationFailure(Action`1<Multidata102TemplateHATraceData> value);
    public void remove_TokenValidationFailure(Action`1<Multidata102TemplateHATraceData> value);
    public void add_GetIssuerNameSuccess(Action`1<Multidata101TemplateHATraceData> value);
    public void remove_GetIssuerNameSuccess(Action`1<Multidata101TemplateHATraceData> value);
    public void add_GetIssuerNameFailure(Action`1<Multidata100TemplateHATraceData> value);
    public void remove_GetIssuerNameFailure(Action`1<Multidata100TemplateHATraceData> value);
    public void add_FederationMessageProcessingStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_FederationMessageProcessingStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_FederationMessageProcessingSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_FederationMessageProcessingSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_FederationMessageCreationStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_FederationMessageCreationStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_FederationMessageCreationSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_FederationMessageCreationSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_SessionCookieReadingStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_SessionCookieReadingStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_SessionCookieReadingSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_SessionCookieReadingSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_PrincipalSettingFromSessionTokenStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_PrincipalSettingFromSessionTokenStarted(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_PrincipalSettingFromSessionTokenSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void remove_PrincipalSettingFromSessionTokenSuccess(Action`1<TwoStringsTemplateVATraceData> value);
    public void add_TrackingRecordDropped(Action`1<Multidata15TemplateATraceData> value);
    public void remove_TrackingRecordDropped(Action`1<Multidata15TemplateATraceData> value);
    public void add_TrackingRecordRaised(Action`1<ThreeStringsTemplateATraceData> value);
    public void remove_TrackingRecordRaised(Action`1<ThreeStringsTemplateATraceData> value);
    public void add_TrackingRecordTruncated(Action`1<Multidata15TemplateATraceData> value);
    public void remove_TrackingRecordTruncated(Action`1<Multidata15TemplateATraceData> value);
    public void add_TrackingDataExtracted(Action`1<Multidata16TemplateATraceData> value);
    public void remove_TrackingDataExtracted(Action`1<Multidata16TemplateATraceData> value);
    public void add_TrackingValueNotSerializable(Action`1<Multidata18TemplateATraceData> value);
    public void remove_TrackingValueNotSerializable(Action`1<Multidata18TemplateATraceData> value);
    public void add_MaxInstancesExceeded(Action`1<Multidata84TemplateATraceData> value);
    public void remove_MaxInstancesExceeded(Action`1<Multidata84TemplateATraceData> value);
    public void add_HttpHandlerPickedForUrl(Action`1<FourStringsTemplateATraceData> value);
    public void remove_HttpHandlerPickedForUrl(Action`1<FourStringsTemplateATraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetAcquireSessionBeginTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetAcquireSessionBeginTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetAcquireSessionBeginTraceData(Action`1<AspNetAcquireSessionBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetAcquireSessionBeginTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetAcquireSessionBeginTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetAcquireSessionEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetAcquireSessionEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetAcquireSessionEndTraceData(Action`1<AspNetAcquireSessionEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetAcquireSessionEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetAcquireSessionEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetAppDomainEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetAppDomainEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string DomainId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetAppDomainEnterTraceData(Action`1<AspNetAppDomainEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_DomainId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetAppDomainEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetAppDomainEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetCompileEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetCompileEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetCompileEnterTraceData(Action`1<AspNetCompileEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetCompileEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetCompileEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetCompileLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetCompileLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string Files { get; }
    public string Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetCompileLeaveTraceData(Action`1<AspNetCompileLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_Files();
    public string get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetCompileLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetCompileLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetEndHandlerTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetEndHandlerTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetEndHandlerTraceData(Action`1<AspNetEndHandlerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetEndHandlerTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetEndHandlerTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetGetAppDomainEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetGetAppDomainEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetGetAppDomainEnterTraceData(Action`1<AspNetGetAppDomainEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetGetAppDomainEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetGetAppDomainEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetGetAppDomainLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetGetAppDomainLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetGetAppDomainLeaveTraceData(Action`1<AspNetGetAppDomainLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetGetAppDomainLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetGetAppDomainLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetHttpHandlerEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetHttpHandlerEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetHttpHandlerEnterTraceData(Action`1<AspNetHttpHandlerEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetHttpHandlerEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetHttpHandlerEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetHttpHandlerLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetHttpHandlerLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetHttpHandlerLeaveTraceData(Action`1<AspNetHttpHandlerLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetHttpHandlerLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetHttpHandlerLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetMapHandlerEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetMapHandlerEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetMapHandlerEnterTraceData(Action`1<AspNetMapHandlerEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetMapHandlerEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetMapHandlerEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetMapHandlerLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetMapHandlerLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetMapHandlerLeaveTraceData(Action`1<AspNetMapHandlerLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetMapHandlerLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetMapHandlerLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagCriticalEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagCriticalEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagCriticalEventTraceData(Action`1<AspNetModuleDiagCriticalEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagCriticalEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagCriticalEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagErrorEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagErrorEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagErrorEventTraceData(Action`1<AspNetModuleDiagErrorEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagErrorEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagErrorEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagInfoEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagInfoEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagInfoEventTraceData(Action`1<AspNetModuleDiagInfoEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagInfoEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagInfoEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagResumeEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagResumeEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagResumeEventTraceData(Action`1<AspNetModuleDiagResumeEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagResumeEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagResumeEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagStartEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagStartEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagStartEventTraceData(Action`1<AspNetModuleDiagStartEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagStartEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagStartEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagStopEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagStopEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagStopEventTraceData(Action`1<AspNetModuleDiagStopEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagStopEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagStopEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagSuspendEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagSuspendEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagSuspendEventTraceData(Action`1<AspNetModuleDiagSuspendEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagSuspendEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagSuspendEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagTransferEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagTransferEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagTransferEventTraceData(Action`1<AspNetModuleDiagTransferEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagTransferEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagTransferEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagVerboseEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagVerboseEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagVerboseEventTraceData(Action`1<AspNetModuleDiagVerboseEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagVerboseEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagVerboseEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetModuleDiagWarningEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetModuleDiagWarningEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetModuleDiagWarningEventTraceData(Action`1<AspNetModuleDiagWarningEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetModuleDiagWarningEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetModuleDiagWarningEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageInitEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageInitEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageInitEnterTraceData(Action`1<AspNetPageInitEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageInitEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageInitEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageInitLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageInitLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageInitLeaveTraceData(Action`1<AspNetPageInitLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageInitLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageInitLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadEnterTraceData(Action`1<AspNetPageLoadEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadLeaveTraceData(Action`1<AspNetPageLoadLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadPostDataEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadPostDataEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadPostDataEnterTraceData(Action`1<AspNetPageLoadPostDataEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadPostDataEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadPostDataEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadPostDataLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadPostDataLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadPostDataLeaveTraceData(Action`1<AspNetPageLoadPostDataLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadPostDataLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadPostDataLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadViewstateEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadViewstateEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadViewstateEnterTraceData(Action`1<AspNetPageLoadViewstateEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadViewstateEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadViewstateEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageLoadViewstateLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageLoadViewstateLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageLoadViewstateLeaveTraceData(Action`1<AspNetPageLoadViewstateLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageLoadViewstateLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageLoadViewstateLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePostDataChangedEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePostDataChangedEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePostDataChangedEnterTraceData(Action`1<AspNetPagePostDataChangedEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePostDataChangedEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePostDataChangedEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePostDataChangedLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePostDataChangedLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePostDataChangedLeaveTraceData(Action`1<AspNetPagePostDataChangedLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePostDataChangedLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePostDataChangedLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePreInitEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePreInitEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePreInitEnterTraceData(Action`1<AspNetPagePreInitEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePreInitEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePreInitEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePreInitLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePreInitLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePreInitLeaveTraceData(Action`1<AspNetPagePreInitLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePreInitLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePreInitLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePreRenderEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePreRenderEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePreRenderEnterTraceData(Action`1<AspNetPagePreRenderEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePreRenderEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePreRenderEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPagePreRenderLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPagePreRenderLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPagePreRenderLeaveTraceData(Action`1<AspNetPagePreRenderLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPagePreRenderLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPagePreRenderLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageRaisePostbackEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageRaisePostbackEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageRaisePostbackEnterTraceData(Action`1<AspNetPageRaisePostbackEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageRaisePostbackEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageRaisePostbackEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageRaisePostbackLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageRaisePostbackLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageRaisePostbackLeaveTraceData(Action`1<AspNetPageRaisePostbackLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageRaisePostbackLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageRaisePostbackLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageRenderEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageRenderEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageRenderEnterTraceData(Action`1<AspNetPageRenderEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageRenderEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageRenderEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageRenderLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageRenderLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageRenderLeaveTraceData(Action`1<AspNetPageRenderLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageRenderLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageRenderLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageSaveViewstateEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageSaveViewstateEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageSaveViewstateEnterTraceData(Action`1<AspNetPageSaveViewstateEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageSaveViewstateEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageSaveViewstateEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageSaveViewstateLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageSaveViewstateLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageSaveViewstateLeaveTraceData(Action`1<AspNetPageSaveViewstateLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageSaveViewstateLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageSaveViewstateLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageTraceWarnEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageTraceWarnEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWarningMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageTraceWarnEventTraceData(Action`1<AspNetPageTraceWarnEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWarningMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageTraceWarnEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageTraceWarnEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPageTraceWriteEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPageTraceWriteEventTraceData> Action;
    public Guid ContextId { get; }
    public string Uri { get; }
    public string TraceWriteMsg { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPageTraceWriteEventTraceData(Action`1<AspNetPageTraceWriteEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Uri();
    public string get_TraceWriteMsg();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPageTraceWriteEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPageTraceWriteEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetParseEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetParseEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetParseEnterTraceData(Action`1<AspNetParseEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetParseEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetParseEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetParseLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetParseLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetParseLeaveTraceData(Action`1<AspNetParseLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetParseLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetParseLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPipelineModuleEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPipelineModuleEnterTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string ModuleName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPipelineModuleEnterTraceData(Action`1<AspNetPipelineModuleEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_ModuleName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPipelineModuleEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPipelineModuleEnterTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetPipelineModuleLeaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetPipelineModuleLeaveTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string ModuleName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetPipelineModuleLeaveTraceData(Action`1<AspNetPipelineModuleLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_ModuleName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetPipelineModuleLeaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetPipelineModuleLeaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetProfileBeginTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetProfileBeginTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetProfileBeginTraceData(Action`1<AspNetProfileBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetProfileBeginTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetProfileBeginTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetProfileEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetProfileEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string User { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetProfileEndTraceData(Action`1<AspNetProfileEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_User();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetProfileEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetProfileEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRequestDequeuedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRequestDequeuedTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRequestDequeuedTraceData(Action`1<AspNetRequestDequeuedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRequestDequeuedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRequestDequeuedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRequestQueuedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRequestQueuedTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRequestQueuedTraceData(Action`1<AspNetRequestQueuedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRequestQueuedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRequestQueuedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRoleManagerBeginTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRoleManagerBeginTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRoleManagerBeginTraceData(Action`1<AspNetRoleManagerBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRoleManagerBeginTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRoleManagerBeginTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRoleManagerEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRoleManagerEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string Provider { get; }
    public string User { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRoleManagerEndTraceData(Action`1<AspNetRoleManagerEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_Provider();
    public string get_User();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRoleManagerEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRoleManagerEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRoleManagerGetUserRolesTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRoleManagerGetUserRolesTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string Provider { get; }
    public string User { get; }
    public string Roles { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRoleManagerGetUserRolesTraceData(Action`1<AspNetRoleManagerGetUserRolesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_Provider();
    public string get_User();
    public string get_Roles();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRoleManagerGetUserRolesTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRoleManagerGetUserRolesTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetRoleManagerIsUserInRoleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetRoleManagerIsUserInRoleTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string Provider { get; }
    public string User { get; }
    public string Role { get; }
    public string Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetRoleManagerIsUserInRoleTraceData(Action`1<AspNetRoleManagerIsUserInRoleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_Provider();
    public string get_User();
    public string get_Role();
    public string get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetRoleManagerIsUserInRoleTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetRoleManagerIsUserInRoleTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetSessionStatePartitionEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetSessionStatePartitionEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string ResolverResult { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetSessionStatePartitionEndTraceData(Action`1<AspNetSessionStatePartitionEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_ResolverResult();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetSessionStatePartitionEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetSessionStatePartitionEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetSessionStatePartitionStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetSessionStatePartitionStartTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string ResolverType { get; }
    public string SessionId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetSessionStatePartitionStartTraceData(Action`1<AspNetSessionStatePartitionStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_ResolverType();
    public string get_SessionId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetSessionStatePartitionStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetSessionStatePartitionStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetStartHandlerTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetStartHandlerTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string HandlerName { get; }
    public string EventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetStartHandlerTraceData(Action`1<AspNetStartHandlerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_HandlerName();
    public string get_EventName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetStartHandlerTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetStartHandlerTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetStartTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string Method { get; }
    public string Path { get; }
    public string QueryString { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetStartTraceData(Action`1<AspNetStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_Method();
    public string get_Path();
    public string get_QueryString();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetStopTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetStopTraceData(Action`1<AspNetStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetStopTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEventID AspNetReqStartEventID;
    private static TraceEventID AspNetReqEndEventID;
    private static TraceEventID AspNetReqRequestQueuedEventID;
    private static TraceEventID AspNetReqRequestDequeuedEventID;
    private static TraceEventID AspNetReqGetAppDomainEnterEventID;
    private static TraceEventID AspNetReqGetAppDomainLeaveEventID;
    private static TraceEventID AspNetReqAppDomainEnterEventID;
    private static TraceEventID AspNetReqStartHandlerEventID;
    private static TraceEventID AspNetReqEndHandlerEventID;
    private static TraceEventID AspNetReqPipelineModuleEnterEventID;
    private static TraceEventID AspNetReqPipelineModuleLeaveEventID;
    private static TraceEventID AspNetReqMapHandlerEnterEventID;
    private static TraceEventID AspNetReqMapHandlerLeaveEventID;
    private static TraceEventID AspNetReqParseEnterEventID;
    private static TraceEventID AspNetReqParseLeaveEventID;
    private static TraceEventID AspNetReqCompileEnterEventID;
    private static TraceEventID AspNetReqCompileLeaveEventID;
    private static TraceEventID AspNetReqHttpHandlerEnterEventID;
    private static TraceEventID AspNetReqHttpHandlerLeaveEventID;
    private static TraceEventID AspNetReqSessionStatePartitionStartEventID;
    private static TraceEventID AspNetReqSessionStatePartitionEndEventID;
    private static TraceEventID AspNetReqPagePreInitEnterEventID;
    private static TraceEventID AspNetReqPagePreInitLeaveEventID;
    private static TraceEventID AspNetReqPageInitEnterEventID;
    private static TraceEventID AspNetReqPageInitLeaveEventID;
    private static TraceEventID AspNetReqPageLoadViewstateEnterEventID;
    private static TraceEventID AspNetReqPageLoadViewstateLeaveEventID;
    private static TraceEventID AspNetReqPageLoadPostDataEnterEventID;
    private static TraceEventID AspNetReqPageLoadPostDataLeaveEventID;
    private static TraceEventID AspNetReqPageLoadEnterEventID;
    private static TraceEventID AspNetReqPageLoadLeaveEventID;
    private static TraceEventID AspNetReqPagePostDataChangedEnterEventID;
    private static TraceEventID AspNetReqPagePostDataChangedLeaveEventID;
    private static TraceEventID AspNetReqPageRaisePostbackEnterEventID;
    private static TraceEventID AspNetReqPageRaisePostbackLeaveEventID;
    private static TraceEventID AspNetReqPagePreRenderEnterEventID;
    private static TraceEventID AspNetReqPagePreRenderLeaveEventID;
    private static TraceEventID AspNetReqPageSaveViewstateEnterEventID;
    private static TraceEventID AspNetReqPageSaveViewstateLeaveEventID;
    private static TraceEventID AspNetReqPageRenderEnterEventID;
    private static TraceEventID AspNetReqPageRenderLeaveEventID;
    private static TraceEventID AspNetReqSessionDataBeginEventID;
    private static TraceEventID AspNetReqSessionDataEndEventID;
    private static TraceEventID AspNetReqProfileBeginEventID;
    private static TraceEventID AspNetReqProfileEndEventID;
    private static TraceEventID AspNetReqRoleManagerIsUserInRoleEventID;
    private static TraceEventID AspNetReqRoleManagerGetUserRolesEventID;
    private static TraceEventID AspNetReqRoleManagerBeginEventID;
    private static TraceEventID AspNetReqRoleManagerEndEventID;
    private static TraceEventID AspNetReqWebEventRaiseStartEventID;
    private static TraceEventID AspNetReqWebEventRaiseEndEventID;
    private static TraceEventID AspNetReqWebEventDeliverStartEventID;
    private static TraceEventID AspNetReqWebEventDeliverEndEventID;
    private static TraceEventID AspNetReqTraceContextWarningEventID;
    private static TraceEventID AspNetReqTraceContextWriteEventID;
    private static TraceEventID AspNetReqDiagnosticTraceCriticalEventID;
    private static TraceEventID AspNetReqDiagnosticTraceErrorEventID;
    private static TraceEventID AspNetReqDiagnosticTraceWarningEventID;
    private static TraceEventID AspNetReqDiagnosticTraceInfoEventID;
    private static TraceEventID AspNetReqDiagnosticTraceVerboseEventID;
    private static TraceEventID AspNetReqDiagnosticTraceStartEventID;
    private static TraceEventID AspNetReqDiagnosticTraceStopEventID;
    private static TraceEventID AspNetReqDiagnosticTraceSuspendEventID;
    private static TraceEventID AspNetReqDiagnosticTraceResumeEventID;
    private static TraceEventID AspNetReqDiagnosticTraceTransferEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid AspNetReqTaskGuid;
    public AspNetTraceEventParser(TraceEventSource source);
    private static AspNetTraceEventParser();
    public void add_AspNetReqStart(Action`1<AspNetStartTraceData> value);
    public void remove_AspNetReqStart(Action`1<AspNetStartTraceData> value);
    public void add_AspNetReqStop(Action`1<AspNetStopTraceData> value);
    public void remove_AspNetReqStop(Action`1<AspNetStopTraceData> value);
    public void add_AspNetReqRequestQueued(Action`1<AspNetRequestQueuedTraceData> value);
    public void remove_AspNetReqRequestQueued(Action`1<AspNetRequestQueuedTraceData> value);
    public void add_AspNetReqRequestDequeued(Action`1<AspNetRequestDequeuedTraceData> value);
    public void remove_AspNetReqRequestDequeued(Action`1<AspNetRequestDequeuedTraceData> value);
    public void add_AspNetReqGetAppDomainEnter(Action`1<AspNetGetAppDomainEnterTraceData> value);
    public void remove_AspNetReqGetAppDomainEnter(Action`1<AspNetGetAppDomainEnterTraceData> value);
    public void add_AspNetReqGetAppDomainLeave(Action`1<AspNetGetAppDomainLeaveTraceData> value);
    public void remove_AspNetReqGetAppDomainLeave(Action`1<AspNetGetAppDomainLeaveTraceData> value);
    public void add_AspNetReqAppDomainEnter(Action`1<AspNetAppDomainEnterTraceData> value);
    public void remove_AspNetReqAppDomainEnter(Action`1<AspNetAppDomainEnterTraceData> value);
    public void add_AspNetReqStartHandler(Action`1<AspNetStartHandlerTraceData> value);
    public void remove_AspNetReqStartHandler(Action`1<AspNetStartHandlerTraceData> value);
    public void add_AspNetReqEndHandler(Action`1<AspNetEndHandlerTraceData> value);
    public void remove_AspNetReqEndHandler(Action`1<AspNetEndHandlerTraceData> value);
    public void add_AspNetReqPipelineModuleEnter(Action`1<AspNetPipelineModuleEnterTraceData> value);
    public void remove_AspNetReqPipelineModuleEnter(Action`1<AspNetPipelineModuleEnterTraceData> value);
    public void add_AspNetReqPipelineModuleLeave(Action`1<AspNetPipelineModuleLeaveTraceData> value);
    public void remove_AspNetReqPipelineModuleLeave(Action`1<AspNetPipelineModuleLeaveTraceData> value);
    public void add_AspNetReqMapHandlerEnter(Action`1<AspNetMapHandlerEnterTraceData> value);
    public void remove_AspNetReqMapHandlerEnter(Action`1<AspNetMapHandlerEnterTraceData> value);
    public void add_AspNetReqMapHandlerLeave(Action`1<AspNetMapHandlerLeaveTraceData> value);
    public void remove_AspNetReqMapHandlerLeave(Action`1<AspNetMapHandlerLeaveTraceData> value);
    public void add_AspNetReqParseEnter(Action`1<AspNetParseEnterTraceData> value);
    public void remove_AspNetReqParseEnter(Action`1<AspNetParseEnterTraceData> value);
    public void add_AspNetReqParseLeave(Action`1<AspNetParseLeaveTraceData> value);
    public void remove_AspNetReqParseLeave(Action`1<AspNetParseLeaveTraceData> value);
    public void add_AspNetReqCompileEnter(Action`1<AspNetCompileEnterTraceData> value);
    public void remove_AspNetReqCompileEnter(Action`1<AspNetCompileEnterTraceData> value);
    public void add_AspNetReqCompileLeave(Action`1<AspNetCompileLeaveTraceData> value);
    public void remove_AspNetReqCompileLeave(Action`1<AspNetCompileLeaveTraceData> value);
    public void add_AspNetReqHttpHandlerEnter(Action`1<AspNetHttpHandlerEnterTraceData> value);
    public void remove_AspNetReqHttpHandlerEnter(Action`1<AspNetHttpHandlerEnterTraceData> value);
    public void add_AspNetReqHttpHandlerLeave(Action`1<AspNetHttpHandlerLeaveTraceData> value);
    public void remove_AspNetReqHttpHandlerLeave(Action`1<AspNetHttpHandlerLeaveTraceData> value);
    public void add_AspNetReqSessionStatePartitionStart(Action`1<AspNetSessionStatePartitionStartTraceData> value);
    public void remove_AspNetReqSessionStatePartitionStart(Action`1<AspNetSessionStatePartitionStartTraceData> value);
    public void add_AspNetReqSessionStatePartitionEnd(Action`1<AspNetSessionStatePartitionEndTraceData> value);
    public void remove_AspNetReqSessionStatePartitionEnd(Action`1<AspNetSessionStatePartitionEndTraceData> value);
    public void add_AspNetReqPagePreInitEnter(Action`1<AspNetPagePreInitEnterTraceData> value);
    public void remove_AspNetReqPagePreInitEnter(Action`1<AspNetPagePreInitEnterTraceData> value);
    public void add_AspNetReqPagePreInitLeave(Action`1<AspNetPagePreInitLeaveTraceData> value);
    public void remove_AspNetReqPagePreInitLeave(Action`1<AspNetPagePreInitLeaveTraceData> value);
    public void add_AspNetReqPageInitEnter(Action`1<AspNetPageInitEnterTraceData> value);
    public void remove_AspNetReqPageInitEnter(Action`1<AspNetPageInitEnterTraceData> value);
    public void add_AspNetReqPageInitLeave(Action`1<AspNetPageInitLeaveTraceData> value);
    public void remove_AspNetReqPageInitLeave(Action`1<AspNetPageInitLeaveTraceData> value);
    public void add_AspNetReqPageLoadViewstateEnter(Action`1<AspNetPageLoadViewstateEnterTraceData> value);
    public void remove_AspNetReqPageLoadViewstateEnter(Action`1<AspNetPageLoadViewstateEnterTraceData> value);
    public void add_AspNetReqPageLoadViewstateLeave(Action`1<AspNetPageLoadViewstateLeaveTraceData> value);
    public void remove_AspNetReqPageLoadViewstateLeave(Action`1<AspNetPageLoadViewstateLeaveTraceData> value);
    public void add_AspNetReqPageLoadPostDataEnter(Action`1<AspNetPageLoadPostDataEnterTraceData> value);
    public void remove_AspNetReqPageLoadPostDataEnter(Action`1<AspNetPageLoadPostDataEnterTraceData> value);
    public void add_AspNetReqPageLoadPostDataLeave(Action`1<AspNetPageLoadPostDataLeaveTraceData> value);
    public void remove_AspNetReqPageLoadPostDataLeave(Action`1<AspNetPageLoadPostDataLeaveTraceData> value);
    public void add_AspNetReqPageLoadEnter(Action`1<AspNetPageLoadEnterTraceData> value);
    public void remove_AspNetReqPageLoadEnter(Action`1<AspNetPageLoadEnterTraceData> value);
    public void add_AspNetReqPageLoadLeave(Action`1<AspNetPageLoadLeaveTraceData> value);
    public void remove_AspNetReqPageLoadLeave(Action`1<AspNetPageLoadLeaveTraceData> value);
    public void add_AspNetReqPagePostDataChangedEnter(Action`1<AspNetPagePostDataChangedEnterTraceData> value);
    public void remove_AspNetReqPagePostDataChangedEnter(Action`1<AspNetPagePostDataChangedEnterTraceData> value);
    public void add_AspNetReqPagePostDataChangedLeave(Action`1<AspNetPagePostDataChangedLeaveTraceData> value);
    public void remove_AspNetReqPagePostDataChangedLeave(Action`1<AspNetPagePostDataChangedLeaveTraceData> value);
    public void add_AspNetReqPageRaisePostbackEnter(Action`1<AspNetPageRaisePostbackEnterTraceData> value);
    public void remove_AspNetReqPageRaisePostbackEnter(Action`1<AspNetPageRaisePostbackEnterTraceData> value);
    public void add_AspNetReqPageRaisePostbackLeave(Action`1<AspNetPageRaisePostbackLeaveTraceData> value);
    public void remove_AspNetReqPageRaisePostbackLeave(Action`1<AspNetPageRaisePostbackLeaveTraceData> value);
    public void add_AspNetReqPagePreRenderEnter(Action`1<AspNetPagePreRenderEnterTraceData> value);
    public void remove_AspNetReqPagePreRenderEnter(Action`1<AspNetPagePreRenderEnterTraceData> value);
    public void add_AspNetReqPagePreRenderLeave(Action`1<AspNetPagePreRenderLeaveTraceData> value);
    public void remove_AspNetReqPagePreRenderLeave(Action`1<AspNetPagePreRenderLeaveTraceData> value);
    public void add_AspNetReqPageSaveViewstateEnter(Action`1<AspNetPageSaveViewstateEnterTraceData> value);
    public void remove_AspNetReqPageSaveViewstateEnter(Action`1<AspNetPageSaveViewstateEnterTraceData> value);
    public void add_AspNetReqPageSaveViewstateLeave(Action`1<AspNetPageSaveViewstateLeaveTraceData> value);
    public void remove_AspNetReqPageSaveViewstateLeave(Action`1<AspNetPageSaveViewstateLeaveTraceData> value);
    public void add_AspNetReqPageRenderEnter(Action`1<AspNetPageRenderEnterTraceData> value);
    public void remove_AspNetReqPageRenderEnter(Action`1<AspNetPageRenderEnterTraceData> value);
    public void add_AspNetReqPageRenderLeave(Action`1<AspNetPageRenderLeaveTraceData> value);
    public void remove_AspNetReqPageRenderLeave(Action`1<AspNetPageRenderLeaveTraceData> value);
    public void add_AspNetReqSessionDataBegin(Action`1<AspNetAcquireSessionBeginTraceData> value);
    public void remove_AspNetReqSessionDataBegin(Action`1<AspNetAcquireSessionBeginTraceData> value);
    public void add_AspNetReqSessionDataEnd(Action`1<AspNetAcquireSessionEndTraceData> value);
    public void remove_AspNetReqSessionDataEnd(Action`1<AspNetAcquireSessionEndTraceData> value);
    public void add_AspNetReqProfileBegin(Action`1<AspNetProfileBeginTraceData> value);
    public void remove_AspNetReqProfileBegin(Action`1<AspNetProfileBeginTraceData> value);
    public void add_AspNetReqProfileEnd(Action`1<AspNetProfileEndTraceData> value);
    public void remove_AspNetReqProfileEnd(Action`1<AspNetProfileEndTraceData> value);
    public void add_AspNetReqRoleManagerIsUserInRole(Action`1<AspNetRoleManagerIsUserInRoleTraceData> value);
    public void remove_AspNetReqRoleManagerIsUserInRole(Action`1<AspNetRoleManagerIsUserInRoleTraceData> value);
    public void add_AspNetReqRoleManagerGetUserRoles(Action`1<AspNetRoleManagerGetUserRolesTraceData> value);
    public void remove_AspNetReqRoleManagerGetUserRoles(Action`1<AspNetRoleManagerGetUserRolesTraceData> value);
    public void add_AspNetReqRoleManagerBegin(Action`1<AspNetRoleManagerBeginTraceData> value);
    public void remove_AspNetReqRoleManagerBegin(Action`1<AspNetRoleManagerBeginTraceData> value);
    public void add_AspNetReqRoleManagerEnd(Action`1<AspNetRoleManagerEndTraceData> value);
    public void remove_AspNetReqRoleManagerEnd(Action`1<AspNetRoleManagerEndTraceData> value);
    public void add_AspNetReqWebEventRaiseStart(Action`1<AspNetWebEventRaiseStartTraceData> value);
    public void remove_AspNetReqWebEventRaiseStart(Action`1<AspNetWebEventRaiseStartTraceData> value);
    public void add_AspNetReqWebEventRaiseEnd(Action`1<AspNetWebEventRaiseEndTraceData> value);
    public void remove_AspNetReqWebEventRaiseEnd(Action`1<AspNetWebEventRaiseEndTraceData> value);
    public void add_AspNetReqWebEventDeliverStart(Action`1<AspNetWebEventDeliverStartTraceData> value);
    public void remove_AspNetReqWebEventDeliverStart(Action`1<AspNetWebEventDeliverStartTraceData> value);
    public void add_AspNetReqWebEventDeliverEnd(Action`1<AspNetWebEventDeliverEndTraceData> value);
    public void remove_AspNetReqWebEventDeliverEnd(Action`1<AspNetWebEventDeliverEndTraceData> value);
    public void add_AspNetReqTraceContextWarning(Action`1<AspNetPageTraceWarnEventTraceData> value);
    public void remove_AspNetReqTraceContextWarning(Action`1<AspNetPageTraceWarnEventTraceData> value);
    public void add_AspNetReqTraceContextWrite(Action`1<AspNetPageTraceWriteEventTraceData> value);
    public void remove_AspNetReqTraceContextWrite(Action`1<AspNetPageTraceWriteEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceCritical(Action`1<AspNetModuleDiagCriticalEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceCritical(Action`1<AspNetModuleDiagCriticalEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceError(Action`1<AspNetModuleDiagErrorEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceError(Action`1<AspNetModuleDiagErrorEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceWarning(Action`1<AspNetModuleDiagWarningEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceWarning(Action`1<AspNetModuleDiagWarningEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceInfo(Action`1<AspNetModuleDiagInfoEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceInfo(Action`1<AspNetModuleDiagInfoEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceVerbose(Action`1<AspNetModuleDiagVerboseEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceVerbose(Action`1<AspNetModuleDiagVerboseEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceStart(Action`1<AspNetModuleDiagStartEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceStart(Action`1<AspNetModuleDiagStartEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceStop(Action`1<AspNetModuleDiagStopEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceStop(Action`1<AspNetModuleDiagStopEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceSuspend(Action`1<AspNetModuleDiagSuspendEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceSuspend(Action`1<AspNetModuleDiagSuspendEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceResume(Action`1<AspNetModuleDiagResumeEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceResume(Action`1<AspNetModuleDiagResumeEventTraceData> value);
    public void add_AspNetReqDiagnosticTraceTransfer(Action`1<AspNetModuleDiagTransferEventTraceData> value);
    public void remove_AspNetReqDiagnosticTraceTransfer(Action`1<AspNetModuleDiagTransferEventTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetWebEventDeliverEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetWebEventDeliverEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetWebEventDeliverEndTraceData(Action`1<AspNetWebEventDeliverEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetWebEventDeliverEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetWebEventDeliverEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetWebEventDeliverStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetWebEventDeliverStartTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string ProviderName { get; }
    public string RuleName { get; }
    public string EventGroupName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetWebEventDeliverStartTraceData(Action`1<AspNetWebEventDeliverStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_ProviderName();
    public string get_RuleName();
    public string get_EventGroupName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetWebEventDeliverStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetWebEventDeliverStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetWebEventRaiseEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetWebEventRaiseEndTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetWebEventRaiseEndTraceData(Action`1<AspNetWebEventRaiseEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetWebEventRaiseEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetWebEventRaiseEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.AspNet.AspNetWebEventRaiseStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AspNetWebEventRaiseStartTraceData> Action;
    public long ConnID { get; }
    public Guid ContextId { get; }
    public string EventClassName { get; }
    public string EventCode { get; }
    public string EventDetailCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AspNetWebEventRaiseStartTraceData(Action`1<AspNetWebEventRaiseStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ConnID();
    public Guid get_ContextId();
    public string get_EventClassName();
    public string get_EventCode();
    public string get_EventDetailCode();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AspNetWebEventRaiseStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AspNetWebEventRaiseStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AppDomainAssemblyResolveHandlerInvokedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public string HandlerName { get; }
    public string ResultAssemblyName { get; }
    public string ResultAssemblyPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AppDomainAssemblyResolveHandlerInvokedTraceData(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public string get_HandlerName();
    public string get_ResultAssemblyName();
    public string get_ResultAssemblyPath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.AppDomainFlags : Enum {
    public int value__;
    public static AppDomainFlags None;
    public static AppDomainFlags Default;
    public static AppDomainFlags Executable;
    public static AppDomainFlags Shared;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AppDomainLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AppDomainLoadUnloadTraceData> Action;
    public long AppDomainID { get; }
    public AppDomainFlags AppDomainFlags { get; }
    public string AppDomainName { get; }
    public int AppDomainIndex { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AppDomainLoadUnloadTraceData(Action`1<AppDomainLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AppDomainID();
    public AppDomainFlags get_AppDomainFlags();
    public string get_AppDomainName();
    public int get_AppDomainIndex();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AppDomainLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AppDomainLoadUnloadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AppDomainMemAllocatedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AppDomainMemAllocatedTraceData> Action;
    public long AppDomainID { get; }
    public long Allocated { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AppDomainMemAllocatedTraceData(Action`1<AppDomainMemAllocatedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AppDomainID();
    public long get_Allocated();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AppDomainMemAllocatedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AppDomainMemAllocatedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AppDomainMemSurvivedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AppDomainMemSurvivedTraceData> Action;
    public long AppDomainID { get; }
    public long Survived { get; }
    public long ProcessSurvived { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AppDomainMemSurvivedTraceData(Action`1<AppDomainMemSurvivedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AppDomainID();
    public long get_Survived();
    public long get_ProcessSurvived();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AppDomainMemSurvivedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AppDomainMemSurvivedTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyFlags : Enum {
    public int value__;
    public static AssemblyFlags None;
    public static AssemblyFlags DomainNeutral;
    public static AssemblyFlags Dynamic;
    public static AssemblyFlags Native;
    public static AssemblyFlags Collectible;
    public static AssemblyFlags ReadyToRun;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyLoadContextResolvingHandlerInvokedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public string HandlerName { get; }
    public string AssemblyLoadContext { get; }
    public string ResultAssemblyName { get; }
    public string ResultAssemblyPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyLoadContextResolvingHandlerInvokedTraceData(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public string get_HandlerName();
    public string get_AssemblyLoadContext();
    public string get_ResultAssemblyName();
    public string get_ResultAssemblyPath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyLoadFromResolveHandlerInvokedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public bool IsTrackedLoad { get; }
    public string RequestingAssemblyPath { get; }
    public string ComputedRequestedAssemblyPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyLoadFromResolveHandlerInvokedTraceData(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public bool get_IsTrackedLoad();
    public string get_RequestingAssemblyPath();
    public string get_ComputedRequestedAssemblyPath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyLoadStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadStartTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    public string RequestingAssembly { get; }
    public string AssemblyLoadContext { get; }
    public string RequestingAssemblyLoadContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyLoadStartTraceData(Action`1<AssemblyLoadStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public string get_AssemblyPath();
    public string get_RequestingAssembly();
    public string get_AssemblyLoadContext();
    public string get_RequestingAssemblyLoadContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AssemblyLoadStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AssemblyLoadStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyLoadStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadStopTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    public string RequestingAssembly { get; }
    public string AssemblyLoadContext { get; }
    public string RequestingAssemblyLoadContext { get; }
    public bool Success { get; }
    public string ResultAssemblyName { get; }
    public string ResultAssemblyPath { get; }
    public bool Cached { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyLoadStopTraceData(Action`1<AssemblyLoadStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public string get_AssemblyPath();
    public string get_RequestingAssembly();
    public string get_AssemblyLoadContext();
    public string get_RequestingAssemblyLoadContext();
    public bool get_Success();
    public string get_ResultAssemblyName();
    public string get_ResultAssemblyPath();
    public bool get_Cached();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AssemblyLoadStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AssemblyLoadStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AssemblyLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadUnloadTraceData> Action;
    public long AssemblyID { get; }
    public long AppDomainID { get; }
    public AssemblyFlags AssemblyFlags { get; }
    public string FullyQualifiedAssemblyName { get; }
    public long BindingID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyLoadUnloadTraceData(Action`1<AssemblyLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AssemblyID();
    public long get_AppDomainID();
    public AssemblyFlags get_AssemblyFlags();
    public string get_FullyQualifiedAssemblyName();
    public long get_BindingID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AssemblyLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AssemblyLoadUnloadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.AuthenticodeVerificationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AuthenticodeVerificationTraceData> Action;
    public int VerificationFlags { get; }
    public int ErrorCode { get; }
    public string ModulePath { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AuthenticodeVerificationTraceData(Action`1<AuthenticodeVerificationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_VerificationFlags();
    public int get_ErrorCode();
    public string get_ModulePath();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AuthenticodeVerificationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AuthenticodeVerificationTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrRundownTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEventID ClrStackWalkEventID;
    private static TraceEventID MethodDCStartEventID;
    private static TraceEventID MethodDCStopEventID;
    private static TraceEventID MethodDCStartVerboseEventID;
    private static TraceEventID MethodDCStopVerboseEventID;
    private static TraceEventID MethodDCStartCompleteEventID;
    private static TraceEventID MethodDCStopCompleteEventID;
    private static TraceEventID MethodDCStartInitEventID;
    private static TraceEventID MethodDCStopInitEventID;
    private static TraceEventID LoaderDomainModuleDCStartEventID;
    private static TraceEventID LoaderDomainModuleDCStopEventID;
    private static TraceEventID LoaderModuleDCStartEventID;
    private static TraceEventID LoaderModuleDCStopEventID;
    private static TraceEventID LoaderAssemblyDCStartEventID;
    private static TraceEventID LoaderAssemblyDCStopEventID;
    private static TraceEventID LoaderAppDomainDCStartEventID;
    private static TraceEventID LoaderAppDomainDCStopEventID;
    private static TraceEventID LoaderThreadDCStopEventID;
    private static TraceEventID RuntimeStartEventID;
    private static TraceEventID CodeSymbolsRundownStartEventID;
    private static TraceEventID TieredCompilationSettingsDCStartEventID;
    private static TraceEventID ExecutionCheckpointDCEndEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid MethodTaskGuid;
    private static Guid LoaderTaskGuid;
    private static Guid ClrStackTaskGuid;
    private static Guid RuntimeTaskGuid;
    private static Guid CodeSymbolsRundownTaskGuid;
    private static Guid TieredCompilationRundownTaskGuid;
    private static Guid ExecutionCheckpointRundownTaskGuid;
    public ClrRundownTraceEventParser(TraceEventSource source);
    private static ClrRundownTraceEventParser();
    public void add_MethodILToNativeMapDCStart(Action`1<MethodILToNativeMapTraceData> value);
    public void remove_MethodILToNativeMapDCStart(Action`1<MethodILToNativeMapTraceData> value);
    public void add_MethodILToNativeMapDCStop(Action`1<MethodILToNativeMapTraceData> value);
    public void remove_MethodILToNativeMapDCStop(Action`1<MethodILToNativeMapTraceData> value);
    public void add_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void remove_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void add_MethodDCStart(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodDCStart(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodDCStop(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodDCStop(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodDCStartVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodDCStartVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodDCStopVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodDCStopVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodDCStartComplete(Action`1<DCStartEndTraceData> value);
    public void remove_MethodDCStartComplete(Action`1<DCStartEndTraceData> value);
    public void add_MethodDCStopComplete(Action`1<DCStartEndTraceData> value);
    public void remove_MethodDCStopComplete(Action`1<DCStartEndTraceData> value);
    public void add_MethodDCStartInit(Action`1<DCStartEndTraceData> value);
    public void remove_MethodDCStartInit(Action`1<DCStartEndTraceData> value);
    public void add_MethodDCStopInit(Action`1<DCStartEndTraceData> value);
    public void remove_MethodDCStopInit(Action`1<DCStartEndTraceData> value);
    public void add_LoaderDomainModuleDCStart(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void remove_LoaderDomainModuleDCStart(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void add_LoaderDomainModuleDCStop(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void remove_LoaderDomainModuleDCStop(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void add_LoaderModuleDCStart(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleDCStart(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderModuleDCStop(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleDCStop(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderAssemblyDCStart(Action`1<AssemblyLoadUnloadTraceData> value);
    public void remove_LoaderAssemblyDCStart(Action`1<AssemblyLoadUnloadTraceData> value);
    public void add_LoaderAssemblyDCStop(Action`1<AssemblyLoadUnloadTraceData> value);
    public void remove_LoaderAssemblyDCStop(Action`1<AssemblyLoadUnloadTraceData> value);
    public void add_LoaderAppDomainDCStart(Action`1<AppDomainLoadUnloadTraceData> value);
    public void remove_LoaderAppDomainDCStart(Action`1<AppDomainLoadUnloadTraceData> value);
    public void add_LoaderAppDomainDCStop(Action`1<AppDomainLoadUnloadTraceData> value);
    public void remove_LoaderAppDomainDCStop(Action`1<AppDomainLoadUnloadTraceData> value);
    public void add_LoaderThreadDCStop(Action`1<ThreadCreatedTraceData> value);
    public void remove_LoaderThreadDCStop(Action`1<ThreadCreatedTraceData> value);
    public void add_RuntimeStart(Action`1<RuntimeInformationTraceData> value);
    public void remove_RuntimeStart(Action`1<RuntimeInformationTraceData> value);
    public void add_CodeSymbolsRundownStart(Action`1<CodeSymbolsTraceData> value);
    public void remove_CodeSymbolsRundownStart(Action`1<CodeSymbolsTraceData> value);
    public void add_TieredCompilationRundownSettingsDCStart(Action`1<TieredCompilationSettingsTraceData> value);
    public void remove_TieredCompilationRundownSettingsDCStart(Action`1<TieredCompilationSettingsTraceData> value);
    public void add_ExecutionCheckpointRundownExecutionCheckpointDCEnd(Action`1<ExecutionCheckpointTraceData> value);
    public void remove_ExecutionCheckpointRundownExecutionCheckpointDCEnd(Action`1<ExecutionCheckpointTraceData> value);
    protected virtual string GetProviderName();
    private static TieredCompilationSettingsTraceData TieredCompilationSettingsDCStartTemplate(Action`1<TieredCompilationSettingsTraceData> action);
    private static ExecutionCheckpointTraceData ExecutionCheckpointDCEndTemplate(Action`1<ExecutionCheckpointTraceData> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrStackWalkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ClrStackWalkTraceData> Action;
    public int ClrInstanceID { get; }
    public int FrameCount { get; }
    internal Void* InstructionPointers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ClrStackWalkTraceData(Action`1<ClrStackWalkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_FrameCount();
    public ulong InstructionPointer(int index);
    internal Void* get_InstructionPointers();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ClrStackWalkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ClrStackWalkTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrStressTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEventID StressLogStartEventID;
    private static TraceEventID ClrStackWalkEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid StressLogTaskGuid;
    private static Guid ClrStackTaskGuid;
    public ClrStressTraceEventParser(TraceEventSource source);
    private static ClrStressTraceEventParser();
    public void add_StressLogStart(Action`1<StressLogTraceData> value);
    public void remove_StressLogStart(Action`1<StressLogTraceData> value);
    public void add_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void remove_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrThreadPoolSuspendTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ClrThreadPoolSuspendTraceData> Action;
    public int ClrThreadID { get; }
    public int CpuUtilization { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ClrThreadPoolSuspendTraceData(Action`1<ClrThreadPoolSuspendTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrThreadID();
    public int get_CpuUtilization();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ClrThreadPoolSuspendTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ClrThreadPoolSuspendTraceData> value);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrTraceEventParserState : object {
    private DeferedRegion lazyTypeIDToName;
    private HistoryDictionary`2<ulong, string> _typeIDToName;
    internal void SetTypeIDToName(int processID, ulong typeId, long timeQPC, string typeName);
    internal string TypeIDToName(int processID, ulong typeId, long timeQPC);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ClrWorkerThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ClrWorkerThreadTraceData> Action;
    public int WorkerThreadCount { get; }
    public int RetiredWorkerThreads { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ClrWorkerThreadTraceData(Action`1<ClrWorkerThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_WorkerThreadCount();
    public int get_RetiredWorkerThreads();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ClrWorkerThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ClrWorkerThreadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.CodeSymbolsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CodeSymbolsTraceData> m_target;
    public long ModuleId { get; }
    public int TotalChunks { get; }
    public int ChunkNumber { get; }
    public int ChunkLength { get; }
    public Byte[] Chunk { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CodeSymbolsTraceData(Action`1<CodeSymbolsTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ModuleId();
    public int get_TotalChunks();
    public int get_ChunkNumber();
    public int get_ChunkLength();
    public Byte[] get_Chunk();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<CodeSymbolsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<CodeSymbolsTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ContentionFlags : Enum {
    public int value__;
    public static ContentionFlags Managed;
    public static ContentionFlags Native;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ContentionStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ContentionStartTraceData> m_target;
    public ContentionFlags ContentionFlags { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ContentionStartTraceData(Action`1<ContentionStartTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ContentionFlags get_ContentionFlags();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ContentionStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ContentionStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ContentionStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ContentionStopTraceData> m_target;
    public ContentionFlags ContentionFlags { get; }
    public int ClrInstanceID { get; }
    public double DurationNs { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ContentionStopTraceData(Action`1<ContentionStopTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ContentionFlags get_ContentionFlags();
    public int get_ClrInstanceID();
    public double get_DurationNs();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ContentionStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ContentionStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.DestroyGCHandleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DestroyGCHandleTraceData> Action;
    public ulong HandleID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DestroyGCHandleTraceData(Action`1<DestroyGCHandleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_HandleID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DestroyGCHandleTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DestroyGCHandleTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.DomainModuleLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DomainModuleLoadUnloadTraceData> Action;
    public long ModuleID { get; }
    public long AssemblyID { get; }
    public long AppDomainID { get; }
    public ModuleFlags ModuleFlags { get; }
    public string ModuleILPath { get; }
    public string ModuleNativePath { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DomainModuleLoadUnloadTraceData(Action`1<DomainModuleLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ModuleID();
    public long get_AssemblyID();
    public long get_AppDomainID();
    public ModuleFlags get_ModuleFlags();
    public string get_ModuleILPath();
    public string get_ModuleNativePath();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DomainModuleLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DomainModuleLoadUnloadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.EventSourceTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EventSourceTraceData> m_target;
    public int EventID { get; }
    public string Name { get; }
    public string EventSourceName { get; }
    public string Payload { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EventSourceTraceData(Action`1<EventSourceTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_EventID();
    public string get_Name();
    public string get_EventSourceName();
    public string get_Payload();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EventSourceTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EventSourceTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ExceptionHandlingTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ExceptionHandlingTraceData> m_target;
    public long EntryEIP { get; }
    public long MethodID { get; }
    public string MethodName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ExceptionHandlingTraceData(Action`1<ExceptionHandlingTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_EntryEIP();
    public long get_MethodID();
    public string get_MethodName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ExceptionHandlingTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ExceptionHandlingTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ExceptionThrownFlags : Enum {
    public int value__;
    public static ExceptionThrownFlags None;
    public static ExceptionThrownFlags HasInnerException;
    public static ExceptionThrownFlags Nested;
    public static ExceptionThrownFlags ReThrown;
    public static ExceptionThrownFlags CorruptedState;
    public static ExceptionThrownFlags CLSCompliant;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ExceptionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ExceptionTraceData> Action;
    public string ExceptionType { get; }
    public string ExceptionMessage { get; }
    public ulong ExceptionEIP { get; }
    public int ExceptionHRESULT { get; }
    public ExceptionThrownFlags ExceptionFlags { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ExceptionTraceData(Action`1<ExceptionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ExceptionType();
    public string get_ExceptionMessage();
    public ulong get_ExceptionEIP();
    public int get_ExceptionHRESULT();
    public ExceptionThrownFlags get_ExceptionFlags();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ExceptionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ExceptionTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ExecutionCheckpointTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ExecutionCheckpointTraceData> Action;
    public int ClrInstanceID { get; }
    public string CheckpointName { get; }
    public long CheckpointTimestamp { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ExecutionCheckpointTraceData(Action`1<ExecutionCheckpointTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_CheckpointName();
    public long get_CheckpointTimestamp();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ExecutionCheckpointTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ExecutionCheckpointTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.FinalizeObjectTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FinalizeObjectTraceData> Action;
    private ClrTraceEventParserState state;
    public ulong TypeID { get; }
    public ulong ObjectID { get; }
    public int ClrInstanceID { get; }
    public string TypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FinalizeObjectTraceData(Action`1<FinalizeObjectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ClrTraceEventParserState state);
    public ulong get_TypeID();
    public ulong get_ObjectID();
    public int get_ClrInstanceID();
    public string get_TypeName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FinalizeObjectTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FinalizeObjectTraceData> value);
    protected internal virtual void SetState(object newState);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.gc_concurrent_compact_reason : Enum {
    public int value__;
    public static gc_concurrent_compact_reason concurrent_compact_high_frag;
    public static gc_concurrent_compact_reason concurrent_compact_c_mark;
    public static gc_concurrent_compact_reason max_concurrent_compat_reason;
    public static gc_concurrent_compact_reason not_specified;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.gc_heap_compact_reason : Enum {
    public int value__;
    public static gc_heap_compact_reason compact_low_ephemeral;
    public static gc_heap_compact_reason compact_high_frag;
    public static gc_heap_compact_reason compact_no_gaps;
    public static gc_heap_compact_reason compact_loh_forced;
    public static gc_heap_compact_reason compact_last_gc;
    public static gc_heap_compact_reason compact_induced_compacting;
    public static gc_heap_compact_reason compact_fragmented_gen0;
    public static gc_heap_compact_reason compact_high_mem_load;
    public static gc_heap_compact_reason compact_high_mem_frag;
    public static gc_heap_compact_reason compact_vhigh_mem_frag;
    public static gc_heap_compact_reason compact_no_gc_mode;
    public static gc_heap_compact_reason max_compact_reasons_count;
    public static gc_heap_compact_reason not_specified;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.gc_heap_expand_mechanism : Enum {
    public int value__;
    public static gc_heap_expand_mechanism expand_reuse_normal;
    public static gc_heap_expand_mechanism expand_reuse_bestfit;
    public static gc_heap_expand_mechanism expand_new_seg_ep;
    public static gc_heap_expand_mechanism expand_new_seg;
    public static gc_heap_expand_mechanism expand_no_memory;
    public static gc_heap_expand_mechanism expand_next_full_gc;
    public static gc_heap_expand_mechanism max_expand_mechanisms_count;
    public static gc_heap_expand_mechanism not_specified;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCAllocationKind : Enum {
    public int value__;
    public static GCAllocationKind Small;
    public static GCAllocationKind Large;
    public static GCAllocationKind Pinned;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCAllocationTickTraceData : TraceEvent {
    private static int OneKB;
    private static int OneMB;
    [CompilerGeneratedAttribute]
private Action`1<GCAllocationTickTraceData> Action;
    public int AllocationAmount { get; }
    public GCAllocationKind AllocationKind { get; }
    public int ClrInstanceID { get; }
    public long AllocationAmount64 { get; }
    public ulong TypeID { get; }
    public string TypeName { get; }
    public int HeapIndex { get; }
    public ulong Address { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCAllocationTickTraceData(Action`1<GCAllocationTickTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AllocationAmount();
    public GCAllocationKind get_AllocationKind();
    public int get_ClrInstanceID();
    public long get_AllocationAmount64();
    public ulong get_TypeID();
    public string get_TypeName();
    public int get_HeapIndex();
    public ulong get_Address();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public long GetAllocAmount(Boolean& seenBadAllocTick);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCAllocationTickTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCAllocationTickTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkEdgeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkEdgeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkEdgeTraceData(Action`1<GCBulkEdgeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkEdgeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkEdgeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkEdgeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkEdgeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong Target { get; }
    public int ReferencingField { get; }
    internal GCBulkEdgeValues(TraceEvent data, int baseOffset);
    public ulong get_Target();
    public int get_ReferencingField();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkMovedObjectRangesTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkMovedObjectRangesTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkMovedObjectRangesTraceData(Action`1<GCBulkMovedObjectRangesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkMovedObjectRangesValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkMovedObjectRangesTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkMovedObjectRangesTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkMovedObjectRangesValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong OldRangeBase { get; }
    public ulong NewRangeBase { get; }
    public ulong RangeLength { get; }
    internal GCBulkMovedObjectRangesValues(TraceEvent data, int baseOffset);
    public ulong get_OldRangeBase();
    public ulong get_NewRangeBase();
    public ulong get_RangeLength();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkNodeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkNodeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkNodeTraceData(Action`1<GCBulkNodeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkNodeValues Values(int index);
    public GCBulkNodeUnsafeNodes* UnsafeNodes(int arrayIdx, GCBulkNodeUnsafeNodes* buffer);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkNodeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkNodeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkNodeUnsafeNodes : ValueType {
    public ulong Address;
    public ulong Size;
    public ulong TypeID;
    public long EdgeCount;
}
internal class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkNodeUnsafeNodes32 : ValueType {
    public UInt32 Address;
    public ulong Size;
    public ulong TypeID;
    public long EdgeCount;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkNodeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong Address { get; }
    public ulong Size { get; }
    public ulong TypeID { get; }
    public long EdgeCount { get; }
    internal GCBulkNodeValues(TraceEvent data, int baseOffset);
    public ulong get_Address();
    public ulong get_Size();
    public ulong get_TypeID();
    public long get_EdgeCount();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRCWTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkRCWTraceData> Action;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkRCWTraceData(Action`1<GCBulkRCWTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkRCWValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkRCWTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkRCWTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRCWValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong ObjectID { get; }
    public ulong TypeID { get; }
    public ulong IUnknown { get; }
    public ulong VTable { get; }
    public int RefCount { get; }
    public GCRootRCWFlags Flags { get; }
    internal GCBulkRCWValues(TraceEvent data, int baseOffset);
    public ulong get_ObjectID();
    public ulong get_TypeID();
    public ulong get_IUnknown();
    public ulong get_VTable();
    public int get_RefCount();
    public GCRootRCWFlags get_Flags();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootCCWTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkRootCCWTraceData> Action;
    private int m_valueSize;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    private int ValueSize { get; }
    internal GCBulkRootCCWTraceData(Action`1<GCBulkRootCCWTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkRootCCWValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkRootCCWTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkRootCCWTraceData> value);
    private int get_ValueSize();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootCCWValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong GCRootID { get; }
    public ulong ObjectID { get; }
    public ulong TypeID { get; }
    public ulong IUnknown { get; }
    public int RefCount { get; }
    public int PeggedRefCount { get; }
    public GCRootCCWFlags Flags { get; }
    internal GCBulkRootCCWValues(TraceEvent data, int baseOffset);
    public ulong get_GCRootID();
    public ulong get_ObjectID();
    public ulong get_TypeID();
    public ulong get_IUnknown();
    public int get_RefCount();
    public int get_PeggedRefCount();
    public GCRootCCWFlags get_Flags();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootConditionalWeakTableElementEdgeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkRootConditionalWeakTableElementEdgeTraceData(Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkRootConditionalWeakTableElementEdgeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootConditionalWeakTableElementEdgeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong GCKeyNodeID { get; }
    public ulong GCValueNodeID { get; }
    public ulong GCRootID { get; }
    internal GCBulkRootConditionalWeakTableElementEdgeValues(TraceEvent data, int baseOffset);
    public ulong get_GCKeyNodeID();
    public ulong get_GCValueNodeID();
    public ulong get_GCRootID();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootEdgeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkRootEdgeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkRootEdgeTraceData(Action`1<GCBulkRootEdgeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkRootEdgeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkRootEdgeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkRootEdgeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootEdgeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong RootedNodeAddress { get; }
    public GCRootKind GCRootKind { get; }
    public GCRootFlags GCRootFlag { get; }
    public ulong GCRootID { get; }
    internal GCBulkRootEdgeValues(TraceEvent data, int baseOffset);
    public ulong get_RootedNodeAddress();
    public GCRootKind get_GCRootKind();
    public GCRootFlags get_GCRootFlag();
    public ulong get_GCRootID();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootStaticVarTraceData : TraceEvent {
    private ushort m_lastIdx;
    private ushort m_lastOffset;
    [CompilerGeneratedAttribute]
private Action`1<GCBulkRootStaticVarTraceData> Action;
    public int Count { get; }
    public long AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkRootStaticVarTraceData(Action`1<GCBulkRootStaticVarTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public long get_AppDomainID();
    public int get_ClrInstanceID();
    public GCBulkRootStaticVarValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    private int OffsetForIndexInValuesArray(int targetIdx);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkRootStaticVarTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkRootStaticVarTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkRootStaticVarValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong GCRootID { get; }
    public ulong ObjectID { get; }
    public ulong TypeID { get; }
    public GCRootStaticVarFlags Flags { get; }
    public string FieldName { get; }
    internal GCBulkRootStaticVarValues(TraceEvent data, int baseOffset);
    public ulong get_GCRootID();
    public ulong get_ObjectID();
    public ulong get_TypeID();
    public GCRootStaticVarFlags get_Flags();
    public string get_FieldName();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkSurvivingObjectRangesTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCBulkSurvivingObjectRangesTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkSurvivingObjectRangesTraceData(Action`1<GCBulkSurvivingObjectRangesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkSurvivingObjectRangesValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkSurvivingObjectRangesTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkSurvivingObjectRangesTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkSurvivingObjectRangesValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong RangeBase { get; }
    public ulong RangeLength { get; }
    internal GCBulkSurvivingObjectRangesValues(TraceEvent data, int baseOffset);
    public ulong get_RangeBase();
    public ulong get_RangeLength();
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkTypeTraceData : TraceEvent {
    private ushort m_lastIdx;
    private ushort m_lastOffset;
    [CompilerGeneratedAttribute]
private Action`1<GCBulkTypeTraceData> Action;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCBulkTypeTraceData(Action`1<GCBulkTypeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    public GCBulkTypeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    private int OffsetForIndexInValuesArray(int targetIdx);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCBulkTypeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCBulkTypeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCBulkTypeValues : ValueType {
    private TraceEvent m_data;
    private ushort m_baseOffset;
    private ushort m_typeParamCountOffset;
    public ulong TypeID { get; }
    public ulong ModuleID { get; }
    public int TypeNameID { get; }
    public TypeFlags Flags { get; }
    public byte CorElementType { get; }
    public string TypeName { get; }
    public int TypeParameterCount { get; }
    internal GCBulkTypeValues(TraceEvent data, int baseOffset);
    public ulong get_TypeID();
    public ulong get_ModuleID();
    public int get_TypeNameID();
    public TypeFlags get_Flags();
    public byte get_CorElementType();
    public string get_TypeName();
    public int get_TypeParameterCount();
    public ulong TypeParameterID(int index);
    public virtual string ToString();
    public StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCCreateConcurrentThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCCreateConcurrentThreadTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCCreateConcurrentThreadTraceData(Action`1<GCCreateConcurrentThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCCreateConcurrentThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCCreateConcurrentThreadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCCreateSegmentTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCCreateSegmentTraceData> Action;
    public ulong Address { get; }
    public ulong Size { get; }
    public GCSegmentType Type { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCCreateSegmentTraceData(Action`1<GCCreateSegmentTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Address();
    public ulong get_Size();
    public GCSegmentType get_Type();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCCreateSegmentTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCCreateSegmentTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCEndTraceData> Action;
    public int Count { get; }
    public int Depth { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCEndTraceData(Action`1<GCEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_Depth();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCEndTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCExpandMechanism : Enum {
    public UInt32 value__;
    public static GCExpandMechanism None;
    public static GCExpandMechanism ReuseNormal;
    public static GCExpandMechanism ReuseBestFit;
    public static GCExpandMechanism NewSegEphemeralPromotion;
    public static GCExpandMechanism NewSeg;
    public static GCExpandMechanism NoMemory;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCFinalizersEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCFinalizersEndTraceData> Action;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCFinalizersEndTraceData(Action`1<GCFinalizersEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCFinalizersEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCFinalizersEndTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCFreeSegmentTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCFreeSegmentTraceData> Action;
    public long Address { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCFreeSegmentTraceData(Action`1<GCFreeSegmentTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Address();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCFreeSegmentTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCFreeSegmentTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCGenerationRangeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCGenerationRangeTraceData> Action;
    public int Generation { get; }
    public ulong RangeStart { get; }
    public ulong RangeUsedLength { get; }
    public ulong RangeReservedLength { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCGenerationRangeTraceData(Action`1<GCGenerationRangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Generation();
    public ulong get_RangeStart();
    public ulong get_RangeUsedLength();
    public ulong get_RangeReservedLength();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCGenerationRangeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCGenerationRangeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCGlobalHeapHistoryTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCGlobalHeapHistoryTraceData> Action;
    public long FinalYoungestDesired { get; }
    public int NumHeaps { get; }
    public int CondemnedGeneration { get; }
    public int Gen0ReductionCount { get; }
    public GCReason Reason { get; }
    public GCGlobalMechanisms GlobalMechanisms { get; }
    public int ClrInstanceID { get; }
    public bool HasClrInstanceID { get; }
    public GCPauseMode PauseMode { get; }
    public bool HasPauseMode { get; }
    public int MemoryPressure { get; }
    public bool HasMemoryPressure { get; }
    public int CondemnReasons0 { get; }
    public bool HasCondemnReasons0 { get; }
    public int CondemnReasons1 { get; }
    public bool HasCondemnReasons1 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCGlobalHeapHistoryTraceData(Action`1<GCGlobalHeapHistoryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_FinalYoungestDesired();
    public int get_NumHeaps();
    public int get_CondemnedGeneration();
    public int get_Gen0ReductionCount();
    public GCReason get_Reason();
    public GCGlobalMechanisms get_GlobalMechanisms();
    public int get_ClrInstanceID();
    public bool get_HasClrInstanceID();
    public GCPauseMode get_PauseMode();
    public bool get_HasPauseMode();
    public int get_MemoryPressure();
    public bool get_HasMemoryPressure();
    public int get_CondemnReasons0();
    public bool get_HasCondemnReasons0();
    public int get_CondemnReasons1();
    public bool get_HasCondemnReasons1();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCGlobalHeapHistoryTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCGlobalHeapHistoryTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCGlobalMechanisms : Enum {
    public int value__;
    public static GCGlobalMechanisms None;
    public static GCGlobalMechanisms Concurrent;
    public static GCGlobalMechanisms Compaction;
    public static GCGlobalMechanisms Promotion;
    public static GCGlobalMechanisms Demotion;
    public static GCGlobalMechanisms CardBundles;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCHandleKind : Enum {
    public int value__;
    public static GCHandleKind WeakShort;
    public static GCHandleKind WeakLong;
    public static GCHandleKind Strong;
    public static GCHandleKind Pinned;
    public static GCHandleKind Variable;
    public static GCHandleKind RefCounted;
    public static GCHandleKind Dependent;
    public static GCHandleKind AsyncPinned;
    public static GCHandleKind SizedRef;
    public static GCHandleKind DependendAsyncPinned;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCHeapStatsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCHeapStatsTraceData> Action;
    public long TotalHeapSize { get; }
    public long TotalPromoted { get; }
    public int Depth { get; }
    public long GenerationSize0 { get; }
    public long TotalPromotedSize0 { get; }
    public long GenerationSize1 { get; }
    public long TotalPromotedSize1 { get; }
    public long GenerationSize2 { get; }
    public long TotalPromotedSize2 { get; }
    public long GenerationSize3 { get; }
    public long TotalPromotedSize3 { get; }
    public long FinalizationPromotedSize { get; }
    public long FinalizationPromotedCount { get; }
    public int PinnedObjectCount { get; }
    public int SinkBlockCount { get; }
    public int GCHandleCount { get; }
    public int ClrInstanceID { get; }
    public long GenerationSize4 { get; }
    public long TotalPromotedSize4 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCHeapStatsTraceData(Action`1<GCHeapStatsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_TotalHeapSize();
    public long get_TotalPromoted();
    public int get_Depth();
    public long get_GenerationSize0();
    public long get_TotalPromotedSize0();
    public long get_GenerationSize1();
    public long get_TotalPromotedSize1();
    public long get_GenerationSize2();
    public long get_TotalPromotedSize2();
    public long get_GenerationSize3();
    public long get_TotalPromotedSize3();
    public long get_FinalizationPromotedSize();
    public long get_FinalizationPromotedCount();
    public int get_PinnedObjectCount();
    public int get_SinkBlockCount();
    public int get_GCHandleCount();
    public int get_ClrInstanceID();
    public long get_GenerationSize4();
    public long get_TotalPromotedSize4();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCHeapStatsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCHeapStatsTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GcJoinID : Enum {
    public int value__;
    public static GcJoinID Restart;
    public static GcJoinID Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GcJoinTime : Enum {
    public int value__;
    public static GcJoinTime Start;
    public static GcJoinTime End;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCJoinTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCJoinTraceData> Action;
    public int Heap { get; }
    public GcJoinTime JoinTime { get; }
    public GcJoinType JoinType { get; }
    public int ClrInstanceID { get; }
    public int GCID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCJoinTraceData(Action`1<GCJoinTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Heap();
    public GcJoinTime get_JoinTime();
    public GcJoinType get_JoinType();
    public int get_ClrInstanceID();
    public int get_GCID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCJoinTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCJoinTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GcJoinType : Enum {
    public int value__;
    public static GcJoinType LastJoin;
    public static GcJoinType Join;
    public static GcJoinType Restart;
    public static GcJoinType FirstJoin;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCMarkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCMarkTraceData> Action;
    public int HeapNum { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCMarkTraceData(Action`1<GCMarkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_HeapNum();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCMarkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCMarkTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCMarkWithTypeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCMarkWithTypeTraceData> Action;
    public int HeapNum { get; }
    public int ClrInstanceID { get; }
    public int Type { get; }
    public long Promoted { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCMarkWithTypeTraceData(Action`1<GCMarkWithTypeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_HeapNum();
    public int get_ClrInstanceID();
    public int get_Type();
    public long get_Promoted();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCMarkWithTypeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCMarkWithTypeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCNoUserDataTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCNoUserDataTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCNoUserDataTraceData(Action`1<GCNoUserDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCNoUserDataTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCNoUserDataTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCPauseMode : Enum {
    public int value__;
    public static GCPauseMode Invalid;
    public static GCPauseMode Batch;
    public static GCPauseMode Interactive;
    public static GCPauseMode LowLatency;
    public static GCPauseMode SustainedLowLatency;
    public static GCPauseMode NoGC;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCPerHeapHistoryGenData : object {
    private int m_version;
    private Int64[] m_genDataArray;
    public long SizeBefore { get; }
    public long SizeAfter { get; }
    public long ObjSpaceBefore { get; }
    public bool HasObjSpaceBefore { get; }
    public long Fragmentation { get; }
    public long ObjSizeAfter { get; }
    public long FreeListSpaceBefore { get; }
    public bool HasFreeListSpaceBefore { get; }
    public long FreeObjSpaceBefore { get; }
    public bool HasFreeObjSpaceBefore { get; }
    public long FreeListSpaceAfter { get; }
    public bool HasFreeListSpaceAfter { get; }
    public long FreeObjSpaceAfter { get; }
    public bool HasFreeObjSpaceAfter { get; }
    public long In { get; }
    public long Out { get; }
    public long Budget { get; }
    public long SurvRate { get; }
    public long PinnedSurv { get; }
    public bool HasPinnedSurv { get; }
    public long NonePinnedSurv { get; }
    public bool HasNonePinnedSurv { get; }
    internal GCPerHeapHistoryGenData(int version, Int64[] genDataArray);
    public long get_SizeBefore();
    public long get_SizeAfter();
    public long get_ObjSpaceBefore();
    public bool get_HasObjSpaceBefore();
    public long get_Fragmentation();
    public long get_ObjSizeAfter();
    public long get_FreeListSpaceBefore();
    public bool get_HasFreeListSpaceBefore();
    public long get_FreeObjSpaceBefore();
    public bool get_HasFreeObjSpaceBefore();
    public long get_FreeListSpaceAfter();
    public bool get_HasFreeListSpaceAfter();
    public long get_FreeObjSpaceAfter();
    public bool get_HasFreeObjSpaceAfter();
    public long get_In();
    public long get_Out();
    public long get_Budget();
    public long get_SurvRate();
    public long get_PinnedSurv();
    public bool get_HasPinnedSurv();
    public long get_NonePinnedSurv();
    public bool get_HasNonePinnedSurv();
    public StringBuilder ToXml(Gens genName, StringBuilder sb);
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCPerHeapHistoryTraceData : TraceEvent {
    private int m_minorVersion;
    private static int maxGenData;
    private Delegate Action;
    public int ClrInstanceID { get; }
    public long FreeListAllocated { get; }
    public bool HasFreeListAllocated { get; }
    public long FreeListRejected { get; }
    public bool HasFreeListRejected { get; }
    public long EndOfSegAllocated { get; }
    public bool HasEndOfSegAllocated { get; }
    public long CondemnedAllocated { get; }
    public bool HasCondemnedAllocated { get; }
    public long PinnedAllocated { get; }
    public bool HasPinnedAllocated { get; }
    public long PinnedAllocatedAdvance { get; }
    public bool HasPinnedAllocatedAdvance { get; }
    public int RunningFreeListEfficiency { get; }
    public bool HasRunningFreeListEfficiency { get; }
    public int CondemnReasons0 { get; }
    public int CondemnReasons1 { get; }
    public bool HasCondemnReasons1 { get; }
    public gc_heap_compact_reason CompactMechanisms { get; }
    public gc_heap_expand_mechanism ExpandMechanisms { get; }
    public gc_concurrent_compact_reason ConcurrentCompactMechanisms { get; }
    public bool HasConcurrentCompactMechanisms { get; }
    public int HeapIndex { get; }
    public long ExtraGen0Commit { get; }
    public bool HasExtraGen0Commit { get; }
    public int Count { get; }
    public bool HasCount { get; }
    public int NumGenerations { get; }
    public int MemoryPressure { get; }
    public bool HasMemoryPressure { get; }
    public bool VersionRecognized { get; }
    public int MinorVersion { get; }
    protected internal Delegate Target { get; protected internal set; }
    public int EntriesInGenData { get; }
    public int SizeOfGenData { get; }
    public String[] PayloadNames { get; }
    internal GCPerHeapHistoryTraceData(Delegate action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_FreeListAllocated();
    public bool get_HasFreeListAllocated();
    public long get_FreeListRejected();
    public bool get_HasFreeListRejected();
    public long get_EndOfSegAllocated();
    public bool get_HasEndOfSegAllocated();
    public long get_CondemnedAllocated();
    public bool get_HasCondemnedAllocated();
    public long get_PinnedAllocated();
    public bool get_HasPinnedAllocated();
    public long get_PinnedAllocatedAdvance();
    public bool get_HasPinnedAllocatedAdvance();
    public int get_RunningFreeListEfficiency();
    public bool get_HasRunningFreeListEfficiency();
    public int get_CondemnReasons0();
    public int get_CondemnReasons1();
    public bool get_HasCondemnReasons1();
    public gc_heap_compact_reason get_CompactMechanisms();
    public gc_heap_expand_mechanism get_ExpandMechanisms();
    public gc_concurrent_compact_reason get_ConcurrentCompactMechanisms();
    public bool get_HasConcurrentCompactMechanisms();
    public int get_HeapIndex();
    public long get_ExtraGen0Commit();
    public bool get_HasExtraGen0Commit();
    public int get_Count();
    public bool get_HasCount();
    public int get_NumGenerations();
    public int get_MemoryPressure();
    public bool get_HasMemoryPressure();
    public GCPerHeapHistoryGenData GenData(Gens genNumber);
    public bool get_VersionRecognized();
    public int get_MinorVersion();
    private bool ParseMinorVersion(Int32& mversion);
    private int IndexOfSetBit(int pow2, int count, int notSpecifiedValue);
    private Int64[] GetIntPtrArray(int offset, int count);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public int get_EntriesInGenData();
    public int get_SizeOfGenData();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCReason : Enum {
    public int value__;
    public static GCReason AllocSmall;
    public static GCReason Induced;
    public static GCReason LowMemory;
    public static GCReason Empty;
    public static GCReason AllocLarge;
    public static GCReason OutOfSpaceSOH;
    public static GCReason OutOfSpaceLOH;
    public static GCReason InducedNotForced;
    public static GCReason Internal;
    public static GCReason InducedLowMemory;
    public static GCReason InducedCompacting;
    public static GCReason LowMemoryHost;
    public static GCReason PMFullGC;
    public static GCReason LowMemoryHostBlocking;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCRootCCWFlags : Enum {
    public int value__;
    public static GCRootCCWFlags None;
    public static GCRootCCWFlags Strong;
    public static GCRootCCWFlags XAMLObject;
    public static GCRootCCWFlags ExtendsComObject;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCRootFlags : Enum {
    public int value__;
    public static GCRootFlags None;
    public static GCRootFlags Pinning;
    public static GCRootFlags WeakRef;
    public static GCRootFlags Interior;
    public static GCRootFlags RefCounted;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCRootKind : Enum {
    public int value__;
    public static GCRootKind Stack;
    public static GCRootKind Finalizer;
    public static GCRootKind Handle;
    public static GCRootKind Older;
    public static GCRootKind SizedRef;
    public static GCRootKind Overflow;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCRootRCWFlags : Enum {
    public int value__;
    public static GCRootRCWFlags None;
    public static GCRootRCWFlags Duplicate;
    public static GCRootRCWFlags XAMLObject;
    public static GCRootRCWFlags ExtendsComObject;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCRootStaticVarFlags : Enum {
    public int value__;
    public static GCRootStaticVarFlags None;
    public static GCRootStaticVarFlags ThreadLocal;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCSampledObjectAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCSampledObjectAllocationTraceData> Action;
    public ulong Address { get; }
    public ulong TypeID { get; }
    public int ObjectCountForTypeSample { get; }
    public long TotalSizeForTypeSample { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCSampledObjectAllocationTraceData(Action`1<GCSampledObjectAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Address();
    public ulong get_TypeID();
    public int get_ObjectCountForTypeSample();
    public long get_TotalSizeForTypeSample();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCSampledObjectAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCSampledObjectAllocationTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCSegmentType : Enum {
    public int value__;
    public static GCSegmentType SmallObjectHeap;
    public static GCSegmentType LargeObjectHeap;
    public static GCSegmentType ReadOnlyHeap;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCStartTraceData> Action;
    public int Count { get; }
    public GCReason Reason { get; }
    public int Depth { get; }
    public GCType Type { get; }
    public int ClrInstanceID { get; }
    public long ClientSequenceNumber { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCStartTraceData(Action`1<GCStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public GCReason get_Reason();
    public int get_Depth();
    public GCType get_Type();
    public int get_ClrInstanceID();
    public long get_ClientSequenceNumber();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCStartTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCSuspendEEReason : Enum {
    public int value__;
    public static GCSuspendEEReason SuspendOther;
    public static GCSuspendEEReason SuspendForGC;
    public static GCSuspendEEReason SuspendForAppDomainShutdown;
    public static GCSuspendEEReason SuspendForCodePitching;
    public static GCSuspendEEReason SuspendForShutdown;
    public static GCSuspendEEReason SuspendForDebugger;
    public static GCSuspendEEReason SuspendForGCPrep;
    public static GCSuspendEEReason SuspendForDebuggerSweep;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCSuspendEETraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCSuspendEETraceData> Action;
    public GCSuspendEEReason Reason { get; }
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCSuspendEETraceData(Action`1<GCSuspendEETraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public GCSuspendEEReason get_Reason();
    public int get_Count();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCSuspendEETraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCSuspendEETraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCTerminateConcurrentThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCTerminateConcurrentThreadTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCTerminateConcurrentThreadTraceData(Action`1<GCTerminateConcurrentThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCTerminateConcurrentThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCTerminateConcurrentThreadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GCTriggeredTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCTriggeredTraceData> Action;
    public GCReason Reason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCTriggeredTraceData(Action`1<GCTriggeredTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public GCReason get_Reason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCTriggeredTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCTriggeredTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.GCType : Enum {
    public int value__;
    public static GCType NonConcurrentGC;
    public static GCType BackgroundGC;
    public static GCType ForegroundGC;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GenAwareBeginTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GenAwareBeginTraceData> m_target;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GenAwareBeginTraceData(Action`1<GenAwareBeginTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<GenAwareBeginTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<GenAwareBeginTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.GenAwareEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GenAwareEndTraceData> m_target;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GenAwareEndTraceData(Action`1<GenAwareEndTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<GenAwareEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<GenAwareEndTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.Gens : Enum {
    public int value__;
    public static Gens Gen0;
    public static Gens Gen1;
    public static Gens Gen2;
    public static Gens GenLargeObj;
    public static Gens GenPinObj;
    public static Gens MaxGenCount;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ILStubCacheHitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ILStubCacheHitTraceData> Action;
    public int ClrInstanceID { get; }
    public long ModuleID { get; }
    public long StubMethodID { get; }
    public int ManagedInteropMethodToken { get; }
    public string ManagedInteropMethodNamespace { get; }
    public string ManagedInteropMethodName { get; }
    public string ManagedInteropMethodSignature { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ILStubCacheHitTraceData(Action`1<ILStubCacheHitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_ModuleID();
    public long get_StubMethodID();
    public int get_ManagedInteropMethodToken();
    public string get_ManagedInteropMethodNamespace();
    public string get_ManagedInteropMethodName();
    public string get_ManagedInteropMethodSignature();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ILStubCacheHitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ILStubCacheHitTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ILStubGeneratedFlags : Enum {
    public int value__;
    public static ILStubGeneratedFlags None;
    public static ILStubGeneratedFlags ReverseInterop;
    public static ILStubGeneratedFlags ComInterop;
    public static ILStubGeneratedFlags NGenedStub;
    public static ILStubGeneratedFlags Delegate;
    public static ILStubGeneratedFlags VarArg;
    public static ILStubGeneratedFlags UnmanagedCallee;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ILStubGeneratedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ILStubGeneratedTraceData> Action;
    public int ClrInstanceID { get; }
    public long ModuleID { get; }
    public long StubMethodID { get; }
    public ILStubGeneratedFlags StubFlags { get; }
    public int ManagedInteropMethodToken { get; }
    public string ManagedInteropMethodNamespace { get; }
    public string ManagedInteropMethodName { get; }
    public string ManagedInteropMethodSignature { get; }
    public string NativeMethodSignature { get; }
    public string StubMethodSignature { get; }
    public string StubMethodILCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ILStubGeneratedTraceData(Action`1<ILStubGeneratedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_ModuleID();
    public long get_StubMethodID();
    public ILStubGeneratedFlags get_StubFlags();
    public int get_ManagedInteropMethodToken();
    public string get_ManagedInteropMethodNamespace();
    public string get_ManagedInteropMethodName();
    public string get_ManagedInteropMethodSignature();
    public string get_NativeMethodSignature();
    public string get_StubMethodSignature();
    public string get_StubMethodILCode();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ILStubGeneratedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ILStubGeneratedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.IOThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IOThreadTraceData> Action;
    public int IOThreadCount { get; }
    public int RetiredIOThreads { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IOThreadTraceData(Action`1<IOThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IOThreadCount();
    public int get_RetiredIOThreads();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<IOThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<IOThreadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.JitInstrumentationDataTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JitInstrumentationDataTraceData> m_target;
    public int ClrInstanceID { get; }
    public int MethodFlags { get; }
    public int DataSize { get; }
    public long MethodID { get; }
    public Byte[] Data { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JitInstrumentationDataTraceData(Action`1<JitInstrumentationDataTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_MethodFlags();
    public int get_DataSize();
    public long get_MethodID();
    public Byte[] get_Data();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<JitInstrumentationDataTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<JitInstrumentationDataTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.JitInstrumentationDataVerboseTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JitInstrumentationDataVerboseTraceData> m_target;
    public int ClrInstanceID { get; }
    public int MethodFlags { get; }
    public int DataSize { get; }
    public long MethodID { get; }
    public long ModuleID { get; }
    public int MethodToken { get; }
    public string MethodNamespace { get; }
    public string MethodName { get; }
    public string MethodSignature { get; }
    public Byte[] Data { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JitInstrumentationDataVerboseTraceData(Action`1<JitInstrumentationDataVerboseTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_MethodFlags();
    public int get_DataSize();
    public long get_MethodID();
    public long get_ModuleID();
    public int get_MethodToken();
    public string get_MethodNamespace();
    public string get_MethodName();
    public string get_MethodSignature();
    public Byte[] get_Data();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<JitInstrumentationDataVerboseTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<JitInstrumentationDataVerboseTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.KnownPathProbedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<KnownPathProbedTraceData> Action;
    public int ClrInstanceID { get; }
    public string FilePath { get; }
    public KnownPathSource PathSource { get; }
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal KnownPathProbedTraceData(Action`1<KnownPathProbedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_FilePath();
    public KnownPathSource get_PathSource();
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<KnownPathProbedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<KnownPathProbedTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.KnownPathSource : Enum {
    public int value__;
    public static KnownPathSource ApplicationAssemblies;
    public static KnownPathSource AppNativeImagePaths;
    public static KnownPathSource AppPaths;
    public static KnownPathSource PlatformResourceRoots;
    public static KnownPathSource SatelliteSubdirectory;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.MarkRootType : Enum {
    public int value__;
    public static MarkRootType MarkStack;
    public static MarkRootType MarkFQ;
    public static MarkRootType MarkHandles;
    public static MarkRootType MarkOlder;
    public static MarkRootType MarkSizedRef;
    public static MarkRootType MarkOverflow;
    public static MarkRootType MarkDependentHandles;
    public static MarkRootType MarkNewFQ;
    public static MarkRootType MarkSteal;
    public static MarkRootType MarkBGCRoots;
    public static MarkRootType MarkMax;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodDetailsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodDetailsTraceData> Action;
    public long MethodID { get; }
    public long TypeID { get; }
    public int MethodToken { get; }
    public int TypeParameterCount { get; }
    public long LoaderModuleID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodDetailsTraceData(Action`1<MethodDetailsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public long get_TypeID();
    public int get_MethodToken();
    public int get_TypeParameterCount();
    public long get_LoaderModuleID();
    public long TypeParameters(int arrayIndex);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodDetailsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodDetailsTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodFlags : Enum {
    public int value__;
    public static MethodFlags None;
    public static MethodFlags Dynamic;
    public static MethodFlags Generic;
    public static MethodFlags HasSharedGenericCode;
    public static MethodFlags Jitted;
    public static MethodFlags JitHelper;
    public static MethodFlags ProfilerRejectedPrecompiledCode;
    public static MethodFlags ReadyToRunRejectedPrecompiledCode;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodILToNativeMapTraceData : TraceEvent {
    private static int ILProlog;
    private static int ILEpilog;
    [CompilerGeneratedAttribute]
private Action`1<MethodILToNativeMapTraceData> Action;
    public long MethodID { get; }
    public long ReJITID { get; }
    public int MethodExtent { get; }
    public int CountOfMapEntries { get; }
    public int ClrInstanceID { get; }
    internal Int32* ILOffsets { get; }
    internal Int32* NativeOffsets { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodILToNativeMapTraceData(Action`1<MethodILToNativeMapTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public long get_ReJITID();
    public int get_MethodExtent();
    public int get_CountOfMapEntries();
    public int ILOffset(int index);
    public int NativeOffset(int index);
    public int get_ClrInstanceID();
    internal Int32* get_ILOffsets();
    internal Int32* get_NativeOffsets();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodILToNativeMapTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodILToNativeMapTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitInliningFailedAnsiTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitInliningFailedAnsiTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string InlinerNamespace { get; }
    public string InlinerName { get; }
    public string InlinerNameSignature { get; }
    public string InlineeNamespace { get; }
    public string InlineeName { get; }
    public string InlineeNameSignature { get; }
    public bool FailAlways { get; }
    public string FailReason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitInliningFailedAnsiTraceData(Action`1<MethodJitInliningFailedAnsiTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_InlinerNamespace();
    public string get_InlinerName();
    public string get_InlinerNameSignature();
    public string get_InlineeNamespace();
    public string get_InlineeName();
    public string get_InlineeNameSignature();
    public bool get_FailAlways();
    public string get_FailReason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitInliningFailedAnsiTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitInliningFailedAnsiTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitInliningFailedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitInliningFailedTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string InlinerNamespace { get; }
    public string InlinerName { get; }
    public string InlinerNameSignature { get; }
    public string InlineeNamespace { get; }
    public string InlineeName { get; }
    public string InlineeNameSignature { get; }
    public bool FailAlways { get; }
    public string FailReason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitInliningFailedTraceData(Action`1<MethodJitInliningFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_InlinerNamespace();
    public string get_InlinerName();
    public string get_InlinerNameSignature();
    public string get_InlineeNamespace();
    public string get_InlineeName();
    public string get_InlineeNameSignature();
    public bool get_FailAlways();
    public string get_FailReason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitInliningFailedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitInliningFailedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitInliningSucceededTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitInliningSucceededTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string InlinerNamespace { get; }
    public string InlinerName { get; }
    public string InlinerNameSignature { get; }
    public string InlineeNamespace { get; }
    public string InlineeName { get; }
    public string InlineeNameSignature { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitInliningSucceededTraceData(Action`1<MethodJitInliningSucceededTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_InlinerNamespace();
    public string get_InlinerName();
    public string get_InlinerNameSignature();
    public string get_InlineeNamespace();
    public string get_InlineeName();
    public string get_InlineeNameSignature();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitInliningSucceededTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitInliningSucceededTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitMemoryAllocatedForCodeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitMemoryAllocatedForCodeTraceData> Action;
    public long MethodID { get; }
    public long ModuleID { get; }
    public long JitHotCodeRequestSize { get; }
    public long JitRODataRequestSize { get; }
    public long AllocatedSizeForJitCode { get; }
    public int JitAllocFlag { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitMemoryAllocatedForCodeTraceData(Action`1<MethodJitMemoryAllocatedForCodeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public long get_ModuleID();
    public long get_JitHotCodeRequestSize();
    public long get_JitRODataRequestSize();
    public long get_AllocatedSizeForJitCode();
    public int get_JitAllocFlag();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitMemoryAllocatedForCodeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitMemoryAllocatedForCodeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitTailCallFailedAnsiTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitTailCallFailedAnsiTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string CallerNamespace { get; }
    public string CallerName { get; }
    public string CallerNameSignature { get; }
    public string CalleeNamespace { get; }
    public string CalleeName { get; }
    public string CalleeNameSignature { get; }
    public bool TailPrefix { get; }
    public string FailReason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitTailCallFailedAnsiTraceData(Action`1<MethodJitTailCallFailedAnsiTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_CallerNamespace();
    public string get_CallerName();
    public string get_CallerNameSignature();
    public string get_CalleeNamespace();
    public string get_CalleeName();
    public string get_CalleeNameSignature();
    public bool get_TailPrefix();
    public string get_FailReason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitTailCallFailedAnsiTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitTailCallFailedAnsiTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitTailCallFailedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitTailCallFailedTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string CallerNamespace { get; }
    public string CallerName { get; }
    public string CallerNameSignature { get; }
    public string CalleeNamespace { get; }
    public string CalleeName { get; }
    public string CalleeNameSignature { get; }
    public bool TailPrefix { get; }
    public string FailReason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitTailCallFailedTraceData(Action`1<MethodJitTailCallFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_CallerNamespace();
    public string get_CallerName();
    public string get_CallerNameSignature();
    public string get_CalleeNamespace();
    public string get_CalleeName();
    public string get_CalleeNameSignature();
    public bool get_TailPrefix();
    public string get_FailReason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitTailCallFailedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitTailCallFailedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJitTailCallSucceededTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJitTailCallSucceededTraceData> Action;
    public string MethodBeingCompiledNamespace { get; }
    public string MethodBeingCompiledName { get; }
    public string MethodBeingCompiledNameSignature { get; }
    public string CallerNamespace { get; }
    public string CallerName { get; }
    public string CallerNameSignature { get; }
    public string CalleeNamespace { get; }
    public string CalleeName { get; }
    public string CalleeNameSignature { get; }
    public bool TailPrefix { get; }
    public TailCallType TailCallType { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJitTailCallSucceededTraceData(Action`1<MethodJitTailCallSucceededTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodBeingCompiledNamespace();
    public string get_MethodBeingCompiledName();
    public string get_MethodBeingCompiledNameSignature();
    public string get_CallerNamespace();
    public string get_CallerName();
    public string get_CallerNameSignature();
    public string get_CalleeNamespace();
    public string get_CalleeName();
    public string get_CalleeNameSignature();
    public bool get_TailPrefix();
    public TailCallType get_TailCallType();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJitTailCallSucceededTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJitTailCallSucceededTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodJittingStartedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodJittingStartedTraceData> Action;
    public long MethodID { get; }
    public long ModuleID { get; }
    public int MethodToken { get; }
    public int MethodILSize { get; }
    public string MethodNamespace { get; }
    public string MethodName { get; }
    public string MethodSignature { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodJittingStartedTraceData(Action`1<MethodJittingStartedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public long get_ModuleID();
    public int get_MethodToken();
    public int get_MethodILSize();
    public string get_MethodNamespace();
    public string get_MethodName();
    public string get_MethodSignature();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodJittingStartedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodJittingStartedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodLoadUnloadTraceData : MethodLoadUnloadTraceDataBase {
    [CompilerGeneratedAttribute]
private Action`1<MethodLoadUnloadTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodLoadUnloadTraceData(Action`1<MethodLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodLoadUnloadTraceData> value);
}
public abstract class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodLoadUnloadTraceDataBase : TraceEvent {
    private static byte OptimizationTierShift;
    private static UInt32 OptimizationTierLowMask;
    private static byte MethodExtentShift;
    private static UInt32 MethodExtentLowMask;
    private static UInt32 OptimizationTierMask;
    private static UInt32 MethodExtentMask;
    private static UInt32 MethodFlagsMask;
    public long MethodID { get; }
    public long ModuleID { get; }
    public ulong MethodStartAddress { get; }
    public int MethodSize { get; }
    public int MethodToken { get; }
    public MethodFlags MethodFlags { get; }
    public bool IsDynamic { get; }
    public bool IsGeneric { get; }
    public bool IsJitted { get; }
    public OptimizationTier OptimizationTier { get; }
    public int MethodExtent { get; }
    internal MethodLoadUnloadTraceDataBase(int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public long get_ModuleID();
    public ulong get_MethodStartAddress();
    public int get_MethodSize();
    public int get_MethodToken();
    public MethodFlags get_MethodFlags();
    public bool get_IsDynamic();
    public bool get_IsGeneric();
    public bool get_IsJitted();
    public OptimizationTier get_OptimizationTier();
    public int get_MethodExtent();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.MethodLoadUnloadVerboseTraceData : MethodLoadUnloadTraceDataBase {
    [CompilerGeneratedAttribute]
private Action`1<MethodLoadUnloadVerboseTraceData> Action;
    public string MethodNamespace { get; }
    public string MethodName { get; }
    public string MethodSignature { get; }
    public int ClrInstanceID { get; }
    public long ReJITID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodLoadUnloadVerboseTraceData(Action`1<MethodLoadUnloadVerboseTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_MethodNamespace();
    public string get_MethodName();
    public string get_MethodSignature();
    public int get_ClrInstanceID();
    public long get_ReJITID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodLoadUnloadVerboseTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodLoadUnloadVerboseTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ModuleFlags : Enum {
    public int value__;
    public static ModuleFlags None;
    public static ModuleFlags DomainNeutral;
    public static ModuleFlags Native;
    public static ModuleFlags Dynamic;
    public static ModuleFlags Manifest;
    public static ModuleFlags IbcOptimized;
    public static ModuleFlags ReadyToRunModule;
    public static ModuleFlags PartialReadyToRunModule;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ModuleLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ModuleLoadUnloadTraceData> Action;
    public long ModuleID { get; }
    public long AssemblyID { get; }
    public ModuleFlags ModuleFlags { get; }
    public string ModuleILPath { get; }
    public string ModuleNativePath { get; }
    public int ClrInstanceID { get; }
    public Guid ManagedPdbSignature { get; }
    public int ManagedPdbAge { get; }
    public string ManagedPdbBuildPath { get; }
    public Guid NativePdbSignature { get; }
    public int NativePdbAge { get; }
    public string NativePdbBuildPath { get; }
    public string ModuleILFileName { get; }
    private int GetNativePdbSigStart { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ModuleLoadUnloadTraceData(Action`1<ModuleLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ModuleID();
    public long get_AssemblyID();
    public ModuleFlags get_ModuleFlags();
    public string get_ModuleILPath();
    public string get_ModuleNativePath();
    public int get_ClrInstanceID();
    public Guid get_ManagedPdbSignature();
    public int get_ManagedPdbAge();
    public string get_ManagedPdbBuildPath();
    public Guid get_NativePdbSignature();
    public int get_NativePdbAge();
    public string get_NativePdbBuildPath();
    public string get_ModuleILFileName();
    protected internal virtual void Dispatch();
    private int get_GetNativePdbSigStart();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ModuleLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ModuleLoadUnloadTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.OptimizationTier : Enum {
    public byte value__;
    public static OptimizationTier Unknown;
    public static OptimizationTier MinOptJitted;
    public static OptimizationTier Optimized;
    public static OptimizationTier QuickJitted;
    public static OptimizationTier OptimizedTier1;
    public static OptimizationTier OptimizedTier1OSR;
    public static OptimizationTier ReadyToRun;
    public static OptimizationTier PreJIT;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.PinObjectAtGCTimeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PinObjectAtGCTimeTraceData> Action;
    public ulong HandleID { get; }
    public ulong ObjectID { get; }
    public long ObjectSize { get; }
    public string TypeName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PinObjectAtGCTimeTraceData(Action`1<PinObjectAtGCTimeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_HandleID();
    public ulong get_ObjectID();
    public long get_ObjectSize();
    public string get_TypeName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PinObjectAtGCTimeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PinObjectAtGCTimeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.PinPlugAtGCTimeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PinPlugAtGCTimeTraceData> Action;
    public ulong PlugStart { get; }
    public ulong PlugEnd { get; }
    public ulong GapBeforeSize { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PinPlugAtGCTimeTraceData(Action`1<PinPlugAtGCTimeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_PlugStart();
    public ulong get_PlugEnd();
    public ulong get_GapBeforeSize();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PinPlugAtGCTimeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PinPlugAtGCTimeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.R2RGetEntryPointStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<R2RGetEntryPointStartTraceData> m_target;
    public long MethodID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal R2RGetEntryPointStartTraceData(Action`1<R2RGetEntryPointStartTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<R2RGetEntryPointStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<R2RGetEntryPointStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.R2RGetEntryPointTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<R2RGetEntryPointTraceData> m_target;
    public long MethodID { get; }
    public string MethodNamespace { get; }
    public string MethodName { get; }
    public string MethodSignature { get; }
    public long EntryPoint { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal R2RGetEntryPointTraceData(Action`1<R2RGetEntryPointTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_MethodID();
    public string get_MethodNamespace();
    public string get_MethodName();
    public string get_MethodSignature();
    public long get_EntryPoint();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<R2RGetEntryPointTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<R2RGetEntryPointTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ResolutionAttemptedResult : Enum {
    public int value__;
    public static ResolutionAttemptedResult Success;
    public static ResolutionAttemptedResult AssemblyNotFound;
    public static ResolutionAttemptedResult MismatchedAssemblyName;
    public static ResolutionAttemptedResult IncompatibleVersion;
    public static ResolutionAttemptedResult Failure;
    public static ResolutionAttemptedResult Exception;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ResolutionAttemptedStage : Enum {
    public int value__;
    public static ResolutionAttemptedStage FindInLoadContext;
    public static ResolutionAttemptedStage AssemblyLoadContextLoad;
    public static ResolutionAttemptedStage ApplicationAssemblies;
    public static ResolutionAttemptedStage DefaultAssemblyLoadContextFallback;
    public static ResolutionAttemptedStage ResolveSatelliteAssembly;
    public static ResolutionAttemptedStage AssemblyLoadContextResolvingEvent;
    public static ResolutionAttemptedStage AppDomainAssemblyResolveEvent;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ResolutionAttemptedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResolutionAttemptedTraceData> Action;
    public int ClrInstanceID { get; }
    public string AssemblyName { get; }
    public ResolutionAttemptedStage Stage { get; }
    public string AssemblyLoadContext { get; }
    public ResolutionAttemptedResult Result { get; }
    public string ResultAssemblyName { get; }
    public string ResultAssemblyPath { get; }
    public string ErrorMessage { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResolutionAttemptedTraceData(Action`1<ResolutionAttemptedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_AssemblyName();
    public ResolutionAttemptedStage get_Stage();
    public string get_AssemblyLoadContext();
    public ResolutionAttemptedResult get_Result();
    public string get_ResultAssemblyName();
    public string get_ResultAssemblyPath();
    public string get_ErrorMessage();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ResolutionAttemptedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ResolutionAttemptedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.RuntimeInformationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RuntimeInformationTraceData> Action;
    public int ClrInstanceID { get; }
    public RuntimeSku Sku { get; }
    public int BclMajorVersion { get; }
    public int BclMinorVersion { get; }
    public int BclBuildNumber { get; }
    public int BclQfeNumber { get; }
    public int VMMajorVersion { get; }
    public int VMMinorVersion { get; }
    public int VMBuildNumber { get; }
    public int VMQfeNumber { get; }
    public StartupFlags StartupFlags { get; }
    public StartupMode StartupMode { get; }
    public string CommandLine { get; }
    public Guid ComObjectGuid { get; }
    public string RuntimeDllPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RuntimeInformationTraceData(Action`1<RuntimeInformationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public RuntimeSku get_Sku();
    public int get_BclMajorVersion();
    public int get_BclMinorVersion();
    public int get_BclBuildNumber();
    public int get_BclQfeNumber();
    public int get_VMMajorVersion();
    public int get_VMMinorVersion();
    public int get_VMBuildNumber();
    public int get_VMQfeNumber();
    public StartupFlags get_StartupFlags();
    public StartupMode get_StartupMode();
    public string get_CommandLine();
    public Guid get_ComObjectGuid();
    public string get_RuntimeDllPath();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<RuntimeInformationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<RuntimeInformationTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.RuntimeSku : Enum {
    public int value__;
    public static RuntimeSku None;
    public static RuntimeSku DesktopClr;
    public static RuntimeSku CoreClr;
    public static RuntimeSku Mono;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.SetGCHandleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SetGCHandleTraceData> Action;
    public ulong HandleID { get; }
    public ulong ObjectID { get; }
    public GCHandleKind Kind { get; }
    public int Generation { get; }
    public long AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SetGCHandleTraceData(Action`1<SetGCHandleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_HandleID();
    public ulong get_ObjectID();
    public GCHandleKind get_Kind();
    public int get_Generation();
    public long get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SetGCHandleTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SetGCHandleTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.StartupFlags : Enum {
    public int value__;
    public static StartupFlags None;
    public static StartupFlags CONCURRENT_GC;
    public static StartupFlags LOADER_OPTIMIZATION_SINGLE_DOMAIN;
    public static StartupFlags LOADER_OPTIMIZATION_MULTI_DOMAIN;
    public static StartupFlags LOADER_SAFEMODE;
    public static StartupFlags LOADER_SETPREFERENCE;
    public static StartupFlags SERVER_GC;
    public static StartupFlags HOARD_GC_VM;
    public static StartupFlags SINGLE_VERSION_HOSTING_INTERFACE;
    public static StartupFlags LEGACY_IMPERSONATION;
    public static StartupFlags DISABLE_COMMITTHREADSTACK;
    public static StartupFlags ALWAYSFLOW_IMPERSONATION;
    public static StartupFlags TRIM_GC_COMMIT;
    public static StartupFlags ETW;
    public static StartupFlags SERVER_BUILD;
    public static StartupFlags ARM;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.StartupMode : Enum {
    public int value__;
    public static StartupMode None;
    public static StartupMode ManagedExe;
    public static StartupMode HostedClr;
    public static StartupMode IjwDll;
    public static StartupMode ComActivated;
    public static StartupMode Other;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.StressLogTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StressLogTraceData> Action;
    public int Facility { get; }
    public int LogLevel { get; }
    public string Message { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StressLogTraceData(Action`1<StressLogTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Facility();
    public int get_LogLevel();
    public string get_Message();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StressLogTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StressLogTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.StrongNameVerificationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StrongNameVerificationTraceData> Action;
    public int VerificationFlags { get; }
    public int ErrorCode { get; }
    public string FullyQualifiedAssemblyName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StrongNameVerificationTraceData(Action`1<StrongNameVerificationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_VerificationFlags();
    public int get_ErrorCode();
    public string get_FullyQualifiedAssemblyName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StrongNameVerificationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StrongNameVerificationTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.TailCallType : Enum {
    public int value__;
    public static TailCallType Unknown;
    public static TailCallType OptimizedTailCall;
    public static TailCallType RecursiveLoop;
    public static TailCallType HelperAssistedTailCall;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadAdjustmentReason : Enum {
    public int value__;
    public static ThreadAdjustmentReason Warmup;
    public static ThreadAdjustmentReason Initializing;
    public static ThreadAdjustmentReason RandomMove;
    public static ThreadAdjustmentReason ClimbingMove;
    public static ThreadAdjustmentReason ChangePoint;
    public static ThreadAdjustmentReason Stabilizing;
    public static ThreadAdjustmentReason Starvation;
    public static ThreadAdjustmentReason ThreadTimedOut;
    public static ThreadAdjustmentReason CooperativeBlocking;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadCreatedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadCreatedTraceData> Action;
    public long ManagedThreadID { get; }
    public long AppDomainID { get; }
    public int Flags { get; }
    public int ManagedThreadIndex { get; }
    public int OSThreadID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadCreatedTraceData(Action`1<ThreadCreatedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ManagedThreadID();
    public long get_AppDomainID();
    public int get_Flags();
    public int get_ManagedThreadIndex();
    public int get_OSThreadID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadCreatedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadCreatedTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadFlags : Enum {
    public int value__;
    public static ThreadFlags None;
    public static ThreadFlags GCSpecial;
    public static ThreadFlags Finalizer;
    public static ThreadFlags ThreadPoolWorker;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolIOWorkEnqueueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolIOWorkEnqueueTraceData> Action;
    public ulong NativeOverlapped { get; }
    public ulong Overlapped { get; }
    public bool MultiDequeues { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolIOWorkEnqueueTraceData(Action`1<ThreadPoolIOWorkEnqueueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NativeOverlapped();
    public ulong get_Overlapped();
    public bool get_MultiDequeues();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolIOWorkEnqueueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolIOWorkEnqueueTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolIOWorkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolIOWorkTraceData> Action;
    public ulong NativeOverlapped { get; }
    public ulong Overlapped { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolIOWorkTraceData(Action`1<ThreadPoolIOWorkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NativeOverlapped();
    public ulong get_Overlapped();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolIOWorkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolIOWorkTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolMinMaxThreadsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolMinMaxThreadsTraceData> Action;
    public int MinWorkerThreads { get; }
    public int MaxWorkerThreads { get; }
    public int MinIOCompletionThreads { get; }
    public int MaxIOCompletionThreads { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolMinMaxThreadsTraceData(Action`1<ThreadPoolMinMaxThreadsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_MinWorkerThreads();
    public int get_MaxWorkerThreads();
    public int get_MinIOCompletionThreads();
    public int get_MaxIOCompletionThreads();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolMinMaxThreadsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolMinMaxThreadsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkerThreadAdjustmentSampleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> Action;
    public double Throughput { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkerThreadAdjustmentSampleTraceData(Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public double get_Throughput();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkerThreadAdjustmentStatsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> Action;
    public double Duration { get; }
    public double Throughput { get; }
    public double ThreadWave { get; }
    public double ThroughputWave { get; }
    public double ThroughputErrorEstimate { get; }
    public double AverageThroughputErrorEstimate { get; }
    public double ThroughputRatio { get; }
    public double Confidence { get; }
    public double NewControlSetting { get; }
    public int NewThreadWaveMagnitude { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkerThreadAdjustmentStatsTraceData(Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public double get_Duration();
    public double get_Throughput();
    public double get_ThreadWave();
    public double get_ThroughputWave();
    public double get_ThroughputErrorEstimate();
    public double get_AverageThroughputErrorEstimate();
    public double get_ThroughputRatio();
    public double get_Confidence();
    public double get_NewControlSetting();
    public int get_NewThreadWaveMagnitude();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkerThreadAdjustmentTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> Action;
    public double AverageThroughput { get; }
    public int NewWorkerThreadCount { get; }
    public ThreadAdjustmentReason Reason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkerThreadAdjustmentTraceData(Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public double get_AverageThroughput();
    public int get_NewWorkerThreadCount();
    public ThreadAdjustmentReason get_Reason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkerThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkerThreadTraceData> Action;
    public int ActiveWorkerThreadCount { get; }
    public int RetiredWorkerThreadCount { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkerThreadTraceData(Action`1<ThreadPoolWorkerThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ActiveWorkerThreadCount();
    public int get_RetiredWorkerThreadCount();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkerThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkerThreadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkingThreadCountTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkingThreadCountTraceData> Action;
    public int Count { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkingThreadCountTraceData(Action`1<ThreadPoolWorkingThreadCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadPoolWorkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolWorkTraceData> Action;
    public ulong WorkID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolWorkTraceData(Action`1<ThreadPoolWorkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_WorkID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadPoolWorkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadPoolWorkTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadStartWorkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadStartWorkTraceData> Action;
    public ulong ThreadStartWorkID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadStartWorkTraceData(Action`1<ThreadStartWorkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ThreadStartWorkID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadStartWorkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadStartWorkTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.ThreadTerminatedOrTransitionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadTerminatedOrTransitionTraceData> Action;
    public long ManagedThreadID { get; }
    public long AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadTerminatedOrTransitionTraceData(Action`1<ThreadTerminatedOrTransitionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_ManagedThreadID();
    public long get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadTerminatedOrTransitionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadTerminatedOrTransitionTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationBackgroundJitStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TieredCompilationBackgroundJitStartTraceData> m_target;
    public int ClrInstanceID { get; }
    public int PendingMethodCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TieredCompilationBackgroundJitStartTraceData(Action`1<TieredCompilationBackgroundJitStartTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_PendingMethodCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TieredCompilationBackgroundJitStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TieredCompilationBackgroundJitStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationBackgroundJitStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TieredCompilationBackgroundJitStopTraceData> m_target;
    public int ClrInstanceID { get; }
    public int PendingMethodCount { get; }
    public int JittedMethodCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TieredCompilationBackgroundJitStopTraceData(Action`1<TieredCompilationBackgroundJitStopTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_PendingMethodCount();
    public int get_JittedMethodCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TieredCompilationBackgroundJitStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TieredCompilationBackgroundJitStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationEmptyTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TieredCompilationEmptyTraceData> m_target;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TieredCompilationEmptyTraceData(Action`1<TieredCompilationEmptyTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TieredCompilationEmptyTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TieredCompilationEmptyTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationResumeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TieredCompilationResumeTraceData> m_target;
    public int ClrInstanceID { get; }
    public int NewMethodCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TieredCompilationResumeTraceData(Action`1<TieredCompilationResumeTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public int get_NewMethodCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TieredCompilationResumeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TieredCompilationResumeTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationSettingsFlags : Enum {
    public UInt32 value__;
    public static TieredCompilationSettingsFlags None;
    public static TieredCompilationSettingsFlags QuickJit;
    public static TieredCompilationSettingsFlags QuickJitForLoops;
    public static TieredCompilationSettingsFlags TieredPGO;
    public static TieredCompilationSettingsFlags ReadyToRun;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TieredCompilationSettingsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TieredCompilationSettingsTraceData> m_target;
    public int ClrInstanceID { get; }
    public TieredCompilationSettingsFlags Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TieredCompilationSettingsTraceData(Action`1<TieredCompilationSettingsTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public TieredCompilationSettingsFlags get_Flags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TieredCompilationSettingsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TieredCompilationSettingsTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Clr.TypeFlags : Enum {
    public int value__;
    public static TypeFlags None;
    public static TypeFlags Delegate;
    public static TypeFlags Finalizable;
    public static TypeFlags ExternallyImplementedCOMObject;
    public static TypeFlags Array;
    public static TypeFlags ModuleBaseAddress;
    public static TypeFlags ArrayRankBit0;
    public static TypeFlags ArrayRankBit1;
    public static TypeFlags ArrayRankBit2;
    public static TypeFlags ArrayRankBit3;
    public static TypeFlags ArrayRankBit4;
    public static TypeFlags ArrayRankBit5;
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.Tracing.Parsers.Clr.TypeFlagsHelpers : object {
    [ExtensionAttribute]
public static int GetArrayRank(TypeFlags flags);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TypeLoadStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeLoadStartTraceData> m_target;
    public int TypeLoadStartID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeLoadStartTraceData(Action`1<TypeLoadStartTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TypeLoadStartID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeLoadStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeLoadStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.TypeLoadStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeLoadStopTraceData> m_target;
    public int TypeLoadStartID { get; }
    public int ClrInstanceID { get; }
    public int LoadLevel { get; }
    public long TypeID { get; }
    public string TypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeLoadStopTraceData(Action`1<TypeLoadStopTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TypeLoadStartID();
    public int get_ClrInstanceID();
    public int get_LoadLevel();
    public long get_TypeID();
    public string get_TypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeLoadStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeLoadStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Clr.YieldProcessorMeasurementTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<YieldProcessorMeasurementTraceData> m_target;
    public int ClrInstanceID { get; }
    public double NsPerYield { get; }
    public double EstablishedNsPerYield { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal YieldProcessorMeasurementTraceData(Action`1<YieldProcessorMeasurementTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public double get_NsPerYield();
    public double get_EstablishedNsPerYield();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<YieldProcessorMeasurementTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<YieldProcessorMeasurementTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCAllocWaitReason : Enum {
    public int value__;
    public static BGCAllocWaitReason GetLOHSeg;
    public static BGCAllocWaitReason AllocDuringSweep;
    public static BGCAllocWaitReason AllocDuringBGC;
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCAllocWaitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BGCAllocWaitTraceData> Action;
    public int Reason { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BGCAllocWaitTraceData(Action`1<BGCAllocWaitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Reason();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BGCAllocWaitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BGCAllocWaitTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCDrainMarkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BGCDrainMarkTraceData> Action;
    public long Objects { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BGCDrainMarkTraceData(Action`1<BGCDrainMarkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Objects();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BGCDrainMarkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BGCDrainMarkTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCOverflowTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BGCOverflowTraceData> Action;
    public long Min { get; }
    public long Max { get; }
    public long Objects { get; }
    public int IsLarge { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BGCOverflowTraceData(Action`1<BGCOverflowTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Min();
    public long get_Max();
    public long get_Objects();
    public int get_IsLarge();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BGCOverflowTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BGCOverflowTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCPhase : Enum {
    public int value__;
    public static BGCPhase BGC1stNonConcurrent;
    public static BGCPhase BGC1stConcurrent;
    public static BGCPhase BGC2ndNonConcurrent;
    public static BGCPhase BGC2ndConcurrent;
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BGCRevisitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BGCRevisitTraceData> Action;
    public long Pages { get; }
    public long Objects { get; }
    public int IsLarge { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BGCRevisitTraceData(Action`1<BGCRevisitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Pages();
    public long get_Objects();
    public int get_IsLarge();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BGCRevisitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BGCRevisitTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.BindingTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BindingTraceData> Action;
    public int AppDomainID { get; }
    public int LoadContextID { get; }
    public int FromLoaderCache { get; }
    public int DynamicLoad { get; }
    public string AssemblyCodebase { get; }
    public string AssemblyName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BindingTraceData(Action`1<BindingTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AppDomainID();
    public int get_LoadContextID();
    public int get_FromLoaderCache();
    public int get_DynamicLoad();
    public string get_AssemblyCodebase();
    public string get_AssemblyName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BindingTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BindingTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.CCWRefCountChangeAnsiTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CCWRefCountChangeAnsiTraceData> Action;
    public ulong HandleID { get; }
    public ulong ObjectID { get; }
    public ulong COMInterfacePointer { get; }
    public int NewRefCount { get; }
    public long AppDomainID { get; }
    public string ClassName { get; }
    public string NameSpace { get; }
    public string Operation { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CCWRefCountChangeAnsiTraceData(Action`1<CCWRefCountChangeAnsiTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_HandleID();
    public ulong get_ObjectID();
    public ulong get_COMInterfacePointer();
    public int get_NewRefCount();
    public long get_AppDomainID();
    public string get_ClassName();
    public string get_NameSpace();
    public string get_Operation();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CCWRefCountChangeAnsiTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CCWRefCountChangeAnsiTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.CCWRefCountChangeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CCWRefCountChangeTraceData> Action;
    public ulong HandleID { get; }
    public ulong ObjectID { get; }
    public ulong COMInterfacePointer { get; }
    public int NewRefCount { get; }
    public long AppDomainID { get; }
    public string ClassName { get; }
    public string NameSpace { get; }
    public string Operation { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CCWRefCountChangeTraceData(Action`1<CCWRefCountChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_HandleID();
    public ulong get_ObjectID();
    public ulong get_COMInterfacePointer();
    public int get_NewRefCount();
    public long get_AppDomainID();
    public string get_ClassName();
    public string get_NameSpace();
    public string get_Operation();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CCWRefCountChangeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CCWRefCountChangeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.DynamicTypeUseNoParametersPrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DynamicTypeUseNoParametersPrivateTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DynamicTypeUseNoParametersPrivateTraceData(Action`1<DynamicTypeUseNoParametersPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.DynamicTypeUsePrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DynamicTypeUsePrivateTraceData> Action;
    public string TypeName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DynamicTypeUsePrivateTraceData(Action`1<DynamicTypeUsePrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DynamicTypeUsePrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DynamicTypeUsePrivateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.DynamicTypeUsePrivateVarianceTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DynamicTypeUsePrivateVarianceTraceData> Action;
    public string TypeName { get; }
    public string InterfaceTypeName { get; }
    public string VariantInterfaceTypeName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DynamicTypeUsePrivateVarianceTraceData(Action`1<DynamicTypeUsePrivateVarianceTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_InterfaceTypeName();
    public string get_VariantInterfaceTypeName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.DynamicTypeUseStringAndIntPrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DynamicTypeUseStringAndIntPrivateTraceData> Action;
    public string TypeName { get; }
    public int Int1 { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DynamicTypeUseStringAndIntPrivateTraceData(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public int get_Int1();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.DynamicTypeUseTwoParametersPrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DynamicTypeUseTwoParametersPrivateTraceData> Action;
    public string TypeName { get; }
    public string SecondTypeName { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DynamicTypeUseTwoParametersPrivateTraceData(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_SecondTypeName();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.EvidenceGeneratedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EvidenceGeneratedTraceData> Action;
    public int Type { get; }
    public int AppDomain { get; }
    public string ILImage { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EvidenceGeneratedTraceData(Action`1<EvidenceGeneratedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Type();
    public int get_AppDomain();
    public string get_ILImage();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<EvidenceGeneratedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<EvidenceGeneratedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.FailFastTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FailFastTraceData> Action;
    public string FailFastUserMessage { get; }
    public ulong FailedEIP { get; }
    public int OSExitCode { get; }
    public int ClrExitCode { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FailFastTraceData(Action`1<FailFastTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FailFastUserMessage();
    public ulong get_FailedEIP();
    public int get_OSExitCode();
    public int get_ClrExitCode();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FailFastTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FailFastTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.FieldTransparencyCalculationResultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FieldTransparencyCalculationResultTraceData> Action;
    public string Field { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public bool IsCritical { get; }
    public bool IsTreatAsSafe { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FieldTransparencyCalculationResultTraceData(Action`1<FieldTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Field();
    public string get_Module();
    public int get_AppDomainID();
    public bool get_IsCritical();
    public bool get_IsTreatAsSafe();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FieldTransparencyCalculationResultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FieldTransparencyCalculationResultTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.FieldTransparencyCalculationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FieldTransparencyCalculationTraceData> Action;
    public string Field { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FieldTransparencyCalculationTraceData(Action`1<FieldTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Field();
    public string get_Module();
    public int get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FieldTransparencyCalculationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FieldTransparencyCalculationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.FinalizeObjectTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FinalizeObjectTraceData> Action;
    public ulong TypeID { get; }
    public ulong ObjectID { get; }
    public int ClrInstanceID { get; }
    public string TypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FinalizeObjectTraceData(Action`1<FinalizeObjectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_TypeID();
    public ulong get_ObjectID();
    public int get_ClrInstanceID();
    public string get_TypeName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FinalizeObjectTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FinalizeObjectTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.FusionMessageTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FusionMessageTraceData> Action;
    public int ClrInstanceID { get; }
    public bool Prepend { get; }
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FusionMessageTraceData(Action`1<FusionMessageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public bool get_Prepend();
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FusionMessageTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FusionMessageTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.GCDecisionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCDecisionTraceData> Action;
    public bool DoCompact { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCDecisionTraceData(Action`1<GCDecisionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public bool get_DoCompact();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCDecisionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCDecisionTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.GCFullNotifyTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCFullNotifyTraceData> Action;
    public int GenNumber { get; }
    public int IsAlloc { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCFullNotifyTraceData(Action`1<GCFullNotifyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_GenNumber();
    public int get_IsAlloc();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCFullNotifyTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCFullNotifyTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.GCOptimizedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCOptimizedTraceData> Action;
    public long DesiredAllocation { get; }
    public long NewAllocation { get; }
    public int GenerationNumber { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCOptimizedTraceData(Action`1<GCOptimizedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_DesiredAllocation();
    public long get_NewAllocation();
    public int get_GenerationNumber();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCOptimizedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCOptimizedTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.GCSettingsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCSettingsTraceData> Action;
    public long SegmentSize { get; }
    public long LargeObjectSegmentSize { get; }
    public bool ServerGC { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCSettingsTraceData(Action`1<GCSettingsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SegmentSize();
    public long get_LargeObjectSegmentSize();
    public bool get_ServerGC();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCSettingsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCSettingsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.LoaderHeapAllocRequestTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<LoaderHeapAllocRequestTraceData> Action;
    public ulong LoaderHeapPtr { get; }
    public ulong MemoryAddress { get; }
    public int RequestSize { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal LoaderHeapAllocRequestTraceData(Action`1<LoaderHeapAllocRequestTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_LoaderHeapPtr();
    public ulong get_MemoryAddress();
    public int get_RequestSize();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<LoaderHeapAllocRequestTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<LoaderHeapAllocRequestTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.MethodTransparencyCalculationResultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodTransparencyCalculationResultTraceData> Action;
    public string Method { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public bool IsCritical { get; }
    public bool IsTreatAsSafe { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodTransparencyCalculationResultTraceData(Action`1<MethodTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Method();
    public string get_Module();
    public int get_AppDomainID();
    public bool get_IsCritical();
    public bool get_IsTreatAsSafe();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodTransparencyCalculationResultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodTransparencyCalculationResultTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.MethodTransparencyCalculationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodTransparencyCalculationTraceData> Action;
    public string Method { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodTransparencyCalculationTraceData(Action`1<MethodTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Method();
    public string get_Module();
    public int get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodTransparencyCalculationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodTransparencyCalculationTraceData> value);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleRangeIBCType : Enum {
    public int value__;
    public static ModuleRangeIBCType None;
    public static ModuleRangeIBCType IBCUnprofiledSection;
    public static ModuleRangeIBCType IBCProfiledSection;
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleRangePrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ModuleRangePrivateTraceData> Action;
    public int ClrInstanceID { get; }
    public long ModuleID { get; }
    public int RangeBegin { get; }
    public int RangeSize { get; }
    public ModuleRangeType RangeType { get; }
    public ModuleRangeIBCType IBCType { get; }
    public ModuleRangeSectionType SectionType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ModuleRangePrivateTraceData(Action`1<ModuleRangePrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_ModuleID();
    public int get_RangeBegin();
    public int get_RangeSize();
    public ModuleRangeType get_RangeType();
    public ModuleRangeIBCType get_IBCType();
    public ModuleRangeSectionType get_SectionType();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ModuleRangePrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ModuleRangePrivateTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleRangeSectionType : Enum {
    public int value__;
    public static ModuleRangeSectionType ModuleSection;
    public static ModuleRangeSectionType EETableSection;
    public static ModuleRangeSectionType WriteDataSection;
    public static ModuleRangeSectionType WriteableDataSection;
    public static ModuleRangeSectionType DataSection;
    public static ModuleRangeSectionType RVAStaticsSection;
    public static ModuleRangeSectionType EEDataSection;
    public static ModuleRangeSectionType DelayLoadInfoTableEagerSection;
    public static ModuleRangeSectionType DelayLoadInfoTableSection;
    public static ModuleRangeSectionType EEReadonlyData;
    public static ModuleRangeSectionType ReadonlyData;
    public static ModuleRangeSectionType ClassSection;
    public static ModuleRangeSectionType CrossDomainInfoSection;
    public static ModuleRangeSectionType MethodDescSection;
    public static ModuleRangeSectionType MethodDescWriteableSection;
    public static ModuleRangeSectionType ExceptionSection;
    public static ModuleRangeSectionType InstrumentSection;
    public static ModuleRangeSectionType VirtualImportThunkSection;
    public static ModuleRangeSectionType ExternalMethodThunkSection;
    public static ModuleRangeSectionType HelperTableSection;
    public static ModuleRangeSectionType MethodPrecodeWriteableSection;
    public static ModuleRangeSectionType MethodPrecodeWriteSection;
    public static ModuleRangeSectionType MethodPrecodeSection;
    public static ModuleRangeSectionType Win32ResourcesSection;
    public static ModuleRangeSectionType HeaderSection;
    public static ModuleRangeSectionType MetadataSection;
    public static ModuleRangeSectionType DelayLoadInfoSection;
    public static ModuleRangeSectionType ImportTableSection;
    public static ModuleRangeSectionType CodeSection;
    public static ModuleRangeSectionType CodeHeaderSection;
    public static ModuleRangeSectionType CodeManagerSection;
    public static ModuleRangeSectionType UnwindDataSection;
    public static ModuleRangeSectionType RuntimeFunctionSection;
    public static ModuleRangeSectionType StubsSection;
    public static ModuleRangeSectionType StubDispatchDataSection;
    public static ModuleRangeSectionType ExternalMethodDataSection;
    public static ModuleRangeSectionType DelayLoadInfoDelayListSection;
    public static ModuleRangeSectionType ReadonlySharedSection;
    public static ModuleRangeSectionType ReadonlySection;
    public static ModuleRangeSectionType ILSection;
    public static ModuleRangeSectionType GCInfoSection;
    public static ModuleRangeSectionType ILMetadataSection;
    public static ModuleRangeSectionType ResourcesSection;
    public static ModuleRangeSectionType CompressedMapsSection;
    public static ModuleRangeSectionType DebugSection;
    public static ModuleRangeSectionType BaseRelocsSection;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleRangeType : Enum {
    public int value__;
    public static ModuleRangeType None;
    public static ModuleRangeType HotRange;
    public static ModuleRangeType WarmRange;
    public static ModuleRangeType ColdRange;
    public static ModuleRangeType HotColdSortedRange;
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleTransparencyCalculationResultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ModuleTransparencyCalculationResultTraceData> Action;
    public string Module { get; }
    public int AppDomainID { get; }
    public bool IsAllCritical { get; }
    public bool IsAllTransparent { get; }
    public bool IsTreatAsSafe { get; }
    public bool IsOpportunisticallyCritical { get; }
    public int SecurityRuleSet { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ModuleTransparencyCalculationResultTraceData(Action`1<ModuleTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Module();
    public int get_AppDomainID();
    public bool get_IsAllCritical();
    public bool get_IsAllTransparent();
    public bool get_IsTreatAsSafe();
    public bool get_IsOpportunisticallyCritical();
    public int get_SecurityRuleSet();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ModuleTransparencyCalculationResultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ModuleTransparencyCalculationResultTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.ModuleTransparencyCalculationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ModuleTransparencyCalculationTraceData> Action;
    public string Module { get; }
    public int AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ModuleTransparencyCalculationTraceData(Action`1<ModuleTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Module();
    public int get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ModuleTransparencyCalculationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ModuleTransparencyCalculationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.MulticoreJitMethodCodeReturnedPrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> Action;
    public int ClrInstanceID { get; }
    public long ModuleID { get; }
    public long MethodID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MulticoreJitMethodCodeReturnedPrivateTraceData(Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_ModuleID();
    public long get_MethodID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.MulticoreJitPrivateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MulticoreJitPrivateTraceData> Action;
    public int ClrInstanceID { get; }
    public string String1 { get; }
    public string String2 { get; }
    public int Int1 { get; }
    public int Int2 { get; }
    public int Int3 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MulticoreJitPrivateTraceData(Action`1<MulticoreJitPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public string get_String1();
    public string get_String2();
    public int get_Int1();
    public int get_Int2();
    public int get_Int3();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MulticoreJitPrivateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MulticoreJitPrivateTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.NGenBind : Enum {
    public int value__;
    public static NGenBind START_BIND;
    public static NGenBind NO_INDEX;
    public static NGenBind SYSTEM_ASSEMBLY_NOT_AVAILABLE;
    public static NGenBind NO_NATIVE_IMAGE;
    public static NGenBind REJECT_CONFIG_MASK;
    public static NGenBind FAIL;
    public static NGenBind INDEX_CORRUPTION;
    public static NGenBind REJECT_TIMESTAMP;
    public static NGenBind REJECT_NATIVEIMAGE_NOT_FOUND;
    public static NGenBind REJECT_IL_SIG;
    public static NGenBind REJECT_LOADER_EVAL_FAIL;
    public static NGenBind MISSING_FOUND;
    public static NGenBind REJECT_HOSTASM;
    public static NGenBind REJECT_IL_NOT_FOUND;
    public static NGenBind REJECT_APPBASE_NOT_FILE;
    public static NGenBind BIND_DEPEND_REJECT_REF_DEF_MISMATCH;
    public static NGenBind BIND_DEPEND_REJECT_NGEN_SIG;
    public static NGenBind APPLY_EXTERNAL_RELOCS_FAILED;
    public static NGenBind SYSTEM_ASSEMBLY_NATIVEIMAGE_NOT_AVAILABLE;
    public static NGenBind ASSEMBLY_HAS_DIFFERENT_GRANT;
    public static NGenBind ASSEMBLY_NOT_DOMAIN_NEUTRAL;
    public static NGenBind NATIVEIMAGE_VERSION_MISMATCH;
    public static NGenBind LOADFROM_NOT_ALLOWED;
    public static NGenBind DEPENDENCY_HAS_DIFFERENT_IDENTITY;
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.NgenBindEventTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<NgenBindEventTraceData> Action;
    public int ClrInstanceID { get; }
    public long BindingID { get; }
    public NGenBind ReasonCode { get; }
    public string AssemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal NgenBindEventTraceData(Action`1<NgenBindEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    public long get_BindingID();
    public NGenBind get_ReasonCode();
    public string get_AssemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<NgenBindEventTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<NgenBindEventTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.StartupTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StartupTraceData> Action;
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StartupTraceData(Action`1<StartupTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StartupTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StartupTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.TokenTransparencyCalculationResultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TokenTransparencyCalculationResultTraceData> Action;
    public int Token { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public bool IsCritical { get; }
    public bool IsTreatAsSafe { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TokenTransparencyCalculationResultTraceData(Action`1<TokenTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Token();
    public string get_Module();
    public int get_AppDomainID();
    public bool get_IsCritical();
    public bool get_IsTreatAsSafe();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TokenTransparencyCalculationResultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TokenTransparencyCalculationResultTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.TokenTransparencyCalculationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TokenTransparencyCalculationTraceData> Action;
    public int Token { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TokenTransparencyCalculationTraceData(Action`1<TokenTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Token();
    public string get_Module();
    public int get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TokenTransparencyCalculationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TokenTransparencyCalculationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.TypeTransparencyCalculationResultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeTransparencyCalculationResultTraceData> Action;
    public string Type { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public bool IsAllCritical { get; }
    public bool IsAllTransparent { get; }
    public bool IsCritical { get; }
    public bool IsTreatAsSafe { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeTransparencyCalculationResultTraceData(Action`1<TypeTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Type();
    public string get_Module();
    public int get_AppDomainID();
    public bool get_IsAllCritical();
    public bool get_IsAllTransparent();
    public bool get_IsCritical();
    public bool get_IsTreatAsSafe();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TypeTransparencyCalculationResultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TypeTransparencyCalculationResultTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivate.TypeTransparencyCalculationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeTransparencyCalculationTraceData> Action;
    public string Type { get; }
    public string Module { get; }
    public int AppDomainID { get; }
    public int ClrInstanceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeTransparencyCalculationTraceData(Action`1<TypeTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Type();
    public string get_Module();
    public int get_AppDomainID();
    public int get_ClrInstanceID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TypeTransparencyCalculationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TypeTransparencyCalculationTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.ClrPrivateTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    public static Guid NativeProviderGuid;
    private static TraceEventID GCDecisionEventID;
    private static TraceEventID GCSettingsEventID;
    private static TraceEventID GCOptimizedEventID;
    private static TraceEventID GCPerHeapHistoryEventID;
    private static TraceEventID GCGlobalHeapHistoryEventID;
    private static TraceEventID GCJoinEventID;
    private static TraceEventID GCMarkStackRootsEventID;
    private static TraceEventID GCMarkFinalizeQueueRootsEventID;
    private static TraceEventID GCMarkHandlesEventID;
    private static TraceEventID GCMarkCardsEventID;
    private static TraceEventID GCBGCStartEventID;
    private static TraceEventID GCBGC1stNonCondStopEventID;
    private static TraceEventID GCBGC1stConStopEventID;
    private static TraceEventID GCBGC2ndNonConStartEventID;
    private static TraceEventID GCBGC2ndNonConStopEventID;
    private static TraceEventID GCBGC2ndConStartEventID;
    private static TraceEventID GCBGC2ndConStopEventID;
    private static TraceEventID GCBGCPlanStopEventID;
    private static TraceEventID GCBGCSweepStopEventID;
    private static TraceEventID GCBGCDrainMarkEventID;
    private static TraceEventID GCBGCRevisitEventID;
    private static TraceEventID GCBGCOverflowEventID;
    private static TraceEventID GCBGCAllocWaitStartEventID;
    private static TraceEventID GCBGCAllocWaitStopEventID;
    private static TraceEventID GCFullNotifyEventID;
    private static TraceEventID StartupEEStartupStartEventID;
    private static TraceEventID StartupEEStartupStopEventID;
    private static TraceEventID StartupEEConfigSetupStartEventID;
    private static TraceEventID StartupEEConfigSetupStopEventID;
    private static TraceEventID StartupLoadSystemBasesStartEventID;
    private static TraceEventID StartupLoadSystemBasesStopEventID;
    private static TraceEventID StartupExecExeStartEventID;
    private static TraceEventID StartupExecExeStopEventID;
    private static TraceEventID StartupMainStartEventID;
    private static TraceEventID StartupMainStopEventID;
    private static TraceEventID StartupApplyPolicyStartEventID;
    private static TraceEventID StartupApplyPolicyStopEventID;
    private static TraceEventID StartupLdLibShFolderStartEventID;
    private static TraceEventID StartupLdLibShFolderStopEventID;
    private static TraceEventID StartupPrestubWorkerStartEventID;
    private static TraceEventID StartupPrestubWorkerStopEventID;
    private static TraceEventID StartupGetInstallationStartEventID;
    private static TraceEventID StartupGetInstallationStopEventID;
    private static TraceEventID StartupOpenHModuleStartEventID;
    private static TraceEventID StartupOpenHModuleStopEventID;
    private static TraceEventID StartupExplicitBindStartEventID;
    private static TraceEventID StartupExplicitBindStopEventID;
    private static TraceEventID StartupParseXmlStartEventID;
    private static TraceEventID StartupParseXmlStopEventID;
    private static TraceEventID StartupInitDefaultDomainStartEventID;
    private static TraceEventID StartupInitDefaultDomainStopEventID;
    private static TraceEventID StartupInitSecurityStartEventID;
    private static TraceEventID StartupInitSecurityStopEventID;
    private static TraceEventID StartupAllowBindingRedirsStartEventID;
    private static TraceEventID StartupAllowBindingRedirsStopEventID;
    private static TraceEventID StartupEEConfigSyncStartEventID;
    private static TraceEventID StartupEEConfigSyncStopEventID;
    private static TraceEventID StartupBindingStartEventID;
    private static TraceEventID StartupBindingStopEventID;
    private static TraceEventID StartupLoaderCatchCallStartEventID;
    private static TraceEventID StartupLoaderCatchCallStopEventID;
    private static TraceEventID StartupFusionInitStartEventID;
    private static TraceEventID StartupFusionInitStopEventID;
    private static TraceEventID StartupFusionAppCtxStartEventID;
    private static TraceEventID StartupFusionAppCtxStopEventID;
    private static TraceEventID StartupFusion2EEStartEventID;
    private static TraceEventID StartupFusion2EEStopEventID;
    private static TraceEventID StartupSecurityCatchCallStartEventID;
    private static TraceEventID StartupSecurityCatchCallStopEventID;
    private static TraceEventID ClrStackWalkEventID;
    private static TraceEventID ClrPerfTrackModuleRangeLoadEventID;
    private static TraceEventID BindingPolicyPhaseStartEventID;
    private static TraceEventID BindingPolicyPhaseStopEventID;
    private static TraceEventID BindingNgenPhaseStartEventID;
    private static TraceEventID BindingNgenPhaseStopEventID;
    private static TraceEventID BindingLoopupAndProbingPhaseStartEventID;
    private static TraceEventID BindingLookupAndProbingPhaseStopEventID;
    private static TraceEventID BindingLoaderPhaseStartEventID;
    private static TraceEventID BindingLoaderPhaseStopEventID;
    private static TraceEventID BindingPhaseStartEventID;
    private static TraceEventID BindingPhaseStopEventID;
    private static TraceEventID BindingDownloadPhaseStartEventID;
    private static TraceEventID BindingDownloadPhaseStopEventID;
    private static TraceEventID BindingLoaderAssemblyInitPhaseStartEventID;
    private static TraceEventID BindingLoaderAssemblyInitPhaseStopEventID;
    private static TraceEventID BindingLoaderMappingPhaseStartEventID;
    private static TraceEventID BindingLoaderMappingPhaseStopEventID;
    private static TraceEventID BindingLoaderDeliverEventPhaseStartEventID;
    private static TraceEventID BindingLoaderDeliverEventsPhaseStopEventID;
    private static TraceEventID EvidenceGenerationEvidenceGeneratedEventID;
    private static TraceEventID TransparencyModuleTransparencyComputationStartEventID;
    private static TraceEventID TransparencyModuleTransparencyComputationStopEventID;
    private static TraceEventID TransparencyTypeTransparencyComputationStartEventID;
    private static TraceEventID TransparencyTypeTransparencyComputationStopEventID;
    private static TraceEventID TransparencyMethodTransparencyComputationStartEventID;
    private static TraceEventID TransparencyMethodTransparencyComputationStopEventID;
    private static TraceEventID TransparencyFieldTransparencyComputationStartEventID;
    private static TraceEventID TransparencyFieldTransparencyComputationStopEventID;
    private static TraceEventID TransparencyTokenTransparencyComputationStartEventID;
    private static TraceEventID TransparencyTokenTransparencyComputationStopEventID;
    private static TraceEventID NgenBinderNgenBindEventID;
    private static TraceEventID FailFastFailFastEventID;
    private static TraceEventID GCPinGCObjectEventID;
    private static TraceEventID GCPinGCPlugEventID;
    private static TraceEventID ClrMulticoreJitCommonEventID;
    private static TraceEventID MulticoreJitMethodCodeReturnedEventID;
    private static TraceEventID ThreadPoolWorkingThreadCountStartEventID;
    private static TraceEventID LoaderHeapLoaderHeapAllocRequestEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid GCTaskGuid;
    private static Guid FailFastTaskGuid;
    private static Guid StartupTaskGuid;
    private static Guid BindingTaskGuid;
    private static Guid ClrStackTaskGuid;
    private static Guid EvidenceGenerationTaskGuid;
    private static Guid NgenBinderTaskGuid;
    private static Guid TransparencyTaskGuid;
    private static Guid ThreadPoolWorkingThreadCountTaskGuid;
    private static Guid LoaderHeapTaskGuid;
    private static Guid ClrMulticoreJitTaskGuid;
    private static Guid ClrPerfTrackTaskGuid;
    private static Guid ThreadPoolTaskGuid;
    private static Guid ClrDynamicTypeUsageTaskGuid;
    public ClrPrivateTraceEventParser(TraceEventSource source);
    private static ClrPrivateTraceEventParser();
    public void add_GCDecision(Action`1<GCDecisionTraceData> value);
    public void remove_GCDecision(Action`1<GCDecisionTraceData> value);
    public void add_GCSettings(Action`1<GCSettingsTraceData> value);
    public void remove_GCSettings(Action`1<GCSettingsTraceData> value);
    public void add_GCOptimized(Action`1<GCOptimizedTraceData> value);
    public void remove_GCOptimized(Action`1<GCOptimizedTraceData> value);
    public void add_GCPerHeapHistory(Action`1<GCPerHeapHistoryTraceData> value);
    public void remove_GCPerHeapHistory(Action`1<GCPerHeapHistoryTraceData> value);
    public void add_GCGlobalHeapHistory(Action`1<GCGlobalHeapHistoryTraceData> value);
    public void remove_GCGlobalHeapHistory(Action`1<GCGlobalHeapHistoryTraceData> value);
    public void add_GCJoin(Action`1<GCJoinTraceData> value);
    public void remove_GCJoin(Action`1<GCJoinTraceData> value);
    public void add_GCMarkStackRoots(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkStackRoots(Action`1<GCMarkTraceData> value);
    public void add_GCMarkFinalizeQueueRoots(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkFinalizeQueueRoots(Action`1<GCMarkTraceData> value);
    public void add_GCMarkHandles(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkHandles(Action`1<GCMarkTraceData> value);
    public void add_GCMarkCards(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkCards(Action`1<GCMarkTraceData> value);
    public void add_GCBGCStart(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGCStart(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC1stNonCondStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC1stNonCondStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC1stConStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC1stConStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC2ndNonConStart(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC2ndNonConStart(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC2ndNonConStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC2ndNonConStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC2ndConStart(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC2ndConStart(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGC2ndConStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGC2ndConStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGCPlanStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGCPlanStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGCSweepStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCBGCSweepStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCBGCDrainMark(Action`1<BGCDrainMarkTraceData> value);
    public void remove_GCBGCDrainMark(Action`1<BGCDrainMarkTraceData> value);
    public void add_GCBGCRevisit(Action`1<BGCRevisitTraceData> value);
    public void remove_GCBGCRevisit(Action`1<BGCRevisitTraceData> value);
    public void add_GCBGCOverflow(Action`1<BGCOverflowTraceData> value);
    public void remove_GCBGCOverflow(Action`1<BGCOverflowTraceData> value);
    public void add_GCBGCAllocWaitStart(Action`1<BGCAllocWaitTraceData> value);
    public void remove_GCBGCAllocWaitStart(Action`1<BGCAllocWaitTraceData> value);
    public void add_GCBGCAllocWaitStop(Action`1<BGCAllocWaitTraceData> value);
    public void remove_GCBGCAllocWaitStop(Action`1<BGCAllocWaitTraceData> value);
    public void add_GCFullNotify(Action`1<GCFullNotifyTraceData> value);
    public void remove_GCFullNotify(Action`1<GCFullNotifyTraceData> value);
    public void add_StartupEEStartupStart(Action`1<StartupTraceData> value);
    public void remove_StartupEEStartupStart(Action`1<StartupTraceData> value);
    public void add_StartupEEStartupStop(Action`1<StartupTraceData> value);
    public void remove_StartupEEStartupStop(Action`1<StartupTraceData> value);
    public void add_StartupEEConfigSetupStart(Action`1<StartupTraceData> value);
    public void remove_StartupEEConfigSetupStart(Action`1<StartupTraceData> value);
    public void add_StartupEEConfigSetupStop(Action`1<StartupTraceData> value);
    public void remove_StartupEEConfigSetupStop(Action`1<StartupTraceData> value);
    public void add_StartupLoadSystemBasesStart(Action`1<StartupTraceData> value);
    public void remove_StartupLoadSystemBasesStart(Action`1<StartupTraceData> value);
    public void add_StartupLoadSystemBasesStop(Action`1<StartupTraceData> value);
    public void remove_StartupLoadSystemBasesStop(Action`1<StartupTraceData> value);
    public void add_StartupExecExeStart(Action`1<StartupTraceData> value);
    public void remove_StartupExecExeStart(Action`1<StartupTraceData> value);
    public void add_StartupExecExeStop(Action`1<StartupTraceData> value);
    public void remove_StartupExecExeStop(Action`1<StartupTraceData> value);
    public void add_StartupMainStart(Action`1<StartupTraceData> value);
    public void remove_StartupMainStart(Action`1<StartupTraceData> value);
    public void add_StartupMainStop(Action`1<StartupTraceData> value);
    public void remove_StartupMainStop(Action`1<StartupTraceData> value);
    public void add_StartupApplyPolicyStart(Action`1<StartupTraceData> value);
    public void remove_StartupApplyPolicyStart(Action`1<StartupTraceData> value);
    public void add_StartupApplyPolicyStop(Action`1<StartupTraceData> value);
    public void remove_StartupApplyPolicyStop(Action`1<StartupTraceData> value);
    public void add_StartupLdLibShFolderStart(Action`1<StartupTraceData> value);
    public void remove_StartupLdLibShFolderStart(Action`1<StartupTraceData> value);
    public void add_StartupLdLibShFolderStop(Action`1<StartupTraceData> value);
    public void remove_StartupLdLibShFolderStop(Action`1<StartupTraceData> value);
    public void add_StartupPrestubWorkerStart(Action`1<StartupTraceData> value);
    public void remove_StartupPrestubWorkerStart(Action`1<StartupTraceData> value);
    public void add_StartupPrestubWorkerStop(Action`1<StartupTraceData> value);
    public void remove_StartupPrestubWorkerStop(Action`1<StartupTraceData> value);
    public void add_StartupGetInstallationStart(Action`1<StartupTraceData> value);
    public void remove_StartupGetInstallationStart(Action`1<StartupTraceData> value);
    public void add_StartupGetInstallationStop(Action`1<StartupTraceData> value);
    public void remove_StartupGetInstallationStop(Action`1<StartupTraceData> value);
    public void add_StartupOpenHModuleStart(Action`1<StartupTraceData> value);
    public void remove_StartupOpenHModuleStart(Action`1<StartupTraceData> value);
    public void add_StartupOpenHModuleStop(Action`1<StartupTraceData> value);
    public void remove_StartupOpenHModuleStop(Action`1<StartupTraceData> value);
    public void add_StartupExplicitBindStart(Action`1<StartupTraceData> value);
    public void remove_StartupExplicitBindStart(Action`1<StartupTraceData> value);
    public void add_StartupExplicitBindStop(Action`1<StartupTraceData> value);
    public void remove_StartupExplicitBindStop(Action`1<StartupTraceData> value);
    public void add_StartupParseXmlStart(Action`1<StartupTraceData> value);
    public void remove_StartupParseXmlStart(Action`1<StartupTraceData> value);
    public void add_StartupParseXmlStop(Action`1<StartupTraceData> value);
    public void remove_StartupParseXmlStop(Action`1<StartupTraceData> value);
    public void add_StartupInitDefaultDomainStart(Action`1<StartupTraceData> value);
    public void remove_StartupInitDefaultDomainStart(Action`1<StartupTraceData> value);
    public void add_StartupInitDefaultDomainStop(Action`1<StartupTraceData> value);
    public void remove_StartupInitDefaultDomainStop(Action`1<StartupTraceData> value);
    public void add_StartupInitSecurityStart(Action`1<StartupTraceData> value);
    public void remove_StartupInitSecurityStart(Action`1<StartupTraceData> value);
    public void add_StartupInitSecurityStop(Action`1<StartupTraceData> value);
    public void remove_StartupInitSecurityStop(Action`1<StartupTraceData> value);
    public void add_StartupAllowBindingRedirsStart(Action`1<StartupTraceData> value);
    public void remove_StartupAllowBindingRedirsStart(Action`1<StartupTraceData> value);
    public void add_StartupAllowBindingRedirsStop(Action`1<StartupTraceData> value);
    public void remove_StartupAllowBindingRedirsStop(Action`1<StartupTraceData> value);
    public void add_StartupEEConfigSyncStart(Action`1<StartupTraceData> value);
    public void remove_StartupEEConfigSyncStart(Action`1<StartupTraceData> value);
    public void add_StartupEEConfigSyncStop(Action`1<StartupTraceData> value);
    public void remove_StartupEEConfigSyncStop(Action`1<StartupTraceData> value);
    public void add_StartupBindingStart(Action`1<StartupTraceData> value);
    public void remove_StartupBindingStart(Action`1<StartupTraceData> value);
    public void add_StartupBindingStop(Action`1<StartupTraceData> value);
    public void remove_StartupBindingStop(Action`1<StartupTraceData> value);
    public void add_StartupLoaderCatchCallStart(Action`1<StartupTraceData> value);
    public void remove_StartupLoaderCatchCallStart(Action`1<StartupTraceData> value);
    public void add_StartupLoaderCatchCallStop(Action`1<StartupTraceData> value);
    public void remove_StartupLoaderCatchCallStop(Action`1<StartupTraceData> value);
    public void add_StartupFusionInitStart(Action`1<StartupTraceData> value);
    public void remove_StartupFusionInitStart(Action`1<StartupTraceData> value);
    public void add_StartupFusionInitStop(Action`1<StartupTraceData> value);
    public void remove_StartupFusionInitStop(Action`1<StartupTraceData> value);
    public void add_StartupFusionAppCtxStart(Action`1<StartupTraceData> value);
    public void remove_StartupFusionAppCtxStart(Action`1<StartupTraceData> value);
    public void add_StartupFusionAppCtxStop(Action`1<StartupTraceData> value);
    public void remove_StartupFusionAppCtxStop(Action`1<StartupTraceData> value);
    public void add_StartupFusion2EEStart(Action`1<StartupTraceData> value);
    public void remove_StartupFusion2EEStart(Action`1<StartupTraceData> value);
    public void add_StartupFusion2EEStop(Action`1<StartupTraceData> value);
    public void remove_StartupFusion2EEStop(Action`1<StartupTraceData> value);
    public void add_StartupSecurityCatchCallStart(Action`1<StartupTraceData> value);
    public void remove_StartupSecurityCatchCallStart(Action`1<StartupTraceData> value);
    public void add_StartupSecurityCatchCallStop(Action`1<StartupTraceData> value);
    public void remove_StartupSecurityCatchCallStop(Action`1<StartupTraceData> value);
    public void add_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void remove_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void add_ClrPerfTrackModuleRangeLoad(Action`1<ModuleRangePrivateTraceData> value);
    public void remove_ClrPerfTrackModuleRangeLoad(Action`1<ModuleRangePrivateTraceData> value);
    public void add_BindingPolicyPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingPolicyPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingPolicyPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingPolicyPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingNgenPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingNgenPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingNgenPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingNgenPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingLoopupAndProbingPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingLoopupAndProbingPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingLookupAndProbingPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingLookupAndProbingPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingLoaderPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingLoaderPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingDownloadPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingDownloadPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingDownloadPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingDownloadPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingLoaderAssemblyInitPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderAssemblyInitPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingLoaderAssemblyInitPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderAssemblyInitPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingLoaderMappingPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderMappingPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingLoaderMappingPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderMappingPhaseStop(Action`1<BindingTraceData> value);
    public void add_BindingLoaderDeliverEventPhaseStart(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderDeliverEventPhaseStart(Action`1<BindingTraceData> value);
    public void add_BindingLoaderDeliverEventsPhaseStop(Action`1<BindingTraceData> value);
    public void remove_BindingLoaderDeliverEventsPhaseStop(Action`1<BindingTraceData> value);
    public void add_EvidenceGenerationEvidenceGenerated(Action`1<EvidenceGeneratedTraceData> value);
    public void remove_EvidenceGenerationEvidenceGenerated(Action`1<EvidenceGeneratedTraceData> value);
    public void add_TransparencyModuleTransparencyComputationStart(Action`1<ModuleTransparencyCalculationTraceData> value);
    public void remove_TransparencyModuleTransparencyComputationStart(Action`1<ModuleTransparencyCalculationTraceData> value);
    public void add_TransparencyModuleTransparencyComputationStop(Action`1<ModuleTransparencyCalculationResultTraceData> value);
    public void remove_TransparencyModuleTransparencyComputationStop(Action`1<ModuleTransparencyCalculationResultTraceData> value);
    public void add_TransparencyTypeTransparencyComputationStart(Action`1<TypeTransparencyCalculationTraceData> value);
    public void remove_TransparencyTypeTransparencyComputationStart(Action`1<TypeTransparencyCalculationTraceData> value);
    public void add_TransparencyTypeTransparencyComputationStop(Action`1<TypeTransparencyCalculationResultTraceData> value);
    public void remove_TransparencyTypeTransparencyComputationStop(Action`1<TypeTransparencyCalculationResultTraceData> value);
    public void add_TransparencyMethodTransparencyComputationStart(Action`1<MethodTransparencyCalculationTraceData> value);
    public void remove_TransparencyMethodTransparencyComputationStart(Action`1<MethodTransparencyCalculationTraceData> value);
    public void add_TransparencyMethodTransparencyComputationStop(Action`1<MethodTransparencyCalculationResultTraceData> value);
    public void remove_TransparencyMethodTransparencyComputationStop(Action`1<MethodTransparencyCalculationResultTraceData> value);
    public void add_TransparencyFieldTransparencyComputationStart(Action`1<FieldTransparencyCalculationTraceData> value);
    public void remove_TransparencyFieldTransparencyComputationStart(Action`1<FieldTransparencyCalculationTraceData> value);
    public void add_TransparencyFieldTransparencyComputationStop(Action`1<FieldTransparencyCalculationResultTraceData> value);
    public void remove_TransparencyFieldTransparencyComputationStop(Action`1<FieldTransparencyCalculationResultTraceData> value);
    public void add_TransparencyTokenTransparencyComputationStart(Action`1<TokenTransparencyCalculationTraceData> value);
    public void remove_TransparencyTokenTransparencyComputationStart(Action`1<TokenTransparencyCalculationTraceData> value);
    public void add_TransparencyTokenTransparencyComputationStop(Action`1<TokenTransparencyCalculationResultTraceData> value);
    public void remove_TransparencyTokenTransparencyComputationStop(Action`1<TokenTransparencyCalculationResultTraceData> value);
    public void add_NgenBinderNgenBind(Action`1<NgenBindEventTraceData> value);
    public void remove_NgenBinderNgenBind(Action`1<NgenBindEventTraceData> value);
    public void add_FailFast(Action`1<FailFastTraceData> value);
    public void remove_FailFast(Action`1<FailFastTraceData> value);
    public void add_GCFinalizeObject(Action`1<FinalizeObjectTraceData> value);
    public void remove_GCFinalizeObject(Action`1<FinalizeObjectTraceData> value);
    public void add_GCCCWRefCountChangeAnsi(Action`1<CCWRefCountChangeAnsiTraceData> value);
    public void remove_GCCCWRefCountChangeAnsi(Action`1<CCWRefCountChangeAnsiTraceData> value);
    public void add_GCCCWRefCountChange(Action`1<CCWRefCountChangeTraceData> value);
    public void remove_GCCCWRefCountChange(Action`1<CCWRefCountChangeTraceData> value);
    public void add_GCSetGCHandle(Action`1<SetGCHandleTraceData> value);
    public void remove_GCSetGCHandle(Action`1<SetGCHandleTraceData> value);
    public void add_GCDestroyGCHandle(Action`1<DestroyGCHandleTraceData> value);
    public void remove_GCDestroyGCHandle(Action`1<DestroyGCHandleTraceData> value);
    public void add_BindingFusionMessage(Action`1<FusionMessageTraceData> value);
    public void remove_BindingFusionMessage(Action`1<FusionMessageTraceData> value);
    public void add_GCPinObjectAtGCTime(Action`1<PinObjectAtGCTimeTraceData> value);
    public void remove_GCPinObjectAtGCTime(Action`1<PinObjectAtGCTimeTraceData> value);
    public void add_GCPinPlugAtGCTime(Action`1<PinPlugAtGCTimeTraceData> value);
    public void remove_GCPinPlugAtGCTime(Action`1<PinPlugAtGCTimeTraceData> value);
    public void add_ClrMulticoreJitCommon(Action`1<MulticoreJitPrivateTraceData> value);
    public void remove_ClrMulticoreJitCommon(Action`1<MulticoreJitPrivateTraceData> value);
    public void add_ClrMulticoreJitMethodCodeReturned(Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> value);
    public void remove_ClrMulticoreJitMethodCodeReturned(Action`1<MulticoreJitMethodCodeReturnedPrivateTraceData> value);
    public void add_ThreadPoolWorkingThreadCountStart(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
    public void remove_ThreadPoolWorkingThreadCountStart(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
    public void add_ThreadPoolEnqueue(Action`1<ThreadPoolWorkTraceData> value);
    public void remove_ThreadPoolEnqueue(Action`1<ThreadPoolWorkTraceData> value);
    public void add_ThreadPoolDequeue(Action`1<ThreadPoolWorkTraceData> value);
    public void remove_ThreadPoolDequeue(Action`1<ThreadPoolWorkTraceData> value);
    public void add_ThreadPoolIOEnqueue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void remove_ThreadPoolIOEnqueue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void add_ThreadPoolIODequeue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void remove_ThreadPoolIODequeue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void add_ThreadPoolIOPack(Action`1<ThreadPoolIOWorkTraceData> value);
    public void remove_ThreadPoolIOPack(Action`1<ThreadPoolIOWorkTraceData> value);
    public void add_LoaderHeapAllocRequest(Action`1<LoaderHeapAllocRequestTraceData> value);
    public void remove_LoaderHeapAllocRequest(Action`1<LoaderHeapAllocRequestTraceData> value);
    public void add_ClrDynamicTypeUsageIInspectableRuntimeClassName(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageIInspectableRuntimeClassName(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void add_ClrDynamicTypeUsageWinRTUnbox(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageWinRTUnbox(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageCreateRCW(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageCreateRCW(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void add_ClrDynamicTypeUsageRCWVariance(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
    public void remove_ClrDynamicTypeUsageRCWVariance(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
    public void add_ClrDynamicTypeUsageRCWIEnumerableCasting(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageRCWIEnumerableCasting(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageCreateCCW(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageCreateCCW(Action`1<DynamicTypeUsePrivateTraceData> value);
    public void add_ClrDynamicTypeUsageCCWVariance(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
    public void remove_ClrDynamicTypeUsageCCWVariance(Action`1<DynamicTypeUsePrivateVarianceTraceData> value);
    public void add_ClrDynamicTypeUsageObjectVariantMarshallingToNative(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageObjectVariantMarshallingToNative(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageGetTypeFromGUID(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageGetTypeFromGUID(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageGetTypeFromProgID(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageGetTypeFromProgID(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageConvertToCallbackEtw(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageConvertToCallbackEtw(Action`1<DynamicTypeUseTwoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageBeginCreateManagedReference(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageBeginCreateManagedReference(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageEndCreateManagedReference(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageEndCreateManagedReference(Action`1<DynamicTypeUseNoParametersPrivateTraceData> value);
    public void add_ClrDynamicTypeUsageObjectVariantMarshallingToManaged(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
    public void remove_ClrDynamicTypeUsageObjectVariantMarshallingToManaged(Action`1<DynamicTypeUseStringAndIntPrivateTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private void RegisterTemplate(TraceEvent template);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.ClrTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    public static Guid NativeProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid GCTaskGuid;
    private static Guid WorkerThreadCreationV2TaskGuid;
    private static Guid IOThreadCreationTaskGuid;
    private static Guid WorkerThreadRetirementV2TaskGuid;
    private static Guid IOThreadRetirementTaskGuid;
    private static Guid ThreadpoolSuspensionV2TaskGuid;
    private static Guid ExceptionTaskGuid;
    private static Guid ContentionTaskGuid;
    private static Guid MethodTaskGuid;
    private static Guid LoaderTaskGuid;
    private static Guid ClrStackTaskGuid;
    private static Guid StrongNameVerificationTaskGuid;
    private static Guid AuthenticodeVerificationTaskGuid;
    private static Guid AppDomainResourceManagementTaskGuid;
    private static Guid ILStubTaskGuid;
    private static Guid ThreadPoolWorkerThreadTaskGuid;
    private static Guid ThreadPoolMinMaxThreadsTaskGuid;
    private static Guid ThreadPoolWorkerThreadRetirementTaskGuid;
    private static Guid ThreadPoolWorkerThreadAdjustmentTaskGuid;
    private static Guid RuntimeTaskGuid;
    private static Guid ClrPerfTrackTaskGuid;
    private static Guid TypeTaskGuid;
    private static Guid ThreadPoolWorkingThreadCountTaskGuid;
    private static Guid ThreadPoolTaskGuid;
    private static Guid ThreadTaskGuid;
    private static Guid CodeSymbolsTaskGuid;
    private static Guid AssemblyLoaderTaskGuid;
    private static Guid TieredCompilationTaskGuid;
    private static Guid TypeLoadTaskGuid;
    private static Guid JitInstrumentationDataTaskGuid;
    private static Guid ExecutionCheckpointTaskGuid;
    private static Guid YieldProcessorMeasurementTaskGuid;
    internal ClrTraceEventParserState State { get; }
    public ClrTraceEventParser(TraceEventSource source);
    private static ClrTraceEventParser();
    internal ClrTraceEventParserState get_State();
    public void add_GCGenAwareStart(Action`1<GenAwareBeginTraceData> value);
    public void remove_GCGenAwareStart(Action`1<GenAwareBeginTraceData> value);
    public void add_GCGenAwareEnd(Action`1<GenAwareEndTraceData> value);
    public void remove_GCGenAwareEnd(Action`1<GenAwareEndTraceData> value);
    public void add_GCStart(Action`1<GCStartTraceData> value);
    public void remove_GCStart(Action`1<GCStartTraceData> value);
    public void add_GCStop(Action`1<GCEndTraceData> value);
    public void remove_GCStop(Action`1<GCEndTraceData> value);
    public void add_GCRestartEEStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCRestartEEStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCHeapStats(Action`1<GCHeapStatsTraceData> value);
    public void remove_GCHeapStats(Action`1<GCHeapStatsTraceData> value);
    public void add_GCCreateSegment(Action`1<GCCreateSegmentTraceData> value);
    public void remove_GCCreateSegment(Action`1<GCCreateSegmentTraceData> value);
    public void add_GCFreeSegment(Action`1<GCFreeSegmentTraceData> value);
    public void remove_GCFreeSegment(Action`1<GCFreeSegmentTraceData> value);
    public void add_GCRestartEEStart(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCRestartEEStart(Action`1<GCNoUserDataTraceData> value);
    public void add_GCSuspendEEStop(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCSuspendEEStop(Action`1<GCNoUserDataTraceData> value);
    public void add_GCSuspendEEStart(Action`1<GCSuspendEETraceData> value);
    public void remove_GCSuspendEEStart(Action`1<GCSuspendEETraceData> value);
    public void add_GCAllocationTick(Action`1<GCAllocationTickTraceData> value);
    public void remove_GCAllocationTick(Action`1<GCAllocationTickTraceData> value);
    public void add_GCCreateConcurrentThread(Action`1<GCCreateConcurrentThreadTraceData> value);
    public void remove_GCCreateConcurrentThread(Action`1<GCCreateConcurrentThreadTraceData> value);
    public void add_GCTerminateConcurrentThread(Action`1<GCTerminateConcurrentThreadTraceData> value);
    public void remove_GCTerminateConcurrentThread(Action`1<GCTerminateConcurrentThreadTraceData> value);
    public void add_GCFinalizersStop(Action`1<GCFinalizersEndTraceData> value);
    public void remove_GCFinalizersStop(Action`1<GCFinalizersEndTraceData> value);
    public void add_GCFinalizersStart(Action`1<GCNoUserDataTraceData> value);
    public void remove_GCFinalizersStart(Action`1<GCNoUserDataTraceData> value);
    public void add_TypeBulkType(Action`1<GCBulkTypeTraceData> value);
    public void remove_TypeBulkType(Action`1<GCBulkTypeTraceData> value);
    public void add_MethodMethodDetails(Action`1<MethodDetailsTraceData> value);
    public void remove_MethodMethodDetails(Action`1<MethodDetailsTraceData> value);
    public void add_GCBulkRootEdge(Action`1<GCBulkRootEdgeTraceData> value);
    public void remove_GCBulkRootEdge(Action`1<GCBulkRootEdgeTraceData> value);
    public void add_GCBulkRootConditionalWeakTableElementEdge(Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> value);
    public void remove_GCBulkRootConditionalWeakTableElementEdge(Action`1<GCBulkRootConditionalWeakTableElementEdgeTraceData> value);
    public void add_GCBulkNode(Action`1<GCBulkNodeTraceData> value);
    public void remove_GCBulkNode(Action`1<GCBulkNodeTraceData> value);
    public void add_GCBulkEdge(Action`1<GCBulkEdgeTraceData> value);
    public void remove_GCBulkEdge(Action`1<GCBulkEdgeTraceData> value);
    public void add_GCSampledObjectAllocation(Action`1<GCSampledObjectAllocationTraceData> value);
    public void remove_GCSampledObjectAllocation(Action`1<GCSampledObjectAllocationTraceData> value);
    public void add_GCBulkSurvivingObjectRanges(Action`1<GCBulkSurvivingObjectRangesTraceData> value);
    public void remove_GCBulkSurvivingObjectRanges(Action`1<GCBulkSurvivingObjectRangesTraceData> value);
    public void add_GCBulkMovedObjectRanges(Action`1<GCBulkMovedObjectRangesTraceData> value);
    public void remove_GCBulkMovedObjectRanges(Action`1<GCBulkMovedObjectRangesTraceData> value);
    public void add_GCGenerationRange(Action`1<GCGenerationRangeTraceData> value);
    public void remove_GCGenerationRange(Action`1<GCGenerationRangeTraceData> value);
    public void add_GCMarkStackRoots(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkStackRoots(Action`1<GCMarkTraceData> value);
    public void add_GCMarkFinalizeQueueRoots(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkFinalizeQueueRoots(Action`1<GCMarkTraceData> value);
    public void add_GCMarkHandles(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkHandles(Action`1<GCMarkTraceData> value);
    public void add_GCMarkCards(Action`1<GCMarkTraceData> value);
    public void remove_GCMarkCards(Action`1<GCMarkTraceData> value);
    public void add_GCMarkWithType(Action`1<GCMarkWithTypeTraceData> value);
    public void remove_GCMarkWithType(Action`1<GCMarkWithTypeTraceData> value);
    public void add_GCPerHeapHistory(Action`1<GCPerHeapHistoryTraceData> value);
    public void remove_GCPerHeapHistory(Action`1<GCPerHeapHistoryTraceData> value);
    public void add_GCGlobalHeapHistory(Action`1<GCGlobalHeapHistoryTraceData> value);
    public void remove_GCGlobalHeapHistory(Action`1<GCGlobalHeapHistoryTraceData> value);
    public void add_GCJoin(Action`1<GCJoinTraceData> value);
    public void remove_GCJoin(Action`1<GCJoinTraceData> value);
    public void add_GCFinalizeObject(Action`1<FinalizeObjectTraceData> value);
    public void remove_GCFinalizeObject(Action`1<FinalizeObjectTraceData> value);
    public void add_GCSetGCHandle(Action`1<SetGCHandleTraceData> value);
    public void remove_GCSetGCHandle(Action`1<SetGCHandleTraceData> value);
    public void add_GCDestoryGCHandle(Action`1<DestroyGCHandleTraceData> value);
    public void remove_GCDestoryGCHandle(Action`1<DestroyGCHandleTraceData> value);
    public void add_GCPinObjectAtGCTime(Action`1<PinObjectAtGCTimeTraceData> value);
    public void remove_GCPinObjectAtGCTime(Action`1<PinObjectAtGCTimeTraceData> value);
    public void add_GCPinPlugAtGCTime(Action`1<PinPlugAtGCTimeTraceData> value);
    public void remove_GCPinPlugAtGCTime(Action`1<PinPlugAtGCTimeTraceData> value);
    public void add_GCTriggered(Action`1<GCTriggeredTraceData> value);
    public void remove_GCTriggered(Action`1<GCTriggeredTraceData> value);
    public void add_GCBulkRootCCW(Action`1<GCBulkRootCCWTraceData> value);
    public void remove_GCBulkRootCCW(Action`1<GCBulkRootCCWTraceData> value);
    public void add_GCBulkRCW(Action`1<GCBulkRCWTraceData> value);
    public void remove_GCBulkRCW(Action`1<GCBulkRCWTraceData> value);
    public void add_GCBulkRootStaticVar(Action`1<GCBulkRootStaticVarTraceData> value);
    public void remove_GCBulkRootStaticVar(Action`1<GCBulkRootStaticVarTraceData> value);
    public void add_IOThreadCreationStart(Action`1<IOThreadTraceData> value);
    public void remove_IOThreadCreationStart(Action`1<IOThreadTraceData> value);
    public void add_IOThreadCreationStop(Action`1<IOThreadTraceData> value);
    public void remove_IOThreadCreationStop(Action`1<IOThreadTraceData> value);
    public void add_IOThreadRetirementStart(Action`1<IOThreadTraceData> value);
    public void remove_IOThreadRetirementStart(Action`1<IOThreadTraceData> value);
    public void add_IOThreadRetirementStop(Action`1<IOThreadTraceData> value);
    public void remove_IOThreadRetirementStop(Action`1<IOThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadStart(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void remove_ThreadPoolWorkerThreadStart(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadStop(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void remove_ThreadPoolWorkerThreadStop(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadWait(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void remove_ThreadPoolWorkerThreadWait(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadRetirementStart(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void remove_ThreadPoolWorkerThreadRetirementStart(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadRetirementStop(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void remove_ThreadPoolWorkerThreadRetirementStop(Action`1<ThreadPoolWorkerThreadTraceData> value);
    public void add_ThreadPoolWorkerThreadAdjustmentSample(Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> value);
    public void remove_ThreadPoolWorkerThreadAdjustmentSample(Action`1<ThreadPoolWorkerThreadAdjustmentSampleTraceData> value);
    public void add_ThreadPoolWorkerThreadAdjustmentAdjustment(Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> value);
    public void remove_ThreadPoolWorkerThreadAdjustmentAdjustment(Action`1<ThreadPoolWorkerThreadAdjustmentTraceData> value);
    public void add_ThreadPoolWorkerThreadAdjustmentStats(Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> value);
    public void remove_ThreadPoolWorkerThreadAdjustmentStats(Action`1<ThreadPoolWorkerThreadAdjustmentStatsTraceData> value);
    public void add_YieldProcessorMeasurement(Action`1<YieldProcessorMeasurementTraceData> value);
    public void remove_YieldProcessorMeasurement(Action`1<YieldProcessorMeasurementTraceData> value);
    public void add_ThreadPoolMinMaxThreads(Action`1<ThreadPoolMinMaxThreadsTraceData> value);
    public void remove_ThreadPoolMinMaxThreads(Action`1<ThreadPoolMinMaxThreadsTraceData> value);
    public void add_ThreadPoolWorkingThreadCountStart(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
    public void remove_ThreadPoolWorkingThreadCountStart(Action`1<ThreadPoolWorkingThreadCountTraceData> value);
    public void add_ThreadPoolEnqueue(Action`1<ThreadPoolWorkTraceData> value);
    public void remove_ThreadPoolEnqueue(Action`1<ThreadPoolWorkTraceData> value);
    public void add_ThreadPoolDequeue(Action`1<ThreadPoolWorkTraceData> value);
    public void remove_ThreadPoolDequeue(Action`1<ThreadPoolWorkTraceData> value);
    public void add_ThreadPoolIOEnqueue(Action`1<ThreadPoolIOWorkEnqueueTraceData> value);
    public void remove_ThreadPoolIOEnqueue(Action`1<ThreadPoolIOWorkEnqueueTraceData> value);
    public void add_ThreadPoolIODequeue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void remove_ThreadPoolIODequeue(Action`1<ThreadPoolIOWorkTraceData> value);
    public void add_ThreadPoolIOPack(Action`1<ThreadPoolIOWorkTraceData> value);
    public void remove_ThreadPoolIOPack(Action`1<ThreadPoolIOWorkTraceData> value);
    public void add_ThreadCreating(Action`1<ThreadStartWorkTraceData> value);
    public void remove_ThreadCreating(Action`1<ThreadStartWorkTraceData> value);
    public void add_ThreadRunning(Action`1<ThreadStartWorkTraceData> value);
    public void remove_ThreadRunning(Action`1<ThreadStartWorkTraceData> value);
    public void add_ExceptionCatchStart(Action`1<ExceptionHandlingTraceData> value);
    public void remove_ExceptionCatchStart(Action`1<ExceptionHandlingTraceData> value);
    public void add_ExceptionCatchStop(Action`1<EmptyTraceData> value);
    public void remove_ExceptionCatchStop(Action`1<EmptyTraceData> value);
    public void add_ExceptionFilterStart(Action`1<ExceptionHandlingTraceData> value);
    public void remove_ExceptionFilterStart(Action`1<ExceptionHandlingTraceData> value);
    public void add_ExceptionFilterStop(Action`1<EmptyTraceData> value);
    public void remove_ExceptionFilterStop(Action`1<EmptyTraceData> value);
    public void add_ExceptionFinallyStart(Action`1<ExceptionHandlingTraceData> value);
    public void remove_ExceptionFinallyStart(Action`1<ExceptionHandlingTraceData> value);
    public void add_ExceptionFinallyStop(Action`1<EmptyTraceData> value);
    public void remove_ExceptionFinallyStop(Action`1<EmptyTraceData> value);
    public void add_ExceptionStart(Action`1<ExceptionTraceData> value);
    public void remove_ExceptionStart(Action`1<ExceptionTraceData> value);
    public void add_ExceptionStop(Action`1<EmptyTraceData> value);
    public void remove_ExceptionStop(Action`1<EmptyTraceData> value);
    public void add_ContentionStart(Action`1<ContentionStartTraceData> value);
    public void remove_ContentionStart(Action`1<ContentionStartTraceData> value);
    public void add_MethodILToNativeMap(Action`1<MethodILToNativeMapTraceData> value);
    public void remove_MethodILToNativeMap(Action`1<MethodILToNativeMapTraceData> value);
    public void add_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void remove_ClrStackWalk(Action`1<ClrStackWalkTraceData> value);
    public void add_CodeSymbolsStart(Action`1<CodeSymbolsTraceData> value);
    public void remove_CodeSymbolsStart(Action`1<CodeSymbolsTraceData> value);
    public void add_AppDomainResourceManagementMemAllocated(Action`1<AppDomainMemAllocatedTraceData> value);
    public void remove_AppDomainResourceManagementMemAllocated(Action`1<AppDomainMemAllocatedTraceData> value);
    public void add_AppDomainResourceManagementMemSurvived(Action`1<AppDomainMemSurvivedTraceData> value);
    public void remove_AppDomainResourceManagementMemSurvived(Action`1<AppDomainMemSurvivedTraceData> value);
    public void add_AppDomainResourceManagementThreadCreated(Action`1<ThreadCreatedTraceData> value);
    public void remove_AppDomainResourceManagementThreadCreated(Action`1<ThreadCreatedTraceData> value);
    public void add_EventSourceEvent(Action`1<EventSourceTraceData> value);
    public void remove_EventSourceEvent(Action`1<EventSourceTraceData> value);
    public void add_AppDomainResourceManagementThreadTerminated(Action`1<ThreadTerminatedOrTransitionTraceData> value);
    public void remove_AppDomainResourceManagementThreadTerminated(Action`1<ThreadTerminatedOrTransitionTraceData> value);
    public void add_AppDomainResourceManagementDomainEnter(Action`1<ThreadTerminatedOrTransitionTraceData> value);
    public void remove_AppDomainResourceManagementDomainEnter(Action`1<ThreadTerminatedOrTransitionTraceData> value);
    public void add_AssemblyLoaderAppDomainAssemblyResolveHandlerInvoked(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> value);
    public void remove_AssemblyLoaderAppDomainAssemblyResolveHandlerInvoked(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> value);
    public void add_AssemblyLoaderAssemblyLoadContextResolvingHandlerInvoked(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> value);
    public void remove_AssemblyLoaderAssemblyLoadContextResolvingHandlerInvoked(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> value);
    public void add_AssemblyLoaderAssemblyLoadFromResolveHandlerInvoked(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> value);
    public void remove_AssemblyLoaderAssemblyLoadFromResolveHandlerInvoked(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> value);
    public void add_AssemblyLoaderKnownPathProbed(Action`1<KnownPathProbedTraceData> value);
    public void remove_AssemblyLoaderKnownPathProbed(Action`1<KnownPathProbedTraceData> value);
    public void add_AssemblyLoaderResolutionAttempted(Action`1<ResolutionAttemptedTraceData> value);
    public void remove_AssemblyLoaderResolutionAttempted(Action`1<ResolutionAttemptedTraceData> value);
    public void add_AssemblyLoaderStart(Action`1<AssemblyLoadStartTraceData> value);
    public void remove_AssemblyLoaderStart(Action`1<AssemblyLoadStartTraceData> value);
    public void add_AssemblyLoaderStop(Action`1<AssemblyLoadStopTraceData> value);
    public void remove_AssemblyLoaderStop(Action`1<AssemblyLoadStopTraceData> value);
    public void add_ILStubStubGenerated(Action`1<ILStubGeneratedTraceData> value);
    public void remove_ILStubStubGenerated(Action`1<ILStubGeneratedTraceData> value);
    public void add_ILStubStubCacheHit(Action`1<ILStubCacheHitTraceData> value);
    public void remove_ILStubStubCacheHit(Action`1<ILStubCacheHitTraceData> value);
    public void add_ContentionStop(Action`1<ContentionStopTraceData> value);
    public void remove_ContentionStop(Action`1<ContentionStopTraceData> value);
    public void add_MethodDCStartCompleteV2(Action`1<EmptyTraceData> value);
    public void remove_MethodDCStartCompleteV2(Action`1<EmptyTraceData> value);
    public void add_MethodDCStopCompleteV2(Action`1<EmptyTraceData> value);
    public void remove_MethodDCStopCompleteV2(Action`1<EmptyTraceData> value);
    public void add_MethodDCStartV2(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodDCStartV2(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodDCStopV2(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodDCStopV2(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodDCStartVerboseV2(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodDCStartVerboseV2(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodDCStopVerboseV2(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodDCStopVerboseV2(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodLoad(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodLoad(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodUnload(Action`1<MethodLoadUnloadTraceData> value);
    public void remove_MethodUnload(Action`1<MethodLoadUnloadTraceData> value);
    public void add_MethodLoadVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodLoadVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodUnloadVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void remove_MethodUnloadVerbose(Action`1<MethodLoadUnloadVerboseTraceData> value);
    public void add_MethodMemoryAllocatedForJitCode(Action`1<MethodJitMemoryAllocatedForCodeTraceData> value);
    public void remove_MethodMemoryAllocatedForJitCode(Action`1<MethodJitMemoryAllocatedForCodeTraceData> value);
    public void add_MethodR2RGetEntryPoint(Action`1<R2RGetEntryPointTraceData> value);
    public void remove_MethodR2RGetEntryPoint(Action`1<R2RGetEntryPointTraceData> value);
    public void add_MethodR2RGetEntryPointStart(Action`1<R2RGetEntryPointStartTraceData> value);
    public void remove_MethodR2RGetEntryPointStart(Action`1<R2RGetEntryPointStartTraceData> value);
    public void add_MethodJittingStarted(Action`1<MethodJittingStartedTraceData> value);
    public void remove_MethodJittingStarted(Action`1<MethodJittingStartedTraceData> value);
    public void add_TypeLoadStart(Action`1<TypeLoadStartTraceData> value);
    public void remove_TypeLoadStart(Action`1<TypeLoadStartTraceData> value);
    public void add_TypeLoadStop(Action`1<TypeLoadStopTraceData> value);
    public void remove_TypeLoadStop(Action`1<TypeLoadStopTraceData> value);
    public void add_LoaderModuleDCStartV2(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleDCStartV2(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderModuleDCStopV2(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleDCStopV2(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderDomainModuleLoad(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void remove_LoaderDomainModuleLoad(Action`1<DomainModuleLoadUnloadTraceData> value);
    public void add_LoaderModuleLoad(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleLoad(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderModuleUnload(Action`1<ModuleLoadUnloadTraceData> value);
    public void remove_LoaderModuleUnload(Action`1<ModuleLoadUnloadTraceData> value);
    public void add_LoaderAssemblyLoad(Action`1<AssemblyLoadUnloadTraceData> value);
    public void remove_LoaderAssemblyLoad(Action`1<AssemblyLoadUnloadTraceData> value);
    public void add_LoaderAssemblyUnload(Action`1<AssemblyLoadUnloadTraceData> value);
    public void remove_LoaderAssemblyUnload(Action`1<AssemblyLoadUnloadTraceData> value);
    public void add_LoaderAppDomainLoad(Action`1<AppDomainLoadUnloadTraceData> value);
    public void remove_LoaderAppDomainLoad(Action`1<AppDomainLoadUnloadTraceData> value);
    public void add_LoaderAppDomainUnload(Action`1<AppDomainLoadUnloadTraceData> value);
    public void remove_LoaderAppDomainUnload(Action`1<AppDomainLoadUnloadTraceData> value);
    public void add_StrongNameVerificationStart(Action`1<StrongNameVerificationTraceData> value);
    public void remove_StrongNameVerificationStart(Action`1<StrongNameVerificationTraceData> value);
    public void add_StrongNameVerificationStop(Action`1<StrongNameVerificationTraceData> value);
    public void remove_StrongNameVerificationStop(Action`1<StrongNameVerificationTraceData> value);
    public void add_AuthenticodeVerificationStart(Action`1<AuthenticodeVerificationTraceData> value);
    public void remove_AuthenticodeVerificationStart(Action`1<AuthenticodeVerificationTraceData> value);
    public void add_AuthenticodeVerificationStop(Action`1<AuthenticodeVerificationTraceData> value);
    public void remove_AuthenticodeVerificationStop(Action`1<AuthenticodeVerificationTraceData> value);
    public void add_MethodInliningSucceeded(Action`1<MethodJitInliningSucceededTraceData> value);
    public void remove_MethodInliningSucceeded(Action`1<MethodJitInliningSucceededTraceData> value);
    public void add_MethodInliningFailed(Action`1<MethodJitInliningFailedTraceData> value);
    public void remove_MethodInliningFailed(Action`1<MethodJitInliningFailedTraceData> value);
    public void add_MethodInliningFailedAnsi(Action`1<MethodJitInliningFailedAnsiTraceData> value);
    public void remove_MethodInliningFailedAnsi(Action`1<MethodJitInliningFailedAnsiTraceData> value);
    public void add_RuntimeStart(Action`1<RuntimeInformationTraceData> value);
    public void remove_RuntimeStart(Action`1<RuntimeInformationTraceData> value);
    public void add_MethodTailCallSucceeded(Action`1<MethodJitTailCallSucceededTraceData> value);
    public void remove_MethodTailCallSucceeded(Action`1<MethodJitTailCallSucceededTraceData> value);
    public void add_MethodTailCallFailedAnsi(Action`1<MethodJitTailCallFailedAnsiTraceData> value);
    public void remove_MethodTailCallFailedAnsi(Action`1<MethodJitTailCallFailedAnsiTraceData> value);
    public void add_MethodTailCallFailed(Action`1<MethodJitTailCallFailedTraceData> value);
    public void remove_MethodTailCallFailed(Action`1<MethodJitTailCallFailedTraceData> value);
    public void add_TieredCompilationSettings(Action`1<TieredCompilationSettingsTraceData> value);
    public void remove_TieredCompilationSettings(Action`1<TieredCompilationSettingsTraceData> value);
    public void add_TieredCompilationPause(Action`1<TieredCompilationEmptyTraceData> value);
    public void remove_TieredCompilationPause(Action`1<TieredCompilationEmptyTraceData> value);
    public void add_TieredCompilationResume(Action`1<TieredCompilationResumeTraceData> value);
    public void remove_TieredCompilationResume(Action`1<TieredCompilationResumeTraceData> value);
    public void add_TieredCompilationBackgroundJitStart(Action`1<TieredCompilationBackgroundJitStartTraceData> value);
    public void remove_TieredCompilationBackgroundJitStart(Action`1<TieredCompilationBackgroundJitStartTraceData> value);
    public void add_TieredCompilationBackgroundJitStop(Action`1<TieredCompilationBackgroundJitStopTraceData> value);
    public void remove_TieredCompilationBackgroundJitStop(Action`1<TieredCompilationBackgroundJitStopTraceData> value);
    public void add_JitInstrumentationDataInstrumentationData(Action`1<JitInstrumentationDataTraceData> value);
    public void remove_JitInstrumentationDataInstrumentationData(Action`1<JitInstrumentationDataTraceData> value);
    public void add_JitInstrumentationDataVerboseInstrumentationData(Action`1<JitInstrumentationDataVerboseTraceData> value);
    public void remove_JitInstrumentationDataVerboseInstrumentationData(Action`1<JitInstrumentationDataVerboseTraceData> value);
    public void add_ExecutionCheckpointExecutionCheckpoint(Action`1<ExecutionCheckpointTraceData> value);
    public void remove_ExecutionCheckpointExecutionCheckpoint(Action`1<ExecutionCheckpointTraceData> value);
    protected virtual string GetProviderName();
    private static CodeSymbolsTraceData CodeSymbolsStartTemplate(Action`1<CodeSymbolsTraceData> action);
    private static ExceptionHandlingTraceData ExceptionCatchStartTemplate(Action`1<ExceptionHandlingTraceData> action);
    private static EmptyTraceData ExceptionCatchStopTemplate(Action`1<EmptyTraceData> action);
    private static ExceptionHandlingTraceData ExceptionFilterStartTemplate(Action`1<ExceptionHandlingTraceData> action);
    private static EmptyTraceData ExceptionFilterStopTemplate(Action`1<EmptyTraceData> action);
    private static ExceptionHandlingTraceData ExceptionFinallyStartTemplate(Action`1<ExceptionHandlingTraceData> action);
    private static EmptyTraceData ExceptionFinallyStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData ExceptionStopTemplate(Action`1<EmptyTraceData> action);
    private static AppDomainAssemblyResolveHandlerInvokedTraceData AssemblyLoaderAppDomainAssemblyResolveHandlerInvokedTemplate(Action`1<AppDomainAssemblyResolveHandlerInvokedTraceData> action);
    private static AssemblyLoadContextResolvingHandlerInvokedTraceData AssemblyLoaderAssemblyLoadContextResolvingHandlerInvokedTemplate(Action`1<AssemblyLoadContextResolvingHandlerInvokedTraceData> action);
    private static AssemblyLoadFromResolveHandlerInvokedTraceData AssemblyLoaderAssemblyLoadFromResolveHandlerInvokedTemplate(Action`1<AssemblyLoadFromResolveHandlerInvokedTraceData> action);
    private static KnownPathProbedTraceData AssemblyLoaderKnownPathProbedTemplate(Action`1<KnownPathProbedTraceData> action);
    private static ResolutionAttemptedTraceData AssemblyLoaderResolutionAttemptedTemplate(Action`1<ResolutionAttemptedTraceData> action);
    private static AssemblyLoadStartTraceData AssemblyLoaderStartTemplate(Action`1<AssemblyLoadStartTraceData> action);
    private static AssemblyLoadStopTraceData AssemblyLoaderStopTemplate(Action`1<AssemblyLoadStopTraceData> action);
    private static TieredCompilationSettingsTraceData TieredCompilationSettingsTemplate(Action`1<TieredCompilationSettingsTraceData> action);
    private static TieredCompilationEmptyTraceData TieredCompilationPauseTemplate(Action`1<TieredCompilationEmptyTraceData> action);
    private static TieredCompilationResumeTraceData TieredCompilationResumeTemplate(Action`1<TieredCompilationResumeTraceData> action);
    private static TieredCompilationBackgroundJitStartTraceData TieredCompilationBackgroundJitStartTemplate(Action`1<TieredCompilationBackgroundJitStartTraceData> action);
    private static TieredCompilationBackgroundJitStopTraceData TieredCompilationBackgroundJitStopTemplate(Action`1<TieredCompilationBackgroundJitStopTraceData> action);
    private static MethodJitMemoryAllocatedForCodeTraceData MethodMemoryAllocatedForJitCodeTemplate(Action`1<MethodJitMemoryAllocatedForCodeTraceData> action);
    private static GenAwareBeginTraceData GenAwareBeginTemplate(Action`1<GenAwareBeginTraceData> action);
    private static GenAwareEndTraceData GenAwareEndTemplate(Action`1<GenAwareEndTraceData> action);
    private static R2RGetEntryPointStartTraceData R2RGetEntryPointStartTemplate(Action`1<R2RGetEntryPointStartTraceData> action);
    private static TypeLoadStartTraceData TypeLoadStartTemplate(Action`1<TypeLoadStartTraceData> action);
    private static TypeLoadStopTraceData TypeLoadStopTemplate(Action`1<TypeLoadStopTraceData> action);
    private static JitInstrumentationDataTraceData JitInstrumentationDataTemplate(Action`1<JitInstrumentationDataTraceData> action);
    private static JitInstrumentationDataVerboseTraceData JitInstrumentationDataVerboseTemplate(Action`1<JitInstrumentationDataVerboseTraceData> action);
    private static ExecutionCheckpointTraceData ExecutionCheckpointTemplate(Action`1<ExecutionCheckpointTraceData> action);
    private static YieldProcessorMeasurementTraceData YieldProcessorMeasurementTemplate(Action`1<YieldProcessorMeasurementTraceData> action);
    private static ThreadPoolMinMaxThreadsTraceData ThreadPoolMinMaxThreadsTemplate(Action`1<ThreadPoolMinMaxThreadsTraceData> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private void RegisterTemplate(TraceEvent template);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.DynamicManifestTraceEventData : DynamicTraceEventData {
    private ProviderManifest manifest;
    internal DynamicManifestTraceEventData(Action`1<TraceEvent> action, ProviderManifest manifest);
    public virtual object PayloadValue(int index);
    public virtual string PayloadString(int index, IFormatProvider formatProvider);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceEvent> m_target;
    private static Regex paramReplacer;
    internal static ushort IS_ANSI;
    internal static ushort BIT_32;
    internal static ushort CONSUMES_FIELD;
    internal static ushort ELEM_COUNT;
    internal static ushort COUNTED_SIZE;
    internal static ushort NULL_TERMINATED;
    internal static ushort POINTER_SIZE;
    internal static ushort UNKNOWN_SIZE;
    internal static ushort SPECIAL_SIZES;
    internal PayloadFetch[] payloadFetches;
    internal string MessageFormat;
    internal bool registeredWithTraceEventSource;
    private EventIndex cachedEventId;
    private int cachedFieldIdx;
    private int cachedFieldOffset;
    public String[] PayloadNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    internal DynamicTraceEventData(Action`1<TraceEvent> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    private static DynamicTraceEventData();
    [CompilerGeneratedAttribute]
internal void add_m_target(Action`1<TraceEvent> value);
    [CompilerGeneratedAttribute]
internal void remove_m_target(Action`1<TraceEvent> value);
    protected internal virtual void Dispatch();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    private object GetPayloadValueAt(PayloadFetch& payloadFetch, int offset, int payloadLength);
    private object GetDefaultValueByType(Type type);
    public virtual string PayloadString(int index, IFormatProvider formatProvider);
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual string GetFormattedMessage(IFormatProvider formatProvider);
    private int SkipToField(PayloadFetch[] payloadFetches, int targetFieldIdx, int startOffset, int payloadLength, bool useCache);
    private int GetCountForArray(PayloadFetch payloadFetch, PayloadFetchArrayInfo arrayInfo, Int32& offset);
    internal int OffsetOfNextField(PayloadFetch& payloadFetch, int offset, int payloadLength);
    internal static ushort SizeOfType(Type type);
    internal static bool IsNullTerminated(ushort size);
    internal static bool IsCountedSize(ushort size);
    internal static bool ConsumesFields(ushort size);
    public sealed virtual void ToStream(Serializer serializer);
    public sealed virtual void FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventParser : TraceEventParser {
    public static TraceEventID ManifestEventID;
    [CompilerGeneratedAttribute]
private Action`1<ProviderManifest> DynamicProviderAdded;
    private DynamicTraceEventParserState state;
    private Dictionary`2<Guid, List`1<PartialManifestInfo>> partialManifests;
    private RegisteredTraceEventParser registeredParser;
    private EventPipeTraceEventParser eventPipeTraceEventParser;
    public IEnumerable`1<ProviderManifest> DynamicProviders { get; }
    public bool IsStatic { get; }
    public DynamicTraceEventParser(TraceEventSource source);
    public IEnumerable`1<ProviderManifest> get_DynamicProviders();
    public void AddDynamicProvider(ProviderManifest providerManifest, bool noThrowOnError);
    public void WriteAllManifests(string directoryPath);
    public void ReadAllManifests(string directoryPath);
    public virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void add_DynamicProviderAdded(Action`1<ProviderManifest> value);
    [CompilerGeneratedAttribute]
public void remove_DynamicProviderAdded(Action`1<ProviderManifest> value);
    protected virtual string GetProviderName();
    private bool CheckForDynamicManifest(TraceEvent data);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventParserState : object {
    internal Dictionary`2<Guid, ProviderManifest> providers;
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public abstract class Microsoft.Diagnostics.Tracing.Parsers.ExternalTraceEventParser : TraceEventParser {
    internal Func`3<TraceEvent, bool, EventFilterResponse> NewEventDefinition;
    internal ExternalTraceEventParserState m_state;
    private Dictionary`2<MapKey, IDictionary`2<long, string>> m_maps;
    public bool IsStatic { get; }
    internal Dictionary`2<MapKey, IDictionary`2<long, string>> MapTable { get; }
    protected ExternalTraceEventParser(TraceEventSource source, bool dontRegister);
    public virtual bool get_IsStatic();
    protected virtual string GetProviderName();
    internal bool HasDefinitionForTemplate(TraceEvent template);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    internal virtual EventFilterResponse OnNewEventDefintion(TraceEvent template, bool mayHaveExistedBefore);
    internal abstract virtual DynamicTraceEventData TryLookup(TraceEvent unknownEvent);
    internal Dictionary`2<MapKey, IDictionary`2<long, string>> get_MapTable();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_0(TraceEvent unknown);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.ExternalTraceEventParserState : object {
    internal Dictionary`2<TraceEvent, DynamicTraceEventData> m_templates;
    public virtual void ToStream(Serializer serializer);
    public virtual void FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ActivatorCreateInstanceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ActivatorCreateInstanceArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ActivatorCreateInstanceArgs(Action`1<ActivatorCreateInstanceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ActivatorCreateInstanceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ActivatorCreateInstanceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ActivatorCreateInstanceTArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ActivatorCreateInstanceTArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ActivatorCreateInstanceTArgs(Action`1<ActivatorCreateInstanceTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ActivatorCreateInstanceTArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ActivatorCreateInstanceTArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ArrayCreateInstanceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ArrayCreateInstanceArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ArrayCreateInstanceArgs(Action`1<ArrayCreateInstanceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ArrayCreateInstanceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ArrayCreateInstanceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.AssemblyGetTypeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyGetTypeArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyGetTypeArgs(Action`1<AssemblyGetTypeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<AssemblyGetTypeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<AssemblyGetTypeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginCustomPropertyImplGetValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginCustomPropertyImplGetValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginCustomPropertyImplGetValueArgs(Action`1<BeginCustomPropertyImplGetValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginCustomPropertyImplGetValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginCustomPropertyImplGetValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginCustomPropertyImplGetValueIndexValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginCustomPropertyImplGetValueIndexValueArgs(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginCustomPropertyImplSetValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginCustomPropertyImplSetValueArgs> m_target;
    public string typeName { get; }
    public string valueTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginCustomPropertyImplSetValueArgs(Action`1<BeginCustomPropertyImplSetValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_valueTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginCustomPropertyImplSetValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginCustomPropertyImplSetValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginCustomPropertyImplSetValueIndexValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    public string indexValueTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginCustomPropertyImplSetValueIndexValueArgs(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    public string get_indexValueTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginEnumFormatArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginEnumFormatArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginEnumFormatArgs(Action`1<BeginEnumFormatArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginEnumFormatArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginEnumFormatArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRequestStreamArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRequestStreamArgs> m_target;
    public long id { get; }
    public string uri { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRequestStreamArgs(Action`1<BeginGetRequestStreamArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_id();
    public string get_uri();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRequestStreamArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRequestStreamArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetResponseArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetResponseArgs> m_target;
    public long id { get; }
    public string uri { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetResponseArgs(Action`1<BeginGetResponseArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_id();
    public string get_uri();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetResponseArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetResponseArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeConstructorsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeConstructorsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeConstructorsArgs(Action`1<BeginGetRuntimeConstructorsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeConstructorsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeConstructorsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeEventArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeEventArgs> m_target;
    public string typeName { get; }
    public string eventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeEventArgs(Action`1<BeginGetRuntimeEventArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_eventName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeEventArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeEventsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeEventsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeEventsArgs(Action`1<BeginGetRuntimeEventsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeEventsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeEventsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeFieldArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeFieldArgs> m_target;
    public string typeName { get; }
    public string fieldName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeFieldArgs(Action`1<BeginGetRuntimeFieldArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_fieldName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeFieldArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeFieldArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeFieldsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeFieldsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeFieldsArgs(Action`1<BeginGetRuntimeFieldsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeFieldsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeFieldsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeMembersArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeMembersArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeMembersArgs(Action`1<BeginGetRuntimeMembersArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeMembersArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeMembersArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeMethodArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeMethodArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeMethodArgs(Action`1<BeginGetRuntimeMethodArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeMethodArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeMethodArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimeMethodsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimeMethodsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimeMethodsArgs(Action`1<BeginGetRuntimeMethodsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimeMethodsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimeMethodsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimePropertiesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimePropertiesArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimePropertiesArgs(Action`1<BeginGetRuntimePropertiesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimePropertiesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimePropertiesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginGetRuntimePropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginGetRuntimePropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginGetRuntimePropertyArgs(Action`1<BeginGetRuntimePropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginGetRuntimePropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginGetRuntimePropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginICustomPropertyProviderCreateIndexedPropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    public string indexedParamTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginICustomPropertyProviderCreateIndexedPropertyArgs(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    public string get_indexedParamTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginICustomPropertyProviderCreatePropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginICustomPropertyProviderCreatePropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginICustomPropertyProviderCreatePropertyArgs(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginMarshalOffsetOfArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginMarshalOffsetOfArgs> m_target;
    public string typeName { get; }
    public string fieldName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginMarshalOffsetOfArgs(Action`1<BeginMarshalOffsetOfArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_fieldName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginMarshalOffsetOfArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginMarshalOffsetOfArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginMarshalPtrToStructureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginMarshalPtrToStructureArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginMarshalPtrToStructureArgs(Action`1<BeginMarshalPtrToStructureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginMarshalPtrToStructureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginMarshalPtrToStructureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginMethodInfoCreateDelegateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginMethodInfoCreateDelegateArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    public string delegateTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginMethodInfoCreateDelegateArgs(Action`1<BeginMethodInfoCreateDelegateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    public string get_delegateTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginMethodInfoCreateDelegateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginMethodInfoCreateDelegateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.BeginTypeAssemblyQualifiedNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BeginTypeAssemblyQualifiedNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BeginTypeAssemblyQualifiedNameArgs(Action`1<BeginTypeAssemblyQualifiedNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<BeginTypeAssemblyQualifiedNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<BeginTypeAssemblyQualifiedNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ConstructorInfoInvokeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ConstructorInfoInvokeArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ConstructorInfoInvokeArgs(Action`1<ConstructorInfoInvokeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ConstructorInfoInvokeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ConstructorInfoInvokeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndCreateIReferenceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndCreateIReferenceArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndCreateIReferenceArgs(Action`1<EndCreateIReferenceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndCreateIReferenceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndCreateIReferenceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndCustomPropertyImplGetValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndCustomPropertyImplGetValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndCustomPropertyImplGetValueArgs(Action`1<EndCustomPropertyImplGetValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndCustomPropertyImplGetValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndCustomPropertyImplGetValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndCustomPropertyImplGetValueIndexValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndCustomPropertyImplGetValueIndexValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndCustomPropertyImplGetValueIndexValueArgs(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndCustomPropertyImplSetValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndCustomPropertyImplSetValueArgs> m_target;
    public string typeName { get; }
    public string valueTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndCustomPropertyImplSetValueArgs(Action`1<EndCustomPropertyImplSetValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_valueTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndCustomPropertyImplSetValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndCustomPropertyImplSetValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndCustomPropertyImplSetValueIndexValueArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndCustomPropertyImplSetValueIndexValueArgs> m_target;
    public string typeName { get; }
    public string propertyTypeName { get; }
    public string indexValueTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndCustomPropertyImplSetValueIndexValueArgs(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyTypeName();
    public string get_indexValueTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndEnumFormatArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndEnumFormatArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndEnumFormatArgs(Action`1<EndEnumFormatArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndEnumFormatArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndEnumFormatArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetFieldFromHandleArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetFieldFromHandleArgs> m_target;
    public string typeName { get; }
    public string field { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetFieldFromHandleArgs(Action`1<EndGetFieldFromHandleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_field();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetFieldFromHandleArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetFieldFromHandleArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetMethodFromHandleArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetMethodFromHandleArgs> m_target;
    public string typeName { get; }
    public string method { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetMethodFromHandleArgs(Action`1<EndGetMethodFromHandleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_method();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetMethodFromHandleArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetMethodFromHandleArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRequestStreamArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRequestStreamArgs> m_target;
    public long id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRequestStreamArgs(Action`1<EndGetRequestStreamArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRequestStreamArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRequestStreamArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetResponseArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetResponseArgs> m_target;
    public long id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetResponseArgs(Action`1<EndGetResponseArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetResponseArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetResponseArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeConstructorsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeConstructorsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeConstructorsArgs(Action`1<EndGetRuntimeConstructorsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeConstructorsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeConstructorsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeEventArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeEventArgs> m_target;
    public string typeName { get; }
    public string eventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeEventArgs(Action`1<EndGetRuntimeEventArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_eventName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeEventArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeEventsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeEventsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeEventsArgs(Action`1<EndGetRuntimeEventsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeEventsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeEventsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeFieldArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeFieldArgs> m_target;
    public string typeName { get; }
    public string fieldName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeFieldArgs(Action`1<EndGetRuntimeFieldArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_fieldName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeFieldArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeFieldArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeFieldsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeFieldsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeFieldsArgs(Action`1<EndGetRuntimeFieldsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeFieldsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeFieldsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeMembersArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeMembersArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeMembersArgs(Action`1<EndGetRuntimeMembersArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeMembersArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeMembersArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeMethodArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeMethodArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeMethodArgs(Action`1<EndGetRuntimeMethodArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeMethodArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeMethodArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimeMethodsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimeMethodsArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimeMethodsArgs(Action`1<EndGetRuntimeMethodsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimeMethodsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimeMethodsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimePropertiesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimePropertiesArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimePropertiesArgs(Action`1<EndGetRuntimePropertiesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimePropertiesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimePropertiesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndGetRuntimePropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndGetRuntimePropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndGetRuntimePropertyArgs(Action`1<EndGetRuntimePropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndGetRuntimePropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndGetRuntimePropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndICustomPropertyProviderCreateIndexedPropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    public string indexedParamTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndICustomPropertyProviderCreateIndexedPropertyArgs(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    public string get_indexedParamTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndICustomPropertyProviderCreatePropertyArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndICustomPropertyProviderCreatePropertyArgs> m_target;
    public string typeName { get; }
    public string propertyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndICustomPropertyProviderCreatePropertyArgs(Action`1<EndICustomPropertyProviderCreatePropertyArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_propertyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndICustomPropertyProviderCreatePropertyArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndICustomPropertyProviderCreatePropertyArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndMarshalOffsetOfArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndMarshalOffsetOfArgs> m_target;
    public string typeName { get; }
    public string fieldName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndMarshalOffsetOfArgs(Action`1<EndMarshalOffsetOfArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_fieldName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndMarshalOffsetOfArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndMarshalOffsetOfArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndMarshalPtrToStructureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndMarshalPtrToStructureArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndMarshalPtrToStructureArgs(Action`1<EndMarshalPtrToStructureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndMarshalPtrToStructureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndMarshalPtrToStructureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndMethodInfoCreateDelegateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndMethodInfoCreateDelegateArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    public string delegateTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndMethodInfoCreateDelegateArgs(Action`1<EndMethodInfoCreateDelegateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    public string get_delegateTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndMethodInfoCreateDelegateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndMethodInfoCreateDelegateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EndTypeAssemblyQualifiedNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EndTypeAssemblyQualifiedNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EndTypeAssemblyQualifiedNameArgs(Action`1<EndTypeAssemblyQualifiedNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EndTypeAssemblyQualifiedNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EndTypeAssemblyQualifiedNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumGetNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumGetNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumGetNameArgs(Action`1<EnumGetNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumGetNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumGetNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumGetNamesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumGetNamesArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumGetNamesArgs(Action`1<EnumGetNamesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumGetNamesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumGetNamesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumGetUnderlyingTypeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumGetUnderlyingTypeArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumGetUnderlyingTypeArgs(Action`1<EnumGetUnderlyingTypeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumGetUnderlyingTypeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumGetUnderlyingTypeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumGetValuesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumGetValuesArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumGetValuesArgs(Action`1<EnumGetValuesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumGetValuesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumGetValuesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumIsDefinedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumIsDefinedArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumIsDefinedArgs(Action`1<EnumIsDefinedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumIsDefinedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumIsDefinedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumToObjectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumToObjectArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumToObjectArgs(Action`1<EnumToObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumToObjectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumToObjectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EnumTryParseEnumArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnumTryParseEnumArgs> m_target;
    public string typeName { get; }
    public string value { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnumTryParseEnumArgs(Action`1<EnumTryParseEnumArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_value();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EnumTryParseEnumArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EnumTryParseEnumArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.EventNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EventNameArgs> m_target;
    public string typeName { get; }
    public string eventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EventNameArgs(Action`1<EventNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_eventName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<EventNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<EventNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.FieldNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FieldNameArgs> m_target;
    public string typeName { get; }
    public string fieldName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FieldNameArgs(Action`1<FieldNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_fieldName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<FieldNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<FieldNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.IntrospectionExtensionsGetTypeInfoArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IntrospectionExtensionsGetTypeInfoArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IntrospectionExtensionsGetTypeInfoArgs(Action`1<IntrospectionExtensionsGetTypeInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IntrospectionExtensionsGetTypeInfoArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IntrospectionExtensionsGetTypeInfoArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ManagedActivationFactoryConstructorArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ManagedActivationFactoryConstructorArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ManagedActivationFactoryConstructorArgs(Action`1<ManagedActivationFactoryConstructorArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ManagedActivationFactoryConstructorArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ManagedActivationFactoryConstructorArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalAsAnyConvertToManagedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalAsAnyConvertToManagedArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalAsAnyConvertToManagedArgs(Action`1<MarshalAsAnyConvertToManagedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalAsAnyConvertToManagedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalAsAnyConvertToManagedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalAsAnyConvertToNativeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalAsAnyConvertToNativeArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalAsAnyConvertToNativeArgs(Action`1<MarshalAsAnyConvertToNativeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalAsAnyConvertToNativeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalAsAnyConvertToNativeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalCreateAggregatedObjectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalCreateAggregatedObjectArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalCreateAggregatedObjectArgs(Action`1<MarshalCreateAggregatedObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalCreateAggregatedObjectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalCreateAggregatedObjectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalCreateWrapperOfTypeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalCreateWrapperOfTypeArgs> m_target;
    public string comObjectTypeName { get; }
    public string wrapperTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalCreateWrapperOfTypeArgs(Action`1<MarshalCreateWrapperOfTypeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_comObjectTypeName();
    public string get_wrapperTypeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalCreateWrapperOfTypeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalCreateWrapperOfTypeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalDestroyStructureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalDestroyStructureArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalDestroyStructureArgs(Action`1<MarshalDestroyStructureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalDestroyStructureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalDestroyStructureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetComInterfaceForObjectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetComInterfaceForObjectArgs> m_target;
    public string objectTypeName { get; }
    public string typeName { get; }
    public string implementsAndMode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetComInterfaceForObjectArgs(Action`1<MarshalGetComInterfaceForObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_objectTypeName();
    public string get_typeName();
    public string get_implementsAndMode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetComInterfaceForObjectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetComInterfaceForObjectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetDelegateForFunctionPointerArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetDelegateForFunctionPointerArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetDelegateForFunctionPointerArgs(Action`1<MarshalGetDelegateForFunctionPointerArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetDelegateForFunctionPointerArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetDelegateForFunctionPointerArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetFunctionPointerForDelegateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetFunctionPointerForDelegateArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetFunctionPointerForDelegateArgs(Action`1<MarshalGetFunctionPointerForDelegateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetFunctionPointerForDelegateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetFunctionPointerForDelegateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetIUnknownForObjectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetIUnknownForObjectArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetIUnknownForObjectArgs(Action`1<MarshalGetIUnknownForObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetIUnknownForObjectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetIUnknownForObjectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetNativeVariantForObjectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetNativeVariantForObjectArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetNativeVariantForObjectArgs(Action`1<MarshalGetNativeVariantForObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetNativeVariantForObjectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetNativeVariantForObjectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetObjectForIUnknownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetObjectForIUnknownArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetObjectForIUnknownArgs(Action`1<MarshalGetObjectForIUnknownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetObjectForIUnknownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetObjectForIUnknownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetObjectForNativeVariantArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetObjectForNativeVariantArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetObjectForNativeVariantArgs(Action`1<MarshalGetObjectForNativeVariantArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetObjectForNativeVariantArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetObjectForNativeVariantArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetObjectsForNativeVariantsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetObjectsForNativeVariantsArgs> m_target;
    public string typeNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetObjectsForNativeVariantsArgs(Action`1<MarshalGetObjectsForNativeVariantsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeNames();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetObjectsForNativeVariantsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetObjectsForNativeVariantsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetStartComSlotArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetStartComSlotArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetStartComSlotArgs(Action`1<MarshalGetStartComSlotArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetStartComSlotArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetStartComSlotArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetTypeFromCLSIDArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetTypeFromCLSIDArgs> m_target;
    public string typeName { get; }
    public string guid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetTypeFromCLSIDArgs(Action`1<MarshalGetTypeFromCLSIDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_guid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetTypeFromCLSIDArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetTypeFromCLSIDArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetTypeInfoNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetTypeInfoNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetTypeInfoNameArgs(Action`1<MarshalGetTypeInfoNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetTypeInfoNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetTypeInfoNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalGetUniqueObjectForIUnknownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalGetUniqueObjectForIUnknownArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalGetUniqueObjectForIUnknownArgs(Action`1<MarshalGetUniqueObjectForIUnknownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalGetUniqueObjectForIUnknownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalGetUniqueObjectForIUnknownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalSizeOfArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalSizeOfArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalSizeOfArgs(Action`1<MarshalSizeOfArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalSizeOfArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalSizeOfArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalStructureToPtrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalStructureToPtrArgs> m_target;
    public string typeName { get; }
    public string deleteOld { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalStructureToPtrArgs(Action`1<MarshalStructureToPtrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_deleteOld();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalStructureToPtrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalStructureToPtrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MarshalUnsafeAddrOfPinnedArrayElementArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MarshalUnsafeAddrOfPinnedArrayElementArgs(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MethodInfoInvokeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodInfoInvokeArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodInfoInvokeArgs(Action`1<MethodInfoInvokeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MethodInfoInvokeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MethodInfoInvokeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.MethodNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodNameArgs> m_target;
    public string typeName { get; }
    public string methodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodNameArgs(Action`1<MethodNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    public string get_methodName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MethodNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MethodNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.QueryAttributeIsDefinedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<QueryAttributeIsDefinedArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal QueryAttributeIsDefinedArgs(Action`1<QueryAttributeIsDefinedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<QueryAttributeIsDefinedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<QueryAttributeIsDefinedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerAddingCultureFromConfigFileArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerAddingCultureFromConfigFileArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerAddingCultureFromConfigFileArgs(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string assemblyName { get; }
    public string resourceFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_assemblyName();
    public string get_resourceFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string assemblyName { get; }
    public string resourceFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_assemblyName();
    public string get_resourceFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerCreatingResourceSetArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerCreatingResourceSetArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    public string fileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerCreatingResourceSetArgs(Action`1<ResourceManagerCreatingResourceSetArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    public string get_fileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerCreatingResourceSetArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerCreatingResourceSetArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerCultureFoundInConfigFileArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerCultureFoundInConfigFileArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerCultureFoundInConfigFileArgs(Action`1<ResourceManagerCultureFoundInConfigFileArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerCultureFoundInConfigFileArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerCultureFoundInConfigFileArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerCultureNotFoundInConfigFileArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerCultureNotFoundInConfigFileArgs(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerFoundResourceSetInCacheArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerFoundResourceSetInCacheArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerFoundResourceSetInCacheArgs(Action`1<ResourceManagerFoundResourceSetInCacheArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerFoundResourceSetInCacheArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerFoundResourceSetInCacheArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerFoundResourceSetInCacheUnexpectedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerFoundResourceSetInCacheUnexpectedArgs(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerGetSatelliteAssemblyFailedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    public string assemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerGetSatelliteAssemblyFailedArgs(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    public string get_assemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerGetSatelliteAssemblySucceededArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    public string assemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerGetSatelliteAssemblySucceededArgs(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    public string get_assemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerLookingForResourceSetArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerLookingForResourceSetArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerLookingForResourceSetArgs(Action`1<ResourceManagerLookingForResourceSetArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerLookingForResourceSetArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerLookingForResourceSetArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerLookupFailedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerLookupFailedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerLookupFailedArgs(Action`1<ResourceManagerLookupFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerLookupFailedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerLookupFailedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerLookupStartedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerLookupStartedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerLookupStartedArgs(Action`1<ResourceManagerLookupStartedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerLookupStartedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerLookupStartedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerManifestResourceAccessDeniedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerManifestResourceAccessDeniedArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string assemblyName { get; }
    public string canonicalName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerManifestResourceAccessDeniedArgs(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_assemblyName();
    public string get_canonicalName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerNeutralResourceAttributeMissingArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> m_target;
    public string mainAssemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerNeutralResourceAttributeMissingArgs(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_mainAssemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerNeutralResourcesFoundArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerNeutralResourcesFoundArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string resName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerNeutralResourcesFoundArgs(Action`1<ResourceManagerNeutralResourcesFoundArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_resName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerNeutralResourcesFoundArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerNeutralResourcesFoundArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerNeutralResourcesNotFoundArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerNeutralResourcesNotFoundArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string resName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerNeutralResourcesNotFoundArgs(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_resName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerNeutralResourcesSufficientArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerNeutralResourcesSufficientArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerNeutralResourcesSufficientArgs(Action`1<ResourceManagerNeutralResourcesSufficientArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerNeutralResourcesSufficientArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerNeutralResourcesSufficientArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerNotCreatingResourceSetArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerNotCreatingResourceSetArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerNotCreatingResourceSetArgs(Action`1<ResourceManagerNotCreatingResourceSetArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerNotCreatingResourceSetArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerNotCreatingResourceSetArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerReleasingResourcesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerReleasingResourcesArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerReleasingResourcesArgs(Action`1<ResourceManagerReleasingResourcesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerReleasingResourcesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerReleasingResourcesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerStreamFoundArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerStreamFoundArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    public string loadedAssemblyName { get; }
    public string resourceFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerStreamFoundArgs(Action`1<ResourceManagerStreamFoundArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    public string get_loadedAssemblyName();
    public string get_resourceFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerStreamFoundArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerStreamFoundArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ResourceManagerStreamNotFoundArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ResourceManagerStreamNotFoundArgs> m_target;
    public string baseName { get; }
    public string mainAssemblyName { get; }
    public string cultureName { get; }
    public string loadedAssemblyName { get; }
    public string resourceFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ResourceManagerStreamNotFoundArgs(Action`1<ResourceManagerStreamNotFoundArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_baseName();
    public string get_mainAssemblyName();
    public string get_cultureName();
    public string get_loadedAssemblyName();
    public string get_resourceFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ResourceManagerStreamNotFoundArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ResourceManagerStreamNotFoundArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadPoolDequeueWorkArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolDequeueWorkArgs> m_target;
    public ulong WorkID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolDequeueWorkArgs(Action`1<ThreadPoolDequeueWorkArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_WorkID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ThreadPoolDequeueWorkArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ThreadPoolDequeueWorkArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadPoolEnqueueWorkArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolEnqueueWorkArgs> m_target;
    public ulong WorkID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadPoolEnqueueWorkArgs(Action`1<ThreadPoolEnqueueWorkArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_WorkID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ThreadPoolEnqueueWorkArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ThreadPoolEnqueueWorkArgs> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadTransferKind : Enum {
    public int value__;
    public static ThreadTransferKind Unknown;
    public static ThreadTransferKind ManagedTimers;
    public static ThreadTransferKind ManagedAsync;
    public static ThreadTransferKind WinRT;
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadTransferReceiveArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadTransferReceiveArgs> m_target;
    public ulong id { get; }
    public ThreadTransferKind kind { get; }
    public string info { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadTransferReceiveArgs(Action`1<ThreadTransferReceiveArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_id();
    public ThreadTransferKind get_kind();
    public string get_info();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ThreadTransferReceiveArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ThreadTransferReceiveArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadTransferReceiveHandledArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadTransferReceiveHandledArgs> m_target;
    public ulong id { get; }
    public ThreadTransferKind kind { get; }
    public string info { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadTransferReceiveHandledArgs(Action`1<ThreadTransferReceiveHandledArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_id();
    public ThreadTransferKind get_kind();
    public string get_info();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ThreadTransferReceiveHandledArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ThreadTransferReceiveHandledArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.ThreadTransferSendArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadTransferSendArgs> m_target;
    public ulong id { get; }
    public ThreadTransferKind kind { get; }
    public string info { get; }
    public bool multiDequeues { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadTransferSendArgs(Action`1<ThreadTransferSendArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_id();
    public ThreadTransferKind get_kind();
    public string get_info();
    public bool get_multiDequeues();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ThreadTransferSendArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ThreadTransferSendArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.TypeFullNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeFullNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeFullNameArgs(Action`1<TypeFullNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeFullNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeFullNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.TypeGetTypeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeGetTypeArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeGetTypeArgs(Action`1<TypeGetTypeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeGetTypeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeGetTypeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.TypeNameArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeNameArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeNameArgs(Action`1<TypeNameArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeNameArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeNameArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.TypeNamespaceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeNamespaceArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeNamespaceArgs(Action`1<TypeNamespaceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeNamespaceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeNamespaceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSource.WindowsRuntimeMarshalGetActivationFactoryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> m_target;
    public string typeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal WindowsRuntimeMarshalGetActivationFactoryArgs(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_typeName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.FrameworkEventSourceTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public FrameworkEventSourceTraceEventParser(TraceEventSource source);
    private static FrameworkEventSourceTraceEventParser();
    public void add_ActivatorCreateInstance(Action`1<ActivatorCreateInstanceArgs> value);
    public void remove_ActivatorCreateInstance(Action`1<ActivatorCreateInstanceArgs> value);
    public void add_ActivatorCreateInstanceT(Action`1<ActivatorCreateInstanceTArgs> value);
    public void remove_ActivatorCreateInstanceT(Action`1<ActivatorCreateInstanceTArgs> value);
    public void add_ArrayCreateInstance(Action`1<ArrayCreateInstanceArgs> value);
    public void remove_ArrayCreateInstance(Action`1<ArrayCreateInstanceArgs> value);
    public void add_AssemblyGetType(Action`1<AssemblyGetTypeArgs> value);
    public void remove_AssemblyGetType(Action`1<AssemblyGetTypeArgs> value);
    public void add_BeginCreateIReference(Action`1<EmptyTraceData> value);
    public void remove_BeginCreateIReference(Action`1<EmptyTraceData> value);
    public void add_BeginCustomPropertyImplGetValue(Action`1<BeginCustomPropertyImplGetValueArgs> value);
    public void remove_BeginCustomPropertyImplGetValue(Action`1<BeginCustomPropertyImplGetValueArgs> value);
    public void add_BeginCustomPropertyImplGetValueIndexValue(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> value);
    public void remove_BeginCustomPropertyImplGetValueIndexValue(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> value);
    public void add_BeginCustomPropertyImplSetValue(Action`1<BeginCustomPropertyImplSetValueArgs> value);
    public void remove_BeginCustomPropertyImplSetValue(Action`1<BeginCustomPropertyImplSetValueArgs> value);
    public void add_BeginCustomPropertyImplSetValueIndexValue(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> value);
    public void remove_BeginCustomPropertyImplSetValueIndexValue(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> value);
    public void add_BeginEnumFormat(Action`1<BeginEnumFormatArgs> value);
    public void remove_BeginEnumFormat(Action`1<BeginEnumFormatArgs> value);
    public void add_BeginGetFieldFromHandle(Action`1<EmptyTraceData> value);
    public void remove_BeginGetFieldFromHandle(Action`1<EmptyTraceData> value);
    public void add_BeginGetMethodFromHandle(Action`1<EmptyTraceData> value);
    public void remove_BeginGetMethodFromHandle(Action`1<EmptyTraceData> value);
    public void add_BeginGetRuntimeConstructors(Action`1<BeginGetRuntimeConstructorsArgs> value);
    public void remove_BeginGetRuntimeConstructors(Action`1<BeginGetRuntimeConstructorsArgs> value);
    public void add_BeginGetRuntimeEvent(Action`1<BeginGetRuntimeEventArgs> value);
    public void remove_BeginGetRuntimeEvent(Action`1<BeginGetRuntimeEventArgs> value);
    public void add_BeginGetRuntimeEvents(Action`1<BeginGetRuntimeEventsArgs> value);
    public void remove_BeginGetRuntimeEvents(Action`1<BeginGetRuntimeEventsArgs> value);
    public void add_BeginGetRuntimeField(Action`1<BeginGetRuntimeFieldArgs> value);
    public void remove_BeginGetRuntimeField(Action`1<BeginGetRuntimeFieldArgs> value);
    public void add_BeginGetRuntimeFields(Action`1<BeginGetRuntimeFieldsArgs> value);
    public void remove_BeginGetRuntimeFields(Action`1<BeginGetRuntimeFieldsArgs> value);
    public void add_BeginGetRuntimeMembers(Action`1<BeginGetRuntimeMembersArgs> value);
    public void remove_BeginGetRuntimeMembers(Action`1<BeginGetRuntimeMembersArgs> value);
    public void add_BeginGetRuntimeMethod(Action`1<BeginGetRuntimeMethodArgs> value);
    public void remove_BeginGetRuntimeMethod(Action`1<BeginGetRuntimeMethodArgs> value);
    public void add_BeginGetRuntimeMethods(Action`1<BeginGetRuntimeMethodsArgs> value);
    public void remove_BeginGetRuntimeMethods(Action`1<BeginGetRuntimeMethodsArgs> value);
    public void add_BeginGetRuntimeProperties(Action`1<BeginGetRuntimePropertiesArgs> value);
    public void remove_BeginGetRuntimeProperties(Action`1<BeginGetRuntimePropertiesArgs> value);
    public void add_BeginGetRuntimeProperty(Action`1<BeginGetRuntimePropertyArgs> value);
    public void remove_BeginGetRuntimeProperty(Action`1<BeginGetRuntimePropertyArgs> value);
    public void add_BeginICustomPropertyProviderCreateIndexedProperty(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> value);
    public void remove_BeginICustomPropertyProviderCreateIndexedProperty(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> value);
    public void add_BeginICustomPropertyProviderCreateProperty(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> value);
    public void remove_BeginICustomPropertyProviderCreateProperty(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> value);
    public void add_BeginMarshalOffsetOf(Action`1<BeginMarshalOffsetOfArgs> value);
    public void remove_BeginMarshalOffsetOf(Action`1<BeginMarshalOffsetOfArgs> value);
    public void add_BeginMarshalPtrToStructure(Action`1<BeginMarshalPtrToStructureArgs> value);
    public void remove_BeginMarshalPtrToStructure(Action`1<BeginMarshalPtrToStructureArgs> value);
    public void add_BeginMethodInfoCreateDelegate(Action`1<BeginMethodInfoCreateDelegateArgs> value);
    public void remove_BeginMethodInfoCreateDelegate(Action`1<BeginMethodInfoCreateDelegateArgs> value);
    public void add_BeginTypeAssemblyQualifiedName(Action`1<BeginTypeAssemblyQualifiedNameArgs> value);
    public void remove_BeginTypeAssemblyQualifiedName(Action`1<BeginTypeAssemblyQualifiedNameArgs> value);
    public void add_ConstructorInfoInvoke(Action`1<ConstructorInfoInvokeArgs> value);
    public void remove_ConstructorInfoInvoke(Action`1<ConstructorInfoInvokeArgs> value);
    public void add_EndCreateIReference(Action`1<EndCreateIReferenceArgs> value);
    public void remove_EndCreateIReference(Action`1<EndCreateIReferenceArgs> value);
    public void add_EndCustomPropertyImplGetValue(Action`1<EndCustomPropertyImplGetValueArgs> value);
    public void remove_EndCustomPropertyImplGetValue(Action`1<EndCustomPropertyImplGetValueArgs> value);
    public void add_EndCustomPropertyImplGetValueIndexValue(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> value);
    public void remove_EndCustomPropertyImplGetValueIndexValue(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> value);
    public void add_EndCustomPropertyImplSetValue(Action`1<EndCustomPropertyImplSetValueArgs> value);
    public void remove_EndCustomPropertyImplSetValue(Action`1<EndCustomPropertyImplSetValueArgs> value);
    public void add_EndCustomPropertyImplSetValueIndexValue(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> value);
    public void remove_EndCustomPropertyImplSetValueIndexValue(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> value);
    public void add_EndEnumFormat(Action`1<EndEnumFormatArgs> value);
    public void remove_EndEnumFormat(Action`1<EndEnumFormatArgs> value);
    public void add_EndGetFieldFromHandle(Action`1<EndGetFieldFromHandleArgs> value);
    public void remove_EndGetFieldFromHandle(Action`1<EndGetFieldFromHandleArgs> value);
    public void add_EndGetMethodFromHandle(Action`1<EndGetMethodFromHandleArgs> value);
    public void remove_EndGetMethodFromHandle(Action`1<EndGetMethodFromHandleArgs> value);
    public void add_EndGetRuntimeConstructors(Action`1<EndGetRuntimeConstructorsArgs> value);
    public void remove_EndGetRuntimeConstructors(Action`1<EndGetRuntimeConstructorsArgs> value);
    public void add_EndGetRuntimeEvent(Action`1<EndGetRuntimeEventArgs> value);
    public void remove_EndGetRuntimeEvent(Action`1<EndGetRuntimeEventArgs> value);
    public void add_EndGetRuntimeEvents(Action`1<EndGetRuntimeEventsArgs> value);
    public void remove_EndGetRuntimeEvents(Action`1<EndGetRuntimeEventsArgs> value);
    public void add_EndGetRuntimeField(Action`1<EndGetRuntimeFieldArgs> value);
    public void remove_EndGetRuntimeField(Action`1<EndGetRuntimeFieldArgs> value);
    public void add_EndGetRuntimeFields(Action`1<EndGetRuntimeFieldsArgs> value);
    public void remove_EndGetRuntimeFields(Action`1<EndGetRuntimeFieldsArgs> value);
    public void add_EndGetRuntimeMembers(Action`1<EndGetRuntimeMembersArgs> value);
    public void remove_EndGetRuntimeMembers(Action`1<EndGetRuntimeMembersArgs> value);
    public void add_EndGetRuntimeMethod(Action`1<EndGetRuntimeMethodArgs> value);
    public void remove_EndGetRuntimeMethod(Action`1<EndGetRuntimeMethodArgs> value);
    public void add_EndGetRuntimeMethods(Action`1<EndGetRuntimeMethodsArgs> value);
    public void remove_EndGetRuntimeMethods(Action`1<EndGetRuntimeMethodsArgs> value);
    public void add_EndGetRuntimeProperties(Action`1<EndGetRuntimePropertiesArgs> value);
    public void remove_EndGetRuntimeProperties(Action`1<EndGetRuntimePropertiesArgs> value);
    public void add_EndGetRuntimeProperty(Action`1<EndGetRuntimePropertyArgs> value);
    public void remove_EndGetRuntimeProperty(Action`1<EndGetRuntimePropertyArgs> value);
    public void add_EndICustomPropertyProviderCreateIndexedProperty(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> value);
    public void remove_EndICustomPropertyProviderCreateIndexedProperty(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> value);
    public void add_EndICustomPropertyProviderCreateProperty(Action`1<EndICustomPropertyProviderCreatePropertyArgs> value);
    public void remove_EndICustomPropertyProviderCreateProperty(Action`1<EndICustomPropertyProviderCreatePropertyArgs> value);
    public void add_EndMarshalOffsetOf(Action`1<EndMarshalOffsetOfArgs> value);
    public void remove_EndMarshalOffsetOf(Action`1<EndMarshalOffsetOfArgs> value);
    public void add_EndMarshalPtrToStructure(Action`1<EndMarshalPtrToStructureArgs> value);
    public void remove_EndMarshalPtrToStructure(Action`1<EndMarshalPtrToStructureArgs> value);
    public void add_EndMethodInfoCreateDelegate(Action`1<EndMethodInfoCreateDelegateArgs> value);
    public void remove_EndMethodInfoCreateDelegate(Action`1<EndMethodInfoCreateDelegateArgs> value);
    public void add_EndTypeAssemblyQualifiedName(Action`1<EndTypeAssemblyQualifiedNameArgs> value);
    public void remove_EndTypeAssemblyQualifiedName(Action`1<EndTypeAssemblyQualifiedNameArgs> value);
    public void add_EnumGetName(Action`1<EnumGetNameArgs> value);
    public void remove_EnumGetName(Action`1<EnumGetNameArgs> value);
    public void add_EnumGetNames(Action`1<EnumGetNamesArgs> value);
    public void remove_EnumGetNames(Action`1<EnumGetNamesArgs> value);
    public void add_EnumGetUnderlyingType(Action`1<EnumGetUnderlyingTypeArgs> value);
    public void remove_EnumGetUnderlyingType(Action`1<EnumGetUnderlyingTypeArgs> value);
    public void add_EnumGetValues(Action`1<EnumGetValuesArgs> value);
    public void remove_EnumGetValues(Action`1<EnumGetValuesArgs> value);
    public void add_EnumIsDefined(Action`1<EnumIsDefinedArgs> value);
    public void remove_EnumIsDefined(Action`1<EnumIsDefinedArgs> value);
    public void add_EnumToObject(Action`1<EnumToObjectArgs> value);
    public void remove_EnumToObject(Action`1<EnumToObjectArgs> value);
    public void add_EnumTryParseEnum(Action`1<EnumTryParseEnumArgs> value);
    public void remove_EnumTryParseEnum(Action`1<EnumTryParseEnumArgs> value);
    public void add_EventName(Action`1<EventNameArgs> value);
    public void remove_EventName(Action`1<EventNameArgs> value);
    public void add_FieldName(Action`1<FieldNameArgs> value);
    public void remove_FieldName(Action`1<FieldNameArgs> value);
    public void add_GetRequestStreamStart(Action`1<BeginGetRequestStreamArgs> value);
    public void remove_GetRequestStreamStart(Action`1<BeginGetRequestStreamArgs> value);
    public void add_GetRequestStreamStop(Action`1<EndGetRequestStreamArgs> value);
    public void remove_GetRequestStreamStop(Action`1<EndGetRequestStreamArgs> value);
    public void add_GetResponseStart(Action`1<BeginGetResponseArgs> value);
    public void remove_GetResponseStart(Action`1<BeginGetResponseArgs> value);
    public void add_GetResponseStop(Action`1<EndGetResponseArgs> value);
    public void remove_GetResponseStop(Action`1<EndGetResponseArgs> value);
    public void add_IntrospectionExtensionsGetTypeInfo(Action`1<IntrospectionExtensionsGetTypeInfoArgs> value);
    public void remove_IntrospectionExtensionsGetTypeInfo(Action`1<IntrospectionExtensionsGetTypeInfoArgs> value);
    public void add_ManagedActivationFactoryConstructor(Action`1<ManagedActivationFactoryConstructorArgs> value);
    public void remove_ManagedActivationFactoryConstructor(Action`1<ManagedActivationFactoryConstructorArgs> value);
    public void add_MarshalAsAnyConvertToManaged(Action`1<MarshalAsAnyConvertToManagedArgs> value);
    public void remove_MarshalAsAnyConvertToManaged(Action`1<MarshalAsAnyConvertToManagedArgs> value);
    public void add_MarshalAsAnyConvertToNative(Action`1<MarshalAsAnyConvertToNativeArgs> value);
    public void remove_MarshalAsAnyConvertToNative(Action`1<MarshalAsAnyConvertToNativeArgs> value);
    public void add_MarshalCreateAggregatedObject(Action`1<MarshalCreateAggregatedObjectArgs> value);
    public void remove_MarshalCreateAggregatedObject(Action`1<MarshalCreateAggregatedObjectArgs> value);
    public void add_MarshalCreateWrapperOfType(Action`1<MarshalCreateWrapperOfTypeArgs> value);
    public void remove_MarshalCreateWrapperOfType(Action`1<MarshalCreateWrapperOfTypeArgs> value);
    public void add_MarshalDestroyStructure(Action`1<MarshalDestroyStructureArgs> value);
    public void remove_MarshalDestroyStructure(Action`1<MarshalDestroyStructureArgs> value);
    public void add_MarshalGetComInterfaceForObject(Action`1<MarshalGetComInterfaceForObjectArgs> value);
    public void remove_MarshalGetComInterfaceForObject(Action`1<MarshalGetComInterfaceForObjectArgs> value);
    public void add_MarshalGetDelegateForFunctionPointer(Action`1<MarshalGetDelegateForFunctionPointerArgs> value);
    public void remove_MarshalGetDelegateForFunctionPointer(Action`1<MarshalGetDelegateForFunctionPointerArgs> value);
    public void add_MarshalGetExceptionCode(Action`1<EmptyTraceData> value);
    public void remove_MarshalGetExceptionCode(Action`1<EmptyTraceData> value);
    public void add_MarshalGetExceptionForHR(Action`1<EmptyTraceData> value);
    public void remove_MarshalGetExceptionForHR(Action`1<EmptyTraceData> value);
    public void add_MarshalGetExceptionForHR2(Action`1<EmptyTraceData> value);
    public void remove_MarshalGetExceptionForHR2(Action`1<EmptyTraceData> value);
    public void add_MarshalGetFunctionPointerForDelegate(Action`1<MarshalGetFunctionPointerForDelegateArgs> value);
    public void remove_MarshalGetFunctionPointerForDelegate(Action`1<MarshalGetFunctionPointerForDelegateArgs> value);
    public void add_MarshalGetIUnknownForObject(Action`1<MarshalGetIUnknownForObjectArgs> value);
    public void remove_MarshalGetIUnknownForObject(Action`1<MarshalGetIUnknownForObjectArgs> value);
    public void add_MarshalGetNativeVariantForObject(Action`1<MarshalGetNativeVariantForObjectArgs> value);
    public void remove_MarshalGetNativeVariantForObject(Action`1<MarshalGetNativeVariantForObjectArgs> value);
    public void add_MarshalGetObjectForIUnknown(Action`1<MarshalGetObjectForIUnknownArgs> value);
    public void remove_MarshalGetObjectForIUnknown(Action`1<MarshalGetObjectForIUnknownArgs> value);
    public void add_MarshalGetObjectForNativeVariant(Action`1<MarshalGetObjectForNativeVariantArgs> value);
    public void remove_MarshalGetObjectForNativeVariant(Action`1<MarshalGetObjectForNativeVariantArgs> value);
    public void add_MarshalGetObjectsForNativeVariants(Action`1<MarshalGetObjectsForNativeVariantsArgs> value);
    public void remove_MarshalGetObjectsForNativeVariants(Action`1<MarshalGetObjectsForNativeVariantsArgs> value);
    public void add_MarshalGetStartComSlot(Action`1<MarshalGetStartComSlotArgs> value);
    public void remove_MarshalGetStartComSlot(Action`1<MarshalGetStartComSlotArgs> value);
    public void add_MarshalGetTypeFromCLSID(Action`1<MarshalGetTypeFromCLSIDArgs> value);
    public void remove_MarshalGetTypeFromCLSID(Action`1<MarshalGetTypeFromCLSIDArgs> value);
    public void add_MarshalGetTypeInfoName(Action`1<MarshalGetTypeInfoNameArgs> value);
    public void remove_MarshalGetTypeInfoName(Action`1<MarshalGetTypeInfoNameArgs> value);
    public void add_MarshalGetUniqueObjectForIUnknown(Action`1<MarshalGetUniqueObjectForIUnknownArgs> value);
    public void remove_MarshalGetUniqueObjectForIUnknown(Action`1<MarshalGetUniqueObjectForIUnknownArgs> value);
    public void add_MarshalSizeOf(Action`1<MarshalSizeOfArgs> value);
    public void remove_MarshalSizeOf(Action`1<MarshalSizeOfArgs> value);
    public void add_MarshalStructureToPtr(Action`1<MarshalStructureToPtrArgs> value);
    public void remove_MarshalStructureToPtr(Action`1<MarshalStructureToPtrArgs> value);
    public void add_MarshalThrowExceptionForHR(Action`1<EmptyTraceData> value);
    public void remove_MarshalThrowExceptionForHR(Action`1<EmptyTraceData> value);
    public void add_MarshalThrowExceptionForHR2(Action`1<EmptyTraceData> value);
    public void remove_MarshalThrowExceptionForHR2(Action`1<EmptyTraceData> value);
    public void add_MarshalUnsafeAddrOfPinnedArrayElement(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> value);
    public void remove_MarshalUnsafeAddrOfPinnedArrayElement(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> value);
    public void add_MethodInfoInvoke(Action`1<MethodInfoInvokeArgs> value);
    public void remove_MethodInfoInvoke(Action`1<MethodInfoInvokeArgs> value);
    public void add_MethodName(Action`1<MethodNameArgs> value);
    public void remove_MethodName(Action`1<MethodNameArgs> value);
    public void add_QueryAttributeIsDefined(Action`1<QueryAttributeIsDefinedArgs> value);
    public void remove_QueryAttributeIsDefined(Action`1<QueryAttributeIsDefinedArgs> value);
    public void add_ResourceManagerAddingCultureFromConfigFile(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> value);
    public void remove_ResourceManagerAddingCultureFromConfigFile(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> value);
    public void add_ResourceManagerCaseInsensitiveResourceStreamLookupFailed(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> value);
    public void remove_ResourceManagerCaseInsensitiveResourceStreamLookupFailed(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> value);
    public void add_ResourceManagerCaseInsensitiveResourceStreamLookupSucceeded(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> value);
    public void remove_ResourceManagerCaseInsensitiveResourceStreamLookupSucceeded(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> value);
    public void add_ResourceManagerCreatingResourceSet(Action`1<ResourceManagerCreatingResourceSetArgs> value);
    public void remove_ResourceManagerCreatingResourceSet(Action`1<ResourceManagerCreatingResourceSetArgs> value);
    public void add_ResourceManagerCultureFoundInConfigFile(Action`1<ResourceManagerCultureFoundInConfigFileArgs> value);
    public void remove_ResourceManagerCultureFoundInConfigFile(Action`1<ResourceManagerCultureFoundInConfigFileArgs> value);
    public void add_ResourceManagerCultureNotFoundInConfigFile(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> value);
    public void remove_ResourceManagerCultureNotFoundInConfigFile(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> value);
    public void add_ResourceManagerFoundResourceSetInCache(Action`1<ResourceManagerFoundResourceSetInCacheArgs> value);
    public void remove_ResourceManagerFoundResourceSetInCache(Action`1<ResourceManagerFoundResourceSetInCacheArgs> value);
    public void add_ResourceManagerFoundResourceSetInCacheUnexpected(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> value);
    public void remove_ResourceManagerFoundResourceSetInCacheUnexpected(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> value);
    public void add_ResourceManagerGetSatelliteAssemblyFailed(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> value);
    public void remove_ResourceManagerGetSatelliteAssemblyFailed(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> value);
    public void add_ResourceManagerGetSatelliteAssemblySucceeded(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> value);
    public void remove_ResourceManagerGetSatelliteAssemblySucceeded(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> value);
    public void add_ResourceManagerLookingForResourceSet(Action`1<ResourceManagerLookingForResourceSetArgs> value);
    public void remove_ResourceManagerLookingForResourceSet(Action`1<ResourceManagerLookingForResourceSetArgs> value);
    public void add_ResourceManagerLookupFailed(Action`1<ResourceManagerLookupFailedArgs> value);
    public void remove_ResourceManagerLookupFailed(Action`1<ResourceManagerLookupFailedArgs> value);
    public void add_ResourceManagerLookupStarted(Action`1<ResourceManagerLookupStartedArgs> value);
    public void remove_ResourceManagerLookupStarted(Action`1<ResourceManagerLookupStartedArgs> value);
    public void add_ResourceManagerManifestResourceAccessDenied(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> value);
    public void remove_ResourceManagerManifestResourceAccessDenied(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> value);
    public void add_ResourceManagerNeutralResourceAttributeMissing(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> value);
    public void remove_ResourceManagerNeutralResourceAttributeMissing(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> value);
    public void add_ResourceManagerNeutralResourcesFound(Action`1<ResourceManagerNeutralResourcesFoundArgs> value);
    public void remove_ResourceManagerNeutralResourcesFound(Action`1<ResourceManagerNeutralResourcesFoundArgs> value);
    public void add_ResourceManagerNeutralResourcesNotFound(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> value);
    public void remove_ResourceManagerNeutralResourcesNotFound(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> value);
    public void add_ResourceManagerNeutralResourcesSufficient(Action`1<ResourceManagerNeutralResourcesSufficientArgs> value);
    public void remove_ResourceManagerNeutralResourcesSufficient(Action`1<ResourceManagerNeutralResourcesSufficientArgs> value);
    public void add_ResourceManagerNotCreatingResourceSet(Action`1<ResourceManagerNotCreatingResourceSetArgs> value);
    public void remove_ResourceManagerNotCreatingResourceSet(Action`1<ResourceManagerNotCreatingResourceSetArgs> value);
    public void add_ResourceManagerReleasingResources(Action`1<ResourceManagerReleasingResourcesArgs> value);
    public void remove_ResourceManagerReleasingResources(Action`1<ResourceManagerReleasingResourcesArgs> value);
    public void add_ResourceManagerStreamFound(Action`1<ResourceManagerStreamFoundArgs> value);
    public void remove_ResourceManagerStreamFound(Action`1<ResourceManagerStreamFoundArgs> value);
    public void add_ResourceManagerStreamNotFound(Action`1<ResourceManagerStreamNotFoundArgs> value);
    public void remove_ResourceManagerStreamNotFound(Action`1<ResourceManagerStreamNotFoundArgs> value);
    public void add_ThreadPoolDequeueWork(Action`1<ThreadPoolDequeueWorkArgs> value);
    public void remove_ThreadPoolDequeueWork(Action`1<ThreadPoolDequeueWorkArgs> value);
    public void add_ThreadPoolEnqueueWork(Action`1<ThreadPoolEnqueueWorkArgs> value);
    public void remove_ThreadPoolEnqueueWork(Action`1<ThreadPoolEnqueueWorkArgs> value);
    public void add_ThreadTransferReceive(Action`1<ThreadTransferReceiveArgs> value);
    public void remove_ThreadTransferReceive(Action`1<ThreadTransferReceiveArgs> value);
    public void add_ThreadTransferReceiveHandled(Action`1<ThreadTransferReceiveHandledArgs> value);
    public void remove_ThreadTransferReceiveHandled(Action`1<ThreadTransferReceiveHandledArgs> value);
    public void add_ThreadTransferSend(Action`1<ThreadTransferSendArgs> value);
    public void remove_ThreadTransferSend(Action`1<ThreadTransferSendArgs> value);
    public void add_TypeFullName(Action`1<TypeFullNameArgs> value);
    public void remove_TypeFullName(Action`1<TypeFullNameArgs> value);
    public void add_TypeGetType(Action`1<TypeGetTypeArgs> value);
    public void remove_TypeGetType(Action`1<TypeGetTypeArgs> value);
    public void add_TypeName(Action`1<TypeNameArgs> value);
    public void remove_TypeName(Action`1<TypeNameArgs> value);
    public void add_TypeNamespace(Action`1<TypeNamespaceArgs> value);
    public void remove_TypeNamespace(Action`1<TypeNamespaceArgs> value);
    public void add_WindowsRuntimeMarshalGetActivationFactory(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> value);
    public void remove_WindowsRuntimeMarshalGetActivationFactory(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> value);
    protected virtual string GetProviderName();
    private static ActivatorCreateInstanceArgs ActivatorCreateInstanceTemplate(Action`1<ActivatorCreateInstanceArgs> action);
    private static ActivatorCreateInstanceTArgs ActivatorCreateInstanceTTemplate(Action`1<ActivatorCreateInstanceTArgs> action);
    private static ArrayCreateInstanceArgs ArrayCreateInstanceTemplate(Action`1<ArrayCreateInstanceArgs> action);
    private static AssemblyGetTypeArgs AssemblyGetTypeTemplate(Action`1<AssemblyGetTypeArgs> action);
    private static EmptyTraceData BeginCreateIReferenceTemplate(Action`1<EmptyTraceData> action);
    private static BeginCustomPropertyImplGetValueArgs BeginCustomPropertyImplGetValueTemplate(Action`1<BeginCustomPropertyImplGetValueArgs> action);
    private static BeginCustomPropertyImplGetValueIndexValueArgs BeginCustomPropertyImplGetValueIndexValueTemplate(Action`1<BeginCustomPropertyImplGetValueIndexValueArgs> action);
    private static BeginCustomPropertyImplSetValueArgs BeginCustomPropertyImplSetValueTemplate(Action`1<BeginCustomPropertyImplSetValueArgs> action);
    private static BeginCustomPropertyImplSetValueIndexValueArgs BeginCustomPropertyImplSetValueIndexValueTemplate(Action`1<BeginCustomPropertyImplSetValueIndexValueArgs> action);
    private static BeginEnumFormatArgs BeginEnumFormatTemplate(Action`1<BeginEnumFormatArgs> action);
    private static EmptyTraceData BeginGetFieldFromHandleTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData BeginGetMethodFromHandleTemplate(Action`1<EmptyTraceData> action);
    private static BeginGetRuntimeConstructorsArgs BeginGetRuntimeConstructorsTemplate(Action`1<BeginGetRuntimeConstructorsArgs> action);
    private static BeginGetRuntimeEventArgs BeginGetRuntimeEventTemplate(Action`1<BeginGetRuntimeEventArgs> action);
    private static BeginGetRuntimeEventsArgs BeginGetRuntimeEventsTemplate(Action`1<BeginGetRuntimeEventsArgs> action);
    private static BeginGetRuntimeFieldArgs BeginGetRuntimeFieldTemplate(Action`1<BeginGetRuntimeFieldArgs> action);
    private static BeginGetRuntimeFieldsArgs BeginGetRuntimeFieldsTemplate(Action`1<BeginGetRuntimeFieldsArgs> action);
    private static BeginGetRuntimeMembersArgs BeginGetRuntimeMembersTemplate(Action`1<BeginGetRuntimeMembersArgs> action);
    private static BeginGetRuntimeMethodArgs BeginGetRuntimeMethodTemplate(Action`1<BeginGetRuntimeMethodArgs> action);
    private static BeginGetRuntimeMethodsArgs BeginGetRuntimeMethodsTemplate(Action`1<BeginGetRuntimeMethodsArgs> action);
    private static BeginGetRuntimePropertiesArgs BeginGetRuntimePropertiesTemplate(Action`1<BeginGetRuntimePropertiesArgs> action);
    private static BeginGetRuntimePropertyArgs BeginGetRuntimePropertyTemplate(Action`1<BeginGetRuntimePropertyArgs> action);
    private static BeginICustomPropertyProviderCreateIndexedPropertyArgs BeginICustomPropertyProviderCreateIndexedPropertyTemplate(Action`1<BeginICustomPropertyProviderCreateIndexedPropertyArgs> action);
    private static BeginICustomPropertyProviderCreatePropertyArgs BeginICustomPropertyProviderCreatePropertyTemplate(Action`1<BeginICustomPropertyProviderCreatePropertyArgs> action);
    private static BeginMarshalOffsetOfArgs BeginMarshalOffsetOfTemplate(Action`1<BeginMarshalOffsetOfArgs> action);
    private static BeginMarshalPtrToStructureArgs BeginMarshalPtrToStructureTemplate(Action`1<BeginMarshalPtrToStructureArgs> action);
    private static BeginMethodInfoCreateDelegateArgs BeginMethodInfoCreateDelegateTemplate(Action`1<BeginMethodInfoCreateDelegateArgs> action);
    private static BeginTypeAssemblyQualifiedNameArgs BeginTypeAssemblyQualifiedNameTemplate(Action`1<BeginTypeAssemblyQualifiedNameArgs> action);
    private static ConstructorInfoInvokeArgs ConstructorInfoInvokeTemplate(Action`1<ConstructorInfoInvokeArgs> action);
    private static EndCreateIReferenceArgs EndCreateIReferenceTemplate(Action`1<EndCreateIReferenceArgs> action);
    private static EndCustomPropertyImplGetValueArgs EndCustomPropertyImplGetValueTemplate(Action`1<EndCustomPropertyImplGetValueArgs> action);
    private static EndCustomPropertyImplGetValueIndexValueArgs EndCustomPropertyImplGetValueIndexValueTemplate(Action`1<EndCustomPropertyImplGetValueIndexValueArgs> action);
    private static EndCustomPropertyImplSetValueArgs EndCustomPropertyImplSetValueTemplate(Action`1<EndCustomPropertyImplSetValueArgs> action);
    private static EndCustomPropertyImplSetValueIndexValueArgs EndCustomPropertyImplSetValueIndexValueTemplate(Action`1<EndCustomPropertyImplSetValueIndexValueArgs> action);
    private static EndEnumFormatArgs EndEnumFormatTemplate(Action`1<EndEnumFormatArgs> action);
    private static EndGetFieldFromHandleArgs EndGetFieldFromHandleTemplate(Action`1<EndGetFieldFromHandleArgs> action);
    private static EndGetMethodFromHandleArgs EndGetMethodFromHandleTemplate(Action`1<EndGetMethodFromHandleArgs> action);
    private static EndGetRuntimeConstructorsArgs EndGetRuntimeConstructorsTemplate(Action`1<EndGetRuntimeConstructorsArgs> action);
    private static EndGetRuntimeEventArgs EndGetRuntimeEventTemplate(Action`1<EndGetRuntimeEventArgs> action);
    private static EndGetRuntimeEventsArgs EndGetRuntimeEventsTemplate(Action`1<EndGetRuntimeEventsArgs> action);
    private static EndGetRuntimeFieldArgs EndGetRuntimeFieldTemplate(Action`1<EndGetRuntimeFieldArgs> action);
    private static EndGetRuntimeFieldsArgs EndGetRuntimeFieldsTemplate(Action`1<EndGetRuntimeFieldsArgs> action);
    private static EndGetRuntimeMembersArgs EndGetRuntimeMembersTemplate(Action`1<EndGetRuntimeMembersArgs> action);
    private static EndGetRuntimeMethodArgs EndGetRuntimeMethodTemplate(Action`1<EndGetRuntimeMethodArgs> action);
    private static EndGetRuntimeMethodsArgs EndGetRuntimeMethodsTemplate(Action`1<EndGetRuntimeMethodsArgs> action);
    private static EndGetRuntimePropertiesArgs EndGetRuntimePropertiesTemplate(Action`1<EndGetRuntimePropertiesArgs> action);
    private static EndGetRuntimePropertyArgs EndGetRuntimePropertyTemplate(Action`1<EndGetRuntimePropertyArgs> action);
    private static EndICustomPropertyProviderCreateIndexedPropertyArgs EndICustomPropertyProviderCreateIndexedPropertyTemplate(Action`1<EndICustomPropertyProviderCreateIndexedPropertyArgs> action);
    private static EndICustomPropertyProviderCreatePropertyArgs EndICustomPropertyProviderCreatePropertyTemplate(Action`1<EndICustomPropertyProviderCreatePropertyArgs> action);
    private static EndMarshalOffsetOfArgs EndMarshalOffsetOfTemplate(Action`1<EndMarshalOffsetOfArgs> action);
    private static EndMarshalPtrToStructureArgs EndMarshalPtrToStructureTemplate(Action`1<EndMarshalPtrToStructureArgs> action);
    private static EndMethodInfoCreateDelegateArgs EndMethodInfoCreateDelegateTemplate(Action`1<EndMethodInfoCreateDelegateArgs> action);
    private static EndTypeAssemblyQualifiedNameArgs EndTypeAssemblyQualifiedNameTemplate(Action`1<EndTypeAssemblyQualifiedNameArgs> action);
    private static EnumGetNameArgs EnumGetNameTemplate(Action`1<EnumGetNameArgs> action);
    private static EnumGetNamesArgs EnumGetNamesTemplate(Action`1<EnumGetNamesArgs> action);
    private static EnumGetUnderlyingTypeArgs EnumGetUnderlyingTypeTemplate(Action`1<EnumGetUnderlyingTypeArgs> action);
    private static EnumGetValuesArgs EnumGetValuesTemplate(Action`1<EnumGetValuesArgs> action);
    private static EnumIsDefinedArgs EnumIsDefinedTemplate(Action`1<EnumIsDefinedArgs> action);
    private static EnumToObjectArgs EnumToObjectTemplate(Action`1<EnumToObjectArgs> action);
    private static EnumTryParseEnumArgs EnumTryParseEnumTemplate(Action`1<EnumTryParseEnumArgs> action);
    private static EventNameArgs EventNameTemplate(Action`1<EventNameArgs> action);
    private static FieldNameArgs FieldNameTemplate(Action`1<FieldNameArgs> action);
    private static BeginGetRequestStreamArgs GetRequestStreamStartTemplate(Action`1<BeginGetRequestStreamArgs> action);
    private static EndGetRequestStreamArgs GetRequestStreamStopTemplate(Action`1<EndGetRequestStreamArgs> action);
    private static BeginGetResponseArgs GetResponseStartTemplate(Action`1<BeginGetResponseArgs> action);
    private static EndGetResponseArgs GetResponseStopTemplate(Action`1<EndGetResponseArgs> action);
    private static IntrospectionExtensionsGetTypeInfoArgs IntrospectionExtensionsGetTypeInfoTemplate(Action`1<IntrospectionExtensionsGetTypeInfoArgs> action);
    private static ManagedActivationFactoryConstructorArgs ManagedActivationFactoryConstructorTemplate(Action`1<ManagedActivationFactoryConstructorArgs> action);
    private static MarshalAsAnyConvertToManagedArgs MarshalAsAnyConvertToManagedTemplate(Action`1<MarshalAsAnyConvertToManagedArgs> action);
    private static MarshalAsAnyConvertToNativeArgs MarshalAsAnyConvertToNativeTemplate(Action`1<MarshalAsAnyConvertToNativeArgs> action);
    private static MarshalCreateAggregatedObjectArgs MarshalCreateAggregatedObjectTemplate(Action`1<MarshalCreateAggregatedObjectArgs> action);
    private static MarshalCreateWrapperOfTypeArgs MarshalCreateWrapperOfTypeTemplate(Action`1<MarshalCreateWrapperOfTypeArgs> action);
    private static MarshalDestroyStructureArgs MarshalDestroyStructureTemplate(Action`1<MarshalDestroyStructureArgs> action);
    private static MarshalGetComInterfaceForObjectArgs MarshalGetComInterfaceForObjectTemplate(Action`1<MarshalGetComInterfaceForObjectArgs> action);
    private static MarshalGetDelegateForFunctionPointerArgs MarshalGetDelegateForFunctionPointerTemplate(Action`1<MarshalGetDelegateForFunctionPointerArgs> action);
    private static EmptyTraceData MarshalGetExceptionCodeTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData MarshalGetExceptionForHRTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData MarshalGetExceptionForHR2Template(Action`1<EmptyTraceData> action);
    private static MarshalGetFunctionPointerForDelegateArgs MarshalGetFunctionPointerForDelegateTemplate(Action`1<MarshalGetFunctionPointerForDelegateArgs> action);
    private static MarshalGetIUnknownForObjectArgs MarshalGetIUnknownForObjectTemplate(Action`1<MarshalGetIUnknownForObjectArgs> action);
    private static MarshalGetNativeVariantForObjectArgs MarshalGetNativeVariantForObjectTemplate(Action`1<MarshalGetNativeVariantForObjectArgs> action);
    private static MarshalGetObjectForIUnknownArgs MarshalGetObjectForIUnknownTemplate(Action`1<MarshalGetObjectForIUnknownArgs> action);
    private static MarshalGetObjectForNativeVariantArgs MarshalGetObjectForNativeVariantTemplate(Action`1<MarshalGetObjectForNativeVariantArgs> action);
    private static MarshalGetObjectsForNativeVariantsArgs MarshalGetObjectsForNativeVariantsTemplate(Action`1<MarshalGetObjectsForNativeVariantsArgs> action);
    private static MarshalGetStartComSlotArgs MarshalGetStartComSlotTemplate(Action`1<MarshalGetStartComSlotArgs> action);
    private static MarshalGetTypeFromCLSIDArgs MarshalGetTypeFromCLSIDTemplate(Action`1<MarshalGetTypeFromCLSIDArgs> action);
    private static MarshalGetTypeInfoNameArgs MarshalGetTypeInfoNameTemplate(Action`1<MarshalGetTypeInfoNameArgs> action);
    private static MarshalGetUniqueObjectForIUnknownArgs MarshalGetUniqueObjectForIUnknownTemplate(Action`1<MarshalGetUniqueObjectForIUnknownArgs> action);
    private static MarshalSizeOfArgs MarshalSizeOfTemplate(Action`1<MarshalSizeOfArgs> action);
    private static MarshalStructureToPtrArgs MarshalStructureToPtrTemplate(Action`1<MarshalStructureToPtrArgs> action);
    private static EmptyTraceData MarshalThrowExceptionForHRTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData MarshalThrowExceptionForHR2Template(Action`1<EmptyTraceData> action);
    private static MarshalUnsafeAddrOfPinnedArrayElementArgs MarshalUnsafeAddrOfPinnedArrayElementTemplate(Action`1<MarshalUnsafeAddrOfPinnedArrayElementArgs> action);
    private static MethodInfoInvokeArgs MethodInfoInvokeTemplate(Action`1<MethodInfoInvokeArgs> action);
    private static MethodNameArgs MethodNameTemplate(Action`1<MethodNameArgs> action);
    private static QueryAttributeIsDefinedArgs QueryAttributeIsDefinedTemplate(Action`1<QueryAttributeIsDefinedArgs> action);
    private static ResourceManagerAddingCultureFromConfigFileArgs ResourceManagerAddingCultureFromConfigFileTemplate(Action`1<ResourceManagerAddingCultureFromConfigFileArgs> action);
    private static ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs ResourceManagerCaseInsensitiveResourceStreamLookupFailedTemplate(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupFailedArgs> action);
    private static ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs ResourceManagerCaseInsensitiveResourceStreamLookupSucceededTemplate(Action`1<ResourceManagerCaseInsensitiveResourceStreamLookupSucceededArgs> action);
    private static ResourceManagerCreatingResourceSetArgs ResourceManagerCreatingResourceSetTemplate(Action`1<ResourceManagerCreatingResourceSetArgs> action);
    private static ResourceManagerCultureFoundInConfigFileArgs ResourceManagerCultureFoundInConfigFileTemplate(Action`1<ResourceManagerCultureFoundInConfigFileArgs> action);
    private static ResourceManagerCultureNotFoundInConfigFileArgs ResourceManagerCultureNotFoundInConfigFileTemplate(Action`1<ResourceManagerCultureNotFoundInConfigFileArgs> action);
    private static ResourceManagerFoundResourceSetInCacheArgs ResourceManagerFoundResourceSetInCacheTemplate(Action`1<ResourceManagerFoundResourceSetInCacheArgs> action);
    private static ResourceManagerFoundResourceSetInCacheUnexpectedArgs ResourceManagerFoundResourceSetInCacheUnexpectedTemplate(Action`1<ResourceManagerFoundResourceSetInCacheUnexpectedArgs> action);
    private static ResourceManagerGetSatelliteAssemblyFailedArgs ResourceManagerGetSatelliteAssemblyFailedTemplate(Action`1<ResourceManagerGetSatelliteAssemblyFailedArgs> action);
    private static ResourceManagerGetSatelliteAssemblySucceededArgs ResourceManagerGetSatelliteAssemblySucceededTemplate(Action`1<ResourceManagerGetSatelliteAssemblySucceededArgs> action);
    private static ResourceManagerLookingForResourceSetArgs ResourceManagerLookingForResourceSetTemplate(Action`1<ResourceManagerLookingForResourceSetArgs> action);
    private static ResourceManagerLookupFailedArgs ResourceManagerLookupFailedTemplate(Action`1<ResourceManagerLookupFailedArgs> action);
    private static ResourceManagerLookupStartedArgs ResourceManagerLookupStartedTemplate(Action`1<ResourceManagerLookupStartedArgs> action);
    private static ResourceManagerManifestResourceAccessDeniedArgs ResourceManagerManifestResourceAccessDeniedTemplate(Action`1<ResourceManagerManifestResourceAccessDeniedArgs> action);
    private static ResourceManagerNeutralResourceAttributeMissingArgs ResourceManagerNeutralResourceAttributeMissingTemplate(Action`1<ResourceManagerNeutralResourceAttributeMissingArgs> action);
    private static ResourceManagerNeutralResourcesFoundArgs ResourceManagerNeutralResourcesFoundTemplate(Action`1<ResourceManagerNeutralResourcesFoundArgs> action);
    private static ResourceManagerNeutralResourcesNotFoundArgs ResourceManagerNeutralResourcesNotFoundTemplate(Action`1<ResourceManagerNeutralResourcesNotFoundArgs> action);
    private static ResourceManagerNeutralResourcesSufficientArgs ResourceManagerNeutralResourcesSufficientTemplate(Action`1<ResourceManagerNeutralResourcesSufficientArgs> action);
    private static ResourceManagerNotCreatingResourceSetArgs ResourceManagerNotCreatingResourceSetTemplate(Action`1<ResourceManagerNotCreatingResourceSetArgs> action);
    private static ResourceManagerReleasingResourcesArgs ResourceManagerReleasingResourcesTemplate(Action`1<ResourceManagerReleasingResourcesArgs> action);
    private static ResourceManagerStreamFoundArgs ResourceManagerStreamFoundTemplate(Action`1<ResourceManagerStreamFoundArgs> action);
    private static ResourceManagerStreamNotFoundArgs ResourceManagerStreamNotFoundTemplate(Action`1<ResourceManagerStreamNotFoundArgs> action);
    private static ThreadPoolDequeueWorkArgs ThreadPoolDequeueWorkTemplate(Action`1<ThreadPoolDequeueWorkArgs> action);
    private static ThreadPoolEnqueueWorkArgs ThreadPoolEnqueueWorkTemplate(Action`1<ThreadPoolEnqueueWorkArgs> action);
    private static ThreadTransferReceiveArgs ThreadTransferReceiveTemplate(Action`1<ThreadTransferReceiveArgs> action);
    private static ThreadTransferReceiveHandledArgs ThreadTransferReceiveHandledTemplate(Action`1<ThreadTransferReceiveHandledArgs> action);
    private static ThreadTransferSendArgs ThreadTransferSendTemplate(Action`1<ThreadTransferSendArgs> action);
    private static TypeFullNameArgs TypeFullNameTemplate(Action`1<TypeFullNameArgs> action);
    private static TypeGetTypeArgs TypeGetTypeTemplate(Action`1<TypeGetTypeArgs> action);
    private static TypeNameArgs TypeNameTemplate(Action`1<TypeNameArgs> action);
    private static TypeNamespaceArgs TypeNamespaceTemplate(Action`1<TypeNamespaceArgs> action);
    private static WindowsRuntimeMarshalGetActivationFactoryArgs WindowsRuntimeMarshalGetActivationFactoryTemplate(Action`1<WindowsRuntimeMarshalGetActivationFactoryArgs> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralConfigChangeNotification : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralConfigChangeNotification> m_target;
    public Guid ContextId { get; }
    public string ConfigPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralConfigChangeNotification(Action`1<IISGeneralConfigChangeNotification> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ConfigPath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralConfigChangeNotification> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralConfigChangeNotification> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralFileChangeNotification : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralFileChangeNotification> m_target;
    public Guid ContextId { get; }
    public string FilePath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralFileChangeNotification(Action`1<IISGeneralFileChangeNotification> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FilePath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralFileChangeNotification> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralFileChangeNotification> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralHandlerChanged : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralHandlerChanged> m_target;
    public Guid ContextId { get; }
    public string OldHandlerName { get; }
    public string NewHandlerName { get; }
    public string NewHandlerModules { get; }
    public string NewHandlerScriptProcessor { get; }
    public string NewHandlerType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralHandlerChanged(Action`1<IISGeneralHandlerChanged> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OldHandlerName();
    public string get_NewHandlerName();
    public string get_NewHandlerModules();
    public string get_NewHandlerScriptProcessor();
    public string get_NewHandlerType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralHandlerChanged> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralHandlerChanged> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralHandlerPreconditionNotMatch : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralHandlerPreconditionNotMatch> m_target;
    public Guid ContextId { get; }
    public string Name { get; }
    public string Precondition { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralHandlerPreconditionNotMatch(Action`1<IISGeneralHandlerPreconditionNotMatch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Name();
    public string get_Precondition();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralHandlerPreconditionNotMatch> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralHandlerPreconditionNotMatch> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralModulePreconditionNotMatch : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralModulePreconditionNotMatch> m_target;
    public Guid ContextId { get; }
    public string Name { get; }
    public string Precondition { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralModulePreconditionNotMatch(Action`1<IISGeneralModulePreconditionNotMatch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Name();
    public string get_Precondition();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralModulePreconditionNotMatch> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralModulePreconditionNotMatch> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralUrlChanged : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralUrlChanged> m_target;
    public Guid ContextId { get; }
    public string OldUrl { get; }
    public string NewUrl { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralUrlChanged(Action`1<IISGeneralUrlChanged> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OldUrl();
    public string get_NewUrl();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralUrlChanged> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralUrlChanged> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralUserSet : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralUserSet> m_target;
    public Guid ContextId { get; }
    public string AuthType { get; }
    public string UserName { get; }
    public bool SupportsIsInRole { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralUserSet(Action`1<IISGeneralUserSet> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_AuthType();
    public string get_UserName();
    public bool get_SupportsIsInRole();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralUserSet> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralUserSet> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISGeneralVirtualModuleUnresolved : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISGeneralVirtualModuleUnresolved> m_target;
    public Guid ContextId { get; }
    public string Name { get; }
    public string Type { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISGeneralVirtualModuleUnresolved(Action`1<IISGeneralVirtualModuleUnresolved> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Name();
    public string get_Type();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISGeneralVirtualModuleUnresolved> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISGeneralVirtualModuleUnresolved> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleCriticalError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleCriticalError> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleCriticalError(Action`1<IISModuleEventsModuleCriticalError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleCriticalError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleCriticalError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleEnd> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleEnd(Action`1<IISModuleEventsModuleEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleError> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleError(Action`1<IISModuleEventsModuleError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleInformation : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleInformation> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleInformation(Action`1<IISModuleEventsModuleInformation> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleInformation> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleInformation> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleStart> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleStart(Action`1<IISModuleEventsModuleStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleVerbose : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleVerbose> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleVerbose(Action`1<IISModuleEventsModuleVerbose> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleVerbose> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleVerbose> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISModuleEventsModuleWarning : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISModuleEventsModuleWarning> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public string Data1 { get; }
    public string Data2 { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISModuleEventsModuleWarning(Action`1<IISModuleEventsModuleWarning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public string get_Data1();
    public string get_Data2();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISModuleEventsModuleWarning> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISModuleEventsModuleWarning> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsCompletion : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsCompletion> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public bool fIsPostNotificationEvent { get; }
    public int CompletionBytes { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsCompletion(Action`1<IISRequestNotificationEventsCompletion> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public bool get_fIsPostNotificationEvent();
    public int get_CompletionBytes();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsCompletion> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsCompletion> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsEnd> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public bool fIsPostNotificationEvent { get; }
    public int NotificationStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsEnd(Action`1<IISRequestNotificationEventsEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public bool get_fIsPostNotificationEvent();
    public int get_NotificationStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsError> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsError(Action`1<IISRequestNotificationEventsError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsResponseErrorDescription : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsResponseErrorDescription> m_target;
    public Guid ContextId { get; }
    public string ErrorDescription { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsResponseErrorDescription(Action`1<IISRequestNotificationEventsResponseErrorDescription> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ErrorDescription();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsResponseErrorDescription> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsResponseErrorDescription> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsResponseErrorStatus : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsResponseErrorStatus> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public int HttpStatus { get; }
    public string HttpReason { get; }
    public int HttpSubStatus { get; }
    public int ErrorCode { get; }
    public string ConfigExceptionInfo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsResponseErrorStatus(Action`1<IISRequestNotificationEventsResponseErrorStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public int get_HttpStatus();
    public string get_HttpReason();
    public int get_HttpSubStatus();
    public int get_ErrorCode();
    public string get_ConfigExceptionInfo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsResponseErrorStatus> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsResponseErrorStatus> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsResponseSuccessStatus : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsResponseSuccessStatus> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public int HttpStatus { get; }
    public string HttpReason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsResponseSuccessStatus(Action`1<IISRequestNotificationEventsResponseSuccessStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public int get_HttpStatus();
    public string get_HttpReason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsResponseSuccessStatus> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsResponseSuccessStatus> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationEventsStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationEventsStart> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int Notification { get; }
    public bool fIsPostNotification { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationEventsStart(Action`1<IISRequestNotificationEventsStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_Notification();
    public bool get_fIsPostNotification();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationEventsStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationEventsStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationPreBeginEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationPreBeginEnd> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int NotificationStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationPreBeginEnd(Action`1<IISRequestNotificationPreBeginEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_NotificationStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationPreBeginEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationPreBeginEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.IISRequestNotificationPreBeginStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IISRequestNotificationPreBeginStart> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IISRequestNotificationPreBeginStart(Action`1<IISRequestNotificationPreBeginStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IISRequestNotificationPreBeginStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IISRequestNotificationPreBeginStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthAnonPasswdChangeNeeded : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthAnonPasswdChangeNeeded> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthAnonPasswdChangeNeeded(Action`1<W3AuthAnonPasswdChangeNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthAnonPasswdChangeNeeded> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthAnonPasswdChangeNeeded> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthBadBasicHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthBadBasicHeader> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthBadBasicHeader(Action`1<W3AuthBadBasicHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthBadBasicHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthBadBasicHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthBasicLogonFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthBasicLogonFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthBasicLogonFailed(Action`1<W3AuthBasicLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthBasicLogonFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthBasicLogonFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthEnd(Action`1<W3AuthEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthIISDigestLogonFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthIISDigestLogonFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthIISDigestLogonFailed(Action`1<W3AuthIISDigestLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthIISDigestLogonFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthIISDigestLogonFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthInvalidAnonAccount : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthInvalidAnonAccount> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthInvalidAnonAccount(Action`1<W3AuthInvalidAnonAccount> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthInvalidAnonAccount> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthInvalidAnonAccount> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthKerberosFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthKerberosFailed> m_target;
    public Guid ContextId { get; }
    public bool KMUsed { get; }
    public string APUserName { get; }
    public string SPNName { get; }
    public bool ADConfigIsOK { get; }
    public string KerberosInfo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthKerberosFailed(Action`1<W3AuthKerberosFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public bool get_KMUsed();
    public string get_APUserName();
    public string get_SPNName();
    public bool get_ADConfigIsOK();
    public string get_KerberosInfo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthKerberosFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthKerberosFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthNTLMNullSession : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthNTLMNullSession> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthNTLMNullSession(Action`1<W3AuthNTLMNullSession> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthNTLMNullSession> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthNTLMNullSession> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthPassportLogonFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthPassportLogonFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthPassportLogonFailed(Action`1<W3AuthPassportLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthPassportLogonFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthPassportLogonFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthPasswdChangeDisabled : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthPasswdChangeDisabled> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthPasswdChangeDisabled(Action`1<W3AuthPasswdChangeDisabled> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthPasswdChangeDisabled> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthPasswdChangeDisabled> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthPasswdChangeNeeded : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthPasswdChangeNeeded> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthPasswdChangeNeeded(Action`1<W3AuthPasswdChangeNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthPasswdChangeNeeded> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthPasswdChangeNeeded> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthRequestAuthType : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthRequestAuthType> m_target;
    public Guid ContextId { get; }
    public int RequestAuthType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthRequestAuthType(Action`1<W3AuthRequestAuthType> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_RequestAuthType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthRequestAuthType> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthRequestAuthType> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthSSPIContinueNeeded : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthSSPIContinueNeeded> m_target;
    public Guid ContextId { get; }
    public string PackageName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthSSPIContinueNeeded(Action`1<W3AuthSSPIContinueNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_PackageName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthSSPIContinueNeeded> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthSSPIContinueNeeded> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthSSPILogonFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthSSPILogonFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthSSPILogonFailed(Action`1<W3AuthSSPILogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthSSPILogonFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthSSPILogonFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthStart> m_target;
    public Guid ContextId { get; }
    public int AuthTypeSupported { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthStart(Action`1<W3AuthStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_AuthTypeSupported();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthSucceeded : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthSucceeded> m_target;
    public Guid ContextId { get; }
    public int AuthType { get; }
    public bool NTLMUsed { get; }
    public string RemoteUserName { get; }
    public string AuthUserName { get; }
    public int TokenImpersonationLevel { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthSucceeded(Action`1<W3AuthSucceeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_AuthType();
    public bool get_NTLMUsed();
    public string get_RemoteUserName();
    public string get_AuthUserName();
    public int get_TokenImpersonationLevel();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthSucceeded> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthSucceeded> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthTypeNotSupported : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthTypeNotSupported> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthTypeNotSupported(Action`1<W3AuthTypeNotSupported> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthTypeNotSupported> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthTypeNotSupported> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3AuthWDigestLogonFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3AuthWDigestLogonFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3AuthWDigestLogonFailed(Action`1<W3AuthWDigestLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3AuthWDigestLogonFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3AuthWDigestLogonFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CacheFileCacheAccessEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CacheFileCacheAccessEnd> m_target;
    public Guid ContextId { get; }
    public bool Successful { get; }
    public bool FileFromCache { get; }
    public bool FileAddedToCache { get; }
    public bool FileDirmoned { get; }
    public bool LastModCheckErrorIgnored { get; }
    public int ErrorCode { get; }
    public string LastModifiedTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CacheFileCacheAccessEnd(Action`1<W3CacheFileCacheAccessEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public bool get_Successful();
    public bool get_FileFromCache();
    public bool get_FileAddedToCache();
    public bool get_FileDirmoned();
    public bool get_LastModCheckErrorIgnored();
    public int get_ErrorCode();
    public string get_LastModifiedTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CacheFileCacheAccessEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CacheFileCacheAccessEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CacheFileCacheAccessStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CacheFileCacheAccessStart> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    public string UserName { get; }
    public string DomainName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CacheFileCacheAccessStart(Action`1<W3CacheFileCacheAccessStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    public string get_UserName();
    public string get_DomainName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CacheFileCacheAccessStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CacheFileCacheAccessStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CacheHttpsysCacheable : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CacheHttpsysCacheable> m_target;
    public Guid ContextId { get; }
    public bool HttpsysCacheable { get; }
    public int Reason { get; }
    public int CachePolicy { get; }
    public int TimeToLive { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CacheHttpsysCacheable(Action`1<W3CacheHttpsysCacheable> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public bool get_HttpsysCacheable();
    public int get_Reason();
    public int get_CachePolicy();
    public int get_TimeToLive();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CacheHttpsysCacheable> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CacheHttpsysCacheable> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CacheURLCacheAccessEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CacheURLCacheAccessEnd> m_target;
    public Guid ContextId { get; }
    public string PhysicalPath { get; }
    public bool URLInfoFromCache { get; }
    public bool URLInfoAddedToCache { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CacheURLCacheAccessEnd(Action`1<W3CacheURLCacheAccessEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_PhysicalPath();
    public bool get_URLInfoFromCache();
    public bool get_URLInfoAddedToCache();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CacheURLCacheAccessEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CacheURLCacheAccessEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CacheURLCacheAccessStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CacheURLCacheAccessStart> m_target;
    public Guid ContextId { get; }
    public string RequestURL { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CacheURLCacheAccessStart(Action`1<W3CacheURLCacheAccessStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_RequestURL();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CacheURLCacheAccessStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CacheURLCacheAccessStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIEnd(Action`1<W3CGIEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFActivityTimeout : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFActivityTimeout> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFActivityTimeout(Action`1<W3CGIFActivityTimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFActivityTimeout> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFActivityTimeout> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFAddJobObjectFail : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFAddJobObjectFail> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFAddJobObjectFail(Action`1<W3CGIFAddJobObjectFail> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFAddJobObjectFail> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFAddJobObjectFail> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFAppMgrShutdown : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFAppMgrShutdown> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFAppMgrShutdown(Action`1<W3CGIFAppMgrShutdown> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFAppMgrShutdown> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFAppMgrShutdown> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFAssignProcess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFAssignProcess> m_target;
    public Guid ContextId { get; }
    public string CommandLine { get; }
    public bool IsNewProcess { get; }
    public int ProcessId { get; }
    public int RequestNumber { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFAssignProcess(Action`1<W3CGIFAssignProcess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_CommandLine();
    public bool get_IsNewProcess();
    public int get_ProcessId();
    public int get_RequestNumber();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFAssignProcess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFAssignProcess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFEnd(Action`1<W3CGIFEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFPathNotFound : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFPathNotFound> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFPathNotFound(Action`1<W3CGIFPathNotFound> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFPathNotFound> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFPathNotFound> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFQueueFull : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFQueueFull> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFQueueFull(Action`1<W3CGIFQueueFull> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFQueueFull> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFQueueFull> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFQueueRequest : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFQueueRequest> m_target;
    public Guid ContextId { get; }
    public int PositionInQueue { get; }
    public int MaxInstances { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFQueueRequest(Action`1<W3CGIFQueueRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_PositionInQueue();
    public int get_MaxInstances();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFQueueRequest> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFQueueRequest> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFRapidFailureProtection : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFRapidFailureProtection> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFRapidFailureProtection(Action`1<W3CGIFRapidFailureProtection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFRapidFailureProtection> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFRapidFailureProtection> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFRequestTimeout : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFRequestTimeout> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFRequestTimeout(Action`1<W3CGIFRequestTimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFRequestTimeout> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFRequestTimeout> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFResponseWritten : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFResponseWritten> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFResponseWritten(Action`1<W3CGIFResponseWritten> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFResponseWritten> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFResponseWritten> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFScriptProcessorMissing : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFScriptProcessorMissing> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFScriptProcessorMissing(Action`1<W3CGIFScriptProcessorMissing> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFScriptProcessorMissing> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFScriptProcessorMissing> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFStart(Action`1<W3CGIFStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFTraceError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFTraceError> m_target;
    public Guid ContextId { get; }
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFTraceError(Action`1<W3CGIFTraceError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFTraceError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFTraceError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFTraceInfo : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFTraceInfo> m_target;
    public Guid ContextId { get; }
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFTraceInfo(Action`1<W3CGIFTraceInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFTraceInfo> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFTraceInfo> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFTraceWarning : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFTraceWarning> m_target;
    public Guid ContextId { get; }
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFTraceWarning(Action`1<W3CGIFTraceWarning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFTraceWarning> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFTraceWarning> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFUnexpectedExit : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFUnexpectedExit> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFUnexpectedExit(Action`1<W3CGIFUnexpectedExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFUnexpectedExit> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFUnexpectedExit> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFUnknownError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFUnknownError> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFUnknownError(Action`1<W3CGIFUnknownError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFUnknownError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFUnknownError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIFWaitingForResponse : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIFWaitingForResponse> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIFWaitingForResponse(Action`1<W3CGIFWaitingForResponse> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIFWaitingForResponse> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIFWaitingForResponse> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIHeadersReceived : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIHeadersReceived> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIHeadersReceived(Action`1<W3CGIHeadersReceived> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIHeadersReceived> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIHeadersReceived> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGILaunch : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGILaunch> m_target;
    public Guid ContextId { get; }
    public string CommandLine { get; }
    public int ErrorCode { get; }
    public int ProcessId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGILaunch(Action`1<W3CGILaunch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_CommandLine();
    public int get_ErrorCode();
    public int get_ProcessId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGILaunch> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGILaunch> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIPrematureTermination : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIPrematureTermination> m_target;
    public Guid ContextId { get; }
    public string Headers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIPrematureTermination(Action`1<W3CGIPrematureTermination> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Headers();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIPrematureTermination> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIPrematureTermination> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIRequestEntitySent : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIRequestEntitySent> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIRequestEntitySent(Action`1<W3CGIRequestEntitySent> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIRequestEntitySent> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIRequestEntitySent> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGIStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGIStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGIStart(Action`1<W3CGIStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGIStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGIStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3CGITimeout : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3CGITimeout> m_target;
    public Guid ContextId { get; }
    public string Headers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3CGITimeout(Action`1<W3CGITimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Headers();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3CGITimeout> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3CGITimeout> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3DynamicCompressionDo : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3DynamicCompressionDo> m_target;
    public Guid ContextId { get; }
    public int OriginalSize { get; }
    public int CompressedSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3DynamicCompressionDo(Action`1<W3DynamicCompressionDo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_OriginalSize();
    public int get_CompressedSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3DynamicCompressionDo> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3DynamicCompressionDo> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3DynamicCompressionEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3DynamicCompressionEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3DynamicCompressionEnd(Action`1<W3DynamicCompressionEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3DynamicCompressionEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3DynamicCompressionEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3DynamicCompressionNotSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3DynamicCompressionNotSuccess> m_target;
    public Guid ContextId { get; }
    public int Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3DynamicCompressionNotSuccess(Action`1<W3DynamicCompressionNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3DynamicCompressionNotSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3DynamicCompressionNotSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3DynamicCompressionStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3DynamicCompressionStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3DynamicCompressionStart(Action`1<W3DynamicCompressionStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3DynamicCompressionStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3DynamicCompressionStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3DynamicCompressionSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3DynamicCompressionSuccess> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3DynamicCompressionSuccess(Action`1<W3DynamicCompressionSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3DynamicCompressionSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3DynamicCompressionSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAccessDeniedEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAccessDeniedEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAccessDeniedEnd(Action`1<W3FilterAccessDeniedEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAccessDeniedEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAccessDeniedEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAccessDeniedStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAccessDeniedStart> m_target;
    public Guid ContextId { get; }
    public string RequestedURL { get; }
    public string PhysicalPath { get; }
    public int DenialReason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAccessDeniedStart(Action`1<W3FilterAccessDeniedStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_RequestedURL();
    public string get_PhysicalPath();
    public int get_DenialReason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAccessDeniedStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAccessDeniedStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAddReqHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAddReqHeader> m_target;
    public Guid ContextId { get; }
    public string HeaderName { get; }
    public string HeaderValue { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAddReqHeader(Action`1<W3FilterAddReqHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HeaderName();
    public string get_HeaderValue();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAddReqHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAddReqHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAddRespHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAddRespHeader> m_target;
    public Guid ContextId { get; }
    public string HeaderName { get; }
    public string HeaderValue { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAddRespHeader(Action`1<W3FilterAddRespHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HeaderName();
    public string get_HeaderValue();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAddRespHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAddRespHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAuthCompleteEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAuthCompleteEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAuthCompleteEnd(Action`1<W3FilterAuthCompleteEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAuthCompleteEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAuthCompleteEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAuthCompleteStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAuthCompleteStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAuthCompleteStart(Action`1<W3FilterAuthCompleteStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAuthCompleteStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAuthCompleteStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAuthenticationEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAuthenticationEnd> m_target;
    public Guid ContextId { get; }
    public string FinalUserName { get; }
    public bool PasswordChanged { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAuthenticationEnd(Action`1<W3FilterAuthenticationEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FinalUserName();
    public bool get_PasswordChanged();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAuthenticationEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAuthenticationEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterAuthenticationStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterAuthenticationStart> m_target;
    public Guid ContextId { get; }
    public string OrigUserName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterAuthenticationStart(Action`1<W3FilterAuthenticationStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OrigUserName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterAuthenticationStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterAuthenticationStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterEnd> m_target;
    public Guid ContextId { get; }
    public int NotificationStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterEnd(Action`1<W3FilterEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_NotificationStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterEndOfRequestEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterEndOfRequestEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterEndOfRequestEnd(Action`1<W3FilterEndOfRequestEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterEndOfRequestEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterEndOfRequestEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterEndOfRequestStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterEndOfRequestStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterEndOfRequestStart(Action`1<W3FilterEndOfRequestStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterEndOfRequestStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterEndOfRequestStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterError> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterError(Action`1<W3FilterError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterLogEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterLogEnd> m_target;
    public Guid ContextId { get; }
    public string FinalClientHostName { get; }
    public string FinalClientUserName { get; }
    public string FinalServerName { get; }
    public string FinalOperation { get; }
    public string FinalTarget { get; }
    public string FinalParameters { get; }
    public int FinalHttpStatus { get; }
    public int FinalWin32Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterLogEnd(Action`1<W3FilterLogEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FinalClientHostName();
    public string get_FinalClientUserName();
    public string get_FinalServerName();
    public string get_FinalOperation();
    public string get_FinalTarget();
    public string get_FinalParameters();
    public int get_FinalHttpStatus();
    public int get_FinalWin32Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterLogEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterLogEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterLogStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterLogStart> m_target;
    public Guid ContextId { get; }
    public string OrigClientHostName { get; }
    public string OrigClientUserName { get; }
    public string OrigServerName { get; }
    public string OrigOperation { get; }
    public string OrigTarget { get; }
    public string OrigParameters { get; }
    public int OrigHttpStatus { get; }
    public int OrigWin32Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterLogStart(Action`1<W3FilterLogStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OrigClientHostName();
    public string get_OrigClientUserName();
    public string get_OrigServerName();
    public string get_OrigOperation();
    public string get_OrigTarget();
    public string get_OrigParameters();
    public int get_OrigHttpStatus();
    public int get_OrigWin32Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterLogStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterLogStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterPreprocEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterPreprocEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterPreprocEnd(Action`1<W3FilterPreprocEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterPreprocEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterPreprocEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterPreprocStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterPreprocStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterPreprocStart(Action`1<W3FilterPreprocStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterPreprocStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterPreprocStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSendRawDataEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSendRawDataEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSendRawDataEnd(Action`1<W3FilterSendRawDataEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSendRawDataEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSendRawDataEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSendRawDataStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSendRawDataStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSendRawDataStart(Action`1<W3FilterSendRawDataStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSendRawDataStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSendRawDataStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSendResponseEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSendResponseEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSendResponseEnd(Action`1<W3FilterSendResponseEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSendResponseEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSendResponseEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSendResponseStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSendResponseStart> m_target;
    public Guid ContextId { get; }
    public int HttpStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSendResponseStart(Action`1<W3FilterSendResponseStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_HttpStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSendResponseStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSendResponseStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSetReqHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSetReqHeader> m_target;
    public Guid ContextId { get; }
    public string HeaderName { get; }
    public string HeaderValue { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSetReqHeader(Action`1<W3FilterSetReqHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HeaderName();
    public string get_HeaderValue();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSetReqHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSetReqHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterSetRespHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterSetRespHeader> m_target;
    public Guid ContextId { get; }
    public string HeaderName { get; }
    public string HeaderValue { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterSetRespHeader(Action`1<W3FilterSetRespHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HeaderName();
    public string get_HeaderValue();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterSetRespHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterSetRespHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterStart> m_target;
    public Guid ContextId { get; }
    public string FilterName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterStart(Action`1<W3FilterStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FilterName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterURLMapEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterURLMapEnd> m_target;
    public Guid ContextId { get; }
    public string FinalURL { get; }
    public string FinalPath { get; }
    public int AccessPerms { get; }
    public int MatchingPath { get; }
    public int MatchingURL { get; }
    public string ScriptMapEntry { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterURLMapEnd(Action`1<W3FilterURLMapEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FinalURL();
    public string get_FinalPath();
    public int get_AccessPerms();
    public int get_MatchingPath();
    public int get_MatchingURL();
    public string get_ScriptMapEntry();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterURLMapEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterURLMapEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3FilterURLMapStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3FilterURLMapStart> m_target;
    public Guid ContextId { get; }
    public string OrigURL { get; }
    public string OrigPath { get; }
    public int AccessPerms { get; }
    public int MatchingPath { get; }
    public int MatchingURL { get; }
    public string ScriptMapEntry { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3FilterURLMapStart(Action`1<W3FilterURLMapStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OrigURL();
    public string get_OrigPath();
    public int get_AccessPerms();
    public int get_MatchingPath();
    public int get_MatchingURL();
    public string get_ScriptMapEntry();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3FilterURLMapStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3FilterURLMapStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralCGIHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralCGIHandler> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralCGIHandler(Action`1<W3GeneralCGIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralCGIHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralCGIHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralChildRequestEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralChildRequestEnd> m_target;
    public Guid ContextId { get; }
    public int BytesSent { get; }
    public int HttpStatus { get; }
    public int HttpSubStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralChildRequestEnd(Action`1<W3GeneralChildRequestEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesSent();
    public int get_HttpStatus();
    public int get_HttpSubStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralChildRequestEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralChildRequestEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralChildRequestStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralChildRequestStart> m_target;
    public Guid ContextId { get; }
    public int SiteId { get; }
    public string RequestURL { get; }
    public string RequestVerb { get; }
    public int RecursiveLevel { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralChildRequestStart(Action`1<W3GeneralChildRequestStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_SiteId();
    public string get_RequestURL();
    public string get_RequestVerb();
    public int get_RecursiveLevel();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralChildRequestStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralChildRequestStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralDavHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralDavHandler> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralDavHandler(Action`1<W3GeneralDavHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralDavHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralDavHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralEndNewRequest : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralEndNewRequest> m_target;
    public Guid ContextId { get; }
    public int BytesSent { get; }
    public int BytesReceived { get; }
    public int HttpStatus { get; }
    public int HttpSubStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralEndNewRequest(Action`1<W3GeneralEndNewRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesSent();
    public int get_BytesReceived();
    public int get_HttpStatus();
    public int get_HttpSubStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralEndNewRequest> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralEndNewRequest> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralEndpointInformation : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralEndpointInformation> m_target;
    public Guid ContextId { get; }
    public string RemoteAddress { get; }
    public string RemotePort { get; }
    public string LocalAddress { get; }
    public string LocalPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralEndpointInformation(Action`1<W3GeneralEndpointInformation> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_RemoteAddress();
    public string get_RemotePort();
    public string get_LocalAddress();
    public string get_LocalPort();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralEndpointInformation> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralEndpointInformation> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralFlushResponseEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralFlushResponseEnd> m_target;
    public Guid ContextId { get; }
    public int BytesSent { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralFlushResponseEnd(Action`1<W3GeneralFlushResponseEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesSent();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralFlushResponseEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralFlushResponseEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralFlushResponseStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralFlushResponseStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralFlushResponseStart(Action`1<W3GeneralFlushResponseStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralFlushResponseStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralFlushResponseStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralGetURLMetadata : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralGetURLMetadata> m_target;
    public Guid ContextId { get; }
    public string PhysicalPath { get; }
    public int AccessPerms { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralGetURLMetadata(Action`1<W3GeneralGetURLMetadata> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_PhysicalPath();
    public int get_AccessPerms();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralGetURLMetadata> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralGetURLMetadata> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralISAPIHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralISAPIHandler> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralISAPIHandler(Action`1<W3GeneralISAPIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralISAPIHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralISAPIHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralMapHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralMapHandler> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralMapHandler(Action`1<W3GeneralMapHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralMapHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralMapHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralModuleFactoryFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralModuleFactoryFailed> m_target;
    public Guid ContextId { get; }
    public string ModuleName { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralModuleFactoryFailed(Action`1<W3GeneralModuleFactoryFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ModuleName();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralModuleFactoryFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralModuleFactoryFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralNotSendCustomError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralNotSendCustomError> m_target;
    public Guid ContextId { get; }
    public int Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralNotSendCustomError(Action`1<W3GeneralNotSendCustomError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralNotSendCustomError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralNotSendCustomError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralOopISAPIHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralOopISAPIHandler> m_target;
    public Guid ContextId { get; }
    public int ProcessId { get; }
    public int TotalReqs { get; }
    public int CurrentReqs { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralOopISAPIHandler(Action`1<W3GeneralOopISAPIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ProcessId();
    public int get_TotalReqs();
    public int get_CurrentReqs();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralOopISAPIHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralOopISAPIHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralOptionsHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralOptionsHandler> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralOptionsHandler(Action`1<W3GeneralOptionsHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralOptionsHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralOptionsHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralReadEntityEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralReadEntityEnd> m_target;
    public Guid ContextId { get; }
    public int BytesReceived { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralReadEntityEnd(Action`1<W3GeneralReadEntityEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesReceived();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralReadEntityEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralReadEntityEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralReadEntityStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralReadEntityStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralReadEntityStart(Action`1<W3GeneralReadEntityStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralReadEntityStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralReadEntityStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralRedirectionHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralRedirectionHandler> m_target;
    public Guid ContextId { get; }
    public string RedirectedURL { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralRedirectionHandler(Action`1<W3GeneralRedirectionHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_RedirectedURL();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralRedirectionHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralRedirectionHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralRequestEntity : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralRequestEntity> m_target;
    public Guid ContextId { get; }
    public string Buffer { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralRequestEntity(Action`1<W3GeneralRequestEntity> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Buffer();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralRequestEntity> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralRequestEntity> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralRequestHeaders : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralRequestHeaders> m_target;
    public Guid ContextId { get; }
    public string Headers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralRequestHeaders(Action`1<W3GeneralRequestHeaders> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Headers();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralRequestHeaders> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralRequestHeaders> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralResponseEntityBuffer : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralResponseEntityBuffer> m_target;
    public Guid ContextId { get; }
    public string Buffer { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralResponseEntityBuffer(Action`1<W3GeneralResponseEntityBuffer> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Buffer();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralResponseEntityBuffer> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralResponseEntityBuffer> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralResponseEntityFile : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralResponseEntityFile> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    public long Offset { get; }
    public long Size { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralResponseEntityFile(Action`1<W3GeneralResponseEntityFile> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    public long get_Offset();
    public long get_Size();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralResponseEntityFile> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralResponseEntityFile> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralResponseHeaders : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralResponseHeaders> m_target;
    public Guid ContextId { get; }
    public string Headers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralResponseHeaders(Action`1<W3GeneralResponseHeaders> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_Headers();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralResponseHeaders> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralResponseHeaders> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralSendCustomError : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralSendCustomError> m_target;
    public Guid ContextId { get; }
    public int HttpStatus { get; }
    public int HttpSubStatus { get; }
    public string FileNameOrURL { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralSendCustomError(Action`1<W3GeneralSendCustomError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_HttpStatus();
    public int get_HttpSubStatus();
    public string get_FileNameOrURL();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralSendCustomError> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralSendCustomError> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralSetRequestHeader : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralSetRequestHeader> m_target;
    public Guid ContextId { get; }
    public string HeaderName { get; }
    public string HeaderValue { get; }
    public bool Replace { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralSetRequestHeader(Action`1<W3GeneralSetRequestHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HeaderName();
    public string get_HeaderValue();
    public bool get_Replace();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralSetRequestHeader> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralSetRequestHeader> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralStartNewRequest : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralStartNewRequest> m_target;
    public Guid ContextId { get; }
    public int SiteId { get; }
    public string AppPoolId { get; }
    public long ConnId { get; }
    public long RawConnId { get; }
    public string RequestURL { get; }
    public string RequestVerb { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralStartNewRequest(Action`1<W3GeneralStartNewRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_SiteId();
    public string get_AppPoolId();
    public long get_ConnId();
    public long get_RawConnId();
    public string get_RequestURL();
    public string get_RequestVerb();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralStartNewRequest> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralStartNewRequest> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralStaticFileHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralStaticFileHandler> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralStaticFileHandler(Action`1<W3GeneralStaticFileHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralStaticFileHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralStaticFileHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3GeneralTraceHandler : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3GeneralTraceHandler> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3GeneralTraceHandler(Action`1<W3GeneralTraceHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3GeneralTraceHandler> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3GeneralTraceHandler> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3ISAPIEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3ISAPIEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3ISAPIEnd(Action`1<W3ISAPIEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3ISAPIEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3ISAPIEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3ISAPIStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3ISAPIStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3ISAPIStart(Action`1<W3ISAPIStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3ISAPIStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3ISAPIStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3OutputCacheDisabled : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3OutputCacheDisabled> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3OutputCacheDisabled(Action`1<W3OutputCacheDisabled> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3OutputCacheDisabled> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3OutputCacheDisabled> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3OutputCacheLookupEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3OutputCacheLookupEnd> m_target;
    public Guid ContextId { get; }
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3OutputCacheLookupEnd(Action`1<W3OutputCacheLookupEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3OutputCacheLookupEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3OutputCacheLookupEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3OutputCacheLookupStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3OutputCacheLookupStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3OutputCacheLookupStart(Action`1<W3OutputCacheLookupStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3OutputCacheLookupStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3OutputCacheLookupStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3OutputCacheUpdateEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3OutputCacheUpdateEnd> m_target;
    public Guid ContextId { get; }
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3OutputCacheUpdateEnd(Action`1<W3OutputCacheUpdateEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3OutputCacheUpdateEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3OutputCacheUpdateEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3OutputCacheUpdateStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3OutputCacheUpdateStart> m_target;
    public Guid ContextId { get; }
    public int CachePolicy { get; }
    public int TimeToLive { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3OutputCacheUpdateStart(Action`1<W3OutputCacheUpdateStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_CachePolicy();
    public int get_TimeToLive();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3OutputCacheUpdateStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3OutputCacheUpdateStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecDeniedByAccessFlags : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecDeniedByAccessFlags> m_target;
    public Guid ContextId { get; }
    public int CurrentFlags { get; }
    public int NeededFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecDeniedByAccessFlags(Action`1<W3SecDeniedByAccessFlags> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_CurrentFlags();
    public int get_NeededFlags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecDeniedByAccessFlags> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecDeniedByAccessFlags> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecDeniedByCGIRestriction : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecDeniedByCGIRestriction> m_target;
    public Guid ContextId { get; }
    public string ImageName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecDeniedByCGIRestriction(Action`1<W3SecDeniedByCGIRestriction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ImageName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecDeniedByCGIRestriction> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecDeniedByCGIRestriction> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecDeniedByISAPIRestriction : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecDeniedByISAPIRestriction> m_target;
    public Guid ContextId { get; }
    public string ImageName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecDeniedByISAPIRestriction(Action`1<W3SecDeniedByISAPIRestriction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_ImageName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecDeniedByISAPIRestriction> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecDeniedByISAPIRestriction> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecDeniedByMimemap : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecDeniedByMimemap> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecDeniedByMimemap(Action`1<W3SecDeniedByMimemap> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecDeniedByMimemap> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecDeniedByMimemap> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecFileAccessDenied : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecFileAccessDenied> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    public string AccountName { get; }
    public string DomainName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecFileAccessDenied(Action`1<W3SecFileAccessDenied> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    public string get_AccountName();
    public string get_DomainName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecFileAccessDenied> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecFileAccessDenied> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecIllegalShortFilename : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecIllegalShortFilename> m_target;
    public Guid ContextId { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecIllegalShortFilename(Action`1<W3SecIllegalShortFilename> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecIllegalShortFilename> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecIllegalShortFilename> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecRejectedHostname : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecRejectedHostname> m_target;
    public Guid ContextId { get; }
    public string HostName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecRejectedHostname(Action`1<W3SecRejectedHostname> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_HostName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecRejectedHostname> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecRejectedHostname> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecRejectedIP : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecRejectedIP> m_target;
    public Guid ContextId { get; }
    public string IPAddress { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecRejectedIP(Action`1<W3SecRejectedIP> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_IPAddress();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecRejectedIP> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecRejectedIP> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3SecRequireSSL128 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3SecRequireSSL128> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3SecRequireSSL128(Action`1<W3SecRequireSSL128> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3SecRequireSSL128> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3SecRequireSSL128> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionCreateEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionCreateEnd> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    public string OriginalFileName { get; }
    public int OriginalFileSize { get; }
    public string CompressedFileName { get; }
    public int CompressedFileSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionCreateEnd(Action`1<W3StaticCompressionCreateEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    public string get_OriginalFileName();
    public int get_OriginalFileSize();
    public string get_CompressedFileName();
    public int get_CompressedFileSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionCreateEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionCreateEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionCreateStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionCreateStart> m_target;
    public Guid ContextId { get; }
    public string OriginalFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionCreateStart(Action`1<W3StaticCompressionCreateStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public string get_OriginalFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionCreateStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionCreateStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionEnd : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionEnd> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionEnd(Action`1<W3StaticCompressionEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionEnd> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionEnd> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionNotSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionNotSuccess> m_target;
    public Guid ContextId { get; }
    public int Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionNotSuccess(Action`1<W3StaticCompressionNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionNotSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionNotSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionStart(Action`1<W3StaticCompressionStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3StaticCompressionSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3StaticCompressionSuccess> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3StaticCompressionSuccess(Action`1<W3StaticCompressionSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3StaticCompressionSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3StaticCompressionSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketApplicationCloseConnection : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketApplicationCloseConnection> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketApplicationCloseConnection(Action`1<W3WebSocketApplicationCloseConnection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketApplicationCloseConnection> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketApplicationCloseConnection> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketCloseReceived : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketCloseReceived> m_target;
    public Guid ContextId { get; }
    public int Status { get; }
    public string Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketCloseReceived(Action`1<W3WebSocketCloseReceived> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Status();
    public string get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketCloseReceived> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketCloseReceived> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketCloseSendFailure : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketCloseSendFailure> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketCloseSendFailure(Action`1<W3WebSocketCloseSendFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketCloseSendFailure> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketCloseSendFailure> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketCloseSendStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketCloseSendStart> m_target;
    public Guid ContextId { get; }
    public int Status { get; }
    public string Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketCloseSendStart(Action`1<W3WebSocketCloseSendStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Status();
    public string get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketCloseSendStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketCloseSendStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketCloseSendSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketCloseSendSuccess> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketCloseSendSuccess(Action`1<W3WebSocketCloseSendSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketCloseSendSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketCloseSendSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketEndFailure : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketEndFailure> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketEndFailure(Action`1<W3WebSocketEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketEndFailure> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketEndFailure> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketEndSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketEndSuccess> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketEndSuccess(Action`1<W3WebSocketEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketEndSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketEndSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketInitializeNotSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketInitializeNotSuccess> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketInitializeNotSuccess(Action`1<W3WebSocketInitializeNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketInitializeNotSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketInitializeNotSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketModuleCloseConnection : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketModuleCloseConnection> m_target;
    public Guid ContextId { get; }
    public int Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketModuleCloseConnection(Action`1<W3WebSocketModuleCloseConnection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketModuleCloseConnection> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketModuleCloseConnection> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketReadFragmentEndFailure : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketReadFragmentEndFailure> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketReadFragmentEndFailure(Action`1<W3WebSocketReadFragmentEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketReadFragmentEndFailure> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketReadFragmentEndFailure> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketReadFragmentEndPending : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketReadFragmentEndPending> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketReadFragmentEndPending(Action`1<W3WebSocketReadFragmentEndPending> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketReadFragmentEndPending> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketReadFragmentEndPending> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketReadFragmentEndSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketReadFragmentEndSuccess> m_target;
    public Guid ContextId { get; }
    public int BytesReceived { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketReadFragmentEndSuccess(Action`1<W3WebSocketReadFragmentEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesReceived();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketReadFragmentEndSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketReadFragmentEndSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketReadFragmentStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketReadFragmentStart> m_target;
    public Guid ContextId { get; }
    public int BufferSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketReadFragmentStart(Action`1<W3WebSocketReadFragmentStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BufferSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketReadFragmentStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketReadFragmentStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketReadIoFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketReadIoFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketReadIoFailed(Action`1<W3WebSocketReadIoFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketReadIoFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketReadIoFailed> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketStart> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketStart(Action`1<W3WebSocketStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketWriteFragmentEndFailure : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketWriteFragmentEndFailure> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketWriteFragmentEndFailure(Action`1<W3WebSocketWriteFragmentEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketWriteFragmentEndFailure> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketWriteFragmentEndFailure> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketWriteFragmentEndPending : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketWriteFragmentEndPending> m_target;
    public Guid ContextId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketWriteFragmentEndPending(Action`1<W3WebSocketWriteFragmentEndPending> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketWriteFragmentEndPending> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketWriteFragmentEndPending> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketWriteFragmentEndSuccess : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketWriteFragmentEndSuccess> m_target;
    public Guid ContextId { get; }
    public int BytesSent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketWriteFragmentEndSuccess(Action`1<W3WebSocketWriteFragmentEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_BytesSent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketWriteFragmentEndSuccess> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketWriteFragmentEndSuccess> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketWriteFragmentStart : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketWriteFragmentStart> m_target;
    public Guid ContextId { get; }
    public int DataType { get; }
    public int DataSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketWriteFragmentStart(Action`1<W3WebSocketWriteFragmentStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_DataType();
    public int get_DataSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketWriteFragmentStart> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketWriteFragmentStart> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace.W3WebSocketWriteIoFailed : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<W3WebSocketWriteIoFailed> m_target;
    public Guid ContextId { get; }
    public int ErrorCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal W3WebSocketWriteIoFailed(Action`1<W3WebSocketWriteIoFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ContextId();
    public int get_ErrorCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<W3WebSocketWriteIoFailed> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<W3WebSocketWriteIoFailed> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.IisTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    public static Guid IISGeneralGuid;
    public static Guid IISAuthenticationGuid;
    public static Guid IISSecurityGuid;
    public static Guid IISFilterGuid;
    public static Guid IISStaticFileGuid;
    public static Guid IISISAPIGuid;
    public static Guid IISCGIGuid;
    public static Guid IISFastCGIGuid;
    public static Guid IISWebSocketGuid;
    public static Guid IISCompressionGuid;
    public static Guid IISCacheGuid;
    public static Guid IISRequestNotificationGuid;
    public static Guid IISModuleGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public IisTraceEventParser(TraceEventSource source);
    private static IisTraceEventParser();
    public void add_IISAuthenticationAuthAnonPasswdChangeNeeded(Action`1<W3AuthAnonPasswdChangeNeeded> value);
    public void remove_IISAuthenticationAuthAnonPasswdChangeNeeded(Action`1<W3AuthAnonPasswdChangeNeeded> value);
    public void add_IISAuthenticationAuthBadBasicHeader(Action`1<W3AuthBadBasicHeader> value);
    public void remove_IISAuthenticationAuthBadBasicHeader(Action`1<W3AuthBadBasicHeader> value);
    public void add_IISAuthenticationAuthBasicLogonFailed(Action`1<W3AuthBasicLogonFailed> value);
    public void remove_IISAuthenticationAuthBasicLogonFailed(Action`1<W3AuthBasicLogonFailed> value);
    public void add_IISAuthenticationAuthEnd(Action`1<W3AuthEnd> value);
    public void remove_IISAuthenticationAuthEnd(Action`1<W3AuthEnd> value);
    public void add_IISAuthenticationAuthIisdigestLogonFailed(Action`1<W3AuthIISDigestLogonFailed> value);
    public void remove_IISAuthenticationAuthIisdigestLogonFailed(Action`1<W3AuthIISDigestLogonFailed> value);
    public void add_IISAuthenticationAuthInvalidAnonAccount(Action`1<W3AuthInvalidAnonAccount> value);
    public void remove_IISAuthenticationAuthInvalidAnonAccount(Action`1<W3AuthInvalidAnonAccount> value);
    public void add_IISAuthenticationAuthKerberosFailed(Action`1<W3AuthKerberosFailed> value);
    public void remove_IISAuthenticationAuthKerberosFailed(Action`1<W3AuthKerberosFailed> value);
    public void add_IISAuthenticationAuthNtlmNullSession(Action`1<W3AuthNTLMNullSession> value);
    public void remove_IISAuthenticationAuthNtlmNullSession(Action`1<W3AuthNTLMNullSession> value);
    public void add_IISAuthenticationAuthPassportLogonFailed(Action`1<W3AuthPassportLogonFailed> value);
    public void remove_IISAuthenticationAuthPassportLogonFailed(Action`1<W3AuthPassportLogonFailed> value);
    public void add_IISAuthenticationAuthPasswdChangeDisabled(Action`1<W3AuthPasswdChangeDisabled> value);
    public void remove_IISAuthenticationAuthPasswdChangeDisabled(Action`1<W3AuthPasswdChangeDisabled> value);
    public void add_IISAuthenticationAuthPasswdChangeNeeded(Action`1<W3AuthPasswdChangeNeeded> value);
    public void remove_IISAuthenticationAuthPasswdChangeNeeded(Action`1<W3AuthPasswdChangeNeeded> value);
    public void add_IISAuthenticationAuthRequestAuthType(Action`1<W3AuthRequestAuthType> value);
    public void remove_IISAuthenticationAuthRequestAuthType(Action`1<W3AuthRequestAuthType> value);
    public void add_IISAuthenticationAuthSspiContinueNeeded(Action`1<W3AuthSSPIContinueNeeded> value);
    public void remove_IISAuthenticationAuthSspiContinueNeeded(Action`1<W3AuthSSPIContinueNeeded> value);
    public void add_IISAuthenticationAuthSspiLogonFailed(Action`1<W3AuthSSPILogonFailed> value);
    public void remove_IISAuthenticationAuthSspiLogonFailed(Action`1<W3AuthSSPILogonFailed> value);
    public void add_IISAuthenticationAuthStart(Action`1<W3AuthStart> value);
    public void remove_IISAuthenticationAuthStart(Action`1<W3AuthStart> value);
    public void add_IISAuthenticationAuthSucceeded(Action`1<W3AuthSucceeded> value);
    public void remove_IISAuthenticationAuthSucceeded(Action`1<W3AuthSucceeded> value);
    public void add_IISAuthenticationAuthTypeNotSupported(Action`1<W3AuthTypeNotSupported> value);
    public void remove_IISAuthenticationAuthTypeNotSupported(Action`1<W3AuthTypeNotSupported> value);
    public void add_IISAuthenticationAuthWdigestLogonFailed(Action`1<W3AuthWDigestLogonFailed> value);
    public void remove_IISAuthenticationAuthWdigestLogonFailed(Action`1<W3AuthWDigestLogonFailed> value);
    public void add_IISCacheFileCacheAccessEnd(Action`1<W3CacheFileCacheAccessEnd> value);
    public void remove_IISCacheFileCacheAccessEnd(Action`1<W3CacheFileCacheAccessEnd> value);
    public void add_IISCacheFileCacheAccessStart(Action`1<W3CacheFileCacheAccessStart> value);
    public void remove_IISCacheFileCacheAccessStart(Action`1<W3CacheFileCacheAccessStart> value);
    public void add_IISCacheHttpsysCacheable(Action`1<W3CacheHttpsysCacheable> value);
    public void remove_IISCacheHttpsysCacheable(Action`1<W3CacheHttpsysCacheable> value);
    public void add_IISCacheOutputCacheDisabled(Action`1<W3OutputCacheDisabled> value);
    public void remove_IISCacheOutputCacheDisabled(Action`1<W3OutputCacheDisabled> value);
    public void add_IISCacheOutputCacheLookupEnd(Action`1<W3OutputCacheLookupEnd> value);
    public void remove_IISCacheOutputCacheLookupEnd(Action`1<W3OutputCacheLookupEnd> value);
    public void add_IISCacheOutputCacheLookupStart(Action`1<W3OutputCacheLookupStart> value);
    public void remove_IISCacheOutputCacheLookupStart(Action`1<W3OutputCacheLookupStart> value);
    public void add_IISCacheOutputCacheUpdateEnd(Action`1<W3OutputCacheUpdateEnd> value);
    public void remove_IISCacheOutputCacheUpdateEnd(Action`1<W3OutputCacheUpdateEnd> value);
    public void add_IISCacheOutputCacheUpdateStart(Action`1<W3OutputCacheUpdateStart> value);
    public void remove_IISCacheOutputCacheUpdateStart(Action`1<W3OutputCacheUpdateStart> value);
    public void add_IISCacheUrlCacheAccessEnd(Action`1<W3CacheURLCacheAccessEnd> value);
    public void remove_IISCacheUrlCacheAccessEnd(Action`1<W3CacheURLCacheAccessEnd> value);
    public void add_IISCacheUrlCacheAccessStart(Action`1<W3CacheURLCacheAccessStart> value);
    public void remove_IISCacheUrlCacheAccessStart(Action`1<W3CacheURLCacheAccessStart> value);
    public void add_IISCGICgiEnd(Action`1<W3CGIEnd> value);
    public void remove_IISCGICgiEnd(Action`1<W3CGIEnd> value);
    public void add_IISCGICgiHeadersReceived(Action`1<W3CGIHeadersReceived> value);
    public void remove_IISCGICgiHeadersReceived(Action`1<W3CGIHeadersReceived> value);
    public void add_IISCGICgiLaunch(Action`1<W3CGILaunch> value);
    public void remove_IISCGICgiLaunch(Action`1<W3CGILaunch> value);
    public void add_IISCGICgiPrematureTermination(Action`1<W3CGIPrematureTermination> value);
    public void remove_IISCGICgiPrematureTermination(Action`1<W3CGIPrematureTermination> value);
    public void add_IISCGICgiRequestEntitySent(Action`1<W3CGIRequestEntitySent> value);
    public void remove_IISCGICgiRequestEntitySent(Action`1<W3CGIRequestEntitySent> value);
    public void add_IISCGICgiStart(Action`1<W3CGIStart> value);
    public void remove_IISCGICgiStart(Action`1<W3CGIStart> value);
    public void add_IISCGICgiTimeout(Action`1<W3CGITimeout> value);
    public void remove_IISCGICgiTimeout(Action`1<W3CGITimeout> value);
    public void add_IISCompressionDynamicCompressionDo(Action`1<W3DynamicCompressionDo> value);
    public void remove_IISCompressionDynamicCompressionDo(Action`1<W3DynamicCompressionDo> value);
    public void add_IISCompressionDynamicCompressionEnd(Action`1<W3DynamicCompressionEnd> value);
    public void remove_IISCompressionDynamicCompressionEnd(Action`1<W3DynamicCompressionEnd> value);
    public void add_IISCompressionDynamicCompressionNotSuccess(Action`1<W3DynamicCompressionNotSuccess> value);
    public void remove_IISCompressionDynamicCompressionNotSuccess(Action`1<W3DynamicCompressionNotSuccess> value);
    public void add_IISCompressionDynamicCompressionStart(Action`1<W3DynamicCompressionStart> value);
    public void remove_IISCompressionDynamicCompressionStart(Action`1<W3DynamicCompressionStart> value);
    public void add_IISCompressionDynamicCompressionSuccess(Action`1<W3DynamicCompressionSuccess> value);
    public void remove_IISCompressionDynamicCompressionSuccess(Action`1<W3DynamicCompressionSuccess> value);
    public void add_IISCompressionStaticCompressionCreateEnd(Action`1<W3StaticCompressionCreateEnd> value);
    public void remove_IISCompressionStaticCompressionCreateEnd(Action`1<W3StaticCompressionCreateEnd> value);
    public void add_IISCompressionStaticCompressionCreateStart(Action`1<W3StaticCompressionCreateStart> value);
    public void remove_IISCompressionStaticCompressionCreateStart(Action`1<W3StaticCompressionCreateStart> value);
    public void add_IISCompressionStaticCompressionEnd(Action`1<W3StaticCompressionEnd> value);
    public void remove_IISCompressionStaticCompressionEnd(Action`1<W3StaticCompressionEnd> value);
    public void add_IISCompressionStaticCompressionNotSuccess(Action`1<W3StaticCompressionNotSuccess> value);
    public void remove_IISCompressionStaticCompressionNotSuccess(Action`1<W3StaticCompressionNotSuccess> value);
    public void add_IISCompressionStaticCompressionStart(Action`1<W3StaticCompressionStart> value);
    public void remove_IISCompressionStaticCompressionStart(Action`1<W3StaticCompressionStart> value);
    public void add_IISCompressionStaticCompressionSuccess(Action`1<W3StaticCompressionSuccess> value);
    public void remove_IISCompressionStaticCompressionSuccess(Action`1<W3StaticCompressionSuccess> value);
    public void add_IISFastCGIFastcgiActivityTimeout(Action`1<W3CGIFActivityTimeout> value);
    public void remove_IISFastCGIFastcgiActivityTimeout(Action`1<W3CGIFActivityTimeout> value);
    public void add_IISFastCGIFastcgiAddJobobjectFail(Action`1<W3CGIFAddJobObjectFail> value);
    public void remove_IISFastCGIFastcgiAddJobobjectFail(Action`1<W3CGIFAddJobObjectFail> value);
    public void add_IISFastCGIFastcgiApplicationManagerShutdown(Action`1<W3CGIFAppMgrShutdown> value);
    public void remove_IISFastCGIFastcgiApplicationManagerShutdown(Action`1<W3CGIFAppMgrShutdown> value);
    public void add_IISFastCGIFastcgiAssignProcess(Action`1<W3CGIFAssignProcess> value);
    public void remove_IISFastCGIFastcgiAssignProcess(Action`1<W3CGIFAssignProcess> value);
    public void add_IISFastCGIFastcgiEnd(Action`1<W3CGIFEnd> value);
    public void remove_IISFastCGIFastcgiEnd(Action`1<W3CGIFEnd> value);
    public void add_IISFastCGIFastcgiPathNotFound(Action`1<W3CGIFPathNotFound> value);
    public void remove_IISFastCGIFastcgiPathNotFound(Action`1<W3CGIFPathNotFound> value);
    public void add_IISFastCGIFastcgiQueueFull(Action`1<W3CGIFQueueFull> value);
    public void remove_IISFastCGIFastcgiQueueFull(Action`1<W3CGIFQueueFull> value);
    public void add_IISFastCGIFastcgiQueueRequest(Action`1<W3CGIFQueueRequest> value);
    public void remove_IISFastCGIFastcgiQueueRequest(Action`1<W3CGIFQueueRequest> value);
    public void add_IISFastCGIFastcgiRapidFailureProtection(Action`1<W3CGIFRapidFailureProtection> value);
    public void remove_IISFastCGIFastcgiRapidFailureProtection(Action`1<W3CGIFRapidFailureProtection> value);
    public void add_IISFastCGIFastcgiRequestTimeout(Action`1<W3CGIFRequestTimeout> value);
    public void remove_IISFastCGIFastcgiRequestTimeout(Action`1<W3CGIFRequestTimeout> value);
    public void add_IISFastCGIFastcgiResponseWritten(Action`1<W3CGIFResponseWritten> value);
    public void remove_IISFastCGIFastcgiResponseWritten(Action`1<W3CGIFResponseWritten> value);
    public void add_IISFastCGIFastcgiScriptProcessorMissing(Action`1<W3CGIFScriptProcessorMissing> value);
    public void remove_IISFastCGIFastcgiScriptProcessorMissing(Action`1<W3CGIFScriptProcessorMissing> value);
    public void add_IISFastCGIFastcgiStart(Action`1<W3CGIFStart> value);
    public void remove_IISFastCGIFastcgiStart(Action`1<W3CGIFStart> value);
    public void add_IISFastCGIFastcgiStderrTraceError(Action`1<W3CGIFTraceError> value);
    public void remove_IISFastCGIFastcgiStderrTraceError(Action`1<W3CGIFTraceError> value);
    public void add_IISFastCGIFastcgiStderrTraceInfo(Action`1<W3CGIFTraceInfo> value);
    public void remove_IISFastCGIFastcgiStderrTraceInfo(Action`1<W3CGIFTraceInfo> value);
    public void add_IISFastCGIFastcgiStderrTraceWarning(Action`1<W3CGIFTraceWarning> value);
    public void remove_IISFastCGIFastcgiStderrTraceWarning(Action`1<W3CGIFTraceWarning> value);
    public void add_IISFastCGIFastcgiUnexpectedExit(Action`1<W3CGIFUnexpectedExit> value);
    public void remove_IISFastCGIFastcgiUnexpectedExit(Action`1<W3CGIFUnexpectedExit> value);
    public void add_IISFastCGIFastcgiUnknownError(Action`1<W3CGIFUnknownError> value);
    public void remove_IISFastCGIFastcgiUnknownError(Action`1<W3CGIFUnknownError> value);
    public void add_IISFastCGIFastcgiWaitingForResponse(Action`1<W3CGIFWaitingForResponse> value);
    public void remove_IISFastCGIFastcgiWaitingForResponse(Action`1<W3CGIFWaitingForResponse> value);
    public void add_IISFilterFilterAccessDeniedEnd(Action`1<W3FilterAccessDeniedEnd> value);
    public void remove_IISFilterFilterAccessDeniedEnd(Action`1<W3FilterAccessDeniedEnd> value);
    public void add_IISFilterFilterAccessDeniedStart(Action`1<W3FilterAccessDeniedStart> value);
    public void remove_IISFilterFilterAccessDeniedStart(Action`1<W3FilterAccessDeniedStart> value);
    public void add_IISFilterFilterAddReqHeader(Action`1<W3FilterAddReqHeader> value);
    public void remove_IISFilterFilterAddReqHeader(Action`1<W3FilterAddReqHeader> value);
    public void add_IISFilterFilterAddRespHeader(Action`1<W3FilterAddRespHeader> value);
    public void remove_IISFilterFilterAddRespHeader(Action`1<W3FilterAddRespHeader> value);
    public void add_IISFilterFilterAuthCompleteEnd(Action`1<W3FilterAuthCompleteEnd> value);
    public void remove_IISFilterFilterAuthCompleteEnd(Action`1<W3FilterAuthCompleteEnd> value);
    public void add_IISFilterFilterAuthCompleteStart(Action`1<W3FilterAuthCompleteStart> value);
    public void remove_IISFilterFilterAuthCompleteStart(Action`1<W3FilterAuthCompleteStart> value);
    public void add_IISFilterFilterAuthenticationEnd(Action`1<W3FilterAuthenticationEnd> value);
    public void remove_IISFilterFilterAuthenticationEnd(Action`1<W3FilterAuthenticationEnd> value);
    public void add_IISFilterFilterAuthenticationStart(Action`1<W3FilterAuthenticationStart> value);
    public void remove_IISFilterFilterAuthenticationStart(Action`1<W3FilterAuthenticationStart> value);
    public void add_IISFilterFilterEnd(Action`1<W3FilterEnd> value);
    public void remove_IISFilterFilterEnd(Action`1<W3FilterEnd> value);
    public void add_IISFilterFilterEndOfRequestEnd(Action`1<W3FilterEndOfRequestEnd> value);
    public void remove_IISFilterFilterEndOfRequestEnd(Action`1<W3FilterEndOfRequestEnd> value);
    public void add_IISFilterFilterEndOfRequestStart(Action`1<W3FilterEndOfRequestStart> value);
    public void remove_IISFilterFilterEndOfRequestStart(Action`1<W3FilterEndOfRequestStart> value);
    public void add_IISFilterFilterError(Action`1<W3FilterError> value);
    public void remove_IISFilterFilterError(Action`1<W3FilterError> value);
    public void add_IISFilterFilterLogEnd(Action`1<W3FilterLogEnd> value);
    public void remove_IISFilterFilterLogEnd(Action`1<W3FilterLogEnd> value);
    public void add_IISFilterFilterLogStart(Action`1<W3FilterLogStart> value);
    public void remove_IISFilterFilterLogStart(Action`1<W3FilterLogStart> value);
    public void add_IISFilterFilterPreprocHeadersEnd(Action`1<W3FilterPreprocEnd> value);
    public void remove_IISFilterFilterPreprocHeadersEnd(Action`1<W3FilterPreprocEnd> value);
    public void add_IISFilterFilterPreprocHeadersStart(Action`1<W3FilterPreprocStart> value);
    public void remove_IISFilterFilterPreprocHeadersStart(Action`1<W3FilterPreprocStart> value);
    public void add_IISFilterFilterSendRawDataEnd(Action`1<W3FilterSendRawDataEnd> value);
    public void remove_IISFilterFilterSendRawDataEnd(Action`1<W3FilterSendRawDataEnd> value);
    public void add_IISFilterFilterSendRawDataStart(Action`1<W3FilterSendRawDataStart> value);
    public void remove_IISFilterFilterSendRawDataStart(Action`1<W3FilterSendRawDataStart> value);
    public void add_IISFilterFilterSendResponseEnd(Action`1<W3FilterSendResponseEnd> value);
    public void remove_IISFilterFilterSendResponseEnd(Action`1<W3FilterSendResponseEnd> value);
    public void add_IISFilterFilterSendResponseStart(Action`1<W3FilterSendResponseStart> value);
    public void remove_IISFilterFilterSendResponseStart(Action`1<W3FilterSendResponseStart> value);
    public void add_IISFilterFilterSetReqHeader(Action`1<W3FilterSetReqHeader> value);
    public void remove_IISFilterFilterSetReqHeader(Action`1<W3FilterSetReqHeader> value);
    public void add_IISFilterFilterSetRespHeader(Action`1<W3FilterSetRespHeader> value);
    public void remove_IISFilterFilterSetRespHeader(Action`1<W3FilterSetRespHeader> value);
    public void add_IISFilterFilterStart(Action`1<W3FilterStart> value);
    public void remove_IISFilterFilterStart(Action`1<W3FilterStart> value);
    public void add_IISFilterFilterUrlMapEnd(Action`1<W3FilterURLMapEnd> value);
    public void remove_IISFilterFilterUrlMapEnd(Action`1<W3FilterURLMapEnd> value);
    public void add_IISFilterFilterUrlMapStart(Action`1<W3FilterURLMapStart> value);
    public void remove_IISFilterFilterUrlMapStart(Action`1<W3FilterURLMapStart> value);
    public void add_IISGeneralConfigChangeNotification(Action`1<IISGeneralConfigChangeNotification> value);
    public void remove_IISGeneralConfigChangeNotification(Action`1<IISGeneralConfigChangeNotification> value);
    public void add_IISGeneralFileChangeNotification(Action`1<IISGeneralFileChangeNotification> value);
    public void remove_IISGeneralFileChangeNotification(Action`1<IISGeneralFileChangeNotification> value);
    public void add_IISGeneralGeneralCgiHandler(Action`1<W3GeneralCGIHandler> value);
    public void remove_IISGeneralGeneralCgiHandler(Action`1<W3GeneralCGIHandler> value);
    public void add_IISGeneralGeneralChildRequestEnd(Action`1<W3GeneralChildRequestEnd> value);
    public void remove_IISGeneralGeneralChildRequestEnd(Action`1<W3GeneralChildRequestEnd> value);
    public void add_IISGeneralGeneralChildRequestStart(Action`1<W3GeneralChildRequestStart> value);
    public void remove_IISGeneralGeneralChildRequestStart(Action`1<W3GeneralChildRequestStart> value);
    public void add_IISGeneralGeneralDavHandler(Action`1<W3GeneralDavHandler> value);
    public void remove_IISGeneralGeneralDavHandler(Action`1<W3GeneralDavHandler> value);
    public void add_IISGeneralGeneralEndpointInformation(Action`1<W3GeneralEndpointInformation> value);
    public void remove_IISGeneralGeneralEndpointInformation(Action`1<W3GeneralEndpointInformation> value);
    public void add_IISGeneralGeneralFlushResponseEnd(Action`1<W3GeneralFlushResponseEnd> value);
    public void remove_IISGeneralGeneralFlushResponseEnd(Action`1<W3GeneralFlushResponseEnd> value);
    public void add_IISGeneralGeneralFlushResponseStart(Action`1<W3GeneralFlushResponseStart> value);
    public void remove_IISGeneralGeneralFlushResponseStart(Action`1<W3GeneralFlushResponseStart> value);
    public void add_IISGeneralGeneralGetUrlMetadata(Action`1<W3GeneralGetURLMetadata> value);
    public void remove_IISGeneralGeneralGetUrlMetadata(Action`1<W3GeneralGetURLMetadata> value);
    public void add_IISGeneralGeneralIsapiHandler(Action`1<W3GeneralISAPIHandler> value);
    public void remove_IISGeneralGeneralIsapiHandler(Action`1<W3GeneralISAPIHandler> value);
    public void add_IISGeneralGeneralMapHandler(Action`1<W3GeneralMapHandler> value);
    public void remove_IISGeneralGeneralMapHandler(Action`1<W3GeneralMapHandler> value);
    public void add_IISGeneralGeneralModuleFactoryFailed(Action`1<W3GeneralModuleFactoryFailed> value);
    public void remove_IISGeneralGeneralModuleFactoryFailed(Action`1<W3GeneralModuleFactoryFailed> value);
    public void add_IISGeneralGeneralNotSendCustomError(Action`1<W3GeneralNotSendCustomError> value);
    public void remove_IISGeneralGeneralNotSendCustomError(Action`1<W3GeneralNotSendCustomError> value);
    public void add_IISGeneralGeneralOopIsapiHandler(Action`1<W3GeneralOopISAPIHandler> value);
    public void remove_IISGeneralGeneralOopIsapiHandler(Action`1<W3GeneralOopISAPIHandler> value);
    public void add_IISGeneralGeneralOptionsHandler(Action`1<W3GeneralOptionsHandler> value);
    public void remove_IISGeneralGeneralOptionsHandler(Action`1<W3GeneralOptionsHandler> value);
    public void add_IISGeneralGeneralReadEntityEnd(Action`1<W3GeneralReadEntityEnd> value);
    public void remove_IISGeneralGeneralReadEntityEnd(Action`1<W3GeneralReadEntityEnd> value);
    public void add_IISGeneralGeneralReadEntityStart(Action`1<W3GeneralReadEntityStart> value);
    public void remove_IISGeneralGeneralReadEntityStart(Action`1<W3GeneralReadEntityStart> value);
    public void add_IISGeneralGeneralRedirectionHandler(Action`1<W3GeneralRedirectionHandler> value);
    public void remove_IISGeneralGeneralRedirectionHandler(Action`1<W3GeneralRedirectionHandler> value);
    public void add_IISGeneralGeneralRequestEnd(Action`1<W3GeneralEndNewRequest> value);
    public void remove_IISGeneralGeneralRequestEnd(Action`1<W3GeneralEndNewRequest> value);
    public void add_IISGeneralGeneralRequestEntity(Action`1<W3GeneralRequestEntity> value);
    public void remove_IISGeneralGeneralRequestEntity(Action`1<W3GeneralRequestEntity> value);
    public void add_IISGeneralGeneralRequestHeaders(Action`1<W3GeneralRequestHeaders> value);
    public void remove_IISGeneralGeneralRequestHeaders(Action`1<W3GeneralRequestHeaders> value);
    public void add_IISGeneralGeneralRequestStart(Action`1<W3GeneralStartNewRequest> value);
    public void remove_IISGeneralGeneralRequestStart(Action`1<W3GeneralStartNewRequest> value);
    public void add_IISGeneralGeneralResponseEntityBuffer(Action`1<W3GeneralResponseEntityBuffer> value);
    public void remove_IISGeneralGeneralResponseEntityBuffer(Action`1<W3GeneralResponseEntityBuffer> value);
    public void add_IISGeneralGeneralResponseEntityFile(Action`1<W3GeneralResponseEntityFile> value);
    public void remove_IISGeneralGeneralResponseEntityFile(Action`1<W3GeneralResponseEntityFile> value);
    public void add_IISGeneralGeneralResponseHeaders(Action`1<W3GeneralResponseHeaders> value);
    public void remove_IISGeneralGeneralResponseHeaders(Action`1<W3GeneralResponseHeaders> value);
    public void add_IISGeneralGeneralSendCustomError(Action`1<W3GeneralSendCustomError> value);
    public void remove_IISGeneralGeneralSendCustomError(Action`1<W3GeneralSendCustomError> value);
    public void add_IISGeneralGeneralSetRequestHeader(Action`1<W3GeneralSetRequestHeader> value);
    public void remove_IISGeneralGeneralSetRequestHeader(Action`1<W3GeneralSetRequestHeader> value);
    public void add_IISGeneralGeneralStaticFileHandler(Action`1<W3GeneralStaticFileHandler> value);
    public void remove_IISGeneralGeneralStaticFileHandler(Action`1<W3GeneralStaticFileHandler> value);
    public void add_IISGeneralGeneralTraceHandler(Action`1<W3GeneralTraceHandler> value);
    public void remove_IISGeneralGeneralTraceHandler(Action`1<W3GeneralTraceHandler> value);
    public void add_IISGeneralHandlerChanged(Action`1<IISGeneralHandlerChanged> value);
    public void remove_IISGeneralHandlerChanged(Action`1<IISGeneralHandlerChanged> value);
    public void add_IISGeneralHandlerPreconditionNotMatch(Action`1<IISGeneralHandlerPreconditionNotMatch> value);
    public void remove_IISGeneralHandlerPreconditionNotMatch(Action`1<IISGeneralHandlerPreconditionNotMatch> value);
    public void add_IISGeneralModulePreconditionNotMatch(Action`1<IISGeneralModulePreconditionNotMatch> value);
    public void remove_IISGeneralModulePreconditionNotMatch(Action`1<IISGeneralModulePreconditionNotMatch> value);
    public void add_IISGeneralUrlChanged(Action`1<IISGeneralUrlChanged> value);
    public void remove_IISGeneralUrlChanged(Action`1<IISGeneralUrlChanged> value);
    public void add_IISGeneralUserSet(Action`1<IISGeneralUserSet> value);
    public void remove_IISGeneralUserSet(Action`1<IISGeneralUserSet> value);
    public void add_IISGeneralVirtualModuleUnresolved(Action`1<IISGeneralVirtualModuleUnresolved> value);
    public void remove_IISGeneralVirtualModuleUnresolved(Action`1<IISGeneralVirtualModuleUnresolved> value);
    public void add_IISISAPIIsapiEnd(Action`1<W3ISAPIEnd> value);
    public void remove_IISISAPIIsapiEnd(Action`1<W3ISAPIEnd> value);
    public void add_IISISAPIIsapiStart(Action`1<W3ISAPIStart> value);
    public void remove_IISISAPIIsapiStart(Action`1<W3ISAPIStart> value);
    public void add_IISModuleModuleCriticalError(Action`1<IISModuleEventsModuleCriticalError> value);
    public void remove_IISModuleModuleCriticalError(Action`1<IISModuleEventsModuleCriticalError> value);
    public void add_IISModuleModuleEnd(Action`1<IISModuleEventsModuleEnd> value);
    public void remove_IISModuleModuleEnd(Action`1<IISModuleEventsModuleEnd> value);
    public void add_IISModuleModuleError(Action`1<IISModuleEventsModuleError> value);
    public void remove_IISModuleModuleError(Action`1<IISModuleEventsModuleError> value);
    public void add_IISModuleModuleInformation(Action`1<IISModuleEventsModuleInformation> value);
    public void remove_IISModuleModuleInformation(Action`1<IISModuleEventsModuleInformation> value);
    public void add_IISModuleModuleStart(Action`1<IISModuleEventsModuleStart> value);
    public void remove_IISModuleModuleStart(Action`1<IISModuleEventsModuleStart> value);
    public void add_IISModuleModuleVerbose(Action`1<IISModuleEventsModuleVerbose> value);
    public void remove_IISModuleModuleVerbose(Action`1<IISModuleEventsModuleVerbose> value);
    public void add_IISModuleModuleWarning(Action`1<IISModuleEventsModuleWarning> value);
    public void remove_IISModuleModuleWarning(Action`1<IISModuleEventsModuleWarning> value);
    public void add_IISRequestNotificationModuleSetResponseErrorStatus(Action`1<IISRequestNotificationEventsResponseErrorStatus> value);
    public void remove_IISRequestNotificationModuleSetResponseErrorStatus(Action`1<IISRequestNotificationEventsResponseErrorStatus> value);
    public void add_IISRequestNotificationModuleSetResponseSuccessStatus(Action`1<IISRequestNotificationEventsResponseSuccessStatus> value);
    public void remove_IISRequestNotificationModuleSetResponseSuccessStatus(Action`1<IISRequestNotificationEventsResponseSuccessStatus> value);
    public void add_IISRequestNotificationNotifyModuleCompletion(Action`1<IISRequestNotificationEventsCompletion> value);
    public void remove_IISRequestNotificationNotifyModuleCompletion(Action`1<IISRequestNotificationEventsCompletion> value);
    public void add_IISRequestNotificationNotifyModuleEnd(Action`1<IISRequestNotificationEventsEnd> value);
    public void remove_IISRequestNotificationNotifyModuleEnd(Action`1<IISRequestNotificationEventsEnd> value);
    public void add_IISRequestNotificationNotifyModuleStart(Action`1<IISRequestNotificationEventsStart> value);
    public void remove_IISRequestNotificationNotifyModuleStart(Action`1<IISRequestNotificationEventsStart> value);
    public void add_IISRequestNotificationPreBeginRequestEnd(Action`1<IISRequestNotificationPreBeginEnd> value);
    public void remove_IISRequestNotificationPreBeginRequestEnd(Action`1<IISRequestNotificationPreBeginEnd> value);
    public void add_IISRequestNotificationPreBeginRequestStart(Action`1<IISRequestNotificationPreBeginStart> value);
    public void remove_IISRequestNotificationPreBeginRequestStart(Action`1<IISRequestNotificationPreBeginStart> value);
    public void add_IISRequestNotificationRequestProcessingError(Action`1<IISRequestNotificationEventsError> value);
    public void remove_IISRequestNotificationRequestProcessingError(Action`1<IISRequestNotificationEventsError> value);
    public void add_IISRequestNotificationSetResponseErrorDescription(Action`1<IISRequestNotificationEventsResponseErrorDescription> value);
    public void remove_IISRequestNotificationSetResponseErrorDescription(Action`1<IISRequestNotificationEventsResponseErrorDescription> value);
    public void add_IISSecuritySecurityDeniedByAccessFlags(Action`1<W3SecDeniedByAccessFlags> value);
    public void remove_IISSecuritySecurityDeniedByAccessFlags(Action`1<W3SecDeniedByAccessFlags> value);
    public void add_IISSecuritySecurityDeniedByCgiRestriction(Action`1<W3SecDeniedByCGIRestriction> value);
    public void remove_IISSecuritySecurityDeniedByCgiRestriction(Action`1<W3SecDeniedByCGIRestriction> value);
    public void add_IISSecuritySecurityDeniedByIsapiRestriction(Action`1<W3SecDeniedByISAPIRestriction> value);
    public void remove_IISSecuritySecurityDeniedByIsapiRestriction(Action`1<W3SecDeniedByISAPIRestriction> value);
    public void add_IISSecuritySecurityDeniedByMimemap(Action`1<W3SecDeniedByMimemap> value);
    public void remove_IISSecuritySecurityDeniedByMimemap(Action`1<W3SecDeniedByMimemap> value);
    public void add_IISSecuritySecurityFileAccessDenied(Action`1<W3SecFileAccessDenied> value);
    public void remove_IISSecuritySecurityFileAccessDenied(Action`1<W3SecFileAccessDenied> value);
    public void add_IISSecuritySecurityIllegalShortFilename(Action`1<W3SecIllegalShortFilename> value);
    public void remove_IISSecuritySecurityIllegalShortFilename(Action`1<W3SecIllegalShortFilename> value);
    public void add_IISSecuritySecurityRejectedHostname(Action`1<W3SecRejectedHostname> value);
    public void remove_IISSecuritySecurityRejectedHostname(Action`1<W3SecRejectedHostname> value);
    public void add_IISSecuritySecurityRejectedIp(Action`1<W3SecRejectedIP> value);
    public void remove_IISSecuritySecurityRejectedIp(Action`1<W3SecRejectedIP> value);
    public void add_IISSecuritySecurityRejectedRequireSsl128(Action`1<W3SecRequireSSL128> value);
    public void remove_IISSecuritySecurityRejectedRequireSsl128(Action`1<W3SecRequireSSL128> value);
    public void add_IISWebSocketWebsocketApplicationCloseConnection(Action`1<W3WebSocketApplicationCloseConnection> value);
    public void remove_IISWebSocketWebsocketApplicationCloseConnection(Action`1<W3WebSocketApplicationCloseConnection> value);
    public void add_IISWebSocketWebsocketHandshakeNotSuccess(Action`1<W3WebSocketEndFailure> value);
    public void remove_IISWebSocketWebsocketHandshakeNotSuccess(Action`1<W3WebSocketEndFailure> value);
    public void add_IISWebSocketWebsocketHandshakeStart(Action`1<W3WebSocketStart> value);
    public void remove_IISWebSocketWebsocketHandshakeStart(Action`1<W3WebSocketStart> value);
    public void add_IISWebSocketWebsocketHandshakeSuccess(Action`1<W3WebSocketEndSuccess> value);
    public void remove_IISWebSocketWebsocketHandshakeSuccess(Action`1<W3WebSocketEndSuccess> value);
    public void add_IISWebSocketWebsocketInitializeFailed(Action`1<W3WebSocketInitializeNotSuccess> value);
    public void remove_IISWebSocketWebsocketInitializeFailed(Action`1<W3WebSocketInitializeNotSuccess> value);
    public void add_IISWebSocketWebsocketModuleCloseConnection(Action`1<W3WebSocketModuleCloseConnection> value);
    public void remove_IISWebSocketWebsocketModuleCloseConnection(Action`1<W3WebSocketModuleCloseConnection> value);
    public void add_IISWebSocketWebsocketReadFragmentEndNotSuccess(Action`1<W3WebSocketReadFragmentEndFailure> value);
    public void remove_IISWebSocketWebsocketReadFragmentEndNotSuccess(Action`1<W3WebSocketReadFragmentEndFailure> value);
    public void add_IISWebSocketWebsocketReadFragmentEndPending(Action`1<W3WebSocketReadFragmentEndPending> value);
    public void remove_IISWebSocketWebsocketReadFragmentEndPending(Action`1<W3WebSocketReadFragmentEndPending> value);
    public void add_IISWebSocketWebsocketReadFragmentEndSuccess(Action`1<W3WebSocketReadFragmentEndSuccess> value);
    public void remove_IISWebSocketWebsocketReadFragmentEndSuccess(Action`1<W3WebSocketReadFragmentEndSuccess> value);
    public void add_IISWebSocketWebsocketReadFragmentStart(Action`1<W3WebSocketReadFragmentStart> value);
    public void remove_IISWebSocketWebsocketReadFragmentStart(Action`1<W3WebSocketReadFragmentStart> value);
    public void add_IISWebSocketWebsocketReadIoNotSuccess(Action`1<W3WebSocketReadIoFailed> value);
    public void remove_IISWebSocketWebsocketReadIoNotSuccess(Action`1<W3WebSocketReadIoFailed> value);
    public void add_IISWebSocketWebsocketReceivedClose(Action`1<W3WebSocketCloseReceived> value);
    public void remove_IISWebSocketWebsocketReceivedClose(Action`1<W3WebSocketCloseReceived> value);
    public void add_IISWebSocketWebsocketSendCloseEndNotSuccess(Action`1<W3WebSocketCloseSendFailure> value);
    public void remove_IISWebSocketWebsocketSendCloseEndNotSuccess(Action`1<W3WebSocketCloseSendFailure> value);
    public void add_IISWebSocketWebsocketSendCloseEndSuccess(Action`1<W3WebSocketCloseSendSuccess> value);
    public void remove_IISWebSocketWebsocketSendCloseEndSuccess(Action`1<W3WebSocketCloseSendSuccess> value);
    public void add_IISWebSocketWebsocketSendCloseStart(Action`1<W3WebSocketCloseSendStart> value);
    public void remove_IISWebSocketWebsocketSendCloseStart(Action`1<W3WebSocketCloseSendStart> value);
    public void add_IISWebSocketWebsocketWriteFragmentEndNotSuccess(Action`1<W3WebSocketWriteFragmentEndFailure> value);
    public void remove_IISWebSocketWebsocketWriteFragmentEndNotSuccess(Action`1<W3WebSocketWriteFragmentEndFailure> value);
    public void add_IISWebSocketWebsocketWriteFragmentEndPending(Action`1<W3WebSocketWriteFragmentEndPending> value);
    public void remove_IISWebSocketWebsocketWriteFragmentEndPending(Action`1<W3WebSocketWriteFragmentEndPending> value);
    public void add_IISWebSocketWebsocketWriteFragmentEndSuccess(Action`1<W3WebSocketWriteFragmentEndSuccess> value);
    public void remove_IISWebSocketWebsocketWriteFragmentEndSuccess(Action`1<W3WebSocketWriteFragmentEndSuccess> value);
    public void add_IISWebSocketWebsocketWriteFragmentStart(Action`1<W3WebSocketWriteFragmentStart> value);
    public void remove_IISWebSocketWebsocketWriteFragmentStart(Action`1<W3WebSocketWriteFragmentStart> value);
    public void add_IISWebSocketWebsocketWriteIoNotSuccess(Action`1<W3WebSocketWriteIoFailed> value);
    public void remove_IISWebSocketWebsocketWriteIoNotSuccess(Action`1<W3WebSocketWriteIoFailed> value);
    protected virtual string GetProviderName();
    private static W3AuthAnonPasswdChangeNeeded IISAuthenticationAuthAnonPasswdChangeNeededTemplate(Action`1<W3AuthAnonPasswdChangeNeeded> action);
    private static W3AuthBadBasicHeader IISAuthenticationAuthBadBasicHeaderTemplate(Action`1<W3AuthBadBasicHeader> action);
    private static W3AuthBasicLogonFailed IISAuthenticationAuthBasicLogonFailedTemplate(Action`1<W3AuthBasicLogonFailed> action);
    private static W3AuthEnd IISAuthenticationAuthEndTemplate(Action`1<W3AuthEnd> action);
    private static W3AuthIISDigestLogonFailed IISAuthenticationAuthIisdigestLogonFailedTemplate(Action`1<W3AuthIISDigestLogonFailed> action);
    private static W3AuthInvalidAnonAccount IISAuthenticationAuthInvalidAnonAccountTemplate(Action`1<W3AuthInvalidAnonAccount> action);
    private static W3AuthKerberosFailed IISAuthenticationAuthKerberosFailedTemplate(Action`1<W3AuthKerberosFailed> action);
    private static W3AuthNTLMNullSession IISAuthenticationAuthNtlmNullSessionTemplate(Action`1<W3AuthNTLMNullSession> action);
    private static W3AuthPassportLogonFailed IISAuthenticationAuthPassportLogonFailedTemplate(Action`1<W3AuthPassportLogonFailed> action);
    private static W3AuthPasswdChangeDisabled IISAuthenticationAuthPasswdChangeDisabledTemplate(Action`1<W3AuthPasswdChangeDisabled> action);
    private static W3AuthPasswdChangeNeeded IISAuthenticationAuthPasswdChangeNeededTemplate(Action`1<W3AuthPasswdChangeNeeded> action);
    private static W3AuthRequestAuthType IISAuthenticationAuthRequestAuthTypeTemplate(Action`1<W3AuthRequestAuthType> action);
    private static W3AuthSSPIContinueNeeded IISAuthenticationAuthSspiContinueNeededTemplate(Action`1<W3AuthSSPIContinueNeeded> action);
    private static W3AuthSSPILogonFailed IISAuthenticationAuthSspiLogonFailedTemplate(Action`1<W3AuthSSPILogonFailed> action);
    private static W3AuthStart IISAuthenticationAuthStartTemplate(Action`1<W3AuthStart> action);
    private static W3AuthSucceeded IISAuthenticationAuthSucceededTemplate(Action`1<W3AuthSucceeded> action);
    private static W3AuthTypeNotSupported IISAuthenticationAuthTypeNotSupportedTemplate(Action`1<W3AuthTypeNotSupported> action);
    private static W3AuthWDigestLogonFailed IISAuthenticationAuthWdigestLogonFailedTemplate(Action`1<W3AuthWDigestLogonFailed> action);
    private static W3CacheFileCacheAccessEnd IISCacheFileCacheAccessEndTemplate(Action`1<W3CacheFileCacheAccessEnd> action);
    private static W3CacheFileCacheAccessStart IISCacheFileCacheAccessStartTemplate(Action`1<W3CacheFileCacheAccessStart> action);
    private static W3CacheHttpsysCacheable IISCacheHttpsysCacheableTemplate(Action`1<W3CacheHttpsysCacheable> action);
    private static W3OutputCacheDisabled IISCacheOutputCacheDisabledTemplate(Action`1<W3OutputCacheDisabled> action);
    private static W3OutputCacheLookupEnd IISCacheOutputCacheLookupEndTemplate(Action`1<W3OutputCacheLookupEnd> action);
    private static W3OutputCacheLookupStart IISCacheOutputCacheLookupStartTemplate(Action`1<W3OutputCacheLookupStart> action);
    private static W3OutputCacheUpdateEnd IISCacheOutputCacheUpdateEndTemplate(Action`1<W3OutputCacheUpdateEnd> action);
    private static W3OutputCacheUpdateStart IISCacheOutputCacheUpdateStartTemplate(Action`1<W3OutputCacheUpdateStart> action);
    private static W3CacheURLCacheAccessEnd IISCacheUrlCacheAccessEndTemplate(Action`1<W3CacheURLCacheAccessEnd> action);
    private static W3CacheURLCacheAccessStart IISCacheUrlCacheAccessStartTemplate(Action`1<W3CacheURLCacheAccessStart> action);
    private static W3CGIEnd IISCGICgiEndTemplate(Action`1<W3CGIEnd> action);
    private static W3CGIHeadersReceived IISCGICgiHeadersReceivedTemplate(Action`1<W3CGIHeadersReceived> action);
    private static W3CGILaunch IISCGICgiLaunchTemplate(Action`1<W3CGILaunch> action);
    private static W3CGIPrematureTermination IISCGICgiPrematureTerminationTemplate(Action`1<W3CGIPrematureTermination> action);
    private static W3CGIRequestEntitySent IISCGICgiRequestEntitySentTemplate(Action`1<W3CGIRequestEntitySent> action);
    private static W3CGIStart IISCGICgiStartTemplate(Action`1<W3CGIStart> action);
    private static W3CGITimeout IISCGICgiTimeoutTemplate(Action`1<W3CGITimeout> action);
    private static W3DynamicCompressionDo IISCompressionDynamicCompressionDoTemplate(Action`1<W3DynamicCompressionDo> action);
    private static W3DynamicCompressionEnd IISCompressionDynamicCompressionEndTemplate(Action`1<W3DynamicCompressionEnd> action);
    private static W3DynamicCompressionNotSuccess IISCompressionDynamicCompressionNotSuccessTemplate(Action`1<W3DynamicCompressionNotSuccess> action);
    private static W3DynamicCompressionStart IISCompressionDynamicCompressionStartTemplate(Action`1<W3DynamicCompressionStart> action);
    private static W3DynamicCompressionSuccess IISCompressionDynamicCompressionSuccessTemplate(Action`1<W3DynamicCompressionSuccess> action);
    private static W3StaticCompressionCreateEnd IISCompressionStaticCompressionCreateEndTemplate(Action`1<W3StaticCompressionCreateEnd> action);
    private static W3StaticCompressionCreateStart IISCompressionStaticCompressionCreateStartTemplate(Action`1<W3StaticCompressionCreateStart> action);
    private static W3StaticCompressionEnd IISCompressionStaticCompressionEndTemplate(Action`1<W3StaticCompressionEnd> action);
    private static W3StaticCompressionNotSuccess IISCompressionStaticCompressionNotSuccessTemplate(Action`1<W3StaticCompressionNotSuccess> action);
    private static W3StaticCompressionStart IISCompressionStaticCompressionStartTemplate(Action`1<W3StaticCompressionStart> action);
    private static W3StaticCompressionSuccess IISCompressionStaticCompressionSuccessTemplate(Action`1<W3StaticCompressionSuccess> action);
    private static W3CGIFActivityTimeout IISFastCGIFastcgiActivityTimeoutTemplate(Action`1<W3CGIFActivityTimeout> action);
    private static W3CGIFAddJobObjectFail IISFastCGIFastcgiAddJobobjectFailTemplate(Action`1<W3CGIFAddJobObjectFail> action);
    private static W3CGIFAppMgrShutdown IISFastCGIFastcgiApplicationManagerShutdownTemplate(Action`1<W3CGIFAppMgrShutdown> action);
    private static W3CGIFAssignProcess IISFastCGIFastcgiAssignProcessTemplate(Action`1<W3CGIFAssignProcess> action);
    private static W3CGIFEnd IISFastCGIFastcgiEndTemplate(Action`1<W3CGIFEnd> action);
    private static W3CGIFPathNotFound IISFastCGIFastcgiPathNotFoundTemplate(Action`1<W3CGIFPathNotFound> action);
    private static W3CGIFQueueFull IISFastCGIFastcgiQueueFullTemplate(Action`1<W3CGIFQueueFull> action);
    private static W3CGIFQueueRequest IISFastCGIFastcgiQueueRequestTemplate(Action`1<W3CGIFQueueRequest> action);
    private static W3CGIFRapidFailureProtection IISFastCGIFastcgiRapidFailureProtectionTemplate(Action`1<W3CGIFRapidFailureProtection> action);
    private static W3CGIFRequestTimeout IISFastCGIFastcgiRequestTimeoutTemplate(Action`1<W3CGIFRequestTimeout> action);
    private static W3CGIFResponseWritten IISFastCGIFastcgiResponseWrittenTemplate(Action`1<W3CGIFResponseWritten> action);
    private static W3CGIFScriptProcessorMissing IISFastCGIFastcgiScriptProcessorMissingTemplate(Action`1<W3CGIFScriptProcessorMissing> action);
    private static W3CGIFStart IISFastCGIFastcgiStartTemplate(Action`1<W3CGIFStart> action);
    private static W3CGIFTraceError IISFastCGIFastcgiStderrTraceErrorTemplate(Action`1<W3CGIFTraceError> action);
    private static W3CGIFTraceInfo IISFastCGIFastcgiStderrTraceInfoTemplate(Action`1<W3CGIFTraceInfo> action);
    private static W3CGIFTraceWarning IISFastCGIFastcgiStderrTraceWarningTemplate(Action`1<W3CGIFTraceWarning> action);
    private static W3CGIFUnexpectedExit IISFastCGIFastcgiUnexpectedExitTemplate(Action`1<W3CGIFUnexpectedExit> action);
    private static W3CGIFUnknownError IISFastCGIFastcgiUnknownErrorTemplate(Action`1<W3CGIFUnknownError> action);
    private static W3CGIFWaitingForResponse IISFastCGIFastcgiWaitingForResponseTemplate(Action`1<W3CGIFWaitingForResponse> action);
    private static W3FilterAccessDeniedEnd IISFilterFilterAccessDeniedEndTemplate(Action`1<W3FilterAccessDeniedEnd> action);
    private static W3FilterAccessDeniedStart IISFilterFilterAccessDeniedStartTemplate(Action`1<W3FilterAccessDeniedStart> action);
    private static W3FilterAddReqHeader IISFilterFilterAddReqHeaderTemplate(Action`1<W3FilterAddReqHeader> action);
    private static W3FilterAddRespHeader IISFilterFilterAddRespHeaderTemplate(Action`1<W3FilterAddRespHeader> action);
    private static W3FilterAuthCompleteEnd IISFilterFilterAuthCompleteEndTemplate(Action`1<W3FilterAuthCompleteEnd> action);
    private static W3FilterAuthCompleteStart IISFilterFilterAuthCompleteStartTemplate(Action`1<W3FilterAuthCompleteStart> action);
    private static W3FilterAuthenticationEnd IISFilterFilterAuthenticationEndTemplate(Action`1<W3FilterAuthenticationEnd> action);
    private static W3FilterAuthenticationStart IISFilterFilterAuthenticationStartTemplate(Action`1<W3FilterAuthenticationStart> action);
    private static W3FilterEnd IISFilterFilterEndTemplate(Action`1<W3FilterEnd> action);
    private static W3FilterEndOfRequestEnd IISFilterFilterEndOfRequestEndTemplate(Action`1<W3FilterEndOfRequestEnd> action);
    private static W3FilterEndOfRequestStart IISFilterFilterEndOfRequestStartTemplate(Action`1<W3FilterEndOfRequestStart> action);
    private static W3FilterError IISFilterFilterErrorTemplate(Action`1<W3FilterError> action);
    private static W3FilterLogEnd IISFilterFilterLogEndTemplate(Action`1<W3FilterLogEnd> action);
    private static W3FilterLogStart IISFilterFilterLogStartTemplate(Action`1<W3FilterLogStart> action);
    private static W3FilterPreprocEnd IISFilterFilterPreprocHeadersEndTemplate(Action`1<W3FilterPreprocEnd> action);
    private static W3FilterPreprocStart IISFilterFilterPreprocHeadersStartTemplate(Action`1<W3FilterPreprocStart> action);
    private static W3FilterSendRawDataEnd IISFilterFilterSendRawDataEndTemplate(Action`1<W3FilterSendRawDataEnd> action);
    private static W3FilterSendRawDataStart IISFilterFilterSendRawDataStartTemplate(Action`1<W3FilterSendRawDataStart> action);
    private static W3FilterSendResponseEnd IISFilterFilterSendResponseEndTemplate(Action`1<W3FilterSendResponseEnd> action);
    private static W3FilterSendResponseStart IISFilterFilterSendResponseStartTemplate(Action`1<W3FilterSendResponseStart> action);
    private static W3FilterSetReqHeader IISFilterFilterSetReqHeaderTemplate(Action`1<W3FilterSetReqHeader> action);
    private static W3FilterSetRespHeader IISFilterFilterSetRespHeaderTemplate(Action`1<W3FilterSetRespHeader> action);
    private static W3FilterStart IISFilterFilterStartTemplate(Action`1<W3FilterStart> action);
    private static W3FilterURLMapEnd IISFilterFilterUrlMapEndTemplate(Action`1<W3FilterURLMapEnd> action);
    private static W3FilterURLMapStart IISFilterFilterUrlMapStartTemplate(Action`1<W3FilterURLMapStart> action);
    private static IISGeneralConfigChangeNotification IISGeneralConfigChangeNotificationTemplate(Action`1<IISGeneralConfigChangeNotification> action);
    private static IISGeneralFileChangeNotification IISGeneralFileChangeNotificationTemplate(Action`1<IISGeneralFileChangeNotification> action);
    private static W3GeneralCGIHandler IISGeneralGeneralCgiHandlerTemplate(Action`1<W3GeneralCGIHandler> action);
    private static W3GeneralChildRequestEnd IISGeneralGeneralChildRequestEndTemplate(Action`1<W3GeneralChildRequestEnd> action);
    private static W3GeneralChildRequestStart IISGeneralGeneralChildRequestStartTemplate(Action`1<W3GeneralChildRequestStart> action);
    private static W3GeneralDavHandler IISGeneralGeneralDavHandlerTemplate(Action`1<W3GeneralDavHandler> action);
    private static W3GeneralEndpointInformation IISGeneralGeneralEndpointInformationTemplate(Action`1<W3GeneralEndpointInformation> action);
    private static W3GeneralFlushResponseEnd IISGeneralGeneralFlushResponseEndTemplate(Action`1<W3GeneralFlushResponseEnd> action);
    private static W3GeneralFlushResponseStart IISGeneralGeneralFlushResponseStartTemplate(Action`1<W3GeneralFlushResponseStart> action);
    private static W3GeneralGetURLMetadata IISGeneralGeneralGetUrlMetadataTemplate(Action`1<W3GeneralGetURLMetadata> action);
    private static W3GeneralISAPIHandler IISGeneralGeneralIsapiHandlerTemplate(Action`1<W3GeneralISAPIHandler> action);
    private static W3GeneralMapHandler IISGeneralGeneralMapHandlerTemplate(Action`1<W3GeneralMapHandler> action);
    private static W3GeneralModuleFactoryFailed IISGeneralGeneralModuleFactoryFailedTemplate(Action`1<W3GeneralModuleFactoryFailed> action);
    private static W3GeneralNotSendCustomError IISGeneralGeneralNotSendCustomErrorTemplate(Action`1<W3GeneralNotSendCustomError> action);
    private static W3GeneralOopISAPIHandler IISGeneralGeneralOopIsapiHandlerTemplate(Action`1<W3GeneralOopISAPIHandler> action);
    private static W3GeneralOptionsHandler IISGeneralGeneralOptionsHandlerTemplate(Action`1<W3GeneralOptionsHandler> action);
    private static W3GeneralReadEntityEnd IISGeneralGeneralReadEntityEndTemplate(Action`1<W3GeneralReadEntityEnd> action);
    private static W3GeneralReadEntityStart IISGeneralGeneralReadEntityStartTemplate(Action`1<W3GeneralReadEntityStart> action);
    private static W3GeneralRedirectionHandler IISGeneralGeneralRedirectionHandlerTemplate(Action`1<W3GeneralRedirectionHandler> action);
    private static W3GeneralEndNewRequest IISGeneralGeneralRequestEndTemplate(Action`1<W3GeneralEndNewRequest> action);
    private static W3GeneralRequestEntity IISGeneralGeneralRequestEntityTemplate(Action`1<W3GeneralRequestEntity> action);
    private static W3GeneralRequestHeaders IISGeneralGeneralRequestHeadersTemplate(Action`1<W3GeneralRequestHeaders> action);
    private static W3GeneralStartNewRequest IISGeneralGeneralRequestStartTemplate(Action`1<W3GeneralStartNewRequest> action);
    private static W3GeneralResponseEntityBuffer IISGeneralGeneralResponseEntityBufferTemplate(Action`1<W3GeneralResponseEntityBuffer> action);
    private static W3GeneralResponseEntityFile IISGeneralGeneralResponseEntityFileTemplate(Action`1<W3GeneralResponseEntityFile> action);
    private static W3GeneralResponseHeaders IISGeneralGeneralResponseHeadersTemplate(Action`1<W3GeneralResponseHeaders> action);
    private static W3GeneralSendCustomError IISGeneralGeneralSendCustomErrorTemplate(Action`1<W3GeneralSendCustomError> action);
    private static W3GeneralSetRequestHeader IISGeneralGeneralSetRequestHeaderTemplate(Action`1<W3GeneralSetRequestHeader> action);
    private static W3GeneralStaticFileHandler IISGeneralGeneralStaticFileHandlerTemplate(Action`1<W3GeneralStaticFileHandler> action);
    private static W3GeneralTraceHandler IISGeneralGeneralTraceHandlerTemplate(Action`1<W3GeneralTraceHandler> action);
    private static IISGeneralHandlerChanged IISGeneralHandlerChangedTemplate(Action`1<IISGeneralHandlerChanged> action);
    private static IISGeneralHandlerPreconditionNotMatch IISGeneralHandlerPreconditionNotMatchTemplate(Action`1<IISGeneralHandlerPreconditionNotMatch> action);
    private static IISGeneralModulePreconditionNotMatch IISGeneralModulePreconditionNotMatchTemplate(Action`1<IISGeneralModulePreconditionNotMatch> action);
    private static IISGeneralUrlChanged IISGeneralUrlChangedTemplate(Action`1<IISGeneralUrlChanged> action);
    private static IISGeneralUserSet IISGeneralUserSetTemplate(Action`1<IISGeneralUserSet> action);
    private static IISGeneralVirtualModuleUnresolved IISGeneralVirtualModuleUnresolvedTemplate(Action`1<IISGeneralVirtualModuleUnresolved> action);
    private static W3ISAPIEnd IISISAPIIsapiEndTemplate(Action`1<W3ISAPIEnd> action);
    private static W3ISAPIStart IISISAPIIsapiStartTemplate(Action`1<W3ISAPIStart> action);
    private static IISModuleEventsModuleCriticalError IISModuleModuleCriticalErrorTemplate(Action`1<IISModuleEventsModuleCriticalError> action);
    private static IISModuleEventsModuleEnd IISModuleModuleEndTemplate(Action`1<IISModuleEventsModuleEnd> action);
    private static IISModuleEventsModuleError IISModuleModuleErrorTemplate(Action`1<IISModuleEventsModuleError> action);
    private static IISModuleEventsModuleInformation IISModuleModuleInformationTemplate(Action`1<IISModuleEventsModuleInformation> action);
    private static IISModuleEventsModuleStart IISModuleModuleStartTemplate(Action`1<IISModuleEventsModuleStart> action);
    private static IISModuleEventsModuleVerbose IISModuleModuleVerboseTemplate(Action`1<IISModuleEventsModuleVerbose> action);
    private static IISModuleEventsModuleWarning IISModuleModuleWarningTemplate(Action`1<IISModuleEventsModuleWarning> action);
    private static IISRequestNotificationEventsResponseErrorStatus IISRequestNotificationModuleSetResponseErrorStatusTemplate(Action`1<IISRequestNotificationEventsResponseErrorStatus> action);
    private static IISRequestNotificationEventsResponseSuccessStatus IISRequestNotificationModuleSetResponseSuccessStatusTemplate(Action`1<IISRequestNotificationEventsResponseSuccessStatus> action);
    private static IISRequestNotificationEventsCompletion IISRequestNotificationNotifyModuleCompletionTemplate(Action`1<IISRequestNotificationEventsCompletion> action);
    private static IISRequestNotificationEventsEnd IISRequestNotificationNotifyModuleEndTemplate(Action`1<IISRequestNotificationEventsEnd> action);
    private static IISRequestNotificationEventsStart IISRequestNotificationNotifyModuleStartTemplate(Action`1<IISRequestNotificationEventsStart> action);
    private static IISRequestNotificationPreBeginEnd IISRequestNotificationPreBeginRequestEndTemplate(Action`1<IISRequestNotificationPreBeginEnd> action);
    private static IISRequestNotificationPreBeginStart IISRequestNotificationPreBeginRequestStartTemplate(Action`1<IISRequestNotificationPreBeginStart> action);
    private static IISRequestNotificationEventsError IISRequestNotificationRequestProcessingErrorTemplate(Action`1<IISRequestNotificationEventsError> action);
    private static IISRequestNotificationEventsResponseErrorDescription IISRequestNotificationSetResponseErrorDescriptionTemplate(Action`1<IISRequestNotificationEventsResponseErrorDescription> action);
    private static W3SecDeniedByAccessFlags IISSecuritySecurityDeniedByAccessFlagsTemplate(Action`1<W3SecDeniedByAccessFlags> action);
    private static W3SecDeniedByCGIRestriction IISSecuritySecurityDeniedByCgiRestrictionTemplate(Action`1<W3SecDeniedByCGIRestriction> action);
    private static W3SecDeniedByISAPIRestriction IISSecuritySecurityDeniedByIsapiRestrictionTemplate(Action`1<W3SecDeniedByISAPIRestriction> action);
    private static W3SecDeniedByMimemap IISSecuritySecurityDeniedByMimemapTemplate(Action`1<W3SecDeniedByMimemap> action);
    private static W3SecFileAccessDenied IISSecuritySecurityFileAccessDeniedTemplate(Action`1<W3SecFileAccessDenied> action);
    private static W3SecIllegalShortFilename IISSecuritySecurityIllegalShortFilenameTemplate(Action`1<W3SecIllegalShortFilename> action);
    private static W3SecRejectedHostname IISSecuritySecurityRejectedHostnameTemplate(Action`1<W3SecRejectedHostname> action);
    private static W3SecRejectedIP IISSecuritySecurityRejectedIpTemplate(Action`1<W3SecRejectedIP> action);
    private static W3SecRequireSSL128 IISSecuritySecurityRejectedRequireSsl128Template(Action`1<W3SecRequireSSL128> action);
    private static W3WebSocketApplicationCloseConnection IISWebSocketWebsocketApplicationCloseConnectionTemplate(Action`1<W3WebSocketApplicationCloseConnection> action);
    private static W3WebSocketEndFailure IISWebSocketWebsocketHandshakeNotSuccessTemplate(Action`1<W3WebSocketEndFailure> action);
    private static W3WebSocketStart IISWebSocketWebsocketHandshakeStartTemplate(Action`1<W3WebSocketStart> action);
    private static W3WebSocketEndSuccess IISWebSocketWebsocketHandshakeSuccessTemplate(Action`1<W3WebSocketEndSuccess> action);
    private static W3WebSocketInitializeNotSuccess IISWebSocketWebsocketInitializeFailedTemplate(Action`1<W3WebSocketInitializeNotSuccess> action);
    private static W3WebSocketModuleCloseConnection IISWebSocketWebsocketModuleCloseConnectionTemplate(Action`1<W3WebSocketModuleCloseConnection> action);
    private static W3WebSocketReadFragmentEndFailure IISWebSocketWebsocketReadFragmentEndNotSuccessTemplate(Action`1<W3WebSocketReadFragmentEndFailure> action);
    private static W3WebSocketReadFragmentEndPending IISWebSocketWebsocketReadFragmentEndPendingTemplate(Action`1<W3WebSocketReadFragmentEndPending> action);
    private static W3WebSocketReadFragmentEndSuccess IISWebSocketWebsocketReadFragmentEndSuccessTemplate(Action`1<W3WebSocketReadFragmentEndSuccess> action);
    private static W3WebSocketReadFragmentStart IISWebSocketWebsocketReadFragmentStartTemplate(Action`1<W3WebSocketReadFragmentStart> action);
    private static W3WebSocketReadIoFailed IISWebSocketWebsocketReadIoNotSuccessTemplate(Action`1<W3WebSocketReadIoFailed> action);
    private static W3WebSocketCloseReceived IISWebSocketWebsocketReceivedCloseTemplate(Action`1<W3WebSocketCloseReceived> action);
    private static W3WebSocketCloseSendFailure IISWebSocketWebsocketSendCloseEndNotSuccessTemplate(Action`1<W3WebSocketCloseSendFailure> action);
    private static W3WebSocketCloseSendSuccess IISWebSocketWebsocketSendCloseEndSuccessTemplate(Action`1<W3WebSocketCloseSendSuccess> action);
    private static W3WebSocketCloseSendStart IISWebSocketWebsocketSendCloseStartTemplate(Action`1<W3WebSocketCloseSendStart> action);
    private static W3WebSocketWriteFragmentEndFailure IISWebSocketWebsocketWriteFragmentEndNotSuccessTemplate(Action`1<W3WebSocketWriteFragmentEndFailure> action);
    private static W3WebSocketWriteFragmentEndPending IISWebSocketWebsocketWriteFragmentEndPendingTemplate(Action`1<W3WebSocketWriteFragmentEndPending> action);
    private static W3WebSocketWriteFragmentEndSuccess IISWebSocketWebsocketWriteFragmentEndSuccessTemplate(Action`1<W3WebSocketWriteFragmentEndSuccess> action);
    private static W3WebSocketWriteFragmentStart IISWebSocketWebsocketWriteFragmentStartTemplate(Action`1<W3WebSocketWriteFragmentStart> action);
    private static W3WebSocketWriteIoFailed IISWebSocketWebsocketWriteIoNotSuccessTemplate(Action`1<W3WebSocketWriteIoFailed> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.BytecodeGenInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BytecodeGenInfoTraceData> Action;
    public long SourceID { get; }
    public ulong ScriptContextID { get; }
    public int MethodID { get; }
    public int BytecodeCount { get; }
    public int BytecodeSize { get; }
    public string MethodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BytecodeGenInfoTraceData(Action`1<BytecodeGenInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SourceID();
    public ulong get_ScriptContextID();
    public int get_MethodID();
    public int get_BytecodeCount();
    public int get_BytecodeSize();
    public string get_MethodName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BytecodeGenInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BytecodeGenInfoTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.GCPhaseCollectTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCPhaseCollectTraceData> Action;
    public ulong RecyclerID { get; }
    public int SweptBytes { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCPhaseCollectTraceData(Action`1<GCPhaseCollectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_RecyclerID();
    public int get_SweptBytes();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCPhaseCollectTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCPhaseCollectTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.GCPhaseTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GCPhaseTraceData> Action;
    public ulong RecyclerID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GCPhaseTraceData(Action`1<GCPhaseTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_RecyclerID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<GCPhaseTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<GCPhaseTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.InlineInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<InlineInfoTraceData> Action;
    public int CallerMethodID { get; }
    public int InlineeMethodID { get; }
    public string Caller { get; }
    public string Inlinee { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal InlineInfoTraceData(Action`1<InlineInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_CallerMethodID();
    public int get_InlineeMethodID();
    public string get_Caller();
    public string get_Inlinee();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<InlineInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<InlineInfoTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JitMethodQueueDequeueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JitMethodQueueDequeueTraceData> Action;
    public int MethodID { get; }
    public string MethodName { get; }
    public ulong ScriptContext { get; }
    public int InterpretedCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JitMethodQueueDequeueTraceData(Action`1<JitMethodQueueDequeueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_MethodID();
    public string get_MethodName();
    public ulong get_ScriptContext();
    public int get_InterpretedCount();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JitMethodQueueDequeueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JitMethodQueueDequeueTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JitMethodStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JitMethodStartTraceData> Action;
    public int MethodID { get; }
    public string MethodName { get; }
    public ulong ScriptContext { get; }
    public int InterpretedCount { get; }
    public int SourceCodeSize { get; }
    public int ByteCodeSize { get; }
    public int ByteCodeInLoopSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JitMethodStartTraceData(Action`1<JitMethodStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_MethodID();
    public string get_MethodName();
    public ulong get_ScriptContext();
    public int get_InterpretedCount();
    public int get_SourceCodeSize();
    public int get_ByteCodeSize();
    public int get_ByteCodeInLoopSize();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JitMethodStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JitMethodStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JitMethodStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JitMethodStopTraceData> Action;
    public int MethodID { get; }
    public string MethodName { get; }
    public ulong ScriptContext { get; }
    public int InterpretedCount { get; }
    public ulong MethodStartAddress { get; }
    public long MethodSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JitMethodStopTraceData(Action`1<JitMethodStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_MethodID();
    public string get_MethodName();
    public ulong get_ScriptContext();
    public int get_InterpretedCount();
    public ulong get_MethodStartAddress();
    public long get_MethodSize();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JitMethodStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JitMethodStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptAllocateFunctionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptAllocateFunctionTraceData> Action;
    public ulong MemoryAddress { get; }
    public int MethodID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptAllocateFunctionTraceData(Action`1<JscriptAllocateFunctionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public int get_MethodID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptAllocateFunctionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptAllocateFunctionTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptAllocationTraceData(Action`1<JscriptAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptDOMAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptDOMAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    public int TypeId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptDOMAllocationTraceData(Action`1<JscriptDOMAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public int get_TypeId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptDOMAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptDOMAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptRecyclerFreeBlockTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptRecyclerFreeBlockTraceData> Action;
    public ulong MemoryAddress { get; }
    public int BlockSize { get; }
    public int ObjectSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptRecyclerFreeBlockTraceData(Action`1<JscriptRecyclerFreeBlockTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public int get_BlockSize();
    public int get_ObjectSize();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptRecyclerFreeBlockTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptRecyclerFreeBlockTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptRecyclerFreeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptRecyclerFreeTraceData> Action;
    public int Count { get; }
    public ulong MemoryAddress { get; }
    public int Size { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptRecyclerFreeTraceData(Action`1<JscriptRecyclerFreeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    public ulong get_MemoryAddress();
    public int get_Size();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptRecyclerFreeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptRecyclerFreeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptSizeInBytesTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptSizeInBytesTraceData> Action;
    public long SizeInBytes { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptSizeInBytesTraceData(Action`1<JscriptSizeInBytesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SizeInBytes();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptSizeInBytesTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptSizeInBytesTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptWinRTEventHandlerAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptWinRTEventHandlerAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    public string TypeName { get; }
    public ulong callback { get; }
    public string EventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptWinRTEventHandlerAllocationTraceData(Action`1<JscriptWinRTEventHandlerAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public string get_TypeName();
    public ulong get_callback();
    public string get_EventName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptWinRTEventHandlerAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptWinRTEventHandlerAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JScriptWinRTObjectAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JScriptWinRTObjectAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    public string TypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JScriptWinRTObjectAllocationTraceData(Action`1<JScriptWinRTObjectAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public string get_TypeName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JScriptWinRTObjectAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptWinRTPropertyValueAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptWinRTPropertyValueAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    public string TypeName { get; }
    public bool IsArray { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptWinRTPropertyValueAllocationTraceData(Action`1<JscriptWinRTPropertyValueAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public string get_TypeName();
    public bool get_IsArray();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptWinRTPropertyValueAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptWinRTPropertyValueAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptWinRTWrapperAllocationTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptWinRTWrapperAllocationTraceData> Action;
    public ulong MemoryAddress { get; }
    public string TypeName { get; }
    public ulong jsVar { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptWinRTWrapperAllocationTraceData(Action`1<JscriptWinRTWrapperAllocationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    public string get_TypeName();
    public ulong get_jsVar();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.JscriptWinRTWrapperFreeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<JscriptWinRTWrapperFreeTraceData> Action;
    public ulong MemoryAddress { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal JscriptWinRTWrapperFreeTraceData(Action`1<JscriptWinRTWrapperFreeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_MemoryAddress();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<JscriptWinRTWrapperFreeTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.JScript.MethodAddressRange : Enum {
    public int value__;
    public static MethodAddressRange Interpreted;
    public static MethodAddressRange JIT;
    public static MethodAddressRange JITLoopBody;
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.MethodLoadUnloadJSTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MethodLoadUnloadJSTraceData> Action;
    public ulong ScriptContextID { get; }
    public ulong MethodStartAddress { get; }
    public long MethodSize { get; }
    public int MethodID { get; }
    public int MethodFlags { get; }
    public MethodAddressRange MethodAddressRangeID { get; }
    public long SourceID { get; }
    public int Line { get; }
    public int Column { get; }
    public string MethodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MethodLoadUnloadJSTraceData(Action`1<MethodLoadUnloadJSTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ScriptContextID();
    public ulong get_MethodStartAddress();
    public long get_MethodSize();
    public int get_MethodID();
    public int get_MethodFlags();
    public MethodAddressRange get_MethodAddressRangeID();
    public long get_SourceID();
    public int get_Line();
    public int get_Column();
    public string get_MethodName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MethodLoadUnloadJSTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MethodLoadUnloadJSTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ParseStartStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParseStartStopTraceData> Action;
    public long SourceID { get; }
    public ulong ScriptContextID { get; }
    public int MethodID { get; }
    public int ASTSize { get; }
    public bool IsDeferred { get; }
    public string MethodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParseStartStopTraceData(Action`1<ParseStartStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SourceID();
    public ulong get_ScriptContextID();
    public int get_MethodID();
    public int get_ASTSize();
    public bool get_IsDeferred();
    public string get_MethodName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ParseStartStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ParseStartStopTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProfileLoadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProfileLoadTraceData> Action;
    public long SourceID { get; }
    public ulong ScriptContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProfileLoadTraceData(Action`1<ProfileLoadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SourceID();
    public ulong get_ScriptContextID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProfileLoadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProfileLoadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProfileSaveTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProfileSaveTraceData> Action;
    public long SourceID { get; }
    public ulong ScriptContextID { get; }
    public int Size { get; }
    public bool IsSaveOnClose { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProfileSaveTraceData(Action`1<ProfileSaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SourceID();
    public ulong get_ScriptContextID();
    public int get_Size();
    public bool get_IsSaveOnClose();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProfileSaveTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProfileSaveTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProjectionIsBoxedInterfaceTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProjectionIsBoxedInterfaceTraceData> Action;
    public bool IsBoxed { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProjectionIsBoxedInterfaceTraceData(Action`1<ProjectionIsBoxedInterfaceTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public bool get_IsBoxed();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProjectionTypeNameAndEventNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProjectionTypeNameAndEventNameTraceData> Action;
    public string TypeName { get; }
    public string EventName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProjectionTypeNameAndEventNameTraceData(Action`1<ProjectionTypeNameAndEventNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_EventName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProjectionTypeNameAndMethodNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProjectionTypeNameAndMethodNameTraceData> Action;
    public string TypeName { get; }
    public string MethodName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProjectionTypeNameAndMethodNameTraceData(Action`1<ProjectionTypeNameAndMethodNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    public string get_MethodName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ProjectionTypeNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProjectionTypeNameTraceData> Action;
    public string TypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProjectionTypeNameTraceData(Action`1<ProjectionTypeNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_TypeName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProjectionTypeNameTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProjectionTypeNameTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.ScriptContextLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ScriptContextLoadUnloadTraceData> Action;
    public ulong ScriptContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ScriptContextLoadUnloadTraceData(Action`1<ScriptContextLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ScriptContextID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ScriptContextLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ScriptContextLoadUnloadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.SourceLoadUnloadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SourceLoadUnloadTraceData> Action;
    public long SourceID { get; }
    public ulong ScriptContextID { get; }
    public int SourceFlags { get; }
    public string Url { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SourceLoadUnloadTraceData(Action`1<SourceLoadUnloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_SourceID();
    public ulong get_ScriptContextID();
    public int get_SourceFlags();
    public string get_Url();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SourceLoadUnloadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SourceLoadUnloadTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JScript.StartupCompleteTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StartupCompleteTraceData> Action;
    public ulong ScriptContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StartupCompleteTraceData(Action`1<StartupCompleteTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ScriptContextID();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StartupCompleteTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StartupCompleteTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.JScriptTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static Guid Jscript_Projection_ResolveTypeTaskGuid;
    private static Guid Jscript_Projection_ConstructRuntimeClassTaskGuid;
    private static Guid Jscript_Projection_MethodCallTaskGuid;
    private static Guid Jscript_Projection_RawMethodCallTaskGuid;
    private static Guid Jscript_Projection_InvokesJsDelegateTaskGuid;
    private static Guid Jscript_Projection_InvokeNativeDelegateTaskGuid;
    private static Guid Jscript_Projection_AddEventListenerTaskGuid;
    private static Guid Jscript_Projection_RemoveEventListenerTaskGuid;
    private static Guid Jscript_Projection_GetTypeMetaDataInformationTaskGuid;
    private static Guid Jscript_Projection_SetEventHandlerTaskGuid;
    private static Guid Jscript_Projection_RemoveAllEventsAndEventHandlersTaskGuid;
    private static Guid Jscript_Projection_InvokeEventTaskGuid;
    private static Guid Jscript_Projection_InvokeEventEvParamPrepTaskGuid;
    private static Guid Jscript_Projection_GetExprFromConcreteTypeNameTaskGuid;
    private static Guid Jscript_Projection_GetTypeFromTypeNamePartsTaskGuid;
    private static Guid Jscript_Projection_ReferenceOrArrayGetValueTaskGuid;
    private static Guid Jscript_Projection_PropertyValueVarFromGRCNTaskGuid;
    private static Guid Jscript_Projection_VarFromGRCNTaskGuid;
    private static Guid Jscript_Projection_WriteIReferenceTaskGuid;
    private static Guid Jscript_Projection_WriteInspectableTaskGuid;
    private static Guid Jscript_Projection_GetNonArrayTypeAsPropertyValueTaskGuid;
    private static Guid Jscript_Projection_GetNonArrayBasicTypeAsPropertyValueTaskGuid;
    private static Guid Jscript_Projection_GetTypedArrayAsPropertyValueTaskGuid;
    private static Guid Jscript_Projection_GetBasicTypedArrayAsPropertyValueTaskGuid;
    private static Guid Jscript_GC_ResetMarksTaskGuid;
    private static Guid Jscript_GC_ScanRootsTaskGuid;
    private static Guid Jscript_GC_ScanStackTaskGuid;
    private static Guid Jscript_GC_MarkTaskGuid;
    private static Guid Jscript_GC_RescanTaskGuid;
    private static Guid Jscript_GC_SweepTaskGuid;
    private static Guid Jscript_GC_SetupBackgroundSweepTaskGuid;
    private static Guid Jscript_GC_BackgroundSweepTaskGuid;
    private static Guid Jscript_GC_TransferSweptObjectsTaskGuid;
    private static Guid Jscript_GC_DisposeTaskGuid;
    private static Guid Jscript_GC_BackgroundMarkTaskGuid;
    private static Guid Jscript_GC_ResetWriteWatchTaskGuid;
    private static Guid Jscript_GC_IdleCollectTaskGuid;
    private static Guid Jscript_Page_Allocator_SizeTaskGuid;
    private static Guid Jscript_Recycler_AllocationTaskGuid;
    public JScriptTraceEventParser(TraceEventSource source);
    private static JScriptTraceEventParser();
    public void add_MethodRundownDCStartInit(Action`1<EmptyTraceData> value);
    public void remove_MethodRundownDCStartInit(Action`1<EmptyTraceData> value);
    public void add_MethodRundownDCStartComplete(Action`1<EmptyTraceData> value);
    public void remove_MethodRundownDCStartComplete(Action`1<EmptyTraceData> value);
    public void add_MethodRundownDCStopInit(Action`1<EmptyTraceData> value);
    public void remove_MethodRundownDCStopInit(Action`1<EmptyTraceData> value);
    public void add_MethodRundownDCStopComplete(Action`1<EmptyTraceData> value);
    public void remove_MethodRundownDCStopComplete(Action`1<EmptyTraceData> value);
    public void add_MethodRundownMethodDCStart(Action`1<MethodLoadUnloadJSTraceData> value);
    public void remove_MethodRundownMethodDCStart(Action`1<MethodLoadUnloadJSTraceData> value);
    public void add_MethodRundownMethodDCStop(Action`1<MethodLoadUnloadJSTraceData> value);
    public void remove_MethodRundownMethodDCStop(Action`1<MethodLoadUnloadJSTraceData> value);
    public void add_ScriptContextRundownScriptContextDCStart(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void remove_ScriptContextRundownScriptContextDCStart(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void add_ScriptContextRundownScriptContextDCStop(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void remove_ScriptContextRundownScriptContextDCStop(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void add_MethodRuntimeMethodLoad(Action`1<MethodLoadUnloadJSTraceData> value);
    public void remove_MethodRuntimeMethodLoad(Action`1<MethodLoadUnloadJSTraceData> value);
    public void add_MethodRuntimeMethodUnload(Action`1<MethodLoadUnloadJSTraceData> value);
    public void remove_MethodRuntimeMethodUnload(Action`1<MethodLoadUnloadJSTraceData> value);
    public void add_ScriptContextRuntimeScriptContextLoad(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void remove_ScriptContextRuntimeScriptContextLoad(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void add_ScriptContextRuntimeScriptContextUnload(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void remove_ScriptContextRuntimeScriptContextUnload(Action`1<ScriptContextLoadUnloadTraceData> value);
    public void add_Jscript_Projection_ResolveTypeStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ResolveTypeStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_ResolveTypeStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ResolveTypeStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_ConstructRuntimeClassStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ConstructRuntimeClassStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_ConstructRuntimeClassStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ConstructRuntimeClassStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_MethodCallStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_MethodCallStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_MethodCallStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_MethodCallStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_RawMethodCallStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_RawMethodCallStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_RawMethodCallStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_RawMethodCallStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_InvokesJsDelegateStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_InvokesJsDelegateStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_InvokesJsDelegateStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_InvokesJsDelegateStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_InvokeNativeDelegateStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_InvokeNativeDelegateStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_InvokeNativeDelegateStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_InvokeNativeDelegateStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_AddEventListenerStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_AddEventListenerStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_AddEventListenerStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_AddEventListenerStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_RemoveEventListenerStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_RemoveEventListenerStart(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_RemoveEventListenerStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void remove_Jscript_Projection_RemoveEventListenerStop(Action`1<ProjectionTypeNameAndMethodNameTraceData> value);
    public void add_Jscript_Projection_GetTypeMetaDataInformationStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypeMetaDataInformationStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetTypeMetaDataInformationStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypeMetaDataInformationStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_SetEventHandlerStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_SetEventHandlerStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_Jscript_Projection_SetEventHandlerStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_SetEventHandlerStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_Jscript_Projection_RemoveAllEventsAndEventHandlersStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_RemoveAllEventsAndEventHandlersStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_RemoveAllEventsAndEventHandlersStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_RemoveAllEventsAndEventHandlersStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_InvokeEventStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_InvokeEventStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_Jscript_Projection_InvokeEventStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_InvokeEventStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_Jscript_Projection_InvokeEventEvParamPrepStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_InvokeEventEvParamPrepStart(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_Jscript_Projection_InvokeEventEvParamPrepStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void remove_Jscript_Projection_InvokeEventEvParamPrepStop(Action`1<ProjectionTypeNameAndEventNameTraceData> value);
    public void add_ScriptContextRundownSourceDCStart(Action`1<SourceLoadUnloadTraceData> value);
    public void remove_ScriptContextRundownSourceDCStart(Action`1<SourceLoadUnloadTraceData> value);
    public void add_ScriptContextRundownSourceDCStop(Action`1<SourceLoadUnloadTraceData> value);
    public void remove_ScriptContextRundownSourceDCStop(Action`1<SourceLoadUnloadTraceData> value);
    public void add_ScriptContextRuntimeSourceLoad(Action`1<SourceLoadUnloadTraceData> value);
    public void remove_ScriptContextRuntimeSourceLoad(Action`1<SourceLoadUnloadTraceData> value);
    public void add_ScriptContextRuntimeSourceUnload(Action`1<SourceLoadUnloadTraceData> value);
    public void remove_ScriptContextRuntimeSourceUnload(Action`1<SourceLoadUnloadTraceData> value);
    public void add_Jscript_Projection_GetExprFromConcreteTypeNameStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetExprFromConcreteTypeNameStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetExprFromConcreteTypeNameStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetExprFromConcreteTypeNameStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetTypeFromTypeNamePartsStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypeFromTypeNamePartsStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetTypeFromTypeNamePartsStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypeFromTypeNamePartsStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_ReferenceOrArrayGetValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ReferenceOrArrayGetValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_ReferenceOrArrayGetValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_ReferenceOrArrayGetValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_PropertyValueVarFromGRCNStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_PropertyValueVarFromGRCNStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_PropertyValueVarFromGRCNStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_PropertyValueVarFromGRCNStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_VarFromGRCNStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_VarFromGRCNStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_VarFromGRCNStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_VarFromGRCNStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_WriteIReferenceStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_WriteIReferenceStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_WriteIReferenceStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_WriteIReferenceStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_WriteInspectableStart(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
    public void remove_Jscript_Projection_WriteInspectableStart(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
    public void add_Jscript_Projection_WriteInspectableStop(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
    public void remove_Jscript_Projection_WriteInspectableStop(Action`1<ProjectionIsBoxedInterfaceTraceData> value);
    public void add_Jscript_Projection_GetNonArrayTypeAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetNonArrayTypeAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetNonArrayTypeAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetNonArrayTypeAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetNonArrayBasicTypeAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetNonArrayBasicTypeAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetNonArrayBasicTypeAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetNonArrayBasicTypeAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetTypedArrayAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypedArrayAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetTypedArrayAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetTypedArrayAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetBasicTypedArrayAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetBasicTypedArrayAsPropertyValueStart(Action`1<ProjectionTypeNameTraceData> value);
    public void add_Jscript_Projection_GetBasicTypedArrayAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void remove_Jscript_Projection_GetBasicTypedArrayAsPropertyValueStop(Action`1<ProjectionTypeNameTraceData> value);
    public void add_ParseMethodStart(Action`1<ParseStartStopTraceData> value);
    public void remove_ParseMethodStart(Action`1<ParseStartStopTraceData> value);
    public void add_ParseMethodStop(Action`1<ParseStartStopTraceData> value);
    public void remove_ParseMethodStop(Action`1<ParseStartStopTraceData> value);
    public void add_GenerateBytecodeMethod(Action`1<BytecodeGenInfoTraceData> value);
    public void remove_GenerateBytecodeMethod(Action`1<BytecodeGenInfoTraceData> value);
    public void add_Jscript_GC_ResetMarksStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ResetMarksStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ResetMarksStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ResetMarksStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ScanRootsStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ScanRootsStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ScanRootsStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ScanRootsStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ScanStackStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ScanStackStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ScanStackStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ScanStackStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_MarkStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_MarkStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_MarkStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_MarkStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_RescanStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_RescanStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_RescanStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_RescanStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_SweepStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_SweepStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_SweepStop(Action`1<GCPhaseCollectTraceData> value);
    public void remove_Jscript_GC_SweepStop(Action`1<GCPhaseCollectTraceData> value);
    public void add_Jscript_GC_SetupBackgroundSweepStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_SetupBackgroundSweepStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_BackgroundSweepStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_BackgroundSweepStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_BackgroundSweepStop(Action`1<GCPhaseCollectTraceData> value);
    public void remove_Jscript_GC_BackgroundSweepStop(Action`1<GCPhaseCollectTraceData> value);
    public void add_Jscript_GC_TransferSweptObjectsStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_TransferSweptObjectsStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_TransferSweptObjectsStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_TransferSweptObjectsStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_DisposeStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_DisposeStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_DisposeStop(Action`1<GCPhaseCollectTraceData> value);
    public void remove_Jscript_GC_DisposeStop(Action`1<GCPhaseCollectTraceData> value);
    public void add_Jscript_GC_BackgroundMarkStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_BackgroundMarkStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_BackgroundMarkStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_BackgroundMarkStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ResetWriteWatchStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ResetWriteWatchStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_ResetWriteWatchStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_ResetWriteWatchStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_Profile_PersistenceSave(Action`1<ProfileSaveTraceData> value);
    public void remove_Jscript_Profile_PersistenceSave(Action`1<ProfileSaveTraceData> value);
    public void add_ScriptContextRuntimeScriptContextOnStartupComplete(Action`1<StartupCompleteTraceData> value);
    public void remove_ScriptContextRuntimeScriptContextOnStartupComplete(Action`1<StartupCompleteTraceData> value);
    public void add_Jscript_Profile_PersistenceLoad(Action`1<ProfileLoadTraceData> value);
    public void remove_Jscript_Profile_PersistenceLoad(Action`1<ProfileLoadTraceData> value);
    public void add_Jscript_Backend_Inline(Action`1<InlineInfoTraceData> value);
    public void remove_Jscript_Backend_Inline(Action`1<InlineInfoTraceData> value);
    public void add_Jscript_Method_JitStart(Action`1<JitMethodStartTraceData> value);
    public void remove_Jscript_Method_JitStart(Action`1<JitMethodStartTraceData> value);
    public void add_Jscript_Method_JitStop(Action`1<JitMethodStopTraceData> value);
    public void remove_Jscript_Method_JitStop(Action`1<JitMethodStopTraceData> value);
    public void add_Jscript_Method_JitQueue(Action`1<JitMethodQueueDequeueTraceData> value);
    public void remove_Jscript_Method_JitQueue(Action`1<JitMethodQueueDequeueTraceData> value);
    public void add_Jscript_Method_JitDequeue(Action`1<JitMethodQueueDequeueTraceData> value);
    public void remove_Jscript_Method_JitDequeue(Action`1<JitMethodQueueDequeueTraceData> value);
    public void add_Jscript_GC_IdleCollectStart(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_IdleCollectStart(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_IdleCollectCallbackFinish(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_IdleCollectCallbackFinish(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_IdleCollectScheduled(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_IdleCollectScheduled(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_IdleCollectFinished(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_IdleCollectFinished(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_GC_IdleCollectStop(Action`1<GCPhaseTraceData> value);
    public void remove_Jscript_GC_IdleCollectStop(Action`1<GCPhaseTraceData> value);
    public void add_Jscript_Page_Allocator_SizeUsedPageSize(Action`1<JscriptSizeInBytesTraceData> value);
    public void remove_Jscript_Page_Allocator_SizeUsedPageSize(Action`1<JscriptSizeInBytesTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_Memory(Action`1<JscriptRecyclerFreeTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_Memory(Action`1<JscriptRecyclerFreeTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_Memory_Block(Action`1<JscriptRecyclerFreeBlockTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_Memory_Block(Action`1<JscriptRecyclerFreeBlockTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_Object(Action`1<JscriptAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_Object(Action`1<JscriptAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_Array(Action`1<JscriptAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_Array(Action`1<JscriptAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_Function(Action`1<JscriptAllocateFunctionTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_Function(Action`1<JscriptAllocateFunctionTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_DOM_Object(Action`1<JscriptDOMAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_DOM_Object(Action`1<JscriptDOMAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_JSProxy_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_JSProxy_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_PixelArray(Action`1<JscriptAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_PixelArray(Action`1<JscriptAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationExternal_AddRef(Action`1<JscriptAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationExternal_AddRef(Action`1<JscriptAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationExternal_Release(Action`1<JscriptAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationExternal_Release(Action`1<JscriptAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_RuntimeClass_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_RuntimeClass_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_Namespace_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_Namespace_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_Struct_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_Struct_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_Enum_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_Enum_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_TypedArray_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_TypedArray_Object(Action`1<JScriptWinRTObjectAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_Delegate_Object(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_Delegate_Object(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_EventHandler_Object(Action`1<JscriptWinRTEventHandlerAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_EventHandler_Object(Action`1<JscriptWinRTEventHandlerAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_Collections_Object(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_Collections_Object(Action`1<JscriptWinRTWrapperAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationAllocate_WinRT_PropertyValue_Object(Action`1<JscriptWinRTPropertyValueAllocationTraceData> value);
    public void remove_Jscript_Recycler_AllocationAllocate_WinRT_PropertyValue_Object(Action`1<JscriptWinRTPropertyValueAllocationTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_WinRT_Delegate_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_WinRT_Delegate_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_WinRT_EventHandler_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_WinRT_EventHandler_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_WinRT_Collections_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_WinRT_Collections_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void add_Jscript_Recycler_AllocationFree_WinRT_PropertyValue_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    public void remove_Jscript_Recycler_AllocationFree_WinRT_PropertyValue_Object(Action`1<JscriptWinRTWrapperFreeTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.AttributeType : Enum {
    public ushort value__;
    public static AttributeType DOMTagName;
    public static AttributeType DOMId;
    public static AttributeType DOMClass;
    public static AttributeType DOMSrc;
    public static AttributeType ElementAttributesSize;
    public static AttributeType Scope;
    public static AttributeType Prototype;
    public static AttributeType FunctionName;
    public static AttributeType TextChildrenSize;
    public static AttributeType Max;
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkAttributeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BulkAttributeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BulkAttributeTraceData(Action`1<BulkAttributeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public BulkAttributeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BulkAttributeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BulkAttributeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkAttributeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public AttributeType Type { get; }
    public ulong Value { get; }
    internal BulkAttributeValues(TraceEvent data, int baseOffset);
    public AttributeType get_Type();
    public ulong get_Value();
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkEdgeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BulkEdgeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BulkEdgeTraceData(Action`1<BulkEdgeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public BulkEdgeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BulkEdgeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BulkEdgeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkEdgeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public EdgeRelationshipType RelationshipType { get; }
    public EdgeTargetType TargetType { get; }
    public int NameId { get; }
    public ulong Value { get; }
    internal BulkEdgeValues(TraceEvent data, int baseOffset);
    public EdgeRelationshipType get_RelationshipType();
    public EdgeTargetType get_TargetType();
    public int get_NameId();
    public ulong get_Value();
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkNodeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BulkNodeTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BulkNodeTraceData(Action`1<BulkNodeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public BulkNodeValues Values(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BulkNodeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BulkNodeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.BulkNodeValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public ulong Id { get; }
    public int Size { get; }
    public ulong Address { get; }
    public int TypeNameId { get; }
    public ObjectFlags Flags { get; }
    public int AttributeCount { get; }
    public int EdgeCount { get; }
    internal BulkNodeValues(TraceEvent data, int baseOffset);
    public ulong get_Id();
    public int get_Size();
    public ulong get_Address();
    public int get_TypeNameId();
    public ObjectFlags get_Flags();
    public int get_AttributeCount();
    public int get_EdgeCount();
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.DoubleTableTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DoubleTableTraceData> Action;
    public int Index { get; }
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DoubleTableTraceData(Action`1<DoubleTableTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public double Doubles(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DoubleTableTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DoubleTableTraceData> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.EdgeRelationshipType : Enum {
    public byte value__;
    public static EdgeRelationshipType Prototype;
    public static EdgeRelationshipType Scope;
    public static EdgeRelationshipType InternalProperty;
    public static EdgeRelationshipType NamedProperty;
    public static EdgeRelationshipType IndexedProperty;
    public static EdgeRelationshipType Event;
    public static EdgeRelationshipType RelationShip;
    public static EdgeRelationshipType Max;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.EdgeTargetType : Enum {
    public byte value__;
    public static EdgeTargetType Number;
    public static EdgeTargetType String;
    public static EdgeTargetType BSTR;
    public static EdgeTargetType Object;
    public static EdgeTargetType External;
    public static EdgeTargetType Max;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.ObjectFlags : Enum {
    public UInt32 value__;
    public static ObjectFlags NEW_OBJECT;
    public static ObjectFlags IS_ROOT;
    public static ObjectFlags SITE_CLOSED;
    public static ObjectFlags EXTERNAL;
    public static ObjectFlags EXTERNAL_UNKNOWN;
    public static ObjectFlags EXTERNAL_DISPATCH;
    public static ObjectFlags SIZE_APPROXIMATE;
    public static ObjectFlags SIZE_UNAVAILABLE;
    public static ObjectFlags NEW_STATE_UNAVAILABLE;
    public static ObjectFlags WINRT_INSTANCE;
    public static ObjectFlags WINRT_RUNTIMECLASS;
    public static ObjectFlags WINRT_DELEGATE;
    public static ObjectFlags WINRT_NAMESPACE;
    public static ObjectFlags WINRT;
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.SettingsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SettingsTraceData> Action;
    public int Version { get; }
    public int MaxStringLength { get; }
    public bool IsTypeNamePrivate { get; }
    public bool IsEdgeStringValuePrivate { get; }
    public bool IsEdgeNumberValuePrivate { get; }
    public bool IsAttributeStringValuePrivate { get; }
    public bool IsAttributeNumberValuePrivate { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SettingsTraceData(Action`1<SettingsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Version();
    public int get_MaxStringLength();
    public bool get_IsTypeNamePrivate();
    public bool get_IsEdgeStringValuePrivate();
    public bool get_IsEdgeNumberValuePrivate();
    public bool get_IsAttributeStringValuePrivate();
    public bool get_IsAttributeNumberValuePrivate();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SettingsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SettingsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.StringTableTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StringTableTraceData> Action;
    private int m_lastStrIdx;
    private int m_lastStrOffset;
    public int Index { get; }
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StringTableTraceData(Action`1<StringTableTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Index();
    public int get_Count();
    public string Strings(int index);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StringTableTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StringTableTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeap.SummaryTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SummaryTraceData> Action;
    public int HrResult { get; }
    public int NodeCount { get; }
    public int EdgeCount { get; }
    public int AttributeCount { get; }
    public int NumberCount { get; }
    public int StringCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SummaryTraceData(Action`1<SummaryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_HrResult();
    public int get_NodeCount();
    public int get_EdgeCount();
    public int get_AttributeCount();
    public int get_NumberCount();
    public int get_StringCount();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SummaryTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SummaryTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.JSDumpHeapTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEventID JSDumpHeapEnvelopeStartEventID;
    private static TraceEventID JSDumpHeapEnvelopeStopEventID;
    private static TraceEventID JSDumpHeapBulkNodeEventID;
    private static TraceEventID JSDumpHeapBulkAttributeEventID;
    private static TraceEventID JSDumpHeapBulkEdgeEventID;
    private static TraceEventID JSDumpHeapStringTableEventID;
    private static TraceEventID JSDumpHeapDoubleTableEventID;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid JSDumpHeapEnvelopeTaskGuid;
    private static Guid JSDumpHeapBulkNodeTaskGuid;
    private static Guid JSDumpHeapBulkAttributeTaskGuid;
    private static Guid JSDumpHeapBulkEdgeTaskGuid;
    private static Guid JSDumpHeapStringTableTaskGuid;
    private static Guid JSDumpHeapDoubleTableTaskGuid;
    public JSDumpHeapTraceEventParser(TraceEventSource source);
    private static JSDumpHeapTraceEventParser();
    public void add_JSDumpHeapEnvelopeStart(Action`1<SettingsTraceData> value);
    public void remove_JSDumpHeapEnvelopeStart(Action`1<SettingsTraceData> value);
    public void add_JSDumpHeapEnvelopeStop(Action`1<SummaryTraceData> value);
    public void remove_JSDumpHeapEnvelopeStop(Action`1<SummaryTraceData> value);
    public void add_JSDumpHeapBulkNode(Action`1<BulkNodeTraceData> value);
    public void remove_JSDumpHeapBulkNode(Action`1<BulkNodeTraceData> value);
    public void add_JSDumpHeapBulkAttribute(Action`1<BulkAttributeTraceData> value);
    public void remove_JSDumpHeapBulkAttribute(Action`1<BulkAttributeTraceData> value);
    public void add_JSDumpHeapBulkEdge(Action`1<BulkEdgeTraceData> value);
    public void remove_JSDumpHeapBulkEdge(Action`1<BulkEdgeTraceData> value);
    public void add_JSDumpHeapStringTable(Action`1<StringTableTraceData> value);
    public void remove_JSDumpHeapStringTable(Action`1<StringTableTraceData> value);
    public void add_JSDumpHeapDoubleTable(Action`1<DoubleTableTraceData> value);
    public void remove_JSDumpHeapDoubleTable(Action`1<DoubleTableTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ALPCReceiveMessageTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ALPCReceiveMessageTraceData> Action;
    private KernelTraceEventParserState state;
    public int MessageID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ALPCReceiveMessageTraceData(Action`1<ALPCReceiveMessageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MessageID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ALPCReceiveMessageTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ALPCReceiveMessageTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ALPCSendMessageTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ALPCSendMessageTraceData> Action;
    private KernelTraceEventParserState state;
    public int MessageID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ALPCSendMessageTraceData(Action`1<ALPCSendMessageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MessageID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ALPCSendMessageTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ALPCSendMessageTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ALPCUnwaitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ALPCUnwaitTraceData> Action;
    private KernelTraceEventParserState state;
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ALPCUnwaitTraceData(Action`1<ALPCUnwaitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_Status();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ALPCUnwaitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ALPCUnwaitTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ALPCWaitForNewMessageTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ALPCWaitForNewMessageTraceData> Action;
    private KernelTraceEventParserState state;
    public int IsServerPort { get; }
    public string PortName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ALPCWaitForNewMessageTraceData(Action`1<ALPCWaitForNewMessageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_IsServerPort();
    public string get_PortName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ALPCWaitForNewMessageTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ALPCWaitForNewMessageTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ALPCWaitForReplyTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ALPCWaitForReplyTraceData> Action;
    private KernelTraceEventParserState state;
    public int MessageID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ALPCWaitForReplyTraceData(Action`1<ALPCWaitForReplyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MessageID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ALPCWaitForReplyTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ALPCWaitForReplyTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.Branch : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Target>k__BackingField;
    public ulong Source { get; }
    public ulong Target { get; }
    public Branch(ulong source, ulong target);
    [CompilerGeneratedAttribute]
public ulong get_Source();
    [CompilerGeneratedAttribute]
public ulong get_Target();
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.BuildInfoTraceData : TraceEvent {
    private Action`1<BuildInfoTraceData> Action;
    public DateTime InstallDate { get; }
    public string BuildLab { get; }
    public string ProductName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BuildInfoTraceData(Action`1<BuildInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public DateTime get_InstallDate();
    public string get_BuildLab();
    public string get_ProductName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.CreateDisposition : Enum {
    public int value__;
    public static CreateDisposition SUPERSEDE;
    public static CreateDisposition CREATE_NEW;
    public static CreateDisposition CREATE_ALWAYS;
    public static CreateDisposition OPEN_EXISTING;
    public static CreateDisposition OPEN_ALWAYS;
    public static CreateDisposition TRUNCATE_EXISTING;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.CreateOptions : Enum {
    public int value__;
    public static CreateOptions NONE;
    public static CreateOptions FILE_ATTRIBUTE_ARCHIVE;
    public static CreateOptions FILE_ATTRIBUTE_COMPRESSED;
    public static CreateOptions FILE_ATTRIBUTE_DEVICE;
    public static CreateOptions FILE_ATTRIBUTE_DIRECTORY;
    public static CreateOptions FILE_ATTRIBUTE_ENCRYPTED;
    public static CreateOptions FILE_ATTRIBUTE_HIDDEN;
    public static CreateOptions FILE_ATTRIBUTE_INTEGRITY_STREAM;
    public static CreateOptions FILE_ATTRIBUTE_NORMAL;
    public static CreateOptions FILE_ATTRIBUTE_NOT_CONTENT_INDEXED;
    public static CreateOptions FILE_ATTRIBUTE_NO_SCRUB_DATA;
    public static CreateOptions FILE_ATTRIBUTE_OFFLINE;
    public static CreateOptions FILE_ATTRIBUTE_READONLY;
    public static CreateOptions FILE_ATTRIBUTE_REPARSE_POINT;
    public static CreateOptions FILE_ATTRIBUTE_SPARSE_FILE;
    public static CreateOptions FILE_ATTRIBUTE_SYSTEM;
    public static CreateOptions FILE_ATTRIBUTE_TEMPORARY;
    public static CreateOptions FILE_ATTRIBUTE_VIRTUAL;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.CritSecCollisionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CritSecCollisionTraceData> Action;
    private CritSecTraceProviderState state;
    public int LockCount { get; }
    public int SpinCount { get; }
    public ulong OwningThread { get; }
    public ulong CritSecAddr { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CritSecCollisionTraceData(Action`1<CritSecCollisionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, CritSecTraceProviderState state);
    public int get_LockCount();
    public int get_SpinCount();
    public ulong get_OwningThread();
    public ulong get_CritSecAddr();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CritSecCollisionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CritSecCollisionTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.CritSecInitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CritSecInitTraceData> Action;
    private CritSecTraceProviderState state;
    public ulong SpinCount { get; }
    public ulong CritSecAddr { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CritSecInitTraceData(Action`1<CritSecInitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, CritSecTraceProviderState state);
    public ulong get_SpinCount();
    public ulong get_CritSecAddr();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CritSecInitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CritSecInitTraceData> value);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.Kernel.CritSecTraceProviderState : object {
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.CritSecTraceProviderTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid CritSecTraceTaskGuid;
    private CritSecTraceProviderState State { get; }
    public CritSecTraceProviderTraceEventParser(TraceEventSource source);
    private static CritSecTraceProviderTraceEventParser();
    public void add_CritSecTraceCollision(Action`1<CritSecCollisionTraceData> value);
    public void remove_CritSecTraceCollision(Action`1<CritSecCollisionTraceData> value);
    public void add_CritSecTraceInitialize(Action`1<CritSecInitTraceData> value);
    public void remove_CritSecTraceInitialize(Action`1<CritSecInitTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private CritSecTraceProviderState get_State();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.CSwitchTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CSwitchTraceData> Action;
    private KernelTraceEventParserState state;
    public int NewThreadID { get; }
    public int NewProcessID { get; }
    public string NewProcessName { get; }
    public int OldThreadID { get; }
    public int NewThreadPriority { get; }
    public int OldThreadPriority { get; }
    public int OldProcessID { get; }
    public string OldProcessName { get; }
    public int NewThreadQuantum { get; }
    public int OldThreadQuantum { get; }
    public ThreadWaitReason OldThreadWaitReason { get; }
    public ThreadWaitMode OldThreadWaitMode { get; }
    public ThreadState OldThreadState { get; }
    public int OldThreadWaitIdealProcessor { get; }
    public int NewThreadWaitTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    public int ProcessID { get; }
    internal CSwitchTraceData(Action`1<CSwitchTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_NewThreadID();
    public int get_NewProcessID();
    public string get_NewProcessName();
    public int get_OldThreadID();
    public int get_NewThreadPriority();
    public int get_OldThreadPriority();
    public int get_OldProcessID();
    public string get_OldProcessName();
    public int get_NewThreadQuantum();
    public int get_OldThreadQuantum();
    public ThreadWaitReason get_OldThreadWaitReason();
    public ThreadWaitMode get_OldThreadWaitMode();
    public ThreadState get_OldThreadState();
    public int get_OldThreadWaitIdealProcessor();
    public int get_NewThreadWaitTime();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CSwitchTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CSwitchTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
    public virtual int get_ProcessID();
    private string ToString(ThreadState state);
    private object ToString(ThreadWaitMode mode);
    private object ToString(ThreadWaitReason reason);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DequeueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DequeueTraceData> Action;
    private KernelTraceEventParserState state;
    public int Count { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DequeueTraceData(Action`1<DequeueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_Count();
    public ulong Entry(int idx);
    internal virtual void FixupData();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DequeueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DequeueTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DiskIOFlushBuffersTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DiskIOFlushBuffersTraceData> Action;
    private KernelTraceEventParserState state;
    public int DiskNumber { get; }
    public IrpFlags IrpFlags { get; }
    private long HighResResponseTime { get; }
    public double ElapsedTimeMSec { get; }
    public ulong Irp { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DiskIOFlushBuffersTraceData(Action`1<DiskIOFlushBuffersTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_DiskNumber();
    public IrpFlags get_IrpFlags();
    private long get_HighResResponseTime();
    public double get_ElapsedTimeMSec();
    public ulong get_Irp();
    internal virtual void FixupData();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DiskIOFlushBuffersTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DiskIOFlushBuffersTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DiskIOInitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DiskIOInitTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Irp { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DiskIOInitTraceData(Action`1<DiskIOInitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Irp();
    internal virtual void FixupData();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DiskIOInitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DiskIOInitTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DiskIOTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DiskIOTraceData> Action;
    private KernelTraceEventParserState state;
    public int DiskNumber { get; }
    public IrpFlags IrpFlags { get; }
    public IOPriority Priority { get; }
    public int TransferSize { get; }
    public int Reserved { get; }
    public long ByteOffset { get; }
    public ulong FileKey { get; }
    public string FileName { get; }
    public ulong Irp { get; }
    private long HighResResponseTime { get; }
    public double DiskServiceTimeMSec { get; }
    public double ElapsedTimeMSec { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DiskIOTraceData(Action`1<DiskIOTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_DiskNumber();
    public IrpFlags get_IrpFlags();
    public IOPriority get_Priority();
    public int get_TransferSize();
    public int get_Reserved();
    public long get_ByteOffset();
    public ulong get_FileKey();
    public string get_FileName();
    public ulong get_Irp();
    private long get_HighResResponseTime();
    public double get_DiskServiceTimeMSec();
    public double get_ElapsedTimeMSec();
    internal virtual void FixupData();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DiskIOTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DiskIOTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DispatcherReadyThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DispatcherReadyThreadTraceData> Action;
    private KernelTraceEventParserState state;
    public int AwakenedThreadID { get; }
    public int AwakenedProcessID { get; }
    public AdjustReasonEnum AdjustReason { get; }
    public int AdjustIncrement { get; }
    public ReadyThreadFlags Flags { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DispatcherReadyThreadTraceData(Action`1<DispatcherReadyThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_AwakenedThreadID();
    public int get_AwakenedProcessID();
    public AdjustReasonEnum get_AdjustReason();
    public int get_AdjustIncrement();
    public ReadyThreadFlags get_Flags();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    internal virtual void FixupData();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<DispatcherReadyThreadTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<DispatcherReadyThreadTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DPCTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DPCTraceData> Action;
    private KernelTraceEventParserState state;
    private long InitialTimeQPC { get; }
    public double ElapsedTimeMSec { get; }
    public ulong Routine { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DPCTraceData(Action`1<DPCTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    private long get_InitialTimeQPC();
    public double get_ElapsedTimeMSec();
    public ulong get_Routine();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DPCTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DPCTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DriverCompleteRequestReturnTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DriverCompleteRequestReturnTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Irp { get; }
    public int UniqMatchID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DriverCompleteRequestReturnTraceData(Action`1<DriverCompleteRequestReturnTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Irp();
    public int get_UniqMatchID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DriverCompleteRequestReturnTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DriverCompleteRequestReturnTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DriverCompleteRequestTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DriverCompleteRequestTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong RoutineAddr { get; }
    public ulong Irp { get; }
    public int UniqMatchID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DriverCompleteRequestTraceData(Action`1<DriverCompleteRequestTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_RoutineAddr();
    public ulong get_Irp();
    public int get_UniqMatchID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DriverCompleteRequestTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DriverCompleteRequestTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DriverCompletionRoutineTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DriverCompletionRoutineTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Routine { get; }
    public ulong IrpPtr { get; }
    public int UniqMatchID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DriverCompletionRoutineTraceData(Action`1<DriverCompletionRoutineTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Routine();
    public ulong get_IrpPtr();
    public int get_UniqMatchID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DriverCompletionRoutineTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DriverCompletionRoutineTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DriverMajorFunctionCallTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DriverMajorFunctionCallTraceData> Action;
    private KernelTraceEventParserState state;
    public int MajorFunction { get; }
    public int MinorFunction { get; }
    public ulong RoutineAddr { get; }
    public ulong FileKey { get; }
    public string FileName { get; }
    public ulong Irp { get; }
    public int UniqMatchID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DriverMajorFunctionCallTraceData(Action`1<DriverMajorFunctionCallTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MajorFunction();
    public int get_MinorFunction();
    public ulong get_RoutineAddr();
    public ulong get_FileKey();
    public string get_FileName();
    public ulong get_Irp();
    public int get_UniqMatchID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DriverMajorFunctionCallTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DriverMajorFunctionCallTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.DriverMajorFunctionReturnTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DriverMajorFunctionReturnTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Irp { get; }
    public int UniqMatchID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DriverMajorFunctionReturnTraceData(Action`1<DriverMajorFunctionReturnTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Irp();
    public int get_UniqMatchID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DriverMajorFunctionReturnTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DriverMajorFunctionReturnTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.EnqueueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EnqueueTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Entry { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EnqueueTraceData(Action`1<EnqueueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Entry();
    internal virtual void FixupData();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<EnqueueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<EnqueueTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.EventTraceHeaderTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<EventTraceHeaderTraceData> Action;
    private KernelTraceEventParserState state;
    public int BufferSize { get; }
    public int Version { get; }
    public int ProviderVersion { get; }
    public int NumberOfProcessors { get; }
    internal long EndTime100ns { get; }
    public DateTime EndTime { get; }
    public int TimerResolution { get; }
    public int MaxFileSize { get; }
    public int LogFileMode { get; }
    public int BuffersWritten { get; }
    public int StartBuffers { get; }
    public int PointerSize { get; }
    public int EventsLost { get; }
    public int CPUSpeed { get; }
    public int UTCOffsetMinutes { get; }
    internal long BootTime100ns { get; }
    public DateTime BootTime { get; }
    public long PerfFreq { get; }
    internal long StartTime100ns { get; }
    public DateTime StartTime { get; }
    public int ReservedFlags { get; }
    public int BuffersLost { get; }
    public string SessionName { get; }
    public string LogFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal EventTraceHeaderTraceData(Action`1<EventTraceHeaderTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_BufferSize();
    public int get_Version();
    public int get_ProviderVersion();
    public int get_NumberOfProcessors();
    internal long get_EndTime100ns();
    public DateTime get_EndTime();
    public int get_TimerResolution();
    public int get_MaxFileSize();
    public int get_LogFileMode();
    public int get_BuffersWritten();
    public int get_StartBuffers();
    public int get_PointerSize();
    public int get_EventsLost();
    public int get_CPUSpeed();
    public int get_UTCOffsetMinutes();
    internal long get_BootTime100ns();
    public DateTime get_BootTime();
    public long get_PerfFreq();
    internal long get_StartTime100ns();
    public DateTime get_StartTime();
    public int get_ReservedFlags();
    public int get_BuffersLost();
    public string get_SessionName();
    public string get_LogFileName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<EventTraceHeaderTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<EventTraceHeaderTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIOCreateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIOCreateTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong IrpPtr { get; }
    public ulong FileObject { get; }
    public CreateOptions CreateOptions { get; }
    public CreateDisposition CreateDisposition { get; }
    public FileAttributes FileAttributes { get; }
    public FileShare ShareAccess { get; }
    public string FileName { get; }
    public int ProcessID { get; }
    private int LayoutVersion { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIOCreateTraceData(Action`1<FileIOCreateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_IrpPtr();
    public ulong get_FileObject();
    public CreateOptions get_CreateOptions();
    public CreateDisposition get_CreateDisposition();
    public FileAttributes get_FileAttributes();
    public FileShare get_ShareAccess();
    public string get_FileName();
    public virtual int get_ProcessID();
    private int get_LayoutVersion();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIOCreateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIOCreateTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIODirEnumTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIODirEnumTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong IrpPtr { get; }
    public ulong FileObject { get; }
    public ulong FileKey { get; }
    public string DirectoryName { get; }
    public int Length { get; }
    public int InfoClass { get; }
    public int FileIndex { get; }
    public string FileName { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIODirEnumTraceData(Action`1<FileIODirEnumTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_IrpPtr();
    public ulong get_FileObject();
    public ulong get_FileKey();
    public string get_DirectoryName();
    public int get_Length();
    public int get_InfoClass();
    public int get_FileIndex();
    public string get_FileName();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIODirEnumTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIODirEnumTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIOInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIOInfoTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong IrpPtr { get; }
    public ulong FileObject { get; }
    public string FileName { get; }
    public ulong FileKey { get; }
    public ulong ExtraInfo { get; }
    public int InfoClass { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIOInfoTraceData(Action`1<FileIOInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_IrpPtr();
    public ulong get_FileObject();
    public string get_FileName();
    public ulong get_FileKey();
    public ulong get_ExtraInfo();
    public int get_InfoClass();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIOInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIOInfoTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIONameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIONameTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong FileKey { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIONameTraceData(Action`1<FileIONameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_FileKey();
    public string get_FileName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIONameTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIONameTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIOOpEndTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIOOpEndTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong IrpPtr { get; }
    public ulong ExtraInfo { get; }
    public int NtStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIOOpEndTraceData(Action`1<FileIOOpEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_IrpPtr();
    public ulong get_ExtraInfo();
    public int get_NtStatus();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIOOpEndTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIOOpEndTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIOReadWriteTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIOReadWriteTraceData> Action;
    private KernelTraceEventParserState state;
    public long Offset { get; }
    public ulong IrpPtr { get; }
    public ulong FileObject { get; }
    public ulong FileKey { get; }
    public string FileName { get; }
    public int ProcessID { get; }
    public int IoSize { get; }
    public int IoFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIOReadWriteTraceData(Action`1<FileIOReadWriteTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_Offset();
    public ulong get_IrpPtr();
    public ulong get_FileObject();
    public ulong get_FileKey();
    public string get_FileName();
    public virtual int get_ProcessID();
    public int get_IoSize();
    public int get_IoFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIOReadWriteTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIOReadWriteTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.FileIOSimpleOpTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FileIOSimpleOpTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong IrpPtr { get; }
    public ulong FileObject { get; }
    public string FileName { get; }
    public ulong FileKey { get; }
    public int ProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileIOSimpleOpTraceData(Action`1<FileIOSimpleOpTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_IrpPtr();
    public ulong get_FileObject();
    public string get_FileName();
    public ulong get_FileKey();
    public virtual int get_ProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<FileIOSimpleOpTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<FileIOSimpleOpTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeaderExtensionTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeaderExtensionTraceData> Action;
    private KernelTraceEventParserState state;
    public int GroupMask1 { get; }
    public int GroupMask2 { get; }
    public int GroupMask3 { get; }
    public int GroupMask4 { get; }
    public int GroupMask5 { get; }
    public int GroupMask6 { get; }
    public int GroupMask7 { get; }
    public int GroupMask8 { get; }
    public int KernelEventVersion { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeaderExtensionTraceData(Action`1<HeaderExtensionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_GroupMask1();
    public int get_GroupMask2();
    public int get_GroupMask3();
    public int get_GroupMask4();
    public int get_GroupMask5();
    public int get_GroupMask6();
    public int get_GroupMask7();
    public int get_GroupMask8();
    public int get_KernelEventVersion();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeaderExtensionTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeaderExtensionTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapAllocTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapAllocTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public long AllocSize { get; }
    public ulong AllocAddress { get; }
    public int SourceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapAllocTraceData(Action`1<HeapAllocTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public long get_AllocSize();
    public ulong get_AllocAddress();
    public int get_SourceID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapAllocTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapAllocTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapContractTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapContractTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public ulong DeCommittedSize { get; }
    public ulong DeCommitAddress { get; }
    public ulong FreeSpace { get; }
    public ulong CommittedSpace { get; }
    public ulong ReservedSpace { get; }
    public int NoOfUCRs { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapContractTraceData(Action`1<HeapContractTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public ulong get_DeCommittedSize();
    public ulong get_DeCommitAddress();
    public ulong get_FreeSpace();
    public ulong get_CommittedSpace();
    public ulong get_ReservedSpace();
    public int get_NoOfUCRs();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapContractTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapContractTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapCreateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapCreateTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public int HeapFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapCreateTraceData(Action`1<HeapCreateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public int get_HeapFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapCreateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapCreateTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapExpandTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapExpandTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public ulong CommittedSize { get; }
    public ulong CommitAddress { get; }
    public ulong FreeSpace { get; }
    public ulong CommittedSpace { get; }
    public ulong ReservedSpace { get; }
    public int NoOfUCRs { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapExpandTraceData(Action`1<HeapExpandTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public ulong get_CommittedSize();
    public ulong get_CommitAddress();
    public ulong get_FreeSpace();
    public ulong get_CommittedSpace();
    public ulong get_ReservedSpace();
    public int get_NoOfUCRs();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapExpandTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapExpandTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapFreeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapFreeTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public ulong FreeAddress { get; }
    public int SourceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapFreeTraceData(Action`1<HeapFreeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public ulong get_FreeAddress();
    public int get_SourceID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapFreeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapFreeTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapReallocTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapReallocTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public ulong NewAllocAddress { get; }
    public ulong OldAllocAddress { get; }
    public long NewAllocSize { get; }
    public long OldAllocSize { get; }
    public int SourceID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapReallocTraceData(Action`1<HeapReallocTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public ulong get_NewAllocAddress();
    public ulong get_OldAllocAddress();
    public long get_NewAllocSize();
    public long get_OldAllocSize();
    public int get_SourceID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapReallocTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapReallocTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapSnapShotTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapSnapShotTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    public ulong FreeSpace { get; }
    public ulong CommittedSpace { get; }
    public ulong ReservedSpace { get; }
    public int HeapFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapSnapShotTraceData(Action`1<HeapSnapShotTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    public ulong get_FreeSpace();
    public ulong get_CommittedSpace();
    public ulong get_ReservedSpace();
    public int get_HeapFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapSnapShotTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapSnapShotTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HeapTraceData> Action;
    private HeapTraceProviderState state;
    public ulong HeapHandle { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HeapTraceData(Action`1<HeapTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, HeapTraceProviderState state);
    public ulong get_HeapHandle();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<HeapTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<HeapTraceData> value);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapTraceProviderState : object {
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.HeapTraceProviderTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    public static Guid HeapRangeProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid HeapTraceTaskGuid;
    private HeapTraceProviderState State { get; }
    public HeapTraceProviderTraceEventParser(TraceEventSource source);
    private static HeapTraceProviderTraceEventParser();
    public void add_HeapTraceCreate(Action`1<HeapCreateTraceData> value);
    public void remove_HeapTraceCreate(Action`1<HeapCreateTraceData> value);
    public void add_HeapTraceAlloc(Action`1<HeapAllocTraceData> value);
    public void remove_HeapTraceAlloc(Action`1<HeapAllocTraceData> value);
    public void add_HeapTraceReAlloc(Action`1<HeapReallocTraceData> value);
    public void remove_HeapTraceReAlloc(Action`1<HeapReallocTraceData> value);
    public void add_HeapTraceFree(Action`1<HeapFreeTraceData> value);
    public void remove_HeapTraceFree(Action`1<HeapFreeTraceData> value);
    public void add_HeapTraceExpand(Action`1<HeapExpandTraceData> value);
    public void remove_HeapTraceExpand(Action`1<HeapExpandTraceData> value);
    public void add_HeapTraceSnapShot(Action`1<HeapSnapShotTraceData> value);
    public void remove_HeapTraceSnapShot(Action`1<HeapSnapShotTraceData> value);
    public void add_HeapTraceContract(Action`1<HeapContractTraceData> value);
    public void remove_HeapTraceContract(Action`1<HeapContractTraceData> value);
    public void add_HeapTraceDestroy(Action`1<HeapTraceData> value);
    public void remove_HeapTraceDestroy(Action`1<HeapTraceData> value);
    public void add_HeapTraceLock(Action`1<HeapTraceData> value);
    public void remove_HeapTraceLock(Action`1<HeapTraceData> value);
    public void add_HeapTraceUnlock(Action`1<HeapTraceData> value);
    public void remove_HeapTraceUnlock(Action`1<HeapTraceData> value);
    public void add_HeapTraceValidate(Action`1<HeapTraceData> value);
    public void remove_HeapTraceValidate(Action`1<HeapTraceData> value);
    public void add_HeapTraceWalk(Action`1<HeapTraceData> value);
    public void remove_HeapTraceWalk(Action`1<HeapTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private HeapTraceProviderState get_State();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ImageLoadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ImageLoadTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong ImageBase { get; }
    public int ImageSize { get; }
    public int ImageChecksum { get; }
    public int TimeDateStamp { get; }
    public DateTime BuildTime { get; }
    public ulong DefaultBase { get; }
    public string FileName { get; }
    private string KernelFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ImageLoadTraceData(Action`1<ImageLoadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_ImageBase();
    public int get_ImageSize();
    public int get_ImageChecksum();
    public int get_TimeDateStamp();
    public DateTime get_BuildTime();
    public ulong get_DefaultBase();
    public string get_FileName();
    private string get_KernelFileName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ImageLoadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ImageLoadTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.IOPriority : Enum {
    public int value__;
    public static IOPriority Notset;
    public static IOPriority Verylow;
    public static IOPriority Low;
    public static IOPriority Normal;
    public static IOPriority High;
    public static IOPriority Critical;
    public static IOPriority Reserved0;
    public static IOPriority Reserved1;
    public static IOPriority Max;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.IrpFlags : Enum {
    public int value__;
    public static IrpFlags None;
    public static IrpFlags Nocache;
    public static IrpFlags PagingIo;
    public static IrpFlags MountCompletion;
    public static IrpFlags SynchronousApi;
    public static IrpFlags AssociatedIrp;
    public static IrpFlags BufferedIO;
    public static IrpFlags DeallocateBuffer;
    public static IrpFlags InputOperation;
    public static IrpFlags SynchronousPagingIO;
    public static IrpFlags Create;
    public static IrpFlags Read;
    public static IrpFlags Write;
    public static IrpFlags Close;
    public static IrpFlags DeferIOCompletion;
    public static IrpFlags ObQueryName;
    public static IrpFlags HoldDeviceQueue;
    public static IrpFlags PriorityMask;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ISRTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ISRTraceData> Action;
    private KernelTraceEventParserState state;
    private long InitialTimeQPC { get; }
    public double ElapsedTimeMSec { get; }
    public ulong Routine { get; }
    public int ReturnValue { get; }
    public int Vector { get; }
    public int Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ISRTraceData(Action`1<ISRTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    private long get_InitialTimeQPC();
    public double get_ElapsedTimeMSec();
    public ulong get_Routine();
    public int get_ReturnValue();
    public int get_Vector();
    public int get_Message();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ISRTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ISRTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.LastBranchRecordTraceData : TraceEvent {
    private static int HeaderSize32;
    private static int HeaderSize64;
    [CompilerGeneratedAttribute]
private Action`1<LastBranchRecordTraceData> Action;
    private KernelTraceEventParserState state;
    public DateTime CaptureTimeStamp { get; }
    public double CaptureTimeStampRelativeMSec { get; }
    public LbrFilterFlags Filters { get; }
    public int NumBranches { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal LastBranchRecordTraceData(Action`1<LastBranchRecordTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public DateTime get_CaptureTimeStamp();
    public double get_CaptureTimeStampRelativeMSec();
    public LbrFilterFlags get_Filters();
    public int get_NumBranches();
    public void GetBranches(Span`1<Branch> branches);
    public Branch[] GetBranches();
    public Branch GetBranch(int index);
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<LastBranchRecordTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<LastBranchRecordTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MapFileTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MapFileTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong ViewBase { get; }
    public ulong FileKey { get; }
    public long MiscInfo { get; }
    public ulong ViewSize { get; }
    public string FileName { get; }
    public long ByteOffset { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MapFileTraceData(Action`1<MapFileTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_ViewBase();
    public ulong get_FileKey();
    public long get_MiscInfo();
    public ulong get_ViewSize();
    public string get_FileName();
    public long get_ByteOffset();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    internal virtual void FixupData();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MapFileTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MapFileTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemInfoTraceData> Action;
    public byte PriorityLevels { get; }
    public long ZeroPageCount { get; }
    public long FreePageCount { get; }
    public long ModifiedPageCount { get; }
    public long ModifiedNoWritePageCount { get; }
    public long BadPageCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemInfoTraceData(Action`1<MemInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public byte get_PriorityLevels();
    public long get_ZeroPageCount();
    public long get_FreePageCount();
    public long get_ModifiedPageCount();
    public long get_ModifiedNoWritePageCount();
    public long get_BadPageCount();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemInfoTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryHardFaultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryHardFaultTraceData> Action;
    private KernelTraceEventParserState state;
    public double ElapsedTimeMSec { get; }
    private long InitialTime { get; }
    public long ReadOffset { get; }
    public ulong VirtualAddress { get; }
    public ulong FileKey { get; }
    public string FileName { get; }
    public int ByteCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    public int ProcessID { get; }
    internal MemoryHardFaultTraceData(Action`1<MemoryHardFaultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public double get_ElapsedTimeMSec();
    private long get_InitialTime();
    public long get_ReadOffset();
    public ulong get_VirtualAddress();
    public ulong get_FileKey();
    public string get_FileName();
    public int get_ByteCount();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryHardFaultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryHardFaultTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
    public virtual int get_ProcessID();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryHeapRangeCreateTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryHeapRangeCreateTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong HeapHandle { get; }
    public ulong FirstRangeSize { get; }
    public int HeapRangeCreateFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryHeapRangeCreateTraceData(Action`1<MemoryHeapRangeCreateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_HeapHandle();
    public ulong get_FirstRangeSize();
    public int get_HeapRangeCreateFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryHeapRangeCreateTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryHeapRangeCreateTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryHeapRangeDestroyTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryHeapRangeDestroyTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong HeapHandle { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryHeapRangeDestroyTraceData(Action`1<MemoryHeapRangeDestroyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_HeapHandle();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryHeapRangeDestroyTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryHeapRangeDestroyTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryHeapRangeRundownTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryHeapRangeRundownTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong HeapHandle { get; }
    public int HeapRangeFlags { get; }
    public int HRRangeCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryHeapRangeRundownTraceData(Action`1<MemoryHeapRangeRundownTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_HeapHandle();
    public int get_HeapRangeFlags();
    public int get_HRRangeCount();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryHeapRangeRundownTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryHeapRangeRundownTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryHeapRangeTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryHeapRangeTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong HeapHandle { get; }
    public ulong HeapRangeAddress { get; }
    public ulong HeapRangeSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryHeapRangeTraceData(Action`1<MemoryHeapRangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_HeapHandle();
    public ulong get_HeapRangeAddress();
    public ulong get_HeapRangeSize();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryHeapRangeTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryHeapRangeTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryImageLoadBackedTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryImageLoadBackedTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong FileKey { get; }
    public string FileName { get; }
    public int DeviceChar { get; }
    public int FileChar { get; }
    public int LoadFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryImageLoadBackedTraceData(Action`1<MemoryImageLoadBackedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_FileKey();
    public string get_FileName();
    public int get_DeviceChar();
    public int get_FileChar();
    public int get_LoadFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryImageLoadBackedTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryImageLoadBackedTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryPageAccessTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryPageAccessTraceData> Action;
    private KernelTraceEventParserState state;
    public PageKind PageKind { get; }
    public PageList PageList { get; }
    public ulong PageFrameIndex { get; }
    public ulong VirtualAddress { get; }
    public ulong FileKey { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryPageAccessTraceData(Action`1<MemoryPageAccessTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public PageKind get_PageKind();
    public PageList get_PageList();
    public ulong get_PageFrameIndex();
    public ulong get_VirtualAddress();
    public ulong get_FileKey();
    public string get_FileName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryPageAccessTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryPageAccessTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryPageFaultTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryPageFaultTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong VirtualAddress { get; }
    public ulong ProgramCounter { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemoryPageFaultTraceData(Action`1<MemoryPageFaultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_VirtualAddress();
    public ulong get_ProgramCounter();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryPageFaultTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryPageFaultTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryProcessMemInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemoryProcessMemInfoTraceData> Action;
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    internal int ElementSize { get; }
    public String[] PayloadNames { get; }
    internal MemoryProcessMemInfoTraceData(Action`1<MemoryProcessMemInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_Count();
    public MemoryProcessMemInfoValues Values(int index);
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    public virtual StringBuilder ToXml(StringBuilder sb);
    internal int get_ElementSize();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemoryProcessMemInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemoryProcessMemInfoTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemoryProcessMemInfoValues : ValueType {
    private TraceEvent m_data;
    private int m_baseOffset;
    public int ProcessID { get; }
    public long WorkingSetPageCount { get; }
    public long CommitPageCount { get; }
    public long VirtualSizeInPages { get; }
    public long PrivateWorkingSetPageCount { get; }
    public long StoreSizePageCount { get; }
    public long StoredPageCount { get; }
    public long CommitDebtInPages { get; }
    public long SharedCommitInPages { get; }
    internal IntPtr RawData { get; }
    internal MemoryProcessMemInfoValues(TraceEvent data, int baseOffset);
    public int get_ProcessID();
    public long get_WorkingSetPageCount();
    public long get_CommitPageCount();
    public long get_VirtualSizeInPages();
    public long get_PrivateWorkingSetPageCount();
    public long get_StoreSizePageCount();
    public long get_StoredPageCount();
    public long get_CommitDebtInPages();
    public long get_SharedCommitInPages();
    internal IntPtr get_RawData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.MemorySystemMemInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MemorySystemMemInfoTraceData> Action;
    private KernelTraceEventParserState state;
    public long FreePages { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MemorySystemMemInfoTraceData(Action`1<MemorySystemMemInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_FreePages();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MemorySystemMemInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MemorySystemMemInfoTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ObjectDuplicateHandleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ObjectDuplicateHandleTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Object { get; }
    public int SourceHandle { get; }
    public int TargetHandle { get; }
    public int TargetProcessID { get; }
    public int ObjectType { get; }
    public int SourceProcessID { get; }
    public string ObjectName { get; }
    public string ObjectTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ObjectDuplicateHandleTraceData(Action`1<ObjectDuplicateHandleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Object();
    public int get_SourceHandle();
    public int get_TargetHandle();
    public int get_TargetProcessID();
    public int get_ObjectType();
    public int get_SourceProcessID();
    public string get_ObjectName();
    public string get_ObjectTypeName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<ObjectDuplicateHandleTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<ObjectDuplicateHandleTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ObjectHandleTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ObjectHandleTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Object { get; }
    public int Handle { get; }
    public int ObjectType { get; }
    public string ObjectName { get; }
    public string ObjectTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ObjectHandleTraceData(Action`1<ObjectHandleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Object();
    public int get_Handle();
    public int get_ObjectType();
    public string get_ObjectName();
    public string get_ObjectTypeName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<ObjectHandleTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<ObjectHandleTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ObjectNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ObjectNameTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong Object { get; }
    public int Handle { get; }
    public int ObjectType { get; }
    public string ObjectName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ObjectNameTraceData(Action`1<ObjectNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_Object();
    public int get_Handle();
    public int get_ObjectType();
    public string get_ObjectName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    internal virtual void FixupData();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<ObjectNameTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<ObjectNameTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ObjectTypeNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ObjectTypeNameTraceData> Action;
    private KernelTraceEventParserState state;
    public int ObjectType { get; }
    public string ObjectTypeName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ObjectTypeNameTraceData(Action`1<ObjectTypeNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_ObjectType();
    public string get_ObjectTypeName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<ObjectTypeNameTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<ObjectTypeNameTraceData> value);
    protected internal virtual void SetState(object newState);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.PageKind : Enum {
    public int value__;
    public static PageKind ProcessPrivate;
    public static PageKind File;
    public static PageKind PageFileMapped;
    public static PageKind PageTable;
    public static PageKind PagedPool;
    public static PageKind NonPagedPool;
    public static PageKind SystemPTE;
    public static PageKind SessionPrivate;
    public static PageKind MetaFile;
    public static PageKind AwePage;
    public static PageKind DriverLockPage;
    public static PageKind KernelStack;
    public static PageKind WSMetaData;
    public static PageKind LargePage;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.PageList : Enum {
    public int value__;
    public static PageList Zero;
    public static PageList Free;
    public static PageList Standby;
    public static PageList Modified;
    public static PageList ModifiedNoWrite;
    public static PageList Bad;
    public static PageList Active;
    public static PageList Transition;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.PMCCounterProfTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PMCCounterProfTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong InstructionPointer { get; }
    public int ProfileSource { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    public int ProcessID { get; }
    internal PMCCounterProfTraceData(Action`1<PMCCounterProfTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_InstructionPointer();
    public int get_ProfileSource();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PMCCounterProfTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PMCCounterProfTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
    internal virtual void FixupData();
    public virtual int get_ProcessID();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ProcessCtrTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProcessCtrTraceData> Action;
    private KernelTraceEventParserState state;
    public int MemoryCount { get; }
    public int HandleCount { get; }
    public long PeakVirtualSize { get; }
    public long PeakWorkingSetSize { get; }
    public long PeakPagefileUsage { get; }
    public long QuotaPeakPagedPoolUsage { get; }
    public long QuotaPeakNonPagedPoolUsage { get; }
    public long VirtualSize { get; }
    public long WorkingSetSize { get; }
    public long PagefileUsage { get; }
    public long QuotaPagedPoolUsage { get; }
    public long QuotaNonPagedPoolUsage { get; }
    public long PrivatePageCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProcessCtrTraceData(Action`1<ProcessCtrTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MemoryCount();
    public int get_HandleCount();
    public long get_PeakVirtualSize();
    public long get_PeakWorkingSetSize();
    public long get_PeakPagefileUsage();
    public long get_QuotaPeakPagedPoolUsage();
    public long get_QuotaPeakNonPagedPoolUsage();
    public long get_VirtualSize();
    public long get_WorkingSetSize();
    public long get_PagefileUsage();
    public long get_QuotaPagedPoolUsage();
    public long get_QuotaNonPagedPoolUsage();
    public long get_PrivatePageCount();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProcessCtrTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProcessCtrTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Parsers.Kernel.ProcessFlags : Enum {
    public int value__;
    public static ProcessFlags None;
    public static ProcessFlags PackageFullName;
    public static ProcessFlags Wow64;
    public static ProcessFlags Protected;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ProcessTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProcessTraceData> Action;
    private KernelTraceEventParserState state;
    public int ParentID { get; }
    public string KernelImageFileName { get; }
    public string ImageFileName { get; }
    public ulong DirectoryTableBase { get; }
    public ProcessFlags Flags { get; }
    public int SessionID { get; }
    public int ExitStatus { get; }
    public ulong UniqueProcessKey { get; }
    public string CommandLine { get; }
    public string PackageFullName { get; }
    public string ApplicationID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProcessTraceData(Action`1<ProcessTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_ParentID();
    public string get_KernelImageFileName();
    public string get_ImageFileName();
    public ulong get_DirectoryTableBase();
    public ProcessFlags get_Flags();
    public int get_SessionID();
    public int get_ExitStatus();
    public ulong get_UniqueProcessKey();
    public string get_CommandLine();
    public string get_PackageFullName();
    public string get_ApplicationID();
    private int GetKernelImageNameOffset();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProcessTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProcessTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.RegistryTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RegistryTraceData> Action;
    private KernelTraceEventParserState state;
    private long InitialTimeQPC { get; }
    public double ElapsedTimeMSec { get; }
    public int Status { get; }
    public int Index { get; }
    public ulong KeyHandle { get; }
    public string KeyName { get; }
    public string ValueName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RegistryTraceData(Action`1<RegistryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    private long get_InitialTimeQPC();
    public double get_ElapsedTimeMSec();
    public int get_Status();
    public int get_Index();
    public ulong get_KeyHandle();
    public string get_KeyName();
    public string get_ValueName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<RegistryTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<RegistryTraceData> value);
    protected internal virtual void SetState(object newState);
    internal static bool NameIsKeyName(TraceEventOpcode code);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SampledProfileIntervalTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SampledProfileIntervalTraceData> Action;
    private KernelTraceEventParserState state;
    public int SampleSource { get; }
    public int NewInterval { get; }
    public int OldInterval { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SampledProfileIntervalTraceData(Action`1<SampledProfileIntervalTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_SampleSource();
    public int get_NewInterval();
    public int get_OldInterval();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SampledProfileIntervalTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SampledProfileIntervalTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SampledProfileTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SampledProfileTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong InstructionPointer { get; }
    public int Count { get; }
    public bool ExecutingDPC { get; }
    public bool ExecutingISR { get; }
    public bool NonProcess { get; }
    public int Priority { get; }
    public int Rank { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    public int ProcessID { get; }
    internal SampledProfileTraceData(Action`1<SampledProfileTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_InstructionPointer();
    public int get_Count();
    public bool get_ExecutingDPC();
    public bool get_ExecutingISR();
    public bool get_NonProcess();
    public int get_Priority();
    public int get_Rank();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SampledProfileTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SampledProfileTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
    internal virtual void FixupData();
    public virtual int get_ProcessID();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SplitIoInfoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SplitIoInfoTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong ParentIrp { get; }
    public ulong ChildIrp { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SplitIoInfoTraceData(Action`1<SplitIoInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_ParentIrp();
    public ulong get_ChildIrp();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SplitIoInfoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SplitIoInfoTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.StackWalkDefTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StackWalkDefTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong StackKey { get; }
    public int FrameCount { get; }
    internal Void* InstructionPointers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StackWalkDefTraceData(Action`1<StackWalkDefTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_StackKey();
    public int get_FrameCount();
    public ulong InstructionPointer(int index);
    internal Void* get_InstructionPointers();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<StackWalkDefTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<StackWalkDefTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.StackWalkRefTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StackWalkRefTraceData> Action;
    private KernelTraceEventParserState state;
    public long EventTimeStampQPC { get; }
    public double EventTimeStampRelativeMSec { get; }
    public ulong StackKey { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StackWalkRefTraceData(Action`1<StackWalkRefTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_EventTimeStampQPC();
    public double get_EventTimeStampRelativeMSec();
    public ulong get_StackKey();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    internal virtual void FixupData();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<StackWalkRefTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<StackWalkRefTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.StackWalkStackTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StackWalkStackTraceData> Action;
    private KernelTraceEventParserState state;
    public long EventTimeStampQPC { get; }
    public double EventTimeStampRelativeMSec { get; }
    public int FrameCount { get; }
    internal Void* InstructionPointers { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StackWalkStackTraceData(Action`1<StackWalkStackTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_EventTimeStampQPC();
    public double get_EventTimeStampRelativeMSec();
    public int get_FrameCount();
    public ulong InstructionPointer(int index);
    internal Void* get_InstructionPointers();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    internal virtual void FixupData();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<StackWalkStackTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<StackWalkStackTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SysCallEnterTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SysCallEnterTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong SysCallAddress { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SysCallEnterTraceData(Action`1<SysCallEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_SysCallAddress();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SysCallEnterTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SysCallEnterTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SysCallExitTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SysCallExitTraceData> Action;
    private KernelTraceEventParserState state;
    public int SysCallNtStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SysCallExitTraceData(Action`1<SysCallExitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_SysCallNtStatus();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SysCallExitTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SysCallExitTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigCPUTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigCPUTraceData> Action;
    private KernelTraceEventParserState state;
    public int MHz { get; }
    public int NumberOfProcessors { get; }
    public int MemSize { get; }
    public int PageSize { get; }
    public int AllocationGranularity { get; }
    public string ComputerName { get; }
    public string DomainName { get; }
    public ulong HyperThreadingFlag { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigCPUTraceData(Action`1<SystemConfigCPUTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MHz();
    public int get_NumberOfProcessors();
    public int get_MemSize();
    public int get_PageSize();
    public int get_AllocationGranularity();
    public string get_ComputerName();
    public string get_DomainName();
    public ulong get_HyperThreadingFlag();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigCPUTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigCPUTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigIDEChannelTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigIDEChannelTraceData> Action;
    private KernelTraceEventParserState state;
    public int TargetID { get; }
    public int DeviceType { get; }
    public int DeviceTimingMode { get; }
    public int LocationInformationLen { get; }
    public string LocationInformation { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigIDEChannelTraceData(Action`1<SystemConfigIDEChannelTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_TargetID();
    public int get_DeviceType();
    public int get_DeviceTimingMode();
    public int get_LocationInformationLen();
    public string get_LocationInformation();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigIDEChannelTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigIDEChannelTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigIRQTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigIRQTraceData> Action;
    private KernelTraceEventParserState state;
    public long IRQAffinity { get; }
    public int IRQNum { get; }
    public int DeviceDescriptionLen { get; }
    public string DeviceDescription { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigIRQTraceData(Action`1<SystemConfigIRQTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_IRQAffinity();
    public int get_IRQNum();
    public int get_DeviceDescriptionLen();
    public string get_DeviceDescription();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigIRQTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigIRQTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigLogDiskTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigLogDiskTraceData> Action;
    private KernelTraceEventParserState state;
    public long StartOffset { get; }
    public long PartitionSize { get; }
    public int DiskNumber { get; }
    public int Size { get; }
    public int DriveType { get; }
    public string DriveLetterString { get; }
    public int PartitionNumber { get; }
    public int SectorsPerCluster { get; }
    public int BytesPerSector { get; }
    public long NumberOfFreeClusters { get; }
    public long TotalNumberOfClusters { get; }
    public string FileSystem { get; }
    public int VolumeExt { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigLogDiskTraceData(Action`1<SystemConfigLogDiskTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public long get_StartOffset();
    public long get_PartitionSize();
    public int get_DiskNumber();
    public int get_Size();
    public int get_DriveType();
    public string get_DriveLetterString();
    public int get_PartitionNumber();
    public int get_SectorsPerCluster();
    public int get_BytesPerSector();
    public long get_NumberOfFreeClusters();
    public long get_TotalNumberOfClusters();
    public string get_FileSystem();
    public int get_VolumeExt();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigLogDiskTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigLogDiskTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigNetworkTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigNetworkTraceData> Action;
    private KernelTraceEventParserState state;
    public int TcbTablePartitions { get; }
    public int MaxHashTableSize { get; }
    public int TcpTimedWaitDelay { get; }
    public int MaxUserPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigNetworkTraceData(Action`1<SystemConfigNetworkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_TcbTablePartitions();
    public int get_MaxHashTableSize();
    public int get_TcpTimedWaitDelay();
    public int get_MaxUserPort();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigNetworkTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigNetworkTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigNICTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigNICTraceData> Action;
    private KernelTraceEventParserState state;
    public int PhysicalAddrLen { get; }
    public long PhysicalAddr { get; }
    public int Ipv4Index { get; }
    public int Ipv6Index { get; }
    public string NICDescription { get; }
    public string IpAddresses { get; }
    public string DnsServerAddresses { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigNICTraceData(Action`1<SystemConfigNICTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_PhysicalAddrLen();
    public long get_PhysicalAddr();
    public int get_Ipv4Index();
    public int get_Ipv6Index();
    public string get_NICDescription();
    public string get_IpAddresses();
    public string get_DnsServerAddresses();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigNICTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigNICTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigPhyDiskTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigPhyDiskTraceData> Action;
    private KernelTraceEventParserState state;
    public int DiskNumber { get; }
    public int BytesPerSector { get; }
    public int SectorsPerTrack { get; }
    public int TracksPerCylinder { get; }
    public long Cylinders { get; }
    public int SCSIPort { get; }
    public int SCSIPath { get; }
    public int SCSITarget { get; }
    public int SCSILun { get; }
    public string Manufacturer { get; }
    public int PartitionCount { get; }
    public int WriteCacheEnabled { get; }
    public string BootDriveLetter { get; }
    public string Spare { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigPhyDiskTraceData(Action`1<SystemConfigPhyDiskTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_DiskNumber();
    public int get_BytesPerSector();
    public int get_SectorsPerTrack();
    public int get_TracksPerCylinder();
    public long get_Cylinders();
    public int get_SCSIPort();
    public int get_SCSIPath();
    public int get_SCSITarget();
    public int get_SCSILun();
    public string get_Manufacturer();
    public int get_PartitionCount();
    public int get_WriteCacheEnabled();
    public string get_BootDriveLetter();
    public string get_Spare();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigPhyDiskTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigPhyDiskTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigPnPTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigPnPTraceData> Action;
    private KernelTraceEventParserState state;
    public string DeviceID { get; }
    public string DeviceDescription { get; }
    public string FriendlyName { get; }
    public string PdoName { get; }
    public string ServiceName { get; }
    public int DeviceIDStart { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigPnPTraceData(Action`1<SystemConfigPnPTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public string get_DeviceID();
    public string get_DeviceDescription();
    public string get_FriendlyName();
    public string get_PdoName();
    public string get_ServiceName();
    public int get_DeviceIDStart();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigPnPTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigPnPTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigPowerTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigPowerTraceData> Action;
    private KernelTraceEventParserState state;
    public int S1 { get; }
    public int S2 { get; }
    public int S3 { get; }
    public int S4 { get; }
    public int S5 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigPowerTraceData(Action`1<SystemConfigPowerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_S1();
    public int get_S2();
    public int get_S3();
    public int get_S4();
    public int get_S5();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigPowerTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigPowerTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigServicesTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigServicesTraceData> Action;
    private KernelTraceEventParserState state;
    public string ServiceName { get; }
    public string DisplayName { get; }
    public int ServiceState { get; }
    public int SubProcessTag { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigServicesTraceData(Action`1<SystemConfigServicesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public string get_ServiceName();
    public string get_DisplayName();
    public int get_ServiceState();
    public int get_SubProcessTag();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigServicesTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigServicesTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemConfigVideoTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SystemConfigVideoTraceData> Action;
    private KernelTraceEventParserState state;
    public int MemorySize { get; }
    public int XResolution { get; }
    public int YResolution { get; }
    public int BitsPerPixel { get; }
    public int VRefresh { get; }
    public string ChipType { get; }
    public string DACType { get; }
    public string AdapterString { get; }
    public string BiosString { get; }
    public string DeviceID { get; }
    public int StateFlags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemConfigVideoTraceData(Action`1<SystemConfigVideoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_MemorySize();
    public int get_XResolution();
    public int get_YResolution();
    public int get_BitsPerPixel();
    public int get_VRefresh();
    public string get_ChipType();
    public string get_DACType();
    public string get_AdapterString();
    public string get_BiosString();
    public string get_DeviceID();
    public int get_StateFlags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SystemConfigVideoTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SystemConfigVideoTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.SystemPathsTraceData : TraceEvent {
    private Action`1<SystemPathsTraceData> Action;
    public string SystemDirectory { get; }
    public string SystemWindowsDirectory { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SystemPathsTraceData(Action`1<SystemPathsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public string get_SystemDirectory();
    public string get_SystemWindowsDirectory();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpConnectTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpConnectTraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public int mss { get; }
    public int sackopt { get; }
    public int tsopt { get; }
    public int wsopt { get; }
    public int rcvwin { get; }
    public int rcvwinscale { get; }
    public int sndwinscale { get; }
    public int seqnum { get; }
    public ulong connid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpConnectTraceData(Action`1<TcpIpConnectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public int get_mss();
    public int get_sackopt();
    public int get_tsopt();
    public int get_wsopt();
    public int get_rcvwin();
    public int get_rcvwinscale();
    public int get_sndwinscale();
    public int get_seqnum();
    public ulong get_connid();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpConnectTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpConnectTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpFailTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpFailTraceData> Action;
    private KernelTraceEventParserState state;
    public int Proto { get; }
    public int FailureCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpFailTraceData(Action`1<TcpIpFailTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_Proto();
    public int get_FailureCode();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpFailTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpFailTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpSendTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpSendTraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public int startime { get; }
    public int endtime { get; }
    public int seqnum { get; }
    public ulong connid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpSendTraceData(Action`1<TcpIpSendTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public int get_startime();
    public int get_endtime();
    public int get_seqnum();
    public ulong get_connid();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpSendTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpSendTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpTraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public ulong connid { get; }
    public int seqnum { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpTraceData(Action`1<TcpIpTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public ulong get_connid();
    public int get_seqnum();
    internal static int ByteSwap16(int val);
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpV6ConnectTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpV6ConnectTraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public int mss { get; }
    public int sackopt { get; }
    public int tsopt { get; }
    public int wsopt { get; }
    public int rcvwin { get; }
    public int rcvwinscale { get; }
    public int sndwinscale { get; }
    public int seqnum { get; }
    public ulong connid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpV6ConnectTraceData(Action`1<TcpIpV6ConnectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public int get_mss();
    public int get_sackopt();
    public int get_tsopt();
    public int get_wsopt();
    public int get_rcvwin();
    public int get_rcvwinscale();
    public int get_sndwinscale();
    public int get_seqnum();
    public ulong get_connid();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpV6ConnectTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpV6ConnectTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpV6SendTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpV6SendTraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public int startime { get; }
    public int endtime { get; }
    public int seqnum { get; }
    public ulong connid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpV6SendTraceData(Action`1<TcpIpV6SendTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public int get_startime();
    public int get_endtime();
    public int get_seqnum();
    public ulong get_connid();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpV6SendTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpV6SendTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TcpIpV6TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIpV6TraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public ulong connid { get; }
    public int seqnum { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIpV6TraceData(Action`1<TcpIpV6TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public ulong get_connid();
    public int get_seqnum();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TcpIpV6TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TcpIpV6TraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ThreadPoolTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private static Guid ThreadPoolTraceTaskGuid;
    private ThreadPoolTraceEventParserState State { get; }
    public ThreadPoolTraceEventParser(TraceEventSource source);
    private static ThreadPoolTraceEventParser();
    public void add_ThreadPoolTraceCBEnqueue(Action`1<TPCBEnqueueTraceData> value);
    public void remove_ThreadPoolTraceCBEnqueue(Action`1<TPCBEnqueueTraceData> value);
    public void add_ThreadPoolTraceCBStart(Action`1<TPCBEnqueueTraceData> value);
    public void remove_ThreadPoolTraceCBStart(Action`1<TPCBEnqueueTraceData> value);
    public void add_ThreadPoolTraceCBDequeue(Action`1<TPCBDequeueTraceData> value);
    public void remove_ThreadPoolTraceCBDequeue(Action`1<TPCBDequeueTraceData> value);
    public void add_ThreadPoolTraceCBStop(Action`1<TPCBDequeueTraceData> value);
    public void remove_ThreadPoolTraceCBStop(Action`1<TPCBDequeueTraceData> value);
    public void add_ThreadPoolTraceCBCancel(Action`1<TPCBCancelTraceData> value);
    public void remove_ThreadPoolTraceCBCancel(Action`1<TPCBCancelTraceData> value);
    public void add_ThreadPoolTracePoolCreate(Action`1<TPPoolCreateCloseTraceData> value);
    public void remove_ThreadPoolTracePoolCreate(Action`1<TPPoolCreateCloseTraceData> value);
    public void add_ThreadPoolTracePoolClose(Action`1<TPPoolCreateCloseTraceData> value);
    public void remove_ThreadPoolTracePoolClose(Action`1<TPPoolCreateCloseTraceData> value);
    public void add_ThreadPoolTraceThreadMinSet(Action`1<TPThreadSetTraceData> value);
    public void remove_ThreadPoolTraceThreadMinSet(Action`1<TPThreadSetTraceData> value);
    public void add_ThreadPoolTraceThreadMaxSet(Action`1<TPThreadSetTraceData> value);
    public void remove_ThreadPoolTraceThreadMaxSet(Action`1<TPThreadSetTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private ThreadPoolTraceEventParserState get_State();
}
internal class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ThreadPoolTraceEventParserState : object {
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ThreadSetNameTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadSetNameTraceData> Action;
    public string ThreadName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadSetNameTraceData(Action`1<ThreadSetNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ThreadName();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadSetNameTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadSetNameTraceData> value);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.ThreadTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ThreadTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong StackBase { get; }
    public ulong StackLimit { get; }
    public ulong UserStackBase { get; }
    public ulong UserStackLimit { get; }
    public ulong StartAddr { get; }
    public ulong Win32StartAddr { get; }
    public ulong TebBase { get; }
    public int SubProcessTag { get; }
    public int BasePriority { get; }
    public int PagePriority { get; }
    public int IoPriority { get; }
    public int ThreadFlags { get; }
    public string ThreadName { get; }
    public int ParentThreadID { get; }
    public int ParentProcessID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ThreadTraceData(Action`1<ThreadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_StackBase();
    public ulong get_StackLimit();
    public ulong get_UserStackBase();
    public ulong get_UserStackLimit();
    public ulong get_StartAddr();
    public ulong get_Win32StartAddr();
    public ulong get_TebBase();
    public int get_SubProcessTag();
    public int get_BasePriority();
    public int get_PagePriority();
    public int get_IoPriority();
    public int get_ThreadFlags();
    public string get_ThreadName();
    public int get_ParentThreadID();
    public int get_ParentProcessID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ThreadTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ThreadTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TPCBCancelTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TPCBCancelTraceData> Action;
    private ThreadPoolTraceEventParserState state;
    public ulong TaskID { get; }
    public int CancelCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TPCBCancelTraceData(Action`1<TPCBCancelTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ThreadPoolTraceEventParserState state);
    public ulong get_TaskID();
    public int get_CancelCount();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TPCBCancelTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TPCBCancelTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TPCBDequeueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TPCBDequeueTraceData> Action;
    private ThreadPoolTraceEventParserState state;
    public ulong TaskID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TPCBDequeueTraceData(Action`1<TPCBDequeueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ThreadPoolTraceEventParserState state);
    public ulong get_TaskID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TPCBDequeueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TPCBDequeueTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TPCBEnqueueTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TPCBEnqueueTraceData> Action;
    private ThreadPoolTraceEventParserState state;
    public ulong PoolID { get; }
    public ulong TaskID { get; }
    public ulong CallbackFunction { get; }
    public ulong CallbackContext { get; }
    public ulong SubProcessTag { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TPCBEnqueueTraceData(Action`1<TPCBEnqueueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ThreadPoolTraceEventParserState state);
    public ulong get_PoolID();
    public ulong get_TaskID();
    public ulong get_CallbackFunction();
    public ulong get_CallbackContext();
    public ulong get_SubProcessTag();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TPCBEnqueueTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TPCBEnqueueTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TPPoolCreateCloseTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TPPoolCreateCloseTraceData> Action;
    private ThreadPoolTraceEventParserState state;
    public ulong PoolID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TPPoolCreateCloseTraceData(Action`1<TPPoolCreateCloseTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ThreadPoolTraceEventParserState state);
    public ulong get_PoolID();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TPPoolCreateCloseTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TPPoolCreateCloseTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.TPThreadSetTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TPThreadSetTraceData> Action;
    private ThreadPoolTraceEventParserState state;
    public ulong PoolID { get; }
    public int ThreadNum { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TPThreadSetTraceData(Action`1<TPThreadSetTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, ThreadPoolTraceEventParserState state);
    public ulong get_PoolID();
    public int get_ThreadNum();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<TPThreadSetTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<TPThreadSetTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.UdpIpFailTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpIpFailTraceData> Action;
    private KernelTraceEventParserState state;
    public int Proto { get; }
    public int FailureCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpIpFailTraceData(Action`1<UdpIpFailTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_Proto();
    public int get_FailureCode();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<UdpIpFailTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<UdpIpFailTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.UdpIpTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpIpTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong context { get; }
    public IPAddress saddr { get; }
    public int sport { get; }
    public int size { get; }
    public IPAddress daddr { get; }
    public int dport { get; }
    public int dsize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpIpTraceData(Action`1<UdpIpTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_context();
    public IPAddress get_saddr();
    public int get_sport();
    public int get_size();
    public IPAddress get_daddr();
    public int get_dport();
    public int get_dsize();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<UdpIpTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<UdpIpTraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.UpdIpV6TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UpdIpV6TraceData> Action;
    private KernelTraceEventParserState state;
    public int size { get; }
    public IPAddress daddr { get; }
    public IPAddress saddr { get; }
    public int dport { get; }
    public int sport { get; }
    public int seqnum { get; }
    public ulong connid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UpdIpV6TraceData(Action`1<UpdIpV6TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public int get_size();
    public IPAddress get_daddr();
    public IPAddress get_saddr();
    public int get_dport();
    public int get_sport();
    public int get_seqnum();
    public ulong get_connid();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<UpdIpV6TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<UpdIpV6TraceData> value);
    protected internal virtual void SetState(object newState);
    internal virtual void FixupData();
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.VirtualAllocTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<VirtualAllocTraceData> Action;
    private KernelTraceEventParserState state;
    public ulong BaseAddr { get; }
    public long Length { get; }
    public VirtualAllocFlags Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal VirtualAllocTraceData(Action`1<VirtualAllocTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, KernelTraceEventParserState state);
    public ulong get_BaseAddr();
    public long get_Length();
    public VirtualAllocFlags get_Flags();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
public void add_Action(Action`1<VirtualAllocTraceData> value);
    [CompilerGeneratedAttribute]
public void remove_Action(Action`1<VirtualAllocTraceData> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Kernel.VolumeMappingTraceData : TraceEvent {
    private Action`1<VolumeMappingTraceData> Action;
    public string NtPath { get; }
    public string DosPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal VolumeMappingTraceData(Action`1<VolumeMappingTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public string get_NtPath();
    public string get_DosPath();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Parsers.KernelToUserDriveMapping : object {
    internal List`1<KeyValuePair`2<string, string>> kernelToDriveMap;
    internal string systemDrive;
    internal Func`2<string, string> MapKernelToUser;
    public string Item { get; }
    public string get_Item(string kernelName);
    internal string MapKernelToUserDefault(string kernelName);
    internal void PopulateFromLocalMachine();
    internal void AddMapping(string kernelName, string driveName);
    internal void AddSystemDrive(string windows);
    private static UInt32 QueryDosDeviceW(string lpDeviceName, StringBuilder lpTargetPath, int ucchMax);
    private static int GetLogicalDrives();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.KernelTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    internal static Guid EventTraceTaskGuid;
    internal static Guid ProcessTaskGuid;
    internal static Guid ThreadTaskGuid;
    internal static Guid DiskIOTaskGuid;
    internal static Guid RegistryTaskGuid;
    internal static Guid SplitIoTaskGuid;
    internal static Guid FileIOTaskGuid;
    internal static Guid TcpIpTaskGuid;
    internal static Guid UdpIpTaskGuid;
    internal static Guid ImageTaskGuid;
    internal static Guid MemoryTaskGuid;
    internal static Guid MemoryProviderGuid;
    internal static Guid PerfInfoTaskGuid;
    internal static Guid StackWalkTaskGuid;
    internal static Guid EventTracingProviderGuid;
    internal static Guid ALPCTaskGuid;
    internal static Guid LostEventTaskGuid;
    internal static Guid SystemConfigTaskGuid;
    internal static Guid VirtualAllocTaskGuid;
    internal static Guid ReadyThreadTaskGuid;
    internal static Guid SysConfigTaskGuid;
    internal static Guid ObjectTaskGuid;
    internal static Guid LbrTaskGuid;
    public static string KernelSessionName { get; }
    internal static Keywords NonOSKeywords { get; }
    unknown Func`2<string, string> KernelPathToUserPathMapper {public set; }
    internal KernelTraceEventParserState State { get; }
    public KernelTraceEventParser(TraceEventSource source);
    public KernelTraceEventParser(TraceEventSource source, ParserTrackingOptions tracking);
    private static KernelTraceEventParser();
    public static string get_KernelSessionName();
    internal static Keywords get_NonOSKeywords();
    public void set_KernelPathToUserPathMapper(Func`2<string, string> value);
    public string FileIDToFileName(ulong fileKey);
    public void add_EventTraceHeader(Action`1<EventTraceHeaderTraceData> value);
    public void remove_EventTraceHeader(Action`1<EventTraceHeaderTraceData> value);
    public void add_EventTraceExtension(Action`1<HeaderExtensionTraceData> value);
    public void remove_EventTraceExtension(Action`1<HeaderExtensionTraceData> value);
    public void add_EventTraceEndExtension(Action`1<HeaderExtensionTraceData> value);
    public void remove_EventTraceEndExtension(Action`1<HeaderExtensionTraceData> value);
    public void add_EventTraceRundownComplete(Action`1<EmptyTraceData> value);
    public void remove_EventTraceRundownComplete(Action`1<EmptyTraceData> value);
    public void add_ProcessStart(Action`1<ProcessTraceData> value);
    public void remove_ProcessStart(Action`1<ProcessTraceData> value);
    public void add_ProcessStartGroup(Action`1<ProcessTraceData> value);
    public void remove_ProcessStartGroup(Action`1<ProcessTraceData> value);
    public void add_ProcessStop(Action`1<ProcessTraceData> value);
    public void remove_ProcessStop(Action`1<ProcessTraceData> value);
    public void add_ProcessEndGroup(Action`1<ProcessTraceData> value);
    public void remove_ProcessEndGroup(Action`1<ProcessTraceData> value);
    public void add_ProcessGroup(Action`1<ProcessTraceData> value);
    public void remove_ProcessGroup(Action`1<ProcessTraceData> value);
    public void add_ProcessDCStart(Action`1<ProcessTraceData> value);
    public void remove_ProcessDCStart(Action`1<ProcessTraceData> value);
    public void add_ProcessDCStop(Action`1<ProcessTraceData> value);
    public void remove_ProcessDCStop(Action`1<ProcessTraceData> value);
    public void add_ProcessDefunct(Action`1<ProcessTraceData> value);
    public void remove_ProcessDefunct(Action`1<ProcessTraceData> value);
    public void add_ProcessPerfCtr(Action`1<ProcessCtrTraceData> value);
    public void remove_ProcessPerfCtr(Action`1<ProcessCtrTraceData> value);
    public void add_ProcessPerfCtrRundown(Action`1<ProcessCtrTraceData> value);
    public void remove_ProcessPerfCtrRundown(Action`1<ProcessCtrTraceData> value);
    public void add_ThreadStart(Action`1<ThreadTraceData> value);
    public void remove_ThreadStart(Action`1<ThreadTraceData> value);
    public void add_ThreadStartGroup(Action`1<ThreadTraceData> value);
    public void remove_ThreadStartGroup(Action`1<ThreadTraceData> value);
    public void add_ThreadStop(Action`1<ThreadTraceData> value);
    public void remove_ThreadStop(Action`1<ThreadTraceData> value);
    public void add_ThreadEndGroup(Action`1<ThreadTraceData> value);
    public void remove_ThreadEndGroup(Action`1<ThreadTraceData> value);
    public void add_ThreadDCStart(Action`1<ThreadTraceData> value);
    public void remove_ThreadDCStart(Action`1<ThreadTraceData> value);
    public void add_ThreadDCStop(Action`1<ThreadTraceData> value);
    public void remove_ThreadDCStop(Action`1<ThreadTraceData> value);
    public void add_ThreadSetName(Action`1<ThreadSetNameTraceData> value);
    public void remove_ThreadSetName(Action`1<ThreadSetNameTraceData> value);
    public void add_ThreadCSwitch(Action`1<CSwitchTraceData> value);
    public void remove_ThreadCSwitch(Action`1<CSwitchTraceData> value);
    public void add_ThreadCompCS(Action`1<EmptyTraceData> value);
    public void remove_ThreadCompCS(Action`1<EmptyTraceData> value);
    public void add_ThreadEnqueue(Action`1<EnqueueTraceData> value);
    public void remove_ThreadEnqueue(Action`1<EnqueueTraceData> value);
    public void add_ThreadDequeue(Action`1<DequeueTraceData> value);
    public void remove_ThreadDequeue(Action`1<DequeueTraceData> value);
    public void add_DiskIORead(Action`1<DiskIOTraceData> value);
    public void remove_DiskIORead(Action`1<DiskIOTraceData> value);
    public void add_DiskIOWrite(Action`1<DiskIOTraceData> value);
    public void remove_DiskIOWrite(Action`1<DiskIOTraceData> value);
    public void add_DiskIOReadInit(Action`1<DiskIOInitTraceData> value);
    public void remove_DiskIOReadInit(Action`1<DiskIOInitTraceData> value);
    public void add_DiskIOWriteInit(Action`1<DiskIOInitTraceData> value);
    public void remove_DiskIOWriteInit(Action`1<DiskIOInitTraceData> value);
    public void add_DiskIOFlushInit(Action`1<DiskIOInitTraceData> value);
    public void remove_DiskIOFlushInit(Action`1<DiskIOInitTraceData> value);
    public void add_DiskIOFlushBuffers(Action`1<DiskIOFlushBuffersTraceData> value);
    public void remove_DiskIOFlushBuffers(Action`1<DiskIOFlushBuffersTraceData> value);
    public void add_DiskIODriverMajorFunctionCall(Action`1<DriverMajorFunctionCallTraceData> value);
    public void remove_DiskIODriverMajorFunctionCall(Action`1<DriverMajorFunctionCallTraceData> value);
    public void add_DiskIODriverMajorFunctionReturn(Action`1<DriverMajorFunctionReturnTraceData> value);
    public void remove_DiskIODriverMajorFunctionReturn(Action`1<DriverMajorFunctionReturnTraceData> value);
    public void add_DiskIODriverCompletionRoutine(Action`1<DriverCompletionRoutineTraceData> value);
    public void remove_DiskIODriverCompletionRoutine(Action`1<DriverCompletionRoutineTraceData> value);
    public void add_DiskIODriverCompleteRequest(Action`1<DriverCompleteRequestTraceData> value);
    public void remove_DiskIODriverCompleteRequest(Action`1<DriverCompleteRequestTraceData> value);
    public void add_DiskIODriverCompleteRequestReturn(Action`1<DriverCompleteRequestReturnTraceData> value);
    public void remove_DiskIODriverCompleteRequestReturn(Action`1<DriverCompleteRequestReturnTraceData> value);
    public void add_RegistryCreate(Action`1<RegistryTraceData> value);
    public void remove_RegistryCreate(Action`1<RegistryTraceData> value);
    public void add_RegistryOpen(Action`1<RegistryTraceData> value);
    public void remove_RegistryOpen(Action`1<RegistryTraceData> value);
    public void add_RegistryDelete(Action`1<RegistryTraceData> value);
    public void remove_RegistryDelete(Action`1<RegistryTraceData> value);
    public void add_RegistryQuery(Action`1<RegistryTraceData> value);
    public void remove_RegistryQuery(Action`1<RegistryTraceData> value);
    public void add_RegistrySetValue(Action`1<RegistryTraceData> value);
    public void remove_RegistrySetValue(Action`1<RegistryTraceData> value);
    public void add_RegistryDeleteValue(Action`1<RegistryTraceData> value);
    public void remove_RegistryDeleteValue(Action`1<RegistryTraceData> value);
    public void add_RegistryQueryValue(Action`1<RegistryTraceData> value);
    public void remove_RegistryQueryValue(Action`1<RegistryTraceData> value);
    public void add_RegistryEnumerateKey(Action`1<RegistryTraceData> value);
    public void remove_RegistryEnumerateKey(Action`1<RegistryTraceData> value);
    public void add_RegistryEnumerateValueKey(Action`1<RegistryTraceData> value);
    public void remove_RegistryEnumerateValueKey(Action`1<RegistryTraceData> value);
    public void add_RegistryQueryMultipleValue(Action`1<RegistryTraceData> value);
    public void remove_RegistryQueryMultipleValue(Action`1<RegistryTraceData> value);
    public void add_RegistrySetInformation(Action`1<RegistryTraceData> value);
    public void remove_RegistrySetInformation(Action`1<RegistryTraceData> value);
    public void add_RegistryFlush(Action`1<RegistryTraceData> value);
    public void remove_RegistryFlush(Action`1<RegistryTraceData> value);
    public void add_RegistryKCBCreate(Action`1<RegistryTraceData> value);
    public void remove_RegistryKCBCreate(Action`1<RegistryTraceData> value);
    public void add_RegistryKCBDelete(Action`1<RegistryTraceData> value);
    public void remove_RegistryKCBDelete(Action`1<RegistryTraceData> value);
    public void add_RegistryKCBRundownBegin(Action`1<RegistryTraceData> value);
    public void remove_RegistryKCBRundownBegin(Action`1<RegistryTraceData> value);
    public void add_RegistryKCBRundownEnd(Action`1<RegistryTraceData> value);
    public void remove_RegistryKCBRundownEnd(Action`1<RegistryTraceData> value);
    public void add_RegistryVirtualize(Action`1<RegistryTraceData> value);
    public void remove_RegistryVirtualize(Action`1<RegistryTraceData> value);
    public void add_RegistryClose(Action`1<RegistryTraceData> value);
    public void remove_RegistryClose(Action`1<RegistryTraceData> value);
    public void add_SplitIoVolMgr(Action`1<SplitIoInfoTraceData> value);
    public void remove_SplitIoVolMgr(Action`1<SplitIoInfoTraceData> value);
    public void add_FileIOMapFile(Action`1<MapFileTraceData> value);
    public void remove_FileIOMapFile(Action`1<MapFileTraceData> value);
    public void add_FileIOUnmapFile(Action`1<MapFileTraceData> value);
    public void remove_FileIOUnmapFile(Action`1<MapFileTraceData> value);
    public void add_FileIOMapFileDCStart(Action`1<MapFileTraceData> value);
    public void remove_FileIOMapFileDCStart(Action`1<MapFileTraceData> value);
    public void add_FileIOMapFileDCStop(Action`1<MapFileTraceData> value);
    public void remove_FileIOMapFileDCStop(Action`1<MapFileTraceData> value);
    public void add_FileIOName(Action`1<FileIONameTraceData> value);
    public void remove_FileIOName(Action`1<FileIONameTraceData> value);
    public void add_FileIOFileCreate(Action`1<FileIONameTraceData> value);
    public void remove_FileIOFileCreate(Action`1<FileIONameTraceData> value);
    public void add_FileIOFileDelete(Action`1<FileIONameTraceData> value);
    public void remove_FileIOFileDelete(Action`1<FileIONameTraceData> value);
    public void add_FileIOFileRundown(Action`1<FileIONameTraceData> value);
    public void remove_FileIOFileRundown(Action`1<FileIONameTraceData> value);
    public void add_FileIOCreate(Action`1<FileIOCreateTraceData> value);
    public void remove_FileIOCreate(Action`1<FileIOCreateTraceData> value);
    public void add_FileIOCleanup(Action`1<FileIOSimpleOpTraceData> value);
    public void remove_FileIOCleanup(Action`1<FileIOSimpleOpTraceData> value);
    public void add_FileIOClose(Action`1<FileIOSimpleOpTraceData> value);
    public void remove_FileIOClose(Action`1<FileIOSimpleOpTraceData> value);
    public void add_FileIOFlush(Action`1<FileIOSimpleOpTraceData> value);
    public void remove_FileIOFlush(Action`1<FileIOSimpleOpTraceData> value);
    public void add_FileIORead(Action`1<FileIOReadWriteTraceData> value);
    public void remove_FileIORead(Action`1<FileIOReadWriteTraceData> value);
    public void add_FileIOWrite(Action`1<FileIOReadWriteTraceData> value);
    public void remove_FileIOWrite(Action`1<FileIOReadWriteTraceData> value);
    public void add_FileIOSetInfo(Action`1<FileIOInfoTraceData> value);
    public void remove_FileIOSetInfo(Action`1<FileIOInfoTraceData> value);
    public void add_FileIODelete(Action`1<FileIOInfoTraceData> value);
    public void remove_FileIODelete(Action`1<FileIOInfoTraceData> value);
    public void add_FileIORename(Action`1<FileIOInfoTraceData> value);
    public void remove_FileIORename(Action`1<FileIOInfoTraceData> value);
    public void add_FileIOQueryInfo(Action`1<FileIOInfoTraceData> value);
    public void remove_FileIOQueryInfo(Action`1<FileIOInfoTraceData> value);
    public void add_FileIOFSControl(Action`1<FileIOInfoTraceData> value);
    public void remove_FileIOFSControl(Action`1<FileIOInfoTraceData> value);
    public void add_FileIODirEnum(Action`1<FileIODirEnumTraceData> value);
    public void remove_FileIODirEnum(Action`1<FileIODirEnumTraceData> value);
    public void add_FileIODirNotify(Action`1<FileIODirEnumTraceData> value);
    public void remove_FileIODirNotify(Action`1<FileIODirEnumTraceData> value);
    public void add_FileIOOperationEnd(Action`1<FileIOOpEndTraceData> value);
    public void remove_FileIOOperationEnd(Action`1<FileIOOpEndTraceData> value);
    public void add_TcpIpSend(Action`1<TcpIpSendTraceData> value);
    public void remove_TcpIpSend(Action`1<TcpIpSendTraceData> value);
    public void add_TcpIpRecv(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpRecv(Action`1<TcpIpTraceData> value);
    public void add_TcpIpConnect(Action`1<TcpIpConnectTraceData> value);
    public void remove_TcpIpConnect(Action`1<TcpIpConnectTraceData> value);
    public void add_TcpIpDisconnect(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpDisconnect(Action`1<TcpIpTraceData> value);
    public void add_TcpIpRetransmit(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpRetransmit(Action`1<TcpIpTraceData> value);
    public void add_TcpIpAccept(Action`1<TcpIpConnectTraceData> value);
    public void remove_TcpIpAccept(Action`1<TcpIpConnectTraceData> value);
    public void add_TcpIpReconnect(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpReconnect(Action`1<TcpIpTraceData> value);
    public void add_TcpIpFail(Action`1<TcpIpFailTraceData> value);
    public void remove_TcpIpFail(Action`1<TcpIpFailTraceData> value);
    public void add_TcpIpTCPCopy(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpTCPCopy(Action`1<TcpIpTraceData> value);
    public void add_TcpIpARPCopy(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpARPCopy(Action`1<TcpIpTraceData> value);
    public void add_TcpIpFullACK(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpFullACK(Action`1<TcpIpTraceData> value);
    public void add_TcpIpPartACK(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpPartACK(Action`1<TcpIpTraceData> value);
    public void add_TcpIpDupACK(Action`1<TcpIpTraceData> value);
    public void remove_TcpIpDupACK(Action`1<TcpIpTraceData> value);
    public void add_TcpIpSendIPV6(Action`1<TcpIpV6SendTraceData> value);
    public void remove_TcpIpSendIPV6(Action`1<TcpIpV6SendTraceData> value);
    public void add_TcpIpRecvIPV6(Action`1<TcpIpV6TraceData> value);
    public void remove_TcpIpRecvIPV6(Action`1<TcpIpV6TraceData> value);
    public void add_TcpIpDisconnectIPV6(Action`1<TcpIpV6TraceData> value);
    public void remove_TcpIpDisconnectIPV6(Action`1<TcpIpV6TraceData> value);
    public void add_TcpIpRetransmitIPV6(Action`1<TcpIpV6TraceData> value);
    public void remove_TcpIpRetransmitIPV6(Action`1<TcpIpV6TraceData> value);
    public void add_TcpIpReconnectIPV6(Action`1<TcpIpV6TraceData> value);
    public void remove_TcpIpReconnectIPV6(Action`1<TcpIpV6TraceData> value);
    public void add_TcpIpTCPCopyIPV6(Action`1<TcpIpV6TraceData> value);
    public void remove_TcpIpTCPCopyIPV6(Action`1<TcpIpV6TraceData> value);
    public void add_TcpIpConnectIPV6(Action`1<TcpIpV6ConnectTraceData> value);
    public void remove_TcpIpConnectIPV6(Action`1<TcpIpV6ConnectTraceData> value);
    public void add_TcpIpAcceptIPV6(Action`1<TcpIpV6ConnectTraceData> value);
    public void remove_TcpIpAcceptIPV6(Action`1<TcpIpV6ConnectTraceData> value);
    public void add_UdpIpSend(Action`1<UdpIpTraceData> value);
    public void remove_UdpIpSend(Action`1<UdpIpTraceData> value);
    public void add_UdpIpRecv(Action`1<UdpIpTraceData> value);
    public void remove_UdpIpRecv(Action`1<UdpIpTraceData> value);
    public void add_UdpIpFail(Action`1<UdpIpFailTraceData> value);
    public void remove_UdpIpFail(Action`1<UdpIpFailTraceData> value);
    public void add_UdpIpSendIPV6(Action`1<UpdIpV6TraceData> value);
    public void remove_UdpIpSendIPV6(Action`1<UpdIpV6TraceData> value);
    public void add_UdpIpRecvIPV6(Action`1<UpdIpV6TraceData> value);
    public void remove_UdpIpRecvIPV6(Action`1<UpdIpV6TraceData> value);
    public void add_ImageGroup(Action`1<ImageLoadTraceData> value);
    public void remove_ImageGroup(Action`1<ImageLoadTraceData> value);
    public void add_ImageLoad(Action`1<ImageLoadTraceData> value);
    public void remove_ImageLoad(Action`1<ImageLoadTraceData> value);
    public void add_ImageLoadGroup(Action`1<ImageLoadTraceData> value);
    public void remove_ImageLoadGroup(Action`1<ImageLoadTraceData> value);
    public void add_ImageUnload(Action`1<ImageLoadTraceData> value);
    public void remove_ImageUnload(Action`1<ImageLoadTraceData> value);
    public void add_ImageUnloadGroup(Action`1<ImageLoadTraceData> value);
    public void remove_ImageUnloadGroup(Action`1<ImageLoadTraceData> value);
    public void add_ImageDCStart(Action`1<ImageLoadTraceData> value);
    public void remove_ImageDCStart(Action`1<ImageLoadTraceData> value);
    public void add_ImageDCStop(Action`1<ImageLoadTraceData> value);
    public void remove_ImageDCStop(Action`1<ImageLoadTraceData> value);
    public void add_MemoryTransitionFault(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryTransitionFault(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryDemandZeroFault(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryDemandZeroFault(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryCopyOnWrite(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryCopyOnWrite(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryGuardMemory(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryGuardMemory(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryHardMemory(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryHardMemory(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryAccessViolation(Action`1<MemoryPageFaultTraceData> value);
    public void remove_MemoryAccessViolation(Action`1<MemoryPageFaultTraceData> value);
    public void add_MemoryHardFault(Action`1<MemoryHardFaultTraceData> value);
    public void remove_MemoryHardFault(Action`1<MemoryHardFaultTraceData> value);
    public void add_MemoryHeapRangeRundown(Action`1<MemoryHeapRangeRundownTraceData> value);
    public void remove_MemoryHeapRangeRundown(Action`1<MemoryHeapRangeRundownTraceData> value);
    public void add_MemoryHeapRangeCreate(Action`1<MemoryHeapRangeCreateTraceData> value);
    public void remove_MemoryHeapRangeCreate(Action`1<MemoryHeapRangeCreateTraceData> value);
    public void add_MemoryHeapRangeReserve(Action`1<MemoryHeapRangeTraceData> value);
    public void remove_MemoryHeapRangeReserve(Action`1<MemoryHeapRangeTraceData> value);
    public void add_MemoryHeapRangeRelease(Action`1<MemoryHeapRangeTraceData> value);
    public void remove_MemoryHeapRangeRelease(Action`1<MemoryHeapRangeTraceData> value);
    public void add_MemoryHeapRangeDestroy(Action`1<MemoryHeapRangeDestroyTraceData> value);
    public void remove_MemoryHeapRangeDestroy(Action`1<MemoryHeapRangeDestroyTraceData> value);
    public void add_MemoryImageLoadBacked(Action`1<MemoryImageLoadBackedTraceData> value);
    public void remove_MemoryImageLoadBacked(Action`1<MemoryImageLoadBackedTraceData> value);
    public void add_MemoryInMemory(Action`1<MemoryPageAccessTraceData> value);
    public void remove_MemoryInMemory(Action`1<MemoryPageAccessTraceData> value);
    public void add_MemorySystemMemInfo(Action`1<MemorySystemMemInfoTraceData> value);
    public void remove_MemorySystemMemInfo(Action`1<MemorySystemMemInfoTraceData> value);
    public void add_MemoryInMemoryActive(Action`1<MemoryPageAccessTraceData> value);
    public void remove_MemoryInMemoryActive(Action`1<MemoryPageAccessTraceData> value);
    public void add_MemoryPageAccess(Action`1<MemoryPageAccessTraceData> value);
    public void remove_MemoryPageAccess(Action`1<MemoryPageAccessTraceData> value);
    public void add_MemoryProcessMemInfo(Action`1<MemoryProcessMemInfoTraceData> value);
    public void remove_MemoryProcessMemInfo(Action`1<MemoryProcessMemInfoTraceData> value);
    public void add_MemoryMemInfo(Action`1<MemInfoTraceData> value);
    public void remove_MemoryMemInfo(Action`1<MemInfoTraceData> value);
    public void add_MemoryPFMappedSectionCreate(Action`1<EmptyTraceData> value);
    public void remove_MemoryPFMappedSectionCreate(Action`1<EmptyTraceData> value);
    public void add_MemorySessionDCStop(Action`1<EmptyTraceData> value);
    public void remove_MemorySessionDCStop(Action`1<EmptyTraceData> value);
    public void add_MemoryPFMappedSectionDelete(Action`1<EmptyTraceData> value);
    public void remove_MemoryPFMappedSectionDelete(Action`1<EmptyTraceData> value);
    public void add_MemoryInMemoryStoreFault(Action`1<EmptyTraceData> value);
    public void remove_MemoryInMemoryStoreFault(Action`1<EmptyTraceData> value);
    public void add_MemoryPageRelease(Action`1<EmptyTraceData> value);
    public void remove_MemoryPageRelease(Action`1<EmptyTraceData> value);
    public void add_MemoryRangeAccess(Action`1<EmptyTraceData> value);
    public void remove_MemoryRangeAccess(Action`1<EmptyTraceData> value);
    public void add_MemoryRangeRelease(Action`1<EmptyTraceData> value);
    public void remove_MemoryRangeRelease(Action`1<EmptyTraceData> value);
    public void add_MemoryCombine(Action`1<EmptyTraceData> value);
    public void remove_MemoryCombine(Action`1<EmptyTraceData> value);
    public void add_MemoryKernelMemUsage(Action`1<EmptyTraceData> value);
    public void remove_MemoryKernelMemUsage(Action`1<EmptyTraceData> value);
    public void add_MemoryMMStats(Action`1<EmptyTraceData> value);
    public void remove_MemoryMMStats(Action`1<EmptyTraceData> value);
    public void add_MemoryMemInfoSessionWS(Action`1<EmptyTraceData> value);
    public void remove_MemoryMemInfoSessionWS(Action`1<EmptyTraceData> value);
    public void add_MemoryVirtualRotate(Action`1<EmptyTraceData> value);
    public void remove_MemoryVirtualRotate(Action`1<EmptyTraceData> value);
    public void add_MemoryVirtualAllocDCStart(Action`1<EmptyTraceData> value);
    public void remove_MemoryVirtualAllocDCStart(Action`1<EmptyTraceData> value);
    public void add_MemoryVirtualAllocDCStop(Action`1<EmptyTraceData> value);
    public void remove_MemoryVirtualAllocDCStop(Action`1<EmptyTraceData> value);
    public void add_MemoryRemoveFromWS(Action`1<EmptyTraceData> value);
    public void remove_MemoryRemoveFromWS(Action`1<EmptyTraceData> value);
    public void add_MemoryWSSharableRundown(Action`1<EmptyTraceData> value);
    public void remove_MemoryWSSharableRundown(Action`1<EmptyTraceData> value);
    public void add_MemoryInMemoryActiveRundown(Action`1<EmptyTraceData> value);
    public void remove_MemoryInMemoryActiveRundown(Action`1<EmptyTraceData> value);
    public void add_PerfInfoSample(Action`1<SampledProfileTraceData> value);
    public void remove_PerfInfoSample(Action`1<SampledProfileTraceData> value);
    public void add_PerfInfoPMCSample(Action`1<PMCCounterProfTraceData> value);
    public void remove_PerfInfoPMCSample(Action`1<PMCCounterProfTraceData> value);
    public void add_LastBranchRecordingSample(Action`1<LastBranchRecordTraceData> value);
    public void remove_LastBranchRecordingSample(Action`1<LastBranchRecordTraceData> value);
    public void add_PerfInfoSetInterval(Action`1<SampledProfileIntervalTraceData> value);
    public void remove_PerfInfoSetInterval(Action`1<SampledProfileIntervalTraceData> value);
    public void add_PerfInfoCollectionStart(Action`1<SampledProfileIntervalTraceData> value);
    public void remove_PerfInfoCollectionStart(Action`1<SampledProfileIntervalTraceData> value);
    public void add_PerfInfoCollectionEnd(Action`1<SampledProfileIntervalTraceData> value);
    public void remove_PerfInfoCollectionEnd(Action`1<SampledProfileIntervalTraceData> value);
    public void add_PerfInfoSysClEnter(Action`1<SysCallEnterTraceData> value);
    public void remove_PerfInfoSysClEnter(Action`1<SysCallEnterTraceData> value);
    public void add_PerfInfoSysClExit(Action`1<SysCallExitTraceData> value);
    public void remove_PerfInfoSysClExit(Action`1<SysCallExitTraceData> value);
    public void add_PerfInfoISR(Action`1<ISRTraceData> value);
    public void remove_PerfInfoISR(Action`1<ISRTraceData> value);
    public void add_PerfInfoThreadedDPC(Action`1<DPCTraceData> value);
    public void remove_PerfInfoThreadedDPC(Action`1<DPCTraceData> value);
    public void add_PerfInfoDPC(Action`1<DPCTraceData> value);
    public void remove_PerfInfoDPC(Action`1<DPCTraceData> value);
    public void add_PerfInfoTimerDPC(Action`1<DPCTraceData> value);
    public void remove_PerfInfoTimerDPC(Action`1<DPCTraceData> value);
    public void add_PerfInfoDebuggerEnabled(Action`1<EmptyTraceData> value);
    public void remove_PerfInfoDebuggerEnabled(Action`1<EmptyTraceData> value);
    public void add_StackWalkStack(Action`1<StackWalkStackTraceData> value);
    public void remove_StackWalkStack(Action`1<StackWalkStackTraceData> value);
    public void add_StackWalkStackKeyKernel(Action`1<StackWalkRefTraceData> value);
    public void remove_StackWalkStackKeyKernel(Action`1<StackWalkRefTraceData> value);
    public void add_StackWalkStackKeyUser(Action`1<StackWalkRefTraceData> value);
    public void remove_StackWalkStackKeyUser(Action`1<StackWalkRefTraceData> value);
    public void add_StackWalkKeyDelete(Action`1<StackWalkDefTraceData> value);
    public void remove_StackWalkKeyDelete(Action`1<StackWalkDefTraceData> value);
    public void add_StackWalkKeyRundown(Action`1<StackWalkDefTraceData> value);
    public void remove_StackWalkKeyRundown(Action`1<StackWalkDefTraceData> value);
    public void add_ALPCSendMessage(Action`1<ALPCSendMessageTraceData> value);
    public void remove_ALPCSendMessage(Action`1<ALPCSendMessageTraceData> value);
    public void add_ALPCReceiveMessage(Action`1<ALPCReceiveMessageTraceData> value);
    public void remove_ALPCReceiveMessage(Action`1<ALPCReceiveMessageTraceData> value);
    public void add_ALPCWaitForReply(Action`1<ALPCWaitForReplyTraceData> value);
    public void remove_ALPCWaitForReply(Action`1<ALPCWaitForReplyTraceData> value);
    public void add_ALPCWaitForNewMessage(Action`1<ALPCWaitForNewMessageTraceData> value);
    public void remove_ALPCWaitForNewMessage(Action`1<ALPCWaitForNewMessageTraceData> value);
    public void add_ALPCUnwait(Action`1<ALPCUnwaitTraceData> value);
    public void remove_ALPCUnwait(Action`1<ALPCUnwaitTraceData> value);
    public void add_LostEvent(Action`1<EmptyTraceData> value);
    public void remove_LostEvent(Action`1<EmptyTraceData> value);
    public void add_SystemConfigCPU(Action`1<SystemConfigCPUTraceData> value);
    public void remove_SystemConfigCPU(Action`1<SystemConfigCPUTraceData> value);
    public void add_SystemConfigPhyDisk(Action`1<SystemConfigPhyDiskTraceData> value);
    public void remove_SystemConfigPhyDisk(Action`1<SystemConfigPhyDiskTraceData> value);
    public void add_SystemConfigLogDisk(Action`1<SystemConfigLogDiskTraceData> value);
    public void remove_SystemConfigLogDisk(Action`1<SystemConfigLogDiskTraceData> value);
    public void add_SystemConfigNIC(Action`1<SystemConfigNICTraceData> value);
    public void remove_SystemConfigNIC(Action`1<SystemConfigNICTraceData> value);
    public void add_SystemConfigVideo(Action`1<SystemConfigVideoTraceData> value);
    public void remove_SystemConfigVideo(Action`1<SystemConfigVideoTraceData> value);
    public void add_SystemConfigServices(Action`1<SystemConfigServicesTraceData> value);
    public void remove_SystemConfigServices(Action`1<SystemConfigServicesTraceData> value);
    public void add_SystemConfigPower(Action`1<SystemConfigPowerTraceData> value);
    public void remove_SystemConfigPower(Action`1<SystemConfigPowerTraceData> value);
    public void add_SystemConfigIRQ(Action`1<SystemConfigIRQTraceData> value);
    public void remove_SystemConfigIRQ(Action`1<SystemConfigIRQTraceData> value);
    public void add_SystemConfigPnP(Action`1<SystemConfigPnPTraceData> value);
    public void remove_SystemConfigPnP(Action`1<SystemConfigPnPTraceData> value);
    public void add_SystemConfigNetwork(Action`1<SystemConfigNetworkTraceData> value);
    public void remove_SystemConfigNetwork(Action`1<SystemConfigNetworkTraceData> value);
    public void add_SystemConfigIDEChannel(Action`1<SystemConfigIDEChannelTraceData> value);
    public void remove_SystemConfigIDEChannel(Action`1<SystemConfigIDEChannelTraceData> value);
    public void add_VirtualMemAlloc(Action`1<VirtualAllocTraceData> value);
    public void remove_VirtualMemAlloc(Action`1<VirtualAllocTraceData> value);
    public void add_VirtualMemFree(Action`1<VirtualAllocTraceData> value);
    public void remove_VirtualMemFree(Action`1<VirtualAllocTraceData> value);
    public void add_DispatcherReadyThread(Action`1<DispatcherReadyThreadTraceData> value);
    public void remove_DispatcherReadyThread(Action`1<DispatcherReadyThreadTraceData> value);
    public void add_ObjectCreateHandle(Action`1<ObjectHandleTraceData> value);
    public void remove_ObjectCreateHandle(Action`1<ObjectHandleTraceData> value);
    public void add_ObjectCloseHandle(Action`1<ObjectHandleTraceData> value);
    public void remove_ObjectCloseHandle(Action`1<ObjectHandleTraceData> value);
    public void add_ObjectDuplicateHandle(Action`1<ObjectDuplicateHandleTraceData> value);
    public void remove_ObjectDuplicateHandle(Action`1<ObjectDuplicateHandleTraceData> value);
    public void add_ObjectHandleDCEnd(Action`1<ObjectNameTraceData> value);
    public void remove_ObjectHandleDCEnd(Action`1<ObjectNameTraceData> value);
    public void add_ObjectTypeDCEnd(Action`1<ObjectTypeNameTraceData> value);
    public void remove_ObjectTypeDCEnd(Action`1<ObjectTypeNameTraceData> value);
    public void add_PerfInfoMark(Action`1<StringTraceData> value);
    public void remove_PerfInfoMark(Action`1<StringTraceData> value);
    public void add_SysConfigBuildInfo(Action`1<BuildInfoTraceData> value);
    public void remove_SysConfigBuildInfo(Action`1<BuildInfoTraceData> value);
    public void add_SysConfigVolumeMapping(Action`1<VolumeMappingTraceData> value);
    public void remove_SysConfigVolumeMapping(Action`1<VolumeMappingTraceData> value);
    public void add_SysConfigUnknownVolume(Action`1<StringTraceData> value);
    public void remove_SysConfigUnknownVolume(Action`1<StringTraceData> value);
    public void add_SysConfigSystemPaths(Action`1<SystemPathsTraceData> value);
    public void remove_SysConfigSystemPaths(Action`1<SystemPathsTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private static ParserTrackingOptions DefaultOptionsForSource(TraceEventSource source);
    internal KernelTraceEventParserState get_State();
}
internal class Microsoft.Diagnostics.Tracing.Parsers.KernelTraceEventParserState : object {
    private DeferedRegion lazyFileIDToName;
    internal DeferedRegion lazyDiskEventTimeStamp;
    internal KernelToUserDriveMapping driveMapping;
    private HistoryDictionary`2<ulong, string> _fileIDToName;
    private HistoryDictionary`2<int, int> _threadIDtoProcessID;
    internal Dictionary`2<int, string> _objectTypeToName;
    private GrowableArray`1<DiskIOTime> _diskEventTimeStamp;
    internal int lastDiskEventIdx;
    internal HistoryDictionary`2<int, int> threadIDtoProcessIDRundown;
    internal ParserTrackingOptions callBacksSet;
    internal HistoryDictionary`2<ulong, string> fileIDToName { get; }
    internal HistoryDictionary`2<int, int> threadIDtoProcessID { get; }
    internal GrowableArray`1<DiskIOTime> diskEventTimeStamp { get; }
    internal string FileIDToName(ulong fileKey, long timeQPC);
    internal string FileIDToName(ulong fileKey, ulong fileObject, long timeQPC);
    internal string ObjectToName(ulong objectAddress, long timeQPC);
    internal string ObjectTypeToName(int objectType);
    internal int ThreadIDToProcessID(int threadID, long timeQPC);
    internal string KernelToUser(string kernelName);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    internal HistoryDictionary`2<ulong, string> get_fileIDToName();
    internal HistoryDictionary`2<int, int> get_threadIDtoProcessID();
    internal GrowableArray`1<DiskIOTime> get_diskEventTimeStamp();
}
public class Microsoft.Diagnostics.Tracing.Parsers.LinuxKernel.ProcessStartTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProcessStartTraceData> Action;
    public string FileName { get; }
    public int PayloadThreadID { get; }
    public int OldThreadID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProcessStartTraceData(Action`1<ProcessStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FileName();
    public int get_PayloadThreadID();
    public int get_OldThreadID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProcessStartTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProcessStartTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.LinuxKernel.ProcessStopTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ProcessStopTraceData> Action;
    public string Command { get; }
    public int PayloadThreadID { get; }
    public int ThreadPriority { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ProcessStopTraceData(Action`1<ProcessStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Command();
    public int get_PayloadThreadID();
    public int get_ThreadPriority();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ProcessStopTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ProcessStopTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.LinuxKernelEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    internal static Guid ProcessTaskGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public LinuxKernelEventParser(TraceEventSource source);
    private static LinuxKernelEventParser();
    public void add_ProcessStart(Action`1<ProcessStartTraceData> value);
    public void remove_ProcessStart(Action`1<ProcessStartTraceData> value);
    public void add_ProcessStop(Action`1<ProcessStopTraceData> value);
    public void remove_ProcessStop(Action`1<ProcessStopTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
internal class Microsoft.Diagnostics.Tracing.Parsers.MapKey : object {
    public Guid ProviderID;
    public string MapName;
    public MapKey(Guid providerID, string mapName);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MapKey other);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter.AMFilter_CacheRemoveArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AMFilter_CacheRemoveArgsTraceData> Action;
    public long File_ID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AMFilter_CacheRemoveArgsTraceData(Action`1<AMFilter_CacheRemoveArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_File_ID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter.AMFilter_FileScanArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AMFilter_FileScanArgsTraceData> Action;
    public string FileName { get; }
    public string Reason { get; }
    public long IoStatusBlockForNewFile { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AMFilter_FileScanArgsTraceData(Action`1<AMFilter_FileScanArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FileName();
    public string get_Reason();
    public long get_IoStatusBlockForNewFile();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AMFilter_FileScanArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AMFilter_FileScanArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter.AMFilter_ProcessContextArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AMFilter_ProcessContextArgsTraceData> Action;
    public int Pid { get; }
    public string Reason { get; }
    public int Flags { get; }
    public int ProcessFilterFlags { get; }
    public string PayloadProcessName { get; }
    public long VmHardenType { get; }
    public long ExemptVmHardenedTypes { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AMFilter_ProcessContextArgsTraceData(Action`1<AMFilter_ProcessContextArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Pid();
    public string get_Reason();
    public int get_Flags();
    public int get_ProcessFilterFlags();
    public string get_PayloadProcessName();
    public long get_VmHardenType();
    public long get_ExemptVmHardenedTypes();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AMFilter_ProcessContextArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AMFilter_ProcessContextArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter.AMFilter_TrustedProcessArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AMFilter_TrustedProcessArgsTraceData> Action;
    public int Pid { get; }
    public string Reason { get; }
    public int Trusted { get; }
    public int TotalTrusted { get; }
    public int TotalUntrusted { get; }
    public string Path { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AMFilter_TrustedProcessArgsTraceData(Action`1<AMFilter_TrustedProcessArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Pid();
    public string get_Reason();
    public int get_Trusted();
    public int get_TotalTrusted();
    public int get_TotalUntrusted();
    public string get_Path();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<AMFilter_TrustedProcessArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<AMFilter_TrustedProcessArgsTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilterTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public MicrosoftAntimalwareAMFilterTraceEventParser(TraceEventSource source);
    private static MicrosoftAntimalwareAMFilterTraceEventParser();
    public void add_AMFilter_CacheAdd(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void remove_AMFilter_CacheAdd(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void add_AMFilter_CacheFlush(Action`1<EmptyTraceData> value);
    public void remove_AMFilter_CacheFlush(Action`1<EmptyTraceData> value);
    public void add_AMFilter_CacheHit(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void remove_AMFilter_CacheHit(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void add_AMFilter_CacheMiss(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void remove_AMFilter_CacheMiss(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void add_AMFilter_CacheRemove(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void remove_AMFilter_CacheRemove(Action`1<AMFilter_CacheRemoveArgsTraceData> value);
    public void add_AMFilter_FileScan(Action`1<AMFilter_FileScanArgsTraceData> value);
    public void remove_AMFilter_FileScan(Action`1<AMFilter_FileScanArgsTraceData> value);
    public void add_AMFilter_ProcessContext(Action`1<AMFilter_ProcessContextArgsTraceData> value);
    public void remove_AMFilter_ProcessContext(Action`1<AMFilter_ProcessContextArgsTraceData> value);
    public void add_AMFilter_SeqReadFlag(Action`1<EmptyTraceData> value);
    public void remove_AMFilter_SeqReadFlag(Action`1<EmptyTraceData> value);
    public void add_AMFilter_TrustedProcess(Action`1<AMFilter_TrustedProcessArgsTraceData> value);
    public void remove_AMFilter_TrustedProcess(Action`1<AMFilter_TrustedProcessArgsTraceData> value);
    protected virtual string GetProviderName();
    private static AMFilter_CacheRemoveArgsTraceData AMFilter_CacheAddTemplate(Action`1<AMFilter_CacheRemoveArgsTraceData> action);
    private static EmptyTraceData AMFilter_CacheFlushTemplate(Action`1<EmptyTraceData> action);
    private static AMFilter_CacheRemoveArgsTraceData AMFilter_CacheHitTemplate(Action`1<AMFilter_CacheRemoveArgsTraceData> action);
    private static AMFilter_CacheRemoveArgsTraceData AMFilter_CacheMissTemplate(Action`1<AMFilter_CacheRemoveArgsTraceData> action);
    private static AMFilter_CacheRemoveArgsTraceData AMFilter_CacheRemoveTemplate(Action`1<AMFilter_CacheRemoveArgsTraceData> action);
    private static AMFilter_FileScanArgsTraceData AMFilter_FileScanTemplate(Action`1<AMFilter_FileScanArgsTraceData> action);
    private static AMFilter_ProcessContextArgsTraceData AMFilter_ProcessContextTemplate(Action`1<AMFilter_ProcessContextArgsTraceData> action);
    private static EmptyTraceData AMFilter_SeqReadFlagTemplate(Action`1<EmptyTraceData> action);
    private static AMFilter_TrustedProcessArgsTraceData AMFilter_TrustedProcessTemplate(Action`1<AMFilter_TrustedProcessArgsTraceData> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private void RegisterTemplate(TraceEvent template);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmBootRecordChangeArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> Action;
    public int PID { get; }
    public int RecordType { get; }
    public string ImagePath { get; }
    public string Path { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmBootRecordChangeArgsTraceData(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public int get_RecordType();
    public string get_ImagePath();
    public string get_Path();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmDetectionArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmDetectionArgsTraceData> Action;
    public int PID { get; }
    public Guid GUID { get; }
    public int Type { get; }
    public string Name { get; }
    public long SignatureId { get; }
    public string ImagePath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmDetectionArgsTraceData(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public Guid get_GUID();
    public int get_Type();
    public string get_Name();
    public long get_SignatureId();
    public string get_ImagePath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmDocumentOpenArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> Action;
    public int PID { get; }
    public string ImageName { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmDocumentOpenArgsTraceData(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_ImageName();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmDriverLoadArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> Action;
    public int PID { get; }
    public string ImagePath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmDriverLoadArgsTraceData(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_ImagePath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmEtwArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmEtwArgsTraceData> Action;
    public int PID { get; }
    public string PayloadChannel { get; }
    public int EventId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmEtwArgsTraceData(Action`1<BehaviorMonitoringBmEtwArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_PayloadChannel();
    public int get_EventId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmEtwArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmEtwArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmFileCreateArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> Action;
    public int PID { get; }
    public string FileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmFileCreateArgsTraceData(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_FileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmFileHardLinkArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> Action;
    public int PID { get; }
    public string FileName { get; }
    public string FileHardLinkName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmFileHardLinkArgsTraceData(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_FileName();
    public string get_FileHardLinkName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmFileRenameArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> Action;
    public int PID { get; }
    public string FileName { get; }
    public string OldFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmFileRenameArgsTraceData(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_FileName();
    public string get_OldFileName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmFolderCreateArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> Action;
    public int PID { get; }
    public string FolderName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmFolderCreateArgsTraceData(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_FolderName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmNetworkConnectArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> Action;
    public int PID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmNetworkConnectArgsTraceData(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmNetworkDetectionArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> Action;
    public int PID { get; }
    public long DetectionId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmNetworkDetectionArgsTraceData(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public long get_DetectionId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmOpenProcessArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> Action;
    public int PID { get; }
    public int TargetPID { get; }
    public int AccessMask { get; }
    public bool WasHardened { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmOpenProcessArgsTraceData(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public int get_TargetPID();
    public int get_AccessMask();
    public bool get_WasHardened();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmProcessCreateArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> Action;
    public string BasePath { get; }
    public string CommandLine { get; }
    public int PID { get; }
    public int ParentPID { get; }
    public int Flags { get; }
    public int IntegrityLevel { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmProcessCreateArgsTraceData(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_BasePath();
    public string get_CommandLine();
    public int get_PID();
    public int get_ParentPID();
    public int get_Flags();
    public int get_IntegrityLevel();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmProcessStartArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> Action;
    public int PID { get; }
    public int PPID { get; }
    public string ImagePath { get; }
    public int Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmProcessStartArgsTraceData(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public int get_PPID();
    public string get_ImagePath();
    public int get_Flags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmProcessTaintingArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> Action;
    public long TaintReason { get; }
    public string ReasonImagePath { get; }
    public string ProcessImagePath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmProcessTaintingArgsTraceData(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_TaintReason();
    public string get_ReasonImagePath();
    public string get_ProcessImagePath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmRegistryKeyCreateArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> Action;
    public int PID { get; }
    public string KeyPath { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_KeyPath();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmRegistryValueSetArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> Action;
    public int PID { get; }
    public string KeyPath { get; }
    public string ValueName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmRegistryValueSetArgsTraceData(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_KeyPath();
    public string get_ValueName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmRemoteThreadCreateArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> Action;
    public int PID { get; }
    public int TPID { get; }
    public int TTID { get; }
    public string ImageName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmRemoteThreadCreateArgsTraceData(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public int get_TPID();
    public int get_TTID();
    public string get_ImageName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringBmScavengerTaskArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> Action;
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringBmScavengerTaskArgsTraceData(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.BehaviorMonitoringProcessMonitorFlagsArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> Action;
    public int PID { get; }
    public string filepath { get; }
    public int flags { get; }
    public long flags2low { get; }
    public long flags2high { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal BehaviorMonitoringProcessMonitorFlagsArgsTraceData(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PID();
    public string get_filepath();
    public int get_flags();
    public long get_flags2low();
    public long get_flags2high();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.CacheCacheLookupArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CacheCacheLookupArgsTraceData> Action;
    public string FileName { get; }
    public string CacheName { get; }
    public string Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CacheCacheLookupArgsTraceData(Action`1<CacheCacheLookupArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FileName();
    public string get_CacheName();
    public string get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CacheCacheLookupArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CacheCacheLookupArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.CacheMOACAddArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CacheMOACAddArgsTraceData> Action;
    public int ScanSource { get; }
    public int EventType { get; }
    public int Classification { get; }
    public string Info { get; }
    public string FileName { get; }
    public int FileID { get; }
    public int FileUSN { get; }
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CacheMOACAddArgsTraceData(Action`1<CacheMOACAddArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ScanSource();
    public int get_EventType();
    public int get_Classification();
    public string get_Info();
    public string get_FileName();
    public int get_FileID();
    public int get_FileUSN();
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<CacheMOACAddArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<CacheMOACAddArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> Action;
    public string Message { get; }
    public string Name { get; }
    public long Data { get; }
    public bool StartStop { get; }
    public DateTime ThreadTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Message();
    public string get_Name();
    public long get_Data();
    public bool get_StartStop();
    public DateTime get_ThreadTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> Action;
    public string Message { get; }
    public string Name { get; }
    public long Data { get; }
    public bool StartStop { get; }
    public DateTime ThreadTime { get; }
    public long DeltaCPU { get; }
    public long DeltaWall { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Message();
    public string get_Name();
    public long get_Data();
    public bool get_StartStop();
    public DateTime get_ThreadTime();
    public long get_DeltaCPU();
    public long get_DeltaWall();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.Message59ArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Message59ArgsTraceData> Action;
    public string VName { get; }
    public long SigSeq { get; }
    public string SigSha { get; }
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Message59ArgsTraceData(Action`1<Message59ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_VName();
    public long get_SigSeq();
    public string get_SigSha();
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Message59ArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Message59ArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.Message68ArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Message68ArgsTraceData> Action;
    public string SigName { get; }
    public long SigSeq { get; }
    public string SigSha { get; }
    public string SigTypeName { get; }
    public long Time { get; }
    public long Limit { get; }
    public string FileName { get; }
    public string VPath { get; }
    public string FileSha1 { get; }
    public int PartialCRC1 { get; }
    public int PartialCRC2 { get; }
    public int PartialCRC3 { get; }
    public long FileSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Message68ArgsTraceData(Action`1<Message68ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_SigName();
    public long get_SigSeq();
    public string get_SigSha();
    public string get_SigTypeName();
    public long get_Time();
    public long get_Limit();
    public string get_FileName();
    public string get_VPath();
    public string get_FileSha1();
    public int get_PartialCRC1();
    public int get_PartialCRC2();
    public int get_PartialCRC3();
    public long get_FileSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Message68ArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Message68ArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.Message69ArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Message69ArgsTraceData> Action;
    public string Guid { get; }
    public long VolumeSize { get; }
    public int Attributes { get; }
    public int FilesCount { get; }
    public string FileGuidsArray { get; }
    public string FileSizeArray { get; }
    public string CompressedFileSizeArray { get; }
    public string FileNameArray { get; }
    public string FileAttributesArray { get; }
    public string EfiFileTypeArray { get; }
    public string FileSha1Array { get; }
    public string SmbiosAttributes { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Message69ArgsTraceData(Action`1<Message69ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Guid();
    public long get_VolumeSize();
    public int get_Attributes();
    public int get_FilesCount();
    public string get_FileGuidsArray();
    public string get_FileSizeArray();
    public string get_CompressedFileSizeArray();
    public string get_FileNameArray();
    public string get_FileAttributesArray();
    public string get_EfiFileTypeArray();
    public string get_FileSha1Array();
    public string get_SmbiosAttributes();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<Message69ArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<Message69ArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.MessageArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MessageArgsTraceData> Action;
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MessageArgsTraceData(Action`1<MessageArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MessageArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MessageArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.MessageUfsScanStart32Args_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MessageUfsScanStart32Args_V1TraceData> Action;
    public string FilePath { get; }
    public int PID { get; }
    public DateTime ThreadTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MessageUfsScanStart32Args_V1TraceData(Action`1<MessageUfsScanStart32Args_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FilePath();
    public int get_PID();
    public DateTime get_ThreadTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.MessageUfsScanStartArgs_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MessageUfsScanStartArgs_V1TraceData> Action;
    public string FilePath { get; }
    public DateTime ThreadTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MessageUfsScanStartArgs_V1TraceData(Action`1<MessageUfsScanStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_FilePath();
    public DateTime get_ThreadTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.MetaStoreTaskMetaStoreActionArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> Action;
    public string action { get; }
    public int vault { get; }
    public long key { get; }
    public int result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MetaStoreTaskMetaStoreActionArgsTraceData(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_action();
    public int get_vault();
    public long get_key();
    public int get_result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.MetaStoreTaskMetaStoreMaintenanceArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> Action;
    public int vault { get; }
    public long records { get; }
    public int result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MetaStoreTaskMetaStoreMaintenanceArgsTraceData(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_vault();
    public long get_records();
    public int get_result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.PersistedStoreTaskPersistedStoreActionArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> Action;
    public string action { get; }
    public long key { get; }
    public string filename { get; }
    public int result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PersistedStoreTaskPersistedStoreActionArgsTraceData(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_action();
    public long get_key();
    public string get_filename();
    public int get_result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> Action;
    public long key { get; }
    public string filename { get; }
    public long parentKey { get; }
    public int result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_key();
    public string get_filename();
    public long get_parentKey();
    public int get_result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> Action;
    public int utilization { get; }
    public int result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_utilization();
    public int get_result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.ScanrequestStartArgs_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ScanrequestStartArgs_V1TraceData> Action;
    public int Id { get; }
    public string Type { get; }
    public int Flags { get; }
    public int ScanSource { get; }
    public int ResourceCount { get; }
    public string FirstResourceType { get; }
    public string FirstResourcePath { get; }
    public DateTime ThreadTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ScanrequestStartArgs_V1TraceData(Action`1<ScanrequestStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public string get_Type();
    public int get_Flags();
    public int get_ScanSource();
    public int get_ResourceCount();
    public string get_FirstResourceType();
    public string get_FirstResourcePath();
    public DateTime get_ThreadTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ScanrequestStartArgs_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ScanrequestStartArgs_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.SkippedfileArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<SkippedfileArgsTraceData> Action;
    public string Path { get; }
    public string Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal SkippedfileArgsTraceData(Action`1<SkippedfileArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Path();
    public string get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<SkippedfileArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<SkippedfileArgsTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.StreamscanrequestStartArgs_V1TraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StreamscanrequestStartArgs_V1TraceData> Action;
    public int Id { get; }
    public string Path { get; }
    public string Process { get; }
    public int Reason { get; }
    public DateTime ThreadTime { get; }
    public int PID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal StreamscanrequestStartArgs_V1TraceData(Action`1<StreamscanrequestStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public string get_Path();
    public string get_Process();
    public int get_Reason();
    public DateTime get_ThreadTime();
    public int get_PID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine.VersionsArgsTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<VersionsArgsTraceData> Action;
    public string EngineVersion { get; }
    public string AVVersion { get; }
    public string ASVersion { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal VersionsArgsTraceData(Action`1<VersionsArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_EngineVersion();
    public string get_AVVersion();
    public string get_ASVersion();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<VersionsArgsTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<VersionsArgsTraceData> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngineTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public MicrosoftAntimalwareEngineTraceEventParser(TraceEventSource source);
    private static MicrosoftAntimalwareEngineTraceEventParser();
    public void add_BehaviorMonitoringBmBootRecordChange(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> value);
    public void remove_BehaviorMonitoringBmBootRecordChange(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> value);
    public void add_BehaviorMonitoringBmDetection(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> value);
    public void remove_BehaviorMonitoringBmDetection(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> value);
    public void add_BehaviorMonitoringBmDocumentOpen(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> value);
    public void remove_BehaviorMonitoringBmDocumentOpen(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> value);
    public void add_BehaviorMonitoringBmDriverLoad(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
    public void remove_BehaviorMonitoringBmDriverLoad(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
    public void add_BehaviorMonitoringBmEtw(Action`1<BehaviorMonitoringBmEtwArgsTraceData> value);
    public void remove_BehaviorMonitoringBmEtw(Action`1<BehaviorMonitoringBmEtwArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileChange(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileChange(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileChangeEx(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileChangeEx(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileCreate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileCreate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileCreateEx(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileCreateEx(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileDelete(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileDelete(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileHardLink(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileHardLink(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> value);
    public void add_BehaviorMonitoringBmFileRename(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFileRename(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
    public void add_BehaviorMonitoringBmFolderCreate(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFolderCreate(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFolderEnum(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFolderEnum(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmFolderRename(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
    public void remove_BehaviorMonitoringBmFolderRename(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> value);
    public void add_BehaviorMonitoringBmModuleLoad(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
    public void remove_BehaviorMonitoringBmModuleLoad(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> value);
    public void add_BehaviorMonitoringBmNetworkAccept(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void remove_BehaviorMonitoringBmNetworkAccept(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void add_BehaviorMonitoringBmNetworkConnect(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void remove_BehaviorMonitoringBmNetworkConnect(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void add_BehaviorMonitoringBmNetworkData(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void remove_BehaviorMonitoringBmNetworkData(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void add_BehaviorMonitoringBmNetworkDetection(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> value);
    public void remove_BehaviorMonitoringBmNetworkDetection(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> value);
    public void add_BehaviorMonitoringBmNetworkListen(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void remove_BehaviorMonitoringBmNetworkListen(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void add_BehaviorMonitoringBmOpenProcess(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> value);
    public void remove_BehaviorMonitoringBmOpenProcess(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> value);
    public void add_BehaviorMonitoringBmProcessCreate(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmProcessCreate(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmProcessStart(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> value);
    public void remove_BehaviorMonitoringBmProcessStart(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> value);
    public void add_BehaviorMonitoringBmProcessTainting(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> value);
    public void remove_BehaviorMonitoringBmProcessTainting(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> value);
    public void add_BehaviorMonitoringBmProcessTerminate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void remove_BehaviorMonitoringBmProcessTerminate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockCreate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockCreate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockDelete(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockDelete(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockRename(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockRename(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockReplace(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockReplace(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockRestore(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockRestore(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryBlockSet(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryBlockSet(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryKeyCreate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryKeyCreate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryKeyDelete(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryKeyDelete(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryKeyRename(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryKeyRename(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryReplace(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryReplace(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryRestore(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryRestore(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryValueDelete(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryValueDelete(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
    public void add_BehaviorMonitoringBmRegistryValueSet(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRegistryValueSet(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> value);
    public void add_BehaviorMonitoringBmRemoteThreadCreate(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> value);
    public void remove_BehaviorMonitoringBmRemoteThreadCreate(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> value);
    public void add_BehaviorMonitoringBmScavengerTask(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> value);
    public void remove_BehaviorMonitoringBmScavengerTask(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> value);
    public void add_BehaviorMonitoringProcessMonitorFlags(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> value);
    public void remove_BehaviorMonitoringProcessMonitorFlags(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> value);
    public void add_CacheAdd(Action`1<CacheCacheLookupArgsTraceData> value);
    public void remove_CacheAdd(Action`1<CacheCacheLookupArgsTraceData> value);
    public void add_CacheLookup(Action`1<CacheCacheLookupArgsTraceData> value);
    public void remove_CacheLookup(Action`1<CacheCacheLookupArgsTraceData> value);
    public void add_CacheMOACAdd(Action`1<CacheMOACAddArgsTraceData> value);
    public void remove_CacheMOACAdd(Action`1<CacheMOACAddArgsTraceData> value);
    public void add_CacheMOACLookup(Action`1<CacheMOACAddArgsTraceData> value);
    public void remove_CacheMOACLookup(Action`1<CacheMOACAddArgsTraceData> value);
    public void add_CacheMOACRevoke(Action`1<CacheMOACAddArgsTraceData> value);
    public void remove_CacheMOACRevoke(Action`1<CacheMOACAddArgsTraceData> value);
    public void add_ExpensiveOperationTaskExpensiveOperationBegin(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> value);
    public void remove_ExpensiveOperationTaskExpensiveOperationBegin(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> value);
    public void add_ExpensiveOperationTaskExpensiveOperationEnd(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> value);
    public void remove_ExpensiveOperationTaskExpensiveOperationEnd(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> value);
    public void add_Message(Action`1<MessageArgsTraceData> value);
    public void remove_Message(Action`1<MessageArgsTraceData> value);
    public void add_Message59(Action`1<Message59ArgsTraceData> value);
    public void remove_Message59(Action`1<Message59ArgsTraceData> value);
    public void add_Message68(Action`1<Message68ArgsTraceData> value);
    public void remove_Message68(Action`1<Message68ArgsTraceData> value);
    public void add_Message69(Action`1<Message69ArgsTraceData> value);
    public void remove_Message69(Action`1<Message69ArgsTraceData> value);
    public void add_MessageUfsScanStart(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
    public void remove_MessageUfsScanStart(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
    public void add_MessageUfsScanStart32(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
    public void remove_MessageUfsScanStart32(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
    public void add_MessageUfsScanStop(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
    public void remove_MessageUfsScanStop(Action`1<MessageUfsScanStartArgs_V1TraceData> value);
    public void add_MessageUfsScanStop33(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
    public void remove_MessageUfsScanStop33(Action`1<MessageUfsScanStart32Args_V1TraceData> value);
    public void add_MetaStoreTaskMetaStoreAction(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> value);
    public void remove_MetaStoreTaskMetaStoreAction(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> value);
    public void add_MetaStoreTaskMetaStoreMaintenance(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> value);
    public void remove_MetaStoreTaskMetaStoreMaintenance(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> value);
    public void add_PersistedStoreTaskPersistedStoreAction(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> value);
    public void remove_PersistedStoreTaskPersistedStoreAction(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> value);
    public void add_PersistedStoreTaskPersistedStoreAnalyzeFile(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> value);
    public void remove_PersistedStoreTaskPersistedStoreAnalyzeFile(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> value);
    public void add_PersistedStoreTaskPersistedStoreMaintenance(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> value);
    public void remove_PersistedStoreTaskPersistedStoreMaintenance(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> value);
    public void add_ScanrequestStart(Action`1<ScanrequestStartArgs_V1TraceData> value);
    public void remove_ScanrequestStart(Action`1<ScanrequestStartArgs_V1TraceData> value);
    public void add_ScanrequestStop(Action`1<ScanrequestStartArgs_V1TraceData> value);
    public void remove_ScanrequestStop(Action`1<ScanrequestStartArgs_V1TraceData> value);
    public void add_Skippedfile(Action`1<SkippedfileArgsTraceData> value);
    public void remove_Skippedfile(Action`1<SkippedfileArgsTraceData> value);
    public void add_StreamscanrequestStart(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
    public void remove_StreamscanrequestStart(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
    public void add_StreamscanrequestStop(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
    public void remove_StreamscanrequestStop(Action`1<StreamscanrequestStartArgs_V1TraceData> value);
    public void add_Versions(Action`1<VersionsArgsTraceData> value);
    public void remove_Versions(Action`1<VersionsArgsTraceData> value);
    protected virtual string GetProviderName();
    private static BehaviorMonitoringBmBootRecordChangeArgsTraceData BehaviorMonitoringBmBootRecordChangeTemplate(Action`1<BehaviorMonitoringBmBootRecordChangeArgsTraceData> action);
    private static BehaviorMonitoringBmDetectionArgsTraceData BehaviorMonitoringBmDetectionTemplate(Action`1<BehaviorMonitoringBmDetectionArgsTraceData> action);
    private static BehaviorMonitoringBmDocumentOpenArgsTraceData BehaviorMonitoringBmDocumentOpenTemplate(Action`1<BehaviorMonitoringBmDocumentOpenArgsTraceData> action);
    private static BehaviorMonitoringBmDriverLoadArgsTraceData BehaviorMonitoringBmDriverLoadTemplate(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> action);
    private static BehaviorMonitoringBmEtwArgsTraceData BehaviorMonitoringBmEtwTemplate(Action`1<BehaviorMonitoringBmEtwArgsTraceData> action);
    private static BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileChangeTemplate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileChangeExTemplate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileCreateTemplate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileCreateExTemplate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileDeleteTemplate(Action`1<BehaviorMonitoringBmFileCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileHardLinkArgsTraceData BehaviorMonitoringBmFileHardLinkTemplate(Action`1<BehaviorMonitoringBmFileHardLinkArgsTraceData> action);
    private static BehaviorMonitoringBmFileRenameArgsTraceData BehaviorMonitoringBmFileRenameTemplate(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> action);
    private static BehaviorMonitoringBmFolderCreateArgsTraceData BehaviorMonitoringBmFolderCreateTemplate(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFolderCreateArgsTraceData BehaviorMonitoringBmFolderEnumTemplate(Action`1<BehaviorMonitoringBmFolderCreateArgsTraceData> action);
    private static BehaviorMonitoringBmFileRenameArgsTraceData BehaviorMonitoringBmFolderRenameTemplate(Action`1<BehaviorMonitoringBmFileRenameArgsTraceData> action);
    private static BehaviorMonitoringBmDriverLoadArgsTraceData BehaviorMonitoringBmModuleLoadTemplate(Action`1<BehaviorMonitoringBmDriverLoadArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkAcceptTemplate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkConnectTemplate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkDataTemplate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkDetectionArgsTraceData BehaviorMonitoringBmNetworkDetectionTemplate(Action`1<BehaviorMonitoringBmNetworkDetectionArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkListenTemplate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action);
    private static BehaviorMonitoringBmOpenProcessArgsTraceData BehaviorMonitoringBmOpenProcessTemplate(Action`1<BehaviorMonitoringBmOpenProcessArgsTraceData> action);
    private static BehaviorMonitoringBmProcessCreateArgsTraceData BehaviorMonitoringBmProcessCreateTemplate(Action`1<BehaviorMonitoringBmProcessCreateArgsTraceData> action);
    private static BehaviorMonitoringBmProcessStartArgsTraceData BehaviorMonitoringBmProcessStartTemplate(Action`1<BehaviorMonitoringBmProcessStartArgsTraceData> action);
    private static BehaviorMonitoringBmProcessTaintingArgsTraceData BehaviorMonitoringBmProcessTaintingTemplate(Action`1<BehaviorMonitoringBmProcessTaintingArgsTraceData> action);
    private static BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmProcessTerminateTemplate(Action`1<BehaviorMonitoringBmNetworkConnectArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockCreateTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockDeleteTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockRenameTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockReplaceTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockRestoreTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockSetTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyCreateTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyDeleteTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyRenameTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryReplaceTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryRestoreTemplate(Action`1<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryValueSetArgsTraceData BehaviorMonitoringBmRegistryValueDeleteTemplate(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action);
    private static BehaviorMonitoringBmRegistryValueSetArgsTraceData BehaviorMonitoringBmRegistryValueSetTemplate(Action`1<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action);
    private static BehaviorMonitoringBmRemoteThreadCreateArgsTraceData BehaviorMonitoringBmRemoteThreadCreateTemplate(Action`1<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> action);
    private static BehaviorMonitoringBmScavengerTaskArgsTraceData BehaviorMonitoringBmScavengerTaskTemplate(Action`1<BehaviorMonitoringBmScavengerTaskArgsTraceData> action);
    private static BehaviorMonitoringProcessMonitorFlagsArgsTraceData BehaviorMonitoringProcessMonitorFlagsTemplate(Action`1<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> action);
    private static CacheCacheLookupArgsTraceData CacheAddTemplate(Action`1<CacheCacheLookupArgsTraceData> action);
    private static CacheCacheLookupArgsTraceData CacheLookupTemplate(Action`1<CacheCacheLookupArgsTraceData> action);
    private static CacheMOACAddArgsTraceData CacheMOACAddTemplate(Action`1<CacheMOACAddArgsTraceData> action);
    private static CacheMOACAddArgsTraceData CacheMOACLookupTemplate(Action`1<CacheMOACAddArgsTraceData> action);
    private static CacheMOACAddArgsTraceData CacheMOACRevokeTemplate(Action`1<CacheMOACAddArgsTraceData> action);
    private static ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData ExpensiveOperationTaskExpensiveOperationBeginTemplate(Action`1<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> action);
    private static ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData ExpensiveOperationTaskExpensiveOperationEndTemplate(Action`1<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> action);
    private static MessageArgsTraceData MessageTemplate(Action`1<MessageArgsTraceData> action);
    private static Message59ArgsTraceData Message59Template(Action`1<Message59ArgsTraceData> action);
    private static Message68ArgsTraceData Message68Template(Action`1<Message68ArgsTraceData> action);
    private static Message69ArgsTraceData Message69Template(Action`1<Message69ArgsTraceData> action);
    private static MessageUfsScanStartArgs_V1TraceData MessageUfsScanStartTemplate(Action`1<MessageUfsScanStartArgs_V1TraceData> action);
    private static MessageUfsScanStart32Args_V1TraceData MessageUfsScanStart32Template(Action`1<MessageUfsScanStart32Args_V1TraceData> action);
    private static MessageUfsScanStartArgs_V1TraceData MessageUfsScanStopTemplate(Action`1<MessageUfsScanStartArgs_V1TraceData> action);
    private static MessageUfsScanStart32Args_V1TraceData MessageUfsScanStop33Template(Action`1<MessageUfsScanStart32Args_V1TraceData> action);
    private static MetaStoreTaskMetaStoreActionArgsTraceData MetaStoreTaskMetaStoreActionTemplate(Action`1<MetaStoreTaskMetaStoreActionArgsTraceData> action);
    private static MetaStoreTaskMetaStoreMaintenanceArgsTraceData MetaStoreTaskMetaStoreMaintenanceTemplate(Action`1<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> action);
    private static PersistedStoreTaskPersistedStoreActionArgsTraceData PersistedStoreTaskPersistedStoreActionTemplate(Action`1<PersistedStoreTaskPersistedStoreActionArgsTraceData> action);
    private static PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData PersistedStoreTaskPersistedStoreAnalyzeFileTemplate(Action`1<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> action);
    private static PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData PersistedStoreTaskPersistedStoreMaintenanceTemplate(Action`1<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> action);
    private static ScanrequestStartArgs_V1TraceData ScanrequestStartTemplate(Action`1<ScanrequestStartArgs_V1TraceData> action);
    private static ScanrequestStartArgs_V1TraceData ScanrequestStopTemplate(Action`1<ScanrequestStartArgs_V1TraceData> action);
    private static SkippedfileArgsTraceData SkippedfileTemplate(Action`1<SkippedfileArgsTraceData> action);
    private static StreamscanrequestStartArgs_V1TraceData StreamscanrequestStartTemplate(Action`1<StreamscanrequestStartArgs_V1TraceData> action);
    private static StreamscanrequestStartArgs_V1TraceData StreamscanrequestStopTemplate(Action`1<StreamscanrequestStartArgs_V1TraceData> action);
    private static VersionsArgsTraceData VersionsTemplate(Action`1<VersionsArgsTraceData> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private void RegisterTemplate(TraceEvent template);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsKernelFileTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public MicrosoftWindowsKernelFileTraceEventParser(TraceEventSource source);
    private static MicrosoftWindowsKernelFileTraceEventParser();
    public void add_Create(Action`1<FileIOCreateTraceData> value);
    public void remove_Create(Action`1<FileIOCreateTraceData> value);
    protected virtual string GetProviderName();
    private static FileIOCreateTraceData CreateTemplate(Action`1<FileIOCreateTraceData> action, KernelTraceEventParserState kernelState);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsNDISPacketCapture.PacketFragmentArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PacketFragmentArgs> m_target;
    private MicrosoftWindowsNDISPacketCaptureTraceEventParserState m_state;
    public int MiniportIfIndex { get; }
    public int LowerIfIndex { get; }
    public int FragmentSize { get; }
    public Byte* Fragment { get; }
    public string ParsedPacket { get; }
    public string TcpStreamSample { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PacketFragmentArgs(Action`1<PacketFragmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, MicrosoftWindowsNDISPacketCaptureTraceEventParserState state);
    public int get_MiniportIfIndex();
    public int get_LowerIfIndex();
    public int get_FragmentSize();
    public Byte* get_Fragment();
    public string get_ParsedPacket();
    public string get_TcpStreamSample();
    private static void AppendPrintable(Byte* frag, Byte* fragEnd, StringBuilder sb, string prefix, int max);
    private static bool IsPrintable(Byte* frag, Byte* fragEnd);
    private static Byte* FindIPHeader(Byte* frag, Byte* fragEnd);
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    private string FindPrintableTcpStream(Byte* fragment, int fragmentSize, int maxLength, bool oneLine);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PacketFragmentArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PacketFragmentArgs> value);
    protected internal virtual void SetState(object newState);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsNDISPacketCapture.PacketMetaDataArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PacketMetaDataArgs> m_target;
    private MicrosoftWindowsNDISPacketCaptureTraceEventParserState m_state;
    public int MiniportIfIndex { get; }
    public int LowerIfIndex { get; }
    public int MetadataSize { get; }
    public Byte* Metadata { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PacketMetaDataArgs(Action`1<PacketMetaDataArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, MicrosoftWindowsNDISPacketCaptureTraceEventParserState state);
    public int get_MiniportIfIndex();
    public int get_LowerIfIndex();
    public int get_MetadataSize();
    public Byte* get_Metadata();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PacketMetaDataArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PacketMetaDataArgs> value);
    protected internal virtual void SetState(object newState);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsNDISPacketCaptureTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    private MicrosoftWindowsNDISPacketCaptureTraceEventParserState State { get; }
    public MicrosoftWindowsNDISPacketCaptureTraceEventParser(TraceEventSource source);
    private static MicrosoftWindowsNDISPacketCaptureTraceEventParser();
    public void add_PacketFragment(Action`1<PacketFragmentArgs> value);
    public void remove_PacketFragment(Action`1<PacketFragmentArgs> value);
    public void add_PacketMetaData(Action`1<PacketMetaDataArgs> value);
    public void remove_PacketMetaData(Action`1<PacketMetaDataArgs> value);
    protected virtual string GetProviderName();
    private static PacketFragmentArgs PacketFragmentTemplate(Action`1<PacketFragmentArgs> action, MicrosoftWindowsNDISPacketCaptureTraceEventParserState state);
    private static PacketMetaDataArgs PacketMetaDataTemplate(Action`1<PacketMetaDataArgs> action, MicrosoftWindowsNDISPacketCaptureTraceEventParserState state);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    private MicrosoftWindowsNDISPacketCaptureTraceEventParserState get_State();
}
internal class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsNDISPacketCaptureTraceEventParserState : object {
    internal Guid m_FragmentActivity;
    internal EventIndex m_FragmentEventIndex;
    internal bool m_TCPHeaderInPreviousFragment;
    internal Byte* m_TCPHeader;
    internal Byte* m_TCPHeaderEnd;
    internal int m_TCPHeaderMax;
    protected virtual override void Finalize();
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.FramingIfOperStatusArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FramingIfOperStatusArgs> m_target;
    public int Interface { get; }
    public int OperationalStatus { get; }
    public long Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FramingIfOperStatusArgs(Action`1<FramingIfOperStatusArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public int get_OperationalStatus();
    public long get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<FramingIfOperStatusArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<FramingIfOperStatusArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpDadFailedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpDadFailedArgs> m_target;
    public int Interface { get; }
    public string Protocol { get; }
    public int DadState { get; }
    public int DlAddrLength { get; }
    public Byte[] DLAddress { get; }
    public int IpAddrLength { get; }
    public int IPv4Address { get; }
    public Byte[] IPv6Address { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpDadFailedArgs(Action`1<IpDadFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public string get_Protocol();
    public int get_DadState();
    public int get_DlAddrLength();
    public Byte[] get_DLAddress();
    public int get_IpAddrLength();
    public int get_IPv4Address();
    public Byte[] get_IPv6Address();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpDadFailedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpDadFailedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpDadSuccessfulArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpDadSuccessfulArgs> m_target;
    public int Interface { get; }
    public string Protocol { get; }
    public TCPIP_IP_DAD_STATE DadState { get; }
    public int DlAddrLength { get; }
    public Byte[] DLAddress { get; }
    public int IpAddrLength { get; }
    public int IPv4Address { get; }
    public Byte[] IPv6Address { get; }
    public TCPIP_Protocol IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpDadSuccessfulArgs(Action`1<IpDadSuccessfulArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public string get_Protocol();
    public TCPIP_IP_DAD_STATE get_DadState();
    public int get_DlAddrLength();
    public Byte[] get_DLAddress();
    public int get_IpAddrLength();
    public int get_IPv4Address();
    public Byte[] get_IPv6Address();
    public TCPIP_Protocol get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpDadSuccessfulArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpDadSuccessfulArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpInterfacePropertyChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpInterfacePropertyChangeArgs> m_target;
    public int Interface { get; }
    public int Advertise { get; }
    public int AdvertiseDefaultRoute { get; }
    public int Forward { get; }
    public int ForwardMulticast { get; }
    public int UseNud { get; }
    public int AdvertisingEnabled { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpInterfacePropertyChangeArgs(Action`1<IpInterfacePropertyChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public int get_Advertise();
    public int get_AdvertiseDefaultRoute();
    public int get_Forward();
    public int get_ForwardMulticast();
    public int get_UseNud();
    public int get_AdvertisingEnabled();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpInterfacePropertyChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpInterfacePropertyChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpInterfaceRundownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpInterfaceRundownArgs> m_target;
    public int IfIndex { get; }
    public long LinkSpeed { get; }
    public int IPProtocol { get; }
    public int IPv4Address { get; }
    public int IpAddrLength { get; }
    public Byte[] IPv6Address { get; }
    public int PhysicalMediumType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpInterfaceRundownArgs(Action`1<IpInterfaceRundownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IfIndex();
    public long get_LinkSpeed();
    public int get_IPProtocol();
    public int get_IPv4Address();
    public int get_IpAddrLength();
    public Byte[] get_IPv6Address();
    public int get_PhysicalMediumType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpInterfaceRundownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpInterfaceRundownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpInterfaceSpeedChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpInterfaceSpeedChangeArgs> m_target;
    public int IfIndex { get; }
    public long LinkSpeed { get; }
    public int IPProtocol { get; }
    public int IPv4Address { get; }
    public int IpAddrLength { get; }
    public Byte[] IPv6Address { get; }
    public TCPIP_IP_PHYSICALMEDIUM_TYPE PhysicalMediumType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpInterfaceSpeedChangeArgs(Action`1<IpInterfaceSpeedChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IfIndex();
    public long get_LinkSpeed();
    public int get_IPProtocol();
    public int get_IPv4Address();
    public int get_IpAddrLength();
    public Byte[] get_IPv6Address();
    public TCPIP_IP_PHYSICALMEDIUM_TYPE get_PhysicalMediumType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpInterfaceSpeedChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpInterfaceSpeedChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpNeighborDiscoveryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpNeighborDiscoveryArgs> m_target;
    public int Interface { get; }
    public int IpAddrLength { get; }
    public Byte[] SourceIPAddress { get; }
    public Byte[] TargetIPAddress { get; }
    public TCPIP_NEIGHBOR_EVENT NeighborEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpNeighborDiscoveryArgs(Action`1<IpNeighborDiscoveryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public int get_IpAddrLength();
    public Byte[] get_SourceIPAddress();
    public Byte[] get_TargetIPAddress();
    public TCPIP_NEIGHBOR_EVENT get_NeighborEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpNeighborDiscoveryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpNeighborDiscoveryArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpNeighborStateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpNeighborStateArgs> m_target;
    public int Interface { get; }
    public int IpAddrLength { get; }
    public Byte[] IPAddress { get; }
    public int DlAddrLength { get; }
    public Byte[] DLAddress { get; }
    public int OldNeighborState { get; }
    public TCPIP_NEIGHBOR_STATE NewNeighborState { get; }
    public int NeighborEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpNeighborStateArgs(Action`1<IpNeighborStateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public int get_IpAddrLength();
    public Byte[] get_IPAddress();
    public int get_DlAddrLength();
    public Byte[] get_DLAddress();
    public int get_OldNeighborState();
    public TCPIP_NEIGHBOR_STATE get_NewNeighborState();
    public int get_NeighborEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpNeighborStateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpNeighborStateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpNeighborUnreachableArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpNeighborUnreachableArgs> m_target;
    public int Interface { get; }
    public int DlAddrLength { get; }
    public Byte[] DlAddress { get; }
    public int IpAddrLength { get; }
    public int IPv4Address { get; }
    public Byte[] IPv6Address { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpNeighborUnreachableArgs(Action`1<IpNeighborUnreachableArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public int get_DlAddrLength();
    public Byte[] get_DlAddress();
    public int get_IpAddrLength();
    public int get_IPv4Address();
    public Byte[] get_IPv6Address();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpNeighborUnreachableArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpNeighborUnreachableArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpRouteCreatedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpRouteCreatedArgs> m_target;
    public ulong Route { get; }
    public int Interface { get; }
    public int DestinationPrefixAddressLength { get; }
    public int NextHopAddressLength { get; }
    public string Protocol { get; }
    public int DestinationPrefixLength { get; }
    public Byte[] DestinationPrefix { get; }
    public Byte[] NextHopAddress { get; }
    public long ValidLifetime { get; }
    public long PreferredLifetime { get; }
    public int Metric { get; }
    public int Loopback { get; }
    public int AutoconfigureAddress { get; }
    public int Publish { get; }
    public int Immortal { get; }
    public int IPv4DestinationPrefix { get; }
    public int IPv4NextHopAddress { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpRouteCreatedArgs(Action`1<IpRouteCreatedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Route();
    public int get_Interface();
    public int get_DestinationPrefixAddressLength();
    public int get_NextHopAddressLength();
    public string get_Protocol();
    public int get_DestinationPrefixLength();
    public Byte[] get_DestinationPrefix();
    public Byte[] get_NextHopAddress();
    public long get_ValidLifetime();
    public long get_PreferredLifetime();
    public int get_Metric();
    public int get_Loopback();
    public int get_AutoconfigureAddress();
    public int get_Publish();
    public int get_Immortal();
    public int get_IPv4DestinationPrefix();
    public int get_IPv4NextHopAddress();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpRouteCreatedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpRouteCreatedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpSortedAddressPairsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpSortedAddressPairsArgs> m_target;
    public int IpAddrLength { get; }
    public Byte[] PreferredSourceIPAddress { get; }
    public Byte[] PreferredDestinationIPAddress { get; }
    public Byte[] NonPreferredSourceIPAddress { get; }
    public Byte[] NonPreferredDestinationIPAddress { get; }
    public int SortOption { get; }
    public string RuleType { get; }
    public int RuleMajor { get; }
    public int RuleMinor { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpSortedAddressPairsArgs(Action`1<IpSortedAddressPairsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IpAddrLength();
    public Byte[] get_PreferredSourceIPAddress();
    public Byte[] get_PreferredDestinationIPAddress();
    public Byte[] get_NonPreferredSourceIPAddress();
    public Byte[] get_NonPreferredDestinationIPAddress();
    public int get_SortOption();
    public string get_RuleType();
    public int get_RuleMajor();
    public int get_RuleMinor();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpSortedAddressPairsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpSortedAddressPairsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.IpSourceAddressSelectionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IpSourceAddressSelectionArgs> m_target;
    public int IpAddrLength { get; }
    public Byte[] PreferredSourceIPAddress { get; }
    public Byte[] NonPreferredSourceIPAddress { get; }
    public Byte[] DestinationIPAddress { get; }
    public int Rule { get; }
    public int RuleExtension { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IpSourceAddressSelectionArgs(Action`1<IpSourceAddressSelectionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IpAddrLength();
    public Byte[] get_PreferredSourceIPAddress();
    public Byte[] get_NonPreferredSourceIPAddress();
    public Byte[] get_DestinationIPAddress();
    public int get_Rule();
    public int get_RuleExtension();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IpSourceAddressSelectionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IpSourceAddressSelectionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_AcceptArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_AcceptArgs> m_target;
    public ulong NdkConnector { get; }
    public ulong NdkQp { get; }
    public int IRD { get; }
    public int ORD { get; }
    public ulong DisconnectEventContext { get; }
    public ulong RequestContext { get; }
    public int PrivateDataLength { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_AcceptArgs(Action`1<Ndkpi_AcceptArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkConnector();
    public ulong get_NdkQp();
    public int get_IRD();
    public int get_ORD();
    public ulong get_DisconnectEventContext();
    public ulong get_RequestContext();
    public int get_PrivateDataLength();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_AcceptArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_AcceptArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Arm_CqArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Arm_CqArgs> m_target;
    public ulong NdkCq { get; }
    public TCPIP_NDKPI_CQ_ARM_TYPE ArmType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Arm_CqArgs(Action`1<Ndkpi_Arm_CqArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkCq();
    public TCPIP_NDKPI_CQ_ARM_TYPE get_ArmType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Arm_CqArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Arm_CqArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_BindArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_BindArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong NdkMr { get; }
    public ulong NdkMw { get; }
    public ulong VirtualAddress { get; }
    public long Length { get; }
    public int Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_BindArgs(Action`1<Ndkpi_BindArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_NdkMr();
    public ulong get_NdkMw();
    public ulong get_VirtualAddress();
    public long get_Length();
    public int get_Flags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_BindArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_BindArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Build_LamArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Build_LamArgs> m_target;
    public ulong NdkAdapter { get; }
    public ulong Mdl { get; }
    public long Length { get; }
    public ulong RequestContext { get; }
    public ulong LAMBuffer { get; }
    public int LAMBufferSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Build_LamArgs(Action`1<Ndkpi_Build_LamArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkAdapter();
    public ulong get_Mdl();
    public long get_Length();
    public ulong get_RequestContext();
    public ulong get_LAMBuffer();
    public int get_LAMBufferSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Build_LamArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Build_LamArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Close_Adapter_EnterArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Close_Adapter_EnterArgs> m_target;
    public ulong NdkAdapter { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Close_Adapter_EnterArgs(Action`1<Ndkpi_Close_Adapter_EnterArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkAdapter();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Close_CompletionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Close_CompletionArgs> m_target;
    public ulong RequestContext { get; }
    public int CompletionType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Close_CompletionArgs(Action`1<Ndkpi_Close_CompletionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_RequestContext();
    public int get_CompletionType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Close_CompletionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Close_CompletionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Close_ObjArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Close_ObjArgs> m_target;
    public ulong NdkObject { get; }
    public TCPIP_NDKPI_OBJECT_TYPE NdkObjectType { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Close_ObjArgs(Action`1<Ndkpi_Close_ObjArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkObject();
    public TCPIP_NDKPI_OBJECT_TYPE get_NdkObjectType();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Close_ObjArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Close_ObjArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Complete_ConnectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Complete_ConnectArgs> m_target;
    public ulong NdkConnector { get; }
    public ulong DisconnectEventContext { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Complete_ConnectArgs(Action`1<Ndkpi_Complete_ConnectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkConnector();
    public ulong get_DisconnectEventContext();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Complete_ConnectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Complete_ConnectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Connect_Event_CallbackArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Connect_Event_CallbackArgs> m_target;
    public ulong ConnectEventContext { get; }
    public ulong NdkConnector { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Connect_Event_CallbackArgs(Action`1<Ndkpi_Connect_Event_CallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ConnectEventContext();
    public ulong get_NdkConnector();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Connect_Event_CallbackArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Connect_Event_CallbackArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_ConnectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_ConnectArgs> m_target;
    public ulong NdkConnector { get; }
    public ulong NdkQp { get; }
    public int SrcSockAddrLength { get; }
    public Byte[] SrcSockAddr { get; }
    public int DestSockAddrLength { get; }
    public Byte[] DestSockAddr { get; }
    public int IRD { get; }
    public int ORD { get; }
    public ulong RequestContext { get; }
    public ulong NdkSharedEndpoint { get; }
    public int PrivateDataLength { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_ConnectArgs(Action`1<Ndkpi_ConnectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkConnector();
    public ulong get_NdkQp();
    public int get_SrcSockAddrLength();
    public Byte[] get_SrcSockAddr();
    public int get_DestSockAddrLength();
    public Byte[] get_DestSockAddr();
    public int get_IRD();
    public int get_ORD();
    public ulong get_RequestContext();
    public ulong get_NdkSharedEndpoint();
    public int get_PrivateDataLength();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_ConnectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_ConnectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Control_Cq_ImArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Control_Cq_ImArgs> m_target;
    public ulong NdkCq { get; }
    public int ModerationInterval { get; }
    public int ModerationCount { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Control_Cq_ImArgs(Action`1<Ndkpi_Control_Cq_ImArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkCq();
    public int get_ModerationInterval();
    public int get_ModerationCount();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Control_Cq_ImArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Control_Cq_ImArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Cq_Notification_CallbackArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Cq_Notification_CallbackArgs> m_target;
    public ulong CqNotificationContext { get; }
    public int CqStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Cq_Notification_CallbackArgs(Action`1<Ndkpi_Cq_Notification_CallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_CqNotificationContext();
    public int get_CqStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Cq_Notification_CallbackArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Cq_Notification_CallbackArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Cq_Result_ExArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Cq_Result_ExArgs> m_target;
    public ulong NdkCq { get; }
    public int Status { get; }
    public int BytesTransferred { get; }
    public ulong QpContext { get; }
    public ulong RequestContext { get; }
    public int ResultIndex { get; }
    public int ResultCount { get; }
    public TCPIP_NDKPI_OPERATION_TYPE Type { get; }
    public long TypeSpecificCompletionOutput { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Cq_Result_ExArgs(Action`1<Ndkpi_Cq_Result_ExArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkCq();
    public int get_Status();
    public int get_BytesTransferred();
    public ulong get_QpContext();
    public ulong get_RequestContext();
    public int get_ResultIndex();
    public int get_ResultCount();
    public TCPIP_NDKPI_OPERATION_TYPE get_Type();
    public long get_TypeSpecificCompletionOutput();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Cq_Result_ExArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Cq_Result_ExArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Cq_ResultArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Cq_ResultArgs> m_target;
    public ulong NdkCq { get; }
    public int Status { get; }
    public int BytesTransferred { get; }
    public ulong QpContext { get; }
    public ulong RequestContext { get; }
    public int ResultIndex { get; }
    public int ResultCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Cq_ResultArgs(Action`1<Ndkpi_Cq_ResultArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkCq();
    public int get_Status();
    public int get_BytesTransferred();
    public ulong get_QpContext();
    public ulong get_RequestContext();
    public int get_ResultIndex();
    public int get_ResultCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Cq_ResultArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Cq_ResultArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_CompletionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_CompletionArgs> m_target;
    public ulong RequestContext { get; }
    public int Status { get; }
    public ulong NdkObject { get; }
    public TCPIP_NDKPI_COMPLETION_TYPE CompletionType { get; }
    public int NdkObjectType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_CompletionArgs(Action`1<Ndkpi_Create_CompletionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_RequestContext();
    public int get_Status();
    public ulong get_NdkObject();
    public TCPIP_NDKPI_COMPLETION_TYPE get_CompletionType();
    public int get_NdkObjectType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_CompletionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_CompletionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_CqArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_CqArgs> m_target;
    public ulong NdkAdapter { get; }
    public int CqDepth { get; }
    public ulong CqNotificationContext { get; }
    public long AffinityMask { get; }
    public int AffinityGroup { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_CqArgs(Action`1<Ndkpi_Create_CqArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkAdapter();
    public int get_CqDepth();
    public ulong get_CqNotificationContext();
    public long get_AffinityMask();
    public int get_AffinityGroup();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_CqArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_CqArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_ListenerArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_ListenerArgs> m_target;
    public ulong NdkAdapter { get; }
    public ulong ConnectEventContext { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_ListenerArgs(Action`1<Ndkpi_Create_ListenerArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkAdapter();
    public ulong get_ConnectEventContext();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_ListenerArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_ListenerArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_MrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_MrArgs> m_target;
    public ulong NdkPd { get; }
    public int FastRegister { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_MrArgs(Action`1<Ndkpi_Create_MrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkPd();
    public int get_FastRegister();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_MrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_MrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_QpArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_QpArgs> m_target;
    public ulong NdkPd { get; }
    public ulong ReceiveCq { get; }
    public ulong InitiatorCq { get; }
    public ulong QPContext { get; }
    public int ReceiveQueueDepth { get; }
    public int InitiatorQueueDepth { get; }
    public int MaxReceiveRequestSge { get; }
    public int MaxInitiatorRequestSge { get; }
    public ulong RequestContext { get; }
    public ulong NdkSrq { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_QpArgs(Action`1<Ndkpi_Create_QpArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkPd();
    public ulong get_ReceiveCq();
    public ulong get_InitiatorCq();
    public ulong get_QPContext();
    public int get_ReceiveQueueDepth();
    public int get_InitiatorQueueDepth();
    public int get_MaxReceiveRequestSge();
    public int get_MaxInitiatorRequestSge();
    public ulong get_RequestContext();
    public ulong get_NdkSrq();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_QpArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_QpArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Create_SrqArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Create_SrqArgs> m_target;
    public ulong NdkPd { get; }
    public int SrqDepth { get; }
    public int MaxReceiveRequestSge { get; }
    public int NotifyThreshold { get; }
    public ulong SrqNotificationContext { get; }
    public long AffinityMask { get; }
    public int AffinityGroup { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Create_SrqArgs(Action`1<Ndkpi_Create_SrqArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkPd();
    public int get_SrqDepth();
    public int get_MaxReceiveRequestSge();
    public int get_NotifyThreshold();
    public ulong get_SrqNotificationContext();
    public long get_AffinityMask();
    public int get_AffinityGroup();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Create_SrqArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Create_SrqArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Deregister_MrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Deregister_MrArgs> m_target;
    public ulong NdkObject { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Deregister_MrArgs(Action`1<Ndkpi_Deregister_MrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkObject();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Deregister_MrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Deregister_MrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Disconnect_Event_CallbackArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Disconnect_Event_CallbackArgs> m_target;
    public ulong DisconnectEventContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Disconnect_Event_CallbackArgs(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_DisconnectEventContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Fast_RegisterArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Fast_RegisterArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong NdkMr { get; }
    public int AdapterPageCount { get; }
    public ulong AdapterPageArray { get; }
    public int FBO { get; }
    public long Length { get; }
    public ulong BaseVirtualAddress { get; }
    public int Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Fast_RegisterArgs(Action`1<Ndkpi_Fast_RegisterArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_NdkMr();
    public int get_AdapterPageCount();
    public ulong get_AdapterPageArray();
    public int get_FBO();
    public long get_Length();
    public ulong get_BaseVirtualAddress();
    public int get_Flags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Fast_RegisterArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Fast_RegisterArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_FlushArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_FlushArgs> m_target;
    public ulong NdkQp { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_FlushArgs(Action`1<Ndkpi_FlushArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_FlushArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_FlushArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Get_Connect_DataArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Get_Connect_DataArgs> m_target;
    public ulong NdkConnector { get; }
    public int IRD { get; }
    public int ORD { get; }
    public int PrivateDataLength { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Get_Connect_DataArgs(Action`1<Ndkpi_Get_Connect_DataArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkConnector();
    public int get_IRD();
    public int get_ORD();
    public int get_PrivateDataLength();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Get_Connect_DataArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Get_Connect_DataArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Get_Sockaddr_FailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Get_Sockaddr_FailureArgs> m_target;
    public ulong NdkObject { get; }
    public int NdkObjectType { get; }
    public int SockAddrType { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Get_Sockaddr_FailureArgs(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkObject();
    public int get_NdkObjectType();
    public int get_SockAddrType();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Get_SockaddrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Get_SockaddrArgs> m_target;
    public ulong NdkObject { get; }
    public int NdkObjectType { get; }
    public TCPIP_NDKPI_SOCKADDR_TYPE SockAddrType { get; }
    public int SockAddrLength { get; }
    public Byte[] SockAddr { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Get_SockaddrArgs(Action`1<Ndkpi_Get_SockaddrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkObject();
    public int get_NdkObjectType();
    public TCPIP_NDKPI_SOCKADDR_TYPE get_SockAddrType();
    public int get_SockAddrLength();
    public Byte[] get_SockAddr();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Get_SockaddrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Get_SockaddrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Get_TokenArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Get_TokenArgs> m_target;
    public ulong NdkObject { get; }
    public int NdkObjectType { get; }
    public TCPIP_NDKPI_TOKEN_TYPE TokenType { get; }
    public int Token { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Get_TokenArgs(Action`1<Ndkpi_Get_TokenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkObject();
    public int get_NdkObjectType();
    public TCPIP_NDKPI_TOKEN_TYPE get_TokenType();
    public int get_Token();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Get_TokenArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Get_TokenArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Initialize_Fast_Register_MrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> m_target;
    public ulong NdkMr { get; }
    public int AdapterPageCount { get; }
    public int RemoteAccess { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Initialize_Fast_Register_MrArgs(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkMr();
    public int get_AdapterPageCount();
    public int get_RemoteAccess();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Interface_EventArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Interface_EventArgs> m_target;
    public int InterfaceIndex { get; }
    public int EventDescription { get; }
    public int NDKOperational { get; }
    public int StatusCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Interface_EventArgs(Action`1<Ndkpi_Interface_EventArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_EventDescription();
    public int get_NDKOperational();
    public int get_StatusCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Interface_EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Interface_EventArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_InvalidateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_InvalidateArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong NdkObject { get; }
    public int NdkObjectType { get; }
    public int Flags { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_InvalidateArgs(Action`1<Ndkpi_InvalidateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_NdkObject();
    public int get_NdkObjectType();
    public int get_Flags();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_InvalidateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_InvalidateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_ListenArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_ListenArgs> m_target;
    public ulong NdkListener { get; }
    public int SockAddrLength { get; }
    public Byte[] SockAddr { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_ListenArgs(Action`1<Ndkpi_ListenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkListener();
    public int get_SockAddrLength();
    public Byte[] get_SockAddr();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_ListenArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_ListenArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Modify_SrqArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Modify_SrqArgs> m_target;
    public ulong NdkSrq { get; }
    public int SrqDepth { get; }
    public int NotifyThreshold { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Modify_SrqArgs(Action`1<Ndkpi_Modify_SrqArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkSrq();
    public int get_SrqDepth();
    public int get_NotifyThreshold();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Modify_SrqArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Modify_SrqArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Open_AdapterArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Open_AdapterArgs> m_target;
    public int InterfaceIndex { get; }
    public ulong NdkAdapter { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Open_AdapterArgs(Action`1<Ndkpi_Open_AdapterArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public ulong get_NdkAdapter();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Open_AdapterArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Open_AdapterArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_ReadArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_ReadArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong SgeAddress { get; }
    public int SgeLength { get; }
    public int SgeMemoryRegionToken { get; }
    public int NumSge { get; }
    public int Flags { get; }
    public int SgeIndex { get; }
    public long RemoteAddress { get; }
    public int RemoteToken { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_ReadArgs(Action`1<Ndkpi_ReadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_SgeAddress();
    public int get_SgeLength();
    public int get_SgeMemoryRegionToken();
    public int get_NumSge();
    public int get_Flags();
    public int get_SgeIndex();
    public long get_RemoteAddress();
    public int get_RemoteToken();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_ReadArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_ReadArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Register_MrArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Register_MrArgs> m_target;
    public ulong NdkMr { get; }
    public ulong Mdl { get; }
    public long Length { get; }
    public int Flags { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Register_MrArgs(Action`1<Ndkpi_Register_MrArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkMr();
    public ulong get_Mdl();
    public long get_Length();
    public int get_Flags();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Register_MrArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Register_MrArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_RejectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_RejectArgs> m_target;
    public ulong NdkConnector { get; }
    public int PrivateDataLength { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_RejectArgs(Action`1<Ndkpi_RejectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkConnector();
    public int get_PrivateDataLength();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_RejectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_RejectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Release_LamArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Release_LamArgs> m_target;
    public ulong NdkAdapter { get; }
    public ulong LAMBuffer { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Release_LamArgs(Action`1<Ndkpi_Release_LamArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkAdapter();
    public ulong get_LAMBuffer();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Release_LamArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Release_LamArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Request_CompletionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Request_CompletionArgs> m_target;
    public ulong RequestContext { get; }
    public int Status { get; }
    public int CompletionType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Request_CompletionArgs(Action`1<Ndkpi_Request_CompletionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_RequestContext();
    public int get_Status();
    public int get_CompletionType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Request_CompletionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Request_CompletionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Resize_CqArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Resize_CqArgs> m_target;
    public ulong NdkCq { get; }
    public int CqDepth { get; }
    public ulong RequestContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Resize_CqArgs(Action`1<Ndkpi_Resize_CqArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkCq();
    public int get_CqDepth();
    public ulong get_RequestContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Resize_CqArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Resize_CqArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Send_InvalidateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Send_InvalidateArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong SgeAddress { get; }
    public int SgeLength { get; }
    public int SgeMemoryRegionToken { get; }
    public int NumSge { get; }
    public int Flags { get; }
    public int SgeIndex { get; }
    public int RemoteToken { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Send_InvalidateArgs(Action`1<Ndkpi_Send_InvalidateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_SgeAddress();
    public int get_SgeLength();
    public int get_SgeMemoryRegionToken();
    public int get_NumSge();
    public int get_Flags();
    public int get_SgeIndex();
    public int get_RemoteToken();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Send_InvalidateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Send_InvalidateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_SendArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_SendArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public ulong SgeAddress { get; }
    public int SgeLength { get; }
    public int SgeMemoryRegionToken { get; }
    public int NumSge { get; }
    public int Flags { get; }
    public int SgeIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_SendArgs(Action`1<Ndkpi_SendArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public ulong get_SgeAddress();
    public int get_SgeLength();
    public int get_SgeMemoryRegionToken();
    public int get_NumSge();
    public int get_Flags();
    public int get_SgeIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_SendArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_SendArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Srq_Notification_CallbackArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Srq_Notification_CallbackArgs> m_target;
    public ulong SrqNotificationContext { get; }
    public int SrqStatus { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Srq_Notification_CallbackArgs(Action`1<Ndkpi_Srq_Notification_CallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_SrqNotificationContext();
    public int get_SrqStatus();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Srq_Notification_CallbackArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Srq_Notification_CallbackArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Srq_Work_Request_Inline_FailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> m_target;
    public ulong NdkSrq { get; }
    public ulong RequestContext { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Srq_Work_Request_Inline_FailureArgs(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkSrq();
    public ulong get_RequestContext();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_SrqReceiveArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_SrqReceiveArgs> m_target;
    public ulong NdkSrq { get; }
    public ulong RequestContext { get; }
    public ulong SgeAddress { get; }
    public int SgeLength { get; }
    public int SgeMemoryRegionToken { get; }
    public int NumSge { get; }
    public int Flags { get; }
    public int SgeIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_SrqReceiveArgs(Action`1<Ndkpi_SrqReceiveArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkSrq();
    public ulong get_RequestContext();
    public ulong get_SgeAddress();
    public int get_SgeLength();
    public int get_SgeMemoryRegionToken();
    public int get_NumSge();
    public int get_Flags();
    public int get_SgeIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_SrqReceiveArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_SrqReceiveArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.Ndkpi_Work_Request_Inline_FailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Ndkpi_Work_Request_Inline_FailureArgs> m_target;
    public ulong NdkQp { get; }
    public ulong RequestContext { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Ndkpi_Work_Request_Inline_FailureArgs(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NdkQp();
    public ulong get_RequestContext();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssBindingBindCompleteArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssBindingBindCompleteArgs> m_target;
    public int InterfaceIndex { get; }
    public int AddressFamily { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssBindingBindCompleteArgs(Action`1<RssBindingBindCompleteArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_AddressFamily();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssBindingBindCompleteArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssBindingBindCompleteArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssBindingCapabilityArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssBindingCapabilityArgs> m_target;
    public int InterfaceIndex { get; }
    public TCPIP_RSS_BINDING_CAPABILITY Capability { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssBindingCapabilityArgs(Action`1<RssBindingCapabilityArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public TCPIP_RSS_BINDING_CAPABILITY get_Capability();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssBindingCapabilityArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssBindingCapabilityArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssBindingChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssBindingChangeArgs> m_target;
    public int InterfaceIndex { get; }
    public TCPIP_AF AddressFamily { get; }
    public int Bind { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssBindingChangeArgs(Action`1<RssBindingChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public TCPIP_AF get_AddressFamily();
    public int get_Bind();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssBindingChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssBindingChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssBindingRundownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssBindingRundownArgs> m_target;
    public int InterfaceIndex { get; }
    public int AdapterIndex { get; }
    public int PortNumber { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssBindingRundownArgs(Action`1<RssBindingRundownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_AdapterIndex();
    public int get_PortNumber();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssBindingRundownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssBindingRundownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssConfigurationChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssConfigurationChangeArgs> m_target;
    public int AdapterIndex { get; }
    public int Setting { get; }
    public int Value { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssConfigurationChangeArgs(Action`1<RssConfigurationChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_Setting();
    public int get_Value();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssConfigurationChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssConfigurationChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssFailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssFailureArgs> m_target;
    public int InterfaceIndex { get; }
    public int FailureDescription { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssFailureArgs(Action`1<RssFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_FailureDescription();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssFailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssFailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssIndirectionChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssIndirectionChangeArgs> m_target;
    public int AdapterIndex { get; }
    public int IndirectionIndex { get; }
    public int OldProcessorIndex { get; }
    public int NewProcessorIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssIndirectionChangeArgs(Action`1<RssIndirectionChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_IndirectionIndex();
    public int get_OldProcessorIndex();
    public int get_NewProcessorIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssIndirectionChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssIndirectionChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssInitializeIndirectionTableArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssInitializeIndirectionTableArgs> m_target;
    public int AdapterIndex { get; }
    public int IndirectionTableSize { get; }
    public Byte[] IndirectionTable { get; }
    public int GroupNumber { get; }
    public long ActiveAffinity { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssInitializeIndirectionTableArgs(Action`1<RssInitializeIndirectionTableArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_IndirectionTableSize();
    public Byte[] get_IndirectionTable();
    public int get_GroupNumber();
    public long get_ActiveAffinity();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssInitializeIndirectionTableArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssInitializeIndirectionTableArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortBindCompleteArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortBindCompleteArgs> m_target;
    public int AdapterIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortBindCompleteArgs(Action`1<RssPortBindCompleteArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortBindCompleteArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortBindCompleteArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortCapabilitiesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortCapabilitiesArgs> m_target;
    public int AdapterIndex { get; }
    public int CapabilitiesFlags { get; }
    public int NumberOfInterruptMessages { get; }
    public int NumberOfReceiveQueues { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortCapabilitiesArgs(Action`1<RssPortCapabilitiesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_CapabilitiesFlags();
    public int get_NumberOfInterruptMessages();
    public int get_NumberOfReceiveQueues();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortCapabilitiesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortCapabilitiesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortChangeArgs> m_target;
    public int AdapterIndex { get; }
    public int InterfaceIndex { get; }
    public int PortNumber { get; }
    public TCPIP_RSS_BINDING_NOTIFICATION Bind { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortChangeArgs(Action`1<RssPortChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_InterfaceIndex();
    public int get_PortNumber();
    public TCPIP_RSS_BINDING_NOTIFICATION get_Bind();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortProcessorsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortProcessorsArgs> m_target;
    public int AdapterIndex { get; }
    public int GroupNumber { get; }
    public int MaximumProcessors { get; }
    public long GroupAffinity { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortProcessorsArgs(Action`1<RssPortProcessorsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_GroupNumber();
    public int get_MaximumProcessors();
    public long get_GroupAffinity();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortProcessorsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortProcessorsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortReferenceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortReferenceArgs> m_target;
    public int AdapterIndex { get; }
    public int ExistingInterfaceIndex { get; }
    public int ExistingPortNumber { get; }
    public TCPIP_RSS_ADDING ReferenceAdded { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortReferenceArgs(Action`1<RssPortReferenceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_ExistingInterfaceIndex();
    public int get_ExistingPortNumber();
    public TCPIP_RSS_ADDING get_ReferenceAdded();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortReferenceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortReferenceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssPortRundownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssPortRundownArgs> m_target;
    public int AdapterIndex { get; }
    public int HashInfo { get; }
    public int MaximumProcessors { get; }
    public int GroupNumber { get; }
    public long GroupAffinity { get; }
    public long ActiveAffinity { get; }
    public TCPIP_RSS_SETTING_VALUE ActiveMode { get; }
    public int IndirectionTableSize { get; }
    public Byte[] IndirectionTable { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssPortRundownArgs(Action`1<RssPortRundownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_HashInfo();
    public int get_MaximumProcessors();
    public int get_GroupNumber();
    public long get_GroupAffinity();
    public long get_ActiveAffinity();
    public TCPIP_RSS_SETTING_VALUE get_ActiveMode();
    public int get_IndirectionTableSize();
    public Byte[] get_IndirectionTable();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssPortRundownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssPortRundownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssProcessorAssignmentArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssProcessorAssignmentArgs> m_target;
    public int NewAdapterIndex { get; }
    public int ProcessorIndex { get; }
    public int PreviousAdapterIndex { get; }
    public int TriggeringProcessorIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssProcessorAssignmentArgs(Action`1<RssProcessorAssignmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_NewAdapterIndex();
    public int get_ProcessorIndex();
    public int get_PreviousAdapterIndex();
    public int get_TriggeringProcessorIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssProcessorAssignmentArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssProcessorAssignmentArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssProcessorConsolidationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssProcessorConsolidationArgs> m_target;
    public int AdapterIndex { get; }
    public int ProcessorIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssProcessorConsolidationArgs(Action`1<RssProcessorConsolidationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AdapterIndex();
    public int get_ProcessorIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssProcessorConsolidationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssProcessorConsolidationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.RssProcessorUnassignmentArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<RssProcessorUnassignmentArgs> m_target;
    public int PreviousAdapterIndex { get; }
    public int ProcessorIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal RssProcessorUnassignmentArgs(Action`1<RssProcessorUnassignmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PreviousAdapterIndex();
    public int get_ProcessorIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<RssProcessorUnassignmentArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<RssProcessorUnassignmentArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.task_01317Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<task_01317Args> m_target;
    public ulong Event { get; }
    public TCP_REPARTITION_EVENT_TYPE Type { get; }
    public int Processor { get; }
    public int PowerSource { get; }
    public int OldPartitionCount { get; }
    public int NewPartitionCount { get; }
    public int Progress { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal task_01317Args(Action`1<task_01317Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Event();
    public TCP_REPARTITION_EVENT_TYPE get_Type();
    public int get_Processor();
    public int get_PowerSource();
    public int get_OldPartitionCount();
    public int get_NewPartitionCount();
    public int get_Progress();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<task_01317Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<task_01317Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.task_01318Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<task_01318Args> m_target;
    public TCPIP_COMPONENT Component { get; }
    public int PowerStateTransition { get; }
    public int IndicatingProcessor { get; }
    public int CurrentTick { get; }
    public long CurrentTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal task_01318Args(Action`1<task_01318Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public TCPIP_COMPONENT get_Component();
    public int get_PowerStateTransition();
    public int get_IndicatingProcessor();
    public int get_CurrentTick();
    public long get_CurrentTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<task_01318Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<task_01318Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.task_01319Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<task_01319Args> m_target;
    public int Component { get; }
    public int IndicatingProcessor { get; }
    public int TargetProcessor { get; }
    public int CurrentTick { get; }
    public int NextExpirationTick { get; }
    public long OldScheduledExpiration { get; }
    public long NewScheduledExpiration { get; }
    public long DueTime { get; }
    public int Aperiodic { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal task_01319Args(Action`1<task_01319Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Component();
    public int get_IndicatingProcessor();
    public int get_TargetProcessor();
    public int get_CurrentTick();
    public int get_NextExpirationTick();
    public long get_OldScheduledExpiration();
    public long get_NewScheduledExpiration();
    public long get_DueTime();
    public int get_Aperiodic();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<task_01319Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<task_01319Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.task_01320Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<task_01320Args> m_target;
    public int Component { get; }
    public int TargetProcessor { get; }
    public int CurrentTick { get; }
    public int NextExpiration { get; }
    public long CurrentInterruptTime { get; }
    public long ScheduledExpirationTime { get; }
    public int ExternalTrigger { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal task_01320Args(Action`1<task_01320Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Component();
    public int get_TargetProcessor();
    public int get_CurrentTick();
    public int get_NextExpiration();
    public long get_CurrentInterruptTime();
    public long get_ScheduledExpirationTime();
    public int get_ExternalTrigger();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<task_01320Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<task_01320Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.task_0Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<task_0Args> m_target;
    public int Interface { get; }
    public string Protocol { get; }
    public int IpAddrLength { get; }
    public int IPv4Address { get; }
    public Byte[] IPv6Address { get; }
    public int IPProtocol { get; }
    public int CurrentTime { get; }
    public int OldBaseTime { get; }
    public int OldValidTime { get; }
    public int OldPreferredTime { get; }
    public int NewBaseTime { get; }
    public int NewValidTime { get; }
    public int NewPreferredTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal task_0Args(Action`1<task_0Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Interface();
    public string get_Protocol();
    public int get_IpAddrLength();
    public int get_IPv4Address();
    public Byte[] get_IPv6Address();
    public int get_IPProtocol();
    public int get_CurrentTime();
    public int get_OldBaseTime();
    public int get_OldValidTime();
    public int get_OldPreferredTime();
    public int get_NewBaseTime();
    public int get_NewValidTime();
    public int get_NewPreferredTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<task_0Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<task_0Args> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_CONGESTION_ALGORITHM : Enum {
    public int value__;
    public static TCP_CONGESTION_ALGORITHM Default;
    public static TCP_CONGESTION_ALGORITHM NewReno;
    public static TCP_CONGESTION_ALGORITHM CcmCtcp;
    public static TCP_CONGESTION_ALGORITHM CcmDctcp;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_CONNECTION_STATE : Enum {
    public int value__;
    public static TCP_CONNECTION_STATE ClosedState;
    public static TCP_CONNECTION_STATE ListenState;
    public static TCP_CONNECTION_STATE SynSentState;
    public static TCP_CONNECTION_STATE SynRcvdState;
    public static TCP_CONNECTION_STATE EstablishedState;
    public static TCP_CONNECTION_STATE FinWait1State;
    public static TCP_CONNECTION_STATE FinWait2State;
    public static TCP_CONNECTION_STATE CloseWaitState;
    public static TCP_CONNECTION_STATE ClosingState;
    public static TCP_CONNECTION_STATE LastAckState;
    public static TCP_CONNECTION_STATE TimeWaitState;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_NOTIFICATION_CHANNEL_STATUS : Enum {
    public int value__;
    public static TCP_NOTIFICATION_CHANNEL_STATUS Invalid;
    public static TCP_NOTIFICATION_CHANNEL_STATUS SoftwareSlotAllocated;
    public static TCP_NOTIFICATION_CHANNEL_STATUS HardwareSlotAllocated;
    public static TCP_NOTIFICATION_CHANNEL_STATUS PolicyError;
    public static TCP_NOTIFICATION_CHANNEL_STATUS systemError;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_OPTION_TYPE : Enum {
    public int value__;
    public static TCP_OPTION_TYPE TCP_OFFLOAD_NO_PREFERENCE;
    public static TCP_OPTION_TYPE TCP_OFFLOAD_NOT_PREFERRED;
    public static TCP_OPTION_TYPE TCP_OFFLOAD_PREFERRED;
    public static TCP_OPTION_TYPE TCP_KEEPALIVE;
    public static TCP_OPTION_TYPE TCP_MAXSEG;
    public static TCP_OPTION_TYPE TCP_MAXRT;
    public static TCP_OPTION_TYPE TCP_STDURG;
    public static TCP_OPTION_TYPE TCP_NOURG;
    public static TCP_OPTION_TYPE TCP_ATMARK;
    public static TCP_OPTION_TYPE TCP_NOSYNRETRIES;
    public static TCP_OPTION_TYPE TCP_TIMESTAMPS;
    public static TCP_OPTION_TYPE TCP_OFFLOAD_PREFERENCE;
    public static TCP_OPTION_TYPE TCP_CONGESTION_ALGORITHM;
    public static TCP_OPTION_TYPE TCP_DELAY_FIN_ACK;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_REPARTITION_EVENT_TYPE : Enum {
    public int value__;
    public static TCP_REPARTITION_EVENT_TYPE ProcessorAdd;
    public static TCP_REPARTITION_EVENT_TYPE PowerSourceChange;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_TIMER_TYPE : Enum {
    public int value__;
    public static TCP_TIMER_TYPE RetransmitTimer;
    public static TCP_TIMER_TYPE ConnectTimer;
    public static TCP_TIMER_TYPE DelAckTimer;
    public static TCP_TIMER_TYPE PushTimer;
    public static TCP_TIMER_TYPE KeepAliveTimer;
    public static TCP_TIMER_TYPE DisconnectTimer;
    public static TCP_TIMER_TYPE SwsTimer;
    public static TCP_TIMER_TYPE ReassemblyRateTimer;
    public static TCP_TIMER_TYPE SynOrRstValidationTimer;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_WSD : Enum {
    public int value__;
    public static TCP_WSD FailedToAllocateTheWSDCache;
    public static TCP_WSD FailureInitializingPnPWorkQueue;
    public static TCP_WSD FailedToGetPersistentParameters;
    public static TCP_WSD RejectedPersistentParameters;
    public static TCP_WSD qualifiedProfile;
    public static TCP_WSD qualifiedDestination;
    public static TCP_WSD sampleCollectionCompletion;
    public static TCP_WSD idleTimeExpiration;
    public static TCP_WSD allocation;
    public static TCP_WSD newSampleRequest;
    public static TCP_WSD configurationChange;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCP_WSD_CACHE_ENTRY_STATE : Enum {
    public int value__;
    public static TCP_WSD_CACHE_ENTRY_STATE Idle;
    public static TCP_WSD_CACHE_ENTRY_STATE ProbingWs;
    public static TCP_WSD_CACHE_ENTRY_STATE ProbeWait;
    public static TCP_WSD_CACHE_ENTRY_STATE ProbingWithoutWs;
    public static TCP_WSD_CACHE_ENTRY_STATE RecordWait;
    public static TCP_WSD_CACHE_ENTRY_STATE EreQualified;
    public static TCP_WSD_CACHE_ENTRY_STATE Qualified;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpAcceptListenerInsertionFailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpAcceptListenerInsertionFailureArgs> m_target;
    public ulong Tcb { get; }
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public TCP_CONNECTION_STATE NewState { get; }
    public int RexmitCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpAcceptListenerInsertionFailureArgs(Action`1<TcpAcceptListenerInsertionFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public TCP_CONNECTION_STATE get_NewState();
    public int get_RexmitCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpAcceptListenerInsertionFailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpAcceptListenerInsertionFailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpAccpetListenerRouteLookupFailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpAccpetListenerRouteLookupFailureArgs> m_target;
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public int Status { get; }
    public int ProcessId { get; }
    public int Compartment { get; }
    public ulong Tcb { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpAccpetListenerRouteLookupFailureArgs(Action`1<TcpAccpetListenerRouteLookupFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public int get_Status();
    public int get_ProcessId();
    public int get_Compartment();
    public ulong get_Tcb();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpAcquirePortArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpAcquirePortArgs> m_target;
    public ulong PortAcquirer { get; }
    public int PortNumber { get; }
    public int WeakReference { get; }
    public ulong OriginalAcquirer { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpAcquirePortArgs(Action`1<TcpAcquirePortArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_PortAcquirer();
    public int get_PortNumber();
    public int get_WeakReference();
    public ulong get_OriginalAcquirer();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpAcquirePortArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpAcquirePortArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpAutoTuningBeginArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpAutoTuningBeginArgs> m_target;
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public int BufferSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpAutoTuningBeginArgs(Action`1<TcpAutoTuningBeginArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public int get_BufferSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpAutoTuningBeginArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpAutoTuningBeginArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpBindEndpointResolutionFailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpBindEndpointResolutionFailureArgs> m_target;
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpBindEndpointResolutionFailureArgs(Action`1<TcpBindEndpointResolutionFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpBindEndpointResolutionFailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpBlackHoleDetectionEntryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpBlackHoleDetectionEntryArgs> m_target;
    public ulong Tcb { get; }
    public int BHMSS { get; }
    public int OriginalMSS { get; }
    public string TraceString { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpBlackHoleDetectionEntryArgs(Action`1<TcpBlackHoleDetectionEntryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_BHMSS();
    public int get_OriginalMSS();
    public string get_TraceString();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpBlackHoleDetectionEntryArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpConnectionOffloadStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpConnectionOffloadStateChangeArgs> m_target;
    public int TcbState { get; }
    public int OcbState { get; }
    public int SndNxt { get; }
    public int RcvNxt { get; }
    public ulong Tcb { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpConnectionOffloadStateChangeArgs(Action`1<TcpConnectionOffloadStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TcbState();
    public int get_OcbState();
    public int get_SndNxt();
    public int get_RcvNxt();
    public ulong get_Tcb();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpConnectionOffloadStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpConnectionOffloadStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpConnectionOffloadStatusArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpConnectionOffloadStatusArgs> m_target;
    public ulong Tcb { get; }
    public int Status { get; }
    public int Interface { get; }
    public int PMax { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpConnectionOffloadStatusArgs(Action`1<TcpConnectionOffloadStatusArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Status();
    public int get_Interface();
    public int get_PMax();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpConnectionOffloadStatusArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpConnectionOffloadStatusArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpConnectionRundownArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpConnectionRundownArgs> m_target;
    public ulong Tcb { get; }
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public int State { get; }
    public int Pid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpConnectionRundownArgs(Action`1<TcpConnectionRundownArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public int get_State();
    public int get_Pid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpConnectionRundownArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpConnectionRundownArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpConnectionSummaryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpConnectionSummaryArgs> m_target;
    public ulong Tcb { get; }
    public long DataBytesOut { get; }
    public long DataBytesIn { get; }
    public long DataSegmentsOut { get; }
    public long DataSegmentsIn { get; }
    public long SegmentsOut { get; }
    public long SegmentsIn { get; }
    public int NonRecovDa { get; }
    public int NonRecovDaEpisodes { get; }
    public int DupAcksIn { get; }
    public int BytesRetrans { get; }
    public int Timeouts { get; }
    public int SpuriousRtoDetections { get; }
    public int FastRetran { get; }
    public int MaxSsthresh { get; }
    public int MaxSsCwnd { get; }
    public int MaxCaCwnd { get; }
    public int SndLimTransRwin { get; }
    public int SndLimTimeRwin { get; }
    public long SndLimBytesRwin { get; }
    public int SndLimTransCwnd { get; }
    public int SndLimTimeCwnd { get; }
    public long SndLimBytesCwnd { get; }
    public int SndLimTransSnd { get; }
    public int SndLimTimeRSnd { get; }
    public long SndLimBytesRSnd { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpConnectionSummaryArgs(Action`1<TcpConnectionSummaryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public long get_DataBytesOut();
    public long get_DataBytesIn();
    public long get_DataSegmentsOut();
    public long get_DataSegmentsIn();
    public long get_SegmentsOut();
    public long get_SegmentsIn();
    public int get_NonRecovDa();
    public int get_NonRecovDaEpisodes();
    public int get_DupAcksIn();
    public int get_BytesRetrans();
    public int get_Timeouts();
    public int get_SpuriousRtoDetections();
    public int get_FastRetran();
    public int get_MaxSsthresh();
    public int get_MaxSsCwnd();
    public int get_MaxCaCwnd();
    public int get_SndLimTransRwin();
    public int get_SndLimTimeRwin();
    public long get_SndLimBytesRwin();
    public int get_SndLimTransCwnd();
    public int get_SndLimTimeCwnd();
    public long get_SndLimBytesCwnd();
    public int get_SndLimTransSnd();
    public int get_SndLimTimeRSnd();
    public long get_SndLimBytesRSnd();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpConnectionSummaryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpConnectionSummaryArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpConnectTcbSkipRateLimitArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpConnectTcbSkipRateLimitArgs> m_target;
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public ulong Path { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpConnectTcbSkipRateLimitArgs(Action`1<TcpConnectTcbSkipRateLimitArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public ulong get_Path();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCreateEndpointAfFailureArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCreateEndpointAfFailureArgs> m_target;
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int Status { get; }
    public int ProcessId { get; }
    public int CompartmentId { get; }
    public int AddressFamily { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCreateEndpointAfFailureArgs(Action`1<TcpCreateEndpointAfFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_Status();
    public int get_ProcessId();
    public int get_CompartmentId();
    public int get_AddressFamily();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCreateEndpointAfFailureArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCreateEndpointAfFailureArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCreateNotificationChannelRequestArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCreateNotificationChannelRequestArgs> m_target;
    public ulong Tcb { get; }
    public ulong NcmContext { get; }
    public int State { get; }
    public int Pid { get; }
    public int IsLoopback { get; }
    public int ChannelStatus { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCreateNotificationChannelRequestArgs(Action`1<TcpCreateNotificationChannelRequestArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_NcmContext();
    public int get_State();
    public int get_Pid();
    public int get_IsLoopback();
    public int get_ChannelStatus();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCreateNotificationChannelRequestArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCreateNotificationChannelRequestProcessedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCreateNotificationChannelRequestProcessedArgs> m_target;
    public ulong Tcb { get; }
    public ulong NcmContext { get; }
    public int Pid { get; }
    public int Status { get; }
    public Guid PushNotificationGuid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCreateNotificationChannelRequestProcessedArgs(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_NcmContext();
    public int get_Pid();
    public int get_Status();
    public Guid get_PushNotificationGuid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCreateNotificationChannelRequestProcessingArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCreateNotificationChannelRequestProcessingArgs> m_target;
    public ulong Tcb { get; }
    public int IsRedirected { get; }
    public int WfpFailure { get; }
    public int Status { get; }
    public int WaitStatus { get; }
    public int IpAddrLength { get; }
    public int LocalIPv4Address { get; }
    public Byte[] LocalIPv6Address { get; }
    public int IPProtocol { get; }
    public int RemoteIPv4Address { get; }
    public Byte[] RemoteIPv6Address { get; }
    public int SrcPort { get; }
    public int DestPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCreateNotificationChannelRequestProcessingArgs(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_IsRedirected();
    public int get_WfpFailure();
    public int get_Status();
    public int get_WaitStatus();
    public int get_IpAddrLength();
    public int get_LocalIPv4Address();
    public Byte[] get_LocalIPv6Address();
    public int get_IPProtocol();
    public int get_RemoteIPv4Address();
    public Byte[] get_RemoteIPv6Address();
    public int get_SrcPort();
    public int get_DestPort();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCTcpAssignedBlocksArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCTcpAssignedBlocksArgs> m_target;
    public int AssignedBlocks { get; }
    public int AllocatedBlocks { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCTcpAssignedBlocksArgs(Action`1<TcpCTcpAssignedBlocksArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AssignedBlocks();
    public int get_AllocatedBlocks();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCTcpAssignedBlocksArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCTcpAssignedBlocksArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCTcpCongestionWndwArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCTcpCongestionWndwArgs> m_target;
    public ulong Tcb { get; }
    public int DWnd { get; }
    public int PrevDWnd { get; }
    public int BaseRtt { get; }
    public int AvgRtt { get; }
    public int Cwnd { get; }
    public int DiffWnd { get; }
    public int DwndIncrement { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCTcpCongestionWndwArgs(Action`1<TcpCTcpCongestionWndwArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_DWnd();
    public int get_PrevDWnd();
    public int get_BaseRtt();
    public int get_AvgRtt();
    public int get_Cwnd();
    public int get_DiffWnd();
    public int get_DwndIncrement();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCTcpCongestionWndwArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCTcpCongestionWndwArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCtcpDataTransferTimeout1348Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCtcpDataTransferTimeout1348Args> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SSThresh { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCtcpDataTransferTimeout1348Args(Action`1<TcpCtcpDataTransferTimeout1348Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SSThresh();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCTcpGammaArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCTcpGammaArgs> m_target;
    public ulong Tcb { get; }
    public int Gamma { get; }
    public int AverageBacklog { get; }
    public int AverageBacklogAcrossLFP { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCTcpGammaArgs(Action`1<TcpCTcpGammaArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Gamma();
    public int get_AverageBacklog();
    public int get_AverageBacklogAcrossLFP();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCTcpGammaArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCTcpGammaArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpCwndRestartArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpCwndRestartArgs> m_target;
    public ulong Tcb { get; }
    public int OldCwnd { get; }
    public int NewCwnd { get; }
    public int Processor { get; }
    public int CurrentTick { get; }
    public int IdleTick { get; }
    public int Rto { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpCwndRestartArgs(Action`1<TcpCwndRestartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_OldCwnd();
    public int get_NewCwnd();
    public int get_Processor();
    public int get_CurrentTick();
    public int get_IdleTick();
    public int get_Rto();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpCwndRestartArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpCwndRestartArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferCumAck1330Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferCumAck1330Args> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SndWnd { get; }
    public int BytesAcked { get; }
    public int SeqNo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferCumAck1330Args(Action`1<TcpDataTransferCumAck1330Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SndWnd();
    public int get_BytesAcked();
    public int get_SeqNo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferCumAck1330Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferCumAck1330Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferDupAck1343Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferDupAck1343Args> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SSThresh { get; }
    public int DupAckCount { get; }
    public int SeqNo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferDupAck1343Args(Action`1<TcpDataTransferDupAck1343Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SSThresh();
    public int get_DupAckCount();
    public int get_SeqNo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferDupAck1343Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferDupAck1343Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferEcnAlphaArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferEcnAlphaArgs> m_target;
    public ulong Tcb { get; }
    public int SndRound { get; }
    public int EcnTotalByteCount { get; }
    public int EcnTotalMarkedCount { get; }
    public int ThAck { get; }
    public int EcnAlpha { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferEcnAlphaArgs(Action`1<TcpDataTransferEcnAlphaArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndRound();
    public int get_EcnTotalByteCount();
    public int get_EcnTotalMarkedCount();
    public int get_ThAck();
    public int get_EcnAlpha();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferEcnAlphaArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferEcnAlphaArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferEcnArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferEcnArgs> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SSThresh { get; }
    public int SndUna { get; }
    public int Mss { get; }
    public int ThAck { get; }
    public int DWnd { get; }
    public int BaseRtt { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferEcnArgs(Action`1<TcpDataTransferEcnArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SSThresh();
    public int get_SndUna();
    public int get_Mss();
    public int get_ThAck();
    public int get_DWnd();
    public int get_BaseRtt();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferEcnArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferEcnArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferReceiveArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferReceiveArgs> m_target;
    public ulong Tcb { get; }
    public int NumBytes { get; }
    public int SeqNo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferReceiveArgs(Action`1<TcpDataTransferReceiveArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_NumBytes();
    public int get_SeqNo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferReceiveArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferReceiveArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferRetransmitRound1351Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferRetransmitRound1351Args> m_target;
    public ulong Tcb { get; }
    public int SndUna { get; }
    public int RexmitCount { get; }
    public int SRTT { get; }
    public int RTO { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferRetransmitRound1351Args(Action`1<TcpDataTransferRetransmitRound1351Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndUna();
    public int get_RexmitCount();
    public int get_SRTT();
    public int get_RTO();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferRetransmitRound1351Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferRetransmitRound1351Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferRttSample1341Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferRttSample1341Args> m_target;
    public ulong Tcb { get; }
    public int RttSample { get; }
    public int RttVar { get; }
    public int SRTT { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferRttSample1341Args(Action`1<TcpDataTransferRttSample1341Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_RttSample();
    public int get_RttVar();
    public int get_SRTT();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferRttSample1341Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferRttSample1341Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferSend1332Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferSend1332Args> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SndWnd { get; }
    public int BytesSent { get; }
    public int SeqNo { get; }
    public int SRtt { get; }
    public int RttVar { get; }
    public int RTO { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferSend1332Args(Action`1<TcpDataTransferSend1332Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SndWnd();
    public int get_BytesSent();
    public int get_SeqNo();
    public int get_SRtt();
    public int get_RttVar();
    public int get_RTO();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferSend1332Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferSend1332Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferSpuriousTimeout1345Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferSpuriousTimeout1345Args> m_target;
    public ulong Tcb { get; }
    public int SeqNo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferSpuriousTimeout1345Args(Action`1<TcpDataTransferSpuriousTimeout1345Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SeqNo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDataTransferTimeoutArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDataTransferTimeoutArgs> m_target;
    public ulong Tcb { get; }
    public int Cwnd { get; }
    public int SSThresh { get; }
    public int RttSample { get; }
    public int NumBytes { get; }
    public int SeqNo { get; }
    public int SndUna { get; }
    public int Round { get; }
    public int SRTT { get; }
    public int RTO { get; }
    public int DWnd { get; }
    public int BaseRtt { get; }
    public int DupAckCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDataTransferTimeoutArgs(Action`1<TcpDataTransferTimeoutArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Cwnd();
    public int get_SSThresh();
    public int get_RttSample();
    public int get_NumBytes();
    public int get_SeqNo();
    public int get_SndUna();
    public int get_Round();
    public int get_SRTT();
    public int get_RTO();
    public int get_DWnd();
    public int get_BaseRtt();
    public int get_DupAckCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDataTransferTimeoutArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDataTransferTimeoutArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDeliveryStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDeliveryStateChangeArgs> m_target;
    public ulong Tcb { get; }
    public ulong Delivery { get; }
    public TCPIP_TCP_DELIVERY_STATE OldDeliveryState { get; }
    public int NewDeliveryState { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDeliveryStateChangeArgs(Action`1<TcpDeliveryStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_Delivery();
    public TCPIP_TCP_DELIVERY_STATE get_OldDeliveryState();
    public int get_NewDeliveryState();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDeliveryStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDeliveryStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDisconnectTcbInjectFailedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDisconnectTcbInjectFailedArgs> m_target;
    public ulong Tcb { get; }
    public ulong Delivery { get; }
    public ulong Request { get; }
    public ulong NumBytes { get; }
    public int RequestFlags { get; }
    public ulong Length { get; }
    public int RequestStatus { get; }
    public int IsUrgentDelivery { get; }
    public int FullySatisfiedORDelayedPush { get; }
    public int RcvNxt { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDisconnectTcbInjectFailedArgs(Action`1<TcpDisconnectTcbInjectFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_Delivery();
    public ulong get_Request();
    public ulong get_NumBytes();
    public int get_RequestFlags();
    public ulong get_Length();
    public int get_RequestStatus();
    public int get_IsUrgentDelivery();
    public int get_FullySatisfiedORDelayedPush();
    public int get_RcvNxt();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpDisconnectTcbRequestArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpDisconnectTcbRequestArgs> m_target;
    public ulong Length { get; }
    public long Timeout { get; }
    public string Injected { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpDisconnectTcbRequestArgs(Action`1<TcpDisconnectTcbRequestArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Length();
    public long get_Timeout();
    public string get_Injected();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpDisconnectTcbRequestArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpDisconnectTcbRequestArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpEndpointAcquirePortReservationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpEndpointAcquirePortReservationArgs> m_target;
    public int ProcessId { get; }
    public int Status { get; }
    public int StartPort { get; }
    public int NumberOfPorts { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpEndpointAcquirePortReservationArgs(Action`1<TcpEndpointAcquirePortReservationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ProcessId();
    public int get_Status();
    public int get_StartPort();
    public int get_NumberOfPorts();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpEndpointAcquirePortReservationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpEndpointCreationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpEndpointCreationArgs> m_target;
    public int Status { get; }
    public ulong Endpoint { get; }
    public TCPIP_ADDRESS_FAMILY_TYPE AddressFamily { get; }
    public int Pid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpEndpointCreationArgs(Action`1<TcpEndpointCreationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Status();
    public ulong get_Endpoint();
    public TCPIP_ADDRESS_FAMILY_TYPE get_AddressFamily();
    public int get_Pid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpEndpointCreationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpEndpointCreationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpGlobalAddInterfaceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpGlobalAddInterfaceArgs> m_target;
    public int InterfaceIndex { get; }
    public int AddressFamily { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpGlobalAddInterfaceArgs(Action`1<TcpGlobalAddInterfaceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_AddressFamily();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpGlobalAddInterfaceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpGlobalAddInterfaceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpGlobalIsbBeginThrottleArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpGlobalIsbBeginThrottleArgs> m_target;
    public int HighMemoryEvent { get; }
    public int HighPagedPoolEvent { get; }
    public int LowMemoryEvent { get; }
    public int LowPagedPoolEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpGlobalIsbBeginThrottleArgs(Action`1<TcpGlobalIsbBeginThrottleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_HighMemoryEvent();
    public int get_HighPagedPoolEvent();
    public int get_LowMemoryEvent();
    public int get_LowPagedPoolEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpGlobalParametersArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpGlobalParametersArgs> m_target;
    public int AddressFamily { get; }
    public int EnablePMTUDiscovery { get; }
    public int TcpUseRFC1122UrgentPointer { get; }
    public int DisableTaskOffload { get; }
    public int EnablePMTUBHDetect { get; }
    public int DisableTcpChimneyOffload { get; }
    public int DisableRss { get; }
    public int EcnCapability { get; }
    public int TcpMaxDataRetransmissions { get; }
    public int KeepAliveTime { get; }
    public int KeepAliveInterval { get; }
    public int TcpTimedWaitDelay { get; }
    public int SillyWindowTimeout { get; }
    public int TcpFinWait2Delay { get; }
    public int CongestionAlgorithm { get; }
    public int Tcp1323Opts { get; }
    public int AutoTuningLevelLocal { get; }
    public int AutoTuningLevelGroupPolicy { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpGlobalParametersArgs(Action`1<TcpGlobalParametersArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AddressFamily();
    public int get_EnablePMTUDiscovery();
    public int get_TcpUseRFC1122UrgentPointer();
    public int get_DisableTaskOffload();
    public int get_EnablePMTUBHDetect();
    public int get_DisableTcpChimneyOffload();
    public int get_DisableRss();
    public int get_EcnCapability();
    public int get_TcpMaxDataRetransmissions();
    public int get_KeepAliveTime();
    public int get_KeepAliveInterval();
    public int get_TcpTimedWaitDelay();
    public int get_SillyWindowTimeout();
    public int get_TcpFinWait2Delay();
    public int get_CongestionAlgorithm();
    public int get_Tcp1323Opts();
    public int get_AutoTuningLevelLocal();
    public int get_AutoTuningLevelGroupPolicy();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpGlobalParametersArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpGlobalParametersArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpInspectConnectCompleteArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpInspectConnectCompleteArgs> m_target;
    public ulong Tcb { get; }
    public int Status { get; }
    public int AddressFamily { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpInspectConnectCompleteArgs(Action`1<TcpInspectConnectCompleteArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_Status();
    public int get_AddressFamily();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpInspectConnectCompleteArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpInspectConnectCompleteArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpInterfaceRscStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpInterfaceRscStateChangeArgs> m_target;
    public int IfIndex { get; }
    public TCPIP_PROPERTY StateV4 { get; }
    public int FailureReasonV4 { get; }
    public int StateV6 { get; }
    public TCPIP_OFFLOAD_FAILURE_REASON FailureReasonV6 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpInterfaceRscStateChangeArgs(Action`1<TcpInterfaceRscStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IfIndex();
    public TCPIP_PROPERTY get_StateV4();
    public int get_FailureReasonV4();
    public int get_StateV6();
    public TCPIP_OFFLOAD_FAILURE_REASON get_FailureReasonV6();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpInterfaceRscStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpInterfaceRscStateChangeArgs> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_ADDRESS_FAMILY_TYPE : Enum {
    public int value__;
    public static TCPIP_ADDRESS_FAMILY_TYPE IPV4;
    public static TCPIP_ADDRESS_FAMILY_TYPE IPV6;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_AF : Enum {
    public int value__;
    public static TCPIP_AF IPv4;
    public static TCPIP_AF IPv6;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_BOOLEAN : Enum {
    public int value__;
    public static TCPIP_BOOLEAN FALSE;
    public static TCPIP_BOOLEAN TRUE;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_COMPONENT : Enum {
    public int value__;
    public static TCPIP_COMPONENT IP;
    public static TCPIP_COMPONENT TCP;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_IP_DAD_STATE : Enum {
    public int value__;
    public static TCPIP_IP_DAD_STATE NldsInvalid;
    public static TCPIP_IP_DAD_STATE NldsTentative;
    public static TCPIP_IP_DAD_STATE NldsDuplicate;
    public static TCPIP_IP_DAD_STATE NldsDeprecated;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_IP_PHYSICALMEDIUM_TYPE : Enum {
    public int value__;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumUnspecified;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumWirelessLan;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumCableModem;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumPhoneLine;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumDSL;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMedium1394;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumWirelessWan;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumNative802_11;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumBluetooth;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumInfiniband;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumWiMax;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMedium802_3;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMedium802_5;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumIrda;
    public static TCPIP_IP_PHYSICALMEDIUM_TYPE NdisPhysicalMediumWiredWAN;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_LOOPBACK_FASTPATH_FAIL_REASON : Enum {
    public int value__;
    public static TCPIP_LOOPBACK_FASTPATH_FAIL_REASON LoopbackFastPathSocketOptionNotSetOnBothEnds;
    public static TCPIP_LOOPBACK_FASTPATH_FAIL_REASON FilterPolicyExistedForTheLoopbackConnection;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_COMPLETION_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_COMPLETION_TYPE Async;
    public static TCPIP_NDKPI_COMPLETION_TYPE Inline;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_CQ_ARM_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_CQ_ARM_TYPE NotifyErrors;
    public static TCPIP_NDKPI_CQ_ARM_TYPE NotifyAny;
    public static TCPIP_NDKPI_CQ_ARM_TYPE NotifySolicited;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_OBJECT_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_OBJECT_TYPE Undefined;
    public static TCPIP_NDKPI_OBJECT_TYPE Adapter;
    public static TCPIP_NDKPI_OBJECT_TYPE QP;
    public static TCPIP_NDKPI_OBJECT_TYPE CQ;
    public static TCPIP_NDKPI_OBJECT_TYPE MR;
    public static TCPIP_NDKPI_OBJECT_TYPE MW;
    public static TCPIP_NDKPI_OBJECT_TYPE PD;
    public static TCPIP_NDKPI_OBJECT_TYPE SharedEndpoint;
    public static TCPIP_NDKPI_OBJECT_TYPE Connector;
    public static TCPIP_NDKPI_OBJECT_TYPE Listener;
    public static TCPIP_NDKPI_OBJECT_TYPE SRQ;
    public static TCPIP_NDKPI_OBJECT_TYPE Max;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_OPERATION_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_OPERATION_TYPE Receive;
    public static TCPIP_NDKPI_OPERATION_TYPE Send;
    public static TCPIP_NDKPI_OPERATION_TYPE FastRegister;
    public static TCPIP_NDKPI_OPERATION_TYPE Bind;
    public static TCPIP_NDKPI_OPERATION_TYPE Invalidate;
    public static TCPIP_NDKPI_OPERATION_TYPE Read;
    public static TCPIP_NDKPI_OPERATION_TYPE Write;
    public static TCPIP_NDKPI_OPERATION_TYPE ReceiveAndInvalidate;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_SOCKADDR_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_SOCKADDR_TYPE Local;
    public static TCPIP_NDKPI_SOCKADDR_TYPE Remote;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NDKPI_TOKEN_TYPE : Enum {
    public int value__;
    public static TCPIP_NDKPI_TOKEN_TYPE Local;
    public static TCPIP_NDKPI_TOKEN_TYPE Remote;
    public static TCPIP_NDKPI_TOKEN_TYPE Privileged;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NEIGHBOR_EVENT : Enum {
    public int value__;
    public static TCPIP_NEIGHBOR_EVENT Map;
    public static TCPIP_NEIGHBOR_EVENT Configure;
    public static TCPIP_NEIGHBOR_EVENT TlSuspectsReachability;
    public static TCPIP_NEIGHBOR_EVENT TlConfirmsReachability;
    public static TCPIP_NEIGHBOR_EVENT NaConfirmsReachability;
    public static TCPIP_NEIGHBOR_EVENT ProbeReachability;
    public static TCPIP_NEIGHBOR_EVENT DadSolicitation;
    public static TCPIP_NEIGHBOR_EVENT NewDlAddress;
    public static TCPIP_NEIGHBOR_EVENT TriggerNud;
    public static TCPIP_NEIGHBOR_EVENT Resolve;
    public static TCPIP_NEIGHBOR_EVENT Timeout;
    public static TCPIP_NEIGHBOR_EVENT SendingNeighborSolicitation;
    public static TCPIP_NEIGHBOR_EVENT ReceivedNeighborSolicitation;
    public static TCPIP_NEIGHBOR_EVENT SendingNeighborAdvertisement;
    public static TCPIP_NEIGHBOR_EVENT ReceivedNeighborAdvertisement;
    public static TCPIP_NEIGHBOR_EVENT SendingRouterSolicitation;
    public static TCPIP_NEIGHBOR_EVENT ReceivedRouterSolicitation;
    public static TCPIP_NEIGHBOR_EVENT SendingRouterAdvertisement;
    public static TCPIP_NEIGHBOR_EVENT ReceivedRouterAdvertisement;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_NEIGHBOR_STATE : Enum {
    public int value__;
    public static TCPIP_NEIGHBOR_STATE Unreachable;
    public static TCPIP_NEIGHBOR_STATE Incomplete;
    public static TCPIP_NEIGHBOR_STATE Probe;
    public static TCPIP_NEIGHBOR_STATE Delay;
    public static TCPIP_NEIGHBOR_STATE Stale;
    public static TCPIP_NEIGHBOR_STATE Reachable;
    public static TCPIP_NEIGHBOR_STATE Permanent;
    public static TCPIP_NEIGHBOR_STATE Maximum;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_OFFLOAD_FAILURE_REASON : Enum {
    public int value__;
    public static TCPIP_OFFLOAD_FAILURE_REASON NoFailure;
    public static TCPIP_OFFLOAD_FAILURE_REASON Unknown;
    public static TCPIP_OFFLOAD_FAILURE_REASON SystemPolicy;
    public static TCPIP_OFFLOAD_FAILURE_REASON NICCapacityReached;
    public static TCPIP_OFFLOAD_FAILURE_REASON SystemLowOnMemory;
    public static TCPIP_OFFLOAD_FAILURE_REASON WFPDriverStreamInspection;
    public static TCPIP_OFFLOAD_FAILURE_REASON WeakHostModelEnabled;
    public static TCPIP_OFFLOAD_FAILURE_REASON ForwardingEnabled;
    public static TCPIP_OFFLOAD_FAILURE_REASON HardwareCapability;
    public static TCPIP_OFFLOAD_FAILURE_REASON NDISFilterNICProperty;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_PROPERTY : Enum {
    public int value__;
    public static TCPIP_PROPERTY Disabled;
    public static TCPIP_PROPERTY Enabled;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_Protocol : Enum {
    public int value__;
    public static TCPIP_Protocol IPv4;
    public static TCPIP_Protocol IPv6;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_RSS_ADDING : Enum {
    public int value__;
    public static TCPIP_RSS_ADDING removing;
    public static TCPIP_RSS_ADDING adding;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_RSS_BINDING_CAPABILITY : Enum {
    public int value__;
    public static TCPIP_RSS_BINDING_CAPABILITY notAvailable;
    public static TCPIP_RSS_BINDING_CAPABILITY available;
    public static TCPIP_RSS_BINDING_CAPABILITY availableOnPorts;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_RSS_BINDING_NOTIFICATION : Enum {
    public int value__;
    public static TCPIP_RSS_BINDING_NOTIFICATION unbind;
    public static TCPIP_RSS_BINDING_NOTIFICATION bind;
    public static TCPIP_RSS_BINDING_NOTIFICATION portChange;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_RSS_SETTING_VALUE : Enum {
    public int value__;
    public static TCPIP_RSS_SETTING_VALUE none;
    public static TCPIP_RSS_SETTING_VALUE receiveHash;
    public static TCPIP_RSS_SETTING_VALUE receiveScale;
    public static TCPIP_RSS_SETTING_VALUE enabled;
    public static TCPIP_RSS_SETTING_VALUE disabled;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_SILENT_MODE_EVENT : Enum {
    public int value__;
    public static TCPIP_SILENT_MODE_EVENT Enabled;
    public static TCPIP_SILENT_MODE_EVENT SendRequestDropped;
    public static TCPIP_SILENT_MODE_EVENT ReceiveDropped;
    public static TCPIP_SILENT_MODE_EVENT DisconnectRequestDropped;
    public static TCPIP_SILENT_MODE_EVENT ResetDropped;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_SLOW_PATH_REASON : Enum {
    public int value__;
    public static TCPIP_SLOW_PATH_REASON IPChecksumOffloadNotComputed;
    public static TCPIP_SLOW_PATH_REASON TCPChecksumOffloadNotComputed;
    public static TCPIP_SLOW_PATH_REASON UDPChecksumOffloadNotComputed;
    public static TCPIP_SLOW_PATH_REASON HeaderNotAlignedOn4byteBoundary;
    public static TCPIP_SLOW_PATH_REASON IPFragmentation;
    public static TCPIP_SLOW_PATH_REASON SourceAddressIsNotUnicast;
    public static TCPIP_SLOW_PATH_REASON DestinationAddressIsNotUnicast;
    public static TCPIP_SLOW_PATH_REASON EthernetAndIPHeaderNotContiguous;
    public static TCPIP_SLOW_PATH_REASON IPOptionsPresent;
    public static TCPIP_SLOW_PATH_REASON ESPOverUDP;
    public static TCPIP_SLOW_PATH_REASON LackContiguousSpaceForUpperLayerHeaders;
    public static TCPIP_SLOW_PATH_REASON WFPFiltersPresent;
    public static TCPIP_SLOW_PATH_REASON NexthopIsUnavailable;
    public static TCPIP_SLOW_PATH_REASON PathHasBeenInvalidatedDueToPolicyChange;
    public static TCPIP_SLOW_PATH_REASON DHCPAssignedIPAddressPromiscuousCountIsNonzero;
    public static TCPIP_SLOW_PATH_REASON ECNCodepointHasNotBeenNegotiatedForThisTraffic;
    public static TCPIP_SLOW_PATH_REASON SessionStateIsNotCompatible;
    public static TCPIP_SLOW_PATH_REASON TCPOptionsPresent;
    public static TCPIP_SLOW_PATH_REASON UDPIPv6ChecksumAbsentInPacket;
    public static TCPIP_SLOW_PATH_REASON PacketIsForALoopbackInterface;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_TCP_DELIVERY_STATE : Enum {
    public int value__;
    public static TCPIP_TCP_DELIVERY_STATE Indicate;
    public static TCPIP_TCP_DELIVERY_STATE Pend;
    public static TCPIP_TCP_DELIVERY_STATE Satisfy;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_TEMPLATE_TYPE : Enum {
    public int value__;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeInternet;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeDatacenter;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeCompat;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeDatacenterCustom;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeInternetCustom;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeDefault;
    public static TCPIP_TEMPLATE_TYPE TcpTemplateTypeAutomatic;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TCPIP_Transport_Protocol : Enum {
    public int value__;
    public static TCPIP_Transport_Protocol UnknownHeaderCorruptNotParsed;
    public static TCPIP_Transport_Protocol ICMP;
    public static TCPIP_Transport_Protocol IGMP;
    public static TCPIP_Transport_Protocol TCP;
    public static TCPIP_Transport_Protocol UDP;
    public static TCPIP_Transport_Protocol ROUTING;
    public static TCPIP_Transport_Protocol FRAGMENT;
    public static TCPIP_Transport_Protocol GRE;
    public static TCPIP_Transport_Protocol ESP;
    public static TCPIP_Transport_Protocol AH;
    public static TCPIP_Transport_Protocol ICMPV6;
    public static TCPIP_Transport_Protocol Unknown;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipAoacFailFastArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipAoacFailFastArgs> m_target;
    public int RequestType { get; }
    public ulong TcbOrEndpoint { get; }
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public int Status { get; }
    public int ProcessId { get; }
    public int InterfaceIndex { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipAoacFailFastArgs(Action`1<TcpipAoacFailFastArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_RequestType();
    public ulong get_TcbOrEndpoint();
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public int get_Status();
    public int get_ProcessId();
    public int get_InterfaceIndex();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipAoacFailFastArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipAoacFailFastArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipGenericArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipGenericArgs> m_target;
    public string AllocationObjectString { get; }
    public ulong Param1 { get; }
    public ulong Param2 { get; }
    public int Param3 { get; }
    public int Param4 { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipGenericArgs(Action`1<TcpipGenericArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AllocationObjectString();
    public ulong get_Param1();
    public ulong get_Param2();
    public int get_Param3();
    public int get_Param4();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipGenericArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipGenericArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipNetworkPacketDropsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipNetworkPacketDropsArgs> m_target;
    public int IPTransportProtocol { get; }
    public int AddressFamily { get; }
    public int SourceIPv4Address { get; }
    public int DestIPv4Address { get; }
    public int IPv6SourceIpAddrLength { get; }
    public Byte[] IPv6SourceAddress { get; }
    public int IPv6DestIpAddrLength { get; }
    public Byte[] IPv6DestAddress { get; }
    public int Reason { get; }
    public int PacketCount { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipNetworkPacketDropsArgs(Action`1<TcpipNetworkPacketDropsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IPTransportProtocol();
    public int get_AddressFamily();
    public int get_SourceIPv4Address();
    public int get_DestIPv4Address();
    public int get_IPv6SourceIpAddrLength();
    public Byte[] get_IPv6SourceAddress();
    public int get_IPv6DestIpAddrLength();
    public Byte[] get_IPv6DestAddress();
    public int get_Reason();
    public int get_PacketCount();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipNetworkPacketDropsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipNetworkPacketDropsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipPlumbWakePatternOnInterfaceArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipPlumbWakePatternOnInterfaceArgs> m_target;
    public int InterfaceIndex { get; }
    public int AoAcCapable { get; }
    public int BitmapPatternSupported { get; }
    public int ARPNDOffloadSupported { get; }
    public int IPAddressWakeReady { get; }
    public int PatternPriority { get; }
    public int PhysicalMediumType { get; }
    public int IpAddrLength { get; }
    public int IPv4Address { get; }
    public Byte[] IPv6Address { get; }
    public int IPProtocol { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipPlumbWakePatternOnInterfaceArgs(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public int get_AoAcCapable();
    public int get_BitmapPatternSupported();
    public int get_ARPNDOffloadSupported();
    public int get_IPAddressWakeReady();
    public int get_PatternPriority();
    public int get_PhysicalMediumType();
    public int get_IpAddrLength();
    public int get_IPv4Address();
    public Byte[] get_IPv6Address();
    public int get_IPProtocol();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipReceiveSlowPathArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipReceiveSlowPathArgs> m_target;
    public ulong Nbl { get; }
    public TCPIP_Transport_Protocol IPTransportProtocol { get; }
    public int AddressFamily { get; }
    public int SourceIPv4Address { get; }
    public int DestIPv4Address { get; }
    public int IPv6SourceIpAddrLength { get; }
    public Byte[] IPv6SourceAddress { get; }
    public int IPv6DestIpAddrLength { get; }
    public Byte[] IPv6DestAddress { get; }
    public int Reason { get; }
    public int NblCount { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipReceiveSlowPathArgs(Action`1<TcpipReceiveSlowPathArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Nbl();
    public TCPIP_Transport_Protocol get_IPTransportProtocol();
    public int get_AddressFamily();
    public int get_SourceIPv4Address();
    public int get_DestIPv4Address();
    public int get_IPv6SourceIpAddrLength();
    public Byte[] get_IPv6SourceAddress();
    public int get_IPv6DestIpAddrLength();
    public Byte[] get_IPv6DestAddress();
    public int get_Reason();
    public int get_NblCount();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipReceiveSlowPathArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipReceiveSlowPathArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipSendSlowPathArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipSendSlowPathArgs> m_target;
    public ulong Nbl { get; }
    public int IPTransportProtocol { get; }
    public int AddressFamily { get; }
    public int SourceIPv4Address { get; }
    public int DestIPv4Address { get; }
    public int IPv6SourceIpAddrLength { get; }
    public Byte[] IPv6SourceAddress { get; }
    public int IPv6DestIpAddrLength { get; }
    public Byte[] IPv6DestAddress { get; }
    public TCPIP_SLOW_PATH_REASON Reason { get; }
    public int NblCount { get; }
    public int IPProtocol { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipSendSlowPathArgs(Action`1<TcpipSendSlowPathArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Nbl();
    public int get_IPTransportProtocol();
    public int get_AddressFamily();
    public int get_SourceIPv4Address();
    public int get_DestIPv4Address();
    public int get_IPv6SourceIpAddrLength();
    public Byte[] get_IPv6SourceAddress();
    public int get_IPv6DestIpAddrLength();
    public Byte[] get_IPv6DestAddress();
    public TCPIP_SLOW_PATH_REASON get_Reason();
    public int get_NblCount();
    public int get_IPProtocol();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipSendSlowPathArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipSendSlowPathArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipSilentModeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipSilentModeArgs> m_target;
    public ulong Tcb { get; }
    public TCPIP_SILENT_MODE_EVENT SilentModeEvent { get; }
    public ulong Context { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipSilentModeArgs(Action`1<TcpipSilentModeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public TCPIP_SILENT_MODE_EVENT get_SilentModeEvent();
    public ulong get_Context();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipSilentModeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipSilentModeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipTransportPacketDropsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipTransportPacketDropsArgs> m_target;
    public int IPTransportProtocol { get; }
    public int AddressFamily { get; }
    public int LocalSockAddrLength { get; }
    public Byte[] LocalSockAddr { get; }
    public int RemoteSockAddrLength { get; }
    public Byte[] RemoteSockAddr { get; }
    public int Reason { get; }
    public int PacketCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipTransportPacketDropsArgs(Action`1<TcpipTransportPacketDropsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IPTransportProtocol();
    public int get_AddressFamily();
    public int get_LocalSockAddrLength();
    public Byte[] get_LocalSockAddr();
    public int get_RemoteSockAddrLength();
    public Byte[] get_RemoteSockAddr();
    public int get_Reason();
    public int get_PacketCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipTransportPacketDropsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipTransportPacketDropsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipUpdateInterfaceConfigFlagsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipUpdateInterfaceConfigFlagsArgs> m_target;
    public int InterfaceIndex { get; }
    public string Property { get; }
    public int Value { get; }
    public int InterfaceUpdateEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipUpdateInterfaceConfigFlagsArgs(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public string get_Property();
    public int get_Value();
    public int get_InterfaceUpdateEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipWakePacketIndicated1303Args : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipWakePacketIndicated1303Args> m_target;
    public long AdapterLuid { get; }
    public string PatternFriendlyName { get; }
    public int DlAddrLength { get; }
    public Byte[] SrcDLAddress { get; }
    public Byte[] DestDLAddress { get; }
    public int IpAddrLength { get; }
    public Byte[] SrcAddress { get; }
    public Byte[] DestAddress { get; }
    public int Protocol { get; }
    public int SrcPort { get; }
    public int DestPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipWakePacketIndicated1303Args(Action`1<TcpipWakePacketIndicated1303Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AdapterLuid();
    public string get_PatternFriendlyName();
    public int get_DlAddrLength();
    public Byte[] get_SrcDLAddress();
    public Byte[] get_DestDLAddress();
    public int get_IpAddrLength();
    public Byte[] get_SrcAddress();
    public Byte[] get_DestAddress();
    public int get_Protocol();
    public int get_SrcPort();
    public int get_DestPort();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipWakePacketIndicated1303Args> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipWakePacketIndicated1303Args> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpipWakePacketIndicatedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpipWakePacketIndicatedArgs> m_target;
    public long AdapterLuid { get; }
    public string PatternFriendlyName { get; }
    public int DlAddrLength { get; }
    public Byte[] SrcDLAddress { get; }
    public Byte[] DestDLAddress { get; }
    public int SrcAddress { get; }
    public int DestAddress { get; }
    public int Protocol { get; }
    public int SrcPort { get; }
    public int DestPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpipWakePacketIndicatedArgs(Action`1<TcpipWakePacketIndicatedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_AdapterLuid();
    public string get_PatternFriendlyName();
    public int get_DlAddrLength();
    public Byte[] get_SrcDLAddress();
    public Byte[] get_DestDLAddress();
    public int get_SrcAddress();
    public int get_DestAddress();
    public int get_Protocol();
    public int get_SrcPort();
    public int get_DestPort();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpipWakePacketIndicatedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpipWakePacketIndicatedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpIsPatternCoalescingRequiredArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpIsPatternCoalescingRequiredArgs> m_target;
    public ulong Tcb { get; }
    public int RequireAddressCoalescing { get; }
    public int LocalPort { get; }
    public int RtcStartPort { get; }
    public int RtcEndPort { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpIsPatternCoalescingRequiredArgs(Action`1<TcpIsPatternCoalescingRequiredArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_RequireAddressCoalescing();
    public int get_LocalPort();
    public int get_RtcStartPort();
    public int get_RtcEndPort();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpIsPatternCoalescingRequiredArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpIsPatternCoalescingRequiredArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpListenerActivationFailedAfArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpListenerActivationFailedAfArgs> m_target;
    public ulong Listener { get; }
    public int AddressLength { get; }
    public Byte[] SocketAddress { get; }
    public int Status { get; }
    public int ProcessId { get; }
    public int CompartmentId { get; }
    public int AddressFamily { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpListenerActivationFailedAfArgs(Action`1<TcpListenerActivationFailedAfArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Listener();
    public int get_AddressLength();
    public Byte[] get_SocketAddress();
    public int get_Status();
    public int get_ProcessId();
    public int get_CompartmentId();
    public int get_AddressFamily();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpListenerActivationFailedAfArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpListenerActivationFailedAfArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpLoopbackFastPathFailReasonArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpLoopbackFastPathFailReasonArgs> m_target;
    public ulong Tcb { get; }
    public TCPIP_LOOPBACK_FASTPATH_FAIL_REASON Cause { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpLoopbackFastPathFailReasonArgs(Action`1<TcpLoopbackFastPathFailReasonArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public TCPIP_LOOPBACK_FASTPATH_FAIL_REASON get_Cause();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpLoopbackFastPathFailReasonArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpLoopbackFastPathFailReasonArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpLossRecoveryEntryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpLossRecoveryEntryArgs> m_target;
    public ulong Tcb { get; }
    public int SndUna { get; }
    public int SndMax { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpLossRecoveryEntryArgs(Action`1<TcpLossRecoveryEntryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndUna();
    public int get_SndMax();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpLossRecoveryEntryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpLossRecoveryEntryArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpLossRecoverySackEntryArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpLossRecoverySackEntryArgs> m_target;
    public ulong Tcb { get; }
    public int SndUna { get; }
    public int SndMax { get; }
    public string Reason { get; }
    public TCPIP_BOOLEAN IsSack { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpLossRecoverySackEntryArgs(Action`1<TcpLossRecoverySackEntryArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndUna();
    public int get_SndMax();
    public string get_Reason();
    public TCPIP_BOOLEAN get_IsSack();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpLossRecoverySackEntryArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpLossRecoverySackEntryArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpLossRecoverySackExitArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpLossRecoverySackExitArgs> m_target;
    public ulong Tcb { get; }
    public int SndUna { get; }
    public int SndMax { get; }
    public string Reason { get; }
    public int IsSack { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpLossRecoverySackExitArgs(Action`1<TcpLossRecoverySackExitArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndUna();
    public int get_SndMax();
    public string get_Reason();
    public int get_IsSack();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpLossRecoverySackExitArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpLossRecoverySackExitArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpLsoArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpLsoArgs> m_target;
    public ulong Tcb { get; }
    public int BytesInSegment { get; }
    public int BytesRemaining { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpLsoArgs(Action`1<TcpLsoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_BytesInSegment();
    public int get_BytesRemaining();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpLsoArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpLsoArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMediaDisconnectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMediaDisconnectArgs> m_target;
    public int InterfaceIndex { get; }
    public string TraceString { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMediaDisconnectArgs(Action`1<TcpMediaDisconnectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_InterfaceIndex();
    public string get_TraceString();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMediaDisconnectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMediaDisconnectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMemoryFailuresArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMemoryFailuresArgs> m_target;
    public string AllocationObjectString { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMemoryFailuresArgs(Action`1<TcpMemoryFailuresArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AllocationObjectString();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMemoryFailuresArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMemoryFailuresArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpModuleStartedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpModuleStartedArgs> m_target;
    public string ModuleNameString { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpModuleStartedArgs(Action`1<TcpModuleStartedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_ModuleNameString();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpModuleStartedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpModuleStartedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMppNppEvaluationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMppNppEvaluationArgs> m_target;
    public int PhysicalPages { get; }
    public int NonPagedPoolPages { get; }
    public int CurrentWatermark { get; }
    public int PeakWatermark { get; }
    public int HighWatermark { get; }
    public int LowWatermark { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMppNppEvaluationArgs(Action`1<TcpMppNppEvaluationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PhysicalPages();
    public int get_NonPagedPoolPages();
    public int get_CurrentWatermark();
    public int get_PeakWatermark();
    public int get_HighWatermark();
    public int get_LowWatermark();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMppNppEvaluationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMppNppEvaluationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMppStartEpisodeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMppStartEpisodeArgs> m_target;
    public int LowNppEventState { get; }
    public int HighNppEventState { get; }
    public long EpisodeStartTick { get; }
    public long EpisodeStopTick { get; }
    public int CurrentWatermark { get; }
    public int LowWatermark { get; }
    public int ReentryWatermark { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMppStartEpisodeArgs(Action`1<TcpMppStartEpisodeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LowNppEventState();
    public int get_HighNppEventState();
    public long get_EpisodeStartTick();
    public long get_EpisodeStopTick();
    public int get_CurrentWatermark();
    public int get_LowWatermark();
    public int get_ReentryWatermark();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMppStartEpisodeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMppStartEpisodeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMppStartEpochArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMppStartEpochArgs> m_target;
    public int Epoch { get; }
    public int LowNppEventState { get; }
    public int HighNppEventState { get; }
    public long EpochStartTick { get; }
    public long EpochStopTick { get; }
    public int OldSynDropRate { get; }
    public int NewSynDropRate { get; }
    public int OldTcbAbortionRate { get; }
    public int NewTcbAbortionRate { get; }
    public int CurrentWatermark { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMppStartEpochArgs(Action`1<TcpMppStartEpochArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Epoch();
    public int get_LowNppEventState();
    public int get_HighNppEventState();
    public long get_EpochStartTick();
    public long get_EpochStopTick();
    public int get_OldSynDropRate();
    public int get_NewSynDropRate();
    public int get_OldTcbAbortionRate();
    public int get_NewTcbAbortionRate();
    public int get_CurrentWatermark();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMppStartEpochArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMppStartEpochArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMppStopEpisodeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMppStopEpisodeArgs> m_target;
    public int LowNppEventState { get; }
    public int HighNppEventState { get; }
    public long EpisodeStartTick { get; }
    public long EpisodeStopTick { get; }
    public int ReentryWatermark { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMppStopEpisodeArgs(Action`1<TcpMppStopEpisodeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LowNppEventState();
    public int get_HighNppEventState();
    public long get_EpisodeStartTick();
    public long get_EpisodeStopTick();
    public int get_ReentryWatermark();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMppStopEpisodeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMppStopEpisodeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpMppStopEpochArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpMppStopEpochArgs> m_target;
    public int Epoch { get; }
    public int LowNppEventState { get; }
    public int HighNppEventState { get; }
    public long EpochStartTick { get; }
    public long EpochStopTick { get; }
    public int SynDropRate { get; }
    public int TcbAbortionRate { get; }
    public int CurrentWatermark { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpMppStopEpochArgs(Action`1<TcpMppStopEpochArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Epoch();
    public int get_LowNppEventState();
    public int get_HighNppEventState();
    public long get_EpochStartTick();
    public long get_EpochStopTick();
    public int get_SynDropRate();
    public int get_TcbAbortionRate();
    public int get_CurrentWatermark();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpMppStopEpochArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpMppStopEpochArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpPlumbWakePatternArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpPlumbWakePatternArgs> m_target;
    public ulong Tcb { get; }
    public int SystemReserved { get; }
    public int WolHandle { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpPlumbWakePatternArgs(Action`1<TcpPlumbWakePatternArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SystemReserved();
    public int get_WolHandle();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpPlumbWakePatternArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpPlumbWakePatternArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpQueryNotificationChannelStatusRequestArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpQueryNotificationChannelStatusRequestArgs> m_target;
    public ulong Tcb { get; }
    public ulong NcmContext { get; }
    public int State { get; }
    public int Pid { get; }
    public int IsLoopback { get; }
    public TCP_NOTIFICATION_CHANNEL_STATUS ChannelStatus { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpQueryNotificationChannelStatusRequestArgs(Action`1<TcpQueryNotificationChannelStatusRequestArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_NcmContext();
    public int get_State();
    public int get_Pid();
    public int get_IsLoopback();
    public TCP_NOTIFICATION_CHANNEL_STATUS get_ChannelStatus();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpQueryNotificationChannelStatusRequestArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpQueryNotificationChannelStatusRequestArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpReleaseIndicationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpReleaseIndicationArgs> m_target;
    public ulong NBL { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpReleaseIndicationArgs(Action`1<TcpReleaseIndicationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_NBL();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpReleaseIndicationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpReleaseIndicationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpRequestConnectArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpRequestConnectArgs> m_target;
    public ulong Tcb { get; }
    public int LocalAddressLength { get; }
    public Byte[] LocalAddress { get; }
    public int RemoteAddressLength { get; }
    public Byte[] RemoteAddress { get; }
    public int NewState { get; }
    public int RexmitCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpRequestConnectArgs(Action`1<TcpRequestConnectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_LocalAddressLength();
    public Byte[] get_LocalAddress();
    public int get_RemoteAddressLength();
    public Byte[] get_RemoteAddress();
    public int get_NewState();
    public int get_RexmitCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpRequestConnectArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpRequestConnectArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpRscNblOobInfoArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpRscNblOobInfoArgs> m_target;
    public ulong Tcb { get; }
    public int CoalescedSegCount { get; }
    public int DupAckCount { get; }
    public int RscTcpTimestampDelta { get; }
    public int HeaderFlags { get; }
    public int EcnCePresent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpRscNblOobInfoArgs(Action`1<TcpRscNblOobInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_CoalescedSegCount();
    public int get_DupAckCount();
    public int get_RscTcpTimestampDelta();
    public int get_HeaderFlags();
    public int get_EcnCePresent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpRscNblOobInfoArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpRscNblOobInfoArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpRssTableChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpRssTableChangeArgs> m_target;
    public int SourceProcessor { get; }
    public int SourceActivity { get; }
    public int DestinationProcessor { get; }
    public int DestinationActivity { get; }
    public int PartitionMovesRemaining { get; }
    public int TableEntry { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpRssTableChangeArgs(Action`1<TcpRssTableChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_SourceProcessor();
    public int get_SourceActivity();
    public int get_DestinationProcessor();
    public int get_DestinationActivity();
    public int get_PartitionMovesRemaining();
    public int get_TableEntry();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpRssTableChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpRssTableChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpRtcPortRangeAssignmentArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpRtcPortRangeAssignmentArgs> m_target;
    public int AssignedFromRtcRange { get; }
    public int Port { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpRtcPortRangeAssignmentArgs(Action`1<TcpRtcPortRangeAssignmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AssignedFromRtcRange();
    public int get_Port();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpRtcPortRangeAssignmentArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpRtcPortRangeAssignmentArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSackUpdateArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSackUpdateArgs> m_target;
    public ulong Tcb { get; }
    public int SndUna { get; }
    public int SndMax { get; }
    public int SackCount { get; }
    public int SackBytes { get; }
    public int SackInFlight { get; }
    public int SackIsLost { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSackUpdateArgs(Action`1<TcpSackUpdateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SndUna();
    public int get_SndMax();
    public int get_SackCount();
    public int get_SackBytes();
    public int get_SackInFlight();
    public int get_SackIsLost();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSackUpdateArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSackUpdateArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSecurityRateLimitArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSecurityRateLimitArgs> m_target;
    public int SynAttacksDetected { get; }
    public int ReassemblyLimitViolations { get; }
    public int ConnectionRateLimitBacklog { get; }
    public int ConnectionRateLimitViolations { get; }
    public int LandAttackSegmentsDropped { get; }
    public int ConnectionRateLimitDepth { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSecurityRateLimitArgs(Action`1<TcpSecurityRateLimitArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_SynAttacksDetected();
    public int get_ReassemblyLimitViolations();
    public int get_ConnectionRateLimitBacklog();
    public int get_ConnectionRateLimitViolations();
    public int get_LandAttackSegmentsDropped();
    public int get_ConnectionRateLimitDepth();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSecurityRateLimitArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSecurityRateLimitArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSendPostedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSendPostedArgs> m_target;
    public ulong Tcb { get; }
    public string Injected { get; }
    public int NumBytes { get; }
    public int SndNxt { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSendPostedArgs(Action`1<TcpSendPostedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public string get_Injected();
    public int get_NumBytes();
    public int get_SndNxt();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSendPostedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSendPostedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSetTcpOptionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSetTcpOptionArgs> m_target;
    public ulong Tcb { get; }
    public int OptionType { get; }
    public int SoOptionType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSetTcpOptionArgs(Action`1<TcpSetTcpOptionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_OptionType();
    public int get_SoOptionType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSetTcpOptionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSetTcpOptionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSetTcpSoOptionArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSetTcpSoOptionArgs> m_target;
    public ulong Tcb { get; }
    public TCP_OPTION_TYPE OptionType { get; }
    public int SoOptionType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSetTcpSoOptionArgs(Action`1<TcpSetTcpSoOptionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public TCP_OPTION_TYPE get_OptionType();
    public int get_SoOptionType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSetTcpSoOptionArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSetTcpSoOptionArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSignalNotificationChannelEventArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSignalNotificationChannelEventArgs> m_target;
    public ulong Tcb { get; }
    public ulong NcmContext { get; }
    public int Pid { get; }
    public int RcvNxt { get; }
    public int Delivered { get; }
    public int Indicated { get; }
    public int FinalEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSignalNotificationChannelEventArgs(Action`1<TcpSignalNotificationChannelEventArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public ulong get_NcmContext();
    public int get_Pid();
    public int get_RcvNxt();
    public int get_Delivered();
    public int get_Indicated();
    public int get_FinalEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSignalNotificationChannelEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSignalNotificationChannelEventArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSrttMeasurementStartedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSrttMeasurementStartedArgs> m_target;
    public ulong Tcb { get; }
    public int SeqNum { get; }
    public int Tick { get; }
    public int RttSample { get; }
    public int NewSrtt { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSrttMeasurementStartedArgs(Action`1<TcpSrttMeasurementStartedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_SeqNum();
    public int get_Tick();
    public int get_RttSample();
    public int get_NewSrtt();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSrttMeasurementStartedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSrttMeasurementStartedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpSwsAvoidanceBeginArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpSwsAvoidanceBeginArgs> m_target;
    public ulong Tcb { get; }
    public int TimerValue { get; }
    public ulong BytesToSend { get; }
    public int SendAvailable { get; }
    public int Cwnd { get; }
    public ulong MaxSndWnd { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpSwsAvoidanceBeginArgs(Action`1<TcpSwsAvoidanceBeginArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_TimerValue();
    public ulong get_BytesToSend();
    public int get_SendAvailable();
    public int get_Cwnd();
    public ulong get_MaxSndWnd();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpSwsAvoidanceBeginArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpSwsAvoidanceBeginArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTcbChangeIsbArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTcbChangeIsbArgs> m_target;
    public int IsbSize { get; }
    public int Cwnd { get; }
    public int SndWnd { get; }
    public int SendAvailable { get; }
    public int SSThresh { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTcbChangeIsbArgs(Action`1<TcpTcbChangeIsbArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_IsbSize();
    public int get_Cwnd();
    public int get_SndWnd();
    public int get_SendAvailable();
    public int get_SSThresh();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTcbChangeIsbArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTcbChangeIsbArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTcbStartTimerArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTcbStartTimerArgs> m_target;
    public ulong Tcb { get; }
    public TCP_TIMER_TYPE TimerType { get; }
    public int WaitTimeMilliseconds { get; }
    public int Processor { get; }
    public long LastInterruptTime { get; }
    public long LastMicroseconds { get; }
    public long CachedKQPCValues { get; }
    public long CachedFrequencyValues { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTcbStartTimerArgs(Action`1<TcpTcbStartTimerArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public TCP_TIMER_TYPE get_TimerType();
    public int get_WaitTimeMilliseconds();
    public int get_Processor();
    public long get_LastInterruptTime();
    public long get_LastMicroseconds();
    public long get_CachedKQPCValues();
    public long get_CachedFrequencyValues();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTcbStartTimerArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTcbStartTimerArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTcbStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTcbStateChangeArgs> m_target;
    public int OldState { get; }
    public int NewState { get; }
    public int SndNxt { get; }
    public ulong Tcb { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTcbStateChangeArgs(Action`1<TcpTcbStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OldState();
    public int get_NewState();
    public int get_SndNxt();
    public ulong get_Tcb();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTcbStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTcbStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTcbStopTimerArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTcbStopTimerArgs> m_target;
    public ulong Tcb { get; }
    public int TimerType { get; }
    public int WaitTimeMilliseconds { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTcbStopTimerArgs(Action`1<TcpTcbStopTimerArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_TimerType();
    public int get_WaitTimeMilliseconds();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTcbStopTimerArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTcbStopTimerArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTcbSynSendArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTcbSynSendArgs> m_target;
    public ulong Tcb { get; }
    public int ISN { get; }
    public int RcvWnd { get; }
    public int RcvWndScale { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTcbSynSendArgs(Action`1<TcpTcbSynSendArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_ISN();
    public int get_RcvWnd();
    public int get_RcvWndScale();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTcbSynSendArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTcbSynSendArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTemplateChangedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTemplateChangedArgs> m_target;
    public ulong Tcb { get; }
    public int TemplateType { get; }
    public string Context { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTemplateChangedArgs(Action`1<TcpTemplateChangedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public int get_TemplateType();
    public string get_Context();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTemplateChangedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTemplateChangedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpTemplateParametersArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpTemplateParametersArgs> m_target;
    public ulong Tcb { get; }
    public TCPIP_TEMPLATE_TYPE TemplateType { get; }
    public int MinRto { get; }
    public int EnableCwndRestart { get; }
    public int InitialCwnd { get; }
    public TCP_CONGESTION_ALGORITHM CongestionAlgorithm { get; }
    public int MaxDataRetransmissions { get; }
    public int DelayedAckTicks { get; }
    public int DelayedAckFrequency { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpTemplateParametersArgs(Action`1<TcpTemplateParametersArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Tcb();
    public TCPIP_TEMPLATE_TYPE get_TemplateType();
    public int get_MinRto();
    public int get_EnableCwndRestart();
    public int get_InitialCwnd();
    public TCP_CONGESTION_ALGORITHM get_CongestionAlgorithm();
    public int get_MaxDataRetransmissions();
    public int get_DelayedAckTicks();
    public int get_DelayedAckFrequency();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpTemplateParametersArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpTemplateParametersArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdCacheEntryStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdCacheEntryStateChangeArgs> m_target;
    public int TcpWsdEtwPoint { get; }
    public int Processor { get; }
    public int Entry { get; }
    public TCP_WSD_CACHE_ENTRY_STATE OldState { get; }
    public int NewState { get; }
    public int ProbeCount { get; }
    public int ProbeCountWs { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdCacheEntryStateChangeArgs(Action`1<TcpWsdCacheEntryStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TcpWsdEtwPoint();
    public int get_Processor();
    public int get_Entry();
    public TCP_WSD_CACHE_ENTRY_STATE get_OldState();
    public int get_NewState();
    public int get_ProbeCount();
    public int get_ProbeCountWs();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdCacheEntryStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdCacheEntryStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdInitializationErrorsArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdInitializationErrorsArgs> m_target;
    public TCP_WSD TcpWsdEtwPoint { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdInitializationErrorsArgs(Action`1<TcpWsdInitializationErrorsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public TCP_WSD get_TcpWsdEtwPoint();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdInitializationErrorsArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdInitializationErrorsArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdInitializationInformationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdInitializationInformationArgs> m_target;
    public int TcpWsdEtwPoint { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdInitializationInformationArgs(Action`1<TcpWsdInitializationInformationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TcpWsdEtwPoint();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdInitializationInformationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdInitializationInformationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdProfileStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdProfileStateChangeArgs> m_target;
    public int Profile { get; }
    public int State { get; }
    public int Qualified { get; }
    public int EreQualified { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdProfileStateChangeArgs(Action`1<TcpWsdProfileStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Profile();
    public int get_State();
    public int get_Qualified();
    public int get_EreQualified();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdProfileStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdProfileStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdStateChangeArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdStateChangeArgs> m_target;
    public int OldEnabledState { get; }
    public int NewEnabledState { get; }
    public int OldThreshold { get; }
    public int NewThreshold { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdStateChangeArgs(Action`1<TcpWsdStateChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OldEnabledState();
    public int get_NewEnabledState();
    public int get_OldThreshold();
    public int get_NewThreshold();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdStateChangeArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdStateChangeArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.TcpWsdWsRestrictedProfileArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TcpWsdWsRestrictedProfileArgs> m_target;
    public int TcpWsdEtwPoint { get; }
    public ulong Tcb { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TcpWsdWsRestrictedProfileArgs(Action`1<TcpWsdWsRestrictedProfileArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TcpWsdEtwPoint();
    public ulong get_Tcb();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TcpWsdWsRestrictedProfileArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TcpWsdWsRestrictedProfileArgs> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UDP_ENDPOINT_STATE : Enum {
    public int value__;
    public static UDP_ENDPOINT_STATE NotActivated;
    public static UDP_ENDPOINT_STATE Activated;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpCreateNotificationChannelRequestArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpCreateNotificationChannelRequestArgs> m_target;
    public ulong UdpEndpoint { get; }
    public ulong NcmContext { get; }
    public UDP_ENDPOINT_STATE Activated { get; }
    public int Pid { get; }
    public int IsLoopback { get; }
    public int ChannelStatus { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpCreateNotificationChannelRequestArgs(Action`1<UdpCreateNotificationChannelRequestArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_UdpEndpoint();
    public ulong get_NcmContext();
    public UDP_ENDPOINT_STATE get_Activated();
    public int get_Pid();
    public int get_IsLoopback();
    public int get_ChannelStatus();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpCreateNotificationChannelRequestArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpCreateNotificationChannelRequestArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpCreateNotificationChannelRequestProcessedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpCreateNotificationChannelRequestProcessedArgs> m_target;
    public ulong UdpEndpoint { get; }
    public ulong NcmContext { get; }
    public int Pid { get; }
    public int Status { get; }
    public Guid PushNotificationGuid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpCreateNotificationChannelRequestProcessedArgs(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_UdpEndpoint();
    public ulong get_NcmContext();
    public int get_Pid();
    public int get_Status();
    public Guid get_PushNotificationGuid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpCreateNotificationChannelRequestProcessingArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpCreateNotificationChannelRequestProcessingArgs> m_target;
    public ulong UdpEndpoint { get; }
    public int IpAddrLength { get; }
    public int LocalIPv4Address { get; }
    public Byte[] LocalIPv6Address { get; }
    public int IPProtocol { get; }
    public int SrcPort { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpCreateNotificationChannelRequestProcessingArgs(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_UdpEndpoint();
    public int get_IpAddrLength();
    public int get_LocalIPv4Address();
    public Byte[] get_LocalIPv6Address();
    public int get_IPProtocol();
    public int get_SrcPort();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpEndpointSendMessagesArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpEndpointSendMessagesArgs> m_target;
    public ulong Endpoint { get; }
    public int NumMessages { get; }
    public int NumBytes { get; }
    public int LocalSockAddrLength { get; }
    public Byte[] LocalSockAddr { get; }
    public int RemoteSockAddrLength { get; }
    public Byte[] RemoteSockAddr { get; }
    public int Pid { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpEndpointSendMessagesArgs(Action`1<UdpEndpointSendMessagesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Endpoint();
    public int get_NumMessages();
    public int get_NumBytes();
    public int get_LocalSockAddrLength();
    public Byte[] get_LocalSockAddr();
    public int get_RemoteSockAddrLength();
    public Byte[] get_RemoteSockAddr();
    public int get_Pid();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpEndpointSendMessagesArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpEndpointSendMessagesArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpQueryNotificationChannelStatusRequestArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpQueryNotificationChannelStatusRequestArgs> m_target;
    public ulong UdpEndpoint { get; }
    public ulong NcmContext { get; }
    public int Activated { get; }
    public int Pid { get; }
    public int IsLoopback { get; }
    public int ChannelStatus { get; }
    public int Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpQueryNotificationChannelStatusRequestArgs(Action`1<UdpQueryNotificationChannelStatusRequestArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_UdpEndpoint();
    public ulong get_NcmContext();
    public int get_Activated();
    public int get_Pid();
    public int get_IsLoopback();
    public int get_ChannelStatus();
    public int get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIP.UdpSignalNotificationChannelEventArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<UdpSignalNotificationChannelEventArgs> m_target;
    public ulong UdpEndpoint { get; }
    public ulong NcmContext { get; }
    public int Pid { get; }
    public int Delivered { get; }
    public int FinalEvent { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal UdpSignalNotificationChannelEventArgs(Action`1<UdpSignalNotificationChannelEventArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_UdpEndpoint();
    public ulong get_NcmContext();
    public int get_Pid();
    public int get_Delivered();
    public int get_FinalEvent();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<UdpSignalNotificationChannelEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<UdpSignalNotificationChannelEventArgs> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsTCPIPTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public MicrosoftWindowsTCPIPTraceEventParser(TraceEventSource source);
    private static MicrosoftWindowsTCPIPTraceEventParser();
    public void add_FramingIfOperStatus(Action`1<FramingIfOperStatusArgs> value);
    public void remove_FramingIfOperStatus(Action`1<FramingIfOperStatusArgs> value);
    public void add_FramingNdisPause(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_FramingNdisPause(Action`1<TcpMediaDisconnectArgs> value);
    public void add_FramingNdisRestart(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_FramingNdisRestart(Action`1<TcpMediaDisconnectArgs> value);
    public void add_IpAddressAdded(Action`1<IpDadFailedArgs> value);
    public void remove_IpAddressAdded(Action`1<IpDadFailedArgs> value);
    public void add_IpAddressDeleted(Action`1<IpDadFailedArgs> value);
    public void remove_IpAddressDeleted(Action`1<IpDadFailedArgs> value);
    public void add_IpAddressStateNonPreferred(Action`1<IpDadFailedArgs> value);
    public void remove_IpAddressStateNonPreferred(Action`1<IpDadFailedArgs> value);
    public void add_IpAddressStatePreferred(Action`1<IpDadFailedArgs> value);
    public void remove_IpAddressStatePreferred(Action`1<IpDadFailedArgs> value);
    public void add_IpDadFailed(Action`1<IpDadFailedArgs> value);
    public void remove_IpDadFailed(Action`1<IpDadFailedArgs> value);
    public void add_IpDadStarted(Action`1<IpDadFailedArgs> value);
    public void remove_IpDadStarted(Action`1<IpDadFailedArgs> value);
    public void add_IpDadSuccessful(Action`1<IpDadSuccessfulArgs> value);
    public void remove_IpDadSuccessful(Action`1<IpDadSuccessfulArgs> value);
    public void add_IpInterfacePropertyChange(Action`1<IpInterfacePropertyChangeArgs> value);
    public void remove_IpInterfacePropertyChange(Action`1<IpInterfacePropertyChangeArgs> value);
    public void add_IpInterfaceRundown(Action`1<IpInterfaceRundownArgs> value);
    public void remove_IpInterfaceRundown(Action`1<IpInterfaceRundownArgs> value);
    public void add_IpInterfaceSpeedChange(Action`1<IpInterfaceSpeedChangeArgs> value);
    public void remove_IpInterfaceSpeedChange(Action`1<IpInterfaceSpeedChangeArgs> value);
    public void add_IpNeighborDiscovery(Action`1<IpNeighborDiscoveryArgs> value);
    public void remove_IpNeighborDiscovery(Action`1<IpNeighborDiscoveryArgs> value);
    public void add_IpNeighborReachable(Action`1<IpNeighborUnreachableArgs> value);
    public void remove_IpNeighborReachable(Action`1<IpNeighborUnreachableArgs> value);
    public void add_IpNeighborState(Action`1<IpNeighborStateArgs> value);
    public void remove_IpNeighborState(Action`1<IpNeighborStateArgs> value);
    public void add_IpNeighborUnreachable(Action`1<IpNeighborUnreachableArgs> value);
    public void remove_IpNeighborUnreachable(Action`1<IpNeighborUnreachableArgs> value);
    public void add_IpRouteCreated(Action`1<IpRouteCreatedArgs> value);
    public void remove_IpRouteCreated(Action`1<IpRouteCreatedArgs> value);
    public void add_IpRouteDeleted(Action`1<IpRouteCreatedArgs> value);
    public void remove_IpRouteDeleted(Action`1<IpRouteCreatedArgs> value);
    public void add_IpRoutePropertyChange(Action`1<IpRouteCreatedArgs> value);
    public void remove_IpRoutePropertyChange(Action`1<IpRouteCreatedArgs> value);
    public void add_IpSortedAddressPairs(Action`1<IpSortedAddressPairsArgs> value);
    public void remove_IpSortedAddressPairs(Action`1<IpSortedAddressPairsArgs> value);
    public void add_IpSourceAddressSelection(Action`1<IpSourceAddressSelectionArgs> value);
    public void remove_IpSourceAddressSelection(Action`1<IpSourceAddressSelectionArgs> value);
    public void add_Ndkpi_Accept(Action`1<Ndkpi_AcceptArgs> value);
    public void remove_Ndkpi_Accept(Action`1<Ndkpi_AcceptArgs> value);
    public void add_Ndkpi_Arm_Cq(Action`1<Ndkpi_Arm_CqArgs> value);
    public void remove_Ndkpi_Arm_Cq(Action`1<Ndkpi_Arm_CqArgs> value);
    public void add_Ndkpi_Bind(Action`1<Ndkpi_BindArgs> value);
    public void remove_Ndkpi_Bind(Action`1<Ndkpi_BindArgs> value);
    public void add_Ndkpi_Build_Lam(Action`1<Ndkpi_Build_LamArgs> value);
    public void remove_Ndkpi_Build_Lam(Action`1<Ndkpi_Build_LamArgs> value);
    public void add_Ndkpi_Close_Adapter_Enter(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
    public void remove_Ndkpi_Close_Adapter_Enter(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
    public void add_Ndkpi_Close_Adapter_Exit(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
    public void remove_Ndkpi_Close_Adapter_Exit(Action`1<Ndkpi_Close_Adapter_EnterArgs> value);
    public void add_Ndkpi_Close_Completion(Action`1<Ndkpi_Close_CompletionArgs> value);
    public void remove_Ndkpi_Close_Completion(Action`1<Ndkpi_Close_CompletionArgs> value);
    public void add_Ndkpi_Close_Obj(Action`1<Ndkpi_Close_ObjArgs> value);
    public void remove_Ndkpi_Close_Obj(Action`1<Ndkpi_Close_ObjArgs> value);
    public void add_Ndkpi_Complete_Connect(Action`1<Ndkpi_Complete_ConnectArgs> value);
    public void remove_Ndkpi_Complete_Connect(Action`1<Ndkpi_Complete_ConnectArgs> value);
    public void add_Ndkpi_Connect(Action`1<Ndkpi_ConnectArgs> value);
    public void remove_Ndkpi_Connect(Action`1<Ndkpi_ConnectArgs> value);
    public void add_Ndkpi_Connect_Event_Callback(Action`1<Ndkpi_Connect_Event_CallbackArgs> value);
    public void remove_Ndkpi_Connect_Event_Callback(Action`1<Ndkpi_Connect_Event_CallbackArgs> value);
    public void add_Ndkpi_Connect_Shared_Endpoint(Action`1<Ndkpi_ConnectArgs> value);
    public void remove_Ndkpi_Connect_Shared_Endpoint(Action`1<Ndkpi_ConnectArgs> value);
    public void add_Ndkpi_Control_Cq_Im(Action`1<Ndkpi_Control_Cq_ImArgs> value);
    public void remove_Ndkpi_Control_Cq_Im(Action`1<Ndkpi_Control_Cq_ImArgs> value);
    public void add_Ndkpi_Cq_Notification_Callback(Action`1<Ndkpi_Cq_Notification_CallbackArgs> value);
    public void remove_Ndkpi_Cq_Notification_Callback(Action`1<Ndkpi_Cq_Notification_CallbackArgs> value);
    public void add_Ndkpi_Cq_Result(Action`1<Ndkpi_Cq_ResultArgs> value);
    public void remove_Ndkpi_Cq_Result(Action`1<Ndkpi_Cq_ResultArgs> value);
    public void add_Ndkpi_Cq_Result_Ex(Action`1<Ndkpi_Cq_Result_ExArgs> value);
    public void remove_Ndkpi_Cq_Result_Ex(Action`1<Ndkpi_Cq_Result_ExArgs> value);
    public void add_Ndkpi_Create_Completion(Action`1<Ndkpi_Create_CompletionArgs> value);
    public void remove_Ndkpi_Create_Completion(Action`1<Ndkpi_Create_CompletionArgs> value);
    public void add_Ndkpi_Create_Connector(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void remove_Ndkpi_Create_Connector(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void add_Ndkpi_Create_Cq(Action`1<Ndkpi_Create_CqArgs> value);
    public void remove_Ndkpi_Create_Cq(Action`1<Ndkpi_Create_CqArgs> value);
    public void add_Ndkpi_Create_Listener(Action`1<Ndkpi_Create_ListenerArgs> value);
    public void remove_Ndkpi_Create_Listener(Action`1<Ndkpi_Create_ListenerArgs> value);
    public void add_Ndkpi_Create_Mr(Action`1<Ndkpi_Create_MrArgs> value);
    public void remove_Ndkpi_Create_Mr(Action`1<Ndkpi_Create_MrArgs> value);
    public void add_Ndkpi_Create_Mw(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void remove_Ndkpi_Create_Mw(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void add_Ndkpi_Create_Pd(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void remove_Ndkpi_Create_Pd(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void add_Ndkpi_Create_Qp(Action`1<Ndkpi_Create_QpArgs> value);
    public void remove_Ndkpi_Create_Qp(Action`1<Ndkpi_Create_QpArgs> value);
    public void add_Ndkpi_Create_Qp_Srq(Action`1<Ndkpi_Create_QpArgs> value);
    public void remove_Ndkpi_Create_Qp_Srq(Action`1<Ndkpi_Create_QpArgs> value);
    public void add_Ndkpi_Create_Shared_Endpoint(Action`1<Ndkpi_ListenArgs> value);
    public void remove_Ndkpi_Create_Shared_Endpoint(Action`1<Ndkpi_ListenArgs> value);
    public void add_Ndkpi_Create_Srq(Action`1<Ndkpi_Create_SrqArgs> value);
    public void remove_Ndkpi_Create_Srq(Action`1<Ndkpi_Create_SrqArgs> value);
    public void add_Ndkpi_Deregister_Mr(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void remove_Ndkpi_Deregister_Mr(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void add_Ndkpi_Disconnect(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void remove_Ndkpi_Disconnect(Action`1<Ndkpi_Deregister_MrArgs> value);
    public void add_Ndkpi_Disconnect_Event_Callback(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> value);
    public void remove_Ndkpi_Disconnect_Event_Callback(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> value);
    public void add_Ndkpi_Fast_Register(Action`1<Ndkpi_Fast_RegisterArgs> value);
    public void remove_Ndkpi_Fast_Register(Action`1<Ndkpi_Fast_RegisterArgs> value);
    public void add_Ndkpi_Flush(Action`1<Ndkpi_FlushArgs> value);
    public void remove_Ndkpi_Flush(Action`1<Ndkpi_FlushArgs> value);
    public void add_Ndkpi_Get_Connect_Data(Action`1<Ndkpi_Get_Connect_DataArgs> value);
    public void remove_Ndkpi_Get_Connect_Data(Action`1<Ndkpi_Get_Connect_DataArgs> value);
    public void add_Ndkpi_Get_Sockaddr(Action`1<Ndkpi_Get_SockaddrArgs> value);
    public void remove_Ndkpi_Get_Sockaddr(Action`1<Ndkpi_Get_SockaddrArgs> value);
    public void add_Ndkpi_Get_Sockaddr_Failure(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> value);
    public void remove_Ndkpi_Get_Sockaddr_Failure(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> value);
    public void add_Ndkpi_Get_Token(Action`1<Ndkpi_Get_TokenArgs> value);
    public void remove_Ndkpi_Get_Token(Action`1<Ndkpi_Get_TokenArgs> value);
    public void add_Ndkpi_Initialize_Fast_Register_Mr(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> value);
    public void remove_Ndkpi_Initialize_Fast_Register_Mr(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> value);
    public void add_Ndkpi_Interface_Event(Action`1<Ndkpi_Interface_EventArgs> value);
    public void remove_Ndkpi_Interface_Event(Action`1<Ndkpi_Interface_EventArgs> value);
    public void add_Ndkpi_Invalidate(Action`1<Ndkpi_InvalidateArgs> value);
    public void remove_Ndkpi_Invalidate(Action`1<Ndkpi_InvalidateArgs> value);
    public void add_Ndkpi_Listen(Action`1<Ndkpi_ListenArgs> value);
    public void remove_Ndkpi_Listen(Action`1<Ndkpi_ListenArgs> value);
    public void add_Ndkpi_Modify_Srq(Action`1<Ndkpi_Modify_SrqArgs> value);
    public void remove_Ndkpi_Modify_Srq(Action`1<Ndkpi_Modify_SrqArgs> value);
    public void add_Ndkpi_Open_Adapter(Action`1<Ndkpi_Open_AdapterArgs> value);
    public void remove_Ndkpi_Open_Adapter(Action`1<Ndkpi_Open_AdapterArgs> value);
    public void add_Ndkpi_Read(Action`1<Ndkpi_ReadArgs> value);
    public void remove_Ndkpi_Read(Action`1<Ndkpi_ReadArgs> value);
    public void add_Ndkpi_Receive(Action`1<Ndkpi_SendArgs> value);
    public void remove_Ndkpi_Receive(Action`1<Ndkpi_SendArgs> value);
    public void add_Ndkpi_Register_Mr(Action`1<Ndkpi_Register_MrArgs> value);
    public void remove_Ndkpi_Register_Mr(Action`1<Ndkpi_Register_MrArgs> value);
    public void add_Ndkpi_Reject(Action`1<Ndkpi_RejectArgs> value);
    public void remove_Ndkpi_Reject(Action`1<Ndkpi_RejectArgs> value);
    public void add_Ndkpi_Release_Lam(Action`1<Ndkpi_Release_LamArgs> value);
    public void remove_Ndkpi_Release_Lam(Action`1<Ndkpi_Release_LamArgs> value);
    public void add_Ndkpi_Request_Completion(Action`1<Ndkpi_Request_CompletionArgs> value);
    public void remove_Ndkpi_Request_Completion(Action`1<Ndkpi_Request_CompletionArgs> value);
    public void add_Ndkpi_Resize_Cq(Action`1<Ndkpi_Resize_CqArgs> value);
    public void remove_Ndkpi_Resize_Cq(Action`1<Ndkpi_Resize_CqArgs> value);
    public void add_Ndkpi_Send(Action`1<Ndkpi_SendArgs> value);
    public void remove_Ndkpi_Send(Action`1<Ndkpi_SendArgs> value);
    public void add_Ndkpi_Send_Invalidate(Action`1<Ndkpi_Send_InvalidateArgs> value);
    public void remove_Ndkpi_Send_Invalidate(Action`1<Ndkpi_Send_InvalidateArgs> value);
    public void add_Ndkpi_Srq_Notification_Callback(Action`1<Ndkpi_Srq_Notification_CallbackArgs> value);
    public void remove_Ndkpi_Srq_Notification_Callback(Action`1<Ndkpi_Srq_Notification_CallbackArgs> value);
    public void add_Ndkpi_Srq_Work_Request_Inline_Failure(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> value);
    public void remove_Ndkpi_Srq_Work_Request_Inline_Failure(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> value);
    public void add_Ndkpi_SrqReceive(Action`1<Ndkpi_SrqReceiveArgs> value);
    public void remove_Ndkpi_SrqReceive(Action`1<Ndkpi_SrqReceiveArgs> value);
    public void add_Ndkpi_Work_Request_Inline_Failure(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> value);
    public void remove_Ndkpi_Work_Request_Inline_Failure(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> value);
    public void add_Ndkpi_Write(Action`1<Ndkpi_ReadArgs> value);
    public void remove_Ndkpi_Write(Action`1<Ndkpi_ReadArgs> value);
    public void add_RssBindingBindComplete(Action`1<RssBindingBindCompleteArgs> value);
    public void remove_RssBindingBindComplete(Action`1<RssBindingBindCompleteArgs> value);
    public void add_RssBindingCapability(Action`1<RssBindingCapabilityArgs> value);
    public void remove_RssBindingCapability(Action`1<RssBindingCapabilityArgs> value);
    public void add_RssBindingChange(Action`1<RssBindingChangeArgs> value);
    public void remove_RssBindingChange(Action`1<RssBindingChangeArgs> value);
    public void add_RssBindingRundown(Action`1<RssBindingRundownArgs> value);
    public void remove_RssBindingRundown(Action`1<RssBindingRundownArgs> value);
    public void add_RssConfigurationChange(Action`1<RssConfigurationChangeArgs> value);
    public void remove_RssConfigurationChange(Action`1<RssConfigurationChangeArgs> value);
    public void add_RssFailure(Action`1<RssFailureArgs> value);
    public void remove_RssFailure(Action`1<RssFailureArgs> value);
    public void add_RssIndirectionChange(Action`1<RssIndirectionChangeArgs> value);
    public void remove_RssIndirectionChange(Action`1<RssIndirectionChangeArgs> value);
    public void add_RssInitializeIndirectionTable(Action`1<RssInitializeIndirectionTableArgs> value);
    public void remove_RssInitializeIndirectionTable(Action`1<RssInitializeIndirectionTableArgs> value);
    public void add_RssPortBindComplete(Action`1<RssPortBindCompleteArgs> value);
    public void remove_RssPortBindComplete(Action`1<RssPortBindCompleteArgs> value);
    public void add_RssPortCapabilities(Action`1<RssPortCapabilitiesArgs> value);
    public void remove_RssPortCapabilities(Action`1<RssPortCapabilitiesArgs> value);
    public void add_RssPortChange(Action`1<RssPortChangeArgs> value);
    public void remove_RssPortChange(Action`1<RssPortChangeArgs> value);
    public void add_RssPortNotSupported(Action`1<RssPortBindCompleteArgs> value);
    public void remove_RssPortNotSupported(Action`1<RssPortBindCompleteArgs> value);
    public void add_RssPortProcessors(Action`1<RssPortProcessorsArgs> value);
    public void remove_RssPortProcessors(Action`1<RssPortProcessorsArgs> value);
    public void add_RssPortReference(Action`1<RssPortReferenceArgs> value);
    public void remove_RssPortReference(Action`1<RssPortReferenceArgs> value);
    public void add_RssPortRundown(Action`1<RssPortRundownArgs> value);
    public void remove_RssPortRundown(Action`1<RssPortRundownArgs> value);
    public void add_RssProcessorAssignment(Action`1<RssProcessorAssignmentArgs> value);
    public void remove_RssProcessorAssignment(Action`1<RssProcessorAssignmentArgs> value);
    public void add_RssProcessorConsolidation(Action`1<RssProcessorConsolidationArgs> value);
    public void remove_RssProcessorConsolidation(Action`1<RssProcessorConsolidationArgs> value);
    public void add_RssProcessorUnassignment(Action`1<RssProcessorUnassignmentArgs> value);
    public void remove_RssProcessorUnassignment(Action`1<RssProcessorUnassignmentArgs> value);
    public void add_task_0(Action`1<task_0Args> value);
    public void remove_task_0(Action`1<task_0Args> value);
    public void add_task_01317(Action`1<task_01317Args> value);
    public void remove_task_01317(Action`1<task_01317Args> value);
    public void add_task_01318(Action`1<task_01318Args> value);
    public void remove_task_01318(Action`1<task_01318Args> value);
    public void add_task_01319(Action`1<task_01319Args> value);
    public void remove_task_01319(Action`1<task_01319Args> value);
    public void add_task_01320(Action`1<task_01320Args> value);
    public void remove_task_01320(Action`1<task_01320Args> value);
    public void add_TcpAbortTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpAbortTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpAbortTcbRequest(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpAbortTcbRequest(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpAcceptListenerComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpAcceptListenerComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpAcceptListenerInsertionFailure(Action`1<TcpAcceptListenerInsertionFailureArgs> value);
    public void remove_TcpAcceptListenerInsertionFailure(Action`1<TcpAcceptListenerInsertionFailureArgs> value);
    public void add_TcpAcceptListenerRejected(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpAcceptListenerRejected(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpAccpetListenerRouteLookupFailure(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpAccpetListenerRouteLookupFailure(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpAcquirePort(Action`1<TcpAcquirePortArgs> value);
    public void remove_TcpAcquirePort(Action`1<TcpAcquirePortArgs> value);
    public void add_TcpAcquireWeakRefPort(Action`1<TcpAcquirePortArgs> value);
    public void remove_TcpAcquireWeakRefPort(Action`1<TcpAcquirePortArgs> value);
    public void add_TcpAppSendBufferSize(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpAppSendBufferSize(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpAssignedWeakReferencePort(Action`1<TcpAcquirePortArgs> value);
    public void remove_TcpAssignedWeakReferencePort(Action`1<TcpAcquirePortArgs> value);
    public void add_TcpAutoTuningBegin(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningBegin(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpAutoTuningChangeRcvBufferSize(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningChangeRcvBufferSize(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpAutoTuningEnd(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningEnd(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpAutoTuningFailedAllocationFailure(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningFailedAllocationFailure(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpAutoTuningFailedBandwidthEstimation(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningFailedBandwidthEstimation(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpAutoTuningFailedRttEstimation(Action`1<TcpAutoTuningBeginArgs> value);
    public void remove_TcpAutoTuningFailedRttEstimation(Action`1<TcpAutoTuningBeginArgs> value);
    public void add_TcpBhDetectFullSizeAck(Action`1<TcpLossRecoverySackExitArgs> value);
    public void remove_TcpBhDetectFullSizeAck(Action`1<TcpLossRecoverySackExitArgs> value);
    public void add_TcpBindEndpointComplete(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void remove_TcpBindEndpointComplete(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void add_TcpBindEndpointInspectionFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void remove_TcpBindEndpointInspectionFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void add_TcpBindEndpointPortFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void remove_TcpBindEndpointPortFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void add_TcpBindEndpointResolutionFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void remove_TcpBindEndpointResolutionFailure(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void add_TcpBlackHoleDetectionEntry(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void remove_TcpBlackHoleDetectionEntry(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void add_TcpBlackHoleDetectionExit(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void remove_TcpBlackHoleDetectionExit(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void add_TcpBlackHoleDetectionFailed(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void remove_TcpBlackHoleDetectionFailed(Action`1<TcpBlackHoleDetectionEntryArgs> value);
    public void add_TcpCloseEndpoint(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void remove_TcpCloseEndpoint(Action`1<TcpBindEndpointResolutionFailureArgs> value);
    public void add_TcpCloseTcbRequest(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpCloseTcbRequest(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectFailedPortAcquire(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectFailedPortAcquire(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectionKeepAlive(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpConnectionKeepAlive(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpConnectionOffloadPmax(Action`1<TcpConnectionOffloadStatusArgs> value);
    public void remove_TcpConnectionOffloadPmax(Action`1<TcpConnectionOffloadStatusArgs> value);
    public void add_TcpConnectionOffloadStateChange(Action`1<TcpConnectionOffloadStateChangeArgs> value);
    public void remove_TcpConnectionOffloadStateChange(Action`1<TcpConnectionOffloadStateChangeArgs> value);
    public void add_TcpConnectionOffloadStatus(Action`1<TcpConnectionOffloadStatusArgs> value);
    public void remove_TcpConnectionOffloadStatus(Action`1<TcpConnectionOffloadStatusArgs> value);
    public void add_TcpConnectionRundown(Action`1<TcpConnectionRundownArgs> value);
    public void remove_TcpConnectionRundown(Action`1<TcpConnectionRundownArgs> value);
    public void add_TcpConnectionSummary(Action`1<TcpConnectionSummaryArgs> value);
    public void remove_TcpConnectionSummary(Action`1<TcpConnectionSummaryArgs> value);
    public void add_TcpConnectionTerminatedRcvdRst(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpConnectionTerminatedRcvdRst(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpConnectionTerminatedRcvdSyn(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpConnectionTerminatedRcvdSyn(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpConnectRestransmit(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpConnectRestransmit(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpConnectTcbCancel(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbCancel(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbCheckRateLimit(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbCheckRateLimit(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbEstatsFailed(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbEstatsFailed(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailDontFragment(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailDontFragment(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailedActiveConnect(Action`1<TcpInspectConnectCompleteArgs> value);
    public void remove_TcpConnectTcbFailedActiveConnect(Action`1<TcpInspectConnectCompleteArgs> value);
    public void add_TcpConnectTcbFailedAf(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailedAf(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailedCompartment(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailedCompartment(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailedInspect(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailedInspect(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailedRcvdRst(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpConnectTcbFailedRcvdRst(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpConnectTcbFailedRoute(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailedRoute(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailInsertion(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpConnectTcbFailInsertion(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpConnectTcbFailInspectConnectComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailInspectConnectComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailSessionState(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailSessionState(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbFailure(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbFailure(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbPassRateLimit(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void remove_TcpConnectTcbPassRateLimit(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void add_TcpConnectTcbProceeding(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbProceeding(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbRateLimitCancel(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbRateLimitCancel(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbRateLimitRelease(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbRateLimitRelease(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpConnectTcbSkipRateLimit(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void remove_TcpConnectTcbSkipRateLimit(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void add_TcpConnectTcbTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpConnectTcbTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpCreateEndpointAfFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void remove_TcpCreateEndpointAfFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void add_TcpCreateEndpointCompartmentFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void remove_TcpCreateEndpointCompartmentFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void add_TcpCreateEndpointComplete(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void remove_TcpCreateEndpointComplete(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void add_TcpCreateEndpointInspectionFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void remove_TcpCreateEndpointInspectionFailure(Action`1<TcpCreateEndpointAfFailureArgs> value);
    public void add_TcpCreateNotificationChannelRequest(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void remove_TcpCreateNotificationChannelRequest(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void add_TcpCreateNotificationChannelRequestProcessed(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> value);
    public void remove_TcpCreateNotificationChannelRequestProcessed(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> value);
    public void add_TcpCreateNotificationChannelRequestProcessing(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> value);
    public void remove_TcpCreateNotificationChannelRequestProcessing(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> value);
    public void add_TcpCTcpAssignedBlocks(Action`1<TcpCTcpAssignedBlocksArgs> value);
    public void remove_TcpCTcpAssignedBlocks(Action`1<TcpCTcpAssignedBlocksArgs> value);
    public void add_TcpCTcpCongestionWndw(Action`1<TcpCTcpCongestionWndwArgs> value);
    public void remove_TcpCTcpCongestionWndw(Action`1<TcpCTcpCongestionWndwArgs> value);
    public void add_TcpCtcpDataTransferCumAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpCtcpDataTransferCumAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpCtcpDataTransferCumAck1331(Action`1<TcpDataTransferCumAck1330Args> value);
    public void remove_TcpCtcpDataTransferCumAck1331(Action`1<TcpDataTransferCumAck1330Args> value);
    public void add_TcpCtcpDataTransferDupAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpCtcpDataTransferDupAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpCtcpDataTransferDupAck1344(Action`1<TcpDataTransferDupAck1343Args> value);
    public void remove_TcpCtcpDataTransferDupAck1344(Action`1<TcpDataTransferDupAck1343Args> value);
    public void add_TcpCtcpDataTransferEcn(Action`1<TcpDataTransferEcnArgs> value);
    public void remove_TcpCtcpDataTransferEcn(Action`1<TcpDataTransferEcnArgs> value);
    public void add_TcpCtcpDataTransferSend(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpCtcpDataTransferSend(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpCtcpDataTransferSend1333(Action`1<TcpDataTransferSend1332Args> value);
    public void remove_TcpCtcpDataTransferSend1333(Action`1<TcpDataTransferSend1332Args> value);
    public void add_TcpCtcpDataTransferSpuriousTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpCtcpDataTransferSpuriousTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpCtcpDataTransferSpuriousTimeout1349(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void remove_TcpCtcpDataTransferSpuriousTimeout1349(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void add_TcpCtcpDataTransferTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpCtcpDataTransferTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpCtcpDataTransferTimeout1348(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void remove_TcpCtcpDataTransferTimeout1348(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void add_TcpCTcpDelayWndwInactive(Action`1<TcpInspectConnectCompleteArgs> value);
    public void remove_TcpCTcpDelayWndwInactive(Action`1<TcpInspectConnectCompleteArgs> value);
    public void add_TcpCTcpGamma(Action`1<TcpCTcpGammaArgs> value);
    public void remove_TcpCTcpGamma(Action`1<TcpCTcpGammaArgs> value);
    public void add_TcpCwndRestart(Action`1<TcpCwndRestartArgs> value);
    public void remove_TcpCwndRestart(Action`1<TcpCwndRestartArgs> value);
    public void add_TcpCwndRestart1229(Action`1<TcpCwndRestartArgs> value);
    public void remove_TcpCwndRestart1229(Action`1<TcpCwndRestartArgs> value);
    public void add_TcpDataTransferCumAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferCumAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferCumAck1330(Action`1<TcpDataTransferCumAck1330Args> value);
    public void remove_TcpDataTransferCumAck1330(Action`1<TcpDataTransferCumAck1330Args> value);
    public void add_TcpDataTransferDupAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferDupAck(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferDupAck1343(Action`1<TcpDataTransferDupAck1343Args> value);
    public void remove_TcpDataTransferDupAck1343(Action`1<TcpDataTransferDupAck1343Args> value);
    public void add_TcpDataTransferEcn(Action`1<TcpDataTransferEcnArgs> value);
    public void remove_TcpDataTransferEcn(Action`1<TcpDataTransferEcnArgs> value);
    public void add_TcpDataTransferEcnAlpha(Action`1<TcpDataTransferEcnAlphaArgs> value);
    public void remove_TcpDataTransferEcnAlpha(Action`1<TcpDataTransferEcnAlphaArgs> value);
    public void add_TcpDataTransferReceive(Action`1<TcpDataTransferReceiveArgs> value);
    public void remove_TcpDataTransferReceive(Action`1<TcpDataTransferReceiveArgs> value);
    public void add_TcpDataTransferRestransmit(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpDataTransferRestransmit(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpDataTransferRetransmitRound(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferRetransmitRound(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferRetransmitRound1351(Action`1<TcpDataTransferRetransmitRound1351Args> value);
    public void remove_TcpDataTransferRetransmitRound1351(Action`1<TcpDataTransferRetransmitRound1351Args> value);
    public void add_TcpDataTransferRttSample(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferRttSample(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferRttSample1341(Action`1<TcpDataTransferRttSample1341Args> value);
    public void remove_TcpDataTransferRttSample1341(Action`1<TcpDataTransferRttSample1341Args> value);
    public void add_TcpDataTransferSend(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferSend(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferSend1332(Action`1<TcpDataTransferSend1332Args> value);
    public void remove_TcpDataTransferSend1332(Action`1<TcpDataTransferSend1332Args> value);
    public void add_TcpDataTransferSpuriousTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferSpuriousTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDataTransferSpuriousTimeout1345(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void remove_TcpDataTransferSpuriousTimeout1345(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void add_TcpDataTransferTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpDataTransferTimeout(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpDeliveryAccept(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryAccept(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryCompleting(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryCompleting(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryDataDropped(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryDataDropped(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryFin(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryFin(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryFlush(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryFlush(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryIndicated(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryIndicated(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryInjectingData(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryInjectingData(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryPush(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliveryPush(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliverySatisfied(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDeliverySatisfied(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDeliveryStateChange(Action`1<TcpDeliveryStateChangeArgs> value);
    public void remove_TcpDeliveryStateChange(Action`1<TcpDeliveryStateChangeArgs> value);
    public void add_TcpDeplumbWakePattern(Action`1<TcpPlumbWakePatternArgs> value);
    public void remove_TcpDeplumbWakePattern(Action`1<TcpPlumbWakePatternArgs> value);
    public void add_TcpDetachNotificationChannel(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void remove_TcpDetachNotificationChannel(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void add_TcpDisconnectTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbComplete(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpDisconnectTcbFinWait2Timeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbFinWait2Timeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpDisconnectTcbInjectFailed(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpDisconnectTcbInjectFailed(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpDisconnectTcbKeepaliveTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbKeepaliveTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpDisconnectTcbRequest(Action`1<TcpDisconnectTcbRequestArgs> value);
    public void remove_TcpDisconnectTcbRequest(Action`1<TcpDisconnectTcbRequestArgs> value);
    public void add_TcpDisconnectTcbRtoTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbRtoTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpDisconnectTcbTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpDisconnectTcbZeroWindowTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpDisconnectTcbZeroWindowTimeout(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpEndpointAcquirePortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void remove_TcpEndpointAcquirePortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void add_TcpEndpointCreation(Action`1<TcpEndpointCreationArgs> value);
    public void remove_TcpEndpointCreation(Action`1<TcpEndpointCreationArgs> value);
    public void add_TcpEndpointFailedPortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void remove_TcpEndpointFailedPortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void add_TcpFlushSack(Action`1<TcpLossRecoverySackExitArgs> value);
    public void remove_TcpFlushSack(Action`1<TcpLossRecoverySackExitArgs> value);
    public void add_TcpGlobalAddInterface(Action`1<TcpGlobalAddInterfaceArgs> value);
    public void remove_TcpGlobalAddInterface(Action`1<TcpGlobalAddInterfaceArgs> value);
    public void add_TcpGlobalConnectionRateLimitViolation(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpGlobalConnectionRateLimitViolation(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpGlobalDeleteInterface(Action`1<TcpGlobalAddInterfaceArgs> value);
    public void remove_TcpGlobalDeleteInterface(Action`1<TcpGlobalAddInterfaceArgs> value);
    public void add_TcpGlobalIsbBeginThrottle(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
    public void remove_TcpGlobalIsbBeginThrottle(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
    public void add_TcpGlobalIsbEndThrottle(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
    public void remove_TcpGlobalIsbEndThrottle(Action`1<TcpGlobalIsbBeginThrottleArgs> value);
    public void add_TcpGlobalLandAttackSegmentDrop(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpGlobalLandAttackSegmentDrop(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpGlobalParameters(Action`1<TcpGlobalParametersArgs> value);
    public void remove_TcpGlobalParameters(Action`1<TcpGlobalParametersArgs> value);
    public void add_TcpGlobalPortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void remove_TcpGlobalPortReservation(Action`1<TcpEndpointAcquirePortReservationArgs> value);
    public void add_TcpGlobalReassemblyLimitViolation(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpGlobalReassemblyLimitViolation(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpGlobalSynAttackEntry(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpGlobalSynAttackEntry(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpGlobalSynAttackExit(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpGlobalSynAttackExit(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpInitialCwndAdjusted(Action`1<TcpCwndRestartArgs> value);
    public void remove_TcpInitialCwndAdjusted(Action`1<TcpCwndRestartArgs> value);
    public void add_TcpInitiateSynRstValidation(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpInitiateSynRstValidation(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpInspectConnectComplete(Action`1<TcpInspectConnectCompleteArgs> value);
    public void remove_TcpInspectConnectComplete(Action`1<TcpInspectConnectCompleteArgs> value);
    public void add_TcpInterfaceRscStateChange(Action`1<TcpInterfaceRscStateChangeArgs> value);
    public void remove_TcpInterfaceRscStateChange(Action`1<TcpInterfaceRscStateChangeArgs> value);
    public void add_TcpipAoacFailFast(Action`1<TcpipAoacFailFastArgs> value);
    public void remove_TcpipAoacFailFast(Action`1<TcpipAoacFailFastArgs> value);
    public void add_TcpipGeneric(Action`1<TcpipGenericArgs> value);
    public void remove_TcpipGeneric(Action`1<TcpipGenericArgs> value);
    public void add_TcpipLimitedLinkConnectivity(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_TcpipLimitedLinkConnectivity(Action`1<TcpMediaDisconnectArgs> value);
    public void add_TcpipLimitedLinkConnectivity1323(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_TcpipLimitedLinkConnectivity1323(Action`1<TcpMediaDisconnectArgs> value);
    public void add_TcpipMediaConnect(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_TcpipMediaConnect(Action`1<TcpMediaDisconnectArgs> value);
    public void add_TcpipNetworkPacketDrops(Action`1<TcpipNetworkPacketDropsArgs> value);
    public void remove_TcpipNetworkPacketDrops(Action`1<TcpipNetworkPacketDropsArgs> value);
    public void add_TcpipPlumbWakePatternOnInterface(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> value);
    public void remove_TcpipPlumbWakePatternOnInterface(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> value);
    public void add_TcpipReceiveSlowPath(Action`1<TcpipReceiveSlowPathArgs> value);
    public void remove_TcpipReceiveSlowPath(Action`1<TcpipReceiveSlowPathArgs> value);
    public void add_TcpipSendSlowPath(Action`1<TcpipSendSlowPathArgs> value);
    public void remove_TcpipSendSlowPath(Action`1<TcpipSendSlowPathArgs> value);
    public void add_TcpipSilentMode(Action`1<TcpipSilentModeArgs> value);
    public void remove_TcpipSilentMode(Action`1<TcpipSilentModeArgs> value);
    public void add_TcpipTransportPacketDrops(Action`1<TcpipTransportPacketDropsArgs> value);
    public void remove_TcpipTransportPacketDrops(Action`1<TcpipTransportPacketDropsArgs> value);
    public void add_TcpipUpdateInterfaceConfigFlags(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> value);
    public void remove_TcpipUpdateInterfaceConfigFlags(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> value);
    public void add_TcpipWakePacketIndicated(Action`1<TcpipWakePacketIndicatedArgs> value);
    public void remove_TcpipWakePacketIndicated(Action`1<TcpipWakePacketIndicatedArgs> value);
    public void add_TcpipWakePacketIndicated1303(Action`1<TcpipWakePacketIndicated1303Args> value);
    public void remove_TcpipWakePacketIndicated1303(Action`1<TcpipWakePacketIndicated1303Args> value);
    public void add_TcpIsPatternCoalescingRequired(Action`1<TcpIsPatternCoalescingRequiredArgs> value);
    public void remove_TcpIsPatternCoalescingRequired(Action`1<TcpIsPatternCoalescingRequiredArgs> value);
    public void add_TcpListenerActivated(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerActivated(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerActivationFailedAf(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerActivationFailedAf(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerActivationFailedCompartment(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerActivationFailedCompartment(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerActivationFailedInspection1(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerActivationFailedInspection1(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerActivationFailedInspection2(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerActivationFailedInspection2(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerBindFailedPort(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerBindFailedPort(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerBindFailedResolution(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerBindFailedResolution(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpListenerUnbound(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void remove_TcpListenerUnbound(Action`1<TcpListenerActivationFailedAfArgs> value);
    public void add_TcpLoopbackFastPathFailReason(Action`1<TcpLoopbackFastPathFailReasonArgs> value);
    public void remove_TcpLoopbackFastPathFailReason(Action`1<TcpLoopbackFastPathFailReasonArgs> value);
    public void add_TcpLossRecoveryEntry(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpLossRecoveryEntry(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpLossRecoveryExit(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpLossRecoveryExit(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpLossRecoverySackEntry(Action`1<TcpLossRecoverySackEntryArgs> value);
    public void remove_TcpLossRecoverySackEntry(Action`1<TcpLossRecoverySackEntryArgs> value);
    public void add_TcpLossRecoverySackExit(Action`1<TcpLossRecoverySackExitArgs> value);
    public void remove_TcpLossRecoverySackExit(Action`1<TcpLossRecoverySackExitArgs> value);
    public void add_TcpLso(Action`1<TcpLsoArgs> value);
    public void remove_TcpLso(Action`1<TcpLsoArgs> value);
    public void add_TcpMediaDisconnect(Action`1<TcpMediaDisconnectArgs> value);
    public void remove_TcpMediaDisconnect(Action`1<TcpMediaDisconnectArgs> value);
    public void add_TcpMemoryFailures(Action`1<TcpMemoryFailuresArgs> value);
    public void remove_TcpMemoryFailures(Action`1<TcpMemoryFailuresArgs> value);
    public void add_TcpModuleStarted(Action`1<TcpModuleStartedArgs> value);
    public void remove_TcpModuleStarted(Action`1<TcpModuleStartedArgs> value);
    public void add_TcpModuleStopped(Action`1<TcpModuleStartedArgs> value);
    public void remove_TcpModuleStopped(Action`1<TcpModuleStartedArgs> value);
    public void add_TcpMppNppEvaluation(Action`1<TcpMppNppEvaluationArgs> value);
    public void remove_TcpMppNppEvaluation(Action`1<TcpMppNppEvaluationArgs> value);
    public void add_TcpMppStartEpisode(Action`1<TcpMppStartEpisodeArgs> value);
    public void remove_TcpMppStartEpisode(Action`1<TcpMppStartEpisodeArgs> value);
    public void add_TcpMppStartEpoch(Action`1<TcpMppStartEpochArgs> value);
    public void remove_TcpMppStartEpoch(Action`1<TcpMppStartEpochArgs> value);
    public void add_TcpMppStopEpisode(Action`1<TcpMppStopEpisodeArgs> value);
    public void remove_TcpMppStopEpisode(Action`1<TcpMppStopEpisodeArgs> value);
    public void add_TcpMppStopEpoch(Action`1<TcpMppStopEpochArgs> value);
    public void remove_TcpMppStopEpoch(Action`1<TcpMppStopEpochArgs> value);
    public void add_TcpPlumbWakePattern(Action`1<TcpPlumbWakePatternArgs> value);
    public void remove_TcpPlumbWakePattern(Action`1<TcpPlumbWakePatternArgs> value);
    public void add_TcpQueryNotificationChannelStatusRequest(Action`1<TcpQueryNotificationChannelStatusRequestArgs> value);
    public void remove_TcpQueryNotificationChannelStatusRequest(Action`1<TcpQueryNotificationChannelStatusRequestArgs> value);
    public void add_TcpRateLimitPathCancel(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void remove_TcpRateLimitPathCancel(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void add_TcpRateLimitPathRelease(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void remove_TcpRateLimitPathRelease(Action`1<TcpConnectTcbSkipRateLimitArgs> value);
    public void add_TcpReassemblyEntry(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpReassemblyEntry(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpReassemblyExit(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpReassemblyExit(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpReassemblyFlush(Action`1<TcpLossRecoverySackExitArgs> value);
    public void remove_TcpReassemblyFlush(Action`1<TcpLossRecoverySackExitArgs> value);
    public void add_TcpReceiveRequest(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpReceiveRequest(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpReleaseIndication(Action`1<TcpReleaseIndicationArgs> value);
    public void remove_TcpReleaseIndication(Action`1<TcpReleaseIndicationArgs> value);
    public void add_TcpReleasePort(Action`1<TcpAcquirePortArgs> value);
    public void remove_TcpReleasePort(Action`1<TcpAcquirePortArgs> value);
    public void add_TcpReplacePort(Action`1<TcpAcquirePortArgs> value);
    public void remove_TcpReplacePort(Action`1<TcpAcquirePortArgs> value);
    public void add_TcpRequestConnect(Action`1<TcpRequestConnectArgs> value);
    public void remove_TcpRequestConnect(Action`1<TcpRequestConnectArgs> value);
    public void add_TcpRscNblOobInfo(Action`1<TcpRscNblOobInfoArgs> value);
    public void remove_TcpRscNblOobInfo(Action`1<TcpRscNblOobInfoArgs> value);
    public void add_TcpRssTableChange(Action`1<TcpRssTableChangeArgs> value);
    public void remove_TcpRssTableChange(Action`1<TcpRssTableChangeArgs> value);
    public void add_TcpRtcPortRangeAssignment(Action`1<TcpRtcPortRangeAssignmentArgs> value);
    public void remove_TcpRtcPortRangeAssignment(Action`1<TcpRtcPortRangeAssignmentArgs> value);
    public void add_TcpRttResiliencyDetection(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpRttResiliencyDetection(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpRttResiliencyDetection1342(Action`1<TcpDataTransferRttSample1341Args> value);
    public void remove_TcpRttResiliencyDetection1342(Action`1<TcpDataTransferRttSample1341Args> value);
    public void add_TcpSackUpdate(Action`1<TcpSackUpdateArgs> value);
    public void remove_TcpSackUpdate(Action`1<TcpSackUpdateArgs> value);
    public void add_TcpSecurityRateLimit(Action`1<TcpSecurityRateLimitArgs> value);
    public void remove_TcpSecurityRateLimit(Action`1<TcpSecurityRateLimitArgs> value);
    public void add_TcpSendAdvance(Action`1<TcpSendPostedArgs> value);
    public void remove_TcpSendAdvance(Action`1<TcpSendPostedArgs> value);
    public void add_TcpSendPosted(Action`1<TcpSendPostedArgs> value);
    public void remove_TcpSendPosted(Action`1<TcpSendPostedArgs> value);
    public void add_TcpSendTransmitted(Action`1<TcpSendPostedArgs> value);
    public void remove_TcpSendTransmitted(Action`1<TcpSendPostedArgs> value);
    public void add_TcpSetTcpOption(Action`1<TcpSetTcpOptionArgs> value);
    public void remove_TcpSetTcpOption(Action`1<TcpSetTcpOptionArgs> value);
    public void add_TcpSetTcpSoOption(Action`1<TcpSetTcpSoOptionArgs> value);
    public void remove_TcpSetTcpSoOption(Action`1<TcpSetTcpSoOptionArgs> value);
    public void add_TcpShutdownTcb(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void remove_TcpShutdownTcb(Action`1<TcpAccpetListenerRouteLookupFailureArgs> value);
    public void add_TcpSignalNotificationChannelEvent(Action`1<TcpSignalNotificationChannelEventArgs> value);
    public void remove_TcpSignalNotificationChannelEvent(Action`1<TcpSignalNotificationChannelEventArgs> value);
    public void add_TcpSlowStartToCongestionAvoidance(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpSlowStartToCongestionAvoidance(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpSlowStartToCongestionAvoidance1350(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void remove_TcpSlowStartToCongestionAvoidance1350(Action`1<TcpCtcpDataTransferTimeout1348Args> value);
    public void add_TcpSpuriousRtoDetectionBegin(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpSpuriousRtoDetectionBegin(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpSpuriousRtoDetectionBegin1346(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void remove_TcpSpuriousRtoDetectionBegin1346(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void add_TcpSpuriousRtoDetectionEnd(Action`1<TcpDataTransferTimeoutArgs> value);
    public void remove_TcpSpuriousRtoDetectionEnd(Action`1<TcpDataTransferTimeoutArgs> value);
    public void add_TcpSpuriousRtoDetectionEnd1347(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void remove_TcpSpuriousRtoDetectionEnd1347(Action`1<TcpDataTransferSpuriousTimeout1345Args> value);
    public void add_TcpSrttMeasurementCancelled(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void remove_TcpSrttMeasurementCancelled(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void add_TcpSrttMeasurementComplete(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void remove_TcpSrttMeasurementComplete(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void add_TcpSrttMeasurementStarted(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void remove_TcpSrttMeasurementStarted(Action`1<TcpSrttMeasurementStartedArgs> value);
    public void add_TcpSwsAvoidanceBegin(Action`1<TcpSwsAvoidanceBeginArgs> value);
    public void remove_TcpSwsAvoidanceBegin(Action`1<TcpSwsAvoidanceBeginArgs> value);
    public void add_TcpSwsAvoidanceEnd(Action`1<TcpSwsAvoidanceBeginArgs> value);
    public void remove_TcpSwsAvoidanceEnd(Action`1<TcpSwsAvoidanceBeginArgs> value);
    public void add_TcpTcbChangeIsb(Action`1<TcpTcbChangeIsbArgs> value);
    public void remove_TcpTcbChangeIsb(Action`1<TcpTcbChangeIsbArgs> value);
    public void add_TcpTcbExpireTimer(Action`1<TcpTcbStopTimerArgs> value);
    public void remove_TcpTcbExpireTimer(Action`1<TcpTcbStopTimerArgs> value);
    public void add_TcpTcbInjectFinComplete(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpTcbInjectFinComplete(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpTcbInjectFinFailure(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpTcbInjectFinFailure(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpTcbInjectRcvFailure(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void remove_TcpTcbInjectRcvFailure(Action`1<TcpDisconnectTcbInjectFailedArgs> value);
    public void add_TcpTcbStartTimer(Action`1<TcpTcbStartTimerArgs> value);
    public void remove_TcpTcbStartTimer(Action`1<TcpTcbStartTimerArgs> value);
    public void add_TcpTcbStateChange(Action`1<TcpTcbStateChangeArgs> value);
    public void remove_TcpTcbStateChange(Action`1<TcpTcbStateChangeArgs> value);
    public void add_TcpTcbStopTimer(Action`1<TcpTcbStopTimerArgs> value);
    public void remove_TcpTcbStopTimer(Action`1<TcpTcbStopTimerArgs> value);
    public void add_TcpTcbSynSend(Action`1<TcpTcbSynSendArgs> value);
    public void remove_TcpTcbSynSend(Action`1<TcpTcbSynSendArgs> value);
    public void add_TcpTemplateChanged(Action`1<TcpTemplateChangedArgs> value);
    public void remove_TcpTemplateChanged(Action`1<TcpTemplateChangedArgs> value);
    public void add_TcpTemplateParameters(Action`1<TcpTemplateParametersArgs> value);
    public void remove_TcpTemplateParameters(Action`1<TcpTemplateParametersArgs> value);
    public void add_TcpUnlinkNotificationChannel(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void remove_TcpUnlinkNotificationChannel(Action`1<TcpCreateNotificationChannelRequestArgs> value);
    public void add_TcpWsdCacheEntryStateChange(Action`1<TcpWsdCacheEntryStateChangeArgs> value);
    public void remove_TcpWsdCacheEntryStateChange(Action`1<TcpWsdCacheEntryStateChangeArgs> value);
    public void add_TcpWsdInitializationErrors(Action`1<TcpWsdInitializationErrorsArgs> value);
    public void remove_TcpWsdInitializationErrors(Action`1<TcpWsdInitializationErrorsArgs> value);
    public void add_TcpWsdInitializationInformation(Action`1<TcpWsdInitializationInformationArgs> value);
    public void remove_TcpWsdInitializationInformation(Action`1<TcpWsdInitializationInformationArgs> value);
    public void add_TcpWsdProfileStateChange(Action`1<TcpWsdProfileStateChangeArgs> value);
    public void remove_TcpWsdProfileStateChange(Action`1<TcpWsdProfileStateChangeArgs> value);
    public void add_TcpWsdStateChange(Action`1<TcpWsdStateChangeArgs> value);
    public void remove_TcpWsdStateChange(Action`1<TcpWsdStateChangeArgs> value);
    public void add_TcpWsdWsRestrictedDestination(Action`1<TcpWsdWsRestrictedProfileArgs> value);
    public void remove_TcpWsdWsRestrictedDestination(Action`1<TcpWsdWsRestrictedProfileArgs> value);
    public void add_TcpWsdWsRestrictedProfile(Action`1<TcpWsdWsRestrictedProfileArgs> value);
    public void remove_TcpWsdWsRestrictedProfile(Action`1<TcpWsdWsRestrictedProfileArgs> value);
    public void add_TcpZeroWindowProbingBegin(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpZeroWindowProbingBegin(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_TcpZeroWindowProbingEnd(Action`1<TcpLossRecoveryEntryArgs> value);
    public void remove_TcpZeroWindowProbingEnd(Action`1<TcpLossRecoveryEntryArgs> value);
    public void add_UdpCreateNotificationChannelRequest(Action`1<UdpCreateNotificationChannelRequestArgs> value);
    public void remove_UdpCreateNotificationChannelRequest(Action`1<UdpCreateNotificationChannelRequestArgs> value);
    public void add_UdpCreateNotificationChannelRequestProcessed(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> value);
    public void remove_UdpCreateNotificationChannelRequestProcessed(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> value);
    public void add_UdpCreateNotificationChannelRequestProcessing(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> value);
    public void remove_UdpCreateNotificationChannelRequestProcessing(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> value);
    public void add_UdpDetachNotificationChannel(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    public void remove_UdpDetachNotificationChannel(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    public void add_UdpEndpointReceiveMessages(Action`1<UdpEndpointSendMessagesArgs> value);
    public void remove_UdpEndpointReceiveMessages(Action`1<UdpEndpointSendMessagesArgs> value);
    public void add_UdpEndpointSendMessages(Action`1<UdpEndpointSendMessagesArgs> value);
    public void remove_UdpEndpointSendMessages(Action`1<UdpEndpointSendMessagesArgs> value);
    public void add_UdpQueryNotificationChannelStatusRequest(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    public void remove_UdpQueryNotificationChannelStatusRequest(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    public void add_UdpSignalNotificationChannelEvent(Action`1<UdpSignalNotificationChannelEventArgs> value);
    public void remove_UdpSignalNotificationChannelEvent(Action`1<UdpSignalNotificationChannelEventArgs> value);
    public void add_UdpUnlinkNotificationChannel(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    public void remove_UdpUnlinkNotificationChannel(Action`1<UdpQueryNotificationChannelStatusRequestArgs> value);
    protected virtual string GetProviderName();
    private static FramingIfOperStatusArgs FramingIfOperStatusTemplate(Action`1<FramingIfOperStatusArgs> action);
    private static TcpMediaDisconnectArgs FramingNdisPauseTemplate(Action`1<TcpMediaDisconnectArgs> action);
    private static TcpMediaDisconnectArgs FramingNdisRestartTemplate(Action`1<TcpMediaDisconnectArgs> action);
    private static IpDadFailedArgs IpAddressAddedTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadFailedArgs IpAddressDeletedTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadFailedArgs IpAddressStateNonPreferredTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadFailedArgs IpAddressStatePreferredTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadFailedArgs IpDadFailedTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadFailedArgs IpDadStartedTemplate(Action`1<IpDadFailedArgs> action);
    private static IpDadSuccessfulArgs IpDadSuccessfulTemplate(Action`1<IpDadSuccessfulArgs> action);
    private static IpInterfacePropertyChangeArgs IpInterfacePropertyChangeTemplate(Action`1<IpInterfacePropertyChangeArgs> action);
    private static IpInterfaceRundownArgs IpInterfaceRundownTemplate(Action`1<IpInterfaceRundownArgs> action);
    private static IpInterfaceSpeedChangeArgs IpInterfaceSpeedChangeTemplate(Action`1<IpInterfaceSpeedChangeArgs> action);
    private static IpNeighborDiscoveryArgs IpNeighborDiscoveryTemplate(Action`1<IpNeighborDiscoveryArgs> action);
    private static IpNeighborUnreachableArgs IpNeighborReachableTemplate(Action`1<IpNeighborUnreachableArgs> action);
    private static IpNeighborStateArgs IpNeighborStateTemplate(Action`1<IpNeighborStateArgs> action);
    private static IpNeighborUnreachableArgs IpNeighborUnreachableTemplate(Action`1<IpNeighborUnreachableArgs> action);
    private static IpRouteCreatedArgs IpRouteCreatedTemplate(Action`1<IpRouteCreatedArgs> action);
    private static IpRouteCreatedArgs IpRouteDeletedTemplate(Action`1<IpRouteCreatedArgs> action);
    private static IpRouteCreatedArgs IpRoutePropertyChangeTemplate(Action`1<IpRouteCreatedArgs> action);
    private static IpSortedAddressPairsArgs IpSortedAddressPairsTemplate(Action`1<IpSortedAddressPairsArgs> action);
    private static IpSourceAddressSelectionArgs IpSourceAddressSelectionTemplate(Action`1<IpSourceAddressSelectionArgs> action);
    private static Ndkpi_AcceptArgs Ndkpi_AcceptTemplate(Action`1<Ndkpi_AcceptArgs> action);
    private static Ndkpi_Arm_CqArgs Ndkpi_Arm_CqTemplate(Action`1<Ndkpi_Arm_CqArgs> action);
    private static Ndkpi_BindArgs Ndkpi_BindTemplate(Action`1<Ndkpi_BindArgs> action);
    private static Ndkpi_Build_LamArgs Ndkpi_Build_LamTemplate(Action`1<Ndkpi_Build_LamArgs> action);
    private static Ndkpi_Close_Adapter_EnterArgs Ndkpi_Close_Adapter_EnterTemplate(Action`1<Ndkpi_Close_Adapter_EnterArgs> action);
    private static Ndkpi_Close_Adapter_EnterArgs Ndkpi_Close_Adapter_ExitTemplate(Action`1<Ndkpi_Close_Adapter_EnterArgs> action);
    private static Ndkpi_Close_CompletionArgs Ndkpi_Close_CompletionTemplate(Action`1<Ndkpi_Close_CompletionArgs> action);
    private static Ndkpi_Close_ObjArgs Ndkpi_Close_ObjTemplate(Action`1<Ndkpi_Close_ObjArgs> action);
    private static Ndkpi_Complete_ConnectArgs Ndkpi_Complete_ConnectTemplate(Action`1<Ndkpi_Complete_ConnectArgs> action);
    private static Ndkpi_ConnectArgs Ndkpi_ConnectTemplate(Action`1<Ndkpi_ConnectArgs> action);
    private static Ndkpi_Connect_Event_CallbackArgs Ndkpi_Connect_Event_CallbackTemplate(Action`1<Ndkpi_Connect_Event_CallbackArgs> action);
    private static Ndkpi_ConnectArgs Ndkpi_Connect_Shared_EndpointTemplate(Action`1<Ndkpi_ConnectArgs> action);
    private static Ndkpi_Control_Cq_ImArgs Ndkpi_Control_Cq_ImTemplate(Action`1<Ndkpi_Control_Cq_ImArgs> action);
    private static Ndkpi_Cq_Notification_CallbackArgs Ndkpi_Cq_Notification_CallbackTemplate(Action`1<Ndkpi_Cq_Notification_CallbackArgs> action);
    private static Ndkpi_Cq_ResultArgs Ndkpi_Cq_ResultTemplate(Action`1<Ndkpi_Cq_ResultArgs> action);
    private static Ndkpi_Cq_Result_ExArgs Ndkpi_Cq_Result_ExTemplate(Action`1<Ndkpi_Cq_Result_ExArgs> action);
    private static Ndkpi_Create_CompletionArgs Ndkpi_Create_CompletionTemplate(Action`1<Ndkpi_Create_CompletionArgs> action);
    private static Ndkpi_Deregister_MrArgs Ndkpi_Create_ConnectorTemplate(Action`1<Ndkpi_Deregister_MrArgs> action);
    private static Ndkpi_Create_CqArgs Ndkpi_Create_CqTemplate(Action`1<Ndkpi_Create_CqArgs> action);
    private static Ndkpi_Create_ListenerArgs Ndkpi_Create_ListenerTemplate(Action`1<Ndkpi_Create_ListenerArgs> action);
    private static Ndkpi_Create_MrArgs Ndkpi_Create_MrTemplate(Action`1<Ndkpi_Create_MrArgs> action);
    private static Ndkpi_Deregister_MrArgs Ndkpi_Create_MwTemplate(Action`1<Ndkpi_Deregister_MrArgs> action);
    private static Ndkpi_Deregister_MrArgs Ndkpi_Create_PdTemplate(Action`1<Ndkpi_Deregister_MrArgs> action);
    private static Ndkpi_Create_QpArgs Ndkpi_Create_QpTemplate(Action`1<Ndkpi_Create_QpArgs> action);
    private static Ndkpi_Create_QpArgs Ndkpi_Create_Qp_SrqTemplate(Action`1<Ndkpi_Create_QpArgs> action);
    private static Ndkpi_ListenArgs Ndkpi_Create_Shared_EndpointTemplate(Action`1<Ndkpi_ListenArgs> action);
    private static Ndkpi_Create_SrqArgs Ndkpi_Create_SrqTemplate(Action`1<Ndkpi_Create_SrqArgs> action);
    private static Ndkpi_Deregister_MrArgs Ndkpi_Deregister_MrTemplate(Action`1<Ndkpi_Deregister_MrArgs> action);
    private static Ndkpi_Deregister_MrArgs Ndkpi_DisconnectTemplate(Action`1<Ndkpi_Deregister_MrArgs> action);
    private static Ndkpi_Disconnect_Event_CallbackArgs Ndkpi_Disconnect_Event_CallbackTemplate(Action`1<Ndkpi_Disconnect_Event_CallbackArgs> action);
    private static Ndkpi_Fast_RegisterArgs Ndkpi_Fast_RegisterTemplate(Action`1<Ndkpi_Fast_RegisterArgs> action);
    private static Ndkpi_FlushArgs Ndkpi_FlushTemplate(Action`1<Ndkpi_FlushArgs> action);
    private static Ndkpi_Get_Connect_DataArgs Ndkpi_Get_Connect_DataTemplate(Action`1<Ndkpi_Get_Connect_DataArgs> action);
    private static Ndkpi_Get_SockaddrArgs Ndkpi_Get_SockaddrTemplate(Action`1<Ndkpi_Get_SockaddrArgs> action);
    private static Ndkpi_Get_Sockaddr_FailureArgs Ndkpi_Get_Sockaddr_FailureTemplate(Action`1<Ndkpi_Get_Sockaddr_FailureArgs> action);
    private static Ndkpi_Get_TokenArgs Ndkpi_Get_TokenTemplate(Action`1<Ndkpi_Get_TokenArgs> action);
    private static Ndkpi_Initialize_Fast_Register_MrArgs Ndkpi_Initialize_Fast_Register_MrTemplate(Action`1<Ndkpi_Initialize_Fast_Register_MrArgs> action);
    private static Ndkpi_Interface_EventArgs Ndkpi_Interface_EventTemplate(Action`1<Ndkpi_Interface_EventArgs> action);
    private static Ndkpi_InvalidateArgs Ndkpi_InvalidateTemplate(Action`1<Ndkpi_InvalidateArgs> action);
    private static Ndkpi_ListenArgs Ndkpi_ListenTemplate(Action`1<Ndkpi_ListenArgs> action);
    private static Ndkpi_Modify_SrqArgs Ndkpi_Modify_SrqTemplate(Action`1<Ndkpi_Modify_SrqArgs> action);
    private static Ndkpi_Open_AdapterArgs Ndkpi_Open_AdapterTemplate(Action`1<Ndkpi_Open_AdapterArgs> action);
    private static Ndkpi_ReadArgs Ndkpi_ReadTemplate(Action`1<Ndkpi_ReadArgs> action);
    private static Ndkpi_SendArgs Ndkpi_ReceiveTemplate(Action`1<Ndkpi_SendArgs> action);
    private static Ndkpi_Register_MrArgs Ndkpi_Register_MrTemplate(Action`1<Ndkpi_Register_MrArgs> action);
    private static Ndkpi_RejectArgs Ndkpi_RejectTemplate(Action`1<Ndkpi_RejectArgs> action);
    private static Ndkpi_Release_LamArgs Ndkpi_Release_LamTemplate(Action`1<Ndkpi_Release_LamArgs> action);
    private static Ndkpi_Request_CompletionArgs Ndkpi_Request_CompletionTemplate(Action`1<Ndkpi_Request_CompletionArgs> action);
    private static Ndkpi_Resize_CqArgs Ndkpi_Resize_CqTemplate(Action`1<Ndkpi_Resize_CqArgs> action);
    private static Ndkpi_SendArgs Ndkpi_SendTemplate(Action`1<Ndkpi_SendArgs> action);
    private static Ndkpi_Send_InvalidateArgs Ndkpi_Send_InvalidateTemplate(Action`1<Ndkpi_Send_InvalidateArgs> action);
    private static Ndkpi_Srq_Notification_CallbackArgs Ndkpi_Srq_Notification_CallbackTemplate(Action`1<Ndkpi_Srq_Notification_CallbackArgs> action);
    private static Ndkpi_Srq_Work_Request_Inline_FailureArgs Ndkpi_Srq_Work_Request_Inline_FailureTemplate(Action`1<Ndkpi_Srq_Work_Request_Inline_FailureArgs> action);
    private static Ndkpi_SrqReceiveArgs Ndkpi_SrqReceiveTemplate(Action`1<Ndkpi_SrqReceiveArgs> action);
    private static Ndkpi_Work_Request_Inline_FailureArgs Ndkpi_Work_Request_Inline_FailureTemplate(Action`1<Ndkpi_Work_Request_Inline_FailureArgs> action);
    private static Ndkpi_ReadArgs Ndkpi_WriteTemplate(Action`1<Ndkpi_ReadArgs> action);
    private static RssBindingBindCompleteArgs RssBindingBindCompleteTemplate(Action`1<RssBindingBindCompleteArgs> action);
    private static RssBindingCapabilityArgs RssBindingCapabilityTemplate(Action`1<RssBindingCapabilityArgs> action);
    private static RssBindingChangeArgs RssBindingChangeTemplate(Action`1<RssBindingChangeArgs> action);
    private static RssBindingRundownArgs RssBindingRundownTemplate(Action`1<RssBindingRundownArgs> action);
    private static RssConfigurationChangeArgs RssConfigurationChangeTemplate(Action`1<RssConfigurationChangeArgs> action);
    private static RssFailureArgs RssFailureTemplate(Action`1<RssFailureArgs> action);
    private static RssIndirectionChangeArgs RssIndirectionChangeTemplate(Action`1<RssIndirectionChangeArgs> action);
    private static RssInitializeIndirectionTableArgs RssInitializeIndirectionTableTemplate(Action`1<RssInitializeIndirectionTableArgs> action);
    private static RssPortBindCompleteArgs RssPortBindCompleteTemplate(Action`1<RssPortBindCompleteArgs> action);
    private static RssPortCapabilitiesArgs RssPortCapabilitiesTemplate(Action`1<RssPortCapabilitiesArgs> action);
    private static RssPortChangeArgs RssPortChangeTemplate(Action`1<RssPortChangeArgs> action);
    private static RssPortBindCompleteArgs RssPortNotSupportedTemplate(Action`1<RssPortBindCompleteArgs> action);
    private static RssPortProcessorsArgs RssPortProcessorsTemplate(Action`1<RssPortProcessorsArgs> action);
    private static RssPortReferenceArgs RssPortReferenceTemplate(Action`1<RssPortReferenceArgs> action);
    private static RssPortRundownArgs RssPortRundownTemplate(Action`1<RssPortRundownArgs> action);
    private static RssProcessorAssignmentArgs RssProcessorAssignmentTemplate(Action`1<RssProcessorAssignmentArgs> action);
    private static RssProcessorConsolidationArgs RssProcessorConsolidationTemplate(Action`1<RssProcessorConsolidationArgs> action);
    private static RssProcessorUnassignmentArgs RssProcessorUnassignmentTemplate(Action`1<RssProcessorUnassignmentArgs> action);
    private static task_0Args task_0Template(Action`1<task_0Args> action);
    private static task_01317Args task_01317Template(Action`1<task_01317Args> action);
    private static task_01318Args task_01318Template(Action`1<task_01318Args> action);
    private static task_01319Args task_01319Template(Action`1<task_01319Args> action);
    private static task_01320Args task_01320Template(Action`1<task_01320Args> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpAbortTcbCompleteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpAbortTcbRequestTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpAcceptListenerCompleteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAcceptListenerInsertionFailureArgs TcpAcceptListenerInsertionFailureTemplate(Action`1<TcpAcceptListenerInsertionFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpAcceptListenerRejectedTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpAccpetListenerRouteLookupFailureTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAcquirePortArgs TcpAcquirePortTemplate(Action`1<TcpAcquirePortArgs> action);
    private static TcpAcquirePortArgs TcpAcquireWeakRefPortTemplate(Action`1<TcpAcquirePortArgs> action);
    private static TcpDataTransferTimeoutArgs TcpAppSendBufferSizeTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpAcquirePortArgs TcpAssignedWeakReferencePortTemplate(Action`1<TcpAcquirePortArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningBeginTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningChangeRcvBufferSizeTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningEndTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningFailedAllocationFailureTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningFailedBandwidthEstimationTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpAutoTuningBeginArgs TcpAutoTuningFailedRttEstimationTemplate(Action`1<TcpAutoTuningBeginArgs> action);
    private static TcpLossRecoverySackExitArgs TcpBhDetectFullSizeAckTemplate(Action`1<TcpLossRecoverySackExitArgs> action);
    private static TcpBindEndpointResolutionFailureArgs TcpBindEndpointCompleteTemplate(Action`1<TcpBindEndpointResolutionFailureArgs> action);
    private static TcpBindEndpointResolutionFailureArgs TcpBindEndpointInspectionFailureTemplate(Action`1<TcpBindEndpointResolutionFailureArgs> action);
    private static TcpBindEndpointResolutionFailureArgs TcpBindEndpointPortFailureTemplate(Action`1<TcpBindEndpointResolutionFailureArgs> action);
    private static TcpBindEndpointResolutionFailureArgs TcpBindEndpointResolutionFailureTemplate(Action`1<TcpBindEndpointResolutionFailureArgs> action);
    private static TcpBlackHoleDetectionEntryArgs TcpBlackHoleDetectionEntryTemplate(Action`1<TcpBlackHoleDetectionEntryArgs> action);
    private static TcpBlackHoleDetectionEntryArgs TcpBlackHoleDetectionExitTemplate(Action`1<TcpBlackHoleDetectionEntryArgs> action);
    private static TcpBlackHoleDetectionEntryArgs TcpBlackHoleDetectionFailedTemplate(Action`1<TcpBlackHoleDetectionEntryArgs> action);
    private static TcpBindEndpointResolutionFailureArgs TcpCloseEndpointTemplate(Action`1<TcpBindEndpointResolutionFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpCloseTcbRequestTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectFailedPortAcquireTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpLossRecoveryEntryArgs TcpConnectionKeepAliveTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpConnectionOffloadStatusArgs TcpConnectionOffloadPmaxTemplate(Action`1<TcpConnectionOffloadStatusArgs> action);
    private static TcpConnectionOffloadStateChangeArgs TcpConnectionOffloadStateChangeTemplate(Action`1<TcpConnectionOffloadStateChangeArgs> action);
    private static TcpConnectionOffloadStatusArgs TcpConnectionOffloadStatusTemplate(Action`1<TcpConnectionOffloadStatusArgs> action);
    private static TcpConnectionRundownArgs TcpConnectionRundownTemplate(Action`1<TcpConnectionRundownArgs> action);
    private static TcpConnectionSummaryArgs TcpConnectionSummaryTemplate(Action`1<TcpConnectionSummaryArgs> action);
    private static TcpRequestConnectArgs TcpConnectionTerminatedRcvdRstTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpRequestConnectArgs TcpConnectionTerminatedRcvdSynTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpRequestConnectArgs TcpConnectRestransmitTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbCancelTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbCheckRateLimitTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbCompleteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbEstatsFailedTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailDontFragmentTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpInspectConnectCompleteArgs TcpConnectTcbFailedActiveConnectTemplate(Action`1<TcpInspectConnectCompleteArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailedAfTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailedCompartmentTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailedInspectTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpRequestConnectArgs TcpConnectTcbFailedRcvdRstTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailedRouteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpRequestConnectArgs TcpConnectTcbFailInsertionTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailInspectConnectCompleteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailSessionStateTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbFailureTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpConnectTcbSkipRateLimitArgs TcpConnectTcbPassRateLimitTemplate(Action`1<TcpConnectTcbSkipRateLimitArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbProceedingTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbRateLimitCancelTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbRateLimitReleaseTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpConnectTcbSkipRateLimitArgs TcpConnectTcbSkipRateLimitTemplate(Action`1<TcpConnectTcbSkipRateLimitArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpConnectTcbTimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpCreateEndpointAfFailureArgs TcpCreateEndpointAfFailureTemplate(Action`1<TcpCreateEndpointAfFailureArgs> action);
    private static TcpCreateEndpointAfFailureArgs TcpCreateEndpointCompartmentFailureTemplate(Action`1<TcpCreateEndpointAfFailureArgs> action);
    private static TcpCreateEndpointAfFailureArgs TcpCreateEndpointCompleteTemplate(Action`1<TcpCreateEndpointAfFailureArgs> action);
    private static TcpCreateEndpointAfFailureArgs TcpCreateEndpointInspectionFailureTemplate(Action`1<TcpCreateEndpointAfFailureArgs> action);
    private static TcpCreateNotificationChannelRequestArgs TcpCreateNotificationChannelRequestTemplate(Action`1<TcpCreateNotificationChannelRequestArgs> action);
    private static TcpCreateNotificationChannelRequestProcessedArgs TcpCreateNotificationChannelRequestProcessedTemplate(Action`1<TcpCreateNotificationChannelRequestProcessedArgs> action);
    private static TcpCreateNotificationChannelRequestProcessingArgs TcpCreateNotificationChannelRequestProcessingTemplate(Action`1<TcpCreateNotificationChannelRequestProcessingArgs> action);
    private static TcpCTcpAssignedBlocksArgs TcpCTcpAssignedBlocksTemplate(Action`1<TcpCTcpAssignedBlocksArgs> action);
    private static TcpCTcpCongestionWndwArgs TcpCTcpCongestionWndwTemplate(Action`1<TcpCTcpCongestionWndwArgs> action);
    private static TcpDataTransferTimeoutArgs TcpCtcpDataTransferCumAckTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferCumAck1330Args TcpCtcpDataTransferCumAck1331Template(Action`1<TcpDataTransferCumAck1330Args> action);
    private static TcpDataTransferTimeoutArgs TcpCtcpDataTransferDupAckTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferDupAck1343Args TcpCtcpDataTransferDupAck1344Template(Action`1<TcpDataTransferDupAck1343Args> action);
    private static TcpDataTransferEcnArgs TcpCtcpDataTransferEcnTemplate(Action`1<TcpDataTransferEcnArgs> action);
    private static TcpDataTransferTimeoutArgs TcpCtcpDataTransferSendTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferSend1332Args TcpCtcpDataTransferSend1333Template(Action`1<TcpDataTransferSend1332Args> action);
    private static TcpDataTransferTimeoutArgs TcpCtcpDataTransferSpuriousTimeoutTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpCtcpDataTransferTimeout1348Args TcpCtcpDataTransferSpuriousTimeout1349Template(Action`1<TcpCtcpDataTransferTimeout1348Args> action);
    private static TcpDataTransferTimeoutArgs TcpCtcpDataTransferTimeoutTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpCtcpDataTransferTimeout1348Args TcpCtcpDataTransferTimeout1348Template(Action`1<TcpCtcpDataTransferTimeout1348Args> action);
    private static TcpInspectConnectCompleteArgs TcpCTcpDelayWndwInactiveTemplate(Action`1<TcpInspectConnectCompleteArgs> action);
    private static TcpCTcpGammaArgs TcpCTcpGammaTemplate(Action`1<TcpCTcpGammaArgs> action);
    private static TcpCwndRestartArgs TcpCwndRestartTemplate(Action`1<TcpCwndRestartArgs> action);
    private static TcpCwndRestartArgs TcpCwndRestart1229Template(Action`1<TcpCwndRestartArgs> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferCumAckTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferCumAck1330Args TcpDataTransferCumAck1330Template(Action`1<TcpDataTransferCumAck1330Args> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferDupAckTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferDupAck1343Args TcpDataTransferDupAck1343Template(Action`1<TcpDataTransferDupAck1343Args> action);
    private static TcpDataTransferEcnArgs TcpDataTransferEcnTemplate(Action`1<TcpDataTransferEcnArgs> action);
    private static TcpDataTransferEcnAlphaArgs TcpDataTransferEcnAlphaTemplate(Action`1<TcpDataTransferEcnAlphaArgs> action);
    private static TcpDataTransferReceiveArgs TcpDataTransferReceiveTemplate(Action`1<TcpDataTransferReceiveArgs> action);
    private static TcpRequestConnectArgs TcpDataTransferRestransmitTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferRetransmitRoundTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferRetransmitRound1351Args TcpDataTransferRetransmitRound1351Template(Action`1<TcpDataTransferRetransmitRound1351Args> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferRttSampleTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferRttSample1341Args TcpDataTransferRttSample1341Template(Action`1<TcpDataTransferRttSample1341Args> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferSendTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferSend1332Args TcpDataTransferSend1332Template(Action`1<TcpDataTransferSend1332Args> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferSpuriousTimeoutTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferSpuriousTimeout1345Args TcpDataTransferSpuriousTimeout1345Template(Action`1<TcpDataTransferSpuriousTimeout1345Args> action);
    private static TcpDataTransferTimeoutArgs TcpDataTransferTimeoutTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryAcceptTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryCompletingTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryDataDroppedTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryFinTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryFlushTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryIndicatedTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryInjectingDataTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliveryPushTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDeliverySatisfiedTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDeliveryStateChangeArgs TcpDeliveryStateChangeTemplate(Action`1<TcpDeliveryStateChangeArgs> action);
    private static TcpPlumbWakePatternArgs TcpDeplumbWakePatternTemplate(Action`1<TcpPlumbWakePatternArgs> action);
    private static TcpCreateNotificationChannelRequestArgs TcpDetachNotificationChannelTemplate(Action`1<TcpCreateNotificationChannelRequestArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbCompleteTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbFinWait2TimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpDisconnectTcbInjectFailedTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbKeepaliveTimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpDisconnectTcbRequestArgs TcpDisconnectTcbRequestTemplate(Action`1<TcpDisconnectTcbRequestArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbRtoTimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbTimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpDisconnectTcbZeroWindowTimeoutTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpEndpointAcquirePortReservationArgs TcpEndpointAcquirePortReservationTemplate(Action`1<TcpEndpointAcquirePortReservationArgs> action);
    private static TcpEndpointCreationArgs TcpEndpointCreationTemplate(Action`1<TcpEndpointCreationArgs> action);
    private static TcpEndpointAcquirePortReservationArgs TcpEndpointFailedPortReservationTemplate(Action`1<TcpEndpointAcquirePortReservationArgs> action);
    private static TcpLossRecoverySackExitArgs TcpFlushSackTemplate(Action`1<TcpLossRecoverySackExitArgs> action);
    private static TcpGlobalAddInterfaceArgs TcpGlobalAddInterfaceTemplate(Action`1<TcpGlobalAddInterfaceArgs> action);
    private static TcpSecurityRateLimitArgs TcpGlobalConnectionRateLimitViolationTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpGlobalAddInterfaceArgs TcpGlobalDeleteInterfaceTemplate(Action`1<TcpGlobalAddInterfaceArgs> action);
    private static TcpGlobalIsbBeginThrottleArgs TcpGlobalIsbBeginThrottleTemplate(Action`1<TcpGlobalIsbBeginThrottleArgs> action);
    private static TcpGlobalIsbBeginThrottleArgs TcpGlobalIsbEndThrottleTemplate(Action`1<TcpGlobalIsbBeginThrottleArgs> action);
    private static TcpSecurityRateLimitArgs TcpGlobalLandAttackSegmentDropTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpGlobalParametersArgs TcpGlobalParametersTemplate(Action`1<TcpGlobalParametersArgs> action);
    private static TcpEndpointAcquirePortReservationArgs TcpGlobalPortReservationTemplate(Action`1<TcpEndpointAcquirePortReservationArgs> action);
    private static TcpSecurityRateLimitArgs TcpGlobalReassemblyLimitViolationTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpSecurityRateLimitArgs TcpGlobalSynAttackEntryTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpSecurityRateLimitArgs TcpGlobalSynAttackExitTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpCwndRestartArgs TcpInitialCwndAdjustedTemplate(Action`1<TcpCwndRestartArgs> action);
    private static TcpRequestConnectArgs TcpInitiateSynRstValidationTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpInspectConnectCompleteArgs TcpInspectConnectCompleteTemplate(Action`1<TcpInspectConnectCompleteArgs> action);
    private static TcpInterfaceRscStateChangeArgs TcpInterfaceRscStateChangeTemplate(Action`1<TcpInterfaceRscStateChangeArgs> action);
    private static TcpipAoacFailFastArgs TcpipAoacFailFastTemplate(Action`1<TcpipAoacFailFastArgs> action);
    private static TcpipGenericArgs TcpipGenericTemplate(Action`1<TcpipGenericArgs> action);
    private static TcpMediaDisconnectArgs TcpipLimitedLinkConnectivityTemplate(Action`1<TcpMediaDisconnectArgs> action);
    private static TcpMediaDisconnectArgs TcpipLimitedLinkConnectivity1323Template(Action`1<TcpMediaDisconnectArgs> action);
    private static TcpMediaDisconnectArgs TcpipMediaConnectTemplate(Action`1<TcpMediaDisconnectArgs> action);
    private static TcpipNetworkPacketDropsArgs TcpipNetworkPacketDropsTemplate(Action`1<TcpipNetworkPacketDropsArgs> action);
    private static TcpipPlumbWakePatternOnInterfaceArgs TcpipPlumbWakePatternOnInterfaceTemplate(Action`1<TcpipPlumbWakePatternOnInterfaceArgs> action);
    private static TcpipReceiveSlowPathArgs TcpipReceiveSlowPathTemplate(Action`1<TcpipReceiveSlowPathArgs> action);
    private static TcpipSendSlowPathArgs TcpipSendSlowPathTemplate(Action`1<TcpipSendSlowPathArgs> action);
    private static TcpipSilentModeArgs TcpipSilentModeTemplate(Action`1<TcpipSilentModeArgs> action);
    private static TcpipTransportPacketDropsArgs TcpipTransportPacketDropsTemplate(Action`1<TcpipTransportPacketDropsArgs> action);
    private static TcpipUpdateInterfaceConfigFlagsArgs TcpipUpdateInterfaceConfigFlagsTemplate(Action`1<TcpipUpdateInterfaceConfigFlagsArgs> action);
    private static TcpipWakePacketIndicatedArgs TcpipWakePacketIndicatedTemplate(Action`1<TcpipWakePacketIndicatedArgs> action);
    private static TcpipWakePacketIndicated1303Args TcpipWakePacketIndicated1303Template(Action`1<TcpipWakePacketIndicated1303Args> action);
    private static TcpIsPatternCoalescingRequiredArgs TcpIsPatternCoalescingRequiredTemplate(Action`1<TcpIsPatternCoalescingRequiredArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerActivatedTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerActivationFailedAfTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerActivationFailedCompartmentTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerActivationFailedInspection1Template(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerActivationFailedInspection2Template(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerBindFailedPortTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerBindFailedResolutionTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpListenerActivationFailedAfArgs TcpListenerUnboundTemplate(Action`1<TcpListenerActivationFailedAfArgs> action);
    private static TcpLoopbackFastPathFailReasonArgs TcpLoopbackFastPathFailReasonTemplate(Action`1<TcpLoopbackFastPathFailReasonArgs> action);
    private static TcpLossRecoveryEntryArgs TcpLossRecoveryEntryTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpLossRecoveryEntryArgs TcpLossRecoveryExitTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpLossRecoverySackEntryArgs TcpLossRecoverySackEntryTemplate(Action`1<TcpLossRecoverySackEntryArgs> action);
    private static TcpLossRecoverySackExitArgs TcpLossRecoverySackExitTemplate(Action`1<TcpLossRecoverySackExitArgs> action);
    private static TcpLsoArgs TcpLsoTemplate(Action`1<TcpLsoArgs> action);
    private static TcpMediaDisconnectArgs TcpMediaDisconnectTemplate(Action`1<TcpMediaDisconnectArgs> action);
    private static TcpMemoryFailuresArgs TcpMemoryFailuresTemplate(Action`1<TcpMemoryFailuresArgs> action);
    private static TcpModuleStartedArgs TcpModuleStartedTemplate(Action`1<TcpModuleStartedArgs> action);
    private static TcpModuleStartedArgs TcpModuleStoppedTemplate(Action`1<TcpModuleStartedArgs> action);
    private static TcpMppNppEvaluationArgs TcpMppNppEvaluationTemplate(Action`1<TcpMppNppEvaluationArgs> action);
    private static TcpMppStartEpisodeArgs TcpMppStartEpisodeTemplate(Action`1<TcpMppStartEpisodeArgs> action);
    private static TcpMppStartEpochArgs TcpMppStartEpochTemplate(Action`1<TcpMppStartEpochArgs> action);
    private static TcpMppStopEpisodeArgs TcpMppStopEpisodeTemplate(Action`1<TcpMppStopEpisodeArgs> action);
    private static TcpMppStopEpochArgs TcpMppStopEpochTemplate(Action`1<TcpMppStopEpochArgs> action);
    private static TcpPlumbWakePatternArgs TcpPlumbWakePatternTemplate(Action`1<TcpPlumbWakePatternArgs> action);
    private static TcpQueryNotificationChannelStatusRequestArgs TcpQueryNotificationChannelStatusRequestTemplate(Action`1<TcpQueryNotificationChannelStatusRequestArgs> action);
    private static TcpConnectTcbSkipRateLimitArgs TcpRateLimitPathCancelTemplate(Action`1<TcpConnectTcbSkipRateLimitArgs> action);
    private static TcpConnectTcbSkipRateLimitArgs TcpRateLimitPathReleaseTemplate(Action`1<TcpConnectTcbSkipRateLimitArgs> action);
    private static TcpLossRecoveryEntryArgs TcpReassemblyEntryTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpLossRecoveryEntryArgs TcpReassemblyExitTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpLossRecoverySackExitArgs TcpReassemblyFlushTemplate(Action`1<TcpLossRecoverySackExitArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpReceiveRequestTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpReleaseIndicationArgs TcpReleaseIndicationTemplate(Action`1<TcpReleaseIndicationArgs> action);
    private static TcpAcquirePortArgs TcpReleasePortTemplate(Action`1<TcpAcquirePortArgs> action);
    private static TcpAcquirePortArgs TcpReplacePortTemplate(Action`1<TcpAcquirePortArgs> action);
    private static TcpRequestConnectArgs TcpRequestConnectTemplate(Action`1<TcpRequestConnectArgs> action);
    private static TcpRscNblOobInfoArgs TcpRscNblOobInfoTemplate(Action`1<TcpRscNblOobInfoArgs> action);
    private static TcpRssTableChangeArgs TcpRssTableChangeTemplate(Action`1<TcpRssTableChangeArgs> action);
    private static TcpRtcPortRangeAssignmentArgs TcpRtcPortRangeAssignmentTemplate(Action`1<TcpRtcPortRangeAssignmentArgs> action);
    private static TcpDataTransferTimeoutArgs TcpRttResiliencyDetectionTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferRttSample1341Args TcpRttResiliencyDetection1342Template(Action`1<TcpDataTransferRttSample1341Args> action);
    private static TcpSackUpdateArgs TcpSackUpdateTemplate(Action`1<TcpSackUpdateArgs> action);
    private static TcpSecurityRateLimitArgs TcpSecurityRateLimitTemplate(Action`1<TcpSecurityRateLimitArgs> action);
    private static TcpSendPostedArgs TcpSendAdvanceTemplate(Action`1<TcpSendPostedArgs> action);
    private static TcpSendPostedArgs TcpSendPostedTemplate(Action`1<TcpSendPostedArgs> action);
    private static TcpSendPostedArgs TcpSendTransmittedTemplate(Action`1<TcpSendPostedArgs> action);
    private static TcpSetTcpOptionArgs TcpSetTcpOptionTemplate(Action`1<TcpSetTcpOptionArgs> action);
    private static TcpSetTcpSoOptionArgs TcpSetTcpSoOptionTemplate(Action`1<TcpSetTcpSoOptionArgs> action);
    private static TcpAccpetListenerRouteLookupFailureArgs TcpShutdownTcbTemplate(Action`1<TcpAccpetListenerRouteLookupFailureArgs> action);
    private static TcpSignalNotificationChannelEventArgs TcpSignalNotificationChannelEventTemplate(Action`1<TcpSignalNotificationChannelEventArgs> action);
    private static TcpDataTransferTimeoutArgs TcpSlowStartToCongestionAvoidanceTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpCtcpDataTransferTimeout1348Args TcpSlowStartToCongestionAvoidance1350Template(Action`1<TcpCtcpDataTransferTimeout1348Args> action);
    private static TcpDataTransferTimeoutArgs TcpSpuriousRtoDetectionBeginTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferSpuriousTimeout1345Args TcpSpuriousRtoDetectionBegin1346Template(Action`1<TcpDataTransferSpuriousTimeout1345Args> action);
    private static TcpDataTransferTimeoutArgs TcpSpuriousRtoDetectionEndTemplate(Action`1<TcpDataTransferTimeoutArgs> action);
    private static TcpDataTransferSpuriousTimeout1345Args TcpSpuriousRtoDetectionEnd1347Template(Action`1<TcpDataTransferSpuriousTimeout1345Args> action);
    private static TcpSrttMeasurementStartedArgs TcpSrttMeasurementCancelledTemplate(Action`1<TcpSrttMeasurementStartedArgs> action);
    private static TcpSrttMeasurementStartedArgs TcpSrttMeasurementCompleteTemplate(Action`1<TcpSrttMeasurementStartedArgs> action);
    private static TcpSrttMeasurementStartedArgs TcpSrttMeasurementStartedTemplate(Action`1<TcpSrttMeasurementStartedArgs> action);
    private static TcpSwsAvoidanceBeginArgs TcpSwsAvoidanceBeginTemplate(Action`1<TcpSwsAvoidanceBeginArgs> action);
    private static TcpSwsAvoidanceBeginArgs TcpSwsAvoidanceEndTemplate(Action`1<TcpSwsAvoidanceBeginArgs> action);
    private static TcpTcbChangeIsbArgs TcpTcbChangeIsbTemplate(Action`1<TcpTcbChangeIsbArgs> action);
    private static TcpTcbStopTimerArgs TcpTcbExpireTimerTemplate(Action`1<TcpTcbStopTimerArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpTcbInjectFinCompleteTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpTcbInjectFinFailureTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpDisconnectTcbInjectFailedArgs TcpTcbInjectRcvFailureTemplate(Action`1<TcpDisconnectTcbInjectFailedArgs> action);
    private static TcpTcbStartTimerArgs TcpTcbStartTimerTemplate(Action`1<TcpTcbStartTimerArgs> action);
    private static TcpTcbStateChangeArgs TcpTcbStateChangeTemplate(Action`1<TcpTcbStateChangeArgs> action);
    private static TcpTcbStopTimerArgs TcpTcbStopTimerTemplate(Action`1<TcpTcbStopTimerArgs> action);
    private static TcpTcbSynSendArgs TcpTcbSynSendTemplate(Action`1<TcpTcbSynSendArgs> action);
    private static TcpTemplateChangedArgs TcpTemplateChangedTemplate(Action`1<TcpTemplateChangedArgs> action);
    private static TcpTemplateParametersArgs TcpTemplateParametersTemplate(Action`1<TcpTemplateParametersArgs> action);
    private static TcpCreateNotificationChannelRequestArgs TcpUnlinkNotificationChannelTemplate(Action`1<TcpCreateNotificationChannelRequestArgs> action);
    private static TcpWsdCacheEntryStateChangeArgs TcpWsdCacheEntryStateChangeTemplate(Action`1<TcpWsdCacheEntryStateChangeArgs> action);
    private static TcpWsdInitializationErrorsArgs TcpWsdInitializationErrorsTemplate(Action`1<TcpWsdInitializationErrorsArgs> action);
    private static TcpWsdInitializationInformationArgs TcpWsdInitializationInformationTemplate(Action`1<TcpWsdInitializationInformationArgs> action);
    private static TcpWsdProfileStateChangeArgs TcpWsdProfileStateChangeTemplate(Action`1<TcpWsdProfileStateChangeArgs> action);
    private static TcpWsdStateChangeArgs TcpWsdStateChangeTemplate(Action`1<TcpWsdStateChangeArgs> action);
    private static TcpWsdWsRestrictedProfileArgs TcpWsdWsRestrictedDestinationTemplate(Action`1<TcpWsdWsRestrictedProfileArgs> action);
    private static TcpWsdWsRestrictedProfileArgs TcpWsdWsRestrictedProfileTemplate(Action`1<TcpWsdWsRestrictedProfileArgs> action);
    private static TcpLossRecoveryEntryArgs TcpZeroWindowProbingBeginTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static TcpLossRecoveryEntryArgs TcpZeroWindowProbingEndTemplate(Action`1<TcpLossRecoveryEntryArgs> action);
    private static UdpCreateNotificationChannelRequestArgs UdpCreateNotificationChannelRequestTemplate(Action`1<UdpCreateNotificationChannelRequestArgs> action);
    private static UdpCreateNotificationChannelRequestProcessedArgs UdpCreateNotificationChannelRequestProcessedTemplate(Action`1<UdpCreateNotificationChannelRequestProcessedArgs> action);
    private static UdpCreateNotificationChannelRequestProcessingArgs UdpCreateNotificationChannelRequestProcessingTemplate(Action`1<UdpCreateNotificationChannelRequestProcessingArgs> action);
    private static UdpQueryNotificationChannelStatusRequestArgs UdpDetachNotificationChannelTemplate(Action`1<UdpQueryNotificationChannelStatusRequestArgs> action);
    private static UdpEndpointSendMessagesArgs UdpEndpointReceiveMessagesTemplate(Action`1<UdpEndpointSendMessagesArgs> action);
    private static UdpEndpointSendMessagesArgs UdpEndpointSendMessagesTemplate(Action`1<UdpEndpointSendMessagesArgs> action);
    private static UdpQueryNotificationChannelStatusRequestArgs UdpQueryNotificationChannelStatusRequestTemplate(Action`1<UdpQueryNotificationChannelStatusRequestArgs> action);
    private static UdpSignalNotificationChannelEventArgs UdpSignalNotificationChannelEventTemplate(Action`1<UdpSignalNotificationChannelEventArgs> action);
    private static UdpQueryNotificationChannelStatusRequestArgs UdpUnlinkNotificationChannelTemplate(Action`1<UdpQueryNotificationChannelStatusRequestArgs> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.ArrangeData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ArrangeData> m_target;
    public long Id { get; }
    public double Top { get; }
    public double Left { get; }
    public double Width { get; }
    public double Height { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ArrangeData(Action`1<ArrangeData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public double get_Top();
    public double get_Left();
    public double get_Width();
    public double get_Height();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ArrangeData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ArrangeData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.AssemblyNameTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AssemblyNameTemplate> m_target;
    public string AssemblyName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AssemblyNameTemplate(Action`1<AssemblyNameTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_AssemblyName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<AssemblyNameTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<AssemblyNameTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Counter : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Counter> m_target;
    public int Count { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Counter(Action`1<Counter> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Count();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Counter> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Counter> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.CreateChannel : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CreateChannel> m_target;
    public ulong ChannelPtr { get; }
    public int ChannelHandle { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CreateChannel(Action`1<CreateChannel> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ChannelPtr();
    public int get_ChannelHandle();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<CreateChannel> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<CreateChannel> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.CreateIRT : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CreateIRT> m_target;
    public ulong ResourcePtr { get; }
    public ulong ParentResourcePtr { get; }
    public IntermediateRenderTargetReason Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CreateIRT(Action`1<CreateIRT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ResourcePtr();
    public ulong get_ParentResourcePtr();
    public IntermediateRenderTargetReason get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<CreateIRT> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<CreateIRT> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.CreateOrAddOnChnl : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CreateOrAddOnChnl> m_target;
    public long PerfEltId { get; }
    public ulong ChannelPtr { get; }
    public int ResourceHandle { get; }
    public int ResourceType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CreateOrAddOnChnl(Action`1<CreateOrAddOnChnl> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_PerfEltId();
    public ulong get_ChannelPtr();
    public int get_ResourceHandle();
    public int get_ResourceType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<CreateOrAddOnChnl> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<CreateOrAddOnChnl> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.CreateWpfGfxResource : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<CreateWpfGfxResource> m_target;
    public ulong ResourcePtr { get; }
    public int ChannelHandle { get; }
    public int ResourceHandle { get; }
    public int ResourceType { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal CreateWpfGfxResource(Action`1<CreateWpfGfxResource> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ResourcePtr();
    public int get_ChannelHandle();
    public int get_ResourceHandle();
    public int get_ResourceType();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<CreateWpfGfxResource> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<CreateWpfGfxResource> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.DispatcherMessage : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DispatcherMessage> m_target;
    public DispatcherPriority Priority { get; }
    public string Operation { get; }
    public long Id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DispatcherMessage(Action`1<DispatcherMessage> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public DispatcherPriority get_Priority();
    public string get_Operation();
    public long get_Id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<DispatcherMessage> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<DispatcherMessage> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.DispatcherPriority : Enum {
    public int value__;
    public static DispatcherPriority Inactive;
    public static DispatcherPriority SystemIdle;
    public static DispatcherPriority ApplicationIdle;
    public static DispatcherPriority ContextIdle;
    public static DispatcherPriority Background;
    public static DispatcherPriority Input;
    public static DispatcherPriority Loaded;
    public static DispatcherPriority Render;
    public static DispatcherPriority DataBind;
    public static DispatcherPriority Normal;
    public static DispatcherPriority Send;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.FloatBounds : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<FloatBounds> m_target;
    public float left { get; }
    public float top { get; }
    public float right { get; }
    public float bottom { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FloatBounds(Action`1<FloatBounds> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public float get_left();
    public float get_top();
    public float get_right();
    public float get_bottom();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<FloatBounds> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<FloatBounds> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.GfxSoftwareFallback : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<GfxSoftwareFallback> m_target;
    public UnexptectedSWFallbackReason Reason { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal GfxSoftwareFallback(Action`1<GfxSoftwareFallback> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public UnexptectedSWFallbackReason get_Reason();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<GfxSoftwareFallback> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<GfxSoftwareFallback> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.HwndTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<HwndTemplate> m_target;
    public long Hwnd { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal HwndTemplate(Action`1<HwndTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Hwnd();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<HwndTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<HwndTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.ID32Template : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ID32Template> m_target;
    public int Id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ID32Template(Action`1<ID32Template> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ID32Template> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ID32Template> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.InfoStringTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<InfoStringTemplate> m_target;
    public string Info { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal InfoStringTemplate(Action`1<InfoStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Info();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<InfoStringTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<InfoStringTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.IntBounds : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IntBounds> m_target;
    public int left { get; }
    public int top { get; }
    public int right { get; }
    public int bottom { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IntBounds(Action`1<IntBounds> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_left();
    public int get_top();
    public int get_right();
    public int get_bottom();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IntBounds> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IntBounds> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.IntermediateRenderTargetReason : Enum {
    public int value__;
    public static IntermediateRenderTargetReason Clip;
    public static IntermediateRenderTargetReason Clip_and_Opacity;
    public static IntermediateRenderTargetReason Effect;
    public static IntermediateRenderTargetReason Opacity;
    public static IntermediateRenderTargetReason OpacityMask;
    public static IntermediateRenderTargetReason OpacityMask_Brush_Realization;
    public static IntermediateRenderTargetReason ShaderEffect_Input;
    public static IntermediateRenderTargetReason Software_Only_Effects;
    public static IntermediateRenderTargetReason TileBrush;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.KeyStringTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<KeyStringTemplate> m_target;
    public string Key { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal KeyStringTemplate(Action`1<KeyStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Key();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<KeyStringTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<KeyStringTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.LayoutAborted : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<LayoutAborted> m_target;
    public int LoopDurationMS { get; }
    public int loopCounter { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal LayoutAborted(Action`1<LayoutAborted> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_LoopDurationMS();
    public int get_loopCounter();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<LayoutAborted> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<LayoutAborted> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.LayoutSource : Enum {
    public int value__;
    public static LayoutSource LayoutManager;
    public static LayoutSource HwndSource_SetLayoutSize;
    public static LayoutSource HwndSource_WM_SIZE;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.LayoutSourceTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<LayoutSourceTemplate> m_target;
    public long Id { get; }
    public LayoutSource source { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal LayoutSourceTemplate(Action`1<LayoutSourceTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public LayoutSource get_source();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<LayoutSourceTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<LayoutSourceTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.MeasureData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MeasureData> m_target;
    public long Id { get; }
    public double Width { get; }
    public double Height { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MeasureData(Action`1<MeasureData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public double get_Width();
    public double get_Height();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MeasureData> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MeasureData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.MessageStringTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<MessageStringTemplate> m_target;
    public string Message { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal MessageStringTemplate(Action`1<MessageStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Message();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<MessageStringTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<MessageStringTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.PerfElementID : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PerfElementID> m_target;
    public long Id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PerfElementID(Action`1<PerfElementID> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PerfElementID> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PerfElementID> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.PerfElementInfo : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PerfElementInfo> m_target;
    public long Id { get; }
    public string Type { get; }
    public string Data { get; }
    public long AssemblyID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PerfElementInfo(Action`1<PerfElementInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public string get_Type();
    public string get_Data();
    public long get_AssemblyID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PerfElementInfo> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PerfElementInfo> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.PerfElementName : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PerfElementName> m_target;
    public long Id { get; }
    public string Type { get; }
    public string Name { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PerfElementName(Action`1<PerfElementName> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public string get_Type();
    public string get_Name();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PerfElementName> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PerfElementName> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.PtrTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<PtrTemplate> m_target;
    public ulong Pointer { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal PtrTemplate(Action`1<PtrTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Pointer();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<PtrTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<PtrTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.ReleaseOnChannel : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ReleaseOnChannel> m_target;
    public ulong ChannelPtr { get; }
    public int ResourceHandle { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ReleaseOnChannel(Action`1<ReleaseOnChannel> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_ChannelPtr();
    public int get_ResourceHandle();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ReleaseOnChannel> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ReleaseOnChannel> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_1 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_1> m_target;
    public ulong Bitmap { get; }
    public int width { get; }
    public int height { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_1(Action`1<Template_1> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_Bitmap();
    public int get_width();
    public int get_height();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_1> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_1> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_10 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_10> m_target;
    public long Id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_10(Action`1<Template_10> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_10> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_10> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_11 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_11> m_target;
    public long BatchSize { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_11(Action`1<Template_11> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_BatchSize();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_11> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_11> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_12 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_12> m_target;
    public long Id { get; }
    public long QPCCurrentTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_12(Action`1<Template_12> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_Id();
    public long get_QPCCurrentTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_12> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_12> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_13 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_13> m_target;
    public int Id { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_13(Action`1<Template_13> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_13> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_13> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_15 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_15> m_target;
    public ulong hwnd { get; }
    public int hr { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_15(Action`1<Template_15> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public ulong get_hwnd();
    public int get_hr();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_15> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_15> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_18 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_18> m_target;
    public int Id { get; }
    public long HWND { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_18(Action`1<Template_18> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public long get_HWND();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_18> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_18> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_19 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_19> m_target;
    public int Id { get; }
    public long HWND { get; }
    public int Msg { get; }
    public int WParam { get; }
    public int LParam { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_19(Action`1<Template_19> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public long get_HWND();
    public int get_Msg();
    public int get_WParam();
    public int get_LParam();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_19> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_19> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_2 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_2> m_target;
    public int width { get; }
    public int height { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_2(Action`1<Template_2> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_width();
    public int get_height();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_2> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_2> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_20 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_20> m_target;
    public int Id { get; }
    public long QPCExpectedPresentTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_20(Action`1<Template_20> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public long get_QPCExpectedPresentTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_20> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_20> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_21 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_21> m_target;
    public long QPCFrequency { get; }
    public long QPCCurrentTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_21(Action`1<Template_21> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_QPCFrequency();
    public long get_QPCCurrentTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_21> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_21> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_22 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_22> m_target;
    public int ContextID { get; }
    public int ResponseID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_22(Action`1<Template_22> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ContextID();
    public int get_ResponseID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_22> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_22> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_23 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_23> m_target;
    public long QPCLastPresentationTime { get; }
    public long PresentationResults { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_23(Action`1<Template_23> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_QPCLastPresentationTime();
    public long get_PresentationResults();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_23> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_23> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_24 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_24> m_target;
    public int RenderDelay { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_24(Action`1<Template_24> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_RenderDelay();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_24> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_24> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_30 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_30> m_target;
    public int Result { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_30(Action`1<Template_30> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Result();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_30> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_30> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_31 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_31> m_target;
    public int FirstVisiblePage { get; }
    public int LastVisiblePage { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_31(Action`1<Template_31> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_FirstVisiblePage();
    public int get_LastVisiblePage();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_31> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_31> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_32 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_32> m_target;
    public int PageNumber { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_32(Action`1<Template_32> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PageNumber();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_32> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_32> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_33 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_33> m_target;
    public int VerticalOffset { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_33(Action`1<Template_33> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_VerticalOffset();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_33> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_33> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_34 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_34> m_target;
    public int PageNumber { get; }
    public int FirstVisiblePage { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_34(Action`1<Template_34> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_PageNumber();
    public int get_FirstVisiblePage();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_34> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_34> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_35 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_35> m_target;
    public int Zoom { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_35(Action`1<Template_35> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Zoom();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_35> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_35> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_37 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_37> m_target;
    public int Id { get; }
    public string TypeAndName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_37(Action`1<Template_37> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Id();
    public string get_TypeAndName();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_37> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_37> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_43 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_43> m_target;
    public string URL { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_43(Action`1<Template_43> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_URL();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_43> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_43> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_44 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_44> m_target;
    public int Code { get; }
    public string Text { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_44(Action`1<Template_44> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Code();
    public string get_Text();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_44> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_44> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_45 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_45> m_target;
    public string Location { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_45(Action`1<Template_45> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Location();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_45> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_45> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_46 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_46> m_target;
    public int State { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_46(Action`1<Template_46> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_State();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_46> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_46> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_47 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_47> m_target;
    public int GUID_Data1 { get; }
    public int CmdId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_47(Action`1<Template_47> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_GUID_Data1();
    public int get_CmdId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_47> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_47> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_48 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_48> m_target;
    public int CmdFlags { get; }
    public int HResult { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_48(Action`1<Template_48> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_CmdFlags();
    public int get_HResult();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_48> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_48> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_49 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_49> m_target;
    public string Path { get; }
    public string AppId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_49(Action`1<Template_49> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Path();
    public string get_AppId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_49> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_49> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_50 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_50> m_target;
    public int ExitCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_50(Action`1<Template_50> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ExitCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_50> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_50> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_51 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_51> m_target;
    public int Direct { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_51(Action`1<Template_51> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Direct();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_51> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_51> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_53 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_53> m_target;
    public int AttemptDownload { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_53(Action`1<Template_53> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_AttemptDownload();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_53> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_53> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_54 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_54> m_target;
    public string Page { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_54(Action`1<Template_54> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Page();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_54> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_54> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_55 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_55> m_target;
    public int Bytes { get; }
    public int Total { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_55(Action`1<Template_55> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Bytes();
    public int get_Total();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_55> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_55> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_56 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_56> m_target;
    public string NavigationMode { get; }
    public string UriOrObject { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_56(Action`1<Template_56> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_NavigationMode();
    public string get_UriOrObject();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_56> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_56> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_57 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_57> m_target;
    public string PF { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_57(Action`1<Template_57> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_PF();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_57> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_57> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_6 : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_6> m_target;
    public int Z { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_6(Action`1<Template_6> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_Z();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_6> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_6> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.Template_HR : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<Template_HR> m_target;
    public int ReturnCode { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal Template_HR(Action`1<Template_HR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_ReturnCode();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<Template_HR> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<Template_HR> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.TimeTick : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TimeTick> m_target;
    public long TickTime { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TimeTick(Action`1<TimeTick> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_TickTime();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TimeTick> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TimeTick> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.TypeStringTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TypeStringTemplate> m_target;
    public string Type { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TypeStringTemplate(Action`1<TypeStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Type();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TypeStringTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TypeStringTemplate> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.UnexptectedSWFallbackReason : Enum {
    public int value__;
    public static UnexptectedSWFallbackReason NoHardwareAvailable;
    public static UnexptectedSWFallbackReason ResizeFailed;
    public static UnexptectedSWFallbackReason OutOfVideoMemory;
    public static UnexptectedSWFallbackReason UnexpectedPrimitiveFallback;
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.URITemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<URITemplate> m_target;
    public string URI { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal URITemplate(Action`1<URITemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_URI();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<URITemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<URITemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.VisualCacheTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<VisualCacheTemplate> m_target;
    public int uX { get; }
    public int uY { get; }
    public int uWidth { get; }
    public int uHeight { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal VisualCacheTemplate(Action`1<VisualCacheTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_uX();
    public int get_uY();
    public int get_uWidth();
    public int get_uHeight();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<VisualCacheTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<VisualCacheTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF.WClientParseXamlBamlInfoTemplate : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<WClientParseXamlBamlInfoTemplate> m_target;
    public long PerfElementID { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal WClientParseXamlBamlInfoTemplate(Action`1<WClientParseXamlBamlInfoTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public long get_PerfElementID();
    public int get_LineNumber();
    public int get_LinePosition();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<WClientParseXamlBamlInfoTemplate> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<WClientParseXamlBamlInfoTemplate> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.ProviderManifest : object {
    [CompilerGeneratedAttribute]
private bool <ISDynamic>k__BackingField;
    private XmlReader reader;
    private Byte[] serializedManifest;
    private byte majorVersion;
    private byte minorVersion;
    private ManifestFormats format;
    private string id;
    private Guid guid;
    private string name;
    private int version;
    private string fileName;
    private bool inited;
    private Exception error;
    public bool ISDynamic { get; internal set; }
    public string Name { get; }
    public Guid Guid { get; }
    public int Version { get; }
    public string Id { get; }
    public string Manifest { get; }
    public XmlReader ManifestReader { get; }
    public ProviderManifest(Stream manifestStream, int manifestLen);
    public ProviderManifest(string manifestFilePath);
    internal ProviderManifest(Byte[] serializedManifest, ManifestFormats format, byte majorVersion, byte minorVersion, string id);
    public void ValidateManifest();
    public void WriteToStream(Stream outputStream);
    public void WriteToFile(string filePath);
    [CompilerGeneratedAttribute]
public bool get_ISDynamic();
    [CompilerGeneratedAttribute]
internal void set_ISDynamic(bool value);
    public string get_Name();
    public Guid get_Guid();
    public int get_Version();
    public string get_Id();
    public bool BetterThan(ProviderManifest otherManifest);
    public string get_Manifest();
    public XmlReader get_ManifestReader();
    public virtual string ToString();
    internal void ParseProviderEvents(Func`2<DynamicTraceEventData, EventFilterResponse> callback, bool noThrowOnError);
    private static TemplateInfo ComputeFieldInfo(XmlReader reader, Dictionary`2<string, IDictionary`2<long, string>> maps);
    private static Type GetTypeForManifestTypeName(string manifestTypeName);
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
    private void Init();
}
public class Microsoft.Diagnostics.Tracing.Parsers.RegisteredTraceEventParser : ExternalTraceEventParser {
    public RegisteredTraceEventParser(TraceEventSource source, bool dontRegister);
    public static string GetManifestForRegisteredProvider(string providerName);
    public static string GetManifestForRegisteredProvider(Guid providerGuid);
    private static string IetfLanguageTag(CultureInfo culture);
    private static string MakeLegalIdentifier(string name);
    private static string GetKeywordStr(SortedDictionary`2<ulong, string> keywords, ulong keywordSet);
    private static string Capitalize(string str);
    internal virtual DynamicTraceEventData TryLookup(TraceEvent unknownEvent);
    internal static DynamicTraceEventData TryLookupWorker(TraceEvent unknownEvent, Dictionary`2<MapKey, IDictionary`2<long, string>> mapTable);
    internal static int TdhGetEventInformation(EVENT_RECORD* pEvent, UInt32 TdhContextCount, Void* pTdhContext, Byte* pBuffer, Int32* pBufferSize);
    internal static int TdhGetEventMapInformation(EVENT_RECORD* pEvent, string pMapName, EVENT_MAP_INFO* info, Int32& infoSize);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(EmptyTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(EmptyTraceData data);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.RequestNotification : Enum {
    public int value__;
    public static RequestNotification AcquireRequestState;
    public static RequestNotification AuthenticateRequest;
    public static RequestNotification AuthorizeRequest;
    public static RequestNotification BeginRequest;
    public static RequestNotification EndRequest;
    public static RequestNotification ExecuteRequestHandler;
    public static RequestNotification LogRequest;
    public static RequestNotification MapRequestHandler;
    public static RequestNotification PreExecuteRequestHandler;
    public static RequestNotification ReleaseRequestState;
    public static RequestNotification ResolveRequestCache;
    public static RequestNotification SendResponse;
    public static RequestNotification UpdateRequestCache;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.DbgDetermTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DbgDetermTraceData> Action;
    public ulong ImageBase { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DbgDetermTraceData(Action`1<DbgDetermTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public ulong get_ImageBase();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DbgDetermTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DbgDetermTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.DbgIDILRSDSTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DbgIDILRSDSTraceData> Action;
    public ulong ImageBase { get; }
    public Guid GuidSig { get; }
    public int Age { get; }
    public string PdbFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DbgIDILRSDSTraceData(Action`1<DbgIDILRSDSTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public ulong get_ImageBase();
    public Guid get_GuidSig();
    public int get_Age();
    public string get_PdbFileName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DbgIDILRSDSTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DbgIDILRSDSTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.DbgIDRSDSTraceData : TraceEvent {
    private Action`1<DbgIDRSDSTraceData> Action;
    public ulong ImageBase { get; }
    public Guid GuidSig { get; }
    public int Age { get; }
    public string PdbFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DbgIDRSDSTraceData(Action`1<DbgIDRSDSTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public ulong get_ImageBase();
    public Guid get_GuidSig();
    public int get_Age();
    public string get_PdbFileName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.DbgPPDBTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<DbgPPDBTraceData> Action;
    public ulong ImageBase { get; }
    public int TimeDateStamp { get; }
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal DbgPPDBTraceData(Action`1<DbgPPDBTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public ulong get_ImageBase();
    public int get_TimeDateStamp();
    public int get_MajorVersion();
    public int get_MinorVersion();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<DbgPPDBTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<DbgPPDBTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.FileVersionTraceData : TraceEvent {
    private Action`1<FileVersionTraceData> Action;
    public int ImageSize { get; }
    public int TimeDateStamp { get; }
    public DateTime BuildTime { get; }
    public string OrigFileName { get; }
    public string FileDescription { get; }
    public string FileVersion { get; }
    public string BinFileVersion { get; }
    public string VerLanguage { get; }
    public string ProductName { get; }
    public string CompanyName { get; }
    public string ProductVersion { get; }
    public string FileId { get; }
    public string ProgramId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal FileVersionTraceData(Action`1<FileVersionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public int get_ImageSize();
    public int get_TimeDateStamp();
    public DateTime get_BuildTime();
    public string get_OrigFileName();
    public string get_FileDescription();
    public string get_FileVersion();
    public string get_BinFileVersion();
    public string get_VerLanguage();
    public string get_ProductName();
    public string get_CompanyName();
    public string get_ProductVersion();
    public string get_FileId();
    public string get_ProgramId();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.ImageIDTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ImageIDTraceData> Action;
    public ulong ImageBase { get; }
    public long ImageSize { get; }
    public int TimeDateStamp { get; }
    public DateTime BuildTime { get; }
    public string OriginalFileName { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ImageIDTraceData(Action`1<ImageIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opCode, string opCodeName, Guid providerGuid, string providerName);
    public ulong get_ImageBase();
    public long get_ImageSize();
    public int get_TimeDateStamp();
    public DateTime get_BuildTime();
    public string get_OriginalFileName();
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    protected internal virtual void Validate();
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public virtual StringBuilder ToXml(StringBuilder sb);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<ImageIDTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<ImageIDTraceData> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Symbol.WinSatXmlTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<WinSatXmlTraceData> Action;
    private string m_xml;
    public string Xml { get; }
    public String[] PayloadNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    public WinSatXmlTraceData(Action`1<WinSatXmlTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_Xml();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<WinSatXmlTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<WinSatXmlTraceData> value);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    private string GetXml();
}
[GeneratedCodeAttribute("traceparsergen", "1.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.SymbolTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public static int DBGID_LOG_TYPE_IMAGEID;
    public static int DBGID_LOG_TYPE_NONE;
    public static int DBGID_LOG_TYPE_RSDS;
    public static int DBGID_LOG_TYPE_ILRSDS;
    public static int DBGID_LOG_TYPE_PPDB;
    public static int DBGID_LOG_TYPE_DETERM;
    public static int DBGID_LOG_TYPE_FILEVERSION;
    internal static Guid ImageIDTaskGuid;
    internal static Guid WinSatTaskGuid;
    internal static Guid MetaDataTaskGuid;
    internal static Guid PerfTrackMetaDataTaskGuid;
    public SymbolTraceEventParser(TraceEventSource source);
    private static SymbolTraceEventParser();
    public void add_ImageIDDbgID_RSDS(Action`1<DbgIDRSDSTraceData> value);
    public void remove_ImageIDDbgID_RSDS(Action`1<DbgIDRSDSTraceData> value);
    public void add_ImageID(Action`1<ImageIDTraceData> value);
    public void remove_ImageID(Action`1<ImageIDTraceData> value);
    public void add_ImageIDFileVersion(Action`1<FileVersionTraceData> value);
    public void remove_ImageIDFileVersion(Action`1<FileVersionTraceData> value);
    public void add_ImageIDNone(Action`1<EmptyTraceData> value);
    public void remove_ImageIDNone(Action`1<EmptyTraceData> value);
    public void add_ImageIDDbgID_ILRSDS(Action`1<DbgIDILRSDSTraceData> value);
    public void remove_ImageIDDbgID_ILRSDS(Action`1<DbgIDILRSDSTraceData> value);
    public void add_ImageIDDbgPPDB(Action`1<DbgPPDBTraceData> value);
    public void remove_ImageIDDbgPPDB(Action`1<DbgPPDBTraceData> value);
    public void add_ImageIDDbgDeterm(Action`1<DbgDetermTraceData> value);
    public void remove_ImageIDDbgDeterm(Action`1<DbgDetermTraceData> value);
    public void add_WinSatWinSPR(Action`1<WinSatXmlTraceData> value);
    public void remove_WinSatWinSPR(Action`1<WinSatXmlTraceData> value);
    public void add_WinSatMetrics(Action`1<WinSatXmlTraceData> value);
    public void remove_WinSatMetrics(Action`1<WinSatXmlTraceData> value);
    public void add_WinSatSystemConfig(Action`1<WinSatXmlTraceData> value);
    public void remove_WinSatSystemConfig(Action`1<WinSatXmlTraceData> value);
    public void add_MetaDataEventInfo(Action`1<EmptyTraceData> value);
    public void remove_MetaDataEventInfo(Action`1<EmptyTraceData> value);
    public void add_MetaDataEventMapInfo(Action`1<EmptyTraceData> value);
    public void remove_MetaDataEventMapInfo(Action`1<EmptyTraceData> value);
    protected virtual string GetProviderName();
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Tpl.AsyncCausalityStatus : Enum {
    public int value__;
    public static AsyncCausalityStatus Started;
    public static AsyncCausalityStatus Completed;
    public static AsyncCausalityStatus Canceled;
    public static AsyncCausalityStatus Error;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.AwaitTaskContinuationScheduledArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<AwaitTaskContinuationScheduledArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ContinuationId { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal AwaitTaskContinuationScheduledArgs(Action`1<AwaitTaskContinuationScheduledArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ContinuationId();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<AwaitTaskContinuationScheduledArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<AwaitTaskContinuationScheduledArgs> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Tpl.CausalityRelation : Enum {
    public int value__;
    public static CausalityRelation AssignDelegate;
    public static CausalityRelation Join;
    public static CausalityRelation Choice;
    public static CausalityRelation Cancel;
    public static CausalityRelation Error;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Tpl.CausalitySynchronousWork : Enum {
    public int value__;
    public static CausalitySynchronousWork CompletionNotification;
    public static CausalitySynchronousWork ProgressNotification;
    public static CausalitySynchronousWork Execution;
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Tpl.ForkJoinOperationType : Enum {
    public int value__;
    public static ForkJoinOperationType ParallelInvoke;
    public static ForkJoinOperationType ParallelFor;
    public static ForkJoinOperationType ParallelForEach;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.IncompleteAsyncMethodArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<IncompleteAsyncMethodArgs> m_target;
    public string stateMachineDescription { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal IncompleteAsyncMethodArgs(Action`1<IncompleteAsyncMethodArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public string get_stateMachineDescription();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    public static ulong GetKeywords();
    public static string GetProviderName();
    public static Guid GetProviderGuid();
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<IncompleteAsyncMethodArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<IncompleteAsyncMethodArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelForkArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelForkArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelForkArgs(Action`1<ParallelForkArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelForkArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelForkArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelInvokeBeginArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelInvokeBeginArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    public ForkJoinOperationType OperationType { get; }
    public int ActionCount { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelInvokeBeginArgs(Action`1<ParallelInvokeBeginArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    public ForkJoinOperationType get_OperationType();
    public int get_ActionCount();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelInvokeBeginArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelInvokeBeginArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelInvokeEndArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelInvokeEndArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelInvokeEndArgs(Action`1<ParallelInvokeEndArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelInvokeEndArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelInvokeEndArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelJoinArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelJoinArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelJoinArgs(Action`1<ParallelJoinArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelJoinArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelJoinArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelLoopBeginArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelLoopBeginArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    public ForkJoinOperationType OperationType { get; }
    public long InclusiveFrom { get; }
    public long ExclusiveTo { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelLoopBeginArgs(Action`1<ParallelLoopBeginArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    public ForkJoinOperationType get_OperationType();
    public long get_InclusiveFrom();
    public long get_ExclusiveTo();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelLoopBeginArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelLoopBeginArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.ParallelLoopEndArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<ParallelLoopEndArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int ForkJoinContextID { get; }
    public long TotalIterations { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal ParallelLoopEndArgs(Action`1<ParallelLoopEndArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_ForkJoinContextID();
    public long get_TotalIterations();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<ParallelLoopEndArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<ParallelLoopEndArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskCompletedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskCompletedArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int TaskID { get; }
    public bool IsExceptional { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskCompletedArgs(Action`1<TaskCompletedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_TaskID();
    public bool get_IsExceptional();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskCompletedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskCompletedArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskScheduledArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskScheduledArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int TaskID { get; }
    public int CreatingTaskID { get; }
    public int TaskCreationOptions { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskScheduledArgs(Action`1<TaskScheduledArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_TaskID();
    public int get_CreatingTaskID();
    public int get_TaskCreationOptions();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskScheduledArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskScheduledArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskStartedArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskStartedArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int TaskID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskStartedArgs(Action`1<TaskStartedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_TaskID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskStartedArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskStartedArgs> value);
}
public enum Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskWaitBehavior : Enum {
    public int value__;
    public static TaskWaitBehavior Synchronous;
    public static TaskWaitBehavior Asynchronous;
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskWaitContinuationCompleteArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskWaitContinuationCompleteArgs> m_target;
    public int TaskID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskWaitContinuationCompleteArgs(Action`1<TaskWaitContinuationCompleteArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TaskID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskWaitContinuationCompleteArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskWaitContinuationCompleteArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskWaitSendArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskWaitSendArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int TaskID { get; }
    public TaskWaitBehavior Behavior { get; }
    public int ContinueWithTaskID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskWaitSendArgs(Action`1<TaskWaitSendArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_TaskID();
    public TaskWaitBehavior get_Behavior();
    public int get_ContinueWithTaskID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskWaitSendArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskWaitSendArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TaskWaitStopArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TaskWaitStopArgs> m_target;
    public int OriginatingTaskSchedulerID { get; }
    public int OriginatingTaskID { get; }
    public int TaskID { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TaskWaitStopArgs(Action`1<TaskWaitStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_OriginatingTaskSchedulerID();
    public int get_OriginatingTaskID();
    public int get_TaskID();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TaskWaitStopArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TaskWaitStopArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TraceOperationRelationArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceOperationRelationArgs> m_target;
    public int TaskID { get; }
    public CausalityRelation Relation { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TraceOperationRelationArgs(Action`1<TraceOperationRelationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TaskID();
    public CausalityRelation get_Relation();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TraceOperationRelationArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TraceOperationRelationArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TraceOperationStartArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceOperationStartArgs> m_target;
    public int TaskID { get; }
    public string OperationName { get; }
    public long RelatedContext { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TraceOperationStartArgs(Action`1<TraceOperationStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TaskID();
    public string get_OperationName();
    public long get_RelatedContext();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TraceOperationStartArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TraceOperationStartArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TraceOperationStopArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceOperationStopArgs> m_target;
    public int TaskID { get; }
    public AsyncCausalityStatus Status { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TraceOperationStopArgs(Action`1<TraceOperationStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TaskID();
    public AsyncCausalityStatus get_Status();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TraceOperationStopArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TraceOperationStopArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TraceSynchronousWorkStartArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceSynchronousWorkStartArgs> m_target;
    public int TaskID { get; }
    public CausalitySynchronousWork Work { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TraceSynchronousWorkStartArgs(Action`1<TraceSynchronousWorkStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public int get_TaskID();
    public CausalitySynchronousWork get_Work();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TraceSynchronousWorkStartArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TraceSynchronousWorkStartArgs> value);
}
public class Microsoft.Diagnostics.Tracing.Parsers.Tpl.TraceSynchronousWorkStopArgs : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceSynchronousWorkStopArgs> m_target;
    public CausalitySynchronousWork Work { get; }
    protected internal Delegate Target { get; protected internal set; }
    public String[] PayloadNames { get; }
    internal TraceSynchronousWorkStopArgs(Action`1<TraceSynchronousWorkStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public CausalitySynchronousWork get_Work();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_m_target(Action`1<TraceSynchronousWorkStopArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_target(Action`1<TraceSynchronousWorkStopArgs> value);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.TplEtwProviderTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public TplEtwProviderTraceEventParser(TraceEventSource source);
    private static TplEtwProviderTraceEventParser();
    public void add_AwaitTaskContinuationScheduledSend(Action`1<AwaitTaskContinuationScheduledArgs> value);
    public void remove_AwaitTaskContinuationScheduledSend(Action`1<AwaitTaskContinuationScheduledArgs> value);
    public void add_ForkJoinStart(Action`1<ParallelForkArgs> value);
    public void remove_ForkJoinStart(Action`1<ParallelForkArgs> value);
    public void add_ForkJoinStop(Action`1<ParallelJoinArgs> value);
    public void remove_ForkJoinStop(Action`1<ParallelJoinArgs> value);
    public void add_InvokeStart(Action`1<ParallelInvokeBeginArgs> value);
    public void remove_InvokeStart(Action`1<ParallelInvokeBeginArgs> value);
    public void add_InvokeStop(Action`1<ParallelInvokeEndArgs> value);
    public void remove_InvokeStop(Action`1<ParallelInvokeEndArgs> value);
    public void add_LoopStart(Action`1<ParallelLoopBeginArgs> value);
    public void remove_LoopStart(Action`1<ParallelLoopBeginArgs> value);
    public void add_LoopStop(Action`1<ParallelLoopEndArgs> value);
    public void remove_LoopStop(Action`1<ParallelLoopEndArgs> value);
    public void add_TaskExecuteStart(Action`1<TaskStartedArgs> value);
    public void remove_TaskExecuteStart(Action`1<TaskStartedArgs> value);
    public void add_TaskExecuteStop(Action`1<TaskCompletedArgs> value);
    public void remove_TaskExecuteStop(Action`1<TaskCompletedArgs> value);
    public void add_TaskScheduledSend(Action`1<TaskScheduledArgs> value);
    public void remove_TaskScheduledSend(Action`1<TaskScheduledArgs> value);
    public void add_TaskWaitContinuationComplete(Action`1<TaskWaitContinuationCompleteArgs> value);
    public void remove_TaskWaitContinuationComplete(Action`1<TaskWaitContinuationCompleteArgs> value);
    public void add_TaskWaitSend(Action`1<TaskWaitSendArgs> value);
    public void remove_TaskWaitSend(Action`1<TaskWaitSendArgs> value);
    public void add_TaskWaitStop(Action`1<TaskWaitStopArgs> value);
    public void remove_TaskWaitStop(Action`1<TaskWaitStopArgs> value);
    public void add_TraceOperationRelation(Action`1<TraceOperationRelationArgs> value);
    public void remove_TraceOperationRelation(Action`1<TraceOperationRelationArgs> value);
    public void add_TraceOperationStart(Action`1<TraceOperationStartArgs> value);
    public void remove_TraceOperationStart(Action`1<TraceOperationStartArgs> value);
    public void add_TraceOperationStop(Action`1<TraceOperationStopArgs> value);
    public void remove_TraceOperationStop(Action`1<TraceOperationStopArgs> value);
    public void add_TraceSynchronousWorkStart(Action`1<TraceSynchronousWorkStartArgs> value);
    public void remove_TraceSynchronousWorkStart(Action`1<TraceSynchronousWorkStartArgs> value);
    public void add_TraceSynchronousWorkStop(Action`1<TraceSynchronousWorkStopArgs> value);
    public void remove_TraceSynchronousWorkStop(Action`1<TraceSynchronousWorkStopArgs> value);
    public void add_IncompleteAsyncMethod(Action`1<IncompleteAsyncMethodArgs> value);
    public void remove_IncompleteAsyncMethod(Action`1<IncompleteAsyncMethodArgs> value);
    protected virtual string GetProviderName();
    private static AwaitTaskContinuationScheduledArgs AwaitTaskContinuationScheduledSendTemplate(Action`1<AwaitTaskContinuationScheduledArgs> action);
    private static ParallelForkArgs ForkJoinStartTemplate(Action`1<ParallelForkArgs> action);
    private static ParallelJoinArgs ForkJoinStopTemplate(Action`1<ParallelJoinArgs> action);
    private static ParallelInvokeBeginArgs InvokeStartTemplate(Action`1<ParallelInvokeBeginArgs> action);
    private static ParallelInvokeEndArgs InvokeStopTemplate(Action`1<ParallelInvokeEndArgs> action);
    private static ParallelLoopBeginArgs LoopStartTemplate(Action`1<ParallelLoopBeginArgs> action);
    private static ParallelLoopEndArgs LoopStopTemplate(Action`1<ParallelLoopEndArgs> action);
    private static TaskStartedArgs TaskExecuteStartTemplate(Action`1<TaskStartedArgs> action);
    private static TaskCompletedArgs TaskExecuteStopTemplate(Action`1<TaskCompletedArgs> action);
    private static TaskScheduledArgs TaskScheduledSendTemplate(Action`1<TaskScheduledArgs> action);
    private static TaskWaitContinuationCompleteArgs TaskWaitContinuationCompleteTemplate(Action`1<TaskWaitContinuationCompleteArgs> action);
    private static TaskWaitSendArgs TaskWaitSendTemplate(Action`1<TaskWaitSendArgs> action);
    private static TaskWaitStopArgs TaskWaitStopTemplate(Action`1<TaskWaitStopArgs> action);
    private static TraceOperationRelationArgs TraceOperationRelationTemplate(Action`1<TraceOperationRelationArgs> action);
    private static TraceOperationStartArgs TraceOperationStartTemplate(Action`1<TraceOperationStartArgs> action);
    private static TraceOperationStopArgs TraceOperationStopTemplate(Action`1<TraceOperationStopArgs> action);
    private static TraceSynchronousWorkStartArgs TraceSynchronousWorkStartTemplate(Action`1<TraceSynchronousWorkStartArgs> action);
    private static TraceSynchronousWorkStopArgs TraceSynchronousWorkStopTemplate(Action`1<TraceSynchronousWorkStopArgs> action);
    private static IncompleteAsyncMethodArgs IncompleteAsyncMethodTemplate(Action`1<IncompleteAsyncMethodArgs> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
[GeneratedCodeAttribute("traceparsergen", "2.0")]
public class Microsoft.Diagnostics.Tracing.Parsers.WpfTraceEventParser : TraceEventParser {
    public static string ProviderName;
    public static Guid ProviderGuid;
    private static TraceEvent[] modreq(System.Runtime.CompilerServices.IsVolatile) s_templates;
    public WpfTraceEventParser(TraceEventSource source);
    private static WpfTraceEventParser();
    public void add_AddAnnotationStart(Action`1<EmptyTraceData> value);
    public void remove_AddAnnotationStart(Action`1<EmptyTraceData> value);
    public void add_AddAnnotationStop(Action`1<EmptyTraceData> value);
    public void remove_AddAnnotationStop(Action`1<EmptyTraceData> value);
    public void add_AddAttachedHighlightStart(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedHighlightStart(Action`1<EmptyTraceData> value);
    public void add_AddAttachedHighlightStop(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedHighlightStop(Action`1<EmptyTraceData> value);
    public void add_AddAttachedMHStart(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedMHStart(Action`1<EmptyTraceData> value);
    public void add_AddAttachedMHStop(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedMHStop(Action`1<EmptyTraceData> value);
    public void add_AddAttachedSNStart(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedSNStart(Action`1<EmptyTraceData> value);
    public void add_AddAttachedSNStop(Action`1<EmptyTraceData> value);
    public void remove_AddAttachedSNStop(Action`1<EmptyTraceData> value);
    public void add_AnnotationInkChangedStart(Action`1<EmptyTraceData> value);
    public void remove_AnnotationInkChangedStart(Action`1<EmptyTraceData> value);
    public void add_AnnotationInkChangedStop(Action`1<EmptyTraceData> value);
    public void remove_AnnotationInkChangedStop(Action`1<EmptyTraceData> value);
    public void add_AnnotationTextChangedStart(Action`1<EmptyTraceData> value);
    public void remove_AnnotationTextChangedStart(Action`1<EmptyTraceData> value);
    public void add_AnnotationTextChangedStop(Action`1<EmptyTraceData> value);
    public void remove_AnnotationTextChangedStop(Action`1<EmptyTraceData> value);
    public void add_BitmapCopy(Action`1<Template_2> value);
    public void remove_BitmapCopy(Action`1<Template_2> value);
    public void add_ClearHighlightStart(Action`1<EmptyTraceData> value);
    public void remove_ClearHighlightStart(Action`1<EmptyTraceData> value);
    public void add_ClearHighlightStop(Action`1<EmptyTraceData> value);
    public void remove_ClearHighlightStop(Action`1<EmptyTraceData> value);
    public void add_CreateChannel(Action`1<CreateChannel> value);
    public void remove_CreateChannel(Action`1<CreateChannel> value);
    public void add_CreateHighlightStart(Action`1<EmptyTraceData> value);
    public void remove_CreateHighlightStart(Action`1<EmptyTraceData> value);
    public void add_CreateHighlightStop(Action`1<EmptyTraceData> value);
    public void remove_CreateHighlightStop(Action`1<EmptyTraceData> value);
    public void add_CreateOrAddOnChnl(Action`1<CreateOrAddOnChnl> value);
    public void remove_CreateOrAddOnChnl(Action`1<CreateOrAddOnChnl> value);
    public void add_CreateStickyNoteStart(Action`1<EmptyTraceData> value);
    public void remove_CreateStickyNoteStart(Action`1<EmptyTraceData> value);
    public void add_CreateStickyNoteStop(Action`1<EmptyTraceData> value);
    public void remove_CreateStickyNoteStop(Action`1<EmptyTraceData> value);
    public void add_CreateWpfGfxResource(Action`1<CreateWpfGfxResource> value);
    public void remove_CreateWpfGfxResource(Action`1<CreateWpfGfxResource> value);
    public void add_DeleteAnnotationStart(Action`1<EmptyTraceData> value);
    public void remove_DeleteAnnotationStart(Action`1<EmptyTraceData> value);
    public void add_DeleteAnnotationStop(Action`1<EmptyTraceData> value);
    public void remove_DeleteAnnotationStop(Action`1<EmptyTraceData> value);
    public void add_DeleteInkNoteStart(Action`1<EmptyTraceData> value);
    public void remove_DeleteInkNoteStart(Action`1<EmptyTraceData> value);
    public void add_DeleteInkNoteStop(Action`1<EmptyTraceData> value);
    public void remove_DeleteInkNoteStop(Action`1<EmptyTraceData> value);
    public void add_DeleteTextNoteStart(Action`1<EmptyTraceData> value);
    public void remove_DeleteTextNoteStart(Action`1<EmptyTraceData> value);
    public void add_DeleteTextNoteStop(Action`1<EmptyTraceData> value);
    public void remove_DeleteTextNoteStop(Action`1<EmptyTraceData> value);
    public void add_DeserializeAnnotationStart(Action`1<EmptyTraceData> value);
    public void remove_DeserializeAnnotationStart(Action`1<EmptyTraceData> value);
    public void add_DeserializeAnnotationStop(Action`1<EmptyTraceData> value);
    public void remove_DeserializeAnnotationStop(Action`1<EmptyTraceData> value);
    public void add_DrawBitmap(Action`1<Template_1> value);
    public void remove_DrawBitmap(Action`1<Template_1> value);
    public void add_DWMDraw_(Action`1<FloatBounds> value);
    public void remove_DWMDraw_(Action`1<FloatBounds> value);
    public void add_DWMDraw_BeginLayerEnd(Action`1<FloatBounds> value);
    public void remove_DWMDraw_BeginLayerEnd(Action`1<FloatBounds> value);
    public void add_DWMDraw_BeginLayerStart(Action`1<FloatBounds> value);
    public void remove_DWMDraw_BeginLayerStart(Action`1<FloatBounds> value);
    public void add_DWMDraw_BitmapEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_BitmapEnd(Action`1<Template_6> value);
    public void add_DWMDraw_BitmapStart(Action`1<Template_6> value);
    public void remove_DWMDraw_BitmapStart(Action`1<Template_6> value);
    public void add_DWMDraw_ClearStart(Action`1<FloatBounds> value);
    public void remove_DWMDraw_ClearStart(Action`1<FloatBounds> value);
    public void add_DWMDraw_ClearStop(Action`1<EmptyTraceData> value);
    public void remove_DWMDraw_ClearStop(Action`1<EmptyTraceData> value);
    public void add_DWMDraw_ClippedBitmapEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_ClippedBitmapEnd(Action`1<Template_6> value);
    public void add_DWMDraw_ClippedBitmapStart(Action`1<Template_6> value);
    public void remove_DWMDraw_ClippedBitmapStart(Action`1<Template_6> value);
    public void add_DWMDraw_EndLayerEnd(Action`1<EmptyTraceData> value);
    public void remove_DWMDraw_EndLayerEnd(Action`1<EmptyTraceData> value);
    public void add_DWMDraw_EndLayerStart(Action`1<EmptyTraceData> value);
    public void remove_DWMDraw_EndLayerStart(Action`1<EmptyTraceData> value);
    public void add_DWMDraw_GeometryEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_GeometryEnd(Action`1<Template_6> value);
    public void add_DWMDraw_GeometryStart(Action`1<Template_6> value);
    public void remove_DWMDraw_GeometryStart(Action`1<Template_6> value);
    public void add_DWMDraw_GlyphRunEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_GlyphRunEnd(Action`1<Template_6> value);
    public void add_DWMDraw_GlyphRunStart(Action`1<Template_6> value);
    public void remove_DWMDraw_GlyphRunStart(Action`1<Template_6> value);
    public void add_DWMDraw_ImageEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_ImageEnd(Action`1<Template_6> value);
    public void add_DWMDraw_ImageStart(Action`1<Template_6> value);
    public void remove_DWMDraw_ImageStart(Action`1<Template_6> value);
    public void add_DWMDraw_RectangleEnd(Action`1<Template_6> value);
    public void remove_DWMDraw_RectangleEnd(Action`1<Template_6> value);
    public void add_DWMDraw_RectangleStart(Action`1<Template_6> value);
    public void remove_DWMDraw_RectangleStart(Action`1<Template_6> value);
    public void add_GetAnnotationByIdStart(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationByIdStart(Action`1<EmptyTraceData> value);
    public void add_GetAnnotationByIdStop(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationByIdStop(Action`1<EmptyTraceData> value);
    public void add_GetAnnotationByLocStart(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationByLocStart(Action`1<EmptyTraceData> value);
    public void add_GetAnnotationByLocStop(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationByLocStop(Action`1<EmptyTraceData> value);
    public void add_GetAnnotationsStart(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationsStart(Action`1<EmptyTraceData> value);
    public void add_GetAnnotationsStop(Action`1<EmptyTraceData> value);
    public void remove_GetAnnotationsStop(Action`1<EmptyTraceData> value);
    public void add_LayerEventStart(Action`1<EmptyTraceData> value);
    public void remove_LayerEventStart(Action`1<EmptyTraceData> value);
    public void add_LayerEventStop(Action`1<EmptyTraceData> value);
    public void remove_LayerEventStop(Action`1<EmptyTraceData> value);
    public void add_LoadAnnotationsStart(Action`1<EmptyTraceData> value);
    public void remove_LoadAnnotationsStart(Action`1<EmptyTraceData> value);
    public void add_LoadAnnotationsStop(Action`1<EmptyTraceData> value);
    public void remove_LoadAnnotationsStop(Action`1<EmptyTraceData> value);
    public void add_ManipulationEventRaised(Action`1<ID32Template> value);
    public void remove_ManipulationEventRaised(Action`1<ID32Template> value);
    public void add_ManipulationReportFrame(Action`1<ID32Template> value);
    public void remove_ManipulationReportFrame(Action`1<ID32Template> value);
    public void add_NavigationNavigationAsyncWorkItem(Action`1<EmptyTraceData> value);
    public void remove_NavigationNavigationAsyncWorkItem(Action`1<EmptyTraceData> value);
    public void add_NavigationNavigationContentRendered(Action`1<EmptyTraceData> value);
    public void remove_NavigationNavigationContentRendered(Action`1<EmptyTraceData> value);
    public void add_NavigationNavigationEnd(Action`1<EmptyTraceData> value);
    public void remove_NavigationNavigationEnd(Action`1<EmptyTraceData> value);
    public void add_NavigationNavigationLaunchBrowser(Action`1<URITemplate> value);
    public void remove_NavigationNavigationLaunchBrowser(Action`1<URITemplate> value);
    public void add_NavigationNavigationPageFunctionReturn(Action`1<Template_57> value);
    public void remove_NavigationNavigationPageFunctionReturn(Action`1<Template_57> value);
    public void add_NavigationNavigationStart(Action`1<Template_56> value);
    public void remove_NavigationNavigationStart(Action`1<Template_56> value);
    public void add_NavigationNavigationWebResponseReceived(Action`1<EmptyTraceData> value);
    public void remove_NavigationNavigationWebResponseReceived(Action`1<EmptyTraceData> value);
    public void add_PenThreadPoolThreadAcquisition(Action`1<ID32Template> value);
    public void remove_PenThreadPoolThreadAcquisition(Action`1<ID32Template> value);
    public void add_ReleaseOnChannel(Action`1<ReleaseOnChannel> value);
    public void remove_ReleaseOnChannel(Action`1<ReleaseOnChannel> value);
    public void add_RemoveAttachedHighlightStart(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedHighlightStart(Action`1<EmptyTraceData> value);
    public void add_RemoveAttachedHighlightStop(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedHighlightStop(Action`1<EmptyTraceData> value);
    public void add_RemoveAttachedMHStart(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedMHStart(Action`1<EmptyTraceData> value);
    public void add_RemoveAttachedMHStop(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedMHStop(Action`1<EmptyTraceData> value);
    public void add_RemoveAttachedSNStart(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedSNStart(Action`1<EmptyTraceData> value);
    public void add_RemoveAttachedSNStop(Action`1<EmptyTraceData> value);
    public void remove_RemoveAttachedSNStop(Action`1<EmptyTraceData> value);
    public void add_SerializeAnnotationStart(Action`1<EmptyTraceData> value);
    public void remove_SerializeAnnotationStart(Action`1<EmptyTraceData> value);
    public void add_SerializeAnnotationStop(Action`1<EmptyTraceData> value);
    public void remove_SerializeAnnotationStop(Action`1<EmptyTraceData> value);
    public void add_SetClip(Action`1<IntBounds> value);
    public void remove_SetClip(Action`1<IntBounds> value);
    public void add_StylusEventQueued(Action`1<ID32Template> value);
    public void remove_StylusEventQueued(Action`1<ID32Template> value);
    public void add_TouchDownReported(Action`1<ID32Template> value);
    public void remove_TouchDownReported(Action`1<ID32Template> value);
    public void add_TouchMoveReported(Action`1<ID32Template> value);
    public void remove_TouchMoveReported(Action`1<ID32Template> value);
    public void add_TouchUpReported(Action`1<ID32Template> value);
    public void remove_TouchUpReported(Action`1<ID32Template> value);
    public void add_UnexpectedSoftwareFallback(Action`1<GfxSoftwareFallback> value);
    public void remove_UnexpectedSoftwareFallback(Action`1<GfxSoftwareFallback> value);
    public void add_UpdateAnnotationWithSNCStart(Action`1<EmptyTraceData> value);
    public void remove_UpdateAnnotationWithSNCStart(Action`1<EmptyTraceData> value);
    public void add_UpdateAnnotationWithSNCStop(Action`1<EmptyTraceData> value);
    public void remove_UpdateAnnotationWithSNCStop(Action`1<EmptyTraceData> value);
    public void add_UpdateSNCWithAnnotationStart(Action`1<EmptyTraceData> value);
    public void remove_UpdateSNCWithAnnotationStart(Action`1<EmptyTraceData> value);
    public void add_UpdateSNCWithAnnotationStop(Action`1<EmptyTraceData> value);
    public void remove_UpdateSNCWithAnnotationStop(Action`1<EmptyTraceData> value);
    public void add_UpdateVisualStateStart(Action`1<EmptyTraceData> value);
    public void remove_UpdateVisualStateStart(Action`1<EmptyTraceData> value);
    public void add_UpdateVisualStateStop(Action`1<EmptyTraceData> value);
    public void remove_UpdateVisualStateStop(Action`1<EmptyTraceData> value);
    public void add_VisualCacheAlloc(Action`1<VisualCacheTemplate> value);
    public void remove_VisualCacheAlloc(Action`1<VisualCacheTemplate> value);
    public void add_VisualCacheUpdate(Action`1<VisualCacheTemplate> value);
    public void remove_VisualCacheUpdate(Action`1<VisualCacheTemplate> value);
    public void add_WClientAnimRenderHandlerStart(Action`1<PerfElementID> value);
    public void remove_WClientAnimRenderHandlerStart(Action`1<PerfElementID> value);
    public void add_WClientAnimRenderHandlerStop(Action`1<EmptyTraceData> value);
    public void remove_WClientAnimRenderHandlerStop(Action`1<EmptyTraceData> value);
    public void add_WClientAppCtor(Action`1<EmptyTraceData> value);
    public void remove_WClientAppCtor(Action`1<EmptyTraceData> value);
    public void add_WClientAppRun(Action`1<EmptyTraceData> value);
    public void remove_WClientAppRun(Action`1<EmptyTraceData> value);
    public void add_WClientArrangeArrangeAbort(Action`1<LayoutAborted> value);
    public void remove_WClientArrangeArrangeAbort(Action`1<LayoutAborted> value);
    public void add_WClientArrangeArrangeElementBegin(Action`1<ArrangeData> value);
    public void remove_WClientArrangeArrangeElementBegin(Action`1<ArrangeData> value);
    public void add_WClientArrangeArrangeElementEnd(Action`1<ArrangeData> value);
    public void remove_WClientArrangeArrangeElementEnd(Action`1<ArrangeData> value);
    public void add_WClientArrangeStart(Action`1<PerfElementID> value);
    public void remove_WClientArrangeStart(Action`1<PerfElementID> value);
    public void add_WClientArrangeStop(Action`1<Counter> value);
    public void remove_WClientArrangeStop(Action`1<Counter> value);
    public void add_WClientCompileSceneStart(Action`1<PerfElementID> value);
    public void remove_WClientCompileSceneStart(Action`1<PerfElementID> value);
    public void add_WClientCompileSceneStop(Action`1<EmptyTraceData> value);
    public void remove_WClientCompileSceneStop(Action`1<EmptyTraceData> value);
    public void add_WClientCreateIRT(Action`1<CreateIRT> value);
    public void remove_WClientCreateIRT(Action`1<CreateIRT> value);
    public void add_WClientCreateVisual(Action`1<Template_18> value);
    public void remove_WClientCreateVisual(Action`1<Template_18> value);
    public void add_WClientDesktopRTCreateStart(Action`1<HwndTemplate> value);
    public void remove_WClientDesktopRTCreateStart(Action`1<HwndTemplate> value);
    public void add_WClientDesktopRTCreateStop(Action`1<HwndTemplate> value);
    public void remove_WClientDesktopRTCreateStop(Action`1<HwndTemplate> value);
    public void add_WClientDRXAlphaFlattenStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXAlphaFlattenStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXAlphaFlattenStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXAlphaFlattenStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXCommitPageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXCommitPageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXCommitPageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXCommitPageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXConvertFontStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXConvertFontStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXConvertFontStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXConvertFontStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXConvertImageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXConvertImageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXConvertImageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXConvertImageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEndDocStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEndDocStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEndDocStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEndDocStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEndPageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEndPageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEndPageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEndPageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEnsureOMStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEnsureOMStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXEnsureOMStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXEnsureOMStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXFindStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXFindStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXFindStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXFindStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXFlushPageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXFlushPageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXFlushPageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXFlushPageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetDevModeStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetDevModeStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetDevModeStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetDevModeStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetPageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetPageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetPageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetPageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetPrintCapStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetPrintCapStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetPrintCapStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetPrintCapStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetStreamStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetStreamStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetStreamStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetStreamStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetVisualStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetVisualStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXGetVisualStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXGetVisualStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXInstantiated(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXInstantiated(Action`1<EmptyTraceData> value);
    public void add_WClientDRXInvalidateView(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXInvalidateView(Action`1<EmptyTraceData> value);
    public void add_WClientDRXLayoutStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXLayoutStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXLayoutStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXLayoutStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXLineDown(Action`1<Template_33> value);
    public void remove_WClientDRXLineDown(Action`1<Template_33> value);
    public void add_WClientDRXLoadPrimitiveStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXLoadPrimitiveStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXLoadPrimitiveStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXLoadPrimitiveStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXOpenPackageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXOpenPackageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXOpenPackageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXOpenPackageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXPageDown(Action`1<Template_33> value);
    public void remove_WClientDRXPageDown(Action`1<Template_33> value);
    public void add_WClientDRXPageJump(Action`1<Template_34> value);
    public void remove_WClientDRXPageJump(Action`1<Template_34> value);
    public void add_WClientDRXPageLoaded(Action`1<Template_32> value);
    public void remove_WClientDRXPageLoaded(Action`1<Template_32> value);
    public void add_WClientDRXPageVisible(Action`1<Template_31> value);
    public void remove_WClientDRXPageVisible(Action`1<Template_31> value);
    public void add_WClientDRXPTProviderStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXPTProviderStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXPTProviderStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXPTProviderStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXRasterStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXRasterStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXRasterStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXRasterStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXReadStreamStart(Action`1<Counter> value);
    public void remove_WClientDRXReadStreamStart(Action`1<Counter> value);
    public void add_WClientDRXReadStreamStop(Action`1<Template_30> value);
    public void remove_WClientDRXReadStreamStop(Action`1<Template_30> value);
    public void add_WClientDRXReleaseWriterStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXReleaseWriterStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXReleaseWriterStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXReleaseWriterStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSavePageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSavePageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSavePageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSavePageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSaveXpsStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSaveXpsStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSaveXpsStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSaveXpsStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSerializationStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSerializationStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSerializationStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSerializationStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSerializeTreeStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSerializeTreeStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXSerializeTreeStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXSerializeTreeStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXStartDocStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXStartDocStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXStartDocStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXStartDocStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXStartPageStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXStartPageStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXStartPageStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXStartPageStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXStyleCreated(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXStyleCreated(Action`1<EmptyTraceData> value);
    public void add_WClientDRXTreeFlattenStart(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXTreeFlattenStart(Action`1<EmptyTraceData> value);
    public void add_WClientDRXTreeFlattenStop(Action`1<EmptyTraceData> value);
    public void remove_WClientDRXTreeFlattenStop(Action`1<EmptyTraceData> value);
    public void add_WClientDRXZoom(Action`1<Template_35> value);
    public void remove_WClientDRXZoom(Action`1<Template_35> value);
    public void add_WClientFontCache(Action`1<EmptyTraceData> value);
    public void remove_WClientFontCache(Action`1<EmptyTraceData> value);
    public void add_WClientInputMessage(Action`1<Template_19> value);
    public void remove_WClientInputMessage(Action`1<Template_19> value);
    public void add_WClientInterlockedRenderStart(Action`1<EmptyTraceData> value);
    public void remove_WClientInterlockedRenderStart(Action`1<EmptyTraceData> value);
    public void add_WClientInterlockedRenderStop(Action`1<EmptyTraceData> value);
    public void remove_WClientInterlockedRenderStop(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutAbort(Action`1<LayoutAborted> value);
    public void remove_WClientLayoutAbort(Action`1<LayoutAborted> value);
    public void add_WClientLayoutException(Action`1<PerfElementID> value);
    public void remove_WClientLayoutException(Action`1<PerfElementID> value);
    public void add_WClientLayoutFireAutomationEventsBegin(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireAutomationEventsBegin(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutFireAutomationEventsEnd(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireAutomationEventsEnd(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutFireLayoutUpdatedBegin(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireLayoutUpdatedBegin(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutFireLayoutUpdatedEnd(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireLayoutUpdatedEnd(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutFireSizeChangedBegin(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireSizeChangedBegin(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutFireSizeChangedEnd(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutFireSizeChangedEnd(Action`1<EmptyTraceData> value);
    public void add_WClientLayoutInvalidated(Action`1<PerfElementID> value);
    public void remove_WClientLayoutInvalidated(Action`1<PerfElementID> value);
    public void add_WClientLayoutStart(Action`1<LayoutSourceTemplate> value);
    public void remove_WClientLayoutStart(Action`1<LayoutSourceTemplate> value);
    public void add_WClientLayoutStop(Action`1<EmptyTraceData> value);
    public void remove_WClientLayoutStop(Action`1<EmptyTraceData> value);
    public void add_WClientMeasureMeasureAbort(Action`1<LayoutAborted> value);
    public void remove_WClientMeasureMeasureAbort(Action`1<LayoutAborted> value);
    public void add_WClientMeasureMeasureElementBegin(Action`1<MeasureData> value);
    public void remove_WClientMeasureMeasureElementBegin(Action`1<MeasureData> value);
    public void add_WClientMeasureMeasureElementEnd(Action`1<MeasureData> value);
    public void remove_WClientMeasureMeasureElementEnd(Action`1<MeasureData> value);
    public void add_WClientMeasureStart(Action`1<PerfElementID> value);
    public void remove_WClientMeasureStart(Action`1<PerfElementID> value);
    public void add_WClientMeasureStop(Action`1<Counter> value);
    public void remove_WClientMeasureStop(Action`1<Counter> value);
    public void add_WClientMediaRenderStart(Action`1<Template_20> value);
    public void remove_WClientMediaRenderStart(Action`1<Template_20> value);
    public void add_WClientMediaRenderStop(Action`1<EmptyTraceData> value);
    public void remove_WClientMediaRenderStop(Action`1<EmptyTraceData> value);
    public void add_WClientOnRenderStart(Action`1<PerfElementID> value);
    public void remove_WClientOnRenderStart(Action`1<PerfElementID> value);
    public void add_WClientOnRenderStop(Action`1<PerfElementID> value);
    public void remove_WClientOnRenderStop(Action`1<PerfElementID> value);
    public void add_WClientParseBamlStart(Action`1<URITemplate> value);
    public void remove_WClientParseBamlStart(Action`1<URITemplate> value);
    public void add_WClientParseBamlStop(Action`1<URITemplate> value);
    public void remove_WClientParseBamlStop(Action`1<URITemplate> value);
    public void add_WClientParseFefCrInstStart(Action`1<EmptyTraceData> value);
    public void remove_WClientParseFefCrInstStart(Action`1<EmptyTraceData> value);
    public void add_WClientParseFefCrInstStop(Action`1<EmptyTraceData> value);
    public void remove_WClientParseFefCrInstStop(Action`1<EmptyTraceData> value);
    public void add_WClientParseInstVisTreeStart(Action`1<EmptyTraceData> value);
    public void remove_WClientParseInstVisTreeStart(Action`1<EmptyTraceData> value);
    public void add_WClientParseInstVisTreeStop(Action`1<MessageStringTemplate> value);
    public void remove_WClientParseInstVisTreeStop(Action`1<MessageStringTemplate> value);
    public void add_WClientParseRdrCrInFTypStart(Action`1<EmptyTraceData> value);
    public void remove_WClientParseRdrCrInFTypStart(Action`1<EmptyTraceData> value);
    public void add_WClientParseRdrCrInFTypStop(Action`1<TypeStringTemplate> value);
    public void remove_WClientParseRdrCrInFTypStop(Action`1<TypeStringTemplate> value);
    public void add_WClientParseRdrCrInstStart(Action`1<EmptyTraceData> value);
    public void remove_WClientParseRdrCrInstStart(Action`1<EmptyTraceData> value);
    public void add_WClientParseRdrCrInstStop(Action`1<EmptyTraceData> value);
    public void remove_WClientParseRdrCrInstStop(Action`1<EmptyTraceData> value);
    public void add_WClientParseXamlBamlInfo(Action`1<WClientParseXamlBamlInfoTemplate> value);
    public void remove_WClientParseXamlBamlInfo(Action`1<WClientParseXamlBamlInfoTemplate> value);
    public void add_WClientParseXamlStart(Action`1<URITemplate> value);
    public void remove_WClientParseXamlStart(Action`1<URITemplate> value);
    public void add_WClientParseXamlStop(Action`1<URITemplate> value);
    public void remove_WClientParseXamlStop(Action`1<URITemplate> value);
    public void add_WClientParseXmlStart(Action`1<URITemplate> value);
    public void remove_WClientParseXmlStart(Action`1<URITemplate> value);
    public void add_WClientParseXmlStop(Action`1<URITemplate> value);
    public void remove_WClientParseXmlStop(Action`1<URITemplate> value);
    public void add_WClientPostRender(Action`1<EmptyTraceData> value);
    public void remove_WClientPostRender(Action`1<EmptyTraceData> value);
    public void add_WClientPotentialIRTResource(Action`1<PtrTemplate> value);
    public void remove_WClientPotentialIRTResource(Action`1<PtrTemplate> value);
    public void add_WClientPrecomputeSceneStart(Action`1<PerfElementID> value);
    public void remove_WClientPrecomputeSceneStart(Action`1<PerfElementID> value);
    public void add_WClientPrecomputeSceneStop(Action`1<EmptyTraceData> value);
    public void remove_WClientPrecomputeSceneStop(Action`1<EmptyTraceData> value);
    public void add_WClientPropParentCheck(Action`1<Template_37> value);
    public void remove_WClientPropParentCheck(Action`1<Template_37> value);
    public void add_WClientQPCFrequency(Action`1<Template_21> value);
    public void remove_WClientQPCFrequency(Action`1<Template_21> value);
    public void add_WClientRenderHandlerStart(Action`1<PerfElementID> value);
    public void remove_WClientRenderHandlerStart(Action`1<PerfElementID> value);
    public void add_WClientRenderHandlerStop(Action`1<EmptyTraceData> value);
    public void remove_WClientRenderHandlerStop(Action`1<EmptyTraceData> value);
    public void add_WClientResourceBamlAssembly(Action`1<AssemblyNameTemplate> value);
    public void remove_WClientResourceBamlAssembly(Action`1<AssemblyNameTemplate> value);
    public void add_WClientResourceCacheMiss(Action`1<EmptyTraceData> value);
    public void remove_WClientResourceCacheMiss(Action`1<EmptyTraceData> value);
    public void add_WClientResourceCacheNull(Action`1<EmptyTraceData> value);
    public void remove_WClientResourceCacheNull(Action`1<EmptyTraceData> value);
    public void add_WClientResourceCacheValue(Action`1<EmptyTraceData> value);
    public void remove_WClientResourceCacheValue(Action`1<EmptyTraceData> value);
    public void add_WClientResourceFindStart(Action`1<KeyStringTemplate> value);
    public void remove_WClientResourceFindStart(Action`1<KeyStringTemplate> value);
    public void add_WClientResourceFindStop(Action`1<EmptyTraceData> value);
    public void remove_WClientResourceFindStop(Action`1<EmptyTraceData> value);
    public void add_WClientResourceStock(Action`1<KeyStringTemplate> value);
    public void remove_WClientResourceStock(Action`1<KeyStringTemplate> value);
    public void add_WClientScheduleRender(Action`1<Template_24> value);
    public void remove_WClientScheduleRender(Action`1<Template_24> value);
    public void add_WClientString(Action`1<InfoStringTemplate> value);
    public void remove_WClientString(Action`1<InfoStringTemplate> value);
    public void add_WClientStringStart(Action`1<InfoStringTemplate> value);
    public void remove_WClientStringStart(Action`1<InfoStringTemplate> value);
    public void add_WClientStringStop(Action`1<InfoStringTemplate> value);
    public void remove_WClientStringStop(Action`1<InfoStringTemplate> value);
    public void add_WClientTimeManagerTickStart(Action`1<TimeTick> value);
    public void remove_WClientTimeManagerTickStart(Action`1<TimeTick> value);
    public void add_WClientTimeManagerTickStop(Action`1<EmptyTraceData> value);
    public void remove_WClientTimeManagerTickStop(Action`1<EmptyTraceData> value);
    public void add_WClientUceCheckDeviceState(Action`1<Template_15> value);
    public void remove_WClientUceCheckDeviceState(Action`1<Template_15> value);
    public void add_WClientUceNotifyPresent(Action`1<Template_23> value);
    public void remove_WClientUceNotifyPresent(Action`1<Template_23> value);
    public void add_WClientUcePrecomputeStart(Action`1<Template_10> value);
    public void remove_WClientUcePrecomputeStart(Action`1<Template_10> value);
    public void add_WClientUcePrecomputeStop(Action`1<Template_10> value);
    public void remove_WClientUcePrecomputeStop(Action`1<Template_10> value);
    public void add_WClientUcePresentStart(Action`1<Template_12> value);
    public void remove_WClientUcePresentStart(Action`1<Template_12> value);
    public void add_WClientUcePresentStop(Action`1<Template_12> value);
    public void remove_WClientUcePresentStop(Action`1<Template_12> value);
    public void add_WClientUceProcessQueue(Action`1<Template_11> value);
    public void remove_WClientUceProcessQueue(Action`1<Template_11> value);
    public void add_WClientUceProcessQueueStart(Action`1<Template_10> value);
    public void remove_WClientUceProcessQueueStart(Action`1<Template_10> value);
    public void add_WClientUceProcessQueueStop(Action`1<Template_10> value);
    public void remove_WClientUceProcessQueueStop(Action`1<Template_10> value);
    public void add_WClientUceRenderStart(Action`1<Template_10> value);
    public void remove_WClientUceRenderStart(Action`1<Template_10> value);
    public void add_WClientUceRenderStop(Action`1<Template_10> value);
    public void remove_WClientUceRenderStop(Action`1<Template_10> value);
    public void add_WClientUceResponse(Action`1<Template_13> value);
    public void remove_WClientUceResponse(Action`1<Template_13> value);
    public void add_WClientUICommitChannel(Action`1<ID32Template> value);
    public void remove_WClientUICommitChannel(Action`1<ID32Template> value);
    public void add_WClientUIContextAbort(Action`1<DispatcherMessage> value);
    public void remove_WClientUIContextAbort(Action`1<DispatcherMessage> value);
    public void add_WClientUIContextDispatchStart(Action`1<DispatcherMessage> value);
    public void remove_WClientUIContextDispatchStart(Action`1<DispatcherMessage> value);
    public void add_WClientUIContextDispatchStop(Action`1<EmptyTraceData> value);
    public void remove_WClientUIContextDispatchStop(Action`1<EmptyTraceData> value);
    public void add_WClientUIContextIdle(Action`1<EmptyTraceData> value);
    public void remove_WClientUIContextIdle(Action`1<EmptyTraceData> value);
    public void add_WClientUIContextPost(Action`1<DispatcherMessage> value);
    public void remove_WClientUIContextPost(Action`1<DispatcherMessage> value);
    public void add_WClientUIContextPromote(Action`1<DispatcherMessage> value);
    public void remove_WClientUIContextPromote(Action`1<DispatcherMessage> value);
    public void add_WClientUIResponse(Action`1<Template_22> value);
    public void remove_WClientUIResponse(Action`1<Template_22> value);
    public void add_WPFElementID(Action`1<PerfElementInfo> value);
    public void remove_WPFElementID(Action`1<PerfElementInfo> value);
    public void add_WPFElementIDElementName(Action`1<PerfElementName> value);
    public void remove_WPFElementIDElementName(Action`1<PerfElementName> value);
    public void add_WpfHostAbortingActivation(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAbortingActivation(Action`1<EmptyTraceData> value);
    public void add_WpfHostAppDomainManagerCctor(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAppDomainManagerCctor(Action`1<EmptyTraceData> value);
    public void add_WpfHostApplicationActivatorCreateInstanceEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostApplicationActivatorCreateInstanceEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostApplicationActivatorCreateInstanceStart(Action`1<URITemplate> value);
    public void remove_WpfHostApplicationActivatorCreateInstanceStart(Action`1<URITemplate> value);
    public void add_WpfHostAppProxyCtor(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAppProxyCtor(Action`1<EmptyTraceData> value);
    public void add_WpfHostAppProxyRunEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAppProxyRunEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostAppProxyRunStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAppProxyRunStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostAssertAppRequirementsEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAssertAppRequirementsEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostAssertAppRequirementsStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostAssertAppRequirementsStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostClickOnceActivationEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostClickOnceActivationEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostClickOnceActivationStart(Action`1<Template_51> value);
    public void remove_WpfHostClickOnceActivationStart(Action`1<Template_51> value);
    public void add_WpfHostDetermineApplicationTrustEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDetermineApplicationTrustEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostDetermineApplicationTrustStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDetermineApplicationTrustStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostDocObjHostCreated(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDocObjHostCreated(Action`1<EmptyTraceData> value);
    public void add_WpfHostDocObjHostRunApplicationEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDocObjHostRunApplicationEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostDocObjHostRunApplicationStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDocObjHostRunApplicationStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostDownloadApplicationEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDownloadApplicationEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostDownloadApplicationStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDownloadApplicationStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostDownloadDeplManifestEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDownloadDeplManifestEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostDownloadDeplManifestStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostDownloadDeplManifestStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostDownloadProgressUpdate(Action`1<Template_55> value);
    public void remove_WpfHostDownloadProgressUpdate(Action`1<Template_55> value);
    public void add_WpfHostFirstTimeActivation(Action`1<EmptyTraceData> value);
    public void remove_WpfHostFirstTimeActivation(Action`1<EmptyTraceData> value);
    public void add_WpfHostGetDownloadPageEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostGetDownloadPageEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostGetDownloadPageStart(Action`1<Template_54> value);
    public void remove_WpfHostGetDownloadPageStart(Action`1<Template_54> value);
    public void add_WpfHostIBHSRunEnd(Action`1<Template_50> value);
    public void remove_WpfHostIBHSRunEnd(Action`1<Template_50> value);
    public void add_WpfHostIBHSRunStart(Action`1<Template_49> value);
    public void remove_WpfHostIBHSRunStart(Action`1<Template_49> value);
    public void add_WpfHostInitAppProxyEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostInitAppProxyEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostInitAppProxyStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostInitAppProxyStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostPostShutdown(Action`1<EmptyTraceData> value);
    public void remove_WpfHostPostShutdown(Action`1<EmptyTraceData> value);
    public void add_WpfHostRootBrowserWindowSetupEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostRootBrowserWindowSetupEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostRootBrowserWindowSetupStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostRootBrowserWindowSetupStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmAdHocProfile1End(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmAdHocProfile1End(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmAdHocProfile1Start(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmAdHocProfile1Start(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmAdHocProfile2End(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmAdHocProfile2End(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmAdHocProfile2Start(Action`1<Template_45> value);
    public void remove_WpfHostUmAdHocProfile2Start(Action`1<Template_45> value);
    public void add_WpfHostUmBindProgress(Action`1<Template_44> value);
    public void remove_WpfHostUmBindProgress(Action`1<Template_44> value);
    public void add_WpfHostUmClassFactoryCreateInstance(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmClassFactoryCreateInstance(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmEnteringMessageLoop(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmEnteringMessageLoop(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmIHlinkTargetNavigateEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmIHlinkTargetNavigateEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmIHlinkTargetNavigateStart(Action`1<Template_45> value);
    public void remove_WpfHostUmIHlinkTargetNavigateStart(Action`1<Template_45> value);
    public void add_WpfHostUmInitDocHostEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmInitDocHostEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmInitDocHostStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmInitDocHostStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmInvokingBrowser(Action`1<Template_43> value);
    public void remove_WpfHostUmInvokingBrowser(Action`1<Template_43> value);
    public void add_WpfHostUmIPersistFileLoad(Action`1<Template_43> value);
    public void remove_WpfHostUmIPersistFileLoad(Action`1<Template_43> value);
    public void add_WpfHostUmIPersistMonikerLoadEnd(Action`1<Template_HR> value);
    public void remove_WpfHostUmIPersistMonikerLoadEnd(Action`1<Template_HR> value);
    public void add_WpfHostUmIPersistMonikerLoadStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmIPersistMonikerLoadStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmLaunchingRestrictedProcess(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmLaunchingRestrictedProcess(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmLoadingResourceDLLEnd(Action`1<Template_43> value);
    public void remove_WpfHostUmLoadingResourceDLLEnd(Action`1<Template_43> value);
    public void add_WpfHostUmLoadingResourceDLLStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmLoadingResourceDLLStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmMergingMenusEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmMergingMenusEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmMergingMenusStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmMergingMenusStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmOleCmdExecEnd(Action`1<Template_HR> value);
    public void remove_WpfHostUmOleCmdExecEnd(Action`1<Template_HR> value);
    public void add_WpfHostUmOleCmdExecStart(Action`1<Template_47> value);
    public void remove_WpfHostUmOleCmdExecStart(Action`1<Template_47> value);
    public void add_WpfHostUmOleCmdQueryStatusEnd(Action`1<Template_48> value);
    public void remove_WpfHostUmOleCmdQueryStatusEnd(Action`1<Template_48> value);
    public void add_WpfHostUmOleCmdQueryStatusStart(Action`1<Template_47> value);
    public void remove_WpfHostUmOleCmdQueryStatusStart(Action`1<Template_47> value);
    public void add_WpfHostUmOnStopBinding(Action`1<Template_HR> value);
    public void remove_WpfHostUmOnStopBinding(Action`1<Template_HR> value);
    public void add_WpfHostUmParsingMarkupVersionEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmParsingMarkupVersionEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmParsingMarkupVersionStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmParsingMarkupVersionStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmProgressPageShown(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmProgressPageShown(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmReadingAppManifestEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmReadingAppManifestEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmReadingAppManifestStart(Action`1<Template_43> value);
    public void remove_WpfHostUmReadingAppManifestStart(Action`1<Template_43> value);
    public void add_WpfHostUmReadingDeplManifestEnd(Action`1<Template_43> value);
    public void remove_WpfHostUmReadingDeplManifestEnd(Action`1<Template_43> value);
    public void add_WpfHostUmReadingDeplManifestStart(Action`1<Template_43> value);
    public void remove_WpfHostUmReadingDeplManifestStart(Action`1<Template_43> value);
    public void add_WpfHostUmReadyStateChanged(Action`1<Template_46> value);
    public void remove_WpfHostUmReadyStateChanged(Action`1<Template_46> value);
    public void add_WpfHostUmStartingCLREnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmStartingCLREnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmStartingCLRStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmStartingCLRStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmUIActivationEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmUIActivationEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmUIActivationStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmUIActivationStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmVersionActivateEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmVersionActivateEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmVersionActivateStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmVersionActivateStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmVersionAttach(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmVersionAttach(Action`1<EmptyTraceData> value);
    public void add_WpfHostUmWinMainEnd(Action`1<Template_HR> value);
    public void remove_WpfHostUmWinMainEnd(Action`1<Template_HR> value);
    public void add_WpfHostUmWinMainStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUmWinMainStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostUpdateBrowserCommandsEnd(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUpdateBrowserCommandsEnd(Action`1<EmptyTraceData> value);
    public void add_WpfHostUpdateBrowserCommandsStart(Action`1<EmptyTraceData> value);
    public void remove_WpfHostUpdateBrowserCommandsStart(Action`1<EmptyTraceData> value);
    public void add_WpfHostXappLauncherAppExit(Action`1<Template_53> value);
    public void remove_WpfHostXappLauncherAppExit(Action`1<Template_53> value);
    public void add_WpfHostXappLauncherAppNavigated(Action`1<EmptyTraceData> value);
    public void remove_WpfHostXappLauncherAppNavigated(Action`1<EmptyTraceData> value);
    public void add_WpfHostXappLauncherAppStartup(Action`1<EmptyTraceData> value);
    public void remove_WpfHostXappLauncherAppStartup(Action`1<EmptyTraceData> value);
    protected virtual string GetProviderName();
    private static EmptyTraceData AddAnnotationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAnnotationStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedHighlightStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedHighlightStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedMHStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedMHStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedSNStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AddAttachedSNStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AnnotationInkChangedStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AnnotationInkChangedStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AnnotationTextChangedStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData AnnotationTextChangedStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_2 BitmapCopyTemplate(Action`1<Template_2> action);
    private static EmptyTraceData ClearHighlightStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData ClearHighlightStopTemplate(Action`1<EmptyTraceData> action);
    private static CreateChannel CreateChannelTemplate(Action`1<CreateChannel> action);
    private static EmptyTraceData CreateHighlightStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData CreateHighlightStopTemplate(Action`1<EmptyTraceData> action);
    private static CreateOrAddOnChnl CreateOrAddOnChnlTemplate(Action`1<CreateOrAddOnChnl> action);
    private static EmptyTraceData CreateStickyNoteStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData CreateStickyNoteStopTemplate(Action`1<EmptyTraceData> action);
    private static CreateWpfGfxResource CreateWpfGfxResourceTemplate(Action`1<CreateWpfGfxResource> action);
    private static EmptyTraceData DeleteAnnotationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeleteAnnotationStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeleteInkNoteStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeleteInkNoteStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeleteTextNoteStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeleteTextNoteStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeserializeAnnotationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DeserializeAnnotationStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_1 DrawBitmapTemplate(Action`1<Template_1> action);
    private static FloatBounds DWMDraw_Template(Action`1<FloatBounds> action);
    private static FloatBounds DWMDraw_BeginLayerEndTemplate(Action`1<FloatBounds> action);
    private static FloatBounds DWMDraw_BeginLayerStartTemplate(Action`1<FloatBounds> action);
    private static Template_6 DWMDraw_BitmapEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_BitmapStartTemplate(Action`1<Template_6> action);
    private static FloatBounds DWMDraw_ClearStartTemplate(Action`1<FloatBounds> action);
    private static EmptyTraceData DWMDraw_ClearStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_6 DWMDraw_ClippedBitmapEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_ClippedBitmapStartTemplate(Action`1<Template_6> action);
    private static EmptyTraceData DWMDraw_EndLayerEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData DWMDraw_EndLayerStartTemplate(Action`1<EmptyTraceData> action);
    private static Template_6 DWMDraw_GeometryEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_GeometryStartTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_GlyphRunEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_GlyphRunStartTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_ImageEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_ImageStartTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_RectangleEndTemplate(Action`1<Template_6> action);
    private static Template_6 DWMDraw_RectangleStartTemplate(Action`1<Template_6> action);
    private static EmptyTraceData GetAnnotationByIdStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData GetAnnotationByIdStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData GetAnnotationByLocStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData GetAnnotationByLocStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData GetAnnotationsStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData GetAnnotationsStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData LayerEventStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData LayerEventStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData LoadAnnotationsStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData LoadAnnotationsStopTemplate(Action`1<EmptyTraceData> action);
    private static ID32Template ManipulationEventRaisedTemplate(Action`1<ID32Template> action);
    private static ID32Template ManipulationReportFrameTemplate(Action`1<ID32Template> action);
    private static EmptyTraceData NavigationNavigationAsyncWorkItemTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData NavigationNavigationContentRenderedTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData NavigationNavigationEndTemplate(Action`1<EmptyTraceData> action);
    private static URITemplate NavigationNavigationLaunchBrowserTemplate(Action`1<URITemplate> action);
    private static Template_57 NavigationNavigationPageFunctionReturnTemplate(Action`1<Template_57> action);
    private static Template_56 NavigationNavigationStartTemplate(Action`1<Template_56> action);
    private static EmptyTraceData NavigationNavigationWebResponseReceivedTemplate(Action`1<EmptyTraceData> action);
    private static ID32Template PenThreadPoolThreadAcquisitionTemplate(Action`1<ID32Template> action);
    private static ReleaseOnChannel ReleaseOnChannelTemplate(Action`1<ReleaseOnChannel> action);
    private static EmptyTraceData RemoveAttachedHighlightStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData RemoveAttachedHighlightStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData RemoveAttachedMHStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData RemoveAttachedMHStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData RemoveAttachedSNStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData RemoveAttachedSNStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData SerializeAnnotationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData SerializeAnnotationStopTemplate(Action`1<EmptyTraceData> action);
    private static IntBounds SetClipTemplate(Action`1<IntBounds> action);
    private static ID32Template StylusEventQueuedTemplate(Action`1<ID32Template> action);
    private static ID32Template TouchDownReportedTemplate(Action`1<ID32Template> action);
    private static ID32Template TouchMoveReportedTemplate(Action`1<ID32Template> action);
    private static ID32Template TouchUpReportedTemplate(Action`1<ID32Template> action);
    private static GfxSoftwareFallback UnexpectedSoftwareFallbackTemplate(Action`1<GfxSoftwareFallback> action);
    private static EmptyTraceData UpdateAnnotationWithSNCStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData UpdateAnnotationWithSNCStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData UpdateSNCWithAnnotationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData UpdateSNCWithAnnotationStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData UpdateVisualStateStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData UpdateVisualStateStopTemplate(Action`1<EmptyTraceData> action);
    private static VisualCacheTemplate VisualCacheAllocTemplate(Action`1<VisualCacheTemplate> action);
    private static VisualCacheTemplate VisualCacheUpdateTemplate(Action`1<VisualCacheTemplate> action);
    private static PerfElementID WClientAnimRenderHandlerStartTemplate(Action`1<PerfElementID> action);
    private static EmptyTraceData WClientAnimRenderHandlerStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientAppCtorTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientAppRunTemplate(Action`1<EmptyTraceData> action);
    private static LayoutAborted WClientArrangeArrangeAbortTemplate(Action`1<LayoutAborted> action);
    private static ArrangeData WClientArrangeArrangeElementBeginTemplate(Action`1<ArrangeData> action);
    private static ArrangeData WClientArrangeArrangeElementEndTemplate(Action`1<ArrangeData> action);
    private static PerfElementID WClientArrangeStartTemplate(Action`1<PerfElementID> action);
    private static Counter WClientArrangeStopTemplate(Action`1<Counter> action);
    private static PerfElementID WClientCompileSceneStartTemplate(Action`1<PerfElementID> action);
    private static EmptyTraceData WClientCompileSceneStopTemplate(Action`1<EmptyTraceData> action);
    private static CreateIRT WClientCreateIRTTemplate(Action`1<CreateIRT> action);
    private static Template_18 WClientCreateVisualTemplate(Action`1<Template_18> action);
    private static HwndTemplate WClientDesktopRTCreateStartTemplate(Action`1<HwndTemplate> action);
    private static HwndTemplate WClientDesktopRTCreateStopTemplate(Action`1<HwndTemplate> action);
    private static EmptyTraceData WClientDRXAlphaFlattenStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXAlphaFlattenStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXCommitPageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXCommitPageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXConvertFontStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXConvertFontStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXConvertImageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXConvertImageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEndDocStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEndDocStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEndPageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEndPageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEnsureOMStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXEnsureOMStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXFindStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXFindStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXFlushPageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXFlushPageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetDevModeStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetDevModeStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetPageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetPageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetPrintCapStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetPrintCapStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetStreamStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetStreamStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetVisualStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXGetVisualStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXInstantiatedTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXInvalidateViewTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXLayoutStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXLayoutStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_33 WClientDRXLineDownTemplate(Action`1<Template_33> action);
    private static EmptyTraceData WClientDRXLoadPrimitiveStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXLoadPrimitiveStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXOpenPackageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXOpenPackageStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_33 WClientDRXPageDownTemplate(Action`1<Template_33> action);
    private static Template_34 WClientDRXPageJumpTemplate(Action`1<Template_34> action);
    private static Template_32 WClientDRXPageLoadedTemplate(Action`1<Template_32> action);
    private static Template_31 WClientDRXPageVisibleTemplate(Action`1<Template_31> action);
    private static EmptyTraceData WClientDRXPTProviderStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXPTProviderStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXRasterStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXRasterStopTemplate(Action`1<EmptyTraceData> action);
    private static Counter WClientDRXReadStreamStartTemplate(Action`1<Counter> action);
    private static Template_30 WClientDRXReadStreamStopTemplate(Action`1<Template_30> action);
    private static EmptyTraceData WClientDRXReleaseWriterStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXReleaseWriterStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSavePageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSavePageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSaveXpsStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSaveXpsStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSerializationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSerializationStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSerializeTreeStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXSerializeTreeStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXStartDocStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXStartDocStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXStartPageStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXStartPageStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXStyleCreatedTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXTreeFlattenStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientDRXTreeFlattenStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_35 WClientDRXZoomTemplate(Action`1<Template_35> action);
    private static EmptyTraceData WClientFontCacheTemplate(Action`1<EmptyTraceData> action);
    private static Template_19 WClientInputMessageTemplate(Action`1<Template_19> action);
    private static EmptyTraceData WClientInterlockedRenderStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientInterlockedRenderStopTemplate(Action`1<EmptyTraceData> action);
    private static LayoutAborted WClientLayoutAbortTemplate(Action`1<LayoutAborted> action);
    private static PerfElementID WClientLayoutExceptionTemplate(Action`1<PerfElementID> action);
    private static EmptyTraceData WClientLayoutFireAutomationEventsBeginTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientLayoutFireAutomationEventsEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientLayoutFireLayoutUpdatedBeginTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientLayoutFireLayoutUpdatedEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientLayoutFireSizeChangedBeginTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientLayoutFireSizeChangedEndTemplate(Action`1<EmptyTraceData> action);
    private static PerfElementID WClientLayoutInvalidatedTemplate(Action`1<PerfElementID> action);
    private static LayoutSourceTemplate WClientLayoutStartTemplate(Action`1<LayoutSourceTemplate> action);
    private static EmptyTraceData WClientLayoutStopTemplate(Action`1<EmptyTraceData> action);
    private static LayoutAborted WClientMeasureMeasureAbortTemplate(Action`1<LayoutAborted> action);
    private static MeasureData WClientMeasureMeasureElementBeginTemplate(Action`1<MeasureData> action);
    private static MeasureData WClientMeasureMeasureElementEndTemplate(Action`1<MeasureData> action);
    private static PerfElementID WClientMeasureStartTemplate(Action`1<PerfElementID> action);
    private static Counter WClientMeasureStopTemplate(Action`1<Counter> action);
    private static Template_20 WClientMediaRenderStartTemplate(Action`1<Template_20> action);
    private static EmptyTraceData WClientMediaRenderStopTemplate(Action`1<EmptyTraceData> action);
    private static PerfElementID WClientOnRenderStartTemplate(Action`1<PerfElementID> action);
    private static PerfElementID WClientOnRenderStopTemplate(Action`1<PerfElementID> action);
    private static URITemplate WClientParseBamlStartTemplate(Action`1<URITemplate> action);
    private static URITemplate WClientParseBamlStopTemplate(Action`1<URITemplate> action);
    private static EmptyTraceData WClientParseFefCrInstStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientParseFefCrInstStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientParseInstVisTreeStartTemplate(Action`1<EmptyTraceData> action);
    private static MessageStringTemplate WClientParseInstVisTreeStopTemplate(Action`1<MessageStringTemplate> action);
    private static EmptyTraceData WClientParseRdrCrInFTypStartTemplate(Action`1<EmptyTraceData> action);
    private static TypeStringTemplate WClientParseRdrCrInFTypStopTemplate(Action`1<TypeStringTemplate> action);
    private static EmptyTraceData WClientParseRdrCrInstStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientParseRdrCrInstStopTemplate(Action`1<EmptyTraceData> action);
    private static WClientParseXamlBamlInfoTemplate WClientParseXamlBamlInfoTemplate(Action`1<WClientParseXamlBamlInfoTemplate> action);
    private static URITemplate WClientParseXamlStartTemplate(Action`1<URITemplate> action);
    private static URITemplate WClientParseXamlStopTemplate(Action`1<URITemplate> action);
    private static URITemplate WClientParseXmlStartTemplate(Action`1<URITemplate> action);
    private static URITemplate WClientParseXmlStopTemplate(Action`1<URITemplate> action);
    private static EmptyTraceData WClientPostRenderTemplate(Action`1<EmptyTraceData> action);
    private static PtrTemplate WClientPotentialIRTResourceTemplate(Action`1<PtrTemplate> action);
    private static PerfElementID WClientPrecomputeSceneStartTemplate(Action`1<PerfElementID> action);
    private static EmptyTraceData WClientPrecomputeSceneStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_37 WClientPropParentCheckTemplate(Action`1<Template_37> action);
    private static Template_21 WClientQPCFrequencyTemplate(Action`1<Template_21> action);
    private static PerfElementID WClientRenderHandlerStartTemplate(Action`1<PerfElementID> action);
    private static EmptyTraceData WClientRenderHandlerStopTemplate(Action`1<EmptyTraceData> action);
    private static AssemblyNameTemplate WClientResourceBamlAssemblyTemplate(Action`1<AssemblyNameTemplate> action);
    private static EmptyTraceData WClientResourceCacheMissTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientResourceCacheNullTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientResourceCacheValueTemplate(Action`1<EmptyTraceData> action);
    private static KeyStringTemplate WClientResourceFindStartTemplate(Action`1<KeyStringTemplate> action);
    private static EmptyTraceData WClientResourceFindStopTemplate(Action`1<EmptyTraceData> action);
    private static KeyStringTemplate WClientResourceStockTemplate(Action`1<KeyStringTemplate> action);
    private static Template_24 WClientScheduleRenderTemplate(Action`1<Template_24> action);
    private static InfoStringTemplate WClientStringTemplate(Action`1<InfoStringTemplate> action);
    private static InfoStringTemplate WClientStringStartTemplate(Action`1<InfoStringTemplate> action);
    private static InfoStringTemplate WClientStringStopTemplate(Action`1<InfoStringTemplate> action);
    private static TimeTick WClientTimeManagerTickStartTemplate(Action`1<TimeTick> action);
    private static EmptyTraceData WClientTimeManagerTickStopTemplate(Action`1<EmptyTraceData> action);
    private static Template_15 WClientUceCheckDeviceStateTemplate(Action`1<Template_15> action);
    private static Template_23 WClientUceNotifyPresentTemplate(Action`1<Template_23> action);
    private static Template_10 WClientUcePrecomputeStartTemplate(Action`1<Template_10> action);
    private static Template_10 WClientUcePrecomputeStopTemplate(Action`1<Template_10> action);
    private static Template_12 WClientUcePresentStartTemplate(Action`1<Template_12> action);
    private static Template_12 WClientUcePresentStopTemplate(Action`1<Template_12> action);
    private static Template_11 WClientUceProcessQueueTemplate(Action`1<Template_11> action);
    private static Template_10 WClientUceProcessQueueStartTemplate(Action`1<Template_10> action);
    private static Template_10 WClientUceProcessQueueStopTemplate(Action`1<Template_10> action);
    private static Template_10 WClientUceRenderStartTemplate(Action`1<Template_10> action);
    private static Template_10 WClientUceRenderStopTemplate(Action`1<Template_10> action);
    private static Template_13 WClientUceResponseTemplate(Action`1<Template_13> action);
    private static ID32Template WClientUICommitChannelTemplate(Action`1<ID32Template> action);
    private static DispatcherMessage WClientUIContextAbortTemplate(Action`1<DispatcherMessage> action);
    private static DispatcherMessage WClientUIContextDispatchStartTemplate(Action`1<DispatcherMessage> action);
    private static EmptyTraceData WClientUIContextDispatchStopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WClientUIContextIdleTemplate(Action`1<EmptyTraceData> action);
    private static DispatcherMessage WClientUIContextPostTemplate(Action`1<DispatcherMessage> action);
    private static DispatcherMessage WClientUIContextPromoteTemplate(Action`1<DispatcherMessage> action);
    private static Template_22 WClientUIResponseTemplate(Action`1<Template_22> action);
    private static PerfElementInfo WPFElementIDTemplate(Action`1<PerfElementInfo> action);
    private static PerfElementName WPFElementIDElementNameTemplate(Action`1<PerfElementName> action);
    private static EmptyTraceData WpfHostAbortingActivationTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostAppDomainManagerCctorTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostApplicationActivatorCreateInstanceEndTemplate(Action`1<EmptyTraceData> action);
    private static URITemplate WpfHostApplicationActivatorCreateInstanceStartTemplate(Action`1<URITemplate> action);
    private static EmptyTraceData WpfHostAppProxyCtorTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostAppProxyRunEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostAppProxyRunStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostAssertAppRequirementsEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostAssertAppRequirementsStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostClickOnceActivationEndTemplate(Action`1<EmptyTraceData> action);
    private static Template_51 WpfHostClickOnceActivationStartTemplate(Action`1<Template_51> action);
    private static EmptyTraceData WpfHostDetermineApplicationTrustEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDetermineApplicationTrustStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDocObjHostCreatedTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDocObjHostRunApplicationEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDocObjHostRunApplicationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDownloadApplicationEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDownloadApplicationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDownloadDeplManifestEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostDownloadDeplManifestStartTemplate(Action`1<EmptyTraceData> action);
    private static Template_55 WpfHostDownloadProgressUpdateTemplate(Action`1<Template_55> action);
    private static EmptyTraceData WpfHostFirstTimeActivationTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostGetDownloadPageEndTemplate(Action`1<EmptyTraceData> action);
    private static Template_54 WpfHostGetDownloadPageStartTemplate(Action`1<Template_54> action);
    private static Template_50 WpfHostIBHSRunEndTemplate(Action`1<Template_50> action);
    private static Template_49 WpfHostIBHSRunStartTemplate(Action`1<Template_49> action);
    private static EmptyTraceData WpfHostInitAppProxyEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostInitAppProxyStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostPostShutdownTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostRootBrowserWindowSetupEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostRootBrowserWindowSetupStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmAdHocProfile1EndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmAdHocProfile1StartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmAdHocProfile2EndTemplate(Action`1<EmptyTraceData> action);
    private static Template_45 WpfHostUmAdHocProfile2StartTemplate(Action`1<Template_45> action);
    private static Template_44 WpfHostUmBindProgressTemplate(Action`1<Template_44> action);
    private static EmptyTraceData WpfHostUmClassFactoryCreateInstanceTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmEnteringMessageLoopTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmIHlinkTargetNavigateEndTemplate(Action`1<EmptyTraceData> action);
    private static Template_45 WpfHostUmIHlinkTargetNavigateStartTemplate(Action`1<Template_45> action);
    private static EmptyTraceData WpfHostUmInitDocHostEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmInitDocHostStartTemplate(Action`1<EmptyTraceData> action);
    private static Template_43 WpfHostUmInvokingBrowserTemplate(Action`1<Template_43> action);
    private static Template_43 WpfHostUmIPersistFileLoadTemplate(Action`1<Template_43> action);
    private static Template_HR WpfHostUmIPersistMonikerLoadEndTemplate(Action`1<Template_HR> action);
    private static EmptyTraceData WpfHostUmIPersistMonikerLoadStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmLaunchingRestrictedProcessTemplate(Action`1<EmptyTraceData> action);
    private static Template_43 WpfHostUmLoadingResourceDLLEndTemplate(Action`1<Template_43> action);
    private static EmptyTraceData WpfHostUmLoadingResourceDLLStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmMergingMenusEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmMergingMenusStartTemplate(Action`1<EmptyTraceData> action);
    private static Template_HR WpfHostUmOleCmdExecEndTemplate(Action`1<Template_HR> action);
    private static Template_47 WpfHostUmOleCmdExecStartTemplate(Action`1<Template_47> action);
    private static Template_48 WpfHostUmOleCmdQueryStatusEndTemplate(Action`1<Template_48> action);
    private static Template_47 WpfHostUmOleCmdQueryStatusStartTemplate(Action`1<Template_47> action);
    private static Template_HR WpfHostUmOnStopBindingTemplate(Action`1<Template_HR> action);
    private static EmptyTraceData WpfHostUmParsingMarkupVersionEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmParsingMarkupVersionStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmProgressPageShownTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmReadingAppManifestEndTemplate(Action`1<EmptyTraceData> action);
    private static Template_43 WpfHostUmReadingAppManifestStartTemplate(Action`1<Template_43> action);
    private static Template_43 WpfHostUmReadingDeplManifestEndTemplate(Action`1<Template_43> action);
    private static Template_43 WpfHostUmReadingDeplManifestStartTemplate(Action`1<Template_43> action);
    private static Template_46 WpfHostUmReadyStateChangedTemplate(Action`1<Template_46> action);
    private static EmptyTraceData WpfHostUmStartingCLREndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmStartingCLRStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmUIActivationEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmUIActivationStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmVersionActivateEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmVersionActivateStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUmVersionAttachTemplate(Action`1<EmptyTraceData> action);
    private static Template_HR WpfHostUmWinMainEndTemplate(Action`1<Template_HR> action);
    private static EmptyTraceData WpfHostUmWinMainStartTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUpdateBrowserCommandsEndTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostUpdateBrowserCommandsStartTemplate(Action`1<EmptyTraceData> action);
    private static Template_53 WpfHostXappLauncherAppExitTemplate(Action`1<Template_53> action);
    private static EmptyTraceData WpfHostXappLauncherAppNavigatedTemplate(Action`1<EmptyTraceData> action);
    private static EmptyTraceData WpfHostXappLauncherAppStartupTemplate(Action`1<EmptyTraceData> action);
    protected internal virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
}
public class Microsoft.Diagnostics.Tracing.Parsers.WppTraceEventParser : ExternalTraceEventParser {
    private string m_TMFDirectory;
    private Dictionary`2<string, string> m_tmfDataFilePathsByFileNameBase;
    public WppTraceEventParser(TraceEventSource source, string TMFDirectory);
    internal virtual DynamicTraceEventData TryLookup(TraceEvent unknownEvent);
    private string GetTmfPathForTaskGuid(Guid taskGuid);
    private List`1<DynamicTraceEventData> CreateTemplatesForTMFFile(Guid taskGuid, string tmfPath);
}
public class Microsoft.Diagnostics.Tracing.RuntimeLoaderProcessData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<int, PerThreadStartStopData> <ThreadData>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FirstEventTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    public Nullable`1<double> _finalTimestamp;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, List`1<StartStopThreadEventData>> <StartStopEvents>k__BackingField;
    public Dictionary`2<int, PerThreadStartStopData> ThreadData { get; }
    public double FirstEventTimestamp { get; }
    public int ProcessID { get; }
    public double FinalTimestamp { get; }
    internal Dictionary`2<int, List`1<StartStopThreadEventData>> StartStopEvents { get; private set; }
    public RuntimeLoaderProcessData(double timestamp, int processID);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, PerThreadStartStopData> get_ThreadData();
    [CompilerGeneratedAttribute]
public double get_FirstEventTimestamp();
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    public double get_FinalTimestamp();
    [CompilerGeneratedAttribute]
internal Dictionary`2<int, List`1<StartStopThreadEventData>> get_StartStopEvents();
    [CompilerGeneratedAttribute]
private void set_StartStopEvents(Dictionary`2<int, List`1<StartStopThreadEventData>> value);
    internal void FinishData(double finalTimestamp);
    internal static RuntimeLoaderProcessData EmptyData(int processID);
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Tracing.RuntimeLoaderStatsData : object {
    private List`1<RuntimeLoaderProcessData> _processData;
    public IEnumerable`1<RuntimeLoaderProcessData> GetData();
    public RuntimeLoaderProcessData GetProcessDataFromProcessIDAndTimestamp(int processID, double timestamp);
    public RuntimeLoaderProcessData GetProcessDataFromAnalysisProcess(TraceProcess process);
    internal void AddProcessData(RuntimeLoaderProcessData processData, double finalTimestamp);
}
public class Microsoft.Diagnostics.Tracing.SampleProfilerThreadTimeComputer : object {
    public bool UseTasks;
    public bool IncludeEventSourceEvents;
    public bool GroupByStartStopActivity;
    [CompilerGeneratedAttribute]
private bool <IgnoreApplicationInsightsRequestsWithRelatedActivityId>k__BackingField;
    private StartStopActivityComputer m_startStopActivities;
    private GrowableArray`1<double> m_unknownTimeStartMsec;
    private StartStopActivity[] m_threadToStartStopActivity;
    private GrowableArray`1<List`1<StackSourceSample>> m_startStopActivityToAsyncUnknownSamples;
    private ThreadState[] m_threadState;
    private StackSourceSample m_sample;
    private MutableTraceEventStackSource m_outputStackSource;
    private TraceLog m_eventLog;
    private SymbolReader m_symbolReader;
    private Dictionary`2<double, StackSourceFrameIndex> m_nodeNameInternTable;
    private StackSourceFrameIndex m_ExternalFrameIndex;
    private StackSourceFrameIndex m_cpuFrameIndex;
    private ActivityComputer m_activityComputer;
    public bool IgnoreApplicationInsightsRequestsWithRelatedActivityId { get; public set; }
    public SampleProfilerThreadTimeComputer(TraceLog eventLog, SymbolReader symbolReader);
    [CompilerGeneratedAttribute]
public bool get_IgnoreApplicationInsightsRequestsWithRelatedActivityId();
    [CompilerGeneratedAttribute]
public void set_IgnoreApplicationInsightsRequestsWithRelatedActivityId(bool value);
    public void GenerateThreadTimeStacks(MutableTraceEventStackSource outputStackSource, TraceEvents traceEvents);
    private void UpdateStartStopActivityOnAwaitComplete(TraceActivity activity, TraceEvent data);
    private void UpdateThreadToWorkOnStartStopActivity(TraceThread thread, StartStopActivity newStartStop, TraceEvent data);
    private void AddUnkownAsyncDurationIfNeeded(StartStopActivity startStopActivity, double unknownStartTimeMSec, TraceEvent data);
    private void OnSampledProfile(TraceEvent data);
    private void OnTaskUnblock(TraceEvent data);
    private StackSourceCallStackIndex GetCallStack(TraceEvent data, TraceThread thread);
    private Func`2<TraceThread, StackSourceCallStackIndex> GetTopFramesForActivityComputerCase(TraceEvent data, TraceThread thread, bool getAtCreationTime);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_3(TraceActivity activity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_0(TraceActivity activity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_1(TraceActivity activity, TraceEvent data, TraceThread thread);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_4(StartStopActivity startStopActivity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_5(StartStopActivity startStopActivity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__8_2(TraceEvent data);
}
public class Microsoft.Diagnostics.Tracing.ServerRequest : object {
    public string Url;
    public Guid ID;
    public DateTime StartTime;
}
public class Microsoft.Diagnostics.Tracing.ServerRequestComputer : object {
    public ServerRequestComputer(TraceEventDispatcher source);
    private ServerRequest GetCurrentRequest(TraceThread thread);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Session.LbrFilterFlags : Enum {
    public int value__;
    public static LbrFilterFlags None;
    public static LbrFilterFlags FilterKernel;
    public static LbrFilterFlags FilterUser;
    public static LbrFilterFlags FilterJcc;
    public static LbrFilterFlags FilterNearRelCall;
    public static LbrFilterFlags FilterNearIndCall;
    public static LbrFilterFlags FilterNearRet;
    public static LbrFilterFlags FilterNearIndJmp;
    public static LbrFilterFlags FilterNearRelJmp;
    public static LbrFilterFlags FilterFarBranch;
    public static LbrFilterFlags CallstackEnable;
}
public enum Microsoft.Diagnostics.Tracing.Session.LbrSource : Enum {
    public int value__;
    public static LbrSource PmcInterrupt;
}
public class Microsoft.Diagnostics.Tracing.Session.ProfileSourceInfo : object {
    public string Name;
    public int ID;
    public int Interval;
    public int MinInterval;
    public int MaxInterval;
}
public class Microsoft.Diagnostics.Tracing.Session.ProviderDataItem : ValueType {
    public string Name;
    public string Description;
    public ulong Value;
    public virtual string ToString();
}
public enum Microsoft.Diagnostics.Tracing.Session.TraceEventMergeOptions : Enum {
    public int value__;
    public static TraceEventMergeOptions None;
    public static TraceEventMergeOptions Compress;
    public static TraceEventMergeOptions ImageIDsOnly;
}
[FlagsAttribute]
[ObsoleteAttribute("Use TraceEventArguments.Stacks instead")]
public enum Microsoft.Diagnostics.Tracing.Session.TraceEventOptions : Enum {
    public int value__;
    public static TraceEventOptions None;
    public static TraceEventOptions Stacks;
}
public static class Microsoft.Diagnostics.Tracing.Session.TraceEventProfileSources : object {
    public static Dictionary`2<string, ProfileSourceInfo> GetInfo();
    public static void Set(int profileSourceID, int profileSourceInterval);
    public static void Set(Int32[] profileSourceIDs, Int32[] profileSourceIntervals);
}
public class Microsoft.Diagnostics.Tracing.Session.TraceEventProviderOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StacksEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <ProcessIDFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ProcessNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <EventIDsToEnable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <EventIDStacksToEnable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <EventIDsToDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <EventIDStacksToDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInContainers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSourceContainerTracking>k__BackingField;
    private static Nullable`1<bool> s_IsEtwFilteringSupported;
    public IEnumerable`1<KeyValuePair`2<string, string>> Arguments { get; public set; }
    public Byte[] RawArguments { get; public set; }
    public bool StacksEnabled { get; public set; }
    public IList`1<int> ProcessIDFilter { get; public set; }
    public IList`1<string> ProcessNameFilter { get; public set; }
    public IList`1<int> EventIDsToEnable { get; public set; }
    public IList`1<int> EventIDStacksToEnable { get; public set; }
    public IList`1<int> EventIDsToDisable { get; public set; }
    public IList`1<int> EventIDStacksToDisable { get; public set; }
    public bool EnableInContainers { get; public set; }
    public bool EnableSourceContainerTracking { get; public set; }
    public static bool FilteringSupported { get; }
    public TraceEventProviderOptions(String[] keyValuePairs);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IEnumerable`1<KeyValuePair`2<string, string>> value);
    public void AddArgument(string key, string value);
    [CompilerGeneratedAttribute]
public Byte[] get_RawArguments();
    [CompilerGeneratedAttribute]
public void set_RawArguments(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_StacksEnabled();
    [CompilerGeneratedAttribute]
public void set_StacksEnabled(bool value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_ProcessIDFilter();
    [CompilerGeneratedAttribute]
public void set_ProcessIDFilter(IList`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ProcessNameFilter();
    [CompilerGeneratedAttribute]
public void set_ProcessNameFilter(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_EventIDsToEnable();
    [CompilerGeneratedAttribute]
public void set_EventIDsToEnable(IList`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_EventIDStacksToEnable();
    [CompilerGeneratedAttribute]
public void set_EventIDStacksToEnable(IList`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_EventIDsToDisable();
    [CompilerGeneratedAttribute]
public void set_EventIDsToDisable(IList`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_EventIDStacksToDisable();
    [CompilerGeneratedAttribute]
public void set_EventIDStacksToDisable(IList`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableInContainers();
    [CompilerGeneratedAttribute]
public void set_EnableInContainers(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSourceContainerTracking();
    [CompilerGeneratedAttribute]
public void set_EnableSourceContainerTracking(bool value);
    public TraceEventProviderOptions Clone();
    public static bool get_FilteringSupported();
}
public static class Microsoft.Diagnostics.Tracing.Session.TraceEventProviders : object {
    public static Guid GetProviderGuidByName(string name);
    public static Guid GetEventSourceGuidFromName(string name);
    public static string GetProviderName(Guid providerGuid);
    public static bool MaybeAnEventSource(Guid providerGuid);
    public static IEnumerable`1<Guid> GetPublishedProviders();
    public static List`1<Guid> GetRegisteredOrEnabledProviders();
    public static List`1<Guid> GetRegisteredProvidersInProcess(int processID);
    public static List`1<ProviderDataItem> GetProviderKeywords(Guid providerGuid);
    internal static List`1<TRACE_ENABLE_INFO> SessionInfosForProvider(Guid providerGuid, int processId);
    private static List`1<ProviderDataItem> GetProviderFields(Guid providerGuid, EVENT_FIELD_TYPE fieldType);
}
public class Microsoft.Diagnostics.Tracing.Session.TraceEventSession : object {
    [CompilerGeneratedAttribute]
private bool <CaptureStateOnSetFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EnableProviderTimeoutMSec>k__BackingField;
    private static Nullable`1<int> MaxEtwLoggers;
    private static SortedDictionary`2<string, Guid> s_providersByName;
    private static Dictionary`2<Guid, string> s_providerNames;
    internal static int MaxNameSize;
    private static int MaxExtensionSize;
    private static int PropertiesSize;
    private static Byte[] PropertiesMemoryInitializer;
    private string m_SessionName;
    private int m_SessionId;
    private string m_FileName;
    private int m_BufferSizeMB;
    private int m_BufferQuantumKB;
    private int m_CircularBufferMB;
    private int m_MultiFileMB;
    private float m_CpuSampleIntervalMSec;
    private bool m_StackCompression;
    private UInt32[] m_LastBranchRecordingProfileSources;
    private LbrFilterFlags m_LastBranchRecordingFilters;
    private bool m_restarted;
    private bool m_Create;
    private bool m_ResartIfExist;
    private bool m_NoPerProcessBuffering;
    private bool m_IsActive;
    private bool m_Stopped;
    private bool m_StopOnDispose;
    private ulong m_SessionHandle;
    private ETWTraceEventSource m_source;
    internal TraceEventSession m_kernelSession;
    internal bool m_associatedWithTraceLog;
    private Dictionary`2<Guid, ulong> m_enabledProviders;
    public bool CaptureStateOnSetFileName { get; public set; }
    public int EnableProviderTimeoutMSec { get; public set; }
    public bool StopOnDispose { get; public set; }
    public int CircularBufferMB { get; public set; }
    public int MultiFileMB { get; public set; }
    public int BufferSizeMB { get; public set; }
    public int BufferQuantumKB { get; public set; }
    public float CpuSampleIntervalMSec { get; public set; }
    public bool StackCompression { get; public set; }
    public UInt32[] LastBranchRecordingProfileSources { get; public set; }
    public LbrFilterFlags LastBranchRecordingFilters { get; public set; }
    public string SessionName { get; }
    public string FileName { get; }
    public ETWTraceEventSource Source { get; }
    public bool IsActive { get; }
    public int EventsLost { get; }
    public bool IsCircular { get; }
    public bool IsRealTime { get; }
    public bool IsInMemoryCircular { get; }
    internal static SortedDictionary`2<string, Guid> ProviderNameToGuid { get; }
    internal static Dictionary`2<Guid, string> ProviderGuidToName { get; }
    private bool IsRealTimeSession { get; }
    public TraceEventSession(string sessionName, string fileName, TraceEventSessionOptions options);
    public TraceEventSession(string sessionName, TraceEventSessionOptions options);
    private static TraceEventSession();
    public static TraceEventSession GetActiveSession(string sessionName);
    public bool EnableProvider(string providerName, TraceEventLevel providerLevel, ulong matchAnyKeywords, TraceEventProviderOptions options);
    public bool EnableProvider(Guid providerGuid, TraceEventLevel providerLevel, ulong matchAnyKeywords, TraceEventProviderOptions options);
    [ObsoleteAttribute("Use EnableProvider(string, TraceEventLevel, ulong, TraceEventProviderOptions) overload instead")]
public bool EnableProvider(string providerName, TraceEventLevel providerLevel, ulong matchAnyKeywords, TraceEventOptions options, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ObsoleteAttribute("Use EnableProvider(Guid, TraceEventLevel, ulong, TraceEventProviderOptions) overload instead")]
public bool EnableProvider(Guid providerGuid, TraceEventLevel providerLevel, ulong matchAnyKeywords, TraceEventOptions options, IEnumerable`1<KeyValuePair`2<string, string>> values);
    [ObsoleteAttribute("Use TraceEventProviderOptions.RawArguments overload instead")]
public void EnableProviderWithRawProviderData(Guid providerGuid, TraceEventLevel providerLevel, ulong matchAnyKeywords, TraceEventOptions options, Byte[] providerData, int providerDataSize);
    [ObsoleteAttribute("Use TraceEventProviderOptions.AddArgument instead")]
public static Dictionary`2<string, string> MakeDictionary(String[] keyValuePairs);
    public bool EnableKernelProvider(Keywords flags, Keywords stackCapture);
    private void EnableLastBranchRecordingIfConfigured();
    public void EnableWindowsHeapProvider(int pid);
    public void EnableWindowsHeapProvider(string exeFileName);
    public void DisableProvider(Guid providerGuid);
    public void DisableProvider(string providerName);
    public bool Stop(bool noThrow);
    public sealed virtual void Dispose();
    public void Flush();
    public void SetFileName(string newName);
    [CompilerGeneratedAttribute]
public bool get_CaptureStateOnSetFileName();
    [CompilerGeneratedAttribute]
public void set_CaptureStateOnSetFileName(bool value);
    public void CaptureState(Guid providerGuid, ulong matchAnyKeywords, int filterType, object data);
    [CompilerGeneratedAttribute]
public int get_EnableProviderTimeoutMSec();
    [CompilerGeneratedAttribute]
public void set_EnableProviderTimeoutMSec(int value);
    public bool get_StopOnDispose();
    public void set_StopOnDispose(bool value);
    public int get_CircularBufferMB();
    public void set_CircularBufferMB(int value);
    public int get_MultiFileMB();
    public void set_MultiFileMB(int value);
    public int get_BufferSizeMB();
    public void set_BufferSizeMB(int value);
    public int get_BufferQuantumKB();
    public void set_BufferQuantumKB(int value);
    public float get_CpuSampleIntervalMSec();
    public void set_CpuSampleIntervalMSec(float value);
    public bool get_StackCompression();
    public void set_StackCompression(bool value);
    public UInt32[] get_LastBranchRecordingProfileSources();
    public void set_LastBranchRecordingProfileSources(UInt32[] value);
    public LbrFilterFlags get_LastBranchRecordingFilters();
    public void set_LastBranchRecordingFilters(LbrFilterFlags value);
    public string get_SessionName();
    public string get_FileName();
    public ETWTraceEventSource get_Source();
    public bool get_IsActive();
    public int get_EventsLost();
    public bool get_IsCircular();
    public bool get_IsRealTime();
    public bool get_IsInMemoryCircular();
    public static List`1<string> GetActiveSessionNames();
    private static int GetETWMaxLoggers();
    public static void Merge(String[] inputETLFileNames, string outputETLFileName, TraceEventMergeOptions options);
    public static void MergeInPlace(string etlFileName, TextWriter log);
    public static Nullable`1<bool> IsElevated();
    public static void SetDebugPrivilege();
    protected virtual override void Finalize();
    internal static SortedDictionary`2<string, Guid> get_ProviderNameToGuid();
    internal static Dictionary`2<Guid, string> get_ProviderGuidToName();
    private bool get_IsRealTimeSession();
    private void ComputeEventIds(EVENT_FILTER_DESCRIPTOR* descr, Byte* eventIdsOut, int eventIdsBufferSize, IList`1<int> eventIds, bool enable, int descrType);
    private int ComputeEventIdsBufferSize(IList`1<int> eventIds);
    private static int FindFreeSessionKeyword(Guid providerGuid);
    private void CleanFilterDataForEtwSession();
    private string GetEventSourceRegistryBaseLocation();
    private void SetFilterDataForEtwSession(string providerGuid, Byte[] data, bool V4_5EventSource);
    private static int SetStackTraceIds(Keywords stackCapture, STACK_TRACING_EVENT_ID* stackTracingIds, int stackTracingIdsMax);
    private void EnsureStarted(EVENT_TRACE_PROPERTIES* properties);
    private EVENT_TRACE_PROPERTIES* GetProperties(Byte* buffer);
    private static Dictionary`2<Guid, ulong> GetEnabledProvidersForSession(ulong sessionId);
    private static Nullable`1<long> GetEnabledKeywordsForProviderAndSession(Guid* providerId, ulong sessionId);
    private static void CopyStringToPtr(Char* toPtr, string str);
    public static int GetMaxLastBranchRecordingSources();
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.Session.TraceEventSessionOptions : Enum {
    public int value__;
    public static TraceEventSessionOptions Create;
    public static TraceEventSessionOptions Attach;
    public static TraceEventSessionOptions NoRestartOnCreate;
    public static TraceEventSessionOptions NoPerProcessorBuffering;
}
public class Microsoft.Diagnostics.Tracing.Stacks.AggregateCallTreeNode : CallTreeNode {
    private List`1<CallTreeNode> m_trees;
    internal int m_callerOffset;
    private StackSourceFrameIndex m_idToExclude;
    private bool m_recursion;
    internal bool IsCalleeTree { get; internal set; }
    internal AggregateCallTreeNode(CallTreeNodeBase node, AggregateCallTreeNode caller, int callerOffset);
    public static CallTreeNode CallerTree(CallTreeNodeBase node);
    public static CallTreeNode CalleeTree(CallTreeNodeBase node);
    public virtual void GetTrees(Action`1<CallTreeNode> callback);
    public virtual string ToString();
    protected virtual void FreeMemory(Stack`1<CallTreeNodeBase> nodesToFree);
    protected virtual List`1<CallTreeNode> GetCallees();
    private void MergeCaller(CallTreeNode treeNode, List`1<CallTreeNode> callerList, int callerOffset);
    private void MergeCallee(CallTreeNode treeNode, List`1<CallTreeNode> calleeList);
    private static void SubtractOutTrees(CallTreeNode treeCallee, StackSourceFrameIndex idToExclude, AggregateCallTreeNode statsRet);
    private static AggregateCallTreeNode FindNodeInList(StackSourceFrameIndex id, List`1<CallTreeNode> calleeList);
    internal virtual StackSourceFrameIndex GetExcludeChildID();
    internal virtual bool get_IsCalleeTree();
    internal virtual void set_IsCalleeTree(bool value);
}
public class Microsoft.Diagnostics.Tracing.Stacks.CallerCalleeNode : CallTreeNodeBase {
    private List`1<CallTreeNodeBase> m_callers;
    private List`1<CallTreeNodeBase> m_callees;
    private Dictionary`2<string, CallTreeNodeBase> m_callersByName;
    private Dictionary`2<string, CallTreeNodeBase> m_calleesByName;
    public IList`1<CallTreeNodeBase> Callers { get; }
    public IList`1<CallTreeNodeBase> Callees { get; }
    public CallerCalleeNode(string nodeName, CallTree callTree);
    public IList`1<CallTreeNodeBase> get_Callers();
    public IList`1<CallTreeNodeBase> get_Callees();
    public void ToXml(TextWriter writer, string indent);
    public virtual string ToString();
    protected virtual void FreeMemory(Stack`1<CallTreeNodeBase> nodesToFree);
    private AccumulateSamplesResult AccumulateSamplesForNode(CallTreeNode treeNode, int recursionCount, RecursionGuard recursionGuard);
    private CallTreeNodeBase Find(Dictionary`2& elems, string frameName);
}
public class Microsoft.Diagnostics.Tracing.Stacks.CallTree : object {
    [CompilerGeneratedAttribute]
private float <PercentageBasis>k__BackingField;
    [CompilerGeneratedAttribute]
private ScalingPolicyKind <ScalingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelism>k__BackingField;
    private static int StackInfoCacheSize;
    private TreeCacheEntry[] m_TreeForStack;
    internal StackSourceFrameIndex[] m_canonicalID;
    internal ConcurrentDictionary`2<string, StackSourceFrameIndex> m_frameIntern;
    internal ConcurrentDictionary`2<CallTreeNode, ConcurrentDictionary`2<StackSourceFrameIndex, CallTreeNode>> m_calleeLookups;
    internal StackSource m_SampleInfo;
    private CallTreeNode m_root;
    private TimeHistogramController m_timeHistogram;
    private ScenarioHistogramController m_scenarioHistogram;
    private Dictionary`2<int, CallTreeNodeBase> m_sumByID;
    internal CallTreeNode[] m_samplesToTreeNodes;
    internal int m_nextNodeIndex;
    public StackSource StackSource { get; public set; }
    public float PercentageBasis { get; public set; }
    public CallTreeNode Root { get; }
    public CallTreeNodeIndex NodeIndexLimit { get; }
    public IEnumerable`1<CallTreeNodeBase> ByID { get; }
    public ScalingPolicyKind ScalingPolicy { get; private set; }
    public TimeHistogramController TimeHistogramController { get; public set; }
    public ScenarioHistogramController ScenarioHistogram { get; public set; }
    public bool DisableParallelism { get; public set; }
    public CallTree(ScalingPolicyKind scalingPolicy);
    private CallTree(CallTreeNode root);
    public StackSource get_StackSource();
    public void set_StackSource(StackSource value);
    [CompilerGeneratedAttribute]
public float get_PercentageBasis();
    [CompilerGeneratedAttribute]
public void set_PercentageBasis(float value);
    public CallTreeNode get_Root();
    public CallTreeNodeIndex get_NodeIndexLimit();
    public CallerCalleeNode CallerCallee(string nodeName);
    public IEnumerable`1<CallTreeNodeBase> get_ByID();
    public List`1<CallTreeNodeBase> ByIDSortedExclusiveMetric();
    public int FoldNodesUnder(float minInclusiveMetric, bool useWholeTraceMetric);
    public void Sort(IComparer`1<CallTreeNode> comparer);
    public void SortInclusiveMetricDecending();
    [CompilerGeneratedAttribute]
public ScalingPolicyKind get_ScalingPolicy();
    [CompilerGeneratedAttribute]
private void set_ScalingPolicy(ScalingPolicyKind value);
    public TimeHistogramController get_TimeHistogramController();
    public void set_TimeHistogramController(TimeHistogramController value);
    public ScenarioHistogramController get_ScenarioHistogram();
    public void set_ScenarioHistogram(ScenarioHistogramController value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelism();
    [CompilerGeneratedAttribute]
public void set_DisableParallelism(bool value);
    public virtual void FreeMemory();
    public void ToXml(TextWriter writer);
    public virtual string ToString();
    private CallTreeNode FindTreeNode(StackSourceCallStackIndex stack, RecursionGuard recursionGuard);
    private void AddSample(StackSourceSample sample);
    private void AddSampleToTreeNode(CallTreeNode treeNode, StackSourceSample sample);
    internal Dictionary`2<int, CallTreeNodeBase> GetSumByID();
    private void AccumulateSumByID(CallTreeNode treeNode, Dictionary`2<int, CallTreeNodeBase> callersOnStack, RecursionGuard recursionGuard);
}
public class Microsoft.Diagnostics.Tracing.Stacks.CallTreeNode : CallTreeNodeBase {
    private CallTreeNode m_caller;
    internal List`1<CallTreeNode> m_callees;
    private IList`1<CallTreeNode> m_displayCallees;
    private string m_indentString;
    private bool m_indentStringForPrimary;
    public CallTreeNode Caller { get; }
    public IList`1<CallTreeNode> Callees { get; }
    public bool IsLeaf { get; }
    public IList`1<CallTreeNode> AllCallees { get; }
    public bool HasChildren { get; }
    public bool IsGraphNode { get; }
    internal bool IsCalleeTree { get; internal set; }
    internal CallTreeNode(string name, StackSourceFrameIndex id, CallTreeNode caller, CallTree container);
    public CallTreeNode get_Caller();
    public IList`1<CallTreeNode> get_Callees();
    public bool get_IsLeaf();
    public IList`1<CallTreeNode> get_AllCallees();
    public virtual bool get_HasChildren();
    public bool get_IsGraphNode();
    public void ToXml(TextWriter writer, string indent);
    public virtual string ToString();
    public float GetBrokenStackCount();
    public string IndentString(bool displayPrimaryOnly);
    protected virtual void FreeMemory(Stack`1<CallTreeNodeBase> nodesToFree);
    internal void SortAll(IComparer`1<CallTreeNode> comparer, RecursionGuard recursionGuard);
    private IList`1<CallTreeNode> GetAllChildren();
    protected virtual List`1<CallTreeNode> GetCallees();
    internal int FoldNodesUnder(float minInclusiveMetric, Dictionary`2<int, CallTreeNodeBase> sumByID);
    private bool IsFoldable(float minInclusiveMetric, Dictionary`2<int, CallTreeNodeBase> sumByID);
    private static void TransferInclusiveSamplesToList(CallTreeNode fromNode, GrowableArray`1& toList, RecursionGuard recursionGuard);
    internal CallTreeNode FindCallee(StackSourceFrameIndex frameID);
    private bool IsLastChild(bool displayPrimaryOnly);
    private int Depth();
    private float GetBrokenStackCount(int depth);
    [ConditionalAttribute("DEBUG")]
internal void CheckClassInvarients();
    internal virtual bool get_IsCalleeTree();
    internal virtual void set_IsCalleeTree(bool value);
}
public class Microsoft.Diagnostics.Tracing.Stacks.CallTreeNodeBase : object {
    internal StackSourceFrameIndex m_id;
    internal string m_name;
    internal CallTree m_callTree;
    internal float m_inclusiveMetric;
    internal float m_inclusiveCount;
    internal float m_exclusiveMetric;
    internal float m_exclusiveCount;
    internal float m_exclusiveFoldedMetric;
    internal float m_exclusiveFoldedCount;
    internal double m_firstTimeRelativeMSec;
    internal double m_lastTimeRelativeMSec;
    private CallTreeNodeIndex m_index;
    internal GrowableArray`1<StackSourceSampleIndex> m_samples;
    internal Histogram m_inclusiveMetricByTime;
    internal Histogram m_inclusiveMetricByScenario;
    internal CallTreeNodeBase m_nextSameId;
    internal bool m_isByIdNode;
    internal bool m_isGraphNode;
    internal bool m_isCallerTree;
    internal int m_minDepth;
    public CallTreeNodeIndex Index { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public StackSourceFrameIndex ID { get; }
    public float InclusiveMetric { get; }
    public float AverageInclusiveMetric { get; }
    public float ExclusiveMetric { get; }
    public float ExclusiveFoldedMetric { get; }
    public float InclusiveCount { get; }
    public float ExclusiveCount { get; }
    public float ExclusiveFoldedCount { get; }
    public float InclusiveMetricPercent { get; }
    public float ExclusiveMetricPercent { get; }
    public float ExclusiveFoldedMetricPercent { get; }
    public double FirstTimeRelativeMSec { get; }
    [ObsoleteAttribute("Use FirstTimeRelativeMSec")]
public double FirstTimeRelMSec { get; }
    public double LastTimeRelativeMSec { get; }
    [ObsoleteAttribute("Use LastTimeRelativeMSec")]
public double LastTimeRelMSec { get; }
    public double DurationMSec { get; }
    public CallTree CallTree { get; }
    public Histogram InclusiveMetricByTime { get; }
    public string InclusiveMetricByTimeString { get; public set; }
    public Histogram InclusiveMetricByScenario { get; }
    public string InclusiveMetricByScenarioString { get; public set; }
    public CallTreeNodeBase(CallTreeNodeBase template);
    internal CallTreeNodeBase(string name, StackSourceFrameIndex id, CallTree container);
    public CallTreeNodeIndex get_Index();
    public string get_Name();
    public string get_DisplayName();
    public StackSourceFrameIndex get_ID();
    public float get_InclusiveMetric();
    public float get_AverageInclusiveMetric();
    public float get_ExclusiveMetric();
    public float get_ExclusiveFoldedMetric();
    public float get_InclusiveCount();
    public float get_ExclusiveCount();
    public float get_ExclusiveFoldedCount();
    public float get_InclusiveMetricPercent();
    public float get_ExclusiveMetricPercent();
    public float get_ExclusiveFoldedMetricPercent();
    public double get_FirstTimeRelativeMSec();
    public double get_FirstTimeRelMSec();
    public double get_LastTimeRelativeMSec();
    public double get_LastTimeRelMSec();
    public double get_DurationMSec();
    public CallTree get_CallTree();
    public Histogram get_InclusiveMetricByTime();
    public string get_InclusiveMetricByTimeString();
    public void set_InclusiveMetricByTimeString(string value);
    public Histogram get_InclusiveMetricByScenario();
    public string get_InclusiveMetricByScenarioString();
    public void set_InclusiveMetricByScenarioString(string value);
    public virtual int GetSamples(bool exclusive, Func`2<StackSourceSampleIndex, bool> callback);
    public virtual void GetTrees(Action`1<CallTreeNode> callback);
    public void ToXmlAttribs(TextWriter writer);
    public virtual string ToString();
    public void FreeMemory();
    protected virtual void FreeMemory(Stack`1<CallTreeNodeBase> nodesToFree);
    internal void CombineByIdSamples(CallTreeNodeBase other, bool addInclusive, double weight, bool addExclusive);
    protected static int GetSamplesForTreeNode(CallTreeNode curNode, bool exclusive, Func`2<StackSourceSampleIndex, bool> callback, StackSourceFrameIndex excludeChildrenWithID);
    internal virtual StackSourceFrameIndex GetExcludeChildID();
}
public enum Microsoft.Diagnostics.Tracing.Stacks.CallTreeNodeIndex : Enum {
    public int value__;
    public static CallTreeNodeIndex Invalid;
}
public class Microsoft.Diagnostics.Tracing.Stacks.CopyStackSource : StackSource {
    internal GrowableArray`1<StackSourceSample> m_samples;
    internal double m_sampleTimeRelativeMSecLimit;
    internal StackSourceStacks m_sourceStacks;
    public StackSourceStacks SourceStacks { get; }
    public int SampleIndexLimit { get; }
    public double SampleTimeRelativeMSecLimit { get; }
    public bool SamplesImmutable { get; }
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public CopyStackSource(StackSourceStacks sourceStacks);
    public StackSourceSample AddSample(StackSourceSample sample);
    public static CopyStackSource Clone(StackSource source);
    public StackSourceStacks get_SourceStacks();
    public virtual StackSourceSample GetSampleByIndex(StackSourceSampleIndex sampleIndex);
    public virtual int get_SampleIndexLimit();
    public virtual double get_SampleTimeRelativeMSecLimit();
    public virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual bool get_SamplesImmutable();
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool verboseName);
    public virtual int get_CallStackIndexLimit();
    public virtual int get_CallFrameIndexLimit();
}
public class Microsoft.Diagnostics.Tracing.Stacks.Formats.ChromiumStackSourceWriter : object {
    public static void WriteStackViewAsJson(StackSource source, string filePath, bool compress);
    private static void Export(StackSource source, TextWriter writer, string name);
    private static void WriteToFile(Dictionary`2<int, FrameInfo> frameIdToFrameTuple, IReadOnlyDictionary`2<ThreadInfo, IReadOnlyList`1<ProfileEvent>> sortedProfileEventsPerThread, TextWriter writer, string name);
}
public static class Microsoft.Diagnostics.Tracing.Stacks.Formats.SpeedScopeStackSourceWriter : object {
    public static void WriteStackViewAsJson(StackSource source, string filePath);
    private static void Export(StackSource source, TextWriter writer, string name);
    private static void WriteToFile(IReadOnlyDictionary`2<string, IReadOnlyList`1<ProfileEvent>> sortedProfileEventsPerThread, IReadOnlyList`1<string> orderedFrameNames, TextWriter writer, string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Diagnostics.Tracing.Stacks.Histogram : object {
    private HistogramController m_controller;
    private Single[] m_buckets;
    private int m_singleBucketNum;
    private float m_singleBucketValue;
    public int Count { get; }
    public HistogramController Controller { get; }
    public float Item { get; }
    public Histogram(HistogramController controller);
    private Histogram(Histogram other);
    public void AddSample(StackSourceSample sample);
    public void AddMetric(float metric, int bucket);
    public void AddScaled(Histogram histogram, double weight);
    public int get_Count();
    public HistogramController get_Controller();
    public float get_Item(int index);
    public Histogram Clone();
    public virtual string ToString();
    public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Stacks.Histogram/<GetEnumerable>d__15")]
private IEnumerable`1<float> GetEnumerable();
}
public enum Microsoft.Diagnostics.Tracing.Stacks.HistogramCharacterIndex : Enum {
    public int value__;
    public static HistogramCharacterIndex Invalid;
}
public abstract class Microsoft.Diagnostics.Tracing.Stacks.HistogramController : object {
    [CompilerGeneratedAttribute]
private int <BucketCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharacterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTree <Tree>k__BackingField;
    private double m_scale;
    public double Scale { get; }
    public int BucketCount { get; protected set; }
    public int CharacterCount { get; protected set; }
    public CallTree Tree { get; protected set; }
    protected HistogramController(CallTree tree);
    public double get_Scale();
    [CompilerGeneratedAttribute]
public int get_BucketCount();
    [CompilerGeneratedAttribute]
protected void set_BucketCount(int value);
    [CompilerGeneratedAttribute]
public int get_CharacterCount();
    [CompilerGeneratedAttribute]
protected void set_CharacterCount(int value);
    [CompilerGeneratedAttribute]
public CallTree get_Tree();
    [CompilerGeneratedAttribute]
protected void set_Tree(CallTree value);
    public void InvalidateScale();
    public abstract virtual void AddSample(Histogram histogram, StackSourceSample sample);
    public abstract virtual string GetInfoForCharacterRange(HistogramCharacterIndex start, HistogramCharacterIndex end, Histogram histogram);
    public abstract virtual string GetDisplayString(Histogram histogram);
    public static string HistogramString(IEnumerable`1<float> buckets, int bucketCount, double scale, int maxLegalBucket);
    public static string HistogramString(Single[] buckets, double scale, int maxLegalBucket);
    protected abstract virtual double CalculateScale();
    protected double CalculateAverageScale(Histogram hist);
}
public class Microsoft.Diagnostics.Tracing.Stacks.InternStackSource : CopyStackSource {
    [CompilerGeneratedAttribute]
private StackSourceInterner <Interner>k__BackingField;
    public StackSourceInterner Interner { get; private set; }
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public InternStackSource(StackSource source, StackSourceStacks sourceStacks);
    public static InternStackSource Diff(StackSource source, StackSource baselineSource);
    public static InternStackSource Diff(StackSource source, StackSourceStacks sourceStacks, StackSource baselineSource, StackSourceStacks baselineStacks);
    [CompilerGeneratedAttribute]
public StackSourceInterner get_Interner();
    [CompilerGeneratedAttribute]
private void set_Interner(StackSourceInterner value);
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool verboseName);
    public virtual int get_CallStackIndexLimit();
    public virtual int get_CallFrameIndexLimit();
    internal void ReadAllSamples(StackSource source, StackSourceStacks stackLookup, float scaleFactor);
    private StackSourceCallStackIndex InternFullStackFromSource(StackSourceCallStackIndex baseCallStackIndex, StackSourceStacks source, int maxDepth);
}
public class Microsoft.Diagnostics.Tracing.Stacks.LinuxPerfScriptStackSourceSample : StackSourceSample {
    [CompilerGeneratedAttribute]
private int <CpuNumber>k__BackingField;
    public int CpuNumber { get; public set; }
    public LinuxPerfScriptStackSourceSample(StackSource source);
    public LinuxPerfScriptStackSourceSample(StackSourceSample template, int cpuNumber);
    public LinuxPerfScriptStackSourceSample(LinuxPerfScriptStackSourceSample template);
    [CompilerGeneratedAttribute]
public int get_CpuNumber();
    [CompilerGeneratedAttribute]
public void set_CpuNumber(int value);
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Tracing.Stacks.MutableTraceEventStackSource : TraceEventStackSource {
    protected StackSourceInterner m_Interner;
    protected StackSourceModuleIndex m_emptyModuleIdx;
    internal GrowableArray`1<StackSourceSample> m_samples;
    private double m_sampleTimeRelativeMSecLimit;
    public StackSourceInterner Interner { get; }
    public int SampleIndexLimit { get; }
    public bool SamplesImmutable { get; }
    public int CallFrameIndexLimit { get; }
    public int CallStackIndexLimit { get; }
    public double SampleTimeRelativeMSecLimit { get; }
    public MutableTraceEventStackSource(TraceLog log);
    public StackSourceSample AddSample(StackSourceSample sample);
    public void DoneAddingSamples();
    public StackSourceInterner get_Interner();
    public StackSourceCallStackIndex GetCallStackForProcess(TraceProcess process);
    public StackSourceCallStackIndex GetCallStackForThread(TraceThread thread);
    public StackSourceCallStackIndex GetCallStackThread(CallStackIndex callStackIndex, TraceThread thread);
    public StackSourceCallStackIndex GetCallStack(CallStackIndex callStackIndex, TraceEvent data);
    public StackSourceCallStackIndex GetCallStack(CallStackIndex callStackIndex, StackSourceCallStackIndex top, CallStackMap callStackMap);
    public StackSourceFrameIndex GetFrameIndex(CodeAddressIndex codeAddressIndex);
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public StackSourceModuleIndex GetModuleIndex(StackSourceFrameIndex frameIndex);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool fullModulePath);
    public virtual StackSourceSample GetSampleByIndex(StackSourceSampleIndex sampleIndex);
    public virtual int get_SampleIndexLimit();
    public virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual bool get_SamplesImmutable();
    public virtual int get_CallFrameIndexLimit();
    public virtual int get_CallStackIndexLimit();
    public virtual double get_SampleTimeRelativeMSecLimit();
}
internal class Microsoft.Diagnostics.Tracing.Stacks.RecursionGuard : ValueType {
    private ushort _currentThreadRecursionDepth;
    private ushort _resetCount;
    internal static ushort SingleThreadRecursionLimit;
    public int Depth { get; }
    public static RecursionGuard Entry { get; }
    public RecursionGuard Recurse { get; }
    public RecursionGuard ResetOnNewThread { get; }
    public bool RequiresNewThread { get; }
    private RecursionGuard(int currentThreadRecursionDepth, int numResets);
    public int get_Depth();
    public static RecursionGuard get_Entry();
    public RecursionGuard get_Recurse();
    public RecursionGuard get_ResetOnNewThread();
    public bool get_RequiresNewThread();
}
public static class Microsoft.Diagnostics.Tracing.Stacks.RecursionGuardConfiguration : object {
    private static ushort _maxResets;
    public static ushort MaxResets { get; public set; }
    private static RecursionGuardConfiguration();
    public static ushort get_MaxResets();
    public static void set_MaxResets(ushort value);
}
public enum Microsoft.Diagnostics.Tracing.Stacks.RefDirection : Enum {
    public int value__;
    public static RefDirection From;
    public static RefDirection To;
}
public enum Microsoft.Diagnostics.Tracing.Stacks.ScalingPolicyKind : Enum {
    public int value__;
    public static ScalingPolicyKind ScaleToData;
    public static ScalingPolicyKind TimeMetric;
}
public class Microsoft.Diagnostics.Tracing.Stacks.ScenarioHistogramController : HistogramController {
    private HistogramCharacterIndex[] m_characterFromScenario;
    private List`1[] m_scenariosFromCharacter;
    private String[] m_scenarioNames;
    public ScenarioHistogramController(CallTree tree, Int32[] scenarios, int totalScenarios, String[] scenarioNames);
    public Int32[] GetScenariosForCharacterIndex(HistogramCharacterIndex bucket);
    public Int32[] GetScenariosForCharacterRange(HistogramCharacterIndex start, HistogramCharacterIndex end);
    public virtual void AddSample(Histogram histogram, StackSourceSample sample);
    public string GetNameForScenario(int scenario);
    public virtual string GetInfoForCharacterRange(HistogramCharacterIndex start, HistogramCharacterIndex end, Histogram histogram);
    public virtual string GetDisplayString(Histogram histogram);
    protected virtual double CalculateScale();
}
public abstract class Microsoft.Diagnostics.Tracing.Stacks.StackSource : StackSourceStacks {
    public bool SamplesImmutable { get; }
    public StackSource BaseStackSource { get; }
    public int SampleIndexLimit { get; }
    public double SampleTimeRelativeMSecLimit { get; }
    public int ScenarioCount { get; }
    public Nullable`1<float> SamplingRate { get; public set; }
    public bool IsGraphSource { get; }
    [ObsoleteAttribute("Use ForEach")]
public void ProduceSamples(Action`1<StackSourceSample> callback);
    public abstract virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual bool get_SamplesImmutable();
    public virtual void ParallelForEach(Action`1<StackSourceSample> callback, int desiredParallelism);
    public virtual StackSource get_BaseStackSource();
    public virtual StackSourceSample GetSampleByIndex(StackSourceSampleIndex sampleIndex);
    public virtual int get_SampleIndexLimit();
    public virtual double get_SampleTimeRelativeMSecLimit();
    public virtual int get_ScenarioCount();
    public virtual Nullable`1<float> get_SamplingRate();
    public virtual void set_SamplingRate(Nullable`1<float> value);
    public virtual bool get_IsGraphSource();
    public virtual void GetReferences(StackSourceSampleIndex nodeIndex, RefDirection direction, Action`1<StackSourceSampleIndex> callback);
    public void Dump(string fileName);
    public void Dump(TextWriter writer);
}
public enum Microsoft.Diagnostics.Tracing.Stacks.StackSourceCallStackIndex : Enum {
    public int value__;
    public static StackSourceCallStackIndex Start;
    public static StackSourceCallStackIndex Invalid;
}
public enum Microsoft.Diagnostics.Tracing.Stacks.StackSourceFrameIndex : Enum {
    public int value__;
    public static StackSourceFrameIndex Root;
    public static StackSourceFrameIndex Broken;
    public static StackSourceFrameIndex Unknown;
    public static StackSourceFrameIndex Overhead;
    public static StackSourceFrameIndex Start;
    public static StackSourceFrameIndex Invalid;
    public static StackSourceFrameIndex Discard;
}
public class Microsoft.Diagnostics.Tracing.Stacks.StackSourceInterner : object {
    [CompilerGeneratedAttribute]
private Func`3<StackSourceFrameIndex, bool, string> <FrameNameLookup>k__BackingField;
    private static Char[] s_directorySeparators;
    private InternTable`1<string> m_moduleIntern;
    private StackSourceModuleIndex m_emptyModuleIdx;
    private InternTable`1<FrameInfo> m_frameIntern;
    private InternTable`1<CallStackInfo> m_callStackIntern;
    private StackSourceFrameIndex m_frameStartIndex;
    private StackSourceCallStackIndex m_callStackStartIndex;
    private StackSourceModuleIndex m_moduleStackStartIndex;
    public StackSourceCallStackIndex CallStackStartIndex { get; }
    public StackSourceFrameIndex FrameStartIndex { get; }
    public Func`3<StackSourceFrameIndex, bool, string> FrameNameLookup { get; public set; }
    public int FrameCount { get; }
    public int CallStackCount { get; }
    public StackSourceInterner(int estNumCallStacks, int estNumFrames, int estNumModules, StackSourceFrameIndex frameStartIndex, StackSourceCallStackIndex callStackStartIndex, StackSourceModuleIndex moduleStackStartIndex);
    private static StackSourceInterner();
    public void DoneInterning();
    public StackSourceCallStackIndex get_CallStackStartIndex();
    public StackSourceFrameIndex get_FrameStartIndex();
    public StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public string GetFrameName(StackSourceFrameIndex frameIndex, bool fullModulePath);
    public StackSourceModuleIndex GetModuleIndex(StackSourceFrameIndex frameIndex);
    [CompilerGeneratedAttribute]
public Func`3<StackSourceFrameIndex, bool, string> get_FrameNameLookup();
    [CompilerGeneratedAttribute]
public void set_FrameNameLookup(Func`3<StackSourceFrameIndex, bool, string> value);
    public StackSourceModuleIndex ModuleIntern(string moduleName);
    public StackSourceFrameIndex FrameIntern(string frameName, StackSourceModuleIndex moduleIndex);
    public StackSourceFrameIndex FrameIntern(StackSourceFrameIndex frameIndex, string frameSuffix);
    public StackSourceCallStackIndex CallStackIntern(StackSourceFrameIndex frameIndex, StackSourceCallStackIndex callerIndex);
    public int get_FrameCount();
    public int get_CallStackCount();
}
public enum Microsoft.Diagnostics.Tracing.Stacks.StackSourceModuleIndex : Enum {
    public int value__;
    public static StackSourceModuleIndex Start;
    public static StackSourceModuleIndex Invalid;
}
public class Microsoft.Diagnostics.Tracing.Stacks.StackSourceSample : object {
    [CompilerGeneratedAttribute]
private StackSourceCallStackIndex <StackIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Metric>k__BackingField;
    [CompilerGeneratedAttribute]
private StackSourceSampleIndex <SampleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TimeRelativeMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scenario>k__BackingField;
    public StackSourceCallStackIndex StackIndex { get; public set; }
    public float Metric { get; public set; }
    public StackSourceSampleIndex SampleIndex { get; public set; }
    public double TimeRelativeMSec { get; public set; }
    public float Count { get; public set; }
    public int Scenario { get; public set; }
    public StackSourceSample(StackSource source);
    public StackSourceSample(StackSourceSample template);
    [CompilerGeneratedAttribute]
public StackSourceCallStackIndex get_StackIndex();
    [CompilerGeneratedAttribute]
public void set_StackIndex(StackSourceCallStackIndex value);
    [CompilerGeneratedAttribute]
public float get_Metric();
    [CompilerGeneratedAttribute]
public void set_Metric(float value);
    [CompilerGeneratedAttribute]
public StackSourceSampleIndex get_SampleIndex();
    [CompilerGeneratedAttribute]
public void set_SampleIndex(StackSourceSampleIndex value);
    [CompilerGeneratedAttribute]
public double get_TimeRelativeMSec();
    [CompilerGeneratedAttribute]
public void set_TimeRelativeMSec(double value);
    [CompilerGeneratedAttribute]
public float get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(float value);
    [CompilerGeneratedAttribute]
public int get_Scenario();
    [CompilerGeneratedAttribute]
public void set_Scenario(int value);
    public virtual string ToString();
    public string ToString(StackSourceStacks source);
}
public enum Microsoft.Diagnostics.Tracing.Stacks.StackSourceSampleIndex : Enum {
    public int value__;
    public static StackSourceSampleIndex Invalid;
}
public abstract class Microsoft.Diagnostics.Tracing.Stacks.StackSourceStacks : object {
    [CompilerGeneratedAttribute]
private bool <OnlyManagedCodeStacks>k__BackingField;
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public bool OnlyManagedCodeStacks { get; public set; }
    public abstract virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public abstract virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual int GetNumberOfFoldedFrames(StackSourceCallStackIndex callStackIndex);
    public abstract virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool verboseName);
    public abstract virtual int get_CallStackIndexLimit();
    public abstract virtual int get_CallFrameIndexLimit();
    [CompilerGeneratedAttribute]
public virtual bool get_OnlyManagedCodeStacks();
    [CompilerGeneratedAttribute]
public virtual void set_OnlyManagedCodeStacks(bool value);
    public int StackDepth(StackSourceCallStackIndex callStackIndex);
    public string ToString(StackSourceSample sample, StringBuilder sb);
    public string ToString(StackSourceCallStackIndex callStackIndex);
    private string ToString(StackSourceFrameIndex frameIndex, StackSourceCallStackIndex stackIndex);
}
internal static class Microsoft.Diagnostics.Tracing.Stacks.StackSourceWriterHelper : object {
    internal static IReadOnlyDictionary`2<ThreadInfo, List`1<Sample>> GetSortedSamplesPerThread(StackSource stackSource);
    internal static IReadOnlyList`1<ProfileEvent> GetProfileEvents(StackSource stackSource, IReadOnlyList`1<Sample> leafs, Dictionary`2<string, int> exportedFrameNameToExportedFrameId, Dictionary`2<int, FrameInfo> exportedFrameIdToExportedNameAndCallerId);
    internal static void HandleSamples(List`1<Sample> previousSamples, List`1<Sample> currentSamples, List`1<ProfileEvent> results);
    internal static bool Validate(IReadOnlyList`1<ProfileEvent> orderedProfileEvents);
    internal static string GetExporterInfo();
    internal static string GetEscaped(string name, Dictionary`2<string, string> escapedNames);
    private static int CompareSamplesByTime(Sample x, Sample y);
    private static bool AreNotContinuous(Sample left, Sample right);
}
public class Microsoft.Diagnostics.Tracing.Stacks.TimeHistogramController : HistogramController {
    [CompilerGeneratedAttribute]
private double <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private double <End>k__BackingField;
    public double Start { get; private set; }
    public double End { get; private set; }
    public double BucketDuration { get; }
    public TimeHistogramController(CallTree tree, double start, double end);
    [CompilerGeneratedAttribute]
public double get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(double value);
    [CompilerGeneratedAttribute]
public double get_End();
    [CompilerGeneratedAttribute]
private void set_End(double value);
    public double GetStartTimeForBucket(HistogramCharacterIndex bucket);
    public double get_BucketDuration();
    protected virtual double CalculateScale();
    public virtual void AddSample(Histogram histogram, StackSourceSample sample);
    public virtual string GetInfoForCharacterRange(HistogramCharacterIndex start, HistogramCharacterIndex end, Histogram histogram);
    public virtual string GetDisplayString(Histogram histogram);
}
public class Microsoft.Diagnostics.Tracing.Stacks.TraceEventStackSource : StackSource {
    [CompilerGeneratedAttribute]
private bool <ShowUnknownAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOptimizationTiers>k__BackingField;
    private GrowableArray`1<PseudoStack> m_pseudoStacks;
    private int m_maxPseudoStack;
    private Dictionary`2<PseudoStack, int> m_pseudoStacksTable;
    private StackSourceSample m_curSample;
    private TraceEvents m_events;
    private ModuleFileIndex m_goodTopModuleIndex;
    internal TraceLog m_log;
    public TraceLog TraceLog { get; }
    public bool ShowUnknownAddresses { get; public set; }
    public bool ShowOptimizationTiers { get; public set; }
    public double SampleTimeRelativeMSecLimit { get; }
    public int CallStackIndexLimit { get; }
    public int CallFrameIndexLimit { get; }
    public TraceEventStackSource(TraceEvents events);
    internal TraceEventStackSource(TraceLog log);
    public TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
public bool get_ShowUnknownAddresses();
    [CompilerGeneratedAttribute]
public void set_ShowUnknownAddresses(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowOptimizationTiers();
    [CompilerGeneratedAttribute]
public void set_ShowOptimizationTiers(bool value);
    public void LookupWarmSymbols(int minCount, SymbolReader reader, StackSource stackSource, Predicate`1<TraceModuleFile> shouldLoadSymbols);
    public CodeAddressIndex GetFrameCodeAddress(StackSourceFrameIndex frameIndex);
    public virtual void ForEach(Action`1<StackSourceSample> callback);
    public virtual double get_SampleTimeRelativeMSecLimit();
    public virtual StackSourceFrameIndex GetFrameIndex(StackSourceCallStackIndex callStackIndex);
    public virtual StackSourceCallStackIndex GetCallerIndex(StackSourceCallStackIndex callStackIndex);
    public SourceLocation GetSourceLine(StackSourceFrameIndex frameIndex, SymbolReader reader);
    public virtual string GetFrameName(StackSourceFrameIndex frameIndex, bool verboseName);
    public virtual int get_CallStackIndexLimit();
    public virtual int get_CallFrameIndexLimit();
    private ModuleList GetModulesForStack(ModuleList[] stackModuleLists, StackSourceCallStackIndex stackIdx);
    private int GetPseudoStack(ThreadIndex threadIndex, CodeAddressIndex codeAddrIndex);
    private StackSourceCallStackIndex GetStack(TraceEvent event_);
    private bool ReasonableTopFrame(StackSourceCallStackIndex callStackIndex, ThreadIndex threadIndex);
}
public class Microsoft.Diagnostics.Tracing.StackSources.BlockedCPUFrame : ValueType {
    [CompilerGeneratedAttribute]
private string <SubKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    public string SubKind { get; }
    public FrameKind Kind { get; }
    public string DisplayName { get; }
    public int ID { get; }
    public BlockedCPUFrame(int id, string kind);
    [CompilerGeneratedAttribute]
public string get_SubKind();
    public sealed virtual FrameKind get_Kind();
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public int get_ID();
}
public class Microsoft.Diagnostics.Tracing.StackSources.BlockedTimeAnalyzer : object {
    [CompilerGeneratedAttribute]
private double <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> <BeginningStates>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> <EndingStates>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<LinuxEvent, LinuxPerfScriptStackSourceSample> <LinuxEventSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, LinuxEvent> <LastCpuUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ThreadPeriod> <BlockedThreadPeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private LinuxPerfScriptStackSource <StackSource>k__BackingField;
    public double TimeStamp { get; private set; }
    public Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> BeginningStates { get; }
    public Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> EndingStates { get; }
    public Dictionary`2<LinuxEvent, LinuxPerfScriptStackSourceSample> LinuxEventSamples { get; }
    public Dictionary`2<int, LinuxEvent> LastCpuUsage { get; }
    public List`1<ThreadPeriod> BlockedThreadPeriods { get; }
    public LinuxPerfScriptStackSource StackSource { get; }
    public double TotalBlockedTime { get; }
    public BlockedTimeAnalyzer(LinuxPerfScriptStackSource stackSource);
    [CompilerGeneratedAttribute]
public double get_TimeStamp();
    [CompilerGeneratedAttribute]
private void set_TimeStamp(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> get_BeginningStates();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, KeyValuePair`2<LinuxThreadState, LinuxEvent>> get_EndingStates();
    [CompilerGeneratedAttribute]
public Dictionary`2<LinuxEvent, LinuxPerfScriptStackSourceSample> get_LinuxEventSamples();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, LinuxEvent> get_LastCpuUsage();
    [CompilerGeneratedAttribute]
public List`1<ThreadPeriod> get_BlockedThreadPeriods();
    [CompilerGeneratedAttribute]
public LinuxPerfScriptStackSource get_StackSource();
    public double get_TotalBlockedTime();
    public void UpdateThreadState(LinuxEvent linuxEvent);
    public void LinuxEventSampleAssociation(LinuxEvent linuxEvent, LinuxPerfScriptStackSourceSample sample);
    public bool IsThreadBlocked(int threadId);
    public void FinishAnalyzing(double endTime);
    public void FinishAnalyzing();
    public void FlushBlockedThreadsAt(double endTime);
    private void DoMetrics(LinuxEvent linuxEvent);
    private void AddThreadPeriod(int threadId, double startTime, double endTime);
}
public class Microsoft.Diagnostics.Tracing.StackSources.CpuEvent : LinuxEvent {
    public CpuEvent(string comm, int tid, int pid, double time, int timeProp, int cpu, string eventName, string eventProp, IEnumerable`1<Frame> callerStacks);
}
public static class Microsoft.Diagnostics.Tracing.StackSources.CustomExtensions : object {
    public static IEnumerable`1<T> ConcatListsOfLists(IEnumerable`1[] objects);
}
internal class Microsoft.Diagnostics.Tracing.StackSources.DefaultHandler : StraceRecordHandler {
    private StackSourceSample _sample;
    public DefaultHandler(StraceStackSource stackSource);
    public virtual void Execute(StraceRecord record);
}
public enum Microsoft.Diagnostics.Tracing.StackSources.EventKind : Enum {
    public int value__;
    public static EventKind Cpu;
    public static EventKind Scheduler;
    public static EventKind ThreadExit;
}
public interface Microsoft.Diagnostics.Tracing.StackSources.Frame {
    public FrameKind Kind { get; }
    public string DisplayName { get; }
    public abstract virtual FrameKind get_Kind();
    public abstract virtual string get_DisplayName();
}
public enum Microsoft.Diagnostics.Tracing.StackSources.FrameKind : Enum {
    public int value__;
    public static FrameKind StackFrame;
    public static FrameKind ProcessFrame;
    public static FrameKind ThreadFrame;
    public static FrameKind BlockedCPUFrame;
}
internal class Microsoft.Diagnostics.Tracing.StackSources.Interval : object {
    [CompilerGeneratedAttribute]
private ulong <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    public ulong Start { get; }
    public ulong Length { get; }
    public ulong End { get; }
    public Interval(ulong start, ulong length);
    [CompilerGeneratedAttribute]
public ulong get_Start();
    [CompilerGeneratedAttribute]
public ulong get_Length();
    public ulong get_End();
    public bool IsWithin(ulong thing);
    public bool IsWithin(ulong thing, bool inclusiveStart, bool inclusiveEnd);
}
internal class Microsoft.Diagnostics.Tracing.StackSources.IOHandler : StraceRecordHandler {
    private Dictionary`2<string, string> _fdToPathMap;
    private StackSourceSample _sample;
    private static char ArgumentSeparator;
    private static Char[] ArgumentSeparators;
    public IOHandler(StraceStackSource stackSource);
    private static IOHandler();
    public virtual void Execute(StraceRecord record);
    private void HandleOpenAtSyscall(StraceRecord record);
    private void HandleCloseSyscall(StraceRecord record);
    private void HandleFcntlSyscall(StraceRecord record);
    private void HandleReadSyscall(StraceRecord record);
    private void HandleLseekSyscall(StraceRecord record);
    private void HandlePread64Syscall(StraceRecord record);
    private void HandleAccessSyscall(StraceRecord record);
    private void HandleFstatSyscall(StraceRecord record);
    private void HandleGetdents64Syscall(StraceRecord record);
    private void HandleWriteSyscall(StraceRecord record);
    private void HandleFlockSyscall(StraceRecord record);
    private void HandleFadvise64Syscall(StraceRecord record);
    private void HandleIoctlSyscall(StraceRecord record);
    private void HandleLstatSyscall(StraceRecord record);
    private void HandleReadlinkSyscall(StraceRecord record);
    private void HandleUnlinkSyscall(StraceRecord record);
    private void HandleMknodSyscall(StraceRecord record);
    private void HandleStatSyscall(StraceRecord record);
    private void AddSample(StraceRecord record, string filePath);
}
public abstract class Microsoft.Diagnostics.Tracing.StackSources.LinuxEvent : object {
    [CompilerGeneratedAttribute]
private EventKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CpuNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TimeMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Frame> <CallerStacks>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Period>k__BackingField;
    public EventKind Kind { get; }
    public string Command { get; }
    public int ThreadID { get; }
    public int ProcessID { get; }
    public int CpuNumber { get; }
    public double TimeMSec { get; }
    public int TimeProperty { get; }
    public string EventName { get; }
    public string EventProperty { get; }
    public IEnumerable`1<Frame> CallerStacks { get; }
    public double Period { get; public set; }
    public LinuxEvent(EventKind kind, string comm, int tid, int pid, double time, int timeProp, int cpu, string eventName, string eventProp, IEnumerable`1<Frame> callerStacks);
    [CompilerGeneratedAttribute]
public EventKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public int get_ThreadID();
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    [CompilerGeneratedAttribute]
public int get_CpuNumber();
    [CompilerGeneratedAttribute]
public double get_TimeMSec();
    [CompilerGeneratedAttribute]
public int get_TimeProperty();
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public string get_EventProperty();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Frame> get_CallerStacks();
    [CompilerGeneratedAttribute]
public double get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(double value);
}
public class Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptEventParser : object {
    [CompilerGeneratedAttribute]
private int <EventCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxSamples>k__BackingField;
    private static Char[] pathSeparators;
    private static string NISuffix;
    private LinuxPerfScriptMapper mapper;
    public int EventCount { get; private set; }
    public Regex Pattern { get; public set; }
    public long MaxSamples { get; public set; }
    private static LinuxPerfScriptEventParser();
    [CompilerGeneratedAttribute]
public int get_EventCount();
    [CompilerGeneratedAttribute]
private void set_EventCount(int value);
    public void SkipPreamble(FastStream source);
    public IEnumerable`1<LinuxEvent> ParseSkippingPreamble(string filename);
    public IEnumerable`1<LinuxEvent> ParseSkippingPreamble(Stream stream);
    public IEnumerable`1<LinuxEvent> ParseSkippingPreamble(FastStream source);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptEventParser/<Parse>d__9")]
public IEnumerable`1<LinuxEvent> Parse(FastStream source);
    [CompilerGeneratedAttribute]
public Regex get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(Regex value);
    [CompilerGeneratedAttribute]
public long get_MaxSamples();
    [CompilerGeneratedAttribute]
public void set_MaxSamples(long value);
    public void SetSymbolFile(ZipArchive archive);
    public void SetSymbolFile(string path);
    public String[] GetSymbolFromMicrosoftMap(string entireSymbol, string mapFileLocation);
    public bool IsEndOfSample(FastStream source);
    public bool IsEndOfSample(FastStream source, byte current, byte peek1);
    public void ParseSymbolFile(Stream stream, Mapper mapper);
    public void ParsePerfInfoFile(Stream stream, Dictionary`2<string, string> guids, Dictionary`2<string, ulong> baseAddresses);
    internal static string GetFileName(string path);
    internal static string GetFileNameWithoutExtension(string path, bool stripNiSuffix);
    private void SetDefaultValues();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptEventParser/<NextEvent>d__30")]
private IEnumerable`1<LinuxEvent> NextEvent(Regex regex, FastStream source);
    private static int FindEndOfProcessCommand(FastStream source);
    private List`1<Frame> ReadFramesForSample(string command, int processID, int threadID, Frame threadTimeFrame, FastStream source);
    private StackFrame ReadFrame(FastStream source);
    private ScheduleSwitch ReadScheduleSwitch(FastStream source);
    private ThreadExit ReadExit(FastStream source);
    private string RemoveOuterBrackets(string s);
    private string RemoveOffset(string s);
    private bool IsNumberChar(char c);
}
public class Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptMapper : object {
    public static Regex MapFilePatterns;
    public static Regex PerfInfoPattern;
    private Dictionary`2<string, Mapper> fileSymbolMappers;
    private Dictionary`2<string, Dictionary`2<string, string>> processDllGuids;
    private Dictionary`2<string, Dictionary`2<string, ulong>> processDllBaseAddresses;
    private LinuxPerfScriptEventParser parser;
    public LinuxPerfScriptMapper(ZipArchive archive, LinuxPerfScriptEventParser parser);
    private static LinuxPerfScriptMapper();
    public String[] ResolveSymbols(int processID, string modulePath, StackFrame stackFrame);
    private void PopulateSymbolMapperAndGuids(ZipArchive archive);
}
internal class Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptProcessNameBuilder : object {
    private static String[] IgnoredNames;
    private Dictionary`2<StackSourceFrameIndex, HashSet`1<string>> _candidateProcessNames;
    private Dictionary`2<StackSourceFrameIndex, string> _cachedProcessNames;
    private Dictionary`2<StackSourceFrameIndex, int> _processIds;
    private static LinuxPerfScriptProcessNameBuilder();
    internal void SaveProcessName(StackSourceFrameIndex frameIndex, string processName, int processId);
    internal string GetProcessName(StackSourceFrameIndex frameIndex);
    private string BuildProcessName(StackSourceFrameIndex frameIndex);
}
public class Microsoft.Diagnostics.Tracing.StackSources.LinuxPerfScriptStackSource : InternStackSource {
    [CompilerGeneratedAttribute]
private double <StartTimeStampMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalBlockedTime>k__BackingField;
    internal GrowableArray`1<LinuxPerfScriptStackSourceSample> m_LinuxPerfScriptSamples;
    protected LinuxPerfScriptEventParser parser;
    protected FastStream masterSource;
    protected bool doThreadTime;
    protected int BufferSize;
    internal LinuxPerfScriptProcessNameBuilder processNameBuilder;
    private Nullable`1<double> SampleEndTime;
    private StackSourceCallStackIndex currentStackIndex;
    public double StartTimeStampMSec { get; public set; }
    public double TotalBlockedTime { get; public set; }
    public LinuxPerfScriptStackSource(string path, bool doThreadTime);
    [CompilerGeneratedAttribute]
public double get_StartTimeStampMSec();
    [CompilerGeneratedAttribute]
public void set_StartTimeStampMSec(double value);
    [CompilerGeneratedAttribute]
public double get_TotalBlockedTime();
    [CompilerGeneratedAttribute]
public void set_TotalBlockedTime(double value);
    public LinuxPerfScriptStackSourceSample GetLinuxPerfScriptSampleByIndex(StackSourceSampleIndex sampleIndex);
    public LinuxPerfScriptStackSourceSample CreateSampleFor(LinuxEvent linuxEvent, BlockedTimeAnalyzer blockedTimeAnalyzer);
    public void AddSamples(IEnumerable`1<LinuxPerfScriptStackSourceSample> _samples);
    public void AddSample(LinuxPerfScriptStackSourceSample sample);
    protected virtual void DoInterning();
    protected virtual StackSourceCallStackIndex InternCallerStack(StackSourceFrameIndex frameIndex, StackSourceCallStackIndex stackIndex);
    protected virtual StackSourceFrameIndex InternFrame(string displayName);
    private void InternAllLinuxEvents(Stream stream);
    private StackSourceCallStackIndex InternFrames(IEnumerator`1<Frame> frameIterator, StackSourceCallStackIndex stackIndex, int processID, Nullable`1<int> threadid, BlockedTimeAnalyzer blockedTimeAnalyzer);
    private Stream GetPerfScriptStream(string path, ZipArchive& archive);
    [CompilerGeneratedAttribute]
private string <.ctor>b__0_0(StackSourceFrameIndex frameIndex, bool fullModule);
}
public enum Microsoft.Diagnostics.Tracing.StackSources.LinuxThreadState : Enum {
    public int value__;
    public static LinuxThreadState BLOCKED_TIME;
    public static LinuxThreadState CPU_TIME;
}
internal class Microsoft.Diagnostics.Tracing.StackSources.Map : ValueType {
    [CompilerGeneratedAttribute]
private Interval <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MapTo>k__BackingField;
    public Interval Interval { get; }
    public string MapTo { get; }
    public Map(Interval interval, string mapTo);
    [CompilerGeneratedAttribute]
public Interval get_Interval();
    [CompilerGeneratedAttribute]
public string get_MapTo();
}
public class Microsoft.Diagnostics.Tracing.StackSources.Mapper : object {
    private List`1<Map> maps;
    public void DoneMapping();
    public void Add(ulong start, ulong size, string symbol);
    public bool TryFindSymbol(ulong location, String& symbol, UInt64& startLocation);
}
public class Microsoft.Diagnostics.Tracing.StackSources.ParallelLinuxPerfScriptStackSource : LinuxPerfScriptStackSource {
    private static string TruncateString;
    private ConcurrentDictionary`2<string, StackSourceFrameIndex> frames;
    private object internFrameLock;
    private object internCallStackLock;
    private object bufferLock;
    private static int bufferDivider;
    private static int MaxThreadCount;
    public ParallelLinuxPerfScriptStackSource(string path, bool doThreadTime);
    protected virtual void DoInterning();
    protected virtual StackSourceFrameIndex InternFrame(string displayName);
    protected virtual StackSourceCallStackIndex InternCallerStack(StackSourceFrameIndex frameIndex, StackSourceCallStackIndex stackIndex);
    private FastStream GetNextSubStream(FastStream source);
    private bool TryGetCompleteBuffer(FastStream source, UInt32 startLook, double portion, int maxLength, UInt32& length);
    private void FindValidStartOn(FastStream source);
    private void FixBlockedTimes(List`1<BlockedTimeAnalyzer> analyzers);
}
public class Microsoft.Diagnostics.Tracing.StackSources.ProcessFrame : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    public FrameKind Kind { get; }
    public string DisplayName { get; }
    public string Name { get; }
    public int ID { get; }
    public ProcessFrame(int id, string name);
    public sealed virtual FrameKind get_Kind();
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_ID();
}
public class Microsoft.Diagnostics.Tracing.StackSources.SchedulerEvent : LinuxEvent {
    public static string Name;
    [CompilerGeneratedAttribute]
private ScheduleSwitch <Switch>k__BackingField;
    public ScheduleSwitch Switch { get; }
    public SchedulerEvent(string comm, int tid, int pid, double time, int timeProp, int cpu, string eventName, string eventProp, IEnumerable`1<Frame> callerStacks, ScheduleSwitch schedSwitch);
    private static SchedulerEvent();
    [CompilerGeneratedAttribute]
public ScheduleSwitch get_Switch();
}
public class Microsoft.Diagnostics.Tracing.StackSources.ScheduleSwitch : object {
    [CompilerGeneratedAttribute]
private string <PreviousCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreviousPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PreviousState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NextThreadID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NextPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreviousThreadID>k__BackingField;
    public string PreviousCommand { get; }
    public int PreviousPriority { get; }
    public char PreviousState { get; }
    public string NextCommand { get; }
    public int NextThreadID { get; }
    public int NextPriority { get; }
    public int PreviousThreadID { get; }
    public ScheduleSwitch(string prevComm, int prevTid, int prevPrio, char prevState, string nextComm, int nextTid, int nextPrio);
    [CompilerGeneratedAttribute]
public string get_PreviousCommand();
    [CompilerGeneratedAttribute]
public int get_PreviousPriority();
    [CompilerGeneratedAttribute]
public char get_PreviousState();
    [CompilerGeneratedAttribute]
public string get_NextCommand();
    [CompilerGeneratedAttribute]
public int get_NextThreadID();
    [CompilerGeneratedAttribute]
public int get_NextPriority();
    [CompilerGeneratedAttribute]
public int get_PreviousThreadID();
}
public class Microsoft.Diagnostics.Tracing.StackSources.StackFrame : ValueType {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private OptimizationTier <OptimizationTier>k__BackingField;
    public FrameKind Kind { get; }
    public string DisplayName { get; }
    public string Address { get; }
    public string Module { get; }
    public string Symbol { get; }
    public OptimizationTier OptimizationTier { get; }
    public StackFrame(string address, string module, string symbol);
    public StackFrame(string address, string module, string symbol, OptimizationTier optimizationTier);
    public sealed virtual FrameKind get_Kind();
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public OptimizationTier get_OptimizationTier();
}
internal class Microsoft.Diagnostics.Tracing.StackSources.StraceRecord : object {
    [CompilerGeneratedAttribute]
private string <SyscallName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArgumentPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnCode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TimeStampRelativeMs>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LatencyInMilliseconds>k__BackingField;
    public string SyscallName { get; public set; }
    public string ArgumentPayload { get; public set; }
    public string ReturnCode { get; public set; }
    public double TimeStampRelativeMs { get; public set; }
    public double LatencyInMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SyscallName();
    [CompilerGeneratedAttribute]
public void set_SyscallName(string value);
    [CompilerGeneratedAttribute]
public string get_ArgumentPayload();
    [CompilerGeneratedAttribute]
public void set_ArgumentPayload(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnCode();
    [CompilerGeneratedAttribute]
public void set_ReturnCode(string value);
    [CompilerGeneratedAttribute]
public double get_TimeStampRelativeMs();
    [CompilerGeneratedAttribute]
public void set_TimeStampRelativeMs(double value);
    [CompilerGeneratedAttribute]
public double get_LatencyInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_LatencyInMilliseconds(double value);
}
internal abstract class Microsoft.Diagnostics.Tracing.StackSources.StraceRecordHandler : object {
    [CompilerGeneratedAttribute]
private StraceStackSource <StackSource>k__BackingField;
    protected StraceStackSource StackSource { get; private set; }
    public StraceRecordHandler(StraceStackSource stackSource);
    [CompilerGeneratedAttribute]
protected StraceStackSource get_StackSource();
    [CompilerGeneratedAttribute]
private void set_StackSource(StraceStackSource value);
    public abstract virtual void Execute(StraceRecord record);
}
internal class Microsoft.Diagnostics.Tracing.StackSources.StraceRecordHandlerFactory : object {
    private DefaultHandler _defaultHandler;
    private IOHandler _ioHandler;
    private HashSet`1<string> _syscallNames;
    public StraceRecordHandlerFactory(StraceStackSource stackSource);
    public StraceRecordHandler GetHandler(StraceRecord record);
}
public class Microsoft.Diagnostics.Tracing.StackSources.StraceStackSource : InternStackSource {
    private static char LatencyStartChar;
    private static char LatencyEndChar;
    private static char ArgumentsStartChar;
    private static char ArgumentsEndChar;
    private static char ReturnCodePrefixChar;
    private double _currentTimeStampInMs;
    private StraceRecord _currentRecord;
    private StraceRecordHandlerFactory _handlerFactory;
    public StraceStackSource(string path);
    private void ProcessStream(StreamReader reader);
    private bool ContainsEndOfRecord(string line);
    private void ProcessRecord(StringBuilder recordBuilder);
    private void DispatchRecord(StraceRecord record);
}
public class Microsoft.Diagnostics.Tracing.StackSources.ThreadExit : object {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string Command { get; }
    public int ThreadID { get; }
    public int Priority { get; }
    public ThreadExit(string comm, int tid, int prio);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public int get_ThreadID();
    [CompilerGeneratedAttribute]
public int get_Priority();
}
public class Microsoft.Diagnostics.Tracing.StackSources.ThreadExitEvent : LinuxEvent {
    public static string Name;
    [CompilerGeneratedAttribute]
private ThreadExit <Exit>k__BackingField;
    public ThreadExit Exit { get; }
    public ThreadExitEvent(string comm, int tid, int pid, double time, int timeProp, int cpu, string eventName, string eventProp, IEnumerable`1<Frame> callerStacks, ThreadExit exit);
    private static ThreadExitEvent();
    [CompilerGeneratedAttribute]
public ThreadExit get_Exit();
}
public class Microsoft.Diagnostics.Tracing.StackSources.ThreadFrame : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    public FrameKind Kind { get; }
    public string DisplayName { get; }
    public string Name { get; }
    public int ID { get; }
    public ThreadFrame(int id, string name);
    public sealed virtual FrameKind get_Kind();
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_ID();
}
public class Microsoft.Diagnostics.Tracing.StackSources.ThreadPeriod : object {
    [CompilerGeneratedAttribute]
private int <ThreadID>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndTime>k__BackingField;
    public int ThreadID { get; }
    public double StartTime { get; }
    public double EndTime { get; }
    public double Period { get; }
    internal ThreadPeriod(int threadId, double startTime, double endTime);
    [CompilerGeneratedAttribute]
public int get_ThreadID();
    [CompilerGeneratedAttribute]
public double get_StartTime();
    [CompilerGeneratedAttribute]
public double get_EndTime();
    public double get_Period();
}
public class Microsoft.Diagnostics.Tracing.StartStopActivity : object {
    [CompilerGeneratedAttribute]
private StartStopActivityIndex <Index>k__BackingField;
    private string _knownType;
    [CompilerGeneratedAttribute]
private string <ExtraInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ActivityID>k__BackingField;
    [CompilerGeneratedAttribute]
private StartStopActivity <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private EventIndex <StartEventIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private EventIndex <StopEventIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartTimeRelativeMSec>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DurationMSec>k__BackingField;
    internal ActivityIndex activityIndex;
    internal bool killIfChildDies;
    internal Guid unfixedActivityID;
    public StartStopActivityIndex Index { get; private set; }
    public string Name { get; }
    public string KnownType { get; }
    public string ExtraInfo { get; private set; }
    public string TaskName { get; private set; }
    public int ProcessID { get; private set; }
    public Guid ActivityID { get; private set; }
    public string ActivityPathString { get; }
    public StartStopActivity Creator { get; private set; }
    public EventIndex StartEventIndex { get; private set; }
    public EventIndex StopEventIndex { get; private set; }
    public double StartTimeRelativeMSec { get; private set; }
    public double DurationMSec { get; private set; }
    public bool IsStopped { get; }
    internal StartStopActivity(TraceEvent startEvent, string taskName, Guid& activityID, StartStopActivity creator, int index, string extraInfo);
    [CompilerGeneratedAttribute]
public StartStopActivityIndex get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(StartStopActivityIndex value);
    public string get_Name();
    private static StringBuilder AppendActivityPath(StringBuilder sb, Guid guid, int processId);
    public string get_KnownType();
    [CompilerGeneratedAttribute]
public string get_ExtraInfo();
    [CompilerGeneratedAttribute]
private void set_ExtraInfo(string value);
    [CompilerGeneratedAttribute]
public string get_TaskName();
    [CompilerGeneratedAttribute]
private void set_TaskName(string value);
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    [CompilerGeneratedAttribute]
private void set_ProcessID(int value);
    [CompilerGeneratedAttribute]
public Guid get_ActivityID();
    [CompilerGeneratedAttribute]
private void set_ActivityID(Guid value);
    public string get_ActivityPathString();
    [CompilerGeneratedAttribute]
public StartStopActivity get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(StartStopActivity value);
    [CompilerGeneratedAttribute]
public EventIndex get_StartEventIndex();
    [CompilerGeneratedAttribute]
private void set_StartEventIndex(EventIndex value);
    [CompilerGeneratedAttribute]
public EventIndex get_StopEventIndex();
    [CompilerGeneratedAttribute]
private void set_StopEventIndex(EventIndex value);
    [CompilerGeneratedAttribute]
public double get_StartTimeRelativeMSec();
    [CompilerGeneratedAttribute]
private void set_StartTimeRelativeMSec(double value);
    [CompilerGeneratedAttribute]
public double get_DurationMSec();
    [CompilerGeneratedAttribute]
private void set_DurationMSec(double value);
    public bool get_IsStopped();
    public StackSourceCallStackIndex GetActivityStack(MutableTraceEventStackSource outputStackSource, StackSourceCallStackIndex rootStack);
    public virtual string ToString();
    internal void RememberStop(EventIndex stopEventIndex, double stopTimeRelativeMSec, ActivityIndex activityIndex);
}
public class Microsoft.Diagnostics.Tracing.StartStopActivityComputer : object {
    public Action`2<StartStopActivity, TraceEvent> Start;
    public Action`2<StartStopActivity, TraceEvent> Stop;
    private static Guid MicrosoftWindowsASPNetProvider;
    private static Guid MicrosoftWindowsIISProvider;
    private static Guid AdoNetProvider;
    private static Guid MicrosoftWindowsHttpService;
    private static Guid MicrosoftDiagnosticsDiagnosticSourceProvider;
    private static Guid MicrosoftApplicationInsightsDataProvider;
    private static Guid MicrosoftDiagnosticsActivityTrackingProvider;
    private static Guid GUID_ONE;
    private TraceLogEventSource m_source;
    private ActivityComputer m_taskComputer;
    private GrowableArray`1<StartStopActivity> m_traceActivityToStartStopActivity;
    private Dictionary`2<Guid, StartStopActivity> m_activeStartStopActivities;
    private int m_nextIndex;
    private StartStopActivity m_deferredStop;
    private bool m_ignoreApplicationInsightsRequestsWithRelatedActivityId;
    public StartStopActivityComputer(TraceLogEventSource source, ActivityComputer taskComputer, bool ignoreApplicationInsightsRequestsWithRelatedActivityId);
    private static StartStopActivityComputer();
    public StartStopActivity GetCurrentStartStopActivity(TraceThread thread, TraceEvent context);
    public StartStopActivity GetStartStopActivityForActivity(TraceActivity curActivity);
    public StackSourceCallStackIndex GetCurrentStartStopActivityStack(MutableTraceEventStackSource outputStackSource, TraceThread curThread, TraceThread topThread, bool getAtCreationTime);
    public StackSourceCallStackIndex GetStartStopActivityStack(MutableTraceEventStackSource outputStackSource, StartStopActivity curActivity, TraceProcess process);
    public static bool IsActivityPath(Guid guid, int processID);
    public static int ActivityPathProcessID(Guid guid);
    public static string ActivityPathString(Guid guid, int processId);
    internal static string CreateActivityPathString(Guid guid);
    private StartStopActivity OnStart(TraceEvent data, string extraStartInfo, Guid* activityId, TraceThread thread, StartStopActivity creator, string taskName, bool useCurrentActivityForCreatorAsFallback);
    private void SetThreadToStartStopActivity(TraceEvent data);
    private void SetThreadToStartStopActivity(TraceEvent data, Guid activityId);
    private void OnStop(TraceEvent data, Guid* activityID);
    private void DoStopIfNecessary();
    private void FixAndProcessAdoNetEvents(TraceEvent data);
    private bool TryProcessDiagnosticSourceStartEvents(TraceEvent data);
    private void FixAndProcessAppInsightsEvents(TraceEvent data);
    private void ProcessActivityTrackingProviderEvents(TraceEvent data);
    private static bool IsTrivialActivityId(Guid g);
    private void FixAndProcessFrameworkEvents(TraceEvent data);
    private void FixAndProcessWindowsASP(TraceEvent data, KeyValuePair`2[] threadToLastAspNetGuids);
    private StartStopActivity GetActiveStartStopActivityTable(Guid activityID, int processID);
    private void SetActiveStartStopActivityTable(Guid activityID, int processID, StartStopActivity newValue);
    private void RemoveActiveStartStopActivityTable(Guid activityID, int processID);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(TraceActivity activity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_2(ExceptionHandlingTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_3(EmptyTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_4(AspNetStartTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_5(AspNetStopTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_6(AspNetStartHandlerTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_7(AspNetPipelineModuleEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_8(AspNetGetAppDomainEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_9(AspNetRoleManagerBeginTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_10(AspNetRoleManagerGetUserRolesTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_11(AspNetRoleManagerEndTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_12(AspNetMapHandlerEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_13(AspNetMapHandlerLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_14(AspNetHttpHandlerEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_15(AspNetHttpHandlerLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_16(AspNetPagePreInitEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_17(AspNetPagePreInitLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_18(AspNetPageInitEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_19(AspNetPageInitLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_20(AspNetPageLoadEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_21(AspNetPageLoadLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_22(AspNetPagePreRenderEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_23(AspNetPagePreRenderLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_24(AspNetPageSaveViewstateEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_25(AspNetPageSaveViewstateLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_26(AspNetPageRenderEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_27(AspNetPageRenderLeaveTraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_28(Multidata69TemplateATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_29(OneStringsTemplateATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_30(Multidata29TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_31(Multidata38TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_32(Multidata38TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_33(Multidata24TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_34(Multidata28TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_35(Multidata22TemplateHATraceData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_36(Multidata22TemplateHATraceData data);
}
public enum Microsoft.Diagnostics.Tracing.StartStopActivityIndex : Enum {
    public int value__;
    public static StartStopActivityIndex Illegal;
}
public class Microsoft.Diagnostics.Tracing.StringTraceData : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<StringTraceData> Action;
    private bool isUnicode;
    public string Value { get; }
    public String[] PayloadNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    public StringTraceData(Action`1<StringTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName, bool isUnicode);
    public string get_Value();
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
private void add_Action(Action`1<StringTraceData> value);
    [CompilerGeneratedAttribute]
private void remove_Action(Action`1<StringTraceData> value);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
}
public class Microsoft.Diagnostics.Tracing.TcpIpComputer : object {
    private TraceEventDispatcher m_source;
    public TcpIpComputer(TraceEventDispatcher source);
}
[ObsoleteAttribute("This is not obsolete but experimental, its interface is likely to change")]
public class Microsoft.Diagnostics.Tracing.ThreadTimeStackComputer : object {
    public bool UseTasks;
    public bool IncludeEventSourceEvents;
    [ObsoleteAttribute("Use Thread Time instead")]
public bool BlockedTimeOnly;
    public bool ExcludeReadyThread;
    public bool GroupByAspNetRequest;
    public float MiniumReadiedTimeMSec;
    public bool GroupByStartStopActivity;
    [CompilerGeneratedAttribute]
private bool <IgnoreApplicationInsightsRequestsWithRelatedActivityId>k__BackingField;
    public bool NoAwaitTime;
    private NetworkInfo[] m_lastPacketForProcess;
    private Dictionary`2<Guid, AspNetRequestInfo> m_aspNetRequestInfo;
    private StartStopActivityComputer m_startStopActivities;
    private GrowableArray`1<double> m_unknownTimeStartMsec;
    private StartStopActivity[] m_threadToStartStopActivity;
    private GrowableArray`1<List`1<StackSourceSample>> m_startStopActivityToAsyncUnknownSamples;
    private ThreadState[] m_threadState;
    private Dictionary`2<ulong, TraceThread> m_IRPToThread;
    private Int32[] m_threadIDUsingProc;
    private int m_numIdleProcs;
    private bool m_traceHasCSwitches;
    private StackSourceSample m_sample;
    private MutableTraceEventStackSource m_outputStackSource;
    private TraceLog m_eventLog;
    private SymbolReader m_symbolReader;
    private Dictionary`2<double, StackSourceFrameIndex> m_nodeNameInternTable;
    private StackSourceFrameIndex m_diskFrameIndex;
    private StackSourceFrameIndex m_hardFaultFrameIndex;
    private StackSourceFrameIndex m_blockedFrameIndex;
    private StackSourceFrameIndex m_cpuFrameIndex;
    private StackSourceFrameIndex m_networkFrameIndex;
    private StackSourceFrameIndex m_readyFrameIndex;
    private GrowableArray`1<Guid> m_activityToASPRequestGuid;
    private ActivityComputer m_activityComputer;
    public bool IgnoreApplicationInsightsRequestsWithRelatedActivityId { get; public set; }
    public ThreadTimeStackComputer(TraceLog eventLog, SymbolReader symbolReader);
    [CompilerGeneratedAttribute]
public bool get_IgnoreApplicationInsightsRequestsWithRelatedActivityId();
    [CompilerGeneratedAttribute]
public void set_IgnoreApplicationInsightsRequestsWithRelatedActivityId(bool value);
    public void GenerateThreadTimeStacks(MutableTraceEventStackSource outputStackSource, TraceEvents traceEvents);
    private void Clr_GCAllocationTick(GCAllocationTickTraceData obj);
    private void UpdateStartStopActivityOnAwaitComplete(TraceActivity activity, TraceEvent data);
    private void UpdateThreadToWorkOnStartStopActivity(TraceThread thread, StartStopActivity newStartStop, TraceEvent data);
    private void AddUnkownAsyncDurationIfNeeded(StartStopActivity startStopActivity, double unknownStartTimeMSec, TraceEvent data);
    private void OnThreadCSwitch(CSwitchTraceData data);
    private void OnSampledProfile(TraceEvent data);
    private void OnTaskUnblock(TraceEvent data);
    private void OnThreadStart(ThreadTraceData data);
    private void OnThreadEnd(ThreadTraceData data);
    private void OnReadyThread(DispatcherReadyThreadTraceData data);
    private void OnDiskIO(DiskIOTraceData data);
    private void OnDiskIOInit(DiskIOInitTraceData data);
    private void OnHardFault(MemoryHardFaultTraceData data);
    private void OnTcIpRecv(TcpIpTraceData data);
    private StackSourceCallStackIndex GetCallStack(TraceEvent data, TraceThread thread);
    private Func`2<TraceThread, StackSourceCallStackIndex> GetTopFramesForActivityComputerCase(TraceEvent data, TraceThread thread, bool getAtCreationTime);
    private Guid GetAspNetGuid(TraceActivity activity);
    private StackSourceCallStackIndex GetAspNetFromProcessFrameThroughThreadFrameStack(Guid aspNetRequestGuid, TraceEvent data, TraceThread thread);
    private void TransferAspNetRequestToThread(Guid aspNetGuid, ThreadIndex newThreadIndex, string url);
    private static StackSourceCallStackIndex GenerateReadyThreadNodes(MutableTraceEventStackSource stackSource, StackSourceCallStackIndex stackIndex, CallStackIndex readyThreadCallStack, double msecWaitingForCpu, int idleCPUs);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_3(TraceActivity activity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_0(TraceActivity activity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_1(TraceActivity activity, TraceEvent data, TraceThread thread);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_4(StartStopActivity startStopActivity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_5(StartStopActivity startStopActivity, TraceEvent data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_6(AspNetStartTraceData data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_7(AspNetStopTraceData data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_8(AspNetStartHandlerTraceData data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_9(AspNetPipelineModuleEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_10(AspNetGetAppDomainEnterTraceData data);
    [CompilerGeneratedAttribute]
private void <GenerateThreadTimeStacks>b__13_2(TraceEvent data);
}
public abstract class Microsoft.Diagnostics.Tracing.TraceEvent : DynamicObject {
    public object EventTypeUserData;
    internal bool NeedsFixup;
    internal int ParentThread;
    internal EVENT_RECORD* eventRecord;
    internal IntPtr userData;
    internal TraceEvent next;
    internal bool lookupAsClassic;
    internal bool lookupAsWPP;
    internal bool containsSelfDescribingMetadata;
    internal TraceEventID eventID;
    internal TraceEventOpcode opcode;
    internal string opcodeName;
    internal TraceEventTask task;
    internal string taskName;
    internal Guid taskGuid;
    internal Guid providerGuid;
    internal string providerName;
    internal bool eventNameIsJustTaskName;
    internal string eventName;
    protected internal String[] payloadNames;
    internal TraceEventSource traceEventSource;
    internal EventIndex eventIndex;
    internal IntPtr myBuffer;
    internal string instanceContainerID;
    public Guid ProviderGuid { get; }
    public Guid TaskGuid { get; }
    public string ProviderName { get; }
    public string EventName { get; }
    public TraceEventID ID { get; }
    public TraceEventTask Task { get; }
    public string TaskName { get; }
    public TraceEventOpcode Opcode { get; }
    public string OpcodeName { get; }
    public TraceEventLevel Level { get; }
    public int Version { get; }
    public TraceEventKeyword Keywords { get; }
    public TraceEventChannel Channel { get; }
    public DateTime TimeStamp { get; }
    public double TimeStampRelativeMSec { get; }
    public int ThreadID { get; }
    public int ProcessID { get; }
    public string ProcessName { get; }
    public int ProcessorNumber { get; }
    public int PointerSize { get; }
    public Guid ActivityID { get; }
    public Guid RelatedActivityID { get; }
    public string FormattedMessage { get; }
    public EventIndex EventIndex { get; }
    public TraceEventSource Source { get; }
    public bool IsClassicProvider { get; }
    public string ContainerID { get; }
    public String[] PayloadNames { get; }
    public int EventDataLength { get; }
    public IntPtr DataStart { get; }
    protected internal Delegate Target { get; protected internal set; }
    [ObsoleteAttribute("Not Obsolete but Discouraged.  Please use TimeStampRelativeMSec.")]
[EditorBrowsableAttribute("1")]
public long TimeStampQPC { get; }
    internal bool IsEventWriteString { get; }
    protected TraceEvent(int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName);
    public Guid get_ProviderGuid();
    public Guid get_TaskGuid();
    public string get_ProviderName();
    public string get_EventName();
    public TraceEventID get_ID();
    public TraceEventTask get_Task();
    public string get_TaskName();
    public TraceEventOpcode get_Opcode();
    public string get_OpcodeName();
    public TraceEventLevel get_Level();
    public int get_Version();
    public TraceEventKeyword get_Keywords();
    public TraceEventChannel get_Channel();
    public DateTime get_TimeStamp();
    public double get_TimeStampRelativeMSec();
    public int get_ThreadID();
    public virtual int get_ProcessID();
    public string get_ProcessName();
    public int get_ProcessorNumber();
    public int get_PointerSize();
    public Guid get_ActivityID();
    public Guid get_RelatedActivityID();
    public virtual string get_FormattedMessage();
    public virtual string GetFormattedMessage(IFormatProvider formatProvider);
    public EventIndex get_EventIndex();
    public TraceEventSource get_Source();
    public bool get_IsClassicProvider();
    public string get_ContainerID();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public abstract virtual String[] get_PayloadNames();
    public abstract virtual object PayloadValue(int index);
    public virtual string PayloadString(int index, IFormatProvider formatProvider);
    public int PayloadIndex(string propertyName);
    public object PayloadByName(string propertyName);
    public string PayloadStringByName(string propertyName, IFormatProvider formatProvider);
    public int get_EventDataLength();
    public Byte[] EventData();
    public Byte[] EventData(Byte[] targetBuffer, int targetStartIndex, int sourceStartIndex, int length);
    public virtual TraceEvent Clone();
    public virtual string ToString();
    public virtual string ToString(IFormatProvider formatProvider);
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual StringBuilder ToXml(StringBuilder sb, IFormatProvider formatProvider);
    public string Dump(bool includePrettyPrint, bool truncateDump);
    public IntPtr get_DataStart();
    protected internal int SkipUTF8String(int offset);
    protected internal int SkipUnicodeString(int offset);
    protected internal int SkipUnicodeString(int offset, int stringCount);
    internal int SkipSID(int offset);
    protected internal int HostOffset(int offset, int numPointers);
    internal int HostSizePtr(int numPointers);
    protected internal string GetUTF8StringAt(int offset);
    internal string GetFixedAnsiStringAt(int charCount, int offset);
    internal string GetFixedUnicodeStringAt(int charCount, int offset);
    internal IPAddress GetIPAddrV6At(int offset);
    protected internal Guid GetGuidAt(int offset);
    protected internal DateTime GetDateTimeAt(int offset);
    protected internal string GetUnicodeStringAt(int offset);
    protected internal Byte[] GetByteArrayAt(int offset, int size);
    protected internal int GetByteAt(int offset);
    protected internal int GetInt16At(int offset);
    protected internal int GetInt32At(int offset);
    protected internal long GetInt64At(int offset);
    protected internal long GetIntPtrAt(int offset);
    protected internal ulong GetAddressAt(int offset);
    protected internal float GetSingleAt(int offset);
    protected internal double GetDoubleAt(int offset);
    protected internal static StringBuilder XmlAttrib(StringBuilder sb, string attribName, string value);
    protected internal static StringBuilder XmlAttrib(StringBuilder sb, string attribName, int value);
    protected internal static StringBuilder XmlAttrib(StringBuilder sb, string attribName, long value);
    protected internal static StringBuilder XmlAttribHex(StringBuilder sb, string attribName, ulong value);
    protected internal static StringBuilder XmlAttribHex(StringBuilder sb, string attribName, long value);
    protected internal static StringBuilder XmlAttribHex(StringBuilder sb, string attribName, UInt32 value);
    protected internal static StringBuilder XmlAttribHex(StringBuilder sb, string attribName, int value);
    protected internal static StringBuilder XmlAttrib(StringBuilder sb, string attribName, object value);
    private static StringBuilder XmlAttribPrefix(StringBuilder sb, string attribName);
    protected internal StringBuilder Prefix(StringBuilder sb);
    internal virtual void FixupData();
    internal int ThreadIDforStacks();
    protected internal abstract virtual Delegate get_Target();
    protected internal abstract virtual void set_Target(Delegate value);
    protected internal virtual void SetState(object state);
    private static char HexDigit(int digit);
    public long get_TimeStampQPC();
    internal virtual bool LogCodeAddresses(Func`3<TraceEvent, ulong, bool> callBack);
    internal bool get_IsEventWriteString();
    internal static int Compare(EventIndex id1, EventIndex id2);
    internal bool Matches(TraceEvent other);
    protected virtual override void Finalize();
    internal static string DumpArray(Byte[] bytes, int size);
    internal static void DumpBytes(Byte[] bytes, int length, TextWriter output, string indent, int startTruncate);
    internal static void CopyBlob(IntPtr source, IntPtr destination, int byteCount);
    internal static void QuotePadLeft(StringBuilder sb, string str, int totalSize);
    private static string ToString(TraceEventOpcode opcode);
    internal string EventDataAsString();
    protected internal virtual void Dispatch();
    protected internal virtual void Validate();
    [ConditionalAttribute("DEBUG")]
protected internal void DebugValidate();
}
public enum Microsoft.Diagnostics.Tracing.TraceEventChannel : Enum {
    public byte value__;
    public static TraceEventChannel Default;
}
public abstract class Microsoft.Diagnostics.Tracing.TraceEventDispatcher : TraceEventSource {
    [CompilerGeneratedAttribute]
private Action`1<TraceEvent> AllEvents;
    [CompilerGeneratedAttribute]
private Action Completed;
    private TemplateEntry* templatesInfo;
    private TraceEvent[] templates;
    private Dictionary`2<Guid, NamesEntry> guidToNames;
    private int templatesLengthMask;
    private int numTemplates;
    internal UnhandledTraceEvent unhandledEventTemplate;
    internal bool stopProcessing;
    internal EventIndex currentID;
    private Func`2[] lastChanceHandlers;
    private Action`1<TraceEvent> userDefinedDispatch;
    internal bool AllEventsHasCallback { get; }
    internal IEnumerable`1<TraceEvent> Templates { get; }
    public static TraceEventDispatcher GetDispatcherFromFileName(string traceFileName, TraceEventDispatcherOptions options);
    public void add_UnhandledEvents(Action`1<TraceEvent> value);
    public void remove_UnhandledEvents(Action`1<TraceEvent> value);
    [CompilerGeneratedAttribute]
public void add_AllEvents(Action`1<TraceEvent> value);
    [CompilerGeneratedAttribute]
public void remove_AllEvents(Action`1<TraceEvent> value);
    public void add_UnhandledEvent(Action`1<TraceEvent> value);
    public void remove_UnhandledEvent(Action`1<TraceEvent> value);
    public void add_EveryEvent(Action`1<TraceEvent> value);
    public void remove_EveryEvent(Action`1<TraceEvent> value);
    public abstract virtual bool Process();
    public virtual void StopProcessing();
    [CompilerGeneratedAttribute]
public void add_Completed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Completed(Action value);
    public void AddDispatchHook(Action`2<TraceEvent, Action`1<TraceEvent>> hook);
    protected void OnCompleted();
    internal bool get_AllEventsHasCallback();
    internal int DistinctCallbackCount();
    internal int CallbackCount();
    internal string DumpHash();
    internal int TemplateLength();
    internal virtual void RegisterUnhandledEventImpl(Func`2<TraceEvent, bool> callback);
    protected internal void Dispatch(TraceEvent anEvent);
    private void DoDispatch(TraceEvent anEvent);
    internal TraceEvent Lookup(EVENT_RECORD* eventRecord);
    internal TraceEvent LookupTemplate(Guid guid, TraceEventID eventID_);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void ReHash();
    private void Insert(TraceEvent template);
    private static Guid GenTaskGuidFromProviderGuid(Guid providerGuid, ushort taskNumber);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.TraceEventDispatcher/<get_Templates>d__46")]
internal IEnumerable`1<TraceEvent> get_Templates();
    internal virtual void RegisterEventTemplateImpl(TraceEvent template);
    internal virtual void UnregisterEventTemplateImpl(Delegate action, Guid providerGuid, int eventID);
    internal virtual void RegisterParserImpl(TraceEventParser parser);
    internal virtual string TaskNameForGuidImpl(Guid guid);
    internal virtual string ProviderNameForGuidImpl(Guid taskOrProviderName);
    private void LookupGuid(Guid guid, NamesEntry& ret);
}
public class Microsoft.Diagnostics.Tracing.TraceEventDispatcherOptions : object {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTime value);
}
public enum Microsoft.Diagnostics.Tracing.TraceEventID : Enum {
    public ushort value__;
    public static TraceEventID Illegal;
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.Tracing.TraceEventKeyword : Enum {
    public long value__;
    public static TraceEventKeyword None;
    public static TraceEventKeyword All;
}
public enum Microsoft.Diagnostics.Tracing.TraceEventLevel : Enum {
    public int value__;
    public static TraceEventLevel Always;
    public static TraceEventLevel Critical;
    public static TraceEventLevel Error;
    public static TraceEventLevel Warning;
    public static TraceEventLevel Informational;
    public static TraceEventLevel Verbose;
}
internal static class Microsoft.Diagnostics.Tracing.TraceEventNativeMethods : object {
    internal static ulong INVALID_HANDLE_VALUE;
    internal static UInt32 EVENT_TRACE_REAL_TIME_MODE;
    internal static UInt32 PROCESS_TRACE_MODE_EVENT_RECORD;
    internal static UInt32 PROCESS_TRACE_MODE_REAL_TIME;
    internal static UInt32 PROCESS_TRACE_MODE_RAW_TIMESTAMP;
    internal static UInt32 EVENT_TRACE_FILE_MODE_NONE;
    internal static UInt32 EVENT_TRACE_FILE_MODE_SEQUENTIAL;
    internal static UInt32 EVENT_TRACE_FILE_MODE_CIRCULAR;
    internal static UInt32 EVENT_TRACE_FILE_MODE_APPEND;
    internal static UInt32 EVENT_TRACE_FILE_MODE_NEWFILE;
    internal static UInt32 EVENT_TRACE_BUFFERING_MODE;
    internal static UInt32 EVENT_TRACE_INDEPENDENT_SESSION_MODE;
    internal static UInt32 EVENT_TRACE_NO_PER_PROCESSOR_BUFFERING;
    internal static UInt32 EVENT_TRACE_CONTROL_QUERY;
    internal static UInt32 EVENT_TRACE_CONTROL_STOP;
    internal static UInt32 EVENT_TRACE_CONTROL_UPDATE;
    internal static UInt32 EVENT_TRACE_CONTROL_FLUSH;
    internal static UInt32 WNODE_FLAG_TRACED_GUID;
    internal static UInt32 EVENT_TRACE_SYSTEM_LOGGER_MODE;
    internal static ushort EVENT_HEADER_FLAG_STRING_ONLY;
    internal static ushort EVENT_HEADER_FLAG_32_BIT_HEADER;
    internal static ushort EVENT_HEADER_FLAG_64_BIT_HEADER;
    internal static ushort EVENT_HEADER_FLAG_CLASSIC_HEADER;
    internal static ushort EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID;
    internal static ushort EVENT_HEADER_EXT_TYPE_SID;
    internal static ushort EVENT_HEADER_EXT_TYPE_TS_ID;
    internal static ushort EVENT_HEADER_EXT_TYPE_INSTANCE_INFO;
    internal static ushort EVENT_HEADER_EXT_TYPE_STACK_TRACE32;
    internal static ushort EVENT_HEADER_EXT_TYPE_STACK_TRACE64;
    internal static ushort EVENT_HEADER_EXT_TYPE_PEBS_INDEX;
    internal static ushort EVENT_HEADER_EXT_TYPE_PMC_COUNTERS;
    internal static ushort EVENT_HEADER_EXT_TYPE_PSM_KEY;
    internal static ushort EVENT_HEADER_EXT_TYPE_EVENT_KEY;
    internal static ushort EVENT_HEADER_EXT_TYPE_EVENT_SCHEMA_TL;
    internal static ushort EVENT_HEADER_EXT_TYPE_PROV_TRAITS;
    internal static ushort EVENT_HEADER_EXT_TYPE_PROCESS_START_KEY;
    internal static ushort EVENT_HEADER_EXT_TYPE_CONTROL_GUID;
    internal static ushort EVENT_HEADER_EXT_TYPE_QPC_DELTA;
    internal static ushort EVENT_HEADER_EXT_TYPE_CONTAINER_ID;
    internal static ushort EVENT_HEADER_EXT_TYPE_MAX;
    internal static int MAX_EVENT_FILTERS_COUNT;
    internal static int MAX_EVENT_FILTER_PID_COUNT;
    internal static int MAX_EVENT_FILTER_EVENT_ID_COUNT;
    internal static int EVENT_FILTER_TYPE_NONE;
    internal static int EVENT_FILTER_TYPE_SCHEMATIZED;
    internal static int EVENT_FILTER_TYPE_SYSTEM_FLAGS;
    internal static int EVENT_FILTER_TYPE_TRACEHANDLE;
    internal static int EVENT_FILTER_TYPE_PID;
    internal static int EVENT_FILTER_TYPE_EXECUTABLE_NAME;
    internal static int EVENT_FILTER_TYPE_PACKAGE_ID;
    internal static int EVENT_FILTER_TYPE_PACKAGE_APP_ID;
    internal static int EVENT_FILTER_TYPE_PAYLOAD;
    internal static int EVENT_FILTER_TYPE_EVENT_ID;
    internal static int EVENT_FILTER_TYPE_STACKWALK;
    internal static UInt32 ENABLE_TRACE_PARAMETERS_VERSION;
    internal static UInt32 ENABLE_TRACE_PARAMETERS_VERSION_2;
    internal static UInt32 EVENT_ENABLE_PROPERTY_SID;
    internal static UInt32 EVENT_ENABLE_PROPERTY_TS_ID;
    internal static UInt32 EVENT_ENABLE_PROPERTY_STACK_TRACE;
    internal static UInt32 EVENT_ENABLE_PROPERTY_PSM_KEY;
    internal static UInt32 EVENT_ENABLE_PROPERTY_IGNORE_KEYWORD_0;
    internal static UInt32 EVENT_ENABLE_PROPERTY_PROVIDER_GROUP;
    internal static UInt32 EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0;
    internal static UInt32 EVENT_ENABLE_PROPERTY_PROCESS_START_KEY;
    internal static UInt32 EVENT_ENABLE_PROPERTY_EVENT_KEY;
    internal static UInt32 EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE;
    internal static UInt32 EVENT_ENABLE_PROPERTY_ENABLE_SILOS;
    internal static UInt32 EVENT_ENABLE_PROPERTY_SOURCE_CONTAINER_TRACKING;
    internal static UInt32 EVENT_CONTROL_CODE_DISABLE_PROVIDER;
    internal static UInt32 EVENT_CONTROL_CODE_ENABLE_PROVIDER;
    internal static UInt32 EVENT_CONTROL_CODE_CAPTURE_STATE;
    internal static UInt32 STANDARD_RIGHTS_REQUIRED;
    internal static UInt32 STANDARD_RIGHTS_READ;
    internal static UInt32 TOKEN_ASSIGN_PRIMARY;
    internal static UInt32 TOKEN_DUPLICATE;
    internal static UInt32 TOKEN_IMPERSONATE;
    internal static UInt32 TOKEN_QUERY;
    internal static UInt32 TOKEN_QUERY_SOURCE;
    internal static UInt32 TOKEN_ADJUST_PRIVILEGES;
    internal static UInt32 TOKEN_ADJUST_GROUPS;
    internal static UInt32 TOKEN_ADJUST_SESSIONID;
    internal static UInt32 TOKEN_READ;
    internal static UInt32 SE_PRIVILEGE_ENABLED_BY_DEFAULT;
    internal static UInt32 SE_PRIVILEGE_ENABLED;
    internal static UInt32 SE_PRIVILEGE_REMOVED;
    internal static UInt32 SE_PRIVILEGE_USED_FOR_ACCESS;
    internal static UInt32 SE_SYSTEM_PROFILE_PRIVILEGE;
    internal static UInt32 SE_DEBUG_PRIVILEGE;
    internal static int COMPRESSION_FORMAT_LZNT1;
    internal static int COMPRESSION_ENGINE_MAXIMUM;
    internal static UInt32 ERROR_WMI_INSTANCE_NOT_FOUND;
    private static TraceEventNativeMethods();
    internal static int TraceSetInformation(ulong traceHandle, TRACE_INFO_CLASS InformationClass, Void* TraceInformation, int InformationLength);
    internal static int TraceQueryInformation(ulong traceHandle, TRACE_INFO_CLASS InformationClass, Void* TraceInformation, int InformationLength, Int32& ReturnLength);
    internal static ulong OpenTrace(EVENT_TRACE_LOGFILEW& logfile);
    internal static int ProcessTrace(UInt64[] handleArray, UInt32 handleCount, IntPtr StartTime, IntPtr EndTime);
    internal static int CloseTrace(ulong traceHandle);
    internal static int QueryAllTraces(IntPtr propertyArray, int propertyArrayCount, Int32& sessionCount);
    internal static int StartTraceW(UInt64& sessionHandle, string sessionName, EVENT_TRACE_PROPERTIES* properties);
    internal static int EnableTrace(UInt32 enable, int enableFlag, int enableLevel, Guid& controlGuid, ulong sessionHandle);
    internal static int EnableTraceEx(Guid& ProviderId, Guid* SourceId, ulong TraceHandle, int IsEnabled, byte Level, ulong MatchAnyKeyword, ulong MatchAllKeyword, UInt32 EnableProperty, EVENT_FILTER_DESCRIPTOR* filterData);
    internal static int EnableTraceEx2(ulong TraceHandle, Guid& ProviderId, UInt32 ControlCode, byte Level, ulong MatchAnyKeyword, ulong MatchAllKeyword, int Timeout, ENABLE_TRACE_PARAMETERS& EnableParameters);
    internal static int ControlTrace(ulong sessionHandle, string sessionName, EVENT_TRACE_PROPERTIES* properties, UInt32 controlCode);
    private static bool OpenProcessToken(IntPtr ProcessHandle, UInt32 DesiredAccess, IntPtr& TokenHandle);
    private static bool GetTokenInformation(IntPtr TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, IntPtr TokenInformation, int TokenInformationLength, Int32& ReturnLength);
    internal static bool AdjustTokenPrivileges(IntPtr TokenHandle, bool DisableAllPrivileges, TOKEN_PRIVILEGES& NewState, UInt32 BufferLength, IntPtr NullParam, IntPtr ReturnLength);
    internal static int CloseHandle(IntPtr hHandle);
    internal static int GetHRForLastWin32Error();
    internal static void SetPrivilege(UInt32 privilege);
    internal static Nullable`1<bool> IsElevated();
    internal static int GetHRFromWin32(int dwErr);
    internal static int TdhEnumerateProviders(PROVIDER_ENUMERATION_INFO* pBuffer, Int32& pBufferSize);
    internal static int EnumerateTraceGuidsEx(TRACE_QUERY_INFO_CLASS TraceQueryInfoClass, Void* InBuffer, int InBufferSize, Void* OutBuffer, int OutBufferSize, Int32& ReturnLength);
    internal static int TdhEnumerateProviderFieldInformation(Guid& guid, EVENT_FIELD_TYPE EventFieldType, PROVIDER_FIELD_INFOARRAY* pBuffer, Int32& pBufferSize);
    internal static int RtlDecompressBuffer(int CompressionFormat, Byte* UncompressedBuffer, int UncompressedBufferSize, Byte* CompressedBuffer, int CompressedBufferSize, Int32& FinalUncompressedSize);
}
public enum Microsoft.Diagnostics.Tracing.TraceEventOpcode : Enum {
    public byte value__;
    public static TraceEventOpcode Info;
    public static TraceEventOpcode Start;
    public static TraceEventOpcode Stop;
    public static TraceEventOpcode DataCollectionStart;
    public static TraceEventOpcode DataCollectionStop;
    public static TraceEventOpcode Extension;
    public static TraceEventOpcode Reply;
    public static TraceEventOpcode Resume;
    public static TraceEventOpcode Suspend;
    public static TraceEventOpcode Transfer;
}
public abstract class Microsoft.Diagnostics.Tracing.TraceEventParser : object {
    protected internal ITraceParserServices source;
    private GrowableArray`1<SubscriptionRequest> m_subscriptionRequests;
    private string stateKey;
    public TraceEventSource Source { get; }
    public bool IsStatic { get; }
    protected internal object StateObject { get; protected internal set; }
    protected TraceEventParser(TraceEventSource source, bool dontRegister);
    public TraceEventSource get_Source();
    public virtual void add_All(Action`1<TraceEvent> value);
    public virtual void remove_All(Action`1<TraceEvent> value);
    public void AddCallbackForEvent(string eventName, Action`1<T> callback);
    public virtual void AddCallbackForEvents(Action`1<T> callback);
    public virtual void AddCallbackForEvents(Predicate`1<string> eventNameFilter, Action`1<T> callback);
    public void AddCallbackForEvents(Predicate`1<string> eventNameFilter, object subscriptionId, Action`1<T> callback);
    public void AddCallbackForProviderEvent(string providerName, string eventName, Action`1<TraceEvent> callback);
    public virtual void AddCallbackForProviderEvents(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    public virtual void AddCallbackForProviderEvents(Func`3<string, string, EventFilterResponse> eventsToObserve, object subscriptionId, Action`1<TraceEvent> callback);
    public virtual void RemoveCallback(Action`1<T> callback, object subscriptionId);
    public virtual bool get_IsStatic();
    protected abstract virtual string GetProviderName();
    protected internal object get_StateObject();
    protected internal void set_StateObject(object value);
    protected internal abstract virtual void EnumerateTemplates(Func`3<string, string, EventFilterResponse> eventsToObserve, Action`1<TraceEvent> callback);
    internal virtual EventFilterResponse OnNewEventDefintion(TraceEvent template, bool mayHaveExistedBefore);
    private void Subscribe(SubscriptionRequest cur, TraceEvent template, object templateState, bool mayHaveExistedBefore);
}
internal class Microsoft.Diagnostics.Tracing.TraceEventRawReaders : object {
    internal static IntPtr Add(IntPtr pointer, int offset);
    internal static Guid ReadGuid(IntPtr pointer, int offset);
    internal static double ReadDouble(IntPtr pointer, int offset);
    internal static float ReadSingle(IntPtr pointer, int offset);
    internal static long ReadInt64(IntPtr pointer, int offset);
    internal static int ReadInt32(IntPtr pointer, int offset);
    internal static short ReadInt16(IntPtr pointer, int offset);
    internal static IntPtr ReadIntPtr(IntPtr pointer, int offset);
    internal static byte ReadByte(IntPtr pointer, int offset);
    internal static string ReadUnicodeString(IntPtr pointer, int offset, int bufferLength);
    internal static string ReadUTF8String(IntPtr pointer, int offset, int bufferLength);
}
public abstract class Microsoft.Diagnostics.Tracing.TraceEventSource : object {
    [CompilerGeneratedAttribute]
private bool <IsRealTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DataLifetimeMsec>k__BackingField;
    internal IDictionary`2<string, object> userData;
    internal int pointerSize;
    internal int numberOfProcessors;
    internal int cpuSpeedMHz;
    internal Nullable`1<int> utcOffsetMinutes;
    internal Version osVersion;
    internal long _QPCFreq;
    internal long _syncTimeQPC;
    internal DateTime _syncTimeUTC;
    internal long sessionStartTimeQPC;
    internal long sessionEndTimeQPC;
    internal bool useClassicETW;
    internal ClrTraceEventParser _CLR;
    internal KernelTraceEventParser _Kernel;
    internal DynamicTraceEventParser _Dynamic;
    internal RegisteredTraceEventParser _Registered;
    public ClrTraceEventParser Clr { get; }
    public KernelTraceEventParser Kernel { get; }
    public DynamicTraceEventParser Dynamic { get; }
    [ObsoleteAttribute("Use Dynamic instead.   DynamicTraceEventParser decodes everything that RegisteredTraceEventParser can.")]
public RegisteredTraceEventParser Registered { get; }
    public DateTime SessionStartTime { get; }
    public DateTime SessionEndTime { get; }
    public double SessionEndTimeRelativeMSec { get; }
    public TimeSpan SessionDuration { get; }
    public long Size { get; }
    public int PointerSize { get; }
    public int EventsLost { get; }
    public int NumberOfProcessors { get; }
    public int CpuSpeedMHz { get; }
    public Version OSVersion { get; }
    public bool IsRealTime { get; protected set; }
    public double DataLifetimeMsec { get; public set; }
    public IDictionary`2<string, object> UserData { get; }
    internal long QPCFreq { get; }
    public ClrTraceEventParser get_Clr();
    public KernelTraceEventParser get_Kernel();
    public DynamicTraceEventParser get_Dynamic();
    public RegisteredTraceEventParser get_Registered();
    public DateTime get_SessionStartTime();
    public DateTime get_SessionEndTime();
    public double get_SessionEndTimeRelativeMSec();
    public TimeSpan get_SessionDuration();
    public virtual long get_Size();
    public int get_PointerSize();
    public abstract virtual int get_EventsLost();
    public int get_NumberOfProcessors();
    public int get_CpuSpeedMHz();
    public Version get_OSVersion();
    [CompilerGeneratedAttribute]
public bool get_IsRealTime();
    [CompilerGeneratedAttribute]
protected void set_IsRealTime(bool value);
    [CompilerGeneratedAttribute]
public double get_DataLifetimeMsec();
    [CompilerGeneratedAttribute]
public void set_DataLifetimeMsec(double value);
    public bool DataLifetimeEnabled();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public IDictionary`2<string, object> get_UserData();
    internal abstract virtual void RegisterEventTemplateImpl(TraceEvent template);
    internal abstract virtual void UnregisterEventTemplateImpl(Delegate action, Guid providerGuid, int eventId);
    internal abstract virtual void RegisterParserImpl(TraceEventParser parser);
    internal abstract virtual void RegisterUnhandledEventImpl(Func`2<TraceEvent, bool> callback);
    internal virtual string TaskNameForGuidImpl(Guid guid);
    internal virtual string ProviderNameForGuidImpl(Guid taskOrProviderGuid);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void Microsoft.Diagnostics.Tracing.ITraceParserServices.RegisterEventTemplate(TraceEvent template);
    private sealed virtual override void Microsoft.Diagnostics.Tracing.ITraceParserServices.UnregisterEventTemplate(Delegate action, int eventId, Guid providerGuid);
    private sealed virtual override void Microsoft.Diagnostics.Tracing.ITraceParserServices.RegisterParser(TraceEventParser parser);
    private sealed virtual override void Microsoft.Diagnostics.Tracing.ITraceParserServices.RegisterUnhandledEvent(Func`2<TraceEvent, bool> callback);
    private sealed virtual override string Microsoft.Diagnostics.Tracing.ITraceParserServices.TaskNameForGuid(Guid guid);
    private sealed virtual override string Microsoft.Diagnostics.Tracing.ITraceParserServices.ProviderNameForGuid(Guid taskOrProviderGuid);
    internal void CopyFrom(TraceEventSource source);
    internal long get_QPCFreq();
    internal double QPCTimeToRelMSec(long QPCTime);
    internal long RelativeMSecToQPC(double relativeMSec);
    internal long UTCDateTimeToQPC(DateTime time);
    internal DateTime QPCTimeToDateTimeUTC(long QPCTime);
    internal virtual string ProcessName(int processID, long timeQPC);
    internal virtual int LastChanceGetThreadID(TraceEvent data);
    internal virtual int LastChanceGetProcessID(TraceEvent data);
    internal virtual Guid GetRelatedActivityID(EVENT_RECORD* eventRecord);
    internal virtual string GetContainerID(EVENT_RECORD* eventRecord);
}
public enum Microsoft.Diagnostics.Tracing.TraceEventSourceType : Enum {
    public int value__;
    public static TraceEventSourceType MergeAll;
    public static TraceEventSourceType FileOnly;
    public static TraceEventSourceType Session;
}
public enum Microsoft.Diagnostics.Tracing.TraceEventTask : Enum {
    public ushort value__;
    public static TraceEventTask Default;
}
internal class Microsoft.Diagnostics.Tracing.TraceLoggingEventId : ValueType {
    private Dictionary`2<ProviderMetaDataKey, ushort> m_traceLoggingEventMap;
    private Dictionary`2<Guid, ushort> m_nextTraceLoggingIDForProvider;
    public void TestForTraceLoggingEventAndFixupIfNeeded(EVENT_RECORD* eventRecord);
    public sealed virtual void Dispose();
    private void TestForTraceLoggingEventAndFixupIfNeededHelper(EVENT_RECORD* eventRecord);
    private ushort GetEventIDForTraceLoggingEvent(EVENT_RECORD* eventRecord, EVENT_HEADER_EXTENDED_DATA_ITEM* metaData);
}
internal class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryExpression : object {
    private static String[] _separator;
    private static String[] _eventSeparator;
    private static Dictionary`2<string, Operator> _operatorMap;
    private static HashSet`1<string> _uniqueNumericOperators;
    private string _expression;
    private String[] _lhsSplit;
    [CompilerGeneratedAttribute]
private string <LeftOperand>k__BackingField;
    [CompilerGeneratedAttribute]
private Operator <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RightOperand>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RightOperandAsDouble>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDouble>k__BackingField;
    public string LeftOperand { get; private set; }
    public Operator Op { get; private set; }
    public string RightOperand { get; private set; }
    public double RightOperandAsDouble { get; private set; }
    public bool IsDouble { get; private set; }
    public FilterQueryExpression(string expression);
    private static FilterQueryExpression();
    public bool Match(TraceEvent event);
    public bool Match(Dictionary`2<string, string> propertyNamesToValues, string eventName);
    internal static bool HandleDoubleComparisons(FilterQueryExpression expression, string rhsOperand, Operator o);
    [CompilerGeneratedAttribute]
public string get_LeftOperand();
    [CompilerGeneratedAttribute]
private void set_LeftOperand(string value);
    [CompilerGeneratedAttribute]
public Operator get_Op();
    [CompilerGeneratedAttribute]
private void set_Op(Operator value);
    [CompilerGeneratedAttribute]
public string get_RightOperand();
    [CompilerGeneratedAttribute]
private void set_RightOperand(string value);
    [CompilerGeneratedAttribute]
public double get_RightOperandAsDouble();
    [CompilerGeneratedAttribute]
private void set_RightOperandAsDouble(double value);
    [CompilerGeneratedAttribute]
public bool get_IsDouble();
    [CompilerGeneratedAttribute]
private void set_IsDouble(bool value);
    public virtual string ToString();
}
public class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryExpressionParsingException : ArgumentException {
    public FilterQueryExpressionParsingException(string message, string query);
}
public class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryExpressionTree : object {
    private Dictionary`2<char, FilterQueryExpression> _expressionMap;
    private string _postFixExpression;
    private Dictionary`2<string, bool> _convertedExpressionMap;
    [CompilerGeneratedAttribute]
private string <OriginalExpression>k__BackingField;
    public string OriginalExpression { get; }
    public FilterQueryExpressionTree(string expression);
    [CompilerGeneratedAttribute]
public string get_OriginalExpression();
    public bool Match(TraceEvent event);
    public bool Match(Dictionary`2<string, string> propertyNamesToValues, string eventName);
}
public class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryExpressionTreeMatchingException : ArgumentException {
    public FilterQueryExpressionTreeMatchingException(string message, string query);
}
public class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryExpressionTreeParsingException : ArgumentException {
    public FilterQueryExpressionTreeParsingException(string message, string query);
}
public static class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.FilterQueryUtilities : object {
    public static Regex FilterQueryExpressionRegex;
    public static Char[] SpaceSeparator;
    internal static Dictionary`2<string, Func`2<TraceEvent, string>> _specialPayload;
    private static FilterQueryUtilities();
    public static string TryExtractFilterQueryExpression(string expression, FilterQueryExpressionTree& tree);
    internal static string ExtractPayloadByName(TraceEvent event, string payloadName);
}
internal static class Microsoft.Diagnostics.Tracing.TraceUtilities.FilterQueryExpression.ShuntingYard : object {
    private static Dictionary`2<char, OperatorInfo> operators;
    private static Regex _operandRegex;
    private static Char[] Alphabets;
    private static ShuntingYard();
    public static string ToPostFix(string infix);
    public static bool Match(string postfixNotation, Dictionary`2<string, bool> expressionMap);
    public static bool EvaluateSingleExpression(string operand1, string operand2, string operator, Dictionary`2<string, bool> expressionMap);
    public static string PrimeExpression(string expression, Dictionary`2& expressionMap);
}
public class Microsoft.Diagnostics.Tracing.UnhandledTraceEvent : TraceEvent {
    [CompilerGeneratedAttribute]
private Action`1<TraceEvent> Action;
    public String[] PayloadNames { get; }
    protected internal Delegate Target { get; protected internal set; }
    public virtual StringBuilder ToXml(StringBuilder sb);
    public virtual String[] get_PayloadNames();
    public virtual object PayloadValue(int index);
    [CompilerGeneratedAttribute]
internal void add_Action(Action`1<TraceEvent> value);
    [CompilerGeneratedAttribute]
internal void remove_Action(Action`1<TraceEvent> value);
    protected internal virtual void Dispatch();
    protected internal virtual Delegate get_Target();
    protected internal virtual void set_Target(Delegate value);
    public virtual string ToString();
    internal void PrepForCallback();
}
public class Microsoft.Diagnostics.Tracing.Utilities.FastStream : object {
    public byte Sentinal;
    public static UInt32 MaxRestoreLength;
    private Byte[] buffer;
    private UInt32 bufferFillPos;
    private UInt32 streamReadIn;
    private Stream stream;
    private UInt32 bufferIndex;
    private long streamPosition;
    private bool closeStream;
    private FastStream next;
    private bool IsDisposed;
    public int MaxPeek { get; }
    public byte Current { get; }
    public bool EndOfStream { get; }
    public long Position { get; }
    public FastStream(string filePath);
    public FastStream(Stream stream, int bufferSize, bool closeStream);
    public FastStream(Byte[] buffer, int start, int length);
    public byte ReadByte();
    public int ReadInt();
    public int ReadIntHex();
    public UInt32 ReadUInt();
    public long ReadLong();
    public long ReadLongHex();
    public ulong ReadULong();
    public void ReadFixedString(int charCount, StringBuilder sb);
    public void ReadAsciiStringUpTo(char endMarker, StringBuilder sb);
    public void ReadAsciiStringUpTo(string endMarker, StringBuilder sb);
    public void ReadAsciiStringUpToAny(string endMarkers, StringBuilder sb);
    public void ReadAsciiStringUpToLastBeforeTrue(char endMarker, StringBuilder sb, Func`2<byte, bool> predicate);
    public void ReadAsciiStringUpToTrue(StringBuilder sb, Func`2<byte, bool> predicate);
    public byte Peek(UInt32 bytesAhead);
    public int get_MaxPeek();
    public void Skip(UInt32 amount);
    public void SkipUpTo(char endMarker);
    public void SkipSpace();
    public void SkipWhiteSpace();
    public void SkipUpToFalse(Func`2<byte, bool> predicate);
    public FastStream ReadSubStream(int length, string trail);
    public byte get_Current();
    public bool MoveNext();
    public bool get_EndOfStream();
    public MarkedPosition MarkPosition();
    public void RestoreToMark(MarkedPosition position);
    public long get_Position();
    public sealed virtual void Dispose();
    internal string PeekString(int length);
    internal string PeekString(int start, int length);
    private void AddChild(FastStream child);
    private Byte[] GetUsedBuffer();
    private UInt32 FillBufferFromStreamPosition(UInt32 keepLast);
    private bool MoveNextHelper();
    private UInt32 PeekHelper(UInt32 bytesAhead);
    public virtual string ToString();
}
internal class Microsoft.Diagnostics.Tracing.Utilities.HistoryDictionary`2 : object {
    private Dictionary`2<TKey, HistoryValue<TKey, TValue>> entries;
    private int count;
    public IEnumerable`1<HistoryValue<TKey, TValue>> Entries { get; }
    public int Count { get; }
    public HistoryDictionary`2(int initialSize);
    public void Add(TKey id, long startTime, TValue value, bool isEndRundown);
    public bool TryGetValue(TKey id, long time, TValue& value);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Tracing.Utilities.HistoryDictionary`2/<get_Entries>d__4")]
public IEnumerable`1<HistoryValue<TKey, TValue>> get_Entries();
    public int get_Count();
    public void Remove(TKey id);
}
internal static class Microsoft.Diagnostics.Tracing.Utilities.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    [ThreadStaticAttribute]
private static StringBuilder CachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
public class Microsoft.Diagnostics.Tracing.ZippedETLReader : object {
    [CompilerGeneratedAttribute]
private TextWriter <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EtlFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolDirectory>k__BackingField;
    private string m_zipFilePath;
    public TextWriter Log { get; public set; }
    public string EtlFileName { get; public set; }
    public string SymbolDirectory { get; public set; }
    public ZippedETLReader(string zipFilePath, TextWriter log);
    [CompilerGeneratedAttribute]
public TextWriter get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(TextWriter value);
    [CompilerGeneratedAttribute]
public string get_EtlFileName();
    [CompilerGeneratedAttribute]
public void set_EtlFileName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolDirectory();
    [CompilerGeneratedAttribute]
public void set_SymbolDirectory(string value);
    public void UnpackArchive();
    private static void AtomicExtract(ZipArchiveEntry zipEntry, string targetPath);
}
public class Microsoft.Diagnostics.Tracing.ZippedETLWriter : object {
    [CompilerGeneratedAttribute]
private string <ZipArchivePath>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolReader <SymbolReader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Merge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeImageIDsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompressETL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NGenSymbolFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LowPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Zip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteInputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeExistingPDBs>k__BackingField;
    private List`1<Tuple`2<string, string>> m_additionalFiles;
    private string m_etlFilePath;
    public string ZipArchivePath { get; public set; }
    public TextWriter Log { get; public set; }
    public SymbolReader SymbolReader { get; public set; }
    public bool Merge { get; public set; }
    public bool MergeImageIDsOnly { get; public set; }
    public bool CompressETL { get; public set; }
    public bool NGenSymbolFiles { get; public set; }
    public bool LowPriority { get; public set; }
    public bool Zip { get; public set; }
    public bool DeleteInputFile { get; public set; }
    public bool IncludeExistingPDBs { get; public set; }
    public ZippedETLWriter(string etlFilePath, TextWriter log);
    [CompilerGeneratedAttribute]
public string get_ZipArchivePath();
    [CompilerGeneratedAttribute]
public void set_ZipArchivePath(string value);
    [CompilerGeneratedAttribute]
public TextWriter get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(TextWriter value);
    public void AddFile(string filePath, string archivePath);
    public bool WriteArchive(CompressionLevel compressionLevel);
    [CompilerGeneratedAttribute]
public SymbolReader get_SymbolReader();
    [CompilerGeneratedAttribute]
public void set_SymbolReader(SymbolReader value);
    [CompilerGeneratedAttribute]
public bool get_Merge();
    [CompilerGeneratedAttribute]
public void set_Merge(bool value);
    [CompilerGeneratedAttribute]
public bool get_MergeImageIDsOnly();
    [CompilerGeneratedAttribute]
public void set_MergeImageIDsOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompressETL();
    [CompilerGeneratedAttribute]
public void set_CompressETL(bool value);
    [CompilerGeneratedAttribute]
public bool get_NGenSymbolFiles();
    [CompilerGeneratedAttribute]
public void set_NGenSymbolFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_LowPriority();
    [CompilerGeneratedAttribute]
public void set_LowPriority(bool value);
    [CompilerGeneratedAttribute]
public bool get_Zip();
    [CompilerGeneratedAttribute]
public void set_Zip(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteInputFile();
    [CompilerGeneratedAttribute]
public void set_DeleteInputFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeExistingPDBs();
    [CompilerGeneratedAttribute]
public void set_IncludeExistingPDBs(bool value);
    private List`1<string> PrepForWrite();
    internal static List`1<string> GetNGenPdbs(string etlFile, SymbolReader symbolReader, TextWriter log);
}
internal static class Microsoft.Diagnostics.Utilities.DirectoryUtilities : object {
    public static void Copy(string sourceDirectory, string targetDirectory);
    public static void Copy(string sourceDirectory, string targetDirectory, SearchOption searchOptions);
    public static int Clean(string directory);
    public static bool DeleteOldest(string directoryPath, int numberToKeep);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Utilities.DirectoryUtilities/<GetFiles>d__4")]
public static IEnumerable`1<string> GetFiles(string directoryPath, string searchPattern, SearchOption searchOptions);
    public static IEnumerable`1<string> GetFiles(string directoryName, string searchPattern);
}
internal static class Microsoft.Diagnostics.Utilities.FileUtilities : object {
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Utilities.FileUtilities/<ReadAllLines>d__0")]
public static IEnumerable`1<string> ReadAllLines(string fileName);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.Utilities.FileUtilities/<ExpandWildcards>d__1")]
public static IEnumerable`1<string> ExpandWildcards(String[] fileSpecifications, SearchOption searchOpt);
    public static bool ForceDelete(string fileName);
    public static bool TryDelete(string fileName);
    public static void ForceCopy(string sourceFile, string destinationFile);
    public static void ForceMove(string sourceFile, string destinationFile);
    public static bool Equals(string fileName1, string fileName2);
}
internal static class Microsoft.Diagnostics.Utilities.Interop : object {
    public static UInt32 MAX_PATH;
    internal static IntPtr FindFirstVolume(StringBuilder lpszVolumeName, UInt32 cchBufferLength);
    internal static bool FindNextVolume(IntPtr hFindVolume, StringBuilder lpszVolumeName, UInt32 cchBufferLength);
    internal static bool FindVolumeClose(IntPtr hFindVolume);
    internal static UInt32 QueryDosDevice(string lpDeviceName, StringBuilder lpTargetPath, int ucchMax);
}
internal static class Microsoft.Diagnostics.Utilities.PathUtil : object {
    public static string PathRelativeTo(string path, string relativeToDirectory);
}
internal static class Microsoft.Diagnostics.Utilities.StreamUtilities : object {
    public static void CopyFromFile(string fromFilePath, Stream toStream);
    public static void CopyToFile(Stream fromStream, string toFilePath);
    public static int CopyStream(Stream fromStream, Stream toStream);
}
public class Microsoft.Diagnostics.Utilities.WindowsDeviceToVolumeMap : object {
    private static bool s_LegacyPathHandlingDisabled;
    private static string VolumeNamePrefix;
    private static string VolumeNameSuffix;
    private static string HardDiskVolumePathToken;
    private static int HardDiskVolumePathTokenIndex;
    private static string VHDHardDiskPathToken;
    private static int VHDHardDiskPathTokenIndex;
    private Dictionary`2<string, string> _deviceNameToVolumeNameMap;
    public string ConvertDevicePathToVolumePath(string inputPath);
    private void Initialize();
    private static void DisableLegacyPathHandling();
}
internal class Microsoft.Diagnostics.Utilities.XmlUtilities : object {
    public static string OpenXmlElement(string xmlElement);
    public static string XmlEscape(object obj, bool quote);
    public static string XmlQuote(object obj);
    public static string XmlQuote(int value);
    public static string XmlQuoteHex(UInt32 value);
    public static string XmlQuoteHex(ulong value);
    public static string XmlQuoteHex(int value);
    public static string XmlQuoteHex(long value);
}
internal class NativeDlls : object {
    private static string UnknownLocation;
    private static string s_ProcessArchDirectory;
    public static Architecture ProcessArch { get; }
    public static string ProcessArchitectureDirectory { get; }
    public static void LoadNative(string simpleName);
    public static Architecture get_ProcessArch();
    public static string get_ProcessArchitectureDirectory();
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);
}
internal class PEFile.CV_INFO_PDB70 : ValueType {
    public static int PDB70CvSignature;
    public int CvSignature;
    public Guid Signature;
    public int Age;
    [FixedBufferAttribute("System.Byte", "1")]
public <bytePdbFileName>e__FixedBuffer bytePdbFileName;
    public string PdbFileName { get; }
    public string get_PdbFileName();
}
public class PEFile.FileVersionInfo : object {
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    public string FileVersion { get; private set; }
    internal FileVersionInfo(Byte* data, int dataLen);
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
private void set_FileVersion(string value);
}
public class PEFile.IMAGE_DATA_DIRECTORY : ValueType {
    public int VirtualAddress;
    public int Size;
}
internal class PEFile.IMAGE_DEBUG_DIRECTORY : ValueType {
    public int Characteristics;
    public int TimeDateStamp;
    public short MajorVersion;
    public short MinorVersion;
    public IMAGE_DEBUG_TYPE Type;
    public int SizeOfData;
    public int AddressOfRawData;
    public int PointerToRawData;
}
internal enum PEFile.IMAGE_DEBUG_TYPE : Enum {
    public int value__;
    public static IMAGE_DEBUG_TYPE UNKNOWN;
    public static IMAGE_DEBUG_TYPE COFF;
    public static IMAGE_DEBUG_TYPE CODEVIEW;
    public static IMAGE_DEBUG_TYPE FPO;
    public static IMAGE_DEBUG_TYPE MISC;
    public static IMAGE_DEBUG_TYPE BBT;
}
internal class PEFile.IMAGE_DOS_HEADER : ValueType {
    public static short IMAGE_DOS_SIGNATURE;
    public short e_magic;
    public int e_lfanew;
}
internal class PEFile.IMAGE_FILE_HEADER : ValueType {
    public ushort Machine;
    public ushort NumberOfSections;
    public UInt32 TimeDateStamp;
    public UInt32 PointerToSymbolTable;
    public UInt32 NumberOfSymbols;
    public ushort SizeOfOptionalHeader;
    public ushort Characteristics;
}
internal class PEFile.IMAGE_NT_HEADERS : ValueType {
    public UInt32 Signature;
    public IMAGE_FILE_HEADER FileHeader;
}
internal class PEFile.IMAGE_OPTIONAL_HEADER32 : ValueType {
    public ushort Magic;
    public byte MajorLinkerVersion;
    public byte MinorLinkerVersion;
    public UInt32 SizeOfCode;
    public UInt32 SizeOfInitializedData;
    public UInt32 SizeOfUninitializedData;
    public UInt32 AddressOfEntryPoint;
    public UInt32 BaseOfCode;
    public UInt32 BaseOfData;
    public UInt32 ImageBase;
    public UInt32 SectionAlignment;
    public UInt32 FileAlignment;
    public ushort MajorOperatingSystemVersion;
    public ushort MinorOperatingSystemVersion;
    public ushort MajorImageVersion;
    public ushort MinorImageVersion;
    public ushort MajorSubsystemVersion;
    public ushort MinorSubsystemVersion;
    public UInt32 Win32VersionValue;
    public UInt32 SizeOfImage;
    public UInt32 SizeOfHeaders;
    public UInt32 CheckSum;
    public ushort Subsystem;
    public ushort DllCharacteristics;
    public UInt32 SizeOfStackReserve;
    public UInt32 SizeOfStackCommit;
    public UInt32 SizeOfHeapReserve;
    public UInt32 SizeOfHeapCommit;
    public UInt32 LoaderFlags;
    public UInt32 NumberOfRvaAndSizes;
}
internal class PEFile.IMAGE_OPTIONAL_HEADER64 : ValueType {
    public ushort Magic;
    public byte MajorLinkerVersion;
    public byte MinorLinkerVersion;
    public UInt32 SizeOfCode;
    public UInt32 SizeOfInitializedData;
    public UInt32 SizeOfUninitializedData;
    public UInt32 AddressOfEntryPoint;
    public UInt32 BaseOfCode;
    public ulong ImageBase;
    public UInt32 SectionAlignment;
    public UInt32 FileAlignment;
    public ushort MajorOperatingSystemVersion;
    public ushort MinorOperatingSystemVersion;
    public ushort MajorImageVersion;
    public ushort MinorImageVersion;
    public ushort MajorSubsystemVersion;
    public ushort MinorSubsystemVersion;
    public UInt32 Win32VersionValue;
    public UInt32 SizeOfImage;
    public UInt32 SizeOfHeaders;
    public UInt32 CheckSum;
    public ushort Subsystem;
    public ushort DllCharacteristics;
    public ulong SizeOfStackReserve;
    public ulong SizeOfStackCommit;
    public ulong SizeOfHeapReserve;
    public ulong SizeOfHeapCommit;
    public UInt32 LoaderFlags;
    public UInt32 NumberOfRvaAndSizes;
}
internal class PEFile.IMAGE_RESOURCE_DATA_ENTRY : ValueType {
    public int RvaToData;
    public int Size;
    public int CodePage;
    public int Reserved;
}
internal class PEFile.IMAGE_RESOURCE_DIRECTORY : ValueType {
    public int Characteristics;
    public int TimeDateStamp;
    public short MajorVersion;
    public short MinorVersion;
    public ushort NumberOfNamedEntries;
    public ushort NumberOfIdEntries;
}
internal class PEFile.IMAGE_RESOURCE_DIRECTORY_ENTRY : ValueType {
    private int NameOffsetAndFlag;
    private int DataOffsetAndFlag;
    public bool IsStringName { get; }
    public int NameOffset { get; }
    public bool IsLeaf { get; }
    public int DataOffset { get; }
    public int Id { get; }
    public bool get_IsStringName();
    public int get_NameOffset();
    public bool get_IsLeaf();
    public int get_DataOffset();
    public int get_Id();
    internal string GetName(PEBuffer buff, int resourceStartFileOffset);
    internal static string GetTypeNameForTypeId(int typeId);
}
internal class PEFile.IMAGE_SECTION_HEADER : ValueType {
    [FixedBufferAttribute("System.Byte", "8")]
public <NameBytes>e__FixedBuffer NameBytes;
    public UInt32 VirtualSize;
    public UInt32 VirtualAddress;
    public UInt32 SizeOfRawData;
    public UInt32 PointerToRawData;
    public UInt32 PointerToRelocations;
    public UInt32 PointerToLinenumbers;
    public ushort NumberOfRelocations;
    public ushort NumberOfLinenumbers;
    public UInt32 Characteristics;
    public string Name { get; }
    public string get_Name();
}
public enum PEFile.MachineType : Enum {
    public ushort value__;
    public static MachineType Native;
    public static MachineType X86;
    public static MachineType ia64;
    public static MachineType ARM;
    public static MachineType Amd64;
}
internal class PEFile.PEBuffer : object {
    private int m_buffPos;
    private int m_buffLen;
    private Byte[] m_buff;
    private Byte* m_buffPtr;
    private GCHandle m_pinningHandle;
    private Stream m_stream;
    public int Length { get; }
    public PEBuffer(Stream stream, int buffSize);
    public Byte* Fetch(int filePos, int size);
    public int get_Length();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void FreeBuffer();
    private void GetBuffer(int buffSize);
}
public class PEFile.PEFile : object {
    [CompilerGeneratedAttribute]
private PEHeader <Header>k__BackingField;
    private bool getNativeInfoCalled;
    private bool hasPrecomiledManagedCode;
    private bool isManagedReadyToRun;
    private short readyToRunMajor;
    private short readyToRunMinor;
    private static int READYTORUN_SIGNATURE;
    private PEBuffer m_headerBuff;
    private PEBuffer m_freeBuff;
    private FileStream m_stream;
    public PEHeader Header { get; private set; }
    public bool HasPrecompiledManagedCode { get; }
    public bool IsManagedReadyToRun { get; }
    public PEFile(string filePath);
    [CompilerGeneratedAttribute]
public PEHeader get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(PEHeader value);
    public bool GetPdbSignature(String& pdbName, Guid& pdbGuid, Int32& pdbAge, bool first);
    public FileVersionInfo GetFileVersionInfo();
    public string GetSxSManfest();
    public bool get_HasPrecompiledManagedCode();
    public bool get_IsManagedReadyToRun();
    public bool ReadyToRunVersion(Int16& major, Int16& minor);
    public sealed virtual void Dispose();
    internal ResourceNode GetResources();
    public void GetNativeInfo();
    internal Byte* FetchRVA(int rva, int size, PEBuffer buffer);
    internal PEBuffer AllocBuff();
    internal void FreeBuff(PEBuffer buffer);
}
public class PEFile.PEHeader : object {
    private IMAGE_DOS_HEADER* dosHeader;
    private IMAGE_NT_HEADERS* ntHeader;
    private IMAGE_SECTION_HEADER* sections;
    public int PEHeaderSize { get; }
    public bool IsPE64 { get; }
    public bool IsManaged { get; }
    public UInt32 Signature { get; }
    public MachineType Machine { get; }
    public ushort NumberOfSections { get; }
    public int TimeDateStampSec { get; }
    public DateTime TimeDateStamp { get; }
    public ulong PointerToSymbolTable { get; }
    public ulong NumberOfSymbols { get; }
    public ushort SizeOfOptionalHeader { get; }
    public ushort Characteristics { get; }
    public ushort Magic { get; }
    public byte MajorLinkerVersion { get; }
    public byte MinorLinkerVersion { get; }
    public UInt32 SizeOfCode { get; }
    public UInt32 SizeOfInitializedData { get; }
    public UInt32 SizeOfUninitializedData { get; }
    public UInt32 AddressOfEntryPoint { get; }
    public UInt32 BaseOfCode { get; }
    public ulong ImageBase { get; }
    public UInt32 SectionAlignment { get; }
    public UInt32 FileAlignment { get; }
    public ushort MajorOperatingSystemVersion { get; }
    public ushort MinorOperatingSystemVersion { get; }
    public ushort MajorImageVersion { get; }
    public ushort MinorImageVersion { get; }
    public ushort MajorSubsystemVersion { get; }
    public ushort MinorSubsystemVersion { get; }
    public UInt32 Win32VersionValue { get; }
    public UInt32 SizeOfImage { get; }
    public UInt32 SizeOfHeaders { get; }
    public UInt32 CheckSum { get; }
    public ushort Subsystem { get; }
    public ushort DllCharacteristics { get; }
    public ulong SizeOfStackReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfHeapCommit { get; }
    public UInt32 LoaderFlags { get; }
    public UInt32 NumberOfRvaAndSizes { get; }
    public IMAGE_DATA_DIRECTORY ExportDirectory { get; }
    public IMAGE_DATA_DIRECTORY ImportDirectory { get; }
    public IMAGE_DATA_DIRECTORY ResourceDirectory { get; }
    public IMAGE_DATA_DIRECTORY ExceptionDirectory { get; }
    public IMAGE_DATA_DIRECTORY CertificatesDirectory { get; }
    public IMAGE_DATA_DIRECTORY BaseRelocationDirectory { get; }
    public IMAGE_DATA_DIRECTORY DebugDirectory { get; }
    public IMAGE_DATA_DIRECTORY ArchitectureDirectory { get; }
    public IMAGE_DATA_DIRECTORY GlobalPointerDirectory { get; }
    public IMAGE_DATA_DIRECTORY ThreadStorageDirectory { get; }
    public IMAGE_DATA_DIRECTORY LoadConfigurationDirectory { get; }
    public IMAGE_DATA_DIRECTORY BoundImportDirectory { get; }
    public IMAGE_DATA_DIRECTORY ImportAddressTableDirectory { get; }
    public IMAGE_DATA_DIRECTORY DelayImportDirectory { get; }
    public IMAGE_DATA_DIRECTORY ComDescriptorDirectory { get; }
    internal int FileOffsetOfResources { get; }
    private IMAGE_OPTIONAL_HEADER32* OptionalHeader32 { get; }
    private IMAGE_OPTIONAL_HEADER64* OptionalHeader64 { get; }
    private IMAGE_DATA_DIRECTORY* ntDirectories { get; }
    public PEHeader(Void* startOfPEFile);
    public int get_PEHeaderSize();
    public int VirtualAddressToRva(Void* ptr);
    public Void* RvaToVirtualAddress(int rva);
    public int RvaToFileOffset(int rva);
    public bool get_IsPE64();
    public bool get_IsManaged();
    public UInt32 get_Signature();
    public MachineType get_Machine();
    public ushort get_NumberOfSections();
    public int get_TimeDateStampSec();
    public DateTime get_TimeDateStamp();
    public ulong get_PointerToSymbolTable();
    public ulong get_NumberOfSymbols();
    public ushort get_SizeOfOptionalHeader();
    public ushort get_Characteristics();
    public ushort get_Magic();
    public byte get_MajorLinkerVersion();
    public byte get_MinorLinkerVersion();
    public UInt32 get_SizeOfCode();
    public UInt32 get_SizeOfInitializedData();
    public UInt32 get_SizeOfUninitializedData();
    public UInt32 get_AddressOfEntryPoint();
    public UInt32 get_BaseOfCode();
    public ulong get_ImageBase();
    public UInt32 get_SectionAlignment();
    public UInt32 get_FileAlignment();
    public ushort get_MajorOperatingSystemVersion();
    public ushort get_MinorOperatingSystemVersion();
    public ushort get_MajorImageVersion();
    public ushort get_MinorImageVersion();
    public ushort get_MajorSubsystemVersion();
    public ushort get_MinorSubsystemVersion();
    public UInt32 get_Win32VersionValue();
    public UInt32 get_SizeOfImage();
    public UInt32 get_SizeOfHeaders();
    public UInt32 get_CheckSum();
    public ushort get_Subsystem();
    public ushort get_DllCharacteristics();
    public ulong get_SizeOfStackReserve();
    public ulong get_SizeOfStackCommit();
    public ulong get_SizeOfHeapReserve();
    public ulong get_SizeOfHeapCommit();
    public UInt32 get_LoaderFlags();
    public UInt32 get_NumberOfRvaAndSizes();
    public IMAGE_DATA_DIRECTORY Directory(int idx);
    public IMAGE_DATA_DIRECTORY get_ExportDirectory();
    public IMAGE_DATA_DIRECTORY get_ImportDirectory();
    public IMAGE_DATA_DIRECTORY get_ResourceDirectory();
    public IMAGE_DATA_DIRECTORY get_ExceptionDirectory();
    public IMAGE_DATA_DIRECTORY get_CertificatesDirectory();
    public IMAGE_DATA_DIRECTORY get_BaseRelocationDirectory();
    public IMAGE_DATA_DIRECTORY get_DebugDirectory();
    public IMAGE_DATA_DIRECTORY get_ArchitectureDirectory();
    public IMAGE_DATA_DIRECTORY get_GlobalPointerDirectory();
    public IMAGE_DATA_DIRECTORY get_ThreadStorageDirectory();
    public IMAGE_DATA_DIRECTORY get_LoadConfigurationDirectory();
    public IMAGE_DATA_DIRECTORY get_BoundImportDirectory();
    public IMAGE_DATA_DIRECTORY get_ImportAddressTableDirectory();
    public IMAGE_DATA_DIRECTORY get_DelayImportDirectory();
    public IMAGE_DATA_DIRECTORY get_ComDescriptorDirectory();
    internal static DateTime TimeDateStampToDate(int timeDateStampSec);
    internal int get_FileOffsetOfResources();
    private IMAGE_OPTIONAL_HEADER32* get_OptionalHeader32();
    private IMAGE_OPTIONAL_HEADER64* get_OptionalHeader64();
    private IMAGE_DATA_DIRECTORY* get_ntDirectories();
}
internal class PEFile.ResourceNode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLeaf>k__BackingField;
    private PEFile m_file;
    private int m_nodeFileOffset;
    private List`1<ResourceNode> m_Children;
    private bool m_isTop;
    private int m_dataLen;
    private int m_dataFileOffset;
    public string Name { get; private set; }
    public bool IsLeaf { get; private set; }
    public int DataLength { get; }
    public List`1<ResourceNode> Children { get; }
    internal ResourceNode(string name, int nodeFileOffset, PEFile file, bool isLeaf, bool isTop);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLeaf();
    [CompilerGeneratedAttribute]
private void set_IsLeaf(bool value);
    public int get_DataLength();
    public Byte* FetchData(int offsetInResourceData, int size, PEBuffer buff);
    public FileVersionInfo GetFileVersionInfo();
    public virtual string ToString();
    public static ResourceNode GetChild(ResourceNode node, string name);
    public List`1<ResourceNode> get_Children();
    private void ToString(StringWriter sw, string indent);
}
internal class System.Collections.Generic.FunctorComparer`1 : object {
    private Comparison`1<T> comparison;
    public FunctorComparer`1(Comparison`1<T> comparison);
    public sealed virtual int Compare(T x, T y);
}
internal class System.Diagnostics.Tracing.ManifestEnvelope : ValueType {
    public static int MaxChunkSize;
    public ManifestFormats Format;
    public byte MajorVersion;
    public byte MinorVersion;
    public byte Magic;
    public ushort TotalChunks;
    public ushort ChunkNumber;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
internal class Utilities.Cache`2 : object {
    private static ushort End;
    private static int HashBits;
    private static int HashMask;
    private static int AgeMask;
    private UInt16[] m_hashTable;
    private CacheEntry[] m_entries;
    private ushort m_freeEntries;
    private int m_freeScan;
    private byte m_curAge;
    private ushort m_entriesInCurAge;
    public int MaxEntries { get; }
    public Cache`2(int maxEntries);
    public T Get(K key);
    public bool TryGet(K key, T& valueRet);
    public void Add(K key, T value);
    public void Clear();
    public int get_MaxEntries();
    private void UpdateAge(CacheEntry& entry);
    private ushort GetFreeEntry();
}
public class Utilities.Command : object {
    private static String[] pathExts;
    private static String[] paths;
    private string commandLine;
    private Process process;
    private StringBuilder output;
    private CommandOptions options;
    private TextWriter outputStream;
    public DateTime StartTime { get; }
    public bool HasExited { get; }
    public DateTime ExitTime { get; }
    public TimeSpan Duration { get; }
    public int Id { get; }
    public int ExitCode { get; }
    public string Output { get; }
    public CommandOptions Options { get; }
    public Process Process { get; }
    private static String[] PathExts { get; }
    private static String[] Paths { get; }
    public Command(string commandLine, CommandOptions options);
    public Command(string commandLine);
    public DateTime get_StartTime();
    public bool get_HasExited();
    public DateTime get_ExitTime();
    public TimeSpan get_Duration();
    public int get_Id();
    public int get_ExitCode();
    public string get_Output();
    public CommandOptions get_Options();
    public static Command RunToConsole(string commandLine, CommandOptions options);
    public static Command Run(string commandLine, CommandOptions options);
    public Command Wait();
    public void ThrowCommandFailure(string message);
    public Process get_Process();
    public void Kill();
    public static string Quote(string str);
    public static string FindOnPath(string commandExe);
    private static string ProbeForExe(string path);
    private static String[] get_PathExts();
    private static String[] get_Paths();
    private void OnProcessOutput(object sender, DataReceivedEventArgs e);
}
public class Utilities.CommandOptions : object {
    public static int Infinite;
    internal bool noThrow;
    internal bool useShellExecute;
    internal bool noWindow;
    internal bool noWait;
    internal bool elevate;
    internal int timeoutMSec;
    internal string input;
    internal string outputFile;
    internal TextWriter outputStream;
    internal string currentDirectory;
    internal Dictionary`2<string, string> environmentVariables;
    public bool NoThrow { get; public set; }
    public bool Start { get; public set; }
    public bool UseShellExecute { get; public set; }
    public bool NoWindow { get; public set; }
    public bool NoWait { get; public set; }
    public bool Elevate { get; public set; }
    public int Timeout { get; public set; }
    public string Input { get; public set; }
    public string CurrentDirectory { get; public set; }
    public string OutputFile { get; public set; }
    public TextWriter OutputStream { get; public set; }
    public Dictionary`2<string, string> EnvironmentVariables { get; }
    public CommandOptions Clone();
    public bool get_NoThrow();
    public void set_NoThrow(bool value);
    public CommandOptions AddNoThrow();
    public bool get_Start();
    public void set_Start(bool value);
    public CommandOptions AddStart();
    public bool get_UseShellExecute();
    public void set_UseShellExecute(bool value);
    public CommandOptions AddUseShellExecute();
    public bool get_NoWindow();
    public void set_NoWindow(bool value);
    public CommandOptions AddNoWindow();
    public bool get_NoWait();
    public void set_NoWait(bool value);
    public CommandOptions AddNoWait();
    public bool get_Elevate();
    public void set_Elevate(bool value);
    public CommandOptions AddElevate();
    public int get_Timeout();
    public void set_Timeout(int value);
    public CommandOptions AddTimeout(int milliseconds);
    public string get_Input();
    public void set_Input(string value);
    public CommandOptions AddInput(string input);
    public string get_CurrentDirectory();
    public void set_CurrentDirectory(string value);
    public CommandOptions AddCurrentDirectory(string directoryPath);
    public string get_OutputFile();
    public void set_OutputFile(string value);
    public CommandOptions AddOutputFile(string outputFile);
    public TextWriter get_OutputStream();
    public void set_OutputStream(TextWriter value);
    public CommandOptions AddOutputStream(TextWriter outputStream);
    public Dictionary`2<string, string> get_EnvironmentVariables();
    public CommandOptions AddEnvironmentVariable(string variable, string value);
}
internal class Utilities.IndexMap : object {
    private Int32[] m_lookup;
    private int m_range;
    private int m_lastSourceLookedUp;
    public int Count { get; }
    public IndexMap(IEnumerable`1<int> counts);
    public int SourceOf(int aggregate);
    public int OffsetOf(int source, int aggregate);
    public int IndexOf(int source, int offset);
    public int get_Count();
}
internal static class Utilities.OperatingSystemVersion : object {
    public static int Win10;
    public static int Win8;
    public static int Win7;
    public static int Vista;
    private static int RtlGetVersion(RTL_OSVERSIONINFOEX& lpVersionInformation);
    public static bool AtLeast(int requiredOSVersion);
}
