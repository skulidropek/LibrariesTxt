internal static class FxResources.Microsoft.Extensions.Logging.Abstractions.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    [NullableContextAttribute("1")]
public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Logging.Abstractions.LogEntry`1 : ValueType {
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<TState, Exception, string> <Formatter>k__BackingField;
    public LogLevel LogLevel { get; }
    public string Category { get; }
    public EventId EventId { get; }
    public TState State { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<TState, Exception, string> Formatter { get; }
    public LogEntry`1(LogLevel logLevel, string category, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public EventId get_EventId();
    [CompilerGeneratedAttribute]
public TState get_State();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public Func`3<TState, Exception, string> get_Formatter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Abstractions.NullLogger : object {
    [CompilerGeneratedAttribute]
private static NullLogger <Instance>k__BackingField;
    public static NullLogger Instance { get; }
    private static NullLogger();
    [CompilerGeneratedAttribute]
public static NullLogger get_Instance();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLogger`1 : object {
    [NullableAttribute("1")]
public static NullLogger`1<T> Instance;
    private static NullLogger`1();
    [NullableContextAttribute("1")]
public sealed virtual IDisposable BeginScope(TState state);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory : object {
    [NullableAttribute("1")]
public static NullLoggerFactory Instance;
    private static NullLoggerFactory();
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    [NullableContextAttribute("1")]
public sealed virtual void AddProvider(ILoggerProvider provider);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider : object {
    [CompilerGeneratedAttribute]
private static NullLoggerProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullLoggerProvider Instance { get; }
    private static NullLoggerProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullLoggerProvider get_Instance();
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Logging.EventId : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Id { get; }
    public string Name { get; }
    public EventId(int id, string name);
    public static EventId op_Implicit(int i);
    public static bool op_Equality(EventId left, EventId right);
    public static bool op_Inequality(EventId left, EventId right);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public bool Equals(EventId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Logging.FormattedLogValues : ValueType {
    internal static int MaxCachedFormatters;
    private static string NullFormat;
    private static int _count;
    private static ConcurrentDictionary`2<string, LogValuesFormatter> _formatters;
    private LogValuesFormatter _formatter;
    private Object[] _values;
    private string _originalMessage;
    internal LogValuesFormatter Formatter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public FormattedLogValues(string format, Object[] values);
    private static FormattedLogValues();
    internal LogValuesFormatter get_Formatter();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.Extensions.Logging.FormattedLogValues/<GetEnumerator>d__14")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.IExternalScopeProvider {
    public abstract virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    public abstract virtual IDisposable Push(object state);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILogger {
    [NullableContextAttribute("2")]
public abstract virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
    public abstract virtual IDisposable BeginScope(TState state);
}
public interface Microsoft.Extensions.Logging.ILogger`1 {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILoggerFactory {
    public abstract virtual ILogger CreateLogger(string categoryName);
    public abstract virtual void AddProvider(ILoggerProvider provider);
}
public interface Microsoft.Extensions.Logging.ILoggerProvider {
    [NullableContextAttribute("1")]
public abstract virtual ILogger CreateLogger(string categoryName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ISupportExternalScope {
    public abstract virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.LogDefineOptions : object {
    [CompilerGeneratedAttribute]
private bool <SkipEnabledCheck>k__BackingField;
    public bool SkipEnabledCheck { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipEnabledCheck();
    [CompilerGeneratedAttribute]
public void set_SkipEnabledCheck(bool value);
}
public class Microsoft.Extensions.Logging.Logger`1 : object {
    private ILogger _logger;
    [NullableContextAttribute("1")]
public Logger`1(ILoggerFactory factory);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.ILogger.BeginScope(TState state);
    private sealed virtual override bool Microsoft.Extensions.Logging.ILogger.IsEnabled(LogLevel logLevel);
    private sealed virtual override void Microsoft.Extensions.Logging.ILogger.Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerExtensions : object {
    private static Func`3<FormattedLogValues, Exception, string> _messageFormatter;
    private static LoggerExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogDebug(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogTrace(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogInformation(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogWarning(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogError(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogCritical(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, Exception exception, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static IDisposable BeginScope(ILogger logger, string messageFormat, Object[] args);
    private static string MessageFormatter(FormattedLogValues state, Exception error);
}
public class Microsoft.Extensions.Logging.LoggerExternalScopeProvider : object {
    private AsyncLocal`1<Scope> _currentScope;
    [NullableContextAttribute("1")]
public sealed virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Push(object state);
    [CompilerGeneratedAttribute]
internal static void <ForEachScope>g__Report|2_0(Scope current, <>c__DisplayClass2_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILogger`1<T> CreateLogger(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILogger CreateLogger(ILoggerFactory factory, Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.LoggerMessage : object {
    [NullableContextAttribute("1")]
public static Func`2<ILogger, IDisposable> DefineScope(string formatString);
    [NullableContextAttribute("1")]
public static Func`3<ILogger, T1, IDisposable> DefineScope(string formatString);
    [NullableContextAttribute("1")]
public static Func`4<ILogger, T1, T2, IDisposable> DefineScope(string formatString);
    public static Func`5<ILogger, T1, T2, T3, IDisposable> DefineScope(string formatString);
    public static Func`6<ILogger, T1, T2, T3, T4, IDisposable> DefineScope(string formatString);
    public static Func`7<ILogger, T1, T2, T3, T4, T5, IDisposable> DefineScope(string formatString);
    public static Func`8<ILogger, T1, T2, T3, T4, T5, T6, IDisposable> DefineScope(string formatString);
    [NullableContextAttribute("1")]
public static Action`2<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    [NullableContextAttribute("1")]
public static Action`2<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    [NullableContextAttribute("1")]
public static Action`3<ILogger, T1, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`3<ILogger, T1, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`4<ILogger, T1, T2, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`4<ILogger, T1, T2, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`5<ILogger, T1, T2, T3, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`5<ILogger, T1, T2, T3, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`6<ILogger, T1, T2, T3, T4, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`6<ILogger, T1, T2, T3, T4, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`7<ILogger, T1, T2, T3, T4, T5, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`7<ILogger, T1, T2, T3, T4, T5, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`8<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`8<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    private static LogValuesFormatter CreateLogValuesFormatter(string formatString, int expectedNamedParameterCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.Extensions.Logging.LoggerMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEnabledCheck>k__BackingField;
    public int EventId { get; public set; }
    [NullableAttribute("2")]
public string EventName { get; public set; }
    public LogLevel Level { get; public set; }
    public string Message { get; public set; }
    public bool SkipEnabledCheck { get; public set; }
    public LoggerMessageAttribute(int eventId, LogLevel level, string message);
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_EventName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipEnabledCheck();
    [CompilerGeneratedAttribute]
public void set_SkipEnabledCheck(bool value);
}
public enum Microsoft.Extensions.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
    public static LogLevel None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.LogValuesFormatter : object {
    private static string NullValue;
    private static Char[] FormatDelimiters;
    private string _format;
    private List`1<string> _valueNames;
    [CompilerGeneratedAttribute]
private string <OriginalFormat>k__BackingField;
    public string OriginalFormat { get; private set; }
    public List`1<string> ValueNames { get; }
    public LogValuesFormatter(string format);
    private static LogValuesFormatter();
    [CompilerGeneratedAttribute]
public string get_OriginalFormat();
    [CompilerGeneratedAttribute]
private void set_OriginalFormat(string value);
    public List`1<string> get_ValueNames();
    private static int FindBraceIndex(string format, char brace, int startIndex, int endIndex);
    private static int FindIndexOfAny(string format, Char[] chars, int startIndex, int endIndex);
    public string Format(Object[] values);
    internal string FormatWithOverwrite(Object[] values);
    internal string Format();
    internal string Format(object arg0);
    [NullableContextAttribute("2")]
internal string Format(object arg0, object arg1);
    [NullableContextAttribute("2")]
internal string Format(object arg0, object arg1, object arg2);
    public KeyValuePair`2<string, object> GetValue(Object[] values, int index);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetValues(Object[] values);
    private object FormatArgument(object value);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullScope Instance { get; }
    private static NullScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    [NullableAttribute("0")]
internal static ResourceManager ResourceManager { get; }
    [NullableAttribute("0")]
internal static string UnexpectedNumberOfNamedParameters { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    [NullableContextAttribute("0")]
internal static ResourceManager get_ResourceManager();
    [NullableContextAttribute("0")]
internal static string get_UnexpectedNumberOfNamedParameters();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    [NullableContextAttribute("2")]
public void Insert(int index, string s);
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
