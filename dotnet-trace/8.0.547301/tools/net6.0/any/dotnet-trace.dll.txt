[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Diagnostics.Tools.CommandLineErrorException : Exception {
    public CommandLineErrorException(string errorMessage);
}
internal static class Microsoft.Diagnostics.Tools.Trace.CollectCommandHandler : object {
    [CompilerGeneratedAttribute]
private static bool <IsQuiet>k__BackingField;
    internal static bool IsQuiet { get; internal set; }
    public static string DefaultTraceName { get; }
    [CompilerGeneratedAttribute]
internal static bool get_IsQuiet();
    [CompilerGeneratedAttribute]
internal static void set_IsQuiet(bool value);
    private static void ConsoleWriteLine(string str);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Trace.CollectCommandHandler/<Collect>d__6")]
private static Task`1<int> Collect(CancellationToken ct, IConsole console, int processId, FileInfo output, UInt32 buffersize, string providers, string profile, TraceFileFormat format, TimeSpan duration, string clrevents, string clreventlevel, string name, string diagnosticPort, bool showchildio, bool resumeRuntime, string stoppingEventProviderName, string stoppingEventEventName, string stoppingEventPayloadFilter, Nullable`1<bool> rundown);
    private static void PrintProviders(IReadOnlyList`1<EventPipeProvider> providers, Dictionary`2<string, string> enabledBy);
    private static string GetProviderDisplayString(EventPipeProvider provider);
    private static string GetSize(long length);
    public static Command CollectCommand();
    private static UInt32 DefaultCircularBufferSizeInMB();
    private static Option CircularBufferOption();
    public static string get_DefaultTraceName();
    private static Option OutputPathOption();
    private static Option ProvidersOption();
    private static Option ProfileOption();
    private static Option DurationOption();
    private static Option CLREventsOption();
    private static Option CLREventLevelOption();
    private static Option DiagnosticPortOption();
    private static Option ShowChildIOOption();
    private static Option ResumeRuntimeOption();
    private static Option StoppingEventProviderNameOption();
    private static Option StoppingEventEventNameOption();
    private static Option StoppingEventPayloadFilterOption();
    private static Option RundownOption();
}
internal static class Microsoft.Diagnostics.Tools.Trace.CommandLine.PrintReportHelper : object {
    private static string MakeFixedWidth(string text, int width);
    private static string FormatFunction(string name);
    public static List`1<string> SplitInto(string str, int n);
    internal static void TopNWriteToStdOut(List`1<CallTreeNodeBase> nodesToReport, bool isInclusive, bool isVerbose);
}
internal static class Microsoft.Diagnostics.Tools.Trace.CommonOptions : object {
    public static Option ProcessIdOption();
    public static Option NameOption();
    public static TraceFileFormat DefaultTraceFileFormat();
    public static Option FormatOption();
    public static Option ConvertFormatOption();
}
internal static class Microsoft.Diagnostics.Tools.Trace.ConvertCommandHandler : object {
    private static Byte[] NetTraceHeader;
    private static ConvertCommandHandler();
    public static int ConvertFile(IConsole console, FileInfo inputFilename, TraceFileFormat format, FileInfo output);
    public static Command ConvertCommand();
    private static Argument InputFileArgument();
    private static Option OutputOption();
    [CompilerGeneratedAttribute]
internal static bool <ConvertFile>g__ValidateNetTraceHeader|1_0(IConsole console, string filename);
    [CompilerGeneratedAttribute]
internal static int <ConvertFile>g__CopyNetTrace|1_1(IConsole console, string inputfile, string outputfile);
}
internal static class Microsoft.Diagnostics.Tools.Trace.ErrorCodes : object {
    public static int SessionCreationError;
    public static int TracingError;
    public static int ArgumentError;
    public static int UnknownError;
}
internal static class Microsoft.Diagnostics.Tools.Trace.Extensions : object {
    public static string CLREventProviderName;
    private static EventLevel defaultEventLevel;
    private static long defaultKeywords;
    private static Dictionary`2<string, long> CLREventKeywords;
    private static Extensions();
    public static List`1<EventPipeProvider> ToProviders(string providersRawInput);
    public static EventPipeProvider ToCLREventPipeProvider(string clreventslist, string clreventlevel);
    private static EventLevel GetEventLevel(string token);
    private static EventPipeProvider ToProvider(string provider);
    private static Dictionary`2<string, string> ParseArgumentString(string argument);
    private static void AddKeyValueToArgumentDict(Dictionary`2<string, string> argumentDict, string argument, int keyStart, int keyEnd, int valStart, int valEnd);
}
internal class Microsoft.Diagnostics.Tools.Trace.ListProfilesCommandHandler : object {
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Profile> <DotNETRuntimeProfiles>k__BackingField;
    internal static IEnumerable`1<Profile> DotNETRuntimeProfiles { get; }
    private static ListProfilesCommandHandler();
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Trace.ListProfilesCommandHandler/<GetProfiles>d__0")]
public static Task`1<int> GetProfiles(IConsole console);
    public static Command ListProfilesCommand();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Profile> get_DotNETRuntimeProfiles();
}
internal class Microsoft.Diagnostics.Tools.Trace.Profile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventPipeProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RundownKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryStrategy <RetryStrategy>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<EventPipeProvider> Providers { get; }
    public string Description { get; }
    public long RundownKeyword { get; public set; }
    public RetryStrategy RetryStrategy { get; public set; }
    public Profile(string name, IEnumerable`1<EventPipeProvider> providers, string description);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IEnumerable`1<EventPipeProvider> get_Providers();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public long get_RundownKeyword();
    [CompilerGeneratedAttribute]
public void set_RundownKeyword(long value);
    [CompilerGeneratedAttribute]
public RetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
public void set_RetryStrategy(RetryStrategy value);
    public static void MergeProfileAndProviders(Profile selectedProfile, List`1<EventPipeProvider> providerCollection, Dictionary`2<string, string> enabledBy);
}
internal static class Microsoft.Diagnostics.Tools.Trace.Program : object {
    public static Task`1<int> Main(String[] args);
    private static int <Main>(String[] args);
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.Tools.Trace.ReportCommandHandler : object {
    private static List`1<string> unwantedMethodNames;
    private static ReportCommandHandler();
    [ExtensionAttribute]
public static List`1<CallTreeNodeBase> ByIDSortedInclusiveMetric(CallTree callTree);
    private static Task`1<int> Report(CancellationToken ct, IConsole console, string traceFile);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Trace.ReportCommandHandler/<TopNReport>d__5")]
private static Task`1<int> TopNReport(CancellationToken ct, IConsole console, string traceFile, int number, bool inclusive, bool verbose);
    public static Command ReportCommand();
    private static Argument`1<string> FileNameArgument();
    private static Option TopNOption();
    private static Option InclusiveOption();
    private static Option VerboseOption();
}
internal enum Microsoft.Diagnostics.Tools.Trace.RetryStrategy : Enum {
    public int value__;
    public static RetryStrategy NothingToRetry;
    public static RetryStrategy DropKeywordKeepRundown;
    public static RetryStrategy DropKeywordDropRundown;
    public static RetryStrategy ForbiddenToRetry;
}
internal enum Microsoft.Diagnostics.Tools.Trace.TraceFileFormat : Enum {
    public int value__;
    public static TraceFileFormat NetTrace;
    public static TraceFileFormat Speedscope;
    public static TraceFileFormat Chromium;
}
internal static class Microsoft.Diagnostics.Tools.Trace.TraceFileFormatConverter : object {
    private static IReadOnlyDictionary`2<TraceFileFormat, string> TraceFileFormatExtensions;
    private static TraceFileFormatConverter();
    internal static string GetConvertedFilename(string fileToConvert, string outputfile, TraceFileFormat format);
    internal static void ConvertToFormat(IConsole console, TraceFileFormat format, string fileToConvert, string outputFilename);
    private static void Convert(IConsole _, TraceFileFormat format, string fileToConvert, string outputFilename, bool continueOnError);
}
[ExtensionAttribute]
public static class Microsoft.Internal.Common.CommandExtensions : object {
    [ExtensionAttribute]
public static void Add(Command command, ICommandHandler handler);
    [ExtensionAttribute]
public static CommandLineBuilder UseToolsDefaults(CommandLineBuilder builder);
}
public class Microsoft.Internal.Common.Commands.ProcessStatusCommandHandler : object {
    public static Command ProcessStatusCommand(string description);
    private static void MakeFixedWidth(string text, int width, StringBuilder sb, bool leftPad, bool truncateFront);
    public static void ProcessStatus(IConsole console);
    private static Process GetProcessById(int processId);
    private static string GetArgs(Process process);
    [CompilerGeneratedAttribute]
internal static int <ProcessStatus>g__GetColumnWidth|4_0(IEnumerable`1<int> fieldWidths);
    [CompilerGeneratedAttribute]
internal static void <ProcessStatus>g__FormatTableRows|4_1(List`1<ProcessDetails> rows, StringBuilder tableText);
}
internal static class Microsoft.Internal.Common.Utils.CommandUtils : object {
    public static int FindProcessIdWithName(string name);
    public static bool ValidateArgumentsForChildProcess(int processId, string name, string port);
    public static bool ValidateArgumentsForAttach(int processId, string name, string port, Int32& resolvedProcessId);
}
internal class Microsoft.Internal.Common.Utils.DiagnosticsClientBuilder : object {
    private string _toolName;
    private int _timeoutInSec;
    public DiagnosticsClientBuilder(string toolName, int timeoutInSec);
    private static string GetTransportName(string toolName);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.DiagnosticsClientBuilder/<Build>d__4")]
public Task`1<DiagnosticsClientHolder> Build(CancellationToken ct, int processId, string diagnosticPort, bool showChildIO, bool printLaunchCommand);
}
internal class Microsoft.Internal.Common.Utils.DiagnosticsClientHolder : object {
    public DiagnosticsClient Client;
    public IpcEndpointInfo EndpointInfo;
    private ReversedDiagnosticsServer _server;
    private string _port;
    public DiagnosticsClientHolder(DiagnosticsClient client);
    public DiagnosticsClientHolder(DiagnosticsClient client, IpcEndpointInfo endpointInfo, ReversedDiagnosticsServer server);
    public DiagnosticsClientHolder(DiagnosticsClient client, IpcEndpointInfo endpointInfo, string port, ReversedDiagnosticsServer server);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.DiagnosticsClientHolder/<Dispose>d__7")]
public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Common.Utils.LineRewriter : object {
    [CompilerGeneratedAttribute]
private int <LineToClear>k__BackingField;
    private static Nullable`1<bool> _isSetCursorPositionSupported;
    public int LineToClear { get; public set; }
    public bool IsRewriteConsoleLineSupported { get; }
    [CompilerGeneratedAttribute]
public int get_LineToClear();
    [CompilerGeneratedAttribute]
public void set_LineToClear(int value);
    public void RewriteConsoleLine();
    private void SystemConsoleLineRewriter();
    public bool get_IsRewriteConsoleLineSupported();
    [CompilerGeneratedAttribute]
private bool <get_IsRewriteConsoleLineSupported>g__EnsureInitialized|9_0();
}
internal class Microsoft.Internal.Common.Utils.ProcessLauncher : object {
    private Process _childProc;
    private Task _stdOutTask;
    private Task _stdErrTask;
    internal static ProcessLauncher Launcher;
    private bool _processStarted;
    public bool HasChildProc { get; }
    public Process ChildProc { get; }
    private static ProcessLauncher();
    public void PrepareChildProcess(String[] args);
    private static int FindUnparsedTokenIndex(String[] args);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.ProcessLauncher/<ReadAndIgnoreAllStreamAsync>d__7")]
private static Task ReadAndIgnoreAllStreamAsync(StreamReader streamToIgnore, CancellationToken cancelToken);
    public bool get_HasChildProc();
    public Process get_ChildProc();
    public bool Start(string diagnosticTransportName, CancellationToken ct, bool showChildIO, bool printLaunchCommand);
    public void Cleanup();
}
internal static class Microsoft.Internal.Common.Utils.ProcessNativeMethods : object {
    public static int ProcessBasicInformation;
    public static int ProcessWow64Information;
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr& lpPtr, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING_32& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool OpenProcessToken(IntPtr hProcess, UInt32 dwDesiredAccess, IntPtr& processToken);
    public static bool IsWow64Process(IntPtr hProcess, Boolean& wow64Process);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ProcessInformation& processInformation, int processInformationLength, Int32& returnLength);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, IntPtr& processInformation, int processInformationLength, Int32& returnLength);
}
internal enum Microsoft.Internal.Common.Utils.ReturnCode : Enum {
    public int value__;
    public static ReturnCode Ok;
    public static ReturnCode SessionCreationError;
    public static ReturnCode TracingError;
    public static ReturnCode ArgumentError;
    public static ReturnCode UnknownError;
}
internal static class Microsoft.Internal.Common.Utils.WindowsProcessExtension : object {
    public static string GetCommandLine(Process process);
    private static string GetCommandLineCore(IntPtr processHandle);
    private static bool ReadIntPtr(IntPtr hProcess, IntPtr ptr, IntPtr& readPtr);
    private static IntPtr GetPebNative(IntPtr hProcess);
    private static IntPtr GetPeb64(IntPtr hProcess);
    private static IntPtr GetPeb32(IntPtr hProcess);
    private static int GetProcessBitness(IntPtr hProcess);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
