public static class ArgParser : object {
    public static Dictionary`2<string, List`1<string>> Parse(String[] args);
}
[ExtensionAttribute]
internal static class DictionaryExtensions : object {
    [ExtensionAttribute]
public static bool GetAndRemoveParameterWithoutValue(Dictionary`2<string, List`1<string>> dictionary, string key);
    [ExtensionAttribute]
public static string GetAndRemoveParameterWithValue(Dictionary`2<string, List`1<string>> dictionary, string key);
    [ExtensionAttribute]
public static bool TryGetAndRemoveParameterWithoutValue(Dictionary`2<string, List`1<string>> dictionary, string key);
    [ExtensionAttribute]
public static bool TryGetParameterWithoutValue(Dictionary`2<string, List`1<string>> dictionary, string key);
    [ExtensionAttribute]
public static bool TryGetSingleValue(Dictionary`2<string, List`1<string>> dictionary, string key, String& value);
}
internal static class DotNetMuxer : object {
    private static string MuxerName;
    [CompilerGeneratedAttribute]
private static string <MuxerPath>k__BackingField;
    public static string MuxerPath { get; }
    private static DotNetMuxer();
    [CompilerGeneratedAttribute]
public static string get_MuxerPath();
    public static string MuxerPathOrDefault();
    private static string TryFindMuxerPath();
}
internal static class MsBuild : object {
    [CompilerGeneratedAttribute]
private static string <MsBuildName>k__BackingField;
    public static string MsBuildName { get; }
    private static MsBuild();
    [CompilerGeneratedAttribute]
public static string get_MsBuildName();
}
internal class Program : object {
    private static HashSet`1<string> HelpArgs;
    private static HashSet`1<string> OutputFileArgs;
    private static Version Version452;
    private string BuildStdProps;
    private string Configuration;
    private bool Force32bit;
    private string FxVersion;
    private bool InternalDiagnostics;
    private string MsBuildVerbosity;
    private bool NoBuild;
    private bool NoColor;
    private Dictionary`2<string, List`1<string>> ParsedArgs;
    private bool Quiet;
    private string ThisAssemblyPath;
    private bool UseMsBuild;
    private string DefaultMsBuildVerbosity { get; }
    private static Program();
    private string get_DefaultMsBuildVerbosity();
    private static int Main(String[] args);
    private int Execute(String[] args);
    private ProcessStartInfo GetMsBuildProcessStartInfo(string testProject);
    private String[] GetTargetFrameworks(string testProject);
    private static void PrintUsage();
    private int RunTargetFramework(string testProject, string targetFramework, bool amendOutputFileNames);
    private ProcessStartInfo CheckForMono(ProcessStartInfo psi);
    private int RunDesktopProject(string outputPath, string targetFileName, string extraArgs);
    private int RunDotNetCoreProject(string outputPath, string assemblyName, string targetFileName, string extraArgs, string fxVersion, string netCoreAppVersion);
    private string ToArgumentsString(Dictionary`2<string, List`1<string>> parsedArgs);
    private void WriteLine(string message);
    private void WriteLineDiagnostics(string message);
    private void WriteLineError(string message);
    private void WriteLineWarning(string message);
    private void WriteLineWithColor(ConsoleColor color, string message, TextWriter writer);
}
internal static class Xunit.ConsoleHelper : object {
    internal static Action ResetColor;
    internal static Action`1<ConsoleColor> SetForegroundColor;
    private static ConsoleHelper();
    private static void SetForegroundColorANSI(ConsoleColor c);
    private static void SetForegroundColorConsole(ConsoleColor c);
    private static void ResetColorANSI();
    private static void ResetColorConsole();
}
