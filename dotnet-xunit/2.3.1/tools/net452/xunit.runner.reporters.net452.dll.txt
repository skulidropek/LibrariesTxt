internal static class Xunit.EnvironmentHelper : object {
    public static string GetEnvironmentVariable(string variable);
}
public class Xunit.Runner.Reporters.AppVeyorClient : object {
    private IRunnerLogger logger;
    private string baseUri;
    private HttpClient client;
    private MediaTypeWithQualityHeaderValue jsonMediaType;
    private Task workTask;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) previousErrors;
    private ManualResetEventSlim finished;
    private ManualResetEventSlim workEvent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shouldExit;
    private ConcurrentQueue`1<IDictionary`2<string, object>> addQueue;
    private ConcurrentQueue`1<IDictionary`2<string, object>> updateQueue;
    public AppVeyorClient(IRunnerLogger logger, string baseUri);
    public void WaitOne(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.AppVeyorClient/<RunLoop>d__13")]
private Task RunLoop();
    public void AddTest(IDictionary`2<string, object> request);
    public void UpdateTest(IDictionary`2<string, object> request);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.AppVeyorClient/<SendRequest>d__16")]
private Task SendRequest(HttpMethod method, ICollection`1<IDictionary`2<string, object>> body);
    private static string ToJson(IEnumerable`1<IDictionary`2<string, object>> data);
}
public class Xunit.Runner.Reporters.AppVeyorReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.AppVeyorReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    private static int MaxLength;
    private ConcurrentDictionary`2<string, Tuple`2<string, Dictionary`2<string, int>>> assemblyNames;
    private string baseUri;
    private AppVeyorClient client;
    private int assembliesInFlight;
    private object clientLock;
    public AppVeyorReporterMessageHandler(IRunnerLogger logger, string baseUri);
    private void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private static string GetFinishedTestName(string methodName, Dictionary`2<string, int> testMethods);
    private void AppVeyorAddTest(string testName, string testFramework, string fileName, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    private void AppVeyorUpdateTest(string testName, string testFramework, string fileName, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    private static string TrimStdOut(string str);
}
[ExtensionAttribute]
public static class Xunit.Runner.Reporters.JsonExtentions : object {
    private static AddFields AddFieldsForITestCollectionMessage;
    private static AddFields AddFieldsForIFinishedMessage;
    private static AddFields AddFieldsForITestResultMessage;
    private static AddFields AddFieldsForITestMessage;
    private static AddFields AddFieldsForIFailureInformation;
    private static Dictionary`2<Type, List`1<AddFields>> TypeToFieldAdders;
    private static JsonExtentions();
    [ExtensionAttribute]
public static string ToJson(IDictionary`2<string, object> data);
    private static void AddValue(StringBuilder sb, string name, object value);
    private static string JsonEscape(string value);
    private static Dictionary`2<string, object> initObject(string messageName, object message, Type messageType, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionStarting testCollectionStarting, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionFinished testCollectionFinished, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestFailed testFailed, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestSkipped testSkipped, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestStarting testStarting, string flowId);
    [ExtensionAttribute]
public static string ToJson(IErrorMessage errorMessage);
    [ExtensionAttribute]
public static string ToJson(ITestPassed testPassed, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestMethodCleanupFailure ITestMethodCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCleanupFailure testCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionCleanupFailure testCollectionCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestClassCleanupFailure testClassCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestAssemblyCleanupFailure testAssemblyCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCaseCleanupFailure testAssemblyCleanupFailure);
}
public class Xunit.Runner.Reporters.JsonReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.JsonReporterMessageHandler : TestMessageSink {
    private Func`2<string, string> flowIdMapper;
    private Dictionary`2<string, string> flowMappings;
    private ReaderWriterLockSlim flowMappingsLock;
    public JsonReporterMessageHandler(IRunnerLogger logger);
    public JsonReporterMessageHandler(IRunnerLogger logger, Func`2<string, string> flowIdMapper);
    private string ToFlowId(string testCollectionName);
}
public class Xunit.Runner.Reporters.QuietReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.QuietReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    public QuietReporterMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.TeamCityDisplayNameFormatter : object {
    private int assemblyCount;
    private Dictionary`2<string, int> assemblyMappings;
    public virtual string DisplayName(ITestCollection testCollection);
    public virtual string DisplayName(ITest test);
}
public class Xunit.Runner.Reporters.TeamCityReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.TeamCityReporterMessageHandler : TestMessageSink {
    private TeamCityDisplayNameFormatter displayNameFormatter;
    private Func`2<string, string> flowIdMapper;
    private Dictionary`2<string, string> flowMappings;
    private ReaderWriterLockSlim flowMappingsLock;
    private IRunnerLogger logger;
    public TeamCityReporterMessageHandler(IRunnerLogger logger, Func`2<string, string> flowIdMapper, TeamCityDisplayNameFormatter displayNameFormatter);
    protected virtual void HandleErrorMessage(MessageHandlerArgs`1<IErrorMessage> args);
    protected virtual void HandleTestAssemblyCleanupFailure(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    protected virtual void HandleTestCollectionCleanupFailure(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    protected virtual void HandleTestCollectionFinished(MessageHandlerArgs`1<ITestCollectionFinished> args);
    protected virtual void HandleTestCollectionStarting(MessageHandlerArgs`1<ITestCollectionStarting> args);
    protected virtual void HandleTestCleanupFailure(MessageHandlerArgs`1<ITestCleanupFailure> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    protected virtual void HandleTestMethodCleanupFailure(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    private void LogError(string messageType, IFailureInformation failureInfo);
    private void LogFinish(ITestResultMessage testResult);
    private static string Escape(string value);
    private string ToFlowId(string testCollectionName);
}
public class Xunit.Runner.Reporters.VerboseReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.VerboseReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    public VerboseReporterMessageHandler(IRunnerLogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(MessageHandlerArgs`1<ITestStarting> args);
}
internal class Xunit.Sdk.XunitWorkerThread : object {
    private Thread thread;
    public XunitWorkerThread(Action threadProc);
    public sealed virtual void Dispose();
    public void Join();
    public static void QueueUserWorkItem(Action backgroundTask, EventWaitHandle finished);
}
