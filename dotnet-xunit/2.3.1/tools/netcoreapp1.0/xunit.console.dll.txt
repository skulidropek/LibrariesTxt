[ExtensionAttribute]
internal static class AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetLocalCodeBase(Assembly assembly);
    public static string GetLocalCodeBase(string codeBase, char directorySeparator);
}
[ExtensionAttribute]
internal static class DictionaryExtensions : object {
    [ExtensionAttribute]
public static void Add(IDictionary`2<TKey, List`1<TValue>> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static bool Contains(IDictionary`2<TKey, List`1<TValue>> dictionary, TKey key, TValue value, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> newValue);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryIgnoringDuplicateKeys(IEnumerable`1<TValue> values, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryIgnoringDuplicateKeys(IEnumerable`1<TInput> inputValues, Func`2<TInput, TKey> keySelector, Func`2<TInput, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
}
internal static class Guard : object {
    public static void ArgumentNotNull(string argName, object argValue);
    public static void ArgumentNotNullOrEmpty(string argName, IEnumerable argValue);
    public static void ArgumentValid(string argName, string message, bool test);
    public static void FileExists(string argName, string fileName);
}
public class Xunit.ConsoleClient.CommandLine : object {
    private Stack`1<string> arguments;
    private IRunnerReporter reporter;
    private IReadOnlyList`1<IRunnerReporter> reporters;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InternalDiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailSkips>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAutoReporters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private XunitProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParallelizeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParallelizeTestCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Serialize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnFail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wait>k__BackingField;
    public bool Debug { get; protected set; }
    public bool DiagnosticMessages { get; protected set; }
    public bool InternalDiagnosticMessages { get; protected set; }
    public bool FailSkips { get; protected set; }
    public Nullable`1<int> MaxParallelThreads { get; public set; }
    public bool NoAppDomain { get; protected set; }
    public bool NoAutoReporters { get; protected set; }
    public bool NoColor { get; protected set; }
    public bool NoLogo { get; protected set; }
    public XunitProject Project { get; protected set; }
    public Nullable`1<bool> ParallelizeAssemblies { get; protected set; }
    public Nullable`1<bool> ParallelizeTestCollections { get; public set; }
    public IRunnerReporter Reporter { get; }
    public bool Serialize { get; protected set; }
    public bool StopOnFail { get; protected set; }
    public bool Wait { get; protected set; }
    protected CommandLine(IReadOnlyList`1<IRunnerReporter> reporters, String[] args, Predicate`1<string> fileExists);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
protected void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiagnosticMessages();
    [CompilerGeneratedAttribute]
protected void set_DiagnosticMessages(bool value);
    [CompilerGeneratedAttribute]
public bool get_InternalDiagnosticMessages();
    [CompilerGeneratedAttribute]
protected void set_InternalDiagnosticMessages(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailSkips();
    [CompilerGeneratedAttribute]
protected void set_FailSkips(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
public void set_MaxParallelThreads(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_NoAppDomain();
    [CompilerGeneratedAttribute]
protected void set_NoAppDomain(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoAutoReporters();
    [CompilerGeneratedAttribute]
protected void set_NoAutoReporters(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
protected void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
protected void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public XunitProject get_Project();
    [CompilerGeneratedAttribute]
protected void set_Project(XunitProject value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ParallelizeAssemblies();
    [CompilerGeneratedAttribute]
protected void set_ParallelizeAssemblies(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ParallelizeTestCollections();
    [CompilerGeneratedAttribute]
public void set_ParallelizeTestCollections(Nullable`1<bool> value);
    public IRunnerReporter get_Reporter();
    [CompilerGeneratedAttribute]
public bool get_Serialize();
    [CompilerGeneratedAttribute]
protected void set_Serialize(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopOnFail();
    [CompilerGeneratedAttribute]
protected void set_StopOnFail(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wait();
    [CompilerGeneratedAttribute]
protected void set_Wait(bool value);
    protected virtual string GetFullPath(string fileName);
    private XunitProject GetProjectFile(List`1<Tuple`2<string, string>> assemblies);
    private static void GuardNoOptionValue(KeyValuePair`2<string, string> option);
    private static bool IsConfigFile(string fileName);
    public static CommandLine Parse(IReadOnlyList`1<IRunnerReporter> reporters, String[] args);
    protected XunitProject Parse(Predicate`1<string> fileExists);
    private static KeyValuePair`2<string, string> PopOption(Stack`1<string> arguments);
    private static void EnsurePathExists(string path);
}
public class Xunit.ConsoleClient.ConsoleLogger : object {
    public virtual void WriteLine(string format, Object[] arg);
}
internal class Xunit.ConsoleClient.ConsoleRunner : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) cancel;
    private ConcurrentDictionary`2<string, ExecutionSummary> completionMessages;
    private bool failed;
    private IRunnerLogger logger;
    private IMessageSinkWithTypes reporterMessageHandler;
    public int EntryPoint(String[] args);
    private List`1<IRunnerReporter> GetAvailableRunnerReporters();
    private void PrintHeader();
    private void PrintUsage(IReadOnlyList`1<IRunnerReporter> reporters);
    private int RunProject(XunitProject project, bool serialize, Nullable`1<bool> parallelizeAssemblies, Nullable`1<bool> parallelizeTestCollections, Nullable`1<int> maxThreadCount, bool diagnosticMessages, bool noColor, bool noAppDomain, bool failSkips, bool stopOnFail, bool internalDiagnosticMessages);
    private XElement ExecuteAssembly(object consoleLock, XunitProjectAssembly assembly, bool serialize, bool needsXml, Nullable`1<bool> parallelizeTestCollections, Nullable`1<int> maxThreadCount, bool diagnosticMessages, bool noColor, bool noAppDomain, bool failSkips, bool stopOnFail, XunitFilters filters, bool internalDiagnosticMessages);
    private bool ValidateFileExists(object consoleLock, string fileName);
    [CompilerGeneratedAttribute]
private void <EntryPoint>b__5_0(object sender, ConsoleCancelEventArgs e);
    [CompilerGeneratedAttribute]
private bool <ExecuteAssembly>b__10_0();
    [CompilerGeneratedAttribute]
private bool <ExecuteAssembly>b__10_1();
    [CompilerGeneratedAttribute]
private void <ExecuteAssembly>b__10_2(string path, ExecutionSummary summary);
}
public class Xunit.ConsoleClient.DiagnosticMessageSink : TestMessageSink {
    private string assemblyDisplayName;
    private object consoleLock;
    private ConsoleColor displayColor;
    private bool noColor;
    public DiagnosticMessageSink(object consoleLock, string assemblyDisplayName, bool showDiagnostics, bool noColor, ConsoleColor displayColor);
    private void HandleDiagnosticMessage(MessageHandlerArgs`1<IDiagnosticMessage> args);
}
public enum Xunit.ConsoleClient.ParallelismOption : Enum {
    public int value__;
    public static ParallelismOption none;
    public static ParallelismOption collections;
    public static ParallelismOption assemblies;
    public static ParallelismOption all;
}
public class Xunit.ConsoleClient.Program : object {
    [STAThreadAttribute]
public static int Main(String[] args);
}
public class Xunit.ConsoleClient.Transform : object {
    public string CommandLine;
    public string Description;
    public Action`2<XElement, string> OutputHandler;
}
public class Xunit.ConsoleClient.TransformFactory : object {
    private static TransformFactory instance;
    private Dictionary`2<string, Transform> availableTransforms;
    public static List`1<Transform> AvailableTransforms { get; }
    private static TransformFactory();
    public static List`1<Transform> get_AvailableTransforms();
    public static List`1<Action`1<XElement>> GetXmlTransformers(XunitProject project);
    private static void Handler_DirectWrite(XElement xml, string outputFileName);
    private static void Handler_XslTransform(string key, string resourceName, XElement xml, string outputFileName);
}
internal static class Xunit.ConsoleHelper : object {
    internal static Action ResetColor;
    internal static Action`1<ConsoleColor> SetForegroundColor;
    private static ConsoleHelper();
    private static void SetForegroundColorANSI(ConsoleColor c);
    private static void SetForegroundColorConsole(ConsoleColor c);
    private static void ResetColorANSI();
    private static void ResetColorConsole();
}
[DefaultMemberAttribute("Item")]
internal class Xunit.JsonArray : JsonValue {
    private JsonValue[] _array;
    public int Length { get; }
    public JsonValue Item { get; }
    public JsonArray(JsonValue[] array, int line, int column);
    public int get_Length();
    public JsonValue get_Item(int index);
}
internal class Xunit.JsonBoolean : JsonValue {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public JsonBoolean(JsonToken token);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
    public static bool op_Implicit(JsonBoolean jsonBoolean);
}
internal class Xunit.JsonBuffer : object {
    public static string ValueNull;
    public static string ValueTrue;
    public static string ValueFalse;
    private StringBuilder _buffer;
    private StringBuilder _codePointBuffer;
    private TextReader _reader;
    private JsonToken _token;
    private int _line;
    private int _column;
    public JsonBuffer(TextReader reader);
    public JsonToken Read();
    private int ReadNextChar();
    private string ReadNumber(int firstRead);
    private void ReadLiteral(string literal);
    private string ReadString();
    private static bool IsWhitespace(int value);
}
internal static class Xunit.JsonDeserializer : object {
    public static JsonValue Deserialize(TextReader reader);
    private static JsonValue DeserializeInternal(JsonToken next, JsonBuffer buffer);
    private static JsonArray DeserializeArray(JsonToken head, JsonBuffer buffer);
    private static JsonObject DeserializeObject(JsonToken head, JsonBuffer buffer);
}
internal class Xunit.JsonDeserializerException : Exception {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public JsonDeserializerException(string message, Exception innerException, int line, int column);
    public JsonDeserializerException(string message, int line, int column);
    public JsonDeserializerException(string message, JsonToken nextToken);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
internal static class Xunit.JsonDeserializerResource : object {
    internal static string JSON_OpenString { get; }
    internal static string JSON_InvalidEnd { get; }
    internal static string Format_IllegalCharacter(int value);
    internal static string Format_IllegalTrailingCharacterAfterLiteral(int value, string literal);
    internal static string Format_UnrecognizedLiteral(string literal);
    internal static string Format_DuplicateObjectMemberName(string memberName);
    internal static string Format_InvalidFloatNumberFormat(string raw);
    internal static string Format_FloatNumberOverflow(string raw);
    internal static string Format_InvalidSyntax(string syntaxName, string issue);
    internal static string Format_InvalidSyntaxNotExpected(string syntaxName, char unexpected);
    internal static string Format_InvalidSyntaxNotExpected(string syntaxName, string unexpected);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, char expectation);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, string expectation);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, char expectation1, char expectation2);
    internal static string Format_InvalidTokenExpectation(string tokenValue, string expectation);
    internal static string Format_InvalidUnicode(string unicode);
    internal static string Format_UnfinishedJSON(string nextTokenValue);
    internal static string get_JSON_OpenString();
    internal static string get_JSON_InvalidEnd();
}
internal class Xunit.JsonNull : JsonValue {
    public JsonNull(int line, int column);
}
internal class Xunit.JsonNumber : JsonValue {
    private string _raw;
    private double _double;
    public double Double { get; }
    public string Raw { get; }
    public JsonNumber(JsonToken token);
    public double get_Double();
    public string get_Raw();
}
internal class Xunit.JsonObject : JsonValue {
    private IDictionary`2<string, JsonValue> _data;
    public ICollection`1<string> Keys { get; }
    public JsonObject(IDictionary`2<string, JsonValue> data, int line, int column);
    public ICollection`1<string> get_Keys();
    public JsonValue Value(string key);
    public JsonObject ValueAsJsonObject(string key);
    public JsonString ValueAsString(string key);
    public int ValueAsInt(string key);
    public bool ValueAsBoolean(string key, bool defaultValue);
    public Nullable`1<bool> ValueAsNullableBoolean(string key);
    public String[] ValueAsStringArray(string key);
}
internal class Xunit.JsonString : JsonValue {
    private string _value;
    public string Value { get; }
    public JsonString(string value, int line, int column);
    public string get_Value();
    public virtual string ToString();
    public static string op_Implicit(JsonString instance);
}
internal class Xunit.JsonToken : ValueType {
    public JsonTokenType Type;
    public string Value;
    public int Line;
    public int Column;
}
internal enum Xunit.JsonTokenType : Enum {
    public int value__;
    public static JsonTokenType LeftCurlyBracket;
    public static JsonTokenType LeftSquareBracket;
    public static JsonTokenType RightCurlyBracket;
    public static JsonTokenType RightSquareBracket;
    public static JsonTokenType Colon;
    public static JsonTokenType Comma;
    public static JsonTokenType Null;
    public static JsonTokenType True;
    public static JsonTokenType False;
    public static JsonTokenType Number;
    public static JsonTokenType String;
    public static JsonTokenType EOF;
}
internal class Xunit.JsonValue : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public JsonValue(int line, int column);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
public class Xunit.NetCoreAssemblyHelper : object {
    private string directory;
    public NetCoreAssemblyHelper(string directory);
    public sealed virtual void Dispose();
    private Assembly LoadAssembly(AssemblyLoadContext context, AssemblyName assemblyName);
    private static Assembly LoadAssembly(AssemblyLoadContext context, string assemblyPath);
    public static IDisposable SubscribeResolve(string path);
}
