public class DotNetCore.CAP.BrokerConnectionException : Exception {
    [NullableContextAttribute("1")]
public BrokerConnectionException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public CapBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    public CapBuilder AddSubscribeFilter();
    public CapBuilder AddSubscriberAssembly(Assembly[] assemblies);
    public CapBuilder AddSubscriberAssembly(Type[] handlerAssemblyMarkerTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class DotNetCore.CAP.CapHeader : ReadOnlyDictionary`2<string, string> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ResponseHeader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, string> ResponseHeader { get; internal set; }
    public CapHeader(IDictionary`2<string, string> dictionary);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_ResponseHeader();
    [CompilerGeneratedAttribute]
internal void set_ResponseHeader(IDictionary`2<string, string> value);
    public void AddResponseHeader(string key, string value);
    public void RemoveCallback();
    public void RewriteCallback(string callbackName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapMarkerService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    public CapMarkerService(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapMessageQueueMakerService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public CapMessageQueueMakerService(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<ICapOptionsExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultGroupName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GroupNamePrefix>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TopicNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SucceedMessageExpiredAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedMessageExpiredAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedRetryInterval>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<FailedInfo> <FailedThresholdCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsumerThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSubscriberParallelExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscriberParallelExecuteThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscriberParallelExecuteBufferFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePublishParallelSend>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FallbackWindowLookbackSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CollectorCleaningInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStorageLock>k__BackingField;
    internal IList`1<ICapOptionsExtension> Extensions { get; }
    public string DefaultGroupName { get; public set; }
    [NullableAttribute("2")]
public string GroupNamePrefix { get; public set; }
    [NullableAttribute("2")]
public string TopicNamePrefix { get; public set; }
    public string Version { get; public set; }
    public int SucceedMessageExpiredAfter { get; public set; }
    public int FailedMessageExpiredAfter { get; public set; }
    public int FailedRetryInterval { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<FailedInfo> FailedThresholdCallback { get; public set; }
    public int FailedRetryCount { get; public set; }
    public int ConsumerThreadCount { get; public set; }
    [ObsoleteAttribute("Renamed to EnableSubscriberParallelExecute option.")]
public bool EnableConsumerPrefetch { get; public set; }
    public bool EnableSubscriberParallelExecute { get; public set; }
    public int SubscriberParallelExecuteThreadCount { get; public set; }
    public int SubscriberParallelExecuteBufferFactor { get; public set; }
    public bool EnablePublishParallelSend { get; public set; }
    public int FallbackWindowLookbackSeconds { get; public set; }
    public int CollectorCleaningInterval { get; public set; }
    public JsonSerializerOptions JsonSerializerOptions { get; }
    public bool UseStorageLock { get; public set; }
    [CompilerGeneratedAttribute]
internal IList`1<ICapOptionsExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public string get_DefaultGroupName();
    [CompilerGeneratedAttribute]
public void set_DefaultGroupName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GroupNamePrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_GroupNamePrefix(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TopicNamePrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TopicNamePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public int get_SucceedMessageExpiredAfter();
    [CompilerGeneratedAttribute]
public void set_SucceedMessageExpiredAfter(int value);
    [CompilerGeneratedAttribute]
public int get_FailedMessageExpiredAfter();
    [CompilerGeneratedAttribute]
public void set_FailedMessageExpiredAfter(int value);
    [CompilerGeneratedAttribute]
public int get_FailedRetryInterval();
    [CompilerGeneratedAttribute]
public void set_FailedRetryInterval(int value);
    [CompilerGeneratedAttribute]
public Action`1<FailedInfo> get_FailedThresholdCallback();
    [CompilerGeneratedAttribute]
public void set_FailedThresholdCallback(Action`1<FailedInfo> value);
    [CompilerGeneratedAttribute]
public int get_FailedRetryCount();
    [CompilerGeneratedAttribute]
public void set_FailedRetryCount(int value);
    [CompilerGeneratedAttribute]
public int get_ConsumerThreadCount();
    [CompilerGeneratedAttribute]
public void set_ConsumerThreadCount(int value);
    public bool get_EnableConsumerPrefetch();
    public void set_EnableConsumerPrefetch(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSubscriberParallelExecute();
    [CompilerGeneratedAttribute]
public void set_EnableSubscriberParallelExecute(bool value);
    [CompilerGeneratedAttribute]
public int get_SubscriberParallelExecuteThreadCount();
    [CompilerGeneratedAttribute]
public void set_SubscriberParallelExecuteThreadCount(int value);
    [CompilerGeneratedAttribute]
public int get_SubscriberParallelExecuteBufferFactor();
    [CompilerGeneratedAttribute]
public void set_SubscriberParallelExecuteBufferFactor(int value);
    [CompilerGeneratedAttribute]
public bool get_EnablePublishParallelSend();
    [CompilerGeneratedAttribute]
public void set_EnablePublishParallelSend(bool value);
    [CompilerGeneratedAttribute]
public int get_FallbackWindowLookbackSeconds();
    [CompilerGeneratedAttribute]
public void set_FallbackWindowLookbackSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_CollectorCleaningInterval();
    [CompilerGeneratedAttribute]
public void set_CollectorCleaningInterval(int value);
    [CompilerGeneratedAttribute]
public JsonSerializerOptions get_JsonSerializerOptions();
    [CompilerGeneratedAttribute]
public bool get_UseStorageLock();
    [CompilerGeneratedAttribute]
public void set_UseStorageLock(bool value);
    public void RegisterExtension(ICapOptionsExtension extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapStorageMarkerService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public CapStorageMarkerService(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.CapSubscribeAttribute : TopicAttribute {
    public CapSubscribeAttribute(string name, bool isPartial);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class DotNetCore.CAP.CapTransactionBase : object {
    private ConcurrentQueue`1<MediumMessage> _bufferList;
    private IDispatcher _dispatcher;
    [CompilerGeneratedAttribute]
private bool <AutoCommit>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <DbTransaction>k__BackingField;
    public bool AutoCommit { get; public set; }
    [NullableAttribute("2")]
public object DbTransaction { get; public set; }
    protected CapTransactionBase(IDispatcher dispatcher);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoCommit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoCommit(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_DbTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_DbTransaction(object value);
    public abstract virtual void Commit();
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual void Rollback();
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
    protected internal virtual void AddToSent(MediumMessage msg);
    protected virtual void Flush();
    public virtual void Dispose();
}
internal class DotNetCore.CAP.CapTransactionHolder : object {
    [NullableAttribute("2")]
public ICapTransaction Transaction;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DotNetCore.CAP.Diagnostics.CapDiagnosticListenerNames : object {
    private static string CapPrefix;
    public static string DiagnosticListenerName;
    public static string BeforePublishMessageStore;
    public static string AfterPublishMessageStore;
    public static string ErrorPublishMessageStore;
    public static string BeforePublish;
    public static string AfterPublish;
    public static string ErrorPublish;
    public static string BeforeConsume;
    public static string AfterConsume;
    public static string ErrorConsume;
    public static string BeforeSubscriberInvoke;
    public static string AfterSubscriberInvoke;
    public static string ErrorSubscriberInvoke;
    public static string MetricListenerName;
    public static string PublishedPerSec;
    public static string ConsumePerSec;
    public static string InvokeSubscriberPerSec;
    public static string InvokeSubscriberElapsedMs;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EventSourceAttribute]
public class DotNetCore.CAP.Diagnostics.CapEventCounterSource : EventSource {
    [NullableAttribute("1")]
public static CapEventCounterSource Log;
    private IncrementingEventCounter _publishPerSecondCounter;
    private IncrementingEventCounter _consumePerSecondCounter;
    private IncrementingEventCounter _subscriberInvokePerSecondCounter;
    private EventCounter _invokeCounter;
    private static CapEventCounterSource();
    [NullableContextAttribute("1")]
protected virtual void OnEventCommand(EventCommandEventArgs args);
    public void WritePublishMetrics();
    public void WriteConsumeMetrics();
    public void WriteInvokeMetrics();
    public void WriteInvokeTimeMetrics(double elapsedMs);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Diagnostics.CapEventDataPubSend : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OperationTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportMessage <TransportMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private BrokerAddress <BrokerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElapsedTimeMs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<long> OperationTimestamp { get; public set; }
    public string Operation { get; public set; }
    public TransportMessage TransportMessage { get; public set; }
    public BrokerAddress BrokerAddress { get; public set; }
    public Nullable`1<long> ElapsedTimeMs { get; public set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OperationTimestamp();
    [CompilerGeneratedAttribute]
public void set_OperationTimestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public TransportMessage get_TransportMessage();
    [CompilerGeneratedAttribute]
public void set_TransportMessage(TransportMessage value);
    [CompilerGeneratedAttribute]
public BrokerAddress get_BrokerAddress();
    [CompilerGeneratedAttribute]
public void set_BrokerAddress(BrokerAddress value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ElapsedTimeMs();
    [CompilerGeneratedAttribute]
public void set_ElapsedTimeMs(Nullable`1<long> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Diagnostics.CapEventDataPubStore : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OperationTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElapsedTimeMs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<long> OperationTimestamp { get; public set; }
    public string Operation { get; public set; }
    public Message Message { get; public set; }
    public Nullable`1<long> ElapsedTimeMs { get; public set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OperationTimestamp();
    [CompilerGeneratedAttribute]
public void set_OperationTimestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(Message value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ElapsedTimeMs();
    [CompilerGeneratedAttribute]
public void set_ElapsedTimeMs(Nullable`1<long> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Diagnostics.CapEventDataSubExecute : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OperationTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElapsedTimeMs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<long> OperationTimestamp { get; public set; }
    public string Operation { get; public set; }
    public Message Message { get; public set; }
    [NullableAttribute("2")]
public MethodInfo MethodInfo { get; public set; }
    public Nullable`1<long> ElapsedTimeMs { get; public set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OperationTimestamp();
    [CompilerGeneratedAttribute]
public void set_OperationTimestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(Message value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ElapsedTimeMs();
    [CompilerGeneratedAttribute]
public void set_ElapsedTimeMs(Nullable`1<long> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Diagnostics.CapEventDataSubStore : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OperationTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportMessage <TransportMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private BrokerAddress <BrokerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElapsedTimeMs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<long> OperationTimestamp { get; public set; }
    public string Operation { get; public set; }
    public TransportMessage TransportMessage { get; public set; }
    public BrokerAddress BrokerAddress { get; public set; }
    public Nullable`1<long> ElapsedTimeMs { get; public set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OperationTimestamp();
    [CompilerGeneratedAttribute]
public void set_OperationTimestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public TransportMessage get_TransportMessage();
    [CompilerGeneratedAttribute]
public void set_TransportMessage(TransportMessage value);
    [CompilerGeneratedAttribute]
public BrokerAddress get_BrokerAddress();
    [CompilerGeneratedAttribute]
public void set_BrokerAddress(BrokerAddress value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ElapsedTimeMs();
    [CompilerGeneratedAttribute]
public void set_ElapsedTimeMs(Nullable`1<long> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Filter.ExceptionContext : FilterContext {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionHandled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public Exception Exception { get; public set; }
    public bool ExceptionHandled { get; public set; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    public ExceptionContext(ConsumerContext context, Exception e);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_ExceptionHandled();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandled(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Result();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Result(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Filter.ExecutedContext : FilterContext {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public object Result { get; public set; }
    [NullableContextAttribute("1")]
public ExecutedContext(ConsumerContext context, object result);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
public class DotNetCore.CAP.Filter.ExecutingContext : FilterContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; public set; }
    [NullableContextAttribute("1")]
public ExecutingContext(ConsumerContext context, Object[] arguments);
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(Object[] value);
}
public class DotNetCore.CAP.Filter.FilterContext : ConsumerContext {
    [NullableContextAttribute("1")]
public FilterContext(ConsumerContext context);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Filter.ISubscribeFilter {
    public abstract virtual Task OnSubscribeExecutingAsync(ExecutingContext context);
    public abstract virtual Task OnSubscribeExecutedAsync(ExecutedContext context);
    public abstract virtual Task OnSubscribeExceptionAsync(ExceptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class DotNetCore.CAP.Filter.SubscribeFilter : object {
    public virtual Task OnSubscribeExecutingAsync(ExecutingContext context);
    public virtual Task OnSubscribeExecutedAsync(ExecutedContext context);
    public virtual Task OnSubscribeExceptionAsync(ExceptionContext context);
}
[AttributeUsageAttribute("2048")]
public class DotNetCore.CAP.FromCapAttribute : Attribute {
}
public interface DotNetCore.CAP.IBootstrapper {
    public bool IsStarted { get; }
    public abstract virtual bool get_IsStarted();
    [NullableContextAttribute("1")]
public abstract virtual Task BootstrapAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.ICapOptionsExtension {
    public abstract virtual void AddServices(IServiceCollection services);
}
[NullableContextAttribute("2")]
public interface DotNetCore.CAP.ICapPublisher {
    [NullableAttribute("1")]
public IServiceProvider ServiceProvider { get; }
    public ICapTransaction Transaction { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual ICapTransaction get_Transaction();
    public abstract virtual void set_Transaction(ICapTransaction value);
    public abstract virtual Task PublishAsync(string name, T contentObj, string callbackName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task PublishAsync(string name, T contentObj, IDictionary`2<string, string> headers, CancellationToken cancellationToken);
    public abstract virtual void Publish(string name, T contentObj, string callbackName);
    public abstract virtual void Publish(string name, T contentObj, IDictionary`2<string, string> headers);
    [NullableContextAttribute("1")]
public abstract virtual Task PublishDelayAsync(TimeSpan delayTime, string name, T contentObj, IDictionary`2<string, string> headers, CancellationToken cancellationToken);
    public abstract virtual Task PublishDelayAsync(TimeSpan delayTime, string name, T contentObj, string callbackName, CancellationToken cancellationToken);
    public abstract virtual void PublishDelay(TimeSpan delayTime, string name, T contentObj, IDictionary`2<string, string> headers);
    public abstract virtual void PublishDelay(TimeSpan delayTime, string name, T contentObj, string callbackName);
}
public interface DotNetCore.CAP.ICapSubscribe {
}
[NullableContextAttribute("2")]
public interface DotNetCore.CAP.ICapTransaction {
    public bool AutoCommit { get; public set; }
    public object DbTransaction { get; public set; }
    public abstract virtual bool get_AutoCommit();
    public abstract virtual void set_AutoCommit(bool value);
    public abstract virtual object get_DbTransaction();
    public abstract virtual void set_DbTransaction(object value);
    public abstract virtual void Commit();
    [NullableContextAttribute("1")]
public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual void Rollback();
    [NullableContextAttribute("1")]
public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.AssemblyConsumerServiceSelector : ConsumerServiceSelector {
    private Assembly[] _assemblies;
    public AssemblyConsumerServiceSelector(IServiceProvider serviceProvider, Assembly[] assemblies);
    protected virtual IEnumerable`1<ConsumerExecutorDescriptor> FindConsumersFromInterfaceTypes(IServiceProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.Bootstrapper : BackgroundService {
    private ILogger`1<Bootstrapper> _logger;
    private IServiceProvider _serviceProvider;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    private bool _disposed;
    private IEnumerable`1<IProcessingServer> _processors;
    public bool IsStarted { get; }
    public Bootstrapper(IServiceProvider serviceProvider, ILogger`1<Bootstrapper> logger);
    public sealed virtual bool get_IsStarted();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.Bootstrapper/<BootstrapAsync>d__8")]
public sealed virtual Task BootstrapAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.Bootstrapper/<BootstrapCoreAsync>d__9")]
protected virtual Task BootstrapCoreAsync();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.Bootstrapper/<ExecuteAsync>d__11")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.Bootstrapper/<StopAsync>d__12")]
public virtual Task StopAsync(CancellationToken cancellationToken);
    private void CheckRequirement();
    public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private void <BootstrapAsync>b__8_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.CapPublisher : object {
    protected static DiagnosticListener s_diagnosticListener;
    private CapOptions _capOptions;
    private ISnowflakeId _snowflakeId;
    private IDispatcher _dispatcher;
    private IDataStorage _storage;
    private IBootstrapper _bootstrapper;
    private AsyncLocal`1<CapTransactionHolder> _asyncLocal;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    [NullableAttribute("2")]
public ICapTransaction Transaction { get; public set; }
    public CapPublisher(IServiceProvider service);
    private static CapPublisher();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [NullableContextAttribute("2")]
public sealed virtual ICapTransaction get_Transaction();
    [NullableContextAttribute("2")]
public sealed virtual void set_Transaction(ICapTransaction value);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.CapPublisher/<PublishAsync>d__14`1")]
public sealed virtual Task PublishAsync(string name, T value, IDictionary`2<string, string> headers, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("DotNetCore.CAP.Internal.CapPublisher/<PublishAsync>d__15`1")]
public sealed virtual Task PublishAsync(string name, T value, string callbackName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.CapPublisher/<PublishDelayAsync>d__16`1")]
public sealed virtual Task PublishDelayAsync(TimeSpan delayTime, string name, T value, IDictionary`2<string, string> headers, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("DotNetCore.CAP.Internal.CapPublisher/<PublishDelayAsync>d__17`1")]
public sealed virtual Task PublishDelayAsync(TimeSpan delayTime, string name, T value, string callbackName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual void Publish(string name, T value, string callbackName);
    [NullableContextAttribute("2")]
public sealed virtual void Publish(string name, T value, IDictionary`2<string, string> headers);
    [NullableContextAttribute("2")]
public sealed virtual void PublishDelay(TimeSpan delayTime, string name, T value, IDictionary`2<string, string> headers);
    [NullableContextAttribute("2")]
public sealed virtual void PublishDelay(TimeSpan delayTime, string name, T value, string callbackName);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.CapPublisher/<PublishInternalAsync>d__22`1")]
private Task PublishInternalAsync(string name, T value, IDictionary`2<string, string> headers, Nullable`1<TimeSpan> delayTime, CancellationToken cancellationToken);
    private static Nullable`1<long> TracingBefore(Message message);
    private static void TracingAfter(Nullable`1<long> tracingTimestamp, Message message);
    private static void TracingError(Nullable`1<long> tracingTimestamp, Message message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ConsumerContext : object {
    [CompilerGeneratedAttribute]
private ConsumerExecutorDescriptor <ConsumerDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private MediumMessage <MediumMessage>k__BackingField;
    public ConsumerExecutorDescriptor ConsumerDescriptor { get; }
    public Message DeliverMessage { get; }
    public MediumMessage MediumMessage { get; }
    public ConsumerContext(ConsumerContext context);
    public ConsumerContext(ConsumerExecutorDescriptor descriptor, MediumMessage message);
    [CompilerGeneratedAttribute]
public ConsumerExecutorDescriptor get_ConsumerDescriptor();
    public Message get_DeliverMessage();
    [CompilerGeneratedAttribute]
public MediumMessage get_MediumMessage();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ConsumerExecutedResult : object {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallbackName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <CallbackHeader>k__BackingField;
    public object Result { get; public set; }
    [NullableAttribute("1")]
public string MessageId { get; public set; }
    public string CallbackName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> CallbackHeader { get; public set; }
    public ConsumerExecutedResult(object result, string msgId, string callbackName, IDictionary`2<string, string> callbackHeader);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MessageId();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_CallbackName();
    [CompilerGeneratedAttribute]
public void set_CallbackName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_CallbackHeader();
    [CompilerGeneratedAttribute]
public void set_CallbackHeader(IDictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ConsumerExecutorDescriptor : object {
    [NullableAttribute("2")]
private string _topicName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TypeInfo <ServiceTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ImplTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TopicAttribute <Attribute>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TopicAttribute <ClassAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ParameterDescriptor> <Parameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TopicNamePrefix>k__BackingField;
    [NullableAttribute("2")]
public TypeInfo ServiceTypeInfo { get; public set; }
    public MethodInfo MethodInfo { get; public set; }
    public TypeInfo ImplTypeInfo { get; public set; }
    public TopicAttribute Attribute { get; public set; }
    [NullableAttribute("2")]
public TopicAttribute ClassAttribute { get; public set; }
    public IList`1<ParameterDescriptor> Parameters { get; public set; }
    [NullableAttribute("2")]
public string TopicNamePrefix { get; public set; }
    public string TopicName { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TypeInfo get_ServiceTypeInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ServiceTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_ImplTypeInfo();
    [CompilerGeneratedAttribute]
public void set_ImplTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public TopicAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(TopicAttribute value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TopicAttribute get_ClassAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ClassAttribute(TopicAttribute value);
    [CompilerGeneratedAttribute]
public IList`1<ParameterDescriptor> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<ParameterDescriptor> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TopicNamePrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TopicNamePrefix(string value);
    public string get_TopicName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ConsumerExecutorDescriptorComparer : object {
    private ILogger _logger;
    public ConsumerExecutorDescriptorComparer(ILogger logger);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ConsumerExecutorDescriptor x, ConsumerExecutorDescriptor y);
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(ConsumerExecutorDescriptor obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.ConsumerRegister : object {
    private static DiagnosticListener s_diagnosticListener;
    private ILogger _logger;
    private CapOptions _options;
    private TimeSpan _pollingDelay;
    private IServiceProvider _serviceProvider;
    [NullableAttribute("2")]
private Task _compositeTask;
    private IConsumerClientFactory _consumerClientFactory;
    private CancellationTokenSource _cts;
    private IDispatcher _dispatcher;
    private int _disposed;
    private bool _isHealthy;
    private MethodMatcherCache _selector;
    private ISerializer _serializer;
    private BrokerAddress _serverAddress;
    private IDataStorage _storage;
    public ConsumerRegister(ILogger`1<ConsumerRegister> logger, IServiceProvider serviceProvider);
    private static ConsumerRegister();
    public sealed virtual bool IsHealthy();
    public sealed virtual Task Start(CancellationToken stoppingToken);
    public sealed virtual void ReStart(bool force);
    public sealed virtual void Dispose();
    public void Pulse();
    public void Execute();
    private void RegisterMessageProcessor(IConsumerClient client);
    private void WriteLog(LogMessageEventArgs logmsg);
    private Nullable`1<long> TracingBefore(TransportMessage message, BrokerAddress broker);
    private void TracingAfter(Nullable`1<long> tracingTimestamp, TransportMessage message, BrokerAddress broker);
    private void TracingError(Nullable`1<long> tracingTimestamp, TransportMessage message, BrokerAddress broker, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ConsumerServiceSelector : object {
    private ConcurrentDictionary`2<string, List`1<RegexExecuteDescriptor`1<ConsumerExecutorDescriptor>>> _cacheList;
    private CapOptions _capOptions;
    private ILogger`1<ConsumerServiceSelector> _logger;
    private IServiceProvider _serviceProvider;
    public ConsumerServiceSelector(IServiceProvider serviceProvider);
    public sealed virtual IReadOnlyList`1<ConsumerExecutorDescriptor> SelectCandidates();
    public sealed virtual ConsumerExecutorDescriptor SelectBestCandidate(string key, IReadOnlyList`1<ConsumerExecutorDescriptor> executeDescriptor);
    protected virtual IEnumerable`1<ConsumerExecutorDescriptor> FindConsumersFromInterfaceTypes(IServiceProvider provider);
    protected virtual IEnumerable`1<ConsumerExecutorDescriptor> FindConsumersFromControllerTypes();
    [IteratorStateMachineAttribute("DotNetCore.CAP.Internal.ConsumerServiceSelector/<GetTopicAttributesDescription>d__9")]
protected IEnumerable`1<ConsumerExecutorDescriptor> GetTopicAttributesDescription(TypeInfo typeInfo, TypeInfo serviceTypeInfo);
    protected virtual void SetSubscribeAttribute(TopicAttribute attribute);
    private ConsumerExecutorDescriptor InitDescriptor(TopicAttribute attr, MethodInfo methodInfo, TypeInfo implType, TypeInfo serviceTypeInfo, IList`1<ParameterDescriptor> parameters, TopicAttribute classAttr);
    private static ConsumerExecutorDescriptor MatchUsingName(string key, IReadOnlyList`1<ConsumerExecutorDescriptor> executeDescriptor);
    private ConsumerExecutorDescriptor MatchWildcardUsingRegex(string key, IReadOnlyList`1<ConsumerExecutorDescriptor> executeDescriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DotNetCore.CAP.Internal.Helper : object {
    public static bool IsController(TypeInfo typeInfo);
    public static bool IsComplexType(Type type);
    public static string WildcardToRegex(string wildcard);
    [NullableContextAttribute("2")]
public static string GetInstanceHostname();
    public static string Normalized(string name);
    public static bool IsUsingType(Type& type);
    public static bool IsInnerIP(string ipAddress);
    private static long GetIpNum(string ipAddress);
    private static bool IsInner(long userIp, long begin, long end);
    private static bool CanConvertFromString(Type destinationType);
    private static bool IsSimpleType(Type type);
    [ExtensionAttribute]
internal static void ReThrow(Exception exception);
}
public interface DotNetCore.CAP.Internal.IConsumerRegister {
    public abstract virtual bool IsHealthy();
    public abstract virtual void ReStart(bool force);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Internal.IConsumerServiceSelector {
    public abstract virtual IReadOnlyList`1<ConsumerExecutorDescriptor> SelectCandidates();
    public abstract virtual ConsumerExecutorDescriptor SelectBestCandidate(string key, IReadOnlyList`1<ConsumerExecutorDescriptor> candidates);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Internal.IMessageSender {
    public abstract virtual Task`1<OperateResult> SendAsync(MediumMessage message);
}
public interface DotNetCore.CAP.Internal.IProcessingServer {
    [NullableContextAttribute("1")]
public abstract virtual Task Start(CancellationToken stoppingToken);
}
public interface DotNetCore.CAP.Internal.ISnowflakeId {
    public abstract virtual long NextId();
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Internal.ISubscribeExecutor {
    public abstract virtual Task`1<OperateResult> ExecuteAsync(MediumMessage message, ConsumerExecutorDescriptor descriptor, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Internal.ISubscribeInvoker {
    public abstract virtual Task`1<ConsumerExecutedResult> InvokeAsync(ConsumerContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DotNetCore.CAP.Internal.LoggerExtensions : object {
    [ExtensionAttribute]
public static void ConsumerExecutedAfterThreshold(ILogger logger, string messageId, int retries);
    [ExtensionAttribute]
public static void SenderAfterThreshold(ILogger logger, string messageId, int retries);
    [ExtensionAttribute]
public static void ExecutedThresholdCallbackFailed(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void ConsumerDuplicates(ILogger logger, string subscriber, string group);
    [ExtensionAttribute]
public static void ConsumerExecutionRetrying(ILogger logger, string messageId, int retries);
    [ExtensionAttribute]
public static void SenderRetrying(ILogger logger, string messageId, int retries);
    [ExtensionAttribute]
public static void MessageReceived(ILogger logger, string messageId, string name);
    [ExtensionAttribute]
public static void MessagePublishException(ILogger logger, string messageId, string reason, Exception ex);
    [ExtensionAttribute]
public static void ConsumerExecuting(ILogger logger, string className, string methodName, string group);
    [ExtensionAttribute]
public static void ConsumerExecuted(ILogger logger, string className, string methodName, string group, double milliseconds, string instance);
    [ExtensionAttribute]
public static void ConsumerExecuteFailed(ILogger logger, string topic, string id, string instance, Exception ex);
    [ExtensionAttribute]
public static void ServerStarting(ILogger logger);
    [ExtensionAttribute]
public static void ProcessorsStartedError(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void ServerShuttingDown(ILogger logger);
    [ExtensionAttribute]
public static void ExpectedOperationCanceledException(ILogger logger, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.MessageSender : object {
    protected static DiagnosticListener s_diagnosticListener;
    private IDataStorage _dataStorage;
    private ILogger _logger;
    private IOptions`1<CapOptions> _options;
    private ISerializer _serializer;
    private IServiceProvider _serviceProvider;
    private ITransport _transport;
    public MessageSender(ILogger`1<MessageSender> logger, IServiceProvider serviceProvider);
    private static MessageSender();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.MessageSender/<SendAsync>d__8")]
public sealed virtual Task`1<OperateResult> SendAsync(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.MessageSender/<SendWithoutRetryAsync>d__9")]
private Task`1<ValueTuple`2<bool, OperateResult>> SendWithoutRetryAsync(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.MessageSender/<SetSuccessfulState>d__10")]
private Task SetSuccessfulState(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.MessageSender/<SetFailedState>d__11")]
private Task`1<bool> SetFailedState(MediumMessage message, Exception ex);
    private bool UpdateMessageForRetry(MediumMessage message);
    private Nullable`1<long> TracingBefore(TransportMessage message, BrokerAddress broker);
    private void TracingAfter(Nullable`1<long> tracingTimestamp, TransportMessage message, BrokerAddress broker);
    private void TracingError(Nullable`1<long> tracingTimestamp, TransportMessage message, BrokerAddress broker, OperateResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.MethodMatcherCache : object {
    private IConsumerServiceSelector _selector;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IReadOnlyList`1<ConsumerExecutorDescriptor>> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, byte> <GroupConcurrent>k__BackingField;
    private ConcurrentDictionary`2<string, IReadOnlyList`1<ConsumerExecutorDescriptor>> Entries { get; }
    private ConcurrentDictionary`2<string, byte> GroupConcurrent { get; }
    public MethodMatcherCache(IConsumerServiceSelector selector);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IReadOnlyList`1<ConsumerExecutorDescriptor>> get_Entries();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, byte> get_GroupConcurrent();
    public ConcurrentDictionary`2<string, IReadOnlyList`1<ConsumerExecutorDescriptor>> GetCandidatesMethodsOfGroupNameGrouped();
    public byte GetGroupConcurrentLimit(string group);
    public List`1<string> GetAllTopics();
    public bool TryGetTopicExecutor(string topicName, string groupName, ConsumerExecutorDescriptor& matchTopic);
}
public class DotNetCore.CAP.Internal.NoopTransaction : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.ParameterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromCap>k__BackingField;
    public string Name { get; public set; }
    public Type ParameterType { get; public set; }
    public bool IsFromCap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ParameterType();
    [CompilerGeneratedAttribute]
public void set_ParameterType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsFromCap();
    [CompilerGeneratedAttribute]
public void set_IsFromCap(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.PublisherSentFailedException : Exception {
    public PublisherSentFailedException(string message);
    public PublisherSentFailedException(string message, Exception ex);
}
public class DotNetCore.CAP.Internal.SnowflakeId : object {
    public static long Twepoch;
    private static int WorkerIdBits;
    private static int TimestampBits;
    private static int SequenceBits;
    private static int MaxWorkerId;
    private static long TimestampAndSequenceMask;
    [NullableAttribute("1")]
private object _lock;
    private long _timestampAndSequence;
    [CompilerGeneratedAttribute]
private long <WorkerId>k__BackingField;
    private long WorkerId { get; private set; }
    public SnowflakeId(long workerId);
    [CompilerGeneratedAttribute]
private long get_WorkerId();
    [CompilerGeneratedAttribute]
private void set_WorkerId(long value);
    public virtual long NextId();
    private void InitTimestampAndSequence();
    private void WaitIfNecessary();
    private void Initialize(long workerId);
    private static long GetNewestTimestamp();
}
public enum DotNetCore.CAP.Internal.StatusName : Enum {
    public int value__;
    public static StatusName Failed;
    public static StatusName Scheduled;
    public static StatusName Succeeded;
    public static StatusName Delayed;
    public static StatusName Queued;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.SubscribeExecutor : object {
    private static DiagnosticListener s_diagnosticListener;
    private IDataStorage _dataStorage;
    [NullableAttribute("2")]
private string _hostName;
    private ILogger _logger;
    private CapOptions _options;
    private IServiceProvider _provider;
    [CompilerGeneratedAttribute]
private ISubscribeInvoker <Invoker>k__BackingField;
    private ISubscribeInvoker Invoker { get; }
    public SubscribeExecutor(ILogger`1<SubscribeExecutor> logger, IOptions`1<CapOptions> options, IServiceProvider provider);
    private static SubscribeExecutor();
    [CompilerGeneratedAttribute]
private ISubscribeInvoker get_Invoker();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeExecutor/<ExecuteAsync>d__10")]
public sealed virtual Task`1<OperateResult> ExecuteAsync(MediumMessage message, ConsumerExecutorDescriptor descriptor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeExecutor/<ExecuteWithoutRetryAsync>d__11")]
private Task`1<ValueTuple`2<bool, OperateResult>> ExecuteWithoutRetryAsync(MediumMessage message, ConsumerExecutorDescriptor descriptor, CancellationToken cancellationToken);
    private Task SetSuccessfulState(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeExecutor/<SetFailedState>d__13")]
private Task`1<bool> SetFailedState(MediumMessage message, Exception ex);
    private bool UpdateMessageForRetry(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeExecutor/<InvokeConsumerMethodAsync>d__15")]
private Task InvokeConsumerMethodAsync(MediumMessage message, ConsumerExecutorDescriptor descriptor, CancellationToken cancellationToken);
    private Nullable`1<long> TracingBefore(Message message, MethodInfo method);
    private void TracingAfter(Nullable`1<long> tracingTimestamp, Message message, MethodInfo method);
    private void TracingError(Nullable`1<long> tracingTimestamp, Message message, MethodInfo method, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Internal.SubscribeInvoker : object {
    private ConcurrentDictionary`2<string, ObjectMethodExecutor> _executors;
    private ISerializer _serializer;
    private IServiceProvider _serviceProvider;
    public SubscribeInvoker(IServiceProvider serviceProvider, ISerializer serializer);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeInvoker/<InvokeAsync>d__4")]
public sealed virtual Task`1<ConsumerExecutedResult> InvokeAsync(ConsumerContext context, CancellationToken cancellationToken);
    private static object GetCapProvidedParameter(ParameterDescriptor parameterDescriptor, Message message, CancellationToken cancellationToken);
    protected virtual object GetInstance(IServiceProvider provider, ConsumerContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Internal.SubscribeInvoker/<ExecuteWithParameterAsync>d__7")]
private Task`1<object> ExecuteWithParameterAsync(ObjectMethodExecutor executor, object class, Object[] parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.Internal.SubscriberExecutionFailedException : Exception {
    [NullableAttribute("1")]
private Exception _originException;
    public string StackTrace { get; }
    public string Source { get; }
    [NullableContextAttribute("1")]
public SubscriberExecutionFailedException(string message, Exception ex);
    public virtual string get_StackTrace();
    public virtual string get_Source();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public abstract class DotNetCore.CAP.Internal.TopicAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPartial>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GroupConcurrent>k__BackingField;
    public string Name { get; }
    public bool IsPartial { get; }
    public string Group { get; public set; }
    public byte GroupConcurrent { get; public set; }
    protected TopicAttribute(string name, bool isPartial);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsPartial();
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public byte get_GroupConcurrent();
    [CompilerGeneratedAttribute]
public void set_GroupConcurrent(byte value);
}
internal static class DotNetCore.CAP.Internal.Util : object {
    public static long GenerateWorkerId(int maxWorkerId);
    private static long GenerateWorkerIdBaseOnMac();
    private static long GenerateRandomWorkerId(int maxWorkerId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Messages.FailedInfo : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageType <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    public IServiceProvider ServiceProvider { get; public set; }
    public MessageType MessageType { get; public set; }
    public Message Message { get; public set; }
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    [CompilerGeneratedAttribute]
public MessageType get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(MessageType value);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(Message value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DotNetCore.CAP.Messages.Headers : object {
    public static string MessageId;
    public static string MessageName;
    public static string Group;
    public static string Type;
    public static string CorrelationId;
    public static string CorrelationSequence;
    public static string CallbackName;
    public static string ExecutionInstanceId;
    public static string SentTime;
    public static string DelayTime;
    public static string Exception;
    public static string TraceParent;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Messages.Message : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Headers { get; public set; }
    public object Value { get; public set; }
    public Message(IDictionary`2<string, string> headers, object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DotNetCore.CAP.Messages.MessageExtensions : object {
    [ExtensionAttribute]
public static string GetId(Message message);
    [ExtensionAttribute]
public static string GetName(Message message);
    [ExtensionAttribute]
public static string GetCallbackName(Message message);
    [ExtensionAttribute]
public static string GetGroup(Message message);
    [ExtensionAttribute]
public static int GetCorrelationSequence(Message message);
    [ExtensionAttribute]
public static string GetExecutionInstanceId(Message message);
    [ExtensionAttribute]
public static bool HasException(Message message);
    [ExtensionAttribute]
public static void AddOrUpdateException(Message message, Exception ex);
    [ExtensionAttribute]
public static void RemoveException(Message message);
}
public enum DotNetCore.CAP.Messages.MessageType : Enum {
    public int value__;
    public static MessageType Publish;
    public static MessageType Subscribe;
}
[IsReadOnlyAttribute]
public class DotNetCore.CAP.Messages.TransportMessage : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Headers { get; }
    public ReadOnlyMemory`1<byte> Body { get; }
    public TransportMessage(IDictionary`2<string, string> headers, ReadOnlyMemory`1<byte> body);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [NullableContextAttribute("1")]
public string GetId();
    [NullableContextAttribute("1")]
public string GetName();
    [NullableContextAttribute("2")]
public string GetGroup();
    [NullableContextAttribute("2")]
public string GetCorrelationId();
}
public interface DotNetCore.CAP.Monitoring.IMonitoringApi {
    public abstract virtual Task`1<MediumMessage> GetPublishedMessageAsync(long id);
    public abstract virtual Task`1<MediumMessage> GetReceivedMessageAsync(long id);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<StatisticsDto> GetStatisticsAsync();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<PagedQueryResult`1<MessageDto>> GetMessagesAsync(MessageQueryDto queryDto);
    public abstract virtual ValueTask`1<int> PublishedFailedCount();
    public abstract virtual ValueTask`1<int> PublishedSucceededCount();
    public abstract virtual ValueTask`1<int> ReceivedFailedCount();
    public abstract virtual ValueTask`1<int> ReceivedSucceededCount();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IDictionary`2<DateTime, int>> HourlySucceededJobs(MessageType type);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IDictionary`2<DateTime, int>> HourlyFailedJobs(MessageType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Monitoring.MessageDto : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpiresAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Retries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusName>k__BackingField;
    public string Id { get; public set; }
    public string Version { get; public set; }
    [NullableAttribute("2")]
public string Group { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Content { get; public set; }
    public DateTime Added { get; public set; }
    public Nullable`1<DateTime> ExpiresAt { get; public set; }
    public int Retries { get; public set; }
    public string StatusName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Group();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Content();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Added();
    [CompilerGeneratedAttribute]
public void set_Added(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExpiresAt();
    [CompilerGeneratedAttribute]
public void set_ExpiresAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public int get_Retries();
    [CompilerGeneratedAttribute]
public void set_Retries(int value);
    [CompilerGeneratedAttribute]
public string get_StatusName();
    [CompilerGeneratedAttribute]
public void set_StatusName(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Monitoring.MessageQueryDto : object {
    [CompilerGeneratedAttribute]
private MessageType <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    public MessageType MessageType { get; public set; }
    public string Group { get; public set; }
    public string Name { get; public set; }
    public string Content { get; public set; }
    public string StatusName { get; public set; }
    public int CurrentPage { get; public set; }
    public int PageSize { get; public set; }
    [CompilerGeneratedAttribute]
public MessageType get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(MessageType value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_StatusName();
    [CompilerGeneratedAttribute]
public void set_StatusName(string value);
    [CompilerGeneratedAttribute]
public int get_CurrentPage();
    [CompilerGeneratedAttribute]
public void set_CurrentPage(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
}
public class DotNetCore.CAP.Monitoring.PagedQueryResult`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Totals>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<T> Items { get; public set; }
    public long Totals { get; public set; }
    public int PageIndex { get; public set; }
    public int PageSize { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<T> value);
    [CompilerGeneratedAttribute]
public long get_Totals();
    [CompilerGeneratedAttribute]
public void set_Totals(long value);
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
}
public class DotNetCore.CAP.Monitoring.StatisticsDto : object {
    [CompilerGeneratedAttribute]
private int <Servers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Subscribers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishedSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishedDelayed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceivedSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishedFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceivedFailed>k__BackingField;
    public int Servers { get; public set; }
    public int Subscribers { get; public set; }
    public int PublishedSucceeded { get; public set; }
    public int PublishedDelayed { get; public set; }
    public int ReceivedSucceeded { get; public set; }
    public int PublishedFailed { get; public set; }
    public int ReceivedFailed { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Servers();
    [CompilerGeneratedAttribute]
public void set_Servers(int value);
    [CompilerGeneratedAttribute]
public int get_Subscribers();
    [CompilerGeneratedAttribute]
public void set_Subscribers(int value);
    [CompilerGeneratedAttribute]
public int get_PublishedSucceeded();
    [CompilerGeneratedAttribute]
public void set_PublishedSucceeded(int value);
    [CompilerGeneratedAttribute]
public int get_PublishedDelayed();
    [CompilerGeneratedAttribute]
public void set_PublishedDelayed(int value);
    [CompilerGeneratedAttribute]
public int get_ReceivedSucceeded();
    [CompilerGeneratedAttribute]
public void set_ReceivedSucceeded(int value);
    [CompilerGeneratedAttribute]
public int get_PublishedFailed();
    [CompilerGeneratedAttribute]
public void set_PublishedFailed(int value);
    [CompilerGeneratedAttribute]
public int get_ReceivedFailed();
    [CompilerGeneratedAttribute]
public void set_ReceivedFailed(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.OperateError : ValueType {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Code { get; public set; }
    public string Description { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(OperateError left, OperateError right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(OperateError left, OperateError right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(OperateError other);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.OperateResult : ValueType {
    private Nullable`1<OperateError> _operateError;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool Succeeded { get; public set; }
    public Exception Exception { get; public set; }
    public static OperateResult Success { get; }
    public OperateResult(bool succeeded, Exception exception, Nullable`1<OperateError> error);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public void set_Succeeded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public static OperateResult get_Success();
    [NullableContextAttribute("1")]
public static OperateResult Failed(Exception ex, Nullable`1<OperateError> errors);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(OperateResult x, OperateResult y);
    public sealed virtual int GetHashCode(OperateResult obj);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Persistence.IDataStorage {
    public abstract virtual Task`1<bool> AcquireLockAsync(string key, TimeSpan ttl, string instance, CancellationToken token);
    public abstract virtual Task ReleaseLockAsync(string key, string instance, CancellationToken token);
    public abstract virtual Task RenewLockAsync(string key, TimeSpan ttl, string instance, CancellationToken token);
    public abstract virtual Task ChangePublishStateToDelayedAsync(String[] ids);
    public abstract virtual Task ChangePublishStateAsync(MediumMessage message, StatusName state, object transaction);
    public abstract virtual Task ChangeReceiveStateAsync(MediumMessage message, StatusName state);
    public abstract virtual Task`1<MediumMessage> StoreMessageAsync(string name, Message content, object transaction);
    public abstract virtual Task StoreReceivedExceptionMessageAsync(string name, string group, string content);
    public abstract virtual Task`1<MediumMessage> StoreReceivedMessageAsync(string name, string group, Message content);
    public abstract virtual Task`1<int> DeleteExpiresAsync(string table, DateTime timeout, int batchCount, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<MediumMessage>> GetPublishedMessagesOfNeedRetry(TimeSpan lookbackSeconds);
    public abstract virtual Task ScheduleMessagesOfDelayedAsync(Func`3<object, IEnumerable`1<MediumMessage>, Task> scheduleTask, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<MediumMessage>> GetReceivedMessagesOfNeedRetry(TimeSpan lookbackSeconds);
    public abstract virtual IMonitoringApi GetMonitoringApi();
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Persistence.IStorageInitializer {
    public abstract virtual Task InitializeAsync(CancellationToken cancellationToken);
    public abstract virtual string GetPublishedTableName();
    public abstract virtual string GetReceivedTableName();
    public abstract virtual string GetLockTableName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Persistence.MediumMessage : object {
    [CompilerGeneratedAttribute]
private string <DbId>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpiresAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Retries>k__BackingField;
    public string DbId { get; public set; }
    public Message Origin { get; public set; }
    public string Content { get; public set; }
    public DateTime Added { get; public set; }
    public Nullable`1<DateTime> ExpiresAt { get; public set; }
    public int Retries { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbId();
    [CompilerGeneratedAttribute]
public void set_DbId(string value);
    [CompilerGeneratedAttribute]
public Message get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(Message value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Added();
    [CompilerGeneratedAttribute]
public void set_Added(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExpiresAt();
    [CompilerGeneratedAttribute]
public void set_ExpiresAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public int get_Retries();
    [CompilerGeneratedAttribute]
public void set_Retries(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.CapProcessingServer : object {
    private CancellationTokenSource _cts;
    private ILogger _logger;
    private ILoggerFactory _loggerFactory;
    private IServiceProvider _provider;
    [NullableAttribute("2")]
private Task _compositeTask;
    private ProcessingContext _context;
    private bool _disposed;
    public CapProcessingServer(ILogger`1<CapProcessingServer> logger, ILoggerFactory loggerFactory, IServiceProvider provider);
    public sealed virtual Task Start(CancellationToken stoppingToken);
    public sealed virtual void Dispose();
    private IProcessor InfiniteRetry(IProcessor inner);
    private IProcessor[] GetProcessors();
    [CompilerGeneratedAttribute]
private void <Start>b__8_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task <Start>b__8_1(IProcessor p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.CollectorProcessor : object {
    private static int ItemBatch;
    private TimeSpan _delay;
    private ILogger _logger;
    private IServiceProvider _serviceProvider;
    private String[] _tableNames;
    private TimeSpan _waitingInterval;
    public CollectorProcessor(ILogger`1<CollectorProcessor> logger, IOptions`1<CapOptions> options, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.CollectorProcessor/<ProcessAsync>d__7")]
public virtual Task ProcessAsync(ProcessingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.Dispatcher : object {
    private CancellationTokenSource _delayCts;
    private ISubscribeExecutor _executor;
    private ILogger`1<Dispatcher> _logger;
    private CapOptions _options;
    private IMessageSender _sender;
    private IDataStorage _storage;
    private PriorityQueue`2<MediumMessage, long> _schedulerQueue;
    private bool _enableParallelExecute;
    private bool _enableParallelSend;
    private int _pChannelSize;
    [NullableAttribute("2")]
private CancellationTokenSource _tasksCts;
    private Channel`1<MediumMessage> _publishedChannel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Channel`1<ValueTuple`2<MediumMessage, ConsumerExecutorDescriptor>> _receivedChannel;
    private long _nextSendTime;
    public Dispatcher(ILogger`1<Dispatcher> logger, IMessageSender sender, IOptions`1<CapOptions> options, ISubscribeExecutor executor, IDataStorage storage);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<Start>d__15")]
public sealed virtual Task Start(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<EnqueueToScheduler>d__16")]
public sealed virtual ValueTask EnqueueToScheduler(MediumMessage message, DateTime publishTime, object transaction);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<EnqueueToPublish>d__17")]
public sealed virtual ValueTask EnqueueToPublish(MediumMessage message);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<EnqueueToExecute>d__18")]
public sealed virtual ValueTask EnqueueToExecute(MediumMessage message, ConsumerExecutorDescriptor descriptor);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<Sending>d__20")]
private ValueTask Sending();
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<Processing>d__21")]
private ValueTask Processing();
    [CompilerGeneratedAttribute]
private void <Start>b__15_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task`1<ValueTask> <Start>b__15_1(int _);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("DotNetCore.CAP.Processor.Dispatcher/<<Start>b__15_2>d")]
[CompilerGeneratedAttribute]
private Task <Start>b__15_2();
    [CompilerGeneratedAttribute]
private void <Start>b__15_3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.InfiniteRetryProcessor : object {
    private IProcessor _inner;
    private ILogger _logger;
    public InfiniteRetryProcessor(IProcessor inner, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.InfiniteRetryProcessor/<ProcessAsync>d__3")]
public sealed virtual Task ProcessAsync(ProcessingContext context);
    [NullableContextAttribute("2")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Processor.IProcessor {
    public abstract virtual Task ProcessAsync(ProcessingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.MessageDelayedProcessor : object {
    private ILogger`1<MessageDelayedProcessor> _logger;
    private IDispatcher _dispatcher;
    private TimeSpan _waitingInterval;
    public MessageDelayedProcessor(ILogger`1<MessageDelayedProcessor> logger, IDispatcher dispatcher);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageDelayedProcessor/<ProcessAsync>d__4")]
public virtual Task ProcessAsync(ProcessingContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageDelayedProcessor/<ProcessDelayedAsync>d__5")]
private Task ProcessDelayedAsync(IDataStorage connection, ProcessingContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageDelayedProcessor/<<ProcessDelayedAsync>g__ScheduleTask|5_0>d")]
[CompilerGeneratedAttribute]
private Task <ProcessDelayedAsync>g__ScheduleTask|5_0(object transaction, IEnumerable`1<MediumMessage> messages);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.MessageNeedToRetryProcessor : object {
    private static int MinSuggestedValueForFallbackWindowLookbackSeconds;
    private ILogger`1<MessageNeedToRetryProcessor> _logger;
    private IDispatcher _dispatcher;
    private TimeSpan _waitingInterval;
    private IOptions`1<CapOptions> _options;
    private IDataStorage _dataStorage;
    private TimeSpan _ttl;
    private TimeSpan _lookbackSeconds;
    private string _instance;
    [NullableAttribute("2")]
private Task _failedRetryConsumeTask;
    public MessageNeedToRetryProcessor(IOptions`1<CapOptions> options, ILogger`1<MessageNeedToRetryProcessor> logger, IDispatcher dispatcher, IDataStorage dataStorage);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageNeedToRetryProcessor/<ProcessAsync>d__11")]
public virtual Task ProcessAsync(ProcessingContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageNeedToRetryProcessor/<ProcessPublishedAsync>d__12")]
private Task ProcessPublishedAsync(IDataStorage connection, ProcessingContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageNeedToRetryProcessor/<ProcessReceivedAsync>d__13")]
private Task ProcessReceivedAsync(IDataStorage connection, ProcessingContext context);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.MessageNeedToRetryProcessor/<GetSafelyAsync>d__14`1")]
private Task`1<IEnumerable`1<T>> GetSafelyAsync(Func`2<TimeSpan, Task`1<IEnumerable`1<T>>> getMessagesAsync, TimeSpan lookbackSeconds);
    private void CheckSafeOptionsSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.ProcessingContext : object {
    [NullableAttribute("2")]
private IServiceScope _scope;
    [CompilerGeneratedAttribute]
private IServiceProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider Provider { get; private set; }
    public CancellationToken CancellationToken { get; }
    public bool IsStopping { get; }
    private ProcessingContext(ProcessingContext other);
    public ProcessingContext(IServiceProvider provider, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IServiceProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(IServiceProvider value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public bool get_IsStopping();
    public sealed virtual void Dispose();
    public void ThrowIfStopping();
    public ProcessingContext CreateScope();
    public Task WaitAsync(TimeSpan timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Processor.TransportCheckProcessor : object {
    private ILogger`1<TransportCheckProcessor> _logger;
    private IConsumerRegister _register;
    private TimeSpan _waitingInterval;
    public TransportCheckProcessor(ILogger`1<TransportCheckProcessor> logger, IConsumerRegister register);
    [AsyncStateMachineAttribute("DotNetCore.CAP.Processor.TransportCheckProcessor/<ProcessAsync>d__4")]
public virtual Task ProcessAsync(ProcessingContext context);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Serialization.ISerializer {
    public abstract virtual string Serialize(Message message);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<TransportMessage> SerializeAsync(Message message);
    public abstract virtual Message Deserialize(string json);
    [NullableContextAttribute("2")]
public abstract virtual ValueTask`1<Message> DeserializeAsync(TransportMessage transportMessage, Type valueType);
    public abstract virtual object Deserialize(object value, Type valueType);
    public abstract virtual bool IsJsonType(object jsonObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Serialization.JsonUtf8Serializer : object {
    private JsonSerializerOptions _jsonSerializerOptions;
    public JsonUtf8Serializer(IOptions`1<CapOptions> capOptions);
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<TransportMessage> SerializeAsync(Message message);
    [NullableContextAttribute("2")]
public sealed virtual ValueTask`1<Message> DeserializeAsync(TransportMessage transportMessage, Type valueType);
    public sealed virtual string Serialize(Message message);
    public sealed virtual Message Deserialize(string json);
    public sealed virtual object Deserialize(object value, Type valueType);
    public sealed virtual bool IsJsonType(object jsonObject);
}
public class DotNetCore.CAP.SubscriberNotFoundException : Exception {
    [NullableContextAttribute("1")]
public SubscriberNotFoundException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Transport.BrokerAddress : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    public string Name { get; public set; }
    public string Endpoint { get; public set; }
    public BrokerAddress(string address);
    public BrokerAddress(string name, string endpoint);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Transport.IConsumerClient {
    public BrokerAddress BrokerAddress { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<TransportMessage, object, Task> OnMessageCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<LogMessageEventArgs> OnLogCallback { get; public set; }
    public abstract virtual BrokerAddress get_BrokerAddress();
    public virtual ICollection`1<string> FetchTopics(IEnumerable`1<string> topicNames);
    public abstract virtual void Subscribe(IEnumerable`1<string> topics);
    public abstract virtual void Listening(TimeSpan timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual void Commit(object sender);
    [NullableContextAttribute("2")]
public abstract virtual void Reject(object sender);
    public abstract virtual Func`3<TransportMessage, object, Task> get_OnMessageCallback();
    public abstract virtual void set_OnMessageCallback(Func`3<TransportMessage, object, Task> value);
    public abstract virtual Action`1<LogMessageEventArgs> get_OnLogCallback();
    public abstract virtual void set_OnLogCallback(Action`1<LogMessageEventArgs> value);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Transport.IConsumerClientFactory {
    public abstract virtual IConsumerClient Create(string groupName, byte groupConcurrent);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Transport.IDispatcher {
    public abstract virtual ValueTask EnqueueToPublish(MediumMessage message);
    public abstract virtual ValueTask EnqueueToExecute(MediumMessage message, ConsumerExecutorDescriptor descriptor);
    public abstract virtual ValueTask EnqueueToScheduler(MediumMessage message, DateTime publishTime, object transaction);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.Transport.ITransport {
    public BrokerAddress BrokerAddress { get; }
    public abstract virtual BrokerAddress get_BrokerAddress();
    public abstract virtual Task`1<OperateResult> SendAsync(TransportMessage message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DotNetCore.CAP.Transport.LogMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private MqLogType <LogType>k__BackingField;
    public string Reason { get; public set; }
    public MqLogType LogType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
    [CompilerGeneratedAttribute]
public MqLogType get_LogType();
    [CompilerGeneratedAttribute]
public void set_LogType(MqLogType value);
}
public enum DotNetCore.CAP.Transport.MqLogType : Enum {
    public int value__;
    public static MqLogType ConsumerCancelled;
    public static MqLogType ConsumerRegistered;
    public static MqLogType ConsumerUnregistered;
    public static MqLogType ConsumerShutdown;
    public static MqLogType ConsumeError;
    public static MqLogType ConsumeRetries;
    public static MqLogType ServerConnError;
    public static MqLogType ExceptionReceived;
    public static MqLogType AsyncErrorEvent;
    public static MqLogType ConnectError;
    public static MqLogType InvalidIdFormat;
    public static MqLogType MessageNotInflight;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CapBuilder AddCap(IServiceCollection services, Action`1<CapOptions> setupAction);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.AwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private Type <AwaiterType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <AwaiterIsCompletedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterGetResultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterUnsafeOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <GetAwaiterMethod>k__BackingField;
    public Type AwaiterType { get; }
    public PropertyInfo AwaiterIsCompletedProperty { get; }
    public MethodInfo AwaiterGetResultMethod { get; }
    public MethodInfo AwaiterOnCompletedMethod { get; }
    public MethodInfo AwaiterUnsafeOnCompletedMethod { get; }
    public Type ResultType { get; }
    public MethodInfo GetAwaiterMethod { get; }
    public AwaitableInfo(Type awaiterType, PropertyInfo awaiterIsCompletedProperty, MethodInfo awaiterGetResultMethod, MethodInfo awaiterOnCompletedMethod, MethodInfo awaiterUnsafeOnCompletedMethod, Type resultType, MethodInfo getAwaiterMethod);
    [CompilerGeneratedAttribute]
public Type get_AwaiterType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_AwaiterIsCompletedProperty();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterGetResultMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterOnCompletedMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterUnsafeOnCompletedMethod();
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
public MethodInfo get_GetAwaiterMethod();
    public static bool IsTypeAwaitable(Type type, AwaitableInfo& awaitableInfo);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.CoercedAwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private AwaitableInfo <AwaitableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <CoercerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CoercerResultType>k__BackingField;
    public AwaitableInfo AwaitableInfo { get; }
    public Expression CoercerExpression { get; }
    public Type CoercerResultType { get; }
    public bool RequiresCoercion { get; }
    public CoercedAwaitableInfo(AwaitableInfo awaitableInfo);
    public CoercedAwaitableInfo(Expression coercerExpression, Type coercerResultType, AwaitableInfo coercedAwaitableInfo);
    [CompilerGeneratedAttribute]
public AwaitableInfo get_AwaitableInfo();
    [CompilerGeneratedAttribute]
public Expression get_CoercerExpression();
    [CompilerGeneratedAttribute]
public Type get_CoercerResultType();
    public bool get_RequiresCoercion();
    public static bool IsTypeAwaitable(Type type, CoercedAwaitableInfo& info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutor : object {
    private static ConstructorInfo _objectMethodExecutorAwaitableConstructor;
    [NullableAttribute("2")]
private MethodExecutor _executor;
    [NullableAttribute("2")]
private MethodExecutorAsync _executorAsync;
    [NullableAttribute("2")]
private Object[] _parameterDefaultValues;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <MethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TargetTypeInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <AsyncResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MethodReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMethodAsync>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public ParameterInfo[] MethodParameters { get; }
    public TypeInfo TargetTypeInfo { get; }
    [NullableAttribute("2")]
public Type AsyncResultType { get; }
    public Type MethodReturnType { get; internal set; }
    public bool IsMethodAsync { get; }
    private ObjectMethodExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    private static ObjectMethodExecutor();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_MethodParameters();
    [CompilerGeneratedAttribute]
public TypeInfo get_TargetTypeInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_AsyncResultType();
    [CompilerGeneratedAttribute]
public Type get_MethodReturnType();
    [CompilerGeneratedAttribute]
internal void set_MethodReturnType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsMethodAsync();
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    [NullableContextAttribute("2")]
public object Execute(object target, Object[] parameters);
    public ObjectMethodExecutorAwaitable ExecuteAsync(object target, Object[] parameters);
    [NullableContextAttribute("2")]
public object GetDefaultValueForParameter(int index);
    private static MethodExecutor GetExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    private static MethodExecutor WrapVoidMethod(VoidMethodExecutor executor);
    private static MethodExecutorAsync GetExecutorAsync(MethodInfo methodInfo, TypeInfo targetTypeInfo, CoercedAwaitableInfo coercedAwaitableInfo);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable : ValueType {
    private object _customAwaitable;
    private Func`2<object, object> _getAwaiterMethod;
    private Func`2<object, bool> _isCompletedMethod;
    private Func`2<object, object> _getResultMethod;
    private Action`2<object, Action> _onCompletedMethod;
    private Action`2<object, Action> _unsafeOnCompletedMethod;
    public ObjectMethodExecutorAwaitable(object customAwaitable, Func`2<object, object> getAwaiterMethod, Func`2<object, bool> isCompletedMethod, Func`2<object, object> getResultMethod, Action`2<object, Action> onCompletedMethod, Action`2<object, Action> unsafeOnCompletedMethod);
    public Awaiter GetAwaiter();
}
internal static class Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport : object {
    private static object _fsharpValuesCacheLock;
    private static Assembly _fsharpCoreAssembly;
    private static MethodInfo _fsharpAsyncStartAsTaskGenericMethod;
    private static PropertyInfo _fsharpOptionOfTaskCreationOptionsNoneProperty;
    private static PropertyInfo _fsharpOptionOfCancellationTokenNoneProperty;
    private static ObjectMethodExecutorFSharpSupport();
    public static bool TryBuildCoercerFromFSharpAsyncToAwaitable(Type possibleFSharpAsyncType, Expression& coerceToAwaitableExpression, Type& awaitableType);
    private static bool IsFSharpAsyncOpenGenericType(Type possibleFSharpAsyncGenericType);
    private static bool TryPopulateFSharpValueCaches(Type possibleFSharpAsyncGenericType);
    private static bool TypesHaveSameIdentity(Type type1, Type type2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
