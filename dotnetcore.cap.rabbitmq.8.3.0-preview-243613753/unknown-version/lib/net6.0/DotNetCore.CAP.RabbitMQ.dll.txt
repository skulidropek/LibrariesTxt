[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.RabbitMQ.ConnectionChannelPool : object {
    private static int DefaultPoolSize;
    private static object SLock;
    private Func`1<IConnection> _connectionActivator;
    private bool _isPublishConfirms;
    private ILogger`1<ConnectionChannelPool> _logger;
    private ConcurrentQueue`1<IModel> _pool;
    [NullableAttribute("2")]
private IConnection _connection;
    private int _count;
    private int _maxSize;
    [CompilerGeneratedAttribute]
private string <HostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    public string HostAddress { get; }
    public string Exchange { get; }
    public ConnectionChannelPool(ILogger`1<ConnectionChannelPool> logger, IOptions`1<CapOptions> capOptionsAccessor, IOptions`1<RabbitMQOptions> optionsAccessor);
    private static ConnectionChannelPool();
    private sealed virtual override IModel DotNetCore.CAP.RabbitMQ.IConnectionChannelPool.Rent();
    private sealed virtual override bool DotNetCore.CAP.RabbitMQ.IConnectionChannelPool.Return(IModel connection);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HostAddress();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Exchange();
    public sealed virtual IConnection GetConnection();
    public sealed virtual void Dispose();
    private static Func`1<IConnection> CreateConnection(RabbitMQOptions options);
    public virtual IModel Rent();
    public virtual bool Return(IModel channel);
}
[NullableContextAttribute("1")]
public interface DotNetCore.CAP.RabbitMQ.IConnectionChannelPool {
    public string HostAddress { get; }
    public string Exchange { get; }
    public abstract virtual string get_HostAddress();
    public abstract virtual string get_Exchange();
    public abstract virtual IConnection GetConnection();
    public abstract virtual IModel Rent();
    public abstract virtual bool Return(IModel context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer : AsyncDefaultBasicConsumer {
    private SemaphoreSlim _semaphore;
    private string _groupName;
    private bool _usingTaskRun;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TransportMessage, object, Task> _msgCallback;
    private Action`1<LogMessageEventArgs> _logCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> _customHeadersBuilder;
    private IServiceProvider _serviceProvider;
    public RabbitMQBasicConsumer(IModel model, byte concurrent, string groupName, Func`3<TransportMessage, object, Task> msgCallback, Action`1<LogMessageEventArgs> logCallback, Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> customHeadersBuilder, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer/<HandleBasicDeliver>d__8")]
public virtual Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    public void BasicAck(ulong deliveryTag);
    public void BasicReject(ulong deliveryTag);
    [AsyncStateMachineAttribute("DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer/<OnCancel>d__11")]
public virtual Task OnCancel(String[] consumerTags);
    [AsyncStateMachineAttribute("DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer/<HandleBasicCancelOk>d__12")]
public virtual Task HandleBasicCancelOk(string consumerTag);
    [AsyncStateMachineAttribute("DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer/<HandleBasicConsumeOk>d__13")]
public virtual Task HandleBasicConsumeOk(string consumerTag);
    [AsyncStateMachineAttribute("DotNetCore.CAP.RabbitMQ.RabbitMQBasicConsumer/<HandleModelShutdown>d__14")]
public virtual Task HandleModelShutdown(object model, ShutdownEventArgs reason);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(String[] consumerTags);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(string consumerTag);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string consumerTag);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(object model, ShutdownEventArgs reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClient : object {
    private static object Lock;
    private IConnectionChannelPool _connectionChannelPool;
    private IServiceProvider _serviceProvider;
    private string _exchangeName;
    private string _queueName;
    private byte _groupConcurrent;
    private RabbitMQOptions _rabbitMQOptions;
    [NullableAttribute("2")]
private RabbitMQBasicConsumer _consumer;
    [NullableAttribute("2")]
private IModel _channel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<TransportMessage, object, Task> <OnMessageCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<LogMessageEventArgs> <OnLogCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<TransportMessage, object, Task> OnMessageCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<LogMessageEventArgs> OnLogCallback { get; public set; }
    public BrokerAddress BrokerAddress { get; }
    public RabbitMQConsumerClient(string groupName, byte groupConcurrent, IConnectionChannelPool connectionChannelPool, IOptions`1<RabbitMQOptions> options, IServiceProvider serviceProvider);
    private static RabbitMQConsumerClient();
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<TransportMessage, object, Task> get_OnMessageCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMessageCallback(Func`3<TransportMessage, object, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<LogMessageEventArgs> get_OnLogCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnLogCallback(Action`1<LogMessageEventArgs> value);
    public sealed virtual BrokerAddress get_BrokerAddress();
    public sealed virtual void Subscribe(IEnumerable`1<string> topics);
    public sealed virtual void Listening(TimeSpan timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual void Commit(object sender);
    [NullableContextAttribute("2")]
public sealed virtual void Reject(object sender);
    public sealed virtual void Dispose();
    public void Connect();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory : object {
    private IConnectionChannelPool _connectionChannelPool;
    private IOptions`1<RabbitMQOptions> _rabbitMQOptions;
    private IServiceProvider _serviceProvider;
    public RabbitMQConsumerClientFactory(IOptions`1<RabbitMQOptions> rabbitMQOptions, IConnectionChannelPool channelPool, IServiceProvider serviceProvider);
    public sealed virtual IConsumerClient Create(string groupId, byte concurrent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.RabbitMQ.RabbitMQTransport : object {
    private IConnectionChannelPool _connectionChannelPool;
    private string _exchange;
    private ILogger _logger;
    public BrokerAddress BrokerAddress { get; }
    public RabbitMQTransport(ILogger`1<RabbitMQTransport> logger, IConnectionChannelPool connectionChannelPool);
    public sealed virtual BrokerAddress get_BrokerAddress();
    public sealed virtual Task`1<OperateResult> SendAsync(TransportMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetCore.CAP.RabbitMQCapOptionsExtension : object {
    private Action`1<RabbitMQOptions> _configure;
    public RabbitMQCapOptionsExtension(Action`1<RabbitMQOptions> configure);
    public sealed virtual void AddServices(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetCore.CAP.RabbitMQOptions : object {
    public static string DefaultPass;
    public static string DefaultUser;
    public static string DefaultVHost;
    public static string DefaultExchangeName;
    public static string ExchangeType;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublishConfirms>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueArgumentsOptions <QueueArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueRabbitOptions <QueueOptions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> <CustomHeadersBuilder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<ConnectionFactory> <ConnectionFactoryOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BasicQos <BasicQosOptions>k__BackingField;
    public string HostName { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public string VirtualHost { get; public set; }
    public string ExchangeName { get; public set; }
    public bool PublishConfirms { get; public set; }
    public int Port { get; public set; }
    public QueueArgumentsOptions QueueArguments { get; public set; }
    public QueueRabbitOptions QueueOptions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> CustomHeadersBuilder { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<ConnectionFactory> ConnectionFactoryOptions { get; public set; }
    [NullableAttribute("2")]
public BasicQos BasicQosOptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualHost();
    [CompilerGeneratedAttribute]
public void set_VirtualHost(string value);
    [CompilerGeneratedAttribute]
public string get_ExchangeName();
    [CompilerGeneratedAttribute]
public void set_ExchangeName(string value);
    [CompilerGeneratedAttribute]
public bool get_PublishConfirms();
    [CompilerGeneratedAttribute]
public void set_PublishConfirms(bool value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public QueueArgumentsOptions get_QueueArguments();
    [CompilerGeneratedAttribute]
public void set_QueueArguments(QueueArgumentsOptions value);
    [CompilerGeneratedAttribute]
public QueueRabbitOptions get_QueueOptions();
    [CompilerGeneratedAttribute]
public void set_QueueOptions(QueueRabbitOptions value);
    [CompilerGeneratedAttribute]
public Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> get_CustomHeadersBuilder();
    [CompilerGeneratedAttribute]
public void set_CustomHeadersBuilder(Func`3<BasicDeliverEventArgs, IServiceProvider, List`1<KeyValuePair`2<string, string>>> value);
    [CompilerGeneratedAttribute]
public Action`1<ConnectionFactory> get_ConnectionFactoryOptions();
    [CompilerGeneratedAttribute]
public void set_ConnectionFactoryOptions(Action`1<ConnectionFactory> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BasicQos get_BasicQosOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BasicQosOptions(BasicQos value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CapOptionsExtensions : object {
    [ExtensionAttribute]
public static CapOptions UseRabbitMQ(CapOptions options, string hostName);
    [ExtensionAttribute]
public static CapOptions UseRabbitMQ(CapOptions options, Action`1<RabbitMQOptions> configure);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
