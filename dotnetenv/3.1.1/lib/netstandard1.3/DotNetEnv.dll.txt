[ExtensionAttribute]
public static class DotNetEnv.Configuration.ConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddDotNetEnv(IConfigurationBuilder builder, string path, LoadOptions options);
    [ExtensionAttribute]
public static IConfigurationBuilder AddDotNetEnvMulti(IConfigurationBuilder builder, String[] paths, LoadOptions options);
}
public class DotNetEnv.Configuration.EnvConfigurationProvider : ConfigurationProvider {
    private String[] paths;
    private LoadOptions options;
    public EnvConfigurationProvider(String[] paths, LoadOptions options);
    public virtual void Load();
    private static string NormalizeKey(string key);
}
public class DotNetEnv.Configuration.EnvConfigurationSource : object {
    private String[] paths;
    private LoadOptions options;
    public EnvConfigurationSource(String[] paths, LoadOptions options);
    public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class DotNetEnv.Env : object {
    public static string DEFAULT_ENVFILENAME;
    public static ConcurrentDictionary`2<string, string> FakeEnvVars;
    private static Env();
    public static IEnumerable`1<KeyValuePair`2<string, string>> LoadMulti(String[] paths, LoadOptions options);
    public static IEnumerable`1<KeyValuePair`2<string, string>> Load(string path, LoadOptions options);
    public static IEnumerable`1<KeyValuePair`2<string, string>> Load(Stream file, LoadOptions options);
    public static IEnumerable`1<KeyValuePair`2<string, string>> LoadContents(string contents, LoadOptions options);
    public static string GetString(string key, string fallback);
    public static bool GetBool(string key, bool fallback);
    public static int GetInt(string key, int fallback);
    public static double GetDouble(string key, double fallback);
    public static LoadOptions NoEnvVars();
    public static LoadOptions NoClobber();
    public static LoadOptions TraversePath();
}
[DefaultMemberAttribute("Item")]
public class DotNetEnv.EnvReader : object {
    private static string EnvVariableNotFoundMessage;
    public string Item { get; }
    public sealed virtual string get_Item(string variable);
    public sealed virtual bool GetBoolValue(string variable);
    public sealed virtual double GetDoubleValue(string variable);
    public sealed virtual int GetIntValue(string variable);
    public sealed virtual string GetStringValue(string variable);
    public sealed virtual bool TryGetBoolValue(string variable, Boolean& value);
    public sealed virtual bool TryGetDoubleValue(string variable, Double& value);
    public sealed virtual bool TryGetIntValue(string variable, Int32& value);
    public sealed virtual bool TryGetStringValue(string variable, String& value);
}
public class DotNetEnv.EnvVariableNotFoundException : ArgumentException {
    public EnvVariableNotFoundException(string message, string paramName);
}
public enum DotNetEnv.Extensions.CreateDictionaryOption : Enum {
    public int value__;
    public static CreateDictionaryOption Throw;
    public static CreateDictionaryOption TakeFirst;
    public static CreateDictionaryOption TakeLast;
}
[ExtensionAttribute]
public static class DotNetEnv.Extensions.LinqExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDotEnvDictionary(IEnumerable`1<KeyValuePair`2<string, string>> kvps, CreateDictionaryOption option);
}
[DefaultMemberAttribute("Item")]
public interface DotNetEnv.IEnvReader {
    public string Item { get; }
    public abstract virtual string get_Item(string variable);
    public abstract virtual string GetStringValue(string variable);
    public abstract virtual bool GetBoolValue(string variable);
    public abstract virtual int GetIntValue(string variable);
    public abstract virtual double GetDoubleValue(string variable);
    public abstract virtual bool TryGetStringValue(string variable, String& value);
    public abstract virtual bool TryGetBoolValue(string variable, Boolean& value);
    public abstract virtual bool TryGetIntValue(string variable, Int32& value);
    public abstract virtual bool TryGetDoubleValue(string variable, Double& value);
}
public interface DotNetEnv.IValue {
    public abstract virtual string GetValue();
}
public class DotNetEnv.LoadOptions : object {
    public static LoadOptions DEFAULT;
    [CompilerGeneratedAttribute]
private bool <SetEnvVars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClobberExistingVars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyExactPath>k__BackingField;
    public bool SetEnvVars { get; }
    public bool ClobberExistingVars { get; }
    public bool OnlyExactPath { get; }
    public LoadOptions(bool setEnvVars, bool clobberExistingVars, bool onlyExactPath);
    public LoadOptions(LoadOptions old, Nullable`1<bool> setEnvVars, Nullable`1<bool> clobberExistingVars, Nullable`1<bool> onlyExactPath);
    private static LoadOptions();
    [CompilerGeneratedAttribute]
public bool get_SetEnvVars();
    [CompilerGeneratedAttribute]
public bool get_ClobberExistingVars();
    [CompilerGeneratedAttribute]
public bool get_OnlyExactPath();
    public static LoadOptions NoEnvVars(LoadOptions options);
    public static LoadOptions NoClobber(LoadOptions options);
    public static LoadOptions TraversePath(LoadOptions options);
    public LoadOptions NoEnvVars();
    public LoadOptions NoClobber();
    public LoadOptions TraversePath();
    public IEnumerable`1<KeyValuePair`2<string, string>> Load(string path);
    public IEnumerable`1<KeyValuePair`2<string, string>> LoadMulti(String[] paths);
}
internal class DotNetEnv.Parsers : object {
    private static Parser`1<char> DollarSign;
    private static Parser`1<char> Backslash;
    private static Parser`1<char> Underscore;
    private static Parser`1<char> InlineWhitespaceChars;
    private static string EscapeChars;
    internal static Parser`1<string> EscapedChar;
    private static Parser`1<char> Hex;
    internal static Parser`1<byte> HexByte;
    internal static Parser`1<byte> OctalByte;
    internal static Parser`1<string> OctalChar;
    internal static Parser`1<string> Utf8Char;
    internal static Parser`1<string> Utf16Char;
    internal static Parser`1<string> Utf32Char;
    private static Parser`1<char> IdentifierSpecialChars;
    internal static Parser`1<string> Identifier;
    internal static Parser`1<IValue> InterpolatedEnvVar;
    internal static Parser`1<IValue> InterpolatedBracesEnvVar;
    internal static Parser`1<IValue> JustDollarValue;
    internal static Parser`1<IValue> InterpolatedValue;
    internal static Parser`1<string> SpecialChar;
    private static Parser`1<string> InlineWhitespace;
    private static Parser`1<ValueCalculator> UnquotedValueContents;
    internal static Parser`1<ValueCalculator> UnquotedValue;
    internal static Parser`1<ValueCalculator> DoubleQuotedValueContents;
    internal static Parser`1<ValueCalculator> SingleQuotedValueContents;
    internal static Parser`1<ValueCalculator> SingleQuotedValue;
    internal static Parser`1<ValueCalculator> DoubleQuotedValue;
    internal static Parser`1<ValueCalculator> Value;
    internal static Parser`1<string> Comment;
    private static Parser`1<string> ExportExpression;
    internal static Parser`1<KeyValuePair`2<string, string>> Assignment;
    internal static Parser`1<KeyValuePair`2<string, string>> Empty;
    private static Parsers();
    public static KeyValuePair`2<string, string> SetEnvVar(KeyValuePair`2<string, string> kvp);
    public static KeyValuePair`2<string, string> DoNotSetEnvVar(KeyValuePair`2<string, string> kvp);
    public static KeyValuePair`2<string, string> NoClobberSetEnvVar(KeyValuePair`2<string, string> kvp);
    private static string ToEscapeChar(char escapedChar);
    private static byte ToOctalByte(string value);
    private static byte ToHexByte(string value);
    private static string ToUtf8Char(IEnumerable`1<byte> value);
    private static Byte[] StringToByteArray(string hex, int len);
    private static string ToUtf16Char(string hex);
    private static string ToUtf32Char(string hex);
    internal static Parser`1<string> NotControlNorWhitespace(string exceptChars);
    public static IEnumerable`1<KeyValuePair`2<string, string>> ParseDotenvFile(string contents, Func`2<KeyValuePair`2<string, string>, KeyValuePair`2<string, string>> tranform);
}
public class DotNetEnv.ValueActual : object {
    private string _value;
    public ValueActual(IEnumerable`1<string> strs);
    public ValueActual(string str);
    public sealed virtual string GetValue();
}
public class DotNetEnv.ValueCalculator : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public ValueCalculator(IEnumerable`1<IValue> values);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class DotNetEnv.ValueInterpolated : object {
    private string _id;
    public ValueInterpolated(string id);
    public sealed virtual string GetValue();
}
