public class DotNetOpenAuth.AspNet.AuthenticationResult : object {
    public static AuthenticationResult Failed;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public Exception Error { get; private set; }
    public IDictionary`2<string, string> ExtraData { get; private set; }
    public bool IsSuccessful { get; private set; }
    public string Provider { get; private set; }
    public string ProviderUserId { get; private set; }
    public string UserName { get; private set; }
    public AuthenticationResult(bool isSuccessful);
    public AuthenticationResult(Exception exception);
    public AuthenticationResult(Exception exception, string provider);
    public AuthenticationResult(bool isSuccessful, string provider, string providerUserId, string userName, IDictionary`2<string, string> extraData);
    private static AuthenticationResult();
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtraData();
    [CompilerGeneratedAttribute]
private void set_ExtraData(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
private void set_IsSuccessful(bool value);
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderUserId();
    [CompilerGeneratedAttribute]
private void set_ProviderUserId(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
}
public class DotNetOpenAuth.AspNet.Clients.AuthenticationOnlyCookieOAuthTokenManager : object {
    protected static string TokenCookieKey;
    private HttpContextBase primaryContext;
    protected HttpContextBase Context { get; }
    public AuthenticationOnlyCookieOAuthTokenManager(HttpContextBase context);
    protected HttpContextBase get_Context();
    public virtual string GetTokenSecret(string token);
    public virtual void ReplaceRequestTokenWithAccessToken(string requestToken, string accessToken, string accessTokenSecret);
    public virtual void StoreRequestToken(string requestToken, string requestTokenSecret);
    protected static string ProtectAndEncodeToken(string token, string tokenSecret);
    protected static string DecodeAndUnprotectToken(string token, string encryptedToken);
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
public class DotNetOpenAuth.AspNet.Clients.AzureADClaims : object {
    [CompilerGeneratedAttribute]
private string <Aud>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Iss>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nbf>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Oid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Appid>k__BackingField;
    [DataMemberAttribute]
public string Aud { get; public set; }
    [DataMemberAttribute]
public string Iss { get; public set; }
    [DataMemberAttribute]
public string Nbf { get; public set; }
    [DataMemberAttribute]
public string Exp { get; public set; }
    [DataMemberAttribute]
public string Oid { get; public set; }
    [DataMemberAttribute]
public string Tid { get; public set; }
    [DataMemberAttribute]
public string Appid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Aud();
    [CompilerGeneratedAttribute]
public void set_Aud(string value);
    [CompilerGeneratedAttribute]
public string get_Iss();
    [CompilerGeneratedAttribute]
public void set_Iss(string value);
    [CompilerGeneratedAttribute]
public string get_Nbf();
    [CompilerGeneratedAttribute]
public void set_Nbf(string value);
    [CompilerGeneratedAttribute]
public string get_Exp();
    [CompilerGeneratedAttribute]
public void set_Exp(string value);
    [CompilerGeneratedAttribute]
public string get_Oid();
    [CompilerGeneratedAttribute]
public void set_Oid(string value);
    [CompilerGeneratedAttribute]
public string get_Tid();
    [CompilerGeneratedAttribute]
public void set_Tid(string value);
    [CompilerGeneratedAttribute]
public string get_Appid();
    [CompilerGeneratedAttribute]
public void set_Appid(string value);
}
public class DotNetOpenAuth.AspNet.Clients.AzureADClient : OAuth2Client {
    private static string AuthorizationEndpoint;
    private static string TokenEndpoint;
    private static string GraphResource;
    private static string MetaDataEndpoint;
    private static string GraphEndpoint;
    private static string STSName;
    private string appId;
    private string appSecret;
    private string resource;
    private static X509Certificate2[] encodingcert;
    private static HashAlgorithm hash;
    private string tenantid;
    private string userid;
    public AzureADClient(string appId, string appSecret);
    public AzureADClient(string appId, string appSecret, string resource);
    protected virtual Uri GetServiceLoginUrl(Uri returnUrl);
    protected virtual IDictionary`2<string, string> GetUserData(string accessToken);
    protected virtual string QueryAccessToken(Uri returnUrl, string authorizationCode);
    private static string Base64URLdecode(string str);
    private static Byte[] Base64URLdecodebyte(string str);
    private static bool ValidateSig(Byte[] uval, Byte[] sval, Byte[] certthumb);
    private static X509Certificate2[] GetEncodingCert();
    private AzureADClaims ParseAccessToken(string token, bool validate);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class DotNetOpenAuth.AspNet.Clients.AzureADGraph : object {
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserPrincipalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [DataMemberAttribute]
public string GivenName { get; public set; }
    [DataMemberAttribute]
public string Surname { get; public set; }
    [DataMemberAttribute]
public string UserPrincipalName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_Surname();
    [CompilerGeneratedAttribute]
public void set_Surname(string value);
    [CompilerGeneratedAttribute]
public string get_UserPrincipalName();
    [CompilerGeneratedAttribute]
public void set_UserPrincipalName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
public class DotNetOpenAuth.AspNet.Clients.AzureADHeader : object {
    [CompilerGeneratedAttribute]
private string <Typ>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5t>k__BackingField;
    [DataMemberAttribute]
public string Typ { get; public set; }
    [DataMemberAttribute]
public string Alg { get; public set; }
    [DataMemberAttribute]
public string X5t { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Typ();
    [CompilerGeneratedAttribute]
public void set_Typ(string value);
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_X5t();
    [CompilerGeneratedAttribute]
public void set_X5t(string value);
}
public class DotNetOpenAuth.AspNet.Clients.CookieOAuthTokenManager : AuthenticationOnlyCookieOAuthTokenManager {
    public CookieOAuthTokenManager(HttpContextBase context);
    public virtual string GetTokenSecret(string token);
    public virtual void ReplaceRequestTokenWithAccessToken(string requestToken, string accessToken, string accessTokenSecret);
}
[ExtensionAttribute]
internal static class DotNetOpenAuth.AspNet.Clients.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void AddDataIfNotEmpty(Dictionary`2<string, string> dictionary, XDocument document, string elementName);
    [ExtensionAttribute]
public static void AddItemIfNotEmpty(IDictionary`2<string, string> dictionary, string key, string value);
}
public class DotNetOpenAuth.AspNet.Clients.DotNetOpenAuthWebConsumer : object {
    private WebConsumer webConsumer;
    public DotNetOpenAuthWebConsumer(ServiceProviderDescription serviceDescription, IConsumerTokenManager tokenManager);
    public sealed virtual HttpWebRequest PrepareAuthorizedRequest(MessageReceivingEndpoint profileEndpoint, string accessToken);
    public sealed virtual AuthorizedTokenResponse ProcessUserAuthorization();
    public sealed virtual void RequestAuthentication(Uri callback);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class DotNetOpenAuth.AspNet.Clients.FacebookClient : OAuth2Client {
    private static string AuthorizationEndpoint;
    private static string TokenEndpoint;
    private string appId;
    private string appSecret;
    private String[] scope;
    public FacebookClient(string appId, string appSecret);
    public FacebookClient(string appId, string appSecret, String[] scope);
    protected virtual Uri GetServiceLoginUrl(Uri returnUrl);
    protected virtual IDictionary`2<string, string> GetUserData(string accessToken);
    protected virtual string QueryAccessToken(Uri returnUrl, string authorizationCode);
    private static string NormalizeHexEncoding(string url);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class DotNetOpenAuth.AspNet.Clients.FacebookGraphData : object {
    [CompilerGeneratedAttribute]
private string <Birthday>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string Birthday { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [DataMemberAttribute]
public string Gender { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Uri Link { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Birthday();
    [CompilerGeneratedAttribute]
public void set_Birthday(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Gender();
    [CompilerGeneratedAttribute]
public void set_Gender(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Uri get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(Uri value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class DotNetOpenAuth.AspNet.Clients.GoogleOpenIdClient : OpenIdClient {
    protected virtual Dictionary`2<string, string> GetExtraData(IAuthenticationResponse response);
    protected virtual void OnBeforeSendingAuthenticationRequest(IAuthenticationRequest request);
}
public class DotNetOpenAuth.AspNet.Clients.InMemoryOAuthTokenManager : object {
    private Dictionary`2<string, string> tokensAndSecrets;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    public string ConsumerKey { get; private set; }
    public string ConsumerSecret { get; private set; }
    public InMemoryOAuthTokenManager(string consumerKey, string consumerSecret);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
private void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
private void set_ConsumerSecret(string value);
    public sealed virtual void ExpireRequestTokenAndStoreNewAccessToken(string consumerKey, string requestToken, string accessToken, string accessTokenSecret);
    public sealed virtual string GetTokenSecret(string token);
    public sealed virtual TokenType GetTokenType(string token);
    public sealed virtual void StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response);
}
public interface DotNetOpenAuth.AspNet.Clients.IOAuthTokenManager {
    public abstract virtual string GetTokenSecret(string token);
    public abstract virtual void StoreRequestToken(string requestToken, string requestTokenSecret);
    public abstract virtual void ReplaceRequestTokenWithAccessToken(string requestToken, string accessToken, string accessTokenSecret);
}
public interface DotNetOpenAuth.AspNet.Clients.IOAuthWebWorker {
    public abstract virtual HttpWebRequest PrepareAuthorizedRequest(MessageReceivingEndpoint profileEndpoint, string accessToken);
    public abstract virtual AuthorizedTokenResponse ProcessUserAuthorization();
    public abstract virtual void RequestAuthentication(Uri callback);
}
internal static class DotNetOpenAuth.AspNet.Clients.JsonHelper : object {
    public static T Deserialize(Stream stream);
}
public class DotNetOpenAuth.AspNet.Clients.LinkedInClient : OAuthClient {
    public static ServiceProviderDescription LinkedInServiceDescription;
    public LinkedInClient(string consumerKey, string consumerSecret);
    public LinkedInClient(string consumerKey, string consumerSecret, IOAuthTokenManager tokenManager);
    private static LinkedInClient();
    protected virtual AuthenticationResult VerifyAuthenticationCore(AuthorizedTokenResponse response);
}
public class DotNetOpenAuth.AspNet.Clients.MicrosoftClient : OAuth2Client {
    private static string AuthorizationEndpoint;
    private static string TokenEndpoint;
    private string appId;
    private string appSecret;
    private String[] requestedScopes;
    protected string AppId { get; }
    public MicrosoftClient(string appId, string appSecret);
    public MicrosoftClient(string appId, string appSecret, String[] requestedScopes);
    protected MicrosoftClient(string providerName, string appId, string appSecret, String[] requestedScopes);
    protected string get_AppId();
    protected virtual Uri GetServiceLoginUrl(Uri returnUrl);
    protected virtual IDictionary`2<string, string> GetUserData(string accessToken);
    protected virtual string QueryAccessToken(Uri returnUrl, string authorizationCode);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class DotNetOpenAuth.AspNet.Clients.MicrosoftClientUserData : object {
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string FirstName { get; public set; }
    [DataMemberAttribute]
public string Gender { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string LastName { get; public set; }
    [DataMemberAttribute]
public Uri Link { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
public void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_Gender();
    [CompilerGeneratedAttribute]
public void set_Gender(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(Uri value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DataContractAttribute]
public class DotNetOpenAuth.AspNet.Clients.OAuth2AccessTokenData : object {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [DataMemberAttribute]
public string AccessToken { get; public set; }
    [DataMemberAttribute]
public string RefreshToken { get; public set; }
    [DataMemberAttribute]
public string Scope { get; public set; }
    [DataMemberAttribute]
public string TokenType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
}
public abstract class DotNetOpenAuth.AspNet.Clients.OAuth2Client : object {
    private string providerName;
    public string ProviderName { get; }
    protected OAuth2Client(string providerName);
    public sealed virtual string get_ProviderName();
    public virtual void RequestAuthentication(HttpContextBase context, Uri returnUrl);
    public sealed virtual AuthenticationResult VerifyAuthentication(HttpContextBase context);
    public virtual AuthenticationResult VerifyAuthentication(HttpContextBase context, Uri returnPageUrl);
    protected abstract virtual Uri GetServiceLoginUrl(Uri returnUrl);
    protected abstract virtual IDictionary`2<string, string> GetUserData(string accessToken);
    protected abstract virtual string QueryAccessToken(Uri returnUrl, string authorizationCode);
}
public abstract class DotNetOpenAuth.AspNet.Clients.OAuthClient : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private IOAuthWebWorker <WebWorker>k__BackingField;
    public string ProviderName { get; private set; }
    protected IOAuthWebWorker WebWorker { get; private set; }
    protected OAuthClient(string providerName, ServiceProviderDescription serviceDescription, string consumerKey, string consumerSecret);
    protected OAuthClient(string providerName, ServiceProviderDescription serviceDescription, IConsumerTokenManager tokenManager);
    protected OAuthClient(string providerName, IOAuthWebWorker webWorker);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
private void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
protected IOAuthWebWorker get_WebWorker();
    [CompilerGeneratedAttribute]
private void set_WebWorker(IOAuthWebWorker value);
    public virtual void RequestAuthentication(HttpContextBase context, Uri returnUrl);
    public virtual AuthenticationResult VerifyAuthentication(HttpContextBase context);
    internal static XDocument LoadXDocumentFromStream(Stream stream);
    protected abstract virtual AuthenticationResult VerifyAuthenticationCore(AuthorizedTokenResponse response);
}
public class DotNetOpenAuth.AspNet.Clients.OpenIdClient : object {
    private static OpenIdRelyingParty RelyingParty;
    private Identifier providerIdentifier;
    private string providerName;
    public string ProviderName { get; }
    public OpenIdClient(string providerName, Identifier providerIdentifier);
    private static OpenIdClient();
    public sealed virtual string get_ProviderName();
    public virtual void RequestAuthentication(HttpContextBase context, Uri returnUrl);
    public virtual AuthenticationResult VerifyAuthentication(HttpContextBase context);
    protected virtual Dictionary`2<string, string> GetExtraData(IAuthenticationResponse response);
    protected virtual void OnBeforeSendingAuthenticationRequest(IAuthenticationRequest request);
}
public class DotNetOpenAuth.AspNet.Clients.SimpleConsumerTokenManager : object {
    private IOAuthTokenManager tokenManager;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    public string ConsumerKey { get; private set; }
    public string ConsumerSecret { get; private set; }
    public SimpleConsumerTokenManager(string consumerKey, string consumerSecret, IOAuthTokenManager tokenManager);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
private void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
private void set_ConsumerSecret(string value);
    public sealed virtual string GetTokenSecret(string token);
    public sealed virtual void StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response);
    public sealed virtual void ExpireRequestTokenAndStoreNewAccessToken(string consumerKey, string requestToken, string accessToken, string accessTokenSecret);
    public sealed virtual TokenType GetTokenType(string token);
}
public class DotNetOpenAuth.AspNet.Clients.TwitterClient : OAuthClient {
    public static ServiceProviderDescription TwitterServiceDescription;
    public TwitterClient(string consumerKey, string consumerSecret);
    public TwitterClient(string consumerKey, string consumerSecret, IOAuthTokenManager tokenManager);
    private static TwitterClient();
    protected virtual AuthenticationResult VerifyAuthenticationCore(AuthorizedTokenResponse response);
}
[ObsoleteAttribute("Use the MicrosoftClient class.")]
public class DotNetOpenAuth.AspNet.Clients.WindowsLiveClient : MicrosoftClient {
    public WindowsLiveClient(string appId, string appSecret);
}
public class DotNetOpenAuth.AspNet.Clients.YahooOpenIdClient : OpenIdClient {
    protected virtual Dictionary`2<string, string> GetExtraData(IAuthenticationResponse response);
    protected virtual void OnBeforeSendingAuthenticationRequest(IAuthenticationRequest request);
}
public interface DotNetOpenAuth.AspNet.IAuthenticationClient {
    public string ProviderName { get; }
    public abstract virtual string get_ProviderName();
    public abstract virtual void RequestAuthentication(HttpContextBase context, Uri returnUrl);
    public abstract virtual AuthenticationResult VerifyAuthentication(HttpContextBase context);
}
public interface DotNetOpenAuth.AspNet.IOpenAuthDataProvider {
    public abstract virtual string GetUserNameFromOpenAuth(string openAuthProvider, string openAuthId);
}
internal static class DotNetOpenAuth.AspNet.MachineKeyUtil : object {
    private static IMachineKey MachineKeyImpl;
    private static MachineKeyUtil();
    public static Byte[] Protect(Byte[] userData, String[] purposes);
    public static Byte[] Unprotect(Byte[] protectedData, String[] purposes);
    private static IMachineKey GetMachineKeyImpl();
}
internal static class DotNetOpenAuth.AspNet.OpenAuthAuthenticationTicketHelper : object {
    private static string OpenAuthCookieToken;
    public static bool IsValidAuthenticationTicket(HttpContextBase context);
    public static void SetAuthenticationTicket(HttpContextBase context, string userName, bool createPersistentCookie);
    private static HttpCookie GetAuthCookie(string userName, bool createPersistentCookie);
}
public class DotNetOpenAuth.AspNet.OpenAuthSecurityManager : object {
    private static string AntiXsrfPurposeString;
    private static string ProviderQueryStringName;
    private static string SessionIdQueryStringName;
    private static string SessionIdCookieName;
    private IAuthenticationClient authenticationProvider;
    private IOpenAuthDataProvider dataProvider;
    private HttpContextBase requestContext;
    public bool IsAuthenticatedWithOpenAuth { get; }
    public OpenAuthSecurityManager(HttpContextBase requestContext);
    public OpenAuthSecurityManager(HttpContextBase requestContext, IAuthenticationClient provider, IOpenAuthDataProvider dataProvider);
    public bool get_IsAuthenticatedWithOpenAuth();
    public static string GetProviderName(HttpContextBase context);
    public bool Login(string providerUserId, bool createPersistentCookie);
    public void RequestAuthentication(string returnUrl);
    public AuthenticationResult VerifyAuthentication(string returnUrl);
    private static string GetUsername(HttpContextBase context);
    private bool ValidateRequestAgainstXsrfAttack(String& sessionId);
}
[ExtensionAttribute]
internal static class DotNetOpenAuth.AspNet.UriHelper : object {
    [ExtensionAttribute]
public static Uri AttachQueryStringParameter(Uri url, string parameterName, string parameterValue);
    public static Uri ConvertToAbsoluteUri(string returnUrl, HttpContextBase context);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class DotNetOpenAuth.AspNet.WebResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ConnectionNotSecure { get; }
    internal static string FailedToEncryptTicket { get; }
    internal static string Generic_CryptoFailure { get; }
    internal static string OAuthDataProviderRegistered { get; }
    internal static string OAuthRequireReturnUrl { get; }
    internal static string OpenIDFailedToGetResponse { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ConnectionNotSecure();
    internal static string get_FailedToEncryptTicket();
    internal static string get_Generic_CryptoFailure();
    internal static string get_OAuthDataProviderRegistered();
    internal static string get_OAuthRequireReturnUrl();
    internal static string get_OpenIDFailedToGetResponse();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
