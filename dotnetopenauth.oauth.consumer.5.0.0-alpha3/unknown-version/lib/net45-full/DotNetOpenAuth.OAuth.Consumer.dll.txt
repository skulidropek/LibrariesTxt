public class DotNetOpenAuth.OAuth.AccessToken : ValueType {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    public string Token { get; public set; }
    public string Secret { get; public set; }
    public AccessToken(string token, string secret);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    public virtual string ToString();
}
public class DotNetOpenAuth.OAuth.AccessTokenResponse : object {
    [CompilerGeneratedAttribute]
private AccessToken <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <ExtraData>k__BackingField;
    public AccessToken AccessToken { get; public set; }
    public NameValueCollection ExtraData { get; public set; }
    public AccessTokenResponse(string accessToken, string tokenSecret, NameValueCollection extraData);
    [CompilerGeneratedAttribute]
public AccessToken get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(AccessToken value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(NameValueCollection value);
}
public class DotNetOpenAuth.OAuth.Consumer : object {
    private IHostFactories hostFactories;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ConsumerCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderDescription <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemporaryCredentialStorage <TemporaryCredentialStorage>k__BackingField;
    public IHostFactories HostFactories { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public X509Certificate2 ConsumerCertificate { get; public set; }
    public ServiceProviderDescription ServiceProvider { get; public set; }
    public ITemporaryCredentialStorage TemporaryCredentialStorage { get; public set; }
    public Consumer(string consumerKey, string consumerSecret, ServiceProviderDescription serviceProvider, ITemporaryCredentialStorage temporaryCredentialStorage, IHostFactories hostFactories);
    public IHostFactories get_HostFactories();
    public void set_HostFactories(IHostFactories value);
    [CompilerGeneratedAttribute]
public string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ConsumerCertificate();
    [CompilerGeneratedAttribute]
public void set_ConsumerCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public ServiceProviderDescription get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(ServiceProviderDescription value);
    [CompilerGeneratedAttribute]
public ITemporaryCredentialStorage get_TemporaryCredentialStorage();
    [CompilerGeneratedAttribute]
public void set_TemporaryCredentialStorage(ITemporaryCredentialStorage value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth.Consumer/<RequestNewClientAccountAsync>d__0")]
public Task`1<AccessTokenResponse> RequestNewClientAccountAsync(IEnumerable`1<KeyValuePair`2<string, string>> requestParameters, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth.Consumer/<RequestUserAuthorizationAsync>d__12")]
public Task`1<Uri> RequestUserAuthorizationAsync(Uri callback, IEnumerable`1<KeyValuePair`2<string, string>> requestParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth.Consumer/<ProcessUserAuthorizationAsync>d__1f")]
[DebuggerStepThroughAttribute]
public Task`1<AccessTokenResponse> ProcessUserAuthorizationAsync(Uri authorizationCompleteUri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth.Consumer/<ProcessUserAuthorizationAsync>d__26")]
[DebuggerStepThroughAttribute]
public Task`1<AccessTokenResponse> ProcessUserAuthorizationAsync(string verifier, CancellationToken cancellationToken);
    public virtual OAuth1HttpMessageHandlerBase CreateMessageHandler(AccessToken accessToken, HttpMessageHandler innerHandler);
    public HttpClient CreateHttpClient(AccessToken accessToken, HttpMessageHandler innerHandler);
    public HttpClient CreateHttpClient(OAuth1HttpMessageHandlerBase innerHandler);
}
public class DotNetOpenAuth.OAuth.CookieTemporaryCredentialStorage : object {
    protected static string TokenCookieKey;
    private HttpContextBase httpContext;
    public CookieTemporaryCredentialStorage(HttpContextBase httpContext);
    public sealed virtual void SaveTemporaryCredential(string identifier, string secret);
    public sealed virtual KeyValuePair`2<string, string> RetrieveTemporaryCredential();
    public sealed virtual void ClearTemporaryCredential();
    protected static string ProtectAndEncodeToken(string token, string tokenSecret);
    protected static string DecodeAndUnprotectToken(string token, string encryptedToken);
}
public interface DotNetOpenAuth.OAuth.ITemporaryCredentialStorage {
    public abstract virtual void SaveTemporaryCredential(string identifier, string secret);
    public abstract virtual KeyValuePair`2<string, string> RetrieveTemporaryCredential();
    public abstract virtual void ClearTemporaryCredential();
}
public class DotNetOpenAuth.OAuth.MemoryTemporaryCredentialStorage : object {
    private string identifier;
    private string secret;
    public sealed virtual void SaveTemporaryCredential(string identifier, string secret);
    public sealed virtual KeyValuePair`2<string, string> RetrieveTemporaryCredential();
    public sealed virtual void ClearTemporaryCredential();
}
public class DotNetOpenAuth.OAuth.OAuth1HmacSha1HttpMessageHandler : OAuth1HttpMessageHandlerBase {
    protected string SignatureMethod { get; }
    public OAuth1HmacSha1HttpMessageHandler(HttpMessageHandler innerHandler);
    protected virtual string get_SignatureMethod();
    protected virtual Byte[] Sign(Byte[] signedPayload);
}
public abstract class DotNetOpenAuth.OAuth.OAuth1HttpMessageHandlerBase : DelegatingHandler {
    private static string AllowedCharacters;
    private static int DefaultNonceLength;
    private static OAuthParametersLocation DefaultParametersLocation;
    private static DateTime epoch;
    private static Char[] ParameterSeparatorAsArray;
    [CompilerGeneratedAttribute]
private OAuthParametersLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NonceLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1;
    public OAuthParametersLocation Location { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string AccessToken { get; public set; }
    public string AccessTokenSecret { get; public set; }
    public int NonceLength { get; public set; }
    protected string SignatureMethod { get; }
    protected OAuth1HttpMessageHandlerBase(HttpMessageHandler innerHandler);
    private static OAuth1HttpMessageHandlerBase();
    [CompilerGeneratedAttribute]
public OAuthParametersLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(OAuthParametersLocation value);
    [CompilerGeneratedAttribute]
public string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_AccessTokenSecret();
    [CompilerGeneratedAttribute]
public void set_AccessTokenSecret(string value);
    [CompilerGeneratedAttribute]
public int get_NonceLength();
    [CompilerGeneratedAttribute]
public void set_NonceLength(int value);
    protected abstract virtual string get_SignatureMethod();
    public void ApplyAuthorization(HttpRequestMessage request);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected abstract virtual Byte[] Sign(Byte[] signedPayload);
    protected virtual string GetSignature(HttpRequestMessage request, NameValueCollection oauthParameters);
    protected string GetConsumerAndTokenSecretString();
    private static string UrlEscape(string value);
    private static string ToTimeStamp(DateTime dateTime);
    private static string GetBaseStringUri(Uri requestUri);
    private static NameValueCollection ExtractOAuthParametersFromQueryString(HttpRequestMessage request);
    private string ConstructSignatureBaseString(HttpRequestMessage request, NameValueCollection oauthParameters);
    private string GenerateUniqueFragment();
    private NameValueCollection GetOAuthParameters();
    private string GetNormalizedParameters(HttpRequestMessage request, NameValueCollection oauthParameters);
    [CompilerGeneratedAttribute]
private static int <GetNormalizedParameters>b__0(KeyValuePair`2<string, string> kv1, KeyValuePair`2<string, string> kv2);
}
public class DotNetOpenAuth.OAuth.OAuth1PlainTextMessageHandler : OAuth1HttpMessageHandlerBase {
    protected string SignatureMethod { get; }
    protected virtual string get_SignatureMethod();
    protected virtual Byte[] Sign(Byte[] signedPayload);
    protected virtual string GetSignature(HttpRequestMessage request, NameValueCollection oauthParameters);
}
public class DotNetOpenAuth.OAuth.OAuth1RsaSha1HttpMessageHandler : OAuth1HttpMessageHandlerBase {
    [CompilerGeneratedAttribute]
private X509Certificate2 <SigningCertificate>k__BackingField;
    public X509Certificate2 SigningCertificate { get; public set; }
    protected string SignatureMethod { get; }
    public OAuth1RsaSha1HttpMessageHandler(HttpMessageHandler innerHandler);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_SigningCertificate();
    [CompilerGeneratedAttribute]
public void set_SigningCertificate(X509Certificate2 value);
    protected virtual string get_SignatureMethod();
    protected virtual Byte[] Sign(Byte[] signedPayload);
}
public class DotNetOpenAuth.OAuth.ServiceProviderDescription : object {
    [CompilerGeneratedAttribute]
private Uri <TemporaryCredentialsRequestEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <TemporaryCredentialsRequestEndpointMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResourceOwnerAuthorizationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TokenRequestEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <TokenRequestEndpointMethod>k__BackingField;
    public Uri TemporaryCredentialsRequestEndpoint { get; public set; }
    public HttpMethod TemporaryCredentialsRequestEndpointMethod { get; public set; }
    public Uri ResourceOwnerAuthorizationEndpoint { get; public set; }
    public Uri TokenRequestEndpoint { get; public set; }
    public HttpMethod TokenRequestEndpointMethod { get; public set; }
    public ServiceProviderDescription(string temporaryCredentialsRequestEndpoint, string resourceOwnerAuthorizationEndpoint, string tokenRequestEndpoint);
    [CompilerGeneratedAttribute]
public Uri get_TemporaryCredentialsRequestEndpoint();
    [CompilerGeneratedAttribute]
public void set_TemporaryCredentialsRequestEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public HttpMethod get_TemporaryCredentialsRequestEndpointMethod();
    [CompilerGeneratedAttribute]
public void set_TemporaryCredentialsRequestEndpointMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public Uri get_ResourceOwnerAuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public void set_ResourceOwnerAuthorizationEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_TokenRequestEndpoint();
    [CompilerGeneratedAttribute]
public void set_TokenRequestEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public HttpMethod get_TokenRequestEndpointMethod();
    [CompilerGeneratedAttribute]
public void set_TokenRequestEndpointMethod(HttpMethod value);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
