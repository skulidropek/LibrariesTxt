internal class DotNetOpenAuth.Configuration.OAuth2ClientSection : ConfigurationSection {
    private static string SectionName;
    private static string MaxAuthorizationTimePropertyName;
    internal static OAuth2ClientSection Configuration { get; }
    [PositiveTimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("maxAuthorizationTime")]
internal TimeSpan MaxAuthorizationTime { get; internal set; }
    internal static OAuth2ClientSection get_Configuration();
    internal TimeSpan get_MaxAuthorizationTime();
    internal void set_MaxAuthorizationTime(TimeSpan value);
}
public class DotNetOpenAuth.OAuth2.AuthorizationServerDescription : object {
    [CompilerGeneratedAttribute]
private Uri <TokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AuthorizationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolVersion <ProtocolVersion>k__BackingField;
    public Uri TokenEndpoint { get; public set; }
    public Uri AuthorizationEndpoint { get; public set; }
    public ProtocolVersion ProtocolVersion { get; public set; }
    internal Version Version { get; }
    [CompilerGeneratedAttribute]
public Uri get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public void set_TokenEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_AuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public void set_AuthorizationEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public ProtocolVersion get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_ProtocolVersion(ProtocolVersion value);
    internal Version get_Version();
}
public class DotNetOpenAuth.OAuth2.AuthorizationState : object {
    [CompilerGeneratedAttribute]
private Uri <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AccessTokenExpirationUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AccessTokenIssueDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    public Uri Callback { get; public set; }
    public string RefreshToken { get; public set; }
    public string AccessToken { get; public set; }
    public Nullable`1<DateTime> AccessTokenExpirationUtc { get; public set; }
    public Nullable`1<DateTime> AccessTokenIssueDateUtc { get; public set; }
    public HashSet`1<string> Scope { get; private set; }
    public bool IsDeleted { get; public set; }
    public AuthorizationState(IEnumerable`1<string> scopes);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Callback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Callback(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RefreshToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AccessToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_AccessTokenExpirationUtc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessTokenExpirationUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_AccessTokenIssueDateUtc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccessTokenIssueDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public void set_IsDeleted(bool value);
    public virtual void Delete();
    public virtual void SaveChanges();
}
internal class DotNetOpenAuth.OAuth2.BearerTokenHttpMessageHandler : DelegatingHandler {
    [CompilerGeneratedAttribute]
private string <BearerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthorizationState <Authorization>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientBase <Client>k__BackingField;
    internal string BearerToken { get; private set; }
    internal IAuthorizationState Authorization { get; private set; }
    internal ClientBase Client { get; private set; }
    public BearerTokenHttpMessageHandler(string bearerToken, HttpMessageHandler innerHandler);
    public BearerTokenHttpMessageHandler(ClientBase client, IAuthorizationState authorization, HttpMessageHandler innerHandler);
    [CompilerGeneratedAttribute]
internal string get_BearerToken();
    [CompilerGeneratedAttribute]
private void set_BearerToken(string value);
    [CompilerGeneratedAttribute]
internal IAuthorizationState get_Authorization();
    [CompilerGeneratedAttribute]
private void set_Authorization(IAuthorizationState value);
    [CompilerGeneratedAttribute]
internal ClientBase get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(ClientBase value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.BearerTokenHttpMessageHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod4(HttpRequestMessage , CancellationToken );
}
internal interface DotNetOpenAuth.OAuth2.ChannelElements.IOAuth2ChannelWithClient {
    public string ClientIdentifier { get; public set; }
    public ClientCredentialApplicator ClientCredentialApplicator { get; public set; }
    public XmlDictionaryReaderQuotas JsonReaderQuotas { get; }
    public abstract virtual string get_ClientIdentifier();
    public abstract virtual void set_ClientIdentifier(string value);
    public abstract virtual ClientCredentialApplicator get_ClientCredentialApplicator();
    public abstract virtual void set_ClientCredentialApplicator(ClientCredentialApplicator value);
    public abstract virtual XmlDictionaryReaderQuotas get_JsonReaderQuotas();
}
internal class DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel : OAuth2ChannelBase {
    private static Type[] MessageTypes;
    [CompilerGeneratedAttribute]
private string <ClientIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCredentialApplicator <ClientCredentialApplicator>k__BackingField;
    public string ClientIdentifier { get; public set; }
    public ClientCredentialApplicator ClientCredentialApplicator { get; public set; }
    public XmlDictionaryReaderQuotas JsonReaderQuotas { get; }
    internal OAuth2ClientChannel(IHostFactories hostFactories);
    private static OAuth2ClientChannel();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ClientCredentialApplicator get_ClientCredentialApplicator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCredentialApplicator(ClientCredentialApplicator value);
    public sealed virtual XmlDictionaryReaderQuotas get_JsonReaderQuotas();
    protected virtual HttpRequestMessage CreateHttpRequest(IDirectedProtocolMessage request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel/<ReadFromResponseCoreAsync>d__0")]
protected virtual Task`1<IDictionary`2<string, string>> ReadFromResponseCoreAsync(HttpResponseMessage response, CancellationToken cancellationToken);
    protected virtual Task`1<IDirectedProtocolMessage> ReadFromRequestCoreAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual HttpResponseMessage PrepareDirectResponse(IProtocolMessage response);
    protected virtual void PrepareHttpWebRequest(HttpRequestMessage request);
}
public class DotNetOpenAuth.OAuth2.ClientBase : object {
    [CompilerGeneratedAttribute]
private AuthorizationServerDescription <AuthorizationServer>k__BackingField;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    public AuthorizationServerDescription AuthorizationServer { get; private set; }
    public Channel Channel { get; internal set; }
    public string ClientIdentifier { get; public set; }
    public ClientCredentialApplicator ClientCredentialApplicator { get; public set; }
    public XmlDictionaryReaderQuotas JsonReaderQuotas { get; }
    internal IOAuth2ChannelWithClient OAuthChannel { get; }
    protected ClientBase(AuthorizationServerDescription authorizationServer, string clientIdentifier, ClientCredentialApplicator clientCredentialApplicator, IHostFactories hostFactories);
    [CompilerGeneratedAttribute]
public AuthorizationServerDescription get_AuthorizationServer();
    [CompilerGeneratedAttribute]
private void set_AuthorizationServer(AuthorizationServerDescription value);
    [CompilerGeneratedAttribute]
public Channel get_Channel();
    [CompilerGeneratedAttribute]
internal void set_Channel(Channel value);
    public string get_ClientIdentifier();
    public void set_ClientIdentifier(string value);
    public ClientCredentialApplicator get_ClientCredentialApplicator();
    public void set_ClientCredentialApplicator(ClientCredentialApplicator value);
    public XmlDictionaryReaderQuotas get_JsonReaderQuotas();
    internal IOAuth2ChannelWithClient get_OAuthChannel();
    public static void AuthorizeRequest(HttpWebRequest request, string accessToken);
    public static void AuthorizeRequest(WebHeaderCollection requestHeaders, string accessToken);
    public Task AuthorizeRequestAsync(HttpWebRequest request, IAuthorizationState authorization, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ClientBase/<AuthorizeRequestAsync>d__0")]
[DebuggerStepThroughAttribute]
public Task AuthorizeRequestAsync(WebHeaderCollection requestHeaders, IAuthorizationState authorization, CancellationToken cancellationToken);
    public DelegatingHandler CreateAuthorizingHandler(string bearerAccessToken, HttpMessageHandler innerHandler);
    public DelegatingHandler CreateAuthorizingHandler(IAuthorizationState authorization, HttpMessageHandler innerHandler);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ClientBase/<RefreshAuthorizationAsync>d__4")]
[DebuggerStepThroughAttribute]
public Task`1<bool> RefreshAuthorizationAsync(IAuthorizationState authorization, Nullable`1<TimeSpan> skipIfUsefulLifeExceeds, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ClientBase/<GetScopedAccessTokenAsync>d__a")]
[DebuggerStepThroughAttribute]
public Task`1<IAuthorizationState> GetScopedAccessTokenAsync(string refreshToken, HashSet`1<string> scope, CancellationToken cancellationToken);
    public Task`1<IAuthorizationState> ExchangeUserCredentialForTokenAsync(string userName, string password, IEnumerable`1<string> scopes, CancellationToken cancellationToken);
    public Task`1<IAuthorizationState> GetClientAccessTokenAsync(IEnumerable`1<string> scopes, CancellationToken cancellationToken);
    internal static void UpdateAuthorizationWithResponse(IAuthorizationState authorizationState, AccessTokenSuccessResponse accessTokenSuccess);
    internal static void UpdateAuthorizationWithResponse(IAuthorizationState authorizationState, EndUserAuthorizationSuccessAccessTokenResponse accessTokenSuccess);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ClientBase/<UpdateAuthorizationWithResponseAsync>d__12")]
internal Task UpdateAuthorizationWithResponseAsync(IAuthorizationState authorizationState, EndUserAuthorizationSuccessAuthCodeResponse authorizationSuccess, CancellationToken cancellationToken);
    protected static ClientCredentialApplicator DefaultSecretApplicator(string secret);
    protected void ApplyClientCredential(AuthenticatedClientRequestBase request);
    private static double ProportionalLifeRemaining(IAuthorizationState authorization);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.ClientBase/<RequestAccessTokenAsync>d__19")]
private Task`1<IAuthorizationState> RequestAccessTokenAsync(ScopedAccessTokenRequest request, IEnumerable`1<string> scopes, CancellationToken cancellationToken);
}
public abstract class DotNetOpenAuth.OAuth2.ClientCredentialApplicator : object {
    public static ClientCredentialApplicator PostParameter(string clientSecret);
    public static ClientCredentialApplicator NetworkCredential(NetworkCredential credential);
    public static ClientCredentialApplicator NetworkCredential(string clientSecret);
    public static ClientCredentialApplicator NoSecret();
    public virtual void ApplyClientCredential(string clientIdentifier, AuthenticatedClientRequestBase request);
    public virtual void ApplyClientCredential(string clientIdentifier, HttpRequestMessage request);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class DotNetOpenAuth.OAuth2.ClientStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessTokenRefreshFailed { get; }
    internal static string AuthorizationExpired { get; }
    internal static string AuthorizationResponseUnexpectedMismatch { get; }
    internal static string CannotObtainAccessTokenWithReason { get; }
    internal static string UnexpectedResponseContentType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessTokenRefreshFailed();
    internal static string get_AuthorizationExpired();
    internal static string get_AuthorizationResponseUnexpectedMismatch();
    internal static string get_CannotObtainAccessTokenWithReason();
    internal static string get_UnexpectedResponseContentType();
}
public interface DotNetOpenAuth.OAuth2.IAuthorizationState {
    public Uri Callback { get; public set; }
    public string RefreshToken { get; public set; }
    public string AccessToken { get; public set; }
    public Nullable`1<DateTime> AccessTokenIssueDateUtc { get; public set; }
    public Nullable`1<DateTime> AccessTokenExpirationUtc { get; public set; }
    public HashSet`1<string> Scope { get; }
    public abstract virtual Uri get_Callback();
    public abstract virtual void set_Callback(Uri value);
    public abstract virtual string get_RefreshToken();
    public abstract virtual void set_RefreshToken(string value);
    public abstract virtual string get_AccessToken();
    public abstract virtual void set_AccessToken(string value);
    public abstract virtual Nullable`1<DateTime> get_AccessTokenIssueDateUtc();
    public abstract virtual void set_AccessTokenIssueDateUtc(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_AccessTokenExpirationUtc();
    public abstract virtual void set_AccessTokenExpirationUtc(Nullable`1<DateTime> value);
    public abstract virtual HashSet`1<string> get_Scope();
    public abstract virtual void Delete();
    public abstract virtual void SaveChanges();
}
public interface DotNetOpenAuth.OAuth2.IClientAuthorizationTracker {
    public abstract virtual IAuthorizationState GetAuthorizationState(Uri callbackUrl, string clientState);
}
internal class DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequestC : AccessTokenAuthorizationCodeRequest {
    internal AccessTokenAuthorizationCodeRequestC(AuthorizationServerDescription authorizationServer);
}
internal class DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequestC : AccessTokenRefreshRequest {
    internal AccessTokenRefreshRequestC(AuthorizationServerDescription authorizationServer);
}
internal class DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequestC : EndUserAuthorizationImplicitRequest {
    internal EndUserAuthorizationImplicitRequestC(AuthorizationServerDescription authorizationServer);
}
internal class DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequestC : EndUserAuthorizationRequest {
    internal EndUserAuthorizationRequestC(AuthorizationServerDescription authorizationServer);
}
public class DotNetOpenAuth.OAuth2.UserAgentClient : ClientBase {
    public UserAgentClient(AuthorizationServerDescription authorizationServer, string clientIdentifier, string clientSecret, IHostFactories hostFactories);
    public UserAgentClient(Uri authorizationEndpoint, Uri tokenEndpoint, string clientIdentifier, string clientSecret, IHostFactories hostFactories);
    public UserAgentClient(Uri authorizationEndpoint, Uri tokenEndpoint, string clientIdentifier, ClientCredentialApplicator clientCredentialApplicator, IHostFactories hostFactories);
    public UserAgentClient(AuthorizationServerDescription authorizationServer, string clientIdentifier, ClientCredentialApplicator clientCredentialApplicator, IHostFactories hostFactories);
    public Task`1<Uri> RequestUserAuthorizationAsync(IEnumerable`1<string> scope, string state, Uri returnTo, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.UserAgentClient/<RequestUserAuthorizationAsync>d__22")]
public Task`1<Uri> RequestUserAuthorizationAsync(IAuthorizationState authorization, bool implicitResponseType, string state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.UserAgentClient/<ProcessUserAuthorizationAsync>d__27")]
[DebuggerStepThroughAttribute]
public Task`1<IAuthorizationState> ProcessUserAuthorizationAsync(Uri actualRedirectUrl, IAuthorizationState authorizationState, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.UserAgentClient/<ProcessUserAuthorizationAsync>d__2d")]
internal Task`1<IAuthorizationState> ProcessUserAuthorizationAsync(IAuthorizationState authorizationState, IDirectedProtocolMessage response, CancellationToken cancellationToken);
    internal EndUserAuthorizationRequest PrepareRequestUserAuthorization(IAuthorizationState authorization, bool implicitResponseType, string state);
}
public class DotNetOpenAuth.OAuth2.WebServerClient : ClientBase {
    private static string XsrfCookieName;
    [CompilerGeneratedAttribute]
private IClientAuthorizationTracker <AuthorizationTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CookieHeaderValue, IEnumerable`1<CookieState>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`3<CookieHeaderValue, CookieState, <>f__AnonymousType0`2<CookieHeaderValue, CookieState>> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<CookieHeaderValue, CookieState>, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<CookieHeaderValue, CookieState>, string> CS$<>9__CachedAnonymousMethodDelegate12;
    public IClientAuthorizationTracker AuthorizationTracker { get; public set; }
    public WebServerClient(AuthorizationServerDescription authorizationServer, string clientIdentifier, string clientSecret, IHostFactories hostFactories);
    public WebServerClient(AuthorizationServerDescription authorizationServer, string clientIdentifier, ClientCredentialApplicator clientCredentialApplicator, IHostFactories hostFactories);
    [CompilerGeneratedAttribute]
public IClientAuthorizationTracker get_AuthorizationTracker();
    [CompilerGeneratedAttribute]
public void set_AuthorizationTracker(IClientAuthorizationTracker value);
    public Task`1<HttpResponseMessage> PrepareRequestUserAuthorizationAsync(IEnumerable`1<string> scopes, Uri returnTo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.WebServerClient/<PrepareRequestUserAuthorizationAsync>d__3")]
[DebuggerStepThroughAttribute]
public Task`1<HttpResponseMessage> PrepareRequestUserAuthorizationAsync(IAuthorizationState authorization, CancellationToken cancellationToken);
    public Task`1<IAuthorizationState> ProcessUserAuthorizationAsync(HttpRequestBase request, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OAuth2.WebServerClient/<ProcessUserAuthorizationAsync>d__13")]
public Task`1<IAuthorizationState> ProcessUserAuthorizationAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<CookieState> <ProcessUserAuthorizationAsync>b__b(CookieHeaderValue cookieHeader);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<CookieHeaderValue, CookieState> <ProcessUserAuthorizationAsync>b__c(CookieHeaderValue cookieHeader, CookieState cookie);
    [CompilerGeneratedAttribute]
private static bool <ProcessUserAuthorizationAsync>b__d(<>f__AnonymousType0`2<CookieHeaderValue, CookieState> <>h__TransparentIdentifier9);
    [CompilerGeneratedAttribute]
private static string <ProcessUserAuthorizationAsync>b__e(<>f__AnonymousType0`2<CookieHeaderValue, CookieState> <>h__TransparentIdentifier9);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
