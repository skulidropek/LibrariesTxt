internal class DotNetOpenAuth.Configuration.AssociationTypeCollection : ConfigurationElementCollection {
    public sealed virtual IEnumerator`1<AssociationTypeElement> GetEnumerator();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class DotNetOpenAuth.Configuration.AssociationTypeElement : ConfigurationElement {
    private static string AssociationTypeConfigName;
    private static string MaximumLifetimeConfigName;
    [ConfigurationPropertyAttribute("type")]
public string AssociationType { get; public set; }
    [ConfigurationPropertyAttribute("lifetime")]
public TimeSpan MaximumLifetime { get; public set; }
    public string get_AssociationType();
    public void set_AssociationType(string value);
    public TimeSpan get_MaximumLifetime();
    public void set_MaximumLifetime(TimeSpan value);
}
internal class DotNetOpenAuth.Configuration.HostMetaDiscoveryElement : ConfigurationElement {
    private static string EnableCertificateValidationCacheConfigName;
    [ConfigurationPropertyAttribute("enableCertificateValidationCache")]
public bool EnableCertificateValidationCache { get; public set; }
    public bool get_EnableCertificateValidationCache();
    public void set_EnableCertificateValidationCache(bool value);
}
internal class DotNetOpenAuth.Configuration.OpenIdElement : ConfigurationSection {
    private static string SectionName;
    private static string RelyingPartyElementName;
    private static string ProviderElementName;
    private static string ExtensionFactoriesElementName;
    private static string XriResolverElementName;
    private static string MaxAuthenticationTimePropertyName;
    private static string CacheDiscoveryPropertyName;
    public static OpenIdElement Configuration { get; }
    [ConfigurationPropertyAttribute("maxAuthenticationTime")]
[PositiveTimeSpanValidatorAttribute]
internal TimeSpan MaxAuthenticationTime { get; internal set; }
    [ConfigurationPropertyAttribute("cacheDiscovery")]
internal bool CacheDiscovery { get; internal set; }
    [ConfigurationPropertyAttribute("relyingParty")]
internal OpenIdRelyingPartyElement RelyingParty { get; internal set; }
    [ConfigurationPropertyAttribute("provider")]
internal OpenIdProviderElement Provider { get; internal set; }
    [ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.TypeConfigurationCollection`1<DotNetOpenAuth.OpenId.ChannelElements.IOpenIdExtensionFactory>")]
[ConfigurationPropertyAttribute("extensionFactories")]
internal TypeConfigurationCollection`1<IOpenIdExtensionFactory> ExtensionFactories { get; internal set; }
    [ConfigurationPropertyAttribute("xriResolver")]
internal XriResolverElement XriResolver { get; internal set; }
    public static OpenIdElement get_Configuration();
    internal TimeSpan get_MaxAuthenticationTime();
    internal void set_MaxAuthenticationTime(TimeSpan value);
    internal bool get_CacheDiscovery();
    internal void set_CacheDiscovery(bool value);
    internal OpenIdRelyingPartyElement get_RelyingParty();
    internal void set_RelyingParty(OpenIdRelyingPartyElement value);
    internal OpenIdProviderElement get_Provider();
    internal void set_Provider(OpenIdProviderElement value);
    internal TypeConfigurationCollection`1<IOpenIdExtensionFactory> get_ExtensionFactories();
    internal void set_ExtensionFactories(TypeConfigurationCollection`1<IOpenIdExtensionFactory> value);
    internal XriResolverElement get_XriResolver();
    internal void set_XriResolver(XriResolverElement value);
}
internal class DotNetOpenAuth.Configuration.OpenIdProviderElement : ConfigurationElement {
    private static string ProviderElementName;
    private static string SecuritySettingsConfigName;
    private static string BehaviorsElementName;
    private static string StoreConfigName;
    [ConfigurationPropertyAttribute("security")]
public OpenIdProviderSecuritySettingsElement SecuritySettings { get; public set; }
    [ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.TypeConfigurationCollection`1<DotNetOpenAuth.OpenId.Provider.IProviderBehavior>")]
[ConfigurationPropertyAttribute("behaviors")]
public TypeConfigurationCollection`1<IProviderBehavior> Behaviors { get; public set; }
    [ConfigurationPropertyAttribute("store")]
public TypeConfigurationElement`1<ICryptoKeyAndNonceStore> ApplicationStore { get; public set; }
    public OpenIdProviderSecuritySettingsElement get_SecuritySettings();
    public void set_SecuritySettings(OpenIdProviderSecuritySettingsElement value);
    public TypeConfigurationCollection`1<IProviderBehavior> get_Behaviors();
    public void set_Behaviors(TypeConfigurationCollection`1<IProviderBehavior> value);
    public TypeConfigurationElement`1<ICryptoKeyAndNonceStore> get_ApplicationStore();
    public void set_ApplicationStore(TypeConfigurationElement`1<ICryptoKeyAndNonceStore> value);
}
internal class DotNetOpenAuth.Configuration.OpenIdProviderSecuritySettingsElement : ConfigurationElement {
    private static string ProtectDownlevelReplayAttacksConfigName;
    private static string MinimumHashBitLengthConfigName;
    private static string MaximumHashBitLengthConfigName;
    private static string AssociationsConfigName;
    private static string EncodeAssociationSecretsInHandlesConfigName;
    private static string RequireSslConfigName;
    private static string UnsolicitedAssertionVerificationConfigName;
    [ConfigurationPropertyAttribute("requireSsl")]
public bool RequireSsl { get; public set; }
    [ConfigurationPropertyAttribute("minimumHashBitLength")]
public int MinimumHashBitLength { get; public set; }
    [ConfigurationPropertyAttribute("maximumHashBitLength")]
public int MaximumHashBitLength { get; public set; }
    [ConfigurationPropertyAttribute("protectDownlevelReplayAttacks")]
public bool ProtectDownlevelReplayAttacks { get; public set; }
    [ConfigurationPropertyAttribute("unsolicitedAssertionVerification")]
public UnsolicitedAssertionVerificationLevel UnsolicitedAssertionVerification { get; public set; }
    [ConfigurationPropertyAttribute("associations")]
[ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.AssociationTypeCollection")]
public AssociationTypeCollection AssociationLifetimes { get; public set; }
    [ConfigurationPropertyAttribute("encodeAssociationSecretsInHandles")]
public bool EncodeAssociationSecretsInHandles { get; public set; }
    public bool get_RequireSsl();
    public void set_RequireSsl(bool value);
    public int get_MinimumHashBitLength();
    public void set_MinimumHashBitLength(int value);
    public int get_MaximumHashBitLength();
    public void set_MaximumHashBitLength(int value);
    public bool get_ProtectDownlevelReplayAttacks();
    public void set_ProtectDownlevelReplayAttacks(bool value);
    public UnsolicitedAssertionVerificationLevel get_UnsolicitedAssertionVerification();
    public void set_UnsolicitedAssertionVerification(UnsolicitedAssertionVerificationLevel value);
    public AssociationTypeCollection get_AssociationLifetimes();
    public void set_AssociationLifetimes(AssociationTypeCollection value);
    public bool get_EncodeAssociationSecretsInHandles();
    public void set_EncodeAssociationSecretsInHandles(bool value);
    public ProviderSecuritySettings CreateSecuritySettings();
}
internal class DotNetOpenAuth.Configuration.OpenIdRelyingPartyElement : ConfigurationElement {
    private static string StoreConfigName;
    private static string RelyingPartyElementName;
    private static string PreserveUserSuppliedIdentifierConfigName;
    private static string SecuritySettingsConfigName;
    private static string BehaviorsElementName;
    private static string DiscoveryServicesElementName;
    private static string HostMetaDiscoveryElementName;
    private static TypeConfigurationCollection`1<IIdentifierDiscoveryService> defaultDiscoveryServices;
    [ConfigurationPropertyAttribute("preserveUserSuppliedIdentifier")]
public bool PreserveUserSuppliedIdentifier { get; public set; }
    [ConfigurationPropertyAttribute("security")]
public OpenIdRelyingPartySecuritySettingsElement SecuritySettings { get; public set; }
    [ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.TypeConfigurationCollection`1<DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior>")]
[ConfigurationPropertyAttribute("behaviors")]
public TypeConfigurationCollection`1<IRelyingPartyBehavior> Behaviors { get; public set; }
    [ConfigurationPropertyAttribute("store")]
public TypeConfigurationElement`1<ICryptoKeyAndNonceStore> ApplicationStore { get; public set; }
    [ConfigurationPropertyAttribute("hostMetaDiscovery")]
internal HostMetaDiscoveryElement HostMetaDiscovery { get; internal set; }
    [ConfigurationPropertyAttribute("discoveryServices")]
[ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.TypeConfigurationCollection`1<DotNetOpenAuth.OpenId.IIdentifierDiscoveryService>")]
internal TypeConfigurationCollection`1<IIdentifierDiscoveryService> DiscoveryServices { get; internal set; }
    private static OpenIdRelyingPartyElement();
    public bool get_PreserveUserSuppliedIdentifier();
    public void set_PreserveUserSuppliedIdentifier(bool value);
    public OpenIdRelyingPartySecuritySettingsElement get_SecuritySettings();
    public void set_SecuritySettings(OpenIdRelyingPartySecuritySettingsElement value);
    public TypeConfigurationCollection`1<IRelyingPartyBehavior> get_Behaviors();
    public void set_Behaviors(TypeConfigurationCollection`1<IRelyingPartyBehavior> value);
    public TypeConfigurationElement`1<ICryptoKeyAndNonceStore> get_ApplicationStore();
    public void set_ApplicationStore(TypeConfigurationElement`1<ICryptoKeyAndNonceStore> value);
    internal HostMetaDiscoveryElement get_HostMetaDiscovery();
    internal void set_HostMetaDiscovery(HostMetaDiscoveryElement value);
    internal TypeConfigurationCollection`1<IIdentifierDiscoveryService> get_DiscoveryServices();
    internal void set_DiscoveryServices(TypeConfigurationCollection`1<IIdentifierDiscoveryService> value);
}
internal class DotNetOpenAuth.Configuration.OpenIdRelyingPartySecuritySettingsElement : ConfigurationElement {
    private static string MinimumRequiredOpenIdVersionConfigName;
    private static string MinimumHashBitLengthConfigName;
    private static string MaximumHashBitLengthConfigName;
    private static string RequireSslConfigName;
    private static string RequireDirectedIdentityConfigName;
    private static string RequireAssociationConfigName;
    private static string RejectUnsolicitedAssertionsConfigName;
    private static string RejectDelegatingIdentifiersConfigName;
    private static string IgnoreUnsignedExtensionsConfigName;
    private static string AllowDualPurposeIdentifiersConfigName;
    private static string AllowApproximateIdentifierDiscoveryConfigName;
    private static string ProtectDownlevelReplayAttacksConfigName;
    private static string TrustedProvidersElementName;
    [ConfigurationPropertyAttribute("requireSsl")]
public bool RequireSsl { get; public set; }
    [ConfigurationPropertyAttribute("requireDirectedIdentity")]
public bool RequireDirectedIdentity { get; public set; }
    [ConfigurationPropertyAttribute("requireAssociation")]
public bool RequireAssociation { get; public set; }
    [ConfigurationPropertyAttribute("minimumRequiredOpenIdVersion")]
public ProtocolVersion MinimumRequiredOpenIdVersion { get; public set; }
    [ConfigurationPropertyAttribute("minimumHashBitLength")]
public int MinimumHashBitLength { get; public set; }
    [ConfigurationPropertyAttribute("maximumHashBitLength")]
public int MaximumHashBitLength { get; public set; }
    [ConfigurationPropertyAttribute("rejectUnsolicitedAssertions")]
public bool RejectUnsolicitedAssertions { get; public set; }
    [ConfigurationPropertyAttribute("rejectDelegatingIdentifiers")]
public bool RejectDelegatingIdentifiers { get; public set; }
    [ConfigurationPropertyAttribute("ignoreUnsignedExtensions")]
public bool IgnoreUnsignedExtensions { get; public set; }
    [ConfigurationPropertyAttribute("allowDualPurposeIdentifiers")]
public bool AllowDualPurposeIdentifiers { get; public set; }
    [ConfigurationPropertyAttribute("allowApproximateIdentifierDiscovery")]
public bool AllowApproximateIdentifierDiscovery { get; public set; }
    [ConfigurationPropertyAttribute("protectDownlevelReplayAttacks")]
public bool ProtectDownlevelReplayAttacks { get; public set; }
    [ConfigurationPropertyAttribute("trustedProviders")]
[ConfigurationCollectionAttribute("DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection")]
public TrustedProviderConfigurationCollection TrustedProviders { get; public set; }
    public bool get_RequireSsl();
    public void set_RequireSsl(bool value);
    public bool get_RequireDirectedIdentity();
    public void set_RequireDirectedIdentity(bool value);
    public bool get_RequireAssociation();
    public void set_RequireAssociation(bool value);
    public ProtocolVersion get_MinimumRequiredOpenIdVersion();
    public void set_MinimumRequiredOpenIdVersion(ProtocolVersion value);
    public int get_MinimumHashBitLength();
    public void set_MinimumHashBitLength(int value);
    public int get_MaximumHashBitLength();
    public void set_MaximumHashBitLength(int value);
    public bool get_RejectUnsolicitedAssertions();
    public void set_RejectUnsolicitedAssertions(bool value);
    public bool get_RejectDelegatingIdentifiers();
    public void set_RejectDelegatingIdentifiers(bool value);
    public bool get_IgnoreUnsignedExtensions();
    public void set_IgnoreUnsignedExtensions(bool value);
    public bool get_AllowDualPurposeIdentifiers();
    public void set_AllowDualPurposeIdentifiers(bool value);
    public bool get_AllowApproximateIdentifierDiscovery();
    public void set_AllowApproximateIdentifierDiscovery(bool value);
    public bool get_ProtectDownlevelReplayAttacks();
    public void set_ProtectDownlevelReplayAttacks(bool value);
    public TrustedProviderConfigurationCollection get_TrustedProviders();
    public void set_TrustedProviders(TrustedProviderConfigurationCollection value);
    public RelyingPartySecuritySettings CreateSecuritySettings();
}
internal class DotNetOpenAuth.Configuration.XriResolverElement : ConfigurationElement {
    private static string EnabledAttributeName;
    private static bool EnabledDefaultValue;
    private static string ProxyElementName;
    private static HostNameElement ProxyDefault;
    [ConfigurationPropertyAttribute("enabled")]
internal bool Enabled { get; internal set; }
    [ConfigurationPropertyAttribute("proxy")]
internal HostNameElement Proxy { get; internal set; }
    private static XriResolverElement();
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal HostNameElement get_Proxy();
    internal void set_Proxy(HostNameElement value);
}
[DebuggerDisplayAttribute("Handle = {Handle}, Expires = {Expires}")]
public abstract class DotNetOpenAuth.OpenId.Association : object {
    [CompilerGeneratedAttribute]
private string <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Issued>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalLifeLength>k__BackingField;
    public string Handle { get; internal set; }
    public DateTime Expires { get; }
    public bool IsExpired { get; }
    public int HashBitLength { get; }
    internal bool HasUsefulLifeRemaining { get; }
    [MessagePartAttribute]
internal DateTime Issued { get; internal set; }
    protected internal static TimeSpan DumbSecretLifetime { get; }
    protected internal long SecondsTillExpiration { get; }
    [MessagePartAttribute("key")]
protected internal Byte[] SecretKey { get; private set; }
    [MessagePartAttribute("ttl")]
protected TimeSpan TotalLifeLength { get; private set; }
    private static TimeSpan MinimumUsefulAssociationLifetime { get; }
    private TimeSpan TimeTillExpiration { get; }
    protected Association(string handle, Byte[] secret, TimeSpan totalLifeLength, DateTime issued);
    [CompilerGeneratedAttribute]
public string get_Handle();
    [CompilerGeneratedAttribute]
internal void set_Handle(string value);
    public DateTime get_Expires();
    public bool get_IsExpired();
    public abstract virtual int get_HashBitLength();
    internal bool get_HasUsefulLifeRemaining();
    [CompilerGeneratedAttribute]
internal DateTime get_Issued();
    [CompilerGeneratedAttribute]
internal void set_Issued(DateTime value);
    protected internal static TimeSpan get_DumbSecretLifetime();
    protected internal long get_SecondsTillExpiration();
    [CompilerGeneratedAttribute]
protected internal Byte[] get_SecretKey();
    [CompilerGeneratedAttribute]
private void set_SecretKey(Byte[] value);
    [CompilerGeneratedAttribute]
protected TimeSpan get_TotalLifeLength();
    [CompilerGeneratedAttribute]
private void set_TotalLifeLength(TimeSpan value);
    private static TimeSpan get_MinimumUsefulAssociationLifetime();
    private TimeSpan get_TimeTillExpiration();
    public static Association Deserialize(string handle, DateTime expiresUtc, Byte[] privateData);
    public Byte[] SerializePrivateData();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal abstract virtual string GetAssociationType(Protocol protocol);
    protected internal Byte[] Sign(Byte[] data);
    protected abstract virtual HashAlgorithm CreateHasher();
}
public enum DotNetOpenAuth.OpenId.AuthenticationRequestMode : Enum {
    public int value__;
    public static AuthenticationRequestMode Immediate;
    public static AuthenticationRequestMode Setup;
}
public abstract class DotNetOpenAuth.OpenId.Behaviors.AXFetchAsSregTransformBase : object {
    [CompilerGeneratedAttribute]
private AXAttributeFormats <AXFormats>k__BackingField;
    public AXAttributeFormats AXFormats { get; public set; }
    [CompilerGeneratedAttribute]
public AXAttributeFormats get_AXFormats();
    [CompilerGeneratedAttribute]
public void set_AXFormats(AXAttributeFormats value);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class DotNetOpenAuth.OpenId.Behaviors.BehaviorStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PapeRequestMissingRequiredPolicies { get; }
    internal static string PapeResponseOrRequiredPoliciesMissing { get; }
    internal static string PiiIncludedWithNoPiiPolicy { get; }
    internal static string PiiRequestedWithNoPiiPolicy { get; }
    internal static string PpidProviderNotGiven { get; }
    internal static string RealmDiscoveryNotPerformed { get; }
    internal static string RealmMustBeHttps { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PapeRequestMissingRequiredPolicies();
    internal static string get_PapeResponseOrRequiredPoliciesMissing();
    internal static string get_PiiIncludedWithNoPiiPolicy();
    internal static string get_PiiRequestedWithNoPiiPolicy();
    internal static string get_PpidProviderNotGiven();
    internal static string get_RealmDiscoveryNotPerformed();
    internal static string get_RealmMustBeHttps();
}
public abstract class DotNetOpenAuth.OpenId.Behaviors.GsaIcamProfileBase : object {
    private static bool disableSslRequirement;
    [CompilerGeneratedAttribute]
private static bool <AllowPersonallyIdentifiableInformation>k__BackingField;
    public static bool AllowPersonallyIdentifiableInformation { get; public set; }
    public static bool DisableSslRequirement { get; public set; }
    private static GsaIcamProfileBase();
    [CompilerGeneratedAttribute]
public static bool get_AllowPersonallyIdentifiableInformation();
    [CompilerGeneratedAttribute]
public static void set_AllowPersonallyIdentifiableInformation(bool value);
    public static bool get_DisableSslRequirement();
    public static void set_DisableSslRequirement(bool value);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.BackwardCompatibilityBindingElement : object {
    private static string ProviderEndpointParameterName;
    private static string ClaimedIdentifierParameterName;
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    private static Task`1<Nullable`1<MessageProtections>> NoneTask;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    public Channel Channel { get; public set; }
    public MessageProtections Protection { get; }
    private static BackwardCompatibilityBindingElement();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    public sealed virtual MessageProtections get_Protection();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.ExtensionsBindingElement : object {
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    private static Task`1<Nullable`1<MessageProtections>> NoneTask;
    private bool receiveUnsignedExtensions;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private IOpenIdExtensionFactory <ExtensionFactory>k__BackingField;
    public Channel Channel { get; public set; }
    public IOpenIdExtensionFactory ExtensionFactory { get; private set; }
    public MessageProtections Protection { get; }
    internal ExtensionsBindingElement(IOpenIdExtensionFactory extensionFactory, SecuritySettings securitySettings, bool receiveUnsignedExtensions);
    private static ExtensionsBindingElement();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    [CompilerGeneratedAttribute]
public IOpenIdExtensionFactory get_ExtensionFactory();
    [CompilerGeneratedAttribute]
private void set_ExtensionFactory(IOpenIdExtensionFactory value);
    public sealed virtual MessageProtections get_Protection();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    private IEnumerable`1<IOpenIdMessageExtension> GetExtensions(IProtocolMessageWithExtensions message, bool ignoreUnsigned, Func`2<string, bool> extensionFilter);
    private IDictionary`2<string, string> GetExtensionsDictionary(IProtocolMessage message, bool ignoreUnsigned);
}
public interface DotNetOpenAuth.OpenId.ChannelElements.IOpenIdExtensionFactory {
    public abstract virtual IOpenIdMessageExtension Create(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
internal interface DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage {
    public string AssociationHandle { get; public set; }
    public string InvalidateHandle { get; public set; }
    public string SignedParameterOrder { get; public set; }
    public abstract virtual string get_AssociationHandle();
    public abstract virtual void set_AssociationHandle(string value);
    public abstract virtual string get_InvalidateHandle();
    public abstract virtual void set_InvalidateHandle(string value);
    public abstract virtual string get_SignedParameterOrder();
    public abstract virtual void set_SignedParameterOrder(string value);
}
public enum DotNetOpenAuth.OpenId.ChannelElements.KeyValueFormConformanceLevel : Enum {
    public int value__;
    public static KeyValueFormConformanceLevel Loose;
    public static KeyValueFormConformanceLevel OpenId11;
    public static KeyValueFormConformanceLevel OpenId20;
}
internal class DotNetOpenAuth.OpenId.ChannelElements.KeyValueFormEncoding : object {
    private static string NewLineCharacters;
    private static Char[] IllegalKeyCharacters;
    private static Char[] IllegalValueCharacters;
    private static Encoding textEncoding;
    [CompilerGeneratedAttribute]
private KeyValueFormConformanceLevel <ConformanceLevel>k__BackingField;
    public KeyValueFormConformanceLevel ConformanceLevel { get; private set; }
    public KeyValueFormEncoding(KeyValueFormConformanceLevel conformanceLevel);
    private static KeyValueFormEncoding();
    [CompilerGeneratedAttribute]
public KeyValueFormConformanceLevel get_ConformanceLevel();
    [CompilerGeneratedAttribute]
private void set_ConformanceLevel(KeyValueFormConformanceLevel value);
    public static Byte[] GetBytes(IEnumerable`1<KeyValuePair`2<string, string>> keysAndValues);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.ChannelElements.KeyValueFormEncoding/<GetDictionaryAsync>d__0")]
public Task`1<IDictionary`2<string, string>> GetDictionaryAsync(Stream data, CancellationToken cancellationToken);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.OpenIdChannel : Channel {
    internal static string KeyValueFormContentType;
    private KeyValueFormEncoding keyValueForm;
    protected OpenIdChannel(IMessageFactory messageTypeProvider, IChannelBindingElement[] bindingElements, IHostFactories hostFactories);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.ChannelElements.OpenIdChannel/<ProcessIncomingMessageAsync>d__0")]
protected virtual Task ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    protected virtual HttpRequestMessage CreateHttpRequest(IDirectedProtocolMessage request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.ChannelElements.OpenIdChannel/<ReadFromResponseCoreAsync>d__7")]
protected virtual Task`1<IDictionary`2<string, string>> ReadFromResponseCoreAsync(HttpResponseMessage response, CancellationToken cancellationToken);
    protected virtual void OnReceivingDirectResponse(HttpResponseMessage response, IDirectResponseProtocolMessage message);
    protected virtual HttpResponseMessage PrepareDirectResponse(IProtocolMessage response);
    [CompilerGeneratedAttribute]
private Task <>n__FabricatedMethod5(IProtocolMessage , CancellationToken );
}
internal class DotNetOpenAuth.OpenId.ChannelElements.OriginalStringUriEncoder : object {
    public sealed virtual string Encode(object value);
    public sealed virtual object Decode(string value);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.ReturnToSignatureBindingElement : object {
    private static string ReturnToSignatureParameterName;
    private static string ReturnToSignatureHandleParameterName;
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    private static Task`1<Nullable`1<MessageProtections>> NoneTask;
    private static Uri SecretUri;
    private ICryptoKeyStore cryptoKeyStore;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    public Channel Channel { get; public set; }
    public MessageProtections Protection { get; }
    internal ReturnToSignatureBindingElement(ICryptoKeyStore cryptoKeyStore);
    private static ReturnToSignatureBindingElement();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    public sealed virtual MessageProtections get_Protection();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    private Byte[] GetReturnToSignature(Uri returnTo, CryptoKey cryptoKey);
}
internal abstract class DotNetOpenAuth.OpenId.ChannelElements.SigningBindingElement : object {
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, <>f__AnonymousType4`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<MessagePart, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<MessagePart, string> CS$<>9__CachedAnonymousMethodDelegate12;
    public MessageProtections Protection { get; }
    public Channel Channel { get; public set; }
    protected bool IsOnProvider { get; }
    private static SigningBindingElement();
    public sealed virtual MessageProtections get_Protection();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    protected virtual bool get_IsOnProvider();
    public virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.ChannelElements.SigningBindingElement/<ProcessIncomingMessageAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    protected abstract virtual Task`1<MessageProtections> VerifySignatureByUnrecognizedHandleAsync(IProtocolMessage message, ITamperResistantOpenIdMessage signedMessage, MessageProtections protectionsApplied, CancellationToken cancellationToken);
    protected string GetSignature(ITamperResistantOpenIdMessage signedMessage, Association association);
    protected abstract virtual Association GetAssociation(ITamperResistantOpenIdMessage signedMessage);
    protected abstract virtual Association GetSpecificAssociation(ITamperResistantOpenIdMessage signedMessage);
    protected virtual Association GetDumbAssociationForSigning();
    private void EnsureParametersRequiringSignatureAreSigned(ITamperResistantOpenIdMessage signedMessage);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<string, string> <GetSignature>b__7(string name);
    [CompilerGeneratedAttribute]
private static bool <EnsureParametersRequiringSignatureAreSigned>b__c(MessagePart part);
    [CompilerGeneratedAttribute]
private static string <EnsureParametersRequiringSignatureAreSigned>b__e(MessagePart part);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.SkipSecurityBindingElement : object {
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    public Channel Channel { get; public set; }
    public MessageProtections Protection { get; }
    private static SkipSecurityBindingElement();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    public sealed virtual MessageProtections get_Protection();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
}
public class DotNetOpenAuth.OpenId.DefaultOpenIdHostFactories : object {
    public virtual HttpMessageHandler CreateHttpMessageHandler();
    public sealed virtual HttpClient CreateHttpClient(HttpMessageHandler handler);
}
internal class DotNetOpenAuth.OpenId.DiffieHellmanUtilities : object {
    private static DHSha[] diffieHellmanSessionTypes;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegated;
    private static DiffieHellmanUtilities();
    public static HashAlgorithm Lookup(Protocol protocol, string sessionType);
    internal static string GetNameForSize(Protocol protocol, int hashSizeInBits);
    internal static Byte[] SHAHashXorSecret(HashAlgorithm hasher, DiffieHellman dh, Byte[] remotePublicKey, Byte[] plainOrEncryptedSecret);
    internal static Byte[] EnsurePositive(Byte[] inputBytes);
    private static DHSha[] CreateSessionTypes();
    [CompilerGeneratedAttribute]
private static string <CreateSessionTypes>b__6(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateSessionTypes>b__7(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateSessionTypes>b__8(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateSessionTypes>b__9(Protocol protocol);
}
internal class DotNetOpenAuth.OpenId.Extensions.AliasManager : object {
    private static string AliasFormat;
    private Dictionary`2<string, string> typeUriToAliasMap;
    private Dictionary`2<string, string> aliasToTypeUriMap;
    public IEnumerable`1<string> Aliases { get; }
    public IEnumerable`1<string> get_Aliases();
    public string GetAlias(string typeUri);
    public void SetAlias(string alias, string typeUri);
    public void AssignAliases(IEnumerable`1<string> typeUris, IDictionary`2<string, string> preferredTypeUriToAliases);
    public void SetPreferredAliasesWhereNotSet(IDictionary`2<string, string> preferredTypeUriToAliases);
    public string ResolveAlias(string alias);
    public string TryResolveAlias(string alias);
    public bool IsAliasUsed(string alias);
    public bool IsAliasAssignedTo(string typeUri);
    private string AssignNewAlias(string typeUri);
}
[DebuggerDisplayAttribute("{TypeUri} (required: {IsRequired}) ({Count})")]
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AttributeRequest : object {
    [DebuggerBrowsableAttribute("0")]
private int count;
    [CompilerGeneratedAttribute]
private string <TypeUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public string TypeUri { get; public set; }
    public bool IsRequired { get; public set; }
    public int Count { get; public set; }
    public AttributeRequest(string typeUri);
    public AttributeRequest(string typeUri, bool isRequired);
    public AttributeRequest(string typeUri, bool isRequired, int count);
    [CompilerGeneratedAttribute]
public string get_TypeUri();
    [CompilerGeneratedAttribute]
public void set_TypeUri(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    public int get_Count();
    public void set_Count(int value);
    public AttributeValues Respond(String[] values);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{TypeUri}")]
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AttributeValues : object {
    [CompilerGeneratedAttribute]
private string <TypeUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Values>k__BackingField;
    public string TypeUri { get; internal set; }
    public IList`1<string> Values { get; private set; }
    public AttributeValues(string typeUri, String[] values);
    internal AttributeValues(string typeUri);
    [CompilerGeneratedAttribute]
public string get_TypeUri();
    [CompilerGeneratedAttribute]
internal void set_TypeUri(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<string> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AXAttributeFormats : Enum {
    public int value__;
    public static AXAttributeFormats None;
    public static AXAttributeFormats AXSchemaOrg;
    public static AXAttributeFormats SchemaOpenIdNet;
    public static AXAttributeFormats OpenIdNetSchema;
    public static AXAttributeFormats All;
    public static AXAttributeFormats Common;
}
[ExtensionAttribute]
public static class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AXUtilities : object {
    [ExtensionAttribute]
public static void AddRequired(ICollection`1<AttributeRequest> collection, string typeUri);
    [ExtensionAttribute]
public static void AddOptional(ICollection`1<AttributeRequest> collection, string typeUri);
    [ExtensionAttribute]
public static void Add(ICollection`1<AttributeValues> collection, string typeUri, String[] values);
    internal static void SerializeAttributes(IDictionary`2<string, string> fields, IEnumerable`1<AttributeValues> attributes);
    internal static IEnumerable`1<AttributeValues> DeserializeAttributes(IDictionary`2<string, string> fields);
    private static AliasManager ParseAliases(IDictionary`2<string, string> fields);
}
internal static class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.Constants : object {
    internal static string TypeUri;
}
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.FetchRequest : ExtensionBase {
    [MessagePartAttribute("mode")]
private static string Mode;
    internal static CreateDelegate Factory;
    internal static Char[] IllegalAliasListCharacters;
    internal static Char[] IllegalAliasCharacters;
    private KeyedCollection`2<string, AttributeRequest> attributes;
    [CompilerGeneratedAttribute]
private Uri <UpdateUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptionalAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeRequest, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate4;
    public KeyedCollection`2<string, AttributeRequest> Attributes { get; }
    [MessagePartAttribute("update_url")]
public Uri UpdateUrl { get; public set; }
    [MessagePartAttribute("if_available")]
private string OptionalAliases { get; private set; }
    [MessagePartAttribute("required")]
private string RequiredAliases { get; private set; }
    private static FetchRequest();
    public KeyedCollection`2<string, AttributeRequest> get_Attributes();
    [CompilerGeneratedAttribute]
public Uri get_UpdateUrl();
    [CompilerGeneratedAttribute]
public void set_UpdateUrl(Uri value);
    [CompilerGeneratedAttribute]
private string get_OptionalAliases();
    [CompilerGeneratedAttribute]
private void set_OptionalAliases(string value);
    [CompilerGeneratedAttribute]
private string get_RequiredAliases();
    [CompilerGeneratedAttribute]
private void set_RequiredAliases(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    protected virtual void EnsureValidMessage();
    private static IList`1<string> ParseAliasList(string aliasList);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(AttributeRequest ar);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__3(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.FetchResponse : ExtensionBase {
    [MessagePartAttribute("mode")]
private static string Mode;
    internal static CreateDelegate Factory;
    private KeyedCollection`2<string, AttributeValues> attributesProvided;
    [CompilerGeneratedAttribute]
private Uri <UpdateUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeValues, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate3;
    public KeyedCollection`2<string, AttributeValues> Attributes { get; }
    public bool UpdateUrlSupported { get; }
    [MessagePartAttribute("update_url")]
public Uri UpdateUrl { get; public set; }
    public bool IsSignedByProvider { get; }
    private static FetchResponse();
    public KeyedCollection`2<string, AttributeValues> get_Attributes();
    public bool get_UpdateUrlSupported();
    [CompilerGeneratedAttribute]
public Uri get_UpdateUrl();
    [CompilerGeneratedAttribute]
public void set_UpdateUrl(Uri value);
    public bool get_IsSignedByProvider();
    public string GetAttributeValue(string typeUri);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    protected virtual void EnsureValidMessage();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(AttributeValues av);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__2(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.StoreRequest : ExtensionBase {
    [MessagePartAttribute("mode")]
private static string Mode;
    internal static CreateDelegate Factory;
    private KeyedCollection`2<string, AttributeValues> attributesProvided;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeValues, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate3;
    public KeyedCollection`2<string, AttributeValues> Attributes { get; }
    private static StoreRequest();
    public KeyedCollection`2<string, AttributeValues> get_Attributes();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(AttributeValues av);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__2(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.StoreResponse : ExtensionBase {
    private static string SuccessMode;
    private static string FailureMode;
    internal static CreateDelegate Factory;
    [CompilerGeneratedAttribute]
private string <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    public bool Succeeded { get; public set; }
    [MessagePartAttribute("error")]
public string FailureReason { get; public set; }
    public bool IsSignedByProvider { get; }
    [MessagePartAttribute("mode")]
private string Mode { get; private set; }
    public StoreResponse(string failureReason);
    private static StoreResponse();
    public bool get_Succeeded();
    public void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public string get_FailureReason();
    [CompilerGeneratedAttribute]
public void set_FailureReason(string value);
    public bool get_IsSignedByProvider();
    [CompilerGeneratedAttribute]
private string get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void EnsureValidMessage();
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public static class DotNetOpenAuth.OpenId.Extensions.AttributeExchange.WellKnownAttributes : object {
}
internal class DotNetOpenAuth.OpenId.Extensions.ExtensionArgumentsManager : object {
    private static Dictionary`2<string, string> typeUriToAliasAffinity;
    private Protocol protocol;
    private bool isReadMode;
    private AliasManager aliasManager;
    private Dictionary`2<string, IDictionary`2<string, string>> extensions;
    internal bool ReadMode { get; }
    private static ExtensionArgumentsManager();
    internal bool get_ReadMode();
    public static ExtensionArgumentsManager CreateIncomingExtensions(IDictionary`2<string, string> query);
    public static ExtensionArgumentsManager CreateOutgoingExtensions(Protocol protocol);
    public void AddExtensionArguments(string extensionTypeUri, IDictionary`2<string, string> arguments);
    internal IDictionary`2<string, string> GetArgumentsToSend(bool includeOpenIdPrefix);
    internal IDictionary`2<string, string> GetExtensionArguments(string extensionTypeUri);
    internal bool ContainsExtension(string extensionTypeUri);
    internal IEnumerable`1<string> GetExtensionTypeUris();
}
public class DotNetOpenAuth.OpenId.Extensions.ExtensionBase : object {
    private string typeUri;
    private IEnumerable`1<string> additionalSupportedTypeUris;
    private Dictionary`2<string, string> extraData;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSignedByRemoteParty>k__BackingField;
    private string DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.TypeUri { get; }
    private IEnumerable`1<string> DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.AdditionalSupportedTypeUris { get; }
    private bool DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.IsSignedByRemoteParty { get; private set; }
    public Version Version { get; private set; }
    private IDictionary`2<string, string> DotNetOpenAuth.Messaging.IMessage.ExtraData { get; }
    protected string TypeUri { get; }
    protected bool IsSignedByRemoteParty { get; protected set; }
    protected IEnumerable`1<string> AdditionalSupportedTypeUris { get; }
    protected IDictionary`2<string, string> ExtraData { get; }
    protected ExtensionBase(Version version, string typeUri, IEnumerable`1<string> additionalSupportedTypeUris);
    private sealed virtual override string DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.get_TypeUri();
    private sealed virtual override IEnumerable`1<string> DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.get_AdditionalSupportedTypeUris();
    private sealed virtual override bool DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.get_IsSignedByRemoteParty();
    private sealed virtual override void DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension.set_IsSignedByRemoteParty(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    private sealed virtual override IDictionary`2<string, string> DotNetOpenAuth.Messaging.IMessage.get_ExtraData();
    protected string get_TypeUri();
    [CompilerGeneratedAttribute]
protected bool get_IsSignedByRemoteParty();
    [CompilerGeneratedAttribute]
protected void set_IsSignedByRemoteParty(bool value);
    protected IEnumerable`1<string> get_AdditionalSupportedTypeUris();
    protected IDictionary`2<string, string> get_ExtraData();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessage.EnsureValidMessage();
    protected virtual void EnsureValidMessage();
}
public interface DotNetOpenAuth.OpenId.Extensions.IClientScriptExtensionResponse {
    public abstract virtual string InitializeJavaScriptData(IProtocolMessageWithExtensions response);
}
public class DotNetOpenAuth.OpenId.Extensions.OAuth.AuthorizationApprovedResponse : ExtensionBase {
    internal static CreateDelegate Factory;
    [CompilerGeneratedAttribute]
private string <RequestToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("request_token")]
public string RequestToken { get; public set; }
    [MessagePartAttribute("scope")]
public string Scope { get; public set; }
    private static AuthorizationApprovedResponse();
    [CompilerGeneratedAttribute]
public string get_RequestToken();
    [CompilerGeneratedAttribute]
public void set_RequestToken(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.OAuth.AuthorizationDeclinedResponse : ExtensionBase {
    internal static CreateDelegate Factory;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    private static AuthorizationDeclinedResponse();
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.OAuth.AuthorizationRequest : ExtensionBase {
    internal static CreateDelegate Factory;
    [CompilerGeneratedAttribute]
private string <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("consumer")]
public string Consumer { get; public set; }
    [MessagePartAttribute("scope")]
public string Scope { get; public set; }
    private static AuthorizationRequest();
    [CompilerGeneratedAttribute]
public string get_Consumer();
    [CompilerGeneratedAttribute]
public void set_Consumer(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
internal static class DotNetOpenAuth.OpenId.Extensions.OAuth.Constants : object {
    internal static string TypeUri;
    internal static string RequestTokenParameter;
}
internal class DotNetOpenAuth.OpenId.Extensions.OpenIdExtensionFactoryAggregator : object {
    private List`1<IOpenIdExtensionFactory> factories;
    internal IList`1<IOpenIdExtensionFactory> Factories { get; }
    internal IList`1<IOpenIdExtensionFactory> get_Factories();
    public sealed virtual IOpenIdMessageExtension Create(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
    internal static OpenIdExtensionFactoryAggregator LoadFromConfiguration();
}
internal static class DotNetOpenAuth.OpenId.Extensions.OpenIdExtensionsInteropHelper : object {
    private static GenderEncoder genderEncoder;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    internal static GenderEncoder GenderEncoder { get; }
    private static OpenIdExtensionsInteropHelper();
    internal static GenderEncoder get_GenderEncoder();
    internal static IEnumerable`1<AXAttributeFormats> ForEachFormat(AXAttributeFormats formats);
    internal static string TransformAXFormat(string axSchemaOrgFormatTypeUri, AXAttributeFormats targetFormat);
    internal static AXAttributeFormats DetectAXFormat(IEnumerable`1<string> typeURIs);
    internal static void FetchAttribute(FetchRequest ax, AXAttributeFormats format, string axSchemaOrgFormatAttribute, DemandLevel demandLevel);
    [CompilerGeneratedAttribute]
private static bool <DetectAXFormat>b__3(string uri);
    [CompilerGeneratedAttribute]
private static bool <DetectAXFormat>b__4(string uri);
    [CompilerGeneratedAttribute]
private static bool <DetectAXFormat>b__5(string uri);
}
public static class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.AuthenticationPolicies : object {
    public static string PhishingResistant;
    public static string MultiFactor;
    public static string PhysicalMultiFactor;
    public static string PrivatePersonalIdentifier;
    public static string USGovernmentTrustLevel1;
    public static string NoPersonallyIdentifiableInformation;
    internal static string None;
}
internal static class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.Constants : object {
    internal static string TypeUri;
    internal static string CompatibilityAlias;
    internal static string AuthLevelNamespaceDeclarationPrefix;
}
internal class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.DateTimeEncoder : object {
    private static String[] PermissibleDateTimeFormats;
    private static DateTimeEncoder();
    public sealed virtual string Encode(object value);
    public sealed virtual object Decode(string value);
}
public enum DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.NistAssuranceLevel : Enum {
    public int value__;
    public static NistAssuranceLevel InsufficientForLevel1;
    public static NistAssuranceLevel Level1;
    public static NistAssuranceLevel Level2;
    public static NistAssuranceLevel Level3;
    public static NistAssuranceLevel Level4;
}
internal static class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.PapeUtilities : object {
    internal static AliasManager FindIncomingAliases(IDictionary`2<string, string> fields);
    internal static string ConcatenateListOfElements(IEnumerable`1<string> values);
}
public class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.PolicyRequest : ExtensionBase {
    internal static CreateDelegate Factory;
    [MessagePartAttribute("preferred_auth_policies")]
private string preferredPoliciesString;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaximumAuthenticationAge>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <PreferredPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <PreferredAuthLevelTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("max_auth_age")]
public Nullable`1<TimeSpan> MaximumAuthenticationAge { get; public set; }
    public IList`1<string> PreferredPolicies { get; private set; }
    public IList`1<string> PreferredAuthLevelTypes { get; private set; }
    private static PolicyRequest();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaximumAuthenticationAge();
    [CompilerGeneratedAttribute]
public void set_MaximumAuthenticationAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_PreferredPolicies();
    [CompilerGeneratedAttribute]
private void set_PreferredPolicies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_PreferredAuthLevelTypes();
    [CompilerGeneratedAttribute]
private void set_PreferredAuthLevelTypes(IList`1<string> value);
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static string SerializePolicies(IEnumerable`1<string> policies);
    private static string SerializeAuthLevels(IList`1<string> preferredAuthLevelTypes, AliasManager aliases);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.PolicyResponse : ExtensionBase {
    private static string AuthLevelAliasPrefix;
    internal static CreateDelegate Factory;
    [MessagePartAttribute("auth_policies")]
private string actualPoliciesString;
    private Nullable`1<DateTime> authenticationTimeUtc;
    [CompilerGeneratedAttribute]
private IList`1<string> <ActualPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <AssuranceLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    public IList`1<string> ActualPolicies { get; private set; }
    [MessagePartAttribute("auth_time")]
public Nullable`1<DateTime> AuthenticationTimeUtc { get; public set; }
    public Nullable`1<NistAssuranceLevel> NistAssuranceLevel { get; public set; }
    public IDictionary`2<string, string> AssuranceLevels { get; private set; }
    public bool IsSignedByProvider { get; }
    private static PolicyResponse();
    [CompilerGeneratedAttribute]
public IList`1<string> get_ActualPolicies();
    [CompilerGeneratedAttribute]
private void set_ActualPolicies(IList`1<string> value);
    public Nullable`1<DateTime> get_AuthenticationTimeUtc();
    public void set_AuthenticationTimeUtc(Nullable`1<DateTime> value);
    public Nullable`1<NistAssuranceLevel> get_NistAssuranceLevel();
    public void set_NistAssuranceLevel(Nullable`1<NistAssuranceLevel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_AssuranceLevels();
    [CompilerGeneratedAttribute]
private void set_AssuranceLevels(IDictionary`2<string, string> value);
    public bool get_IsSignedByProvider();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static string SerializePolicies(IList`1<string> policies);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.ClaimsRequest : ExtensionBase {
    internal static CreateDelegate Factory;
    private string typeUriDeserializedFrom;
    [CompilerGeneratedAttribute]
private Uri <PolicyUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <BirthDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private DemandLevel <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Synthesized>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("policy_url")]
public Uri PolicyUrl { get; public set; }
    public DemandLevel Nickname { get; public set; }
    public DemandLevel Email { get; public set; }
    public DemandLevel FullName { get; public set; }
    public DemandLevel BirthDate { get; public set; }
    public DemandLevel Gender { get; public set; }
    public DemandLevel PostalCode { get; public set; }
    public DemandLevel Country { get; public set; }
    public DemandLevel Language { get; public set; }
    public DemandLevel TimeZone { get; public set; }
    internal bool Synthesized { get; internal set; }
    [MessagePartAttribute("required")]
private string RequiredList { get; private set; }
    [MessagePartAttribute("optional")]
private string OptionalList { get; private set; }
    internal ClaimsRequest(string typeUri);
    private static ClaimsRequest();
    [CompilerGeneratedAttribute]
public Uri get_PolicyUrl();
    [CompilerGeneratedAttribute]
public void set_PolicyUrl(Uri value);
    [CompilerGeneratedAttribute]
public DemandLevel get_Nickname();
    [CompilerGeneratedAttribute]
public void set_Nickname(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_BirthDate();
    [CompilerGeneratedAttribute]
public void set_BirthDate(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_Gender();
    [CompilerGeneratedAttribute]
public void set_Gender(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(DemandLevel value);
    [CompilerGeneratedAttribute]
public DemandLevel get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(DemandLevel value);
    [CompilerGeneratedAttribute]
internal bool get_Synthesized();
    [CompilerGeneratedAttribute]
internal void set_Synthesized(bool value);
    private string get_RequiredList();
    private void set_RequiredList(string value);
    private string get_OptionalList();
    private void set_OptionalList(string value);
    public static bool op_Equality(ClaimsRequest one, ClaimsRequest other);
    public static bool op_Inequality(ClaimsRequest one, ClaimsRequest other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public ClaimsResponse CreateResponse();
    internal void SetProfileRequestFromList(IEnumerable`1<string> fieldNames, DemandLevel requestLevel);
    private String[] AssembleProfileFields(DemandLevel level);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public class DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.ClaimsResponse : ExtensionBase {
    internal static CreateDelegate Factory;
    private static Regex birthDateValidator;
    private string birthDateRaw;
    private Nullable`1<DateTime> birthDate;
    private CultureInfo culture;
    [CompilerGeneratedAttribute]
private string <Nickname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Gender> <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("nickname")]
public string Nickname { get; public set; }
    [MessagePartAttribute("email")]
public string Email { get; public set; }
    [MessagePartAttribute("fullname")]
public string FullName { get; public set; }
    public Nullable`1<DateTime> BirthDate { get; public set; }
    [MessagePartAttribute("dob")]
public string BirthDateRaw { get; public set; }
    [MessagePartAttribute("gender")]
public Nullable`1<Gender> Gender { get; public set; }
    [MessagePartAttribute("postcode")]
public string PostalCode { get; public set; }
    [MessagePartAttribute("country")]
public string Country { get; public set; }
    [MessagePartAttribute("language")]
public string Language { get; public set; }
    [MessagePartAttribute("timezone")]
public string TimeZone { get; public set; }
    public MailAddress MailAddress { get; }
    [XmlIgnoreAttribute]
public CultureInfo Culture { get; public set; }
    public bool IsSignedByProvider { get; }
    public ClaimsResponse(string typeUriToUse);
    private static ClaimsResponse();
    [CompilerGeneratedAttribute]
public string get_Nickname();
    [CompilerGeneratedAttribute]
public void set_Nickname(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    public Nullable`1<DateTime> get_BirthDate();
    public void set_BirthDate(Nullable`1<DateTime> value);
    public string get_BirthDateRaw();
    public void set_BirthDateRaw(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Gender> get_Gender();
    [CompilerGeneratedAttribute]
public void set_Gender(Nullable`1<Gender> value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(string value);
    public MailAddress get_MailAddress();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_IsSignedByProvider();
    public static bool op_Equality(ClaimsResponse one, ClaimsResponse other);
    public static bool op_Inequality(ClaimsResponse one, ClaimsResponse other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override string DotNetOpenAuth.OpenId.Extensions.IClientScriptExtensionResponse.InitializeJavaScriptData(IProtocolMessageWithExtensions response);
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending();
    private sealed virtual override void DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving();
    private static string EmptyToNull(string value);
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public static class DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.Constants : object {
    internal static string sreg_compatibility_alias;
    internal static string policy_url;
    internal static string optional;
    internal static string required;
    internal static string nickname;
    internal static string email;
    internal static string fullname;
    internal static string dob;
    internal static string gender;
    internal static string postcode;
    internal static string country;
    internal static string language;
    internal static string timezone;
    internal static String[] AdditionalTypeUris;
    private static Constants();
}
public enum DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.DemandLevel : Enum {
    public int value__;
    public static DemandLevel NoRequest;
    public static DemandLevel Request;
    public static DemandLevel Require;
}
public enum DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.Gender : Enum {
    public int value__;
    public static Gender Male;
    public static Gender Female;
}
internal class DotNetOpenAuth.OpenId.Extensions.SimpleRegistration.GenderEncoder : object {
    public sealed virtual string Encode(object value);
    public sealed virtual object Decode(string value);
}
internal class DotNetOpenAuth.OpenId.Extensions.StandardOpenIdExtensionFactory : object {
    private List`1<CreateDelegate> registeredExtensions;
    public sealed virtual IOpenIdMessageExtension Create(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
    internal void RegisterExtension(CreateDelegate creator);
}
internal static class DotNetOpenAuth.OpenId.Extensions.UI.UIConstants : object {
    internal static string UITypeUri;
    internal static string PopupSupported;
    internal static string LangPrefSupported;
    internal static string IconSupported;
}
public static class DotNetOpenAuth.OpenId.Extensions.UI.UIModes : object {
    public static string Popup;
}
public class DotNetOpenAuth.OpenId.Extensions.UI.UIRequest : object {
    internal static CreateDelegate Factory;
    private static String[] additionalTypeUris;
    private Dictionary`2<string, string> extraData;
    [CompilerGeneratedAttribute]
private CultureInfo[] <LanguagePreference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSignedByRemoteParty>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateDelegate CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("lang")]
public CultureInfo[] LanguagePreference { get; public set; }
    [MessagePartAttribute("mode")]
public string Mode { get; public set; }
    [MessagePartAttribute("icon")]
public Nullable`1<bool> Icon { get; public set; }
    public string TypeUri { get; }
    public IEnumerable`1<string> AdditionalSupportedTypeUris { get; }
    public bool IsSignedByRemoteParty { get; public set; }
    public Version Version { get; }
    public IDictionary`2<string, string> ExtraData { get; }
    private static UIRequest();
    [CompilerGeneratedAttribute]
public CultureInfo[] get_LanguagePreference();
    [CompilerGeneratedAttribute]
public void set_LanguagePreference(CultureInfo[] value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Nullable`1<bool> value);
    public sealed virtual string get_TypeUri();
    public sealed virtual IEnumerable`1<string> get_AdditionalSupportedTypeUris();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSignedByRemoteParty();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSignedByRemoteParty(bool value);
    public sealed virtual Version get_Version();
    public sealed virtual IDictionary`2<string, string> get_ExtraData();
    public sealed virtual void EnsureValidMessage();
    public sealed virtual void OnSending();
    public sealed virtual void OnReceiving();
    [CompilerGeneratedAttribute]
private static IOpenIdMessageExtension <.cctor>b__0(string typeUri, IDictionary`2<string, string> data, IProtocolMessageWithExtensions baseMessage, bool isProviderRole);
}
public static class DotNetOpenAuth.OpenId.Extensions.UI.UIUtilities : object {
    public static int PopupWidth;
    public static int PopupHeight;
}
internal class DotNetOpenAuth.OpenId.HmacShaAssociation : Association {
    private static HmacSha[] hmacShaAssociationTypes;
    private HmacSha typeIdentity;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate14;
    public int HashBitLength { get; }
    private HmacShaAssociation(HmacSha typeIdentity, string handle, Byte[] secret, TimeSpan totalLifeLength);
    private static HmacShaAssociation();
    public virtual int get_HashBitLength();
    public static HmacShaAssociation Create(Protocol protocol, string associationType, string handle, Byte[] secret, TimeSpan totalLifeLength);
    public static HmacShaAssociation Create(string handle, Byte[] secret, TimeSpan totalLifeLength);
    public static int GetSecretLength(Protocol protocol, string associationType);
    internal static bool TryFindBestAssociation(Protocol protocol, bool highSecurityIsBetter, SecuritySettings securityRequirements, bool requireMatchingDHSessionType, String& associationType, String& sessionType);
    internal static bool IsDHSessionCompatible(Protocol protocol, string associationType, string sessionType);
    internal virtual string GetAssociationType(Protocol protocol);
    protected virtual HashAlgorithm CreateHasher();
    private static HmacSha[] CreateAssociationTypes();
    [CompilerGeneratedAttribute]
private static string <CreateAssociationTypes>b__d(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateAssociationTypes>b__e(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateAssociationTypes>b__f(Protocol protocol);
    [CompilerGeneratedAttribute]
private static string <CreateAssociationTypes>b__10(Protocol protocol);
}
[DefaultEncoderAttribute("DotNetOpenAuth.OpenId.Identifier/IdentifierEncoder")]
public abstract class DotNetOpenAuth.OpenId.Identifier : object {
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EqualityOnStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDiscoverySecureEndToEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeserializedInstance>k__BackingField;
    internal string OriginalString { get; private set; }
    internal string SerializedString { get; }
    protected internal static bool EqualityOnStrings { get; protected internal set; }
    protected internal bool IsDiscoverySecureEndToEnd { get; private set; }
    protected bool IsDeserializedInstance { get; private set; }
    protected Identifier(string originalString, bool isDiscoverySecureEndToEnd);
    [CompilerGeneratedAttribute]
internal string get_OriginalString();
    [CompilerGeneratedAttribute]
private void set_OriginalString(string value);
    internal virtual string get_SerializedString();
    [CompilerGeneratedAttribute]
protected internal static bool get_EqualityOnStrings();
    [CompilerGeneratedAttribute]
protected internal static void set_EqualityOnStrings(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDiscoverySecureEndToEnd();
    [CompilerGeneratedAttribute]
private void set_IsDiscoverySecureEndToEnd(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsDeserializedInstance();
    [CompilerGeneratedAttribute]
private void set_IsDeserializedInstance(bool value);
    [DebuggerStepThroughAttribute]
public static Identifier op_Implicit(string identifier);
    [DebuggerStepThroughAttribute]
public static Identifier op_Implicit(Uri identifier);
    [DebuggerStepThroughAttribute]
public static string op_Implicit(Identifier identifier);
    public static Identifier Parse(string identifier);
    public static Identifier Parse(string identifier, bool serializeExactValue);
    public static bool TryParse(string value, Identifier& result);
    public static bool IsValid(string identifier);
    public static bool op_Equality(Identifier id1, Identifier id2);
    public static bool op_Inequality(Identifier id1, Identifier id2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static Identifier Reparse(Identifier identifier);
    internal abstract virtual Identifier TrimFragment();
    internal abstract virtual bool TryRequireSsl(Identifier& secureIdentifier);
}
[DebuggerDisplayAttribute("ClaimedIdentifier: {ClaimedIdentifier}, ProviderEndpoint: {ProviderEndpoint}, OpenId: {Protocol.Version}")]
public class DotNetOpenAuth.OpenId.IdentifierDiscoveryResult : object {
    private Protocol protocol;
    private Identifier claimedIdentifier;
    private string friendlyIdentifierForDisplay;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <UserSuppliedIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <ProviderLocalIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProviderEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProviderEndpointPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ServicePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<IdentifierDiscoveryResult> CS$<>9__CachedAnonymousMethodDelegate1;
    public Version Version { get; private set; }
    public Identifier UserSuppliedIdentifier { get; private set; }
    public Identifier ClaimedIdentifier { get; internal set; }
    public Identifier ProviderLocalIdentifier { get; private set; }
    public string FriendlyIdentifierForDisplay { get; }
    public Uri ProviderEndpoint { get; private set; }
    public Nullable`1<int> ProviderEndpointPriority { get; private set; }
    public Nullable`1<int> ServicePriority { get; private set; }
    public ReadOnlyCollection`1<string> Capabilities { get; private set; }
    private Uri DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.Uri { get; }
    internal static Comparison`1<IdentifierDiscoveryResult> EndpointOrder { get; }
    internal Protocol Protocol { get; }
    private IdentifierDiscoveryResult(ProviderEndpointDescription providerEndpoint, Identifier claimedIdentifier, Identifier userSuppliedIdentifier, Identifier providerLocalIdentifier, Nullable`1<int> servicePriority, Nullable`1<int> uriPriority);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Identifier get_UserSuppliedIdentifier();
    [CompilerGeneratedAttribute]
private void set_UserSuppliedIdentifier(Identifier value);
    public Identifier get_ClaimedIdentifier();
    internal void set_ClaimedIdentifier(Identifier value);
    [CompilerGeneratedAttribute]
public Identifier get_ProviderLocalIdentifier();
    [CompilerGeneratedAttribute]
private void set_ProviderLocalIdentifier(Identifier value);
    public string get_FriendlyIdentifierForDisplay();
    [CompilerGeneratedAttribute]
public Uri get_ProviderEndpoint();
    [CompilerGeneratedAttribute]
private void set_ProviderEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProviderEndpointPriority();
    [CompilerGeneratedAttribute]
private void set_ProviderEndpointPriority(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ServicePriority();
    [CompilerGeneratedAttribute]
private void set_ServicePriority(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_Capabilities();
    [CompilerGeneratedAttribute]
private void set_Capabilities(ReadOnlyCollection`1<string> value);
    private sealed virtual override Uri DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.get_Uri();
    internal static Comparison`1<IdentifierDiscoveryResult> get_EndpointOrder();
    internal Protocol get_Protocol();
    public static bool op_Equality(IdentifierDiscoveryResult se1, IdentifierDiscoveryResult se2);
    public static bool op_Inequality(IdentifierDiscoveryResult se1, IdentifierDiscoveryResult se2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool IsExtensionSupported();
    public sealed virtual bool IsExtensionSupported(Type extensionType);
    public bool IsExtensionSupported(IOpenIdMessageExtension extension);
    internal static IdentifierDiscoveryResult CreateForProviderIdentifier(Identifier providerIdentifier, ProviderEndpointDescription providerEndpoint, Nullable`1<int> servicePriority, Nullable`1<int> uriPriority);
    internal static IdentifierDiscoveryResult CreateForClaimedIdentifier(Identifier claimedIdentifier, Identifier providerLocalIdentifier, ProviderEndpointDescription providerEndpoint, Nullable`1<int> servicePriority, Nullable`1<int> uriPriority);
    internal static IdentifierDiscoveryResult CreateForClaimedIdentifier(Identifier claimedIdentifier, Identifier userSuppliedIdentifier, Identifier providerLocalIdentifier, ProviderEndpointDescription providerEndpoint, Nullable`1<int> servicePriority, Nullable`1<int> uriPriority);
    internal bool IsTypeUriPresent(string typeUri);
    internal void SetCapabilitiesForTestHook(ReadOnlyCollection`1<string> value);
    private static double GetEndpointPrecedenceOrderByServiceType(IdentifierDiscoveryResult endpoint);
    [CompilerGeneratedAttribute]
private static int <get_EndpointOrder>b__0(IdentifierDiscoveryResult se1, IdentifierDiscoveryResult se2);
    [CompilerGeneratedAttribute]
private bool <IsExtensionSupported>b__2(string typeUri);
}
public class DotNetOpenAuth.OpenId.IdentifierDiscoveryServiceResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IdentifierDiscoveryResult> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AbortDiscoveryChain>k__BackingField;
    public IEnumerable`1<IdentifierDiscoveryResult> Results { get; private set; }
    public bool AbortDiscoveryChain { get; private set; }
    public IdentifierDiscoveryServiceResult(IEnumerable`1<IdentifierDiscoveryResult> results, bool abortDiscoveryChain);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IdentifierDiscoveryResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IEnumerable`1<IdentifierDiscoveryResult> value);
    [CompilerGeneratedAttribute]
public bool get_AbortDiscoveryChain();
    [CompilerGeneratedAttribute]
private void set_AbortDiscoveryChain(bool value);
}
internal class DotNetOpenAuth.OpenId.IdentifierDiscoveryServices : object {
    private IOpenIdHost host;
    private IList`1<IIdentifierDiscoveryService> discoveryServices;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public IList`1<IIdentifierDiscoveryService> DiscoveryServices { get; }
    internal IdentifierDiscoveryServices(IOpenIdHost host);
    public IList`1<IIdentifierDiscoveryService> get_DiscoveryServices();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.IdentifierDiscoveryServices/<DiscoverAsync>d__4")]
public Task`1<IEnumerable`1<IdentifierDiscoveryResult>> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static bool <DiscoverAsync>b__0(IdentifierDiscoveryResult result);
    [CompilerGeneratedAttribute]
private static bool <DiscoverAsync>b__1(IdentifierDiscoveryResult result);
}
public interface DotNetOpenAuth.OpenId.IIdentifierDiscoveryService {
    public abstract virtual Task`1<IdentifierDiscoveryServiceResult> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
}
internal interface DotNetOpenAuth.OpenId.IOpenIdHost {
    public SecuritySettings SecuritySettings { get; }
    public IHostFactories HostFactories { get; }
    public abstract virtual SecuritySettings get_SecuritySettings();
    public abstract virtual IHostFactories get_HostFactories();
}
internal class DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanRequest : AssociateRequest {
    internal static int DefaultX;
    internal static Byte[] DefaultGen;
    internal static Byte[] DefaultMod;
    [CompilerGeneratedAttribute]
private Byte[] <DiffieHellmanModulus>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DiffieHellmanGen>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DiffieHellmanConsumerPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffieHellman <Algorithm>k__BackingField;
    [MessagePartAttribute("openid.dh_modulus")]
internal Byte[] DiffieHellmanModulus { get; internal set; }
    [MessagePartAttribute("openid.dh_gen")]
internal Byte[] DiffieHellmanGen { get; internal set; }
    [MessagePartAttribute("openid.dh_consumer_public")]
internal Byte[] DiffieHellmanConsumerPublic { get; internal set; }
    internal DiffieHellman Algorithm { get; private set; }
    internal AssociateDiffieHellmanRequest(Version version, Uri providerEndpoint);
    private static AssociateDiffieHellmanRequest();
    [CompilerGeneratedAttribute]
internal Byte[] get_DiffieHellmanModulus();
    [CompilerGeneratedAttribute]
internal void set_DiffieHellmanModulus(Byte[] value);
    [CompilerGeneratedAttribute]
internal Byte[] get_DiffieHellmanGen();
    [CompilerGeneratedAttribute]
internal void set_DiffieHellmanGen(Byte[] value);
    [CompilerGeneratedAttribute]
internal Byte[] get_DiffieHellmanConsumerPublic();
    [CompilerGeneratedAttribute]
internal void set_DiffieHellmanConsumerPublic(Byte[] value);
    [CompilerGeneratedAttribute]
internal DiffieHellman get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(DiffieHellman value);
    internal void InitializeRequest();
}
internal abstract class DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanResponse : AssociateSuccessfulResponse {
    [CompilerGeneratedAttribute]
private Byte[] <DiffieHellmanServerPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncodedMacKey>k__BackingField;
    [MessagePartAttribute("dh_server_public")]
internal Byte[] DiffieHellmanServerPublic { get; internal set; }
    [MessagePartAttribute("enc_mac_key")]
internal Byte[] EncodedMacKey { get; internal set; }
    internal AssociateDiffieHellmanResponse(Version responseVersion, AssociateDiffieHellmanRequest originatingRequest);
    [CompilerGeneratedAttribute]
internal Byte[] get_DiffieHellmanServerPublic();
    [CompilerGeneratedAttribute]
internal void set_DiffieHellmanServerPublic(Byte[] value);
    [CompilerGeneratedAttribute]
internal Byte[] get_EncodedMacKey();
    [CompilerGeneratedAttribute]
internal void set_EncodedMacKey(Byte[] value);
}
[DebuggerDisplayAttribute("OpenID {Version} {Mode} {AssociationType} {SessionType}")]
internal abstract class DotNetOpenAuth.OpenId.Messages.AssociateRequest : RequestBase {
    [CompilerGeneratedAttribute]
private string <AssociationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [MessagePartAttribute("openid.assoc_type")]
internal string AssociationType { get; internal set; }
    [MessagePartAttribute("openid.session_type")]
[MessagePartAttribute("openid.session_type")]
internal string SessionType { get; internal set; }
    protected AssociateRequest(Version version, Uri providerEndpoint);
    [CompilerGeneratedAttribute]
internal string get_AssociationType();
    [CompilerGeneratedAttribute]
internal void set_AssociationType(string value);
    [CompilerGeneratedAttribute]
internal string get_SessionType();
    [CompilerGeneratedAttribute]
internal void set_SessionType(string value);
    public virtual void EnsureValidMessage();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Protocol p);
}
[DebuggerDisplayAttribute("OpenID {Version} associate response {AssociationHandle} {AssociationType} {SessionType}")]
internal abstract class DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse : DirectResponseBase {
    [CompilerGeneratedAttribute]
private string <AssociationHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssociationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExpiresIn>k__BackingField;
    [MessagePartAttribute("assoc_handle")]
internal string AssociationHandle { get; internal set; }
    [MessagePartAttribute("assoc_type")]
internal string AssociationType { get; internal set; }
    [MessagePartAttribute("session_type")]
[MessagePartAttribute("session_type")]
internal string SessionType { get; internal set; }
    [MessagePartAttribute("expires_in")]
internal long ExpiresIn { get; internal set; }
    internal AssociateSuccessfulResponse(Version responseVersion, AssociateRequest originatingRequest);
    [CompilerGeneratedAttribute]
internal string get_AssociationHandle();
    [CompilerGeneratedAttribute]
internal void set_AssociationHandle(string value);
    [CompilerGeneratedAttribute]
internal string get_AssociationType();
    [CompilerGeneratedAttribute]
internal void set_AssociationType(string value);
    [CompilerGeneratedAttribute]
internal string get_SessionType();
    [CompilerGeneratedAttribute]
internal void set_SessionType(string value);
    [CompilerGeneratedAttribute]
internal long get_ExpiresIn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresIn(long value);
    public virtual void EnsureValidMessage();
}
internal class DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedRequest : AssociateRequest {
    internal AssociateUnencryptedRequest(Version version, Uri providerEndpoint);
    public virtual void EnsureValidMessage();
}
internal class DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponse : AssociateSuccessfulResponse {
    [CompilerGeneratedAttribute]
private Byte[] <MacKey>k__BackingField;
    [MessagePartAttribute("mac_key")]
internal Byte[] MacKey { get; internal set; }
    internal AssociateUnencryptedResponse(Version responseVersion, AssociateUnencryptedRequest originatingRequest);
    [CompilerGeneratedAttribute]
internal Byte[] get_MacKey();
    [CompilerGeneratedAttribute]
internal void set_MacKey(Byte[] value);
}
[DebuggerDisplayAttribute("OpenID {Version} associate (failed) response")]
internal class DotNetOpenAuth.OpenId.Messages.AssociateUnsuccessfulResponse : DirectErrorResponse {
    [MessagePartAttribute("error_code")]
private string Error;
    [CompilerGeneratedAttribute]
private string <AssociationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionType>k__BackingField;
    [MessagePartAttribute("assoc_type")]
internal string AssociationType { get; internal set; }
    [MessagePartAttribute("session_type")]
internal string SessionType { get; internal set; }
    internal AssociateUnsuccessfulResponse(Version responseVersion, AssociateRequest originatingRequest);
    [CompilerGeneratedAttribute]
internal string get_AssociationType();
    [CompilerGeneratedAttribute]
internal void set_AssociationType(string value);
    [CompilerGeneratedAttribute]
internal string get_SessionType();
    [CompilerGeneratedAttribute]
internal void set_SessionType(string value);
}
internal class DotNetOpenAuth.OpenId.Messages.CheckAuthenticationRequest : RequestBase {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReturnTo>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate3;
    internal bool IsValid { get; internal set; }
    [MessagePartAttribute("openid.return_to")]
[MessagePartAttribute("openid.return_to")]
internal Uri ReturnTo { get; internal set; }
    internal CheckAuthenticationRequest(Version version, Uri providerEndpoint);
    internal CheckAuthenticationRequest(IndirectSignedResponse message, Channel channel);
    [CompilerGeneratedAttribute]
internal bool get_IsValid();
    [CompilerGeneratedAttribute]
internal void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
internal Uri get_ReturnTo();
    [CompilerGeneratedAttribute]
internal void set_ReturnTo(Uri value);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Protocol p);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(Protocol p);
}
internal class DotNetOpenAuth.OpenId.Messages.CheckAuthenticationResponse : DirectResponseBase {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvalidateHandle>k__BackingField;
    [MessagePartAttribute("is_valid")]
internal bool IsValid { get; internal set; }
    [MessagePartAttribute("invalidate_handle")]
[MessagePartAttribute("invalidate_handle")]
internal string InvalidateHandle { get; internal set; }
    internal CheckAuthenticationResponse(Version responseVersion, CheckAuthenticationRequest request);
    [CompilerGeneratedAttribute]
internal bool get_IsValid();
    [CompilerGeneratedAttribute]
internal void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
internal string get_InvalidateHandle();
    [CompilerGeneratedAttribute]
internal void set_InvalidateHandle(string value);
}
[DebuggerDisplayAttribute("OpenID {Version} {Mode} {ClaimedIdentifier}")]
internal class DotNetOpenAuth.OpenId.Messages.CheckIdRequest : SignedResponseRequest {
    [CompilerGeneratedAttribute]
private Identifier <ClaimedIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <LocalIdentifier>k__BackingField;
    [MessagePartAttribute("openid.claimed_id")]
internal Identifier ClaimedIdentifier { get; internal set; }
    [MessagePartAttribute("openid.identity")]
internal Identifier LocalIdentifier { get; internal set; }
    internal CheckIdRequest(Version version, Uri providerEndpoint, AuthenticationRequestMode mode);
    [CompilerGeneratedAttribute]
internal Identifier get_ClaimedIdentifier();
    [CompilerGeneratedAttribute]
internal void set_ClaimedIdentifier(Identifier value);
    [CompilerGeneratedAttribute]
internal Identifier get_LocalIdentifier();
    [CompilerGeneratedAttribute]
internal void set_LocalIdentifier(Identifier value);
    public virtual void EnsureValidMessage();
}
internal class DotNetOpenAuth.OpenId.Messages.DirectErrorResponse : DirectResponseBase {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Contact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reference>k__BackingField;
    private HttpStatusCode DotNetOpenAuth.Messaging.IHttpDirectResponse.HttpStatusCode { get; }
    private WebHeaderCollection DotNetOpenAuth.Messaging.IHttpDirectResponse.Headers { get; }
    [MessagePartAttribute("error")]
public string ErrorMessage { get; public set; }
    [MessagePartAttribute("contact")]
public string Contact { get; public set; }
    [MessagePartAttribute("reference")]
public string Reference { get; public set; }
    internal DirectErrorResponse(Version responseVersion, IDirectedProtocolMessage originatingRequest);
    private sealed virtual override HttpStatusCode DotNetOpenAuth.Messaging.IHttpDirectResponse.get_HttpStatusCode();
    private sealed virtual override WebHeaderCollection DotNetOpenAuth.Messaging.IHttpDirectResponse.get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Contact();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Contact(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reference(string value);
}
[DebuggerDisplayAttribute("OpenID {Version} response")]
internal class DotNetOpenAuth.OpenId.Messages.DirectResponseBase : object {
    [MessagePartAttribute("ns")]
private string OpenIdNamespace;
    private IDirectedProtocolMessage originatingRequest;
    private bool incoming;
    private Dictionary`2<string, string> extraData;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public Version Version { get; private set; }
    public MessageProtections RequiredProtection { get; }
    public MessageTransport Transport { get; }
    public IDictionary`2<string, string> ExtraData { get; }
    private IDirectedProtocolMessage DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage.OriginatingRequest { get; }
    protected internal bool Incoming { get; }
    protected Protocol Protocol { get; }
    protected IDirectedProtocolMessage OriginatingRequest { get; }
    protected DirectResponseBase(Version responseVersion, IDirectedProtocolMessage originatingRequest);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    public sealed virtual MessageProtections get_RequiredProtection();
    public sealed virtual MessageTransport get_Transport();
    public sealed virtual IDictionary`2<string, string> get_ExtraData();
    private sealed virtual override IDirectedProtocolMessage DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage.get_OriginatingRequest();
    protected internal bool get_Incoming();
    protected Protocol get_Protocol();
    protected IDirectedProtocolMessage get_OriginatingRequest();
    public virtual void EnsureValidMessage();
    internal void SetAsIncoming();
}
internal interface DotNetOpenAuth.OpenId.Messages.IErrorMessage {
    public string ErrorMessage { get; public set; }
    public string Contact { get; public set; }
    public string Reference { get; public set; }
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual string get_Contact();
    public abstract virtual void set_Contact(string value);
    public abstract virtual string get_Reference();
    public abstract virtual void set_Reference(string value);
}
internal class DotNetOpenAuth.OpenId.Messages.IndirectErrorResponse : IndirectResponseBase {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Contact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reference>k__BackingField;
    [MessagePartAttribute("openid.error")]
public string ErrorMessage { get; public set; }
    [MessagePartAttribute("openid.contact")]
public string Contact { get; public set; }
    [MessagePartAttribute("openid.reference")]
public string Reference { get; public set; }
    internal IndirectErrorResponse(SignedResponseRequest request);
    internal IndirectErrorResponse(Version version, Uri recipient);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Contact();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Contact(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reference(string value);
}
internal class DotNetOpenAuth.OpenId.Messages.IndirectResponseBase : RequestBase {
    private IList`1<IExtensionMessage> extensions;
    [CompilerGeneratedAttribute]
private SignedResponseRequest <OriginatingRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IOpenIdMessageExtension, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IOpenIdMessageExtension, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public IList`1<IExtensionMessage> Extensions { get; }
    internal IEnumerable`1<IOpenIdMessageExtension> SignedExtensions { get; }
    internal IEnumerable`1<IOpenIdMessageExtension> UnsignedExtensions { get; }
    protected SignedResponseRequest OriginatingRequest { get; private set; }
    protected IndirectResponseBase(SignedResponseRequest request, string mode);
    protected IndirectResponseBase(Version version, Uri relyingPartyReturnTo, string mode);
    public sealed virtual IList`1<IExtensionMessage> get_Extensions();
    internal IEnumerable`1<IOpenIdMessageExtension> get_SignedExtensions();
    internal IEnumerable`1<IOpenIdMessageExtension> get_UnsignedExtensions();
    [CompilerGeneratedAttribute]
protected SignedResponseRequest get_OriginatingRequest();
    [CompilerGeneratedAttribute]
private void set_OriginatingRequest(SignedResponseRequest value);
    internal static Version GetVersion(IProtocolMessage message);
    private static Uri GetReturnTo(SignedResponseRequest message);
    [CompilerGeneratedAttribute]
private static bool <get_SignedExtensions>b__0(IOpenIdMessageExtension ext);
    [CompilerGeneratedAttribute]
private static bool <get_UnsignedExtensions>b__2(IOpenIdMessageExtension ext);
}
[DebuggerDisplayAttribute("OpenID {Version} {Mode} (no id assertion)")]
internal class DotNetOpenAuth.OpenId.Messages.IndirectSignedResponse : IndirectResponseBase {
    private static String[] PermissibleDateTimeFormats;
    private DateTime creationDateUtc;
    private IDictionary`2<string, string> returnToParameters;
    [CompilerGeneratedAttribute]
private string <DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage.Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.SignedParameterOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.AssociationHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.InvalidateHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProviderEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReturnTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnToParametersSignatureValidated>k__BackingField;
    public MessageProtections RequiredProtection { get; }
    [MessagePartAttribute("openid.sig")]
private string DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage.Signature { get; private set; }
    [MessagePartAttribute("openid.signed")]
private string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.SignedParameterOrder { get; private set; }
    [MessagePartAttribute("openid.assoc_handle")]
[MessagePartAttribute("openid.assoc_handle")]
private string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.AssociationHandle { get; private set; }
    private string DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.Nonce { get; private set; }
    private string DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.NonceContext { get; }
    private DateTime DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage.UtcCreationDate { get; private set; }
    [MessagePartAttribute("openid.invalidate_handle")]
[MessagePartAttribute("openid.invalidate_handle")]
private string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.InvalidateHandle { get; private set; }
    [MessagePartAttribute("openid.op_endpoint")]
internal Uri ProviderEndpoint { get; internal set; }
    [MessagePartAttribute("openid.return_to")]
internal Uri ReturnTo { get; internal set; }
    internal bool ReturnToParametersSignatureValidated { get; internal set; }
    internal string ResponseNonceTestHook { get; internal set; }
    [MessagePartAttribute("openid.response_nonce")]
[MessagePartAttribute("openid.response_nonce")]
private string ResponseNonce { get; private set; }
    private IDictionary`2<string, string> ReturnToParameters { get; }
    internal IndirectSignedResponse(SignedResponseRequest request);
    internal IndirectSignedResponse(CheckAuthenticationRequest previouslySignedMessage, Channel channel);
    internal IndirectSignedResponse(Version version, Uri relyingPartyReturnTo);
    private static IndirectSignedResponse();
    public virtual MessageProtections get_RequiredProtection();
    [CompilerGeneratedAttribute]
private sealed virtual override string DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage.get_Signature();
    [CompilerGeneratedAttribute]
private sealed virtual override void DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage.set_Signature(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.get_SignedParameterOrder();
    [CompilerGeneratedAttribute]
private sealed virtual override void DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.set_SignedParameterOrder(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.get_AssociationHandle();
    [CompilerGeneratedAttribute]
private sealed virtual override void DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.set_AssociationHandle(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.get_Nonce();
    [CompilerGeneratedAttribute]
private sealed virtual override void DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.set_Nonce(string value);
    private sealed virtual override string DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.get_NonceContext();
    private sealed virtual override DateTime DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage.get_UtcCreationDate();
    private sealed virtual override void DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage.set_UtcCreationDate(DateTime value);
    [CompilerGeneratedAttribute]
private sealed virtual override string DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.get_InvalidateHandle();
    [CompilerGeneratedAttribute]
private sealed virtual override void DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage.set_InvalidateHandle(string value);
    [CompilerGeneratedAttribute]
internal Uri get_ProviderEndpoint();
    [CompilerGeneratedAttribute]
internal void set_ProviderEndpoint(Uri value);
    [CompilerGeneratedAttribute]
internal Uri get_ReturnTo();
    [CompilerGeneratedAttribute]
internal void set_ReturnTo(Uri value);
    [CompilerGeneratedAttribute]
internal bool get_ReturnToParametersSignatureValidated();
    [CompilerGeneratedAttribute]
internal void set_ReturnToParametersSignatureValidated(bool value);
    internal string get_ResponseNonceTestHook();
    internal void set_ResponseNonceTestHook(string value);
    private string get_ResponseNonce();
    private void set_ResponseNonce(string value);
    private IDictionary`2<string, string> get_ReturnToParameters();
    public virtual void EnsureValidMessage();
    internal string GetReturnToArgument(string key);
    internal IEnumerable`1<string> GetReturnToParameterNames();
    internal IDictionary`2<string, string> GetSignedMessageParts(Channel channel);
    private static bool IsQuerySubsetOf(string superset, string subset);
    private void VerifyReturnToMatchesRecipient();
    [CompilerGeneratedAttribute]
private string <GetSignedMessageParts>b__0(string part);
}
public interface DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension {
    public string TypeUri { get; }
    public IEnumerable`1<string> AdditionalSupportedTypeUris { get; }
    public bool IsSignedByRemoteParty { get; public set; }
    public abstract virtual string get_TypeUri();
    public abstract virtual IEnumerable`1<string> get_AdditionalSupportedTypeUris();
    public abstract virtual bool get_IsSignedByRemoteParty();
    public abstract virtual void set_IsSignedByRemoteParty(bool value);
}
internal class DotNetOpenAuth.OpenId.Messages.NegativeAssertionResponse : IndirectResponseBase {
    [CompilerGeneratedAttribute]
private Uri <UserSetupUrl>k__BackingField;
    [MessagePartAttribute("openid.user_setup_url")]
internal Uri UserSetupUrl { get; internal set; }
    internal bool Immediate { get; }
    internal NegativeAssertionResponse(Version version, Uri relyingPartyReturnTo, string mode);
    internal NegativeAssertionResponse(SignedResponseRequest request);
    [CompilerGeneratedAttribute]
internal Uri get_UserSetupUrl();
    [CompilerGeneratedAttribute]
internal void set_UserSetupUrl(Uri value);
    internal bool get_Immediate();
    public virtual void EnsureValidMessage();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.Messages.NegativeAssertionResponse/<CreateAsync>d__0")]
internal static Task`1<NegativeAssertionResponse> CreateAsync(SignedResponseRequest request, CancellationToken cancellationToken, Channel channel);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.Messages.NegativeAssertionResponse/<ConstructUserSetupUrlAsync>d__4")]
private static Task`1<Uri> ConstructUserSetupUrlAsync(CheckIdRequest immediateRequest, Channel channel, CancellationToken cancellationToken);
    private static string GetMode(SignedResponseRequest request);
}
[DebuggerDisplayAttribute("OpenID {Version} {Mode} {LocalIdentifier}")]
internal class DotNetOpenAuth.OpenId.Messages.PositiveAssertionResponse : IndirectSignedResponse {
    [CompilerGeneratedAttribute]
private Identifier <ClaimedIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <LocalIdentifier>k__BackingField;
    [MessagePartAttribute("openid.claimed_id")]
internal Identifier ClaimedIdentifier { get; internal set; }
    [MessagePartAttribute("openid.identity")]
internal Identifier LocalIdentifier { get; internal set; }
    internal PositiveAssertionResponse(CheckIdRequest request);
    internal PositiveAssertionResponse(Version version, Uri relyingPartyReturnTo);
    internal PositiveAssertionResponse(RelyingPartyEndpointDescription relyingParty);
    [CompilerGeneratedAttribute]
internal Identifier get_ClaimedIdentifier();
    [CompilerGeneratedAttribute]
internal void set_ClaimedIdentifier(Identifier value);
    [CompilerGeneratedAttribute]
internal Identifier get_LocalIdentifier();
    [CompilerGeneratedAttribute]
internal void set_LocalIdentifier(Identifier value);
}
[DebuggerDisplayAttribute("OpenID {Version} {Mode}")]
internal class DotNetOpenAuth.OpenId.Messages.RequestBase : object {
    [MessagePartAttribute("openid.ns")]
private string OpenIdNamespace;
    private Dictionary`2<string, string> extraData;
    private bool incoming;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Recipient>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTransport <Transport>k__BackingField;
    [MessagePartAttribute("openid.mode")]
public string Mode { get; private set; }
    private HttpDeliveryMethods DotNetOpenAuth.Messaging.IDirectedProtocolMessage.HttpMethods { get; }
    public Uri Recipient { get; private set; }
    public Version Version { get; private set; }
    public MessageProtections RequiredProtection { get; }
    public MessageTransport Transport { get; private set; }
    public IDictionary`2<string, string> ExtraData { get; }
    protected internal bool Incoming { get; }
    protected Protocol Protocol { get; }
    protected RequestBase(Version version, Uri providerEndpoint, string mode, MessageTransport transport);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(string value);
    private sealed virtual override HttpDeliveryMethods DotNetOpenAuth.Messaging.IDirectedProtocolMessage.get_HttpMethods();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Recipient();
    [CompilerGeneratedAttribute]
private void set_Recipient(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    public virtual MessageProtections get_RequiredProtection();
    [CompilerGeneratedAttribute]
public sealed virtual MessageTransport get_Transport();
    [CompilerGeneratedAttribute]
private void set_Transport(MessageTransport value);
    public sealed virtual IDictionary`2<string, string> get_ExtraData();
    protected internal bool get_Incoming();
    protected Protocol get_Protocol();
    public virtual void EnsureValidMessage();
    internal void SetAsIncoming();
    protected static string GetProtocolConstant(Version protocolVersion, Func`2<Protocol, string> mode);
}
internal class DotNetOpenAuth.OpenId.Messages.SignedResponseRequest : RequestBase {
    private IList`1<IExtensionMessage> extensions;
    [CompilerGeneratedAttribute]
private string <AssociationHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReturnTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Realm <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SignReturnTo>k__BackingField;
    public IList`1<IExtensionMessage> Extensions { get; }
    internal bool Immediate { get; }
    [MessagePartAttribute("openid.assoc_handle")]
internal string AssociationHandle { get; internal set; }
    [MessagePartAttribute("openid.return_to")]
[MessagePartAttribute("openid.return_to")]
internal Uri ReturnTo { get; internal set; }
    [MessagePartAttribute("openid.trust_root")]
[MessagePartAttribute("openid.realm")]
internal Realm Realm { get; internal set; }
    internal bool SignReturnTo { get; internal set; }
    internal SignedResponseRequest(Version version, Uri providerEndpoint, AuthenticationRequestMode mode);
    public sealed virtual IList`1<IExtensionMessage> get_Extensions();
    internal bool get_Immediate();
    [CompilerGeneratedAttribute]
internal string get_AssociationHandle();
    [CompilerGeneratedAttribute]
internal void set_AssociationHandle(string value);
    [CompilerGeneratedAttribute]
internal Uri get_ReturnTo();
    [CompilerGeneratedAttribute]
internal void set_ReturnTo(Uri value);
    [CompilerGeneratedAttribute]
internal Realm get_Realm();
    [CompilerGeneratedAttribute]
internal void set_Realm(Realm value);
    [CompilerGeneratedAttribute]
internal bool get_SignReturnTo();
    [CompilerGeneratedAttribute]
internal void set_SignReturnTo(bool value);
    public virtual void EnsureValidMessage();
    internal void AddReturnToArguments(IEnumerable`1<KeyValuePair`2<string, string>> keysValues);
    internal void AddReturnToArguments(string key, string value);
    private static string GetMode(Version version, AuthenticationRequestMode mode);
}
internal class DotNetOpenAuth.OpenId.NoDiscoveryIdentifier : Identifier {
    private Identifier wrappedIdentifier;
    internal NoDiscoveryIdentifier(Identifier wrappedIdentifier, bool claimSsl);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual Identifier TrimFragment();
    internal virtual bool TryRequireSsl(Identifier& secureIdentifier);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class DotNetOpenAuth.OpenId.OpenIdStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbsoluteUriRequired { get; }
    internal static string ArgumentIsPpidIdentifier { get; }
    internal static string AssociationOrSessionTypeUnrecognizedOrNotSupported { get; }
    internal static string AssociationSecretAndTypeLengthMismatch { get; }
    internal static string AssociationSecretHashLengthMismatch { get; }
    internal static string AssociationStoreRequired { get; }
    internal static string AssociationStoreRequiresNonceStore { get; }
    internal static string AttributeAlreadyAdded { get; }
    internal static string AttributeTooManyValues { get; }
    internal static string BadAssociationPrivateData { get; }
    internal static string BadExtension { get; }
    internal static string CallbackArgumentsRequireSecretStore { get; }
    internal static string CallDeserializeBeforeCreateResponse { get; }
    internal static string ClaimedIdAndLocalIdMustBothPresentOrAbsent { get; }
    internal static string ClaimedIdentifierCannotBeSetOnDelegatedAuthentication { get; }
    internal static string ClaimedIdentifierDefiesDotNetNormalization { get; }
    internal static string ClaimedIdentifierMustBeSetFirst { get; }
    internal static string ClientScriptExtensionPropertyNameCollision { get; }
    internal static string ClientScriptExtensionTypeCollision { get; }
    internal static string CreateRequestAlreadyCalled { get; }
    internal static string DelegatingIdentifiersNotAllowed { get; }
    internal static string DiffieHellmanAssociationRequired { get; }
    internal static string DiffieHellmanRequiredPropertiesNotSet { get; }
    internal static string ExplicitHttpUriSuppliedWithSslRequirement { get; }
    internal static string ExtensionAlreadyAddedWithSameTypeURI { get; }
    internal static string ExtensionLookupSupportUnavailable { get; }
    internal static string FragmentNotAllowedOnXRIs { get; }
    internal static string HeadTagMustIncludeRunatServer { get; }
    internal static string IdentifierSelectRequiresMatchingIdentifiers { get; }
    internal static string IdentityAndClaimedIdentifierMustBeBothPresentOrAbsent { get; }
    internal static string IncompatibleAssociationAndSessionTypes { get; }
    internal static string IndirectErrorFormattedMessage { get; }
    internal static string InvalidCharacterInKeyValueFormInput { get; }
    internal static string InvalidDSig { get; }
    internal static string InvalidKeyValueFormCharacterMissing { get; }
    internal static string InvalidScheme { get; }
    internal static string InvalidUri { get; }
    internal static string InvalidXri { get; }
    internal static string IssuedAssertionFailsIdentifierDiscovery { get; }
    internal static string KeysListAndDictionaryDoNotMatch { get; }
    internal static string MatchingArgumentsExpected { get; }
    internal static string MaximumAuthenticationTimeExpired { get; }
    internal static string MisdirectedSigningCertificate { get; }
    internal static string MissingElement { get; }
    internal static string NoAssociationTypeFoundByLength { get; }
    internal static string NoAssociationTypeFoundByName { get; }
    internal static string NoEncryptionSessionRequiresHttps { get; }
    internal static string NoIdentifierSet { get; }
    internal static string NoRelyingPartyEndpointDiscovered { get; }
    internal static string NoSessionTypeFound { get; }
    internal static string NotSupportedByAuthenticationSnapshot { get; }
    internal static string OpenIdEndpointNotFound { get; }
    internal static string OpenIdTextBoxEmpty { get; }
    internal static string OperationOnlyValidForSetupRequiredState { get; }
    internal static string PopupRedirectMissingResponse { get; }
    internal static string PositiveAssertionFromNonQualifiedProvider { get; }
    internal static string PrivateRPSecretNotFound { get; }
    internal static string PropertyNotSet { get; }
    internal static string PropertyValueNotSupported { get; }
    internal static string ProviderVersionUnrecognized { get; }
    internal static string RealmCausedRedirectUponDiscovery { get; }
    internal static string RequireSslNotSatisfiedByAssertedClaimedId { get; }
    internal static string ResponseNotReady { get; }
    internal static string ReturnToNotUnderRealm { get; }
    internal static string ReturnToParamDoesNotMatchRequestUrl { get; }
    internal static string ReturnToRequiredForOperation { get; }
    internal static string ReturnToRequiredForResponse { get; }
    internal static string SignatureDoesNotIncludeMandatoryParts { get; }
    internal static string SregInvalidBirthdate { get; }
    internal static string TypeMustImplementX { get; }
    internal static string UnexpectedEnumPropertyValue { get; }
    internal static string UnexpectedHttpStatusCode { get; }
    internal static string UnsolicitedAssertionForUnrelatedClaimedIdentifier { get; }
    internal static string UnsolicitedAssertionRejectionRequiresNonceStore { get; }
    internal static string UnsolicitedAssertionsNotAllowed { get; }
    internal static string UnsolicitedAssertionsNotAllowedFrom1xOPs { get; }
    internal static string UnspecifiedDateTimeKindNotAllowed { get; }
    internal static string UnsupportedCanonicalizationMethod { get; }
    internal static string UnsupportedChannelConfiguration { get; }
    internal static string UnsupportedSignatureMethod { get; }
    internal static string UserSetupUrlRequiredInImmediateNegativeResponse { get; }
    internal static string X509CertificateNotTrusted { get; }
    internal static string XriResolutionDisabled { get; }
    internal static string XriResolutionFailed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbsoluteUriRequired();
    internal static string get_ArgumentIsPpidIdentifier();
    internal static string get_AssociationOrSessionTypeUnrecognizedOrNotSupported();
    internal static string get_AssociationSecretAndTypeLengthMismatch();
    internal static string get_AssociationSecretHashLengthMismatch();
    internal static string get_AssociationStoreRequired();
    internal static string get_AssociationStoreRequiresNonceStore();
    internal static string get_AttributeAlreadyAdded();
    internal static string get_AttributeTooManyValues();
    internal static string get_BadAssociationPrivateData();
    internal static string get_BadExtension();
    internal static string get_CallbackArgumentsRequireSecretStore();
    internal static string get_CallDeserializeBeforeCreateResponse();
    internal static string get_ClaimedIdAndLocalIdMustBothPresentOrAbsent();
    internal static string get_ClaimedIdentifierCannotBeSetOnDelegatedAuthentication();
    internal static string get_ClaimedIdentifierDefiesDotNetNormalization();
    internal static string get_ClaimedIdentifierMustBeSetFirst();
    internal static string get_ClientScriptExtensionPropertyNameCollision();
    internal static string get_ClientScriptExtensionTypeCollision();
    internal static string get_CreateRequestAlreadyCalled();
    internal static string get_DelegatingIdentifiersNotAllowed();
    internal static string get_DiffieHellmanAssociationRequired();
    internal static string get_DiffieHellmanRequiredPropertiesNotSet();
    internal static string get_ExplicitHttpUriSuppliedWithSslRequirement();
    internal static string get_ExtensionAlreadyAddedWithSameTypeURI();
    internal static string get_ExtensionLookupSupportUnavailable();
    internal static string get_FragmentNotAllowedOnXRIs();
    internal static string get_HeadTagMustIncludeRunatServer();
    internal static string get_IdentifierSelectRequiresMatchingIdentifiers();
    internal static string get_IdentityAndClaimedIdentifierMustBeBothPresentOrAbsent();
    internal static string get_IncompatibleAssociationAndSessionTypes();
    internal static string get_IndirectErrorFormattedMessage();
    internal static string get_InvalidCharacterInKeyValueFormInput();
    internal static string get_InvalidDSig();
    internal static string get_InvalidKeyValueFormCharacterMissing();
    internal static string get_InvalidScheme();
    internal static string get_InvalidUri();
    internal static string get_InvalidXri();
    internal static string get_IssuedAssertionFailsIdentifierDiscovery();
    internal static string get_KeysListAndDictionaryDoNotMatch();
    internal static string get_MatchingArgumentsExpected();
    internal static string get_MaximumAuthenticationTimeExpired();
    internal static string get_MisdirectedSigningCertificate();
    internal static string get_MissingElement();
    internal static string get_NoAssociationTypeFoundByLength();
    internal static string get_NoAssociationTypeFoundByName();
    internal static string get_NoEncryptionSessionRequiresHttps();
    internal static string get_NoIdentifierSet();
    internal static string get_NoRelyingPartyEndpointDiscovered();
    internal static string get_NoSessionTypeFound();
    internal static string get_NotSupportedByAuthenticationSnapshot();
    internal static string get_OpenIdEndpointNotFound();
    internal static string get_OpenIdTextBoxEmpty();
    internal static string get_OperationOnlyValidForSetupRequiredState();
    internal static string get_PopupRedirectMissingResponse();
    internal static string get_PositiveAssertionFromNonQualifiedProvider();
    internal static string get_PrivateRPSecretNotFound();
    internal static string get_PropertyNotSet();
    internal static string get_PropertyValueNotSupported();
    internal static string get_ProviderVersionUnrecognized();
    internal static string get_RealmCausedRedirectUponDiscovery();
    internal static string get_RequireSslNotSatisfiedByAssertedClaimedId();
    internal static string get_ResponseNotReady();
    internal static string get_ReturnToNotUnderRealm();
    internal static string get_ReturnToParamDoesNotMatchRequestUrl();
    internal static string get_ReturnToRequiredForOperation();
    internal static string get_ReturnToRequiredForResponse();
    internal static string get_SignatureDoesNotIncludeMandatoryParts();
    internal static string get_SregInvalidBirthdate();
    internal static string get_TypeMustImplementX();
    internal static string get_UnexpectedEnumPropertyValue();
    internal static string get_UnexpectedHttpStatusCode();
    internal static string get_UnsolicitedAssertionForUnrelatedClaimedIdentifier();
    internal static string get_UnsolicitedAssertionRejectionRequiresNonceStore();
    internal static string get_UnsolicitedAssertionsNotAllowed();
    internal static string get_UnsolicitedAssertionsNotAllowedFrom1xOPs();
    internal static string get_UnspecifiedDateTimeKindNotAllowed();
    internal static string get_UnsupportedCanonicalizationMethod();
    internal static string get_UnsupportedChannelConfiguration();
    internal static string get_UnsupportedSignatureMethod();
    internal static string get_UserSetupUrlRequiredInImmediateNegativeResponse();
    internal static string get_X509CertificateNotTrusted();
    internal static string get_XriResolutionDisabled();
    internal static string get_XriResolutionFailed();
}
[ExtensionAttribute]
public static class DotNetOpenAuth.OpenId.OpenIdUtilities : object {
    internal static string CustomParameterPrefix;
    private static Nullable`1<bool> diffieHellmanPresent;
    internal static bool IsDiffieHellmanPresent { get; }
    internal static bool get_IsDiffieHellmanPresent();
    public static string GenerateRandomAssociationHandle();
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.OpenIdUtilities/<RedirectToProviderAsync>d__0")]
public static Task RedirectToProviderAsync(IAuthenticationRequest authenticationRequest, HttpContextBase context, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Protocol GetProtocol(IProtocolMessage message);
    [ExtensionAttribute]
internal static void MoveTo(IList`1<T> list, int position, T value);
    internal static string FixDoublyUriDecodedBase64String(string value);
    internal static DateTime CutToSecond(DateTime dateTime);
    internal static UriBuilder GetResolvedRealm(Page page, string realm, HttpRequestBase requestContext);
    [ExtensionAttribute]
internal static HttpClient CreateHttpClient(IHostFactories hostFactories, bool requireSsl, RequestCachePolicy cachePolicy);
    [ExtensionAttribute]
internal static IList`1<IOpenIdExtensionFactory> GetExtensionFactories(Channel channel);
    private static void LoadDiffieHellmanTypes();
}
[ExtensionAttribute]
internal static class DotNetOpenAuth.OpenId.OpenIdXrdsHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<ServiceElement, IEnumerable`1<UriElement>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<ServiceElement, UriElement, RelyingPartyEndpointDescription> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, IEnumerable`1<ServiceElement>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<XrdElement, ServiceElement, <>f__AnonymousType5`2<XrdElement, ServiceElement>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5`2<XrdElement, ServiceElement>, IEnumerable`1<UriElement>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType5`2<XrdElement, ServiceElement>, UriElement, Uri> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, IEnumerable`1<ServiceElement>> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`3<XrdElement, ServiceElement, ServiceElement> CS$<>9__CachedAnonymousMethodDelegate13;
    [ExtensionAttribute]
internal static IEnumerable`1<RelyingPartyEndpointDescription> FindRelyingPartyReceivingEndpoints(XrdsDocument xrds);
    [ExtensionAttribute]
internal static IEnumerable`1<Uri> FindRelyingPartyIcons(XrdsDocument xrds);
    [ExtensionAttribute]
private static IEnumerable`1<ServiceElement> FindReturnToServices(XrdsDocument xrds);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UriElement> <FindRelyingPartyReceivingEndpoints>b__1(ServiceElement service);
    [CompilerGeneratedAttribute]
private static RelyingPartyEndpointDescription <FindRelyingPartyReceivingEndpoints>b__2(ServiceElement service, UriElement uri);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ServiceElement> <FindRelyingPartyIcons>b__7(XrdElement xrd);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5`2<XrdElement, ServiceElement> <FindRelyingPartyIcons>b__8(XrdElement xrd, ServiceElement service);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UriElement> <FindRelyingPartyIcons>b__9(<>f__AnonymousType5`2<XrdElement, ServiceElement> <>h__TransparentIdentifier5);
    [CompilerGeneratedAttribute]
private static Uri <FindRelyingPartyIcons>b__a(<>f__AnonymousType5`2<XrdElement, ServiceElement> <>h__TransparentIdentifier5, UriElement uri);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ServiceElement> <FindReturnToServices>b__10(XrdElement xrd);
    [CompilerGeneratedAttribute]
private static ServiceElement <FindReturnToServices>b__11(XrdElement xrd, ServiceElement service);
}
[ExtensionAttribute]
internal static class DotNetOpenAuth.OpenId.OpenIdXrdsHelperRelyingParty : object {
    [CompilerGeneratedAttribute]
private static Func`2<ServiceElement, IEnumerable`1<UriElement>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`3<ServiceElement, UriElement, <>f__AnonymousType0`2<ServiceElement, UriElement>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, <>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol>, <>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol>, ProviderEndpointDescription>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceElement, IEnumerable`1<UriElement>> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`3<ServiceElement, UriElement, <>f__AnonymousType0`2<ServiceElement, UriElement>> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, <>f__AnonymousType3`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, ProviderEndpointDescription>> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, IEnumerable`1<ServiceElement>> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`3<XrdElement, ServiceElement, ServiceElement> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, IEnumerable`1<ServiceElement>> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`3<XrdElement, ServiceElement, ServiceElement> CS$<>9__CachedAnonymousMethodDelegate31;
    [ExtensionAttribute]
internal static IEnumerable`1<IdentifierDiscoveryResult> CreateServiceEndpoints(IEnumerable`1<XrdElement> xrds, UriIdentifier claimedIdentifier, UriIdentifier userSuppliedIdentifier);
    [ExtensionAttribute]
internal static IEnumerable`1<IdentifierDiscoveryResult> CreateServiceEndpoints(IEnumerable`1<XrdElement> xrds, XriIdentifier userSuppliedIdentifier);
    [ExtensionAttribute]
private static IEnumerable`1<IdentifierDiscoveryResult> GenerateOPIdentifierServiceEndpoints(IEnumerable`1<XrdElement> xrds, Identifier opIdentifier);
    [ExtensionAttribute]
private static IEnumerable`1<IdentifierDiscoveryResult> GenerateClaimedIdentifierServiceEndpoints(IEnumerable`1<XrdElement> xrds, UriIdentifier claimedIdentifier, UriIdentifier userSuppliedIdentifier);
    [ExtensionAttribute]
private static IEnumerable`1<IdentifierDiscoveryResult> GenerateClaimedIdentifierServiceEndpoints(IEnumerable`1<XrdElement> xrds, XriIdentifier userSuppliedIdentifier);
    [ExtensionAttribute]
private static IEnumerable`1<ServiceElement> FindOPIdentifierServices(IEnumerable`1<XrdElement> xrds);
    [ExtensionAttribute]
private static IEnumerable`1<ServiceElement> FindClaimedIdentifierServices(IEnumerable`1<XrdElement> xrds);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UriElement> <GenerateOPIdentifierServiceEndpoints>b__3(ServiceElement service);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<ServiceElement, UriElement> <GenerateOPIdentifierServiceEndpoints>b__4(ServiceElement service, UriElement uri);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol> <GenerateOPIdentifierServiceEndpoints>b__5(<>f__AnonymousType0`2<ServiceElement, UriElement> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol>, ProviderEndpointDescription> <GenerateOPIdentifierServiceEndpoints>b__7(<>f__AnonymousType1`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, Protocol> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static string <GenerateOPIdentifierServiceEndpoints>b__6(Protocol p);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UriElement> <GenerateClaimedIdentifierServiceEndpoints>b__12(ServiceElement service);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<ServiceElement, UriElement> <GenerateClaimedIdentifierServiceEndpoints>b__13(ServiceElement service, UriElement uri);
    [CompilerGeneratedAttribute]
private static bool <GenerateClaimedIdentifierServiceEndpoints>b__14(<>f__AnonymousType0`2<ServiceElement, UriElement> <>h__TransparentIdentifier10);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3`2<<>f__AnonymousType0`2<ServiceElement, UriElement>, ProviderEndpointDescription> <GenerateClaimedIdentifierServiceEndpoints>b__15(<>f__AnonymousType0`2<ServiceElement, UriElement> <>h__TransparentIdentifier10);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ServiceElement> <FindOPIdentifierServices>b__29(XrdElement xrd);
    [CompilerGeneratedAttribute]
private static ServiceElement <FindOPIdentifierServices>b__2a(XrdElement xrd, ServiceElement service);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ServiceElement> <FindClaimedIdentifierServices>b__2e(XrdElement xrd);
    [CompilerGeneratedAttribute]
private static ServiceElement <FindClaimedIdentifierServices>b__2f(XrdElement xrd, ServiceElement service);
}
[DebuggerDisplayAttribute("OpenID {Version}")]
internal class DotNetOpenAuth.OpenId.Protocol : object {
    internal static string OpenId2Namespace;
    internal static string ReturnToNonceParameter;
    public static Protocol V10;
    public static Protocol V11;
    public static Protocol V20;
    public static List`1<Protocol> AllVersions;
    public static List`1<Protocol> AllPracticalVersions;
    public static Protocol Default;
    public Version Version;
    public string XmlNamespace;
    public string QueryDeclaredNamespaceVersion;
    public string ClaimedIdentifierServiceTypeURI;
    public string OPIdentifierServiceTypeURI;
    public string RPReturnToTypeURI;
    public string ClaimedIdentifierForOPIdentifier;
    public string HtmlDiscoveryProviderKey;
    public string HtmlDiscoveryLocalIdKey;
    public QueryParameters openid;
    public QueryParameters openidnp;
    public QueryArguments Args;
    internal static TimeSpan MaximumUserAgentAuthenticationTime;
    internal static TimeSpan MaximumAllowableTimeSkew;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate5;
    public ProtocolVersion ProtocolVersion { get; }
    private Protocol(QueryParameters queryBits);
    private static Protocol();
    internal static Protocol FindBestVersion(Func`2<Protocol, T> elementOf, IEnumerable`1<T> list);
    public static Protocol Lookup(Version version);
    public static Protocol Lookup(ProtocolVersion version);
    internal static Protocol Detect(IDictionary`2<string, string> query);
    internal static Protocol DetectFromDirectResponse(IDictionary`2<string, string> query);
    internal static Protocol Detect(IEnumerable`1<string> serviceTypeURIs);
    public ProtocolVersion get_ProtocolVersion();
    public bool EqualsPractically(Protocol other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <Detect>b__0(Protocol p);
    [CompilerGeneratedAttribute]
private static string <Detect>b__1(Protocol p);
    [CompilerGeneratedAttribute]
private static string <Detect>b__2(Protocol p);
}
public enum DotNetOpenAuth.OpenId.ProtocolVersion : Enum {
    public int value__;
    public static ProtocolVersion V10;
    public static ProtocolVersion V11;
    public static ProtocolVersion V20;
}
public interface DotNetOpenAuth.OpenId.Provider.IAuthenticationRequest {
    public bool IsDirectedIdentity { get; }
    public bool IsDelegatedIdentifier { get; }
    public Identifier LocalIdentifier { get; public set; }
    public Identifier ClaimedIdentifier { get; public set; }
    public Nullable`1<bool> IsAuthenticated { get; public set; }
    public abstract virtual bool get_IsDirectedIdentity();
    public abstract virtual bool get_IsDelegatedIdentifier();
    public abstract virtual Identifier get_LocalIdentifier();
    public abstract virtual void set_LocalIdentifier(Identifier value);
    public abstract virtual Identifier get_ClaimedIdentifier();
    public abstract virtual void set_ClaimedIdentifier(Identifier value);
    public abstract virtual Nullable`1<bool> get_IsAuthenticated();
    public abstract virtual void set_IsAuthenticated(Nullable`1<bool> value);
    public abstract virtual void SetClaimedIdentifierFragment(string fragment);
}
public interface DotNetOpenAuth.OpenId.Provider.IHostProcessedRequest {
    public ProtocolVersion RelyingPartyVersion { get; }
    public Realm Realm { get; }
    public bool Immediate { get; }
    public Uri ProviderEndpoint { get; public set; }
    public abstract virtual ProtocolVersion get_RelyingPartyVersion();
    public abstract virtual Realm get_Realm();
    public abstract virtual bool get_Immediate();
    public abstract virtual Uri get_ProviderEndpoint();
    public abstract virtual void set_ProviderEndpoint(Uri value);
    public abstract virtual Task`1<RelyingPartyDiscoveryResult> IsReturnUrlDiscoverableAsync(IHostFactories hostFactories, CancellationToken cancellationToken);
}
public interface DotNetOpenAuth.OpenId.Provider.IProviderBehavior {
    public abstract virtual void ApplySecuritySettings(ProviderSecuritySettings securitySettings);
    public abstract virtual Task`1<bool> OnIncomingRequestAsync(IRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> OnOutgoingResponseAsync(IAuthenticationRequest request, CancellationToken cancellationToken);
}
public interface DotNetOpenAuth.OpenId.Provider.IRequest {
    public bool IsResponseReady { get; }
    public ProviderSecuritySettings SecuritySettings { get; public set; }
    public abstract virtual bool get_IsResponseReady();
    public abstract virtual ProviderSecuritySettings get_SecuritySettings();
    public abstract virtual void set_SecuritySettings(ProviderSecuritySettings value);
    public abstract virtual void AddResponseExtension(IOpenIdMessageExtension extension);
    public abstract virtual void ClearResponseExtensions();
    public abstract virtual T GetExtension();
    public abstract virtual IOpenIdMessageExtension GetExtension(Type extensionType);
}
public class DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings : SecuritySettings {
    internal static bool ProtectDownlevelReplayAttacksDefault;
    internal static bool EncodeAssociationSecretsInHandlesDefault;
    internal static bool SignOutgoingExtensionsDefault;
    internal static UnsolicitedAssertionVerificationLevel UnsolicitedAssertionVerificationDefault;
    private IDictionary`2<string, TimeSpan> associationLifetimes;
    [CompilerGeneratedAttribute]
private bool <RequireSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private UnsolicitedAssertionVerificationLevel <UnsolicitedAssertionVerification>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodeAssociationSecretsInHandles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProtectDownlevelReplayAttacks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SignOutgoingExtensions>k__BackingField;
    public IDictionary`2<string, TimeSpan> AssociationLifetimes { get; }
    public bool RequireSsl { get; public set; }
    public UnsolicitedAssertionVerificationLevel UnsolicitedAssertionVerification { get; public set; }
    public bool EncodeAssociationSecretsInHandles { get; public set; }
    internal bool ProtectDownlevelReplayAttacks { get; internal set; }
    internal bool SignOutgoingExtensions { get; internal set; }
    public IDictionary`2<string, TimeSpan> get_AssociationLifetimes();
    [CompilerGeneratedAttribute]
public bool get_RequireSsl();
    [CompilerGeneratedAttribute]
public void set_RequireSsl(bool value);
    [CompilerGeneratedAttribute]
public UnsolicitedAssertionVerificationLevel get_UnsolicitedAssertionVerification();
    [CompilerGeneratedAttribute]
public void set_UnsolicitedAssertionVerification(UnsolicitedAssertionVerificationLevel value);
    [CompilerGeneratedAttribute]
public bool get_EncodeAssociationSecretsInHandles();
    [CompilerGeneratedAttribute]
public void set_EncodeAssociationSecretsInHandles(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ProtectDownlevelReplayAttacks();
    [CompilerGeneratedAttribute]
internal void set_ProtectDownlevelReplayAttacks(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SignOutgoingExtensions();
    [CompilerGeneratedAttribute]
internal void set_SignOutgoingExtensions(bool value);
    internal ProviderSecuritySettings Clone();
}
public enum DotNetOpenAuth.OpenId.Provider.RelyingPartyDiscoveryResult : Enum {
    public int value__;
    public static RelyingPartyDiscoveryResult NoServiceDocument;
    public static RelyingPartyDiscoveryResult NoMatchingReturnTo;
    public static RelyingPartyDiscoveryResult Success;
}
internal class DotNetOpenAuth.OpenId.ProviderEndpointDescription : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public Uri Uri { get; private set; }
    public Version Version { get; private set; }
    internal ReadOnlyCollection`1<string> Capabilities { get; private set; }
    internal ProviderEndpointDescription(Uri providerEndpoint, Version openIdVersion);
    internal ProviderEndpointDescription(Uri providerEndpoint, IEnumerable`1<string> serviceTypeURIs);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
internal ReadOnlyCollection`1<string> get_Capabilities();
    [CompilerGeneratedAttribute]
private void set_Capabilities(ReadOnlyCollection`1<string> value);
    private sealed virtual override bool DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.IsExtensionSupported();
    private sealed virtual override bool DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.IsExtensionSupported(Type extensionType);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Protocol p);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(Protocol p);
}
[DefaultEncoderAttribute("DotNetOpenAuth.OpenId.Realm/MessagePartRealmConverter")]
public class DotNetOpenAuth.OpenId.Realm : object {
    private static string WildcardDetectionPattern;
    private static String[] topLevelDomains;
    private Uri uri;
    [CompilerGeneratedAttribute]
private bool <DomainWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private static MatchEvaluator CS$<>9__CachedAnonymousMethodDelegate1;
    public static Realm AutoDetect { get; }
    public bool DomainWildcard { get; private set; }
    public string Host { get; }
    public string Scheme { get; }
    public int Port { get; }
    public string AbsolutePath { get; }
    public string PathAndQuery { get; }
    internal string OriginalString { get; }
    internal Uri NoWildcardUri { get; }
    internal Uri UriWithWildcardChangedToWww { get; }
    internal bool IsSane { get; }
    public Realm(string realmUrl);
    public Realm(Uri realmUrl);
    internal Realm(UriBuilder realmUriBuilder);
    private static Realm();
    public static Realm get_AutoDetect();
    [CompilerGeneratedAttribute]
public bool get_DomainWildcard();
    [CompilerGeneratedAttribute]
private void set_DomainWildcard(bool value);
    [DebuggerStepThroughAttribute]
public string get_Host();
    [DebuggerStepThroughAttribute]
public string get_Scheme();
    [DebuggerStepThroughAttribute]
public int get_Port();
    [DebuggerStepThroughAttribute]
public string get_AbsolutePath();
    [DebuggerStepThroughAttribute]
public string get_PathAndQuery();
    internal string get_OriginalString();
    [DebuggerStepThroughAttribute]
internal Uri get_NoWildcardUri();
    internal Uri get_UriWithWildcardChangedToWww();
    internal bool get_IsSane();
    [DebuggerStepThroughAttribute]
public static Realm op_Implicit(string uri);
    [DebuggerStepThroughAttribute]
public static Realm op_Implicit(Uri uri);
    [DebuggerStepThroughAttribute]
public static string op_Implicit(Realm realm);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal bool Contains(string url);
    internal bool Contains(Uri url);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.Realm/<DiscoverReturnToEndpointsAsync>d__2")]
[DebuggerStepThroughAttribute]
internal virtual Task`1<IEnumerable`1<RelyingPartyEndpointDescription>> DiscoverReturnToEndpointsAsync(IHostFactories hostFactories, bool allowRedirects, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.Realm/<DiscoverAsync>d__6")]
internal virtual Task`1<XrdsDocument> DiscoverAsync(IHostFactories hostFactories, bool allowRedirects, CancellationToken cancellationToken);
    private static string SafeUriBuilderToString(UriBuilder realmUriBuilder);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Match m);
}
public enum DotNetOpenAuth.OpenId.RelyingParty.AuthenticationStatus : Enum {
    public int value__;
    public static AuthenticationStatus Canceled;
    public static AuthenticationStatus Failed;
    public static AuthenticationStatus SetupRequired;
    public static AuthenticationStatus Authenticated;
    public static AuthenticationStatus ExtensionsOnly;
}
public interface DotNetOpenAuth.OpenId.RelyingParty.IAuthenticationRequest {
    public AuthenticationRequestMode Mode { get; public set; }
    public Uri ReturnToUrl { get; }
    public Realm Realm { get; }
    public Identifier ClaimedIdentifier { get; }
    public bool IsDirectedIdentity { get; }
    public bool IsExtensionOnly { get; public set; }
    public IProviderEndpoint Provider { get; }
    public IdentifierDiscoveryResult DiscoveryResult { get; }
    public abstract virtual AuthenticationRequestMode get_Mode();
    public abstract virtual void set_Mode(AuthenticationRequestMode value);
    public abstract virtual Uri get_ReturnToUrl();
    public abstract virtual Realm get_Realm();
    public abstract virtual Identifier get_ClaimedIdentifier();
    public abstract virtual bool get_IsDirectedIdentity();
    public abstract virtual bool get_IsExtensionOnly();
    public abstract virtual void set_IsExtensionOnly(bool value);
    public abstract virtual IProviderEndpoint get_Provider();
    public abstract virtual IdentifierDiscoveryResult get_DiscoveryResult();
    public abstract virtual void AddCallbackArguments(IDictionary`2<string, string> arguments);
    public abstract virtual void AddCallbackArguments(string key, string value);
    public abstract virtual void SetCallbackArgument(string key, string value);
    public abstract virtual void SetUntrustedCallbackArgument(string key, string value);
    public abstract virtual void AddExtension(IOpenIdMessageExtension extension);
    public abstract virtual Task`1<HttpResponseMessage> GetRedirectingResponseAsync(CancellationToken cancellationToken);
}
public interface DotNetOpenAuth.OpenId.RelyingParty.IAuthenticationResponse {
    public Identifier ClaimedIdentifier { get; }
    public string FriendlyIdentifierForDisplay { get; }
    public AuthenticationStatus Status { get; }
    public IProviderEndpoint Provider { get; }
    public Exception Exception { get; }
    public abstract virtual Identifier get_ClaimedIdentifier();
    public abstract virtual string get_FriendlyIdentifierForDisplay();
    public abstract virtual AuthenticationStatus get_Status();
    public abstract virtual IProviderEndpoint get_Provider();
    public abstract virtual Exception get_Exception();
    public abstract virtual string GetCallbackArgument(string key);
    public abstract virtual string GetUntrustedCallbackArgument(string key);
    public abstract virtual IDictionary`2<string, string> GetCallbackArguments();
    public abstract virtual IDictionary`2<string, string> GetUntrustedCallbackArguments();
    public abstract virtual T GetExtension();
    public abstract virtual IOpenIdMessageExtension GetExtension(Type extensionType);
    public abstract virtual T GetUntrustedExtension();
    public abstract virtual IOpenIdMessageExtension GetUntrustedExtension(Type extensionType);
}
public interface DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint {
    public Version Version { get; }
    public Uri Uri { get; }
    public abstract virtual Version get_Version();
    public abstract virtual Uri get_Uri();
    [ObsoleteAttribute("Use IAuthenticationRequest.DiscoveryResult.IsExtensionSupported instead.")]
public abstract virtual bool IsExtensionSupported();
    [ObsoleteAttribute("Use IAuthenticationRequest.DiscoveryResult.IsExtensionSupported instead.")]
public abstract virtual bool IsExtensionSupported(Type extensionType);
}
public interface DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior {
    public abstract virtual void ApplySecuritySettings(RelyingPartySecuritySettings securitySettings);
    public abstract virtual void OnOutgoingAuthenticationRequest(IAuthenticationRequest request);
    public abstract virtual void OnIncomingPositiveAssertion(IAuthenticationResponse assertion);
}
public class DotNetOpenAuth.OpenId.RelyingParty.RelyingPartySecuritySettings : SecuritySettings {
    internal static bool ProtectDownlevelReplayAttacksDefault;
    [CompilerGeneratedAttribute]
private bool <RequireSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireDirectedIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolVersion <MinimumRequiredOpenIdVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PrivateSecretMaximumAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RejectUnsolicitedAssertions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RejectDelegatingIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnsignedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowApproximateIdentifierDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Uri> <TrustedProviderEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RejectAssertionsFromUntrustedProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProtectDownlevelReplayAttacks>k__BackingField;
    public bool RequireSsl { get; public set; }
    public bool RequireDirectedIdentity { get; public set; }
    public ProtocolVersion MinimumRequiredOpenIdVersion { get; public set; }
    public TimeSpan PrivateSecretMaximumAge { get; public set; }
    public bool RejectUnsolicitedAssertions { get; public set; }
    public bool RejectDelegatingIdentifiers { get; public set; }
    public bool IgnoreUnsignedExtensions { get; public set; }
    public bool RequireAssociation { get; public set; }
    public bool AllowApproximateIdentifierDiscovery { get; public set; }
    public HashSet`1<Uri> TrustedProviderEndpoints { get; private set; }
    public bool RejectAssertionsFromUntrustedProviders { get; public set; }
    internal bool ProtectDownlevelReplayAttacks { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_RequireSsl();
    [CompilerGeneratedAttribute]
public void set_RequireSsl(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireDirectedIdentity();
    [CompilerGeneratedAttribute]
public void set_RequireDirectedIdentity(bool value);
    [CompilerGeneratedAttribute]
public ProtocolVersion get_MinimumRequiredOpenIdVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumRequiredOpenIdVersion(ProtocolVersion value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PrivateSecretMaximumAge();
    [CompilerGeneratedAttribute]
public void set_PrivateSecretMaximumAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_RejectUnsolicitedAssertions();
    [CompilerGeneratedAttribute]
public void set_RejectUnsolicitedAssertions(bool value);
    [CompilerGeneratedAttribute]
public bool get_RejectDelegatingIdentifiers();
    [CompilerGeneratedAttribute]
public void set_RejectDelegatingIdentifiers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnsignedExtensions();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnsignedExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireAssociation();
    [CompilerGeneratedAttribute]
public void set_RequireAssociation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowApproximateIdentifierDiscovery();
    [CompilerGeneratedAttribute]
public void set_AllowApproximateIdentifierDiscovery(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<Uri> get_TrustedProviderEndpoints();
    [CompilerGeneratedAttribute]
private void set_TrustedProviderEndpoints(HashSet`1<Uri> value);
    [CompilerGeneratedAttribute]
public bool get_RejectAssertionsFromUntrustedProviders();
    [CompilerGeneratedAttribute]
public void set_RejectAssertionsFromUntrustedProviders(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ProtectDownlevelReplayAttacks();
    [CompilerGeneratedAttribute]
internal void set_ProtectDownlevelReplayAttacks(bool value);
    internal IEnumerable`1<IdentifierDiscoveryResult> FilterEndpoints(IEnumerable`1<IdentifierDiscoveryResult> endpoints);
    [CompilerGeneratedAttribute]
private bool <FilterEndpoints>b__0(IdentifierDiscoveryResult se);
    [CompilerGeneratedAttribute]
private bool <FilterEndpoints>b__1(IdentifierDiscoveryResult se);
}
internal class DotNetOpenAuth.OpenId.RelyingPartyEndpointDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ReturnToEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Protocol <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public Uri ReturnToEndpoint { get; private set; }
    public Protocol Protocol { get; private set; }
    internal RelyingPartyEndpointDescription(Uri returnTo, String[] supportedServiceTypeUris);
    [CompilerGeneratedAttribute]
public Uri get_ReturnToEndpoint();
    [CompilerGeneratedAttribute]
private void set_ReturnToEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Protocol get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(Protocol value);
    private static Protocol GetProtocolFromServices(String[] supportedServiceTypeUris);
    [CompilerGeneratedAttribute]
private static string <GetProtocolFromServices>b__0(Protocol p);
}
public abstract class DotNetOpenAuth.OpenId.SecuritySettings : object {
    internal static int MinimumHashBitLengthDefault;
    internal static int MaximumHashBitLengthRPDefault;
    internal static int MaximumHashBitLengthOPDefault;
    [CompilerGeneratedAttribute]
private int <MinimumHashBitLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumHashBitLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDualPurposeIdentifiers>k__BackingField;
    public int MinimumHashBitLength { get; public set; }
    public int MaximumHashBitLength { get; public set; }
    public bool AllowDualPurposeIdentifiers { get; public set; }
    protected SecuritySettings(bool isProvider);
    [CompilerGeneratedAttribute]
public int get_MinimumHashBitLength();
    [CompilerGeneratedAttribute]
public void set_MinimumHashBitLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumHashBitLength();
    [CompilerGeneratedAttribute]
public void set_MaximumHashBitLength(int value);
    [CompilerGeneratedAttribute]
public bool get_AllowDualPurposeIdentifiers();
    [CompilerGeneratedAttribute]
public void set_AllowDualPurposeIdentifiers(bool value);
    internal bool IsAssociationInPermittedRange(Protocol protocol, string associationType);
    internal bool IsAssociationInPermittedRange(Association association);
}
public class DotNetOpenAuth.OpenId.UntrustedWebRequestHandler : DelegatingHandler {
    private ICollection`1<string> allowableSchemes;
    private ICollection`1<string> blacklistHosts;
    private ICollection`1<Regex> blacklistHostsRegex;
    private ICollection`1<string> whitelistHosts;
    private ICollection`1<Regex> whitelistHostsRegex;
    [DebuggerBrowsableAttribute("0")]
private int maxAutomaticRedirections;
    [DebuggerBrowsableAttribute("0")]
private bool allowAutoRedirect;
    [CompilerGeneratedAttribute]
private bool <IsSslRequired>k__BackingField;
    public bool IsSslRequired { get; public set; }
    public int MaxAutomaticRedirections { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public ICollection`1<string> WhitelistHosts { get; }
    public ICollection`1<Regex> WhitelistHostsRegex { get; }
    public ICollection`1<string> BlacklistHosts { get; }
    public ICollection`1<Regex> BlacklistHostsRegex { get; }
    public WebRequestHandler InnerWebRequestHandler { get; }
    private static UntrustedWebRequestElement Configuration { get; }
    public UntrustedWebRequestHandler(WebRequestHandler innerHandler);
    internal UntrustedWebRequestHandler(HttpMessageHandler innerHandler);
    [CompilerGeneratedAttribute]
public bool get_IsSslRequired();
    [CompilerGeneratedAttribute]
public void set_IsSslRequired(bool value);
    public int get_MaxAutomaticRedirections();
    public void set_MaxAutomaticRedirections(int value);
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public int get_ReadWriteTimeout();
    public void set_ReadWriteTimeout(int value);
    public ICollection`1<string> get_WhitelistHosts();
    public ICollection`1<Regex> get_WhitelistHostsRegex();
    public ICollection`1<string> get_BlacklistHosts();
    public ICollection`1<Regex> get_BlacklistHostsRegex();
    public WebRequestHandler get_InnerWebRequestHandler();
    private static UntrustedWebRequestElement get_Configuration();
    public HttpClient CreateClient();
    internal static bool IsExceptionFrom417ExpectationFailed(Exception ex);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.UntrustedWebRequestHandler/<SendAsync>d__2")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static bool IsIPv6Loopback(IPAddress ip);
    private static bool IsHostInList(string host, ICollection`1<string> stringList, ICollection`1<Regex> regexList);
    private bool IsHostWhitelisted(string host);
    private bool IsHostBlacklisted(string host);
    private void EnsureAllowableRequestUri(Uri requestUri);
    private bool IsUriAllowable(Uri uri);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod7(HttpRequestMessage , CancellationToken );
}
public class DotNetOpenAuth.OpenId.UriDiscoveryService : object {
    [CompilerGeneratedAttribute]
private IHostFactories <HostFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public IHostFactories HostFactories { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IHostFactories get_HostFactories();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostFactories(IHostFactories value);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.UriDiscoveryService/<DiscoverAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IdentifierDiscoveryServiceResult> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
    private static IEnumerable`1<IdentifierDiscoveryResult> DiscoverFromHtml(Uri claimedIdentifier, UriIdentifier userSuppliedIdentifier, string html);
    [CompilerGeneratedAttribute]
private static bool <DiscoverAsync>b__0(IdentifierDiscoveryResult se);
}
public class DotNetOpenAuth.OpenId.UriIdentifier : Identifier {
    private static String[] allowedSchemes;
    private static NonPathCompressingUriParser roundTrippingHttpParser;
    private static NonPathCompressingUriParser roundTrippingHttpsParser;
    private static NonPathCompressingUriParser publishableHttpParser;
    private static NonPathCompressingUriParser publishableHttpsParser;
    private static bool schemeSubstitution;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SchemeImplicitlyPrepended>k__BackingField;
    internal static bool SchemeSubstitutionTestHook { get; internal set; }
    internal Uri Uri { get; private set; }
    internal bool SchemeImplicitlyPrepended { get; private set; }
    internal bool ProblematicNormalization { get; }
    private static UriIdentifier();
    internal UriIdentifier(string uri);
    internal UriIdentifier(string uri, bool requireSslDiscovery);
    internal UriIdentifier(Uri uri);
    internal UriIdentifier(Uri uri, bool requireSslDiscovery);
    internal static bool get_SchemeSubstitutionTestHook();
    internal static void set_SchemeSubstitutionTestHook(bool value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
internal bool get_SchemeImplicitlyPrepended();
    [CompilerGeneratedAttribute]
private void set_SchemeImplicitlyPrepended(bool value);
    internal bool get_ProblematicNormalization();
    public static Uri op_Implicit(UriIdentifier identifier);
    public static UriIdentifier op_Implicit(Uri identifier);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static bool IsValidUri(string uri);
    internal static bool IsValidUri(Uri uri);
    internal virtual Identifier TrimFragment();
    internal virtual bool TryRequireSsl(Identifier& secureIdentifier);
    private static bool IsAllowedScheme(string uri);
    private static bool IsAllowedScheme(Uri uri);
    private static bool TryCanonicalize(string uri, Uri& canonicalUri, bool forceHttpsDefaultScheme, Boolean& schemePrepended);
    private static bool TryCanonicalize(string uri, Uri& canonicalUri);
    private static string NormalSchemeToSpecialRoundTrippingScheme(string normal);
    private static string DoSimpleCanonicalize(string uri, bool forceHttpsDefaultScheme, Boolean& schemePrepended);
}
public class DotNetOpenAuth.OpenId.XriDiscoveryProxyService : object {
    private static string XriResolverProxyTemplate;
    [CompilerGeneratedAttribute]
private IHostFactories <HostFactories>k__BackingField;
    public IHostFactories HostFactories { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IHostFactories get_HostFactories();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostFactories(IHostFactories value);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.XriDiscoveryProxyService/<DiscoverAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IdentifierDiscoveryServiceResult> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.XriDiscoveryProxyService/<DownloadXrdsAsync>d__6")]
[DebuggerStepThroughAttribute]
private static Task`1<XrdsDocument> DownloadXrdsAsync(XriIdentifier identifier, IHostFactories hostFactories, CancellationToken cancellationToken);
    private static Uri GetXrdsUrl(XriIdentifier identifier);
}
public class DotNetOpenAuth.OpenId.XriIdentifier : Identifier {
    private static string XriScheme;
    internal static Char[] GlobalContextSymbols;
    private string canonicalXri;
    [CompilerGeneratedAttribute]
private string <OriginalXri>k__BackingField;
    internal string OriginalXri { get; private set; }
    internal string CanonicalXri { get; }
    internal XriIdentifier(string xri);
    internal XriIdentifier(string xri, bool requireSsl);
    private static XriIdentifier();
    [CompilerGeneratedAttribute]
internal string get_OriginalXri();
    [CompilerGeneratedAttribute]
private void set_OriginalXri(string value);
    internal string get_CanonicalXri();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static bool IsValidXri(string xri);
    internal virtual Identifier TrimFragment();
    internal virtual bool TryRequireSsl(Identifier& secureIdentifier);
    private static string CanonicalizeXri(string xri);
}
internal class DotNetOpenAuth.Xrds.ServiceElement : XrdsNode {
    [CompilerGeneratedAttribute]
private static Func`2<TypeElement, string> CS$<>9__CachedAnonymousMethodDelegate8;
    public XrdElement Xrd { get; }
    public Nullable`1<int> Priority { get; }
    public IEnumerable`1<UriElement> UriElements { get; }
    public IEnumerable`1<TypeElement> TypeElements { get; }
    public String[] TypeElementUris { get; }
    public Identifier ProviderLocalIdentifier { get; }
    public ServiceElement(XPathNavigator serviceElement, XrdElement parent);
    public XrdElement get_Xrd();
    public Nullable`1<int> get_Priority();
    public IEnumerable`1<UriElement> get_UriElements();
    public IEnumerable`1<TypeElement> get_TypeElements();
    public String[] get_TypeElementUris();
    public Identifier get_ProviderLocalIdentifier();
    public sealed virtual int CompareTo(ServiceElement other);
    [CompilerGeneratedAttribute]
private static string <get_TypeElementUris>b__7(TypeElement type);
}
internal class DotNetOpenAuth.Xrds.TypeElement : XrdsNode {
    public string Uri { get; }
    public TypeElement(XPathNavigator typeElement, ServiceElement parent);
    public string get_Uri();
}
internal class DotNetOpenAuth.Xrds.UriElement : XrdsNode {
    public Nullable`1<int> Priority { get; }
    public Uri Uri { get; }
    public ServiceElement Service { get; }
    public UriElement(XPathNavigator uriElement, ServiceElement service);
    public Nullable`1<int> get_Priority();
    public Uri get_Uri();
    public ServiceElement get_Service();
    public sealed virtual int CompareTo(UriElement other);
}
internal class DotNetOpenAuth.Xrds.XrdElement : XrdsNode {
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceElement, IEnumerable`1<UriElement>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<ServiceElement, UriElement, UriElement> CS$<>9__CachedAnonymousMethodDelegatec;
    public IEnumerable`1<ServiceElement> Services { get; }
    public bool IsXriResolutionSuccessful { get; }
    public string CanonicalID { get; }
    public bool IsCanonicalIdVerified { get; }
    public IEnumerable`1<ServiceElement> OpenIdProviderIdentifierServices { get; }
    public IEnumerable`1<ServiceElement> OpenIdClaimedIdentifierServices { get; }
    public IEnumerable`1<ServiceElement> OpenIdRelyingPartyReturnToServices { get; }
    public IEnumerable`1<ServiceElement> OpenIdRelyingPartyIcons { get; }
    public IEnumerable`1<UriElement> ServiceUris { get; }
    private int XriResolutionStatusCode { get; }
    public XrdElement(XPathNavigator xrdElement, XrdsDocument parent);
    public IEnumerable`1<ServiceElement> get_Services();
    public bool get_IsXriResolutionSuccessful();
    public string get_CanonicalID();
    public bool get_IsCanonicalIdVerified();
    public IEnumerable`1<ServiceElement> get_OpenIdProviderIdentifierServices();
    public IEnumerable`1<ServiceElement> get_OpenIdClaimedIdentifierServices();
    public IEnumerable`1<ServiceElement> get_OpenIdRelyingPartyReturnToServices();
    public IEnumerable`1<ServiceElement> get_OpenIdRelyingPartyIcons();
    public IEnumerable`1<UriElement> get_ServiceUris();
    private int get_XriResolutionStatusCode();
    internal IEnumerable`1<ServiceElement> SearchForServiceTypeUris(Func`2<Protocol, string> p);
    [CompilerGeneratedAttribute]
private static string <get_OpenIdProviderIdentifierServices>b__0(Protocol p);
    [CompilerGeneratedAttribute]
private static string <get_OpenIdClaimedIdentifierServices>b__2(Protocol p);
    [CompilerGeneratedAttribute]
private static string <get_OpenIdRelyingPartyReturnToServices>b__4(Protocol p);
    [CompilerGeneratedAttribute]
private static string <get_OpenIdRelyingPartyIcons>b__6(Protocol p);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UriElement> <get_ServiceUris>b__9(ServiceElement service);
    [CompilerGeneratedAttribute]
private static UriElement <get_ServiceUris>b__a(ServiceElement service, UriElement uri);
}
internal class DotNetOpenAuth.Xrds.XrdsDocument : XrdsNode {
    private static string XmlDSigNamespace;
    private static string GoogleOpenIdNamespace;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public IEnumerable`1<XrdElement> XrdElements { get; }
    internal bool IsXrdResolutionSuccessful { get; }
    public XrdsDocument(XPathNavigator xrdsNavigator);
    public XrdsDocument(XmlReader reader);
    public XrdsDocument(string xml);
    public IEnumerable`1<XrdElement> get_XrdElements();
    internal bool get_IsXrdResolutionSuccessful();
    [CompilerGeneratedAttribute]
private static bool <get_IsXrdResolutionSuccessful>b__8(XrdElement xrd);
}
internal class DotNetOpenAuth.Xrds.XrdsNode : object {
    internal static string XrdNamespace;
    internal static string XrdsNamespace;
    [CompilerGeneratedAttribute]
private XPathNavigator <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private XrdsNode <ParentNode>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <XmlNamespaceResolver>k__BackingField;
    internal XPathNavigator Node { get; private set; }
    protected internal XrdsNode ParentNode { get; private set; }
    protected internal XmlNamespaceManager XmlNamespaceResolver { get; private set; }
    protected XrdsNode(XPathNavigator node, XrdsNode parentNode);
    protected XrdsNode(XPathNavigator document);
    [CompilerGeneratedAttribute]
internal XPathNavigator get_Node();
    [CompilerGeneratedAttribute]
private void set_Node(XPathNavigator value);
    [CompilerGeneratedAttribute]
protected internal XrdsNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(XrdsNode value);
    [CompilerGeneratedAttribute]
protected internal XmlNamespaceManager get_XmlNamespaceResolver();
    [CompilerGeneratedAttribute]
private void set_XmlNamespaceResolver(XmlNamespaceManager value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class DotNetOpenAuth.Xrds.XrdsStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CIDVerificationFailed { get; }
    internal static string InvalidXRDSDocument { get; }
    internal static string MissingCanonicalIDElement { get; }
    internal static string XriResolutionStatusMissing { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CIDVerificationFailed();
    internal static string get_InvalidXRDSDocument();
    internal static string get_MissingCanonicalIDElement();
    internal static string get_XriResolutionStatusMissing();
}
internal static class DotNetOpenAuth.Yadis.ContentTypes : object {
    public static string Html;
    public static string XHtml;
    public static string Xrds;
    public static string Xml;
}
internal class DotNetOpenAuth.Yadis.DiscoveryResult : object {
    private HttpResponseMessage htmlFallback;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <NormalizedUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <YadisLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsXrds>k__BackingField;
    public Uri RequestUri { get; private set; }
    public Uri NormalizedUri { get; private set; }
    public Uri YadisLocation { get; private set; }
    public MediaTypeHeaderValue ContentType { get; private set; }
    public string ResponseText { get; private set; }
    public bool IsXrds { get; private set; }
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
private void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_NormalizedUri();
    [CompilerGeneratedAttribute]
private void set_NormalizedUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_YadisLocation();
    [CompilerGeneratedAttribute]
private void set_YadisLocation(Uri value);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(MediaTypeHeaderValue value);
    [CompilerGeneratedAttribute]
public string get_ResponseText();
    [CompilerGeneratedAttribute]
private void set_ResponseText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsXrds();
    [CompilerGeneratedAttribute]
private void set_IsXrds(bool value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.DiscoveryResult/<CreateAsync>d__0")]
internal static Task`1<DiscoveryResult> CreateAsync(Uri requestUri, HttpResponseMessage initialResponse, HttpResponseMessage finalResponse);
    [AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.DiscoveryResult/<TryRevertToHtmlResponseAsync>d__5")]
[DebuggerStepThroughAttribute]
internal Task TryRevertToHtmlResponseAsync();
    [AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.DiscoveryResult/<ApplyHtmlResponseAsync>d__8")]
[DebuggerStepThroughAttribute]
private Task ApplyHtmlResponseAsync(HttpResponseMessage response);
}
[ExtensionAttribute]
internal static class DotNetOpenAuth.Yadis.HtmlParser : object {
    private static RegexOptions Flags;
    private static string TagExpr;
    private static string StartTagExpr;
    private static Regex attrRe;
    private static Regex headRe;
    private static Regex htmlRe;
    private static Regex removedRe;
    private static HtmlParser();
    public static IEnumerable`1<T> HeadTags(string html);
    [ExtensionAttribute]
internal static IEnumerable`1<T> WithAttribute(IEnumerable`1<T> sequence, string attribute);
    private static Regex TagMatcher(string tagName, String[] closeTags);
    private static Regex StartTagMatcher(string tagName);
}
internal class DotNetOpenAuth.Yadis.Yadis : object {
    internal static string HeaderName;
    internal static int MaximumResultToScan;
    internal static RequestCachePolicy IdentifierDiscoveryCachePolicy;
    [CompilerGeneratedAttribute]
private static Func`2<string, MediaTypeWithQualityHeaderValue> CS$<>9__CachedAnonymousMethodDelegatee;
    private static Yadis();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.Yadis/<DiscoverAsync>d__0")]
public static Task`1<DiscoveryResult> DiscoverAsync(IHostFactories hostFactories, UriIdentifier uri, bool requireSsl, CancellationToken cancellationToken);
    public static Uri FindYadisDocumentLocationInHtmlMetaTags(string html);
    [AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.Yadis/<RequestAsync>d__f")]
[DebuggerStepThroughAttribute]
internal static Task`1<HttpResponseMessage> RequestAsync(Uri uri, bool requireSsl, IHostFactories hostFactories, CancellationToken cancellationToken, String[] acceptTypes);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.Yadis.Yadis/<IsXrdsDocumentAsync>d__17")]
private static Task`1<bool> IsXrdsDocumentAsync(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
private static MediaTypeWithQualityHeaderValue <RequestAsync>b__d(string at);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
