internal class Mono.Math.BigInteger : object {
    private static UInt32 DEFAULT_LEN;
    private static string WouldReturnNegVal;
    private UInt32 length;
    private UInt32[] data;
    public static UInt32[] smallPrimes;
    private static RandomNumberGenerator rng;
    private static RandomNumberGenerator Rng { get; }
    public BigInteger(Sign sign, UInt32 len);
    public BigInteger(BigInteger bi);
    public BigInteger(BigInteger bi, UInt32 len);
    public BigInteger(Byte[] inData);
    public BigInteger(UInt32[] inData);
    public BigInteger(UInt32 ui);
    public BigInteger(ulong ul);
    private static BigInteger();
    public static BigInteger Parse(string number);
    public static BigInteger op_Implicit(UInt32 value);
    public static BigInteger op_Implicit(int value);
    public static BigInteger op_Implicit(ulong value);
    public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2);
    public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2);
    public static int op_Modulus(BigInteger bi, int i);
    public static UInt32 op_Modulus(BigInteger bi, UInt32 ui);
    public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2);
    public static BigInteger op_Division(BigInteger bi, int i);
    public static BigInteger op_Division(BigInteger bi1, BigInteger bi2);
    public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2);
    public static BigInteger op_Multiply(BigInteger bi, int i);
    public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal);
    public static BigInteger op_RightShift(BigInteger bi1, int shiftVal);
    private static RandomNumberGenerator get_Rng();
    public static BigInteger genRandom(int bits, RandomNumberGenerator rng);
    public static BigInteger genRandom(int bits);
    public void randomize(RandomNumberGenerator rng);
    public void randomize();
    public int bitCount();
    public bool testBit(UInt32 bitNum);
    public bool testBit(int bitNum);
    public void setBit(UInt32 bitNum);
    public void clearBit(UInt32 bitNum);
    public void setBit(UInt32 bitNum, bool val);
    public int LowestSetBit();
    public Byte[] getBytes();
    public static bool op_Equality(BigInteger bi1, UInt32 ui);
    public static bool op_Inequality(BigInteger bi1, UInt32 ui);
    public static bool op_Equality(BigInteger bi1, BigInteger bi2);
    public static bool op_Inequality(BigInteger bi1, BigInteger bi2);
    public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2);
    public static bool op_LessThan(BigInteger bi1, BigInteger bi2);
    public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2);
    public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2);
    public Sign Compare(BigInteger bi);
    public string ToString(UInt32 radix);
    public string ToString(UInt32 radix, string charSet);
    private void Normalize();
    public void Clear();
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object o);
    public BigInteger gcd(BigInteger bi);
    public BigInteger modInverse(BigInteger mod);
    public BigInteger modPow(BigInteger exp, BigInteger n);
    public bool isProbablePrime();
    [ObsoleteAttribute]
public bool isProbablePrime(int notUsed);
    public static BigInteger NextHightestPrime(BigInteger bi);
    public static BigInteger genPseudoPrime(int bits);
    public void Incr2();
}
internal enum Mono.Math.Prime.ConfidenceFactor : Enum {
    public int value__;
    public static ConfidenceFactor ExtraLow;
    public static ConfidenceFactor Low;
    public static ConfidenceFactor Medium;
    public static ConfidenceFactor High;
    public static ConfidenceFactor ExtraHigh;
    public static ConfidenceFactor Provable;
}
internal class Mono.Math.Prime.Generator.NextPrimeFinder : SequentialSearchPrimeGeneratorBase {
    protected virtual BigInteger GenerateSearchBase(int bits, object Context);
}
internal abstract class Mono.Math.Prime.Generator.PrimeGeneratorBase : object {
    public ConfidenceFactor Confidence { get; }
    public PrimalityTest PrimalityTest { get; }
    public int TrialDivisionBounds { get; }
    public virtual ConfidenceFactor get_Confidence();
    public virtual PrimalityTest get_PrimalityTest();
    public virtual int get_TrialDivisionBounds();
    protected bool PostTrialDivisionTests(BigInteger bi);
    public abstract virtual BigInteger GenerateNewPrime(int bits);
}
internal class Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase {
    protected virtual BigInteger GenerateSearchBase(int bits, object Context);
    public virtual BigInteger GenerateNewPrime(int bits);
    public virtual BigInteger GenerateNewPrime(int bits, object Context);
    protected virtual bool IsPrimeAcceptable(BigInteger bi, object Context);
}
internal class Mono.Math.Prime.PrimalityTest : MulticastDelegate {
    public PrimalityTest(object object, IntPtr method);
    public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence);
    public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Mono.Math.Prime.PrimalityTests : object {
    private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence);
    public static bool RabinMillerTest(BigInteger bi, ConfidenceFactor confidence);
    public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
