internal enum Org.Mentalis.Security.Cryptography.DHKeyGeneration : Enum {
    public int value__;
    public static DHKeyGeneration Random;
    public static DHKeyGeneration Static;
}
internal class Org.Mentalis.Security.Cryptography.DHParameters : ValueType {
    public Byte[] P;
    public Byte[] G;
    public Byte[] X;
}
internal abstract class Org.Mentalis.Security.Cryptography.DiffieHellman : AsymmetricAlgorithm {
    public static DiffieHellman Create();
    public static DiffieHellman Create(string algName);
    public abstract virtual Byte[] CreateKeyExchange();
    public abstract virtual Byte[] DecryptKeyExchange(Byte[] keyEx);
    public abstract virtual DHParameters ExportParameters(bool includePrivate);
    public abstract virtual void ImportParameters(DHParameters parameters);
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
}
internal class Org.Mentalis.Security.Cryptography.DiffieHellmanManaged : DiffieHellman {
    private BigInteger m_P;
    private BigInteger m_G;
    private BigInteger m_X;
    private bool m_Disposed;
    private Byte[] m_OAKLEY768;
    private Byte[] m_OAKLEY1024;
    private Byte[] m_OAKLEY1536;
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public DiffieHellmanManaged(int bitlen, int l, DHKeyGeneration keygen);
    public DiffieHellmanManaged(Byte[] p, Byte[] g, Byte[] x);
    public DiffieHellmanManaged(Byte[] p, Byte[] g, int l);
    private void Initialize(BigInteger p, BigInteger g, BigInteger x, int secretLen, bool checkInput);
    public virtual Byte[] CreateKeyExchange();
    public virtual Byte[] DecryptKeyExchange(Byte[] keyEx);
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    protected virtual void Dispose(bool disposing);
    public virtual DHParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(DHParameters parameters);
    protected virtual void Finalize();
    private void GenerateKey(int bitlen, DHKeyGeneration keygen, BigInteger& p, BigInteger& g);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
