internal class DotNetOpenAuth.OpenId.ChannelElements.ExtensionsBindingElementRelyingParty : ExtensionsBindingElement {
    private RelyingPartySecuritySettings relyingPartySecuritySettings;
    internal ExtensionsBindingElementRelyingParty(IOpenIdExtensionFactory extensionFactory, RelyingPartySecuritySettings securitySettings);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.OpenIdRelyingPartyChannel : OpenIdChannel {
    internal OpenIdRelyingPartyChannel(ICryptoKeyStore cryptoKeyStore, INonceStore nonceStore, RelyingPartySecuritySettings securitySettings, IHostFactories hostFactories);
    private OpenIdRelyingPartyChannel(ICryptoKeyStore cryptoKeyStore, INonceStore nonceStore, IMessageFactory messageTypeProvider, RelyingPartySecuritySettings securitySettings, bool nonVerifying, IHostFactories hostFactories);
    internal static OpenIdChannel CreateNonVerifyingChannel();
    private static IChannelBindingElement[] InitializeBindingElements(ICryptoKeyStore cryptoKeyStore, INonceStore nonceStore, RelyingPartySecuritySettings securitySettings, bool nonVerifying);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.OpenIdRelyingPartyMessageFactory : object {
    public sealed virtual IDirectedProtocolMessage GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2<string, string> fields);
    public sealed virtual IDirectResponseProtocolMessage GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2<string, string> fields);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.RelyingPartySecurityOptions : object {
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    private static Task`1<Nullable`1<MessageProtections>> NoneTask;
    private RelyingPartySecuritySettings securitySettings;
    [CompilerGeneratedAttribute]
private Channel <Channel>k__BackingField;
    public Channel Channel { get; public set; }
    public MessageProtections Protection { get; }
    internal RelyingPartySecurityOptions(RelyingPartySecuritySettings securitySettings);
    private static RelyingPartySecurityOptions();
    [CompilerGeneratedAttribute]
public sealed virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channel(Channel value);
    public sealed virtual MessageProtections get_Protection();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.RelyingPartySigningBindingElement : SigningBindingElement {
    private IRelyingPartyAssociationStore rpAssociations;
    internal RelyingPartySigningBindingElement(IRelyingPartyAssociationStore associationStore);
    protected virtual Association GetSpecificAssociation(ITamperResistantOpenIdMessage signedMessage);
    protected virtual Association GetAssociation(ITamperResistantOpenIdMessage signedMessage);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.ChannelElements.RelyingPartySigningBindingElement/<VerifySignatureByUnrecognizedHandleAsync>d__0")]
protected virtual Task`1<MessageProtections> VerifySignatureByUnrecognizedHandleAsync(IProtocolMessage message, ITamperResistantOpenIdMessage signedMessage, MessageProtections protectionsApplied, CancellationToken cancellationToken);
}
internal class DotNetOpenAuth.OpenId.ChannelElements.ReturnToNonceBindingElement : object {
    private static string ReturnToNonceContext;
    private static int NonceByteLength;
    private static Task`1<Nullable`1<MessageProtections>> NullTask;
    private static Task`1<Nullable`1<MessageProtections>> ReplayProtectionTask;
    private INonceStore nonceStore;
    private RelyingPartySecuritySettings securitySettings;
    private Channel channel;
    public Channel Channel { get; public set; }
    public MessageProtections Protection { get; }
    private static TimeSpan MaximumMessageAge { get; }
    internal ReturnToNonceBindingElement(INonceStore nonceStore, RelyingPartySecuritySettings securitySettings);
    private static ReturnToNonceBindingElement();
    public sealed virtual Channel get_Channel();
    public sealed virtual void set_Channel(Channel value);
    public sealed virtual MessageProtections get_Protection();
    private static TimeSpan get_MaximumMessageAge();
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessOutgoingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<MessageProtections>> ProcessIncomingMessageAsync(IProtocolMessage message, CancellationToken cancellationToken);
    private bool UseRequestNonce(IMessage message);
}
public class DotNetOpenAuth.OpenId.HostMetaDiscoveryService : object {
    private static string LocalHostMetaPath;
    private static HostMetaProxy GoogleHostedHostMeta;
    private static Regex HostMetaLink;
    private static HashSet`1<string> ApprovedCertificateThumbprintCache;
    [CompilerGeneratedAttribute]
private IHostFactories <HostFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HostMetaProxy> <TrustedHostMetaProxies>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<XrdElement, IEnumerable`1<ServiceElement>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`3<XrdElement, ServiceElement, ServiceElement> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Protocol, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<XPathNavigator, X509Certificate2> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<X509ChainStatus, string> CS$<>9__CachedAnonymousMethodDelegate27;
    public IHostFactories HostFactories { get; public set; }
    public IList`1<HostMetaProxy> TrustedHostMetaProxies { get; private set; }
    public bool UseGoogleHostedHostMeta { get; public set; }
    private static HostMetaDiscoveryService();
    [CompilerGeneratedAttribute]
public sealed virtual IHostFactories get_HostFactories();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostFactories(IHostFactories value);
    [CompilerGeneratedAttribute]
public IList`1<HostMetaProxy> get_TrustedHostMetaProxies();
    [CompilerGeneratedAttribute]
private void set_TrustedHostMetaProxies(IList`1<HostMetaProxy> value);
    public bool get_UseGoogleHostedHostMeta();
    public void set_UseGoogleHostedHostMeta(bool value);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<DiscoverAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IdentifierDiscoveryServiceResult> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
    private static IEnumerable`1<XrdElement> GetXrdElements(XrdsDocument document, string canonicalId);
    private static IEnumerable`1<ServiceElement> GetDescribedByServices(IEnumerable`1<XrdElement> xrds);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<ValidateXmlDSigAsync>d__19")]
[DebuggerStepThroughAttribute]
private static Task ValidateXmlDSigAsync(XrdsDocument document, UriIdentifier identifier, HttpResponseMessage response, string signingHost);
    private static void VerifyCertChain(IEnumerable`1<X509Certificate2> certs);
    private static void VerifyCertificateChain(IList`1<X509Certificate2> certificates);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<GetExternalServicesAsync>d__2a")]
private Task`1<IEnumerable`1<IdentifierDiscoveryResult>> GetExternalServicesAsync(IEnumerable`1<XrdElement> xrds, UriIdentifier identifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<GetXrdsResponseAsync>d__3a")]
[DebuggerStepThroughAttribute]
private Task`1<HttpResponseMessage> GetXrdsResponseAsync(UriIdentifier identifier, Uri xrdsLocation, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<GetXrdsResponseAsync>d__40")]
private Task`1<ResultWithSigningHost`1<HttpResponseMessage>> GetXrdsResponseAsync(UriIdentifier identifier, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<GetXrdsLocationAsync>d__46")]
private Task`1<ResultWithSigningHost`1<Uri>> GetXrdsLocationAsync(UriIdentifier identifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.HostMetaDiscoveryService/<GetHostMetaAsync>d__4f")]
[DebuggerStepThroughAttribute]
private Task`1<ResultWithSigningHost`1<HttpResponseMessage>> GetHostMetaAsync(UriIdentifier identifier, CancellationToken cancellationToken);
    private IEnumerable`1<HostMetaProxy> GetHostMetaLocations(UriIdentifier identifier);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ServiceElement> <GetDescribedByServices>b__11(XrdElement xrd);
    [CompilerGeneratedAttribute]
private static ServiceElement <GetDescribedByServices>b__13(XrdElement xrd, ServiceElement service);
    [CompilerGeneratedAttribute]
private static string <GetDescribedByServices>b__12(Protocol p);
    [CompilerGeneratedAttribute]
private static X509Certificate2 <ValidateXmlDSigAsync>b__17(XPathNavigator n);
    [CompilerGeneratedAttribute]
private static string <VerifyCertChain>b__26(X509ChainStatus status);
}
internal class DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanRelyingPartyResponse : AssociateDiffieHellmanResponse {
    internal AssociateDiffieHellmanRelyingPartyResponse(Version responseVersion, AssociateDiffieHellmanRequest originatingRequest);
    public sealed virtual Association CreateAssociationAtRelyingParty(AssociateRequest request);
}
internal static class DotNetOpenAuth.OpenId.Messages.AssociateRequestRelyingParty : object {
    internal static AssociateRequest Create(SecuritySettings securityRequirements, IProviderEndpoint provider);
    internal static AssociateRequest Create(SecuritySettings securityRequirements, IProviderEndpoint provider, string associationType, string sessionType);
}
internal class DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseRelyingParty : AssociateUnencryptedResponse {
    internal AssociateUnencryptedResponseRelyingParty(Version version, AssociateUnencryptedRequest request);
    public sealed virtual Association CreateAssociationAtRelyingParty(AssociateRequest request);
}
internal interface DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseRelyingParty {
    public abstract virtual Association CreateAssociationAtRelyingParty(AssociateRequest request);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.AssociationManager : object {
    private IRelyingPartyAssociationStore associationStore;
    private Channel channel;
    private RelyingPartySecuritySettings securitySettings;
    internal Channel Channel { get; internal set; }
    internal RelyingPartySecuritySettings SecuritySettings { get; internal set; }
    internal bool HasAssociationStore { get; }
    internal IRelyingPartyAssociationStore AssociationStoreTestHook { get; }
    internal AssociationManager(Channel channel, IRelyingPartyAssociationStore associationStore, RelyingPartySecuritySettings securitySettings);
    internal Channel get_Channel();
    internal void set_Channel(Channel value);
    internal RelyingPartySecuritySettings get_SecuritySettings();
    internal void set_SecuritySettings(RelyingPartySecuritySettings value);
    internal bool get_HasAssociationStore();
    internal IRelyingPartyAssociationStore get_AssociationStoreTestHook();
    internal Association GetExistingAssociation(IProviderEndpoint provider);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AssociationManager/<GetOrCreateAssociationAsync>d__0")]
internal Task`1<Association> GetOrCreateAssociationAsync(IProviderEndpoint provider, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AssociationManager/<CreateNewAssociationAsync>d__3")]
[DebuggerStepThroughAttribute]
private Task`1<Association> CreateNewAssociationAsync(IProviderEndpoint provider, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AssociationManager/<CreateNewAssociationAsync>d__7")]
private Task`1<Association> CreateNewAssociationAsync(IProviderEndpoint provider, AssociateRequest associateRequest, int retriesRemaining, CancellationToken cancellationToken);
}
internal enum DotNetOpenAuth.OpenId.RelyingParty.AssociationPreference : Enum {
    public int value__;
    public static AssociationPreference IfPossible;
    public static AssociationPreference IfAlreadyEstablished;
    public static AssociationPreference Never;
}
[DebuggerDisplayAttribute("Count = {assocs.Count}")]
internal class DotNetOpenAuth.OpenId.RelyingParty.Associations : object {
    [DebuggerBrowsableAttribute("3")]
private KeyedCollection`2<string, Association> associations;
    [CompilerGeneratedAttribute]
private static Func`2<Association, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Association, DateTime> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Association, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    public IEnumerable`1<Association> Best { get; }
    public IEnumerable`1<Association> get_Best();
    public void Set(Association association);
    public Association Get(string handle);
    public bool Remove(string handle);
    public void ClearExpired();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Association assoc);
    [CompilerGeneratedAttribute]
private static DateTime <get_Best>b__3(Association assoc);
    [CompilerGeneratedAttribute]
private static bool <ClearExpired>b__9(Association assoc);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest : object {
    internal static string UserSuppliedIdentifierParameterName;
    private OpenIdRelyingParty RelyingParty;
    private AssociationPreference associationPreference;
    private List`1<IOpenIdMessageExtension> extensions;
    private Dictionary`2<string, string> returnToArgs;
    private bool returnToArgsMustBeSigned;
    [CompilerGeneratedAttribute]
private AuthenticationRequestMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReturnToUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Realm <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtensionOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierDiscoveryResult <DiscoveryResult>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>>, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>>, AuthenticationRequest> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>>, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>>, IdentifierDiscoveryResult> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<IdentifierDiscoveryResult, IdentifierDiscoveryResult> CS$<>9__CachedAnonymousMethodDelegate2a;
    public AuthenticationRequestMode Mode { get; public set; }
    public Uri ReturnToUrl { get; private set; }
    public Realm Realm { get; private set; }
    public Identifier ClaimedIdentifier { get; }
    public bool IsDirectedIdentity { get; }
    public bool IsExtensionOnly { get; public set; }
    public IProviderEndpoint Provider { get; }
    public IdentifierDiscoveryResult DiscoveryResult { get; private set; }
    internal AssociationPreference AssociationPreference { get; internal set; }
    internal IEnumerable`1<IOpenIdMessageExtension> AppliedExtensions { get; }
    internal IList`1<IOpenIdMessageExtension> Extensions { get; }
    private AuthenticationRequest(IdentifierDiscoveryResult discoveryResult, Realm realm, Uri returnToUrl, OpenIdRelyingParty relyingParty);
    [CompilerGeneratedAttribute]
public sealed virtual AuthenticationRequestMode get_Mode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mode(AuthenticationRequestMode value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ReturnToUrl();
    [CompilerGeneratedAttribute]
private void set_ReturnToUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Realm get_Realm();
    [CompilerGeneratedAttribute]
private void set_Realm(Realm value);
    public sealed virtual Identifier get_ClaimedIdentifier();
    public sealed virtual bool get_IsDirectedIdentity();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExtensionOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsExtensionOnly(bool value);
    public sealed virtual IProviderEndpoint get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IdentifierDiscoveryResult get_DiscoveryResult();
    [CompilerGeneratedAttribute]
private void set_DiscoveryResult(IdentifierDiscoveryResult value);
    internal AssociationPreference get_AssociationPreference();
    internal void set_AssociationPreference(AssociationPreference value);
    internal IEnumerable`1<IOpenIdMessageExtension> get_AppliedExtensions();
    internal IList`1<IOpenIdMessageExtension> get_Extensions();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest/<GetRedirectingResponseAsync>d__0")]
public sealed virtual Task`1<HttpResponseMessage> GetRedirectingResponseAsync(CancellationToken cancellationToken);
    public sealed virtual void AddCallbackArguments(IDictionary`2<string, string> arguments);
    public sealed virtual void AddCallbackArguments(string key, string value);
    public sealed virtual void SetCallbackArgument(string key, string value);
    public sealed virtual void SetUntrustedCallbackArgument(string key, string value);
    public sealed virtual void AddExtension(IOpenIdMessageExtension extension);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest/<CreateAsync>d__9")]
[DebuggerStepThroughAttribute]
internal static Task`1<IEnumerable`1<AuthenticationRequest>> CreateAsync(Identifier userSuppliedIdentifier, OpenIdRelyingParty relyingParty, Realm realm, Uri returnToUrl, bool createNewAssociationsAsNeeded, CancellationToken cancellationToken);
    internal static AuthenticationRequest CreateForTest(IdentifierDiscoveryResult discoveryResult, Realm realm, Uri returnTo, OpenIdRelyingParty rp);
    internal Task`1<SignedResponseRequest> CreateRequestMessageTestHookAsync(CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest/<CreateInternalAsync>d__22")]
private static Task`1<IEnumerable`1<AuthenticationRequest>> CreateInternalAsync(Identifier userSuppliedIdentifier, OpenIdRelyingParty relyingParty, Realm realm, Uri returnToUrl, IEnumerable`1<IdentifierDiscoveryResult> serviceEndpoints, bool createNewAssociationsAsNeeded, CancellationToken cancellationToken);
    private static List`1<IdentifierDiscoveryResult> FilterAndSortEndpoints(IEnumerable`1<IdentifierDiscoveryResult> endpoints, OpenIdRelyingParty relyingParty);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest/<CreateRequestMessageAsync>d__2b")]
private Task`1<SignedResponseRequest> CreateRequestMessageAsync(CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.AuthenticationRequest/<GetAssociationAsync>d__30")]
private Task`1<Association> GetAssociationAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static bool <CreateAsync>b__5(IdentifierDiscoveryResult result);
    [CompilerGeneratedAttribute]
private static bool <CreateAsync>b__6(IdentifierDiscoveryResult result);
    [CompilerGeneratedAttribute]
private static bool <CreateInternalAsync>b__14(Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>> pair);
    [CompilerGeneratedAttribute]
private static AuthenticationRequest <CreateInternalAsync>b__15(Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>> pair);
    [CompilerGeneratedAttribute]
private static bool <CreateInternalAsync>b__16(Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>> pair);
    [CompilerGeneratedAttribute]
private static IdentifierDiscoveryResult <CreateInternalAsync>b__17(Task`1<KeyValuePair`2<IdentifierDiscoveryResult, AuthenticationRequest>> pair);
    [CompilerGeneratedAttribute]
private static IdentifierDiscoveryResult <FilterAndSortEndpoints>b__29(IdentifierDiscoveryResult ep);
}
public class DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform : AXFetchAsSregTransformBase {
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.ApplySecuritySettings(RelyingPartySecuritySettings securitySettings);
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.OnOutgoingAuthenticationRequest(IAuthenticationRequest request);
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.OnIncomingPositiveAssertion(IAuthenticationResponse assertion);
}
public class DotNetOpenAuth.OpenId.RelyingParty.Behaviors.GsaIcamProfile : GsaIcamProfileBase {
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.ApplySecuritySettings(RelyingPartySecuritySettings securitySettings);
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.OnOutgoingAuthenticationRequest(IAuthenticationRequest request);
    private sealed virtual override void DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyBehavior.OnIncomingPositiveAssertion(IAuthenticationResponse assertion);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.CryptoKeyStoreAsRelyingPartyAssociationStore : object {
    private ICryptoKeyStore keyStore;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, CryptoKey>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, CryptoKey>, DateTime> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, CryptoKey>, <>f__AnonymousType0`2<KeyValuePair`2<string, CryptoKey>, Association>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<KeyValuePair`2<string, CryptoKey>, Association>, Association> CS$<>9__CachedAnonymousMethodDelegatea;
    internal CryptoKeyStoreAsRelyingPartyAssociationStore(ICryptoKeyStore keyStore);
    public sealed virtual void StoreAssociation(Uri providerEndpoint, Association association);
    public sealed virtual Association GetAssociation(Uri providerEndpoint, SecuritySettings securityRequirements);
    public sealed virtual Association GetAssociation(Uri providerEndpoint, string handle);
    public sealed virtual bool RemoveAssociation(Uri providerEndpoint, string handle);
    [CompilerGeneratedAttribute]
private static bool <GetAssociation>b__1(KeyValuePair`2<string, CryptoKey> cryptoKey);
    [CompilerGeneratedAttribute]
private static DateTime <GetAssociation>b__2(KeyValuePair`2<string, CryptoKey> cryptoKey);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<KeyValuePair`2<string, CryptoKey>, Association> <GetAssociation>b__3(KeyValuePair`2<string, CryptoKey> cryptoKey);
    [CompilerGeneratedAttribute]
private static Association <GetAssociation>b__6(<>f__AnonymousType0`2<KeyValuePair`2<string, CryptoKey>, Association> <>h__TransparentIdentifier0);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.DuplicateRequestedHostsComparer : object {
    private static IEqualityComparer`1<IAuthenticationRequest> instance;
    internal static IEqualityComparer`1<IAuthenticationRequest> Instance { get; }
    private static DuplicateRequestedHostsComparer();
    internal static IEqualityComparer`1<IAuthenticationRequest> get_Instance();
    public sealed virtual bool Equals(IAuthenticationRequest x, IAuthenticationRequest y);
    public sealed virtual int GetHashCode(IAuthenticationRequest obj);
}
public class DotNetOpenAuth.OpenId.RelyingParty.EndpointSelector : MulticastDelegate {
    public EndpointSelector(object object, IntPtr method);
    public virtual bool Invoke(IProviderEndpoint endpoint);
    public virtual IAsyncResult BeginInvoke(IProviderEndpoint endpoint, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class DotNetOpenAuth.OpenId.RelyingParty.Extensions.ExtensionsInteropHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [ExtensionAttribute]
public static void SpreadSregToAX(IAuthenticationRequest request, AXAttributeFormats attributeFormats);
    [ExtensionAttribute]
public static ClaimsResponse UnifyExtensionsAsSreg(IAuthenticationResponse response, bool allowUnsigned);
    [ExtensionAttribute]
internal static string GetAttributeValue(FetchResponse fetchResponse, string typeUri, AXAttributeFormats formats);
    private static bool TryDetectOPAttributeFormat(IAuthenticationRequest request, AXAttributeFormats& attributeFormat);
    [CompilerGeneratedAttribute]
private static bool <GetAttributeValue>b__1(string s);
}
internal static class DotNetOpenAuth.OpenId.RelyingParty.Extensions.UI.UIUtilities : object {
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.Extensions.UI.UIUtilities/<GetWindowPopupScriptAsync>d__0")]
internal static Task`1<string> GetWindowPopupScriptAsync(OpenIdRelyingParty relyingParty, IAuthenticationRequest request, string windowName, CancellationToken cancellationToken);
}
[DebuggerDisplayAttribute("{Exception.Message}")]
internal class DotNetOpenAuth.OpenId.RelyingParty.FailedAuthenticationResponse : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Identifier ClaimedIdentifier { get; }
    public string FriendlyIdentifierForDisplay { get; }
    public AuthenticationStatus Status { get; }
    public IProviderEndpoint Provider { get; }
    public Exception Exception { get; private set; }
    internal FailedAuthenticationResponse(Exception exception);
    public sealed virtual Identifier get_ClaimedIdentifier();
    public sealed virtual string get_FriendlyIdentifierForDisplay();
    public sealed virtual AuthenticationStatus get_Status();
    public sealed virtual IProviderEndpoint get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    public sealed virtual IDictionary`2<string, string> GetCallbackArguments();
    public sealed virtual IDictionary`2<string, string> GetUntrustedCallbackArguments();
    public sealed virtual string GetCallbackArgument(string key);
    public sealed virtual string GetUntrustedCallbackArgument(string key);
    public sealed virtual T GetExtension();
    public sealed virtual IOpenIdMessageExtension GetExtension(Type extensionType);
    public sealed virtual T GetUntrustedExtension();
    public sealed virtual IOpenIdMessageExtension GetUntrustedExtension(Type extensionType);
}
public interface DotNetOpenAuth.OpenId.RelyingParty.IRelyingPartyAssociationStore {
    public abstract virtual void StoreAssociation(Uri providerEndpoint, Association association);
    public abstract virtual Association GetAssociation(Uri providerEndpoint, SecuritySettings securityRequirements);
    public abstract virtual Association GetAssociation(Uri providerEndpoint, string handle);
    public abstract virtual bool RemoveAssociation(Uri providerEndpoint, string handle);
}
public interface DotNetOpenAuth.OpenId.RelyingParty.ISetupRequiredAuthenticationResponse {
    public Identifier UserSuppliedIdentifier { get; }
    public abstract virtual Identifier get_UserSuppliedIdentifier();
}
internal class DotNetOpenAuth.OpenId.RelyingParty.NegativeAuthenticationResponse : object {
    private NegativeAssertionResponse response;
    public Identifier ClaimedIdentifier { get; }
    public string FriendlyIdentifierForDisplay { get; }
    public AuthenticationStatus Status { get; }
    public IProviderEndpoint Provider { get; }
    public Exception Exception { get; }
    public Identifier UserSuppliedIdentifier { get; }
    internal NegativeAuthenticationResponse(NegativeAssertionResponse response);
    public sealed virtual Identifier get_ClaimedIdentifier();
    public sealed virtual string get_FriendlyIdentifierForDisplay();
    public sealed virtual AuthenticationStatus get_Status();
    public sealed virtual IProviderEndpoint get_Provider();
    public sealed virtual Exception get_Exception();
    public sealed virtual Identifier get_UserSuppliedIdentifier();
    public sealed virtual string GetCallbackArgument(string key);
    public sealed virtual string GetUntrustedCallbackArgument(string key);
    public sealed virtual IDictionary`2<string, string> GetCallbackArguments();
    public sealed virtual IDictionary`2<string, string> GetUntrustedCallbackArguments();
    public sealed virtual T GetExtension();
    public sealed virtual IOpenIdMessageExtension GetExtension(Type extensionType);
    public sealed virtual T GetUntrustedExtension();
    public sealed virtual IOpenIdMessageExtension GetUntrustedExtension(Type extensionType);
}
public class DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty : object {
    private static string ApplicationStoreKey;
    private ObservableCollection`1<IRelyingPartyBehavior> behaviors;
    private IdentifierDiscoveryServices discoveryServices;
    private OpenIdRelyingParty nonVerifyingRelyingParty;
    private object nonVerifyingRelyingPartyInitLock;
    private Dictionary`2<Type, string> clientScriptExtensions;
    private RelyingPartySecuritySettings securitySettings;
    private Comparison`1<IdentifierDiscoveryResult> endpointOrder;
    private Channel channel;
    [CompilerGeneratedAttribute]
private EndpointSelector <EndpointFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationManager <AssociationManager>k__BackingField;
    [EditorBrowsableAttribute("2")]
public static Comparison`1<IdentifierDiscoveryResult> DefaultEndpointOrder { get; }
    public Channel Channel { get; public set; }
    public RelyingPartySecuritySettings SecuritySettings { get; internal set; }
    private SecuritySettings DotNetOpenAuth.OpenId.IOpenIdHost.SecuritySettings { get; }
    [EditorBrowsableAttribute("2")]
public EndpointSelector EndpointFilter { get; public set; }
    [EditorBrowsableAttribute("2")]
public Comparison`1<IdentifierDiscoveryResult> EndpointOrder { get; public set; }
    public IList`1<IOpenIdExtensionFactory> ExtensionFactories { get; }
    public ICollection`1<IRelyingPartyBehavior> Behaviors { get; }
    public IList`1<IIdentifierDiscoveryService> DiscoveryServices { get; }
    private IHostFactories DotNetOpenAuth.OpenId.IOpenIdHost.HostFactories { get; }
    internal bool CanSignCallbackArguments { get; }
    internal AssociationManager AssociationManager { get; private set; }
    protected OpenIdRelyingParty NonVerifyingRelyingParty { get; }
    public OpenIdRelyingParty(ICryptoKeyAndNonceStore applicationStore, IHostFactories hostFactories);
    private OpenIdRelyingParty(ICryptoKeyStore cryptoKeyStore, INonceStore nonceStore, IHostFactories hostFactories);
    public static Comparison`1<IdentifierDiscoveryResult> get_DefaultEndpointOrder();
    public Channel get_Channel();
    public void set_Channel(Channel value);
    public RelyingPartySecuritySettings get_SecuritySettings();
    internal void set_SecuritySettings(RelyingPartySecuritySettings value);
    private sealed virtual override SecuritySettings DotNetOpenAuth.OpenId.IOpenIdHost.get_SecuritySettings();
    [CompilerGeneratedAttribute]
public EndpointSelector get_EndpointFilter();
    [CompilerGeneratedAttribute]
public void set_EndpointFilter(EndpointSelector value);
    public Comparison`1<IdentifierDiscoveryResult> get_EndpointOrder();
    public void set_EndpointOrder(Comparison`1<IdentifierDiscoveryResult> value);
    public IList`1<IOpenIdExtensionFactory> get_ExtensionFactories();
    public ICollection`1<IRelyingPartyBehavior> get_Behaviors();
    public IList`1<IIdentifierDiscoveryService> get_DiscoveryServices();
    private sealed virtual override IHostFactories DotNetOpenAuth.OpenId.IOpenIdHost.get_HostFactories();
    internal bool get_CanSignCallbackArguments();
    [CompilerGeneratedAttribute]
internal AssociationManager get_AssociationManager();
    [CompilerGeneratedAttribute]
private void set_AssociationManager(AssociationManager value);
    protected OpenIdRelyingParty get_NonVerifyingRelyingParty();
    public static ICryptoKeyAndNonceStore GetHttpApplicationStore(HttpContextBase context);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestAsync>d__1")]
[DebuggerStepThroughAttribute]
public Task`1<IAuthenticationRequest> CreateRequestAsync(Identifier userSuppliedIdentifier, Realm realm, Uri returnToUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestAsync>d__5")]
[DebuggerStepThroughAttribute]
public Task`1<IAuthenticationRequest> CreateRequestAsync(Identifier userSuppliedIdentifier, Realm realm, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestAsync>d__a")]
public Task`1<IAuthenticationRequest> CreateRequestAsync(Identifier userSuppliedIdentifier, HttpRequestBase requestContext, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestsAsync>d__e")]
public virtual Task`1<IEnumerable`1<IAuthenticationRequest>> CreateRequestsAsync(Identifier userSuppliedIdentifier, Realm realm, Uri returnToUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestsAsync>d__12")]
[DebuggerStepThroughAttribute]
public Task`1<IEnumerable`1<IAuthenticationRequest>> CreateRequestsAsync(Identifier userSuppliedIdentifier, Realm realm, HttpRequestBase requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<CreateRequestsAsync>d__18")]
[DebuggerStepThroughAttribute]
public Task`1<IEnumerable`1<IAuthenticationRequest>> CreateRequestsAsync(Identifier userSuppliedIdentifier, HttpRequestBase requestContext, CancellationToken cancellationToken);
    public Task`1<IAuthenticationResponse> GetResponseAsync(HttpRequestBase request, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<GetResponseAsync>d__1b")]
public Task`1<IAuthenticationResponse> GetResponseAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> ProcessResponseFromPopupAsync(HttpRequestBase request, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> ProcessResponseFromPopupAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public void RegisterClientScriptExtension(string propertyName);
    public sealed virtual void Dispose();
    internal static bool IsOpenIdSupportingParameter(string parameterName);
    internal static OpenIdRelyingParty CreateNonVerifying();
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.OpenIdRelyingParty/<ProcessResponseFromPopupAsync>d__25")]
[DebuggerStepThroughAttribute]
internal Task`1<HttpResponseMessage> ProcessResponseFromPopupAsync(HttpRequestMessage request, Action`1<AuthenticationStatus> callback, CancellationToken cancellationToken);
    internal Task`1<IEnumerable`1<IdentifierDiscoveryResult>> DiscoverAsync(Identifier identifier, CancellationToken cancellationToken);
    protected internal bool FilterEndpoint(IProviderEndpoint endpoint);
    protected virtual void Dispose(bool disposing);
    private static HttpResponseMessage InvokeParentPageScript(string methodCall);
    private void OnBehaviorsChanged(object sender, NotifyCollectionChangedEventArgs e);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.PositiveAnonymousResponse : object {
    private IndirectSignedResponse response;
    private IProviderEndpoint provider;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public Identifier ClaimedIdentifier { get; }
    public string FriendlyIdentifierForDisplay { get; }
    public AuthenticationStatus Status { get; }
    public IProviderEndpoint Provider { get; }
    public Exception Exception { get; }
    internal bool TrustedCallbackArgumentsAvailable { get; }
    protected internal IndirectSignedResponse Response { get; }
    protected internal PositiveAnonymousResponse(IndirectSignedResponse response);
    public virtual Identifier get_ClaimedIdentifier();
    public virtual string get_FriendlyIdentifierForDisplay();
    public virtual AuthenticationStatus get_Status();
    public sealed virtual IProviderEndpoint get_Provider();
    public sealed virtual Exception get_Exception();
    internal bool get_TrustedCallbackArgumentsAvailable();
    protected internal IndirectSignedResponse get_Response();
    public sealed virtual string GetCallbackArgument(string key);
    public sealed virtual string GetUntrustedCallbackArgument(string key);
    public sealed virtual IDictionary`2<string, string> GetCallbackArguments();
    public sealed virtual IDictionary`2<string, string> GetUntrustedCallbackArguments();
    public sealed virtual T GetExtension();
    public sealed virtual IOpenIdMessageExtension GetExtension(Type extensionType);
    public sealed virtual T GetUntrustedExtension();
    public sealed virtual IOpenIdMessageExtension GetUntrustedExtension(Type extensionType);
    [CompilerGeneratedAttribute]
private static bool <GetUntrustedCallbackArguments>b__0(string key);
}
[DebuggerDisplayAttribute("Status: {Status}, ClaimedIdentifier: {ClaimedIdentifier}")]
internal class DotNetOpenAuth.OpenId.RelyingParty.PositiveAuthenticationResponse : PositiveAnonymousResponse {
    [CompilerGeneratedAttribute]
private IdentifierDiscoveryResult <Endpoint>k__BackingField;
    public Identifier ClaimedIdentifier { get; }
    public string FriendlyIdentifierForDisplay { get; }
    public AuthenticationStatus Status { get; }
    internal IdentifierDiscoveryResult Endpoint { get; private set; }
    protected internal PositiveAssertionResponse Response { get; }
    private PositiveAuthenticationResponse(PositiveAssertionResponse response, OpenIdRelyingParty relyingParty);
    public virtual Identifier get_ClaimedIdentifier();
    public virtual string get_FriendlyIdentifierForDisplay();
    public virtual AuthenticationStatus get_Status();
    [CompilerGeneratedAttribute]
internal IdentifierDiscoveryResult get_Endpoint();
    [CompilerGeneratedAttribute]
private void set_Endpoint(IdentifierDiscoveryResult value);
    protected internal PositiveAssertionResponse get_Response();
    [AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.PositiveAuthenticationResponse/<CreateAsync>d__0")]
[DebuggerStepThroughAttribute]
internal static Task`1<PositiveAuthenticationResponse> CreateAsync(PositiveAssertionResponse response, OpenIdRelyingParty relyingParty, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("DotNetOpenAuth.OpenId.RelyingParty.PositiveAuthenticationResponse/<VerifyDiscoveryMatchesAssertionAsync>d__4")]
private Task VerifyDiscoveryMatchesAssertionAsync(OpenIdRelyingParty relyingParty, CancellationToken cancellationToken);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.PositiveAuthenticationResponseSnapshot : object {
    private IDictionary`2<string, string> callbackArguments;
    private IDictionary`2<string, string> untrustedCallbackArguments;
    [CompilerGeneratedAttribute]
private Identifier <ClaimedIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyIdentifierForDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IProviderEndpoint <Provider>k__BackingField;
    public Identifier ClaimedIdentifier { get; private set; }
    public string FriendlyIdentifierForDisplay { get; private set; }
    public AuthenticationStatus Status { get; private set; }
    public IProviderEndpoint Provider { get; private set; }
    public Exception Exception { get; }
    internal PositiveAuthenticationResponseSnapshot(IAuthenticationResponse copyFrom);
    [CompilerGeneratedAttribute]
public sealed virtual Identifier get_ClaimedIdentifier();
    [CompilerGeneratedAttribute]
private void set_ClaimedIdentifier(Identifier value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FriendlyIdentifierForDisplay();
    [CompilerGeneratedAttribute]
private void set_FriendlyIdentifierForDisplay(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AuthenticationStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(AuthenticationStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual IProviderEndpoint get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(IProviderEndpoint value);
    public sealed virtual Exception get_Exception();
    public sealed virtual T GetExtension();
    public sealed virtual IOpenIdMessageExtension GetExtension(Type extensionType);
    public sealed virtual T GetUntrustedExtension();
    public sealed virtual IOpenIdMessageExtension GetUntrustedExtension(Type extensionType);
    public sealed virtual IDictionary`2<string, string> GetCallbackArguments();
    public sealed virtual IDictionary`2<string, string> GetUntrustedCallbackArguments();
    public sealed virtual string GetCallbackArgument(string key);
    public sealed virtual string GetUntrustedCallbackArgument(string key);
}
internal class DotNetOpenAuth.OpenId.RelyingParty.SimpleXrdsProviderEndpoint : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public Version Version { get; private set; }
    public Uri Uri { get; private set; }
    internal SimpleXrdsProviderEndpoint(PositiveAssertionResponse positiveAssertion);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    private sealed virtual override bool DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.IsExtensionSupported();
    private sealed virtual override bool DotNetOpenAuth.OpenId.RelyingParty.IProviderEndpoint.IsExtensionSupported(Type extensionType);
}
public class DotNetOpenAuth.OpenId.RelyingParty.WellKnownProviders : object {
    public static Identifier Yahoo;
    public static Identifier Google;
    public static Identifier MyOpenId;
    public static Identifier Verisign;
    public static Identifier MyVidoop;
    private static WellKnownProviders();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTitle;
    internal static string AssemblyProduct;
}
