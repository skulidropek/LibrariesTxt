public abstract class DotNetty.Buffers.AbstractByteBuffer : object {
    private static IInternalLogger Logger;
    private static string PropMode;
    private static bool CheckAccessible;
    internal static ResourceLeakDetector LeakDetector;
    private int readerIndex;
    private int writerIndex;
    private int markedReaderIndex;
    private int markedWriterIndex;
    private int maxCapacity;
    public int Capacity { get; }
    public int MaxCapacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public int ReaderIndex { get; }
    public int WriterIndex { get; }
    public int ReadableBytes { get; }
    public int WritableBytes { get; }
    public int MaxWritableBytes { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public bool IsDirect { get; }
    public int ReferenceCount { get; }
    private static AbstractByteBuffer();
    protected AbstractByteBuffer(int maxCapacity);
    public abstract virtual int get_Capacity();
    public abstract virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual int get_MaxCapacity();
    protected void SetMaxCapacity(int newMaxCapacity);
    public abstract virtual IByteBufferAllocator get_Allocator();
    public virtual int get_ReaderIndex();
    public virtual IByteBuffer SetReaderIndex(int index);
    public virtual int get_WriterIndex();
    public virtual IByteBuffer SetWriterIndex(int index);
    protected void SetWriterIndex0(int index);
    public virtual IByteBuffer SetIndex(int readerIdx, int writerIdx);
    public virtual IByteBuffer Clear();
    public virtual bool IsReadable();
    public virtual bool IsReadable(int size);
    public virtual bool IsWritable();
    public virtual bool IsWritable(int size);
    public virtual int get_ReadableBytes();
    public virtual int get_WritableBytes();
    public virtual int get_MaxWritableBytes();
    public virtual IByteBuffer MarkReaderIndex();
    public virtual IByteBuffer ResetReaderIndex();
    public virtual IByteBuffer MarkWriterIndex();
    public virtual IByteBuffer ResetWriterIndex();
    protected void MarkIndex();
    public virtual IByteBuffer DiscardReadBytes();
    public virtual IByteBuffer DiscardSomeReadBytes();
    protected void AdjustMarkers(int decrement);
    public virtual IByteBuffer EnsureWritable(int minWritableBytes);
    protected internal void EnsureWritable0(int minWritableBytes);
    public virtual int EnsureWritable(int minWritableBytes, bool force);
    public virtual byte GetByte(int index);
    protected internal abstract virtual byte _GetByte(int index);
    public sealed virtual bool GetBoolean(int index);
    public virtual short GetShort(int index);
    protected internal abstract virtual short _GetShort(int index);
    public virtual short GetShortLE(int index);
    protected internal abstract virtual short _GetShortLE(int index);
    public sealed virtual ushort GetUnsignedShort(int index);
    public sealed virtual ushort GetUnsignedShortLE(int index);
    public virtual int GetUnsignedMedium(int index);
    protected internal abstract virtual int _GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    protected internal abstract virtual int _GetUnsignedMediumLE(int index);
    public sealed virtual int GetMedium(int index);
    public sealed virtual int GetMediumLE(int index);
    public virtual int GetInt(int index);
    protected internal abstract virtual int _GetInt(int index);
    public virtual int GetIntLE(int index);
    protected internal abstract virtual int _GetIntLE(int index);
    public sealed virtual UInt32 GetUnsignedInt(int index);
    public sealed virtual UInt32 GetUnsignedIntLE(int index);
    public virtual long GetLong(int index);
    protected internal abstract virtual long _GetLong(int index);
    public virtual long GetLongLE(int index);
    protected internal abstract virtual long _GetLongLE(int index);
    public virtual char GetChar(int index);
    public sealed virtual float GetFloat(int index);
    public sealed virtual float GetFloatLE(int index);
    public sealed virtual double GetDouble(int index);
    public sealed virtual double GetDoubleLE(int index);
    public virtual IByteBuffer GetBytes(int index, Byte[] destination);
    public abstract virtual IByteBuffer GetBytes(int index, Byte[] destination, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer destination);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int length);
    public abstract virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int dstIndex, int length);
    public abstract virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual string GetString(int index, int length, Encoding encoding);
    public virtual string ReadString(int length, Encoding encoding);
    public virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public virtual IByteBuffer SetByte(int index, int value);
    protected internal abstract virtual void _SetByte(int index, int value);
    public virtual IByteBuffer SetBoolean(int index, bool value);
    public virtual IByteBuffer SetShort(int index, int value);
    protected internal abstract virtual void _SetShort(int index, int value);
    public virtual IByteBuffer SetShortLE(int index, int value);
    protected internal abstract virtual void _SetShortLE(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedShort(int index, ushort value);
    public sealed virtual IByteBuffer SetUnsignedShortLE(int index, ushort value);
    public virtual IByteBuffer SetChar(int index, char value);
    public virtual IByteBuffer SetMedium(int index, int value);
    protected internal abstract virtual void _SetMedium(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    protected internal abstract virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedInt(int index, UInt32 value);
    public sealed virtual IByteBuffer SetUnsignedIntLE(int index, UInt32 value);
    protected internal abstract virtual void _SetInt(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    protected internal abstract virtual void _SetIntLE(int index, int value);
    public virtual IByteBuffer SetFloat(int index, float value);
    public sealed virtual IByteBuffer SetFloatLE(int index, float value);
    public virtual IByteBuffer SetLong(int index, long value);
    protected internal abstract virtual void _SetLong(int index, long value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    protected internal abstract virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetDouble(int index, double value);
    public sealed virtual IByteBuffer SetDoubleLE(int index, double value);
    public virtual IByteBuffer SetBytes(int index, Byte[] src);
    public abstract virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public abstract virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public abstract virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual int SetString(int index, string value, Encoding encoding);
    private int SetString0(int index, string value, Encoding encoding, bool expand);
    public virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    private int SetCharSequence0(int index, ICharSequence sequence, Encoding encoding, bool expand);
    public virtual byte ReadByte();
    public sealed virtual bool ReadBoolean();
    public virtual short ReadShort();
    public virtual short ReadShortLE();
    public sealed virtual ushort ReadUnsignedShort();
    public sealed virtual ushort ReadUnsignedShortLE();
    public sealed virtual int ReadMedium();
    public sealed virtual int ReadMediumLE();
    public virtual int ReadUnsignedMedium();
    public virtual int ReadUnsignedMediumLE();
    public virtual int ReadInt();
    public virtual int ReadIntLE();
    public sealed virtual UInt32 ReadUnsignedInt();
    public sealed virtual UInt32 ReadUnsignedIntLE();
    public virtual long ReadLong();
    public virtual long ReadLongLE();
    public sealed virtual char ReadChar();
    public sealed virtual float ReadFloat();
    public sealed virtual float ReadFloatLE();
    public sealed virtual double ReadDouble();
    public sealed virtual double ReadDoubleLE();
    public virtual IByteBuffer ReadBytes(int length);
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual IByteBuffer ReadBytes(Byte[] destination, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Byte[] dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Stream destination, int length);
    public virtual IByteBuffer SkipBytes(int length);
    public virtual IByteBuffer WriteBoolean(bool value);
    public virtual IByteBuffer WriteByte(int value);
    public virtual IByteBuffer WriteShort(int value);
    public virtual IByteBuffer WriteShortLE(int value);
    public sealed virtual IByteBuffer WriteUnsignedShort(ushort value);
    public sealed virtual IByteBuffer WriteUnsignedShortLE(ushort value);
    public virtual IByteBuffer WriteMedium(int value);
    public virtual IByteBuffer WriteMediumLE(int value);
    public virtual IByteBuffer WriteInt(int value);
    public virtual IByteBuffer WriteIntLE(int value);
    public virtual IByteBuffer WriteLong(long value);
    public virtual IByteBuffer WriteLongLE(long value);
    public virtual IByteBuffer WriteChar(char value);
    public virtual IByteBuffer WriteFloat(float value);
    public sealed virtual IByteBuffer WriteFloatLE(float value);
    public virtual IByteBuffer WriteDouble(double value);
    public sealed virtual IByteBuffer WriteDoubleLE(double value);
    public virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer WriteBytes(Byte[] src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    [AsyncStateMachineAttribute("DotNetty.Buffers.AbstractByteBuffer/<WriteBytesAsync>d__181")]
public virtual Task WriteBytesAsync(Stream stream, int length, CancellationToken cancellationToken);
    public sealed virtual Task WriteBytesAsync(Stream stream, int length);
    public virtual IByteBuffer WriteZero(int length);
    public virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public virtual int WriteString(string value, Encoding encoding);
    public virtual IByteBuffer Copy();
    public abstract virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual string ToString(Encoding encoding);
    public virtual string ToString(int index, int length, Encoding encoding);
    public virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public sealed virtual int BytesBefore(byte value);
    public sealed virtual int BytesBefore(int length, byte value);
    public virtual int BytesBefore(int index, int length, byte value);
    public virtual int ForEachByte(IByteProcessor processor);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    private int ForEachByteAsc0(int start, int end, IByteProcessor processor);
    public virtual int ForEachByteDesc(IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    private int ForEachByteDesc0(int rStart, int rEnd, IByteProcessor processor);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(object o);
    public virtual bool Equals(IByteBuffer buffer);
    public virtual int CompareTo(IByteBuffer that);
    public virtual string ToString();
    protected void CheckIndex(int index);
    protected internal void CheckIndex(int index, int fieldLength);
    protected void CheckIndex0(int index, int fieldLength);
    protected void CheckSrcIndex(int index, int length, int srcIndex, int srcCapacity);
    protected void CheckDstIndex(int index, int length, int dstIndex, int dstCapacity);
    protected void CheckReadableBytes(int minimumReadableBytes);
    protected void CheckNewCapacity(int newCapacity);
    private void CheckReadableBytes0(int minimumReadableBytes);
    protected void EnsureAccessible();
    protected void SetIndex0(int readerIdx, int writerIdx);
    protected void DiscardMarks();
    public abstract virtual int get_IoBufferCount();
    public sealed virtual ArraySegment`1<byte> GetIoBuffer();
    public abstract virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public sealed virtual ArraySegment`1[] GetIoBuffers();
    public abstract virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public abstract virtual bool get_HasArray();
    public abstract virtual Byte[] get_Array();
    public abstract virtual int get_ArrayOffset();
    public abstract virtual bool get_HasMemoryAddress();
    public abstract virtual Byte& GetPinnableMemoryAddress();
    public abstract virtual IntPtr AddressOfPinnedMemory();
    public abstract virtual IByteBuffer Unwrap();
    public abstract virtual bool get_IsDirect();
    public abstract virtual int get_ReferenceCount();
    public abstract virtual IReferenceCounted Retain();
    public abstract virtual IReferenceCounted Retain(int increment);
    public abstract virtual IReferenceCounted Touch();
    public abstract virtual IReferenceCounted Touch(object hint);
    public abstract virtual bool Release();
    public abstract virtual bool Release(int decrement);
}
public abstract class DotNetty.Buffers.AbstractByteBufferAllocator : object {
    public static int DefaultInitialCapacity;
    public static int DefaultMaxComponents;
    public static int DefaultMaxCapacity;
    private static int CalculateThreshold;
    private bool directByDefault;
    private IByteBuffer emptyBuffer;
    public bool IsDirectBufferPooled { get; }
    protected AbstractByteBufferAllocator(bool preferDirect);
    protected static IByteBuffer ToLeakAwareBuffer(IByteBuffer buf);
    protected static CompositeByteBuffer ToLeakAwareBuffer(CompositeByteBuffer buf);
    public sealed virtual IByteBuffer Buffer();
    public sealed virtual IByteBuffer Buffer(int initialCapacity);
    public sealed virtual IByteBuffer Buffer(int initialCapacity, int maxCapacity);
    public sealed virtual IByteBuffer HeapBuffer();
    public sealed virtual IByteBuffer HeapBuffer(int initialCapacity);
    public sealed virtual IByteBuffer HeapBuffer(int initialCapacity, int maxCapacity);
    public sealed virtual IByteBuffer DirectBuffer();
    public sealed virtual IByteBuffer DirectBuffer(int initialCapacity);
    public sealed virtual IByteBuffer DirectBuffer(int initialCapacity, int maxCapacity);
    public sealed virtual CompositeByteBuffer CompositeBuffer();
    public sealed virtual CompositeByteBuffer CompositeBuffer(int maxComponents);
    public sealed virtual CompositeByteBuffer CompositeHeapBuffer();
    public virtual CompositeByteBuffer CompositeHeapBuffer(int maxNumComponents);
    public sealed virtual CompositeByteBuffer CompositeDirectBuffer();
    public virtual CompositeByteBuffer CompositeDirectBuffer(int maxNumComponents);
    private static void Validate(int initialCapacity, int maxCapacity);
    protected abstract virtual IByteBuffer NewHeapBuffer(int initialCapacity, int maxCapacity);
    protected abstract virtual IByteBuffer NewDirectBuffer(int initialCapacity, int maxCapacity);
    public abstract virtual bool get_IsDirectBufferPooled();
    public sealed virtual int CalculateNewCapacity(int minNewCapacity, int maxCapacity);
}
public abstract class DotNetty.Buffers.AbstractDerivedByteBuffer : AbstractByteBuffer {
    public int ReferenceCount { get; }
    protected AbstractDerivedByteBuffer(int maxCapacity);
    public sealed virtual int get_ReferenceCount();
    protected virtual int ReferenceCount0();
    public sealed virtual IReferenceCounted Retain();
    protected virtual IByteBuffer Retain0();
    public sealed virtual IReferenceCounted Retain(int increment);
    protected virtual IByteBuffer Retain0(int increment);
    public sealed virtual IReferenceCounted Touch();
    protected virtual IByteBuffer Touch0();
    public sealed virtual IReferenceCounted Touch(object hint);
    protected virtual IByteBuffer Touch0(object hint);
    public sealed virtual bool Release();
    protected virtual bool Release0();
    public sealed virtual bool Release(int decrement);
    protected virtual bool Release0(int decrement);
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
}
internal abstract class DotNetty.Buffers.AbstractPooledDerivedByteBuffer : AbstractReferenceCountedByteBuffer {
    private Handle recyclerHandle;
    private AbstractByteBuffer rootParent;
    private IByteBuffer parent;
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public bool HasMemoryAddress { get; }
    public int IoBufferCount { get; }
    protected AbstractPooledDerivedByteBuffer(Handle recyclerHandle);
    internal void Parent(IByteBuffer newParent);
    public sealed virtual IByteBuffer Unwrap();
    protected AbstractByteBuffer UnwrapCore();
    internal T Init(AbstractByteBuffer unwrapped, IByteBuffer wrapped, int readerIndex, int writerIndex, int maxCapacity);
    protected internal sealed virtual void Deallocate();
    public sealed virtual IByteBufferAllocator get_Allocator();
    public sealed virtual bool get_IsDirect();
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual bool get_HasMemoryAddress();
    public sealed virtual int get_IoBufferCount();
    public sealed virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer Slice(int index, int length);
    protected IByteBuffer Duplicate0();
}
public abstract class DotNetty.Buffers.AbstractReferenceCountedByteBuffer : AbstractByteBuffer {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) referenceCount;
    public int ReferenceCount { get; }
    protected AbstractReferenceCountedByteBuffer(int maxCapacity);
    public virtual int get_ReferenceCount();
    protected internal void SetReferenceCount(int value);
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Retain(int increment);
    private IReferenceCounted Retain0(int increment);
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    private bool Release0(int decrement);
    protected internal abstract virtual void Deallocate();
}
internal abstract class DotNetty.Buffers.AbstractUnpooledSlicedByteBuffer : AbstractDerivedByteBuffer {
    private IByteBuffer buffer;
    private int adjustment;
    internal int Length { get; }
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public int IoBufferCount { get; }
    protected AbstractUnpooledSlicedByteBuffer(IByteBuffer buffer, int index, int length);
    internal int get_Length();
    public virtual IByteBuffer Unwrap();
    public virtual IByteBufferAllocator get_Allocator();
    public virtual bool get_IsDirect();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    public virtual byte GetByte(int index);
    protected internal virtual byte _GetByte(int index);
    public virtual short GetShort(int index);
    protected internal virtual short _GetShort(int index);
    public virtual short GetShortLE(int index);
    protected internal virtual short _GetShortLE(int index);
    public virtual int GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    public virtual int GetInt(int index);
    protected internal virtual int _GetInt(int index);
    public virtual int GetIntLE(int index);
    protected internal virtual int _GetIntLE(int index);
    public virtual long GetLong(int index);
    protected internal virtual long _GetLong(int index);
    public virtual long GetLongLE(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual IByteBuffer SetByte(int index, int value);
    protected internal virtual void _SetByte(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    public virtual IByteBuffer SetShortLE(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    protected internal virtual void _SetLong(int index, long value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    protected int Idx(int index);
    internal static void CheckSliceOutOfBounds(int index, int length, IByteBuffer buffer);
}
internal class DotNetty.Buffers.AdvancedLeakAwareByteBuffer : SimpleLeakAwareByteBuffer {
    private static string PropAcquireAndReleaseOnly;
    private static bool AcquireAndReleaseOnly;
    private static IInternalLogger Logger;
    public int IoBufferCount { get; }
    private static AdvancedLeakAwareByteBuffer();
    internal AdvancedLeakAwareByteBuffer(IByteBuffer buf, IResourceLeakTracker leak);
    internal AdvancedLeakAwareByteBuffer(IByteBuffer wrapped, IByteBuffer trackedByteBuf, IResourceLeakTracker leak);
    internal static void RecordLeakNonRefCountingOperation(IResourceLeakTracker leak);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer DiscardReadBytes();
    public virtual IByteBuffer DiscardSomeReadBytes();
    public virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public virtual int EnsureWritable(int minWritableBytes, bool force);
    public virtual bool GetBoolean(int index);
    public virtual byte GetByte(int index);
    public virtual int GetMedium(int index);
    public virtual int GetUnsignedMedium(int index);
    public virtual short GetShort(int index);
    public virtual ushort GetUnsignedShort(int index);
    public virtual int GetInt(int index);
    public virtual UInt32 GetUnsignedInt(int index);
    public virtual long GetLong(int index);
    public virtual char GetChar(int index);
    public virtual float GetFloat(int index);
    public virtual double GetDouble(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer SetBoolean(int index, bool value);
    public virtual IByteBuffer SetByte(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    public virtual IByteBuffer SetChar(int index, char value);
    public virtual IByteBuffer SetFloat(int index, float value);
    public virtual IByteBuffer SetDouble(int index, double value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream input, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual bool ReadBoolean();
    public virtual byte ReadByte();
    public virtual short ReadShort();
    public virtual ushort ReadUnsignedShort();
    public virtual int ReadMedium();
    public virtual int ReadUnsignedMedium();
    public virtual int ReadInt();
    public virtual UInt32 ReadUnsignedInt();
    public virtual long ReadLong();
    public virtual char ReadChar();
    public virtual float ReadFloat();
    public virtual double ReadDouble();
    public virtual IByteBuffer ReadBytes(int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Byte[] dst);
    public virtual IByteBuffer ReadBytes(Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Stream output, int length);
    public virtual IByteBuffer SkipBytes(int length);
    public virtual IByteBuffer WriteBoolean(bool value);
    public virtual IByteBuffer WriteByte(int value);
    public virtual IByteBuffer WriteShort(int value);
    public virtual IByteBuffer WriteInt(int value);
    public virtual IByteBuffer WriteMedium(int value);
    public virtual IByteBuffer WriteLong(long value);
    public virtual IByteBuffer WriteChar(char value);
    public virtual IByteBuffer WriteFloat(float value);
    public virtual IByteBuffer WriteDouble(double value);
    public virtual IByteBuffer WriteBytes(IByteBuffer src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer WriteBytes(Byte[] src);
    public virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public virtual Task WriteBytesAsync(Stream input, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer WriteZero(int length);
    public virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public virtual int BytesBefore(byte value);
    public virtual int BytesBefore(int length, byte value);
    public virtual int BytesBefore(int index, int length, byte value);
    public virtual int ForEachByte(IByteProcessor processor);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    public virtual IByteBuffer Copy();
    public virtual IByteBuffer Copy(int index, int length);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers();
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual string ToString(Encoding encoding);
    public virtual string ToString(int index, int length, Encoding encoding);
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual short GetShortLE(int index);
    public virtual ushort GetUnsignedShortLE(int index);
    public virtual int GetMediumLE(int index);
    public virtual int GetUnsignedMediumLE(int index);
    public virtual int GetIntLE(int index);
    public virtual UInt32 GetUnsignedIntLE(int index);
    public virtual long GetLongLE(int index);
    public virtual IByteBuffer SetShortLE(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    public virtual short ReadShortLE();
    public virtual ushort ReadUnsignedShortLE();
    public virtual int ReadMediumLE();
    public virtual int ReadUnsignedMediumLE();
    public virtual int ReadIntLE();
    public virtual UInt32 ReadUnsignedIntLE();
    public virtual long ReadLongLE();
    public virtual IByteBuffer WriteShortLE(int value);
    public virtual IByteBuffer WriteMediumLE(int value);
    public virtual IByteBuffer WriteIntLE(int value);
    public virtual IByteBuffer WriteLongLE(long value);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Retain(int increment);
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    protected virtual SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer buf, IByteBuffer trackedByteBuf, IResourceLeakTracker leakTracker);
}
internal class DotNetty.Buffers.AdvancedLeakAwareCompositeByteBuffer : SimpleLeakAwareCompositeByteBuffer {
    public int IoBufferCount { get; }
    internal AdvancedLeakAwareCompositeByteBuffer(CompositeByteBuffer wrapped, IResourceLeakTracker leak);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer DiscardReadBytes();
    public virtual IByteBuffer DiscardSomeReadBytes();
    public virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public virtual int EnsureWritable(int minWritableBytes, bool force);
    public virtual byte GetByte(int index);
    public virtual int GetUnsignedMedium(int index);
    public virtual short GetShort(int index);
    public virtual int GetInt(int index);
    public virtual long GetLong(int index);
    public virtual char GetChar(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer SetBoolean(int index, bool value);
    public virtual IByteBuffer SetByte(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    public virtual IByteBuffer SetChar(int index, char value);
    public virtual IByteBuffer SetFloat(int index, float value);
    public virtual IByteBuffer SetDouble(int index, double value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream input, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual byte ReadByte();
    public virtual short ReadShort();
    public virtual int ReadUnsignedMedium();
    public virtual int ReadInt();
    public virtual long ReadLong();
    public virtual IByteBuffer ReadBytes(int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Byte[] dst);
    public virtual IByteBuffer ReadBytes(Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Stream output, int length);
    public virtual IByteBuffer SkipBytes(int length);
    public virtual IByteBuffer WriteBoolean(bool value);
    public virtual IByteBuffer WriteByte(int value);
    public virtual IByteBuffer WriteShort(int value);
    public virtual IByteBuffer WriteInt(int value);
    public virtual IByteBuffer WriteMedium(int value);
    public virtual IByteBuffer WriteLong(long value);
    public virtual IByteBuffer WriteChar(char value);
    public virtual IByteBuffer WriteFloat(float value);
    public virtual IByteBuffer WriteDouble(double value);
    public virtual IByteBuffer WriteBytes(IByteBuffer src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer WriteBytes(Byte[] src);
    public virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public virtual Task WriteBytesAsync(Stream input, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer WriteZero(int length);
    public virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public virtual int BytesBefore(int index, int length, byte value);
    public virtual int ForEachByte(IByteProcessor processor);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    public virtual IByteBuffer Copy();
    public virtual IByteBuffer Copy(int index, int length);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual string ToString(Encoding encoding);
    public virtual string ToString(int index, int length, Encoding encoding);
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual short GetShortLE(int index);
    public virtual int GetUnsignedMediumLE(int index);
    public virtual int GetIntLE(int index);
    public virtual long GetLongLE(int index);
    public virtual IByteBuffer SetShortLE(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    public virtual short ReadShortLE();
    public virtual int ReadUnsignedMediumLE();
    public virtual int ReadIntLE();
    public virtual long ReadLongLE();
    public virtual IByteBuffer WriteShortLE(int value);
    public virtual IByteBuffer WriteMediumLE(int value);
    public virtual IByteBuffer WriteIntLE(int value);
    public virtual IByteBuffer WriteLongLE(long value);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponent(IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponent(int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponents(IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(IByteBuffer[] buffers);
    public virtual CompositeByteBuffer RemoveComponent(int cIndex);
    public virtual CompositeByteBuffer RemoveComponents(int cIndex, int numComponents);
    public virtual CompositeByteBuffer Consolidate();
    public virtual CompositeByteBuffer Consolidate(int cIndex, int numComponents);
    public virtual CompositeByteBuffer DiscardReadComponents();
    public virtual IList`1<IByteBuffer> Decompose(int offset, int length);
    public virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    public virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public virtual string GetString(int index, int length, Encoding encoding);
    public virtual string ReadString(int length, Encoding encoding);
    public virtual int SetString(int index, string value, Encoding encoding);
    public virtual int WriteString(string value, Encoding encoding);
    public virtual IEnumerator`1<IByteBuffer> GetEnumerator();
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Retain(int increment);
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    protected virtual SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer wrapped, IByteBuffer trackedByteBuf, IResourceLeakTracker leakTracker);
}
public static class DotNetty.Buffers.ByteBufferUtil : object {
    private static char WriteUtfUnknown;
    private static int MaxBytesPerCharUtf8;
    private static IInternalLogger Logger;
    public static IByteBufferAllocator DefaultAllocator;
    private static FindNonAscii AsciiByteProcessor;
    private static ByteBufferUtil();
    public static string HexDump(IByteBuffer buffer);
    public static string HexDump(IByteBuffer buffer, int fromIndex, int length);
    public static string HexDump(Byte[] array);
    public static string HexDump(Byte[] array, int fromIndex, int length);
    public static bool EnsureWritableSuccess(int ensureWritableResult);
    public static int HashCode(IByteBuffer buffer);
    public static int IndexOf(IByteBuffer needle, IByteBuffer haystack);
    public static bool Equals(IByteBuffer a, int aStartIndex, IByteBuffer b, int bStartIndex, int length);
    public static bool Equals(IByteBuffer bufferA, IByteBuffer bufferB);
    public static int Compare(IByteBuffer bufferA, IByteBuffer bufferB);
    private static int CompareUint(IByteBuffer bufferA, IByteBuffer bufferB, int aIndex, int bIndex, int uintCountIncrement);
    public static int IndexOf(IByteBuffer buffer, int fromIndex, int toIndex, byte value);
    public static IByteBuffer ReadBytes(IByteBufferAllocator alloc, IByteBuffer buffer, int length);
    private static int FirstIndexOf(IByteBuffer buffer, int fromIndex, int toIndex, byte value);
    private static int LastIndexOf(IByteBuffer buffer, int fromIndex, int toIndex, byte value);
    public static IByteBuffer WriteUtf8(IByteBufferAllocator alloc, ICharSequence seq);
    public static int WriteUtf8(IByteBuffer buf, ICharSequence seq);
    public static int ReserveAndWriteUtf8(IByteBuffer buf, ICharSequence seq, int reserveBytes);
    internal static int WriteUtf8(AbstractByteBuffer buffer, int writerIndex, ICharSequence value, int len);
    public static IByteBuffer WriteUtf8(IByteBufferAllocator alloc, string value);
    public static int WriteUtf8(IByteBuffer buf, string seq);
    public static int ReserveAndWriteUtf8(IByteBuffer buf, string value, int reserveBytes);
    internal static int WriteUtf8(AbstractByteBuffer buffer, int writerIndex, string value, int len);
    internal static int Utf8MaxBytes(ICharSequence seq);
    public static int Utf8MaxBytes(string seq);
    internal static int Utf8MaxBytes(int seqLength);
    internal static int Utf8Bytes(string seq);
    private static int Utf8Bytes(string seq, int start, int length);
    public static IByteBuffer WriteAscii(IByteBufferAllocator alloc, ICharSequence seq);
    public static int WriteAscii(IByteBuffer buf, ICharSequence seq);
    internal static int WriteAscii(AbstractByteBuffer buffer, int writerIndex, ICharSequence seq, int len);
    public static IByteBuffer WriteAscii(IByteBufferAllocator alloc, string value);
    public static int WriteAscii(IByteBuffer buf, string value);
    internal static int WriteAscii(AbstractByteBuffer buffer, int writerIndex, string value, int len);
    public static IByteBuffer EncodeString(IByteBufferAllocator alloc, string src, Encoding encoding);
    public static IByteBuffer EncodeString(IByteBufferAllocator alloc, string src, Encoding encoding, int extraCapacity);
    internal static IByteBuffer EncodeString0(IByteBufferAllocator alloc, bool enforceHeap, string src, Encoding encoding, int extraCapacity);
    public static string DecodeString(IByteBuffer src, int readerIndex, int len, Encoding encoding);
    public static void Copy(AsciiString src, IByteBuffer dst);
    public static void Copy(AsciiString src, int srcIdx, IByteBuffer dst, int dstIdx, int length);
    public static void Copy(AsciiString src, int srcIdx, IByteBuffer dst, int length);
    public static string PrettyHexDump(IByteBuffer buffer);
    public static string PrettyHexDump(IByteBuffer buffer, int offset, int length);
    public static void AppendPrettyHexDump(StringBuilder dump, IByteBuffer buf);
    public static void AppendPrettyHexDump(StringBuilder dump, IByteBuffer buf, int offset, int length);
    public static bool IsText(IByteBuffer buf, int index, int length, Encoding encoding);
    private static bool IsAscii(IByteBuffer buf, int index, int length);
    private static bool IsUtf8(IByteBuffer buf, int index, int length);
    public static int SingleToInt32Bits(float value);
    public static float Int32BitsToSingle(int value);
    public static long SwapLong(long value);
    public static int SwapInt(int value);
    public static short SwapShort(short value);
}
public enum DotNetty.Buffers.ByteOrder : Enum {
    public int value__;
    public static ByteOrder LittleEndian;
    public static ByteOrder BigEndian;
}
[DefaultMemberAttribute("Item")]
public class DotNetty.Buffers.CompositeByteBuffer : AbstractReferenceCountedByteBuffer {
    private static IList`1<IByteBuffer> EmptyList;
    private static ArraySegment`1<byte> EmptyNioBuffer;
    private IByteBufferAllocator allocator;
    private bool direct;
    private List`1<ComponentEntry> components;
    private int maxNumComponents;
    private bool freed;
    public int IoBufferCount { get; }
    public bool IsDirect { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public int Capacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public int NumComponents { get; }
    public int MaxNumComponents { get; }
    public IByteBuffer Item { get; }
    public CompositeByteBuffer(IByteBufferAllocator allocator, bool direct, int maxNumComponents);
    public CompositeByteBuffer(IByteBufferAllocator allocator, bool direct, int maxNumComponents, IByteBuffer[] buffers);
    internal CompositeByteBuffer(IByteBufferAllocator allocator, bool direct, int maxNumComponents, IByteBuffer[] buffers, int offset, int length);
    public CompositeByteBuffer(IByteBufferAllocator allocator, bool direct, int maxNumComponents, IEnumerable`1<IByteBuffer> buffers);
    internal CompositeByteBuffer(IByteBufferAllocator allocator);
    private static CompositeByteBuffer();
    private static List`1<ComponentEntry> NewList(int maxNumComponents);
    public virtual CompositeByteBuffer AddComponent(IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponent(int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, int cIndex, IByteBuffer buffer);
    private int AddComponent0(bool increaseWriterIndex, int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IByteBuffer[] buffers);
    private int AddComponents0(bool increaseWriterIndex, int cIndex, IByteBuffer[] buffers, int offset, int len);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IEnumerable`1<IByteBuffer> buffers);
    private int AddComponents0(bool increaseIndex, int cIndex, IEnumerable`1<IByteBuffer> buffers);
    private void ConsolidateIfNeeded();
    private void CheckComponentIndex(int cIndex);
    private void CheckComponentIndex(int cIndex, int numComponents);
    private void UpdateComponentOffsets(int cIndex);
    public virtual CompositeByteBuffer RemoveComponent(int cIndex);
    public virtual CompositeByteBuffer RemoveComponents(int cIndex, int numComponents);
    [IteratorStateMachineAttribute("DotNetty.Buffers.CompositeByteBuffer/<GetEnumerator>d__33")]
public virtual IEnumerator`1<IByteBuffer> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IList`1<IByteBuffer> Decompose(int offset, int length);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual bool get_IsDirect();
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    public virtual int get_Capacity();
    private static int GetCapacity(List`1<ComponentEntry> components);
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual IByteBufferAllocator get_Allocator();
    public virtual int get_NumComponents();
    public virtual int get_MaxNumComponents();
    public virtual int ToComponentIndex(int offset);
    public virtual int ToByteIndex(int cIndex);
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    [AsyncStateMachineAttribute("DotNetty.Buffers.CompositeByteBuffer/<SetBytesAsync>d__86")]
public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual IByteBuffer Copy(int index, int length);
    private void CopyTo(int index, int length, int componentId, IByteBuffer dst);
    public virtual IByteBuffer get_Item(int cIndex);
    public virtual IByteBuffer ComponentAtOffset(int offset);
    public virtual IByteBuffer InternalComponent(int cIndex);
    public virtual IByteBuffer InternalComponentAtOffset(int offset);
    private ComponentEntry FindComponent(int offset);
    public virtual CompositeByteBuffer Consolidate();
    public virtual CompositeByteBuffer Consolidate(int cIndex, int numComponents);
    public virtual CompositeByteBuffer DiscardReadComponents();
    public virtual IByteBuffer DiscardReadBytes();
    private IByteBuffer AllocateBuffer(int capacity);
    public virtual string ToString();
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual IByteBuffer DiscardSomeReadBytes();
    protected internal virtual void Deallocate();
    public virtual IByteBuffer Unwrap();
}
public class DotNetty.Buffers.DefaultByteBufferHolder : object {
    private IByteBuffer data;
    public IByteBuffer Content { get; }
    public int ReferenceCount { get; }
    public DefaultByteBufferHolder(IByteBuffer data);
    public sealed virtual IByteBuffer get_Content();
    public sealed virtual IByteBufferHolder Copy();
    public sealed virtual IByteBufferHolder Duplicate();
    public sealed virtual IByteBufferHolder RetainedDuplicate();
    public virtual IByteBufferHolder Replace(IByteBuffer content);
    public virtual int get_ReferenceCount();
    public sealed virtual IReferenceCounted Retain();
    public sealed virtual IReferenceCounted Retain(int increment);
    public sealed virtual IReferenceCounted Touch();
    public sealed virtual IReferenceCounted Touch(object hint);
    public sealed virtual bool Release();
    public sealed virtual bool Release(int decrement);
    protected string ContentToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class DotNetty.Buffers.DirectArena : PoolArena`1<Byte[]> {
    private List`1<MemoryChunk> memoryChunks;
    internal bool IsDirect { get; }
    public DirectArena(PooledByteBufferAllocator parent, int pageSize, int maxOrder, int pageShifts, int chunkSize);
    private static MemoryChunk NewMemoryChunk(int size);
    internal virtual bool get_IsDirect();
    protected virtual PoolChunk`1<Byte[]> NewChunk(int pageSize, int maxOrder, int pageShifts, int chunkSize);
    protected virtual PoolChunk`1<Byte[]> NewUnpooledChunk(int capacity);
    protected virtual PooledByteBuffer`1<Byte[]> NewByteBuf(int maxCapacity);
    protected virtual void MemoryCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int length);
    protected internal virtual void DestroyChunk(PoolChunk`1<Byte[]> chunk);
}
public class DotNetty.Buffers.EmptyByteBuffer : object {
    private static ArraySegment`1<byte> EmptyBuffer;
    private static ArraySegment`1[] EmptyBuffers;
    [CompilerGeneratedAttribute]
private IByteBufferAllocator <Allocator>k__BackingField;
    public int Capacity { get; }
    public int MaxCapacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public int ReaderIndex { get; }
    public int WriterIndex { get; }
    public int ReadableBytes { get; }
    public int WritableBytes { get; }
    public int MaxWritableBytes { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public int ReferenceCount { get; }
    public EmptyByteBuffer(IByteBufferAllocator allocator);
    private static EmptyByteBuffer();
    public sealed virtual int get_Capacity();
    public sealed virtual IByteBuffer AdjustCapacity(int newCapacity);
    public sealed virtual int get_MaxCapacity();
    [CompilerGeneratedAttribute]
public sealed virtual IByteBufferAllocator get_Allocator();
    public sealed virtual IByteBuffer Unwrap();
    public sealed virtual bool get_IsDirect();
    public sealed virtual int get_ReaderIndex();
    public sealed virtual IByteBuffer SetReaderIndex(int readerIndex);
    public sealed virtual int get_WriterIndex();
    public sealed virtual IByteBuffer SetWriterIndex(int writerIndex);
    public sealed virtual IByteBuffer SetIndex(int readerIndex, int writerIndex);
    public sealed virtual int get_ReadableBytes();
    public sealed virtual int get_WritableBytes();
    public sealed virtual int get_MaxWritableBytes();
    public sealed virtual bool IsWritable();
    public sealed virtual bool IsWritable(int size);
    public sealed virtual IByteBuffer Clear();
    public sealed virtual IByteBuffer MarkReaderIndex();
    public sealed virtual IByteBuffer ResetReaderIndex();
    public sealed virtual IByteBuffer MarkWriterIndex();
    public sealed virtual IByteBuffer ResetWriterIndex();
    public sealed virtual IByteBuffer DiscardReadBytes();
    public sealed virtual IByteBuffer DiscardSomeReadBytes();
    public sealed virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public sealed virtual int EnsureWritable(int minWritableBytes, bool force);
    public sealed virtual bool GetBoolean(int index);
    public sealed virtual byte GetByte(int index);
    public sealed virtual short GetShort(int index);
    public sealed virtual short GetShortLE(int index);
    public sealed virtual ushort GetUnsignedShort(int index);
    public sealed virtual ushort GetUnsignedShortLE(int index);
    public sealed virtual int GetMedium(int index);
    public sealed virtual int GetMediumLE(int index);
    public sealed virtual int GetUnsignedMedium(int index);
    public sealed virtual int GetUnsignedMediumLE(int index);
    public sealed virtual int GetInt(int index);
    public sealed virtual int GetIntLE(int index);
    public sealed virtual UInt32 GetUnsignedInt(int index);
    public sealed virtual UInt32 GetUnsignedIntLE(int index);
    public sealed virtual long GetLong(int index);
    public sealed virtual long GetLongLE(int index);
    public sealed virtual char GetChar(int index);
    public sealed virtual float GetFloat(int index);
    public sealed virtual float GetFloatLE(int index);
    public sealed virtual double GetDouble(int index);
    public sealed virtual double GetDoubleLE(int index);
    public sealed virtual IByteBuffer GetBytes(int index, IByteBuffer destination);
    public sealed virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int length);
    public sealed virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int dstIndex, int length);
    public sealed virtual IByteBuffer GetBytes(int index, Byte[] destination);
    public sealed virtual IByteBuffer GetBytes(int index, Byte[] destination, int dstIndex, int length);
    public sealed virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public sealed virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public sealed virtual string GetString(int index, int length, Encoding encoding);
    public sealed virtual IByteBuffer SetBoolean(int index, bool value);
    public sealed virtual IByteBuffer SetByte(int index, int value);
    public sealed virtual IByteBuffer SetShort(int index, int value);
    public sealed virtual IByteBuffer SetShortLE(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedShort(int index, ushort value);
    public sealed virtual IByteBuffer SetUnsignedShortLE(int index, ushort value);
    public sealed virtual IByteBuffer SetMedium(int index, int value);
    public sealed virtual IByteBuffer SetMediumLE(int index, int value);
    public sealed virtual IByteBuffer SetInt(int index, int value);
    public sealed virtual IByteBuffer SetIntLE(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedInt(int index, UInt32 value);
    public sealed virtual IByteBuffer SetUnsignedIntLE(int index, UInt32 value);
    public sealed virtual IByteBuffer SetLong(int index, long value);
    public sealed virtual IByteBuffer SetLongLE(int index, long value);
    public sealed virtual IByteBuffer SetChar(int index, char value);
    public sealed virtual IByteBuffer SetFloat(int index, float value);
    public sealed virtual IByteBuffer SetFloatLE(int index, float value);
    public sealed virtual IByteBuffer SetDouble(int index, double value);
    public sealed virtual IByteBuffer SetDoubleLE(int index, double value);
    public sealed virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public sealed virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public sealed virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public sealed virtual IByteBuffer SetBytes(int index, Byte[] src);
    public sealed virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public sealed virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public sealed virtual IByteBuffer SetZero(int index, int length);
    public sealed virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    public sealed virtual int SetString(int index, string value, Encoding encoding);
    public sealed virtual bool ReadBoolean();
    public sealed virtual byte ReadByte();
    public sealed virtual short ReadShort();
    public sealed virtual short ReadShortLE();
    public sealed virtual ushort ReadUnsignedShort();
    public sealed virtual ushort ReadUnsignedShortLE();
    public sealed virtual int ReadMedium();
    public sealed virtual int ReadMediumLE();
    public sealed virtual int ReadUnsignedMedium();
    public sealed virtual int ReadUnsignedMediumLE();
    public sealed virtual int ReadInt();
    public sealed virtual int ReadIntLE();
    public sealed virtual UInt32 ReadUnsignedInt();
    public sealed virtual UInt32 ReadUnsignedIntLE();
    public sealed virtual long ReadLong();
    public sealed virtual long ReadLongLE();
    public sealed virtual char ReadChar();
    public sealed virtual float ReadFloat();
    public sealed virtual float ReadFloatLE();
    public sealed virtual double ReadDouble();
    public sealed virtual double ReadDoubleLE();
    public sealed virtual IByteBuffer ReadBytes(int length);
    public sealed virtual IByteBuffer ReadBytes(IByteBuffer destination);
    public sealed virtual IByteBuffer ReadBytes(IByteBuffer destination, int length);
    public sealed virtual IByteBuffer ReadBytes(IByteBuffer destination, int dstIndex, int length);
    public sealed virtual IByteBuffer ReadBytes(Byte[] destination);
    public sealed virtual IByteBuffer ReadBytes(Byte[] destination, int dstIndex, int length);
    public sealed virtual IByteBuffer ReadBytes(Stream destination, int length);
    public sealed virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public sealed virtual string ReadString(int length, Encoding encoding);
    public sealed virtual IByteBuffer SkipBytes(int length);
    public sealed virtual IByteBuffer WriteBoolean(bool value);
    public sealed virtual IByteBuffer WriteByte(int value);
    public sealed virtual IByteBuffer WriteShort(int value);
    public sealed virtual IByteBuffer WriteShortLE(int value);
    public sealed virtual IByteBuffer WriteUnsignedShort(ushort value);
    public sealed virtual IByteBuffer WriteUnsignedShortLE(ushort value);
    public sealed virtual IByteBuffer WriteMedium(int value);
    public sealed virtual IByteBuffer WriteMediumLE(int value);
    public IByteBuffer WriteUnsignedMedium(int value);
    public IByteBuffer WriteUnsignedMediumLE(int value);
    public sealed virtual IByteBuffer WriteInt(int value);
    public sealed virtual IByteBuffer WriteIntLE(int value);
    public IByteBuffer WriteUnsignedInt(UInt32 value);
    public IByteBuffer WriteUnsignedIntLE(UInt32 value);
    public sealed virtual IByteBuffer WriteLong(long value);
    public sealed virtual IByteBuffer WriteLongLE(long value);
    public sealed virtual IByteBuffer WriteChar(char value);
    public sealed virtual IByteBuffer WriteFloat(float value);
    public sealed virtual IByteBuffer WriteFloatLE(float value);
    public sealed virtual IByteBuffer WriteDouble(double value);
    public sealed virtual IByteBuffer WriteDoubleLE(double value);
    public sealed virtual IByteBuffer WriteBytes(IByteBuffer src);
    public sealed virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public sealed virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public sealed virtual IByteBuffer WriteBytes(Byte[] src);
    public sealed virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public sealed virtual IByteBuffer WriteZero(int length);
    public sealed virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public sealed virtual int WriteString(string value, Encoding encoding);
    public sealed virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public sealed virtual int BytesBefore(byte value);
    public sealed virtual int BytesBefore(int length, byte value);
    public sealed virtual int BytesBefore(int index, int length, byte value);
    public sealed virtual int ForEachByte(IByteProcessor processor);
    public sealed virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public sealed virtual int ForEachByteDesc(IByteProcessor processor);
    public sealed virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    public sealed virtual IByteBuffer Copy();
    public sealed virtual IByteBuffer Copy(int index, int length);
    public sealed virtual IByteBuffer Slice();
    public sealed virtual IByteBuffer RetainedSlice();
    public sealed virtual IByteBuffer Slice(int index, int length);
    public sealed virtual IByteBuffer RetainedSlice(int index, int length);
    public sealed virtual IByteBuffer Duplicate();
    public sealed virtual int get_IoBufferCount();
    public sealed virtual ArraySegment`1<byte> GetIoBuffer();
    public sealed virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public sealed virtual ArraySegment`1[] GetIoBuffers();
    public sealed virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public sealed virtual bool get_HasArray();
    public sealed virtual Byte[] get_Array();
    public Byte[] ToArray();
    public sealed virtual int get_ArrayOffset();
    public sealed virtual bool get_HasMemoryAddress();
    public sealed virtual Byte& GetPinnableMemoryAddress();
    public sealed virtual IntPtr AddressOfPinnedMemory();
    public sealed virtual string ToString(Encoding encoding);
    public sealed virtual string ToString(int index, int length, Encoding encoding);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(IByteBuffer buffer);
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(IByteBuffer buffer);
    public virtual string ToString();
    public sealed virtual bool IsReadable();
    public sealed virtual bool IsReadable(int size);
    public sealed virtual int get_ReferenceCount();
    public sealed virtual IReferenceCounted Retain();
    public sealed virtual IByteBuffer RetainedDuplicate();
    public sealed virtual IReferenceCounted Retain(int increment);
    public sealed virtual IReferenceCounted Touch();
    public sealed virtual IReferenceCounted Touch(object hint);
    public sealed virtual bool Release();
    public sealed virtual bool Release(int decrement);
    public sealed virtual IByteBuffer ReadSlice(int length);
    public sealed virtual IByteBuffer ReadRetainedSlice(int length);
    public sealed virtual Task WriteBytesAsync(Stream stream, int length);
    public sealed virtual Task WriteBytesAsync(Stream stream, int length, CancellationToken cancellationToken);
    private IByteBuffer CheckIndex(int index);
    private IByteBuffer CheckIndex(int index, int length);
    private IByteBuffer CheckLength(int length);
}
internal class DotNetty.Buffers.HeapArena : PoolArena`1<Byte[]> {
    internal bool IsDirect { get; }
    public HeapArena(PooledByteBufferAllocator parent, int pageSize, int maxOrder, int pageShifts, int chunkSize);
    private static Byte[] NewByteArray(int size);
    internal virtual bool get_IsDirect();
    protected virtual PoolChunk`1<Byte[]> NewChunk(int pageSize, int maxOrder, int pageShifts, int chunkSize);
    protected virtual PoolChunk`1<Byte[]> NewUnpooledChunk(int capacity);
    protected internal virtual void DestroyChunk(PoolChunk`1<Byte[]> chunk);
    protected virtual PooledByteBuffer`1<Byte[]> NewByteBuf(int maxCapacity);
    protected virtual void MemoryCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int length);
}
internal static class DotNetty.Buffers.HeapByteBufferUtil : object {
    internal static byte GetByte(Byte[] memory, int index);
    internal static short GetShort(Byte[] memory, int index);
    internal static short GetShortLE(Byte[] memory, int index);
    internal static int GetUnsignedMedium(Byte[] memory, int index);
    internal static int GetUnsignedMediumLE(Byte[] memory, int index);
    internal static int GetInt(Byte[] memory, int index);
    internal static int GetIntLE(Byte[] memory, int index);
    internal static long GetLong(Byte[] memory, int index);
    internal static long GetLongLE(Byte[] memory, int index);
    internal static void SetByte(Byte[] memory, int index, int value);
    internal static void SetShort(Byte[] memory, int index, int value);
    internal static void SetShortLE(Byte[] memory, int index, int value);
    internal static void SetMedium(Byte[] memory, int index, int value);
    internal static void SetMediumLE(Byte[] memory, int index, int value);
    internal static void SetInt(Byte[] memory, int index, int value);
    internal static void SetIntLE(Byte[] memory, int index, int value);
    internal static void SetLong(Byte[] memory, int index, long value);
    internal static void SetLongLE(Byte[] memory, int index, long value);
}
public interface DotNetty.Buffers.IByteBuffer {
    public int Capacity { get; }
    public int MaxCapacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public int ReaderIndex { get; }
    public int WriterIndex { get; }
    public int ReadableBytes { get; }
    public int WritableBytes { get; }
    public int MaxWritableBytes { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public bool HasMemoryAddress { get; }
    public int ArrayOffset { get; }
    public abstract virtual int get_Capacity();
    public abstract virtual IByteBuffer AdjustCapacity(int newCapacity);
    public abstract virtual int get_MaxCapacity();
    public abstract virtual IByteBufferAllocator get_Allocator();
    public abstract virtual bool get_IsDirect();
    public abstract virtual int get_ReaderIndex();
    public abstract virtual int get_WriterIndex();
    public abstract virtual IByteBuffer SetWriterIndex(int writerIndex);
    public abstract virtual IByteBuffer SetReaderIndex(int readerIndex);
    public abstract virtual IByteBuffer SetIndex(int readerIndex, int writerIndex);
    public abstract virtual int get_ReadableBytes();
    public abstract virtual int get_WritableBytes();
    public abstract virtual int get_MaxWritableBytes();
    public abstract virtual bool IsReadable();
    public abstract virtual bool IsReadable(int size);
    public abstract virtual bool IsWritable();
    public abstract virtual bool IsWritable(int size);
    public abstract virtual IByteBuffer Clear();
    public abstract virtual IByteBuffer MarkReaderIndex();
    public abstract virtual IByteBuffer ResetReaderIndex();
    public abstract virtual IByteBuffer MarkWriterIndex();
    public abstract virtual IByteBuffer ResetWriterIndex();
    public abstract virtual IByteBuffer DiscardReadBytes();
    public abstract virtual IByteBuffer DiscardSomeReadBytes();
    public abstract virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public abstract virtual int EnsureWritable(int minWritableBytes, bool force);
    public abstract virtual bool GetBoolean(int index);
    public abstract virtual byte GetByte(int index);
    public abstract virtual short GetShort(int index);
    public abstract virtual short GetShortLE(int index);
    public abstract virtual ushort GetUnsignedShort(int index);
    public abstract virtual ushort GetUnsignedShortLE(int index);
    public abstract virtual int GetInt(int index);
    public abstract virtual int GetIntLE(int index);
    public abstract virtual UInt32 GetUnsignedInt(int index);
    public abstract virtual UInt32 GetUnsignedIntLE(int index);
    public abstract virtual long GetLong(int index);
    public abstract virtual long GetLongLE(int index);
    public abstract virtual int GetMedium(int index);
    public abstract virtual int GetMediumLE(int index);
    public abstract virtual int GetUnsignedMedium(int index);
    public abstract virtual int GetUnsignedMediumLE(int index);
    public abstract virtual char GetChar(int index);
    public abstract virtual float GetFloat(int index);
    public abstract virtual float GetFloatLE(int index);
    public abstract virtual double GetDouble(int index);
    public abstract virtual double GetDoubleLE(int index);
    public abstract virtual IByteBuffer GetBytes(int index, IByteBuffer destination);
    public abstract virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int length);
    public abstract virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int dstIndex, int length);
    public abstract virtual IByteBuffer GetBytes(int index, Byte[] destination);
    public abstract virtual IByteBuffer GetBytes(int index, Byte[] destination, int dstIndex, int length);
    public abstract virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public abstract virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public abstract virtual string GetString(int index, int length, Encoding encoding);
    public abstract virtual IByteBuffer SetBoolean(int index, bool value);
    public abstract virtual IByteBuffer SetByte(int index, int value);
    public abstract virtual IByteBuffer SetShort(int index, int value);
    public abstract virtual IByteBuffer SetShortLE(int index, int value);
    public abstract virtual IByteBuffer SetUnsignedShort(int index, ushort value);
    public abstract virtual IByteBuffer SetUnsignedShortLE(int index, ushort value);
    public abstract virtual IByteBuffer SetInt(int index, int value);
    public abstract virtual IByteBuffer SetIntLE(int index, int value);
    public abstract virtual IByteBuffer SetUnsignedInt(int index, UInt32 value);
    public abstract virtual IByteBuffer SetUnsignedIntLE(int index, UInt32 value);
    public abstract virtual IByteBuffer SetMedium(int index, int value);
    public abstract virtual IByteBuffer SetMediumLE(int index, int value);
    public abstract virtual IByteBuffer SetLong(int index, long value);
    public abstract virtual IByteBuffer SetLongLE(int index, long value);
    public abstract virtual IByteBuffer SetChar(int index, char value);
    public abstract virtual IByteBuffer SetDouble(int index, double value);
    public abstract virtual IByteBuffer SetFloat(int index, float value);
    public abstract virtual IByteBuffer SetDoubleLE(int index, double value);
    public abstract virtual IByteBuffer SetFloatLE(int index, float value);
    public abstract virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public abstract virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public abstract virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public abstract virtual IByteBuffer SetBytes(int index, Byte[] src);
    public abstract virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public abstract virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public abstract virtual IByteBuffer SetZero(int index, int length);
    public abstract virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    public abstract virtual int SetString(int index, string value, Encoding encoding);
    public abstract virtual bool ReadBoolean();
    public abstract virtual byte ReadByte();
    public abstract virtual short ReadShort();
    public abstract virtual short ReadShortLE();
    public abstract virtual int ReadMedium();
    public abstract virtual int ReadMediumLE();
    public abstract virtual int ReadUnsignedMedium();
    public abstract virtual int ReadUnsignedMediumLE();
    public abstract virtual ushort ReadUnsignedShort();
    public abstract virtual ushort ReadUnsignedShortLE();
    public abstract virtual int ReadInt();
    public abstract virtual int ReadIntLE();
    public abstract virtual UInt32 ReadUnsignedInt();
    public abstract virtual UInt32 ReadUnsignedIntLE();
    public abstract virtual long ReadLong();
    public abstract virtual long ReadLongLE();
    public abstract virtual char ReadChar();
    public abstract virtual double ReadDouble();
    public abstract virtual double ReadDoubleLE();
    public abstract virtual float ReadFloat();
    public abstract virtual float ReadFloatLE();
    public abstract virtual IByteBuffer ReadBytes(int length);
    public abstract virtual IByteBuffer ReadBytes(IByteBuffer destination);
    public abstract virtual IByteBuffer ReadBytes(IByteBuffer destination, int length);
    public abstract virtual IByteBuffer ReadBytes(IByteBuffer destination, int dstIndex, int length);
    public abstract virtual IByteBuffer ReadBytes(Byte[] destination);
    public abstract virtual IByteBuffer ReadBytes(Byte[] destination, int dstIndex, int length);
    public abstract virtual IByteBuffer ReadBytes(Stream destination, int length);
    public abstract virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public abstract virtual string ReadString(int length, Encoding encoding);
    public abstract virtual IByteBuffer SkipBytes(int length);
    public abstract virtual IByteBuffer WriteBoolean(bool value);
    public abstract virtual IByteBuffer WriteByte(int value);
    public abstract virtual IByteBuffer WriteShort(int value);
    public abstract virtual IByteBuffer WriteShortLE(int value);
    public abstract virtual IByteBuffer WriteUnsignedShort(ushort value);
    public abstract virtual IByteBuffer WriteUnsignedShortLE(ushort value);
    public abstract virtual IByteBuffer WriteMedium(int value);
    public abstract virtual IByteBuffer WriteMediumLE(int value);
    public abstract virtual IByteBuffer WriteInt(int value);
    public abstract virtual IByteBuffer WriteIntLE(int value);
    public abstract virtual IByteBuffer WriteLong(long value);
    public abstract virtual IByteBuffer WriteLongLE(long value);
    public abstract virtual IByteBuffer WriteChar(char value);
    public abstract virtual IByteBuffer WriteDouble(double value);
    public abstract virtual IByteBuffer WriteDoubleLE(double value);
    public abstract virtual IByteBuffer WriteFloat(float value);
    public abstract virtual IByteBuffer WriteFloatLE(float value);
    public abstract virtual IByteBuffer WriteBytes(IByteBuffer src);
    public abstract virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public abstract virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public abstract virtual IByteBuffer WriteBytes(Byte[] src);
    public abstract virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public abstract virtual int get_IoBufferCount();
    public abstract virtual ArraySegment`1<byte> GetIoBuffer();
    public abstract virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public abstract virtual ArraySegment`1[] GetIoBuffers();
    public abstract virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public abstract virtual bool get_HasArray();
    public abstract virtual Byte[] get_Array();
    public abstract virtual bool get_HasMemoryAddress();
    public abstract virtual Byte& GetPinnableMemoryAddress();
    public abstract virtual IntPtr AddressOfPinnedMemory();
    public abstract virtual IByteBuffer Duplicate();
    public abstract virtual IByteBuffer RetainedDuplicate();
    public abstract virtual IByteBuffer Unwrap();
    public abstract virtual IByteBuffer Copy();
    public abstract virtual IByteBuffer Copy(int index, int length);
    public abstract virtual IByteBuffer Slice();
    public abstract virtual IByteBuffer RetainedSlice();
    public abstract virtual IByteBuffer Slice(int index, int length);
    public abstract virtual IByteBuffer RetainedSlice(int index, int length);
    public abstract virtual int get_ArrayOffset();
    public abstract virtual IByteBuffer ReadSlice(int length);
    public abstract virtual IByteBuffer ReadRetainedSlice(int length);
    public abstract virtual Task WriteBytesAsync(Stream stream, int length);
    public abstract virtual Task WriteBytesAsync(Stream stream, int length, CancellationToken cancellationToken);
    public abstract virtual IByteBuffer WriteZero(int length);
    public abstract virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public abstract virtual int WriteString(string value, Encoding encoding);
    public abstract virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public abstract virtual int BytesBefore(byte value);
    public abstract virtual int BytesBefore(int length, byte value);
    public abstract virtual int BytesBefore(int index, int length, byte value);
    public abstract virtual string ToString();
    public abstract virtual string ToString(Encoding encoding);
    public abstract virtual string ToString(int index, int length, Encoding encoding);
    public abstract virtual int ForEachByte(IByteProcessor processor);
    public abstract virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public abstract virtual int ForEachByteDesc(IByteProcessor processor);
    public abstract virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
}
public interface DotNetty.Buffers.IByteBufferAllocator {
    public bool IsDirectBufferPooled { get; }
    public abstract virtual IByteBuffer Buffer();
    public abstract virtual IByteBuffer Buffer(int initialCapacity);
    public abstract virtual IByteBuffer Buffer(int initialCapacity, int maxCapacity);
    public abstract virtual IByteBuffer HeapBuffer();
    public abstract virtual IByteBuffer HeapBuffer(int initialCapacity);
    public abstract virtual IByteBuffer HeapBuffer(int initialCapacity, int maxCapacity);
    public abstract virtual IByteBuffer DirectBuffer();
    public abstract virtual IByteBuffer DirectBuffer(int initialCapacity);
    public abstract virtual IByteBuffer DirectBuffer(int initialCapacity, int maxCapacity);
    public abstract virtual CompositeByteBuffer CompositeBuffer();
    public abstract virtual CompositeByteBuffer CompositeBuffer(int maxComponents);
    public abstract virtual CompositeByteBuffer CompositeHeapBuffer();
    public abstract virtual CompositeByteBuffer CompositeHeapBuffer(int maxComponents);
    public abstract virtual CompositeByteBuffer CompositeDirectBuffer();
    public abstract virtual CompositeByteBuffer CompositeDirectBuffer(int maxComponents);
    public abstract virtual bool get_IsDirectBufferPooled();
    public abstract virtual int CalculateNewCapacity(int minNewCapacity, int maxCapacity);
}
public interface DotNetty.Buffers.IByteBufferAllocatorMetric {
    public long UsedHeapMemory { get; }
    public long UsedDirectMemory { get; }
    public abstract virtual long get_UsedHeapMemory();
    public abstract virtual long get_UsedDirectMemory();
}
public interface DotNetty.Buffers.IByteBufferAllocatorMetricProvider {
    public IByteBufferAllocatorMetric Metric { get; }
    public abstract virtual IByteBufferAllocatorMetric get_Metric();
}
public interface DotNetty.Buffers.IByteBufferHolder {
    public IByteBuffer Content { get; }
    public abstract virtual IByteBuffer get_Content();
    public abstract virtual IByteBufferHolder Copy();
    public abstract virtual IByteBufferHolder Duplicate();
    public abstract virtual IByteBufferHolder RetainedDuplicate();
    public abstract virtual IByteBufferHolder Replace(IByteBuffer content);
}
public interface DotNetty.Buffers.IPoolArenaMetric {
    public int NumThreadCaches { get; }
    public int NumTinySubpages { get; }
    public int NumSmallSubpages { get; }
    public int NumChunkLists { get; }
    public IReadOnlyList`1<IPoolSubpageMetric> TinySubpages { get; }
    public IReadOnlyList`1<IPoolSubpageMetric> SmallSubpages { get; }
    public IReadOnlyList`1<IPoolChunkListMetric> ChunkLists { get; }
    public long NumAllocations { get; }
    public long NumTinyAllocations { get; }
    public long NumSmallAllocations { get; }
    public long NumNormalAllocations { get; }
    public long NumHugeAllocations { get; }
    public long NumDeallocations { get; }
    public long NumTinyDeallocations { get; }
    public long NumSmallDeallocations { get; }
    public long NumNormalDeallocations { get; }
    public long NumHugeDeallocations { get; }
    public long NumActiveAllocations { get; }
    public long NumActiveTinyAllocations { get; }
    public long NumActiveSmallAllocations { get; }
    public long NumActiveNormalAllocations { get; }
    public long NumActiveHugeAllocations { get; }
    public long NumActiveBytes { get; }
    public abstract virtual int get_NumThreadCaches();
    public abstract virtual int get_NumTinySubpages();
    public abstract virtual int get_NumSmallSubpages();
    public abstract virtual int get_NumChunkLists();
    public abstract virtual IReadOnlyList`1<IPoolSubpageMetric> get_TinySubpages();
    public abstract virtual IReadOnlyList`1<IPoolSubpageMetric> get_SmallSubpages();
    public abstract virtual IReadOnlyList`1<IPoolChunkListMetric> get_ChunkLists();
    public abstract virtual long get_NumAllocations();
    public abstract virtual long get_NumTinyAllocations();
    public abstract virtual long get_NumSmallAllocations();
    public abstract virtual long get_NumNormalAllocations();
    public abstract virtual long get_NumHugeAllocations();
    public abstract virtual long get_NumDeallocations();
    public abstract virtual long get_NumTinyDeallocations();
    public abstract virtual long get_NumSmallDeallocations();
    public abstract virtual long get_NumNormalDeallocations();
    public abstract virtual long get_NumHugeDeallocations();
    public abstract virtual long get_NumActiveAllocations();
    public abstract virtual long get_NumActiveTinyAllocations();
    public abstract virtual long get_NumActiveSmallAllocations();
    public abstract virtual long get_NumActiveNormalAllocations();
    public abstract virtual long get_NumActiveHugeAllocations();
    public abstract virtual long get_NumActiveBytes();
}
public interface DotNetty.Buffers.IPoolChunkListMetric {
    public int MinUsage { get; }
    public int MaxUsage { get; }
    public abstract virtual int get_MinUsage();
    public abstract virtual int get_MaxUsage();
}
public interface DotNetty.Buffers.IPoolChunkMetric {
    public int Usage { get; }
    public int ChunkSize { get; }
    public int FreeBytes { get; }
    public abstract virtual int get_Usage();
    public abstract virtual int get_ChunkSize();
    public abstract virtual int get_FreeBytes();
}
public interface DotNetty.Buffers.IPoolSubpageMetric {
    public int MaxNumElements { get; }
    public int NumAvailable { get; }
    public int ElementSize { get; }
    public int PageSize { get; }
    public abstract virtual int get_MaxNumElements();
    public abstract virtual int get_NumAvailable();
    public abstract virtual int get_ElementSize();
    public abstract virtual int get_PageSize();
}
internal abstract class DotNetty.Buffers.PoolArena`1 : object {
    internal static int NumTinySubpagePools;
    internal PooledByteBufferAllocator Parent;
    private int maxOrder;
    internal int PageSize;
    internal int PageShifts;
    internal int ChunkSize;
    internal int SubpageOverflowMask;
    internal int NumSmallSubpagePools;
    private PoolSubpage`1[] tinySubpagePools;
    private PoolSubpage`1[] smallSubpagePools;
    private PoolChunkList`1<T> q050;
    private PoolChunkList`1<T> q025;
    private PoolChunkList`1<T> q000;
    private PoolChunkList`1<T> qInit;
    private PoolChunkList`1<T> q075;
    private PoolChunkList`1<T> q100;
    private IReadOnlyList`1<IPoolChunkListMetric> chunkListMetrics;
    private long allocationsNormal;
    private long allocationsTiny;
    private long allocationsSmall;
    private long allocationsHuge;
    private long activeBytesHuge;
    private long deallocationsTiny;
    private long deallocationsSmall;
    private long deallocationsNormal;
    private long deallocationsHuge;
    private int numThreadCaches;
    internal bool IsDirect { get; }
    public int NumThreadCaches { get; }
    public int NumTinySubpages { get; }
    public int NumSmallSubpages { get; }
    public int NumChunkLists { get; }
    public IReadOnlyList`1<IPoolSubpageMetric> TinySubpages { get; }
    public IReadOnlyList`1<IPoolSubpageMetric> SmallSubpages { get; }
    public IReadOnlyList`1<IPoolChunkListMetric> ChunkLists { get; }
    public long NumAllocations { get; }
    public long NumTinyAllocations { get; }
    public long NumSmallAllocations { get; }
    public long NumNormalAllocations { get; }
    public long NumDeallocations { get; }
    public long NumTinyDeallocations { get; }
    public long NumSmallDeallocations { get; }
    public long NumNormalDeallocations { get; }
    public long NumHugeAllocations { get; }
    public long NumHugeDeallocations { get; }
    public long NumActiveAllocations { get; }
    public long NumActiveTinyAllocations { get; }
    public long NumActiveSmallAllocations { get; }
    public long NumActiveNormalAllocations { get; }
    public long NumActiveHugeAllocations { get; }
    public long NumActiveBytes { get; }
    protected PoolArena`1(PooledByteBufferAllocator parent, int pageSize, int maxOrder, int pageShifts, int chunkSize);
    private PoolSubpage`1<T> NewSubpagePoolHead(int pageSize);
    private PoolSubpage`1[] NewSubpagePoolArray(int size);
    internal abstract virtual bool get_IsDirect();
    internal PooledByteBuffer`1<T> Allocate(PoolThreadCache`1<T> cache, int reqCapacity, int maxCapacity);
    internal static int TinyIdx(int normCapacity);
    internal static int SmallIdx(int normCapacity);
    internal bool IsTinyOrSmall(int normCapacity);
    internal static bool IsTiny(int normCapacity);
    private void Allocate(PoolThreadCache`1<T> cache, PooledByteBuffer`1<T> buf, int reqCapacity);
    private void AllocateNormal(PooledByteBuffer`1<T> buf, int reqCapacity, int normCapacity);
    private void IncTinySmallAllocation(bool tiny);
    private void AllocateHuge(PooledByteBuffer`1<T> buf, int reqCapacity);
    internal void Free(PoolChunk`1<T> chunk, long handle, int normCapacity, PoolThreadCache`1<T> cache);
    private SizeClass SizeClass(int normCapacity);
    internal void FreeChunk(PoolChunk`1<T> chunk, long handle, SizeClass sizeClass);
    internal PoolSubpage`1<T> FindSubpagePoolHead(int elemSize);
    internal int NormalizeCapacity(int reqCapacity);
    internal void Reallocate(PooledByteBuffer`1<T> buf, int newCapacity, bool freeOldMemory);
    internal void IncrementNumThreadCaches();
    internal void DecrementNumThreadCaches();
    public sealed virtual int get_NumThreadCaches();
    public sealed virtual int get_NumTinySubpages();
    public sealed virtual int get_NumSmallSubpages();
    public sealed virtual int get_NumChunkLists();
    public sealed virtual IReadOnlyList`1<IPoolSubpageMetric> get_TinySubpages();
    public sealed virtual IReadOnlyList`1<IPoolSubpageMetric> get_SmallSubpages();
    public sealed virtual IReadOnlyList`1<IPoolChunkListMetric> get_ChunkLists();
    private static List`1<IPoolSubpageMetric> SubPageMetricList(PoolSubpage`1[] pages);
    public sealed virtual long get_NumAllocations();
    public sealed virtual long get_NumTinyAllocations();
    public sealed virtual long get_NumSmallAllocations();
    public sealed virtual long get_NumNormalAllocations();
    public sealed virtual long get_NumDeallocations();
    public sealed virtual long get_NumTinyDeallocations();
    public sealed virtual long get_NumSmallDeallocations();
    public sealed virtual long get_NumNormalDeallocations();
    public sealed virtual long get_NumHugeAllocations();
    public sealed virtual long get_NumHugeDeallocations();
    public sealed virtual long get_NumActiveAllocations();
    public sealed virtual long get_NumActiveTinyAllocations();
    public sealed virtual long get_NumActiveSmallAllocations();
    public sealed virtual long get_NumActiveNormalAllocations();
    public sealed virtual long get_NumActiveHugeAllocations();
    public sealed virtual long get_NumActiveBytes();
    protected abstract virtual PoolChunk`1<T> NewChunk(int pageSize, int maxOrder, int pageShifts, int chunkSize);
    protected abstract virtual PoolChunk`1<T> NewUnpooledChunk(int capacity);
    protected abstract virtual PooledByteBuffer`1<T> NewByteBuf(int maxCapacity);
    protected abstract virtual void MemoryCopy(T src, int srcOffset, T dst, int dstOffset, int length);
    protected internal abstract virtual void DestroyChunk(PoolChunk`1<T> chunk);
    public virtual string ToString();
    private static void AppendPoolSubPages(StringBuilder buf, PoolSubpage`1[] subpages);
    protected virtual override void Finalize();
    private static void DestroyPoolSubPages(PoolSubpage`1[] pages);
    private void DestroyPoolChunkLists(PoolChunkList`1[] chunkLists);
}
internal class DotNetty.Buffers.PoolChunk`1 : object {
    private static int IntegerSizeMinusOne;
    internal PoolArena`1<T> Arena;
    internal T Memory;
    internal bool Unpooled;
    internal int Offset;
    private SByte[] memoryMap;
    private SByte[] depthMap;
    private PoolSubpage`1[] subpages;
    private int subpageOverflowMask;
    private int pageSize;
    private int pageShifts;
    private int maxOrder;
    private int chunkSize;
    private int log2ChunkSize;
    private int maxSubpageAllocs;
    private sbyte unusable;
    private int freeBytes;
    internal PoolChunkList`1<T> Parent;
    internal PoolChunk`1<T> Prev;
    internal PoolChunk`1<T> Next;
    public int Usage { get; }
    public int ChunkSize { get; }
    public int FreeBytes { get; }
    internal PoolChunk`1(PoolArena`1<T> arena, T memory, int pageSize, int maxOrder, int pageShifts, int chunkSize, int offset);
    internal PoolChunk`1(PoolArena`1<T> arena, T memory, int size, int offset);
    private PoolSubpage`1[] NewSubpageArray(int size);
    public sealed virtual int get_Usage();
    private int GetUsage(int bytes);
    internal long Allocate(int normCapacity);
    private void UpdateParentsAlloc(int id);
    private void UpdateParentsFree(int id);
    private int AllocateNode(int d);
    private long AllocateRun(int normCapacity);
    private long AllocateSubpage(int normCapacity);
    internal void Free(long handle);
    internal void InitBuf(PooledByteBuffer`1<T> buf, long handle, int reqCapacity);
    internal void InitBufWithSubpage(PooledByteBuffer`1<T> buf, long handle, int reqCapacity);
    private void InitBufWithSubpage(PooledByteBuffer`1<T> buf, long handle, int bitmapIdx, int reqCapacity);
    private sbyte Value(int id);
    private void SetValue(int id, sbyte val);
    private sbyte Depth(int id);
    private static int Log2(int val);
    private int RunLength(int id);
    private int RunOffset(int id);
    private int SubpageIdx(int memoryMapIdx);
    private static int MemoryMapIdx(long handle);
    private static int BitmapIdx(long handle);
    public sealed virtual int get_ChunkSize();
    public sealed virtual int get_FreeBytes();
    public virtual string ToString();
    internal void Destroy();
}
internal class DotNetty.Buffers.PoolChunkList`1 : object {
    private PoolArena`1<T> arena;
    private PoolChunkList`1<T> nextList;
    private int minUsage;
    private int maxUsage;
    private int maxCapacity;
    private PoolChunk`1<T> head;
    private PoolChunkList`1<T> prevList;
    public int MinUsage { get; }
    public int MaxUsage { get; }
    public PoolChunkList`1(PoolArena`1<T> arena, PoolChunkList`1<T> nextList, int minUsage, int maxUsage, int chunkSize);
    private static int CalculateMaxCapacity(int minUsage, int chunkSize);
    internal void PrevList(PoolChunkList`1<T> list);
    internal bool Allocate(PooledByteBuffer`1<T> buf, int reqCapacity, int normCapacity);
    internal bool Free(PoolChunk`1<T> chunk, long handle);
    private bool Move(PoolChunk`1<T> chunk);
    private bool Move0(PoolChunk`1<T> chunk);
    internal void Add(PoolChunk`1<T> chunk);
    private void Add0(PoolChunk`1<T> chunk);
    private void Remove(PoolChunk`1<T> cur);
    public sealed virtual int get_MinUsage();
    public sealed virtual int get_MaxUsage();
    private static int MinUsage0(int value);
    public sealed virtual IEnumerator`1<IPoolChunkMetric> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("DotNetty.Buffers.PoolChunkList`1/<GetEnumeratorInternal>d__24")]
private IEnumerator`1<IPoolChunkMetric> GetEnumeratorInternal();
    public virtual string ToString();
    internal void Destroy(PoolArena`1<T> poolArena);
}
internal abstract class DotNetty.Buffers.PooledByteBuffer`1 : AbstractReferenceCountedByteBuffer {
    protected internal PoolChunk`1<T> Chunk;
    protected internal long Handle;
    protected internal T Memory;
    protected internal int Offset;
    protected internal int Length;
    internal int MaxLength;
    internal PoolThreadCache`1<T> Cache;
    private PooledByteBufferAllocator allocator;
    public int Capacity { get; }
    public IByteBufferAllocator Allocator { get; }
    protected PooledByteBuffer`1(int maxCapacity);
    internal virtual void Init(PoolChunk`1<T> chunk, long handle, int offset, int length, int maxLength, PoolThreadCache`1<T> cache);
    internal virtual void InitUnpooled(PoolChunk`1<T> chunk, int length);
    private void Init0(PoolChunk`1<T> chunk, long handle, int offset, int length, int maxLength, PoolThreadCache`1<T> cache);
    public virtual int get_Capacity();
    public sealed virtual IByteBuffer AdjustCapacity(int newCapacity);
    public sealed virtual IByteBufferAllocator get_Allocator();
    public sealed virtual IByteBuffer Unwrap();
    public sealed virtual IByteBuffer RetainedDuplicate();
    public sealed virtual IByteBuffer RetainedSlice();
    public sealed virtual IByteBuffer RetainedSlice(int index, int length);
    protected internal sealed virtual void Deallocate();
    protected int Idx(int index);
}
public class DotNetty.Buffers.PooledByteBufferAllocator : AbstractByteBufferAllocator {
    private static IInternalLogger Logger;
    public static int DefaultNumHeapArena;
    public static int DefaultNumDirectArena;
    public static int DefaultPageSize;
    public static int DefaultMaxOrder;
    public static int DefaultTinyCacheSize;
    public static int DefaultSmallCacheSize;
    public static int DefaultNormalCacheSize;
    private static int DefaultMaxCachedBufferCapacity;
    private static int DefaultCacheTrimInterval;
    private static int MinPageSize;
    private static int MaxChunkSize;
    public static PooledByteBufferAllocator Default;
    private PoolArena`1[] heapArenas;
    private PoolArena`1[] directArenas;
    private int tinyCacheSize;
    private int smallCacheSize;
    private int normalCacheSize;
    private IReadOnlyList`1<IPoolArenaMetric> heapArenaMetrics;
    private IReadOnlyList`1<IPoolArenaMetric> directArenaMetrics;
    private PoolThreadLocalCache threadCache;
    private int chunkSize;
    private PooledByteBufferAllocatorMetric metric;
    public static bool DefaultPreferDirect { get; }
    public bool IsDirectBufferPooled { get; }
    internal int TinyCacheSize { get; }
    internal int SmallCacheSize { get; }
    internal int NormalCacheSize { get; }
    internal int ChunkSize { get; }
    public PooledByteBufferAllocatorMetric Metric { get; }
    private IByteBufferAllocatorMetric DotNetty.Buffers.IByteBufferAllocatorMetricProvider.Metric { get; }
    internal long UsedHeapMemory { get; }
    internal long UsedDirectMemory { get; }
    private static PooledByteBufferAllocator();
    public PooledByteBufferAllocator(bool preferDirect);
    public PooledByteBufferAllocator(int nHeapArena, int nDirectArena, int pageSize, int maxOrder);
    public PooledByteBufferAllocator(bool preferDirect, int nHeapArena, int nDirectArena, int pageSize, int maxOrder);
    public PooledByteBufferAllocator(int nHeapArena, int nDirectArena, int pageSize, int maxOrder, int tinyCacheSize, int smallCacheSize, int normalCacheSize);
    public PooledByteBufferAllocator(bool preferDirect, int nHeapArena, int nDirectArena, int pageSize, int maxOrder, int tinyCacheSize, int smallCacheSize, int normalCacheSize);
    private static PoolArena`1[] NewArenaArray(int size);
    private static int ValidateAndCalculatePageShifts(int pageSize);
    private static int ValidateAndCalculateChunkSize(int pageSize, int maxOrder);
    protected virtual IByteBuffer NewHeapBuffer(int initialCapacity, int maxCapacity);
    protected virtual IByteBuffer NewDirectBuffer(int initialCapacity, int maxCapacity);
    public static bool get_DefaultPreferDirect();
    public virtual bool get_IsDirectBufferPooled();
    internal IReadOnlyList`1<IPoolArenaMetric> HeapArenas();
    internal IReadOnlyList`1<IPoolArenaMetric> DirectArenas();
    internal int get_TinyCacheSize();
    internal int get_SmallCacheSize();
    internal int get_NormalCacheSize();
    internal int get_ChunkSize();
    public PooledByteBufferAllocatorMetric get_Metric();
    private sealed virtual override IByteBufferAllocatorMetric DotNetty.Buffers.IByteBufferAllocatorMetricProvider.get_Metric();
    internal long get_UsedHeapMemory();
    internal long get_UsedDirectMemory();
    private static long UsedMemory(PoolArena`1[] arenas);
    internal PoolThreadCache`1<T> ThreadCache();
    public string DumpStats();
}
public class DotNetty.Buffers.PooledByteBufferAllocatorMetric : object {
    private PooledByteBufferAllocator allocator;
    public int TinyCacheSize { get; }
    public int SmallCacheSize { get; }
    public int NormalCacheSize { get; }
    public int ChunkSize { get; }
    public long UsedHeapMemory { get; }
    public long UsedDirectMemory { get; }
    internal PooledByteBufferAllocatorMetric(PooledByteBufferAllocator allocator);
    public IReadOnlyList`1<IPoolArenaMetric> HeapArenas();
    public IReadOnlyList`1<IPoolArenaMetric> DirectArenas();
    public int get_TinyCacheSize();
    public int get_SmallCacheSize();
    public int get_NormalCacheSize();
    public int get_ChunkSize();
    public sealed virtual long get_UsedHeapMemory();
    public sealed virtual long get_UsedDirectMemory();
    public int NumThreadLocalCaches();
    public virtual string ToString();
}
internal class DotNetty.Buffers.PooledDuplicatedByteBuffer : AbstractPooledDerivedByteBuffer {
    private static ThreadLocalPool`1<PooledDuplicatedByteBuffer> Recycler;
    public int Capacity { get; }
    public int ArrayOffset { get; }
    public PooledDuplicatedByteBuffer(Handle recyclerHandle);
    private static PooledDuplicatedByteBuffer();
    internal static PooledDuplicatedByteBuffer NewInstance(AbstractByteBuffer unwrapped, IByteBuffer wrapped, int readerIndex, int writerIndex);
    public virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual int get_ArrayOffset();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer RetainedDuplicate();
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] destination, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
}
internal class DotNetty.Buffers.PooledHeapByteBuffer : PooledByteBuffer`1<Byte[]> {
    public bool IsDirect { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    internal PooledHeapByteBuffer(int maxCapacity);
    internal static PooledHeapByteBuffer NewInstance(int maxCapacity);
    public virtual bool get_IsDirect();
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    [AsyncStateMachineAttribute("DotNetty.Buffers.PooledHeapByteBuffer/<SetBytesAsync>d__26")]
public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
}
internal class DotNetty.Buffers.PooledSlicedByteBuffer : AbstractPooledDerivedByteBuffer {
    private static ThreadLocalPool`1<PooledSlicedByteBuffer> Recycler;
    private int adjustment;
    public int Capacity { get; }
    public int ArrayOffset { get; }
    private PooledSlicedByteBuffer(Handle handle);
    private static PooledSlicedByteBuffer();
    internal static PooledSlicedByteBuffer NewInstance(AbstractByteBuffer unwrapped, IByteBuffer wrapped, int index, int length);
    private static PooledSlicedByteBuffer NewInstance0(AbstractByteBuffer unwrapped, IByteBuffer wrapped, int adjustment, int length);
    public virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual int get_ArrayOffset();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer RetainedDuplicate();
    public virtual byte GetByte(int index);
    protected internal virtual byte _GetByte(int index);
    public virtual short GetShort(int index);
    protected internal virtual short _GetShort(int index);
    public virtual short GetShortLE(int index);
    protected internal virtual short _GetShortLE(int index);
    public virtual int GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    public virtual int GetInt(int index);
    protected internal virtual int _GetInt(int index);
    public virtual int GetIntLE(int index);
    protected internal virtual int _GetIntLE(int index);
    public virtual long GetLong(int index);
    protected internal virtual long _GetLong(int index);
    public virtual long GetLongLE(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer SetByte(int index, int value);
    protected internal virtual void _SetByte(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    public virtual IByteBuffer SetShortLE(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    protected internal virtual void _SetLong(int index, long value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    private int Idx(int index);
}
internal class DotNetty.Buffers.PooledUnsafeDirectByteBuffer : PooledByteBuffer`1<Byte[]> {
    private Byte* memoryAddress;
    public bool IsDirect { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    private PooledUnsafeDirectByteBuffer(int maxCapacity);
    internal static PooledUnsafeDirectByteBuffer NewInstance(int maxCapacity);
    internal virtual void Init(PoolChunk`1<Byte[]> chunk, long handle, int offset, int length, int maxLength, PoolThreadCache`1<Byte[]> cache);
    internal virtual void InitUnpooled(PoolChunk`1<Byte[]> chunk, int length);
    private void InitMemoryAddress();
    public virtual bool get_IsDirect();
    internal void Reuse(int maxCapacity);
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream output, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer Copy(int index, int length);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    private Byte* Addr(int index);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual IByteBuffer WriteZero(int length);
}
internal class DotNetty.Buffers.PoolSubpage`1 : object {
    internal PoolChunk`1<T> Chunk;
    private int memoryMapIdx;
    private int runOffset;
    private int pageSize;
    private Int64[] bitmap;
    internal PoolSubpage`1<T> Prev;
    internal PoolSubpage`1<T> Next;
    internal bool DoNotDestroy;
    internal int ElemSize;
    private int maxNumElems;
    private int bitmapLength;
    private int nextAvail;
    private int numAvail;
    public int MaxNumElements { get; }
    public int NumAvailable { get; }
    public int ElementSize { get; }
    public int PageSize { get; }
    public PoolSubpage`1(int pageSize);
    public PoolSubpage`1(PoolSubpage`1<T> head, PoolChunk`1<T> chunk, int memoryMapIdx, int runOffset, int pageSize, int elemSize);
    public void Init(PoolSubpage`1<T> head, int elemSize);
    internal long Allocate();
    internal bool Free(PoolSubpage`1<T> head, int bitmapIdx);
    private void AddToPool(PoolSubpage`1<T> head);
    private void RemoveFromPool();
    private void SetNextAvail(int bitmapIdx);
    private int GetNextAvail();
    private int FindNextAvail();
    private int FindNextAvail0(int i, long bits);
    private long ToHandle(int bitmapIdx);
    public virtual string ToString();
    public sealed virtual int get_MaxNumElements();
    public sealed virtual int get_NumAvailable();
    public sealed virtual int get_ElementSize();
    public sealed virtual int get_PageSize();
    internal void Destroy();
}
internal class DotNetty.Buffers.PoolThreadCache`1 : object {
    private static IInternalLogger Logger;
    internal PoolArena`1<T> HeapArena;
    internal PoolArena`1<T> DirectArena;
    private MemoryRegionCache[] tinySubPageHeapCaches;
    private MemoryRegionCache[] smallSubPageHeapCaches;
    private MemoryRegionCache[] tinySubPageDirectCaches;
    private MemoryRegionCache[] smallSubPageDirectCaches;
    private MemoryRegionCache[] normalHeapCaches;
    private MemoryRegionCache[] normalDirectCaches;
    private int numShiftsNormalDirect;
    private int numShiftsNormalHeap;
    private int freeSweepAllocationThreshold;
    private int allocations;
    private Thread deathWatchThread;
    private Action freeTask;
    internal PoolThreadCache`1(PoolArena`1<T> heapArena, PoolArena`1<T> directArena, int tinyCacheSize, int smallCacheSize, int normalCacheSize, int maxCachedBufferCapacity, int freeSweepAllocationThreshold);
    private static PoolThreadCache`1();
    private static MemoryRegionCache[] CreateSubPageCaches(int cacheSize, int numCaches, SizeClass sizeClass);
    private static MemoryRegionCache[] CreateNormalCaches(int cacheSize, int maxCachedBufferCapacity, PoolArena`1<T> area);
    private static int Log2(int val);
    internal bool AllocateTiny(PoolArena`1<T> area, PooledByteBuffer`1<T> buf, int reqCapacity, int normCapacity);
    internal bool AllocateSmall(PoolArena`1<T> area, PooledByteBuffer`1<T> buf, int reqCapacity, int normCapacity);
    internal bool AllocateNormal(PoolArena`1<T> area, PooledByteBuffer`1<T> buf, int reqCapacity, int normCapacity);
    private bool Allocate(MemoryRegionCache<T> cache, PooledByteBuffer`1<T> buf, int reqCapacity);
    internal bool Add(PoolArena`1<T> area, PoolChunk`1<T> chunk, long handle, int normCapacity, SizeClass sizeClass);
    private MemoryRegionCache<T> Cache(PoolArena`1<T> area, int normCapacity, SizeClass sizeClass);
    internal void Free();
    private void Free0();
    private static int Free(MemoryRegionCache[] caches);
    private static int Free(MemoryRegionCache<T> cache);
    internal void Trim();
    private static void Trim(MemoryRegionCache[] caches);
    private static void Trim(MemoryRegionCache<T> cache);
    private MemoryRegionCache<T> CacheForTiny(PoolArena`1<T> area, int normCapacity);
    private MemoryRegionCache<T> CacheForSmall(PoolArena`1<T> area, int normCapacity);
    private MemoryRegionCache<T> CacheForNormal(PoolArena`1<T> area, int normCapacity);
    private static MemoryRegionCache<T> Cache(MemoryRegionCache[] cache, int idx);
}
public class DotNetty.Buffers.ReadOnlyByteBufferStream : Stream {
    private IByteBuffer buffer;
    private bool releaseReferenceOnClosure;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyByteBufferStream(IByteBuffer buffer, bool releaseReferenceOnClosure);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] output, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] input, int offset, int count);
}
internal class DotNetty.Buffers.SimpleLeakAwareByteBuffer : WrappedByteBuffer {
    protected IResourceLeakTracker Leak;
    private IByteBuffer trackedByteBuf;
    internal SimpleLeakAwareByteBuffer(IByteBuffer wrapped, IByteBuffer trackedByteBuf, IResourceLeakTracker leak);
    internal SimpleLeakAwareByteBuffer(IByteBuffer wrapped, IResourceLeakTracker leak);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    private void CloseLeak();
    private IByteBuffer UnwrappedDerived(IByteBuffer derived);
    private SimpleLeakAwareByteBuffer NewSharedLeakAwareByteBuffer(IByteBuffer wrapped);
    private SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer wrapped, IResourceLeakTracker leakTracker);
    protected virtual SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer buf, IByteBuffer trackedBuf, IResourceLeakTracker leakTracker);
}
internal class DotNetty.Buffers.SimpleLeakAwareCompositeByteBuffer : WrappedCompositeByteBuffer {
    protected IResourceLeakTracker Leak;
    internal SimpleLeakAwareCompositeByteBuffer(CompositeByteBuffer wrapped, IResourceLeakTracker leak);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    private void CloseLeak(IByteBuffer trackedByteBuf);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer ReadRetainedSlice(int length);
    private SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer wrapped);
    protected virtual SimpleLeakAwareByteBuffer NewLeakAwareByteBuffer(IByteBuffer wrapped, IByteBuffer trackedByteBuf, IResourceLeakTracker leakTracker);
}
internal enum DotNetty.Buffers.SizeClass : Enum {
    public int value__;
    public static SizeClass Tiny;
    public static SizeClass Small;
    public static SizeClass Normal;
}
internal static class DotNetty.Buffers.ThrowHelper : object {
    internal static void ThrowIndexOutOfRangeException_Index(int index, int length, int capacity);
    internal static void ThrowIndexOutOfRangeException_SrcIndex(int srcIndex);
    internal static void ThrowIndexOutOfRangeException_SrcIndex(int srcIndex, int length, int srcCapacity);
    internal static void ThrowIndexOutOfRangeException_DstIndex(int dstIndex);
    internal static void ThrowIndexOutOfRangeException_DstIndex(int dstIndex, int length, int dstCapacity);
    internal static void ThrowIndexOutOfRangeException_ReaderIndex(int index, int writerIndex);
    internal static void ThrowIndexOutOfRangeException_ReaderIndex(int minimumReadableBytes, int readerIndex, int writerIndex, AbstractByteBuffer buf);
    internal static void ThrowIndexOutOfRangeException_WriterIndex(int index, int readerIndex, int capacity);
    internal static void ThrowIndexOutOfRangeException_WriterIndex(int minWritableBytes, int writerIndex, int maxCapacity, AbstractByteBuffer buf);
    internal static void ThrowIndexOutOfRangeException_ReaderWriterIndex(int readerIndex, int writerIndex, int capacity);
    internal static void ThrowIndexOutOfRangeException_ReadableBytes(int length, IByteBuffer src);
    internal static void ThrowIndexOutOfRangeException_WritableBytes(int length, IByteBuffer dst);
    internal static void ThrowIndexOutOfRangeException_Src(int srcIndex, int length, int count);
    internal static void ThrowIllegalReferenceCountException(int count);
    internal static void ThrowArgumentOutOfRangeException_MinimumReadableBytes(int minimumReadableBytes);
    internal static void ThrowArgumentOutOfRangeException_InitialCapacity();
    internal static void ThrowArgumentOutOfRangeException_InitialCapacity(int initialCapacity, int maxCapacity);
    internal static void ThrowArgumentOutOfRangeException_MinWritableBytes();
    internal static void ThrowArgumentOutOfRangeException_MinNewCapacity(int minNewCapacity);
    internal static void ThrowArgumentOutOfRangeException_MaxCapacity(int minNewCapacity, int maxCapacity);
    internal static void ThrowArgumentOutOfRangeException_Capacity(int newCapacity, int maxCapacity);
    internal static void ThrowArgumentNullException_Dst();
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_Index>g__GetIndexOutOfRangeException|0_0(<>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_SrcIndex>g__GetIndexOutOfRangeException|1_0(<>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_SrcIndex>g__GetIndexOutOfRangeException|2_0(<>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_DstIndex>g__GetIndexOutOfRangeException|3_0(<>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_DstIndex>g__GetIndexOutOfRangeException|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_ReaderIndex>g__GetIndexOutOfRangeException|5_0(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_ReaderIndex>g__GetIndexOutOfRangeException|6_0(<>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_WriterIndex>g__GetIndexOutOfRangeException|7_0(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_WriterIndex>g__GetIndexOutOfRangeException|8_0(<>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_ReaderWriterIndex>g__GetIndexOutOfRangeException|9_0(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_ReadableBytes>g__GetIndexOutOfRangeException|10_0(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_WritableBytes>g__GetIndexOutOfRangeException|11_0(<>c__DisplayClass11_0& );
    [CompilerGeneratedAttribute]
internal static IndexOutOfRangeException <ThrowIndexOutOfRangeException_Src>g__GetIndexOutOfRangeException|12_0(<>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static IllegalReferenceCountException <ThrowIllegalReferenceCountException>g__GetIllegalReferenceCountException|13_0(<>c__DisplayClass13_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_MinimumReadableBytes>g__GetArgumentOutOfRangeException|14_0(<>c__DisplayClass14_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_InitialCapacity>g__GetArgumentOutOfRangeException|15_0();
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_InitialCapacity>g__GetArgumentOutOfRangeException|16_0(<>c__DisplayClass16_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_MinWritableBytes>g__GetArgumentOutOfRangeException|17_0();
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_MinNewCapacity>g__GetArgumentOutOfRangeException|18_0(<>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_MaxCapacity>g__GetArgumentOutOfRangeException|19_0(<>c__DisplayClass19_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentOutOfRangeException <ThrowArgumentOutOfRangeException_Capacity>g__GetArgumentOutOfRangeException|20_0(<>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static ArgumentNullException <ThrowArgumentNullException_Dst>g__GetArgumentOutOfRangeException|21_0();
}
public static class DotNetty.Buffers.Unpooled : object {
    private static UnpooledByteBufferAllocator Allocator;
    public static IByteBuffer Empty;
    private static Unpooled();
    public static IByteBuffer Buffer();
    public static IByteBuffer DirectBuffer();
    public static IByteBuffer Buffer(int initialCapacity);
    public static IByteBuffer DirectBuffer(int initialCapacity);
    public static IByteBuffer Buffer(int initialCapacity, int maxCapacity);
    public static IByteBuffer DirectBuffer(int initialCapacity, int maxCapacity);
    public static IByteBuffer WrappedBuffer(Byte[] array);
    public static IByteBuffer WrappedBuffer(Byte[] array, int offset, int length);
    public static IByteBuffer WrappedBuffer(IByteBuffer buffer);
    public static IByteBuffer WrappedBuffer(Byte[][] arrays);
    public static IByteBuffer WrappedBuffer(IByteBuffer[] buffers);
    public static IByteBuffer WrappedBuffer(int maxNumComponents, Byte[][] arrays);
    public static IByteBuffer WrappedBuffer(int maxNumComponents, IByteBuffer[] buffers);
    public static CompositeByteBuffer CompositeBuffer();
    public static CompositeByteBuffer CompositeBuffer(int maxNumComponents);
    public static IByteBuffer CopiedBuffer(Byte[] array);
    public static IByteBuffer CopiedBuffer(Byte[] array, int offset, int length);
    public static IByteBuffer CopiedBuffer(IByteBuffer buffer);
    public static IByteBuffer CopiedBuffer(Byte[][] arrays);
    public static IByteBuffer CopiedBuffer(IByteBuffer[] buffers);
    public static IByteBuffer CopiedBuffer(Char[] array, int offset, int length, Encoding encoding);
    public static IByteBuffer CopiedBuffer(string value, Encoding encoding);
    public static IByteBuffer CopyInt(int value);
    public static IByteBuffer CopyInt(Int32[] values);
    public static IByteBuffer CopyShort(int value);
    public static IByteBuffer CopyShort(Int16[] values);
    public static IByteBuffer CopyShort(Int32[] values);
    public static IByteBuffer CopyMedium(int value);
    public static IByteBuffer CopyMedium(Int32[] values);
    public static IByteBuffer CopyLong(long value);
    public static IByteBuffer CopyLong(Int64[] values);
    public static IByteBuffer CopyBoolean(bool value);
    public static IByteBuffer CopyBoolean(Boolean[] values);
    public static IByteBuffer CopyFloat(float value);
    public static IByteBuffer CopyFloat(Single[] values);
    public static IByteBuffer CopyDouble(double value);
    public static IByteBuffer CopyDouble(Double[] values);
    public static IByteBuffer UnreleasableBuffer(IByteBuffer buffer);
}
public class DotNetty.Buffers.UnpooledByteBufferAllocator : AbstractByteBufferAllocator {
    private UnpooledByteBufferAllocatorMetric metric;
    private bool disableLeakDetector;
    public static UnpooledByteBufferAllocator Default;
    public bool IsDirectBufferPooled { get; }
    public IByteBufferAllocatorMetric Metric { get; }
    public UnpooledByteBufferAllocator(bool preferDirect);
    public UnpooledByteBufferAllocator(bool preferDirect, bool disableLeakDetector);
    private static UnpooledByteBufferAllocator();
    protected virtual IByteBuffer NewHeapBuffer(int initialCapacity, int maxCapacity);
    protected virtual IByteBuffer NewDirectBuffer(int initialCapacity, int maxCapacity);
    public virtual CompositeByteBuffer CompositeHeapBuffer(int maxNumComponents);
    public virtual CompositeByteBuffer CompositeDirectBuffer(int maxNumComponents);
    public virtual bool get_IsDirectBufferPooled();
    public sealed virtual IByteBufferAllocatorMetric get_Metric();
    internal void IncrementDirect(int amount);
    internal void DecrementDirect(int amount);
    internal void IncrementHeap(int amount);
    internal void DecrementHeap(int amount);
}
internal class DotNetty.Buffers.UnpooledDuplicatedByteBuffer : AbstractDerivedByteBuffer {
    private AbstractByteBuffer buffer;
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public int Capacity { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public UnpooledDuplicatedByteBuffer(AbstractByteBuffer buffer);
    internal UnpooledDuplicatedByteBuffer(AbstractByteBuffer buffer, int readerIndex, int writerIndex);
    public virtual IByteBuffer Unwrap();
    public virtual IByteBuffer Copy(int index, int length);
    protected AbstractByteBuffer UnwrapCore();
    public virtual IByteBufferAllocator get_Allocator();
    public virtual bool get_IsDirect();
    public virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual int get_IoBufferCount();
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer destination, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] destination, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
}
public class DotNetty.Buffers.UnpooledHeapByteBuffer : AbstractReferenceCountedByteBuffer {
    private IByteBufferAllocator allocator;
    private Byte[] array;
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public int Capacity { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public int IoBufferCount { get; }
    protected internal UnpooledHeapByteBuffer(IByteBufferAllocator alloc, int initialCapacity, int maxCapacity);
    protected internal UnpooledHeapByteBuffer(IByteBufferAllocator alloc, Byte[] initialArray, int maxCapacity);
    protected virtual Byte[] AllocateArray(int initialCapacity);
    protected Byte[] NewArray(int initialCapacity);
    protected virtual void FreeArray(Byte[] bytes);
    protected void SetArray(Byte[] initialArray);
    public virtual IByteBufferAllocator get_Allocator();
    public virtual bool get_IsDirect();
    public virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    [AsyncStateMachineAttribute("DotNetty.Buffers.UnpooledHeapByteBuffer/<SetBytesAsync>d__30")]
public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual byte GetByte(int index);
    protected internal virtual byte _GetByte(int index);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual short GetShort(int index);
    protected internal virtual short _GetShort(int index);
    public virtual short GetShortLE(int index);
    protected internal virtual short _GetShortLE(int index);
    public virtual int GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    public virtual int GetInt(int index);
    protected internal virtual int _GetInt(int index);
    public virtual int GetIntLE(int index);
    protected internal virtual int _GetIntLE(int index);
    public virtual long GetLong(int index);
    protected internal virtual long _GetLong(int index);
    public virtual long GetLongLE(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer SetByte(int index, int value);
    protected internal virtual void _SetByte(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    public virtual IByteBuffer SetShortLE(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    protected internal virtual void _SetLong(int index, long value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer Copy(int index, int length);
    protected internal virtual void Deallocate();
    public virtual IByteBuffer Unwrap();
}
internal class DotNetty.Buffers.UnpooledSlicedByteBuffer : AbstractUnpooledSlicedByteBuffer {
    public int Capacity { get; }
    internal UnpooledSlicedByteBuffer(AbstractByteBuffer buffer, int index, int length);
    public virtual int get_Capacity();
    protected AbstractByteBuffer UnwrapCore();
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
}
public class DotNetty.Buffers.UnpooledUnsafeDirectByteBuffer : AbstractReferenceCountedByteBuffer {
    private IByteBufferAllocator allocator;
    private int capacity;
    private bool doNotFree;
    private Byte[] buffer;
    public bool IsDirect { get; }
    public int Capacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public bool HasMemoryAddress { get; }
    public int IoBufferCount { get; }
    public UnpooledUnsafeDirectByteBuffer(IByteBufferAllocator alloc, int initialCapacity, int maxCapacity);
    protected UnpooledUnsafeDirectByteBuffer(IByteBufferAllocator alloc, Byte[] initialBuffer, int maxCapacity, bool doFree);
    protected virtual Byte[] AllocateDirect(int initialCapacity);
    protected Byte[] NewArray(int initialCapacity);
    protected virtual void FreeDirect(Byte[] array);
    private void SetByteBuffer(Byte[] array, bool tryFree);
    public virtual bool get_IsDirect();
    public virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public virtual IByteBufferAllocator get_Allocator();
    public virtual bool get_HasArray();
    public virtual Byte[] get_Array();
    public virtual int get_ArrayOffset();
    public virtual bool get_HasMemoryAddress();
    public virtual Byte& GetPinnableMemoryAddress();
    public virtual IntPtr AddressOfPinnedMemory();
    protected internal virtual byte _GetByte(int index);
    protected internal virtual short _GetShort(int index);
    protected internal virtual short _GetShortLE(int index);
    protected internal virtual int _GetUnsignedMedium(int index);
    protected internal virtual int _GetUnsignedMediumLE(int index);
    protected internal virtual int _GetInt(int index);
    protected internal virtual int _GetIntLE(int index);
    protected internal virtual long _GetLong(int index);
    protected internal virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    protected internal virtual void _SetByte(int index, int value);
    protected internal virtual void _SetShort(int index, int value);
    protected internal virtual void _SetShortLE(int index, int value);
    protected internal virtual void _SetMedium(int index, int value);
    protected internal virtual void _SetMediumLE(int index, int value);
    protected internal virtual void _SetInt(int index, int value);
    protected internal virtual void _SetIntLE(int index, int value);
    protected internal virtual void _SetLong(int index, long value);
    protected internal virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream output, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual IByteBuffer Copy(int index, int length);
    protected internal virtual void Deallocate();
    public virtual IByteBuffer Unwrap();
    private Byte& Addr(int index);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual IByteBuffer WriteZero(int length);
}
internal class DotNetty.Buffers.UnreleasableByteBuffer : WrappedByteBuffer {
    internal UnreleasableByteBuffer(IByteBuffer buf);
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Retain(int increment);
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual bool Release();
    public virtual bool Release(int decrement);
}
internal static class DotNetty.Buffers.UnsafeByteBufferUtil : object {
    private static byte Zero;
    internal static short GetShort(Byte* bytes);
    internal static short GetShortLE(Byte* bytes);
    internal static int GetUnsignedMedium(Byte* bytes);
    internal static int GetUnsignedMediumLE(Byte* bytes);
    internal static int GetInt(Byte* bytes);
    internal static int GetIntLE(Byte* bytes);
    internal static long GetLong(Byte* bytes);
    internal static long GetLongLE(Byte* bytes);
    internal static void SetShort(Byte* bytes, int value);
    internal static void SetShortLE(Byte* bytes, int value);
    internal static void SetMedium(Byte* bytes, int value);
    internal static void SetMediumLE(Byte* bytes, int value);
    internal static void SetInt(Byte* bytes, int value);
    internal static void SetIntLE(Byte* bytes, int value);
    internal static void SetLong(Byte* bytes, long value);
    internal static void SetLongLE(Byte* bytes, long value);
    internal static void SetZero(Byte[] array, int index, int length);
    internal static IByteBuffer Copy(AbstractByteBuffer buf, Byte* addr, int index, int length);
    internal static int SetBytes(AbstractByteBuffer buf, Byte* addr, int index, Stream input, int length);
    internal static Task`1<int> SetBytesAsync(AbstractByteBuffer buf, Byte* addr, int index, Stream input, int length, CancellationToken cancellationToken);
    internal static void GetBytes(AbstractByteBuffer buf, Byte* addr, int index, IByteBuffer dst, int dstIndex, int length);
    internal static void GetBytes(AbstractByteBuffer buf, Byte* addr, int index, Byte[] dst, int dstIndex, int length);
    internal static void SetBytes(AbstractByteBuffer buf, Byte* addr, int index, IByteBuffer src, int srcIndex, int length);
    internal static void SetBytes(AbstractByteBuffer buf, Byte* addr, int index, Byte[] src, int srcIndex, int length);
    internal static void GetBytes(AbstractByteBuffer buf, Byte* addr, int index, Stream output, int length);
    internal static void SetZero(Byte* addr, int length);
    internal static string GetString(Byte* src, int length, Encoding encoding);
    internal static UnpooledUnsafeDirectByteBuffer NewUnsafeDirectByteBuffer(IByteBufferAllocator alloc, int initialCapacity, int maxCapacity);
}
internal class DotNetty.Buffers.WrappedByteBuffer : object {
    protected IByteBuffer Buf;
    public bool HasMemoryAddress { get; }
    public int Capacity { get; }
    public int MaxCapacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public bool IsDirect { get; }
    public int ReaderIndex { get; }
    public int WriterIndex { get; }
    public int ReadableBytes { get; }
    public int WritableBytes { get; }
    public int MaxWritableBytes { get; }
    public int IoBufferCount { get; }
    public bool HasArray { get; }
    public int ArrayOffset { get; }
    public Byte[] Array { get; }
    public int ReferenceCount { get; }
    protected WrappedByteBuffer(IByteBuffer buf);
    public sealed virtual bool get_HasMemoryAddress();
    public sealed virtual Byte& GetPinnableMemoryAddress();
    public sealed virtual IntPtr AddressOfPinnedMemory();
    public sealed virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public sealed virtual int get_MaxCapacity();
    public sealed virtual IByteBufferAllocator get_Allocator();
    public sealed virtual IByteBuffer Unwrap();
    public sealed virtual bool get_IsDirect();
    public sealed virtual int get_ReaderIndex();
    public sealed virtual IByteBuffer SetReaderIndex(int readerIndex);
    public sealed virtual int get_WriterIndex();
    public sealed virtual IByteBuffer SetWriterIndex(int writerIndex);
    public virtual IByteBuffer SetIndex(int readerIndex, int writerIndex);
    public sealed virtual int get_ReadableBytes();
    public sealed virtual int get_WritableBytes();
    public sealed virtual int get_MaxWritableBytes();
    public sealed virtual bool IsReadable();
    public sealed virtual bool IsWritable();
    public sealed virtual IByteBuffer Clear();
    public sealed virtual IByteBuffer MarkReaderIndex();
    public sealed virtual IByteBuffer ResetReaderIndex();
    public sealed virtual IByteBuffer MarkWriterIndex();
    public sealed virtual IByteBuffer ResetWriterIndex();
    public virtual IByteBuffer DiscardReadBytes();
    public virtual IByteBuffer DiscardSomeReadBytes();
    public virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public virtual int EnsureWritable(int minWritableBytes, bool force);
    public virtual bool GetBoolean(int index);
    public virtual byte GetByte(int index);
    public virtual short GetShort(int index);
    public virtual short GetShortLE(int index);
    public virtual ushort GetUnsignedShort(int index);
    public virtual ushort GetUnsignedShortLE(int index);
    public virtual int GetMedium(int index);
    public virtual int GetMediumLE(int index);
    public virtual int GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    public virtual int GetInt(int index);
    public virtual int GetIntLE(int index);
    public virtual UInt32 GetUnsignedInt(int index);
    public virtual UInt32 GetUnsignedIntLE(int index);
    public virtual long GetLong(int index);
    public virtual long GetLongLE(int index);
    public virtual char GetChar(int index);
    public virtual float GetFloat(int index);
    public sealed virtual float GetFloatLE(int index);
    public virtual double GetDouble(int index);
    public sealed virtual double GetDoubleLE(int index);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream output, int length);
    public sealed virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public sealed virtual string GetString(int index, int length, Encoding encoding);
    public virtual IByteBuffer SetBoolean(int index, bool value);
    public virtual IByteBuffer SetByte(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    public virtual IByteBuffer SetShortLE(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedShort(int index, ushort value);
    public sealed virtual IByteBuffer SetUnsignedShortLE(int index, ushort value);
    public virtual IByteBuffer SetMedium(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    public sealed virtual IByteBuffer SetUnsignedInt(int index, UInt32 value);
    public sealed virtual IByteBuffer SetUnsignedIntLE(int index, UInt32 value);
    public virtual IByteBuffer SetLong(int index, long value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    public virtual IByteBuffer SetChar(int index, char value);
    public virtual IByteBuffer SetFloat(int index, float value);
    public sealed virtual IByteBuffer SetFloatLE(int index, float value);
    public virtual IByteBuffer SetDouble(int index, double value);
    public sealed virtual IByteBuffer SetDoubleLE(int index, double value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public sealed virtual int SetString(int index, string value, Encoding encoding);
    public virtual IByteBuffer SetZero(int index, int length);
    public sealed virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    public virtual bool ReadBoolean();
    public virtual byte ReadByte();
    public virtual short ReadShort();
    public virtual short ReadShortLE();
    public virtual ushort ReadUnsignedShort();
    public virtual ushort ReadUnsignedShortLE();
    public virtual int ReadMedium();
    public virtual int ReadMediumLE();
    public virtual int ReadUnsignedMedium();
    public virtual int ReadUnsignedMediumLE();
    public virtual int ReadInt();
    public virtual int ReadIntLE();
    public virtual UInt32 ReadUnsignedInt();
    public virtual UInt32 ReadUnsignedIntLE();
    public virtual long ReadLong();
    public virtual long ReadLongLE();
    public virtual char ReadChar();
    public virtual float ReadFloat();
    public sealed virtual float ReadFloatLE();
    public virtual double ReadDouble();
    public sealed virtual double ReadDoubleLE();
    public virtual IByteBuffer ReadBytes(int length);
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public sealed virtual Task WriteBytesAsync(Stream stream, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Byte[] dst);
    public virtual IByteBuffer ReadBytes(Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Stream output, int length);
    public sealed virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public sealed virtual string ReadString(int length, Encoding encoding);
    public virtual IByteBuffer SkipBytes(int length);
    public virtual IByteBuffer WriteBoolean(bool value);
    public virtual IByteBuffer WriteByte(int value);
    public virtual IByteBuffer WriteShort(int value);
    public virtual IByteBuffer WriteShortLE(int value);
    public sealed virtual IByteBuffer WriteUnsignedShort(ushort value);
    public sealed virtual IByteBuffer WriteUnsignedShortLE(ushort value);
    public virtual IByteBuffer WriteMedium(int value);
    public virtual IByteBuffer WriteMediumLE(int value);
    public virtual IByteBuffer WriteInt(int value);
    public virtual IByteBuffer WriteIntLE(int value);
    public virtual IByteBuffer WriteLong(long value);
    public virtual IByteBuffer WriteLongLE(long value);
    public virtual IByteBuffer WriteChar(char value);
    public virtual IByteBuffer WriteFloat(float value);
    public sealed virtual IByteBuffer WriteFloatLE(float value);
    public virtual IByteBuffer WriteDouble(double value);
    public sealed virtual IByteBuffer WriteDoubleLE(double value);
    public virtual IByteBuffer WriteBytes(IByteBuffer src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer WriteBytes(Byte[] src);
    public virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public virtual Task WriteBytesAsync(Stream input, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer WriteZero(int length);
    public sealed virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public sealed virtual int WriteString(string value, Encoding encoding);
    public virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public virtual int BytesBefore(byte value);
    public virtual int BytesBefore(int length, byte value);
    public virtual int BytesBefore(int index, int length, byte value);
    public virtual int ForEachByte(IByteProcessor processor);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    public virtual IByteBuffer Copy();
    public virtual IByteBuffer Copy(int index, int length);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual IByteBuffer RetainedSlice(int index, int length);
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer RetainedDuplicate();
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers();
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public sealed virtual bool get_HasArray();
    public sealed virtual int get_ArrayOffset();
    public sealed virtual Byte[] get_Array();
    public virtual string ToString(Encoding encoding);
    public virtual string ToString(int index, int length, Encoding encoding);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IByteBuffer buffer);
    public sealed virtual int CompareTo(IByteBuffer buffer);
    public virtual string ToString();
    public virtual IReferenceCounted Retain(int increment);
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public sealed virtual bool IsReadable(int size);
    public sealed virtual bool IsWritable(int size);
    public sealed virtual int get_ReferenceCount();
    public virtual bool Release();
    public virtual bool Release(int decrement);
}
[DefaultMemberAttribute("Item")]
internal class DotNetty.Buffers.WrappedCompositeByteBuffer : CompositeByteBuffer {
    private CompositeByteBuffer wrapped;
    public int ReaderIndex { get; }
    public int WriterIndex { get; }
    public int ReadableBytes { get; }
    public int WritableBytes { get; }
    public int MaxWritableBytes { get; }
    public int ReferenceCount { get; }
    public bool HasArray { get; }
    public Byte[] Array { get; }
    public int ArrayOffset { get; }
    public int Capacity { get; }
    public IByteBufferAllocator Allocator { get; }
    public int NumComponents { get; }
    public int MaxNumComponents { get; }
    public IByteBuffer Item { get; }
    public int IoBufferCount { get; }
    public bool HasMemoryAddress { get; }
    public int MaxCapacity { get; }
    public bool IsDirect { get; }
    internal WrappedCompositeByteBuffer(CompositeByteBuffer wrapped);
    public virtual bool Release();
    public virtual bool Release(int decrement);
    public sealed virtual int get_ReaderIndex();
    public sealed virtual int get_WriterIndex();
    public sealed virtual bool IsReadable();
    public sealed virtual bool IsReadable(int numBytes);
    public sealed virtual bool IsWritable();
    public sealed virtual int get_ReadableBytes();
    public sealed virtual int get_WritableBytes();
    public sealed virtual int get_MaxWritableBytes();
    public virtual int EnsureWritable(int minWritableBytes, bool force);
    public virtual short GetShort(int index);
    public virtual short GetShortLE(int index);
    public virtual int GetUnsignedMedium(int index);
    public virtual int GetUnsignedMediumLE(int index);
    public virtual int GetInt(int index);
    public virtual int GetIntLE(int index);
    public virtual long GetLong(int index);
    public virtual long GetLongLE(int index);
    public virtual char GetChar(int index);
    public virtual IByteBuffer SetShortLE(int index, int value);
    public virtual IByteBuffer SetMediumLE(int index, int value);
    public virtual IByteBuffer SetIntLE(int index, int value);
    public virtual IByteBuffer SetLongLE(int index, long value);
    public virtual byte ReadByte();
    public virtual short ReadShort();
    public virtual short ReadShortLE();
    public virtual int ReadUnsignedMedium();
    public virtual int ReadUnsignedMediumLE();
    public virtual int ReadInt();
    public virtual int ReadIntLE();
    public virtual long ReadLong();
    public virtual long ReadLongLE();
    public virtual IByteBuffer ReadBytes(int length);
    public virtual IByteBuffer Slice();
    public virtual IByteBuffer Slice(int index, int length);
    public virtual string ToString(Encoding encoding);
    public virtual string ToString(int index, int length, Encoding encoding);
    public virtual int IndexOf(int fromIndex, int toIndex, byte value);
    public virtual int BytesBefore(int index, int length, byte value);
    public virtual int ForEachByte(IByteProcessor processor);
    public virtual int ForEachByte(int index, int length, IByteProcessor processor);
    public virtual int ForEachByteDesc(IByteProcessor processor);
    public virtual int ForEachByteDesc(int index, int length, IByteProcessor processor);
    public sealed virtual int GetHashCode();
    public sealed virtual bool Equals(IByteBuffer buf);
    public sealed virtual int CompareTo(IByteBuffer that);
    public sealed virtual int get_ReferenceCount();
    public virtual IByteBuffer Duplicate();
    public virtual IByteBuffer ReadSlice(int length);
    public virtual IByteBuffer WriteShortLE(int value);
    public virtual IByteBuffer WriteMediumLE(int value);
    public virtual IByteBuffer WriteIntLE(int value);
    public virtual IByteBuffer WriteLongLE(long value);
    public virtual Task WriteBytesAsync(Stream stream, int length, CancellationToken cancellationToken);
    public virtual CompositeByteBuffer AddComponent(IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponent(int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(int cIndex, IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IByteBuffer[] buffers);
    public virtual CompositeByteBuffer AddComponents(bool increaseWriterIndex, IEnumerable`1<IByteBuffer> buffers);
    public virtual CompositeByteBuffer AddComponent(bool increaseWriterIndex, int cIndex, IByteBuffer buffer);
    public virtual CompositeByteBuffer RemoveComponent(int cIndex);
    public virtual CompositeByteBuffer RemoveComponents(int cIndex, int numComponents);
    public virtual IEnumerator`1<IByteBuffer> GetEnumerator();
    public virtual IList`1<IByteBuffer> Decompose(int offset, int length);
    public sealed virtual bool get_HasArray();
    public sealed virtual Byte[] get_Array();
    public sealed virtual int get_ArrayOffset();
    public sealed virtual int get_Capacity();
    public virtual IByteBuffer AdjustCapacity(int newCapacity);
    public sealed virtual IByteBufferAllocator get_Allocator();
    public sealed virtual int get_NumComponents();
    public sealed virtual int get_MaxNumComponents();
    public sealed virtual int ToComponentIndex(int offset);
    public sealed virtual int ToByteIndex(int cIndex);
    public virtual byte GetByte(int index);
    protected internal sealed virtual byte _GetByte(int index);
    protected internal sealed virtual short _GetShort(int index);
    protected internal sealed virtual short _GetShortLE(int index);
    protected internal sealed virtual int _GetUnsignedMedium(int index);
    protected internal sealed virtual int _GetUnsignedMediumLE(int index);
    protected internal sealed virtual int _GetInt(int index);
    protected internal sealed virtual int _GetIntLE(int index);
    protected internal sealed virtual long _GetLong(int index);
    protected internal sealed virtual long _GetLongLE(int index);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer GetBytes(int index, Stream destination, int length);
    public virtual IByteBuffer SetByte(int index, int value);
    protected internal sealed virtual void _SetByte(int index, int value);
    public virtual IByteBuffer SetShort(int index, int value);
    protected internal sealed virtual void _SetShort(int index, int value);
    protected internal sealed virtual void _SetShortLE(int index, int value);
    public virtual IByteBuffer SetMedium(int index, int value);
    protected internal sealed virtual void _SetMedium(int index, int value);
    protected internal sealed virtual void _SetMediumLE(int index, int value);
    public virtual IByteBuffer SetInt(int index, int value);
    protected internal sealed virtual void _SetInt(int index, int value);
    protected internal sealed virtual void _SetIntLE(int index, int value);
    public virtual IByteBuffer SetLong(int index, long value);
    protected internal sealed virtual void _SetLong(int index, long value);
    protected internal sealed virtual void _SetLongLE(int index, long value);
    public virtual IByteBuffer SetBytes(int index, Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int srcIndex, int length);
    public virtual Task`1<int> SetBytesAsync(int index, Stream src, int length, CancellationToken cancellationToken);
    public virtual IByteBuffer Copy();
    public virtual IByteBuffer Copy(int index, int length);
    public sealed virtual IByteBuffer get_Item(int cIndex);
    public sealed virtual IByteBuffer ComponentAtOffset(int offset);
    public sealed virtual IByteBuffer InternalComponent(int cIndex);
    public sealed virtual IByteBuffer InternalComponentAtOffset(int offset);
    public virtual int get_IoBufferCount();
    public virtual ArraySegment`1<byte> GetIoBuffer(int index, int length);
    public virtual ArraySegment`1[] GetIoBuffers(int index, int length);
    public virtual CompositeByteBuffer Consolidate();
    public virtual CompositeByteBuffer Consolidate(int cIndex, int numComponents);
    public virtual CompositeByteBuffer DiscardReadComponents();
    public virtual IByteBuffer DiscardReadBytes();
    public sealed virtual string ToString();
    public sealed virtual IByteBuffer SetReaderIndex(int readerIndex);
    public sealed virtual IByteBuffer SetWriterIndex(int writerIndex);
    public sealed virtual IByteBuffer SetIndex(int readerIndex, int writerIndex);
    public sealed virtual IByteBuffer Clear();
    public sealed virtual IByteBuffer MarkReaderIndex();
    public sealed virtual IByteBuffer ResetReaderIndex();
    public sealed virtual IByteBuffer MarkWriterIndex();
    public sealed virtual IByteBuffer ResetWriterIndex();
    public virtual IByteBuffer EnsureWritable(int minWritableBytes);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst);
    public virtual IByteBuffer GetBytes(int index, IByteBuffer dst, int length);
    public virtual IByteBuffer GetBytes(int index, Byte[] dst);
    public virtual IByteBuffer SetBoolean(int index, bool value);
    public virtual IByteBuffer SetChar(int index, char value);
    public virtual IByteBuffer SetFloat(int index, float value);
    public virtual IByteBuffer SetDouble(int index, double value);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src);
    public virtual IByteBuffer SetBytes(int index, IByteBuffer src, int length);
    public virtual IByteBuffer SetBytes(int index, Byte[] src);
    public virtual IByteBuffer SetZero(int index, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int length);
    public virtual IByteBuffer ReadBytes(IByteBuffer dst, int dstIndex, int length);
    public virtual IByteBuffer ReadBytes(Byte[] dst);
    public virtual IByteBuffer ReadBytes(Byte[] dst, int dstIndex, int length);
    public virtual ICharSequence GetCharSequence(int index, int length, Encoding encoding);
    public virtual ICharSequence ReadCharSequence(int length, Encoding encoding);
    public virtual int SetCharSequence(int index, ICharSequence sequence, Encoding encoding);
    public virtual string GetString(int index, int length, Encoding encoding);
    public virtual string ReadString(int length, Encoding encoding);
    public virtual int SetString(int index, string value, Encoding encoding);
    public virtual IByteBuffer ReadBytes(Stream destination, int length);
    public virtual int WriteCharSequence(ICharSequence sequence, Encoding encoding);
    public virtual int WriteString(string value, Encoding encoding);
    public virtual IByteBuffer SkipBytes(int length);
    public virtual IByteBuffer WriteBoolean(bool value);
    public virtual IByteBuffer WriteByte(int value);
    public virtual IByteBuffer WriteShort(int value);
    public virtual IByteBuffer WriteMedium(int value);
    public virtual IByteBuffer WriteInt(int value);
    public virtual IByteBuffer WriteLong(long value);
    public virtual IByteBuffer WriteChar(char value);
    public virtual IByteBuffer WriteFloat(float value);
    public virtual IByteBuffer WriteDouble(double value);
    public virtual IByteBuffer WriteBytes(IByteBuffer src);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int length);
    public virtual IByteBuffer WriteBytes(IByteBuffer src, int srcIndex, int length);
    public virtual IByteBuffer WriteBytes(Byte[] src);
    public virtual IByteBuffer WriteBytes(Byte[] src, int srcIndex, int length);
    public virtual IByteBuffer WriteZero(int length);
    public virtual IReferenceCounted Retain(int increment);
    public virtual IReferenceCounted Retain();
    public virtual IReferenceCounted Touch();
    public virtual IReferenceCounted Touch(object hint);
    public virtual IByteBuffer DiscardSomeReadBytes();
    protected internal sealed virtual void Deallocate();
    public sealed virtual IByteBuffer Unwrap();
    public sealed virtual IntPtr AddressOfPinnedMemory();
    public sealed virtual Byte& GetPinnableMemoryAddress();
    public sealed virtual bool get_HasMemoryAddress();
    public sealed virtual bool IsWritable(int size);
    public sealed virtual int get_MaxCapacity();
    public sealed virtual bool get_IsDirect();
    public virtual IByteBuffer ReadRetainedSlice(int length);
    public virtual IByteBuffer RetainedDuplicate();
    public virtual IByteBuffer RetainedSlice();
    public virtual IByteBuffer RetainedSlice(int index, int length);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
