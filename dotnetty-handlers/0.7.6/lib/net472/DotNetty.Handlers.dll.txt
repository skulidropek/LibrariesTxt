public class DotNetty.Handlers.Flow.FlowControlHandler : ChannelDuplexHandler {
    private static IInternalLogger Logger;
    private static ThreadLocalPool`1<RecyclableQueue> Recycler;
    private bool releaseMessages;
    private RecyclableQueue queue;
    private IChannelConfiguration config;
    private bool shouldConsume;
    public bool IsQueueEmpty { get; }
    public FlowControlHandler(bool releaseMessages);
    private static FlowControlHandler();
    public bool get_IsQueueEmpty();
    private void Destroy();
    public virtual void HandlerAdded(IChannelHandlerContext ctx);
    public virtual void ChannelInactive(IChannelHandlerContext ctx);
    public virtual void Read(IChannelHandlerContext ctx);
    public virtual void ChannelRead(IChannelHandlerContext ctx, object msg);
    public virtual void ChannelReadComplete(IChannelHandlerContext ctx);
    private int Dequeue(IChannelHandlerContext ctx, int minConsume);
}
internal class DotNetty.Handlers.Flow.RecyclableQueue : CompatibleConcurrentQueue`1<object> {
    private Handle handle;
    internal RecyclableQueue(Handle handle);
    public void Recycle();
}
public class DotNetty.Handlers.Logging.LoggingHandler : ChannelHandlerAdapter {
    private static LogLevel DefaultLevel;
    protected InternalLogLevel InternalLevel;
    protected IInternalLogger Logger;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public bool IsSharable { get; }
    public LogLevel Level { get; }
    public LoggingHandler(LogLevel level);
    public LoggingHandler(Type type);
    public LoggingHandler(Type type, LogLevel level);
    public LoggingHandler(string name);
    public LoggingHandler(string name, LogLevel level);
    public virtual bool get_IsSharable();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    public virtual void ChannelRegistered(IChannelHandlerContext ctx);
    public virtual void ChannelUnregistered(IChannelHandlerContext ctx);
    public virtual void ChannelActive(IChannelHandlerContext ctx);
    public virtual void ChannelInactive(IChannelHandlerContext ctx);
    public virtual void ExceptionCaught(IChannelHandlerContext ctx, Exception cause);
    public virtual void UserEventTriggered(IChannelHandlerContext ctx, object evt);
    public virtual Task BindAsync(IChannelHandlerContext ctx, EndPoint localAddress);
    public virtual Task ConnectAsync(IChannelHandlerContext ctx, EndPoint remoteAddress, EndPoint localAddress);
    public virtual Task DisconnectAsync(IChannelHandlerContext ctx);
    public virtual Task CloseAsync(IChannelHandlerContext ctx);
    public virtual Task DeregisterAsync(IChannelHandlerContext ctx);
    public virtual void ChannelRead(IChannelHandlerContext ctx, object message);
    public virtual void ChannelReadComplete(IChannelHandlerContext ctx);
    public virtual void ChannelWritabilityChanged(IChannelHandlerContext ctx);
    public virtual void HandlerAdded(IChannelHandlerContext ctx);
    public virtual void HandlerRemoved(IChannelHandlerContext ctx);
    public virtual void Read(IChannelHandlerContext ctx);
    public virtual Task WriteAsync(IChannelHandlerContext ctx, object msg);
    public virtual void Flush(IChannelHandlerContext ctx);
    protected virtual string Format(IChannelHandlerContext ctx, string eventName);
    protected virtual string Format(IChannelHandlerContext ctx, string eventName, object arg);
    protected virtual string Format(IChannelHandlerContext ctx, string eventName, object firstArg, object secondArg);
    private string FormatByteBuffer(IChannelHandlerContext ctx, string eventName, IByteBuffer msg);
    private string FormatByteBufferHolder(IChannelHandlerContext ctx, string eventName, IByteBufferHolder msg);
    private string FormatSimple(IChannelHandlerContext ctx, string eventName, object msg);
}
public enum DotNetty.Handlers.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel TRACE;
    public static LogLevel DEBUG;
    public static LogLevel INFO;
    public static LogLevel WARN;
    public static LogLevel ERROR;
}
[ExtensionAttribute]
public static class DotNetty.Handlers.Logging.LogLevelExtensions : object {
    [ExtensionAttribute]
public static InternalLogLevel ToInternalLevel(LogLevel level);
}
public class DotNetty.Handlers.Streams.ChunkedStream : object {
    public static int DefaultChunkSize;
    private Stream input;
    private int chunkSize;
    private bool closed;
    [CompilerGeneratedAttribute]
private long <TransferredBytes>k__BackingField;
    public long TransferredBytes { get; private set; }
    public bool IsEndOfInput { get; }
    public long Length { get; }
    public long Progress { get; }
    public ChunkedStream(Stream input);
    public ChunkedStream(Stream input, int chunkSize);
    private static ChunkedStream();
    [CompilerGeneratedAttribute]
public long get_TransferredBytes();
    [CompilerGeneratedAttribute]
private void set_TransferredBytes(long value);
    public sealed virtual bool get_IsEndOfInput();
    public sealed virtual void Close();
    public sealed virtual IByteBuffer ReadChunk(IByteBufferAllocator allocator);
    public sealed virtual long get_Length();
    public sealed virtual long get_Progress();
}
public class DotNetty.Handlers.Streams.ChunkedWriteHandler`1 : ChannelDuplexHandler {
    private static IInternalLogger Logger;
    private Queue`1<PendingWrite<T>> queue;
    private IChannelHandlerContext modreq(System.Runtime.CompilerServices.IsVolatile) ctx;
    private PendingWrite<T> currentWrite;
    private static ChunkedWriteHandler`1();
    public virtual void HandlerAdded(IChannelHandlerContext context);
    public void ResumeTransfer();
    public virtual Task WriteAsync(IChannelHandlerContext context, object message);
    public virtual void Flush(IChannelHandlerContext context);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ChannelWritabilityChanged(IChannelHandlerContext context);
    private void Discard(Exception cause);
    private void InvokeDoFlush(IChannelHandlerContext context);
    private void DoFlush(IChannelHandlerContext context);
    private static void CloseInput(IChunkedInput`1<T> chunks);
    [CompilerGeneratedAttribute]
private void <ResumeTransfer>b__5_0(object state);
}
public interface DotNetty.Handlers.Streams.IChunkedInput`1 {
    public bool IsEndOfInput { get; }
    public long Length { get; }
    public long Progress { get; }
    public abstract virtual bool get_IsEndOfInput();
    public abstract virtual void Close();
    public abstract virtual T ReadChunk(IByteBufferAllocator allocator);
    public abstract virtual long get_Length();
    public abstract virtual long get_Progress();
}
public enum DotNetty.Handlers.Timeout.IdleState : Enum {
    public int value__;
    public static IdleState ReaderIdle;
    public static IdleState WriterIdle;
    public static IdleState AllIdle;
}
public class DotNetty.Handlers.Timeout.IdleStateEvent : object {
    public static IdleStateEvent FirstReaderIdleStateEvent;
    public static IdleStateEvent ReaderIdleStateEvent;
    public static IdleStateEvent FirstWriterIdleStateEvent;
    public static IdleStateEvent WriterIdleStateEvent;
    public static IdleStateEvent FirstAllIdleStateEvent;
    public static IdleStateEvent AllIdleStateEvent;
    [CompilerGeneratedAttribute]
private IdleState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <First>k__BackingField;
    public IdleState State { get; private set; }
    public bool First { get; private set; }
    protected IdleStateEvent(IdleState state, bool first);
    private static IdleStateEvent();
    [CompilerGeneratedAttribute]
public IdleState get_State();
    [CompilerGeneratedAttribute]
private void set_State(IdleState value);
    [CompilerGeneratedAttribute]
public bool get_First();
    [CompilerGeneratedAttribute]
private void set_First(bool value);
}
public class DotNetty.Handlers.Timeout.IdleStateHandler : ChannelDuplexHandler {
    private static TimeSpan MinTimeout;
    private static Action`2<Task, object> writeListener;
    private bool observeOutput;
    private TimeSpan readerIdleTime;
    private TimeSpan writerIdleTime;
    private TimeSpan allIdleTime;
    private IScheduledTask readerIdleTimeout;
    private TimeSpan lastReadTime;
    private bool firstReaderIdleEvent;
    private IScheduledTask writerIdleTimeout;
    private TimeSpan lastWriteTime;
    private bool firstWriterIdleEvent;
    private IScheduledTask allIdleTimeout;
    private bool firstAllIdleEvent;
    private byte state;
    private bool reading;
    private TimeSpan lastChangeCheckTimeStamp;
    private int lastMessageHashCode;
    private long lastPendingWriteBytes;
    private static Action`2<object, object> ReadTimeoutAction;
    private static Action`2<object, object> WriteTimeoutAction;
    private static Action`2<object, object> AllTimeoutAction;
    public TimeSpan ReaderIdleTime { get; }
    public TimeSpan WriterIdleTime { get; }
    public TimeSpan AllIdleTime { get; }
    public IdleStateHandler(int readerIdleTimeSeconds, int writerIdleTimeSeconds, int allIdleTimeSeconds);
    public IdleStateHandler(TimeSpan readerIdleTime, TimeSpan writerIdleTime, TimeSpan allIdleTime);
    public IdleStateHandler(bool observeOutput, TimeSpan readerIdleTime, TimeSpan writerIdleTime, TimeSpan allIdleTime);
    private static IdleStateHandler();
    public TimeSpan get_ReaderIdleTime();
    public TimeSpan get_WriterIdleTime();
    public TimeSpan get_AllIdleTime();
    public virtual void HandlerAdded(IChannelHandlerContext context);
    public virtual void HandlerRemoved(IChannelHandlerContext context);
    public virtual void ChannelRegistered(IChannelHandlerContext context);
    public virtual void ChannelActive(IChannelHandlerContext context);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ChannelRead(IChannelHandlerContext context, object message);
    public virtual void ChannelReadComplete(IChannelHandlerContext context);
    public virtual Task WriteAsync(IChannelHandlerContext context, object message);
    private void Initialize(IChannelHandlerContext context);
    internal virtual TimeSpan Ticks();
    internal virtual IScheduledTask Schedule(IChannelHandlerContext ctx, Action`2<object, object> task, object context, object state, TimeSpan delay);
    private void Destroy();
    protected virtual void ChannelIdle(IChannelHandlerContext context, IdleStateEvent stateEvent);
    protected virtual IdleStateEvent NewIdleStateEvent(IdleState state, bool first);
    private void InitOutputChanged(IChannelHandlerContext ctx);
    private bool HasOutputChanged(IChannelHandlerContext ctx, bool first);
    private static Action`2<object, object> WrapperTimeoutHandler(Action`2<IdleStateHandler, IChannelHandlerContext> action);
    private static void HandleReadTimeout(IdleStateHandler self, IChannelHandlerContext context);
    private static void HandleWriteTimeout(IdleStateHandler self, IChannelHandlerContext context);
    private static void HandleAllTimeout(IdleStateHandler self, IChannelHandlerContext context);
}
public class DotNetty.Handlers.Timeout.ReadTimeoutException : TimeoutException {
    public static ReadTimeoutException Instance;
    public ReadTimeoutException(string message);
    private static ReadTimeoutException();
}
public class DotNetty.Handlers.Timeout.ReadTimeoutHandler : IdleStateHandler {
    private bool closed;
    public ReadTimeoutHandler(int timeoutSeconds);
    public ReadTimeoutHandler(TimeSpan timeout);
    protected virtual void ChannelIdle(IChannelHandlerContext context, IdleStateEvent stateEvent);
    protected virtual void ReadTimedOut(IChannelHandlerContext context);
}
public class DotNetty.Handlers.Timeout.WriteTimeoutException : TimeoutException {
    public static WriteTimeoutException Instance;
    public WriteTimeoutException(string message);
    private static WriteTimeoutException();
}
public class DotNetty.Handlers.Timeout.WriteTimeoutHandler : ChannelHandlerAdapter {
    private static TimeSpan MinTimeout;
    private TimeSpan timeout;
    private bool closed;
    private LinkedList`1<WriteTimeoutTask> tasks;
    public WriteTimeoutHandler(int timeoutSeconds);
    public WriteTimeoutHandler(TimeSpan timeout);
    private static WriteTimeoutHandler();
    public virtual Task WriteAsync(IChannelHandlerContext context, object message);
    public virtual void HandlerRemoved(IChannelHandlerContext context);
    private void ScheduleTimeout(IChannelHandlerContext context, Task future);
    private void AddWriteTimeoutTask(WriteTimeoutTask task);
    private void RemoveWriteTimeoutTask(WriteTimeoutTask task);
    protected virtual void WriteTimedOut(IChannelHandlerContext context);
}
public class DotNetty.Handlers.TimeoutException : IOException {
    public TimeoutException(string message);
}
public class DotNetty.Handlers.Tls.ClientTlsSettings : TlsSettings {
    [CompilerGeneratedAttribute]
private X509CertificateCollection <X509CertificateCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<X509Certificate> <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHost>k__BackingField;
    internal X509CertificateCollection X509CertificateCollection { get; internal set; }
    public IReadOnlyCollection`1<X509Certificate> Certificates { get; }
    public string TargetHost { get; }
    public ClientTlsSettings(string targetHost);
    public ClientTlsSettings(string targetHost, List`1<X509Certificate> certificates);
    public ClientTlsSettings(bool checkCertificateRevocation, List`1<X509Certificate> certificates, string targetHost);
    public ClientTlsSettings(SslProtocols enabledProtocols, bool checkCertificateRevocation, List`1<X509Certificate> certificates, string targetHost);
    [CompilerGeneratedAttribute]
internal X509CertificateCollection get_X509CertificateCollection();
    [CompilerGeneratedAttribute]
internal void set_X509CertificateCollection(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<X509Certificate> get_Certificates();
    [CompilerGeneratedAttribute]
public string get_TargetHost();
}
public class DotNetty.Handlers.Tls.NotSslRecordException : Exception {
    public NotSslRecordException(string message);
    public NotSslRecordException(Exception cause);
    public NotSslRecordException(string message, Exception cause);
}
public class DotNetty.Handlers.Tls.ServerTlsSettings : TlsSettings {
    [CompilerGeneratedAttribute]
private X509Certificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NegotiateClientCertificate>k__BackingField;
    public X509Certificate Certificate { get; }
    public bool NegotiateClientCertificate { get; }
    public ServerTlsSettings(X509Certificate certificate);
    public ServerTlsSettings(X509Certificate certificate, bool negotiateClientCertificate);
    public ServerTlsSettings(X509Certificate certificate, bool negotiateClientCertificate, bool checkCertificateRevocation);
    public ServerTlsSettings(X509Certificate certificate, bool negotiateClientCertificate, bool checkCertificateRevocation, SslProtocols enabledProtocols);
    [CompilerGeneratedAttribute]
public X509Certificate get_Certificate();
    [CompilerGeneratedAttribute]
public bool get_NegotiateClientCertificate();
}
public class DotNetty.Handlers.Tls.ServerTlsSniSettings : object {
    [CompilerGeneratedAttribute]
private Func`2<string, Task`1<ServerTlsSettings>> <ServerTlsSettingMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultServerHostName>k__BackingField;
    public Func`2<string, Task`1<ServerTlsSettings>> ServerTlsSettingMap { get; }
    public string DefaultServerHostName { get; }
    public ServerTlsSniSettings(Func`2<string, Task`1<ServerTlsSettings>> serverTlsSettingMap, string defaultServerHostName);
    [CompilerGeneratedAttribute]
public Func`2<string, Task`1<ServerTlsSettings>> get_ServerTlsSettingMap();
    [CompilerGeneratedAttribute]
public string get_DefaultServerHostName();
}
public class DotNetty.Handlers.Tls.SniHandler : ByteToMessageDecoder {
    private static int MAX_SSL_RECORDS;
    private static IInternalLogger Logger;
    private Func`2<Stream, SslStream> sslStreamFactory;
    private ServerTlsSniSettings serverTlsSniSettings;
    private bool handshakeFailed;
    private bool suppressRead;
    private bool readPending;
    public SniHandler(ServerTlsSniSettings settings);
    public SniHandler(Func`2<Stream, SslStream> sslStreamFactory, ServerTlsSniSettings settings);
    private static SniHandler();
    protected virtual void Decode(IChannelHandlerContext context, IByteBuffer input, List`1<object> output);
    [AsyncStateMachineAttribute("DotNetty.Handlers.Tls.SniHandler/<Select>d__10")]
private void Select(IChannelHandlerContext context, string hostName);
    private void ReplaceHandler(IChannelHandlerContext context, ServerTlsSettings serverTlsSetting);
    public virtual void Read(IChannelHandlerContext context);
}
public class DotNetty.Handlers.Tls.TlsHandler : ByteToMessageDecoder {
    private TlsSettings settings;
    private static int FallbackReadBufferSize;
    private static int UnencryptedWriteBatchSize;
    private static Exception ChannelClosedException;
    private static Action`2<Task, object> HandshakeCompletionCallback;
    private SslStream sslStream;
    private MediationStreamBase mediationStream;
    private TaskCompletionSource closeFuture;
    private TlsHandlerState state;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<int, byte> packetInfo;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<int, byte>> pendingDataPackets;
    private IChannelHandlerContext modreq(System.Runtime.CompilerServices.IsVolatile) capturedContext;
    private BatchingPendingWriteQueue pendingUnencryptedWrites;
    private Task lastContextWriteTask;
    private bool firedChannelRead;
    private IByteBuffer pendingSslStreamReadBuffer;
    private Task`1<int> pendingSslStreamReadFuture;
    public X509Certificate2 LocalCertificate { get; }
    public X509Certificate2 RemoteCertificate { get; }
    private bool IsServer { get; }
    public TlsHandler(TlsSettings settings);
    public TlsHandler(Func`2<Stream, SslStream> sslStreamFactory, TlsSettings settings);
    private static TlsHandler();
    public static TlsHandler Client(string targetHost);
    public static TlsHandler Client(string targetHost, X509Certificate clientCertificate);
    public static TlsHandler Server(X509Certificate certificate);
    public X509Certificate2 get_LocalCertificate();
    public X509Certificate2 get_RemoteCertificate();
    private bool get_IsServer();
    public virtual void ChannelActive(IChannelHandlerContext context);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ExceptionCaught(IChannelHandlerContext context, Exception exception);
    private bool IgnoreException(Exception t);
    private static void HandleHandshakeCompleted(Task task, object state);
    private static void HandleHandshakeCompletedInternal(Task task, TlsHandler self);
    public virtual void HandlerAdded(IChannelHandlerContext context);
    protected virtual void HandlerRemovedInternal(IChannelHandlerContext context);
    protected virtual void Decode(IChannelHandlerContext context, IByteBuffer input, List`1<object> output);
    public virtual void ChannelReadComplete(IChannelHandlerContext ctx);
    private void ReadIfNeeded(IChannelHandlerContext ctx);
    private void Unwrap(IChannelHandlerContext ctx, IByteBuffer packet, int offset, int length, List`1<ValueTuple`2<int, byte>> packetInfos, List`1<object> output);
    private static void AddBufferToOutput(IByteBuffer outputBuffer, int length, List`1<object> output);
    private Task`1<int> ReadFromSslStreamAsync(IByteBuffer outputBuffer, int outputBufferLength);
    public virtual void Read(IChannelHandlerContext context);
    private bool EnsureAuthenticated();
    public virtual Task WriteAsync(IChannelHandlerContext context, object message);
    public virtual void Flush(IChannelHandlerContext context);
    private void Wrap(IChannelHandlerContext context);
    private void FinishWrap(Byte[] buffer, int offset, int count);
    private Task FinishWrapNonAppDataAsync(Byte[] buffer, int offset, int count);
    public virtual Task CloseAsync(IChannelHandlerContext context);
    private void HandleFailure(Exception cause);
    private void NotifyHandshakeFailure(Exception cause);
}
[FlagsAttribute]
internal enum DotNetty.Handlers.Tls.TlsHandlerState : Enum {
    public int value__;
    public static TlsHandlerState Authenticating;
    public static TlsHandlerState Authenticated;
    public static TlsHandlerState FailedAuthentication;
    public static TlsHandlerState ReadRequestedBeforeAuthenticated;
    public static TlsHandlerState FlushedBeforeHandshake;
    public static TlsHandlerState AuthenticationStarted;
    public static TlsHandlerState AuthenticationCompleted;
}
[ExtensionAttribute]
internal static class DotNetty.Handlers.Tls.TlsHandlerStateExtensions : object {
    [ExtensionAttribute]
public static bool Has(TlsHandlerState value, TlsHandlerState testValue);
    [ExtensionAttribute]
public static bool HasAny(TlsHandlerState value, TlsHandlerState testValue);
}
public class DotNetty.Handlers.Tls.TlsHandshakeCompletionEvent : object {
    public static TlsHandshakeCompletionEvent Success;
    private Exception exception;
    public bool IsSuccessful { get; }
    public Exception Exception { get; }
    public TlsHandshakeCompletionEvent(Exception exception);
    private static TlsHandshakeCompletionEvent();
    public bool get_IsSuccessful();
    public Exception get_Exception();
    public virtual string ToString();
}
public abstract class DotNetty.Handlers.Tls.TlsSettings : object {
    [CompilerGeneratedAttribute]
private SslProtocols <EnabledProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocation>k__BackingField;
    public SslProtocols EnabledProtocols { get; }
    public bool CheckCertificateRevocation { get; }
    protected TlsSettings(SslProtocols enabledProtocols, bool checkCertificateRevocation);
    [CompilerGeneratedAttribute]
public SslProtocols get_EnabledProtocols();
    [CompilerGeneratedAttribute]
public bool get_CheckCertificateRevocation();
}
internal static class DotNetty.Handlers.Tls.TlsUtils : object {
    private static int MAX_PLAINTEXT_LENGTH;
    private static int MAX_COMPRESSED_LENGTH;
    private static int MAX_CIPHERTEXT_LENGTH;
    public static int MAX_ENCRYPTED_PACKET_LENGTH;
    public static int SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC;
    public static int SSL_CONTENT_TYPE_ALERT;
    public static int SSL_CONTENT_TYPE_HANDSHAKE;
    public static int SSL_CONTENT_TYPE_APPLICATION_DATA;
    public static int SSL_RECORD_HEADER_LENGTH;
    public static int NOT_ENOUGH_DATA;
    public static int NOT_ENCRYPTED;
    public static int GetEncryptedPacketLength(IByteBuffer buffer, int offset, Byte& contentType);
    public static int GetEncryptedPacketLength(IByteBuffer buffer, int offset);
    public static void NotifyHandshakeFailure(IChannelHandlerContext ctx, Exception cause);
    public static string FormatContentType(byte contentType);
}
