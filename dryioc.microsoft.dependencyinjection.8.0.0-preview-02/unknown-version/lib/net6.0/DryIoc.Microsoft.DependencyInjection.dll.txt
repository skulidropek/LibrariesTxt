public enum DryIoc.Microsoft.DependencyInjection.CheckExistingContainerIsConforming : Enum {
    public int value__;
    public static CheckExistingContainerIsConforming CheckAndConformIfNeeded;
    public static CheckExistingContainerIsConforming SkipIsConformingCheck;
}
[ExtensionAttribute]
public static class DryIoc.Microsoft.DependencyInjection.DryIocAdapter : object {
    public static ParameterSelector SelectServiceKeyForParameterWithServiceKeyAttribute;
    public static ParameterSelector SelectServiceKeyFor2ndParameterOfKeyedImplementationFactory;
    public static Rules MicrosoftDependencyInjectionRules;
    internal static MethodInfo KeyedImplementationFactoryInvokeMethod;
    private static DryIocAdapter();
    private static ParameterServiceInfo GetServiceKeyAsParameterValue(Request req, ParameterInfo par);
    [ExtensionAttribute]
public static Rules WithMicrosoftDependencyInjectionRules(Rules rules);
    [ExtensionAttribute]
public static bool HasMicrosoftDependencyInjectionRules(Rules rules);
    [ExtensionAttribute]
public static DryIocServiceProvider WithDependencyInjectionAdapter(IContainer container, IEnumerable`1<ServiceDescriptor> descriptors, Func`3<IRegistrator, ServiceDescriptor, bool> registerDescriptor, RegistrySharing registrySharing, CheckExistingContainerIsConforming checkContainerIsConforming);
    [ExtensionAttribute]
public static DryIocServiceProvider BuildDryIocServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static IContainer WithCompositionRoot(IContainer container, Type compositionRootType);
    [ExtensionAttribute]
public static IContainer WithCompositionRoot(IContainer container);
    [ExtensionAttribute]
public static IServiceProvider GetServiceProvider(IContainer container);
    [ExtensionAttribute]
public static IServiceProvider ConfigureServiceProvider(IContainer container);
    [ExtensionAttribute]
public static void Populate(IContainer container, IEnumerable`1<ServiceDescriptor> descriptors, Func`3<IRegistrator, ServiceDescriptor, bool> registerDescriptor);
    [ExtensionAttribute]
public static IReuse ToReuse(ServiceLifetime lifetime);
    [ExtensionAttribute]
public static void RegisterDescriptor(IContainer container, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void RegisterDescriptor(IContainer container, ServiceDescriptor descriptor, IfAlreadyRegistered ifAlreadyRegistered, object serviceKey);
}
public class DryIoc.Microsoft.DependencyInjection.DryIocServiceProvider : object {
    public IContainer Container;
    private IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider { get; }
    public DryIocServiceProvider(IContainer container);
    private sealed virtual override IServiceScope Microsoft.Extensions.DependencyInjection.IServiceScopeFactory.CreateScope();
    private sealed virtual override IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceScope.get_ServiceProvider();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual bool IsService(Type serviceType);
    public sealed virtual object GetRequiredService(Type serviceType);
    public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    public sealed virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
    public sealed virtual bool IsKeyedService(Type serviceType, object serviceKey);
    public sealed virtual void Dispose();
}
public class DryIoc.Microsoft.DependencyInjection.DryIocServiceProviderFactory : object {
    private Func`3<IRegistrator, ServiceDescriptor, bool> _registerDescriptor;
    private RegistrySharing _registrySharing;
    public IContainer InitialContainer;
    public DryIocServiceProviderFactory(IContainer container, Func`3<IRegistrator, ServiceDescriptor, bool> registerDescriptor);
    public DryIocServiceProviderFactory(IContainer container, RegistrySharing registrySharing, Func`3<IRegistrator, ServiceDescriptor, bool> registerDescriptor);
    public virtual DryIocServiceProvider CreateBuilder(IServiceCollection services);
    public virtual IServiceProvider CreateServiceProvider(DryIocServiceProvider provider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
