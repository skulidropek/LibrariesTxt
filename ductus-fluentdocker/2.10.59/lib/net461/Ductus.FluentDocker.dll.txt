public abstract class Ductus.FluentDocker.Builders.BaseBuilder`1 : object {
    private Option`1<IBuilder> _parent;
    protected IList`1<IBuilder> Childs;
    private Option`1<IBuilder> Ductus.FluentDocker.Builders.IBuilder.Parent { get; }
    private Option`1<IBuilder> Ductus.FluentDocker.Builders.IBuilder.Root { get; }
    public IReadOnlyCollection`1<IBuilder> Children { get; }
    protected BaseBuilder`1(IBuilder parent);
    private sealed virtual override Option`1<IBuilder> Ductus.FluentDocker.Builders.IBuilder.get_Parent();
    private sealed virtual override Option`1<IBuilder> Ductus.FluentDocker.Builders.IBuilder.get_Root();
    public sealed virtual IReadOnlyCollection`1<IBuilder> get_Children();
    public abstract virtual T Build();
    private sealed virtual override IBuilder Ductus.FluentDocker.Builders.IBuilder.Create();
    private sealed virtual override IService Ductus.FluentDocker.Builders.IBuilder.Build();
    public Builder Builder();
    protected abstract virtual IBuilder InternalCreate();
    protected Option`1<Builder> FindBuilder();
    protected Option`1<IHostService> FindHostService();
}
public class Ductus.FluentDocker.Builders.Builder : BaseBuilder`1<ICompositeService> {
    public Builder(IBuilder parent);
    public virtual ICompositeService Build();
    protected virtual IBuilder InternalCreate();
    public HostBuilder UseHost();
    public ImageBuilder DefineImage(string image);
    public ContainerBuilder UseContainer();
    public NetworkBuilder UseNetwork(string name);
    public VolumeBuilder UseVolume(string name);
    private HostBuilder FindOrDefineHostBuilder();
    private static void InternalBuild(IList`1<IService> services, IBuilder builder);
}
public class Ductus.FluentDocker.Builders.ComposeServiceBuilder : object {
    private ComposeServiceDefinition _config;
    internal ComposeServiceBuilder(string name);
    public ComposeServiceBuilder Image(string image);
    public ComposeServiceBuilder Volume(TemplateString containerPath, TemplateString hostPath, bool isReadonly, String[] options);
    public ComposeServiceBuilder Volume(TemplateString containerPath, TemplateString hostPath);
    public ComposeServiceBuilder Restart(RestartPolicy policy);
    public ComposeServiceBuilder Environment(String[] nameAndValue);
    public ComposeServiceBuilder DependsOn(String[] services);
    public ComposeServiceBuilder Ports(int target, int published, PortMode mode, string protocol);
    public ComposeServiceBuilder Ports(String[] ports);
}
[ExperimentalAttribute("", "")]
public class Ductus.FluentDocker.Builders.CompositeBuilder : BaseBuilder`1<ICompositeService> {
    private DockerComposeFileConfig _config;
    internal CompositeBuilder(IBuilder parent, string composeFile);
    public virtual ICompositeService Build();
    private void AddHooks(ICompositeService container);
    public CompositeBuilder FromFile(String[] composeFile);
    public CompositeBuilder UseProjectDir(TemplateString projectDir);
    public CompositeBuilder AssumeComposeVersion(ComposeVersion composeVersion);
    public CompositeBuilder AlwaysPull();
    public CompositeBuilder ForceRecreate();
    public CompositeBuilder NoRecreate();
    public CompositeBuilder NoBuild();
    public CompositeBuilder ForceBuild();
    public CompositeBuilder Timeout(TimeSpan timeoutInSeconds);
    public CompositeBuilder RemoveOrphans();
    public CompositeBuilder ServiceName(string name);
    public CompositeBuilder UseColor();
    public CompositeBuilder KeepVolumes();
    public CompositeBuilder RemoveAllImages();
    public CompositeBuilder RemoveNonTaggedImages();
    public CompositeBuilder KeepRunning();
    public CompositeBuilder KeepContainer();
    public CompositeBuilder WithEnvironment(String[] nameValue);
    public CompositeBuilder KeepOnDispose();
    public CompositeBuilder ExportOnDispose(string service, string hostPath, Func`2<IContainerService, bool> condition);
    [ObsoleteAttribute("Please use the properly spelled `ExportExplodedOnDispose` method instead.")]
public CompositeBuilder ExportExploadedOnDispose(string service, string hostPath, Func`2<IContainerService, bool> condition);
    public CompositeBuilder ExportExplodedOnDispose(string service, string hostPath, Func`2<IContainerService, bool> condition);
    public CompositeBuilder CopyOnStart(string service, string hostPath, string containerPath);
    public CompositeBuilder CopyOnDispose(string service, string containerPath, string hostPath);
    public CompositeBuilder WaitForPort(string service, string portAndProto, long millisTimeout, string address);
    public CompositeBuilder WaitForProcess(string service, string process, long millisTimeout);
    public CompositeBuilder Wait(string service, Func`3<IContainerService, int, int> continuation);
    public CompositeBuilder ExecuteOnRunning(string service, String[] execute);
    public CompositeBuilder ExecuteOnDisposing(string service, String[] execute);
    public CompositeBuilder WaitForHttp(string service, string url, long timeout, Func`3<RequestResponse, int, long> continuation, HttpMethod method, string contentType, string body);
    private ContainerSpecificConfig GetContainerSpecificConfig(string service);
    protected virtual IBuilder InternalCreate();
}
public class Ductus.FluentDocker.Builders.ContainerBuilder : BaseBuilder`1<IContainerService> {
    private ContainerBuilderConfig _config;
    private RepositoryBuilder _repositoryBuilder;
    internal ContainerBuilder(IBuilder parent);
    public virtual IContainerService Build();
    protected virtual IBuilder InternalCreate();
    public ContainerBuilder RemoveVolumesOnDispose(bool includeNamedVolues);
    public ContainerBuilder UseImage(string image, bool force);
    public ContainerBuilder UseCustomResolver(Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> customResolver);
    public ContainerBuilder WithCredential(string server, string user, string password);
    public ContainerBuilder IsWindowsImage();
    public ImageBuilder FromImage(string image);
    public CompositeBuilder UseCompose();
    public CompositeBuilder FromComposeFile(string composeFile);
    public ContainerBuilder WithName(string name);
    public ContainerBuilder WithHostName(string name);
    public ContainerBuilder WithMemoryLimit(string memoryLimit);
    public ContainerBuilder WithMemorySwap(string memorySwap);
    public ContainerBuilder Command(string command, String[] arguments);
    public ContainerBuilder IsPrivileged();
    public ContainerBuilder WithEnvironment(String[] nameValue);
    public ContainerBuilder UseEnvironmentFile(String[] file);
    public ContainerBuilder WithParentCGroup(int cgroup);
    public ContainerBuilder UseCapability(String[] capability);
    public ContainerBuilder RemoveCapability(String[] capability);
    public ContainerBuilder UseVolumeDriver(string driver);
    public ContainerBuilder HostIpMapping(string host, string ip);
    public ContainerBuilder UseDns(String[] server);
    public ContainerBuilder UseDnsSearch(String[] searchArg);
    public ContainerBuilder UseDnsOption(String[] option);
    public ContainerBuilder ExposePort(int hostPort, int containerPort, string protocol);
    public ContainerBuilder ExposePort(int containerPort);
    public ContainerBuilder ExposeAllPorts();
    private void EnsurePublishAllPortsIsFalse();
    private void EnsurePortMappingsIsEmpty();
    [DeprecatedAttribute("Will be removed since replaced by UseHealthCheck", "")]
public ContainerBuilder HealthCheck(string cmd);
    public ContainerBuilder UseNoHealthCheck();
    public ContainerBuilder UseHealthCheck(string cmd, string interval, string timeout, string startPeriod, int retries);
    public ContainerBuilder WithIPC(string ipc);
    public ContainerBuilder UseRuntime(ContainerRuntime runtime);
    public ContainerBuilder MountTmpfs(String[] destinations);
    public ContainerBuilder Mount(string fqHostPath, string fqContainerPath, MountType access);
    public ContainerBuilder MountVolume(string name, string fqContainerPath, MountType access);
    public ContainerBuilder MountVolume(IVolumeService volume, string fqContainerPath, MountType access);
    public ContainerBuilder MountFrom(String[] from);
    public ContainerBuilder UseWorkDir(string workingDirectory);
    public ContainerBuilder Link(String[] container);
    public ContainerBuilder WithLabel(String[] label);
    public ContainerBuilder UseGroup(String[] group);
    public ContainerBuilder AsUser(string user);
    public ContainerBuilder KeepRunning();
    public ContainerBuilder KeepContainer();
    public ContainerBuilder ReuseIfExists();
    public ContainerBuilder DeleteIfExists(bool removeVolumes, bool force, string removeLink);
    public ContainerBuilder UseNetwork(INetworkService[] network);
    public ContainerBuilder UseNetworksWithAlias(string alias, INetworkService[] networks);
    public ContainerBuilder UseNetwork(String[] network);
    public ContainerBuilder UseNetworksWithAlias(string alias, String[] networks);
    public ContainerBuilder UseIpV4(string ipv4);
    public ContainerBuilder UseIpV6(string ipv6);
    public ContainerBuilder UseUlimit(Ulimit ulimit, string soft, string hard);
    public ContainerBuilder UseUlimit(Ulimit ulimit, long soft, Nullable`1<long> hard);
    public ContainerBuilder ExportOnDispose(string hostPath, Func`2<IContainerService, bool> condition);
    [ObsoleteAttribute("Please use the properly spelled `ExportExplodedOnDispose` method instead.")]
public ContainerBuilder ExportExploadedOnDispose(string hostPath, Func`2<IContainerService, bool> condition);
    public ContainerBuilder ExportExplodedOnDispose(string hostPath, Func`2<IContainerService, bool> condition);
    public ContainerBuilder CopyOnStart(string hostPath, string containerPath);
    public ContainerBuilder CopyOnDispose(string containerPath, string hostPath);
    public ContainerBuilder WaitForPort(string portAndProto, double millisTimeout, string address);
    public ContainerBuilder WaitForMessageInLog(string message, TimeSpan timeout);
    public ContainerBuilder WaitForHealthy(TimeSpan timeout);
    public ContainerBuilder WaitForPort(string portAndProto, TimeSpan timeout, string address);
    public ContainerBuilder WaitForPort(string portAndProto, long millisTimeout, string address);
    public ContainerBuilder Wait(string service, Func`3<IContainerService, int, int> continuation);
    public ContainerBuilder WaitForHttp(string url, long timeout, Func`3<RequestResponse, int, long> continuation, HttpMethod method, string contentType, string body);
    public ContainerBuilder WaitForProcess(string process, long millisTimeout);
    public ContainerBuilder ExecuteOnRunning(String[] execute);
    public ContainerBuilder ExecuteOnDisposing(String[] execute);
    private void AddHooks(IService container);
    private static bool IsNameMatch(string containerName, string test);
    [CompilerGeneratedAttribute]
private bool <Build>b__3_0(IContainerService x);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_0(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_1(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_2(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_3(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_4(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_5(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_6(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_7(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_8(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_9(IService service);
    [CompilerGeneratedAttribute]
private void <AddHooks>b__76_10(IService service);
}
public class Ductus.FluentDocker.Builders.FileBuilder : object {
    private FileBuilderConfig _config;
    private ImageBuilder _parent;
    private TemplateString _workingFolder;
    private string _lastContents;
    internal FileBuilder(ImageBuilder parent);
    internal string PrepareBuild();
    public IContainerImageService Build();
    public Builder Builder();
    public ImageBuilder ToImage();
    public FileBuilder WorkingFolder(TemplateString workingFolder);
    public FileBuilder UseParent(string from);
    public FileBuilder From(TemplateString imageAndTag, TemplateString asName, TemplateString platform);
    public FileBuilder Maintainer(string maintainer);
    public FileBuilder Add(TemplateString source, TemplateString destination);
    public FileBuilder Shell(string command, String[] args);
    public FileBuilder Run(TemplateString[] commands);
    public FileBuilder WithHealthCheck(string cmd, string interval, string timeout, string startPeriod, int retries);
    public FileBuilder Copy(TemplateString source, TemplateString dest, TemplateString chownUserAndGroup, TemplateString fromAlias);
    public FileBuilder UseWorkDir(string workdir);
    public FileBuilder ExposePorts(Int32[] ports);
    public FileBuilder Environment(TemplateString[] nameValue);
    public FileBuilder Label(TemplateString[] nameValue);
    public FileBuilder Arguments(TemplateString name, TemplateString defaultValue);
    public FileBuilder Entrypoint(string command, String[] args);
    public FileBuilder User(TemplateString user, TemplateString group);
    public FileBuilder Volume(TemplateString[] mountpoints);
    public FileBuilder Command(string command, String[] args);
    public FileBuilder FromFile(string file);
    public FileBuilder FromString(string dockerFileAsString);
    private void CopyToWorkDir(TemplateString workingFolder);
    private void RenderDockerfile(TemplateString workingFolder);
    private string ResolveOrBuildString();
    public string ToDockerfileString();
}
public class Ductus.FluentDocker.Builders.HostBuilder : BaseBuilder`1<IHostService> {
    private IHostService customHostService;
    [CompilerGeneratedAttribute]
private bool <IsNative>k__BackingField;
    public bool IsNative { get; private set; }
    internal HostBuilder(IBuilder builder);
    public virtual IHostService Build();
    protected virtual IBuilder InternalCreate();
    [CompilerGeneratedAttribute]
public bool get_IsNative();
    [CompilerGeneratedAttribute]
private void set_IsNative(bool value);
    public HostBuilder UseNative();
    public HostBuilder WithService(IHostService customHostService);
    public HostBuilder FromUri(DockerUri uri, string name, bool isNative, bool stopWhenDisposed, bool isWindowsHost, string certificatePath);
    public MachineBuilder UseMachine();
    public RemoteSshHostBuilder UseSsh(string ipAddress);
    public ImageBuilder DefineImage(string image);
    public ContainerBuilder UseContainer();
    public NetworkBuilder UseNetwork(string name);
    public VolumeBuilder UseVolume(string name);
}
public interface Ductus.FluentDocker.Builders.IBuilder {
    public Option`1<IBuilder> Parent { get; }
    public Option`1<IBuilder> Root { get; }
    public IReadOnlyCollection`1<IBuilder> Children { get; }
    public abstract virtual Option`1<IBuilder> get_Parent();
    public abstract virtual Option`1<IBuilder> get_Root();
    public abstract virtual IReadOnlyCollection`1<IBuilder> get_Children();
    public abstract virtual IBuilder Create();
    public abstract virtual IService Build();
}
public interface Ductus.FluentDocker.Builders.IBuilder`1 {
    public abstract virtual T Build();
}
public class Ductus.FluentDocker.Builders.ImageBuilder : BaseBuilder`1<IContainerImageService> {
    private ImageBuilderConfig _config;
    private FileBuilder _fileBuilder;
    internal ImageBuilder(IBuilder parent);
    public virtual IContainerImageService Build();
    protected virtual IBuilder InternalCreate();
    public FileBuilder From(string imageAndTag);
    public FileBuilder From(string imageAndTag, string asName);
    public FileBuilder FromFile(string dockerFile);
    public FileBuilder FromString(string dockerfileString);
    public ImageBuilder IsWindowsHost();
    public ImageBuilder ReuseIfAlreadyExists();
    public ImageBuilder AsImageName(string name);
    public ImageBuilder ImageTag(String[] tags);
    public ImageBuilder BuildArguments(String[] args);
    public ImageBuilder NoVerifyImage();
    public ImageBuilder Label(String[] labels);
    public ImageBuilder NoCache();
    public ImageBuilder AlwaysPull();
    public ImageBuilder WithIsolation(ContainerIsolationTechnology isolation);
    public ImageBuilder RemoveIntermediate(bool force);
}
public class Ductus.FluentDocker.Builders.MachineBuilder : BaseBuilder`1<IHostService> {
    private HostBuilderConfig _config;
    internal MachineBuilder(IBuilder parent);
    public virtual IHostService Build();
    protected virtual IBuilder InternalCreate();
    public MachineBuilder UseDriver(string driver);
    public MachineBuilder WithName(string machineName);
    public MachineBuilder CpuCount(int numCpus);
    public MachineBuilder Memory(int memoryMb);
    public MachineBuilder StorageSize(int storageMb);
    public HostBuilder Host();
    public ImageBuilder DefineImage(string image);
    public ContainerBuilder UseContainer();
}
public class Ductus.FluentDocker.Builders.NetworkBuilder : BaseBuilder`1<INetworkService> {
    private NetworkCreateParams _config;
    private string _name;
    private bool _removeOnDispose;
    private bool _reuseIfExist;
    public NetworkBuilder(IBuilder parent, string name);
    public virtual INetworkService Build();
    public ImageBuilder DefineImage(string image);
    public ContainerBuilder UseContainer();
    public NetworkBuilder WithName(string name);
    public NetworkBuilder ReuseIfExist();
    [DeprecatedAttribute("Wrong Spelling, replaced with KeepOnDispose", "3.0.0")]
public NetworkBuilder KeepOnDispse();
    public NetworkBuilder KeepOnDispose();
    public NetworkBuilder UseAuxAddress(string name, string ip);
    public NetworkBuilder UseDriver(string driverName);
    public NetworkBuilder UseDriverOption(string name, string value);
    public NetworkBuilder UseGateway(String[] gateway);
    public NetworkBuilder IsInternal();
    public NetworkBuilder IsAttachAble();
    public NetworkBuilder UseIpRange(String[] iprange);
    public NetworkBuilder UseIpamOption(string name, string value);
    public NetworkBuilder EnableIpV6();
    public NetworkBuilder UseLabel(String[] labels);
    public NetworkBuilder UseSubnet(String[] subnets);
    protected virtual IBuilder InternalCreate();
    [CompilerGeneratedAttribute]
private bool <Build>b__5_0(INetworkService x);
}
public class Ductus.FluentDocker.Builders.RemoteSshHostBuilder : BaseBuilder`1<IHostService> {
    private string _ipAddress;
    private string _name;
    private int _port;
    private string _sshUser;
    private string _sshKeyPath;
    internal RemoteSshHostBuilder(IBuilder parent, string ipAddress);
    public virtual IHostService Build();
    public RemoteSshHostBuilder WithName(string name);
    public RemoteSshHostBuilder UseIpAddress(string ipAddress);
    public RemoteSshHostBuilder UsePort(int port);
    public RemoteSshHostBuilder WithSshKeyPath(TemplateString path);
    public RemoteSshHostBuilder WithSshUser(string user);
    public HostBuilder Host();
    public ImageBuilder DefineImage(string image);
    public ContainerBuilder UseContainer();
    protected virtual IBuilder InternalCreate();
}
public class Ductus.FluentDocker.Builders.RepositoryBuilder : object {
    private string _server;
    private string _user;
    private string _password;
    public RepositoryBuilder(string server, string user, string pass);
    public RepositoryBuilder Server(string server);
    public RepositoryBuilder User(string user);
    public RepositoryBuilder Password(string password);
    public RepositoryBuilder Build(IHostService host);
}
public class Ductus.FluentDocker.Builders.VolumeBuilder : BaseBuilder`1<IVolumeService> {
    private List`1<string> _labels;
    private Dictionary`2<string, string> _options;
    private string _driver;
    private string _name;
    private bool _removeOnDispose;
    private bool _reuseIfExist;
    public VolumeBuilder(IBuilder parent, string name);
    public virtual IVolumeService Build();
    public VolumeBuilder WithName(string name);
    [ObsoleteAttribute("Please use the properly spelled `UsingDriver` method instead.")]
public VolumeBuilder UseingDriver(string driver);
    public VolumeBuilder UsingDriver(string driver);
    public VolumeBuilder RemoveOnDispose();
    public VolumeBuilder ReuseIfExist();
    public VolumeBuilder UseLabel(String[] label);
    public VolumeBuilder UseOption(String[] nameValue);
    protected virtual IBuilder InternalCreate();
    [CompilerGeneratedAttribute]
private bool <Build>b__7_0(IVolumeService x);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Client : object {
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Login(DockerUri host, string server, string user, string pass, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Logout(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Pull(DockerUri host, string image, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Pause(DockerUri host, ICertificatePaths certificates, String[] containerIds);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> UnPause(DockerUri host, ICertificatePaths certificates, String[] containerIds);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Build(DockerUri host, string name, string tag, string workdir, ContainerBuildParams prms, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<DockerImageRowResponse>> Images(DockerUri host, ICertificatePaths certificates, String[] filters);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Ps(DockerUri host, string options, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> Create(DockerUri host, string image, string command, String[] args, ContainerCreateParams prms, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> Run(DockerUri host, string image, ContainerCreateParams args, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Execute(DockerUri host, string id, string execArgs, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Start(DockerUri host, string id, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> Stop(DockerUri host, string id, Nullable`1<TimeSpan> killTimeout, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> RemoveContainer(DockerUri host, string id, bool force, bool removeVolumes, string removeLink, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<Processes> Top(DockerUri host, string id, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<Container> InspectContainer(DockerUri host, string id, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<Container>> InspectContainers(DockerUri host, ICertificatePaths certificates, String[] containerIds);
    [ExtensionAttribute]
public static CommandResponse`1<ImageConfig> InspectImage(DockerUri host, string id, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> Export(DockerUri host, string id, string fqFilePath, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> CopyToContainer(DockerUri host, string id, string containerPath, string hostPath, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> CopyFromContainer(DockerUri host, string id, string containerPath, string hostPath, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<Diff>> Diff(DockerUri host, string id, ICertificatePaths certificates);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.ClientStreams : object {
    [ExtensionAttribute]
public static ConsoleStream`1<string> Logs(DockerUri host, string id, CancellationToken cancellationToken, bool follow, bool showTimeStamps, Nullable`1<DateTime> since, Nullable`1<int> numLines, ICertificatePaths certificates);
    [ExtensionAttribute]
public static ConsoleStream`1<string> Events(DockerUri host, CancellationToken cancellationToken, String[] filters, Nullable`1<DateTime> since, Nullable`1<DateTime> until, ICertificatePaths certificates);
    [ExtensionAttribute]
public static ConsoleStream`1<FdEvent> FdEvents(DockerUri host, CancellationToken cancellationToken, String[] filters, Nullable`1<DateTime> since, Nullable`1<DateTime> until, ICertificatePaths certificates);
    [ExtensionAttribute]
public static ConsoleStream`1<TE> Events(DockerUri host, CancellationToken cancellationToken, String[] filters, Nullable`1<DateTime> since, Nullable`1<DateTime> until, ICertificatePaths certificates);
}
public static class Ductus.FluentDocker.Commands.CommandDefaults : object {
    [CompilerGeneratedAttribute]
private static string <MachineDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <MachineExtraDefaultCreateArgs>k__BackingField;
    public static string MachineDriver { get; public set; }
    public static string MachineExtraDefaultCreateArgs { get; public set; }
    private static CommandDefaults();
    [CompilerGeneratedAttribute]
public static string get_MachineDriver();
    [CompilerGeneratedAttribute]
public static void set_MachineDriver(string value);
    [CompilerGeneratedAttribute]
public static string get_MachineExtraDefaultCreateArgs();
    [CompilerGeneratedAttribute]
public static void set_MachineExtraDefaultCreateArgs(string value);
    public static void AutoDetect();
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Compose : object {
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeBuild(DockerUri host, string altProjectName, bool forceRm, bool dontUseCache, bool alwaysPull, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeCreate(DockerUri host, string altProjectName, bool forceRecreate, bool noRecreate, bool dontBuild, bool buildBeforeCreate, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeStart(DockerUri host, string altProjectName, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeKill(DockerUri host, string altProjectName, UnixSignal signal, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeStop(DockerUri host, string altProjectName, Nullable`1<TimeSpan> timeout, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposePause(DockerUri host, string altProjectName, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeUnPause(DockerUri host, string altProjectName, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeScale(DockerUri host, string altProjectName, Nullable`1<TimeSpan> shutdownTimeout, String[] serviceEqNumber, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeVersion(DockerUri host, string altProjectName, bool shortVersion, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeRestart(DockerUri host, string altProjectName, String[] composeFile, Nullable`1<TimeSpan> timeout, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] containerId);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposePort(DockerUri host, string containerId, string privatePortAndProto, string altProjectName, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeConfig(DockerUri host, string altProjectName, bool quiet, bool outputServices, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeDown(DockerUri host, string altProjectName, ImageRemovalOption removeImagesFrom, bool removeVolumes, bool removeOrphanContainers, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ComposeUpCommand(...)")]
public static CommandResponse`1<IList`1<string>> ComposeUp(DockerUri host, string altProjectName, bool forceRecreate, bool noRecreate, bool dontBuild, bool buildBeforeCreate, Nullable`1<TimeSpan> timeout, bool removeOrphans, bool useColor, bool noStart, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeUpCommand(DockerUri host, ComposeUpCommandArgs ca);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposeRm(DockerUri host, string altProjectName, bool force, bool removeVolumes, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposePs(DockerUri host, string altProjectName, String[] services, IDictionary`2<string, string> env, ICertificatePaths certificates, String[] composeFile);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ComposePull(DockerUri host, ComposePullCommandArgs commandArgs);
    private static WorkingDirectoryInfo WorkingDirectory(String[] composeFile);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.ComposeStreams : object {
    [ExtensionAttribute]
public static ConsoleStream`1<string> ComposeLogs(DockerUri host, string altProjectName, string composeFile, String[] services, CancellationToken cancellationToken, bool follow, bool showTimeStamps, Nullable`1<DateTime> since, Nullable`1<int> numLines, bool noColor, ICertificatePaths certificates);
    [ExtensionAttribute]
public static ConsoleStream`1<string> ComposeEvents(DockerUri host, string altProjectName, string composeFile, String[] services, CancellationToken cancellationToken, bool json, ICertificatePaths certificates);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Info : object {
    [ExtensionAttribute]
public static CommandResponse`1<DockerInfoBase> Version(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static bool IsWindowsEngine(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static bool IsLinuxEngine(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> Switch(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> LinuxDaemon(DockerUri host, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<string> WindowsDaemon(DockerUri host, ICertificatePaths certificates);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Machine : object {
    public static bool IsPresent();
    public static CommandResponse`1<IList`1<MachineLsResponse>> Ls();
    [ExtensionAttribute]
public static CommandResponse`1<MachineConfiguration> Inspect(string machine);
    [ExtensionAttribute]
public static CommandResponse`1<string> Start(string machine);
    [ExtensionAttribute]
public static CommandResponse`1<string> Stop(string machine);
    [ExtensionAttribute]
public static CommandResponse`1<IDictionary`2<string, string>> Environment(string machine);
    [ExtensionAttribute]
public static CommandResponse`1<string> Create(string machine, string driver, String[] options);
    [ExtensionAttribute]
public static CommandResponse`1<string> Create(string machine, int memMb, int volumeMb, int cpuCnt, String[] options);
    [ExtensionAttribute]
public static CommandResponse`1<string> Delete(string machine, bool force);
    [ExtensionAttribute]
public static CommandResponse`1<string> ManuallyDelete(string machine);
    [ExtensionAttribute]
public static DockerUri Uri(string machine);
    [ExtensionAttribute]
public static ServiceRunningState Status(string machine);
    [ExtensionAttribute]
public static ServiceRunningState ToMachineServiceRunningState(string state);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Network : object {
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<NetworkRow>> NetworkLs(DockerUri host, ICertificatePaths certificates, String[] filters);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> NetworkConnect(DockerUri host, string container, string network, String[] alias, string ipv4, string ipv6, ICertificatePaths certificates, String[] links);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> NetworkDisconnect(DockerUri host, string container, string network, bool force, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<NetworkConfiguration> NetworkInspect(DockerUri host, ICertificatePaths certificates, String[] network);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> NetworkRm(DockerUri host, ICertificatePaths certificates, String[] network);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> NetworkCreate(DockerUri host, string network, NetworkCreateParams prms, ICertificatePaths certificates);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Service : object {
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> ServiceCreate(DockerUri host, Orchestrator orchestrator, string kubeConfigFile, ICertificatePaths certificates, String[] stacks);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Stack : object {
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<StackLsResponse>> StackLs(DockerUri host, Orchestrator orchestrator, bool kubeAllNamespaces, string kubeNamespace, string kubeConfigFile, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<StackPsResponse>> StackPs(DockerUri host, string stack, Orchestrator orchestrator, string kubeNamespace, string kubeConfigFile, string filter, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> StackRm(DockerUri host, Orchestrator orchestrator, string kubeConfigFile, ICertificatePaths certificates, String[] stacks);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Commands.Volumes : object {
    [ExtensionAttribute]
public static CommandResponse`1<string> VolumeCreate(DockerUri host, string name, string driver, String[] labels, IDictionary`2<string, string> opts, ICertificatePaths certificates);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<Volume>> VolumeInspect(DockerUri host, ICertificatePaths certificates, String[] volume);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> VolumeLs(DockerUri host, bool quiet, string format, ICertificatePaths certificates, String[] filter);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> VolumeRm(DockerUri host, ICertificatePaths certificates, bool force, String[] volume);
}
internal static class Ductus.FluentDocker.Common.Constants : object {
    internal static string DebugCategory;
}
[AttributeUsageAttribute("32767")]
public class Ductus.FluentDocker.Common.DeprecatedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    public string TargetVersion { get; public set; }
    public string Documentation { get; public set; }
    public DeprecatedAttribute(string documentation, string targetVersion);
    [CompilerGeneratedAttribute]
public string get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
}
public static class Ductus.FluentDocker.Common.DirectoryHelper : object {
    private static Dictionary`2<string, string> ToRename;
    private static Type[] Whitelist;
    [CompilerGeneratedAttribute]
private static Func`1<string> <GetTempPath>k__BackingField;
    public static Func`1<string> GetTempPath { get; public set; }
    private static DirectoryHelper();
    [CompilerGeneratedAttribute]
public static Func`1<string> get_GetTempPath();
    [CompilerGeneratedAttribute]
public static void set_GetTempPath(Func`1<string> value);
    public static void CopyFilesRecursively(DirectoryInfo source, DirectoryInfo target);
    private static string Rename(string name);
    public static void DeleteDirectory(string directoryPath);
    private static void NormalizeAttributes(string directoryPath);
    private static void DeleteDirectory(string directoryPath, int maxAttempts, int initialTimeout, int timeoutFactor);
}
[AttributeUsageAttribute("32767")]
public class Ductus.FluentDocker.Common.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    public string TargetVersion { get; public set; }
    public string Documentation { get; public set; }
    public ExperimentalAttribute(string documentation, string targetVersion);
    [CompilerGeneratedAttribute]
public string get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
}
public static class Ductus.FluentDocker.Common.FdOs : object {
    public static bool IsWindows();
    public static bool IsOsx();
    public static bool IsLinux();
}
[AttributeUsageAttribute("4")]
public class Ductus.FluentDocker.Common.FeatureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <Dependencies>k__BackingField;
    public string Id { get; public set; }
    public IEnumerable`1<Type> Dependencies { get; public set; }
    public FeatureAttribute(string id, IEnumerable`1<Type> dependencies);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(IEnumerable`1<Type> value);
    public void Validate();
}
public class Ductus.FluentDocker.Common.FluentDockerException : Exception {
    public FluentDockerException(string message);
    public FluentDockerException(string message, Exception innerException);
}
public static class Ductus.FluentDocker.Common.Logger : object {
    internal static bool Enabled;
    private static Logger();
    public static void Log(string message);
}
public class Ductus.FluentDocker.Common.Option`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    public T Value { get; }
    public bool HasValue { get; }
    public Option`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    public static T op_Implicit(Option`1<T> option);
    public static Option`1<T> op_Explicit(T value);
}
public class Ductus.FluentDocker.Common.RequestResponse : ValueType {
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Err>k__BackingField;
    public HttpResponseHeaders Headers { get; }
    public HttpStatusCode Code { get; }
    public string Body { get; }
    public Exception Err { get; }
    internal RequestResponse(HttpResponseHeaders headers, HttpStatusCode code, string body, Exception err);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public HttpResponseHeaders get_Headers();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public HttpStatusCode get_Code();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Body();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Exception get_Err();
}
public class Ductus.FluentDocker.Common.Result`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public bool IsSuccess { get; }
    public bool IsFailure { get; }
    public T Value { get; }
    public string Log { get; }
    public string Error { get; }
    internal Result`1(bool success, T value, string log, string error);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public bool get_IsFailure();
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public string get_Log();
    [CompilerGeneratedAttribute]
public string get_Error();
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Common.ResultExtensions : object {
    [ExtensionAttribute]
public static Result`1<T> ToSuccess(T data, string log);
    [ExtensionAttribute]
public static Result`1<T> ToSuccess(T data, IList`1<string> log);
    [ExtensionAttribute]
public static Result`1<T> ToFailure(T data, string error, string log);
    [ExtensionAttribute]
public static Result`1<T> ToFailure(T data, string error, IList`1<string> log);
    [ExtensionAttribute]
public static string FromLog(IList`1<string> entries);
    [ExtensionAttribute]
public static String[] ToEntires(string log);
}
public class Ductus.FluentDocker.Executors.AsyncProcessExecutor`2 : object {
    private string _arguments;
    private string _command;
    private string _workingdir;
    public AsyncProcessExecutor`2(string command, string arguments, string workingdir);
    public Task`1<CommandResponse`1<TE>> Execute(CancellationToken cancellationToken);
    private CommandResponse`1<TE> InternalExecute(CancellationToken cancellationToken);
}
public class Ductus.FluentDocker.Executors.ConsoleStream`1 : object {
    private IStreamMapper`1<T> _mapper;
    private Process _process;
    private CancellationToken _token;
    private BlockingCollection`1<T> _values;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    public string Error { get; private set; }
    public bool IsFinished { get; private set; }
    public bool IsSuccess { get; private set; }
    internal ConsoleStream`1(ProcessStartInfo startInfo, IStreamMapper`1<T> mapper, CancellationToken token);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFinished();
    [CompilerGeneratedAttribute]
private void set_IsFinished(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
private void set_IsSuccess(bool value);
    public sealed virtual void Dispose();
    public T Read();
    public T TryRead(int millisTimeout);
    private void CancelProcess();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object sender, DataReceivedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(object sender, DataReceivedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_2(object sender, EventArgs args);
}
public interface Ductus.FluentDocker.Executors.IProcessResponse`1 {
    public CommandResponse`1<T> Response { get; }
    public abstract virtual CommandResponse`1<T> get_Response();
}
public interface Ductus.FluentDocker.Executors.IProcessResponseParser`1 {
    public abstract virtual IProcessResponse`1<T> Process(ProcessExecutionResult response);
}
public interface Ductus.FluentDocker.Executors.IStreamMapper`1 {
    public string Error { get; }
    public abstract virtual T OnData(string data, bool isStdErr);
    public abstract virtual T OnProcessEnd(int exitCode);
    public abstract virtual string get_Error();
}
public class Ductus.FluentDocker.Executors.Mappers.FdEventStreamMapper : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
    public sealed virtual FdEvent OnData(string data, bool isStdErr);
    public sealed virtual FdEvent OnProcessEnd(int exitCode);
    private static FdEvent Create(JObject obj);
    private static FdEvent CreateContainerEvent(string action, string scope, string id, DateTime ts, JObject attributes);
    private static FdEvent CreateNetworkEvent(string action, string scope, string id, DateTime ts, JObject attributes);
    private static FdEvent CreateImageEvent(string action, string scope, string id, DateTime ts, JObject attributes);
    private static FdEvent CreateUnknownEvent(string type, string action, string scope, string id, DateTime ts, JObject attributes);
    private static IList`1<Tuple`2<string, string>> GetExtraInfo(JObject obj, String[] nonlabels);
}
public class Ductus.FluentDocker.Executors.Mappers.JObjectStreamMapper : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
    public sealed virtual JObject OnData(string data, bool isStdErr);
    public sealed virtual JObject OnProcessEnd(int exitCode);
}
public class Ductus.FluentDocker.Executors.Mappers.StringMapper : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; private set; }
    public sealed virtual string OnData(string data, bool isStdErr);
    public sealed virtual string OnProcessEnd(int exitCode);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
}
public class Ductus.FluentDocker.Executors.Parsers.BaseInfoResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<DockerInfoBase> <Response>k__BackingField;
    public CommandResponse`1<DockerInfoBase> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<DockerInfoBase> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<DockerInfoBase> value);
    public sealed virtual IProcessResponse`1<DockerInfoBase> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientContainerInspectCommandResponder : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<Container> <Response>k__BackingField;
    public CommandResponse`1<Container> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<Container> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<Container> value);
    public sealed virtual IProcessResponse`1<Container> Process(ProcessExecutionResult response);
    private static string TrimIfBeginsWithSlash(string name);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientDiffResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<Diff>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<Diff>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<Diff>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<Diff>> value);
    public sealed virtual IProcessResponse`1<IList`1<Diff>> Process(ProcessExecutionResult response);
    private static DiffType ToDiffType(char type);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientImageInspectCommandResponder : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<ImageConfig> <Response>k__BackingField;
    public CommandResponse`1<ImageConfig> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<ImageConfig> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<ImageConfig> value);
    public sealed virtual IProcessResponse`1<ImageConfig> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientImagesResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<DockerImageRowResponse>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<DockerImageRowResponse>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<DockerImageRowResponse>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<DockerImageRowResponse>> value);
    public sealed virtual IProcessResponse`1<IList`1<DockerImageRowResponse>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientInspectContainersResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<Container>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<Container>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<Container>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<Container>> value);
    public sealed virtual IProcessResponse`1<IList`1<Container>> Process(ProcessExecutionResult response);
    private static string TrimIfBeginsWithSlash(string name);
}
public class Ductus.FluentDocker.Executors.Parsers.ClientTopResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<Processes> <Response>k__BackingField;
    public CommandResponse`1<Processes> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<Processes> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<Processes> value);
    public sealed virtual IProcessResponse`1<Processes> Process(ProcessExecutionResult response);
    private IList`1<string> ColumnSplit(IList`1<int> columns, string row);
    private IList`1<int> ParseColumns(string row);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineCreateResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineEnvResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IDictionary`2<string, string>> <Response>k__BackingField;
    public CommandResponse`1<IDictionary`2<string, string>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IDictionary`2<string, string>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IDictionary`2<string, string>> value);
    public sealed virtual IProcessResponse`1<IDictionary`2<string, string>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineInspectResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<MachineConfiguration> <Response>k__BackingField;
    public CommandResponse`1<MachineConfiguration> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<MachineConfiguration> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<MachineConfiguration> value);
    public sealed virtual IProcessResponse`1<MachineConfiguration> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineLsResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<MachineLsResponse>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<MachineLsResponse>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<MachineLsResponse>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<MachineLsResponse>> value);
    public sealed virtual IProcessResponse`1<IList`1<MachineLsResponse>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineRmResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.MachineStartStopResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.NetworkInspectResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<NetworkConfiguration> <Response>k__BackingField;
    public CommandResponse`1<NetworkConfiguration> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<NetworkConfiguration> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<NetworkConfiguration> value);
    public sealed virtual IProcessResponse`1<NetworkConfiguration> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.NetworkLsResponseParser : object {
    public static string Format;
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<NetworkRow>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<NetworkRow>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<NetworkRow>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<NetworkRow>> value);
    public sealed virtual IProcessResponse`1<IList`1<NetworkRow>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.NoLineResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.ProcessExitAwareResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.SingleStringResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<string> <Response>k__BackingField;
    public CommandResponse`1<string> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<string> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<string> value);
    public sealed virtual IProcessResponse`1<string> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.StackLsResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<StackLsResponse>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<StackLsResponse>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<StackLsResponse>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<StackLsResponse>> value);
    public sealed virtual IProcessResponse`1<IList`1<StackLsResponse>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.StackPsResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<StackPsResponse>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<StackPsResponse>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<StackPsResponse>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<StackPsResponse>> value);
    public sealed virtual IProcessResponse`1<IList`1<StackPsResponse>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.StringListResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<string>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<string>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<string>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<string>> value);
    public sealed virtual IProcessResponse`1<IList`1<string>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.Parsers.VolumeInspectResponseParser : object {
    [CompilerGeneratedAttribute]
private CommandResponse`1<IList`1<Volume>> <Response>k__BackingField;
    public CommandResponse`1<IList`1<Volume>> Response { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual CommandResponse`1<IList`1<Volume>> get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(CommandResponse`1<IList`1<Volume>> value);
    public sealed virtual IProcessResponse`1<IList`1<Volume>> Process(ProcessExecutionResult response);
}
public class Ductus.FluentDocker.Executors.ProcessExecutionResult : object {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StdErr>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public string Command { get; }
    public string StdOut { get; }
    public string StdErr { get; }
    public int ExitCode { get; }
    [ObsoleteAttribute("Please use the properly spelled `StdOutAsArray` method instead.")]
public String[] StdOutAsArry { get; }
    public String[] StdOutAsArray { get; }
    [ObsoleteAttribute("Please use the properly spelled `StdErrAsArray` method instead.")]
public String[] StdErrAsArry { get; }
    public String[] StdErrAsArray { get; }
    internal ProcessExecutionResult(string process, string stdOut, string stdErr, int exitCode);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public string get_StdOut();
    [CompilerGeneratedAttribute]
public string get_StdErr();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    public String[] get_StdOutAsArry();
    public String[] get_StdOutAsArray();
    public String[] get_StdErrAsArry();
    public String[] get_StdErrAsArray();
    public CommandResponse`1<T> ToResponse(bool success, string error, T data);
    public CommandResponse`1<T> ToErrorResponse(T data);
}
public class Ductus.FluentDocker.Executors.ProcessExecutor`2 : object {
    private string _arguments;
    private string _command;
    private string _workingdir;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Env>k__BackingField;
    public IDictionary`2<string, string> Env { get; }
    public ProcessExecutor`2(string command, string arguments, string workingdir);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Env();
    public CommandResponse`1<TE> Execute();
}
public class Ductus.FluentDocker.Executors.StreamProcessExecutor`2 : object {
    private string _arguments;
    private string _command;
    private string _workingdir;
    public StreamProcessExecutor`2(string command, string arguments, string workingdir);
    public ConsoleStream`1<TE> Execute(CancellationToken token);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.CommandExtensions : object {
    private static IPAddress _cachedDockerIpAddress;
    private static SudoMechanism _sudoMechanism;
    private static string _sudoPassword;
    private static string _defaultShell;
    private static DockerBinariesResolver _binaryResolver;
    public static string DefaultShell { get; }
    private static CommandExtensions();
    [ExtensionAttribute]
public static IList`1<T> ReadToEnd(ConsoleStream`1<T> stream, int millisTimeout);
    [ExtensionAttribute]
public static void AsDefaultShell(string shell);
    public static string get_DefaultShell();
    [ExtensionAttribute]
[ExperimentalAttribute("", "")]
public static void SetSudo(SudoMechanism sudo, string password);
    [ExtensionAttribute]
public static string ResolveBinary(string dockerCommand, bool preferMachine, bool forceResolve);
    [ExtensionAttribute]
public static string ResolveBinary(string dockerCommand, DockerBinariesResolver resolver, bool preferMachine);
    public static bool IsMachineBinaryPresent();
    public static bool IsComposeBinaryPresent();
    public static IEnumerable`1<string> GetResolvedBinaries();
    public static bool IsToolbox();
    public static bool IsEmulatedNative();
    public static bool IsDockerDnsAvailable();
    public static bool IsNative();
    public static IPAddress EmulatedNativeAddress(bool useCache);
    [ExtensionAttribute]
internal static string RenderBaseArgs(DockerUri host, ICertificatePaths certificates);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.ComparisonExtensions : object {
    [ExtensionAttribute]
public static bool IsApproximatelyEqualTo(double initialValue, double value, double maximumDifferenceAllowed);
    [ExtensionAttribute]
public static bool IsApproximatelyEqualTo(float initialValue, float value, float maximumDifferenceAllowed);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.CompressionExtensions : object {
    [ExtensionAttribute]
public static void UnTar(string file, string destPath);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.ConversionExtension : object {
    [ExtensionAttribute]
public static long Convert(string value, String[] unit);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.EnvironmentExtensions : object {
    [ExtensionAttribute]
public static Tuple`2<string, string> Extract(string envExpression);
    [ExtensionAttribute]
public static ProcessExecutor`2<T, TE> ExecutionEnvironment(ProcessExecutor`2<T, TE> executor, IDictionary`2<string, string> env);
    [ExtensionAttribute]
public static IList`1<string> WrapValue(TemplateString[] nameValue);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.FileExtensions : object {
    [ExtensionAttribute]
public static string EscapePath(string path);
    [ExtensionAttribute]
public static TemplateString EscapePath(TemplateString path);
    [ExtensionAttribute]
public static void ToFile(string contents, TemplateString fqPath);
    [ExtensionAttribute]
public static string FromFile(TemplateString fqPath, Encoding encoding);
    [ExtensionAttribute]
public static string Copy(TemplateString fileOrDirectory, TemplateString workdir);
    [ExtensionAttribute]
public static void CopyTo(TemplateString sourceDirectory, TemplateString targetDirectory);
    private static void CopyAll(DirectoryInfo source, DirectoryInfo target);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.HttpExtensions : object {
    private static HttpClient Client;
    private static HttpExtensions();
    [AsyncStateMachineAttribute("Ductus.FluentDocker.Extensions.HttpExtensions/<Download>d__1")]
[ExtensionAttribute]
public static Task`1<bool> Download(Uri url, string fqPath);
    [AsyncStateMachineAttribute("Ductus.FluentDocker.Extensions.HttpExtensions/<Wget>d__2")]
[ExtensionAttribute]
public static Task`1<string> Wget(string url);
    [AsyncStateMachineAttribute("Ductus.FluentDocker.Extensions.HttpExtensions/<DoRequest>d__3")]
[ExtensionAttribute]
public static Task`1<RequestResponse> DoRequest(string url, HttpMethod method, string contentType, string body, bool noThrow);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.ModelExtensions : object {
    [ExtensionAttribute]
public static StringBuilder SizeOptionIfValid(StringBuilder sb, string option, string value, long maxSize);
    [ExtensionAttribute]
public static StringBuilder OptionIfExists(StringBuilder sb, string option, Nullable`1<short> value);
    [ExtensionAttribute]
public static StringBuilder OptionIfExists(StringBuilder sb, string option, string value);
    [ExtensionAttribute]
public static StringBuilder OptionIfExists(StringBuilder sb, string option, bool enabled);
    [ExtensionAttribute]
public static StringBuilder OptionIfExists(StringBuilder sb, string option, String[] values);
    [ExtensionAttribute]
public static StringBuilder OptionIfExists(StringBuilder sb, string option, IDictionary`2<string, string> values);
    [ExtensionAttribute]
public static string ToPlainId(string hashAlgAndContainerHash);
    [ExtensionAttribute]
public static string ToDocker(ContainerIsolationTechnology isolation);
    [ExtensionAttribute]
public static TemplateString AsTemplate(string str);
    [ExtensionAttribute]
public static ServiceRunningState ToServiceState(ContainerState state);
    [ExtensionAttribute]
public static string ToDocker(MountType access);
    [ExtensionAttribute]
public static String[] ArrayAddDistinct(String[] arr, String[] values);
    [ExtensionAttribute]
public static String[] ArrayAdd(String[] arr, String[] values);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.OsExtensions : object {
    [ExtensionAttribute]
public static string ToMsysPath(string path);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.ResourceExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Please use the properly spelled `ResourceQuery` method instead.")]
public static IEnumerable`1<ResourceInfo> ResuorceQuery(Type assemblyAndNamespace, bool recursive);
    [ExtensionAttribute]
public static IEnumerable`1<ResourceInfo> ResourceQuery(Type assemblyAndNamespace, bool recursive);
    [ExtensionAttribute]
public static void ResourceExtract(Type assemblyAndNamespace, TemplateString targetPath, String[] files);
    [ExtensionAttribute]
public static void ToFile(IEnumerable`1<ResourceInfo> resources, TemplateString targetPath);
    [ExtensionAttribute]
public static string ToFile(EmbeddedUri resource, TemplateString targetPath);
    private static Assembly GetAssembly(string assemblyName);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.ServiceExtensions : object {
    [ExtensionAttribute]
private static void WaitForState(IContainerService container, ServiceRunningState state);
    private static void Callback(object state);
    [ExtensionAttribute]
public static void WaitForRunning(IContainerService container);
    [ExtensionAttribute]
public static void WaitForStopped(IContainerService container);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string WrapWithChar(string s, string c);
}
public class Ductus.FluentDocker.Extensions.Utils.DockerBinariesResolver : object {
    [CompilerGeneratedAttribute]
private DockerBinary[] <Binaries>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerBinary <MainDockerClient>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerBinary <MainDockerCompose>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerBinary <MainDockerMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerBinary <MainDockerCli>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasToolbox>k__BackingField;
    public DockerBinary[] Binaries { get; }
    public DockerBinary MainDockerClient { get; }
    public DockerBinary MainDockerCompose { get; }
    public DockerBinary MainDockerMachine { get; }
    public DockerBinary MainDockerCli { get; }
    public bool HasToolbox { get; }
    public DockerBinariesResolver(SudoMechanism sudo, string password, String[] paths);
    [CompilerGeneratedAttribute]
public DockerBinary[] get_Binaries();
    [CompilerGeneratedAttribute]
public DockerBinary get_MainDockerClient();
    [CompilerGeneratedAttribute]
public DockerBinary get_MainDockerCompose();
    [CompilerGeneratedAttribute]
public DockerBinary get_MainDockerMachine();
    [CompilerGeneratedAttribute]
public DockerBinary get_MainDockerCli();
    [CompilerGeneratedAttribute]
public bool get_HasToolbox();
    public DockerBinary Resolve(string binary, bool preferMachine);
    private static IEnumerable`1<DockerBinary> ResolveFromPaths(SudoMechanism sudo, string password, String[] paths);
}
public class Ductus.FluentDocker.Extensions.Utils.DockerBinary : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerBinaryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsToolbox>k__BackingField;
    [CompilerGeneratedAttribute]
private SudoMechanism <Sudo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SudoPassword>k__BackingField;
    public string FqPath { get; }
    public string Path { get; }
    public string Binary { get; }
    public DockerBinaryType Type { get; }
    public bool IsToolbox { get; }
    public SudoMechanism Sudo { get; }
    public string SudoPassword { get; }
    internal DockerBinary(string path, string binary, SudoMechanism sudo, string password);
    public static DockerBinaryType Translate(string binary);
    public string get_FqPath();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Binary();
    [CompilerGeneratedAttribute]
public DockerBinaryType get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsToolbox();
    [CompilerGeneratedAttribute]
public SudoMechanism get_Sudo();
    [CompilerGeneratedAttribute]
public string get_SudoPassword();
}
public enum Ductus.FluentDocker.Extensions.Utils.DockerBinaryType : Enum {
    public int value__;
    public static DockerBinaryType DockerClient;
    public static DockerBinaryType Machine;
    public static DockerBinaryType Compose;
    public static DockerBinaryType Cli;
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Fd : object {
    public static string Version();
    [ExtensionAttribute]
public static void Run(IBuilder builder, Action`1<T> run, string name);
    public static void Run(Func`2<Builder, IBuilder> builder, Action`1<T> run, string name);
    [ExtensionAttribute]
public static void Container(IBuilder builder, Action`1<IContainerService> run, string name);
    public static void Container(Func`2<Builder, IBuilder> builder, Action`1<IContainerService> run, string name);
    [ExtensionAttribute]
public static void Composite(IBuilder builder, Action`1<ICompositeService> run, string name);
    public static void Composite(Func`2<Builder, IBuilder> builder, Action`1<ICompositeService> run, string name);
    internal static void DisposeOnException(Action`1<T> action, T service, string name);
    public static Builder Build();
    public static ContainerBuilder UseContainer();
    public static HostBuilder UseHost();
    public static ImageBuilder DefineImage(string image);
    public static FileBuilder Dockerfile();
    public static IEngineScope EngineScope(EngineScopeType scope, DockerUri host, ICertificatePaths certificates);
    public static NetworkBuilder UseNetwork(string name);
    public static VolumeBuilder UseVolume(string name);
    public static Hosts Hosts();
    public static IList`1<IHostService> Discover(bool preferNative);
    public static IHostService Native();
    public static IHostService FromMachineName(string name, bool isWindowsHost, bool throwIfNotStarted);
}
public class Ductus.FluentDocker.Model.Builders.ContainerBuilderConfig : object {
    [CompilerGeneratedAttribute]
private DestroyIfExistParams <DestroyIfExists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyExistence>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerCreateParams <CreateParams>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImageForcePull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWindowsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteVolumeOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteNamedVolumeOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> <CustomResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`3<string, string, long> <WaitForPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`1<long> <WaitForHealthy>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`2<long, string> <WaitForMessageInLog>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WaitForHttpParams> <WaitForHttp>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IContainerService, int, int>> <WaitLambda>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`2<string, long> <WaitForProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<TemplateString, TemplateString>> <CpToOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<TemplateString, TemplateString>> <CpFromOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> <ExportOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INetworkService> <Networks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NetworkWithAlias`1<INetworkService>> <NetworksWithAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NetworkNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NetworkWithAlias`1<string>> <NetworkNamesWithAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExecuteOnRunningArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExecuteOnDisposingArguments>k__BackingField;
    public DestroyIfExistParams DestroyIfExists { get; public set; }
    public bool VerifyExistence { get; public set; }
    public ContainerCreateParams CreateParams { get; }
    public string Image { get; public set; }
    [ObsoleteAttribute("Please use the properly spelled `ImageForcePull` method instead.")]
public bool ImageFocrePull { get; public set; }
    public bool ImageForcePull { get; public set; }
    public bool IsWindowsImage { get; public set; }
    public bool StopOnDispose { get; public set; }
    public bool DeleteOnDispose { get; public set; }
    public bool DeleteVolumeOnDispose { get; public set; }
    public bool DeleteNamedVolumeOnDispose { get; public set; }
    public Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> CustomResolver { get; public set; }
    public string Command { get; public set; }
    public String[] Arguments { get; public set; }
    public Tuple`3<string, string, long> WaitForPort { get; public set; }
    public Tuple`1<long> WaitForHealthy { get; public set; }
    public Tuple`2<long, string> WaitForMessageInLog { get; public set; }
    public List`1<WaitForHttpParams> WaitForHttp { get; }
    public List`1<Func`3<IContainerService, int, int>> WaitLambda { get; }
    public Tuple`2<string, long> WaitForProcess { get; public set; }
    public List`1<Tuple`2<TemplateString, TemplateString>> CpToOnStart { get; public set; }
    public List`1<Tuple`2<TemplateString, TemplateString>> CpFromOnDispose { get; public set; }
    public Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> ExportOnDispose { get; public set; }
    public List`1<INetworkService> Networks { get; public set; }
    public List`1<NetworkWithAlias`1<INetworkService>> NetworksWithAlias { get; public set; }
    public List`1<string> NetworkNames { get; public set; }
    public List`1<NetworkWithAlias`1<string>> NetworkNamesWithAlias { get; public set; }
    public List`1<string> ExecuteOnRunningArguments { get; public set; }
    public List`1<string> ExecuteOnDisposingArguments { get; public set; }
    [CompilerGeneratedAttribute]
public DestroyIfExistParams get_DestroyIfExists();
    [CompilerGeneratedAttribute]
public void set_DestroyIfExists(DestroyIfExistParams value);
    [CompilerGeneratedAttribute]
public bool get_VerifyExistence();
    [CompilerGeneratedAttribute]
public void set_VerifyExistence(bool value);
    [CompilerGeneratedAttribute]
public ContainerCreateParams get_CreateParams();
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    public bool get_ImageFocrePull();
    public void set_ImageFocrePull(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImageForcePull();
    [CompilerGeneratedAttribute]
public void set_ImageForcePull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWindowsImage();
    [CompilerGeneratedAttribute]
public void set_IsWindowsImage(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopOnDispose();
    [CompilerGeneratedAttribute]
public void set_StopOnDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteOnDispose();
    [CompilerGeneratedAttribute]
public void set_DeleteOnDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteVolumeOnDispose();
    [CompilerGeneratedAttribute]
public void set_DeleteVolumeOnDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteNamedVolumeOnDispose();
    [CompilerGeneratedAttribute]
public void set_DeleteNamedVolumeOnDispose(bool value);
    [CompilerGeneratedAttribute]
public Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> get_CustomResolver();
    [CompilerGeneratedAttribute]
public void set_CustomResolver(Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public Tuple`3<string, string, long> get_WaitForPort();
    [CompilerGeneratedAttribute]
public void set_WaitForPort(Tuple`3<string, string, long> value);
    [CompilerGeneratedAttribute]
public Tuple`1<long> get_WaitForHealthy();
    [CompilerGeneratedAttribute]
public void set_WaitForHealthy(Tuple`1<long> value);
    [CompilerGeneratedAttribute]
public Tuple`2<long, string> get_WaitForMessageInLog();
    [CompilerGeneratedAttribute]
public void set_WaitForMessageInLog(Tuple`2<long, string> value);
    [CompilerGeneratedAttribute]
public List`1<WaitForHttpParams> get_WaitForHttp();
    [CompilerGeneratedAttribute]
public List`1<Func`3<IContainerService, int, int>> get_WaitLambda();
    [CompilerGeneratedAttribute]
public Tuple`2<string, long> get_WaitForProcess();
    [CompilerGeneratedAttribute]
public void set_WaitForProcess(Tuple`2<string, long> value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<TemplateString, TemplateString>> get_CpToOnStart();
    [CompilerGeneratedAttribute]
public void set_CpToOnStart(List`1<Tuple`2<TemplateString, TemplateString>> value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<TemplateString, TemplateString>> get_CpFromOnDispose();
    [CompilerGeneratedAttribute]
public void set_CpFromOnDispose(List`1<Tuple`2<TemplateString, TemplateString>> value);
    [CompilerGeneratedAttribute]
public Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> get_ExportOnDispose();
    [CompilerGeneratedAttribute]
public void set_ExportOnDispose(Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> value);
    [CompilerGeneratedAttribute]
public List`1<INetworkService> get_Networks();
    [CompilerGeneratedAttribute]
public void set_Networks(List`1<INetworkService> value);
    [CompilerGeneratedAttribute]
public List`1<NetworkWithAlias`1<INetworkService>> get_NetworksWithAlias();
    [CompilerGeneratedAttribute]
public void set_NetworksWithAlias(List`1<NetworkWithAlias`1<INetworkService>> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_NetworkNames();
    [CompilerGeneratedAttribute]
public void set_NetworkNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<NetworkWithAlias`1<string>> get_NetworkNamesWithAlias();
    [CompilerGeneratedAttribute]
public void set_NetworkNamesWithAlias(List`1<NetworkWithAlias`1<string>> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExecuteOnRunningArguments();
    [CompilerGeneratedAttribute]
public void set_ExecuteOnRunningArguments(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExecuteOnDisposingArguments();
    [CompilerGeneratedAttribute]
public void set_ExecuteOnDisposingArguments(List`1<string> value);
    public NetworkWithAlias`1<string> FindFirstNetworkNameAndAlias();
}
public class Ductus.FluentDocker.Model.Builders.DestroyIfExistParams : object {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveVolumes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkToRemove>k__BackingField;
    public bool Force { get; public set; }
    public bool RemoveVolumes { get; public set; }
    public string LinkToRemove { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveVolumes();
    [CompilerGeneratedAttribute]
public void set_RemoveVolumes(bool value);
    [CompilerGeneratedAttribute]
public string get_LinkToRemove();
    [CompilerGeneratedAttribute]
public void set_LinkToRemove(string value);
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.AddCommand : object {
    [CompilerGeneratedAttribute]
private TemplateString <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateString <Destination>k__BackingField;
    public TemplateString Source { get; internal set; }
    public TemplateString Destination { get; }
    public AddCommand(TemplateString source, TemplateString destination);
    [CompilerGeneratedAttribute]
public TemplateString get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(TemplateString value);
    [CompilerGeneratedAttribute]
public TemplateString get_Destination();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.ArgCommand : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; }
    public string DefaultValue { get; }
    public ArgCommand(TemplateString name, TemplateString defaultValue);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.CmdCommand : object {
    [CompilerGeneratedAttribute]
private string <Cmd>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public string Cmd { get; }
    public String[] Arguments { get; }
    public CmdCommand(string cmd, String[] args);
    [CompilerGeneratedAttribute]
public string get_Cmd();
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.CopyCommand : object {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chown>k__BackingField;
    public string From { get; }
    public string To { get; }
    public string Alias { get; }
    public string Chown { get; }
    public CopyCommand(TemplateString from, TemplateString to, TemplateString chownUserAndGroup, TemplateString fromAlias);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public string get_Chown();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.CopyURLCommand : CopyCommand {
    [CompilerGeneratedAttribute]
private Uri <FromURL>k__BackingField;
    public Uri FromURL { get; }
    public CopyURLCommand(Uri url, TemplateString from, TemplateString to, TemplateString chownUserAndGroup, TemplateString fromAlias);
    [CompilerGeneratedAttribute]
public Uri get_FromURL();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.EntrypointCommand : object {
    [CompilerGeneratedAttribute]
private string <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public string Executable { get; }
    public String[] Arguments { get; }
    public EntrypointCommand(string executable, String[] args);
    [CompilerGeneratedAttribute]
public string get_Executable();
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.EnvCommand : object {
    [CompilerGeneratedAttribute]
private String[] <NameValue>k__BackingField;
    public String[] NameValue { get; internal set; }
    public EnvCommand(TemplateString[] nameValue);
    [CompilerGeneratedAttribute]
public String[] get_NameValue();
    [CompilerGeneratedAttribute]
internal void set_NameValue(String[] value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.ExposeCommand : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Ports>k__BackingField;
    public IEnumerable`1<string> Ports { get; }
    public ExposeCommand(Int32[] ports);
    public ExposeCommand(String[] ports);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Ports();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.FromCommand : object {
    [CompilerGeneratedAttribute]
private string <ImageAndTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string ImageAndTag { get; }
    public string Platform { get; }
    public string Alias { get; }
    public FromCommand(TemplateString imageAndTag, TemplateString asName, TemplateString platform);
    [CompilerGeneratedAttribute]
public string get_ImageAndTag();
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public string get_Alias();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.HealthCheckCommand : object {
    [CompilerGeneratedAttribute]
private string <Cmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Retries>k__BackingField;
    public string Cmd { get; }
    public string Interval { get; }
    public string Timeout { get; }
    public string StartPeriod { get; }
    public int Retries { get; }
    public HealthCheckCommand(string cmd, string interval, string timeout, string startPeriod, int retries);
    [CompilerGeneratedAttribute]
public string get_Cmd();
    [CompilerGeneratedAttribute]
public string get_Interval();
    [CompilerGeneratedAttribute]
public string get_Timeout();
    [CompilerGeneratedAttribute]
public string get_StartPeriod();
    [CompilerGeneratedAttribute]
public int get_Retries();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.LabelCommand : object {
    [CompilerGeneratedAttribute]
private String[] <NameValue>k__BackingField;
    public String[] NameValue { get; internal set; }
    public LabelCommand(TemplateString[] nameValue);
    [CompilerGeneratedAttribute]
public String[] get_NameValue();
    [CompilerGeneratedAttribute]
internal void set_NameValue(String[] value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.MaintainerCommand : object {
    [CompilerGeneratedAttribute]
private string <Maintainer>k__BackingField;
    public string Maintainer { get; }
    public MaintainerCommand(string maintainer);
    [CompilerGeneratedAttribute]
public string get_Maintainer();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.RunCommand : object {
    [CompilerGeneratedAttribute]
private TemplateString <Run>k__BackingField;
    public TemplateString Run { get; }
    public RunCommand(TemplateString run);
    [CompilerGeneratedAttribute]
public TemplateString get_Run();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.ShellCommand : object {
    [CompilerGeneratedAttribute]
private string <Shell>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public string Shell { get; }
    public String[] Arguments { get; }
    public ShellCommand(string shell, String[] args);
    [CompilerGeneratedAttribute]
public string get_Shell();
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.UserCommand : object {
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    public string User { get; }
    public string Group { get; }
    public UserCommand(TemplateString user, TemplateString group);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public string get_Group();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.VolumeCommand : object {
    [CompilerGeneratedAttribute]
private String[] <Mountpoints>k__BackingField;
    public String[] Mountpoints { get; }
    public VolumeCommand(TemplateString[] mountpoints);
    [CompilerGeneratedAttribute]
public String[] get_Mountpoints();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilder.WorkdirCommand : object {
    [CompilerGeneratedAttribute]
private string <Workdir>k__BackingField;
    public string Workdir { get; }
    public WorkdirCommand(string workdir);
    [CompilerGeneratedAttribute]
public string get_Workdir();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.FileBuilderConfig : object {
    [CompilerGeneratedAttribute]
private string <DockerFileString>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateString <UseFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ICommand> <Commands>k__BackingField;
    public string DockerFileString { get; public set; }
    public TemplateString UseFile { get; public set; }
    public IList`1<ICommand> Commands { get; }
    [CompilerGeneratedAttribute]
public string get_DockerFileString();
    [CompilerGeneratedAttribute]
public void set_DockerFileString(string value);
    [CompilerGeneratedAttribute]
public TemplateString get_UseFile();
    [CompilerGeneratedAttribute]
public void set_UseFile(TemplateString value);
    [CompilerGeneratedAttribute]
public IList`1<ICommand> get_Commands();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Builders.HostBuilderConfig : object {
    [CompilerGeneratedAttribute]
private bool <UseNative>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MemoryMb>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StorageSizeMb>k__BackingField;
    public bool UseNative { get; public set; }
    public string Name { get; public set; }
    public int MemoryMb { get; public set; }
    public int CpuCount { get; public set; }
    public string Driver { get; public set; }
    public int StorageSizeMb { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseNative();
    [CompilerGeneratedAttribute]
public void set_UseNative(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_MemoryMb();
    [CompilerGeneratedAttribute]
public void set_MemoryMb(int value);
    [CompilerGeneratedAttribute]
public int get_CpuCount();
    [CompilerGeneratedAttribute]
public void set_CpuCount(int value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public int get_StorageSizeMb();
    [CompilerGeneratedAttribute]
public void set_StorageSizeMb(int value);
}
public interface Ductus.FluentDocker.Model.Builders.ICommand {
}
public class Ductus.FluentDocker.Model.Builders.ImageBuilderConfig : object {
    [CompilerGeneratedAttribute]
private bool <VerifyExistence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerBuildParams <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWindowsHost>k__BackingField;
    public bool VerifyExistence { get; public set; }
    public string ImageName { get; public set; }
    public ContainerBuildParams Params { get; }
    public bool IsWindowsHost { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_VerifyExistence();
    [CompilerGeneratedAttribute]
public void set_VerifyExistence(bool value);
    [CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
public void set_ImageName(string value);
    [CompilerGeneratedAttribute]
public ContainerBuildParams get_Params();
    [CompilerGeneratedAttribute]
public bool get_IsWindowsHost();
    [CompilerGeneratedAttribute]
public void set_IsWindowsHost(bool value);
}
public enum Ductus.FluentDocker.Model.Builders.MountType : Enum {
    public int value__;
    public static MountType ReadOnly;
    public static MountType ReadWrite;
}
public class Ductus.FluentDocker.Model.Builders.NetworkWithAlias`1 : object {
    [CompilerGeneratedAttribute]
private T <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public T Network { get; public set; }
    public string Alias { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(T value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
}
public class Ductus.FluentDocker.Model.Common.DockerUri : Uri {
    private static string DockerHost;
    private static string DockerHostUrlWindowsNative;
    private static string DockerHostUrlLegacy;
    private static string DockerHostUrlMacOrLinux;
    [CompilerGeneratedAttribute]
private bool <IsStandardDaemon>k__BackingField;
    public bool IsStandardDaemon { get; }
    public DockerUri(string uriString);
    public static string GetDockerHostEnvironmentPathOrDefault();
    [CompilerGeneratedAttribute]
public bool get_IsStandardDaemon();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Common.EmbeddedUri : Uri {
    internal static string Prefix;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public string Host { get; }
    public string Assembly { get; }
    public string Namespace { get; }
    public string Resource { get; }
    public EmbeddedUri(string embedded);
    private static EmbeddedUri();
    [CompilerGeneratedAttribute]
public string get_Host();
    public string get_Assembly();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Resource();
    public static EmbeddedUri op_Implicit(string uri);
}
[ExperimentalAttribute("", "")]
public enum Ductus.FluentDocker.Model.Common.SudoMechanism : Enum {
    public int value__;
    public static SudoMechanism None;
    public static SudoMechanism NoPassword;
    public static SudoMechanism Password;
}
public class Ductus.FluentDocker.Model.Common.TemplateString : object {
    private static Dictionary`2<string, Func`1<string>> Templates;
    private static Regex UrlDetector;
    [CompilerGeneratedAttribute]
private string <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rendered>k__BackingField;
    public string Original { get; }
    public string Rendered { get; }
    private static TemplateString();
    public TemplateString(string str, bool handleWindowsPathIfNeeded);
    [CompilerGeneratedAttribute]
public string get_Original();
    [CompilerGeneratedAttribute]
public string get_Rendered();
    private static string ToTargetOs(string str, bool handleWindowsPathIfNeeded);
    private static string Render(string str);
    private static string RenderEnvironment(string str);
    public static TemplateString op_Implicit(string str);
    public static string op_Implicit(TemplateString str);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Compose.BuildDefinition : object {
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dockerfile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <CacheFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string Context { get; public set; }
    public string Dockerfile { get; public set; }
    public IList`1<string> Args { get; public set; }
    public IList`1<string> CacheFrom { get; public set; }
    public IDictionary`2<string, string> Labels { get; public set; }
    public string ShmSize { get; public set; }
    public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public string get_Dockerfile();
    [CompilerGeneratedAttribute]
public void set_Dockerfile(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_CacheFrom();
    [CompilerGeneratedAttribute]
public void set_CacheFrom(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
public class Ductus.FluentDocker.Model.Compose.ComposeServiceDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildDefinition <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private RestartPolicy <Restart>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <CapAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <CapDrop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ConfigsShort>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConfigLongDefinition> <ConfigLong>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CredentialSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Devices>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DnsSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TmpFsDefinition> <TmpFs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <EnvFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExposePorts>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExternalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ExtraHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthCheckDefinition <HealthCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Init>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerIsolationType <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingDefinition <Logging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServiceNetworkDefinition> <Networks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PidModeHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPortsDefinition> <Ports>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISecret> <Secrets>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SecurityOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopGracePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <SysCtls>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, UlimitDefinition> <Ulimits>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableUserNamespaceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IServiceVolumeDefinition> <Volumes>k__BackingField;
    public string Name { get; public set; }
    public BuildDefinition Build { get; public set; }
    public RestartPolicy Restart { get; public set; }
    public IList`1<string> CapAdd { get; public set; }
    public IList`1<string> CapDrop { get; public set; }
    public string Command { get; public set; }
    public IList`1<string> ConfigsShort { get; public set; }
    public IList`1<ConfigLongDefinition> ConfigLong { get; public set; }
    public string CgroupParent { get; public set; }
    public string ContainerName { get; public set; }
    public string CredentialSpec { get; public set; }
    public IList`1<string> Devices { get; public set; }
    public IList`1<string> DependsOn { get; public set; }
    public IList`1<string> Dns { get; public set; }
    public IList`1<string> DnsSearch { get; public set; }
    public IList`1<TmpFsDefinition> TmpFs { get; public set; }
    public IList`1<string> EntryPoint { get; public set; }
    public IList`1<string> EnvFiles { get; public set; }
    public IDictionary`2<string, string> Environment { get; public set; }
    public IList`1<string> ExposePorts { get; public set; }
    public IList`1<string> ExternalLinks { get; public set; }
    public IDictionary`2<string, string> ExtraHosts { get; public set; }
    public HealthCheckDefinition HealthCheck { get; public set; }
    public string Image { get; public set; }
    public string Init { get; public set; }
    public ContainerIsolationType Isolation { get; public set; }
    public IDictionary`2<string, string> Labels { get; public set; }
    public LoggingDefinition Logging { get; public set; }
    public string NetworkMode { get; public set; }
    public IList`1<ServiceNetworkDefinition> Networks { get; public set; }
    public bool PidModeHost { get; public set; }
    public IList`1<IPortsDefinition> Ports { get; public set; }
    public IList`1<ISecret> Secrets { get; public set; }
    public IList`1<string> SecurityOpt { get; public set; }
    public string StopGracePeriod { get; public set; }
    public string StopSignal { get; public set; }
    public IDictionary`2<string, string> SysCtls { get; public set; }
    public IDictionary`2<string, UlimitDefinition> Ulimits { get; public set; }
    public bool DisableUserNamespaceMode { get; public set; }
    public IList`1<IServiceVolumeDefinition> Volumes { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public BuildDefinition get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(BuildDefinition value);
    [CompilerGeneratedAttribute]
public RestartPolicy get_Restart();
    [CompilerGeneratedAttribute]
public void set_Restart(RestartPolicy value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_CapAdd();
    [CompilerGeneratedAttribute]
public void set_CapAdd(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_CapDrop();
    [CompilerGeneratedAttribute]
public void set_CapDrop(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ConfigsShort();
    [CompilerGeneratedAttribute]
public void set_ConfigsShort(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<ConfigLongDefinition> get_ConfigLong();
    [CompilerGeneratedAttribute]
public void set_ConfigLong(IList`1<ConfigLongDefinition> value);
    [CompilerGeneratedAttribute]
public string get_CgroupParent();
    [CompilerGeneratedAttribute]
public void set_CgroupParent(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_CredentialSpec();
    [CompilerGeneratedAttribute]
public void set_CredentialSpec(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Devices();
    [CompilerGeneratedAttribute]
public void set_Devices(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DependsOn();
    [CompilerGeneratedAttribute]
public void set_DependsOn(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Dns();
    [CompilerGeneratedAttribute]
public void set_Dns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DnsSearch();
    [CompilerGeneratedAttribute]
public void set_DnsSearch(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<TmpFsDefinition> get_TmpFs();
    [CompilerGeneratedAttribute]
public void set_TmpFs(IList`1<TmpFsDefinition> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_EnvFiles();
    [CompilerGeneratedAttribute]
public void set_EnvFiles(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExposePorts();
    [CompilerGeneratedAttribute]
public void set_ExposePorts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExternalLinks();
    [CompilerGeneratedAttribute]
public void set_ExternalLinks(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtraHosts();
    [CompilerGeneratedAttribute]
public void set_ExtraHosts(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public HealthCheckDefinition get_HealthCheck();
    [CompilerGeneratedAttribute]
public void set_HealthCheck(HealthCheckDefinition value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_Init();
    [CompilerGeneratedAttribute]
public void set_Init(string value);
    [CompilerGeneratedAttribute]
public ContainerIsolationType get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(ContainerIsolationType value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public LoggingDefinition get_Logging();
    [CompilerGeneratedAttribute]
public void set_Logging(LoggingDefinition value);
    [CompilerGeneratedAttribute]
public string get_NetworkMode();
    [CompilerGeneratedAttribute]
public void set_NetworkMode(string value);
    [CompilerGeneratedAttribute]
public IList`1<ServiceNetworkDefinition> get_Networks();
    [CompilerGeneratedAttribute]
public void set_Networks(IList`1<ServiceNetworkDefinition> value);
    [CompilerGeneratedAttribute]
public bool get_PidModeHost();
    [CompilerGeneratedAttribute]
public void set_PidModeHost(bool value);
    [CompilerGeneratedAttribute]
public IList`1<IPortsDefinition> get_Ports();
    [CompilerGeneratedAttribute]
public void set_Ports(IList`1<IPortsDefinition> value);
    [CompilerGeneratedAttribute]
public IList`1<ISecret> get_Secrets();
    [CompilerGeneratedAttribute]
public void set_Secrets(IList`1<ISecret> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SecurityOpt();
    [CompilerGeneratedAttribute]
public void set_SecurityOpt(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_StopGracePeriod();
    [CompilerGeneratedAttribute]
public void set_StopGracePeriod(string value);
    [CompilerGeneratedAttribute]
public string get_StopSignal();
    [CompilerGeneratedAttribute]
public void set_StopSignal(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_SysCtls();
    [CompilerGeneratedAttribute]
public void set_SysCtls(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, UlimitDefinition> get_Ulimits();
    [CompilerGeneratedAttribute]
public void set_Ulimits(IDictionary`2<string, UlimitDefinition> value);
    [CompilerGeneratedAttribute]
public bool get_DisableUserNamespaceMode();
    [CompilerGeneratedAttribute]
public void set_DisableUserNamespaceMode(bool value);
    [CompilerGeneratedAttribute]
public IList`1<IServiceVolumeDefinition> get_Volumes();
}
public enum Ductus.FluentDocker.Model.Compose.ComposeVersion : Enum {
    public int value__;
    public static ComposeVersion Unknown;
    public static ComposeVersion V1;
    public static ComposeVersion V2;
}
public class Ductus.FluentDocker.Model.Compose.ComposeVolumeDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Ductus.FluentDocker.Model.Compose.ConfigLongDefinition : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    public string Source { get; public set; }
    public string Target { get; public set; }
    public string Uid { get; public set; }
    public string Gid { get; public set; }
    public string Mode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_Gid();
    [CompilerGeneratedAttribute]
public void set_Gid(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
}
public class Ductus.FluentDocker.Model.Compose.ConfigurationDefinition : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ConfigurationItemDefinition> <Items>k__BackingField;
    public IDictionary`2<string, ConfigurationItemDefinition> Items { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ConfigurationItemDefinition> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IDictionary`2<string, ConfigurationItemDefinition> value);
}
public class Ductus.FluentDocker.Model.Compose.ConfigurationItemDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NameValues>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, string> NameValues { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_NameValues();
    [CompilerGeneratedAttribute]
public void set_NameValues(IDictionary`2<string, string> value);
}
public enum Ductus.FluentDocker.Model.Compose.ContainerIsolationType : Enum {
    public int value__;
    public static ContainerIsolationType Default;
    public static ContainerIsolationType Process;
    public static ContainerIsolationType HyperV;
}
public class Ductus.FluentDocker.Model.Compose.ContainerSpecificConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`3<string, string, long> <WaitForPort>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WaitForHttpParams> <WaitForHttp>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`3<IContainerService, int, int>> <WaitLambda>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`2<string, long> <WaitForProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<TemplateString, TemplateString>> <CpToOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<TemplateString, TemplateString>> <CpFromOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> <ExportOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExecuteOnRunningArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExecuteOnDisposingArguments>k__BackingField;
    public string Name { get; public set; }
    public Tuple`3<string, string, long> WaitForPort { get; public set; }
    public List`1<WaitForHttpParams> WaitForHttp { get; }
    public List`1<Func`3<IContainerService, int, int>> WaitLambda { get; }
    public Tuple`2<string, long> WaitForProcess { get; public set; }
    public List`1<Tuple`2<TemplateString, TemplateString>> CpToOnStart { get; public set; }
    public List`1<Tuple`2<TemplateString, TemplateString>> CpFromOnDispose { get; public set; }
    public Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> ExportOnDispose { get; public set; }
    public List`1<string> ExecuteOnRunningArguments { get; public set; }
    public List`1<string> ExecuteOnDisposingArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Tuple`3<string, string, long> get_WaitForPort();
    [CompilerGeneratedAttribute]
public void set_WaitForPort(Tuple`3<string, string, long> value);
    [CompilerGeneratedAttribute]
public List`1<WaitForHttpParams> get_WaitForHttp();
    [CompilerGeneratedAttribute]
public List`1<Func`3<IContainerService, int, int>> get_WaitLambda();
    [CompilerGeneratedAttribute]
public Tuple`2<string, long> get_WaitForProcess();
    [CompilerGeneratedAttribute]
public void set_WaitForProcess(Tuple`2<string, long> value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<TemplateString, TemplateString>> get_CpToOnStart();
    [CompilerGeneratedAttribute]
public void set_CpToOnStart(List`1<Tuple`2<TemplateString, TemplateString>> value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<TemplateString, TemplateString>> get_CpFromOnDispose();
    [CompilerGeneratedAttribute]
public void set_CpFromOnDispose(List`1<Tuple`2<TemplateString, TemplateString>> value);
    [CompilerGeneratedAttribute]
public Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> get_ExportOnDispose();
    [CompilerGeneratedAttribute]
public void set_ExportOnDispose(Tuple`3<TemplateString, bool, Func`2<IContainerService, bool>> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExecuteOnRunningArguments();
    [CompilerGeneratedAttribute]
public void set_ExecuteOnRunningArguments(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExecuteOnDisposingArguments();
    [CompilerGeneratedAttribute]
public void set_ExecuteOnDisposingArguments(List`1<string> value);
}
public class Ductus.FluentDocker.Model.Compose.DeployConfigDefinition : object {
    [CompilerGeneratedAttribute]
private int <Parallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Monitor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFailureRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Order>k__BackingField;
    public int Parallelism { get; public set; }
    public string Delay { get; public set; }
    public string FailureAction { get; public set; }
    public string Monitor { get; public set; }
    public int MaxFailureRatio { get; public set; }
    public string Order { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Parallelism();
    [CompilerGeneratedAttribute]
public void set_Parallelism(int value);
    [CompilerGeneratedAttribute]
public string get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(string value);
    [CompilerGeneratedAttribute]
public string get_FailureAction();
    [CompilerGeneratedAttribute]
public void set_FailureAction(string value);
    [CompilerGeneratedAttribute]
public string get_Monitor();
    [CompilerGeneratedAttribute]
public void set_Monitor(string value);
    [CompilerGeneratedAttribute]
public int get_MaxFailureRatio();
    [CompilerGeneratedAttribute]
public void set_MaxFailureRatio(int value);
    [CompilerGeneratedAttribute]
public string get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(string value);
}
public class Ductus.FluentDocker.Model.Compose.DeployDefinition : object {
    [CompilerGeneratedAttribute]
private string <EndpointMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private PlacementDefinition <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Replicas>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourcesDefinition <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private RestartPolicyDefinition <RestartPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployConfigDefinition <RollbackConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployConfigDefinition <UpdateConfig>k__BackingField;
    public string EndpointMode { get; public set; }
    public IDictionary`2<string, string> Labels { get; public set; }
    public string Mode { get; public set; }
    public PlacementDefinition Placement { get; public set; }
    public int Replicas { get; public set; }
    public ResourcesDefinition Resources { get; public set; }
    public RestartPolicyDefinition RestartPolicy { get; public set; }
    public DeployConfigDefinition RollbackConfig { get; public set; }
    public DeployConfigDefinition UpdateConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EndpointMode();
    [CompilerGeneratedAttribute]
public void set_EndpointMode(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public PlacementDefinition get_Placement();
    [CompilerGeneratedAttribute]
public void set_Placement(PlacementDefinition value);
    [CompilerGeneratedAttribute]
public int get_Replicas();
    [CompilerGeneratedAttribute]
public void set_Replicas(int value);
    [CompilerGeneratedAttribute]
public ResourcesDefinition get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ResourcesDefinition value);
    [CompilerGeneratedAttribute]
public RestartPolicyDefinition get_RestartPolicy();
    [CompilerGeneratedAttribute]
public void set_RestartPolicy(RestartPolicyDefinition value);
    [CompilerGeneratedAttribute]
public DeployConfigDefinition get_RollbackConfig();
    [CompilerGeneratedAttribute]
public void set_RollbackConfig(DeployConfigDefinition value);
    [CompilerGeneratedAttribute]
public DeployConfigDefinition get_UpdateConfig();
    [CompilerGeneratedAttribute]
public void set_UpdateConfig(DeployConfigDefinition value);
}
public class Ductus.FluentDocker.Model.Compose.DockerComposeConfig : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <ComposeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ComposeVersion <ComposeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysPull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeoutSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOrphans>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternativeServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepVolumes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageRemovalOption <ImageRemoval>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepContainers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentNameValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateString <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ContainerSpecificConfig> <ContainerConfiguration>k__BackingField;
    public IList`1<string> ComposeFilePath { get; public set; }
    public ComposeVersion ComposeVersion { get; public set; }
    public bool AlwaysPull { get; public set; }
    public bool ForceRecreate { get; public set; }
    public bool NoRecreate { get; public set; }
    public bool NoBuild { get; public set; }
    public bool ForceBuild { get; public set; }
    public TimeSpan TimeoutSeconds { get; public set; }
    public bool RemoveOrphans { get; public set; }
    public string AlternativeServiceName { get; public set; }
    public bool UseColor { get; public set; }
    public bool KeepVolumes { get; public set; }
    public ImageRemovalOption ImageRemoval { get; public set; }
    public String[] Services { get; public set; }
    public bool StopOnDispose { get; public set; }
    public bool KeepContainers { get; public set; }
    public IDictionary`2<string, string> EnvironmentNameValue { get; public set; }
    public TemplateString ProjectDirectory { get; public set; }
    public IDictionary`2<string, ContainerSpecificConfig> ContainerConfiguration { get; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_ComposeFilePath();
    [CompilerGeneratedAttribute]
public void set_ComposeFilePath(IList`1<string> value);
    [CompilerGeneratedAttribute]
public ComposeVersion get_ComposeVersion();
    [CompilerGeneratedAttribute]
public void set_ComposeVersion(ComposeVersion value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysPull();
    [CompilerGeneratedAttribute]
public void set_AlwaysPull(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceRecreate();
    [CompilerGeneratedAttribute]
public void set_ForceRecreate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRecreate();
    [CompilerGeneratedAttribute]
public void set_NoRecreate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceBuild();
    [CompilerGeneratedAttribute]
public void set_ForceBuild(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeoutSeconds();
    [CompilerGeneratedAttribute]
public void set_TimeoutSeconds(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_RemoveOrphans();
    [CompilerGeneratedAttribute]
public void set_RemoveOrphans(bool value);
    [CompilerGeneratedAttribute]
public string get_AlternativeServiceName();
    [CompilerGeneratedAttribute]
public void set_AlternativeServiceName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseColor();
    [CompilerGeneratedAttribute]
public void set_UseColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepVolumes();
    [CompilerGeneratedAttribute]
public void set_KeepVolumes(bool value);
    [CompilerGeneratedAttribute]
public ImageRemovalOption get_ImageRemoval();
    [CompilerGeneratedAttribute]
public void set_ImageRemoval(ImageRemovalOption value);
    [CompilerGeneratedAttribute]
public String[] get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(String[] value);
    [CompilerGeneratedAttribute]
public bool get_StopOnDispose();
    [CompilerGeneratedAttribute]
public void set_StopOnDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepContainers();
    [CompilerGeneratedAttribute]
public void set_KeepContainers(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentNameValue();
    [CompilerGeneratedAttribute]
public void set_EnvironmentNameValue(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TemplateString get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(TemplateString value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ContainerSpecificConfig> get_ContainerConfiguration();
}
public class Ductus.FluentDocker.Model.Compose.DockerComposeFileConfig : DockerComposeConfig {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ComposeServiceDefinition> <ServiceDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ComposeVolumeDefinition> <VolumeDefinitions>k__BackingField;
    public string Version { get; public set; }
    public IList`1<ComposeServiceDefinition> ServiceDefinitions { get; }
    public IList`1<ComposeVolumeDefinition> VolumeDefinitions { get; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public IList`1<ComposeServiceDefinition> get_ServiceDefinitions();
    [CompilerGeneratedAttribute]
public IList`1<ComposeVolumeDefinition> get_VolumeDefinitions();
}
public class Ductus.FluentDocker.Model.Compose.HealthCheckDefinition : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Retries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartPeriod>k__BackingField;
    public bool Enabled { get; public set; }
    public IList`1<string> Test { get; public set; }
    public string Interval { get; public set; }
    public string Timeout { get; public set; }
    public int Retries { get; public set; }
    public string StartPeriod { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Test();
    [CompilerGeneratedAttribute]
public void set_Test(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(string value);
    [CompilerGeneratedAttribute]
public string get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(string value);
    [CompilerGeneratedAttribute]
public int get_Retries();
    [CompilerGeneratedAttribute]
public void set_Retries(int value);
    [CompilerGeneratedAttribute]
public string get_StartPeriod();
    [CompilerGeneratedAttribute]
public void set_StartPeriod(string value);
}
public interface Ductus.FluentDocker.Model.Compose.IPortsDefinition {
}
public interface Ductus.FluentDocker.Model.Compose.ISecret {
}
public interface Ductus.FluentDocker.Model.Compose.IServiceVolumeDefinition {
}
public class Ductus.FluentDocker.Model.Compose.LoggingDefinition : object {
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Options>k__BackingField;
    public string Driver { get; public set; }
    public IDictionary`2<string, string> Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IDictionary`2<string, string> value);
}
public class Ductus.FluentDocker.Model.Compose.LongSecret : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Gid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    public string Source { get; public set; }
    public string Target { get; public set; }
    public int Uid { get; public set; }
    public int Gid { get; public set; }
    public string Mode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public int get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(int value);
    [CompilerGeneratedAttribute]
public int get_Gid();
    [CompilerGeneratedAttribute]
public void set_Gid(int value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
}
public class Ductus.FluentDocker.Model.Compose.LongServiceVolumeDefinition : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private VolumeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Options>k__BackingField;
    public string Source { get; public set; }
    public string Target { get; public set; }
    public VolumeType Type { get; public set; }
    public bool IsReadOnly { get; public set; }
    public IDictionary`2<string, string> Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public VolumeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(VolumeType value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IDictionary`2<string, string> value);
}
public class Ductus.FluentDocker.Model.Compose.PlacementDefinition : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Preferences>k__BackingField;
    public IList`1<string> Constraints { get; public set; }
    public IDictionary`2<string, string> Preferences { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Preferences();
    [CompilerGeneratedAttribute]
public void set_Preferences(IDictionary`2<string, string> value);
}
public enum Ductus.FluentDocker.Model.Compose.PortMode : Enum {
    public int value__;
    public static PortMode Host;
    public static PortMode Ingress;
}
public class Ductus.FluentDocker.Model.Compose.PortsLongDefinition : object {
    [CompilerGeneratedAttribute]
private int <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private PortMode <Mode>k__BackingField;
    public int Target { get; public set; }
    public int Published { get; public set; }
    public string Protocol { get; public set; }
    public PortMode Mode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(int value);
    [CompilerGeneratedAttribute]
public int get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(int value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public PortMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(PortMode value);
}
public class Ductus.FluentDocker.Model.Compose.PortsShortDefinition : object {
    [CompilerGeneratedAttribute]
private string <Entry>k__BackingField;
    public string Entry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(string value);
}
public class Ductus.FluentDocker.Model.Compose.ResourcesDefinition : object {
    [CompilerGeneratedAttribute]
private ResourcesItemDefinition <Limits>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourcesItemDefinition <Reservations>k__BackingField;
    public ResourcesItemDefinition Limits { get; public set; }
    public ResourcesItemDefinition Reservations { get; public set; }
    [CompilerGeneratedAttribute]
public ResourcesItemDefinition get_Limits();
    [CompilerGeneratedAttribute]
public void set_Limits(ResourcesItemDefinition value);
    [CompilerGeneratedAttribute]
public ResourcesItemDefinition get_Reservations();
    [CompilerGeneratedAttribute]
public void set_Reservations(ResourcesItemDefinition value);
}
public class Ductus.FluentDocker.Model.Compose.ResourcesItemDefinition : object {
    [CompilerGeneratedAttribute]
private string <Cpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    public string Cpus { get; public set; }
    public string Memory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Cpus();
    [CompilerGeneratedAttribute]
public void set_Cpus(string value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
}
public class Ductus.FluentDocker.Model.Compose.RestartPolicyDefinition : object {
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Window>k__BackingField;
    public string Condition { get; public set; }
    public string Delay { get; public set; }
    public int MaxAttempts { get; public set; }
    public string Window { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
    [CompilerGeneratedAttribute]
public string get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(string value);
    [CompilerGeneratedAttribute]
public int get_MaxAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxAttempts(int value);
    [CompilerGeneratedAttribute]
public string get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(string value);
}
public class Ductus.FluentDocker.Model.Compose.ServiceNetworkDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpV4Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpV6Address>k__BackingField;
    public string Name { get; public set; }
    public IList`1<string> Aliases { get; public set; }
    public string IpV4Address { get; public set; }
    public string IpV6Address { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_IpV4Address();
    [CompilerGeneratedAttribute]
public void set_IpV4Address(string value);
    [CompilerGeneratedAttribute]
public string get_IpV6Address();
    [CompilerGeneratedAttribute]
public void set_IpV6Address(string value);
}
public class Ductus.FluentDocker.Model.Compose.ShortSecret : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternal>k__BackingField;
    public string Name { get; public set; }
    public string FilePath { get; public set; }
    public bool IsExternal { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExternal();
    [CompilerGeneratedAttribute]
public void set_IsExternal(bool value);
}
public class Ductus.FluentDocker.Model.Compose.ShortServiceVolumeDefinition : object {
    [CompilerGeneratedAttribute]
private string <Entry>k__BackingField;
    public string Entry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(string value);
}
public class Ductus.FluentDocker.Model.Compose.TmpFsDefinition : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string Type { get; public set; }
    public string Target { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
public class Ductus.FluentDocker.Model.Compose.UlimitDefinition : object {
    [CompilerGeneratedAttribute]
private long <MappingSoft>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MappingHard>k__BackingField;
    public long MappingSoft { get; public set; }
    public long MappingHard { get; public set; }
    [CompilerGeneratedAttribute]
public long get_MappingSoft();
    [CompilerGeneratedAttribute]
public void set_MappingSoft(long value);
    [CompilerGeneratedAttribute]
public long get_MappingHard();
    [CompilerGeneratedAttribute]
public void set_MappingHard(long value);
}
public enum Ductus.FluentDocker.Model.Compose.VolumeType : Enum {
    public int value__;
    public static VolumeType Volume;
    public static VolumeType Bind;
    public static VolumeType TmpFs;
}
public class Ductus.FluentDocker.Model.Containers.BridgeNetwork : object {
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IPPrefixLen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPv6Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalIPv6Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GlobalIPv6PrefixLen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    public String[] Aliases { get; public set; }
    public string NetworkID { get; public set; }
    public string EndpointID { get; public set; }
    public string Gateway { get; public set; }
    public string IPAddress { get; public set; }
    public int IPPrefixLen { get; public set; }
    public string IPv6Gateway { get; public set; }
    public string GlobalIPv6Address { get; public set; }
    public int GlobalIPv6PrefixLen { get; public set; }
    public string MacAddress { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
    [CompilerGeneratedAttribute]
public string get_NetworkID();
    [CompilerGeneratedAttribute]
public void set_NetworkID(string value);
    [CompilerGeneratedAttribute]
public string get_EndpointID();
    [CompilerGeneratedAttribute]
public void set_EndpointID(string value);
    [CompilerGeneratedAttribute]
public string get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
    [CompilerGeneratedAttribute]
public int get_IPPrefixLen();
    [CompilerGeneratedAttribute]
public void set_IPPrefixLen(int value);
    [CompilerGeneratedAttribute]
public string get_IPv6Gateway();
    [CompilerGeneratedAttribute]
public void set_IPv6Gateway(string value);
    [CompilerGeneratedAttribute]
public string get_GlobalIPv6Address();
    [CompilerGeneratedAttribute]
public void set_GlobalIPv6Address(string value);
    [CompilerGeneratedAttribute]
public int get_GlobalIPv6PrefixLen();
    [CompilerGeneratedAttribute]
public void set_GlobalIPv6PrefixLen(int value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
}
public class Ductus.FluentDocker.Model.Containers.CertificatePaths : object {
    [CompilerGeneratedAttribute]
private string <CaCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientKey>k__BackingField;
    public string CaCertificate { get; public set; }
    public string ClientCertificate { get; public set; }
    public string ClientKey { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_CaCertificate();
    [CompilerGeneratedAttribute]
public void set_CaCertificate(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientKey();
    [CompilerGeneratedAttribute]
public void set_ClientKey(string value);
}
public class Ductus.FluentDocker.Model.Containers.CommandResponse`1 : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public bool Success { get; private set; }
    public IList`1<string> Log { get; }
    public string Error { get; private set; }
    public T Data { get; }
    public CommandResponse`1(bool success, IList`1<string> log, string error, T data);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Log();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
    [CompilerGeneratedAttribute]
public T get_Data();
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Containers.Container : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvConfPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostnamePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RestartCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerMount[] <Mounts>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerNetworkSettings <NetworkSettings>k__BackingField;
    public string Id { get; public set; }
    public string Image { get; public set; }
    public DateTime Created { get; public set; }
    public string ResolvConfPath { get; public set; }
    public string HostnamePath { get; public set; }
    public string HostsPath { get; public set; }
    public string LogPath { get; public set; }
    public string Name { get; public set; }
    public int RestartCount { get; public set; }
    public string Driver { get; public set; }
    public String[] Args { get; public set; }
    public ContainerState State { get; public set; }
    public ContainerMount[] Mounts { get; public set; }
    public ContainerConfig Config { get; public set; }
    public ContainerNetworkSettings NetworkSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ResolvConfPath();
    [CompilerGeneratedAttribute]
public void set_ResolvConfPath(string value);
    [CompilerGeneratedAttribute]
public string get_HostnamePath();
    [CompilerGeneratedAttribute]
public void set_HostnamePath(string value);
    [CompilerGeneratedAttribute]
public string get_HostsPath();
    [CompilerGeneratedAttribute]
public void set_HostsPath(string value);
    [CompilerGeneratedAttribute]
public string get_LogPath();
    [CompilerGeneratedAttribute]
public void set_LogPath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_RestartCount();
    [CompilerGeneratedAttribute]
public void set_RestartCount(int value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public ContainerState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ContainerState value);
    [CompilerGeneratedAttribute]
public ContainerMount[] get_Mounts();
    [CompilerGeneratedAttribute]
public void set_Mounts(ContainerMount[] value);
    [CompilerGeneratedAttribute]
public ContainerConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(ContainerConfig value);
    [CompilerGeneratedAttribute]
public ContainerNetworkSettings get_NetworkSettings();
    [CompilerGeneratedAttribute]
public void set_NetworkSettings(ContainerNetworkSettings value);
}
public class Ductus.FluentDocker.Model.Containers.ContainerBuildParams : object {
    [CompilerGeneratedAttribute]
private String[] <BuildArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ParentCGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <CpuPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowCpuExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowMemExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipImageVerification>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRemoveIntermediateContainers>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerIsolationTechnology <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Swap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysPull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveIntermediateContainersOnSuccessfulBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <UlimitOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    public String[] BuildArguments { get; public set; }
    public Nullable`1<float> CpuShares { get; public set; }
    public Nullable`1<int> ParentCGroup { get; public set; }
    public Nullable`1<float> CpuPeriod { get; public set; }
    public Nullable`1<float> CpuQuota { get; public set; }
    public string AllowCpuExecution { get; public set; }
    public string AllowMemExecution { get; public set; }
    public bool SkipImageVerification { get; public set; }
    public String[] Tags { get; public set; }
    public string File { get; public set; }
    public bool ForceRemoveIntermediateContainers { get; public set; }
    public String[] Labels { get; public set; }
    public ContainerIsolationTechnology Isolation { get; public set; }
    public Nullable`1<long> Memory { get; public set; }
    public Nullable`1<long> Swap { get; public set; }
    public bool AlwaysPull { get; public set; }
    public bool Quiet { get; public set; }
    public bool RemoveIntermediateContainersOnSuccessfulBuild { get; public set; }
    public Nullable`1<long> ShmSize { get; public set; }
    public String[] UlimitOptions { get; public set; }
    public bool NoCache { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_BuildArguments();
    [CompilerGeneratedAttribute]
public void set_BuildArguments(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ParentCGroup();
    [CompilerGeneratedAttribute]
public void set_ParentCGroup(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_CpuPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuPeriod(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_CpuQuota();
    [CompilerGeneratedAttribute]
public void set_CpuQuota(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_AllowCpuExecution();
    [CompilerGeneratedAttribute]
public void set_AllowCpuExecution(string value);
    [CompilerGeneratedAttribute]
public string get_AllowMemExecution();
    [CompilerGeneratedAttribute]
public void set_AllowMemExecution(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipImageVerification();
    [CompilerGeneratedAttribute]
public void set_SkipImageVerification(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceRemoveIntermediateContainers();
    [CompilerGeneratedAttribute]
public void set_ForceRemoveIntermediateContainers(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(String[] value);
    [CompilerGeneratedAttribute]
public ContainerIsolationTechnology get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(ContainerIsolationTechnology value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Swap();
    [CompilerGeneratedAttribute]
public void set_Swap(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysPull();
    [CompilerGeneratedAttribute]
public void set_AlwaysPull(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveIntermediateContainersOnSuccessfulBuild();
    [CompilerGeneratedAttribute]
public void set_RemoveIntermediateContainersOnSuccessfulBuild(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public String[] get_UlimitOptions();
    [CompilerGeneratedAttribute]
public void set_UlimitOptions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Containers.ContainerConfig : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachStdin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachStdout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachStderr>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ExposedPorts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenStdin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StdinOnce>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Cmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, VolumeMount> <Volumes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopSignal>k__BackingField;
    public string Hostname { get; public set; }
    [ObsoleteAttribute("Please use the properly spelled `DomainName` method instead.")]
public string Domainname { get; public set; }
    public string DomainName { get; public set; }
    public string User { get; public set; }
    public bool AttachStdin { get; public set; }
    public bool AttachStdout { get; public set; }
    public bool AttachStderr { get; public set; }
    public IDictionary`2<string, object> ExposedPorts { get; public set; }
    public bool Tty { get; public set; }
    public bool OpenStdin { get; public set; }
    public bool StdinOnce { get; public set; }
    public String[] Env { get; public set; }
    public String[] Cmd { get; public set; }
    public string Image { get; public set; }
    public IDictionary`2<string, VolumeMount> Volumes { get; public set; }
    public string WorkingDir { get; public set; }
    public String[] EntryPoint { get; public set; }
    public IDictionary`2<string, string> Labels { get; public set; }
    public string StopSignal { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    public string get_Domainname();
    public void set_Domainname(string value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public bool get_AttachStdin();
    [CompilerGeneratedAttribute]
public void set_AttachStdin(bool value);
    [CompilerGeneratedAttribute]
public bool get_AttachStdout();
    [CompilerGeneratedAttribute]
public void set_AttachStdout(bool value);
    [CompilerGeneratedAttribute]
public bool get_AttachStderr();
    [CompilerGeneratedAttribute]
public void set_AttachStderr(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ExposedPorts();
    [CompilerGeneratedAttribute]
public void set_ExposedPorts(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_Tty();
    [CompilerGeneratedAttribute]
public void set_Tty(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenStdin();
    [CompilerGeneratedAttribute]
public void set_OpenStdin(bool value);
    [CompilerGeneratedAttribute]
public bool get_StdinOnce();
    [CompilerGeneratedAttribute]
public void set_StdinOnce(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Cmd();
    [CompilerGeneratedAttribute]
public void set_Cmd(String[] value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, VolumeMount> get_Volumes();
    [CompilerGeneratedAttribute]
public void set_Volumes(IDictionary`2<string, VolumeMount> value);
    [CompilerGeneratedAttribute]
public string get_WorkingDir();
    [CompilerGeneratedAttribute]
public void set_WorkingDir(string value);
    [CompilerGeneratedAttribute]
public String[] get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(String[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_StopSignal();
    [CompilerGeneratedAttribute]
public void set_StopSignal(string value);
}
public class Ductus.FluentDocker.Model.Containers.ContainerCreateParams : object {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Cpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CidFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipc>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<string, IPAddress>> <HostIpMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BlockIoWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BlockIoWeightDevices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceReadBps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceReadIops>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceWriteBps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceWriteIops>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapabilitiesToAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapabilitiesToRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Privileged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentCGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnvironmentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AsUser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRemoveContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TmpfsDestinations>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Volumes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumeDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VolumesFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckCmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HealthCheckRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckStartPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HealthCheckDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PortMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublishAllPorts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerIsolationTechnology <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipv4>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipv6>k__BackingField;
    [CompilerGeneratedAttribute]
private RestartPolicy <RestartPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemorySwap>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <MemorySwappiness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemoryReservation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OomKillDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ULimitItem> <Ulimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerRuntime <Runtime>k__BackingField;
    public string Alias { get; public set; }
    public float Cpus { get; public set; }
    public string CpusetCpus { get; public set; }
    public int CpuShares { get; public set; }
    public string CidFile { get; public set; }
    public string Pid { get; public set; }
    public string Uts { get; public set; }
    public string Ipc { get; public set; }
    public List`1<Tuple`2<string, IPAddress>> HostIpMappings { get; public set; }
    public Nullable`1<int> BlockIoWeight { get; public set; }
    public String[] BlockIoWeightDevices { get; public set; }
    public string DeviceReadBps { get; public set; }
    public string DeviceReadIops { get; public set; }
    public string DeviceWriteBps { get; public set; }
    public string DeviceWriteIops { get; public set; }
    public String[] CapabilitiesToAdd { get; public set; }
    public String[] CapabilitiesToRemove { get; public set; }
    public bool Privileged { get; public set; }
    public string Device { get; public set; }
    public string ParentCGroup { get; public set; }
    public String[] Dns { get; public set; }
    public String[] DnsOpt { get; public set; }
    public String[] DnsSearch { get; public set; }
    public string Hostname { get; public set; }
    public String[] Environment { get; public set; }
    public String[] EnvironmentFiles { get; public set; }
    public bool Interactive { get; public set; }
    public bool Tty { get; public set; }
    public string Name { get; public set; }
    public string AsUser { get; public set; }
    public bool AutoRemoveContainer { get; public set; }
    public String[] TmpfsDestinations { get; public set; }
    public String[] Volumes { get; public set; }
    public string VolumeDriver { get; public set; }
    public String[] VolumesFrom { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string HealthCheckCmd { get; public set; }
    public string HealthCheckTimeout { get; public set; }
    public int HealthCheckRetries { get; public set; }
    public string HealthCheckInterval { get; public set; }
    public string HealthCheckStartPeriod { get; public set; }
    public bool HealthCheckDisabled { get; public set; }
    public String[] PortMappings { get; public set; }
    public bool PublishAllPorts { get; public set; }
    public String[] Links { get; public set; }
    public String[] Labels { get; public set; }
    public ContainerIsolationTechnology Isolation { get; public set; }
    public String[] Groups { get; public set; }
    public string Network { get; public set; }
    public string Ipv4 { get; public set; }
    public string Ipv6 { get; public set; }
    public RestartPolicy RestartPolicy { get; public set; }
    public string Memory { get; public set; }
    public string MemorySwap { get; public set; }
    public Nullable`1<short> MemorySwappiness { get; public set; }
    public string MemoryReservation { get; public set; }
    public string KernelMemory { get; public set; }
    public bool OomKillDisable { get; public set; }
    public IList`1<ULimitItem> Ulimit { get; }
    public ContainerRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public float get_Cpus();
    [CompilerGeneratedAttribute]
public void set_Cpus(float value);
    [CompilerGeneratedAttribute]
public string get_CpusetCpus();
    [CompilerGeneratedAttribute]
public void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
public int get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(int value);
    [CompilerGeneratedAttribute]
public string get_CidFile();
    [CompilerGeneratedAttribute]
public void set_CidFile(string value);
    [CompilerGeneratedAttribute]
public string get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(string value);
    [CompilerGeneratedAttribute]
public string get_Uts();
    [CompilerGeneratedAttribute]
public void set_Uts(string value);
    [CompilerGeneratedAttribute]
public string get_Ipc();
    [CompilerGeneratedAttribute]
public void set_Ipc(string value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<string, IPAddress>> get_HostIpMappings();
    [CompilerGeneratedAttribute]
public void set_HostIpMappings(List`1<Tuple`2<string, IPAddress>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BlockIoWeight();
    [CompilerGeneratedAttribute]
public void set_BlockIoWeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_BlockIoWeightDevices();
    [CompilerGeneratedAttribute]
public void set_BlockIoWeightDevices(String[] value);
    [CompilerGeneratedAttribute]
public string get_DeviceReadBps();
    [CompilerGeneratedAttribute]
public void set_DeviceReadBps(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceReadIops();
    [CompilerGeneratedAttribute]
public void set_DeviceReadIops(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceWriteBps();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteBps(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceWriteIops();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteIops(string value);
    [CompilerGeneratedAttribute]
public String[] get_CapabilitiesToAdd();
    [CompilerGeneratedAttribute]
public void set_CapabilitiesToAdd(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CapabilitiesToRemove();
    [CompilerGeneratedAttribute]
public void set_CapabilitiesToRemove(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Privileged();
    [CompilerGeneratedAttribute]
public void set_Privileged(bool value);
    [CompilerGeneratedAttribute]
public string get_Device();
    [CompilerGeneratedAttribute]
public void set_Device(string value);
    [CompilerGeneratedAttribute]
public string get_ParentCGroup();
    [CompilerGeneratedAttribute]
public void set_ParentCGroup(string value);
    [CompilerGeneratedAttribute]
public String[] get_Dns();
    [CompilerGeneratedAttribute]
public void set_Dns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsOpt();
    [CompilerGeneratedAttribute]
public void set_DnsOpt(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsSearch();
    [CompilerGeneratedAttribute]
public void set_DnsSearch(String[] value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public String[] get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_EnvironmentFiles();
    [CompilerGeneratedAttribute]
public void set_EnvironmentFiles(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Tty();
    [CompilerGeneratedAttribute]
public void set_Tty(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AsUser();
    [CompilerGeneratedAttribute]
public void set_AsUser(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoRemoveContainer();
    [CompilerGeneratedAttribute]
public void set_AutoRemoveContainer(bool value);
    [CompilerGeneratedAttribute]
public String[] get_TmpfsDestinations();
    [CompilerGeneratedAttribute]
public void set_TmpfsDestinations(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Volumes();
    [CompilerGeneratedAttribute]
public void set_Volumes(String[] value);
    [CompilerGeneratedAttribute]
public string get_VolumeDriver();
    [CompilerGeneratedAttribute]
public void set_VolumeDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_VolumesFrom();
    [CompilerGeneratedAttribute]
public void set_VolumesFrom(String[] value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckCmd();
    [CompilerGeneratedAttribute]
public void set_HealthCheckCmd(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthCheckTimeout(string value);
    [CompilerGeneratedAttribute]
public int get_HealthCheckRetries();
    [CompilerGeneratedAttribute]
public void set_HealthCheckRetries(int value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckInterval();
    [CompilerGeneratedAttribute]
public void set_HealthCheckInterval(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckStartPeriod();
    [CompilerGeneratedAttribute]
public void set_HealthCheckStartPeriod(string value);
    [CompilerGeneratedAttribute]
public bool get_HealthCheckDisabled();
    [CompilerGeneratedAttribute]
public void set_HealthCheckDisabled(bool value);
    [CompilerGeneratedAttribute]
public String[] get_PortMappings();
    [CompilerGeneratedAttribute]
public void set_PortMappings(String[] value);
    [CompilerGeneratedAttribute]
public bool get_PublishAllPorts();
    [CompilerGeneratedAttribute]
public void set_PublishAllPorts(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(String[] value);
    [CompilerGeneratedAttribute]
public ContainerIsolationTechnology get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(ContainerIsolationTechnology value);
    [CompilerGeneratedAttribute]
public String[] get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(String[] value);
    [CompilerGeneratedAttribute]
public string get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(string value);
    [CompilerGeneratedAttribute]
public string get_Ipv4();
    [CompilerGeneratedAttribute]
public void set_Ipv4(string value);
    [CompilerGeneratedAttribute]
public string get_Ipv6();
    [CompilerGeneratedAttribute]
public void set_Ipv6(string value);
    [CompilerGeneratedAttribute]
public RestartPolicy get_RestartPolicy();
    [CompilerGeneratedAttribute]
public void set_RestartPolicy(RestartPolicy value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
    [CompilerGeneratedAttribute]
public string get_MemorySwap();
    [CompilerGeneratedAttribute]
public void set_MemorySwap(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_MemorySwappiness();
    [CompilerGeneratedAttribute]
public void set_MemorySwappiness(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_MemoryReservation();
    [CompilerGeneratedAttribute]
public void set_MemoryReservation(string value);
    [CompilerGeneratedAttribute]
public string get_KernelMemory();
    [CompilerGeneratedAttribute]
public void set_KernelMemory(string value);
    [CompilerGeneratedAttribute]
public bool get_OomKillDisable();
    [CompilerGeneratedAttribute]
public void set_OomKillDisable(bool value);
    [CompilerGeneratedAttribute]
public IList`1<ULimitItem> get_Ulimit();
    [CompilerGeneratedAttribute]
public ContainerRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ContainerRuntime value);
    public virtual string ToString();
}
public enum Ductus.FluentDocker.Model.Containers.ContainerIsolationTechnology : Enum {
    public int value__;
    public static ContainerIsolationTechnology Unknown;
    public static ContainerIsolationTechnology Default;
    public static ContainerIsolationTechnology Process;
    public static ContainerIsolationTechnology Hyperv;
}
public class Ductus.FluentDocker.Model.Containers.ContainerMount : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RW>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Propagation>k__BackingField;
    public string Name { get; public set; }
    public string Source { get; public set; }
    public string Destination { get; public set; }
    public string Driver { get; public set; }
    public string Mode { get; public set; }
    public bool RW { get; public set; }
    public string Propagation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public bool get_RW();
    [CompilerGeneratedAttribute]
public void set_RW(bool value);
    [CompilerGeneratedAttribute]
public string get_Propagation();
    [CompilerGeneratedAttribute]
public void set_Propagation(string value);
}
public class Ductus.FluentDocker.Model.Containers.ContainerNetworkSettings : object {
    [CompilerGeneratedAttribute]
private string <Bridge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SandboxID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HairpinMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkLocalIPv6Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkLocalIPv6PrefixLen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SandboxKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryIPAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryIPv6Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalIPv6Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalIPv6PrefixLen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPPrefixLen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPv6Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HostIpEndpoint[]> <Ports>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BridgeNetwork> <Networks>k__BackingField;
    public string Bridge { get; public set; }
    public string SandboxID { get; public set; }
    public bool HairpinMode { get; public set; }
    public string LinkLocalIPv6Address { get; public set; }
    public string LinkLocalIPv6PrefixLen { get; public set; }
    public string SandboxKey { get; public set; }
    public string SecondaryIPAddresses { get; public set; }
    public string SecondaryIPv6Addresses { get; public set; }
    public string EndpointID { get; public set; }
    public string Gateway { get; public set; }
    public string GlobalIPv6Address { get; public set; }
    public string GlobalIPv6PrefixLen { get; public set; }
    public string IPAddress { get; public set; }
    public string IPPrefixLen { get; public set; }
    public string IPv6Gateway { get; public set; }
    public string MacAddress { get; public set; }
    public Dictionary`2<string, HostIpEndpoint[]> Ports { get; public set; }
    public Dictionary`2<string, BridgeNetwork> Networks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Bridge();
    [CompilerGeneratedAttribute]
public void set_Bridge(string value);
    [CompilerGeneratedAttribute]
public string get_SandboxID();
    [CompilerGeneratedAttribute]
public void set_SandboxID(string value);
    [CompilerGeneratedAttribute]
public bool get_HairpinMode();
    [CompilerGeneratedAttribute]
public void set_HairpinMode(bool value);
    [CompilerGeneratedAttribute]
public string get_LinkLocalIPv6Address();
    [CompilerGeneratedAttribute]
public void set_LinkLocalIPv6Address(string value);
    [CompilerGeneratedAttribute]
public string get_LinkLocalIPv6PrefixLen();
    [CompilerGeneratedAttribute]
public void set_LinkLocalIPv6PrefixLen(string value);
    [CompilerGeneratedAttribute]
public string get_SandboxKey();
    [CompilerGeneratedAttribute]
public void set_SandboxKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecondaryIPAddresses();
    [CompilerGeneratedAttribute]
public void set_SecondaryIPAddresses(string value);
    [CompilerGeneratedAttribute]
public string get_SecondaryIPv6Addresses();
    [CompilerGeneratedAttribute]
public void set_SecondaryIPv6Addresses(string value);
    [CompilerGeneratedAttribute]
public string get_EndpointID();
    [CompilerGeneratedAttribute]
public void set_EndpointID(string value);
    [CompilerGeneratedAttribute]
public string get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(string value);
    [CompilerGeneratedAttribute]
public string get_GlobalIPv6Address();
    [CompilerGeneratedAttribute]
public void set_GlobalIPv6Address(string value);
    [CompilerGeneratedAttribute]
public string get_GlobalIPv6PrefixLen();
    [CompilerGeneratedAttribute]
public void set_GlobalIPv6PrefixLen(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
    [CompilerGeneratedAttribute]
public string get_IPPrefixLen();
    [CompilerGeneratedAttribute]
public void set_IPPrefixLen(string value);
    [CompilerGeneratedAttribute]
public string get_IPv6Gateway();
    [CompilerGeneratedAttribute]
public void set_IPv6Gateway(string value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HostIpEndpoint[]> get_Ports();
    [CompilerGeneratedAttribute]
public void set_Ports(Dictionary`2<string, HostIpEndpoint[]> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, BridgeNetwork> get_Networks();
    [CompilerGeneratedAttribute]
public void set_Networks(Dictionary`2<string, BridgeNetwork> value);
}
public enum Ductus.FluentDocker.Model.Containers.ContainerRuntime : Enum {
    public int value__;
    public static ContainerRuntime Default;
    public static ContainerRuntime Nvidia;
}
public class Ductus.FluentDocker.Model.Containers.ContainerState : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Running>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Paused>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Restarting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OOMKilled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dead>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FinishedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Health <Health>k__BackingField;
    public string Status { get; public set; }
    public bool Running { get; public set; }
    public bool Paused { get; public set; }
    public bool Restarting { get; public set; }
    public bool OOMKilled { get; public set; }
    public bool Dead { get; public set; }
    public int Pid { get; public set; }
    public long ExitCode { get; public set; }
    public string Error { get; public set; }
    public DateTime StartedAt { get; public set; }
    public DateTime FinishedAt { get; public set; }
    public Health Health { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public bool get_Running();
    [CompilerGeneratedAttribute]
public void set_Running(bool value);
    [CompilerGeneratedAttribute]
public bool get_Paused();
    [CompilerGeneratedAttribute]
public void set_Paused(bool value);
    [CompilerGeneratedAttribute]
public bool get_Restarting();
    [CompilerGeneratedAttribute]
public void set_Restarting(bool value);
    [CompilerGeneratedAttribute]
public bool get_OOMKilled();
    [CompilerGeneratedAttribute]
public void set_OOMKilled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dead();
    [CompilerGeneratedAttribute]
public void set_Dead(bool value);
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(int value);
    [CompilerGeneratedAttribute]
public long get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(long value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_FinishedAt();
    [CompilerGeneratedAttribute]
public void set_FinishedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Health get_Health();
    [CompilerGeneratedAttribute]
public void set_Health(Health value);
}
public class Ductus.FluentDocker.Model.Containers.Diff : object {
    [CompilerGeneratedAttribute]
private DiffType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    public DiffType Type { get; public set; }
    public string Item { get; public set; }
    [CompilerGeneratedAttribute]
public DiffType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DiffType value);
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
}
public enum Ductus.FluentDocker.Model.Containers.DiffType : Enum {
    public int value__;
    public static DiffType Added;
    public static DiffType Removed;
    public static DiffType Updated;
    public static DiffType Created;
}
public class Ductus.FluentDocker.Model.Containers.FileSystem : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Layers>k__BackingField;
    public string Type { get; public set; }
    public String[] Layers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public String[] get_Layers();
    [CompilerGeneratedAttribute]
public void set_Layers(String[] value);
}
public class Ductus.FluentDocker.Model.Containers.GraphDriver : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphDriverData <Data>k__BackingField;
    public string Name { get; public set; }
    public GraphDriverData Data { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public GraphDriverData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(GraphDriverData value);
}
public class Ductus.FluentDocker.Model.Containers.GraphDriverData : object {
    [CompilerGeneratedAttribute]
private string <LowerDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergedDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpperDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDir>k__BackingField;
    public string LowerDir { get; public set; }
    public string MergedDir { get; public set; }
    public string UpperDir { get; public set; }
    public string WorkDir { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LowerDir();
    [CompilerGeneratedAttribute]
public void set_LowerDir(string value);
    [CompilerGeneratedAttribute]
public string get_MergedDir();
    [CompilerGeneratedAttribute]
public void set_MergedDir(string value);
    [CompilerGeneratedAttribute]
public string get_UpperDir();
    [CompilerGeneratedAttribute]
public void set_UpperDir(string value);
    [CompilerGeneratedAttribute]
public string get_WorkDir();
    [CompilerGeneratedAttribute]
public void set_WorkDir(string value);
}
public class Ductus.FluentDocker.Model.Containers.Health : object {
    [CompilerGeneratedAttribute]
private HealthState <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailingStreak>k__BackingField;
    public HealthState Status { get; public set; }
    public int FailingStreak { get; public set; }
    [CompilerGeneratedAttribute]
public HealthState get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HealthState value);
    [CompilerGeneratedAttribute]
public int get_FailingStreak();
    [CompilerGeneratedAttribute]
public void set_FailingStreak(int value);
}
public enum Ductus.FluentDocker.Model.Containers.HealthState : Enum {
    public int value__;
    public static HealthState Starting;
    public static HealthState Unhealthy;
    public static HealthState Healthy;
    public static HealthState Unknown;
}
public class Ductus.FluentDocker.Model.Containers.HostIpEndpoint : IPEndPoint {
    private string _hostIp;
    private string _hostPort;
    public string HostIp { get; public set; }
    public string HostPort { get; public set; }
    public HostIpEndpoint(long address, int port);
    public HostIpEndpoint(IPAddress address, int port);
    public string get_HostIp();
    public void set_HostIp(string value);
    public string get_HostPort();
    public void set_HostPort(string value);
}
public interface Ductus.FluentDocker.Model.Containers.ICertificatePaths {
    public string CaCertificate { get; }
    public string ClientCertificate { get; }
    public string ClientKey { get; }
    public abstract virtual string get_CaCertificate();
    public abstract virtual string get_ClientCertificate();
    public abstract virtual string get_ClientKey();
}
public class Ductus.FluentDocker.Model.Containers.ImageConfig : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RepoTags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RepoDigests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerConfig <ContainerConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VirtualSize>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphDriver <GraphDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystem <RootFs>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public string Id { get; public set; }
    public String[] RepoTags { get; public set; }
    public String[] RepoDigests { get; public set; }
    public string Parent { get; public set; }
    public string Comment { get; public set; }
    public DateTime Created { get; public set; }
    public string Container { get; public set; }
    public ContainerConfig ContainerConfig { get; public set; }
    public string DockerVersion { get; public set; }
    public string Author { get; public set; }
    public ContainerConfig Config { get; public set; }
    public string Architecture { get; public set; }
    public string Os { get; public set; }
    public long Size { get; public set; }
    public long VirtualSize { get; public set; }
    public GraphDriver GraphDriver { get; public set; }
    public FileSystem RootFs { get; public set; }
    public IDictionary`2<string, string> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public String[] get_RepoTags();
    [CompilerGeneratedAttribute]
public void set_RepoTags(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RepoDigests();
    [CompilerGeneratedAttribute]
public void set_RepoDigests(String[] value);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(string value);
    [CompilerGeneratedAttribute]
public ContainerConfig get_ContainerConfig();
    [CompilerGeneratedAttribute]
public void set_ContainerConfig(ContainerConfig value);
    [CompilerGeneratedAttribute]
public string get_DockerVersion();
    [CompilerGeneratedAttribute]
public void set_DockerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public ContainerConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(ContainerConfig value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_Os();
    [CompilerGeneratedAttribute]
public void set_Os(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public long get_VirtualSize();
    [CompilerGeneratedAttribute]
public void set_VirtualSize(long value);
    [CompilerGeneratedAttribute]
public GraphDriver get_GraphDriver();
    [CompilerGeneratedAttribute]
public void set_GraphDriver(GraphDriver value);
    [CompilerGeneratedAttribute]
public FileSystem get_RootFs();
    [CompilerGeneratedAttribute]
public void set_RootFs(FileSystem value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
}
public class Ductus.FluentDocker.Model.Containers.NetworkCreateParams : object {
    [CompilerGeneratedAttribute]
private bool <Attachable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <AuxAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <DriverOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IpRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpamDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <IpamOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIpV6>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Subnet>k__BackingField;
    public bool Attachable { get; public set; }
    public IDictionary`2<string, string> AuxAddress { get; public set; }
    public string Driver { get; public set; }
    public IDictionary`2<string, string> DriverOptions { get; public set; }
    public String[] Gateway { get; public set; }
    public bool Internal { get; public set; }
    public String[] IpRange { get; public set; }
    public string IpamDriver { get; public set; }
    public IDictionary`2<string, string> IpamOptions { get; public set; }
    public bool EnableIpV6 { get; public set; }
    public String[] Labels { get; public set; }
    public String[] Subnet { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Attachable();
    [CompilerGeneratedAttribute]
public void set_Attachable(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_AuxAddress();
    [CompilerGeneratedAttribute]
public void set_AuxAddress(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_DriverOptions();
    [CompilerGeneratedAttribute]
public void set_DriverOptions(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public String[] get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public String[] get_IpRange();
    [CompilerGeneratedAttribute]
public void set_IpRange(String[] value);
    [CompilerGeneratedAttribute]
public string get_IpamDriver();
    [CompilerGeneratedAttribute]
public void set_IpamDriver(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_IpamOptions();
    [CompilerGeneratedAttribute]
public void set_IpamOptions(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableIpV6();
    [CompilerGeneratedAttribute]
public void set_EnableIpV6(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Subnet();
    [CompilerGeneratedAttribute]
public void set_Subnet(String[] value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Containers.Processes : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ProcessRow> <Rows>k__BackingField;
    public IList`1<string> Columns { get; public set; }
    public IList`1<ProcessRow> Rows { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<ProcessRow> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(IList`1<ProcessRow> value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Containers.ProcessRow : object {
    private static string UserConst;
    private static string UidConst;
    private static string PidConst;
    private static string PpidConst;
    private static string C;
    private static string TerminalConst;
    private static string StartTimeConst;
    private static string TimeConst;
    private static string CommandConst;
    private static string CmdConst;
    private static string PercentCpuConst;
    private static string CpuTime;
    private static string PercentMemoryConst;
    private static string VszConst;
    private static string RssConst;
    private static string StatConst;
    private static string StartConst;
    private static string CmdConstWin;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ProcessPid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PercentCpuUtilization>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Cpu>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PercentMemoryUtilization>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <FullRow>k__BackingField;
    public string User { get; internal set; }
    public long Pid { get; internal set; }
    public long ProcessPid { get; internal set; }
    public string Command { get; internal set; }
    public string Tty { get; internal set; }
    public TimeSpan Time { get; internal set; }
    public TimeSpan Started { get; internal set; }
    public string Status { get; internal set; }
    public float PercentCpuUtilization { get; internal set; }
    public TimeSpan Cpu { get; private set; }
    public float PercentMemoryUtilization { get; internal set; }
    public IList`1<string> FullRow { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
internal void set_User(string value);
    [CompilerGeneratedAttribute]
public long get_Pid();
    [CompilerGeneratedAttribute]
internal void set_Pid(long value);
    [CompilerGeneratedAttribute]
public long get_ProcessPid();
    [CompilerGeneratedAttribute]
internal void set_ProcessPid(long value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
internal void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Tty();
    [CompilerGeneratedAttribute]
internal void set_Tty(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Time();
    [CompilerGeneratedAttribute]
internal void set_Time(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Started();
    [CompilerGeneratedAttribute]
internal void set_Started(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(string value);
    [CompilerGeneratedAttribute]
public float get_PercentCpuUtilization();
    [CompilerGeneratedAttribute]
internal void set_PercentCpuUtilization(float value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Cpu();
    [CompilerGeneratedAttribute]
private void set_Cpu(TimeSpan value);
    [CompilerGeneratedAttribute]
public float get_PercentMemoryUtilization();
    [CompilerGeneratedAttribute]
internal void set_PercentMemoryUtilization(float value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FullRow();
    [CompilerGeneratedAttribute]
internal void set_FullRow(IList`1<string> value);
    internal static ProcessRow ToRow(IList`1<string> columns, IList`1<string> fullRow);
}
public enum Ductus.FluentDocker.Model.Containers.RestartPolicy : Enum {
    public int value__;
    public static RestartPolicy No;
    public static RestartPolicy OnFailure;
    public static RestartPolicy UnlessStopped;
    public static RestartPolicy Always;
}
public enum Ductus.FluentDocker.Model.Containers.Ulimit : Enum {
    public int value__;
    public static Ulimit Unknown;
    public static Ulimit Core;
    public static Ulimit Data;
    public static Ulimit FSize;
    public static Ulimit MemLock;
    public static Ulimit NoFile;
    public static Ulimit RSS;
    public static Ulimit Stack;
    public static Ulimit Cpu;
    public static Ulimit NProc;
    public static Ulimit As;
    public static Ulimit MaxLogins;
    public static Ulimit MaxSysLogins;
    public static Ulimit Priority;
    public static Ulimit Locks;
    public static Ulimit SigPending;
    public static Ulimit MsgQueue;
    public static Ulimit Nice;
    public static Ulimit RTPrio;
}
public class Ductus.FluentDocker.Model.Containers.ULimitItem : object {
    [CompilerGeneratedAttribute]
private Ulimit <Ulimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Soft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hard>k__BackingField;
    public Ulimit Ulimit { get; }
    public string Soft { get; }
    public string Hard { get; }
    public ULimitItem(Ulimit ulimit, string soft, string hard);
    [CompilerGeneratedAttribute]
public Ulimit get_Ulimit();
    [CompilerGeneratedAttribute]
public string get_Soft();
    [CompilerGeneratedAttribute]
public string get_Hard();
    public virtual string ToString();
}
public enum Ductus.FluentDocker.Model.Containers.UnixSignal : Enum {
    public int value__;
    public static UnixSignal SIGHUP;
    public static UnixSignal SIGTERM;
    public static UnixSignal SIGKILL;
}
public class Ductus.FluentDocker.Model.Containers.VolumeMount : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rw>k__BackingField;
    public string Source { get; public set; }
    public string Destination { get; public set; }
    public string Mode { get; public set; }
    public bool Rw { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public bool get_Rw();
    [CompilerGeneratedAttribute]
public void set_Rw(bool value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.DockerInfoBase : object {
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerOs>k__BackingField;
    public string ClientVersion { get; public set; }
    public string ClientApiVersion { get; public set; }
    public string ServerVersion { get; public set; }
    public string ServerApiVersion { get; public set; }
    public string ServerOs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
public void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ClientApiVersion();
    [CompilerGeneratedAttribute]
public void set_ClientApiVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    [CompilerGeneratedAttribute]
public void set_ServerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServerApiVersion();
    [CompilerGeneratedAttribute]
public void set_ServerApiVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServerOs();
    [CompilerGeneratedAttribute]
public void set_ServerOs(string value);
    public virtual string ToString();
}
public class Ductus.FluentDocker.Model.Events.ContainerCreateEvent : FdEvent`1<ContainerCreateActor> {
}
public class Ductus.FluentDocker.Model.Events.ContainerDestroyEvent : FdEvent`1<ContainerDestroyActor> {
}
public class Ductus.FluentDocker.Model.Events.ContainerDieEvent : FdEvent`1<ContainerDieActor> {
}
public class Ductus.FluentDocker.Model.Events.ContainerKillEvent : FdEvent`1<ContainerKillActor> {
}
public class Ductus.FluentDocker.Model.Events.ContainerStartEvent : FdEvent`1<ContainerStartActor> {
}
public class Ductus.FluentDocker.Model.Events.ContainerStopEvent : FdEvent`1<ContainerStopActor> {
}
public enum Ductus.FluentDocker.Model.Events.EventAction : Enum {
    public int value__;
    public static EventAction Unspecified;
    public static EventAction Pull;
    public static EventAction Create;
    public static EventAction Start;
    public static EventAction Kill;
    public static EventAction Die;
    public static EventAction Connect;
    public static EventAction Disconnect;
    public static EventAction Stop;
    public static EventAction Destroy;
}
public class Ductus.FluentDocker.Model.Events.EventActor : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Tuple`2<string, string>> <Labels>k__BackingField;
    public string Id { get; internal set; }
    public IList`1<Tuple`2<string, string>> Labels { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public IList`1<Tuple`2<string, string>> get_Labels();
    [CompilerGeneratedAttribute]
internal void set_Labels(IList`1<Tuple`2<string, string>> value);
}
public enum Ductus.FluentDocker.Model.Events.EventScope : Enum {
    public int value__;
    public static EventScope Unknown;
    public static EventScope Local;
}
public enum Ductus.FluentDocker.Model.Events.EventType : Enum {
    public int value__;
    public static EventType Generic;
    public static EventType Image;
    public static EventType Container;
    public static EventType Network;
    public static EventType Plugin;
    public static EventType Volume;
    public static EventType Daemon;
    public static EventType Service;
    public static EventType Node;
    public static EventType Secret;
    public static EventType Config;
}
public abstract class Ductus.FluentDocker.Model.Events.FdEvent : object {
    [CompilerGeneratedAttribute]
private EventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private EventScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private EventAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private EventActor <EventActor>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    public EventType Type { get; public set; }
    public EventScope Scope { get; public set; }
    public EventAction Action { get; public set; }
    public EventActor EventActor { get; public set; }
    public DateTime Time { get; public set; }
    [CompilerGeneratedAttribute]
public EventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(EventType value);
    [CompilerGeneratedAttribute]
public EventScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(EventScope value);
    [CompilerGeneratedAttribute]
public EventAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(EventAction value);
    [CompilerGeneratedAttribute]
public EventActor get_EventActor();
    [CompilerGeneratedAttribute]
public void set_EventActor(EventActor value);
    [CompilerGeneratedAttribute]
public DateTime get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DateTime value);
}
public abstract class Ductus.FluentDocker.Model.Events.FdEvent`1 : FdEvent {
    public T EventActor { get; public set; }
    public T get_EventActor();
    public void set_EventActor(T value);
}
public class Ductus.FluentDocker.Model.Events.ImagePullEvent : FdEvent`1<ImagePullActor> {
}
public class Ductus.FluentDocker.Model.Events.NetworkConnectEvent : FdEvent`1<NetworkConnectActor> {
}
public class Ductus.FluentDocker.Model.Events.NetworkDisconnectEvent : FdEvent`1<NetworkDisconnectActor> {
}
public class Ductus.FluentDocker.Model.Events.UnknownEvent : FdEvent`1<UnknownActor> {
    [CompilerGeneratedAttribute]
private string <ActionRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeRaw>k__BackingField;
    public string ActionRaw { get; }
    public string TypeRaw { get; }
    public UnknownEvent(string action, string type);
    [CompilerGeneratedAttribute]
public string get_ActionRaw();
    [CompilerGeneratedAttribute]
public string get_TypeRaw();
}
public static class Ductus.FluentDocker.Model.FeatureConstants : object {
    public static string KeepOnDispose;
    public static string HostService;
}
public interface Ductus.FluentDocker.Model.IFeature {
    public string Id { get; }
    public IEnumerable`1<IService> Services { get; }
    public abstract virtual string get_Id();
    public abstract virtual IEnumerable`1<IService> get_Services();
    public abstract virtual void Initialize(IDictionary`2<string, object> settings);
    public abstract virtual void Execute(String[] arguments);
}
public class Ductus.FluentDocker.Model.Images.DockerImageRowResponse : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public String[] Tags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
}
public enum Ductus.FluentDocker.Model.Images.ImageRemovalOption : Enum {
    public int value__;
    public static ImageRemovalOption None;
    public static ImageRemovalOption Local;
    public static ImageRemovalOption All;
}
public class Ductus.FluentDocker.Model.Machines.MachineAuthConfig : object {
    [CompilerGeneratedAttribute]
private string <CertDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CaCertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientKeyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePath>k__BackingField;
    public string CertDir { get; public set; }
    public string CaCertPath { get; public set; }
    public string ClientKeyPath { get; public set; }
    public string ClientCertPath { get; public set; }
    public string StorePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertDir();
    [CompilerGeneratedAttribute]
public void set_CertDir(string value);
    [CompilerGeneratedAttribute]
public string get_CaCertPath();
    [CompilerGeneratedAttribute]
public void set_CaCertPath(string value);
    [CompilerGeneratedAttribute]
public string get_ClientKeyPath();
    [CompilerGeneratedAttribute]
public void set_ClientKeyPath(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCertPath();
    [CompilerGeneratedAttribute]
public void set_ClientCertPath(string value);
    [CompilerGeneratedAttribute]
public string get_StorePath();
    [CompilerGeneratedAttribute]
public void set_StorePath(string value);
}
public class Ductus.FluentDocker.Model.Machines.MachineConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DriverName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MemorySizeMb>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StorageSizeMb>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireTls>k__BackingField;
    [CompilerGeneratedAttribute]
private MachineAuthConfig <AuthConfig>k__BackingField;
    public string Name { get; public set; }
    public string DriverName { get; public set; }
    public string StorePath { get; public set; }
    public IPAddress IpAddress { get; public set; }
    public string Hostname { get; public set; }
    public int MemorySizeMb { get; public set; }
    public int StorageSizeMb { get; public set; }
    public int CpuCount { get; public set; }
    public bool RequireTls { get; public set; }
    public MachineAuthConfig AuthConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DriverName();
    [CompilerGeneratedAttribute]
public void set_DriverName(string value);
    [CompilerGeneratedAttribute]
public string get_StorePath();
    [CompilerGeneratedAttribute]
public void set_StorePath(string value);
    [CompilerGeneratedAttribute]
public IPAddress get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public int get_MemorySizeMb();
    [CompilerGeneratedAttribute]
public void set_MemorySizeMb(int value);
    [CompilerGeneratedAttribute]
public int get_StorageSizeMb();
    [CompilerGeneratedAttribute]
public void set_StorageSizeMb(int value);
    [CompilerGeneratedAttribute]
public int get_CpuCount();
    [CompilerGeneratedAttribute]
public void set_CpuCount(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireTls();
    [CompilerGeneratedAttribute]
public void set_RequireTls(bool value);
    [CompilerGeneratedAttribute]
public MachineAuthConfig get_AuthConfig();
    [CompilerGeneratedAttribute]
public void set_AuthConfig(MachineAuthConfig value);
}
public class Ductus.FluentDocker.Model.Machines.MachineLsResponse : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceRunningState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Docker>k__BackingField;
    public string Name { get; public set; }
    public ServiceRunningState State { get; public set; }
    public Uri Docker { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ServiceRunningState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ServiceRunningState value);
    [CompilerGeneratedAttribute]
public Uri get_Docker();
    [CompilerGeneratedAttribute]
public void set_Docker(Uri value);
}
public class Ductus.FluentDocker.Model.Networks.Ipam : object {
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IpamConfig> <Config>k__BackingField;
    public string Driver { get; public set; }
    public IList`1<IpamConfig> Config { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public IList`1<IpamConfig> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(IList`1<IpamConfig> value);
}
public class Ductus.FluentDocker.Model.Networks.IpamConfig : object {
    [CompilerGeneratedAttribute]
private string <Subnet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gateway>k__BackingField;
    public string Subnet { get; public set; }
    public string Gateway { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subnet();
    [CompilerGeneratedAttribute]
public void set_Subnet(string value);
    [CompilerGeneratedAttribute]
public string get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(string value);
}
public class Ductus.FluentDocker.Model.Networks.NetworkConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attachable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ingress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Ipam <IPAM>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ConfigFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, NetworkedContainer> <Containers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Options>k__BackingField;
    public string Name { get; public set; }
    public string Id { get; public set; }
    public DateTime Created { get; public set; }
    public string Scope { get; public set; }
    public string Driver { get; public set; }
    public bool EnableIPv6 { get; public set; }
    public bool Internal { get; public set; }
    public bool Attachable { get; public set; }
    public bool Ingress { get; public set; }
    public bool ConfigOnly { get; public set; }
    public Ipam IPAM { get; public set; }
    public IDictionary`2<string, string> ConfigFrom { get; public set; }
    public IDictionary`2<string, NetworkedContainer> Containers { get; public set; }
    public IDictionary`2<string, string> Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableIPv6();
    [CompilerGeneratedAttribute]
public void set_EnableIPv6(bool value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public bool get_Attachable();
    [CompilerGeneratedAttribute]
public void set_Attachable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ingress();
    [CompilerGeneratedAttribute]
public void set_Ingress(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConfigOnly();
    [CompilerGeneratedAttribute]
public void set_ConfigOnly(bool value);
    [CompilerGeneratedAttribute]
public Ipam get_IPAM();
    [CompilerGeneratedAttribute]
public void set_IPAM(Ipam value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ConfigFrom();
    [CompilerGeneratedAttribute]
public void set_ConfigFrom(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, NetworkedContainer> get_Containers();
    [CompilerGeneratedAttribute]
public void set_Containers(IDictionary`2<string, NetworkedContainer> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IDictionary`2<string, string> value);
}
public class Ductus.FluentDocker.Model.Networks.NetworkedContainer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPv4Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPv6Address>k__BackingField;
    public string Name { get; public set; }
    public string EndpointID { get; public set; }
    public string MacAddress { get; public set; }
    public string IPv4Address { get; public set; }
    public string IPv6Address { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EndpointID();
    [CompilerGeneratedAttribute]
public void set_EndpointID(string value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
public string get_IPv4Address();
    [CompilerGeneratedAttribute]
public void set_IPv4Address(string value);
    [CompilerGeneratedAttribute]
public string get_IPv6Address();
    [CompilerGeneratedAttribute]
public void set_IPv6Address(string value);
}
public class Ductus.FluentDocker.Model.Networks.NetworkRow : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string Driver { get; public set; }
    public string Scope { get; public set; }
    public bool IPv6 { get; public set; }
    public bool Internal { get; public set; }
    public DateTime Created { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public bool get_IPv6();
    [CompilerGeneratedAttribute]
public void set_IPv6(bool value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
}
public enum Ductus.FluentDocker.Model.Networks.NetworkType : Enum {
    public int value__;
    public static NetworkType Unknown;
    public static NetworkType Bridge;
    public static NetworkType Host;
    public static NetworkType Overlay;
    public static NetworkType Ipvlan;
    public static NetworkType Macvlan;
    public static NetworkType None;
    public static NetworkType Custom;
}
public class Ductus.FluentDocker.Model.Service.ServiceCreate : object {
    [CompilerGeneratedAttribute]
private bool <Detach>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckCmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HealthCheckRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckInitialPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCheckCmdTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HealthCheckDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPointCmd>k__BackingField;
    public bool Detach { get; public set; }
    public String[] Dns { get; public set; }
    public String[] DnsOpt { get; public set; }
    public String[] DnsSearch { get; public set; }
    public string Hostname { get; public set; }
    public string HealthCheckCmd { get; public set; }
    public string HealthCheckInterval { get; public set; }
    public int HealthCheckRetries { get; public set; }
    public string HealthCheckInitialPeriod { get; public set; }
    public string HealthCheckCmdTimeout { get; public set; }
    public Nullable`1<bool> HealthCheckDisabled { get; public set; }
    public string EntryPointCmd { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Detach();
    [CompilerGeneratedAttribute]
public void set_Detach(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Dns();
    [CompilerGeneratedAttribute]
public void set_Dns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsOpt();
    [CompilerGeneratedAttribute]
public void set_DnsOpt(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsSearch();
    [CompilerGeneratedAttribute]
public void set_DnsSearch(String[] value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckCmd();
    [CompilerGeneratedAttribute]
public void set_HealthCheckCmd(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckInterval();
    [CompilerGeneratedAttribute]
public void set_HealthCheckInterval(string value);
    [CompilerGeneratedAttribute]
public int get_HealthCheckRetries();
    [CompilerGeneratedAttribute]
public void set_HealthCheckRetries(int value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckInitialPeriod();
    [CompilerGeneratedAttribute]
public void set_HealthCheckInitialPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_HealthCheckCmdTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthCheckCmdTimeout(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HealthCheckDisabled();
    [CompilerGeneratedAttribute]
public void set_HealthCheckDisabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_EntryPointCmd();
    [CompilerGeneratedAttribute]
public void set_EntryPointCmd(string value);
    public virtual string ToString();
}
public enum Ductus.FluentDocker.Model.Stacks.Orchestrator : Enum {
    public int value__;
    public static Orchestrator All;
    public static Orchestrator Swarm;
    public static Orchestrator Kubernetes;
}
public class Ductus.FluentDocker.Model.Stacks.StackLsResponse : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private Orchestrator <Orchestrator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Name { get; public set; }
    public int Services { get; public set; }
    public Orchestrator Orchestrator { get; public set; }
    public string Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(int value);
    [CompilerGeneratedAttribute]
public Orchestrator get_Orchestrator();
    [CompilerGeneratedAttribute]
public void set_Orchestrator(Orchestrator value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    public static Orchestrator ToOrchestrator(string value);
}
public class Ductus.FluentDocker.Model.Stacks.StackPsResponse : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DesiredState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ports>k__BackingField;
    public string Id { get; public set; }
    public string Stack { get; public set; }
    public string Name { get; public set; }
    public string Image { get; public set; }
    public string ImageVersion { get; public set; }
    public string Node { get; public set; }
    public string DesiredState { get; public set; }
    public string CurrentState { get; public set; }
    public string Error { get; public set; }
    public string Ports { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_ImageVersion();
    [CompilerGeneratedAttribute]
public void set_ImageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_DesiredState();
    [CompilerGeneratedAttribute]
public void set_DesiredState(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentState();
    [CompilerGeneratedAttribute]
public void set_CurrentState(string value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_Ports();
    [CompilerGeneratedAttribute]
public void set_Ports(string value);
}
public class Ductus.FluentDocker.Model.Volumes.Volume : object {
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public DateTime Created { get; public set; }
    public string Driver { get; public set; }
    public string Name { get; public set; }
    public string Scope { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
}
public class Ductus.FluentDocker.Resources.FileResourceWriter : object {
    private TemplateString _basePath;
    public FileResourceWriter(TemplateString basePath);
    public sealed virtual IResourceWriter Write(ResourceStream stream);
    public sealed virtual IResourceWriter Write(ResourceReader resources);
}
public interface Ductus.FluentDocker.Resources.IResourceWriter {
    public abstract virtual IResourceWriter Write(ResourceStream stream);
    public abstract virtual IResourceWriter Write(ResourceReader resources);
}
public class Ductus.FluentDocker.Resources.ResourceInfo : object {
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeRootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public string Resource { get; public set; }
    public string Namespace { get; public set; }
    public string Root { get; public set; }
    public string RelativeRootNamespace { get; public set; }
    public Assembly Assembly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeRootNamespace();
    [CompilerGeneratedAttribute]
public void set_RelativeRootNamespace(string value);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
}
public class Ductus.FluentDocker.Resources.ResourceQuery : object {
    private string _assembly;
    private string _namespace;
    private bool _recursive;
    public ResourceQuery From(string assembly);
    public ResourceQuery Namespace(string ns, bool recursive);
    public ResourceQuery Recursive();
    [IteratorStateMachineAttribute("Ductus.FluentDocker.Resources.ResourceQuery/<Query>d__6")]
public IEnumerable`1<ResourceInfo> Query();
    public IEnumerable`1<ResourceInfo> Include(String[] resources);
    private static string ExtractFile(string fqResource);
    [CompilerGeneratedAttribute]
private bool <Query>b__6_0(Assembly x);
    [CompilerGeneratedAttribute]
private bool <Query>b__6_1(string x);
}
public class Ductus.FluentDocker.Resources.ResourceReader : object {
    private ResourceInfo[] _resources;
    public ResourceReader(IEnumerable`1<ResourceInfo> resources);
    public sealed virtual IEnumerator`1<ResourceStream> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Ductus.FluentDocker.Resources.ResourceStream : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceInfo <Info>k__BackingField;
    public Stream Stream { get; }
    public ResourceInfo Info { get; }
    public ResourceStream(Stream stream, ResourceInfo info);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public ResourceInfo get_Info();
    public sealed virtual void Dispose();
}
public enum Ductus.FluentDocker.Services.EngineScopeType : Enum {
    public int value__;
    public static EngineScopeType Unknown;
    public static EngineScopeType Windows;
    public static EngineScopeType Linux;
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Services.Extensions.ContainerExtensions : object {
    [ExtensionAttribute]
public static ConsoleStream`1<string> Logs(IContainerService service, bool follow, CancellationToken token);
    [ExtensionAttribute]
public static CommandResponse`1<IList`1<string>> Execute(IContainerService service, string arguments);
    [ExtensionAttribute]
public static IPEndPoint ToHostExposedEndpoint(IContainerService service, string portAndProto);
    [ExtensionAttribute]
public static IList`1<Diff> Diff(IContainerService service);
    [ExtensionAttribute]
public static IContainerService Diff(IContainerService service, IList`1& result);
    [ExtensionAttribute]
public static IContainerService Export(IContainerService service, TemplateString fqPath, bool explode, bool throwOnError);
    [ExtensionAttribute]
public static Processes GetRunningProcesses(IContainerService service);
    [ExtensionAttribute]
public static IContainerService CopyFrom(IContainerService service, TemplateString containerPath, TemplateString hostPath, bool throwOnError);
    [ExtensionAttribute]
public static IContainerService CopyTo(IContainerService service, TemplateString containerPath, TemplateString hostPath, bool throwOnError);
    [ExtensionAttribute]
public static IContainerService WaitForProcess(IContainerService service, string process, long millisTimeout);
    [ExtensionAttribute]
public static IContainerService WaitForHealthy(IContainerService service, long millisTimeout);
    [ExtensionAttribute]
public static IContainerService WaitForMessageInLogs(IContainerService service, string message, long millisTimeout);
    [ExtensionAttribute]
public static IContainerService Wait(IContainerService service, Func`3<IContainerService, int, int> continuation);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Services.Extensions.HostExtensions : object {
    [ExtensionAttribute]
public static ConsoleStream`1<FdEvent> Events(IHostService host, CancellationToken token, String[] filters, Nullable`1<DateTime> since, Nullable`1<DateTime> until);
    [ExtensionAttribute]
public static Result`1<string> Build(IHostService host, string name, string tag, string workdir, ContainerBuildParams prms);
}
[ExtensionAttribute]
public static class Ductus.FluentDocker.Services.Extensions.NetworkExtensions : object {
    private static DateTime Jan1St1970;
    private static long Millis { get; }
    private static NetworkExtensions();
    [ExtensionAttribute]
public static IContainerService WaitForPort(IContainerService service, string portAndProto, long millisTimeout, string address);
    [ExtensionAttribute]
public static void WaitForPort(IPEndPoint endpoint, long millisTimeout);
    [ExtensionAttribute]
public static void WaitForHttp(IContainerService service, string url, long timeout, Func`3<RequestResponse, int, long> continuation, HttpMethod method, string contentType, string body);
    private static long get_Millis();
    [ExtensionAttribute]
public static IPEndPoint ToHostPort(Dictionary`2<string, HostIpEndpoint[]> ports, string portAndProto, Uri dockerUri);
    [ExtensionAttribute]
public static IPEndPoint ToHostPortCustomResolver(Dictionary`2<string, HostIpEndpoint[]> ports, Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> customResolver, string portAndProto, Uri dockerUri);
}
public class Ductus.FluentDocker.Services.FluentDockerNotSupportedException : FluentDockerException {
    public FluentDockerNotSupportedException(string message);
    public FluentDockerNotSupportedException(string message, Exception innerException);
}
public class Ductus.FluentDocker.Services.Hosts : object {
    public IList`1<IHostService> Discover(bool preferNative);
    public IHostService Native();
    public IHostService FromUri(DockerUri uri, string name, bool isNative, bool stopWhenDisposed, bool isWindowsHost, string certificatePath);
    public IHostService FromMachineName(string name, bool isWindowsHost, bool throwIfNotStarted);
    [CompilerGeneratedAttribute]
private IHostService <Discover>b__0_0(MachineLsResponse machine);
}
public interface Ductus.FluentDocker.Services.ICompositeService {
    public IReadOnlyCollection`1<IHostService> Hosts { get; }
    public IReadOnlyCollection`1<IContainerService> Containers { get; }
    public IReadOnlyCollection`1<IContainerImageService> Images { get; }
    public IReadOnlyCollection`1<IService> Services { get; }
    public abstract virtual IReadOnlyCollection`1<IHostService> get_Hosts();
    public abstract virtual IReadOnlyCollection`1<IContainerService> get_Containers();
    public abstract virtual IReadOnlyCollection`1<IContainerImageService> get_Images();
    public abstract virtual IReadOnlyCollection`1<IService> get_Services();
    public abstract virtual ICompositeService Start();
}
public interface Ductus.FluentDocker.Services.IContainerImageService {
    public string Id { get; }
    public string Tag { get; }
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Tag();
    public abstract virtual DockerUri get_DockerHost();
    public abstract virtual ICertificatePaths get_Certificates();
    public abstract virtual ImageConfig GetConfiguration(bool fresh);
}
public interface Ductus.FluentDocker.Services.IContainerService {
    public string Id { get; }
    public string InstanceId { get; }
    public string Service { get; }
    public DockerUri DockerHost { get; }
    public bool StopOnDispose { get; public set; }
    public bool RemoveOnDispose { get; public set; }
    public Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> CustomEndpointResolver { get; }
    public bool IsWindowsContainer { get; }
    public ICertificatePaths Certificates { get; }
    public IContainerImageService Image { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_InstanceId();
    public abstract virtual string get_Service();
    public abstract virtual DockerUri get_DockerHost();
    public abstract virtual bool get_StopOnDispose();
    public abstract virtual void set_StopOnDispose(bool value);
    public abstract virtual bool get_RemoveOnDispose();
    public abstract virtual void set_RemoveOnDispose(bool value);
    public abstract virtual Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> get_CustomEndpointResolver();
    public abstract virtual bool get_IsWindowsContainer();
    public abstract virtual ICertificatePaths get_Certificates();
    public abstract virtual IContainerImageService get_Image();
    public abstract virtual Container GetConfiguration(bool fresh);
    public abstract virtual IContainerService Start();
    public abstract virtual IList`1<IVolumeService> GetVolumes();
    public abstract virtual IList`1<INetworkService> GetNetworks();
}
public interface Ductus.FluentDocker.Services.IEngineScope {
    public EngineScopeType Scope { get; }
    public abstract virtual EngineScopeType get_Scope();
    public abstract virtual bool UseLinux();
    public abstract virtual bool UseWindows();
}
public interface Ductus.FluentDocker.Services.IHostService {
    public DockerUri Host { get; }
    public bool IsNative { get; }
    public bool RequireTls { get; }
    public ICertificatePaths Certificates { get; }
    public abstract virtual DockerUri get_Host();
    public abstract virtual bool get_IsNative();
    public abstract virtual bool get_RequireTls();
    public abstract virtual ICertificatePaths get_Certificates();
    public abstract virtual IList`1<IContainerService> GetRunningContainers();
    public abstract virtual IList`1<IContainerService> GetContainers(bool all, String[] filters);
    public abstract virtual IList`1<IContainerImageService> GetImages(bool all, String[] filters);
    public abstract virtual IContainerService Create(string image, bool forcePull, ContainerCreateParams prms, bool stopOnDispose, bool deleteOnDispose, bool deleteVolumeOnDispose, bool deleteNamedVolumeOnDispose, string command, String[] args, Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> customEndpointResolver);
    public abstract virtual IList`1<INetworkService> GetNetworks();
    public abstract virtual INetworkService CreateNetwork(string name, NetworkCreateParams createParams, bool removeOnDispose);
    public abstract virtual IList`1<IVolumeService> GetVolumes();
    public abstract virtual IVolumeService CreateVolume(string name, string driver, String[] labels, IDictionary`2<string, string> opts, bool removeOnDispose);
    public abstract virtual MachineConfiguration GetMachineConfiguration();
}
public class Ductus.FluentDocker.Services.Impl.BuilderCompositeService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StateChange StateChange;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IHostService> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IContainerService> <Containers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IContainerImageService> <Images>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IService> <Services>k__BackingField;
    public string Name { get; }
    public ServiceRunningState State { get; }
    public IReadOnlyCollection`1<IHostService> Hosts { get; }
    public IReadOnlyCollection`1<IContainerService> Containers { get; }
    public IReadOnlyCollection`1<IContainerImageService> Images { get; }
    public IReadOnlyCollection`1<IService> Services { get; }
    public BuilderCompositeService(IList`1<IService> services, string name);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual ServiceRunningState get_State();
    private sealed virtual override void Ductus.FluentDocker.Services.IService.Start();
    private sealed virtual override void Ductus.FluentDocker.Services.IService.Pause();
    public sealed virtual void Stop();
    public sealed virtual void Remove(bool force);
    public sealed virtual IService AddHook(ServiceRunningState state, Action`1<IService> hook, string uniqueName);
    public sealed virtual IService RemoveHook(string uniqueName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChange(StateChange value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChange(StateChange value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IHostService> get_Hosts();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IContainerService> get_Containers();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IContainerImageService> get_Images();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IService> get_Services();
    public sealed virtual ICompositeService Start();
    private void OnStateChange(object service, StateChangeEventArgs evt);
}
[ExperimentalAttribute("", "")]
public class Ductus.FluentDocker.Services.Impl.DockerComposeCompositeService : ServiceBase {
    private IContainerImageService[] _imageCache;
    [CompilerGeneratedAttribute]
private DockerComposeConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IHostService> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IContainerService> <Containers>k__BackingField;
    protected DockerComposeConfig Config { get; }
    public ServiceRunningState State { get; protected set; }
    public IReadOnlyCollection`1<IHostService> Hosts { get; protected set; }
    public IReadOnlyCollection`1<IContainerService> Containers { get; protected set; }
    public IReadOnlyCollection`1<IService> Services { get; }
    public IReadOnlyCollection`1<IContainerImageService> Images { get; }
    public DockerComposeCompositeService(IHostService host, DockerComposeConfig config);
    [CompilerGeneratedAttribute]
protected DockerComposeConfig get_Config();
    public virtual void Dispose();
    public virtual ServiceRunningState get_State();
    protected virtual void set_State(ServiceRunningState value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IHostService> get_Hosts();
    [CompilerGeneratedAttribute]
protected void set_Hosts(IReadOnlyCollection`1<IHostService> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IContainerService> get_Containers();
    [CompilerGeneratedAttribute]
protected void set_Containers(IReadOnlyCollection`1<IContainerService> value);
    public sealed virtual IReadOnlyCollection`1<IService> get_Services();
    public sealed virtual IReadOnlyCollection`1<IContainerImageService> get_Images();
    public virtual void Start();
    public virtual void Pause();
    private sealed virtual override ICompositeService Ductus.FluentDocker.Services.ICompositeService.Start();
    public virtual void Stop();
    public virtual void Remove(bool force);
    protected virtual string ExtractNames(Container container, String& project, String& instanceId);
}
public class Ductus.FluentDocker.Services.Impl.DockerContainerService : object {
    private ServiceHooks _hooks;
    private bool _removeMountOnDispose;
    private bool _removeNamedMountOnDispose;
    private Container _containerConfigCache;
    private IContainerImageService _imgCache;
    private ServiceRunningState _state;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerUri <DockerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> <CustomEndpointResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWindowsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificatePaths <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StateChange StateChange;
    public string Id { get; }
    public string InstanceId { get; }
    public string Service { get; }
    public DockerUri DockerHost { get; }
    public bool StopOnDispose { get; public set; }
    public bool RemoveOnDispose { get; public set; }
    public Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> CustomEndpointResolver { get; }
    public bool IsWindowsContainer { get; }
    public IContainerImageService Image { get; }
    public ICertificatePaths Certificates { get; }
    public string Name { get; }
    public ServiceRunningState State { get; internal set; }
    public DockerContainerService(string name, string id, DockerUri docker, ServiceRunningState state, ICertificatePaths certificates, bool stopOnDispose, bool removeOnDispose, bool removeMountOnDispose, bool removeNamedMountOnDispose, bool isWindowsContainer, string instanceId, string project);
    public DockerContainerService(string name, string id, DockerUri docker, ServiceRunningState state, ICertificatePaths certificates, Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> customEndpointResolver, bool stopOnDispose, bool removeOnDispose, bool removeMountOnDispose, bool removeNamedMountOnDispose, bool isWindowsContainer, string instanceId, string project);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Service();
    [CompilerGeneratedAttribute]
public sealed virtual DockerUri get_DockerHost();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnDispose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StopOnDispose(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RemoveOnDispose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoveOnDispose(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> get_CustomEndpointResolver();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsWindowsContainer();
    public sealed virtual IContainerImageService get_Image();
    public sealed virtual Container GetConfiguration(bool fresh);
    [CompilerGeneratedAttribute]
public sealed virtual ICertificatePaths get_Certificates();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual ServiceRunningState get_State();
    internal void set_State(ServiceRunningState value);
    public sealed virtual IContainerService Start();
    public sealed virtual void Dispose();
    private sealed virtual override void Ductus.FluentDocker.Services.IService.Start();
    private sealed virtual override void Ductus.FluentDocker.Services.IService.Pause();
    public sealed virtual void Stop();
    public sealed virtual void Remove(bool force);
    public sealed virtual IService AddHook(ServiceRunningState state, Action`1<IService> hook, string uniqueName);
    public sealed virtual IService RemoveHook(string uniqueName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChange(StateChange value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChange(StateChange value);
    public sealed virtual IList`1<IVolumeService> GetVolumes();
    public sealed virtual IList`1<INetworkService> GetNetworks();
    private void Remove(bool force, bool removeVolume);
    [CompilerGeneratedAttribute]
private IVolumeService <GetVolumes>b__57_1(Volume x);
}
public class Ductus.FluentDocker.Services.Impl.DockerHostService : ServiceBase {
    internal static string DockerCertPath;
    private static string DockerTlsVerify;
    private static string DefaultCaCertName;
    private static string DefaultClientCertName;
    private static string DefaultClientKeyName;
    private bool _isWindowsHost;
    private bool _stopWhenDisposed;
    [CompilerGeneratedAttribute]
private DockerUri <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNative>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireTls>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificatePaths <Certificates>k__BackingField;
    public DockerUri Host { get; private set; }
    public bool IsNative { get; }
    public bool RequireTls { get; private set; }
    public ICertificatePaths Certificates { get; private set; }
    public DockerHostService(string name, bool stopWhenDisposed, bool isWindowsHost, bool throwOnNotRunning);
    public DockerHostService(string name, bool isNative, bool stopWhenDisposed, string dockerUri, string certificatePath, bool isWindowsHost);
    public virtual void Dispose();
    public virtual void Start();
    public virtual void Pause();
    public virtual void Stop();
    public virtual void Remove(bool force);
    [CompilerGeneratedAttribute]
public sealed virtual DockerUri get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(DockerUri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNative();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireTls();
    [CompilerGeneratedAttribute]
private void set_RequireTls(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ICertificatePaths get_Certificates();
    [CompilerGeneratedAttribute]
private void set_Certificates(ICertificatePaths value);
    public sealed virtual IList`1<IContainerService> GetRunningContainers();
    public sealed virtual IList`1<IContainerService> GetContainers(bool all, String[] filters);
    public sealed virtual IList`1<IContainerImageService> GetImages(bool all, String[] filters);
    public sealed virtual IContainerService Create(string image, bool forcePull, ContainerCreateParams prms, bool stopOnDispose, bool deleteOnDispose, bool deleteVolumeOnDispose, bool deleteNamedVolumeOnDispose, string command, String[] args, Func`4<Dictionary`2<string, HostIpEndpoint[]>, string, Uri, IPEndPoint> customEndpointResolver);
    public sealed virtual IList`1<INetworkService> GetNetworks();
    public sealed virtual INetworkService CreateNetwork(string name, NetworkCreateParams createParams, bool removeOnDispose);
    public sealed virtual IList`1<IVolumeService> GetVolumes();
    public sealed virtual MachineConfiguration GetMachineConfiguration();
    public sealed virtual IVolumeService CreateVolume(string name, string driver, String[] labels, IDictionary`2<string, string> opts, bool removeOnDispose);
    private void MachineSetup(string name, bool throwOnNotRunning);
    private void ResolveCertificatePaths(MachineConfiguration info);
    [CompilerGeneratedAttribute]
private DockerContainerService <GetContainers>b__30_0(Container c);
    [CompilerGeneratedAttribute]
private DockerImageService <GetImages>b__31_0(DockerImageRowResponse image);
    [CompilerGeneratedAttribute]
private INetworkService <GetNetworks>b__33_0(NetworkRow nw);
    [CompilerGeneratedAttribute]
private IVolumeService <GetVolumes>b__35_0(string vol);
}
public class Ductus.FluentDocker.Services.Impl.DockerImageService : ServiceBase {
    private ImageConfig _containerConfigCache;
    private bool _isWindowsHost;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerUri <DockerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificatePaths <Certificates>k__BackingField;
    public string Id { get; }
    public string Tag { get; }
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public DockerImageService(string name, string id, string tag, DockerUri dockerHost, ICertificatePaths certificate, bool isWindowsHost);
    public virtual void Dispose();
    public virtual void Start();
    public virtual void Pause();
    public virtual void Stop();
    public virtual void Remove(bool force);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual DockerUri get_DockerHost();
    [CompilerGeneratedAttribute]
public sealed virtual ICertificatePaths get_Certificates();
    public sealed virtual ImageConfig GetConfiguration(bool fresh);
}
public class Ductus.FluentDocker.Services.Impl.DockerNetworkService : ServiceBase {
    private HashSet`1<string> _detatchOnDispose;
    private bool _removeOnDispose;
    private NetworkConfiguration _config;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerUri <DockerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificatePaths <Certificates>k__BackingField;
    public string Id { get; }
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public DockerNetworkService(string name, string id, DockerUri dockerHost, ICertificatePaths certificate, bool removeOnDispose);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual DockerUri get_DockerHost();
    [CompilerGeneratedAttribute]
public sealed virtual ICertificatePaths get_Certificates();
    public sealed virtual NetworkConfiguration GetConfiguration(bool fresh);
    public sealed virtual INetworkService Attach(IContainerService container, bool detatchOnDisposeNetwork, string alias);
    public sealed virtual INetworkService Attach(string containerId, bool detatchOnDisposeNetwork, string alias);
    [ObsoleteAttribute("Please use the properly spelled `Detach` method instead.")]
public sealed virtual INetworkService Detatch(IContainerService container, bool force);
    public sealed virtual INetworkService Detach(IContainerService container, bool force);
    [ObsoleteAttribute("Please use the properly spelled `Detach` method instead.")]
public sealed virtual INetworkService Detatch(string containerId, bool force);
    public sealed virtual INetworkService Detach(string containerId, bool force);
    public virtual void Dispose();
    public virtual void Start();
    public virtual void Pause();
    public virtual void Stop();
    public virtual void Remove(bool force);
}
public class Ductus.FluentDocker.Services.Impl.DockerVolumeService : ServiceBase {
    private Volume _config;
    private bool _removeOnDispose;
    [CompilerGeneratedAttribute]
private DockerUri <DockerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificatePaths <Certificates>k__BackingField;
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public DockerVolumeService(string name, DockerUri host, ICertificatePaths certificates, bool removeOnDispose);
    public virtual void Dispose();
    public virtual void Start();
    public virtual void Pause();
    public virtual void Stop();
    public virtual void Remove(bool force);
    [CompilerGeneratedAttribute]
public sealed virtual DockerUri get_DockerHost();
    [CompilerGeneratedAttribute]
public sealed virtual ICertificatePaths get_Certificates();
    public sealed virtual Volume GetConfiguration(bool fresh);
}
internal class Ductus.FluentDocker.Services.Impl.EngineScope : object {
    private EngineScopeType _original;
    private DockerUri _host;
    private ICertificatePaths _certificates;
    [CompilerGeneratedAttribute]
private EngineScopeType <Scope>k__BackingField;
    public EngineScopeType Scope { get; private set; }
    internal EngineScope(DockerUri host, EngineScopeType scope, ICertificatePaths certificates);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual EngineScopeType get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(EngineScopeType value);
    public sealed virtual bool UseLinux();
    public sealed virtual bool UseWindows();
    private bool SwitchToScope(EngineScopeType scope);
}
public abstract class Ductus.FluentDocker.Services.Impl.ServiceBase : object {
    private ServiceHooks _hooks;
    private ServiceRunningState _state;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StateChange StateChange;
    public string Name { get; }
    public ServiceRunningState State { get; protected set; }
    protected ServiceBase(string name);
    public abstract virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public virtual ServiceRunningState get_State();
    protected virtual void set_State(ServiceRunningState value);
    public abstract virtual void Start();
    public abstract virtual void Pause();
    public abstract virtual void Stop();
    public abstract virtual void Remove(bool force);
    public sealed virtual IService AddHook(ServiceRunningState state, Action`1<IService> hook, string uniqueName);
    public sealed virtual IService RemoveHook(string uniqueName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChange(StateChange value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChange(StateChange value);
}
public class Ductus.FluentDocker.Services.Impl.ServiceHooks : object {
    private ConcurrentDictionary`2<string, HookItem> _hooks;
    public void AddHook(string uniqueName, ServiceRunningState state, Action`1<IService> hook);
    public void RemoveHook(string uniqueName);
    public void Clear();
    public void Execute(IService service, ServiceRunningState state);
}
public interface Ductus.FluentDocker.Services.INetworkService {
    public string Id { get; }
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public abstract virtual string get_Id();
    public abstract virtual DockerUri get_DockerHost();
    public abstract virtual ICertificatePaths get_Certificates();
    public abstract virtual NetworkConfiguration GetConfiguration(bool fresh);
    public abstract virtual INetworkService Attach(IContainerService container, bool detatchOnDisposeNetwork, string alias);
    public abstract virtual INetworkService Attach(string containerId, bool detatchOnDisposeNetwork, string alias);
    [ObsoleteAttribute("Please use the properly spelled `Detach` method instead.")]
public abstract virtual INetworkService Detatch(IContainerService container, bool force);
    public abstract virtual INetworkService Detach(IContainerService container, bool force);
    [ObsoleteAttribute("Please use the properly spelled `Detach` method instead.")]
public abstract virtual INetworkService Detatch(string containerId, bool force);
    public abstract virtual INetworkService Detach(string containerId, bool force);
}
public interface Ductus.FluentDocker.Services.IService {
    public string Name { get; }
    public ServiceRunningState State { get; }
    public abstract virtual string get_Name();
    public abstract virtual ServiceRunningState get_State();
    public abstract virtual void Start();
    public abstract virtual void Pause();
    public abstract virtual void Stop();
    public abstract virtual void Remove(bool force);
    public abstract virtual IService AddHook(ServiceRunningState state, Action`1<IService> hook, string uniqueName);
    public abstract virtual IService RemoveHook(string uniqueName);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChange(StateChange value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChange(StateChange value);
}
public interface Ductus.FluentDocker.Services.IVolumeService {
    public DockerUri DockerHost { get; }
    public ICertificatePaths Certificates { get; }
    public abstract virtual DockerUri get_DockerHost();
    public abstract virtual ICertificatePaths get_Certificates();
    public abstract virtual Volume GetConfiguration(bool fresh);
}
public static class Ductus.FluentDocker.Services.Logging : object {
    public static void Enabled();
    public static void Disabled();
}
public class Ductus.FluentDocker.Services.ServiceDelegates : object {
}
public enum Ductus.FluentDocker.Services.ServiceRunningState : Enum {
    public int value__;
    public static ServiceRunningState Unknown;
    public static ServiceRunningState Starting;
    public static ServiceRunningState Running;
    public static ServiceRunningState Paused;
    public static ServiceRunningState Stopping;
    public static ServiceRunningState Stopped;
    public static ServiceRunningState Removing;
    public static ServiceRunningState Removed;
}
public class Ductus.FluentDocker.Services.StateChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceRunningState <State>k__BackingField;
    public IService Service { get; }
    public ServiceRunningState State { get; }
    internal StateChangeEventArgs(IService service, ServiceRunningState state);
    [CompilerGeneratedAttribute]
public IService get_Service();
    [CompilerGeneratedAttribute]
public ServiceRunningState get_State();
}
[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
