public class Duende.IdentityServer.EntityFramework.Services.CorsPolicyService : object {
    protected IConfigurationDbContext DbContext;
    protected ICancellationTokenProvider CancellationTokenProvider;
    protected ILogger`1<CorsPolicyService> Logger;
    public CorsPolicyService(IConfigurationDbContext dbContext, ILogger`1<CorsPolicyService> logger, ICancellationTokenProvider cancellationTokenProvider);
    [AsyncStateMachineAttribute("Duende.IdentityServer.EntityFramework.Services.CorsPolicyService/<IsOriginAllowedAsync>d__4")]
public sealed virtual Task`1<bool> IsOriginAllowedAsync(string origin);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityServerEntityFrameworkBuilderExtensions : object {
    [ExtensionAttribute]
public static IIdentityServerBuilder AddConfigurationStore(IIdentityServerBuilder builder, Action`1<ConfigurationStoreOptions> storeOptionsAction);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddConfigurationStore(IIdentityServerBuilder builder, Action`1<ConfigurationStoreOptions> storeOptionsAction);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddConfigurationStoreCache(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddOperationalStore(IIdentityServerBuilder builder, Action`1<OperationalStoreOptions> storeOptionsAction);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddOperationalStore(IIdentityServerBuilder builder, Action`1<OperationalStoreOptions> storeOptionsAction);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddOperationalStoreNotification(IIdentityServerBuilder builder);
}
public class Microsoft.Extensions.DependencyInjection.TokenCleanupHost : object {
    private IServiceProvider _serviceProvider;
    private OperationalStoreOptions _options;
    private ILogger`1<TokenCleanupHost> _logger;
    private CancellationTokenSource _source;
    private TimeSpan CleanupInterval { get; }
    public TokenCleanupHost(IServiceProvider serviceProvider, OperationalStoreOptions options, ILogger`1<TokenCleanupHost> logger);
    private TimeSpan get_CleanupInterval();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.TokenCleanupHost/<StartInternalAsync>d__9")]
private Task StartInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.TokenCleanupHost/<RemoveExpiredGrantsAsync>d__10")]
private Task RemoveExpiredGrantsAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <StartAsync>b__7_0();
}
