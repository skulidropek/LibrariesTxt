public class Microsoft.Scripting.Metadata.AssemblyDef : ValueType {
    private MetadataRecord m_record;
    public AssemblyHashAlgorithm HashAlgorithm { get; }
    public Version Version { get; }
    public AssemblyNameFlags NameFlags { get; }
    public MetadataName Name { get; }
    public MetadataName Culture { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal AssemblyDef(MetadataRecord record);
    public AssemblyHashAlgorithm get_HashAlgorithm();
    public Version get_Version();
    public AssemblyNameFlags get_NameFlags();
    public Byte[] GetPublicKey();
    public MetadataName get_Name();
    public MetadataName get_Culture();
    public static MetadataRecord op_Implicit(AssemblyDef assemblyDef);
    public static AssemblyDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
public enum Microsoft.Scripting.Metadata.AssemblyFileAttributes : Enum {
    public int value__;
    public static AssemblyFileAttributes ContainsMetadata;
    public static AssemblyFileAttributes ContainsNoMetadata;
}
internal class Microsoft.Scripting.Metadata.AssemblyOSTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int OSPlatformIdOffset;
    private int OSMajorVersionIdOffset;
    private int OSMinorVersionIdOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyOSTable(int numberOfRows, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.AssemblyProcessorTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int ProcessorOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyProcessorTable(int numberOfRows, int start, MemoryBlock block);
}
public class Microsoft.Scripting.Metadata.AssemblyRef : ValueType {
    private MetadataRecord m_record;
    public Version Version { get; }
    public AssemblyNameFlags NameFlags { get; }
    public MetadataName Name { get; }
    public MetadataName Culture { get; }
    public MetadataRecord Record { get; }
    internal AssemblyRef(MetadataRecord record);
    public Byte[] GetHashValue();
    public Version get_Version();
    public AssemblyNameFlags get_NameFlags();
    public Byte[] GetPublicKeyOrToken();
    public MetadataName get_Name();
    public MetadataName get_Culture();
    public static MetadataRecord op_Implicit(AssemblyRef assemblyRef);
    public static AssemblyRef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.AssemblyRefOSTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int OSPlatformIdOffset;
    private int OSMajorVersionIdOffset;
    private int OSMinorVersionIdOffset;
    private int AssemblyRefOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyRefOSTable(int numberOfRows, int assembyRefTableRowRefSize, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.AssemblyRefProcessorTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int ProcessorOffset;
    private int AssemblyRefOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyRefProcessorTable(int numberOfRows, int assembyRefTableRowRefSize, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.AssemblyRefTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int MajorVersionOffset;
    private int MinorVersionOffset;
    private int BuildNumberOffset;
    private int RevisionNumberOffset;
    private int FlagsOffset;
    private int PublicKeyOrTokenOffset;
    private int NameOffset;
    private int CultureOffset;
    private int HashValueOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyRefTable(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal Version GetVersion(int rowId);
    internal AssemblyNameFlags GetFlags(int rowId);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetCulture(int rowId);
    internal UInt32 GetPublicKeyOrToken(int rowId);
    internal UInt32 GetHashValue(int rowId);
}
internal class Microsoft.Scripting.Metadata.AssemblyTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int HashAlgIdOffset;
    private int MajorVersionOffset;
    private int MinorVersionOffset;
    private int BuildNumberOffset;
    private int RevisionNumberOffset;
    private int FlagsOffset;
    private int PublicKeyOffset;
    private int NameOffset;
    private int CultureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal AssemblyTable(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal AssemblyHashAlgorithm GetHashAlgorithm(int rowId);
    internal AssemblyNameFlags GetFlags(int rowId);
    internal Version GetVersion(int rowId);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetCulture(int rowId);
    internal UInt32 GetPublicKey(int rowId);
}
internal class Microsoft.Scripting.Metadata.ClassLayoutTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int PackagingSizeOffset;
    private int ClassSizeOffset;
    private int ParentOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ClassLayoutTable(int numberOfRows, int typeDefTableRowRefSize, int start, MemoryBlock block);
}
[ExtensionAttribute]
internal static class Microsoft.Scripting.Metadata.ClrStubs : object {
    [ExtensionAttribute]
internal static int GetCharCount(Encoding encoding, Byte* bytes, int byteCount, object nls);
    [ExtensionAttribute]
internal static void GetChars(Encoding encoding, Byte* bytes, int byteCount, Char* chars, int charCount, object nls);
}
internal class Microsoft.Scripting.Metadata.ConstantTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsHasConstantRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int TypeOffset;
    private int ParentOffset;
    private int ValueOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ConstantTable(int numberOfRows, int hasConstantRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal int GetConstantRowId(MetadataToken parentToken);
    internal UInt32 GetValue(int rowId, ElementType& type);
}
internal static class Microsoft.Scripting.Metadata.COR20Constants : object {
    internal static int SizeOfCOR20Header;
    internal static UInt32 COR20MetadataSignature;
    internal static int MinimumSizeofMetadataHeader;
    internal static int SizeofStorageHeader;
    internal static int MinimumSizeofStreamHeader;
    internal static string StringStreamName;
    internal static string BlobStreamName;
    internal static string GUIDStreamName;
    internal static string UserStringStreamName;
    internal static string CompressedMetadataTableStreamName;
    internal static string UncompressedMetadataTableStreamName;
    internal static int LargeStreamHeapSize;
}
internal class Microsoft.Scripting.Metadata.COR20Header : ValueType {
    internal DirectoryEntry MetaDataDirectory;
    internal DirectoryEntry ResourcesDirectory;
    internal DirectoryEntry StrongNameSignatureDirectory;
}
public class Microsoft.Scripting.Metadata.CustomAttributeDef : ValueType {
    private MetadataRecord m_record;
    public MetadataRecord Parent { get; }
    public MetadataRecord Constructor { get; }
    public MemoryBlock Value { get; }
    public MetadataRecord Record { get; }
    internal CustomAttributeDef(MetadataRecord record);
    public MetadataRecord get_Parent();
    public MetadataRecord get_Constructor();
    public MemoryBlock get_Value();
    public static MetadataRecord op_Implicit(CustomAttributeDef customAttributeDef);
    public static CustomAttributeDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.CustomAttributeTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsHasCustomAttributeRefSizeSmall;
    private bool IsCustomAttriubuteTypeRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int ParentOffset;
    private int TypeOffset;
    private int ValueOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal CustomAttributeTable(int numberOfRows, int hasCustomAttributeRefSize, int customAttributeTypeRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal MetadataToken GetParent(int rowId);
    internal MetadataToken GetConstructor(int rowId);
    internal UInt32 GetValue(int rowId);
    internal int FindCustomAttributesForToken(MetadataToken token, Int32& customAttributeCount);
    private int BinarySearchTag(UInt32 searchCodedTag, Int32& customAttributeCount);
}
internal static class Microsoft.Scripting.Metadata.CustomAttributeTypeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Method;
    internal static UInt32 MemberRef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 customAttributeType);
}
internal class Microsoft.Scripting.Metadata.DeclSecurityTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int ActionOffset;
    private int ParentOffset;
    private int PermissionSetOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal DeclSecurityTable(int numberOfRows, int hasDeclSecurityRefSize, int blobHeapRefSize, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.DirectoryEntry : ValueType {
    internal UInt32 RelativeVirtualAddress;
    internal UInt32 Size;
}
public enum Microsoft.Scripting.Metadata.ElementType : Enum {
    public byte value__;
    public static ElementType End;
    public static ElementType Void;
    public static ElementType Boolean;
    public static ElementType Char;
    public static ElementType Int8;
    public static ElementType UInt8;
    public static ElementType Int16;
    public static ElementType UInt16;
    public static ElementType Int32;
    public static ElementType UInt32;
    public static ElementType Int64;
    public static ElementType UInt64;
    public static ElementType Single;
    public static ElementType Double;
    public static ElementType String;
    public static ElementType Pointer;
    public static ElementType ByReference;
    public static ElementType ValueType;
    public static ElementType Class;
    public static ElementType GenericTypeParameter;
    public static ElementType Array;
    public static ElementType GenericTypeInstance;
    public static ElementType TypedReference;
    public static ElementType IntPtr;
    public static ElementType UIntPtr;
    public static ElementType FunctionPointer;
    public static ElementType Object;
    public static ElementType Vector;
    public static ElementType GenericMethodParameter;
    public static ElementType RequiredModifier;
    public static ElementType OptionalModifier;
    public static ElementType Internal;
    public static ElementType Max;
    public static ElementType Modifier;
    public static ElementType Sentinel;
    public static ElementType Pinned;
}
internal class Microsoft.Scripting.Metadata.EnCLogTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int TokenOffset;
    private int FuncCodeOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal EnCLogTable(int numberOfRows, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.EnCMapTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int TokenOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal EnCMapTable(int numberOfRows, int start, MemoryBlock block);
}
internal enum Microsoft.Scripting.Metadata.EnumerationIndirection : Enum {
    public int value__;
    public static EnumerationIndirection None;
    public static EnumerationIndirection Method;
    public static EnumerationIndirection Field;
    public static EnumerationIndirection Property;
    public static EnumerationIndirection Event;
    public static EnumerationIndirection Param;
}
public class Microsoft.Scripting.Metadata.EventAccessors : ValueType {
    private EventDef m_event;
    private MetadataToken m_add;
    private MetadataToken m_remove;
    private MetadataToken m_fire;
    public EventDef DeclaringEvent { get; }
    public bool HasAdd { get; }
    public bool HasRemove { get; }
    public bool HasFire { get; }
    public MethodDef Add { get; }
    public MethodDef Remove { get; }
    public MethodDef Fire { get; }
    public IEnumerable`1<MethodDef> Others { get; }
    internal EventAccessors(EventDef eventDef, MetadataToken add, MetadataToken remove, MetadataToken fire);
    public EventDef get_DeclaringEvent();
    public bool get_HasAdd();
    public bool get_HasRemove();
    public bool get_HasFire();
    public MethodDef get_Add();
    public MethodDef get_Remove();
    public MethodDef get_Fire();
    public IEnumerable`1<MethodDef> get_Others();
}
public class Microsoft.Scripting.Metadata.EventDef : ValueType {
    private MetadataRecord m_record;
    public EventAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MetadataRecord EventType { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal EventDef(MetadataRecord record);
    public EventAttributes get_Attributes();
    public MetadataName get_Name();
    public MetadataRecord get_EventType();
    public EventAccessors GetAccessors();
    public TypeDef FindDeclaringType();
    public static MetadataRecord op_Implicit(EventDef eventDef);
    public static EventDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
internal class Microsoft.Scripting.Metadata.EventMapTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefTableRowRefSizeSmall;
    private bool IsEventRefSizeSmall;
    private int ParentOffset;
    private int EventListOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal EventMapTable(int numberOfRows, int typeDefTableRowRefSize, int eventRefSize, int start, MemoryBlock block);
    internal int FindEventMapRowIdFor(int typeDefRowId);
    internal UInt32 GetEventListStartFor(int rowId);
    internal UInt32 GetParent(int rowId);
    internal UInt32 FindTypeContainingEvent(int eventDefOrPtrRowId, int eventTableRowCount);
}
internal class Microsoft.Scripting.Metadata.EventPtrTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsEventTableRowRefSizeSmall;
    private int EventOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal EventPtrTable(int numberOfRows, int eventTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetEventFor(int rowId);
}
internal class Microsoft.Scripting.Metadata.EventTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefOrRefRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int FlagsOffset;
    private int NameOffset;
    private int EventTypeOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal EventTable(int numberOfRows, int typeDefOrRefRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal MetadataToken GetEventType(int rowId);
    internal EventAttributes GetFlags(int rowId);
    internal UInt32 GetName(int rowId);
}
internal class Microsoft.Scripting.Metadata.ExportedTypeTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsImplementationRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int FlagsOffset;
    private int TypeDefIdOffset;
    private int TypeNameOffset;
    private int TypeNamespaceOffset;
    private int ImplementationOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ExportedTypeTable(int numberOfRows, int implementationRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetNamespace(int rowId);
    internal UInt32 GetName(int rowId);
    internal TypeAttributes GetFlags(int rowId);
    internal MetadataToken GetImplementation(int rowId);
}
public class Microsoft.Scripting.Metadata.FieldDef : ValueType {
    private MetadataRecord m_record;
    public FieldAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal FieldDef(MetadataRecord record);
    public FieldAttributes get_Attributes();
    public MetadataName get_Name();
    public MemoryBlock get_Signature();
    public object GetDefaultValue();
    public MemoryBlock GetData(int size);
    public TypeDef FindDeclaringType();
    public static MetadataRecord op_Implicit(FieldDef fieldDef);
    public static FieldDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
internal class Microsoft.Scripting.Metadata.FieldLayoutTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int OffsetOffset;
    private int FieldOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal FieldLayoutTable(int numberOfRows, int fieldTableRowRefSize, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.FieldMarshalTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private int ParentOffset;
    private int NativeTypeOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal FieldMarshalTable(int numberOfRows, int hasFieldMarshalRefSize, int blobHeapRefSize, int start, MemoryBlock block);
}
internal class Microsoft.Scripting.Metadata.FieldPtrTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsFieldTableRowRefSizeSmall;
    private int FieldOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal FieldPtrTable(int numberOfRows, int fieldTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetFieldFor(int rowId);
}
internal class Microsoft.Scripting.Metadata.FieldRVATable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsFieldTableRowRefSizeSmall;
    private int RVAOffset;
    private int FieldOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal FieldRVATable(int numberOfRows, int fieldTableRowRefSize, int start, MemoryBlock block);
    internal UInt32 GetFieldRVA(int fieldDefRowId);
}
internal class Microsoft.Scripting.Metadata.FieldTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int FlagsOffset;
    private int NameOffset;
    private int SignatureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal FieldTable(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal FieldAttributes GetFlags(int rowId);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetSignature(int rowId);
}
public class Microsoft.Scripting.Metadata.FileDef : ValueType {
    private MetadataRecord m_record;
    public AssemblyFileAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MetadataRecord Record { get; }
    internal FileDef(MetadataRecord record);
    public AssemblyFileAttributes get_Attributes();
    public MetadataName get_Name();
    public Byte[] GetHashValue();
    public static MetadataRecord op_Implicit(FileDef fileDef);
    public static FileDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.FileTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int FlagsOffset;
    private int NameOffset;
    private int HashValueOffset;
    private int RowSize;
    public MemoryBlock Table;
    internal FileTable(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetHashValue(int rowId);
    internal UInt32 GetName(int rowId);
    internal AssemblyFileAttributes GetFlags(int rowId);
}
public class Microsoft.Scripting.Metadata.GenericParamConstraint : ValueType {
    private MetadataRecord m_record;
    public GenericParamDef Owner { get; }
    public MetadataRecord Constraint { get; }
    public MetadataRecord Record { get; }
    internal GenericParamConstraint(MetadataRecord record);
    public GenericParamDef get_Owner();
    public MetadataRecord get_Constraint();
    public static MetadataRecord op_Implicit(GenericParamConstraint constraint);
    public static GenericParamConstraint op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.GenericParamConstraintTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsGenericParamTableRowRefSizeSmall;
    private bool IsTypeDefOrRefRefSizeSmall;
    private int OwnerOffset;
    private int ConstraintOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal GenericParamConstraintTable(int numberOfRows, int genericParamTableRowRefSize, int typeDefOrRefRefSize, int start, MemoryBlock block);
    internal MetadataToken GetConstraint(int rowId);
    internal MetadataToken GetOwner(int rowId);
    internal int FindConstraintForGenericParam(int genericParamRowId, Int32& genericParamConstraintCount);
}
public class Microsoft.Scripting.Metadata.GenericParamDef : ValueType {
    private MetadataRecord m_record;
    public GenericParameterAttributes Attributes { get; }
    public int Index { get; }
    public MetadataName Name { get; }
    public MetadataRecord Owner { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView Constraints { get; }
    public MetadataTableView CustomAttributes { get; }
    internal GenericParamDef(MetadataRecord record);
    public GenericParameterAttributes get_Attributes();
    public int get_Index();
    public MetadataName get_Name();
    public MetadataRecord get_Owner();
    public static MetadataRecord op_Implicit(GenericParamDef genericParamDef);
    public static GenericParamDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_Constraints();
    public MetadataTableView get_CustomAttributes();
}
internal class Microsoft.Scripting.Metadata.GenericParamTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeOrMethodDefRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int NumberOffset;
    private int FlagsOffset;
    private int OwnerOffset;
    private int NameOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal GenericParamTable(int numberOfRows, int typeOrMethodDefRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal int GetIndex(int rowId);
    internal GenericParameterAttributes GetFlags(int rowId);
    internal MetadataToken GetOwner(int rowId);
    internal UInt32 GetName(int rowId);
    internal int FindGenericParametersForType(int typeDefRowId, Int32& genericParamCount);
    internal int FindGenericParametersForMethod(int typeDefRowId, Int32& genericParamCount);
    private int BinarySearchTag(UInt32 searchCodedTag, Int32& genericParamCount);
}
internal static class Microsoft.Scripting.Metadata.HasConstantTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 hasConstant);
    internal static UInt32 ConvertToTag(MetadataToken token);
}
internal static class Microsoft.Scripting.Metadata.HasCustomAttributeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Method;
    internal static UInt32 Field;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 Param;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Module;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Property;
    internal static UInt32 Event;
    internal static UInt32 StandAloneSig;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 GenericParameter;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 hasCustomAttribute);
    internal static UInt32 ConvertToTag(MetadataToken token);
}
internal static class Microsoft.Scripting.Metadata.HasDeclSecurityTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 Method;
    internal static UInt32 Assembly;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 hasDeclSecurity);
    internal static UInt32 ConvertToTag(MetadataToken token);
}
internal static class Microsoft.Scripting.Metadata.HasFieldMarshalTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 hasFieldMarshal);
    internal static UInt32 ConvertToTag(MetadataToken token);
}
internal static class Microsoft.Scripting.Metadata.HasSemanticsTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Event;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 hasSemantic);
    internal static UInt32 ConvertEventRowIdToTag(int eventRowId);
    internal static UInt32 ConvertPropertyRowIdToTag(int propertyRowId);
}
internal enum Microsoft.Scripting.Metadata.HeapSizeFlag : Enum {
    public byte value__;
    public static HeapSizeFlag StringHeapLarge;
    public static HeapSizeFlag GUIDHeapLarge;
    public static HeapSizeFlag BlobHeapLarge;
    public static HeapSizeFlag EnCDeltas;
    public static HeapSizeFlag DeletedMarks;
}
internal static class Microsoft.Scripting.Metadata.ImplementationTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 File;
    internal static UInt32 AssemblyRef;
    internal static UInt32 ExportedType;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 implementation);
}
internal class Microsoft.Scripting.Metadata.ImplMapTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsMemberForwardRowRefSizeSmall;
    private int FlagsOffset;
    private int MemberForwardedOffset;
    private int ImportNameOffset;
    private int ImportScopeOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ImplMapTable(int numberOfRows, int moduleRefTableRowRefSize, int memberForwardedRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal int FindImplForMethod(int methodRowId);
    private int BinarySearchTag(UInt32 searchCodedTag);
}
public class Microsoft.Scripting.Metadata.InterfaceImpl : ValueType {
    private MetadataRecord m_record;
    public TypeDef ImplementingType { get; }
    public MetadataRecord InterfaceType { get; }
    public MetadataRecord Record { get; }
    internal InterfaceImpl(MetadataRecord record);
    public TypeDef get_ImplementingType();
    public MetadataRecord get_InterfaceType();
    public static MetadataRecord op_Implicit(InterfaceImpl paramDef);
    public static InterfaceImpl op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.InterfaceImplTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefTableRowRefSizeSmall;
    private bool IsTypeDefOrRefRefSizeSmall;
    private int ClassOffset;
    private int InterfaceOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal InterfaceImplTable(int numberOfRows, int typeDefTableRowRefSize, int typeDefOrRefRefSize, int start, MemoryBlock block);
    internal int FindInterfaceImplForType(int typeDefRowId, Int32& interfaceCount);
    internal UInt32 GetClass(int rowId);
    internal MetadataToken GetInterface(int rowId);
}
[FlagsAttribute]
public enum Microsoft.Scripting.Metadata.ManifestResourceAttributes : Enum {
    public int value__;
    public static ManifestResourceAttributes PublicVisibility;
    public static ManifestResourceAttributes PrivateVisibility;
    public static ManifestResourceAttributes VisibilityMask;
    public static ManifestResourceAttributes InExternalFile;
}
public class Microsoft.Scripting.Metadata.ManifestResourceDef : ValueType {
    private MetadataRecord m_record;
    [CLSCompliantAttribute("False")]
public UInt32 Offset { get; }
    public ManifestResourceAttributes Attributes { get; }
    public MetadataRecord Implementation { get; }
    public MetadataName Name { get; }
    public MetadataRecord Record { get; }
    internal ManifestResourceDef(MetadataRecord record);
    public UInt32 get_Offset();
    public ManifestResourceAttributes get_Attributes();
    public MetadataRecord get_Implementation();
    public MetadataName get_Name();
    public static MetadataRecord op_Implicit(ManifestResourceDef resourceDef);
    public static ManifestResourceDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.ManifestResourceTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsImplementationRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int OffsetOffset;
    private int FlagsOffset;
    private int NameOffset;
    private int ImplementationOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ManifestResourceTable(int numberOfRows, int implementationRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal MetadataToken GetImplementation(int rowId);
    internal ManifestResourceAttributes GetFlags(int rowId);
    internal UInt32 GetOffset(int rowId);
    internal UInt32 GetName(int rowId);
}
internal static class Microsoft.Scripting.Metadata.MemberForwardedTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Method;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 memberForwarded);
    internal static UInt32 ConvertMethodDefRowIdToTag(int methodDefRowId);
}
public class Microsoft.Scripting.Metadata.MemberRef : ValueType {
    private MetadataRecord m_record;
    public MetadataRecord Class { get; }
    public MetadataName Name { get; }
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    internal MemberRef(MetadataRecord record);
    public MetadataRecord get_Class();
    public MetadataName get_Name();
    public MemoryBlock get_Signature();
    public static MetadataRecord op_Implicit(MemberRef memberRef);
    public static MemberRef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal static class Microsoft.Scripting.Metadata.MemberRefParentTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 ModuleRef;
    internal static UInt32 Method;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 memberRef);
}
internal class Microsoft.Scripting.Metadata.MemberRefTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsMemberRefParentRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int ClassOffset;
    private int NameOffset;
    private int SignatureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MemberRefTable(int numberOfRows, int memberRefParentRefSize, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal MetadataToken GetClass(int rowId);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetSignature(int rowId);
}
public class Microsoft.Scripting.Metadata.MemoryBlock : object {
    private Byte* _pointer;
    private int _length;
    private object _owner;
    [CLSCompliantAttribute("False")]
public Byte* Pointer { get; }
    public int Length { get; }
    internal MemoryBlock(object owner, Byte* pointer, int length);
    public MemoryBlock GetRange(int start, int length);
    public Byte* get_Pointer();
    public int get_Length();
    public byte ReadByte(int offset);
    public short ReadInt16(int offset);
    public int ReadInt32(int offset);
    public long ReadInt64(int offset);
    public Guid ReadGuid(int offset);
    public void Read(int offset, Byte[] result);
    public string ReadUtf16(int offset, int byteCount);
    public string ReadAscii(int offset);
    public string ReadAscii(int offset, int maxByteCount);
    [CLSCompliantAttribute("False")]
public sbyte ReadSByte(int offset);
    [CLSCompliantAttribute("False")]
public ushort ReadUInt16(int offset);
    public char ReadChar(int offset);
    [CLSCompliantAttribute("False")]
public UInt32 ReadUInt32(int offset);
    [CLSCompliantAttribute("False")]
public ulong ReadUInt64(int offset);
    public float ReadSingle(int offset);
    public double ReadDouble(int offset);
    internal UInt32 ReadReference(int offset, bool smallRefSize);
    internal int ReadCompressedInt32(int offset, Int32& numberOfBytesRead);
    internal MetadataName ReadName(UInt32 offset);
    internal int BinarySearchForSlot(int numberOfRows, int numberOfChildren, int rowSize, int referenceOffset, UInt32 childRid, bool isReferenceSmall);
    internal int BinarySearchReference(int numberOfRows, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal int LinearSearchReference(int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
}
[SecurityCriticalAttribute]
public class Microsoft.Scripting.Metadata.MemoryMapping : CriticalFinalizerObject {
    [SecurityCriticalAttribute]
internal Byte* _pointer;
    private SafeMemoryMappedViewHandle _handle;
    internal long _capacity;
    [CLSCompliantAttribute("False")]
public Byte* Pointer { get; }
    public long Capacity { get; }
    [SecurityCriticalAttribute]
public Byte* get_Pointer();
    public long get_Capacity();
    public MemoryBlock GetRange(int start, int length);
    [SecuritySafeCriticalAttribute]
public static MemoryMapping Create(string path);
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
}
public class Microsoft.Scripting.Metadata.MemoryReader : object {
    private MemoryBlock _block;
    private int _position;
    public MemoryBlock Block { get; }
    public int Position { get; }
    public int RemainingBytes { get; }
    public MemoryReader(MemoryBlock block);
    public MemoryBlock get_Block();
    public int get_Position();
    public int get_RemainingBytes();
    public MemoryBlock GetRemainingBlock();
    public void Seek(int position);
    public void SeekRelative(int offset);
    internal void Align(int alignment);
    public char ReadChar();
    [CLSCompliantAttribute("False")]
public sbyte ReadSByte();
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public byte ReadByte();
    [CLSCompliantAttribute("False")]
public ushort ReadUInt16();
    [CLSCompliantAttribute("False")]
public UInt32 ReadUInt32();
    [CLSCompliantAttribute("False")]
public ulong ReadUInt64();
    public float ReadSingle();
    public double ReadDouble();
    public string ReadAscii(int maxByteCount);
}
[ExtensionAttribute]
public static class Microsoft.Scripting.Metadata.MetadataExtensions : object {
    [ExtensionAttribute]
public static bool IsNested(TypeAttributes attrs);
    [ExtensionAttribute]
public static bool IsForwarder(TypeAttributes attrs);
    [ExtensionAttribute]
public static AssemblyName GetAssemblyName(AssemblyRef assemblyRef);
    [ExtensionAttribute]
public static AssemblyName GetAssemblyName(AssemblyDef assemblyDef);
    private static AssemblyName CreateAssemblyName(MetadataName name, MetadataName culture, Version version, AssemblyNameFlags flags, Byte[] publicKeyOrToken);
    [ExtensionAttribute]
public static MetadataTables GetMetadataTables(Module module);
}
internal class Microsoft.Scripting.Metadata.MetadataImport : object {
    private MemoryBlock _image;
    private static int TableCount;
    private int _numberOfSections;
    private OptionalHeaderDirectoryEntries _optionalHeaderDirectoryEntries;
    private SectionHeader[] _sectionHeaders;
    private COR20Header _cor20Header;
    private StorageHeader _storageHeader;
    private StreamHeader[] _streamHeaders;
    private MemoryBlock _stringStream;
    private MemoryBlock _blobStream;
    private MemoryBlock _guidStream;
    private MemoryBlock _userStringStream;
    private MetadataStreamKind _metadataStreamKind;
    private MemoryBlock _metadataTableStream;
    private MetadataTableHeader _metadataTableHeader;
    private Int32[] _tableRowCounts;
    internal ModuleTable ModuleTable;
    internal TypeRefTable TypeRefTable;
    internal TypeDefTable TypeDefTable;
    internal FieldPtrTable FieldPtrTable;
    internal FieldTable FieldTable;
    internal MethodPtrTable MethodPtrTable;
    internal MethodTable MethodTable;
    internal ParamPtrTable ParamPtrTable;
    internal ParamTable ParamTable;
    internal InterfaceImplTable InterfaceImplTable;
    internal MemberRefTable MemberRefTable;
    internal ConstantTable ConstantTable;
    internal CustomAttributeTable CustomAttributeTable;
    internal FieldMarshalTable FieldMarshalTable;
    internal DeclSecurityTable DeclSecurityTable;
    internal ClassLayoutTable ClassLayoutTable;
    internal FieldLayoutTable FieldLayoutTable;
    internal StandAloneSigTable StandAloneSigTable;
    internal EventMapTable EventMapTable;
    internal EventPtrTable EventPtrTable;
    internal EventTable EventTable;
    internal PropertyMapTable PropertyMapTable;
    internal PropertyPtrTable PropertyPtrTable;
    internal PropertyTable PropertyTable;
    internal MethodSemanticsTable MethodSemanticsTable;
    internal MethodImplTable MethodImplTable;
    internal ModuleRefTable ModuleRefTable;
    internal TypeSpecTable TypeSpecTable;
    internal ImplMapTable ImplMapTable;
    internal FieldRVATable FieldRVATable;
    internal EnCLogTable EnCLogTable;
    internal EnCMapTable EnCMapTable;
    internal AssemblyTable AssemblyTable;
    internal AssemblyProcessorTable AssemblyProcessorTable;
    internal AssemblyOSTable AssemblyOSTable;
    internal AssemblyRefTable AssemblyRefTable;
    internal AssemblyRefProcessorTable AssemblyRefProcessorTable;
    internal AssemblyRefOSTable AssemblyRefOSTable;
    internal FileTable FileTable;
    internal ExportedTypeTable ExportedTypeTable;
    internal ManifestResourceTable ManifestResourceTable;
    internal NestedClassTable NestedClassTable;
    internal GenericParamTable GenericParamTable;
    internal MethodSpecTable MethodSpecTable;
    internal GenericParamConstraintTable GenericParamConstraintTable;
    internal bool IsManifestModule { get; }
    internal bool UseFieldPtrTable { get; }
    internal bool UseMethodPtrTable { get; }
    internal bool UseParamPtrTable { get; }
    internal bool UseEventPtrTable { get; }
    internal bool UsePropertyPtrTable { get; }
    internal MemoryBlock Image { get; }
    internal MetadataImport(MemoryBlock image);
    private void ReadOptionalHeaderDirectoryEntries(MemoryReader memReader);
    private void ReadSectionHeaders(MemoryReader memReader);
    private void ReadPEFileLevelData();
    internal MemoryBlock RvaToMemoryBlock(UInt32 rva, UInt32 size);
    private MemoryBlock DirectoryToMemoryBlock(DirectoryEntry directory);
    private void ReadCOR20Header();
    private void ReadMetadataHeader(MemoryReader memReader);
    private void ReadStorageHeader(MemoryReader memReader);
    private void ReadStreamHeaders(MemoryReader memReader);
    private void ProcessAndCacheStreams(MemoryBlock metadataRoot);
    private void ReadCORModuleLevelData();
    internal bool get_IsManifestModule();
    internal bool get_UseFieldPtrTable();
    internal bool get_UseMethodPtrTable();
    internal bool get_UseParamPtrTable();
    internal bool get_UseEventPtrTable();
    internal bool get_UsePropertyPtrTable();
    private void ReadMetadataTableInformation(MemoryReader memReader);
    private static int ComputeCodedTokenSize(int largeRowSize, Int32[] rowCountArray, TableMask tablesReferenced);
    private void ProcessAndCacheMetadataTableBlocks(MemoryBlock metadataTablesMemoryBlock);
    private void ReadMetadataLevelData();
    internal Byte[] GetBlob(UInt32 blob);
    internal MemoryBlock GetBlobBlock(UInt32 blob);
    internal int GetBlobDataOffset(UInt32 blob, Int32& size);
    internal object GetBlobValue(UInt32 blob, ElementType type);
    private static int GetMinTypeSize(ElementType type);
    internal Guid GetGuid(UInt32 blob);
    internal int GetFieldRange(int typeDefRid, Int32& count);
    internal int GetMethodRange(int typeDefRid, Int32& count);
    internal int GetEventRange(int typeDefRid, Int32& count);
    internal int GetPropertyRange(int typeDefRid, Int32& count);
    private int GetRangeCount(int rowCount, UInt32 start, UInt32 nextStart);
    internal int GetParamRange(int methodDefRid, Int32& count);
    internal EnumerationIndirection GetEnumeratorRange(MetadataTokenType type, MetadataToken parent, Int32& startRid, Int32& count);
    internal bool IsValidToken(MetadataToken token);
    internal int GetRowCount(int tableIndex);
    internal MetadataName GetMetadataName(UInt32 blob);
    internal object GetDefaultValue(MetadataToken token);
    internal MemoryBlock get_Image();
}
public class Microsoft.Scripting.Metadata.MetadataName : ValueType {
    internal Byte* m_data;
    internal object m_keepAlive;
    public static MetadataName Empty;
    public bool IsEmpty { get; }
    internal MetadataName(Byte* data, object keepAlive);
    public bool get_IsEmpty();
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataName other);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataNamePart other);
    public static bool op_Equality(MetadataName self, MetadataNamePart other);
    public static bool op_Equality(MetadataName self, MetadataName other);
    public static bool op_Inequality(MetadataName self, MetadataNamePart other);
    public static bool op_Inequality(MetadataName self, MetadataName other);
    public bool Equals(Byte[] bytes, int start, int count);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    internal string ToString(int byteCount);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    internal int GetHashCode(int start, int count);
    public int GetLength();
    public MetadataNamePart GetExtent();
    internal MetadataName GetSuffix(int start);
    internal int IndexOf(byte b);
    internal int IndexOf(byte b, int start, int count);
    internal int LastIndexOf(byte b, int start, int count);
    internal static int GetLength(Byte* bytes);
    internal static int IndexOf(Byte* bytes, byte b);
    internal static int IndexOf(Byte* bytes, byte b, int start, int count);
    internal static Byte* FindPrevious(Byte* start, Byte* last, byte b);
    internal static int GetByteHashCode(Byte* bytes);
    internal static int GetByteHashCode(Byte* bytes, int count);
    internal static bool Equals(Byte* p, Byte* q);
    internal static bool Equals(Byte* p, Byte* q, int qCount);
    internal static bool Equals(Byte* p, int pCount, Byte* q, int qCount);
}
public class Microsoft.Scripting.Metadata.MetadataNamePart : ValueType {
    private MetadataName m_name;
    private int m_byteCount;
    public static MetadataNamePart Empty;
    public int Length { get; }
    internal MetadataNamePart(MetadataName name, int byteCount);
    public int get_Length();
    public int IndexOf(byte b);
    public int IndexOf(byte b, int start, int count);
    public int LastIndexOf(byte b, int start, int count);
    public MetadataNamePart GetPart(int start);
    public MetadataNamePart GetPart(int start, int count);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataNamePart other);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataName other);
    public static bool op_Equality(MetadataNamePart self, MetadataNamePart other);
    public static bool op_Equality(MetadataNamePart self, MetadataName other);
    public static bool op_Inequality(MetadataNamePart self, MetadataNamePart other);
    public static bool op_Inequality(MetadataNamePart self, MetadataName other);
}
[DebuggerDisplayAttribute("{DebugView}")]
public class Microsoft.Scripting.Metadata.MetadataRecord : ValueType {
    internal MetadataToken m_token;
    internal MetadataTables m_tables;
    internal int Rid { get; }
    internal MetadataImport Import { get; }
    public MetadataTables Tables { get; }
    public MetadataToken Token { get; }
    public bool IsNull { get; }
    public bool IsValid { get; }
    internal string DebugView { get; }
    public MetadataRecordType Type { get; }
    public bool IsAssemblyDef { get; }
    public bool IsAssemblyRef { get; }
    public bool IsModuleDef { get; }
    public bool IsModuleRef { get; }
    public bool IsFileDef { get; }
    public bool IsManifestResourceDef { get; }
    public bool IsTypeRef { get; }
    public bool IsTypeDef { get; }
    public bool IsTypeSpec { get; }
    public bool IsTypeExport { get; }
    public bool IsTypeNesting { get; }
    public bool IsMemberRef { get; }
    public bool IsFieldDef { get; }
    public bool IsMethodDef { get; }
    public bool IsMethodSpec { get; }
    public bool IsInterfaceImpl { get; }
    public bool IsEvent { get; }
    public bool IsProperty { get; }
    public bool IsParamDef { get; }
    public bool IsGenericParamDef { get; }
    public bool IsGenericParamConstraint { get; }
    public bool IsSignatureDef { get; }
    public bool IsCustomAttributeDef { get; }
    public AssemblyDef AssemblyDef { get; }
    public AssemblyRef AssemblyRef { get; }
    public FileDef FileDef { get; }
    public ManifestResourceDef ResourceDef { get; }
    public ModuleDef ModuleDef { get; }
    public ModuleRef ModuleRef { get; }
    public TypeDef TypeDef { get; }
    public TypeRef TypeRef { get; }
    public TypeSpec TypeSpec { get; }
    public TypeNesting TypeNesting { get; }
    public TypeExport TypeExport { get; }
    public InterfaceImpl InterfaceImpl { get; }
    public FieldDef FieldDef { get; }
    public MethodDef MethodDef { get; }
    public MethodSpec MethodSpec { get; }
    public ParamDef ParamDef { get; }
    public MemberRef MemberRef { get; }
    public EventDef EventDef { get; }
    public PropertyDef PropertyDef { get; }
    public GenericParamDef GenericParamDef { get; }
    public GenericParamConstraint GenericParamConstraint { get; }
    public CustomAttributeDef CustomAttributeDef { get; }
    public SignatureDef SignatureDef { get; }
    internal MetadataRecord(MetadataToken token, MetadataTables tables);
    internal int get_Rid();
    internal MetadataImport get_Import();
    public MetadataTables get_Tables();
    public MetadataToken get_Token();
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataRecord other);
    public static bool op_Equality(MetadataRecord self, MetadataRecord other);
    public static bool op_Inequality(MetadataRecord self, MetadataRecord other);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public bool get_IsNull();
    public bool get_IsValid();
    internal static MetadataRecord Null(MetadataTables tables);
    internal string get_DebugView();
    public MetadataRecordType get_Type();
    public bool get_IsAssemblyDef();
    public bool get_IsAssemblyRef();
    public bool get_IsModuleDef();
    public bool get_IsModuleRef();
    public bool get_IsFileDef();
    public bool get_IsManifestResourceDef();
    public bool get_IsTypeRef();
    public bool get_IsTypeDef();
    public bool get_IsTypeSpec();
    public bool get_IsTypeExport();
    public bool get_IsTypeNesting();
    public bool get_IsMemberRef();
    public bool get_IsFieldDef();
    public bool get_IsMethodDef();
    public bool get_IsMethodSpec();
    public bool get_IsInterfaceImpl();
    public bool get_IsEvent();
    public bool get_IsProperty();
    public bool get_IsParamDef();
    public bool get_IsGenericParamDef();
    public bool get_IsGenericParamConstraint();
    public bool get_IsSignatureDef();
    public bool get_IsCustomAttributeDef();
    public AssemblyDef get_AssemblyDef();
    public AssemblyRef get_AssemblyRef();
    public FileDef get_FileDef();
    public ManifestResourceDef get_ResourceDef();
    public ModuleDef get_ModuleDef();
    public ModuleRef get_ModuleRef();
    public TypeDef get_TypeDef();
    public TypeRef get_TypeRef();
    public TypeSpec get_TypeSpec();
    public TypeNesting get_TypeNesting();
    public TypeExport get_TypeExport();
    public InterfaceImpl get_InterfaceImpl();
    public FieldDef get_FieldDef();
    public MethodDef get_MethodDef();
    public MethodSpec get_MethodSpec();
    public ParamDef get_ParamDef();
    public MemberRef get_MemberRef();
    public EventDef get_EventDef();
    public PropertyDef get_PropertyDef();
    public GenericParamDef get_GenericParamDef();
    public GenericParamConstraint get_GenericParamConstraint();
    public CustomAttributeDef get_CustomAttributeDef();
    public SignatureDef get_SignatureDef();
}
public enum Microsoft.Scripting.Metadata.MetadataRecordType : Enum {
    public int value__;
    public static MetadataRecordType ModuleDef;
    public static MetadataRecordType TypeRef;
    public static MetadataRecordType TypeDef;
    public static MetadataRecordType FieldDef;
    public static MetadataRecordType MethodDef;
    public static MetadataRecordType ParamDef;
    public static MetadataRecordType InterfaceImpl;
    public static MetadataRecordType MemberRef;
    public static MetadataRecordType CustomAttributeDef;
    public static MetadataRecordType Permission;
    public static MetadataRecordType SignatureDef;
    public static MetadataRecordType EventDef;
    public static MetadataRecordType PropertyDef;
    public static MetadataRecordType ModuleRef;
    public static MetadataRecordType TypeSpec;
    public static MetadataRecordType AssemblyDef;
    public static MetadataRecordType AssemblyRef;
    public static MetadataRecordType FileDef;
    public static MetadataRecordType TypeExport;
    public static MetadataRecordType ManifestResourceDef;
    public static MetadataRecordType TypeNesting;
    public static MetadataRecordType GenericParamDef;
    public static MetadataRecordType MethodSpec;
    public static MetadataRecordType GenericParamConstraint;
}
public static class Microsoft.Scripting.Metadata.MetadataServices : object {
    private static Dictionary`2<Assembly, MetadataTables[]> _metadataCache;
    private static Byte[] _ExtensionAttributeNameUtf8;
    private static Byte[] _ExtensionAttributeNamespaceUtf8;
    private static MetadataServices();
    private static MetadataTables[] GetAsseblyMetadata(Assembly assembly);
    private static void GetName(CustomAttributeDef ca, MetadataName& name, MetadataName& namespace);
    private static bool IsExtensionAttribute(CustomAttributeDef ca);
    private static MetadataRecord GetExtensionAttributeCtor(MetadataTables tables);
    public static List`1<KeyValuePair`2<Module, int>> GetVisibleExtensionMethods(Assembly assembly);
    public static List`1<MethodInfo> GetVisibleExtensionMethodInfos(Assembly assembly);
}
internal static class Microsoft.Scripting.Metadata.MetadataStreamConstants : object {
    internal static int SizeOfMetadataTableHeader;
    internal static int LargeTableRowCount;
}
internal enum Microsoft.Scripting.Metadata.MetadataStreamKind : Enum {
    public int value__;
    public static MetadataStreamKind Illegal;
    public static MetadataStreamKind Compressed;
    public static MetadataStreamKind UnCompressed;
}
public class Microsoft.Scripting.Metadata.MetadataTableEnumerator : object {
    private int m_startRid;
    private int m_endRid;
    private MetadataTokenType m_type;
    private EnumerationIndirection m_indirection;
    private MetadataTables m_tables;
    private int m_currentRid;
    private MetadataToken m_currentToken;
    public int Count { get; }
    public MetadataRecord Current { get; }
    internal MetadataTableEnumerator(MetadataRecord parent, MetadataTokenType type);
    public int get_Count();
    public void Reset();
    public bool MoveNext();
    public MetadataRecord get_Current();
}
internal class Microsoft.Scripting.Metadata.MetadataTableHeader : ValueType {
    internal byte MajorVersion;
    internal byte MinorVersion;
    internal HeapSizeFlag HeapSizeFlags;
    internal TableMask ValidTables;
    internal TableMask SortedTables;
    internal Int32[] CompressedMetadataTableRowCount;
    internal int GetNumberOfTablesPresent();
}
public class Microsoft.Scripting.Metadata.MetadataTables : object {
    [CompilerGeneratedAttribute]
private Module <Module>k__BackingField;
    internal MetadataImport m_import;
    internal string m_path;
    public Module Module { get; }
    public string Path { get; }
    public ModuleDef ModuleDef { get; }
    public AssemblyDef AssemblyDef { get; }
    public MetadataTableView AssemblyRefs { get; }
    public MetadataTableView ModuleRefs { get; }
    public MetadataTableView Files { get; }
    public MetadataTableView ManifestResources { get; }
    public MetadataTableView TypeDefs { get; }
    public MetadataTableView TypeSpecs { get; }
    public MetadataTableView TypeRefs { get; }
    public MetadataTableView TypeNestings { get; }
    public MetadataTableView TypeExports { get; }
    public MetadataTableView MethodDefs { get; }
    public MetadataTableView MethodSpecs { get; }
    public MetadataTableView FieldDefs { get; }
    public MetadataTableView MemberRefs { get; }
    public MetadataTableView Signatures { get; }
    public MetadataTableView CustomAttributes { get; }
    public MetadataTableView InterfacesImpls { get; }
    internal MetadataTables(MetadataImport import, string path, Module module);
    [CompilerGeneratedAttribute]
public Module get_Module();
    public bool IsValidToken(MetadataToken token);
    internal MetadataName ToMetadataName(UInt32 blob);
    public static MetadataTables OpenFile(string path);
    public static MetadataTables OpenModule(Module module);
    private static MetadataImport CreateImport(string path);
    public int GetRowCount(int tableIndex);
    internal int GetRowCount(MetadataRecordType tableIndex);
    public string get_Path();
    public ModuleDef get_ModuleDef();
    public AssemblyDef get_AssemblyDef();
    public MetadataTableView get_AssemblyRefs();
    public MetadataTableView get_ModuleRefs();
    public MetadataTableView get_Files();
    public MetadataTableView get_ManifestResources();
    public MetadataTableView get_TypeDefs();
    public MetadataTableView get_TypeSpecs();
    public MetadataTableView get_TypeRefs();
    public MetadataTableView get_TypeNestings();
    public MetadataTableView get_TypeExports();
    public MetadataTableView get_MethodDefs();
    public MetadataTableView get_MethodSpecs();
    public MetadataTableView get_FieldDefs();
    public MetadataTableView get_MemberRefs();
    public MetadataTableView get_Signatures();
    public MetadataTableView get_CustomAttributes();
    public MetadataTableView get_InterfacesImpls();
    public MetadataRecord GetRecord(MetadataToken token);
}
public class Microsoft.Scripting.Metadata.MetadataTableView : ValueType {
    private MetadataTokenType m_type;
    private MetadataRecord m_parent;
    internal MetadataTableView(MetadataRecord parent, MetadataTokenType type);
    public int GetCount();
    public MetadataTableEnumerator GetEnumerator();
}
[DebuggerDisplayAttribute("{DebugView}")]
public class Microsoft.Scripting.Metadata.MetadataToken : ValueType {
    internal int m_value;
    public bool IsNull { get; }
    public int Rid { get; }
    public int Value { get; }
    internal MetadataTokenType TokenType { get; }
    public MetadataRecordType RecordType { get; }
    internal string DebugView { get; }
    public bool IsTypeRef { get; }
    public bool IsTypeDef { get; }
    public bool IsFieldDef { get; }
    public bool IsMethodDef { get; }
    public bool IsMemberRef { get; }
    public bool IsEvent { get; }
    public bool IsProperty { get; }
    public bool IsParamDef { get; }
    public bool IsTypeSpec { get; }
    public bool IsMethodSpec { get; }
    public bool IsString { get; }
    public bool IsSignature { get; }
    public bool IsCustomAttribute { get; }
    public bool IsGenericParam { get; }
    public bool IsGenericParamContraint { get; }
    public MetadataToken(int value);
    internal MetadataToken(MetadataTokenType type, int rowId);
    internal MetadataToken(MetadataTokenType type, UInt32 rowId);
    public MetadataToken(MetadataRecordType type, int rowId);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool Equals(MetadataToken other);
    public static bool op_Equality(MetadataToken self, MetadataToken other);
    public static bool op_Inequality(MetadataToken self, MetadataToken other);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public bool get_IsNull();
    public int get_Rid();
    public int get_Value();
    internal MetadataTokenType get_TokenType();
    public MetadataRecordType get_RecordType();
    internal string get_DebugView();
    public bool get_IsTypeRef();
    public bool get_IsTypeDef();
    public bool get_IsFieldDef();
    public bool get_IsMethodDef();
    public bool get_IsMemberRef();
    public bool get_IsEvent();
    public bool get_IsProperty();
    public bool get_IsParamDef();
    public bool get_IsTypeSpec();
    public bool get_IsMethodSpec();
    public bool get_IsString();
    public bool get_IsSignature();
    public bool get_IsCustomAttribute();
    public bool get_IsGenericParam();
    public bool get_IsGenericParamContraint();
}
internal enum Microsoft.Scripting.Metadata.MetadataTokenType : Enum {
    public int value__;
    public static MetadataTokenType Module;
    public static MetadataTokenType TypeRef;
    public static MetadataTokenType TypeDef;
    public static MetadataTokenType FieldDef;
    public static MetadataTokenType MethodDef;
    public static MetadataTokenType ParamDef;
    public static MetadataTokenType InterfaceImpl;
    public static MetadataTokenType MemberRef;
    public static MetadataTokenType CustomAttribute;
    public static MetadataTokenType Permission;
    public static MetadataTokenType Signature;
    public static MetadataTokenType Event;
    public static MetadataTokenType Property;
    public static MetadataTokenType ModuleRef;
    public static MetadataTokenType TypeSpec;
    public static MetadataTokenType Assembly;
    public static MetadataTokenType AssemblyRef;
    public static MetadataTokenType File;
    public static MetadataTokenType ExportedType;
    public static MetadataTokenType ManifestResource;
    public static MetadataTokenType NestedClass;
    public static MetadataTokenType GenericPar;
    public static MetadataTokenType MethodSpec;
    public static MetadataTokenType GenericParamConstraint;
    public static MetadataTokenType String;
    public static MetadataTokenType Name;
    public static MetadataTokenType BaseType;
    public static MetadataTokenType Invalid;
}
public class Microsoft.Scripting.Metadata.MethodDef : ValueType {
    private MetadataRecord m_record;
    public MethodImplAttributes ImplAttributes { get; }
    public MethodAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView Parameters { get; }
    public MetadataTableView GenericParameters { get; }
    public MetadataTableView CustomAttributes { get; }
    internal MethodDef(MetadataRecord record);
    public MethodImplAttributes get_ImplAttributes();
    public MethodAttributes get_Attributes();
    public MetadataName get_Name();
    public MemoryBlock get_Signature();
    public MemoryBlock GetBody();
    public TypeDef FindDeclaringType();
    public int GetGenericParameterCount();
    public static MetadataRecord op_Implicit(MethodDef methodDef);
    public static MethodDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_Parameters();
    public MetadataTableView get_GenericParameters();
    public MetadataTableView get_CustomAttributes();
}
internal static class Microsoft.Scripting.Metadata.MethodDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 methodDefOrRef);
}
internal class Microsoft.Scripting.Metadata.MethodImplTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefTableRowRefSizeSmall;
    private int ClassOffset;
    private int MethodBodyOffset;
    private int MethodDeclarationOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MethodImplTable(int numberOfRows, int typeDefTableRowRefSize, int methodDefOrRefRefSize, int start, MemoryBlock block);
    internal int FindMethodsImplForClass(int typeDefRowId, UInt16& methodImplCount);
}
internal class Microsoft.Scripting.Metadata.MethodPtrTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsMethodTableRowRefSizeSmall;
    private int MethodOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MethodPtrTable(int numberOfRows, int methodTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetMethodFor(int rowId);
}
internal enum Microsoft.Scripting.Metadata.MethodSemanticsFlags : Enum {
    public ushort value__;
    public static MethodSemanticsFlags Setter;
    public static MethodSemanticsFlags Getter;
    public static MethodSemanticsFlags Other;
    public static MethodSemanticsFlags AddOn;
    public static MethodSemanticsFlags RemoveOn;
    public static MethodSemanticsFlags Fire;
}
internal class Microsoft.Scripting.Metadata.MethodSemanticsTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsMethodTableRowRefSizeSmall;
    private bool IsHasSemanticRefSizeSmall;
    private int SemanticsFlagOffset;
    private int MethodOffset;
    private int AssociationOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MethodSemanticsTable(int numberOfRows, int methodTableRowRefSize, int hasSemanticRefSize, int start, MemoryBlock block);
    internal MethodSemanticsFlags GetFlags(int rowId);
    internal UInt32 GetMethodRid(int rowId);
    internal MetadataToken GetAssociation(int rowId);
    internal int FindSemanticMethodsForEvent(int eventRowId, Int32& methodCount);
    internal int FindSemanticMethodsForProperty(int propertyRowId, Int32& methodCount);
    private int BinarySearchTag(UInt32 searchCodedTag, Int32& methodCount);
}
public class Microsoft.Scripting.Metadata.MethodSpec : ValueType {
    private MetadataRecord m_record;
    public MetadataRecord GenericMethod { get; }
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    internal MethodSpec(MetadataRecord record);
    public MetadataRecord get_GenericMethod();
    public MemoryBlock get_Signature();
    public static MetadataRecord op_Implicit(MethodSpec methodSpec);
    public static MethodSpec op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.MethodSpecTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsMethodDefOrRefRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int MethodOffset;
    private int InstantiationOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MethodSpecTable(int numberOfRows, int methodDefOrRefRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal MetadataToken GetGenericMethod(int rowId);
    internal UInt32 GetSignature(int rowId);
}
internal class Microsoft.Scripting.Metadata.MethodTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsParamRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int RVAOffset;
    private int ImplFlagsOffset;
    private int FlagsOffset;
    private int NameOffset;
    private int SignatureOffset;
    private int ParamListOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal MethodTable(int numberOfRows, int paramRefSize, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetFirstParamRid(int rowId);
    internal UInt32 GetSignature(int rowId);
    internal UInt32 GetRVA(int rowId);
    internal MethodAttributes GetFlags(int rowId);
    internal MethodImplAttributes GetImplFlags(int rowId);
    internal UInt32 GetName(int rowId);
    internal int GetNextRVA(int rva);
    internal int FindMethodContainingParam(int paramDefOrPtrRowId, int paramTableRowCount);
}
public class Microsoft.Scripting.Metadata.ModuleDef : ValueType {
    private MetadataRecord m_record;
    public MetadataName Name { get; }
    public Guid Mvid { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal ModuleDef(MetadataRecord record);
    public MetadataName get_Name();
    public Guid get_Mvid();
    public static MetadataRecord op_Implicit(ModuleDef moduleDef);
    public static ModuleDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
public class Microsoft.Scripting.Metadata.ModuleRef : ValueType {
    private MetadataRecord m_record;
    public MetadataName Name { get; }
    public MetadataRecord Record { get; }
    internal ModuleRef(MetadataRecord record);
    public MetadataName get_Name();
    public static MetadataRecord op_Implicit(ModuleRef moduleDef);
    public static ModuleRef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.ModuleRefTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private int NameOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ModuleRefTable(int numberOfRows, int stringHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetName(int rowId);
}
internal class Microsoft.Scripting.Metadata.ModuleTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsGUIDHeapRefSizeSmall;
    private int GenerationOffset;
    private int NameOffset;
    private int MVIdOffset;
    private int EnCIdOffset;
    private int EnCBaseIdOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ModuleTable(int numberOfRows, int stringHeapRefSize, int guidHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetMVId(int rowId);
}
internal class Microsoft.Scripting.Metadata.NestedClassTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefTableRowRefSizeSmall;
    private int NestedClassOffset;
    private int EnclosingClassOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal NestedClassTable(int numberOfRows, int typeDefTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetNestedType(int rowId);
    internal MetadataToken GetEnclosingType(int rowId);
    internal UInt32 FindParentTypeDefRowId(int nestedTypeRowId);
}
internal class Microsoft.Scripting.Metadata.OptionalHeaderDirectoryEntries : ValueType {
    internal DirectoryEntry ResourceTableDirectory;
    internal DirectoryEntry COR20HeaderTableDirectory;
}
public class Microsoft.Scripting.Metadata.ParamDef : ValueType {
    private MetadataRecord m_record;
    public ParameterAttributes Attributes { get; }
    public int Index { get; }
    public MetadataName Name { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal ParamDef(MetadataRecord record);
    public ParameterAttributes get_Attributes();
    public int get_Index();
    public MetadataName get_Name();
    public object GetDefaultValue();
    public MethodDef FindDeclaringMethod();
    public static MetadataRecord op_Implicit(ParamDef paramDef);
    public static ParamDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
internal class Microsoft.Scripting.Metadata.ParamPtrTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsParamTableRowRefSizeSmall;
    private int ParamOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ParamPtrTable(int numberOfRows, int paramTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetParamFor(int rowId);
}
internal class Microsoft.Scripting.Metadata.ParamTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private int FlagsOffset;
    private int SequenceOffset;
    private int NameOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal ParamTable(int numberOfRows, int stringHeapRefSize, int start, MemoryBlock block);
    internal ParameterAttributes GetFlags(int rowId);
    internal ushort GetSequence(int rowId);
    internal UInt32 GetName(int rowId);
}
internal static class Microsoft.Scripting.Metadata.PEFileConstants : object {
    internal static ushort DosSignature;
    internal static int PESignatureOffsetLocation;
    internal static UInt32 PESignature;
    internal static int BasicPEHeaderSize;
    internal static int SizeofCOFFFileHeader;
    internal static int SizeofOptionalHeaderStandardFields32;
    internal static int SizeofOptionalHeaderStandardFields64;
    internal static int SizeofOptionalHeaderNTAdditionalFields32;
    internal static int SizeofOptionalHeaderNTAdditionalFields64;
    internal static int NumberofOptionalHeaderDirectoryEntries;
    internal static int SizeofOptionalHeaderDirectoriesEntries;
    internal static int SizeofSectionHeader;
    internal static int SizeofSectionName;
    internal static int SizeofResourceDirectory;
    internal static int SizeofResourceDirectoryEntry;
}
internal enum Microsoft.Scripting.Metadata.PEMagic : Enum {
    public ushort value__;
    public static PEMagic PEMagic32;
    public static PEMagic PEMagic64;
}
public class Microsoft.Scripting.Metadata.PropertyAccessors : ValueType {
    private PropertyDef m_property;
    private MetadataToken m_getter;
    private MetadataToken m_setter;
    public PropertyDef DeclaringProperty { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public MethodDef Getter { get; }
    public MethodDef Setter { get; }
    public IEnumerable`1<MethodDef> Others { get; }
    internal PropertyAccessors(PropertyDef propertyDef, MetadataToken getter, MetadataToken setter);
    public PropertyDef get_DeclaringProperty();
    public bool get_HasGetter();
    public bool get_HasSetter();
    public MethodDef get_Getter();
    public MethodDef get_Setter();
    public IEnumerable`1<MethodDef> get_Others();
}
public class Microsoft.Scripting.Metadata.PropertyDef : ValueType {
    private MetadataRecord m_record;
    public PropertyAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    public MetadataTableView CustomAttributes { get; }
    internal PropertyDef(MetadataRecord record);
    public PropertyAttributes get_Attributes();
    public MetadataName get_Name();
    public MemoryBlock get_Signature();
    public PropertyAccessors GetAccessors();
    public object GetDefaultValue();
    public TypeDef FindDeclaringType();
    public static MetadataRecord op_Implicit(PropertyDef propertyDef);
    public static PropertyDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public MetadataTableView get_CustomAttributes();
}
internal class Microsoft.Scripting.Metadata.PropertyMapTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsTypeDefTableRowRefSizeSmall;
    private bool IsPropertyRefSizeSmall;
    private int ParentOffset;
    private int PropertyListOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal PropertyMapTable(int numberOfRows, int typeDefTableRowRefSize, int propertyRefSize, int start, MemoryBlock block);
    internal int FindPropertyMapRowIdFor(int typeDefRowId);
    internal UInt32 GetFirstPropertyRid(int rowId);
    internal UInt32 GetParent(int rowId);
    internal UInt32 FindTypeContainingProperty(int propertyDefOrPtrRowId, int propertyTableRowCount);
}
internal class Microsoft.Scripting.Metadata.PropertyPtrTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsPropertyTableRowRefSizeSmall;
    private int PropertyOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal PropertyPtrTable(int numberOfRows, int propertyTableRowRefSize, int start, MemoryBlock block);
    internal MetadataToken GetPropertyFor(int rowId);
}
internal class Microsoft.Scripting.Metadata.PropertyTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsStringHeapRefSizeSmall;
    private bool IsBlobHeapRefSizeSmall;
    private int FlagsOffset;
    private int NameOffset;
    private int SignatureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal PropertyTable(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetSignature(int rowId);
    internal PropertyAttributes GetFlags(int rowId);
    internal UInt32 GetName(int rowId);
}
internal static class Microsoft.Scripting.Metadata.ResolutionScopeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Module;
    internal static UInt32 ModuleRef;
    internal static UInt32 AssemblyRef;
    internal static UInt32 TypeRef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 resolutionScope);
}
internal class Microsoft.Scripting.Metadata.SectionHeader : ValueType {
    internal UInt32 VirtualSize;
    internal UInt32 VirtualAddress;
    internal UInt32 SizeOfRawData;
    internal UInt32 OffsetToRawData;
}
public class Microsoft.Scripting.Metadata.SignatureDef : ValueType {
    private MetadataRecord m_record;
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    internal SignatureDef(MetadataRecord record);
    public MemoryBlock get_Signature();
    public static MetadataRecord op_Implicit(SignatureDef signatureDef);
    public static SignatureDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
public static class Microsoft.Scripting.Metadata.SignatureHeader : object {
    public static byte DefaultCall;
    public static byte CCall;
    public static byte StdCall;
    public static byte ThisCall;
    public static byte FastCall;
    public static byte VarArgCall;
    public static byte Field;
    public static byte LocalVar;
    public static byte Property;
    public static byte GenericInstance;
    public static byte Max;
    public static byte CallingConventionMask;
    public static byte HasThis;
    public static byte ExplicitThis;
    public static byte Generic;
    public static bool IsMethodSignature(byte signatureHeader);
    public static bool IsVarArgCallSignature(byte signatureHeader);
    public static bool IsFieldSignature(byte signatureHeader);
    public static bool IsLocalVarSignature(byte signatureHeader);
    public static bool IsPropertySignature(byte signatureHeader);
    public static bool IsGenericInstanceSignature(byte signatureHeader);
    public static bool IsExplicitThis(byte signatureHeader);
    public static bool IsGeneric(byte signatureHeader);
}
internal class Microsoft.Scripting.Metadata.StandAloneSigTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsBlobHeapRefSizeSmall;
    private int SignatureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal StandAloneSigTable(int numberOfRows, int blobHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetSignature(int rowId);
}
internal class Microsoft.Scripting.Metadata.StorageHeader : ValueType {
    internal ushort Flags;
    internal ushort NumberOfStreams;
}
internal class Microsoft.Scripting.Metadata.StreamHeader : ValueType {
    internal UInt32 Offset;
    internal UInt32 Size;
    internal string Name;
}
internal enum Microsoft.Scripting.Metadata.TableMask : Enum {
    public ulong value__;
    public static TableMask Module;
    public static TableMask TypeRef;
    public static TableMask TypeDef;
    public static TableMask FieldPtr;
    public static TableMask Field;
    public static TableMask MethodPtr;
    public static TableMask Method;
    public static TableMask ParamPtr;
    public static TableMask Param;
    public static TableMask InterfaceImpl;
    public static TableMask MemberRef;
    public static TableMask Constant;
    public static TableMask CustomAttribute;
    public static TableMask FieldMarshal;
    public static TableMask DeclSecurity;
    public static TableMask ClassLayout;
    public static TableMask FieldLayout;
    public static TableMask StandAloneSig;
    public static TableMask EventMap;
    public static TableMask EventPtr;
    public static TableMask Event;
    public static TableMask PropertyMap;
    public static TableMask PropertyPtr;
    public static TableMask Property;
    public static TableMask MethodSemantics;
    public static TableMask MethodImpl;
    public static TableMask ModuleRef;
    public static TableMask TypeSpec;
    public static TableMask ImplMap;
    public static TableMask FieldRva;
    public static TableMask EnCLog;
    public static TableMask EnCMap;
    public static TableMask Assembly;
    public static TableMask AssemblyProcessor;
    public static TableMask AssemblyOS;
    public static TableMask AssemblyRef;
    public static TableMask AssemblyRefProcessor;
    public static TableMask AssemblyRefOS;
    public static TableMask File;
    public static TableMask ExportedType;
    public static TableMask ManifestResource;
    public static TableMask NestedClass;
    public static TableMask GenericParam;
    public static TableMask MethodSpec;
    public static TableMask GenericParamConstraint;
    public static TableMask SortedTablesMask;
    public static TableMask CompressedStreamNotAllowedMask;
    public static TableMask V1_0_TablesMask;
    public static TableMask V1_1_TablesMask;
    public static TableMask V2_0_TablesMask;
}
public class Microsoft.Scripting.Metadata.TypeDef : ValueType {
    private MetadataRecord m_record;
    public MetadataName Name { get; }
    public MetadataName Namespace { get; }
    public TypeAttributes Attributes { get; }
    public MetadataRecord BaseType { get; }
    public MetadataRecord Record { get; }
    public bool IsGlobal { get; }
    public MetadataTableView ImplementedInterfaces { get; }
    public MetadataTableView GenericParameters { get; }
    public MetadataTableView Fields { get; }
    public MetadataTableView Methods { get; }
    public MetadataTableView Properties { get; }
    public MetadataTableView Events { get; }
    public MetadataTableView CustomAttributes { get; }
    internal TypeDef(MetadataRecord record);
    public MetadataName get_Name();
    public MetadataName get_Namespace();
    public TypeAttributes get_Attributes();
    public MetadataRecord get_BaseType();
    public TypeDef FindDeclaringType();
    public int GetGenericParameterCount();
    public static MetadataRecord op_Implicit(TypeDef typeDef);
    public static TypeDef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
    public bool get_IsGlobal();
    public MetadataTableView get_ImplementedInterfaces();
    public MetadataTableView get_GenericParameters();
    public MetadataTableView get_Fields();
    public MetadataTableView get_Methods();
    public MetadataTableView get_Properties();
    public MetadataTableView get_Events();
    public MetadataTableView get_CustomAttributes();
}
internal static class Microsoft.Scripting.Metadata.TypeDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static int LargeRowSize;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 typeDefOrRefTag);
}
internal class Microsoft.Scripting.Metadata.TypeDefTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsFieldRefSizeSmall;
    private bool IsMethodRefSizeSmall;
    private bool IsTypeDefOrRefRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int FlagsOffset;
    private int NameOffset;
    private int NamespaceOffset;
    private int ExtendsOffset;
    private int FieldListOffset;
    private int MethodListOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal TypeDefTable(int numberOfRows, int fieldRefSize, int methodRefSize, int typeDefOrRefRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal TypeAttributes GetFlags(int rowId);
    internal UInt32 GetNamespace(int rowId);
    internal UInt32 GetName(int rowId);
    internal MetadataToken GetExtends(int rowId);
    internal UInt32 GetFirstFieldRid(int rowId);
    internal UInt32 GetFirstMethodRid(int rowId);
    internal int FindTypeContainingMethod(int methodDefOrPtrRowId, int methodTableRowCount);
    internal int FindTypeContainingField(int fieldDefOrPtrRowId, int fieldTableRowCount);
}
public class Microsoft.Scripting.Metadata.TypeExport : ValueType {
    private MetadataRecord m_record;
    public TypeAttributes Attributes { get; }
    public MetadataName Name { get; }
    public MetadataName Namespace { get; }
    public MetadataRecord Implementation { get; }
    public MetadataRecord Record { get; }
    internal TypeExport(MetadataRecord record);
    public TypeAttributes get_Attributes();
    public MetadataName get_Name();
    public MetadataName get_Namespace();
    public MetadataRecord get_Implementation();
    public static MetadataRecord op_Implicit(TypeExport typeExport);
    public static TypeExport op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
public class Microsoft.Scripting.Metadata.TypeNesting : ValueType {
    private MetadataRecord m_record;
    public TypeDef NestedType { get; }
    public TypeDef EnclosingType { get; }
    public MetadataRecord Record { get; }
    internal TypeNesting(MetadataRecord record);
    public TypeDef get_NestedType();
    public TypeDef get_EnclosingType();
    public static MetadataRecord op_Implicit(TypeNesting nestedClassDef);
    public static TypeNesting op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal static class Microsoft.Scripting.Metadata.TypeOrMethodDefTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 MethodDef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static MetadataToken ConvertToToken(UInt32 typeOrMethodDef);
    internal static UInt32 ConvertTypeDefRowIdToTag(int typeDefRowId);
    internal static UInt32 ConvertMethodDefRowIdToTag(int methodDefRowId);
}
public class Microsoft.Scripting.Metadata.TypeRef : ValueType {
    private MetadataRecord m_record;
    public MetadataRecord ResolutionScope { get; }
    public MetadataName TypeName { get; }
    public MetadataName TypeNamespace { get; }
    public MetadataRecord Record { get; }
    internal TypeRef(MetadataRecord record);
    public MetadataRecord get_ResolutionScope();
    public MetadataName get_TypeName();
    public MetadataName get_TypeNamespace();
    public static MetadataRecord op_Implicit(TypeRef typeRef);
    public static TypeRef op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.TypeRefTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsResolutionScopeRefSizeSmall;
    private bool IsStringHeapRefSizeSmall;
    private int ResolutionScopeOffset;
    private int NameOffset;
    private int NamespaceOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal TypeRefTable(int numberOfRows, int resolutionScopeRefSize, int stringHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetName(int rowId);
    internal UInt32 GetNamespace(int rowId);
    internal MetadataToken GetResolutionScope(int rowId);
}
public class Microsoft.Scripting.Metadata.TypeSpec : ValueType {
    private MetadataRecord m_record;
    public MemoryBlock Signature { get; }
    public MetadataRecord Record { get; }
    internal TypeSpec(MetadataRecord record);
    public MemoryBlock get_Signature();
    public static MetadataRecord op_Implicit(TypeSpec typeSpec);
    public static TypeSpec op_Explicit(MetadataRecord record);
    public MetadataRecord get_Record();
}
internal class Microsoft.Scripting.Metadata.TypeSpecTable : object {
    internal static int TableIndex;
    internal int NumberOfRows;
    private bool IsBlobHeapRefSizeSmall;
    private int SignatureOffset;
    private int RowSize;
    internal MemoryBlock Table;
    internal TypeSpecTable(int numberOfRows, int blobHeapRefSize, int start, MemoryBlock block);
    internal UInt32 GetSignature(int rowId);
}
