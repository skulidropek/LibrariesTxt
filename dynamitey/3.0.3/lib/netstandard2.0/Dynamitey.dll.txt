public class Dynamitey.Activate : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Object[]> <Arguments>k__BackingField;
    public Type Type { get; private set; }
    public Func`1<Object[]> Arguments { get; private set; }
    public Activate(Type type, Object[] args);
    public Activate(Type type, Func`1<Object[]> args);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public virtual Func`1<Object[]> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(Func`1<Object[]> value);
    public virtual object Create();
}
public class Dynamitey.Activate`1 : Activate {
    public Activate`1(Object[] args);
    public Activate`1(Func`1<Object[]> args);
    public virtual object Create();
}
public static class Dynamitey.Build : object {
    [DynamicAttribute]
private static object _objectBuilder;
    [DynamicAttribute]
private static object _listBuilder;
    [DynamicAttribute]
public static object NewObject { get; }
    [DynamicAttribute]
public static object NewList { get; }
    private static Build();
    public static object get_NewObject();
    public static object get_NewList();
}
public static class Dynamitey.Build`1 : object {
    [DynamicAttribute]
private static object _typedBuilder;
    [DynamicAttribute]
private static object _typedListBuilder;
    [DynamicAttribute]
public static object NewObject { get; }
    [DynamicAttribute]
public static object NewList { get; }
    private static Build`1();
    public static object get_NewObject();
    public static object get_NewList();
}
public static class Dynamitey.Builder : object {
    public static IBuilder New();
    public static IBuilder New();
}
public class Dynamitey.CacheableInvocation : Invocation {
    private int _argCount;
    private String[] _argNames;
    private bool _staticContext;
    private Type _context;
    private CallSite _callSite;
    private CallSite _callSite2;
    private CallSite _callSite3;
    private CallSite _callSite4;
    private bool _convertExplicit;
    private Type _convertType;
    public CacheableInvocation(InvocationKind kind, String_OR_InvokeMemberName name, int argCount, String[] argNames, object context, Type convertType, bool convertExplicit, Object[] storedArgs);
    public static CacheableInvocation CreateConvert(Type convertType, bool convertExplicit);
    public static CacheableInvocation CreateCall(InvocationKind kind, String_OR_InvokeMemberName name, CallInfo callInfo, object context);
    public bool Equals(CacheableInvocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Invoke(object target, Object[] args);
}
[ExtensionAttribute]
public static class Dynamitey.Dynamic : object {
    [DynamicAttribute]
private static object ComBinder;
    [DynamicAttribute]
internal static object Impromptu;
    [DynamicAttribute]
internal static object TypeDescriptor;
    private static Type ComObjectType;
    internal static Type TypeConverterAttributeSL;
    [DynamicAttribute]
private static object _invokeSetAll;
    private static Regex _chainRegex;
    internal static IDictionary`2<Type, Delegate> CompiledExpressions;
    [DynamicAttribute]
private static object LateConvert;
    [DynamicAttribute]
public static object InvokeSetAll { get; }
    private static Dynamic();
    public static void ClearCaches();
    public static CallSite CreateCallSite(Type delegateType, CallSiteBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    public static CallSite`1<T> CreateCallSite(CallSiteBinder binder, String_OR_InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    public static object Linq(object enumerable);
    public static object InvokeMember(object target, String_OR_InvokeMemberName name, Object[] args);
    public static object InvokeBinaryOperator(object leftArg, ExpressionType op, object rightArg);
    [ObsoleteAttribute("Use `InvokeUnaryOperator` instead.")]
public static object InvokeUnaryOpartor(ExpressionType op, object arg);
    public static object InvokeUnaryOperator(ExpressionType op, object arg);
    public static object Invoke(object target, Object[] args);
    public static object InvokeGetIndex(object target, Object[] indexes);
    public static object InvokeSetValueOnIndexes(object target, object value, Object[] indexes);
    public static object InvokeSetIndex(object target, Object[] indexesThenValue);
    public static void InvokeMemberAction(object target, String_OR_InvokeMemberName name, Object[] args);
    public static void InvokeAction(object target, Object[] args);
    public static object InvokeSet(object target, string name, object value);
    public static object InvokeSetChain(object target, string propertyChain, object value);
    public static object get_InvokeSetAll();
    public static object Curry(object target, Nullable`1<int> totalArgCount);
    public static object Curry(Delegate target);
    public static object InvokeGet(object target, string name);
    public static object InvokeGetChain(object target, string propertyChain);
    public static bool InvokeIsEvent(object target, string name);
    public static void InvokeAddAssignMember(object target, string name, object value);
    public static void InvokeSubtractAssignMember(object target, string name, object value);
    public static object InvokeConvert(object target, Type type, bool explicit);
    public static object CoerceToDelegate(object invokeableObject, Type delegateType);
    public static bool IsDBNull(object value);
    public static void ApplyEquivalentType(IEquivalentType target, Type[] types);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ConvertEach.")]
public static IEnumerable`1<T> ConvertAll(IEnumerable enumerable, bool explict);
    [ExtensionAttribute]
public static IEnumerable`1<T> ConvertEach(IEnumerable enumerable, bool explicit);
    public static object CoerceConvert(object target, Type type);
    public static object InvokeConstructor(Type type, Object[] args);
    [ExtensionAttribute]
public static object FastDynamicInvoke(Delegate del, Object[] args);
    public static Type GenericDelegateType(int paramCount, bool returnVoid);
    public static IEnumerable`1<string> GetMemberNames(object target, bool dynamicOnly);
    public static object InvokeCallSite(CallSite callSite, object target, Object[] args);
}
public class Dynamitey.DynamicObjects.AggreType : FauxType {
    private List`1<FauxType> Types;
    public AggreType(FauxType[] types);
    public static AggreType MakeTypeAppendable(IEquivalentType type);
    public Type[] GetInterfaceTypes();
    public virtual IEnumerable`1<string> GetMemberNames();
    public void AddType(Type type);
    public void AddType(FauxType type);
    public virtual IEnumerable`1<MemberInfo> GetMember(string binderName);
    public virtual Type[] GetContainedTypes();
}
public abstract class Dynamitey.DynamicObjects.BaseDictionary : BaseObject {
    protected IDictionary`2<string, object> _dictionary;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    protected BaseDictionary(IEnumerable`1<KeyValuePair`2<string, object>> dict);
    public virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    protected void SetProperty(string key, object value);
    protected virtual void OnPropertyChanged(string key);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public bool Equals(Dictionary other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Dynamitey.DynamicObjects.BaseFactory : BaseObject {
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    protected virtual object CreateType(Type type, Object[] args);
    protected virtual object GetInstanceForDynamicMember(string memberName, Object[] args);
}
public abstract class Dynamitey.DynamicObjects.BaseForwarder : BaseObject {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    protected object Target { get; protected set; }
    private object Dynamitey.DynamicObjects.IForwarder.Target { get; }
    protected object CallTarget { get; }
    protected BaseForwarder(object target);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    [CompilerGeneratedAttribute]
protected object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
    private sealed virtual override object Dynamitey.DynamicObjects.IForwarder.get_Target();
    protected virtual object get_CallTarget();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public bool Equals(BaseForwarder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Dynamitey.DynamicObjects.BaseObject : DynamicObject {
    [CompilerGeneratedAttribute]
private FauxType <Dynamitey.DynamicObjects.IEquivalentType.EquivalentType>k__BackingField;
    private FauxType Dynamitey.DynamicObjects.IEquivalentType.EquivalentType { get; private set; }
    public bool TryTypeForName(string binderName, Type& type);
    [CompilerGeneratedAttribute]
private sealed virtual override FauxType Dynamitey.DynamicObjects.IEquivalentType.get_EquivalentType();
    [CompilerGeneratedAttribute]
private sealed virtual override void Dynamitey.DynamicObjects.IEquivalentType.set_EquivalentType(FauxType value);
}
public class Dynamitey.DynamicObjects.BaseSingleInstancesFactory : BaseFactory {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, object> _hashFactoryTypes;
    protected object _lockTable;
    protected virtual object GetInstanceForDynamicMember(string memberName, Object[] args);
}
public class Dynamitey.DynamicObjects.Builder`1 : BaseObject {
    protected IDictionary`2<string, Activate> _buildType;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Setup>k__BackingField;
    [DynamicAttribute]
public object Object { get; }
    [DynamicAttribute]
public object Setup { get; private set; }
    public sealed virtual object List(Object[] contents);
    public sealed virtual object ListSetup(Object[] constructorArgs);
    public sealed virtual object ListSetup();
    public sealed virtual object ListSetup(Func`1<Object[]> constructorArgsFactory);
    public sealed virtual object ArraySetup();
    public sealed virtual object ArraySetup(Object[] constructorArgs);
    public sealed virtual object ArraySetup(Func`1<Object[]> constructorArgsFactory);
    public sealed virtual object Array(Object[] contents);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Object();
    public sealed virtual object ObjectSetup(Object[] constructorArgs);
    public sealed virtual object ObjectSetup(Func`1<Object[]> constructorArgsFactory);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Setup();
    [CompilerGeneratedAttribute]
private void set_Setup(object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    private static object InvokeHelper(CallInfo callinfo, IList`1<object> args, Activate buildType);
}
public class Dynamitey.DynamicObjects.ChainableDictionary : Dictionary {
    public ChainableDictionary(IEnumerable`1<KeyValuePair`2<string, object>> dict);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
}
[DefaultMemberAttribute("Item")]
public class Dynamitey.DynamicObjects.Dictionary : BaseDictionary {
    public int Count { get; }
    public object Item { get; public set; }
    public Dictionary(IEnumerable`1<KeyValuePair`2<string, object>> dict);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Clear();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
}
public class Dynamitey.DynamicObjects.Dummy : BaseObject {
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
}
public class Dynamitey.DynamicObjects.ExtensionToInstanceProxy : BaseForwarder {
    private Type _extendedType;
    private Type[] _staticTypes;
    private Type[] _instanceHints;
    public IEnumerable`1<Type> InstanceHints { get; }
    public ExtensionToInstanceProxy(object target, Type extendedType, Type[] staticTypes, Type[] instanceHints);
    public IEnumerable`1<Type> get_InstanceHints();
    private object UnwrappedTarget();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    protected object InvokeStaticMethod(String_OR_InvokeMemberName name, Object[] args);
    protected virtual ExtensionToInstanceProxy CreateSelf(object target, Type extendedType, Type[] staticTypes, Type[] instanceHints);
    private bool IsExtendedType(object target);
    [CompilerGeneratedAttribute]
private bool <TryGetMember>b__7_0(Type it);
}
public abstract class Dynamitey.DynamicObjects.FauxType : object {
    public static FauxType op_Implicit(Type type);
    public abstract virtual IEnumerable`1<MemberInfo> GetMember(string binderName);
    public abstract virtual Type[] GetContainedTypes();
    public abstract virtual IEnumerable`1<string> GetMemberNames();
    public virtual bool ContainsType(Type type);
}
public class Dynamitey.DynamicObjects.FluentStringLookup : DynamicObject {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, object> _lookup;
    public FluentStringLookup(Func`2<string, object> lookup);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
}
public class Dynamitey.DynamicObjects.Get : BaseForwarder {
    public Get(object target);
    public static object Create(object target);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
}
public interface Dynamitey.DynamicObjects.IBuilder {
    [DynamicAttribute]
public object Object { get; }
    [DynamicAttribute]
public object Setup { get; }
    public abstract virtual object List(Object[] contents);
    public abstract virtual object ListSetup(Object[] constructorArgs);
    public abstract virtual object ListSetup();
    public abstract virtual object ListSetup(Func`1<Object[]> constructorArgsFactory);
    public abstract virtual object ArraySetup();
    public abstract virtual object ArraySetup(Object[] constructorArgs);
    public abstract virtual object ArraySetup(Func`1<Object[]> constructorArgsFactory);
    public abstract virtual object Array(Object[] contents);
    public abstract virtual object get_Object();
    public abstract virtual object ObjectSetup(Object[] constructorArgs);
    public abstract virtual object ObjectSetup(Func`1<Object[]> constructorArgsFactory);
    public abstract virtual object get_Setup();
}
public interface Dynamitey.DynamicObjects.IEquivalentType {
    public FauxType EquivalentType { get; public set; }
    public abstract virtual FauxType get_EquivalentType();
    public abstract virtual void set_EquivalentType(FauxType value);
}
public interface Dynamitey.DynamicObjects.IForwarder {
    public object Target { get; }
    public abstract virtual object get_Target();
}
public interface Dynamitey.DynamicObjects.ILinq`1 {
    public abstract virtual TSource Aggregate(Func`3<TSource, TSource, TSource> func);
    public abstract virtual TAccumulate Aggregate(TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func);
    public abstract virtual TResult Aggregate(TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
    public abstract virtual bool All(Func`2<TSource, bool> predicate);
    public abstract virtual bool Any();
    public abstract virtual bool Any(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> AsEnumerable();
    public abstract virtual double Average(Func`2<TSource, int> selector);
    public abstract virtual Nullable`1<double> Average(Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual double Average(Func`2<TSource, long> selector);
    public abstract virtual Nullable`1<double> Average(Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual float Average(Func`2<TSource, float> selector);
    public abstract virtual Nullable`1<float> Average(Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual double Average(Func`2<TSource, double> selector);
    public abstract virtual Nullable`1<double> Average(Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual decimal Average(Func`2<TSource, decimal> selector);
    public abstract virtual Nullable`1<decimal> Average(Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual ILinq`1<TResult> Cast();
    public abstract virtual ILinq`1<TSource> Concat(IEnumerable`1<TSource> second);
    public abstract virtual bool Contains(TSource value);
    public abstract virtual bool Contains(TSource value, IEqualityComparer`1<TSource> comparer);
    public abstract virtual int Count();
    public abstract virtual int Count(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> DefaultIfEmpty();
    public abstract virtual ILinq`1<TSource> DefaultIfEmpty(TSource defaultValue);
    public abstract virtual ILinq`1<TSource> Distinct();
    public abstract virtual ILinq`1<TSource> Distinct(IEqualityComparer`1<TSource> comparer);
    public abstract virtual TSource ElementAt(int index);
    public abstract virtual TSource ElementAtOrDefault(int index);
    public abstract virtual ILinq`1<TSource> Except(IEnumerable`1<TSource> second);
    public abstract virtual ILinq`1<TSource> Except(IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual TSource First();
    public abstract virtual TSource First(Func`2<TSource, bool> predicate);
    public abstract virtual TSource FirstOrDefault();
    public abstract virtual TSource FirstOrDefault(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<IGrouping`2<TKey, TSource>> GroupBy(Func`2<TSource, TKey> keySelector);
    public abstract virtual ILinq`1<IGrouping`2<TKey, TSource>> GroupBy(Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<IGrouping`2<TKey, TElement>> GroupBy(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual ILinq`1<IGrouping`2<TKey, TElement>> GroupBy(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TResult> GroupBy(Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector);
    public abstract virtual ILinq`1<TResult> GroupBy(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector);
    public abstract virtual ILinq`1<TResult> GroupBy(Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TResult> GroupBy(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TResult> GroupJoin(IEnumerable`1<TInner> inner, Func`2<TSource, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TSource, IEnumerable`1<TInner>, TResult> resultSelector);
    public abstract virtual ILinq`1<TResult> GroupJoin(IEnumerable`1<TInner> inner, Func`2<TSource, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TSource, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TSource> Intersect(IEnumerable`1<TSource> second);
    public abstract virtual ILinq`1<TSource> Intersect(IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual ILinq`1<TResult> Join(IEnumerable`1<TInner> inner, Func`2<TSource, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TSource, TInner, TResult> resultSelector);
    public abstract virtual ILinq`1<TResult> Join(IEnumerable`1<TInner> inner, Func`2<TSource, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TSource, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual TSource Last();
    public abstract virtual TSource Last(Func`2<TSource, bool> predicate);
    public abstract virtual TSource LastOrDefault();
    public abstract virtual TSource LastOrDefault(Func`2<TSource, bool> predicate);
    public abstract virtual long LongCount();
    public abstract virtual long LongCount(Func`2<TSource, bool> predicate);
    public abstract virtual TSource Max();
    public abstract virtual int Max(Func`2<TSource, int> selector);
    public abstract virtual Nullable`1<int> Max(Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual long Max(Func`2<TSource, long> selector);
    public abstract virtual Nullable`1<long> Max(Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual float Max(Func`2<TSource, float> selector);
    public abstract virtual Nullable`1<float> Max(Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual double Max(Func`2<TSource, double> selector);
    public abstract virtual Nullable`1<double> Max(Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual decimal Max(Func`2<TSource, decimal> selector);
    public abstract virtual Nullable`1<decimal> Max(Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual TResult Max(Func`2<TSource, TResult> selector);
    public abstract virtual TSource Min();
    public abstract virtual int Min(Func`2<TSource, int> selector);
    public abstract virtual Nullable`1<int> Min(Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual long Min(Func`2<TSource, long> selector);
    public abstract virtual Nullable`1<long> Min(Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual float Min(Func`2<TSource, float> selector);
    public abstract virtual Nullable`1<float> Min(Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual double Min(Func`2<TSource, double> selector);
    public abstract virtual Nullable`1<double> Min(Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual decimal Min(Func`2<TSource, decimal> selector);
    public abstract virtual Nullable`1<decimal> Min(Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual TResult Min(Func`2<TSource, TResult> selector);
    public abstract virtual ILinq`1<TResult> OfType();
    public abstract virtual IOrderedLinq`1<TSource> OrderBy(Func`2<TSource, TKey> keySelector);
    public abstract virtual IOrderedLinq`1<TSource> OrderBy(Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public abstract virtual IOrderedLinq`1<TSource> OrderByDescending(Func`2<TSource, TKey> keySelector);
    public abstract virtual IOrderedLinq`1<TSource> OrderByDescending(Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TSource> Reverse();
    public abstract virtual ILinq`1<TResult> Select(Func`2<TSource, TResult> selector);
    public abstract virtual ILinq`1<TResult> Select(Func`3<TSource, int, TResult> selector);
    public abstract virtual ILinq`1<TResult> SelectMany(Func`2<TSource, IEnumerable`1<TResult>> selector);
    public abstract virtual ILinq`1<TResult> SelectMany(Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    public abstract virtual ILinq`1<TResult> SelectMany(Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public abstract virtual ILinq`1<TResult> SelectMany(Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public abstract virtual bool SequenceEqual(IEnumerable`1<TSource> second);
    public abstract virtual bool SequenceEqual(IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual TSource Single();
    public abstract virtual TSource Single(Func`2<TSource, bool> predicate);
    public abstract virtual TSource SingleOrDefault();
    public abstract virtual TSource SingleOrDefault(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> Skip(int count);
    public abstract virtual ILinq`1<TSource> SkipWhile(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> SkipWhile(Func`3<TSource, int, bool> predicate);
    public abstract virtual int Sum(Func`2<TSource, int> selector);
    public abstract virtual Nullable`1<int> Sum(Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual long Sum(Func`2<TSource, long> selector);
    public abstract virtual Nullable`1<long> Sum(Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual float Sum(Func`2<TSource, float> selector);
    public abstract virtual Nullable`1<float> Sum(Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual double Sum(Func`2<TSource, double> selector);
    public abstract virtual Nullable`1<double> Sum(Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual decimal Sum(Func`2<TSource, decimal> selector);
    public abstract virtual Nullable`1<decimal> Sum(Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual ILinq`1<TSource> Take(int count);
    public abstract virtual ILinq`1<TSource> TakeWhile(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> TakeWhile(Func`3<TSource, int, bool> predicate);
    public abstract virtual TSource[] ToArray();
    public abstract virtual Dictionary`2<TKey, TSource> ToDictionary(Func`2<TSource, TKey> keySelector);
    public abstract virtual Dictionary`2<TKey, TSource> ToDictionary(Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual Dictionary`2<TKey, TElement> ToDictionary(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual Dictionary`2<TKey, TElement> ToDictionary(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual List`1<TSource> ToList();
    public abstract virtual ILookup`2<TKey, TSource> ToLookup(Func`2<TSource, TKey> keySelector);
    public abstract virtual ILookup`2<TKey, TSource> ToLookup(Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILookup`2<TKey, TElement> ToLookup(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual ILookup`2<TKey, TElement> ToLookup(Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual ILinq`1<TSource> Union(IEnumerable`1<TSource> second);
    public abstract virtual ILinq`1<TSource> Union(IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual ILinq`1<TSource> Where(Func`2<TSource, bool> predicate);
    public abstract virtual ILinq`1<TSource> Where(Func`3<TSource, int, bool> predicate);
    public abstract virtual ILinq`1<TResult> Zip(IEnumerable`1<TSecond> second, Func`3<TSource, TSecond, TResult> resultSelector);
}
public interface Dynamitey.DynamicObjects.IOrderedLinq`1 {
    public abstract virtual IOrderedLinq`1<TSource> ThenBy(Func`2<TSource, TKey> keySelector);
    public abstract virtual IOrderedLinq`1<TSource> ThenBy(Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public abstract virtual IOrderedLinq`1<TSource> ThenByDescending(Func`2<TSource, TKey> keySelector);
    public abstract virtual IOrderedLinq`1<TSource> ThenByDescending(Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
}
public interface Dynamitey.DynamicObjects.IRegexMatch {
    public string Value { get; }
    public abstract virtual string get_Value();
}
public class Dynamitey.DynamicObjects.LateType : BaseForwarder {
    private string TypeName;
    [DynamicAttribute]
public object new { get; }
    public bool IsAvailable { get; }
    protected object CallTarget { get; }
    public LateType(Type type);
    public LateType(string typeName);
    public LateType(Assembly assembly, string typeName);
    public static Type FindType(string typeName, Assembly assembly);
    public object get_new();
    public bool get_IsAvailable();
    protected virtual object get_CallTarget();
}
public abstract class Dynamitey.DynamicObjects.Lazy : BaseForwarder {
    protected Lazy(object target);
    public static object Create(Func`1<T> valueFactory);
    public static object Create(Lazy`1<T> target);
}
public class Dynamitey.DynamicObjects.Lazy`1 : Lazy {
    protected object CallTarget { get; }
    public Lazy`1(Lazy`1<T> target);
    public Lazy`1(Func`1<T> valueFactory);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    protected virtual object get_CallTarget();
}
public class Dynamitey.DynamicObjects.LinqInstanceProxy : ExtensionToInstanceProxy {
    public LinqInstanceProxy(object target);
    protected virtual ExtensionToInstanceProxy CreateSelf(object target, Type extendedType, Type[] staticTypes, Type[] instanceHints);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Dynamitey.DynamicObjects.List : BaseDictionary {
    protected IList`1<object> _list;
    private static object ListLock;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<object>, IEnumerable`1<string>> <OverrideGettingItemMethodNames>k__BackingField;
    private object _syncRoot;
    public int Count { get; }
    [DynamicAttribute]
public object Item { get; public set; }
    [DynamicAttribute]
private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    public Func`2<IEnumerable`1<object>, IEnumerable`1<string>> OverrideGettingItemMethodNames { get; public set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public bool IsFixedSize { get; }
    public List(IEnumerable`1<object> contents, IEnumerable`1<KeyValuePair`2<string, object>> members);
    private static List();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    private void InsertHelper(object item, Nullable`1<int> index);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool Remove(object item);
    private bool RemoveHelper(object item, Nullable`1<int> index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedAction action, object oldItem, object newItem, Nullable`1<int> oldIndex, Nullable`1<int> newIndex);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value);
    public bool Equals(List other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<object>, IEnumerable`1<string>> get_OverrideGettingItemMethodNames();
    [CompilerGeneratedAttribute]
public void set_OverrideGettingItemMethodNames(Func`2<IEnumerable`1<object>, IEnumerable`1<string>> value);
    protected virtual object GetRepresentedItem();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool get_IsFixedSize();
}
public class Dynamitey.DynamicObjects.Mimic : DynamicObject {
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(DeleteMemberBinder binder);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(UnaryOperationBinder binder, Object& result);
}
public class Dynamitey.DynamicObjects.PropretySpecType : FauxType {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Type> <PropertySpec>k__BackingField;
    public IDictionary`2<string, Type> PropertySpec { get; }
    public PropretySpecType(IDictionary`2<string, Type> propertySpec);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Type> get_PropertySpec();
    public virtual IEnumerable`1<MemberInfo> GetMember(string binderName);
    public virtual IEnumerable`1<string> GetMemberNames();
    public virtual Type[] GetContainedTypes();
}
public class Dynamitey.DynamicObjects.RealType : FauxType {
    protected Type TargetType;
    public RealType(Type type);
    public static Type op_Implicit(RealType type);
    public static RealType op_Implicit(Type type);
    public virtual IEnumerable`1<MemberInfo> GetMember(string binderName);
    public virtual IEnumerable`1<string> GetMemberNames();
    public virtual Type[] GetContainedTypes();
}
public class Dynamitey.DynamicObjects.Recorder : BaseForwarder {
    [CompilerGeneratedAttribute]
private IList`1<Invocation> <Recording>k__BackingField;
    public IList`1<Invocation> Recording { get; protected set; }
    public Recorder(object target);
    [CompilerGeneratedAttribute]
public IList`1<Invocation> get_Recording();
    [CompilerGeneratedAttribute]
protected void set_Recording(IList`1<Invocation> value);
    public T ReplayOn(T target);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
}
[DefaultMemberAttribute("Item")]
public class Dynamitey.DynamicObjects.RegexMatch : BaseObject {
    private Match _match;
    private Regex _regex;
    public string Item { get; }
    public string Item { get; }
    private string Dynamitey.DynamicObjects.IRegexMatch.Value { get; }
    public RegexMatch(Match match, Regex regex);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public string get_Item(int value);
    public string get_Item(string value);
    private sealed virtual override string Dynamitey.DynamicObjects.IRegexMatch.get_Value();
    public virtual string ToString();
}
public class Dynamitey.Expando : Builder`1<ExpandoObject> {
    [DynamicAttribute]
private static object _expandoBuilder;
    [DynamicAttribute]
public static object New { get; }
    private static Expando();
    public static object get_New();
}
[ExtensionAttribute]
public static class Dynamitey.FluentRegex : object {
    [ExtensionAttribute]
public static IEnumerable`1<object> FluentFilter(IEnumerable`1<string> list, Regex regex);
    public static IEnumerable`1<object> Matches(string inputString, Regex regex);
    public static object Match(string inputString, Regex regex);
    [ExtensionAttribute]
public static object FluentMatch(Regex regex, string inputString);
    [ExtensionAttribute]
public static IEnumerable`1<object> FluentMatches(Regex regex, string inputString);
}
public static class Dynamitey.Internal.Compat.Net40 : object {
    public static CultureInfo GetDefaultThreadCurrentCulture();
}
public class Dynamitey.Internal.Curry : DynamicObject {
    private object _target;
    private Nullable`1<int> _totalArgCount;
    internal Curry(object target, Nullable`1<int> totalArgCount);
    public static object op_BitwiseOr(object argument, Curry function);
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
}
public class Dynamitey.Internal.InvokeSetters : DynamicObject {
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
}
internal class Dynamitey.Internal.Optimization.BareBonesList`1 : object {
    private T[] _list;
    private int _addIndex;
    private int _length;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public BareBonesList`1(int length);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Dynamitey.Internal.Optimization.BinderCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal static class Dynamitey.Internal.Optimization.BinderConstructorCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderConstructorCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal static class Dynamitey.Internal.Optimization.BinderDirectCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderDirectCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal static class Dynamitey.Internal.Optimization.BinderGetCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderGetCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal class Dynamitey.Internal.Optimization.BinderHash : object {
    [CompilerGeneratedAttribute]
private bool <KnownBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DelegateType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSpecialName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <GenericArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ArgNames>k__BackingField;
    public bool KnownBinder { get; }
    public Type BinderType { get; }
    public bool StaticContext { get; }
    public bool IsEvent { get; }
    public Type DelegateType { get; }
    public string Name { get; }
    public bool IsSpecialName { get; }
    public Type[] GenericArgs { get; }
    public Type Context { get; }
    public String[] ArgNames { get; }
    protected BinderHash(Type delegateType, string name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    protected BinderHash(Type delegateType, InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    [CompilerGeneratedAttribute]
public bool get_KnownBinder();
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
public bool get_StaticContext();
    [CompilerGeneratedAttribute]
public bool get_IsEvent();
    [CompilerGeneratedAttribute]
public Type get_DelegateType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsSpecialName();
    [CompilerGeneratedAttribute]
public Type[] get_GenericArgs();
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
public String[] get_ArgNames();
    public virtual bool Equals(BinderHash other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Dynamitey.Internal.Optimization.BinderHash`1 : BinderHash {
    protected BinderHash`1(InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    protected BinderHash`1(string name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash`1<T> Create(string name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash`1<T> Create(InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public virtual bool Equals(BinderHash other);
}
internal static class Dynamitey.Internal.Optimization.BinderMemberCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderMemberCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal static class Dynamitey.Internal.Optimization.BinderSetCache`1 : object {
    private static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> _cache;
    private static object _cacheLock;
    internal static Action ClearCache;
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> Cache { get; }
    private static BinderSetCache`1();
    internal static IDictionary`2<BinderHash`1<T>, CallSite`1<T>> get_Cache();
}
internal class Dynamitey.Internal.Optimization.DummmyNull : object {
}
[ExtensionAttribute]
internal static class Dynamitey.Internal.Optimization.InvokeHelper : object {
    internal static int Unknown;
    internal static int KnownGet;
    internal static int KnownSet;
    internal static int KnownMember;
    internal static int KnownDirect;
    internal static int KnownConstructor;
    private static object _clearDynamicLock;
    [DynamicAttribute]
internal static object BuildProxy;
    internal static HashSet`1<object> _allCaches;
    private static object _binderCacheLock;
    private static object _callSiteCacheLock;
    internal static IDictionary`2<Type, CallSite`1<DynamicCreateCallSite>> _dynamicInvokeCreateCallSite;
    internal static IDictionary`2<Type, CallSite`1<DynamicInvokeMemberConstructorValueType>> _dynamicInvokeMemberSite;
    internal static InvokeMemberName ConstructorName;
    internal static IDictionary`2<Type, CallSite`1<DynamicInvokeWrapFunc>> _dynamicInvokeWrapFunc;
    internal static Type[] FuncKinds;
    internal static Type[] ActionKinds;
    internal static Type[] TupleKinds;
    internal static IDictionary`2<Type, int> FuncArgs;
    internal static IDictionary`2<Type, int> ActionArgs;
    internal static IDictionary`2<Type, int> TupleArgs;
    internal static IDictionary`2<Type, CallSite`1<DynamicCreateCallSite>> DynamicInvokeCreateCallSite { get; }
    private static InvokeHelper();
    internal static IDictionary`2<Type, CallSite`1<DynamicCreateCallSite>> get_DynamicInvokeCreateCallSite();
    internal static void ClearFullyDynamicCache();
    private static bool TryDynamicCachedCallSite(BinderHash`1<T> hash, int knownBinderType, CallSite`1& callSite);
    internal static Type EmitCallSiteFuncType(IEnumerable`1<Type> argTypes, Type returnType);
    internal static void ClearAllCaches();
    private static void SetDynamicCachedCallSite(BinderHash`1<T> hash, int knownBinderType, CallSite`1<T> callSite);
    public static bool IsActionOrFunc(object target);
    [ExtensionAttribute]
internal static object InvokeMethodDelegate(object target, Delegate tFunc, Object[] args);
    internal static IEnumerable`1<CSharpArgumentInfo> GetBindingArgumentList(Object[] args, String[] argNames, bool staticContext);
    internal static CallSite CreateCallSite(Type delegateType, Type specificBinderType, int knownType, LazyBinder binder, InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    internal static CallSite`1<T> CreateCallSite(Type specificBinderType, int knownType, LazyBinder binder, InvokeMemberName name, Type context, String[] argNames, bool staticContext, bool isEvent);
    internal static CallSite`1<T> CreateCallSite(Type specificBinderType, int knownType, LazyBinder binder, string name, Type context, String[] argNames, bool staticContext, bool isEvent);
    internal static object DynamicInvokeStaticMember(Type tReturn, CallSite& callsite, Type binderType, int knownType, LazyBinder binder, InvokeMemberName name, bool staticContext, Type context, String[] argNames, Type target, Object[] args);
    internal static TReturn InvokeMember(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, InvokeMemberName name, bool staticContext, Type context, String[] argNames, object target, Object[] args);
    internal static object InvokeGetCallSite(object target, string name, Type context, bool staticContext, CallSite& callsite);
    internal static object InvokeSetCallSite(object target, string name, object value, Type context, bool staticContext, CallSite& callSite);
    internal static object InvokeMemberCallSite(object target, InvokeMemberName name, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static object InvokeDirectCallSite(object target, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static object InvokeGetIndexCallSite(object target, Object[] indexes, String[] argNames, Type context, bool tStaticContext, CallSite& callSite);
    internal static object InvokeSetIndexCallSite(object target, Object[] indexesThenValue, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& tCallSite);
    internal static void InvokeMemberActionCallSite(object target, InvokeMemberName name, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static void InvokeDirectActionCallSite(object target, Object[] args, String[] tArgNames, Type tContext, bool tStaticContext, CallSite& callSite);
    internal static bool InvokeIsEventCallSite(object target, string name, Type tContext, CallSite& callSite);
    internal static void InvokeAddAssignCallSite(object target, string name, Object[] args, String[] argNames, Type context, bool staticContext, CallSite& callSiteIsEvent, CallSite& callSiteAdd, CallSite& callSiteGet, CallSite& callSiteSet);
    internal static void InvokeSubtractAssignCallSite(object target, string name, Object[] args, String[] argNames, Type context, bool staticContext, CallSite& callSiteIsEvent, CallSite& callSiteRemove, CallSite& callSiteGet, CallSite& callSiteSet);
    internal static object InvokeConvertCallSite(object target, bool explict, Type type, Type context, CallSite& callSite);
    internal static object InvokeConstructorCallSite(Type type, bool isValueType, Object[] args, String[] argNames, CallSite& callSite);
    internal static Delegate WrapFunc(Type returnType, object invokable, int length);
    internal static object TupleItem(object tuple, int index);
    internal static void InvokeMemberAction(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, InvokeMemberName name, bool staticContext, Type context, String[] argNames, object target, Object[] args);
    internal static TReturn InvokeMemberTargetType(CallSite& callsite, Type binderType, int knownType, LazyBinder binder, InvokeMemberName name, bool staticContext, Type context, String[] argNames, TTarget target, Object[] args);
    internal static Delegate WrapFuncHelper(object invokable, int length);
    internal static Delegate WrapAction(object invokable, int length);
    internal static object FastDynamicInvokeReturn(Delegate del, Object[] args);
    internal static void FastDynamicInvokeAction(Delegate del, Object[] args);
}
[ExtensionAttribute]
public static class Dynamitey.Internal.Optimization.Util : object {
    public static bool IsMono;
    private static Util();
    public static bool IsAnonymousType(object target);
    public static Object[] NameArgsIfNecessary(CallInfo callInfo, Object[] args);
    [ExtensionAttribute]
public static object GetTargetContext(object target, Type& context, Boolean& staticContext);
    [ExtensionAttribute]
public static Type FixContext(Type context);
    [ExtensionAttribute]
internal static bool MassageResultBasedOnInterface(BaseObject target, string binderName, bool resultFound, Object& result);
    internal static Object[] GetArgsAndNames(Object[] args, String[]& argNames);
}
public class Dynamitey.Invocation : object {
    public static string ExplicitConvertBinderName;
    public static string ImplicitConvertBinderName;
    public static string IndexBinderName;
    public static string ConstructorBinderName;
    [CompilerGeneratedAttribute]
private InvocationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private String_OR_InvokeMemberName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    public InvocationKind Kind { get; protected set; }
    public String_OR_InvokeMemberName Name { get; protected set; }
    public Object[] Args { get; protected set; }
    public Invocation(InvocationKind kind, String_OR_InvokeMemberName name, Object[] storedArgs);
    private static Invocation();
    [CompilerGeneratedAttribute]
public InvocationKind get_Kind();
    [CompilerGeneratedAttribute]
protected void set_Kind(InvocationKind value);
    [CompilerGeneratedAttribute]
public String_OR_InvokeMemberName get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(String_OR_InvokeMemberName value);
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
protected void set_Args(Object[] value);
    public static Invocation Create(InvocationKind kind, String_OR_InvokeMemberName name, Object[] storedArgs);
    public bool Equals(Invocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Invoke(object target, Object[] args);
    public virtual object InvokeWithStoredArgs(object target);
}
public enum Dynamitey.InvocationKind : Enum {
    public int value__;
    public static InvocationKind NotSet;
    public static InvocationKind Convert;
    public static InvocationKind Get;
    public static InvocationKind Set;
    public static InvocationKind GetIndex;
    public static InvocationKind SetIndex;
    public static InvocationKind InvokeMember;
    public static InvocationKind InvokeMemberAction;
    public static InvocationKind InvokeMemberUnknown;
    public static InvocationKind Constructor;
    public static InvocationKind AddAssign;
    public static InvocationKind SubtractAssign;
    public static InvocationKind IsEvent;
    public static InvocationKind Invoke;
    public static InvocationKind InvokeAction;
    public static InvocationKind InvokeUnknown;
}
public class Dynamitey.InvokeArg : object {
    public static Func`3<string, object, InvokeArg> Create;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; private set; }
    public object Value { get; private set; }
    public InvokeArg(string name, object value);
    private static InvokeArg();
    public static InvokeArg op_Explicit(KeyValuePair`2<string, object> pair);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public class Dynamitey.InvokeArg`1 : InvokeArg {
    public InvokeArg`1(string name, object value);
    public static InvokeArg`1<T> op_Explicit(KeyValuePair`2<string, T> pair);
}
public class Dynamitey.InvokeContext : object {
    public static Func`3<object, object, InvokeContext> CreateContext;
    public static Func`2<Type, InvokeContext> CreateStatic;
    public static Func`3<Type, object, InvokeContext> CreateStaticWithContext;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticContext>k__BackingField;
    public object Target { get; protected set; }
    public Type Context { get; protected set; }
    public bool StaticContext { get; protected set; }
    public InvokeContext(Type target, bool staticContext, object context);
    public InvokeContext(object target, object context);
    private static InvokeContext();
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(Type value);
    [CompilerGeneratedAttribute]
public bool get_StaticContext();
    [CompilerGeneratedAttribute]
protected void set_StaticContext(bool value);
}
public class Dynamitey.InvokeMemberName : String_OR_InvokeMemberName {
    public static Func`3<string, Type[], InvokeMemberName> Create;
    public static Func`2<string, InvokeMemberName> CreateSpecialName;
    public InvokeMemberName(string name, Type[] genericArgs);
    public InvokeMemberName(string name, bool isSpecialName);
    private static InvokeMemberName();
    public static InvokeMemberName op_Implicit(string name);
    public bool Equals(InvokeMemberName other);
    private bool EqualsHelper(InvokeMemberName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Dynamitey.IPartialApply {
}
public class Dynamitey.PartialApply : DynamicObject {
    private Nullable`1<int> _totalArgCount;
    private object _target;
    private string _memberName;
    private Object[] _args;
    private InvocationKind _invocationKind;
    private IDictionary`2<int, CacheableInvocation> _cacheableInvocation;
    public object Target { get; }
    public string MemberName { get; }
    public Object[] Args { get; }
    public Nullable`1<int> TotalArgCount { get; }
    public InvocationKind InvocationKind { get; }
    public PartialApply(object target, Object[] args, string memberName, Nullable`1<int> totalCount, Nullable`1<InvocationKind> invocationKind);
    public static object op_BitwiseOr(object argument, PartialApply function);
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public object get_Target();
    public string get_MemberName();
    public Object[] get_Args();
    public Nullable`1<int> get_TotalArgCount();
    public InvocationKind get_InvocationKind();
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
}
public static class Dynamitey.Return`1 : object {
    public static Func`1<TR> Arguments(Func`1<TR> del);
    public static ThisFunc`1<TR> ThisAndArguments(ThisFunc`1<TR> del);
    public static Func`2<T1, TR> Arguments(Func`2<T1, TR> del);
    public static ThisFunc`2<TR, T1> ThisAndArguments(ThisFunc`2<TR, T1> del);
    public static Func`3<T1, T2, TR> Arguments(Func`3<T1, T2, TR> del);
    public static ThisFunc`3<TR, T1, T2> ThisAndArguments(ThisFunc`3<TR, T1, T2> del);
    public static Func`4<T1, T2, T3, TR> Arguments(Func`4<T1, T2, T3, TR> del);
    public static ThisFunc`4<TR, T1, T2, T3> ThisAndArguments(ThisFunc`4<TR, T1, T2, T3> del);
    public static Func`5<T1, T2, T3, T4, TR> Arguments(Func`5<T1, T2, T3, T4, TR> del);
    public static ThisFunc`5<TR, T1, T2, T3, T4> ThisAndArguments(ThisFunc`5<TR, T1, T2, T3, T4> del);
    public static Func`6<T1, T2, T3, T4, T5, TR> Arguments(Func`6<T1, T2, T3, T4, T5, TR> del);
    public static ThisFunc`6<TR, T1, T2, T3, T4, T5> ThisAndArguments(ThisFunc`6<TR, T1, T2, T3, T4, T5> del);
    public static Func`7<T1, T2, T3, T4, T5, T6, TR> Arguments(Func`7<T1, T2, T3, T4, T5, T6, TR> del);
    public static ThisFunc`7<TR, T1, T2, T3, T4, T5, T6> ThisAndArguments(ThisFunc`7<TR, T1, T2, T3, T4, T5, T6> del);
    public static Func`8<T1, T2, T3, T4, T5, T6, T7, TR> Arguments(Func`8<T1, T2, T3, T4, T5, T6, T7, TR> del);
    public static ThisFunc`8<TR, T1, T2, T3, T4, T5, T6, T7> ThisAndArguments(ThisFunc`8<TR, T1, T2, T3, T4, T5, T6, T7> del);
    public static Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TR> Arguments(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TR> del);
    public static ThisFunc`9<TR, T1, T2, T3, T4, T5, T6, T7, T8> ThisAndArguments(ThisFunc`9<TR, T1, T2, T3, T4, T5, T6, T7, T8> del);
    public static Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TR> Arguments(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TR> del);
    public static ThisFunc`10<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9> ThisAndArguments(ThisFunc`10<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9> del);
    public static Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TR> Arguments(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TR> del);
    public static ThisFunc`11<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ThisAndArguments(ThisFunc`11<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> del);
    public static Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TR> Arguments(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TR> del);
    public static ThisFunc`12<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ThisAndArguments(ThisFunc`12<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> del);
    public static Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TR> Arguments(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TR> del);
    public static ThisFunc`13<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ThisAndArguments(ThisFunc`13<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> del);
    public static Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TR> Arguments(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TR> del);
    public static ThisFunc`14<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ThisAndArguments(ThisFunc`14<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> del);
    public static Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TR> Arguments(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TR> del);
    public static ThisFunc`15<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ThisAndArguments(ThisFunc`15<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> del);
    public static Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TR> Arguments(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TR> del);
    public static ThisFunc`16<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ThisAndArguments(ThisFunc`16<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> del);
    public static Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TR> Arguments(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TR> del);
    public static ThisFunc`17<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ThisAndArguments(ThisFunc`17<TR, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> del);
}
public static class Dynamitey.ReturnVoid : object {
    public static Action Arguments(Action del);
    public static ThisAction ThisAndArguments(ThisAction del);
    public static Action`1<T1> Arguments(Action`1<T1> del);
    public static ThisAction`1<T1> ThisAndArguments(ThisAction`1<T1> del);
    public static Action`2<T1, T2> Arguments(Action`2<T1, T2> del);
    public static ThisAction`2<T1, T2> ThisAndArguments(ThisAction`2<T1, T2> del);
    public static Action`3<T1, T2, T3> Arguments(Action`3<T1, T2, T3> del);
    public static ThisAction`3<T1, T2, T3> ThisAndArguments(ThisAction`3<T1, T2, T3> del);
    public static Action`4<T1, T2, T3, T4> Arguments(Action`4<T1, T2, T3, T4> del);
    public static ThisAction`4<T1, T2, T3, T4> ThisAndArguments(ThisAction`4<T1, T2, T3, T4> del);
    public static Action`5<T1, T2, T3, T4, T5> Arguments(Action`5<T1, T2, T3, T4, T5> del);
    public static ThisAction`5<T1, T2, T3, T4, T5> ThisAndArguments(ThisAction`5<T1, T2, T3, T4, T5> del);
    public static Action`6<T1, T2, T3, T4, T5, T6> Arguments(Action`6<T1, T2, T3, T4, T5, T6> del);
    public static ThisAction`6<T1, T2, T3, T4, T5, T6> ThisAndArguments(ThisAction`6<T1, T2, T3, T4, T5, T6> del);
    public static Action`7<T1, T2, T3, T4, T5, T6, T7> Arguments(Action`7<T1, T2, T3, T4, T5, T6, T7> del);
    public static ThisAction`7<T1, T2, T3, T4, T5, T6, T7> ThisAndArguments(ThisAction`7<T1, T2, T3, T4, T5, T6, T7> del);
    public static Action`8<T1, T2, T3, T4, T5, T6, T7, T8> Arguments(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> del);
    public static ThisAction`8<T1, T2, T3, T4, T5, T6, T7, T8> ThisAndArguments(ThisAction`8<T1, T2, T3, T4, T5, T6, T7, T8> del);
    public static Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Arguments(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> del);
    public static ThisAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> ThisAndArguments(ThisAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> del);
    public static Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Arguments(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> del);
    public static ThisAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ThisAndArguments(ThisAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> del);
    public static Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Arguments(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> del);
    public static ThisAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ThisAndArguments(ThisAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> del);
    public static Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Arguments(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> del);
    public static ThisAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ThisAndArguments(ThisAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> del);
    public static Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Arguments(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> del);
    public static ThisAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ThisAndArguments(ThisAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> del);
    public static Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Arguments(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> del);
    public static ThisAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ThisAndArguments(ThisAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> del);
    public static Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Arguments(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> del);
    public static ThisAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ThisAndArguments(ThisAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> del);
    public static Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Arguments(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> del);
    public static ThisAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ThisAndArguments(ThisAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> del);
}
public class Dynamitey.StaticContext : InvokeContext {
    public StaticContext(Type target);
    public static StaticContext op_Explicit(Type type);
}
public abstract class Dynamitey.String_OR_InvokeMemberName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <GenericArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSpecialName>k__BackingField;
    public string Name { get; protected set; }
    public Type[] GenericArgs { get; protected set; }
    public bool IsSpecialName { get; protected set; }
    public static String_OR_InvokeMemberName op_Implicit(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type[] get_GenericArgs();
    [CompilerGeneratedAttribute]
protected void set_GenericArgs(Type[] value);
    [CompilerGeneratedAttribute]
public bool get_IsSpecialName();
    [CompilerGeneratedAttribute]
protected void set_IsSpecialName(bool value);
}
public class Dynamitey.ThisAction : MulticastDelegate {
    public ThisAction(object object, IntPtr method);
    public virtual void Invoke(object this);
    public virtual IAsyncResult BeginInvoke(object this, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`1 : MulticastDelegate {
    public ThisAction`1(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`10 : MulticastDelegate {
    public ThisAction`10(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`11 : MulticastDelegate {
    public ThisAction`11(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`12 : MulticastDelegate {
    public ThisAction`12(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`13 : MulticastDelegate {
    public ThisAction`13(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`14 : MulticastDelegate {
    public ThisAction`14(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`15 : MulticastDelegate {
    public ThisAction`15(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`16 : MulticastDelegate {
    public ThisAction`16(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`2 : MulticastDelegate {
    public ThisAction`2(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`3 : MulticastDelegate {
    public ThisAction`3(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`4 : MulticastDelegate {
    public ThisAction`4(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`5 : MulticastDelegate {
    public ThisAction`5(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`6 : MulticastDelegate {
    public ThisAction`6(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`7 : MulticastDelegate {
    public ThisAction`7(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`8 : MulticastDelegate {
    public ThisAction`8(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisAction`9 : MulticastDelegate {
    public ThisAction`9(object object, IntPtr method);
    public virtual void Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Dynamitey.ThisDelegate : object {
    private static HashSet`1<Type> _specialThisDels;
    private static ThisDelegate();
    [ExtensionAttribute]
public static bool IsSpecialThisDelegate(Delegate del);
}
public class Dynamitey.ThisFunc`1 : MulticastDelegate {
    public ThisFunc`1(object object, IntPtr method);
    public virtual TResult Invoke(object this);
    public virtual IAsyncResult BeginInvoke(object this, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`10 : MulticastDelegate {
    public ThisFunc`10(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`11 : MulticastDelegate {
    public ThisFunc`11(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`12 : MulticastDelegate {
    public ThisFunc`12(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`13 : MulticastDelegate {
    public ThisFunc`13(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`14 : MulticastDelegate {
    public ThisFunc`14(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`15 : MulticastDelegate {
    public ThisFunc`15(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`16 : MulticastDelegate {
    public ThisFunc`16(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`17 : MulticastDelegate {
    public ThisFunc`17(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`2 : MulticastDelegate {
    public ThisFunc`2(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`3 : MulticastDelegate {
    public ThisFunc`3(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`4 : MulticastDelegate {
    public ThisFunc`4(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`5 : MulticastDelegate {
    public ThisFunc`5(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`6 : MulticastDelegate {
    public ThisFunc`6(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`7 : MulticastDelegate {
    public ThisFunc`7(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`8 : MulticastDelegate {
    public ThisFunc`8(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Dynamitey.ThisFunc`9 : MulticastDelegate {
    public ThisFunc`9(object object, IntPtr method);
    public virtual TResult Invoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(object this, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Dynamitey.Tupler : object {
    private static TuplerFix TuplerHelper;
    private static InvokeContext StaticTuple;
    private static Tupler();
    public static object Create(Object[] args);
    [ExtensionAttribute]
public static object ToTuple(IEnumerable enumerable);
    public static object First(object tuple);
    public static object Second(object tuple);
    public static object Last(object tuple);
    public static IList`1<object> ToList(object tuple);
    private static void HelperToList(List`1<object> list, object tuple, bool safe);
    public static object Index(object tuple, int index);
    private static object HelperIndex(object tuple, int index, bool safe);
    public static bool IsTuple(object target);
    private static bool HelperIsTuple(object target, Type& type, Type& genericeType, Int32& size, bool safe);
    public static int Size(object tuple);
    private static int HelperSize(object tuple, bool safe);
}
