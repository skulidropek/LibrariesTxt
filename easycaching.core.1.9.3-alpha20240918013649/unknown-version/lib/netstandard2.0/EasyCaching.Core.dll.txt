public static class EasyCaching.Core.ArgumentCheck : object {
    public static void NotNull(object argument, string argumentName);
    public static void NotNull(object argument, string argumentName, bool allowNulls);
    public static void NotNullOrWhiteSpace(string argument, string argumentName);
    public static void NotNegativeOrZero(TimeSpan argument, string argumentName);
    public static void NotNullAndCountGTZero(IEnumerable`1<T> argument, string argumentName);
    public static void NotNullAndCountGTZero(IDictionary`2<string, T> argument, string argumentName);
}
public class EasyCaching.Core.Bus.EasyCachingMessage : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CacheKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPattern>k__BackingField;
    public string Id { get; public set; }
    public String[] CacheKeys { get; public set; }
    public bool IsPrefix { get; public set; }
    public bool IsPattern { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public String[] get_CacheKeys();
    [CompilerGeneratedAttribute]
public void set_CacheKeys(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsPrefix();
    [CompilerGeneratedAttribute]
public void set_IsPrefix(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPattern();
    [CompilerGeneratedAttribute]
public void set_IsPattern(bool value);
}
public interface EasyCaching.Core.Bus.IEasyCachingBus {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface EasyCaching.Core.Bus.IEasyCachingPublisher {
    public abstract virtual void Publish(string topic, EasyCachingMessage message);
    public abstract virtual Task PublishAsync(string topic, EasyCachingMessage message, CancellationToken cancellationToken);
}
public interface EasyCaching.Core.Bus.IEasyCachingSubscriber {
    public abstract virtual void Subscribe(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction);
    public abstract virtual Task SubscribeAsync(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction, CancellationToken cancellationToken);
}
public class EasyCaching.Core.Bus.NullEasyCachingBus : object {
    public static NullEasyCachingBus Instance;
    public string Name { get; }
    private static NullEasyCachingBus();
    public sealed virtual string get_Name();
    public void Dispose();
    public sealed virtual void Publish(string topic, EasyCachingMessage message);
    public sealed virtual Task PublishAsync(string topic, EasyCachingMessage message, CancellationToken cancellationToken);
    public sealed virtual void Subscribe(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction);
    public sealed virtual Task SubscribeAsync(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction, CancellationToken cancellationToken);
}
public class EasyCaching.Core.CacheStats : object {
    private ConcurrentDictionary`2<string, CacheStatsCounter> _counters;
    private static string DEFAULT_KEY;
    public void OnHit();
    public void OnMiss();
    public long GetStatistic(StatsType statsType);
    private CacheStatsCounter GetCounter();
}
public class EasyCaching.Core.CacheStatsCounter : object {
    private Int64[] _counters;
    public void Increment(StatsType statsType);
    public long Get(StatsType statsType);
}
public class EasyCaching.Core.CacheValue`1 : object {
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static CacheValue`1<T> <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static CacheValue`1<T> <NoValue>k__BackingField;
    public bool HasValue { get; }
    public bool IsNull { get; }
    public T Value { get; }
    public static CacheValue`1<T> Null { get; }
    public static CacheValue`1<T> NoValue { get; }
    public CacheValue`1(T value, bool hasValue);
    private static CacheValue`1();
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    public bool get_IsNull();
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public static CacheValue`1<T> get_Null();
    [CompilerGeneratedAttribute]
public static CacheValue`1<T> get_NoValue();
    public virtual string ToString();
}
public enum EasyCaching.Core.CachingProviderType : Enum {
    public int value__;
    public static CachingProviderType InMemory;
    public static CachingProviderType Memcached;
    public static CachingProviderType Redis;
    public static CachingProviderType SQLite;
    public static CachingProviderType Disk;
    public static CachingProviderType Ext1;
    public static CachingProviderType Ext2;
    public static CachingProviderType LiteDB;
    public static CachingProviderType FasterKv;
}
public class EasyCaching.Core.Configurations.BaseProviderOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxRdSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SleepMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockMs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheNulls>k__BackingField;
    public int MaxRdSecond { get; public set; }
    public bool EnableLogging { get; public set; }
    public int SleepMs { get; public set; }
    public int LockMs { get; public set; }
    public string SerializerName { get; public set; }
    public bool CacheNulls { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxRdSecond();
    [CompilerGeneratedAttribute]
public void set_MaxRdSecond(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
    [CompilerGeneratedAttribute]
public int get_SleepMs();
    [CompilerGeneratedAttribute]
public void set_SleepMs(int value);
    [CompilerGeneratedAttribute]
public int get_LockMs();
    [CompilerGeneratedAttribute]
public void set_LockMs(int value);
    [CompilerGeneratedAttribute]
public string get_SerializerName();
    [CompilerGeneratedAttribute]
public void set_SerializerName(string value);
    [CompilerGeneratedAttribute]
public bool get_CacheNulls();
    [CompilerGeneratedAttribute]
public void set_CacheNulls(bool value);
}
public class EasyCaching.Core.Configurations.BaseRabbitMQOptions : object {
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestedConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SocketReadTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SocketWriteTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueMessageExpires>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientProvidedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PublishingChannelsPoolSize>k__BackingField;
    public string HostName { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public string VirtualHost { get; public set; }
    public string TopicExchangeName { get; public set; }
    public int RequestedConnectionTimeout { get; public set; }
    public int SocketReadTimeout { get; public set; }
    public int SocketWriteTimeout { get; public set; }
    public int Port { get; public set; }
    public int QueueMessageExpires { get; public set; }
    public string ClientProvidedName { get; public set; }
    public Nullable`1<int> PublishingChannelsPoolSize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualHost();
    [CompilerGeneratedAttribute]
public void set_VirtualHost(string value);
    [CompilerGeneratedAttribute]
public string get_TopicExchangeName();
    [CompilerGeneratedAttribute]
public void set_TopicExchangeName(string value);
    [CompilerGeneratedAttribute]
public int get_RequestedConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestedConnectionTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_SocketReadTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketReadTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_SocketWriteTimeout();
    [CompilerGeneratedAttribute]
public void set_SocketWriteTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public int get_QueueMessageExpires();
    [CompilerGeneratedAttribute]
public void set_QueueMessageExpires(int value);
    [CompilerGeneratedAttribute]
public string get_ClientProvidedName();
    [CompilerGeneratedAttribute]
public void set_ClientProvidedName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PublishingChannelsPoolSize();
    [CompilerGeneratedAttribute]
public void set_PublishingChannelsPoolSize(Nullable`1<int> value);
}
public class EasyCaching.Core.Configurations.BaseRedisOptions : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SslHost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServerEndPoint> <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AbortOnConnectFail>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool IsSsl { get; public set; }
    public string SslHost { get; public set; }
    public int ConnectionTimeout { get; public set; }
    public IList`1<ServerEndPoint> Endpoints { get; }
    public bool AllowAdmin { get; public set; }
    public string Configuration { get; public set; }
    public bool AbortOnConnectFail { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSsl();
    [CompilerGeneratedAttribute]
public void set_IsSsl(bool value);
    [CompilerGeneratedAttribute]
public string get_SslHost();
    [CompilerGeneratedAttribute]
public void set_SslHost(string value);
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionTimeout(int value);
    [CompilerGeneratedAttribute]
public IList`1<ServerEndPoint> get_Endpoints();
    [CompilerGeneratedAttribute]
public bool get_AllowAdmin();
    [CompilerGeneratedAttribute]
public void set_AllowAdmin(bool value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public bool get_AbortOnConnectFail();
    [CompilerGeneratedAttribute]
public void set_AbortOnConnectFail(bool value);
}
public class EasyCaching.Core.Configurations.EasyCachingInterceptorOptions : object {
    [CompilerGeneratedAttribute]
private string <CacheProviderName>k__BackingField;
    public string CacheProviderName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CacheProviderName();
    [CompilerGeneratedAttribute]
public void set_CacheProviderName(string value);
}
public class EasyCaching.Core.Configurations.EasyCachingOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<IEasyCachingOptionsExtension> <Extensions>k__BackingField;
    internal IList`1<IEasyCachingOptionsExtension> Extensions { get; }
    [CompilerGeneratedAttribute]
internal IList`1<IEasyCachingOptionsExtension> get_Extensions();
    public void RegisterExtension(IEasyCachingOptionsExtension extension);
}
public interface EasyCaching.Core.Configurations.IEasyCachingOptionsExtension {
    public abstract virtual void AddServices(IServiceCollection services);
}
public class EasyCaching.Core.Configurations.ServerEndPoint : object {
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    public int Port { get; public set; }
    public string Host { get; public set; }
    public ServerEndPoint(string host, int port);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
}
public class EasyCaching.Core.DefaultEasyCachingProviderFactory : object {
    private IEnumerable`1<IEasyCachingProvider> _cachingProviders;
    private IEnumerable`1<IRedisCachingProvider> _redisProviders;
    public DefaultEasyCachingProviderFactory(IEnumerable`1<IEasyCachingProvider> cachingProviders, IEnumerable`1<IRedisCachingProvider> redisProviders);
    public sealed virtual IEasyCachingProvider GetCachingProvider(string name);
    public sealed virtual IRedisCachingProvider GetRedisProvider(string name);
}
public class EasyCaching.Core.DefaultHybridProviderFactory : object {
    private IEnumerable`1<IHybridCachingProvider> _hybridProviders;
    public DefaultHybridProviderFactory(IEnumerable`1<IHybridCachingProvider> hybridProviders);
    public sealed virtual IHybridCachingProvider GetHybridCachingProvider(string name);
}
public class EasyCaching.Core.Diagnostics.BeforeExistsRequestEventData : EventData {
    [CompilerGeneratedAttribute]
private string <CacheKey>k__BackingField;
    public string CacheKey { get; public set; }
    public BeforeExistsRequestEventData(string cacheType, string name, string operation, string cacheKey);
    [CompilerGeneratedAttribute]
public string get_CacheKey();
    [CompilerGeneratedAttribute]
public void set_CacheKey(string value);
}
public class EasyCaching.Core.Diagnostics.BeforeGetRequestEventData : EventData {
    [CompilerGeneratedAttribute]
private String[] <CacheKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Expiration>k__BackingField;
    public String[] CacheKeys { get; public set; }
    public Nullable`1<TimeSpan> Expiration { get; public set; }
    public BeforeGetRequestEventData(string cacheType, string name, string operation, String[] cacheKeys, Nullable`1<TimeSpan> expiration);
    [CompilerGeneratedAttribute]
public String[] get_CacheKeys();
    [CompilerGeneratedAttribute]
public void set_CacheKeys(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(Nullable`1<TimeSpan> value);
}
public class EasyCaching.Core.Diagnostics.BeforePublishMessageRequestEventData : object {
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private EasyCachingMessage <Msg>k__BackingField;
    public string Topic { get; public set; }
    public EasyCachingMessage Msg { get; public set; }
    public BeforePublishMessageRequestEventData(string topic, EasyCachingMessage msg);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public EasyCachingMessage get_Msg();
    [CompilerGeneratedAttribute]
public void set_Msg(EasyCachingMessage value);
}
public class EasyCaching.Core.Diagnostics.BeforeRemoveRequestEventData : EventData {
    [CompilerGeneratedAttribute]
private String[] <CacheKeys>k__BackingField;
    public String[] CacheKeys { get; public set; }
    public BeforeRemoveRequestEventData(string cacheType, string name, string operation, String[] cacheKeys);
    [CompilerGeneratedAttribute]
public String[] get_CacheKeys();
    [CompilerGeneratedAttribute]
public void set_CacheKeys(String[] value);
}
public class EasyCaching.Core.Diagnostics.BeforeSetRequestEventData : EventData {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Dict>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Expiration>k__BackingField;
    public IDictionary`2<string, object> Dict { get; public set; }
    public TimeSpan Expiration { get; public set; }
    public BeforeSetRequestEventData(string cacheType, string name, string operation, IDictionary`2<string, object> dict, TimeSpan expiration);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Dict();
    [CompilerGeneratedAttribute]
public void set_Dict(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(TimeSpan value);
}
public class EasyCaching.Core.Diagnostics.BeforeSubscribeMessageRequestEventData : object {
    [CompilerGeneratedAttribute]
private EasyCachingMessage <Msg>k__BackingField;
    public EasyCachingMessage Msg { get; public set; }
    public BeforeSubscribeMessageRequestEventData(EasyCachingMessage msg);
    [CompilerGeneratedAttribute]
public EasyCachingMessage get_Msg();
    [CompilerGeneratedAttribute]
public void set_Msg(EasyCachingMessage value);
}
[ExtensionAttribute]
internal static class EasyCaching.Core.Diagnostics.EasyCachingDiagnosticListenerExtensions : object {
    public static string DiagnosticListenerName;
    private static string EasyCachingPrefix;
    public static string EasyCachingBeforeSetCache;
    public static string EasyCachingAfterSetCache;
    public static string EasyCachingErrorSetCache;
    public static string EasyCachingBeforeRemoveCache;
    public static string EasyCachingAfterRemoveCache;
    public static string EasyCachingErrorRemoveCache;
    public static string EasyCachingBeforeGetCache;
    public static string EasyCachingAfterGetCache;
    public static string EasyCachingErrorGetCache;
    public static string EasyCachingBeforeExistsCache;
    public static string EasyCachingAfterExistsCache;
    public static string EasyCachingErrorExistsCache;
    public static string EasyCachingBeforeFlushCache;
    public static string EasyCachingAfterFlushCache;
    public static string EasyCachingErrorFlushCache;
    public static string EasyCachingBeforePublishMessage;
    public static string EasyCachingAfterPublishMessage;
    public static string EasyCachingErrorPublishMessage;
    public static string EasyCachingBeforeSubscribeMessage;
    public static string EasyCachingAfterSubscribeMessage;
    public static string EasyCachingErrorSubscribeMessage;
    [ExtensionAttribute]
public static void WriteSetCacheError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteRemoveCacheError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteGetCacheError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteExistsCacheError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteFlushCacheError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WritePublishMessageError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteSubscribeMessageError(DiagnosticListener this, Guid operationId, Exception ex);
    [ExtensionAttribute]
public static void WriteSetCacheAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WriteRemoveCacheAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WriteGetCacheAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WriteExistsCacheAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WriteFlushCacheAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WritePublishMessageAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static void WriteSubscribeMessageAfter(DiagnosticListener this, Guid operationId);
    [ExtensionAttribute]
public static Guid WriteSetCacheBefore(DiagnosticListener this, BeforeSetRequestEventData eventData);
    [ExtensionAttribute]
public static Guid WriteRemoveCacheBefore(DiagnosticListener this, BeforeRemoveRequestEventData eventData);
    [ExtensionAttribute]
public static Guid WriteGetCacheBefore(DiagnosticListener this, BeforeGetRequestEventData eventData);
    [ExtensionAttribute]
public static Guid WriteExistsCacheBefore(DiagnosticListener this, BeforeExistsRequestEventData eventData);
    [ExtensionAttribute]
public static Guid WriteFlushCacheBefore(DiagnosticListener this, EventData eventData);
    [ExtensionAttribute]
public static Guid WriteSubscribeMessageBefore(DiagnosticListener this, BeforeSubscribeMessageRequestEventData eventData);
    [ExtensionAttribute]
public static Guid WritePublishMessageBefore(DiagnosticListener this, BeforePublishMessageRequestEventData eventData);
}
public class EasyCaching.Core.Diagnostics.EventData : object {
    [CompilerGeneratedAttribute]
private string <CacheType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public string CacheType { get; public set; }
    public string Name { get; public set; }
    public string Operation { get; public set; }
    public EventData(string cacheType, string name, string operation);
    [CompilerGeneratedAttribute]
public string get_CacheType();
    [CompilerGeneratedAttribute]
public void set_CacheType(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
}
public class EasyCaching.Core.DistributedLock.DistributedLock : MemoryLock {
    private IDistributedLockProvider _provider;
    private object _syncObj;
    private DistributedLockOptions _options;
    private ILogger _logger;
    private Byte[] _value;
    private Timer _timer;
    public DistributedLock(string name, string key, IDistributedLockProvider provider, DistributedLockOptions options, ILoggerFactory loggerFactory);
    public virtual bool Lock(int millisecondsTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.DistributedLock.DistributedLock/<LockAsync>d__8")]
public virtual ValueTask`1<bool> LockAsync(int millisecondsTimeout, CancellationToken cancellationToken);
    public virtual void Release();
    [AsyncStateMachineAttribute("EasyCaching.Core.DistributedLock.DistributedLock/<ReleaseAsync>d__10")]
public virtual ValueTask ReleaseAsync();
    private void GetNewGuid();
    private void StartPing();
    [AsyncStateMachineAttribute("EasyCaching.Core.DistributedLock.DistributedLock/<Ping>d__13")]
private static void Ping(object state);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__0(int millisecondsTimeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__1();
}
public class EasyCaching.Core.DistributedLock.DistributedLockException : Exception {
    public DistributedLockException(string message);
}
public abstract class EasyCaching.Core.DistributedLock.DistributedLockFactory : object {
    private Func`2<string, DistributedLockOptions> _optionsMonitor;
    private ILoggerFactory _loggerFactory;
    protected DistributedLockFactory(Func`2<string, DistributedLockOptions> optionsMonitor, ILoggerFactory loggerFactory);
    public sealed virtual IDistributedLock CreateLock(string name, string key);
    protected abstract virtual IDistributedLockProvider GetLockProvider(string name);
}
public class EasyCaching.Core.DistributedLock.DistributedLockOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Period>k__BackingField;
    public int MaxTtl { get; public set; }
    public int DueTime { get; public set; }
    public int Period { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxTtl();
    [CompilerGeneratedAttribute]
public void set_MaxTtl(int value);
    [CompilerGeneratedAttribute]
public int get_DueTime();
    [CompilerGeneratedAttribute]
public void set_DueTime(int value);
    [CompilerGeneratedAttribute]
public int get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(int value);
    public static DistributedLockOptions FromProviderOptions(BaseProviderOptions options);
}
internal class EasyCaching.Core.DistributedLock.DistributedLockOptionsExtension`1 : object {
    public sealed virtual void AddServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class EasyCaching.Core.DistributedLock.EasyCachingOptionsExtensions : object {
    [ExtensionAttribute]
public static EasyCachingOptions UseMemoryLock(EasyCachingOptions options);
    [ExtensionAttribute]
public static EasyCachingOptions UseDistributedLock(EasyCachingOptions options);
}
public interface EasyCaching.Core.DistributedLock.IDistributedLock {
    public abstract virtual bool Lock(int millisecondsTimeout, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<bool> LockAsync(int millisecondsTimeout, CancellationToken cancellationToken);
    public abstract virtual void Release();
    public abstract virtual ValueTask ReleaseAsync();
}
public interface EasyCaching.Core.DistributedLock.IDistributedLockFactory {
    public abstract virtual IDistributedLock CreateLock(string name, string key);
}
public interface EasyCaching.Core.DistributedLock.IDistributedLockProvider {
    public abstract virtual Task`1<bool> SetAsync(string key, Byte[] value, int ttlMs);
    public abstract virtual bool Add(string key, Byte[] value, int ttlMs);
    public abstract virtual Task`1<bool> AddAsync(string key, Byte[] value, int ttlMs);
    public abstract virtual bool Delete(string key, Byte[] value);
    public abstract virtual Task`1<bool> DeleteAsync(string key, Byte[] value);
    public abstract virtual bool CanRetry(Exception ex);
}
public class EasyCaching.Core.DistributedLock.MemoryLock : object {
    private static AsyncKeyedLocker`1<string> _locker;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    private object _syncObj;
    private AsyncKeyedLockReleaser`1<string> _releaser;
    public string Key { get; }
    public MemoryLock(string key);
    private static MemoryLock();
    [CompilerGeneratedAttribute]
public string get_Key();
    private AsyncKeyedLockReleaser`1<string> GetOrCreate();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("EasyCaching.Core.DistributedLock.MemoryLock/<DisposeAsync>d__9")]
public virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void InternalRelease();
    public virtual void Release();
    public virtual ValueTask ReleaseAsync();
    private void LockFail();
    public virtual bool Lock(int millisecondsTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.DistributedLock.MemoryLock/<LockAsync>d__17")]
public virtual ValueTask`1<bool> LockAsync(int millisecondsTimeout, CancellationToken cancellationToken);
}
public class EasyCaching.Core.DistributedLock.MemoryLockFactory : object {
    public sealed virtual IDistributedLock CreateLock(string name, string key);
}
internal class EasyCaching.Core.DistributedLock.RefCounter`1 : object {
    private int _refCount;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public RefCounter`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    public int Increment();
    public int Decrement();
}
internal class EasyCaching.Core.DistributedLock.RefCounterPool`2 : object {
    private IDictionary`2<TKey, RefCounter`1<TValue>> _dictionary;
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    public TValue TryRemove(TKey key);
}
public abstract class EasyCaching.Core.EasyCachingAbstractBus : object {
    protected static DiagnosticListener s_diagnosticListener;
    protected Action`1<EasyCachingMessage> _handler;
    protected Action _reconnectHandler;
    [CompilerGeneratedAttribute]
private string <BusName>k__BackingField;
    protected string BusName { get; protected set; }
    public string Name { get; }
    private static EasyCachingAbstractBus();
    public abstract virtual void BasePublish(string topic, EasyCachingMessage message);
    public abstract virtual Task BasePublishAsync(string topic, EasyCachingMessage message, CancellationToken cancellationToken);
    public abstract virtual void BaseSubscribe(string topic, Action`1<EasyCachingMessage> action);
    public abstract virtual Task BaseSubscribeAsync(string topic, Action`1<EasyCachingMessage> action, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
protected string get_BusName();
    [CompilerGeneratedAttribute]
protected void set_BusName(string value);
    public sealed virtual string get_Name();
    public sealed virtual void Publish(string topic, EasyCachingMessage message);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractBus/<PublishAsync>d__14")]
public sealed virtual Task PublishAsync(string topic, EasyCachingMessage message, CancellationToken cancellationToken);
    public sealed virtual void Subscribe(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractBus/<SubscribeAsync>d__16")]
public sealed virtual Task SubscribeAsync(string topic, Action`1<EasyCachingMessage> action, Action reconnectAction, CancellationToken cancellationToken);
    public virtual void BaseOnMessage(EasyCachingMessage message);
    public virtual void BaseOnReconnect();
}
public abstract class EasyCaching.Core.EasyCachingAbstractProvider : object {
    protected static DiagnosticListener s_diagnosticListener;
    private IDistributedLockFactory _lockFactory;
    private BaseProviderOptions _options;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistributedProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProviderMaxRdSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private CachingProviderType <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheStats <ProviderStats>k__BackingField;
    protected string ProviderName { get; protected set; }
    protected bool IsDistributedProvider { get; protected set; }
    protected int ProviderMaxRdSecond { get; protected set; }
    protected CachingProviderType ProviderType { get; protected set; }
    protected CacheStats ProviderStats { get; protected set; }
    public string Name { get; }
    public bool IsDistributedCache { get; }
    public bool UseLock { get; }
    public int MaxRdSecond { get; }
    public CachingProviderType CachingProviderType { get; }
    public CacheStats CacheStats { get; }
    public object Database { get; }
    protected EasyCachingAbstractProvider(IDistributedLockFactory lockFactory, BaseProviderOptions options);
    private static EasyCachingAbstractProvider();
    [CompilerGeneratedAttribute]
protected string get_ProviderName();
    [CompilerGeneratedAttribute]
protected void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
protected bool get_IsDistributedProvider();
    [CompilerGeneratedAttribute]
protected void set_IsDistributedProvider(bool value);
    [CompilerGeneratedAttribute]
protected int get_ProviderMaxRdSecond();
    [CompilerGeneratedAttribute]
protected void set_ProviderMaxRdSecond(int value);
    [CompilerGeneratedAttribute]
protected CachingProviderType get_ProviderType();
    [CompilerGeneratedAttribute]
protected void set_ProviderType(CachingProviderType value);
    [CompilerGeneratedAttribute]
protected CacheStats get_ProviderStats();
    [CompilerGeneratedAttribute]
protected void set_ProviderStats(CacheStats value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsDistributedCache();
    public sealed virtual bool get_UseLock();
    public sealed virtual int get_MaxRdSecond();
    public sealed virtual CachingProviderType get_CachingProviderType();
    public sealed virtual CacheStats get_CacheStats();
    public sealed virtual object get_Database();
    public abstract virtual object BaseGetDatabase();
    public abstract virtual bool BaseExists(string cacheKey);
    public abstract virtual Task`1<bool> BaseExistsAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual void BaseFlush();
    public abstract virtual Task BaseFlushAsync(CancellationToken cancellationToken);
    public abstract virtual CacheValue`1<T> BaseGet(string cacheKey, Func`1<T> dataRetriever, TimeSpan expiration);
    public abstract virtual CacheValue`1<T> BaseGet(string cacheKey);
    public abstract virtual IEnumerable`1<string> BaseGetAllKeysByPrefix(string prefix);
    public abstract virtual Task`1<IEnumerable`1<string>> BaseGetAllKeysByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> BaseGetAll(IEnumerable`1<string> cacheKeys);
    public abstract virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> BaseGetAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    public abstract virtual Task`1<CacheValue`1<T>> BaseGetAsync(string cacheKey, Func`1<Task`1<T>> dataRetriever, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> BaseGetAsync(string cacheKey, Type type, CancellationToken cancellationToken);
    public abstract virtual Task`1<CacheValue`1<T>> BaseGetAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> BaseGetByPrefix(string prefix);
    public abstract virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> BaseGetByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual int BaseGetCount(string prefix);
    public abstract virtual Task`1<int> BaseGetCountAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual void BaseRemove(string cacheKey);
    public abstract virtual void BaseRemoveAll(IEnumerable`1<string> cacheKeys);
    public abstract virtual Task BaseRemoveAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellation);
    public abstract virtual Task BaseRemoveAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual void BaseRemoveByPrefix(string prefix);
    public abstract virtual Task BaseRemoveByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual void BaseRemoveByPattern(string pattern);
    public abstract virtual Task BaseRemoveByPatternAsync(string pattern, CancellationToken cancellationToken);
    public abstract virtual void BaseSet(string cacheKey, T cacheValue, TimeSpan expiration);
    public abstract virtual void BaseSetAll(IDictionary`2<string, T> values, TimeSpan expiration);
    public abstract virtual Task BaseSetAllAsync(IDictionary`2<string, T> values, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual Task BaseSetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual bool BaseTrySet(string cacheKey, T cacheValue, TimeSpan expiration);
    public abstract virtual Task`1<bool> BaseTrySetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual TimeSpan BaseGetExpiration(string cacheKey);
    public abstract virtual Task`1<TimeSpan> BaseGetExpirationAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual ProviderInfo BaseGetProviderInfo();
    public sealed virtual bool Exists(string cacheKey);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<ExistsAsync>d__75")]
public sealed virtual Task`1<bool> ExistsAsync(string cacheKey, CancellationToken cancellationToken);
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<FlushAsync>d__77")]
public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    public sealed virtual CacheValue`1<T> Get(string cacheKey, Func`1<T> dataRetriever, TimeSpan expiration);
    public sealed virtual CacheValue`1<T> Get(string cacheKey);
    public sealed virtual IEnumerable`1<string> GetAllKeysByPrefix(string prefix);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetAllKeysByPrefixAsync>d__81")]
public sealed virtual Task`1<IEnumerable`1<string>> GetAllKeysByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public sealed virtual IDictionary`2<string, CacheValue`1<T>> GetAll(IEnumerable`1<string> cacheKeys);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetAllAsync>d__83`1")]
public sealed virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> GetAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetAsync>d__84`1")]
public sealed virtual Task`1<CacheValue`1<T>> GetAsync(string cacheKey, Func`1<Task`1<T>> dataRetriever, TimeSpan expiration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetAsync>d__85")]
public sealed virtual Task`1<object> GetAsync(string cacheKey, Type type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetAsync>d__86`1")]
public sealed virtual Task`1<CacheValue`1<T>> GetAsync(string cacheKey, CancellationToken cancellationToken);
    public sealed virtual IDictionary`2<string, CacheValue`1<T>> GetByPrefix(string prefix);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetByPrefixAsync>d__88`1")]
public sealed virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> GetByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public sealed virtual int GetCount(string prefix);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetCountAsync>d__90")]
public sealed virtual Task`1<int> GetCountAsync(string prefix, CancellationToken cancellationToken);
    public sealed virtual void Remove(string cacheKey);
    public sealed virtual void RemoveAll(IEnumerable`1<string> cacheKeys);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<RemoveAllAsync>d__93")]
public sealed virtual Task RemoveAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<RemoveAsync>d__94")]
public sealed virtual Task RemoveAsync(string cacheKey, CancellationToken cancellationToken);
    public sealed virtual void RemoveByPrefix(string prefix);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<RemoveByPrefixAsync>d__96")]
public sealed virtual Task RemoveByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public sealed virtual void RemoveByPattern(string pattern);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<RemoveByPatternAsync>d__98")]
public sealed virtual Task RemoveByPatternAsync(string pattern, CancellationToken cancellationToken);
    public sealed virtual void Set(string cacheKey, T cacheValue, TimeSpan expiration);
    public sealed virtual void SetAll(IDictionary`2<string, T> value, TimeSpan expiration);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<SetAllAsync>d__101`1")]
public sealed virtual Task SetAllAsync(IDictionary`2<string, T> value, TimeSpan expiration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<SetAsync>d__102`1")]
public sealed virtual Task SetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public sealed virtual bool TrySet(string cacheKey, T cacheValue, TimeSpan expiration);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<TrySetAsync>d__104`1")]
public sealed virtual Task`1<bool> TrySetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public sealed virtual TimeSpan GetExpiration(string cacheKey);
    [AsyncStateMachineAttribute("EasyCaching.Core.EasyCachingAbstractProvider/<GetExpirationAsync>d__106")]
public sealed virtual Task`1<TimeSpan> GetExpirationAsync(string cacheKey, CancellationToken cancellationToken);
    public sealed virtual ProviderInfo GetProviderInfo();
    protected SearchKeyPattern ProcessSearchKeyPattern(string pattern);
    protected string HandleSearchKeyPattern(string pattern);
}
public static class EasyCaching.Core.EasyCachingApplicationBuliderExtensions : object {
}
public class EasyCaching.Core.EasyCachingConstValue : object {
    public static string ConfigSection;
    public static string RedisSection;
    public static string CSRedisSection;
    public static string MemcachedSection;
    public static string SQLiteSection;
    public static string InMemorySection;
    public static string DiskSection;
    public static string HybridSection;
    public static string RedisBusSection;
    public static string RabbitMQBusSection;
    public static string KafkaBusSection;
    public static string ZookeeperBusSection;
    public static string DefaultInMemoryName;
    public static string DefaultRedisName;
    public static string DefaultCSRedisName;
    public static string DefaultMemcachedName;
    public static string DefaultSQLiteName;
    public static string DefaultDiskName;
    public static string DefaultHybridName;
    public static string DefaultSerializerName;
    public static string DefaultLiteDBName;
    public static string LiteDBSection;
    public static string DefaultFasterKvName;
    public static string FasterKvSection;
    public static string NotFoundCliExceptionMessage;
    public static string NotFoundSerExceptionMessage;
}
public class EasyCaching.Core.EasyCachingException : Exception {
    public EasyCachingException(string message);
    public EasyCachingException(string message, Exception innerException);
}
public class EasyCaching.Core.EasyCachingNotFoundException : Exception {
    public EasyCachingNotFoundException(string message);
}
public interface EasyCaching.Core.IEasyCachingProvider {
    public bool IsDistributedCache { get; }
    public bool UseLock { get; }
    public int MaxRdSecond { get; }
    public CachingProviderType CachingProviderType { get; }
    public CacheStats CacheStats { get; }
    public object Database { get; }
    public abstract virtual bool get_IsDistributedCache();
    public abstract virtual bool get_UseLock();
    public abstract virtual IEnumerable`1<string> GetAllKeysByPrefix(string prefix);
    public abstract virtual Task`1<IEnumerable`1<string>> GetAllKeysByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> GetAll(IEnumerable`1<string> cacheKeys);
    public abstract virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> GetAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> GetByPrefix(string prefix);
    public abstract virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> GetByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual int GetCount(string prefix);
    public abstract virtual Task`1<int> GetCountAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual void Flush();
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    public abstract virtual int get_MaxRdSecond();
    public abstract virtual CachingProviderType get_CachingProviderType();
    public abstract virtual CacheStats get_CacheStats();
    public abstract virtual TimeSpan GetExpiration(string cacheKey);
    public abstract virtual Task`1<TimeSpan> GetExpirationAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual ProviderInfo GetProviderInfo();
    public abstract virtual object get_Database();
}
public interface EasyCaching.Core.IEasyCachingProviderBase {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Set(string cacheKey, T cacheValue, TimeSpan expiration);
    public abstract virtual Task SetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual CacheValue`1<T> Get(string cacheKey);
    public abstract virtual Task`1<CacheValue`1<T>> GetAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual void Remove(string cacheKey);
    public abstract virtual Task RemoveAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ExistsAsync(string cacheKey, CancellationToken cancellationToken);
    public abstract virtual bool Exists(string cacheKey);
    public abstract virtual bool TrySet(string cacheKey, T cacheValue, TimeSpan expiration);
    public abstract virtual Task`1<bool> TrySetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual void SetAll(IDictionary`2<string, T> value, TimeSpan expiration);
    public abstract virtual Task SetAllAsync(IDictionary`2<string, T> value, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual void RemoveAll(IEnumerable`1<string> cacheKeys);
    public abstract virtual Task RemoveAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    public abstract virtual CacheValue`1<T> Get(string cacheKey, Func`1<T> dataRetriever, TimeSpan expiration);
    public abstract virtual Task`1<CacheValue`1<T>> GetAsync(string cacheKey, Func`1<Task`1<T>> dataRetriever, TimeSpan expiration, CancellationToken cancellationToken);
    public abstract virtual void RemoveByPrefix(string prefix);
    public abstract virtual Task RemoveByPatternAsync(string pattern, CancellationToken cancellationToken);
    public abstract virtual void RemoveByPattern(string pattern);
    public abstract virtual Task RemoveByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> GetAsync(string cacheKey, Type type, CancellationToken cancellationToken);
}
public interface EasyCaching.Core.IEasyCachingProviderFactory {
    public abstract virtual IEasyCachingProvider GetCachingProvider(string name);
    public abstract virtual IRedisCachingProvider GetRedisProvider(string name);
}
public interface EasyCaching.Core.IHybridCachingProvider {
}
public interface EasyCaching.Core.IHybridProviderFactory {
    public abstract virtual IHybridCachingProvider GetHybridCachingProvider(string name);
}
public class EasyCaching.Core.Interceptor.DefaultEasyCachingKeyGenerator : object {
    private static char LinkChar;
    public sealed virtual string GetCacheKey(MethodInfo methodInfo, Object[] args, string prefix);
    public sealed virtual string GetCacheKeyPrefix(MethodInfo methodInfo, string prefix);
    private string GenerateCacheKey(MethodInfo methodInfo, string prefix, IEnumerable`1<string> parameters);
}
[AttributeUsageAttribute("64")]
public class EasyCaching.Core.Interceptor.EasyCachingAbleAttribute : EasyCachingInterceptorAttribute {
    [CompilerGeneratedAttribute]
private int <Expiration>k__BackingField;
    public int Expiration { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(int value);
}
[AttributeUsageAttribute("64")]
public class EasyCaching.Core.Interceptor.EasyCachingEvictAttribute : EasyCachingInterceptorAttribute {
    [CompilerGeneratedAttribute]
private bool <IsAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBefore>k__BackingField;
    public bool IsAll { get; public set; }
    public bool IsBefore { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsAll();
    [CompilerGeneratedAttribute]
public void set_IsAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBefore();
    [CompilerGeneratedAttribute]
public void set_IsBefore(bool value);
}
[AttributeUsageAttribute("64")]
public class EasyCaching.Core.Interceptor.EasyCachingInterceptorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsHybridProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheKeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighAvailability>k__BackingField;
    public bool IsHybridProvider { get; public set; }
    public string CacheKeyPrefix { get; public set; }
    public string CacheProviderName { get; public set; }
    public bool IsHighAvailability { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsHybridProvider();
    [CompilerGeneratedAttribute]
public void set_IsHybridProvider(bool value);
    [CompilerGeneratedAttribute]
public string get_CacheKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_CacheKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_CacheProviderName();
    [CompilerGeneratedAttribute]
public void set_CacheProviderName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsHighAvailability();
    [CompilerGeneratedAttribute]
public void set_IsHighAvailability(bool value);
}
[AttributeUsageAttribute("64")]
public class EasyCaching.Core.Interceptor.EasyCachingPutAttribute : EasyCachingInterceptorAttribute {
    [CompilerGeneratedAttribute]
private int <Expiration>k__BackingField;
    public int Expiration { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(int value);
}
public interface EasyCaching.Core.Interceptor.ICachable {
    public string CacheKey { get; }
    public abstract virtual string get_CacheKey();
}
public interface EasyCaching.Core.Interceptor.IEasyCachingKeyGenerator {
    public abstract virtual string GetCacheKey(MethodInfo methodInfo, Object[] args, string prefix);
    public abstract virtual string GetCacheKeyPrefix(MethodInfo methodInfo, string prefix);
}
public static class EasyCaching.Core.Interceptor.ParameterCacheKeys : object {
    public static string GenerateCacheKey(object parameter);
    private static string GenerateCacheKey(IEnumerable`1<object> parameter);
    private static string GenerateCacheKeyForModel(object parameter);
}
public class EasyCaching.Core.Internal.OptionsMonitorWrapper`1 : object {
    private T _option;
    public T CurrentValue { get; }
    public OptionsMonitorWrapper`1(T option);
    public sealed virtual T get_CurrentValue();
    public sealed virtual T Get(string name);
    public sealed virtual IDisposable OnChange(Action`2<T, string> listener);
}
public static class EasyCaching.Core.Internal.RandomHelper : object {
    private static Random _global;
    private static ThreadLocal`1<Random> _local;
    private static Random Instance { get; }
    private static RandomHelper();
    private static Random get_Instance();
    public static int GetNext(int min, int max);
}
public static class EasyCaching.Core.Internal.TypeHelper : object {
    private static Regex SubtractFullNameRegex;
    private static TypeHelper();
    public static string BuildTypeName(Type type);
}
public interface EasyCaching.Core.IRedisCachingProvider {
    public string RedisName { get; }
    public abstract virtual string get_RedisName();
    public abstract virtual bool KeyDel(string cacheKey);
    public abstract virtual Task`1<bool> KeyDelAsync(string cacheKey);
    public abstract virtual bool KeyExpire(string cacheKey, int second);
    public abstract virtual Task`1<bool> KeyExpireAsync(string cacheKey, int second);
    public abstract virtual bool KeyPersist(string cacheKey);
    public abstract virtual Task`1<bool> KeyPersistAsync(string cacheKey);
    public abstract virtual bool KeyCopy(string sourceKey, string destinationKey, bool isReplace);
    public abstract virtual Task`1<bool> KeyCopyAsync(string sourceKey, string destinationKey, bool isReplace);
    public abstract virtual Task`1<bool> KeyExistsAsync(string cacheKey);
    public abstract virtual bool KeyExists(string cacheKey);
    public abstract virtual long TTL(string cacheKey);
    public abstract virtual Task`1<long> TTLAsync(string cacheKey);
    public abstract virtual List`1<string> SearchKeys(string cacheKey, Nullable`1<int> count);
    public abstract virtual Task`1<List`1<string>> SearchKeysAsync(string cacheKey, Nullable`1<int> count);
    public abstract virtual long IncrBy(string cacheKey, long value);
    public abstract virtual Task`1<long> IncrByAsync(string cacheKey, long value);
    public abstract virtual double IncrByFloat(string cacheKey, double value);
    public abstract virtual Task`1<double> IncrByFloatAsync(string cacheKey, double value);
    public abstract virtual bool StringSet(string cacheKey, string cacheValue, Nullable`1<TimeSpan> expiration, string when);
    public abstract virtual Task`1<bool> StringSetAsync(string cacheKey, string cacheValue, Nullable`1<TimeSpan> expiration, string when);
    public abstract virtual string StringGet(string cacheKey);
    public abstract virtual Task`1<string> StringGetAsync(string cacheKey);
    public abstract virtual long StringLen(string cacheKey);
    public abstract virtual Task`1<long> StringLenAsync(string cacheKey);
    public abstract virtual long StringSetRange(string cacheKey, long offest, string value);
    public abstract virtual Task`1<long> StringSetRangeAsync(string cacheKey, long offest, string value);
    public abstract virtual string StringGetRange(string cacheKey, long start, long end);
    public abstract virtual Task`1<string> StringGetRangeAsync(string cacheKey, long start, long end);
    public abstract virtual bool HMSet(string cacheKey, Dictionary`2<string, string> vals, Nullable`1<TimeSpan> expiration);
    public abstract virtual bool HSet(string cacheKey, string field, string cacheValue);
    public abstract virtual bool HExists(string cacheKey, string field);
    public abstract virtual long HDel(string cacheKey, IList`1<string> fields);
    public abstract virtual string HGet(string cacheKey, string field);
    public abstract virtual Dictionary`2<string, string> HGetAll(string cacheKey);
    public abstract virtual long HIncrBy(string cacheKey, string field, long val);
    public abstract virtual List`1<string> HKeys(string cacheKey);
    public abstract virtual long HLen(string cacheKey);
    public abstract virtual List`1<string> HVals(string cacheKey);
    public abstract virtual Dictionary`2<string, string> HMGet(string cacheKey, IList`1<string> fields);
    public abstract virtual Task`1<bool> HMSetAsync(string cacheKey, Dictionary`2<string, string> vals, Nullable`1<TimeSpan> expiration);
    public abstract virtual Task`1<bool> HSetAsync(string cacheKey, string field, string cacheValue);
    public abstract virtual Task`1<bool> HExistsAsync(string cacheKey, string field);
    public abstract virtual Task`1<long> HDelAsync(string cacheKey, IList`1<string> fields);
    public abstract virtual Task`1<string> HGetAsync(string cacheKey, string field);
    public abstract virtual Task`1<Dictionary`2<string, string>> HGetAllAsync(string cacheKey);
    public abstract virtual Task`1<long> HIncrByAsync(string cacheKey, string field, long val);
    public abstract virtual Task`1<List`1<string>> HKeysAsync(string cacheKey);
    public abstract virtual Task`1<long> HLenAsync(string cacheKey);
    public abstract virtual Task`1<List`1<string>> HValsAsync(string cacheKey);
    public abstract virtual Task`1<Dictionary`2<string, string>> HMGetAsync(string cacheKey, IList`1<string> fields);
    public abstract virtual T LIndex(string cacheKey, long index);
    public abstract virtual long LLen(string cacheKey);
    public abstract virtual T LPop(string cacheKey);
    public abstract virtual long LPush(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual List`1<T> LRange(string cacheKey, long start, long stop);
    public abstract virtual long LRem(string cacheKey, long count, T cacheValue);
    public abstract virtual bool LSet(string cacheKey, long index, T cacheValue);
    public abstract virtual bool LTrim(string cacheKey, long start, long stop);
    public abstract virtual long LPushX(string cacheKey, T cacheValue);
    public abstract virtual long LInsertBefore(string cacheKey, T pivot, T cacheValue);
    public abstract virtual long LInsertAfter(string cacheKey, T pivot, T cacheValue);
    public abstract virtual long RPushX(string cacheKey, T cacheValue);
    public abstract virtual long RPush(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual T RPop(string cacheKey);
    public abstract virtual Task`1<T> LIndexAsync(string cacheKey, long index);
    public abstract virtual Task`1<long> LLenAsync(string cacheKey);
    public abstract virtual Task`1<T> LPopAsync(string cacheKey);
    public abstract virtual Task`1<long> LPushAsync(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual Task`1<List`1<T>> LRangeAsync(string cacheKey, long start, long stop);
    public abstract virtual Task`1<long> LRemAsync(string cacheKey, long count, T cacheValue);
    public abstract virtual Task`1<bool> LSetAsync(string cacheKey, long index, T cacheValue);
    public abstract virtual Task`1<bool> LTrimAsync(string cacheKey, long start, long stop);
    public abstract virtual Task`1<long> LPushXAsync(string cacheKey, T cacheValue);
    public abstract virtual Task`1<long> LInsertBeforeAsync(string cacheKey, T pivot, T cacheValue);
    public abstract virtual Task`1<long> LInsertAfterAsync(string cacheKey, T pivot, T cacheValue);
    public abstract virtual Task`1<long> RPushXAsync(string cacheKey, T cacheValue);
    public abstract virtual Task`1<long> RPushAsync(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual Task`1<T> RPopAsync(string cacheKey);
    public abstract virtual long SAdd(string cacheKey, IList`1<T> cacheValues, Nullable`1<TimeSpan> expiration);
    public abstract virtual long SCard(string cacheKey);
    public abstract virtual bool SIsMember(string cacheKey, T cacheValue);
    public abstract virtual List`1<T> SMembers(string cacheKey);
    public abstract virtual T SPop(string cacheKey);
    public abstract virtual List`1<T> SRandMember(string cacheKey, int count);
    public abstract virtual long SRem(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual Task`1<long> SAddAsync(string cacheKey, IList`1<T> cacheValues, Nullable`1<TimeSpan> expiration);
    public abstract virtual Task`1<long> SCardAsync(string cacheKey);
    public abstract virtual Task`1<bool> SIsMemberAsync(string cacheKey, T cacheValue);
    public abstract virtual Task`1<List`1<T>> SMembersAsync(string cacheKey);
    public abstract virtual Task`1<T> SPopAsync(string cacheKey);
    public abstract virtual Task`1<List`1<T>> SRandMemberAsync(string cacheKey, int count);
    public abstract virtual Task`1<long> SRemAsync(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual long ZAdd(string cacheKey, Dictionary`2<T, double> cacheValues);
    public abstract virtual long ZCard(string cacheKey);
    public abstract virtual long ZCount(string cacheKey, double min, double max);
    public abstract virtual double ZIncrBy(string cacheKey, string field, double val);
    public abstract virtual long ZLexCount(string cacheKey, string min, string max);
    public abstract virtual List`1<T> ZRange(string cacheKey, long start, long stop);
    public abstract virtual List`1<T> ZRangeByScore(string cacheKey, double min, double max, Nullable`1<long> count, long offset);
    public abstract virtual long ZRangeRemByScore(string cacheKey, double min, double max);
    public abstract virtual Nullable`1<long> ZRank(string cacheKey, T cacheValue);
    public abstract virtual long ZRem(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual Nullable`1<double> ZScore(string cacheKey, T cacheValue);
    public abstract virtual Task`1<long> ZAddAsync(string cacheKey, Dictionary`2<T, double> cacheValues);
    public abstract virtual Task`1<long> ZCardAsync(string cacheKey);
    public abstract virtual Task`1<long> ZCountAsync(string cacheKey, double min, double max);
    public abstract virtual Task`1<double> ZIncrByAsync(string cacheKey, string field, double val);
    public abstract virtual Task`1<long> ZLexCountAsync(string cacheKey, string min, string max);
    public abstract virtual Task`1<List`1<T>> ZRangeAsync(string cacheKey, long start, long stop);
    public abstract virtual Task`1<List`1<T>> ZRangeByScoreAsync(string cacheKey, double min, double max, Nullable`1<long> count, long offset);
    public abstract virtual Task`1<long> ZRangeRemByScoreAsync(string cacheKey, double min, double max);
    public abstract virtual Task`1<Nullable`1<long>> ZRankAsync(string cacheKey, T cacheValue);
    public abstract virtual Task`1<long> ZRemAsync(string cacheKey, IList`1<T> cacheValues);
    public abstract virtual Task`1<Nullable`1<double>> ZScoreAsync(string cacheKey, T cacheValue);
    public abstract virtual bool PfAdd(string cacheKey, List`1<T> values);
    public abstract virtual Task`1<bool> PfAddAsync(string cacheKey, List`1<T> values);
    public abstract virtual long PfCount(List`1<string> cacheKeys);
    public abstract virtual Task`1<long> PfCountAsync(List`1<string> cacheKeys);
    public abstract virtual bool PfMerge(string destKey, List`1<string> sourceKeys);
    public abstract virtual Task`1<bool> PfMergeAsync(string destKey, List`1<string> sourceKeys);
    public abstract virtual long GeoAdd(string cacheKey, List`1<ValueTuple`3<double, double, string>> values);
    public abstract virtual Task`1<long> GeoAddAsync(string cacheKey, List`1<ValueTuple`3<double, double, string>> values);
    public abstract virtual Nullable`1<double> GeoDist(string cacheKey, string member1, string member2, string unit);
    public abstract virtual Task`1<Nullable`1<double>> GeoDistAsync(string cacheKey, string member1, string member2, string unit);
    public abstract virtual List`1<string> GeoHash(string cacheKey, List`1<string> members);
    public abstract virtual Task`1<List`1<string>> GeoHashAsync(string cacheKey, List`1<string> members);
    public abstract virtual List`1<Nullable`1<ValueTuple`2<decimal, decimal>>> GeoPos(string cacheKey, List`1<string> members);
    public abstract virtual Task`1<List`1<Nullable`1<ValueTuple`2<decimal, decimal>>>> GeoPosAsync(string cacheKey, List`1<string> members);
    public abstract virtual object Eval(string script, string cacheKey, List`1<object> args);
    public abstract virtual Task`1<object> EvalAsync(string script, string cacheKey, List`1<object> args);
}
public class EasyCaching.Core.ProviderInfo : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheStats <CacheStats>k__BackingField;
    [CompilerGeneratedAttribute]
private IEasyCachingSerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private CachingProviderType <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRdSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistributedProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SleepMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockMs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheNulls>k__BackingField;
    public string ProviderName { get; public set; }
    public CacheStats CacheStats { get; public set; }
    public IEasyCachingSerializer Serializer { get; public set; }
    public CachingProviderType ProviderType { get; public set; }
    public int MaxRdSecond { get; public set; }
    public bool IsDistributedProvider { get; public set; }
    public bool EnableLogging { get; public set; }
    public int SleepMs { get; public set; }
    public int LockMs { get; public set; }
    public string SerializerName { get; public set; }
    public bool CacheNulls { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public CacheStats get_CacheStats();
    [CompilerGeneratedAttribute]
public void set_CacheStats(CacheStats value);
    [CompilerGeneratedAttribute]
public IEasyCachingSerializer get_Serializer();
    [CompilerGeneratedAttribute]
public void set_Serializer(IEasyCachingSerializer value);
    [CompilerGeneratedAttribute]
public CachingProviderType get_ProviderType();
    [CompilerGeneratedAttribute]
public void set_ProviderType(CachingProviderType value);
    [CompilerGeneratedAttribute]
public int get_MaxRdSecond();
    [CompilerGeneratedAttribute]
public void set_MaxRdSecond(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDistributedProvider();
    [CompilerGeneratedAttribute]
public void set_IsDistributedProvider(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
    [CompilerGeneratedAttribute]
public int get_SleepMs();
    [CompilerGeneratedAttribute]
public void set_SleepMs(int value);
    [CompilerGeneratedAttribute]
public int get_LockMs();
    [CompilerGeneratedAttribute]
public void set_LockMs(int value);
    [CompilerGeneratedAttribute]
public string get_SerializerName();
    [CompilerGeneratedAttribute]
public void set_SerializerName(string value);
    [CompilerGeneratedAttribute]
public bool get_CacheNulls();
    [CompilerGeneratedAttribute]
public void set_CacheNulls(bool value);
}
public enum EasyCaching.Core.SearchKeyPattern : Enum {
    public int value__;
    public static SearchKeyPattern Postfix;
    public static SearchKeyPattern Prefix;
    public static SearchKeyPattern Contains;
    public static SearchKeyPattern Exact;
}
public interface EasyCaching.Core.Serialization.IEasyCachingSerializer {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Byte[] Serialize(T value);
    public abstract virtual T Deserialize(Byte[] bytes);
    public abstract virtual object Deserialize(Byte[] bytes, Type type);
    public abstract virtual ArraySegment`1<byte> SerializeObject(object obj);
    public abstract virtual object DeserializeObject(ArraySegment`1<byte> value);
}
public enum EasyCaching.Core.StatsType : Enum {
    public int value__;
    public static StatsType Hit;
    public static StatsType Missed;
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.EasyCachingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddEasyCaching(IServiceCollection services, Action`1<EasyCachingOptions> setupAction);
}
