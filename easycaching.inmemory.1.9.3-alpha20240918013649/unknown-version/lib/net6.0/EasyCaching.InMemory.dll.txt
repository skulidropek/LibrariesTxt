internal static class EasyCaching.InMemory.DeepClonerCache : object {
    private static ConcurrentDictionary`2<Type, object> _typeCache;
    private static ConcurrentDictionary`2<Type, object> _typeCacheDeepTo;
    private static ConcurrentDictionary`2<Type, object> _typeCacheShallowTo;
    private static ConcurrentDictionary`2<Type, object> _structAsObjectCache;
    private static ConcurrentDictionary`2<Tuple`2<Type, Type>, object> _typeConvertCache;
    private static DeepClonerCache();
    public static object GetOrAddClass(Type type, Func`2<Type, T> adder);
    public static object GetOrAddDeepClassTo(Type type, Func`2<Type, T> adder);
    public static object GetOrAddShallowClassTo(Type type, Func`2<Type, T> adder);
    public static object GetOrAddStructAsObject(Type type, Func`2<Type, T> adder);
    public static T GetOrAddConvertor(Type from, Type to, Func`3<Type, Type, T> adder);
    public static void ClearCache();
}
internal static class EasyCaching.InMemory.DeepClonerExprGenerator : object {
    internal static object GenerateClonerInternal(Type realType, bool asObject);
    internal static void ForceSetField(FieldInfo field, object obj, object value);
    private static object GenerateProcessMethod(Type type, bool unboxStruct);
    private static object GenerateProcessArrayMethod(Type type);
    private static object GenerateProcessTupleMethod(Type type);
}
internal static class EasyCaching.InMemory.DeepClonerGenerator : object {
    public static T CloneObject(T obj);
    private static object CloneClassRoot(object obj);
    internal static object CloneClassInternal(object obj, DeepCloneState state);
    private static T CloneStructInternal(T obj, DeepCloneState state);
    internal static T[] Clone1DimArraySafeInternal(T[] obj, DeepCloneState state);
    internal static T[] Clone1DimArrayStructInternal(T[] obj, DeepCloneState state);
    internal static T[] Clone1DimArrayClassInternal(T[] obj, DeepCloneState state);
    internal static T[0...,0...] Clone2DimArrayInternal(T[0...,0...] obj, DeepCloneState state);
    internal static Array CloneAbstractArrayInternal(Array obj, DeepCloneState state);
    internal static Func`3<T, DeepCloneState, T> GetClonerForValueType();
    private static object GenerateCloner(Type t, bool asObject);
}
internal static class EasyCaching.InMemory.DeepClonerSafeTypes : object {
    internal static ConcurrentDictionary`2<Type, bool> KnownTypes;
    private static DeepClonerSafeTypes();
    private static bool CanReturnSameType(Type type, HashSet`1<Type> processingTypes);
    public static bool CanReturnSameObject(Type type);
}
internal class EasyCaching.InMemory.DeepCloneState : object {
    private MiniDictionary _loops;
    private Object[] _baseFromTo;
    private int _idx;
    public object GetKnownRef(object from);
    public void AddKnownRef(object from, object to);
}
public class EasyCaching.InMemory.DefaultInMemoryCachingProvider : EasyCachingAbstractProvider {
    private IInMemoryCaching _cache;
    private InMemoryOptions _options;
    private ILogger _logger;
    private CacheStats _cacheStats;
    private string _name;
    private ProviderInfo _info;
    public DefaultInMemoryCachingProvider(string name, IEnumerable`1<IInMemoryCaching> cache, InMemoryOptions options, ILoggerFactory loggerFactory);
    public DefaultInMemoryCachingProvider(string name, IEnumerable`1<IInMemoryCaching> cache, InMemoryOptions options, IDistributedLockFactory factory, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("EasyCaching.InMemory.DefaultInMemoryCachingProvider/<BaseGetAsync>d__0`1")]
public virtual Task`1<CacheValue`1<T>> BaseGetAsync(string cacheKey, Func`1<Task`1<T>> dataRetriever, TimeSpan expiration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.InMemory.DefaultInMemoryCachingProvider/<BaseGetAsync>d__1`1")]
public virtual Task`1<CacheValue`1<T>> BaseGetAsync(string cacheKey, CancellationToken cancellationToken);
    public virtual Task`1<int> BaseGetCountAsync(string prefix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyCaching.InMemory.DefaultInMemoryCachingProvider/<BaseGetAsync>d__3")]
public virtual Task`1<object> BaseGetAsync(string cacheKey, Type type, CancellationToken cancellationToken);
    public virtual Task BaseRemoveAsync(string cacheKey, CancellationToken cancellationToken);
    public virtual Task BaseSetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public virtual Task`1<bool> BaseExistsAsync(string cacheKey, CancellationToken cancellationToken);
    public virtual Task BaseRemoveByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public virtual Task BaseRemoveByPatternAsync(string pattern, CancellationToken cancellationToken);
    public virtual Task BaseSetAllAsync(IDictionary`2<string, T> values, TimeSpan expiration, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> BaseGetAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<string>> BaseGetAllKeysByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, CacheValue`1<T>>> BaseGetByPrefixAsync(string prefix, CancellationToken cancellationToken);
    public virtual Task BaseRemoveAllAsync(IEnumerable`1<string> cacheKeys, CancellationToken cancellationToken);
    public virtual Task BaseFlushAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> BaseTrySetAsync(string cacheKey, T cacheValue, TimeSpan expiration, CancellationToken cancellationToken);
    public virtual Task`1<TimeSpan> BaseGetExpirationAsync(string cacheKey, CancellationToken cancellationToken);
    public virtual CacheValue`1<T> BaseGet(string cacheKey, Func`1<T> dataRetriever, TimeSpan expiration);
    public virtual CacheValue`1<T> BaseGet(string cacheKey);
    public virtual void BaseRemove(string cacheKey);
    public virtual void BaseSet(string cacheKey, T cacheValue, TimeSpan expiration);
    public virtual bool BaseExists(string cacheKey);
    public virtual void BaseRemoveByPrefix(string prefix);
    public virtual void BaseRemoveByPattern(string pattern);
    public virtual void BaseSetAll(IDictionary`2<string, T> values, TimeSpan expiration);
    public virtual IDictionary`2<string, CacheValue`1<T>> BaseGetAll(IEnumerable`1<string> cacheKeys);
    public virtual IEnumerable`1<string> BaseGetAllKeysByPrefix(string prefix);
    public virtual IDictionary`2<string, CacheValue`1<T>> BaseGetByPrefix(string prefix);
    public virtual void BaseRemoveAll(IEnumerable`1<string> cacheKeys);
    public virtual int BaseGetCount(string prefix);
    public virtual void BaseFlush();
    public virtual bool BaseTrySet(string cacheKey, T cacheValue, TimeSpan expiration);
    public virtual TimeSpan BaseGetExpiration(string cacheKey);
    public virtual ProviderInfo BaseGetProviderInfo();
    public virtual object BaseGetDatabase();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__24_0(IInMemoryCaching x);
}
internal class EasyCaching.InMemory.DefaultSystemClock : object {
    public static DefaultSystemClock Instance;
    private static DefaultSystemClock();
    public sealed virtual DateTimeOffset UtcNow();
}
public class EasyCaching.InMemory.EvictedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; private set; }
    public EvictedEventArgs(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
}
public interface EasyCaching.InMemory.IInMemoryCaching {
    public string ProviderName { get; }
    public abstract virtual string get_ProviderName();
    public abstract virtual int GetCount(string prefix);
    public abstract virtual CacheValue`1<T> Get(string key);
    public abstract virtual object Get(string key);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> GetByPrefix(string key);
    public abstract virtual bool Add(string key, T value, Nullable`1<TimeSpan> expiresIn);
    public abstract virtual bool Set(string key, T value, Nullable`1<TimeSpan> expiresIn);
    public abstract virtual bool Exists(string key);
    public abstract virtual int RemoveAll(IEnumerable`1<string> keys);
    public abstract virtual bool Remove(string key);
    public abstract virtual int RemoveByPrefix(string prefix);
    public abstract virtual int RemoveByPattern(string searchKey, SearchKeyPattern searchPattern);
    public abstract virtual IEnumerable`1<string> GetAllKeys(string prefix);
    public abstract virtual IDictionary`2<string, CacheValue`1<T>> GetAll(IEnumerable`1<string> keys);
    public abstract virtual int SetAll(IDictionary`2<string, T> values, Nullable`1<TimeSpan> expiresIn);
    public abstract virtual bool Replace(string key, T value, Nullable`1<TimeSpan> expiresIn);
    public abstract virtual void Clear(string prefix);
    public abstract virtual TimeSpan GetExpiration(string key);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Evicted(EventHandler`1<EvictedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Evicted(EventHandler`1<EvictedEventArgs> value);
}
public class EasyCaching.InMemory.InMemoryCaching : object {
    private ConcurrentDictionary`2<string, CacheEntry> _memory;
    private DateTimeOffset _lastExpirationScan;
    private InMemoryCachingOptions _options;
    private string _name;
    private long _cacheSize;
    private static string _UPTOLIMIT_KEY;
    [CompilerGeneratedAttribute]
private EventHandler`1<EvictedEventArgs> Evicted;
    public string ProviderName { get; }
    public InMemoryCaching(string name, InMemoryCachingOptions optionsAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Evicted(EventHandler`1<EvictedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Evicted(EventHandler`1<EvictedEventArgs> value);
    public sealed virtual string get_ProviderName();
    public sealed virtual void Clear(string prefix);
    public sealed virtual int GetCount(string prefix);
    internal void RemoveExpiredKey(string key);
    public sealed virtual CacheValue`1<T> Get(string key);
    public sealed virtual object Get(string key);
    public sealed virtual bool Add(string key, T value, Nullable`1<TimeSpan> expiresIn);
    public sealed virtual bool Set(string key, T value, Nullable`1<TimeSpan> expiresIn);
    private bool SetInternal(CacheEntry entry, bool addOnly);
    public sealed virtual bool Exists(string key);
    public sealed virtual int RemoveAll(IEnumerable`1<string> keys);
    public sealed virtual bool Remove(string key);
    public sealed virtual int RemoveByPrefix(string prefix);
    public sealed virtual int RemoveByPattern(string searchKey, SearchKeyPattern searchPattern);
    public sealed virtual IEnumerable`1<string> GetAllKeys(string prefix);
    private static bool FilterByPattern(string key, string searchKey, SearchKeyPattern searchKeyPattern);
    public sealed virtual IDictionary`2<string, CacheValue`1<T>> GetAll(IEnumerable`1<string> keys);
    public IDictionary`2<string, CacheValue`1<T>> GetAll(string prefix);
    public sealed virtual int SetAll(IDictionary`2<string, T> values, Nullable`1<TimeSpan> expiresIn);
    public sealed virtual bool Replace(string key, T value, Nullable`1<TimeSpan> expiresIn);
    private void StartScanForExpiredItems();
    private void ScanForExpiredItems(InMemoryCaching cache);
    public sealed virtual IDictionary`2<string, CacheValue`1<T>> GetByPrefix(string key);
    public sealed virtual TimeSpan GetExpiration(string key);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <StartScanForExpiredItems>b__31_0(object state);
}
public class EasyCaching.InMemory.InMemoryCachingOptions : object {
    [CompilerGeneratedAttribute]
private int <ExpirationScanFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableReadDeepClone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableWriteDeepClone>k__BackingField;
    public int ExpirationScanFrequency { get; public set; }
    public Nullable`1<int> SizeLimit { get; public set; }
    public bool EnableReadDeepClone { get; public set; }
    public bool EnableWriteDeepClone { get; public set; }
    private InMemoryCachingOptions Microsoft.Extensions.Options.IOptions<EasyCaching.InMemory.InMemoryCachingOptions>.Value { get; }
    [CompilerGeneratedAttribute]
public int get_ExpirationScanFrequency();
    [CompilerGeneratedAttribute]
public void set_ExpirationScanFrequency(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeLimit();
    [CompilerGeneratedAttribute]
public void set_SizeLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableReadDeepClone();
    [CompilerGeneratedAttribute]
public void set_EnableReadDeepClone(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableWriteDeepClone();
    [CompilerGeneratedAttribute]
public void set_EnableWriteDeepClone(bool value);
    private sealed virtual override InMemoryCachingOptions Microsoft.Extensions.Options.IOptions<EasyCaching.InMemory.InMemoryCachingOptions>.get_Value();
}
public class EasyCaching.InMemory.InMemoryOptions : BaseProviderOptions {
    [CompilerGeneratedAttribute]
private InMemoryCachingOptions <DBConfig>k__BackingField;
    public InMemoryCachingOptions DBConfig { get; public set; }
    [CompilerGeneratedAttribute]
public InMemoryCachingOptions get_DBConfig();
    [CompilerGeneratedAttribute]
public void set_DBConfig(InMemoryCachingOptions value);
}
internal class EasyCaching.InMemory.InMemoryOptionsExtension : object {
    private string _name;
    private Action`1<InMemoryOptions> configure;
    public InMemoryOptionsExtension(string name, Action`1<InMemoryOptions> configure);
    public sealed virtual void AddServices(IServiceCollection services);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private InMemoryCaching <AddServices>b__3_0(IServiceProvider x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private DefaultInMemoryCachingProvider <AddServices>b__3_1(IServiceProvider x);
}
internal interface EasyCaching.InMemory.ISystemClock {
    public abstract virtual DateTimeOffset UtcNow();
}
[ExtensionAttribute]
public static class EasyCaching.InMemory.ObjectExtensions : object {
    [ExtensionAttribute]
public static DateTimeOffset SafeAdd(DateTimeOffset date, TimeSpan value);
}
[ExtensionAttribute]
internal static class EasyCaching.InMemory.ReflectionHelper : object {
    [ExtensionAttribute]
public static MethodInfo GetPrivateMethod(Type t, string methodName);
    [ExtensionAttribute]
public static MethodInfo GetPrivateStaticMethod(Type t, string methodName);
    [ExtensionAttribute]
public static bool IsSubclassOfTypeByName(Type t, string typeName);
}
internal static class EasyCaching.InMemory.SystemClock : object {
    private static ISystemClock _instance;
    public static ISystemClock Instance { get; public set; }
    public static DateTimeOffset UtcNow { get; }
    private static SystemClock();
    public static ISystemClock get_Instance();
    public static void set_Instance(ISystemClock value);
    public static DateTimeOffset get_UtcNow();
}
[ExtensionAttribute]
internal static class EasyCaching.InMemory.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsNullableNumeric(Type type);
}
internal static class EasyCaching.InMemory.TypeHelper : object {
    public static Type ObjectType;
    public static Type StringType;
    public static Type CharType;
    public static Type NullableCharType;
    public static Type DateTimeType;
    public static Type NullableDateTimeType;
    public static Type BoolType;
    public static Type NullableBoolType;
    public static Type ByteArrayType;
    public static Type ByteType;
    public static Type SByteType;
    public static Type SingleType;
    public static Type DecimalType;
    public static Type Int16Type;
    public static Type UInt16Type;
    public static Type Int32Type;
    public static Type UInt32Type;
    public static Type Int64Type;
    public static Type UInt64Type;
    public static Type DoubleType;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeHelper();
    public static Type ResolveType(string fullTypeName, Type expectedBase);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.EasyCachingOptionsExtensions : object {
    [ExtensionAttribute]
public static EasyCachingOptions UseInMemory(EasyCachingOptions options, string name);
    [ExtensionAttribute]
public static EasyCachingOptions UseInMemory(EasyCachingOptions options, Action`1<InMemoryOptions> configure, string name);
    [ExtensionAttribute]
public static EasyCachingOptions UseInMemory(EasyCachingOptions options, IConfiguration configuration, string name, string sectionName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
