internal class EasyNetQ_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string NullGuard;
}
public class EasyNetQ.AdvancedBusEventHandlers : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ConnectedEventArgs> <Connected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> <Disconnected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BlockedEventArgs> <Blocked>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<UnblockedEventArgs> <Unblocked>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MessageReturnedEventArgs> <MessageReturned>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<ConnectedEventArgs> Connected { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<DisconnectedEventArgs> Disconnected { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<BlockedEventArgs> Blocked { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<UnblockedEventArgs> Unblocked { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<MessageReturnedEventArgs> MessageReturned { get; }
    public AdvancedBusEventHandlers(EventHandler`1<ConnectedEventArgs> connected, EventHandler`1<DisconnectedEventArgs> disconnected, EventHandler`1<BlockedEventArgs> blocked, EventHandler`1<UnblockedEventArgs> unblocked, EventHandler`1<MessageReturnedEventArgs> messageReturned);
    [CompilerGeneratedAttribute]
public EventHandler`1<ConnectedEventArgs> get_Connected();
    [CompilerGeneratedAttribute]
public EventHandler`1<DisconnectedEventArgs> get_Disconnected();
    [CompilerGeneratedAttribute]
public EventHandler`1<BlockedEventArgs> get_Blocked();
    [CompilerGeneratedAttribute]
public EventHandler`1<UnblockedEventArgs> get_Unblocked();
    [CompilerGeneratedAttribute]
public EventHandler`1<MessageReturnedEventArgs> get_MessageReturned();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.AdvancedBusExtensions : object {
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`2<IMessage`1<T>, MessageReceivedInfo> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`2<IMessage`1<T>, MessageReceivedInfo> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`3<IMessage`1<T>, MessageReceivedInfo, Task> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`3<IMessage`1<T>, MessageReceivedInfo, Task> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`4<IMessage`1<T>, MessageReceivedInfo, CancellationToken, Task> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, IMessageHandler`1<T> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`1<IHandlerRegistration> addHandlers);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`1<IHandlerRegistration> addHandlers, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`3<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Action`3<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`4<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, Task> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`4<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, Task`1<AckStrategy>> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`4<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, Task> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`4<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, Task`1<AckStrategy>> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, MessageHandler handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`5<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, CancellationToken, Task> handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, Func`5<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, CancellationToken, Task> handler);
    [ExtensionAttribute]
public static IDisposable Consume(IAdvancedBus bus, Queue queue, MessageHandler handler, Action`1<ISimpleConsumeConfiguration> configure);
    [ExtensionAttribute]
public static Task`1<Queue> QueueDeclareAsync(IAdvancedBus bus, string queue, Action`1<IQueueDeclareConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Queue QueueDeclare(IAdvancedBus bus, string queue, Action`1<IQueueDeclareConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Exchange> ExchangeDeclareAsync(IAdvancedBus bus, string exchange, Action`1<IExchangeDeclareConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Exchange ExchangeDeclare(IAdvancedBus bus, string exchange, Action`1<IExchangeDeclareConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IAdvancedBus bus, string exchange, string routingKey, Nullable`1<bool> mandatory, IMessage message, CancellationToken cancellationToken);
    public static Task PublishAsync(IAdvancedBus bus, string exchange, string routingKey, Nullable`1<bool> mandatory, MessageProperties properties, ReadOnlyMemory`1<byte> body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IAdvancedBus bus, Exchange& exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, IMessage message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IAdvancedBus bus, Exchange& exchange, string routingKey, Nullable`1<bool> mandatory, MessageProperties& properties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IAdvancedBus bus, Exchange& exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, MessageProperties& properties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IAdvancedBus bus, Exchange& exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, MessageProperties& messageProperties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IAdvancedBus bus, string exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, MessageProperties& messageProperties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IAdvancedBus bus, Exchange& exchange, string routingKey, Nullable`1<bool> mandatory, MessageProperties& messageProperties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IAdvancedBus bus, string exchange, string routingKey, Nullable`1<bool> mandatory, MessageProperties& messageProperties, ReadOnlyMemory`1& body, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static QueueStats GetQueueStats(IAdvancedBus bus, string queue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Queue QueueDeclare(IAdvancedBus bus, string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void QueueDeclarePassive(IAdvancedBus bus, string queue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.AdvancedBusExtensions/<BindAsync>d__35")]
[ExtensionAttribute]
public static Task`1<Binding`1<Queue>> BindAsync(IAdvancedBus bus, Exchange exchange, Queue queue, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.AdvancedBusExtensions/<BindAsync>d__36")]
[ExtensionAttribute]
public static Task`1<Binding`1<Exchange>> BindAsync(IAdvancedBus bus, Exchange source, Exchange destination, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Binding`1<Queue>> BindAsync(IAdvancedBus bus, Exchange source, Queue queue, string routingKey, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Binding`1<Exchange>> BindAsync(IAdvancedBus bus, Exchange source, Exchange destination, string routingKey, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Binding`1<Exchange> Bind(IAdvancedBus bus, Exchange source, Exchange destination, string routingKey, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Binding`1<Exchange> Bind(IAdvancedBus bus, Exchange source, Exchange destination, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Binding`1<Queue> Bind(IAdvancedBus bus, Exchange exchange, Queue queue, string routingKey, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Binding`1<Queue> Bind(IAdvancedBus bus, Exchange exchange, Queue queue, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExchangeDeclarePassive(IAdvancedBus bus, string exchange, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Exchange ExchangeDeclare(IAdvancedBus bus, string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task UnbindAsync(IAdvancedBus bus, Binding`1<Queue> binding, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task UnbindAsync(IAdvancedBus bus, Binding`1<Exchange> binding, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void QueueUnbindAsync(IAdvancedBus bus, string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExchangeUnbindAsync(IAdvancedBus bus, string destinationExchange, string sourceExchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void Unbind(IAdvancedBus bus, Binding`1<Queue> binding, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void Unbind(IAdvancedBus bus, Binding`1<Exchange> binding, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void QueueDelete(IAdvancedBus bus, string queue, bool ifUnused, bool ifEmpty, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void QueuePurge(IAdvancedBus bus, string name, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExchangeDelete(IAdvancedBus bus, Exchange exchange, bool ifUnused, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExchangeDeleteAsync(IAdvancedBus bus, Exchange exchange, bool ifUnused, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.Argument : object {
    public static string QueueType;
    public static string QueueMode;
    public static string Expires;
    public static string MaxPriority;
    public static string MaxLength;
    public static string MaxLengthBytes;
    public static string SingleActiveConsumer;
    public static string DeadLetterExchange;
    public static string DeadLetterRoutingKey;
    public static string MessageTtl;
    public static string QueueMasterLocator;
    public static string DeadLetterStrategy;
    public static string Overflow;
    public static string AlternateExchange;
    public static string DelayedType;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.ArgumentsExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithQueueType(IDictionary`2<string, object> arguments, string queueType);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithQueueMode(IDictionary`2<string, object> arguments, string queueMode);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithExpires(IDictionary`2<string, object> arguments, int expiresMs);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithExpires(IDictionary`2<string, object> arguments, TimeSpan expires);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithMaxPriority(IDictionary`2<string, object> arguments, byte maxPriority);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithMaxLength(IDictionary`2<string, object> arguments, int maxLength);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithMaxLengthBytes(IDictionary`2<string, object> arguments, int maxLengthBytes);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithSingleActiveConsumer(IDictionary`2<string, object> arguments, bool singleActiveConsumer);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithMessageTtl(IDictionary`2<string, object> arguments, int messageTtlMs);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithMessageTtl(IDictionary`2<string, object> arguments, TimeSpan messageTtl);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithDeadLetterExchange(IDictionary`2<string, object> arguments, string deadLetterExchange);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithDeadLetterRoutingKey(IDictionary`2<string, object> arguments, string deadLetterRoutingKey);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithQueueMasterLocator(IDictionary`2<string, object> arguments, string queueMasterLocator);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithDeadLetterStrategy(IDictionary`2<string, object> arguments, string deadLetterStrategy);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithOverflowType(IDictionary`2<string, object> arguments, string overflowType);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithAlternateExchange(IDictionary`2<string, object> arguments, string alternateExchange);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithDelayedType(IDictionary`2<string, object> arguments, string delayedType);
    [ExtensionAttribute]
public static IDictionary`2<string, object> WithArgument(IDictionary`2<string, object> arguments, string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.AutoSubscribe.AutoSubscriber : object {
    private static MethodInfo AutoSubscribeAsyncConsumerMethodInfo;
    private static MethodInfo AutoSubscribeConsumerMethodInfo;
    protected IBus Bus;
    [CompilerGeneratedAttribute]
private string <SubscriptionIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultTopicName>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutoSubscriberMessageDispatcher <AutoSubscriberMessageDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AutoSubscriberConsumerInfo, string> <GenerateSubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ISubscriptionConfiguration> <ConfigureSubscriptionConfiguration>k__BackingField;
    public string SubscriptionIdPrefix { get; }
    public static string DefaultTopicName { get; public set; }
    public IAutoSubscriberMessageDispatcher AutoSubscriberMessageDispatcher { get; public set; }
    protected Func`2<AutoSubscriberConsumerInfo, string> GenerateSubscriptionId { get; public set; }
    protected Action`1<ISubscriptionConfiguration> ConfigureSubscriptionConfiguration { get; public set; }
    public AutoSubscriber(IBus bus, IServiceProvider serviceProvider, string subscriptionIdPrefix);
    private static AutoSubscriber();
    [CompilerGeneratedAttribute]
public string get_SubscriptionIdPrefix();
    [CompilerGeneratedAttribute]
public static string get_DefaultTopicName();
    [CompilerGeneratedAttribute]
public static void set_DefaultTopicName(string value);
    [CompilerGeneratedAttribute]
public IAutoSubscriberMessageDispatcher get_AutoSubscriberMessageDispatcher();
    [CompilerGeneratedAttribute]
public void set_AutoSubscriberMessageDispatcher(IAutoSubscriberMessageDispatcher value);
    [CompilerGeneratedAttribute]
protected Func`2<AutoSubscriberConsumerInfo, string> get_GenerateSubscriptionId();
    [CompilerGeneratedAttribute]
public void set_GenerateSubscriptionId(Func`2<AutoSubscriberConsumerInfo, string> value);
    [CompilerGeneratedAttribute]
protected Action`1<ISubscriptionConfiguration> get_ConfigureSubscriptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_ConfigureSubscriptionConfiguration(Action`1<ISubscriptionConfiguration> value);
    [AsyncStateMachineAttribute("EasyNetQ.AutoSubscribe.AutoSubscriber/<SubscribeAsync>d__23")]
public virtual Task`1<IDisposable> SubscribeAsync(Type[] consumerTypes, CancellationToken cancellationToken);
    protected virtual string DefaultSubscriptionIdGenerator(AutoSubscriberConsumerInfo c);
    private Task`1<SubscriptionResult> AutoSubscribeAsyncConsumerAsync(AutoSubscriberConsumerInfo subscriptionInfo, CancellationToken cancellationToken);
    private Task`1<SubscriptionResult> AutoSubscribeConsumerAsync(AutoSubscriberConsumerInfo subscriptionInfo, CancellationToken cancellationToken);
    private Action`1<ISubscriptionConfiguration> GenerateConfigurationAction(AutoSubscriberConsumerInfo subscriptionInfo);
    private static Action`1<ISubscriptionConfiguration> TopicAttributeInfo(AutoSubscriberConsumerInfo subscriptionInfo);
    private static Action`1<ISubscriptionConfiguration> GenerateConfigurationFromTopics(String[] topics);
    private static String[] GetTopAttributeValues(AutoSubscriberConsumerInfo subscriptionInfo);
    private static Action`1<ISubscriptionConfiguration> AutoSubscriberConsumerInfo(AutoSubscriberConsumerInfo subscriptionInfo);
    private static SubscriptionConfigurationAttribute GetSubscriptionConfigurationAttributeValue(AutoSubscriberConsumerInfo subscriptionInfo);
    protected virtual AutoSubscriberConsumerAttribute GetSubscriptionAttribute(AutoSubscriberConsumerInfo consumerInfo);
    protected virtual IEnumerable`1<AutoSubscriberConsumerInfo> GetSubscriberConsumerInfos(IEnumerable`1<Type> types, Type interfaceType);
    [CompilerGeneratedAttribute]
private Task <AutoSubscribeAsyncConsumerAsync>b__26_0(TMessage m, CancellationToken c);
    [CompilerGeneratedAttribute]
private void <AutoSubscribeConsumerAsync>b__27_0(TMessage m, CancellationToken c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class EasyNetQ.AutoSubscribe.AutoSubscriberConsumerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    public string SubscriptionId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.AutoSubscribe.AutoSubscriberConsumerInfo : object {
    [CompilerGeneratedAttribute]
private Type <ConcreteType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ConsumeMethod>k__BackingField;
    public Type ConcreteType { get; }
    public Type MessageType { get; }
    public MethodInfo ConsumeMethod { get; }
    public AutoSubscriberConsumerInfo(Type concreteType, Type interfaceType, Type messageType);
    [CompilerGeneratedAttribute]
public Type get_ConcreteType();
    [CompilerGeneratedAttribute]
public Type get_MessageType();
    [CompilerGeneratedAttribute]
public MethodInfo get_ConsumeMethod();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.AutoSubscribe.AutoSubscriberExtensions : object {
    [ExtensionAttribute]
public static Task`1<IDisposable> SubscribeAsync(AutoSubscriber autoSubscriber, Assembly[] assemblies, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Subscribe(AutoSubscriber autoSubscriber, Assembly[] assemblies, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Subscribe(AutoSubscriber autoSubscriber, Type[] consumerTypes, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.AutoSubscribe.DefaultAutoSubscriberMessageDispatcher : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <resolver>P;
    public DefaultAutoSubscriberMessageDispatcher(IServiceProvider resolver);
    public sealed virtual void Dispatch(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.AutoSubscribe.DefaultAutoSubscriberMessageDispatcher/<DispatchAsync>d__3`2")]
public sealed virtual Task DispatchAsync(TMessage message, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class EasyNetQ.AutoSubscribe.ForTopicAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    public string Topic { get; public set; }
    public ForTopicAttribute(string topic);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.AutoSubscribe.IAutoSubscriberMessageDispatcher {
    public abstract virtual void Dispatch(TMessage message, CancellationToken cancellationToken);
    public abstract virtual Task DispatchAsync(TMessage message, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.AutoSubscribe.IConsume`1 {
    public abstract virtual void Consume(T message, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.AutoSubscribe.IConsumeAsync`1 {
    public abstract virtual Task ConsumeAsync(T message, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("68")]
public class EasyNetQ.AutoSubscribe.SubscriptionConfigurationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Expires>k__BackingField;
    public bool AutoDelete { get; public set; }
    public int Priority { get; public set; }
    public ushort PrefetchCount { get; public set; }
    public int Expires { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public void set_AutoDelete(bool value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
public void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public int get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.BlockedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public PersistentConnectionType Type { get; }
    public string Reason { get; }
    public BlockedEventArgs(PersistentConnectionType type, string reason);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public string get_Reason();
}
public interface EasyNetQ.ChannelDispatcher.IPersistentChannelDispatcher {
    public abstract virtual ValueTask`1<TResult> InvokeAsync(TChannelAction channelAction, PersistentChannelDispatchOptions options, CancellationToken cancellationToken);
}
public class EasyNetQ.ChannelDispatcher.MultiPersistentChannelDispatcher : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<PersistentChannelDispatchOptions, AsyncQueue`1<IPersistentChannel>> channelsPoolPerOptions;
    [NullableAttribute("1")]
private Func`2<PersistentChannelDispatchOptions, AsyncQueue`1<IPersistentChannel>> channelsPoolFactory;
    [NullableContextAttribute("1")]
public MultiPersistentChannelDispatcher(int channelsCount, IProducerConnection producerConnection, IConsumerConnection consumerConnection, IPersistentChannelFactory channelFactory);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("EasyNetQ.ChannelDispatcher.MultiPersistentChannelDispatcher/<InvokeAsync>d__4`2")]
public sealed virtual ValueTask`1<TResult> InvokeAsync(TChannelAction channelAction, PersistentChannelDispatchOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.ChannelDispatcher.PersistentChannelDispatcherExtensions : object {
    [ExtensionAttribute]
public static ValueTask`1<bool> InvokeAsync(IPersistentChannelDispatcher dispatcher, Action`1<IModel> channelAction, PersistentChannelDispatchOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TResult> InvokeAsync(IPersistentChannelDispatcher dispatcher, Func`2<IModel, TResult> channelAction, PersistentChannelDispatchOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.ChannelDispatcher.PersistentChannelDispatchOptions : object {
    public static PersistentChannelDispatchOptions ProducerTopology;
    public static PersistentChannelDispatchOptions ProducerPublish;
    public static PersistentChannelDispatchOptions ProducerPublishWithConfirms;
    public static PersistentChannelDispatchOptions ConsumerTopology;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PersistentConnectionType <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public string Name { get; }
    public PersistentConnectionType ConnectionType { get; }
    public bool PublisherConfirms { get; }
    private PersistentChannelDispatchOptions(string name, PersistentConnectionType connectionType, bool publisherConfirms);
    private static PersistentChannelDispatchOptions();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_ConnectionType();
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    protected bool Equals(PersistentChannelDispatchOptions other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class EasyNetQ.ChannelDispatcher.SinglePersistentChannelDispatcher : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<PersistentChannelDispatchOptions, IPersistentChannel> channelPerOptions;
    [NullableAttribute("1")]
private Func`2<PersistentChannelDispatchOptions, IPersistentChannel> createChannelFactory;
    [NullableContextAttribute("1")]
public SinglePersistentChannelDispatcher(IProducerConnection producerConnection, IConsumerConnection consumerConnection, IPersistentChannelFactory channelFactory);
    public sealed virtual ValueTask`1<TResult> InvokeAsync(TChannelAction channelAction, PersistentChannelDispatchOptions options, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.ConnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public PersistentConnectionType Type { get; }
    public string Hostname { get; }
    public int Port { get; }
    public ConnectedEventArgs(PersistentConnectionType type, string hostname, int port);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public int get_Port();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.ConnectionConfiguration : object {
    public static int DefaultPort;
    public static int DefaultAmqpsPort;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestedHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ClientProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HostConfiguration> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private SslOption <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistentMessages>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAuthMechanismFactory> <AuthMechanisms>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectIntervalAttempt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MandatoryPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <RequestedChannelMax>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConsumerDispatcherConcurrency>k__BackingField;
    public ushort Port { get; public set; }
    public string VirtualHost { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public TimeSpan RequestedHeartbeat { get; public set; }
    public ushort PrefetchCount { get; public set; }
    public IDictionary`2<string, object> ClientProperties { get; }
    public IList`1<HostConfiguration> Hosts { get; public set; }
    public SslOption Ssl { get; }
    public TimeSpan Timeout { get; public set; }
    public bool PublisherConfirms { get; public set; }
    public bool PersistentMessages { get; public set; }
    [NullableAttribute("2")]
public string Product { get; public set; }
    [NullableAttribute("2")]
public string Platform { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public IList`1<IAuthMechanismFactory> AuthMechanisms { get; public set; }
    public TimeSpan ConnectIntervalAttempt { get; public set; }
    public bool MandatoryPublish { get; public set; }
    public ushort RequestedChannelMax { get; public set; }
    public Nullable`1<int> ConsumerDispatcherConcurrency { get; public set; }
    [CompilerGeneratedAttribute]
public ushort get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(ushort value);
    [CompilerGeneratedAttribute]
public string get_VirtualHost();
    [CompilerGeneratedAttribute]
public void set_VirtualHost(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestedHeartbeat();
    [CompilerGeneratedAttribute]
public void set_RequestedHeartbeat(TimeSpan value);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
public void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ClientProperties();
    [CompilerGeneratedAttribute]
public IList`1<HostConfiguration> get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(IList`1<HostConfiguration> value);
    [CompilerGeneratedAttribute]
public SslOption get_Ssl();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
public void set_PublisherConfirms(bool value);
    [CompilerGeneratedAttribute]
public bool get_PersistentMessages();
    [CompilerGeneratedAttribute]
public void set_PersistentMessages(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Product();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Product(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Platform();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Platform(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<IAuthMechanismFactory> get_AuthMechanisms();
    [CompilerGeneratedAttribute]
public void set_AuthMechanisms(IList`1<IAuthMechanismFactory> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectIntervalAttempt();
    [CompilerGeneratedAttribute]
public void set_ConnectIntervalAttempt(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_MandatoryPublish();
    [CompilerGeneratedAttribute]
public void set_MandatoryPublish(bool value);
    [CompilerGeneratedAttribute]
public ushort get_RequestedChannelMax();
    [CompilerGeneratedAttribute]
public void set_RequestedChannelMax(ushort value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConsumerDispatcherConcurrency();
    [CompilerGeneratedAttribute]
public void set_ConsumerDispatcherConcurrency(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.ConnectionConfigurationExtensions : object {
    [ExtensionAttribute]
public static void SetDefaultProperties(ConnectionConfiguration configuration);
    private static void AddValueIfNotExists(IDictionary`2<string, object> clientProperties, string name, string value);
    private static string GetApplicationVersion();
    private static string GetPlatform();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.ConnectionString.AmqpConnectionStringParser : object {
    private static IReadOnlyCollection`1<string> SupportedSchemes;
    private static List`1<Func`3<ConnectionConfiguration, Dictionary`2<string, string>, ConnectionConfiguration>> Parsers;
    private static AmqpConnectionStringParser();
    public sealed virtual ConnectionConfiguration Parse(string connectionString);
    private static Func`3<ConnectionConfiguration, Dictionary`2<string, string>, ConnectionConfiguration> BuildKeyValueParser(string keyName, Func`2<string, T> valueParser, Expression`1<Func`2<ConnectionConfiguration, T>> getter);
    private static Action`2<ConnectionConfiguration, T> CreateSetter(Expression`1<Func`2<ConnectionConfiguration, T>> getter);
    private static Action`2<TContaining, TProperty> CreateSetter(Expression`1<Func`2<TContaining, TProperty>> getter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.ConnectionString.CompositeConnectionStringParser : object {
    private AmqpConnectionStringParser amqpConnectionStringParser;
    private ConnectionStringParser connectionStringParser;
    public CompositeConnectionStringParser(AmqpConnectionStringParser amqpConnectionStringParser, ConnectionStringParser connectionStringParser);
    public sealed virtual ConnectionConfiguration Parse(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.ConnectionString.ConnectionStringGrammar : object {
    internal static Parser`1<string> Text;
    internal static Parser`1<ushort> UShortNumber;
    internal static Parser`1<Nullable`1<int>> NullableIntNumber;
    internal static Parser`1<string> MinusOne;
    internal static Parser`1<TimeSpan> TimeSpanSeconds;
    internal static Parser`1<bool> Bool;
    internal static Parser`1<HostConfiguration> Host;
    internal static Parser`1<IList`1<HostConfiguration>> Hosts;
    internal static Parser`1<Func`2<ConnectionConfiguration, ConnectionConfiguration>> Part;
    internal static Parser`1<IEnumerable`1<Func`2<ConnectionConfiguration, ConnectionConfiguration>>> ConnectionStringBuilder;
    private static ConnectionStringGrammar();
    public static IEnumerable`1<Func`2<ConnectionConfiguration, ConnectionConfiguration>> ParseConnectionString(string connectionString);
    private static Parser`1<Func`2<ConnectionConfiguration, ConnectionConfiguration>> BuildKeyValueParser(string keyName, Parser`1<T> valueParser, Expression`1<Func`2<ConnectionConfiguration, T>> getter);
    private static Action`2<ConnectionConfiguration, T> CreateSetter(Expression`1<Func`2<ConnectionConfiguration, T>> getter);
    private static Action`2<TContaining, TProperty> CreateSetter(Expression`1<Func`2<TContaining, TProperty>> getter);
    [IteratorStateMachineAttribute("EasyNetQ.ConnectionString.ConnectionStringGrammar/<Cons>d__14`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> Cons(T head, IEnumerable`1<T> rest);
    [ExtensionAttribute]
private static Parser`1<IEnumerable`1<T>> ListDelimitedBy(Parser`1<T> parser, char delimiter);
}
public class EasyNetQ.ConnectionString.ConnectionStringParser : object {
    [NullableContextAttribute("1")]
public sealed virtual ConnectionConfiguration Parse(string connectionString);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ConnectionString.IConnectionStringParser {
    public abstract virtual ConnectionConfiguration Parse(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.ConsumeConfiguration : object {
    private IHandlerCollectionFactory handlerCollectionFactory;
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`3<Queue, MessageHandler, PerQueueConsumeConfiguration>> <PerQueueConsumeConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`3<Queue, IHandlerCollection, PerQueueConsumeConfiguration>> <PerQueueTypedConsumeConfigurations>k__BackingField;
    public ushort PrefetchCount { get; private set; }
    public List`1<Tuple`3<Queue, MessageHandler, PerQueueConsumeConfiguration>> PerQueueConsumeConfigurations { get; }
    public List`1<Tuple`3<Queue, IHandlerCollection, PerQueueConsumeConfiguration>> PerQueueTypedConsumeConfigurations { get; }
    public ConsumeConfiguration(ushort defaultPrefetchCount, IHandlerCollectionFactory handlerCollectionFactory);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
private void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`3<Queue, MessageHandler, PerQueueConsumeConfiguration>> get_PerQueueConsumeConfigurations();
    [CompilerGeneratedAttribute]
public List`1<Tuple`3<Queue, IHandlerCollection, PerQueueConsumeConfiguration>> get_PerQueueTypedConsumeConfigurations();
    public sealed virtual IConsumeConfiguration WithPrefetchCount(ushort prefetchCount);
    public IConsumeConfiguration ForQueue(Queue& queue, MessageHandler handler, Action`1<IPerQueueConsumeConfiguration> configure);
    public IConsumeConfiguration ForQueue(Queue& queue, Action`1<IHandlerRegistration> register, Action`1<IPerQueueConsumeConfiguration> configure);
    private sealed virtual override IConsumeConfiguration EasyNetQ.IConsumeConfiguration.ForQueue(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, MessageHandler handler, Action`1<IPerQueueConsumeConfiguration> configure);
    private sealed virtual override IConsumeConfiguration EasyNetQ.IConsumeConfiguration.ForQueue(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, Action`1<IHandlerRegistration> register, Action`1<IPerQueueConsumeConfiguration> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.ConsumeConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, MessageHandler handler);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Func`5<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, CancellationToken, Task> handler);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Func`5<ReadOnlyMemory`1<byte>, MessageProperties, MessageReceivedInfo, CancellationToken, Task> handler, Action`1<IPerQueueConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, IMessageHandler`1<T> handler);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, IMessageHandler`1<T> handler, Action`1<IPerQueueConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Func`4<IMessage`1<T>, MessageReceivedInfo, CancellationToken, Task> handler);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Func`4<IMessage`1<T>, MessageReceivedInfo, CancellationToken, Task> handler, Action`1<IPerQueueConsumeConfiguration> configure);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Action`2<IMessage`1<T>, MessageReceivedInfo> handler);
    [ExtensionAttribute]
public static IConsumeConfiguration ForQueue(IConsumeConfiguration configuration, Queue& queue, Action`2<IMessage`1<T>, MessageReceivedInfo> handler, Action`1<IPerQueueConsumeConfiguration> configure);
}
[IsReadOnlyAttribute]
public class EasyNetQ.ConsumedMessage : ValueType {
    [CompilerGeneratedAttribute]
private MessageReceivedInfo <ReceivedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    public MessageReceivedInfo ReceivedInfo { get; public set; }
    public MessageProperties Properties { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public ConsumedMessage(MessageReceivedInfo& ReceivedInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body);
    [CompilerGeneratedAttribute]
public MessageReceivedInfo get_ReceivedInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReceivedInfo(MessageReceivedInfo value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConsumedMessage left, ConsumedMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConsumedMessage left, ConsumedMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConsumedMessage other);
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageReceivedInfo& ReceivedInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.Consumer.AckStrategies : object {
    public static AckStrategy Ack;
    public static AckStrategy NackWithoutRequeue;
    public static AckStrategy NackWithRequeue;
    private static AckStrategies();
}
public class EasyNetQ.Consumer.AckStrategy : MulticastDelegate {
    public AckStrategy(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual AckResult Invoke(IModel model, ulong deliveryTag);
    public virtual IAsyncResult BeginInvoke(IModel model, ulong deliveryTag, AsyncCallback callback, object object);
    public virtual AckResult EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.Consumer.AsyncBasicConsumer : AsyncDefaultBasicConsumer {
    private CancellationTokenSource cts;
    private IEventBus eventBus;
    private ConsumeDelegate consumeDelegate;
    private IServiceProvider serviceResolver;
    private ILogger logger;
    private Queue queue;
    private bool autoAck;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    public Queue Queue { get; }
    public AsyncBasicConsumer(IServiceProvider serviceResolver, ILogger logger, IModel model, Queue queue, bool autoAck, IEventBus eventBus, ConsumeDelegate consumeDelegate);
    public Queue get_Queue();
    [AsyncStateMachineAttribute("EasyNetQ.Consumer.AsyncBasicConsumer/<OnCancel>d__11")]
public virtual Task OnCancel(String[] consumerTags);
    [AsyncStateMachineAttribute("EasyNetQ.Consumer.AsyncBasicConsumer/<HandleBasicDeliver>d__12")]
public virtual Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    public sealed virtual void Dispose();
    private AckResult Ack(AckStrategy ackStrategy, MessageReceivedInfo& receivedInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(String[] consumerTags);
}
public class EasyNetQ.Consumer.Base64ErrorMessageSerializer : object {
    [NullableContextAttribute("1")]
public sealed virtual string Serialize(Byte[] messageBody);
    [NullableContextAttribute("1")]
public sealed virtual Byte[] Deserialize(string messageBody);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Consumer.ConsumeContext : ValueType {
    [CompilerGeneratedAttribute]
private MessageReceivedInfo <ReceivedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IServiceProvider <ServiceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public MessageReceivedInfo ReceivedInfo { get; public set; }
    public MessageProperties Properties { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    [NullableAttribute("1")]
public IServiceProvider ServiceResolver { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public ConsumeContext(MessageReceivedInfo& ReceivedInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body, IServiceProvider& ServiceResolver, CancellationToken& CancellationToken);
    [CompilerGeneratedAttribute]
public MessageReceivedInfo get_ReceivedInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReceivedInfo(MessageReceivedInfo value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IServiceProvider get_ServiceResolver();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServiceResolver(IServiceProvider value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConsumeContext left, ConsumeContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConsumeContext left, ConsumeContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConsumeContext other);
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageReceivedInfo& ReceivedInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body, IServiceProvider& ServiceResolver, CancellationToken& CancellationToken);
}
public class EasyNetQ.Consumer.ConsumeDelegate : MulticastDelegate {
    public ConsumeDelegate(object object, IntPtr method);
    public virtual ValueTask`1<AckStrategy> Invoke(ConsumeContext context);
    public virtual IAsyncResult BeginInvoke(ConsumeContext context, AsyncCallback callback, object object);
    public virtual ValueTask`1<AckStrategy> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.ConsumePipelineBuilder : object {
    private IReadOnlyList`1<Func`2<ConsumeDelegate, ConsumeDelegate>> middlewares;
    private ConsumePipelineBuilder(IReadOnlyList`1<Func`2<ConsumeDelegate, ConsumeDelegate>> middlewares);
    public ConsumePipelineBuilder Use(Func`2<ConsumeDelegate, ConsumeDelegate> middleware);
    public ConsumeDelegate Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.Consumer : object {
    private static TimeSpan RestartConsumingPeriod;
    private ConsumerConfiguration configuration;
    private IEventBus eventBus;
    private IInternalConsumerFactory internalConsumerFactory;
    private IDisposable[] disposables;
    private object mutex;
    [NullableAttribute("2")]
private IInternalConsumer modreq(System.Runtime.CompilerServices.IsVolatile) consumer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    public Consumer(ILogger`1<Consumer> logger, ConsumerConfiguration configuration, IInternalConsumerFactory internalConsumerFactory, IEventBus eventBus);
    private static Consumer();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    public sealed virtual void StartConsuming();
    public sealed virtual void Dispose();
    private void InternalConsumerOnCancelled(object sender, InternalConsumerCancelledEventArgs e);
    private void OnConnectionDisconnected(ConnectionDisconnectedEvent& event);
    private void OnConnectionRecovered(ConnectionRecoveredEvent& event);
    private void RestartConsumingPeriodically();
    private static bool ContainsOnlyFailedExclusiveQueues(InternalConsumerStatus status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.ConsumerConfiguration : object {
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<Queue, PerQueueConsumerConfiguration> <PerQueueConfigurations>k__BackingField;
    public ushort PrefetchCount { get; }
    public IReadOnlyDictionary`2<Queue, PerQueueConsumerConfiguration> PerQueueConfigurations { get; }
    public ConsumerConfiguration(ushort prefetchCount, IReadOnlyDictionary`2<Queue, PerQueueConsumerConfiguration> perQueueConfigurations);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<Queue, PerQueueConsumerConfiguration> get_PerQueueConfigurations();
}
public class EasyNetQ.Consumer.ConsumerConnection : PersistentConnection {
    [NullableContextAttribute("1")]
public ConsumerConnection(ILogger`1<ConsumerConnection> logger, ConnectionConfiguration configuration, IConnectionFactory connectionFactory, IEventBus eventBus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.ConsumerFactory : object {
    private ConcurrentDictionary`2<Guid, IConsumer> consumers;
    private IEventBus eventBus;
    private ILogger`1<Consumer> logger;
    private IInternalConsumerFactory internalConsumerFactory;
    private IDisposable unsubscribeFromStoppedConsumerEvent;
    public ConsumerFactory(ILogger`1<Consumer> logger, IEventBus eventBus, IInternalConsumerFactory internalConsumerFactory);
    public sealed virtual IConsumer CreateConsumer(ConsumerConfiguration configuration);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(StoppedConsumingEvent& event);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.DefaultConsumeErrorStrategy : object {
    private ILogger`1<DefaultConsumeErrorStrategy> logger;
    private IConsumerConnection connection;
    private IConventions conventions;
    private IErrorMessageSerializer errorMessageSerializer;
    private ConcurrentDictionary`2<string, bool> existingErrorExchangesWithQueues;
    private ISerializer serializer;
    private ITypeNameSerializer typeNameSerializer;
    private ConnectionConfiguration configuration;
    public DefaultConsumeErrorStrategy(ILogger`1<DefaultConsumeErrorStrategy> logger, IConsumerConnection connection, ISerializer serializer, IConventions conventions, ITypeNameSerializer typeNameSerializer, IErrorMessageSerializer errorMessageSerializer, ConnectionConfiguration configuration);
    public virtual ValueTask`1<AckStrategy> HandleErrorAsync(ConsumeContext context, Exception exception);
    public virtual ValueTask`1<AckStrategy> HandleCancelledAsync(ConsumeContext context);
    private static void DeclareAndBindErrorExchangeWithErrorQueue(IModel model, string exchangeName, string exchangeType, string queueName, string queueType, string routingKey);
    private string DeclareErrorExchangeWithQueue(IModel model, MessageReceivedInfo receivedInfo);
    private IMemoryOwner`1<byte> CreateErrorMessage(MessageReceivedInfo& receivedInfo, MessageProperties& properties, Byte[] body, Exception exception);
}
public class EasyNetQ.Consumer.DefaultErrorMessageSerializer : object {
    [NullableContextAttribute("1")]
public sealed virtual string Serialize(Byte[] messageBody);
    [NullableContextAttribute("1")]
public sealed virtual Byte[] Deserialize(string messageBody);
}
public class EasyNetQ.Consumer.HandlerCollection : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<Type, IMessageHandler> handlers;
    [CompilerGeneratedAttribute]
private bool <ThrowOnNoMatchingHandler>k__BackingField;
    public bool ThrowOnNoMatchingHandler { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual IHandlerRegistration Add(IMessageHandler`1<T> handler);
    [NullableContextAttribute("1")]
public sealed virtual IMessageHandler GetHandler(Type messageType);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnNoMatchingHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThrowOnNoMatchingHandler(bool value);
}
public class EasyNetQ.Consumer.HandlerCollectionFactory : object {
    [NullableContextAttribute("1")]
public IHandlerCollection CreateHandlerCollection(Queue& queue);
    private sealed virtual override IHandlerCollection EasyNetQ.Consumer.IHandlerCollectionFactory.CreateHandlerCollection(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue);
}
public class EasyNetQ.Consumer.HandlerCollectionPerQueueFactory : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<string, IHandlerCollection> handlerCollections;
    [NullableContextAttribute("1")]
public IHandlerCollection CreateHandlerCollection(Queue& queue);
    private sealed virtual override IHandlerCollection EasyNetQ.Consumer.IHandlerCollectionFactory.CreateHandlerCollection(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.Consumer.HandlerRegistrationExtensions : object {
    [ExtensionAttribute]
public static IHandlerRegistration Add(IHandlerRegistration handlerRegistration, Action`2<IMessage`1<T>, MessageReceivedInfo> handler);
    [ExtensionAttribute]
public static IHandlerRegistration Add(IHandlerRegistration handlerRegistration, Func`3<IMessage`1<T>, MessageReceivedInfo, Task> handler);
    [ExtensionAttribute]
public static IHandlerRegistration Add(IHandlerRegistration handlerRegistration, Func`3<IMessage`1<T>, MessageReceivedInfo, Task`1<AckStrategy>> handler);
    [ExtensionAttribute]
public static IHandlerRegistration Add(IHandlerRegistration handlerRegistration, Func`4<IMessage`1<T>, MessageReceivedInfo, CancellationToken, Task> handler);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Consumer.IConsumeErrorStrategy {
    public abstract virtual ValueTask`1<AckStrategy> HandleErrorAsync(ConsumeContext context, Exception exception);
    public abstract virtual ValueTask`1<AckStrategy> HandleCancelledAsync(ConsumeContext context);
}
public interface EasyNetQ.Consumer.IConsumer {
    public Guid Id { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual void StartConsuming();
}
public interface EasyNetQ.Consumer.IConsumerConnection {
}
public interface EasyNetQ.Consumer.IConsumerFactory {
    [NullableContextAttribute("1")]
public abstract virtual IConsumer CreateConsumer(ConsumerConfiguration configuration);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Consumer.IErrorMessageSerializer {
    public abstract virtual string Serialize(Byte[] messageBody);
    public abstract virtual Byte[] Deserialize(string messageBody);
}
public interface EasyNetQ.Consumer.IHandlerCollection {
    [NullableContextAttribute("1")]
public abstract virtual IMessageHandler GetHandler(Type messageType);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Consumer.IHandlerCollectionFactory {
    public abstract virtual IHandlerCollection CreateHandlerCollection(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Consumer.IHandlerRegistration {
    unknown bool ThrowOnNoMatchingHandler {public set; }
    public abstract virtual IHandlerRegistration Add(IMessageHandler`1<T> handler);
    public abstract virtual void set_ThrowOnNoMatchingHandler(bool value);
}
public interface EasyNetQ.Consumer.IInternalConsumer {
    public abstract virtual InternalConsumerStatus StartConsuming(bool firstStart);
    public abstract virtual void StopConsuming();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancelled(EventHandler`1<InternalConsumerCancelledEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancelled(EventHandler`1<InternalConsumerCancelledEventArgs> value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Consumer.IInternalConsumerFactory {
    public abstract virtual IInternalConsumer CreateConsumer(ConsumerConfiguration configuration);
}
public class EasyNetQ.Consumer.IMessageHandler : MulticastDelegate {
    public IMessageHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<AckStrategy> Invoke(IMessage message, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IMessage message, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<AckStrategy> EndInvoke(IAsyncResult result);
}
public class EasyNetQ.Consumer.IMessageHandler`1 : MulticastDelegate {
    public IMessageHandler`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<AckStrategy> Invoke(IMessage`1<T> message, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IMessage`1<T> message, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<AckStrategy> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.InternalConsumer : object {
    private Dictionary`2<string, AsyncBasicConsumer> consumers;
    private AsyncLock mutex;
    private ConsumerConfiguration configuration;
    private IConsumerConnection connection;
    private IEventBus eventBus;
    private IServiceProvider serviceResolver;
    private ILogger logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    [NullableAttribute("2")]
private IModel model;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<InternalConsumerCancelledEventArgs> Cancelled;
    public InternalConsumer(IServiceProvider serviceResolver, ILogger`1<InternalConsumer> logger, ConsumerConfiguration configuration, IConsumerConnection connection, IEventBus eventBus);
    public sealed virtual InternalConsumerStatus StartConsuming(bool firstStart);
    public sealed virtual void StopConsuming();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Cancelled(EventHandler`1<InternalConsumerCancelledEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Cancelled(EventHandler`1<InternalConsumerCancelledEventArgs> value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("EasyNetQ.Consumer.InternalConsumer/<AsyncBasicConsumerOnConsumerCancelled>d__16")]
private Task AsyncBasicConsumerOnConsumerCancelled(object sender, ConsumerEventArgs event);
    [NullableContextAttribute("2")]
private static bool IsModelClosedWithSoftError(IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.InternalConsumerCancelledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Queue <Cancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Queue> <Active>k__BackingField;
    public Queue Cancelled { get; }
    public IReadOnlyCollection`1<Queue> Active { get; }
    public InternalConsumerCancelledEventArgs(Queue& cancelled, IReadOnlyCollection`1<Queue> active);
    [CompilerGeneratedAttribute]
public Queue get_Cancelled();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Queue> get_Active();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.InternalConsumerFactory : object {
    private IServiceProvider serviceResolver;
    private ILogger`1<InternalConsumer> logger;
    private IConsumerConnection connection;
    private IEventBus eventBus;
    public InternalConsumerFactory(IServiceProvider serviceResolver, ILogger`1<InternalConsumer> logger, IConsumerConnection connection, IEventBus eventBus);
    public sealed virtual IInternalConsumer CreateConsumer(ConsumerConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Consumer.InternalConsumerStatus : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Queue> <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Queue> <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Queue> <Failed>k__BackingField;
    public IReadOnlyCollection`1<Queue> Active { get; }
    public IReadOnlyCollection`1<Queue> Started { get; }
    public IReadOnlyCollection`1<Queue> Failed { get; }
    public InternalConsumerStatus(IReadOnlyCollection`1<Queue> started, IReadOnlyCollection`1<Queue> active, IReadOnlyCollection`1<Queue> failed);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Queue> get_Active();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Queue> get_Started();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Queue> get_Failed();
}
public class EasyNetQ.Consumer.MessageHandler : MulticastDelegate {
    public MessageHandler(object object, IntPtr method);
    public virtual Task`1<AckStrategy> Invoke(ReadOnlyMemory`1<byte> body, MessageProperties properties, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ReadOnlyMemory`1<byte> body, MessageProperties properties, MessageReceivedInfo receivedInfo, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<AckStrategy> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.Consumer.NoopDefaultConsumer : object {
    internal static NoopDefaultConsumer Instance;
    public IModel Model { get; }
    private static NoopDefaultConsumer();
    public sealed virtual IModel get_Model();
    private sealed virtual override void RabbitMQ.Client.IAsyncBasicConsumer.add_ConsumerCancelled(AsyncEventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override void RabbitMQ.Client.IAsyncBasicConsumer.remove_ConsumerCancelled(AsyncEventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.add_ConsumerCancelled(EventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.remove_ConsumerCancelled(EventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.HandleBasicCancel(string consumerTag);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.HandleBasicCancelOk(string consumerTag);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.HandleBasicConsumeOk(string consumerTag);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.HandleModelShutdown(object model, ShutdownEventArgs reason);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancel(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelOk(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicConsumeOk(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleModelShutdown(object model, ShutdownEventArgs reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.PerQueueConsumerConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <AutoAck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsumeDelegate <ConsumeDelegate>k__BackingField;
    public bool AutoAck { get; }
    public string ConsumerTag { get; }
    public bool IsExclusive { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; }
    public ConsumeDelegate ConsumeDelegate { get; }
    public PerQueueConsumerConfiguration(bool autoAck, string consumerTag, bool isExclusive, IDictionary`2<string, object> arguments, ConsumeDelegate consumeDelegate);
    [CompilerGeneratedAttribute]
public bool get_AutoAck();
    [CompilerGeneratedAttribute]
public string get_ConsumerTag();
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public ConsumeDelegate get_ConsumeDelegate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Consumer.SimpleConsumeErrorStrategy : object {
    public static SimpleConsumeErrorStrategy Ack;
    public static SimpleConsumeErrorStrategy NackWithRequeue;
    public static SimpleConsumeErrorStrategy NackWithoutRequeue;
    private AckStrategy errorStrategy;
    private SimpleConsumeErrorStrategy(AckStrategy errorStrategy);
    private static SimpleConsumeErrorStrategy();
    public sealed virtual ValueTask`1<AckStrategy> HandleErrorAsync(ConsumeContext context, Exception exception);
    public sealed virtual ValueTask`1<AckStrategy> HandleCancelledAsync(ConsumeContext context);
}
public class EasyNetQ.ConsumerTagConvention : MulticastDelegate {
    public ConsumerTagConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Conventions : object {
    [CompilerGeneratedAttribute]
private ExchangeNameConvention <ExchangeNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private TopicNameConvention <TopicNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueNameConvention <QueueNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueTypeConvention <QueueTypeConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private RpcRoutingKeyNamingConvention <RpcRoutingKeyNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorQueueNameConvention <ErrorQueueNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorQueueTypeConvention <ErrorQueueTypeConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorExchangeNameConvention <ErrorExchangeNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorExchangeTypeConvention <ErrorExchangeTypeConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private RpcExchangeNameConvention <RpcRequestExchangeNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private RpcExchangeNameConvention <RpcResponseExchangeNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private RpcReturnQueueNamingConvention <RpcReturnQueueNamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsumerTagConvention <ConsumerTagConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorExchangeRoutingKeyConvention <ErrorExchangeRoutingKeyConvention>k__BackingField;
    public ExchangeNameConvention ExchangeNamingConvention { get; public set; }
    public TopicNameConvention TopicNamingConvention { get; public set; }
    public QueueNameConvention QueueNamingConvention { get; public set; }
    public QueueTypeConvention QueueTypeConvention { get; public set; }
    public RpcRoutingKeyNamingConvention RpcRoutingKeyNamingConvention { get; public set; }
    public ErrorQueueNameConvention ErrorQueueNamingConvention { get; public set; }
    public ErrorQueueTypeConvention ErrorQueueTypeConvention { get; public set; }
    public ErrorExchangeNameConvention ErrorExchangeNamingConvention { get; public set; }
    public ErrorExchangeTypeConvention ErrorExchangeTypeConvention { get; public set; }
    public RpcExchangeNameConvention RpcRequestExchangeNamingConvention { get; public set; }
    public RpcExchangeNameConvention RpcResponseExchangeNamingConvention { get; public set; }
    public RpcReturnQueueNamingConvention RpcReturnQueueNamingConvention { get; public set; }
    public ConsumerTagConvention ConsumerTagConvention { get; public set; }
    public ErrorExchangeRoutingKeyConvention ErrorExchangeRoutingKeyConvention { get; public set; }
    public Conventions(ITypeNameSerializer typeNameSerializer);
    private static QueueAttribute GetQueueAttribute(Type messageType);
    private static ExchangeAttribute GetExchangeAttribute(Type messageType);
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeNameConvention get_ExchangeNamingConvention();
    [CompilerGeneratedAttribute]
public void set_ExchangeNamingConvention(ExchangeNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual TopicNameConvention get_TopicNamingConvention();
    [CompilerGeneratedAttribute]
public void set_TopicNamingConvention(TopicNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual QueueNameConvention get_QueueNamingConvention();
    [CompilerGeneratedAttribute]
public void set_QueueNamingConvention(QueueNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual QueueTypeConvention get_QueueTypeConvention();
    [CompilerGeneratedAttribute]
public void set_QueueTypeConvention(QueueTypeConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual RpcRoutingKeyNamingConvention get_RpcRoutingKeyNamingConvention();
    [CompilerGeneratedAttribute]
public void set_RpcRoutingKeyNamingConvention(RpcRoutingKeyNamingConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorQueueNameConvention get_ErrorQueueNamingConvention();
    [CompilerGeneratedAttribute]
public void set_ErrorQueueNamingConvention(ErrorQueueNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorQueueTypeConvention get_ErrorQueueTypeConvention();
    [CompilerGeneratedAttribute]
public void set_ErrorQueueTypeConvention(ErrorQueueTypeConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorExchangeNameConvention get_ErrorExchangeNamingConvention();
    [CompilerGeneratedAttribute]
public void set_ErrorExchangeNamingConvention(ErrorExchangeNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorExchangeTypeConvention get_ErrorExchangeTypeConvention();
    [CompilerGeneratedAttribute]
public void set_ErrorExchangeTypeConvention(ErrorExchangeTypeConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual RpcExchangeNameConvention get_RpcRequestExchangeNamingConvention();
    [CompilerGeneratedAttribute]
public void set_RpcRequestExchangeNamingConvention(RpcExchangeNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual RpcExchangeNameConvention get_RpcResponseExchangeNamingConvention();
    [CompilerGeneratedAttribute]
public void set_RpcResponseExchangeNamingConvention(RpcExchangeNameConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual RpcReturnQueueNamingConvention get_RpcReturnQueueNamingConvention();
    [CompilerGeneratedAttribute]
public void set_RpcReturnQueueNamingConvention(RpcReturnQueueNamingConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ConsumerTagConvention get_ConsumerTagConvention();
    [CompilerGeneratedAttribute]
public void set_ConsumerTagConvention(ConsumerTagConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorExchangeRoutingKeyConvention get_ErrorExchangeRoutingKeyConvention();
    [CompilerGeneratedAttribute]
public void set_ErrorExchangeRoutingKeyConvention(ErrorExchangeRoutingKeyConvention value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DeadLetterExchangeAndMessageTtlScheduler : object {
    private ConnectionConfiguration configuration;
    private IAdvancedBus advancedBus;
    private IConventions conventions;
    private IExchangeDeclareStrategy exchangeDeclareStrategy;
    private IMessageDeliveryModeStrategy messageDeliveryModeStrategy;
    public DeadLetterExchangeAndMessageTtlScheduler(ConnectionConfiguration configuration, IAdvancedBus advancedBus, IConventions conventions, IMessageDeliveryModeStrategy messageDeliveryModeStrategy, IExchangeDeclareStrategy exchangeDeclareStrategy);
    [AsyncStateMachineAttribute("EasyNetQ.DeadLetterExchangeAndMessageTtlScheduler/<FuturePublishAsync>d__6`1")]
public sealed virtual Task FuturePublishAsync(T message, TimeSpan delay, Action`1<IFuturePublishConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.DeadLetterStrategy : object {
    public static string AtMostOnce;
    public static string AtLeastOnce;
}
public class EasyNetQ.DefaultCorrelationIdGenerationStrategy : object {
    [NullableContextAttribute("1")]
public sealed virtual string GetCorrelationId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultExchangeDeclareStrategy : object {
    private IConventions conventions;
    private AsyncCache`2<ExchangeKey, Exchange> declaredExchanges;
    public DefaultExchangeDeclareStrategy(IConventions conventions, IAdvancedBus advancedBus);
    public sealed virtual Task`1<Exchange> DeclareExchangeAsync(string exchangeName, string exchangeType, CancellationToken cancellationToken);
    public sealed virtual Task`1<Exchange> DeclareExchangeAsync(Type messageType, string exchangeType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultMessageSerializationStrategy : object {
    private ITypeNameSerializer typeNameSerializer;
    private ISerializer serializer;
    private ICorrelationIdGenerationStrategy correlationIdGenerator;
    public DefaultMessageSerializationStrategy(ITypeNameSerializer typeNameSerializer, ISerializer serializer, ICorrelationIdGenerationStrategy correlationIdGenerator);
    public sealed virtual SerializedMessage SerializeMessage(IMessage message);
    [NullableContextAttribute("0")]
public IMessage DeserializeMessage(MessageProperties& properties, ReadOnlyMemory`1& body);
    private sealed virtual override IMessage EasyNetQ.IMessageSerializationStrategy.DeserializeMessage(MessageProperties& modreq(System.Runtime.InteropServices.InAttribute) properties, ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) body);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultPubSub : object {
    private IAdvancedBus advancedBus;
    private ConnectionConfiguration configuration;
    private IConventions conventions;
    private IMessageDeliveryModeStrategy messageDeliveryModeStrategy;
    private IExchangeDeclareStrategy exchangeDeclareStrategy;
    public DefaultPubSub(ConnectionConfiguration configuration, IConventions conventions, IExchangeDeclareStrategy exchangeDeclareStrategy, IMessageDeliveryModeStrategy messageDeliveryModeStrategy, IAdvancedBus advancedBus);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultPubSub/<PublishAsync>d__6`1")]
public virtual Task PublishAsync(T message, Action`1<IPublishConfiguration> configure, CancellationToken cancellationToken);
    public virtual Task`1<SubscriptionResult> SubscribeAsync(string subscriptionId, Func`3<T, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultPubSub/<SubscribeAsyncInternal>d__8`1")]
private Task`1<SubscriptionResult> SubscribeAsyncInternal(string subscriptionId, Func`3<T, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultRpc : object {
    protected static string IsFaultedKey;
    protected static string ExceptionMessageKey;
    protected IAdvancedBus advancedBus;
    private ILogger`1<DefaultRpc> logger;
    private ConnectionConfiguration configuration;
    protected IConventions conventions;
    private ICorrelationIdGenerationStrategy correlationIdGenerationStrategy;
    private IDisposable eventSubscription;
    protected IExchangeDeclareStrategy exchangeDeclareStrategy;
    protected IMessageDeliveryModeStrategy messageDeliveryModeStrategy;
    private ConcurrentDictionary`2<string, ResponseAction> responseActions;
    private ConcurrentDictionary`2<RpcKey, ResponseSubscription> responseSubscriptions;
    private AsyncLock responseSubscriptionsLock;
    private ITypeNameSerializer typeNameSerializer;
    public DefaultRpc(ILogger`1<DefaultRpc> logger, ConnectionConfiguration configuration, IAdvancedBus advancedBus, IEventBus eventBus, IConventions conventions, IExchangeDeclareStrategy exchangeDeclareStrategy, IMessageDeliveryModeStrategy messageDeliveryModeStrategy, ITypeNameSerializer typeNameSerializer, ICorrelationIdGenerationStrategy correlationIdGenerationStrategy);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultRpc/<RequestAsync>d__15`2")]
public virtual Task`1<TResponse> RequestAsync(TRequest request, Action`1<IRequestConfiguration> configure, CancellationToken cancellationToken);
    public virtual Task`1<IDisposable> RespondAsync(Func`3<TRequest, CancellationToken, Task`1<TResponse>> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void OnConnectionRecovered(ConnectionRecoveredEvent& event);
    protected void DeRegisterResponseActions(string correlationId);
    protected void RegisterResponseActions(string correlationId, TaskCompletionSource`1<TResponse> tcs);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("EasyNetQ.DefaultRpc/<SubscribeToResponseAsync>d__21`2")]
protected virtual Task`1<string> SubscribeToResponseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultRpc/<RequestPublishAsync>d__22`1")]
protected virtual Task RequestPublishAsync(TRequest request, string routingKey, string returnQueueName, string correlationId, TimeSpan expiration, Nullable`1<byte> priority, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, IDictionary`2<string, object> headers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultRpc/<RespondAsyncInternal>d__23`2")]
private Task`1<IDisposable> RespondAsyncInternal(Func`3<TRequest, CancellationToken, Task`1<TResponse>> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultRpc/<RespondToMessageAsync>d__24`2")]
private Task RespondToMessageAsync(Func`3<TRequest, CancellationToken, Task`1<TResponse>> responder, IMessage`1<TRequest> requestMessage, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <SubscribeToResponseAsync>b__21_0(IMessage`1<TResponse> message, MessageReceivedInfo _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultSendReceive : object {
    private ConnectionConfiguration configuration;
    private IConventions conventions;
    private IAdvancedBus advancedBus;
    private IMessageDeliveryModeStrategy messageDeliveryModeStrategy;
    public DefaultSendReceive(ConnectionConfiguration configuration, IConventions conventions, IAdvancedBus advancedBus, IMessageDeliveryModeStrategy messageDeliveryModeStrategy);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultSendReceive/<SendAsync>d__5`1")]
public sealed virtual Task SendAsync(string queue, T message, Action`1<ISendConfiguration> configure, CancellationToken cancellationToken);
    public sealed virtual Task`1<IDisposable> ReceiveAsync(string queue, Action`1<IReceiveRegistration> addHandlers, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.DefaultSendReceive/<ReceiveInternalAsync>d__7")]
private Task`1<IDisposable> ReceiveInternalAsync(string queueName, Action`1<IReceiveRegistration> addHandlers, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DefaultTypeNameSerializer : object {
    private ConcurrentDictionary`2<Type, string> serializedTypes;
    private ConcurrentDictionary`2<string, Type> deSerializedTypes;
    public sealed virtual string Serialize(Type type);
    public sealed virtual Type Deserialize(string typeName);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    private static TypeNameKey SplitFullyQualifiedTypeName(string fullyQualifiedTypeName);
    private static Type GetTypeFromTypeNameKey(TypeNameKey typeNameKey);
    private static Type GetGenericTypeFromTypeName(string typeName, Assembly assembly);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
}
[ExtensionAttribute]
public static class EasyNetQ.DelayedExchangeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IExchangeDeclareConfiguration AsDelayedExchange(IExchangeDeclareConfiguration configuration, string exchangeType);
    [ExtensionAttribute]
public static MessageProperties WithDelay(MessageProperties& messageProperties, TimeSpan delay);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DelayedExchangeScheduler : object {
    private ConnectionConfiguration configuration;
    private IAdvancedBus advancedBus;
    private IConventions conventions;
    private IMessageDeliveryModeStrategy messageDeliveryModeStrategy;
    public DelayedExchangeScheduler(ConnectionConfiguration configuration, IAdvancedBus advancedBus, IConventions conventions, IMessageDeliveryModeStrategy messageDeliveryModeStrategy);
    [AsyncStateMachineAttribute("EasyNetQ.DelayedExchangeScheduler/<FuturePublishAsync>d__5`1")]
public sealed virtual Task FuturePublishAsync(T message, TimeSpan delay, Action`1<IFuturePublishConfiguration> configure, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("1028")]
public class EasyNetQ.DeliveryModeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsPersistent>k__BackingField;
    public bool IsPersistent { get; }
    public DeliveryModeAttribute(bool isPersistent);
    [CompilerGeneratedAttribute]
public bool get_IsPersistent();
}
internal static class EasyNetQ.DI.ConnectionFactoryFactory : object {
    [NullableContextAttribute("1")]
public static IConnectionFactory CreateConnectionFactory(ConnectionConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.DisconnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public PersistentConnectionType Type { get; }
    public string Hostname { get; }
    public int Port { get; }
    public string Reason { get; }
    public DisconnectedEventArgs(PersistentConnectionType type, string hostname, int port, string reason);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_Reason();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.EasyNetQBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public EasyNetQBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.EasyNetQBuilderExtensions : object {
    [ExtensionAttribute]
public static IEasyNetQBuilder UseMultiChannelClientCommandDispatcher(IEasyNetQBuilder builder, int channelsCount);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseLegacyTypeNaming(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseLegacyRpcConventions(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseLegacyConventions(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseDelayedExchangeScheduler(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseAdvancedMessagePolymorphism(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseVersionedMessage(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseAlwaysAckConsumerErrorStrategy(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseAlwaysNackWithRequeueConsumerErrorStrategy(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static IEasyNetQBuilder UseAlwaysNackWithoutRequeueConsumerErrorStrategy(IEasyNetQBuilder builder);
    [ExtensionAttribute]
public static ProducePipelineBuilder UseProduceInterceptors(ProducePipelineBuilder pipelineBuilder);
    [ExtensionAttribute]
public static ConsumePipelineBuilder UseConsumeInterceptors(ConsumePipelineBuilder pipelineBuilder);
    [ExtensionAttribute]
public static ConsumePipelineBuilder UseScope(ConsumePipelineBuilder pipelineBuilder);
    [ExtensionAttribute]
public static ConsumePipelineBuilder UseConsumeErrorStrategy(ConsumePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.EasyNetQException : Exception {
    [NullableContextAttribute("2")]
public EasyNetQException(string message);
    public EasyNetQException(string format, Object[] args);
    [NullableContextAttribute("2")]
public EasyNetQException(string message, Exception inner);
    protected EasyNetQException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.EasyNetQResponderException : EasyNetQException {
    [NullableContextAttribute("2")]
public EasyNetQResponderException(string message);
    public EasyNetQResponderException(string format, Object[] args);
    [NullableContextAttribute("2")]
public EasyNetQResponderException(string message, Exception inner);
    protected EasyNetQResponderException(SerializationInfo info, StreamingContext context);
}
public class EasyNetQ.ErrorExchangeNameConvention : MulticastDelegate {
    public ErrorExchangeNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(MessageReceivedInfo receivedInfo);
    public virtual IAsyncResult BeginInvoke(MessageReceivedInfo receivedInfo, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.ErrorExchangeRoutingKeyConvention : MulticastDelegate {
    public ErrorExchangeRoutingKeyConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(MessageReceivedInfo receivedInfo);
    public virtual IAsyncResult BeginInvoke(MessageReceivedInfo receivedInfo, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.ErrorExchangeTypeConvention : MulticastDelegate {
    public ErrorExchangeTypeConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.ErrorQueueNameConvention : MulticastDelegate {
    public ErrorQueueNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(MessageReceivedInfo receivedInfo);
    public virtual IAsyncResult BeginInvoke(MessageReceivedInfo receivedInfo, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.ErrorQueueTypeConvention : MulticastDelegate {
    public ErrorQueueTypeConvention(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.EventBus : object {
    [NullableAttribute("1")]
private ILogger`1<EventBus> logger;
    [NullableAttribute("1")]
private ConcurrentDictionary`2<Type, object> subscriptions;
    [NullableAttribute("1")]
private object subscriptionLock;
    [NullableContextAttribute("1")]
public EventBus(ILogger`1<EventBus> logger);
    public void Publish(TEvent& event);
    public sealed virtual IDisposable Subscribe(TEventHandler`1<TEvent> eventHandler);
    private sealed virtual override void EasyNetQ.IEventBus.Publish(TEvent& modreq(System.Runtime.InteropServices.InAttribute) event);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Events.AckEvent : ValueType {
    [CompilerGeneratedAttribute]
private MessageReceivedInfo <ReceiveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private AckResult <AckResult>k__BackingField;
    public MessageReceivedInfo ReceiveInfo { get; public set; }
    public MessageProperties Properties { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public AckResult AckResult { get; public set; }
    public AckEvent(MessageReceivedInfo& ReceiveInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body, AckResult AckResult);
    [CompilerGeneratedAttribute]
public MessageReceivedInfo get_ReceiveInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReceiveInfo(MessageReceivedInfo value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public AckResult get_AckResult();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AckResult(AckResult value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AckEvent left, AckEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AckEvent left, AckEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AckEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageReceivedInfo& ReceiveInfo, MessageProperties& Properties, ReadOnlyMemory`1& Body, AckResult& AckResult);
}
public enum EasyNetQ.Events.AckResult : Enum {
    public int value__;
    public static AckResult Ack;
    public static AckResult Nack;
    public static AckResult Exception;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ChannelRecoveredEvent : ValueType {
    [CompilerGeneratedAttribute]
private IModel <Channel>k__BackingField;
    public IModel Channel { get; public set; }
    public ChannelRecoveredEvent(IModel Channel);
    [CompilerGeneratedAttribute]
public IModel get_Channel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Channel(IModel value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ChannelRecoveredEvent left, ChannelRecoveredEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ChannelRecoveredEvent left, ChannelRecoveredEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ChannelRecoveredEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IModel& Channel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ChannelShutdownEvent : ValueType {
    [CompilerGeneratedAttribute]
private IModel <Channel>k__BackingField;
    public IModel Channel { get; public set; }
    public ChannelShutdownEvent(IModel Channel);
    [CompilerGeneratedAttribute]
public IModel get_Channel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Channel(IModel value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ChannelShutdownEvent left, ChannelShutdownEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ChannelShutdownEvent left, ChannelShutdownEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ChannelShutdownEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IModel& Channel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConnectionBlockedEvent : ValueType {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public PersistentConnectionType Type { get; public set; }
    public string Reason { get; public set; }
    public ConnectionBlockedEvent(PersistentConnectionType Type, string Reason);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionBlockedEvent left, ConnectionBlockedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionBlockedEvent left, ConnectionBlockedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConnectionBlockedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type, String& Reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConnectionCreatedEvent : ValueType {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpTcpEndpoint <Endpoint>k__BackingField;
    public PersistentConnectionType Type { get; public set; }
    public AmqpTcpEndpoint Endpoint { get; public set; }
    public ConnectionCreatedEvent(PersistentConnectionType Type, AmqpTcpEndpoint Endpoint);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public AmqpTcpEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Endpoint(AmqpTcpEndpoint value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionCreatedEvent left, ConnectionCreatedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionCreatedEvent left, ConnectionCreatedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConnectionCreatedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type, AmqpTcpEndpoint& Endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConnectionDisconnectedEvent : ValueType {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpTcpEndpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public PersistentConnectionType Type { get; public set; }
    public AmqpTcpEndpoint Endpoint { get; public set; }
    public string Reason { get; public set; }
    public ConnectionDisconnectedEvent(PersistentConnectionType Type, AmqpTcpEndpoint Endpoint, string Reason);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public AmqpTcpEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Endpoint(AmqpTcpEndpoint value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionDisconnectedEvent left, ConnectionDisconnectedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionDisconnectedEvent left, ConnectionDisconnectedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConnectionDisconnectedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type, AmqpTcpEndpoint& Endpoint, String& Reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConnectionRecoveredEvent : ValueType {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpTcpEndpoint <Endpoint>k__BackingField;
    public PersistentConnectionType Type { get; public set; }
    public AmqpTcpEndpoint Endpoint { get; public set; }
    public ConnectionRecoveredEvent(PersistentConnectionType Type, AmqpTcpEndpoint Endpoint);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public AmqpTcpEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Endpoint(AmqpTcpEndpoint value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionRecoveredEvent left, ConnectionRecoveredEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionRecoveredEvent left, ConnectionRecoveredEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConnectionRecoveredEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type, AmqpTcpEndpoint& Endpoint);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConnectionUnblockedEvent : ValueType {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    public PersistentConnectionType Type { get; public set; }
    public ConnectionUnblockedEvent(PersistentConnectionType Type);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionUnblockedEvent left, ConnectionUnblockedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionUnblockedEvent left, ConnectionUnblockedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConnectionUnblockedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ConsumerModelDisposedEvent : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ConsumerTags>k__BackingField;
    public IReadOnlyCollection`1<string> ConsumerTags { get; public set; }
    public ConsumerModelDisposedEvent(IReadOnlyCollection`1<string> ConsumerTags);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_ConsumerTags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConsumerTags(IReadOnlyCollection`1<string> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConsumerModelDisposedEvent left, ConsumerModelDisposedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConsumerModelDisposedEvent left, ConsumerModelDisposedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ConsumerModelDisposedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyCollection`1& ConsumerTags);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Events.DeliveredMessageEvent : ValueType {
    [CompilerGeneratedAttribute]
private MessageReceivedInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    public MessageReceivedInfo Info { get; public set; }
    public MessageProperties Properties { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public DeliveredMessageEvent(MessageReceivedInfo& Info, MessageProperties& Properties, ReadOnlyMemory`1& Body);
    [CompilerGeneratedAttribute]
public MessageReceivedInfo get_Info();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Info(MessageReceivedInfo value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DeliveredMessageEvent left, DeliveredMessageEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DeliveredMessageEvent left, DeliveredMessageEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DeliveredMessageEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageReceivedInfo& Info, MessageProperties& Properties, ReadOnlyMemory`1& Body);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.MessageConfirmationEvent : ValueType {
    [CompilerGeneratedAttribute]
private IModel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DeliveryTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNack>k__BackingField;
    public IModel Channel { get; public set; }
    public ulong DeliveryTag { get; public set; }
    public bool Multiple { get; public set; }
    public bool IsNack { get; public set; }
    public MessageConfirmationEvent(IModel Channel, ulong DeliveryTag, bool Multiple, bool IsNack);
    [CompilerGeneratedAttribute]
public IModel get_Channel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Channel(IModel value);
    [CompilerGeneratedAttribute]
public ulong get_DeliveryTag();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DeliveryTag(ulong value);
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNack();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNack(bool value);
    public static MessageConfirmationEvent Ack(IModel channel, ulong deliveryTag, bool multiple);
    public static MessageConfirmationEvent Nack(IModel channel, ulong deliveryTag, bool multiple);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MessageConfirmationEvent left, MessageConfirmationEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MessageConfirmationEvent left, MessageConfirmationEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MessageConfirmationEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IModel& Channel, UInt64& DeliveryTag, Boolean& Multiple, Boolean& IsNack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.PublishedMessageEvent : ValueType {
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    public string Exchange { get; public set; }
    public string RoutingKey { get; public set; }
    public MessageProperties Properties { get; public set; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Body { get; public set; }
    public PublishedMessageEvent(string Exchange, string RoutingKey, MessageProperties& Properties, ReadOnlyMemory`1& Body);
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exchange(string value);
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RoutingKey(string value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(PublishedMessageEvent left, PublishedMessageEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(PublishedMessageEvent left, PublishedMessageEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(PublishedMessageEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Exchange, String& RoutingKey, MessageProperties& Properties, ReadOnlyMemory`1& Body);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Events.ReturnedMessageEvent : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IModel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageReturnedInfo <Info>k__BackingField;
    [NullableAttribute("1")]
public IModel Channel { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public MessageProperties Properties { get; public set; }
    public MessageReturnedInfo Info { get; public set; }
    public ReturnedMessageEvent(IModel Channel, ReadOnlyMemory`1& Body, MessageProperties& Properties, MessageReturnedInfo& Info);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IModel get_Channel();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Channel(IModel value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public MessageReturnedInfo get_Info();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Info(MessageReturnedInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ReturnedMessageEvent left, ReturnedMessageEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ReturnedMessageEvent left, ReturnedMessageEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ReturnedMessageEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IModel& Channel, ReadOnlyMemory`1& Body, MessageProperties& Properties, MessageReturnedInfo& Info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.StartConsumingFailedEvent : ValueType {
    [CompilerGeneratedAttribute]
private IConsumer <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue <Queue>k__BackingField;
    public IConsumer Consumer { get; public set; }
    public Queue Queue { get; public set; }
    public StartConsumingFailedEvent(IConsumer Consumer, Queue& Queue);
    [CompilerGeneratedAttribute]
public IConsumer get_Consumer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Consumer(IConsumer value);
    [CompilerGeneratedAttribute]
public Queue get_Queue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Queue(Queue value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(StartConsumingFailedEvent left, StartConsumingFailedEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(StartConsumingFailedEvent left, StartConsumingFailedEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(StartConsumingFailedEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IConsumer& Consumer, Queue& Queue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.StartConsumingSucceededEvent : ValueType {
    [CompilerGeneratedAttribute]
private IConsumer <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue <Queue>k__BackingField;
    public IConsumer Consumer { get; public set; }
    public Queue Queue { get; public set; }
    public StartConsumingSucceededEvent(IConsumer Consumer, Queue& Queue);
    [CompilerGeneratedAttribute]
public IConsumer get_Consumer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Consumer(IConsumer value);
    [CompilerGeneratedAttribute]
public Queue get_Queue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Queue(Queue value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(StartConsumingSucceededEvent left, StartConsumingSucceededEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(StartConsumingSucceededEvent left, StartConsumingSucceededEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(StartConsumingSucceededEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IConsumer& Consumer, Queue& Queue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Events.StoppedConsumingEvent : ValueType {
    [CompilerGeneratedAttribute]
private IConsumer <Consumer>k__BackingField;
    public IConsumer Consumer { get; public set; }
    public StoppedConsumingEvent(IConsumer Consumer);
    [CompilerGeneratedAttribute]
public IConsumer get_Consumer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Consumer(IConsumer value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(StoppedConsumingEvent left, StoppedConsumingEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(StoppedConsumingEvent left, StoppedConsumingEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(StoppedConsumingEvent other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IConsumer& Consumer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class EasyNetQ.ExchangeAttribute : Attribute {
    [NullableAttribute("1")]
internal static ExchangeAttribute Default;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    private static ExchangeAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.ExchangeDeclareConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsDurable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public bool IsDurable { get; private set; }
    public bool IsAutoDelete { get; private set; }
    public string Type { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDurable();
    [CompilerGeneratedAttribute]
private void set_IsDurable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoDelete();
    [CompilerGeneratedAttribute]
private void set_IsAutoDelete(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IDictionary`2<string, object> value);
    public sealed virtual IExchangeDeclareConfiguration AsDurable(bool isDurable);
    public sealed virtual IExchangeDeclareConfiguration AsAutoDelete(bool isAutoDelete);
    public sealed virtual IExchangeDeclareConfiguration WithType(string type);
    public sealed virtual IExchangeDeclareConfiguration WithArgument(string name, object value);
}
[ExtensionAttribute]
public static class EasyNetQ.ExchangeDeclareConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IExchangeDeclareConfiguration WithAlternateExchange(IExchangeDeclareConfiguration configuration, Exchange& alternateExchange);
}
public class EasyNetQ.ExchangeNameConvention : MulticastDelegate {
    public ExchangeNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.ExchangeType : object {
    public static string Direct;
    public static string Topic;
    public static string Fanout;
    public static string Header;
    public static string DelayedMessage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.FuturePublishConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <MessageHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public Nullable`1<byte> Priority { get; private set; }
    public string Topic { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> MessageHeaders { get; private set; }
    public bool PublisherConfirms { get; private set; }
    public FuturePublishConfiguration(string defaultTopic);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
private void set_Topic(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_MessageHeaders();
    [CompilerGeneratedAttribute]
private void set_MessageHeaders(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirms(bool value);
    public sealed virtual IFuturePublishConfiguration WithPriority(byte priority);
    public sealed virtual IFuturePublishConfiguration WithTopic(string topic);
    public sealed virtual IFuturePublishConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public sealed virtual IFuturePublishConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.HostConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private SslOption <Ssl>k__BackingField;
    public string Host { get; }
    public ushort Port { get; public set; }
    public SslOption Ssl { get; }
    public HostConfiguration(string host, ushort port);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public ushort get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(ushort value);
    [CompilerGeneratedAttribute]
public SslOption get_Ssl();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IAdvancedBus {
    [ObsoleteAttribute("IsConnected is deprecated because it is misleading. Please use GetConnectionStatus instead")]
public bool IsConnected { get; }
    public abstract virtual bool get_IsConnected();
    [ObsoleteAttribute("ConnectAsync is deprecated because it is misleading. Please use EnsureConnectedAsync instead")]
public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    public abstract virtual PersistentConnectionStatus GetConnectionStatus(PersistentConnectionType type);
    public abstract virtual Task EnsureConnectedAsync(PersistentConnectionType type, CancellationToken cancellationToken);
    public abstract virtual IDisposable Consume(Action`1<IConsumeConfiguration> configure);
    public abstract virtual Task PublishAsync(string exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, IMessage message, CancellationToken cancellationToken);
    public abstract virtual Task PublishAsync(string exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, MessageProperties properties, ReadOnlyMemory`1<byte> body, CancellationToken cancellationToken);
    public abstract virtual Task`1<Queue> QueueDeclareAsync(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task QueueDeclarePassiveAsync(string queue, CancellationToken cancellationToken);
    public abstract virtual Task QueueDeleteAsync(string queue, bool ifUnused, bool ifEmpty, CancellationToken cancellationToken);
    public abstract virtual Task QueuePurgeAsync(string queue, CancellationToken cancellationToken);
    public abstract virtual Task ExchangeDeclarePassiveAsync(string exchange, CancellationToken cancellationToken);
    public abstract virtual Task`1<Exchange> ExchangeDeclareAsync(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task ExchangeDeleteAsync(string exchange, bool ifUnused, CancellationToken cancellationToken);
    public abstract virtual Task QueueBindAsync(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task QueueUnbindAsync(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task ExchangeBindAsync(string destinationExchange, string sourceExchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task ExchangeUnbindAsync(string destinationExchange, string sourceExchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task`1<QueueStats> GetQueueStatsAsync(string queue, CancellationToken cancellationToken);
    public abstract virtual IPullingConsumer`1<PullResult> CreatePullingConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, bool autoAck);
    [NullableContextAttribute("2")]
public abstract virtual IPullingConsumer`1<PullResult`1<T>> CreatePullingConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, bool autoAck);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Blocked(EventHandler`1<BlockedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Blocked(EventHandler`1<BlockedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Unblocked(EventHandler`1<UnblockedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Unblocked(EventHandler`1<UnblockedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReturned(EventHandler`1<MessageReturnedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReturned(EventHandler`1<MessageReturnedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IBus {
    public IPubSub PubSub { get; }
    public IRpc Rpc { get; }
    public ISendReceive SendReceive { get; }
    public IScheduler Scheduler { get; }
    public IAdvancedBus Advanced { get; }
    public abstract virtual IPubSub get_PubSub();
    public abstract virtual IRpc get_Rpc();
    public abstract virtual ISendReceive get_SendReceive();
    public abstract virtual IScheduler get_Scheduler();
    public abstract virtual IAdvancedBus get_Advanced();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IConsumeConfiguration {
    public abstract virtual IConsumeConfiguration WithPrefetchCount(ushort prefetchCount);
    public abstract virtual IConsumeConfiguration ForQueue(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, MessageHandler handler, Action`1<IPerQueueConsumeConfiguration> configure);
    public abstract virtual IConsumeConfiguration ForQueue(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, Action`1<IHandlerRegistration> register, Action`1<IPerQueueConsumeConfiguration> configure);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IConventions {
    public ExchangeNameConvention ExchangeNamingConvention { get; }
    public TopicNameConvention TopicNamingConvention { get; }
    public QueueNameConvention QueueNamingConvention { get; }
    public QueueTypeConvention QueueTypeConvention { get; }
    public RpcRoutingKeyNamingConvention RpcRoutingKeyNamingConvention { get; }
    public RpcExchangeNameConvention RpcRequestExchangeNamingConvention { get; }
    public RpcExchangeNameConvention RpcResponseExchangeNamingConvention { get; }
    public RpcReturnQueueNamingConvention RpcReturnQueueNamingConvention { get; }
    public ConsumerTagConvention ConsumerTagConvention { get; }
    public ErrorQueueNameConvention ErrorQueueNamingConvention { get; }
    public ErrorQueueTypeConvention ErrorQueueTypeConvention { get; }
    public ErrorExchangeNameConvention ErrorExchangeNamingConvention { get; }
    public ErrorExchangeTypeConvention ErrorExchangeTypeConvention { get; }
    public ErrorExchangeRoutingKeyConvention ErrorExchangeRoutingKeyConvention { get; }
    public abstract virtual ExchangeNameConvention get_ExchangeNamingConvention();
    public abstract virtual TopicNameConvention get_TopicNamingConvention();
    public abstract virtual QueueNameConvention get_QueueNamingConvention();
    public abstract virtual QueueTypeConvention get_QueueTypeConvention();
    public abstract virtual RpcRoutingKeyNamingConvention get_RpcRoutingKeyNamingConvention();
    public abstract virtual RpcExchangeNameConvention get_RpcRequestExchangeNamingConvention();
    public abstract virtual RpcExchangeNameConvention get_RpcResponseExchangeNamingConvention();
    public abstract virtual RpcReturnQueueNamingConvention get_RpcReturnQueueNamingConvention();
    public abstract virtual ConsumerTagConvention get_ConsumerTagConvention();
    public abstract virtual ErrorQueueNameConvention get_ErrorQueueNamingConvention();
    public abstract virtual ErrorQueueTypeConvention get_ErrorQueueTypeConvention();
    public abstract virtual ErrorExchangeNameConvention get_ErrorExchangeNamingConvention();
    public abstract virtual ErrorExchangeTypeConvention get_ErrorExchangeTypeConvention();
    public abstract virtual ErrorExchangeRoutingKeyConvention get_ErrorExchangeRoutingKeyConvention();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ICorrelationIdGenerationStrategy {
    public abstract virtual string GetCorrelationId();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IEasyNetQBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
public interface EasyNetQ.IEventBus {
    public abstract virtual void Publish(TEvent& modreq(System.Runtime.InteropServices.InAttribute) event);
    public abstract virtual IDisposable Subscribe(TEventHandler`1<TEvent> eventHandler);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IExchangeDeclareConfiguration {
    public abstract virtual IExchangeDeclareConfiguration AsDurable(bool isDurable);
    public abstract virtual IExchangeDeclareConfiguration AsAutoDelete(bool isAutoDelete);
    public abstract virtual IExchangeDeclareConfiguration WithType(string type);
    public abstract virtual IExchangeDeclareConfiguration WithArgument(string name, object value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IExchangeDeclareStrategy {
    public abstract virtual Task`1<Exchange> DeclareExchangeAsync(string exchangeName, string exchangeType, CancellationToken cancellationToken);
    public abstract virtual Task`1<Exchange> DeclareExchangeAsync(Type messageType, string exchangeType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IFuturePublishConfiguration {
    public abstract virtual IFuturePublishConfiguration WithPriority(byte priority);
    public abstract virtual IFuturePublishConfiguration WithTopic(string topic);
    public abstract virtual IFuturePublishConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public abstract virtual IFuturePublishConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IMessage {
    public MessageProperties Properties { get; }
    public Type MessageType { get; }
    public abstract virtual MessageProperties get_Properties();
    [NullableContextAttribute("2")]
public abstract virtual object GetBody();
    public abstract virtual Type get_MessageType();
}
[NullableContextAttribute("2")]
public interface EasyNetQ.IMessage`1 {
    public T Body { get; }
    public abstract virtual T get_Body();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IMessageDeliveryModeStrategy {
    public abstract virtual byte GetDeliveryMode(Type messageType);
}
public interface EasyNetQ.IMessageSerializationStrategy {
    [NullableContextAttribute("1")]
public abstract virtual SerializedMessage SerializeMessage(IMessage message);
    public abstract virtual IMessage DeserializeMessage(MessageProperties& modreq(System.Runtime.InteropServices.InAttribute) properties, ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) body);
}
public class EasyNetQ.Interception.CompositeProduceConsumerInterceptor : object {
    [NullableAttribute("1")]
private IProduceConsumeInterceptor[] interceptors;
    [NullableContextAttribute("1")]
public CompositeProduceConsumerInterceptor(IEnumerable`1<IProduceConsumeInterceptor> interceptors);
    public ProducedMessage OnProduce(ProducedMessage& message);
    public ConsumedMessage OnConsume(ConsumedMessage& message);
    private sealed virtual override ProducedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnProduce(ProducedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
    private sealed virtual override ConsumedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnConsume(ConsumedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
}
public class EasyNetQ.Interception.GZipInterceptor : object {
    public ProducedMessage OnProduce(ProducedMessage& message);
    public ConsumedMessage OnConsume(ConsumedMessage& message);
    private sealed virtual override ProducedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnProduce(ProducedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
    private sealed virtual override ConsumedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnConsume(ConsumedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
}
public interface EasyNetQ.Interception.IProduceConsumeInterceptor {
    public abstract virtual ProducedMessage OnProduce(ProducedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
    public abstract virtual ConsumedMessage OnConsume(ConsumedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.Interception.ProduceConsumerInterceptorExtensions : object {
    [ExtensionAttribute]
public static ProducedMessage OnProduce(IProduceConsumeInterceptor[] interceptors, ProducedMessage& message);
    [ExtensionAttribute]
public static ConsumedMessage OnConsume(IProduceConsumeInterceptor[] interceptors, ConsumedMessage& message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Interception.TripleDESInterceptor : object {
    private Byte[] iv;
    private Byte[] key;
    public TripleDESInterceptor(Byte[] key, Byte[] iv);
    public ProducedMessage OnProduce(ProducedMessage& message);
    public ConsumedMessage OnConsume(ConsumedMessage& message);
    private sealed virtual override ProducedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnProduce(ProducedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
    private sealed virtual override ConsumedMessage EasyNetQ.Interception.IProduceConsumeInterceptor.OnConsume(ConsumedMessage& modreq(System.Runtime.InteropServices.InAttribute) message);
}
public class EasyNetQ.Internals.ArrayPooledMemoryStream : Stream {
    [NullableAttribute("1")]
private Byte[] rentBuffer;
    private int length;
    private int position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public Memory`1<byte> Memory { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int offset, int count);
    public sealed virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    private void ReallocateBuffer(int minimumRequired);
    [NullableContextAttribute("1")]
private static void ValidateReadArrayArguments(Byte[] buffer, int offset, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Internals.AsyncCache`2 : object {
    private AsyncLock mutex;
    private ConcurrentDictionary`2<TKey, Task`1<TValue>> storage;
    private Func`3<TKey, CancellationToken, Task`1<TValue>> valueFactory;
    public AsyncCache`2(Func`3<TKey, CancellationToken, Task`1<TValue>> valueFactory);
    public Task`1<TValue> GetOrAddAsync(TKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.Internals.AsyncCache`2/<GetOrAddInternalAsync>d__5")]
private Task`1<TValue> GetOrAddInternalAsync(TKey key, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Internals.AsyncCountdownEvent : object {
    private object mutex;
    private Queue`1<TaskCompletionSource`1<bool>> waiters;
    private long count;
    public AsyncCountdownEvent(long initialCount);
    public sealed virtual void Dispose();
    public void Increment();
    public void Decrement();
    public Task WaitAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Internals.AsyncLock : ValueType {
    private SemaphoreSlim semaphore;
    private Releaser releaser;
    private Task`1<Releaser> releaserTask;
    public Task`1<Releaser> AcquireAsync(CancellationToken cancellationToken);
    public Releaser Acquire(CancellationToken cancellationToken);
    public bool TryAcquire(Releaser& result);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("EasyNetQ.Internals.AsyncLock/<WaitForAcquireAsync>d__9")]
private Task`1<Releaser> WaitForAcquireAsync(Task acquireAsync);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Internals.AsyncQueue`1 : object {
    private Queue`1<T> elements;
    private object mutex;
    private Queue`1<TaskCompletionSource`1<T>> waiters;
    public int Count { get; }
    public AsyncQueue`1(IEnumerable`1<T> collection);
    public int get_Count();
    [NullableContextAttribute("2")]
public bool TryDequeue(T& element);
    public sealed virtual void Dispose();
    public ValueTask`1<T> DequeueAsync(CancellationToken cancellationToken);
    public void Enqueue(T element);
    private void CleanUpCancelledWaiters();
}
[ExtensionAttribute]
public static class EasyNetQ.Internals.CancellationTokenExtensions : object {
    [ExtensionAttribute]
public static ValueCancellationTokenSource WithTimeout(CancellationToken cancellationToken, TimeSpan timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.Internals.ConcurrentDictionaryExtensions : object {
    [ExtensionAttribute]
public static void ClearAndDispose(ConcurrentDictionary`2<TKey, TValue> source);
    [ExtensionAttribute]
public static void ClearAndDispose(ConcurrentDictionary`2<TKey, TValue> source, Action`1<TValue> dispose);
    [ExtensionAttribute]
public static void Remove(ConcurrentDictionary`2<TKey, TValue> source, TKey key);
}
[ExtensionAttribute]
public static class EasyNetQ.Internals.DictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string Stringify(IDictionary`2<string, object> source);
}
public static class EasyNetQ.Internals.DisposableAction : object {
    [NullableContextAttribute("1")]
public static DisposableAction`1<TState> Create(Action`1<TState> action, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Internals.DisposableAction`1 : ValueType {
    private Action`1<TState> action;
    private TState state;
    public DisposableAction`1(Action`1<TState> action, TState state);
    public sealed virtual void Dispose();
}
public class EasyNetQ.Internals.EmptyMemoryOwner : object {
    [NullableAttribute("1")]
public static EmptyMemoryOwner Instance;
    public Memory`1<byte> Memory { get; }
    private static EmptyMemoryOwner();
    public sealed virtual void Dispose();
    public sealed virtual Memory`1<byte> get_Memory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class EasyNetQ.Internals.NumberHelpers : object {
    private static UInt64[] UlongDigitsCountLookup;
    private static NumberHelpers();
    public static int ULongBytesCount(ulong value);
    public static Byte[] FormatULongToBytes(ulong value);
    public static bool TryParseULongFromBytes(Byte[] bytes, UInt64& value);
}
public class EasyNetQ.Internals.ReadOnlyMemoryStream : Stream {
    private ReadOnlyMemory`1<byte> content;
    private int position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyMemoryStream(ReadOnlyMemory`1& content);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int ReadByte();
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual void SetLength(long value);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("1")]
private static void ValidateReadArrayArguments(Byte[] buffer, int offset, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.Internals.ReflectionHelpers : object {
    private static ConcurrentDictionary`2<Type, Dictionary`2<Type, Attribute[]>> TypesAttributes;
    private static ReflectionHelpers();
    private static Dictionary`2<Type, Attribute[]> GetOrAddTypeAttributeDictionary(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TAttribute> GetAttributes(Type type);
    [ExtensionAttribute]
public static TAttribute GetAttribute(Type type);
}
[ExtensionAttribute]
public static class EasyNetQ.Internals.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.Internals.TaskHelpers : object {
    public static Func`3<T1, CancellationToken, Task`1<T2>> FromFunc(Func`3<T1, CancellationToken, T2> func);
    [NullableContextAttribute("2")]
public static Func`5<T1, T2, T3, CancellationToken, Task> FromAction(Action`4<T1, T2, T3, CancellationToken> action);
    public static Func`4<T1, T2, CancellationToken, Task> FromAction(Action`3<T1, T2, CancellationToken> action);
    public static Func`3<T1, CancellationToken, Task> FromAction(Action`2<T1, CancellationToken> action);
    [ExtensionAttribute]
public static void AttachCancellation(TaskCompletionSource`1<T> taskCompletionSource, CancellationToken cancellationToken);
}
public static class EasyNetQ.Internals.Timers : object {
    [NullableContextAttribute("1")]
public static IDisposable Start(Action callback, TimeSpan dueTime, TimeSpan period, ILogger logger);
}
[ExtensionAttribute]
public static class EasyNetQ.Internals.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Dictionary`2<string, string> ParseQuery(Uri uri);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IPerQueueConsumeConfiguration {
    public abstract virtual IPerQueueConsumeConfiguration WithAutoAck();
    public abstract virtual IPerQueueConsumeConfiguration WithConsumerTag(string consumerTag);
    public abstract virtual IPerQueueConsumeConfiguration WithExclusive(bool isExclusive);
    public abstract virtual IPerQueueConsumeConfiguration WithArgument(string name, object value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IPublishConfiguration {
    public abstract virtual IPublishConfiguration WithPriority(byte priority);
    public abstract virtual IPublishConfiguration WithTopic(string topic);
    public abstract virtual IPublishConfiguration WithExpires(TimeSpan expires);
    public abstract virtual IPublishConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public abstract virtual IPublishConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IPubSub {
    public abstract virtual Task PublishAsync(T message, Action`1<IPublishConfiguration> configure, CancellationToken cancellationToken);
    public abstract virtual Task`1<SubscriptionResult> SubscribeAsync(string subscriptionId, Func`3<T, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IPullingConsumer`1 {
    public abstract virtual Task`1<TPullResult> PullAsync(CancellationToken cancellationToken);
    public abstract virtual Task AckAsync(ulong deliveryTag, bool multiple, CancellationToken cancellationToken);
    public abstract virtual Task RejectAsync(ulong deliveryTag, bool multiple, bool requeue, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IPullingConsumerFactory {
    public abstract virtual IPullingConsumer`1<PullResult> CreateConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, PullingConsumerOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
    [NullableContextAttribute("2")]
public abstract virtual IPullingConsumer`1<PullResult`1<T>> CreateConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, PullingConsumerOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
}
public interface EasyNetQ.IPullResult {
    public bool IsAvailable { get; }
    public ulong MessagesCount { get; }
    public MessageReceivedInfo ReceivedInfo { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual ulong get_MessagesCount();
    public abstract virtual MessageReceivedInfo get_ReceivedInfo();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IQueueDeclareConfiguration {
    public abstract virtual IQueueDeclareConfiguration AsDurable(bool isDurable);
    public abstract virtual IQueueDeclareConfiguration AsExclusive(bool isExclusive);
    public abstract virtual IQueueDeclareConfiguration AsAutoDelete(bool isAutoDelete);
    public abstract virtual IQueueDeclareConfiguration WithArgument(string name, object value);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IReceiveConfiguration {
    public abstract virtual IReceiveConfiguration WithAutoDelete(bool autoDelete);
    public abstract virtual IReceiveConfiguration WithDurable(bool durable);
    public abstract virtual IReceiveConfiguration WithPriority(int priority);
    public abstract virtual IReceiveConfiguration WithPrefetchCount(ushort prefetchCount);
    public abstract virtual IReceiveConfiguration WithExpires(int expires);
    public abstract virtual IReceiveConfiguration AsExclusive(bool isExclusive);
    public abstract virtual IReceiveConfiguration WithMaxPriority(byte priority);
    public abstract virtual IReceiveConfiguration WithMaxLength(int maxLength);
    public abstract virtual IReceiveConfiguration WithMaxLengthBytes(int maxLengthBytes);
    public abstract virtual IReceiveConfiguration WithQueueMode(string queueMode);
    public abstract virtual IReceiveConfiguration WithQueueType(string queueType);
    public abstract virtual IReceiveConfiguration WithSingleActiveConsumer(bool singleActiveConsumer);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IReceiveRegistration {
    public abstract virtual IReceiveRegistration Add(Func`3<T, CancellationToken, Task> onMessage);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IRequestConfiguration {
    public abstract virtual IRequestConfiguration WithPriority(byte priority);
    public abstract virtual IRequestConfiguration WithExpiration(TimeSpan expiration);
    public abstract virtual IRequestConfiguration WithQueueName(string queueName);
    public abstract virtual IRequestConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public abstract virtual IRequestConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IResponderConfiguration {
    public abstract virtual IResponderConfiguration WithPrefetchCount(ushort prefetchCount);
    public abstract virtual IResponderConfiguration WithQueueName(string queueName);
    public abstract virtual IResponderConfiguration WithDurable(bool durable);
    public abstract virtual IResponderConfiguration WithExpires(int expires);
    public abstract virtual IResponderConfiguration WithMaxPriority(byte priority);
    public abstract virtual IResponderConfiguration WithQueueType(string queueType);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IRpc {
    public abstract virtual Task`1<TResponse> RequestAsync(TRequest request, Action`1<IRequestConfiguration> configure, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> RespondAsync(Func`3<TRequest, CancellationToken, Task`1<TResponse>> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.IScheduler {
    public abstract virtual Task FuturePublishAsync(T message, TimeSpan delay, Action`1<IFuturePublishConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ISendConfiguration {
    public abstract virtual ISendConfiguration WithPriority(byte priority);
    public abstract virtual ISendConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public abstract virtual ISendConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ISendReceive {
    public abstract virtual Task SendAsync(string queue, T message, Action`1<ISendConfiguration> configure, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> ReceiveAsync(string queue, Action`1<IReceiveRegistration> addHandlers, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ISerializer {
    public abstract virtual IMemoryOwner`1<byte> MessageToBytes(Type messageType, object message);
    public abstract virtual object BytesToMessage(Type messageType, ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ISimpleConsumeConfiguration {
    public abstract virtual ISimpleConsumeConfiguration WithAutoAck();
    public abstract virtual ISimpleConsumeConfiguration WithConsumerTag(string consumerTag);
    public abstract virtual ISimpleConsumeConfiguration WithExclusive(bool isExclusive);
    public abstract virtual ISimpleConsumeConfiguration WithArgument(string name, object value);
    public abstract virtual ISimpleConsumeConfiguration WithPrefetchCount(ushort prefetchCount);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ISubscriptionConfiguration {
    public abstract virtual ISubscriptionConfiguration WithTopic(string topic);
    public abstract virtual ISubscriptionConfiguration WithAutoDelete(bool autoDelete);
    public abstract virtual ISubscriptionConfiguration WithDurable(bool durable);
    public abstract virtual ISubscriptionConfiguration WithPriority(int priority);
    public abstract virtual ISubscriptionConfiguration WithPrefetchCount(ushort prefetchCount);
    public abstract virtual ISubscriptionConfiguration WithExpires(int expires);
    public abstract virtual ISubscriptionConfiguration AsExclusive(bool isExclusive);
    public abstract virtual ISubscriptionConfiguration WithMaxPriority(byte priority);
    public abstract virtual ISubscriptionConfiguration WithQueueName(string queueName);
    public abstract virtual ISubscriptionConfiguration WithMaxLength(int maxLength);
    public abstract virtual ISubscriptionConfiguration WithMaxLengthBytes(int maxLengthBytes);
    public abstract virtual ISubscriptionConfiguration WithQueueMode(string queueMode);
    public abstract virtual ISubscriptionConfiguration WithQueueType(string queueType);
    public abstract virtual ISubscriptionConfiguration WithExchangeType(string exchangeType);
    public abstract virtual ISubscriptionConfiguration WithAlternateExchange(string alternateExchange);
    public abstract virtual ISubscriptionConfiguration WithSingleActiveConsumer(bool singleActiveConsumer);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.ITypeNameSerializer {
    public abstract virtual string Serialize(Type type);
    public abstract virtual Type Deserialize(string typeName);
}
public class EasyNetQ.LegacyRpcConventions : Conventions {
    [NullableContextAttribute("1")]
public LegacyRpcConventions(ITypeNameSerializer typeNameSerializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.LegacyTypeNameSerializer : object {
    private ConcurrentDictionary`2<string, Type> deserializedTypes;
    private ConcurrentDictionary`2<Type, string> serializedTypes;
    public sealed virtual Type Deserialize(string typeName);
    public sealed virtual string Serialize(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EasyNetQ.Message`1 : object {
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Body>k__BackingField;
    public MessageProperties Properties { get; }
    [NullableAttribute("1")]
public Type MessageType { get; }
    public T Body { get; }
    public Message`1(T body);
    public Message`1(T body, MessageProperties& properties);
    [CompilerGeneratedAttribute]
public sealed virtual MessageProperties get_Properties();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_MessageType();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Body();
    public sealed virtual object GetBody();
}
public static class EasyNetQ.MessageDeliveryMode : object {
    public static byte NonPersistent;
    public static byte Persistent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MessageDeliveryModeStrategy : object {
    private ConnectionConfiguration connectionConfiguration;
    public MessageDeliveryModeStrategy(ConnectionConfiguration connectionConfiguration);
    public sealed virtual byte GetDeliveryMode(Type messageType);
    private static byte GetDeliveryModeInternal(bool isPersistent);
}
public static class EasyNetQ.MessageFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, Func`3<object, MessageProperties, IMessage>> InstanceActivators;
    private static MessageFactory();
    [NullableContextAttribute("1")]
public static IMessage CreateInstance(Type messageType, object body, MessageProperties& properties);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.MessageProperties : ValueType {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentEncoding>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DeliveryMode>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterId>k__BackingField;
    public static MessageProperties Empty { get; }
    public string ContentType { get; public set; }
    public string ContentEncoding { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Headers { get; public set; }
    public byte DeliveryMode { get; public set; }
    public byte Priority { get; public set; }
    public string CorrelationId { get; public set; }
    public string ReplyTo { get; public set; }
    public Nullable`1<TimeSpan> Expiration { get; public set; }
    public string MessageId { get; public set; }
    public long Timestamp { get; public set; }
    public string Type { get; public set; }
    public string UserId { get; public set; }
    public string AppId { get; public set; }
    public string ClusterId { get; public set; }
    public bool ContentTypePresent { get; }
    public bool ContentEncodingPresent { get; }
    public bool HeadersPresent { get; }
    public bool DeliveryModePresent { get; }
    public bool PriorityPresent { get; }
    public bool CorrelationIdPresent { get; }
    public bool ReplyToPresent { get; }
    public bool ExpirationPresent { get; }
    public bool MessageIdPresent { get; }
    public bool TimestampPresent { get; }
    public bool TypePresent { get; }
    public bool UserIdPresent { get; }
    public bool AppIdPresent { get; }
    public bool ClusterIdPresent { get; }
    [NullableContextAttribute("1")]
internal MessageProperties(IBasicProperties basicProperties);
    public static MessageProperties get_Empty();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ContentEncoding();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContentEncoding(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Headers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Headers(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public byte get_DeliveryMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DeliveryMode(byte value);
    [CompilerGeneratedAttribute]
public byte get_Priority();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Priority(byte value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Expiration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Expiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MessageId(string value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserId(string value);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AppId(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClusterId(string value);
    public bool get_ContentTypePresent();
    public bool get_ContentEncodingPresent();
    public bool get_HeadersPresent();
    public bool get_DeliveryModePresent();
    public bool get_PriorityPresent();
    public bool get_CorrelationIdPresent();
    public bool get_ReplyToPresent();
    public bool get_ExpirationPresent();
    public bool get_MessageIdPresent();
    public bool get_TimestampPresent();
    public bool get_TypePresent();
    public bool get_UserIdPresent();
    public bool get_AppIdPresent();
    public bool get_ClusterIdPresent();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MessageProperties left, MessageProperties right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MessageProperties left, MessageProperties right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MessageProperties other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.MessagePropertiesExtensions : object {
    internal static string ConfirmationIdHeader;
    [ExtensionAttribute]
public static MessageProperties SetHeader(MessageProperties& source, string key, object value);
    [ExtensionAttribute]
internal static MessageProperties SetConfirmationId(MessageProperties& properties, ulong confirmationId);
    [ExtensionAttribute]
internal static bool TryGetConfirmationId(MessageProperties& properties, UInt64& confirmationId);
    [ExtensionAttribute]
public static void CopyTo(MessageProperties& source, IBasicProperties basicProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.MessageReceivedInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DeliveryTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Redelivered>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Queue>k__BackingField;
    public string ConsumerTag { get; public set; }
    public ulong DeliveryTag { get; public set; }
    public bool Redelivered { get; public set; }
    public string Exchange { get; public set; }
    public string RoutingKey { get; public set; }
    public string Queue { get; public set; }
    public MessageReceivedInfo(string ConsumerTag, ulong DeliveryTag, bool Redelivered, string Exchange, string RoutingKey, string Queue);
    [CompilerGeneratedAttribute]
public string get_ConsumerTag();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConsumerTag(string value);
    [CompilerGeneratedAttribute]
public ulong get_DeliveryTag();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DeliveryTag(ulong value);
    [CompilerGeneratedAttribute]
public bool get_Redelivered();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Redelivered(bool value);
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exchange(string value);
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RoutingKey(string value);
    [CompilerGeneratedAttribute]
public string get_Queue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Queue(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MessageReceivedInfo left, MessageReceivedInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MessageReceivedInfo left, MessageReceivedInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MessageReceivedInfo other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ConsumerTag, UInt64& DeliveryTag, Boolean& Redelivered, String& Exchange, String& RoutingKey, String& Queue);
}
public class EasyNetQ.MessageReturnedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <MessageBody>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <MessageProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageReturnedInfo <MessageReturnedInfo>k__BackingField;
    public ReadOnlyMemory`1<byte> MessageBody { get; }
    public MessageProperties MessageProperties { get; }
    public MessageReturnedInfo MessageReturnedInfo { get; }
    public MessageReturnedEventArgs(ReadOnlyMemory`1& messageBody, MessageProperties& messageProperties, MessageReturnedInfo& messageReturnedInfo);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_MessageBody();
    [CompilerGeneratedAttribute]
public MessageProperties get_MessageProperties();
    [CompilerGeneratedAttribute]
public MessageReturnedInfo get_MessageReturnedInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.MessageReturnedInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnReason>k__BackingField;
    public string Exchange { get; }
    public string RoutingKey { get; }
    public string ReturnReason { get; }
    public MessageReturnedInfo(string exchange, string routingKey, string returnReason);
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public string get_ReturnReason();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.MessageVersioning.ISupersede`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MessageVersioning.MessageTypeProperty : object {
    private static string AlternativeMessageTypesHeaderKey;
    private static string AlternativeMessageTypeSeparator;
    private List`1<string> alternativeTypes;
    private string firstAlternativeMessageType;
    private ITypeNameSerializer typeNameSerializer;
    private MessageTypeProperty(ITypeNameSerializer typeNameSerializer, Type messageType);
    private MessageTypeProperty(ITypeNameSerializer typeNameSerializer, string firstAlternativeMessageType, string alternativeTypesHeader);
    public MessageProperties AppendTo(MessageProperties& messageProperties);
    public Type GetMessageType();
    public static MessageTypeProperty CreateForMessageType(Type messageType, ITypeNameSerializer typeNameSerializer);
    public static MessageTypeProperty ExtractFromProperties(MessageProperties messageProperties, ITypeNameSerializer typeNameSerializer);
    private bool TryDeserializeType(string typeString, Type& messageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MessageVersioning.MessageVersionStack : object {
    private Stack`1<Type> messageVersions;
    public MessageVersionStack(Type messageType);
    public Type Pop();
    public bool IsEmpty();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Type> GetEnumerator();
    private static Stack`1<Type> ExtractMessageVersions(Type type);
    private static Type GetSupersededType(Type type);
    private static IEnumerable`1<Type> FindSupersedes(Type type);
    private static void EnsureVersioningValid(Type messageType, Type supersededType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MessageVersioning.VersionedExchangeDeclareStrategy : object {
    private IAdvancedBus advancedBus;
    private IConventions conventions;
    private AsyncCache`2<ExchangeKey, Exchange> declaredExchanges;
    public VersionedExchangeDeclareStrategy(IConventions conventions, IAdvancedBus advancedBus);
    public sealed virtual Task`1<Exchange> DeclareExchangeAsync(string exchangeName, string exchangeType, CancellationToken cancellationToken);
    public sealed virtual Task`1<Exchange> DeclareExchangeAsync(Type messageType, string exchangeType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.MessageVersioning.VersionedExchangeDeclareStrategy/<DeclareVersionedExchangesAsync>d__6")]
private Task`1<Exchange> DeclareVersionedExchangesAsync(MessageVersionStack messageVersions, string exchangeType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MessageVersioning.VersionedMessageSerializationStrategy : object {
    private ITypeNameSerializer typeNameSerializer;
    private ISerializer serializer;
    private ICorrelationIdGenerationStrategy correlationIdGenerator;
    public VersionedMessageSerializationStrategy(ITypeNameSerializer typeNameSerializer, ISerializer serializer, ICorrelationIdGenerationStrategy correlationIdGenerator);
    public sealed virtual SerializedMessage SerializeMessage(IMessage message);
    [NullableContextAttribute("0")]
public IMessage DeserializeMessage(MessageProperties& properties, ReadOnlyMemory`1& body);
    private sealed virtual override IMessage EasyNetQ.IMessageSerializationStrategy.DeserializeMessage(MessageProperties& modreq(System.Runtime.InteropServices.InAttribute) properties, ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) body);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.MultipleExchange.MultipleExchangeDeclareStrategy : object {
    private IAdvancedBus advancedBus;
    private IConventions conventions;
    private AsyncCache`2<ExchangeKey, Exchange> declaredExchanges;
    public MultipleExchangeDeclareStrategy(IConventions conventions, IAdvancedBus advancedBus);
    [AsyncStateMachineAttribute("EasyNetQ.MultipleExchange.MultipleExchangeDeclareStrategy/<DeclareExchangeAsync>d__4")]
public sealed virtual Task`1<Exchange> DeclareExchangeAsync(Type messageType, string exchangeType, CancellationToken cancellationToken);
    public sealed virtual Task`1<Exchange> DeclareExchangeAsync(string exchangeName, string exchangeType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.NonGenericPubSubExtensions : object {
    private static ConcurrentDictionary`2<Type, Func`6<IPubSub, object, Type, Action`1<IPublishConfiguration>, CancellationToken, Task>> PublishDelegates;
    private static ConcurrentDictionary`2<Type, Func`7<IPubSub, string, Type, Func`4<object, Type, CancellationToken, Task>, Action`1<ISubscriptionConfiguration>, CancellationToken, Task`1<SubscriptionResult>>> SubscribeDelegates;
    private static NonGenericPubSubExtensions();
    [ExtensionAttribute]
public static Task PublishAsync(IPubSub pubSub, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IPubSub pubSub, object message, Type messageType, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IPubSub pubSub, object message, Type messageType, Action`1<IPublishConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, object message, Type messageType, Action`1<IPublishConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, object message, Type messageType, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<SubscriptionResult> SubscribeAsync(IPubSub pubSub, string subscriptionId, Type messageType, Func`4<object, Type, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SubscriptionResult Subscribe(IPubSub pubSub, string subscriptionId, Type messageType, Func`4<object, Type, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.NonGenericRpcExtensions : object {
    private static ConcurrentDictionary`2<Tuple`2<Type, Type>, Func`7<IRpc, object, Type, Type, Action`1<IRequestConfiguration>, CancellationToken, Task`1<object>>> RequestDelegates;
    private static NonGenericRpcExtensions();
    [ExtensionAttribute]
public static Task`1<object> RequestAsync(IRpc rpc, object request, Type requestType, Type responseType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> RequestAsync(IRpc rpc, object request, Type requestType, Type responseType, Action`1<IRequestConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object Request(IRpc rpc, object request, Type requestType, Type responseType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object Request(IRpc rpc, object request, Type requestType, Type responseType, Action`1<IRequestConfiguration> configure, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.NonGenericRpcExtensions/<ToTaskOfObject>d__5`1")]
private static Task`1<object> ToTaskOfObject(Task`1<T> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.NonGenericSchedulerExtensions : object {
    private static ConcurrentDictionary`2<Type, Func`7<IScheduler, object, Type, TimeSpan, Action`1<IFuturePublishConfiguration>, CancellationToken, Task>> FuturePublishDelegates;
    private static NonGenericSchedulerExtensions();
    [ExtensionAttribute]
public static Task FuturePublishAsync(IScheduler scheduler, object message, Type messageType, TimeSpan delay, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void FuturePublish(IScheduler scheduler, object message, Type messageType, TimeSpan delay, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void FuturePublish(IScheduler scheduler, object message, Type messageType, TimeSpan delay, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void FuturePublish(IScheduler scheduler, object message, Type messageType, TimeSpan delay, Action`1<IFuturePublishConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FuturePublishAsync(IScheduler scheduler, object message, Type messageType, TimeSpan delay, Action`1<IFuturePublishConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.NonGenericSendReceiveExtensions : object {
    private static ConcurrentDictionary`2<Type, Func`7<ISendReceive, string, object, Type, Action`1<ISendConfiguration>, CancellationToken, Task>> SendDelegates;
    private static NonGenericSendReceiveExtensions();
    [ExtensionAttribute]
public static Task SendAsync(ISendReceive sendReceive, string queue, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(ISendReceive sendReceive, string queue, object message, Type messageType, Action`1<ISendConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Send(ISendReceive sendReceive, string queue, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Send(ISendReceive sendReceive, string queue, object message, Type messageType, Action`1<ISendConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.OverflowType : object {
    public static string DropHead;
    public static string RejectPublish;
    public static string RejectPublishDlx;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.PerQueueConsumeConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <AutoAck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public bool AutoAck { get; private set; }
    public string ConsumerTag { get; private set; }
    public bool IsExclusive { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_AutoAck();
    [CompilerGeneratedAttribute]
private void set_AutoAck(bool value);
    [CompilerGeneratedAttribute]
public string get_ConsumerTag();
    [CompilerGeneratedAttribute]
private void set_ConsumerTag(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
private void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IDictionary`2<string, object> value);
    public sealed virtual IPerQueueConsumeConfiguration WithConsumerTag(string consumerTag);
    public sealed virtual IPerQueueConsumeConfiguration WithExclusive(bool isExclusive);
    public sealed virtual IPerQueueConsumeConfiguration WithArgument(string name, object value);
    public sealed virtual IPerQueueConsumeConfiguration WithAutoAck();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.PerQueueConsumeConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPerQueueConsumeConfiguration WithPriority(IPerQueueConsumeConfiguration configuration, int priority);
    [ExtensionAttribute]
public static IPerQueueConsumeConfiguration WithArguments(IPerQueueConsumeConfiguration configuration, IDictionary`2<string, object> arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Persistent.ActionBasedPersistentChannelAction : ValueType {
    private Action`1<IModel> action;
    public ActionBasedPersistentChannelAction(Action`1<IModel> action);
    public sealed virtual bool Invoke(IModel model);
}
internal static class EasyNetQ.Persistent.AmqpErrorCodes : object {
    public static ushort ConnectionClosed;
    public static ushort AccessRefused;
    public static ushort NotFound;
    public static ushort ResourceLocked;
    public static ushort PreconditionFailed;
    public static ushort InternalErrors;
}
[ExtensionAttribute]
internal static class EasyNetQ.Persistent.ConnectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void EnsureIsOpen(IConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Persistent.FuncBasedPersistentChannelAction`1 : ValueType {
    private Func`2<IModel, TResult> func;
    public FuncBasedPersistentChannelAction`1(Func`2<IModel, TResult> func);
    public sealed virtual TResult Invoke(IModel model);
}
public interface EasyNetQ.Persistent.IPersistentChannel {
    public abstract virtual ValueTask`1<TResult> InvokeChannelActionAsync(TChannelAction channelAction, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Persistent.IPersistentChannelAction`1 {
    public abstract virtual TResult Invoke(IModel model);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Persistent.IPersistentChannelFactory {
    public abstract virtual IPersistentChannel CreatePersistentChannel(IPersistentConnection connection, PersistentChannelOptions options);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Persistent.IPersistentConnection {
    public PersistentConnectionStatus Status { get; }
    public abstract virtual PersistentConnectionStatus get_Status();
    public abstract virtual void EnsureConnected();
    public abstract virtual IModel CreateModel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Persistent.PersistentChannel : object {
    private static string RequestPipeliningForbiddenMessage;
    private static int MinRetryTimeoutMs;
    private static int MaxRetryTimeoutMs;
    private IPersistentConnection connection;
    private CancellationTokenSource disposeCts;
    private IEventBus eventBus;
    private AsyncLock mutex;
    private PersistentChannelOptions options;
    private ILogger`1<PersistentChannel> logger;
    [NullableAttribute("2")]
private IModel modreq(System.Runtime.CompilerServices.IsVolatile) initializedChannel;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    public PersistentChannel(PersistentChannelOptions& options, ILogger`1<PersistentChannel> logger, IPersistentConnection connection, IEventBus eventBus);
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<TResult> InvokeChannelActionAsync(TChannelAction channelAction, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
private bool TryInvokeChannelActionFast(TChannelAction& channelAction, TResult& result);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("EasyNetQ.Persistent.PersistentChannel/<InvokeChannelActionSlowAsync>d__15`2")]
private Task`1<TResult> InvokeChannelActionSlowAsync(TChannelAction channelAction, CancellationToken cancellationToken);
    private IModel CreateChannel();
    private void CloseChannel();
    private void AttachChannelEvents(IModel channel);
    private void DetachChannelEvents(IModel channel);
    private void OnChannelRecovered(object sender, EventArgs e);
    private void OnChannelShutdown(object sender, ShutdownEventArgs e);
    private void OnReturn(object sender, BasicReturnEventArgs args);
    private void OnAck(object sender, BasicAckEventArgs args);
    private void OnNack(object sender, BasicNackEventArgs args);
    private static ExceptionVerdict GetExceptionVerdict(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.Persistent.PersistentChannelExtensions : object {
    [ExtensionAttribute]
public static void InvokeChannelAction(IPersistentChannel source, Action`1<IModel> channelAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<bool> InvokeChannelActionAsync(IPersistentChannel source, Action`1<IModel> channelAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<TResult> InvokeChannelActionAsync(IPersistentChannel source, Func`2<IModel, TResult> channelAction, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Persistent.PersistentChannelFactory : object {
    private ILogger`1<PersistentChannel> logger;
    private IEventBus eventBus;
    public PersistentChannelFactory(ILogger`1<PersistentChannel> logger, IEventBus eventBus);
    public sealed virtual IPersistentChannel CreatePersistentChannel(IPersistentConnection connection, PersistentChannelOptions options);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Persistent.PersistentChannelOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public bool PublisherConfirms { get; }
    public PersistentChannelOptions(bool publisherConfirms);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Persistent.PersistentConnection : object {
    private object mutex;
    private PersistentConnectionType type;
    private ILogger logger;
    private ConnectionConfiguration configuration;
    private IConnectionFactory connectionFactory;
    private IEventBus eventBus;
    [NullableAttribute("2")]
private IAutorecoveringConnection modreq(System.Runtime.CompilerServices.IsVolatile) initializedConnection;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private PersistentConnectionStatus modreq(System.Runtime.CompilerServices.IsVolatile) status;
    public PersistentConnectionStatus Status { get; }
    public PersistentConnection(PersistentConnectionType type, ILogger`1<IPersistentConnection> logger, ConnectionConfiguration configuration, IConnectionFactory connectionFactory, IEventBus eventBus);
    public sealed virtual PersistentConnectionStatus get_Status();
    public sealed virtual void EnsureConnected();
    public sealed virtual IModel CreateModel();
    public sealed virtual void Dispose();
    private IAutorecoveringConnection InitializeConnection();
    private IAutorecoveringConnection CreateConnection();
    private void DisposeConnection();
    private void OnConnectionRecovered(object sender, EventArgs e);
    private void OnConnectionShutdown(object sender, ShutdownEventArgs e);
    private void OnConnectionBlocked(object sender, ConnectionBlockedEventArgs e);
    private void OnConnectionUnblocked(object sender, EventArgs e);
    private static SslOption NewSslForHost(SslOption option, string host);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private AmqpTcpEndpoint <CreateConnection>b__16_0(HostConfiguration x);
}
public enum EasyNetQ.Persistent.PersistentConnectionState : Enum {
    public int value__;
    public static PersistentConnectionState NotInitialised;
    public static PersistentConnectionState Connected;
    public static PersistentConnectionState Disconnected;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EasyNetQ.Persistent.PersistentConnectionStatus : object {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PersistentConnectionState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ConnectedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureReason>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public PersistentConnectionType Type { get; public set; }
    public PersistentConnectionState State { get; public set; }
    public Nullable`1<DateTime> ConnectedAt { get; public set; }
    public string FailureReason { get; public set; }
    public PersistentConnectionStatus(PersistentConnectionType Type, PersistentConnectionState State, Nullable`1<DateTime> ConnectedAt, string FailureReason);
    [CompilerGeneratedAttribute]
private PersistentConnectionStatus(PersistentConnectionStatus original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(PersistentConnectionType value);
    [CompilerGeneratedAttribute]
public PersistentConnectionState get_State();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_State(PersistentConnectionState value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ConnectedAt();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_FailureReason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FailureReason(string value);
    [NullableContextAttribute("1")]
internal PersistentConnectionStatus ToUnknown();
    [NullableContextAttribute("1")]
internal PersistentConnectionStatus ToConnected();
    [NullableContextAttribute("1")]
internal PersistentConnectionStatus ToDisconnected(string reason);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(PersistentConnectionStatus left, PersistentConnectionStatus right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(PersistentConnectionStatus left, PersistentConnectionStatus right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(PersistentConnectionStatus other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PersistentConnectionStatus <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(PersistentConnectionType& Type, PersistentConnectionState& State, Nullable`1& ConnectedAt, String& FailureReason);
}
public enum EasyNetQ.Persistent.PersistentConnectionType : Enum {
    public int value__;
    public static PersistentConnectionType Producer;
    public static PersistentConnectionType Consumer;
}
[IsReadOnlyAttribute]
public class EasyNetQ.ProducedMessage : ValueType {
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    public MessageProperties Properties { get; public set; }
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public ProducedMessage(MessageProperties& Properties, ReadOnlyMemory`1& Body);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProducedMessage left, ProducedMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProducedMessage left, ProducedMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProducedMessage other);
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageProperties& Properties, ReadOnlyMemory`1& Body);
}
public interface EasyNetQ.Producer.IProducerConnection {
}
public interface EasyNetQ.Producer.IPublishConfirmationListener {
    [NullableContextAttribute("1")]
public abstract virtual IPublishPendingConfirmation CreatePendingConfirmation(IModel model);
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Producer.IPublishPendingConfirmation {
    public ulong Id { get; }
    public abstract virtual ulong get_Id();
    public abstract virtual Task WaitAsync(CancellationToken cancellationToken);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Producer.ProduceContext : ValueType {
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public string Exchange { get; public set; }
    public string RoutingKey { get; public set; }
    public bool Mandatory { get; public set; }
    public bool PublisherConfirms { get; public set; }
    public MessageProperties Properties { get; public set; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Body { get; public set; }
    public IServiceProvider ServiceResolver { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public ProduceContext(String& Exchange, String& RoutingKey, Boolean& Mandatory, Boolean& PublisherConfirms, MessageProperties& Properties, ReadOnlyMemory`1& Body, IServiceProvider& ServiceResolver, CancellationToken& CancellationToken);
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exchange(string value);
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RoutingKey(string value);
    [CompilerGeneratedAttribute]
public bool get_Mandatory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mandatory(bool value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PublisherConfirms(bool value);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(MessageProperties value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceResolver();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServiceResolver(IServiceProvider value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancellationToken(CancellationToken value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProduceContext left, ProduceContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProduceContext left, ProduceContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProduceContext other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Exchange, String& RoutingKey, Boolean& Mandatory, Boolean& PublisherConfirms, MessageProperties& Properties, ReadOnlyMemory`1& Body, IServiceProvider& ServiceResolver, CancellationToken& CancellationToken);
}
public class EasyNetQ.Producer.ProduceDelegate : MulticastDelegate {
    public ProduceDelegate(object object, IntPtr method);
    public virtual ValueTask Invoke(ProduceContext context);
    public virtual IAsyncResult BeginInvoke(ProduceContext context, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Producer.ProducePipelineBuilder : object {
    private IReadOnlyList`1<Func`2<ProduceDelegate, ProduceDelegate>> middlewares;
    private ProducePipelineBuilder(IReadOnlyList`1<Func`2<ProduceDelegate, ProduceDelegate>> middlewares);
    public ProducePipelineBuilder Use(Func`2<ProduceDelegate, ProduceDelegate> middleware);
    public ProduceDelegate Build();
}
public class EasyNetQ.Producer.ProducerConnection : PersistentConnection {
    [NullableContextAttribute("1")]
public ProducerConnection(ILogger`1<ProducerConnection> logger, ConnectionConfiguration configuration, IConnectionFactory connectionFactory, IEventBus eventBus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.Producer.PublishConfirmationListener : object {
    private IDisposable[] subscriptions;
    private ConcurrentDictionary`2<int, ConcurrentDictionary`2<ulong, TaskCompletionSource`1<bool>>> unconfirmedChannelRequests;
    public PublishConfirmationListener(IEventBus eventBus);
    public sealed virtual IPublishPendingConfirmation CreatePendingConfirmation(IModel model);
    public sealed virtual void Dispose();
    private void OnMessageConfirmation(MessageConfirmationEvent& event);
    private void OnChannelRecovered(ChannelRecoveredEvent& event);
    private void OnChannelShutdown(ChannelShutdownEvent& event);
    private void OnReturnedMessage(ReturnedMessageEvent& event);
    private void InterruptUnconfirmedRequests(int channelNumber, bool cancellationInsteadOfInterruption);
    private void InterruptAllUnconfirmedRequests(bool cancellationInsteadOfInterruption);
    private static void Confirm(TaskCompletionSource`1<bool> confirmationTcs, ulong sequenceNumber, ConfirmationType type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EasyNetQ.Producer.PublishInterruptedException : Exception {
    public PublishInterruptedException(string message);
    public PublishInterruptedException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected PublishInterruptedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EasyNetQ.Producer.PublishNackedException : Exception {
    public PublishNackedException(string message);
    public PublishNackedException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected PublishNackedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EasyNetQ.Producer.PublishReturnedException : Exception {
    public PublishReturnedException(string message);
    public PublishReturnedException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected PublishReturnedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.PublishConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Expires>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <MessageHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public Nullable`1<byte> Priority { get; private set; }
    public string Topic { get; private set; }
    public Nullable`1<TimeSpan> Expires { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> MessageHeaders { get; private set; }
    public bool PublisherConfirms { get; private set; }
    public PublishConfiguration(string defaultTopic);
    public sealed virtual IPublishConfiguration WithPriority(byte priority);
    public sealed virtual IPublishConfiguration WithTopic(string topic);
    public sealed virtual IPublishConfiguration WithExpires(TimeSpan expires);
    public sealed virtual IPublishConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public sealed virtual IPublishConfiguration WithPublisherConfirms(bool publisherConfirms);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
private void set_Topic(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Expires();
    [CompilerGeneratedAttribute]
private void set_Expires(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_MessageHeaders();
    [CompilerGeneratedAttribute]
private void set_MessageHeaders(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirms(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.PubSubExtensions : object {
    [ExtensionAttribute]
public static Task PublishAsync(IPubSub pubSub, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishAsync(IPubSub pubSub, T message, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, T message, Action`1<IPublishConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Publish(IPubSub pubSub, T message, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<SubscriptionResult> SubscribeAsync(IPubSub pubSub, string subscriptionId, Action`1<T> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<SubscriptionResult> SubscribeAsync(IPubSub pubSub, string subscriptionId, Action`1<T> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<SubscriptionResult> SubscribeAsync(IPubSub pubSub, string subscriptionId, Func`2<T, Task> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SubscriptionResult Subscribe(IPubSub pubSub, string subscriptionId, Action`1<T> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SubscriptionResult Subscribe(IPubSub pubSub, string subscriptionId, Action`1<T> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SubscriptionResult Subscribe(IPubSub pubSub, string subscriptionId, Func`2<T, Task> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SubscriptionResult Subscribe(IPubSub pubSub, string subscriptionId, Func`3<T, CancellationToken, Task> onMessage, Action`1<ISubscriptionConfiguration> configure, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.PullBatchResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TPullResult> <Messages>k__BackingField;
    public IReadOnlyList`1<TPullResult> Messages { get; }
    public ulong DeliveryTag { get; }
    public PullBatchResult`1(IReadOnlyList`1<TPullResult> messages);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TPullResult> get_Messages();
    public ulong get_DeliveryTag();
    public sealed virtual void Dispose();
}
public class EasyNetQ.PullingConsumer : object {
    [NullableAttribute("1")]
private IPersistentChannel channel;
    [NullableAttribute("1")]
private IProduceConsumeInterceptor[] produceConsumeInterceptors;
    private PullingConsumerOptions options;
    private Queue queue;
    [NullableContextAttribute("1")]
public PullingConsumer(PullingConsumerOptions& options, Queue& queue, IPersistentChannel channel, IProduceConsumeInterceptor[] produceConsumeInterceptors);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("EasyNetQ.PullingConsumer/<PullAsync>d__5")]
public sealed virtual Task`1<PullResult> PullAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("EasyNetQ.PullingConsumer/<AckAsync>d__6")]
public sealed virtual Task AckAsync(ulong deliveryTag, bool multiple, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("EasyNetQ.PullingConsumer/<RejectAsync>d__7")]
public sealed virtual Task RejectAsync(ulong deliveryTag, bool multiple, bool requeue, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.PullingConsumer`1 : object {
    private IPullingConsumer`1<PullResult> consumer;
    private IMessageSerializationStrategy messageSerializationStrategy;
    public PullingConsumer`1(IPullingConsumer`1<PullResult> consumer, IMessageSerializationStrategy messageSerializationStrategy);
    [AsyncStateMachineAttribute("EasyNetQ.PullingConsumer`1/<PullAsync>d__3")]
public sealed virtual Task`1<PullResult`1<T>> PullAsync(CancellationToken cancellationToken);
    public sealed virtual Task AckAsync(ulong deliveryTag, bool multiple, CancellationToken cancellationToken);
    public sealed virtual Task RejectAsync(ulong deliveryTag, bool multiple, bool requeue, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.PullingConsumerExtensions : object {
    [ExtensionAttribute]
public static Task AckAsync(IPullingConsumer`1<TPullResult> consumer, ulong deliveryTag, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RejectAsync(IPullingConsumer`1<TPullResult> consumer, ulong deliveryTag, bool requeue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.PullingConsumerExtensions/<PullBatchAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<PullBatchResult`1<TPullResult>> PullBatchAsync(IPullingConsumer`1<TPullResult> consumer, int batchSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AckBatchAsync(IPullingConsumer`1<TPullResult> consumer, ulong deliveryTag, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RejectBatchAsync(IPullingConsumer`1<TPullResult> consumer, ulong deliveryTag, bool requeue, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.PullingConsumerFactory : object {
    private IConsumerConnection connection;
    private IPersistentChannelFactory channelFactory;
    private IMessageSerializationStrategy messageSerializationStrategy;
    private IProduceConsumeInterceptor[] produceConsumeInterceptors;
    public PullingConsumerFactory(IConsumerConnection connection, IPersistentChannelFactory channelFactory, IEnumerable`1<IProduceConsumeInterceptor> produceConsumeInterceptors, IMessageSerializationStrategy messageSerializationStrategy);
    public IPullingConsumer`1<PullResult> CreateConsumer(Queue& queue, PullingConsumerOptions& options);
    [NullableContextAttribute("2")]
public IPullingConsumer`1<PullResult`1<T>> CreateConsumer(Queue& queue, PullingConsumerOptions& options);
    private sealed virtual override IPullingConsumer`1<PullResult> EasyNetQ.IPullingConsumerFactory.CreateConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, PullingConsumerOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
    private sealed virtual override IPullingConsumer`1<PullResult`1<T>> EasyNetQ.IPullingConsumerFactory.CreateConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, PullingConsumerOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
}
[IsReadOnlyAttribute]
public class EasyNetQ.PullingConsumerOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <AutoAck>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public bool AutoAck { get; }
    public TimeSpan Timeout { get; }
    public PullingConsumerOptions(bool autoAck, TimeSpan timeout);
    [CompilerGeneratedAttribute]
public bool get_AutoAck();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
}
[IsReadOnlyAttribute]
public class EasyNetQ.PullResult : ValueType {
    private MessageReceivedInfo receivedInfo;
    private MessageProperties properties;
    private ReadOnlyMemory`1<byte> body;
    private ulong messagesCount;
    [NullableAttribute("2")]
private IDisposable disposable;
    [CompilerGeneratedAttribute]
private static PullResult <NotAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    public static PullResult NotAvailable { get; }
    public bool IsAvailable { get; }
    public ulong MessagesCount { get; }
    public MessageReceivedInfo ReceivedInfo { get; }
    public MessageProperties Properties { get; }
    public ReadOnlyMemory`1<byte> Body { get; }
    private PullResult(bool isAvailable, ulong messagesCount, MessageReceivedInfo& receivedInfo, MessageProperties& properties, ReadOnlyMemory`1& body, IDisposable disposable);
    private static PullResult();
    [CompilerGeneratedAttribute]
public static PullResult get_NotAvailable();
    public static PullResult Available(ulong messagesCount, MessageReceivedInfo& receivedInfo, MessageProperties& properties, ReadOnlyMemory`1& body, IDisposable disposable);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAvailable();
    public sealed virtual ulong get_MessagesCount();
    public sealed virtual MessageReceivedInfo get_ReceivedInfo();
    public MessageProperties get_Properties();
    public ReadOnlyMemory`1<byte> get_Body();
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class EasyNetQ.PullResult`1 : ValueType {
    private MessageReceivedInfo receivedInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IMessage`1<T> message;
    private ulong messagesCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static PullResult`1<T> <NotAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static PullResult`1<T> NotAvailable { get; }
    public bool IsAvailable { get; }
    public ulong MessagesCount { get; }
    public MessageReceivedInfo ReceivedInfo { get; }
    [NullableAttribute("1")]
public IMessage`1<T> Message { get; }
    private PullResult`1(bool isAvailable, ulong messagesCount, MessageReceivedInfo& receivedInfo, IMessage`1<T> message);
    private static PullResult`1();
    [CompilerGeneratedAttribute]
public static PullResult`1<T> get_NotAvailable();
    [NullableContextAttribute("1")]
public static PullResult`1<T> Available(ulong messagesCount, MessageReceivedInfo receivedInfo, IMessage`1<T> message);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAvailable();
    public sealed virtual ulong get_MessagesCount();
    public sealed virtual MessageReceivedInfo get_ReceivedInfo();
    [NullableContextAttribute("1")]
public IMessage`1<T> get_Message();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class EasyNetQ.QueueAttribute : Attribute {
    [NullableAttribute("1")]
internal static QueueAttribute Default;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    private static QueueAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.QueueDeclareConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsDurable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoDelete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public bool IsDurable { get; private set; }
    public bool IsExclusive { get; private set; }
    public bool IsAutoDelete { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDurable();
    [CompilerGeneratedAttribute]
private void set_IsDurable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
private void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoDelete();
    [CompilerGeneratedAttribute]
private void set_IsAutoDelete(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IDictionary`2<string, object> value);
    public sealed virtual IQueueDeclareConfiguration AsDurable(bool isDurable);
    public sealed virtual IQueueDeclareConfiguration AsExclusive(bool isExclusive);
    public sealed virtual IQueueDeclareConfiguration AsAutoDelete(bool isAutoDelete);
    public sealed virtual IQueueDeclareConfiguration WithArgument(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.QueueDeclareConfigurationExtensions : object {
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithMaxPriority(IQueueDeclareConfiguration configuration, byte maxPriority);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithMaxLength(IQueueDeclareConfiguration configuration, int maxLength);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithMaxLengthBytes(IQueueDeclareConfiguration configuration, int maxLengthBytes);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithOverflowType(IQueueDeclareConfiguration configuration, string overflowType);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithExpires(IQueueDeclareConfiguration configuration, TimeSpan expires);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithMessageTtl(IQueueDeclareConfiguration configuration, TimeSpan messageTtl);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithDeadLetterExchange(IQueueDeclareConfiguration configuration, Exchange deadLetterExchange);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithDeadLetterRoutingKey(IQueueDeclareConfiguration configuration, string deadLetterRoutingKey);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithQueueMode(IQueueDeclareConfiguration configuration, string queueMode);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithQueueType(IQueueDeclareConfiguration configuration, string queueType);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithSingleActiveConsumer(IQueueDeclareConfiguration configuration, bool singleActiveConsumer);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithQueueMasterLocator(IQueueDeclareConfiguration configuration, string queueMasterLocator);
    [ExtensionAttribute]
public static IQueueDeclareConfiguration WithDeadLetterStrategy(IQueueDeclareConfiguration configuration, string deadLetterStrategy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.QueueMasterLocator : object {
    public static string MinMasters;
    public static string ClientLocal;
    public static string Random;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.QueueMode : object {
    public static string Default;
    public static string Lazy;
}
public class EasyNetQ.QueueNameConvention : MulticastDelegate {
    public QueueNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType, string subscriberId);
    public virtual IAsyncResult BeginInvoke(Type messageType, string subscriberId, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
public class EasyNetQ.QueueStats : ValueType {
    [CompilerGeneratedAttribute]
private ulong <MessagesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ConsumersCount>k__BackingField;
    public ulong MessagesCount { get; }
    public ulong ConsumersCount { get; }
    public QueueStats(ulong messagesCount, ulong consumersCount);
    [CompilerGeneratedAttribute]
public ulong get_MessagesCount();
    [CompilerGeneratedAttribute]
public ulong get_ConsumersCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EasyNetQ.QueueType : object {
    public static string Classic;
    public static string Quorum;
    public static string Stream;
}
public class EasyNetQ.QueueTypeConvention : MulticastDelegate {
    public QueueTypeConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.RabbitAdvancedBus : object {
    private IPersistentChannelDispatcher persistentChannelDispatcher;
    private ConnectionConfiguration configuration;
    private ConsumePipelineBuilder consumePipelineBuilder;
    private IServiceProvider serviceResolver;
    private IPublishConfirmationListener confirmationListener;
    private ILogger logger;
    private IProducerConnection producerConnection;
    private IConsumerConnection consumerConnection;
    private IConsumerFactory consumerFactory;
    private IEventBus eventBus;
    private IDisposable[] eventSubscriptions;
    private IHandlerCollectionFactory handlerCollectionFactory;
    private IMessageSerializationStrategy messageSerializationStrategy;
    private IPullingConsumerFactory pullingConsumerFactory;
    private AdvancedBusEventHandlers advancedBusEventHandlers;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private ProduceDelegate produceDelegate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ConnectedEventArgs> Connected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> Disconnected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BlockedEventArgs> Blocked;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<UnblockedEventArgs> Unblocked;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MessageReturnedEventArgs> MessageReturned;
    [ObsoleteAttribute("IsConnected is deprecated because it is misleading. Please use GetConnectionStatus instead")]
public bool IsConnected { get; }
    public RabbitAdvancedBus(ILogger`1<RabbitAdvancedBus> logger, IProducerConnection producerConnection, IConsumerConnection consumerConnection, IConsumerFactory consumerFactory, IPersistentChannelDispatcher persistentChannelDispatcher, IPublishConfirmationListener confirmationListener, IEventBus eventBus, IHandlerCollectionFactory handlerCollectionFactory, ConnectionConfiguration configuration, ProducePipelineBuilder producePipelineBuilder, ConsumePipelineBuilder consumePipelineBuilder, IServiceProvider serviceResolver, IMessageSerializationStrategy messageSerializationStrategy, IPullingConsumerFactory pullingConsumerFactory, AdvancedBusEventHandlers advancedBusEventHandlers);
    public sealed virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ConnectAsync>d__20")]
[ObsoleteAttribute("IsConnected is deprecated because it is misleading. Please use GetConnectionStatus instead")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    public sealed virtual PersistentConnectionStatus GetConnectionStatus(PersistentConnectionType type);
    public sealed virtual Task EnsureConnectedAsync(PersistentConnectionType type, CancellationToken cancellationToken);
    public sealed virtual IDisposable Consume(Action`1<IConsumeConfiguration> configure);
    public IPullingConsumer`1<PullResult> CreatePullingConsumer(Queue& queue, bool autoAck);
    [NullableContextAttribute("2")]
public IPullingConsumer`1<PullResult`1<T>> CreatePullingConsumer(Queue& queue, bool autoAck);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Blocked(EventHandler`1<BlockedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Blocked(EventHandler`1<BlockedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Unblocked(EventHandler`1<UnblockedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Unblocked(EventHandler`1<UnblockedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReturned(EventHandler`1<MessageReturnedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReturned(EventHandler`1<MessageReturnedEventArgs> value);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<PublishAsync>d__42")]
public virtual Task PublishAsync(string exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, IMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<PublishAsync>d__43")]
public virtual Task PublishAsync(string exchange, string routingKey, Nullable`1<bool> mandatory, Nullable`1<bool> publisherConfirms, MessageProperties properties, ReadOnlyMemory`1<byte> body, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<GetQueueStatsAsync>d__44")]
public sealed virtual Task`1<QueueStats> GetQueueStatsAsync(string queue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueueDeclarePassiveAsync>d__45")]
public sealed virtual Task QueueDeclarePassiveAsync(string queue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueueDeclareAsync>d__46")]
public sealed virtual Task`1<Queue> QueueDeclareAsync(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueueDeleteAsync>d__47")]
public virtual Task QueueDeleteAsync(string queue, bool ifUnused, bool ifEmpty, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueuePurgeAsync>d__48")]
public virtual Task QueuePurgeAsync(string queue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ExchangeDeclarePassiveAsync>d__49")]
public sealed virtual Task ExchangeDeclarePassiveAsync(string exchange, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ExchangeDeclareAsync>d__50")]
public sealed virtual Task`1<Exchange> ExchangeDeclareAsync(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ExchangeDeleteAsync>d__51")]
public virtual Task ExchangeDeleteAsync(string exchange, bool ifUnused, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueueBindAsync>d__52")]
public virtual Task QueueBindAsync(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<QueueUnbindAsync>d__53")]
public virtual Task QueueUnbindAsync(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ExchangeBindAsync>d__54")]
public virtual Task ExchangeBindAsync(string destinationExchange, string sourceExchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<ExchangeUnbindAsync>d__55")]
public virtual Task ExchangeUnbindAsync(string destinationExchange, string sourceExchange, string routingKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    private IPersistentConnection GetConnection(PersistentConnectionType type);
    private void OnConnectionCreated(ConnectionCreatedEvent& event);
    private void OnConnectionRecovered(ConnectionRecoveredEvent& event);
    private void OnConnectionDisconnected(ConnectionDisconnectedEvent& event);
    private void OnConnectionBlocked(ConnectionBlockedEvent& event);
    private void OnConnectionUnblocked(ConnectionUnblockedEvent& event);
    private void OnMessageReturned(ReturnedMessageEvent& event);
    [AsyncStateMachineAttribute("EasyNetQ.RabbitAdvancedBus/<PublishInternalAsync>d__63")]
private ValueTask PublishInternalAsync(ProduceContext context);
    private sealed virtual override IPullingConsumer`1<PullResult> EasyNetQ.IAdvancedBus.CreatePullingConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, bool autoAck);
    private sealed virtual override IPullingConsumer`1<PullResult`1<T>> EasyNetQ.IAdvancedBus.CreatePullingConsumer(Queue& modreq(System.Runtime.InteropServices.InAttribute) queue, bool autoAck);
    [CompilerGeneratedAttribute]
private ProduceDelegate <.ctor>b__17_0(ProduceDelegate _);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IPersistentConnection <get_IsConnected>b__19_0(PersistentConnectionType type);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private PerQueueConsumerConfiguration <Consume>b__23_1(Tuple`3<Queue, MessageHandler, PerQueueConsumeConfiguration> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private PerQueueConsumerConfiguration <Consume>b__23_3(Tuple`3<Queue, IHandlerCollection, PerQueueConsumeConfiguration> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.RabbitBus : object {
    [CompilerGeneratedAttribute]
private IPubSub <PubSub>k__BackingField;
    [CompilerGeneratedAttribute]
private IRpc <Rpc>k__BackingField;
    [CompilerGeneratedAttribute]
private ISendReceive <SendReceive>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IAdvancedBus <Advanced>k__BackingField;
    public IPubSub PubSub { get; }
    public IRpc Rpc { get; }
    public ISendReceive SendReceive { get; }
    public IScheduler Scheduler { get; }
    public IAdvancedBus Advanced { get; }
    public RabbitBus(IAdvancedBus advanced, IPubSub pubSub, IRpc rpc, ISendReceive sendReceive, IScheduler scheduler);
    [CompilerGeneratedAttribute]
public sealed virtual IPubSub get_PubSub();
    [CompilerGeneratedAttribute]
public sealed virtual IRpc get_Rpc();
    [CompilerGeneratedAttribute]
public sealed virtual ISendReceive get_SendReceive();
    [CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public sealed virtual IAdvancedBus get_Advanced();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.RabbitHutch : object {
    [ExtensionAttribute]
public static IEasyNetQBuilder AddEasyNetQ(IServiceCollection services, string connectionString);
    [ExtensionAttribute]
public static IEasyNetQBuilder AddEasyNetQ(IServiceCollection services);
    [ExtensionAttribute]
public static IEasyNetQBuilder AddEasyNetQ(IServiceCollection services, Action`1<ConnectionConfiguration> configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.ReceiveConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    public bool AutoDelete { get; private set; }
    public int Priority { get; private set; }
    public ushort PrefetchCount { get; private set; }
    public bool IsExclusive { get; private set; }
    public bool Durable { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> QueueArguments { get; private set; }
    private IDictionary`2<string, object> InitializedQueueArguments { get; }
    public ReceiveConfiguration(ushort defaultPrefetchCount);
    [CompilerGeneratedAttribute]
public bool get_AutoDelete();
    [CompilerGeneratedAttribute]
private void set_AutoDelete(bool value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
private void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
private void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Durable();
    [CompilerGeneratedAttribute]
private void set_Durable(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_QueueArguments();
    [CompilerGeneratedAttribute]
private void set_QueueArguments(IDictionary`2<string, object> value);
    public sealed virtual IReceiveConfiguration WithAutoDelete(bool autoDelete);
    public sealed virtual IReceiveConfiguration WithDurable(bool durable);
    public sealed virtual IReceiveConfiguration WithPriority(int priority);
    public sealed virtual IReceiveConfiguration WithPrefetchCount(ushort prefetchCount);
    public sealed virtual IReceiveConfiguration WithExpires(int expires);
    public sealed virtual IReceiveConfiguration AsExclusive(bool isExclusive);
    public sealed virtual IReceiveConfiguration WithMaxPriority(byte priority);
    public sealed virtual IReceiveConfiguration WithMaxLength(int maxLength);
    public sealed virtual IReceiveConfiguration WithMaxLengthBytes(int maxLengthBytes);
    public sealed virtual IReceiveConfiguration WithQueueMode(string queueMode);
    public sealed virtual IReceiveConfiguration WithQueueType(string queueType);
    public sealed virtual IReceiveConfiguration WithSingleActiveConsumer(bool singleActiveConsumer);
    private IDictionary`2<string, object> get_InitializedQueueArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.ReceiveRegistrationExtensions : object {
    [ExtensionAttribute]
public static IReceiveRegistration Add(IReceiveRegistration receiveRegistration, Func`2<T, Task> onMessage);
    [ExtensionAttribute]
public static IReceiveRegistration Add(IReceiveRegistration receiveRegistration, Action`1<T> onMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.ReflectionBasedNewtonsoftJsonSerializer : object {
    private static Encoding Encoding;
    private static int DefaultBufferSize;
    private object jsonSerializer;
    private Action`4<object, object, object, Type> serialize;
    private Func`4<object, object, Type, object> deserialize;
    private Func`3<StreamWriter, object, IDisposable> createJsonWriter;
    private Func`2<StreamReader, IDisposable> createJsonReader;
    [NullableContextAttribute("2")]
public ReflectionBasedNewtonsoftJsonSerializer(object serializerSettings);
    private static ReflectionBasedNewtonsoftJsonSerializer();
    public sealed virtual IMemoryOwner`1<byte> MessageToBytes(Type messageType, object message);
    public object BytesToMessage(Type messageType, ReadOnlyMemory`1& bytes);
    private static Type GetType(string typeName, string assemblyName);
    private static Type TryGetType(string typeName, string assemblyName);
    private static MethodInfo GetMethod(Type type, string name, Type[] types);
    private static PropertyInfo GetProperty(Type type, string name);
    private static ConstructorInfo GetConstructor(Type type, Type[] types);
    private sealed virtual override object EasyNetQ.ISerializer.BytesToMessage(Type messageType, ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.RequestConfiguration : object {
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Priority>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <MessageHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public string QueueName { get; private set; }
    public TimeSpan Expiration { get; private set; }
    public Nullable`1<byte> Priority { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> MessageHeaders { get; private set; }
    public bool PublisherConfirms { get; private set; }
    public RequestConfiguration(string queueName, TimeSpan expiration);
    [CompilerGeneratedAttribute]
public string get_QueueName();
    [CompilerGeneratedAttribute]
private void set_QueueName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Expiration();
    [CompilerGeneratedAttribute]
private void set_Expiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_MessageHeaders();
    [CompilerGeneratedAttribute]
private void set_MessageHeaders(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirms(bool value);
    public sealed virtual IRequestConfiguration WithPriority(byte priority);
    public sealed virtual IRequestConfiguration WithExpiration(TimeSpan expiration);
    public sealed virtual IRequestConfiguration WithQueueName(string queueName);
    public sealed virtual IRequestConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public sealed virtual IRequestConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.ResponderConfiguration : object {
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    public ushort PrefetchCount { get; private set; }
    [NullableAttribute("2")]
public string QueueName { get; private set; }
    public bool Durable { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> QueueArguments { get; private set; }
    private IDictionary`2<string, object> InitializedQueueArguments { get; }
    [NullableContextAttribute("2")]
public ResponderConfiguration(ushort defaultPrefetchCount, string queueType);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
private void set_PrefetchCount(ushort value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_QueueName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_QueueName(string value);
    [CompilerGeneratedAttribute]
public bool get_Durable();
    [CompilerGeneratedAttribute]
private void set_Durable(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_QueueArguments();
    [CompilerGeneratedAttribute]
private void set_QueueArguments(IDictionary`2<string, object> value);
    public sealed virtual IResponderConfiguration WithPrefetchCount(ushort prefetchCount);
    public sealed virtual IResponderConfiguration WithQueueName(string queueName);
    public sealed virtual IResponderConfiguration WithDurable(bool durable);
    public sealed virtual IResponderConfiguration WithExpires(int expires);
    public sealed virtual IResponderConfiguration WithMaxPriority(byte priority);
    public sealed virtual IResponderConfiguration WithQueueType(string queueType);
    private IDictionary`2<string, object> get_InitializedQueueArguments();
}
public class EasyNetQ.RpcExchangeNameConvention : MulticastDelegate {
    public RpcExchangeNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.RpcExtensions : object {
    [ExtensionAttribute]
public static TResponse Request(IRpc rpc, TRequest request, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResponse> RequestAsync(IRpc rpc, TRequest request, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResponse Request(IRpc rpc, TRequest request, Action`1<IRequestConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> RespondAsync(IRpc rpc, Func`2<TRequest, TResponse> responder, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> RespondAsync(IRpc rpc, Func`2<TRequest, Task`1<TResponse>> responder, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Respond(IRpc rpc, Func`2<TRequest, Task`1<TResponse>> responder, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Respond(IRpc rpc, Func`2<TRequest, TResponse> responder, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Respond(IRpc rpc, Func`2<TRequest, TResponse> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Respond(IRpc rpc, Func`2<TRequest, Task`1<TResponse>> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Respond(IRpc rpc, Func`3<TRequest, CancellationToken, Task`1<TResponse>> responder, Action`1<IResponderConfiguration> configure, CancellationToken cancellationToken);
}
public class EasyNetQ.RpcReturnQueueNamingConvention : MulticastDelegate {
    public RpcReturnQueueNamingConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class EasyNetQ.RpcRoutingKeyNamingConvention : MulticastDelegate {
    public RpcRoutingKeyNamingConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.SchedulerExtensions : object {
    [ExtensionAttribute]
public static Task FuturePublishAsync(IScheduler scheduler, T message, TimeSpan delay, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void FuturePublish(IScheduler scheduler, T message, TimeSpan delay, string topic, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void FuturePublish(IScheduler scheduler, T message, TimeSpan delay, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.SendConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Priority>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <MessageHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirms>k__BackingField;
    public Nullable`1<byte> Priority { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> MessageHeaders { get; private set; }
    public bool PublisherConfirms { get; private set; }
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_MessageHeaders();
    [CompilerGeneratedAttribute]
private void set_MessageHeaders(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_PublisherConfirms();
    [CompilerGeneratedAttribute]
private void set_PublisherConfirms(bool value);
    public sealed virtual ISendConfiguration WithPriority(byte priority);
    public sealed virtual ISendConfiguration WithHeaders(IDictionary`2<string, object> headers);
    public sealed virtual ISendConfiguration WithPublisherConfirms(bool publisherConfirms);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class EasyNetQ.SendReceiveExtensions : object {
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Func`3<T, CancellationToken, Task> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Func`3<T, CancellationToken, Task> onMessage, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(ISendReceive sendReceive, string queue, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Send(ISendReceive sendReceive, string queue, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Send(ISendReceive sendReceive, string queue, T message, Action`1<ISendConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Action`1<T> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Action`1<T> onMessage, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Func`2<T, Task> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Func`2<T, Task> onMessage, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDisposable> ReceiveAsync(ISendReceive sendReceive, string queue, Action`1<IReceiveRegistration> addHandlers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Action`1<T> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Action`1<T> onMessage, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Func`2<T, Task> onMessage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Func`3<T, CancellationToken, Task> onMessage, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Action`1<IReceiveRegistration> addHandlers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Receive(ISendReceive sendReceive, string queue, Action`1<IReceiveRegistration> addHandlers, Action`1<IReceiveConfiguration> configure, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
public class EasyNetQ.SerializedMessage : ValueType {
    [NullableAttribute("1")]
private IDisposable owner;
    [CompilerGeneratedAttribute]
private MessageProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    public MessageProperties Properties { get; }
    public ReadOnlyMemory`1<byte> Body { get; }
    [NullableContextAttribute("1")]
public SerializedMessage(MessageProperties& properties, IMemoryOwner`1<byte> body);
    [CompilerGeneratedAttribute]
public MessageProperties get_Properties();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Body();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class EasyNetQ.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection RegisterDefaultServices(IServiceCollection services, Func`2<IServiceProvider, ConnectionConfiguration> connectionConfigurationFactory);
}
[ExtensionAttribute]
public static class EasyNetQ.SimpleConsumeConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISimpleConsumeConfiguration WithPriority(ISimpleConsumeConfiguration configuration, int priority);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.Sprache.Failure`1 : object {
    private Func`1<IEnumerable`1<string>> expectations;
    private Func`1<string> message;
    [CompilerGeneratedAttribute]
private Input <FailedInput>k__BackingField;
    public string Message { get; }
    public IEnumerable`1<string> Expectations { get; }
    public Input FailedInput { get; }
    public Failure`1(Input input, Func`1<string> message, Func`1<IEnumerable`1<string>> expectations);
    public sealed virtual string get_Message();
    public sealed virtual IEnumerable`1<string> get_Expectations();
    [CompilerGeneratedAttribute]
public sealed virtual Input get_FailedInput();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
internal interface EasyNetQ.Sprache.IFailure`1 {
    public string Message { get; }
    public IEnumerable`1<string> Expectations { get; }
    public Input FailedInput { get; }
    public abstract virtual string get_Message();
    public abstract virtual IEnumerable`1<string> get_Expectations();
    public abstract virtual Input get_FailedInput();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.Sprache.Input : object {
    private string source;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public string Source { get; }
    public char Current { get; }
    public bool AtEnd { get; }
    public int Position { get; }
    public int Line { get; }
    public int Column { get; }
    public Input(string source);
    private Input(string source, int position, int line, int column);
    [CompilerGeneratedAttribute]
public string get_Source();
    public char get_Current();
    public bool get_AtEnd();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    public Input Advance();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
internal interface EasyNetQ.Sprache.IResult`1 {
}
[NullableContextAttribute("1")]
internal interface EasyNetQ.Sprache.ISuccess`1 {
    public T Result { get; }
    public Input Remainder { get; }
    public abstract virtual T get_Result();
    public abstract virtual Input get_Remainder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.Sprache.Parse : object {
    public static Parser`1<char> WhiteSpace;
    public static Parser`1<char> Numeric;
    public static Parser`1<string> NonNegativeNumber;
    private static Parse();
    public static Parser`1<char> Char(Predicate`1<char> predicate, string description);
    public static Parser`1<char> CharExcept(Predicate`1<char> predicate, string description);
    public static Parser`1<char> Char(char c);
    public static Parser`1<char> CharCaseInsensitive(char c);
    public static Parser`1<char> CharExcept(char c);
    public static Parser`1<IEnumerable`1<char>> String(string s);
    public static Parser`1<IEnumerable`1<char>> CaseInsensitiveString(string s);
    [ExtensionAttribute]
public static Parser`1<U> Then(Parser`1<T> first, Func`2<T, Parser`1<U>> second);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Many(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> AtLeastOnce(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<U> Select(Parser`1<T> parser, Func`2<T, U> convert);
    [ExtensionAttribute]
public static Parser`1<T> Token(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<string> Text(Parser`1<IEnumerable`1<char>> characters);
    [ExtensionAttribute]
public static Parser`1<T> Or(Parser`1<T> first, Parser`1<T> second);
    [ExtensionAttribute]
public static Parser`1<T> Named(Parser`1<T> parser, string name);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Once(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Concat(Parser`1<IEnumerable`1<T>> first, Parser`1<IEnumerable`1<T>> second);
    public static Parser`1<T> Return(T value);
    [ExtensionAttribute]
public static Parser`1<V> SelectMany(Parser`1<T> parser, Func`2<T, Parser`1<U>> selector, Func`3<T, U, V> projector);
}
internal class EasyNetQ.Sprache.ParseException : Exception {
    [NullableContextAttribute("1")]
public ParseException(string message);
}
internal class EasyNetQ.Sprache.Parser`1 : MulticastDelegate {
    public Parser`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IResult`1<T> Invoke(Input input);
    public virtual IAsyncResult BeginInvoke(Input input, AsyncCallback callback, object object);
    public virtual IResult`1<T> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.Sprache.ParserExtensions : object {
    [ExtensionAttribute]
public static IResult`1<T> TryParse(Parser`1<T> parser, string input);
    [ExtensionAttribute]
public static T Parse(Parser`1<T> parser, string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EasyNetQ.Sprache.ResultHelper : object {
    [ExtensionAttribute]
public static IResult`1<U> IfSuccess(IResult`1<T> result, Func`2<ISuccess`1<T>, IResult`1<U>> next);
    [ExtensionAttribute]
public static IResult`1<T> IfFailure(IResult`1<T> result, Func`2<IFailure`1<T>, IResult`1<T>> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.Sprache.Success`1 : object {
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Input <Remainder>k__BackingField;
    public T Result { get; }
    public Input Remainder { get; }
    public Success`1(T result, Input remainder);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual Input get_Remainder();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EasyNetQ.SubscriptionConfiguration : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExchangeType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ExchangeArguments>k__BackingField;
    public IList`1<string> Topics { get; }
    public bool AutoDelete { get; private set; }
    public int Priority { get; private set; }
    public ushort PrefetchCount { get; private set; }
    public bool IsExclusive { get; private set; }
    public bool Durable { get; private set; }
    [NullableAttribute("2")]
public string QueueName { get; private set; }
    public string ExchangeType { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> QueueArguments { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ExchangeArguments { get; private set; }
    private IDictionary`2<string, object> InitializedQueueArguments { get; }
    private IDictionary`2<string, object> InitializedExchangeArguments { get; }
    [NullableContextAttribute("2")]
public SubscriptionConfiguration(ushort defaultPrefetchCount, string queueType);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Topics();
    [CompilerGeneratedAttribute]
public bool get_AutoDelete();
    [CompilerGeneratedAttribute]
private void set_AutoDelete(bool value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
    [CompilerGeneratedAttribute]
public ushort get_PrefetchCount();
    [CompilerGeneratedAttribute]
private void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
private void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Durable();
    [CompilerGeneratedAttribute]
private void set_Durable(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_QueueName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_QueueName(string value);
    [CompilerGeneratedAttribute]
public string get_ExchangeType();
    [CompilerGeneratedAttribute]
private void set_ExchangeType(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_QueueArguments();
    [CompilerGeneratedAttribute]
private void set_QueueArguments(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ExchangeArguments();
    [CompilerGeneratedAttribute]
private void set_ExchangeArguments(IDictionary`2<string, object> value);
    public sealed virtual ISubscriptionConfiguration WithTopic(string topic);
    public sealed virtual ISubscriptionConfiguration WithAutoDelete(bool autoDelete);
    public sealed virtual ISubscriptionConfiguration WithDurable(bool durable);
    public sealed virtual ISubscriptionConfiguration WithPriority(int priority);
    public sealed virtual ISubscriptionConfiguration WithPrefetchCount(ushort prefetchCount);
    public sealed virtual ISubscriptionConfiguration WithExpires(int expires);
    public sealed virtual ISubscriptionConfiguration AsExclusive(bool isExclusive);
    public sealed virtual ISubscriptionConfiguration WithMaxPriority(byte priority);
    public sealed virtual ISubscriptionConfiguration WithQueueName(string queueName);
    public sealed virtual ISubscriptionConfiguration WithMaxLength(int maxLength);
    public sealed virtual ISubscriptionConfiguration WithMaxLengthBytes(int maxLengthBytes);
    public sealed virtual ISubscriptionConfiguration WithQueueMode(string queueMode);
    public sealed virtual ISubscriptionConfiguration WithQueueType(string queueType);
    public sealed virtual ISubscriptionConfiguration WithExchangeType(string exchangeType);
    public sealed virtual ISubscriptionConfiguration WithAlternateExchange(string alternateExchange);
    public sealed virtual ISubscriptionConfiguration WithSingleActiveConsumer(bool singleActiveConsumer);
    public ISubscriptionConfiguration WithQueueArguments(IDictionary`2<string, object> arguments);
    private IDictionary`2<string, object> get_InitializedQueueArguments();
    private IDictionary`2<string, object> get_InitializedExchangeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.SubscriptionResult : ValueType {
    [CompilerGeneratedAttribute]
private Exchange <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisposable <ConsumerCancellation>k__BackingField;
    public Exchange Exchange { get; }
    public Queue Queue { get; }
    private IDisposable ConsumerCancellation { get; }
    public SubscriptionResult(Exchange& exchange, Queue& queue, IDisposable consumerCancellation);
    [CompilerGeneratedAttribute]
public Exchange get_Exchange();
    [CompilerGeneratedAttribute]
public Queue get_Queue();
    [CompilerGeneratedAttribute]
private IDisposable get_ConsumerCancellation();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EasyNetQ.SystemMessages.Error : object {
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageProperties <BasicProperties>k__BackingField;
    public string RoutingKey { get; public set; }
    public string Exchange { get; public set; }
    public string Queue { get; public set; }
    public string Exception { get; public set; }
    public string Message { get; public set; }
    public DateTime DateTime { get; public set; }
    public MessageProperties BasicProperties { get; public set; }
    public Error(string routingKey, string exchange, string queue, string exception, string message, DateTime dateTime, MessageProperties basicProperties);
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public void set_RoutingKey(string value);
    [CompilerGeneratedAttribute]
public string get_Exchange();
    [CompilerGeneratedAttribute]
public void set_Exchange(string value);
    [CompilerGeneratedAttribute]
public string get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(string value);
    [CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public MessageProperties get_BasicProperties();
    [CompilerGeneratedAttribute]
public void set_BasicProperties(MessageProperties value);
}
public class EasyNetQ.TEventHandler`1 : MulticastDelegate {
    public TEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(TEvent& modreq(System.Runtime.InteropServices.InAttribute) event);
    public virtual IAsyncResult BeginInvoke(TEvent& modreq(System.Runtime.InteropServices.InAttribute) event, AsyncCallback callback, object object);
    public virtual void EndInvoke(TEvent& modreq(System.Runtime.InteropServices.InAttribute) event, IAsyncResult result);
}
public class EasyNetQ.TopicNameConvention : MulticastDelegate {
    public TopicNameConvention(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Type messageType);
    public virtual IAsyncResult BeginInvoke(Type messageType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
public class EasyNetQ.Topology.Binding`1 : ValueType {
    [CompilerGeneratedAttribute]
private Exchange <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private TBindable <Destination>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public Exchange Source { get; }
    public TBindable Destination { get; }
    [NullableAttribute("1")]
public string RoutingKey { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; }
    public Binding`1(Exchange& source, TBindable& destination, string routingKey, IDictionary`2<string, object> arguments);
    [CompilerGeneratedAttribute]
public Exchange get_Source();
    [CompilerGeneratedAttribute]
public TBindable get_Destination();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Topology.Exchange : ValueType {
    public static string DefaultName;
    [CompilerGeneratedAttribute]
private static Exchange <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDurable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoDelete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public static Exchange Default { get; }
    public string Name { get; }
    public string Type { get; }
    public bool IsDurable { get; }
    public bool IsAutoDelete { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; }
    public Exchange(string name, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    private static Exchange();
    [CompilerGeneratedAttribute]
public static Exchange get_Default();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsDurable();
    [CompilerGeneratedAttribute]
public bool get_IsAutoDelete();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
}
[NullableContextAttribute("1")]
public interface EasyNetQ.Topology.IBindable {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class EasyNetQ.Topology.Queue : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDurable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoDelete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public string Name { get; }
    public bool IsDurable { get; }
    public bool IsExclusive { get; }
    public bool IsAutoDelete { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Arguments { get; }
    public Queue(string name, bool isDurable, bool isExclusive, bool isAutoDelete, IDictionary`2<string, object> arguments);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsDurable();
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
public bool get_IsAutoDelete();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Arguments();
}
public class EasyNetQ.UnblockedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PersistentConnectionType <Type>k__BackingField;
    public PersistentConnectionType Type { get; }
    public UnblockedEventArgs(PersistentConnectionType type);
    [CompilerGeneratedAttribute]
public PersistentConnectionType get_Type();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
