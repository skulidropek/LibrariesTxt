[DefaultMemberAttribute("Item")]
public class Ecng.Common.AllocationArray`1 : object {
    private T[] _buffer;
    private AllocationArrayEnumerator<T> _enumerator;
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    private int _count;
    public int MaxCount { get; public set; }
    public int Count { get; public set; }
    public T Item { get; public set; }
    public T[] Buffer { get; }
    public AllocationArray`1(int capacity);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
public void set_MaxCount(int value);
    public int get_Count();
    public void set_Count(int value);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public T[] get_Buffer();
    public void Reset(int capacity);
    private void EnsureCapacity(int newSize);
    public void Add(T item);
    public void Add(T[] items, int offset, int count);
    public void RemoveAt(int index);
    public void RemoveRange(int startIndex, int count);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void Resize(int capacity);
}
[ExtensionAttribute]
public static class Ecng.Common.ArrayHelper : object {
    [ExtensionAttribute]
public static void Clear(Array array);
    [ExtensionAttribute]
public static void Clear(Array array, int index, int count);
    [ExtensionAttribute]
public static T[] Range(T[] array, int index);
    [ExtensionAttribute]
public static T[] Range(T[] array, int index, int count);
    [ExtensionAttribute]
public static Array CreateArray(Type type, int count);
    [ExtensionAttribute]
public static int IndexOf(T[] array, T item);
    [ExtensionAttribute]
public static T[] Clone(T[] array);
    [ExtensionAttribute]
public static T[] Reverse(T[] array);
    [ExtensionAttribute]
public static T[] Concat(T[] first, T[] second);
    [ExtensionAttribute]
public static T[] CopyArray(T[] source);
    [ExtensionAttribute]
public static T[] CopyArray(ICollection`1<T> source);
}
[ExtensionAttribute]
public static class Ecng.Common.AsyncHelper : object {
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<WithCancellation>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> WithCancellation(Task`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTuple`2<CancellationTokenSource, CancellationToken> CreateChildToken(CancellationToken token, Nullable`1<TimeSpan> delay);
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<WithCancellation>d__2")]
[ExtensionAttribute]
public static Task WithCancellation(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> FromResult(TValue value);
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<AsValueTask>d__4`1")]
[ExtensionAttribute]
public static ValueTask AsValueTask(ValueTask`1<T> valueTask);
    [ExtensionAttribute]
public static ValueTask`1<T> AsValueTask(Task`1<T> task);
    [ExtensionAttribute]
public static ValueTask AsValueTask(Task task);
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<WhenAll>d__7`1")]
[ExtensionAttribute]
public static ValueTask`1<T[]> WhenAll(IEnumerable`1<ValueTask`1<T>> tasks);
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<WhenAll>d__8")]
[ExtensionAttribute]
public static ValueTask WhenAll(IEnumerable`1<ValueTask> tasks);
    [ExtensionAttribute]
public static Task Delay(TimeSpan delay, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T GetResult(Task task);
    [ExtensionAttribute]
public static TaskCompletionSource`1<TValue> ToCompleteSource(TValue value);
    [ExtensionAttribute]
public static CancellationToken CreateTimeoutToken(TimeSpan timeout);
    [ExtensionAttribute]
public static ValueTask CheckNull(Task task);
    [ExtensionAttribute]
public static ValueTask CheckNull(Nullable`1<ValueTask> task);
    [ExtensionAttribute]
public static ValueTask CatchHandle(Task task, CancellationToken token, Action`1<Exception> handleError, Action`1<Exception> handleCancel, Action finalizer, bool rethrowErr, bool rethrowCancel);
    [ExtensionAttribute]
public static ValueTask CatchHandle(ValueTask task, CancellationToken token, Action`1<Exception> handleError, Action`1<Exception> handleCancel, Action finalizer, bool rethrowErr, bool rethrowCancel);
    public static ValueTask CatchHandle(Func`1<Task> getTask, CancellationToken token, Action`1<Exception> handleError, Action`1<Exception> handleCancel, Action finalizer, bool rethrowErr, bool rethrowCancel);
    [AsyncStateMachineAttribute("Ecng.Common.AsyncHelper/<CatchHandle>d__18")]
public static ValueTask CatchHandle(Func`1<ValueTask> getTask, CancellationToken token, Action`1<Exception> handleError, Action`1<Exception> handleCancel, Action finalizer, bool rethrowErr, bool rethrowCancel);
    public static TaskCompletionSource`1<T> CreateTaskCompletionSource(bool forceAsync);
    [ExtensionAttribute]
public static Task WhenCanceled(CancellationToken token);
    public static void Run(Func`1<ValueTask> getTask);
    public static T Run(Func`1<ValueTask`1<T>> getTask);
    [ExtensionAttribute]
public static bool TryCompleteFromCompletedTask(TaskCompletionSource tcs, Task task);
    public static TaskCompletionSource CreateTaskCompletionSource(bool forceAsync);
    [AsyncIteratorStateMachineAttribute("Ecng.Common.AsyncHelper/<WithEnforcedCancellation>d__25`1")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<T> WithEnforcedCancellation(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Ecng.Common.AttributeHelper : object {
    private static Dictionary`2<ValueTuple`2<Type, ICustomAttributeProvider>, Attribute> _attrCache;
    [CompilerGeneratedAttribute]
private static bool <CacheEnabled>k__BackingField;
    public static bool CacheEnabled { get; public set; }
    private static AttributeHelper();
    [CompilerGeneratedAttribute]
public static bool get_CacheEnabled();
    [CompilerGeneratedAttribute]
public static void set_CacheEnabled(bool value);
    public static void ClearCache();
    [ExtensionAttribute]
public static TAttribute GetAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static IEnumerable`1<TAttribute> GetAttributes(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static IEnumerable`1<Attribute> GetAttributes(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
private static TValue SafeAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> handler);
    [ExtensionAttribute]
public static bool IsObsolete(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static bool IsBrowsable(ICustomAttributeProvider provider);
}
public abstract class Ecng.Common.BaseOperator`1 : object {
    public abstract virtual int Compare(T x, T y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    private sealed virtual override object Ecng.Common.IOperator.Add(object first, object second);
    private sealed virtual override object Ecng.Common.IOperator.Subtract(object first, object second);
    private sealed virtual override object Ecng.Common.IOperator.Multiply(object first, object second);
    private sealed virtual override object Ecng.Common.IOperator.Divide(object first, object second);
    public abstract virtual T Add(T first, T second);
    public abstract virtual T Subtract(T first, T second);
    public abstract virtual T Multiply(T first, T second);
    public abstract virtual T Divide(T first, T second);
}
[AttributeUsageAttribute("128")]
public class Ecng.Common.BasicSettingAttribute : Attribute {
}
public class Ecng.Common.ByteOperator : BaseOperator`1<byte> {
    public virtual byte Add(byte first, byte second);
    public virtual byte Subtract(byte first, byte second);
    public virtual byte Multiply(byte first, byte second);
    public virtual byte Divide(byte first, byte second);
    public virtual int Compare(byte first, byte second);
}
public abstract class Ecng.Common.Cloneable`1 : object {
    public abstract virtual T Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[ExtensionAttribute]
public static class Ecng.Common.CloneHelper : object {
    [ExtensionAttribute]
public static T TypedClone(T value);
}
[ExtensionAttribute]
public static class Ecng.Common.CompareHelper : object {
    [ExtensionAttribute]
public static int Compare(IPAddress first, IPAddress second);
    [ExtensionAttribute]
public static bool Compare(Type first, Type second, bool useInheritance);
    [ExtensionAttribute]
public static int Compare(Type first, Type second);
    [ExtensionAttribute]
public static int Compare(object value1, object value2);
    [ExtensionAttribute]
public static bool IsDefault(T value);
    [ExtensionAttribute]
public static bool IsRuntimeDefault(T value);
    [ExtensionAttribute]
public static int Compare(Version first, Version second);
}
public enum Ecng.Common.ComparisonOperator : Enum {
    public int value__;
    [DisplayAttribute]
public static ComparisonOperator Equal;
    [DisplayAttribute]
public static ComparisonOperator NotEqual;
    [DisplayAttribute]
public static ComparisonOperator Greater;
    [DisplayAttribute]
public static ComparisonOperator GreaterOrEqual;
    [DisplayAttribute]
public static ComparisonOperator Less;
    [DisplayAttribute]
public static ComparisonOperator LessOrEqual;
    [DisplayAttribute]
public static ComparisonOperator Any;
    [DisplayAttribute]
public static ComparisonOperator In;
}
[ExtensionAttribute]
public static class Ecng.Common.ConsoleHelper : object {
    public static ConsoleColor Info;
    public static ConsoleColor Warning;
    public static ConsoleColor Error;
    public static ConsoleColor Success;
    private static SyncObject _lock;
    private static ConsoleHelper();
    [ExtensionAttribute]
public static void ConsoleInfo(string message);
    [ExtensionAttribute]
public static void ConsoleWarning(string message);
    [ExtensionAttribute]
public static void ConsoleError(string message);
    [ExtensionAttribute]
public static void ConsoleSuccess(string message);
    [ExtensionAttribute]
public static void ConsoleWithColor(string message, ConsoleColor color);
    [ExtensionAttribute]
public static void ConsoleWithColor(Action handler, ConsoleColor color);
    public static SecureString ReadPassword();
}
[ExtensionAttribute]
public static class Ecng.Common.Converter : object {
    private static Dictionary`2<Type, DbType> _dbTypes;
    private static Dictionary`2<string, Type> _sharpAliases;
    private static Dictionary`2<Type, string> _sharpAliasesByValue;
    private static Dictionary`2<string, Type> _typeCache;
    private static Dictionary`2<ValueTuple`2<Type, Type>, Delegate> _typedConverters;
    private static Dictionary`2<ValueTuple`2<Type, Type>, Func`2<object, object>> _typedConverters2;
    private static Converter();
    public static void AddTypedConverter(Func`2<TFrom, TTo> converter);
    public static void AddTypedConverter(ValueTuple`2<Type, Type> key, Func`2<object, object> converter);
    public static Func`2<TFrom, TTo> GetTypedConverter();
    public static Func`2<object, object> GetTypedConverter(Type from, Type to);
    [ExtensionAttribute]
public static string GetHost(EndPoint endPoint);
    [ExtensionAttribute]
public static EndPoint SetHost(EndPoint endPoint, string host);
    [ExtensionAttribute]
public static int GetPort(EndPoint endPoint);
    [ExtensionAttribute]
public static EndPoint SetPort(EndPoint endPoint, int port);
    [ExtensionAttribute]
public static TTo TypedTo(TFrom from);
    private static bool TryGetTypedConverter(Type from, Type to, Func`2& typedConverter);
    [ExtensionAttribute]
public static object To(object value, Type destinationType);
    private static bool ArrayCovariance(Array source, Type destinationType, Object& result);
    private static bool FinalTry(Object& value, Type sourceType, Type destinationType);
    [ExtensionAttribute]
public static T To(object value);
    public static void AddCSharpAlias(Type type, string alias);
    [ExtensionAttribute]
public static string TryGetCSharpAlias(Type type);
    [ExtensionAttribute]
public static Type TryGetTypeByCSharpAlias(string alias);
    [ExtensionAttribute]
public static T DoInCulture(CultureInfo cultureInfo, Func`1<T> func);
    [ExtensionAttribute]
public static void DoInCulture(CultureInfo cultureInfo, Action action);
    [ExtensionAttribute]
public static Func`1<T> AsInvariant(Func`1<T> func);
    [ExtensionAttribute]
public static Action AsInvariant(Action action);
    [ExtensionAttribute]
public static string ToRadix(long decimalNumber, int radix);
    [ExtensionAttribute]
public static Byte[] ChangeOrder(Byte[] bytes, int length, bool isLittleEndian, int pos);
    [CompilerGeneratedAttribute]
internal static SecureString <.cctor>g__Secure|6_112(Char[] input);
    [CompilerGeneratedAttribute]
internal static Type <To>g__GetValueType|17_0(<>c__DisplayClass17_0& );
    [CompilerGeneratedAttribute]
internal static bool <FinalTry>g__IsConversion|21_0(MethodInfo mi);
}
public enum Ecng.Common.CountryCodes : Enum {
    public int value__;
    public static CountryCodes Abkhazia;
    public static CountryCodes AF;
    public static CountryCodes AX;
    public static CountryCodes AL;
    public static CountryCodes DZ;
    public static CountryCodes AS;
    public static CountryCodes AD;
    public static CountryCodes AO;
    public static CountryCodes AI;
    public static CountryCodes AQ;
    public static CountryCodes AG;
    public static CountryCodes AR;
    public static CountryCodes AM;
    public static CountryCodes AW;
    public static CountryCodes AU;
    public static CountryCodes AT;
    public static CountryCodes AZ;
    public static CountryCodes BS;
    public static CountryCodes BH;
    public static CountryCodes BD;
    public static CountryCodes BB;
    public static CountryCodes BasqueCountry;
    public static CountryCodes BY;
    public static CountryCodes BE;
    public static CountryCodes BZ;
    public static CountryCodes BJ;
    public static CountryCodes BM;
    public static CountryCodes BT;
    public static CountryCodes BO;
    public static CountryCodes BA;
    public static CountryCodes BW;
    public static CountryCodes BR;
    public static CountryCodes BritishAntarcticTerritory;
    public static CountryCodes VG;
    public static CountryCodes BN;
    public static CountryCodes BG;
    public static CountryCodes BF;
    public static CountryCodes BI;
    public static CountryCodes KH;
    public static CountryCodes CM;
    public static CountryCodes CA;
    public static CountryCodes CV;
    public static CountryCodes KY;
    public static CountryCodes CF;
    public static CountryCodes TD;
    public static CountryCodes CL;
    public static CountryCodes CN;
    public static CountryCodes CX;
    public static CountryCodes CC;
    public static CountryCodes CO;
    public static CountryCodes Commonwealth;
    public static CountryCodes KM;
    public static CountryCodes CG;
    public static CountryCodes CD;
    public static CountryCodes CK;
    public static CountryCodes CR;
    public static CountryCodes CI;
    public static CountryCodes HR;
    public static CountryCodes CU;
    public static CountryCodes CW;
    public static CountryCodes CY;
    public static CountryCodes CZ;
    public static CountryCodes DK;
    public static CountryCodes DJ;
    public static CountryCodes DM;
    public static CountryCodes DO;
    public static CountryCodes EC;
    public static CountryCodes EG;
    public static CountryCodes SV;
    public static CountryCodes GQ;
    public static CountryCodes ER;
    public static CountryCodes EE;
    public static CountryCodes ET;
    public static CountryCodes EU;
    public static CountryCodes FK;
    public static CountryCodes FO;
    public static CountryCodes FJ;
    public static CountryCodes FI;
    public static CountryCodes FR;
    public static CountryCodes PF;
    public static CountryCodes TF;
    public static CountryCodes GA;
    public static CountryCodes GM;
    public static CountryCodes GE;
    public static CountryCodes DE;
    public static CountryCodes GH;
    public static CountryCodes GI;
    public static CountryCodes Gosquared;
    public static CountryCodes GR;
    public static CountryCodes GL;
    public static CountryCodes GD;
    public static CountryCodes GU;
    public static CountryCodes GT;
    public static CountryCodes GG;
    public static CountryCodes GN;
    public static CountryCodes GW;
    public static CountryCodes GY;
    public static CountryCodes HT;
    public static CountryCodes VA;
    public static CountryCodes HN;
    public static CountryCodes HK;
    public static CountryCodes HU;
    public static CountryCodes IS;
    public static CountryCodes IN;
    public static CountryCodes ID;
    public static CountryCodes IR;
    public static CountryCodes IQ;
    public static CountryCodes IE;
    public static CountryCodes IM;
    public static CountryCodes IL;
    public static CountryCodes IT;
    public static CountryCodes JM;
    public static CountryCodes JP;
    public static CountryCodes JE;
    public static CountryCodes JO;
    public static CountryCodes KZ;
    public static CountryCodes KE;
    public static CountryCodes KI;
    public static CountryCodes KP;
    public static CountryCodes KR;
    public static CountryCodes Kosovo;
    public static CountryCodes KW;
    public static CountryCodes KG;
    public static CountryCodes LA;
    public static CountryCodes LV;
    public static CountryCodes LB;
    public static CountryCodes LS;
    public static CountryCodes LR;
    public static CountryCodes LY;
    public static CountryCodes LI;
    public static CountryCodes LT;
    public static CountryCodes LU;
    public static CountryCodes MO;
    public static CountryCodes MK;
    public static CountryCodes MG;
    public static CountryCodes MW;
    public static CountryCodes MY;
    public static CountryCodes MV;
    public static CountryCodes ML;
    public static CountryCodes MT;
    public static CountryCodes Mars;
    public static CountryCodes MH;
    public static CountryCodes MQ;
    public static CountryCodes MR;
    public static CountryCodes MU;
    public static CountryCodes YT;
    public static CountryCodes MX;
    public static CountryCodes FM;
    public static CountryCodes MD;
    public static CountryCodes MC;
    public static CountryCodes MN;
    public static CountryCodes ME;
    public static CountryCodes MS;
    public static CountryCodes MA;
    public static CountryCodes MZ;
    public static CountryCodes MM;
    public static CountryCodes NagornoKarabakh;
    public static CountryCodes NA;
    public static CountryCodes NR;
    public static CountryCodes NP;
    public static CountryCodes NL;
    public static CountryCodes AN;
    public static CountryCodes NC;
    public static CountryCodes NZ;
    public static CountryCodes NI;
    public static CountryCodes NE;
    public static CountryCodes NG;
    public static CountryCodes NU;
    public static CountryCodes NF;
    public static CountryCodes MP;
    public static CountryCodes NO;
    public static CountryCodes NorthernCyprus;
    public static CountryCodes OM;
    public static CountryCodes PK;
    public static CountryCodes PW;
    public static CountryCodes PS;
    public static CountryCodes PA;
    public static CountryCodes PG;
    public static CountryCodes PY;
    public static CountryCodes PE;
    public static CountryCodes PH;
    public static CountryCodes PN;
    public static CountryCodes PL;
    public static CountryCodes PT;
    public static CountryCodes PR;
    public static CountryCodes QA;
    public static CountryCodes RO;
    public static CountryCodes RU;
    public static CountryCodes RW;
    public static CountryCodes SH;
    public static CountryCodes KN;
    public static CountryCodes LC;
    public static CountryCodes VC;
    public static CountryCodes BL;
    public static CountryCodes MF;
    public static CountryCodes WS;
    public static CountryCodes SM;
    public static CountryCodes ST;
    public static CountryCodes SA;
    public static CountryCodes Scotland;
    public static CountryCodes SN;
    public static CountryCodes RS;
    public static CountryCodes SC;
    public static CountryCodes SL;
    public static CountryCodes SG;
    public static CountryCodes SK;
    public static CountryCodes SI;
    public static CountryCodes SB;
    public static CountryCodes SO;
    public static CountryCodes Somaliland;
    public static CountryCodes ZA;
    public static CountryCodes GS;
    public static CountryCodes SouthOssetia;
    public static CountryCodes SS;
    public static CountryCodes ES;
    public static CountryCodes LK;
    public static CountryCodes SD;
    public static CountryCodes SR;
    public static CountryCodes SZ;
    public static CountryCodes SE;
    public static CountryCodes CH;
    public static CountryCodes SY;
    public static CountryCodes TW;
    public static CountryCodes TJ;
    public static CountryCodes TZ;
    public static CountryCodes TH;
    public static CountryCodes TL;
    public static CountryCodes TG;
    public static CountryCodes TK;
    public static CountryCodes TO;
    public static CountryCodes TT;
    public static CountryCodes TN;
    public static CountryCodes TR;
    public static CountryCodes TM;
    public static CountryCodes TC;
    public static CountryCodes TV;
    public static CountryCodes UG;
    public static CountryCodes UA;
    public static CountryCodes AE;
    public static CountryCodes GB;
    public static CountryCodes US;
    public static CountryCodes UY;
    public static CountryCodes UZ;
    public static CountryCodes VU;
    public static CountryCodes VE;
    public static CountryCodes VN;
    public static CountryCodes VI;
    public static CountryCodes Wales;
    public static CountryCodes WF;
    public static CountryCodes EH;
    public static CountryCodes YE;
    public static CountryCodes ZM;
    public static CountryCodes ZW;
}
public class Ecng.Common.CryptoAttribute : Attribute {
}
public abstract class Ecng.Common.CsvFileCommon : object {
    protected Char[] SpecialChars;
    private static int DelimiterIndex;
    private static int QuoteIndex;
    public char Delimiter { get; public set; }
    public char Quote { get; public set; }
    public char get_Delimiter();
    public void set_Delimiter(char value);
    public char get_Quote();
    public void set_Quote(char value);
}
public class Ecng.Common.CsvFileReader : CsvFileCommon {
    private TextReader Reader;
    public string CurrLine;
    private int CurrPos;
    private EmptyLineBehavior EmptyLineBehavior;
    private string _lineSeparator;
    public CsvFileReader(Stream stream, string lineSeparator, EmptyLineBehavior emptyLineBehavior);
    public CsvFileReader(string path, string lineSeparator, EmptyLineBehavior emptyLineBehavior);
    public CsvFileReader(TextReader reader, string lineSeparator, EmptyLineBehavior emptyLineBehavior);
    public bool ReadRow(List`1<string> columns);
    private string ReadQuotedColumn();
    private string ReadUnquotedColumn();
    public sealed virtual void Dispose();
}
public class Ecng.Common.CsvFileWriter : CsvFileCommon {
    [CompilerGeneratedAttribute]
private StreamWriter <Writer>k__BackingField;
    private string OneQuote;
    private string TwoQuotes;
    private string QuotedFormat;
    public StreamWriter Writer { get; }
    public CsvFileWriter(Stream stream, Encoding encoding);
    public CsvFileWriter(string path);
    [CompilerGeneratedAttribute]
public StreamWriter get_Writer();
    public void WriteRow(IEnumerable`1<string> columns);
    public string Encode(string column);
    public sealed virtual void Dispose();
}
[DataContractAttribute]
public class Ecng.Common.Currency : Equatable`1<Currency> {
    [CompilerGeneratedAttribute]
private CurrencyTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Value>k__BackingField;
    [DataMemberAttribute]
public CurrencyTypes Type { get; public set; }
    [DataMemberAttribute]
public decimal Value { get; public set; }
    [CompilerGeneratedAttribute]
public CurrencyTypes get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CurrencyTypes value);
    [CompilerGeneratedAttribute]
public decimal get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(decimal value);
    public virtual Currency Clone();
    protected virtual bool OnEquals(Currency other);
    public virtual int GetHashCode();
    public virtual string ToString();
    [ObsoleteAttribute]
public static Currency op_Implicit(decimal value);
    [ObsoleteAttribute]
public static decimal op_Explicit(Currency value);
    private static void CheckArgs(Currency c1, Currency c2);
    public static Currency op_Addition(Currency c1, Currency c2);
    public static Currency op_Subtraction(Currency c1, Currency c2);
    public static Currency op_Multiply(Currency c1, Currency c2);
    public static Currency op_Division(Currency c1, Currency c2);
}
[ExtensionAttribute]
public static class Ecng.Common.CurrencyHelper : object {
    [ExtensionAttribute]
public static bool IsCrypto(CurrencyTypes type);
    [ExtensionAttribute]
public static Currency ToCurrency(decimal value, CurrencyTypes type);
    [ExtensionAttribute]
public static string GetPrefix(CurrencyTypes currency);
}
[XmlTypeAttribute]
[DataContractAttribute]
public enum Ecng.Common.CurrencyTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CurrencyTypes AFA;
    [EnumMemberAttribute]
public static CurrencyTypes TMT;
    [EnumMemberAttribute]
public static CurrencyTypes UZS;
    [EnumMemberAttribute]
public static CurrencyTypes TJS;
    [EnumMemberAttribute]
public static CurrencyTypes AMD;
    [EnumMemberAttribute]
public static CurrencyTypes XDR;
    [EnumMemberAttribute]
public static CurrencyTypes AZN;
    [EnumMemberAttribute]
public static CurrencyTypes BYR;
    [EnumMemberAttribute]
public static CurrencyTypes BYN;
    [EnumMemberAttribute]
public static CurrencyTypes RON;
    [EnumMemberAttribute]
public static CurrencyTypes BGN;
    [EnumMemberAttribute]
public static CurrencyTypes KGS;
    [EnumMemberAttribute]
public static CurrencyTypes ALL;
    [EnumMemberAttribute]
public static CurrencyTypes DZD;
    [EnumMemberAttribute]
public static CurrencyTypes ARS;
    [EnumMemberAttribute]
public static CurrencyTypes AWG;
    [EnumMemberAttribute]
public static CurrencyTypes AUD;
    [EnumMemberAttribute]
public static CurrencyTypes BSD;
    [EnumMemberAttribute]
public static CurrencyTypes BHD;
    [EnumMemberAttribute]
public static CurrencyTypes BDT;
    [EnumMemberAttribute]
public static CurrencyTypes BBD;
    [EnumMemberAttribute]
public static CurrencyTypes BZD;
    [EnumMemberAttribute]
public static CurrencyTypes BMD;
    [EnumMemberAttribute]
public static CurrencyTypes BTN;
    [EnumMemberAttribute]
public static CurrencyTypes BOB;
    [EnumMemberAttribute]
public static CurrencyTypes BWP;
    [EnumMemberAttribute]
public static CurrencyTypes BRL;
    [EnumMemberAttribute]
public static CurrencyTypes GBP;
    [EnumMemberAttribute]
public static CurrencyTypes BND;
    [EnumMemberAttribute]
public static CurrencyTypes BIF;
    [EnumMemberAttribute]
public static CurrencyTypes XOF;
    [EnumMemberAttribute]
public static CurrencyTypes XAF;
    [EnumMemberAttribute]
public static CurrencyTypes KHR;
    [EnumMemberAttribute]
public static CurrencyTypes CAD;
    [EnumMemberAttribute]
public static CurrencyTypes CVE;
    [EnumMemberAttribute]
public static CurrencyTypes KYD;
    [EnumMemberAttribute]
public static CurrencyTypes CLP;
    [EnumMemberAttribute]
public static CurrencyTypes CNY;
    [EnumMemberAttribute]
public static CurrencyTypes CNH;
    [EnumMemberAttribute]
public static CurrencyTypes COP;
    [EnumMemberAttribute]
public static CurrencyTypes KMF;
    [EnumMemberAttribute]
public static CurrencyTypes CRC;
    [EnumMemberAttribute]
public static CurrencyTypes HRK;
    [EnumMemberAttribute]
public static CurrencyTypes CUP;
    [EnumMemberAttribute]
public static CurrencyTypes CYP;
    [EnumMemberAttribute]
public static CurrencyTypes CZK;
    [EnumMemberAttribute]
public static CurrencyTypes DKK;
    [EnumMemberAttribute]
public static CurrencyTypes DJF;
    [EnumMemberAttribute]
public static CurrencyTypes DOP;
    [EnumMemberAttribute]
public static CurrencyTypes XCD;
    [EnumMemberAttribute]
public static CurrencyTypes EGP;
    [EnumMemberAttribute]
public static CurrencyTypes SVC;
    [EnumMemberAttribute]
public static CurrencyTypes EEK;
    [EnumMemberAttribute]
public static CurrencyTypes ETB;
    [EnumMemberAttribute]
public static CurrencyTypes EUR;
    [EnumMemberAttribute]
public static CurrencyTypes FKP;
    [EnumMemberAttribute]
public static CurrencyTypes GMD;
    [EnumMemberAttribute]
public static CurrencyTypes GHC;
    [EnumMemberAttribute]
public static CurrencyTypes GIP;
    [EnumMemberAttribute]
public static CurrencyTypes XAU;
    [EnumMemberAttribute]
public static CurrencyTypes GTQ;
    [EnumMemberAttribute]
public static CurrencyTypes GNF;
    [EnumMemberAttribute]
public static CurrencyTypes GYD;
    [EnumMemberAttribute]
public static CurrencyTypes HTG;
    [EnumMemberAttribute]
public static CurrencyTypes HNL;
    [EnumMemberAttribute]
public static CurrencyTypes HKD;
    [EnumMemberAttribute]
public static CurrencyTypes HUF;
    [EnumMemberAttribute]
public static CurrencyTypes ISK;
    [EnumMemberAttribute]
public static CurrencyTypes INR;
    [EnumMemberAttribute]
public static CurrencyTypes IDR;
    [EnumMemberAttribute]
public static CurrencyTypes IQD;
    [EnumMemberAttribute]
public static CurrencyTypes ILS;
    [EnumMemberAttribute]
public static CurrencyTypes JMD;
    [EnumMemberAttribute]
public static CurrencyTypes JPY;
    [EnumMemberAttribute]
public static CurrencyTypes JOD;
    [EnumMemberAttribute]
public static CurrencyTypes KZT;
    [EnumMemberAttribute]
public static CurrencyTypes KES;
    [EnumMemberAttribute]
public static CurrencyTypes KRW;
    [EnumMemberAttribute]
public static CurrencyTypes KWD;
    [EnumMemberAttribute]
public static CurrencyTypes LAK;
    [EnumMemberAttribute]
public static CurrencyTypes LVL;
    [EnumMemberAttribute]
public static CurrencyTypes LBP;
    [EnumMemberAttribute]
public static CurrencyTypes LSL;
    [EnumMemberAttribute]
public static CurrencyTypes LRD;
    [EnumMemberAttribute]
public static CurrencyTypes LYD;
    [EnumMemberAttribute]
public static CurrencyTypes LTL;
    [EnumMemberAttribute]
public static CurrencyTypes MOP;
    [EnumMemberAttribute]
public static CurrencyTypes MKD;
    [EnumMemberAttribute]
public static CurrencyTypes MGF;
    [EnumMemberAttribute]
public static CurrencyTypes MWK;
    [EnumMemberAttribute]
public static CurrencyTypes MYR;
    [EnumMemberAttribute]
public static CurrencyTypes MVR;
    [EnumMemberAttribute]
public static CurrencyTypes MTL;
    [EnumMemberAttribute]
public static CurrencyTypes MRO;
    [EnumMemberAttribute]
public static CurrencyTypes MUR;
    [EnumMemberAttribute]
public static CurrencyTypes MXN;
    [EnumMemberAttribute]
public static CurrencyTypes MDL;
    [EnumMemberAttribute]
public static CurrencyTypes MNT;
    [EnumMemberAttribute]
public static CurrencyTypes MAD;
    [EnumMemberAttribute]
public static CurrencyTypes MZM;
    [EnumMemberAttribute]
public static CurrencyTypes MMK;
    [EnumMemberAttribute]
public static CurrencyTypes NAD;
    [EnumMemberAttribute]
public static CurrencyTypes NPR;
    [EnumMemberAttribute]
public static CurrencyTypes ANG;
    [EnumMemberAttribute]
public static CurrencyTypes NZD;
    [EnumMemberAttribute]
public static CurrencyTypes NIO;
    [EnumMemberAttribute]
public static CurrencyTypes NGN;
    [EnumMemberAttribute]
public static CurrencyTypes KPW;
    [EnumMemberAttribute]
public static CurrencyTypes NOK;
    [EnumMemberAttribute]
public static CurrencyTypes OMR;
    [EnumMemberAttribute]
public static CurrencyTypes XPF;
    [EnumMemberAttribute]
public static CurrencyTypes PKR;
    [EnumMemberAttribute]
public static CurrencyTypes XPD;
    [EnumMemberAttribute]
public static CurrencyTypes PAB;
    [EnumMemberAttribute]
public static CurrencyTypes PGK;
    [EnumMemberAttribute]
public static CurrencyTypes PYG;
    [EnumMemberAttribute]
public static CurrencyTypes PEN;
    [EnumMemberAttribute]
public static CurrencyTypes PHP;
    [EnumMemberAttribute]
public static CurrencyTypes XPT;
    [EnumMemberAttribute]
public static CurrencyTypes PLN;
    [EnumMemberAttribute]
public static CurrencyTypes QAR;
    [EnumMemberAttribute]
public static CurrencyTypes RUB;
    [EnumMemberAttribute]
public static CurrencyTypes WST;
    [EnumMemberAttribute]
public static CurrencyTypes STD;
    [EnumMemberAttribute]
public static CurrencyTypes SAR;
    [EnumMemberAttribute]
public static CurrencyTypes SCR;
    [EnumMemberAttribute]
public static CurrencyTypes SLL;
    [EnumMemberAttribute]
public static CurrencyTypes XAG;
    [EnumMemberAttribute]
public static CurrencyTypes SGD;
    [EnumMemberAttribute]
public static CurrencyTypes SKK;
    [EnumMemberAttribute]
public static CurrencyTypes SIT;
    [EnumMemberAttribute]
public static CurrencyTypes SBD;
    [EnumMemberAttribute]
public static CurrencyTypes SOS;
    [EnumMemberAttribute]
public static CurrencyTypes ZAR;
    [EnumMemberAttribute]
public static CurrencyTypes LKR;
    [EnumMemberAttribute]
public static CurrencyTypes SHP;
    [EnumMemberAttribute]
public static CurrencyTypes SDD;
    [EnumMemberAttribute]
public static CurrencyTypes SRD;
    [EnumMemberAttribute]
public static CurrencyTypes SZL;
    [EnumMemberAttribute]
public static CurrencyTypes SEK;
    [EnumMemberAttribute]
public static CurrencyTypes CHF;
    [EnumMemberAttribute]
public static CurrencyTypes SYP;
    [EnumMemberAttribute]
public static CurrencyTypes TWD;
    [EnumMemberAttribute]
public static CurrencyTypes TZS;
    [EnumMemberAttribute]
public static CurrencyTypes THB;
    [EnumMemberAttribute]
public static CurrencyTypes TOP;
    [EnumMemberAttribute]
public static CurrencyTypes TTD;
    [EnumMemberAttribute]
public static CurrencyTypes TND;
    [EnumMemberAttribute]
public static CurrencyTypes TRL;
    [EnumMemberAttribute]
public static CurrencyTypes USD;
    [EnumMemberAttribute]
public static CurrencyTypes AED;
    [EnumMemberAttribute]
public static CurrencyTypes UGX;
    [EnumMemberAttribute]
public static CurrencyTypes UAH;
    [EnumMemberAttribute]
public static CurrencyTypes UYU;
    [EnumMemberAttribute]
public static CurrencyTypes VUV;
    [EnumMemberAttribute]
public static CurrencyTypes VEB;
    [EnumMemberAttribute]
public static CurrencyTypes VND;
    [EnumMemberAttribute]
public static CurrencyTypes YER;
    [EnumMemberAttribute]
public static CurrencyTypes CSD;
    [EnumMemberAttribute]
public static CurrencyTypes ZMK;
    [EnumMemberAttribute]
public static CurrencyTypes ZWD;
    [EnumMemberAttribute]
public static CurrencyTypes TRY;
    [EnumMemberAttribute]
public static CurrencyTypes XVN;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BTC;
    [EnumMemberAttribute]
public static CurrencyTypes GBX;
    [EnumMemberAttribute]
public static CurrencyTypes GHS;
    [EnumMemberAttribute]
public static CurrencyTypes CNT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ETH;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes LTC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ETC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes USDT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ZEC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes XMR;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ADA;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes MIOTA;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes XRP;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes DASH;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes EOS;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes SAN;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes OMG;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BCH;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes NEO;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ETP;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes QTUM;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes AVT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes EDO;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes DTC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BTG;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes QASH;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes YOYOW;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes GNT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes SNT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes EURT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BAT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes MNA;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes FUN;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ZRX;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes TNB;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes SPK;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes TRX;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes RCN;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes RLC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes AID;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes SNG;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes REP;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes ELF;
    [EnumMemberAttribute]
public static CurrencyTypes ZAC;
    [EnumMemberAttribute]
public static CurrencyTypes DEM;
    [EnumMemberAttribute]
public static CurrencyTypes LUF;
    [EnumMemberAttribute]
public static CurrencyTypes MXP;
    [EnumMemberAttribute]
public static CurrencyTypes MGA;
    [EnumMemberAttribute]
public static CurrencyTypes AOA;
    [EnumMemberAttribute]
public static CurrencyTypes FJD;
    [EnumMemberAttribute]
public static CurrencyTypes CDF;
    [EnumMemberAttribute]
public static CurrencyTypes SDG;
    [EnumMemberAttribute]
public static CurrencyTypes MRU;
    [EnumMemberAttribute]
public static CurrencyTypes IRR;
    [EnumMemberAttribute]
public static CurrencyTypes ZMW;
    [EnumMemberAttribute]
public static CurrencyTypes GEL;
    [EnumMemberAttribute]
public static CurrencyTypes STN;
    [EnumMemberAttribute]
public static CurrencyTypes VES;
    [EnumMemberAttribute]
public static CurrencyTypes SSP;
    [EnumMemberAttribute]
public static CurrencyTypes ERN;
    [EnumMemberAttribute]
public static CurrencyTypes BAM;
    [EnumMemberAttribute]
public static CurrencyTypes RSD;
    [EnumMemberAttribute]
public static CurrencyTypes RWF;
    [EnumMemberAttribute]
public static CurrencyTypes MZN;
    [EnumMemberAttribute]
public static CurrencyTypes AFN;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes USDC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BUSD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes DAI;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes TUSD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes USDP;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes FRAX;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes USDD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes GUSD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes XSGD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes PAXG;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes XAUT;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes LUSD;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes MBC;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes UST;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes BRZ;
    [EnumMemberAttribute]
[CryptoAttribute]
public static CurrencyTypes USDE;
}
public class Ecng.Common.DateTimeOffsetOperator : BaseOperator`1<DateTimeOffset> {
    public virtual DateTimeOffset Add(DateTimeOffset first, DateTimeOffset second);
    public virtual DateTimeOffset Subtract(DateTimeOffset first, DateTimeOffset second);
    public virtual DateTimeOffset Multiply(DateTimeOffset first, DateTimeOffset second);
    public virtual DateTimeOffset Divide(DateTimeOffset first, DateTimeOffset second);
    public virtual int Compare(DateTimeOffset first, DateTimeOffset second);
}
public class Ecng.Common.DateTimeOperator : BaseOperator`1<DateTime> {
    public virtual DateTime Add(DateTime first, DateTime second);
    public virtual DateTime Subtract(DateTime first, DateTime second);
    public virtual DateTime Multiply(DateTime first, DateTime second);
    public virtual DateTime Divide(DateTime first, DateTime second);
    public virtual int Compare(DateTime first, DateTime second);
}
public class Ecng.Common.DecimalOperator : BaseOperator`1<decimal> {
    public virtual decimal Add(decimal first, decimal second);
    public virtual decimal Subtract(decimal first, decimal second);
    public virtual decimal Multiply(decimal first, decimal second);
    public virtual decimal Divide(decimal first, decimal second);
    public virtual int Compare(decimal first, decimal second);
}
[ExtensionAttribute]
public static class Ecng.Common.DelegateHelper : object {
    [ExtensionAttribute]
public static void Do(Action action, Action`1<Exception> error);
    [ExtensionAttribute]
public static void DoAsync(Action action, Action`1<Exception> error);
    [ExtensionAttribute]
public static void Invoke(PropertyChangedEventHandler handler, object sender, string name);
    [ExtensionAttribute]
public static void Invoke(PropertyChangingEventHandler handler, object sender, string name);
    [ExtensionAttribute]
public static TDelegate CreateDelegate(MethodInfo method);
    [ExtensionAttribute]
public static TDelegate CreateDelegate(MethodInfo method, TInstance instance);
    [ExtensionAttribute]
public static TDelegate AddDelegate(TDelegate source, TDelegate value);
    [ExtensionAttribute]
public static TDelegate RemoveDelegate(TDelegate source, TDelegate value);
    [ExtensionAttribute]
public static void RemoveAllDelegates(TDelegate source);
    [ExtensionAttribute]
public static IEnumerable`1<TDelegate> GetInvocationList(TDelegate delegate);
}
public abstract class Ecng.Common.Disposable : object {
    private SyncObject _lock;
    private DisposeState _state;
    [CompilerGeneratedAttribute]
private Action Disposed;
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool IsDisposed { get; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool IsDisposeStarted { get; }
    public bool get_IsDisposed();
    public bool get_IsDisposeStarted();
    [CompilerGeneratedAttribute]
public void add_Disposed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(Action value);
    public virtual void Dispose();
    protected virtual void DisposeManaged();
    protected virtual void DisposeNative();
    protected void ThrowIfDisposeStarted();
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
}
[ExtensionAttribute]
public static class Ecng.Common.DisposableHelper : object {
    [ExtensionAttribute]
public static void DisposeAll(IEnumerable`1<IDisposable> disposables);
    [ExtensionAttribute]
public static Disposable MakeDisposable(T unmanagedData, Action`1<T> disposeAction);
}
public static class Ecng.Common.Do : object {
    public static T Invariant(Func`1<T> func);
    public static void Invariant(Action action);
}
public class Ecng.Common.DoubleOperator : BaseOperator`1<double> {
    public virtual double Add(double first, double second);
    public virtual double Subtract(double first, double second);
    public virtual double Multiply(double first, double second);
    public virtual double Divide(double first, double second);
    public virtual int Compare(double first, double second);
}
public class Ecng.Common.DumpableStream : Stream {
    private Stream _underlying;
    [CompilerGeneratedAttribute]
private AllocationArray`1<byte> <ReadDump>k__BackingField;
    [CompilerGeneratedAttribute]
private AllocationArray`1<byte> <WriteDump>k__BackingField;
    public AllocationArray`1<byte> ReadDump { get; }
    public AllocationArray`1<byte> WriteDump { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DumpableStream(Stream underlying);
    public Byte[] GetReadDump();
    public Byte[] GetWriteDump();
    private static Byte[] GetDump(AllocationArray`1<byte> dump);
    [CompilerGeneratedAttribute]
public AllocationArray`1<byte> get_ReadDump();
    [CompilerGeneratedAttribute]
public AllocationArray`1<byte> get_WriteDump();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
public class Ecng.Common.DuplicateException : InvalidOperationException {
    public DuplicateException(string message);
}
public enum Ecng.Common.EmptyLineBehavior : Enum {
    public int value__;
    public static EmptyLineBehavior NoColumns;
    public static EmptyLineBehavior EmptyColumn;
    public static EmptyLineBehavior Ignore;
    public static EmptyLineBehavior EndOfFile;
}
public abstract class Ecng.Common.Enumerable`1 : object {
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual IEnumerator`1<T> GetEnumerator();
}
[ExtensionAttribute]
public static class Ecng.Common.Enumerator : object {
    public static Type GetEnumBaseType();
    [ExtensionAttribute]
public static Type GetEnumBaseType(Type enumType);
    public static string GetName(T value);
    [ExtensionAttribute]
public static string GetName(Enum value);
    public static IEnumerable`1<T> GetValues();
    [ExtensionAttribute]
public static IEnumerable`1<T> ExcludeObsolete(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static IEnumerable`1<object> GetValues(Type enumType);
    public static IEnumerable`1<string> GetNames();
    [ExtensionAttribute]
public static IEnumerable`1<string> GetNames(Type enumType);
    [ExtensionAttribute]
public static bool IsDefined(T enumValue);
    [ExtensionAttribute]
public static bool IsFlags(Type enumType);
    [ExtensionAttribute]
public static IEnumerable`1<object> SplitMask2(object maskedValue);
    [ExtensionAttribute]
public static IEnumerable`1<T> SplitMask(T maskedValue);
    public static T JoinMask();
    [ExtensionAttribute]
public static T JoinMask(IEnumerable`1<T> values);
    public static T Remove(T enumSource, T enumPart);
    [ExtensionAttribute]
public static T Remove(Enum enumSource, T enumPart);
    [ObsoleteAttribute("Use HasFlags method.")]
public static bool Contains(T enumSource, T enumPart);
    public static bool HasFlags(T enumSource, T enumPart);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Enum.HasFlag method.")]
public static bool Contains(Enum enumSource, Enum enumPart);
    [ExtensionAttribute]
public static bool TryParse(string str, T& value, bool ignoreCase);
    [ExtensionAttribute]
public static TAttribute GetAttributeOfType(object enumVal);
    [ExtensionAttribute]
public static bool IsEnumBrowsable(object enumVal);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExcludeNonBrowsable(IEnumerable`1<T> values);
}
public abstract class Ecng.Common.Equatable`1 : Cloneable`1<T> {
    public static bool op_Inequality(Equatable`1<T> left, T right);
    public static bool op_Inequality(Equatable`1<T> left, Equatable`1<T> right);
    public static bool op_Equality(Equatable`1<T> left, T right);
    public static bool op_Equality(Equatable`1<T> left, Equatable`1<T> right);
    public virtual bool Equals(T other);
    public virtual int CompareTo(T value);
    public sealed virtual int CompareTo(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual bool OnEquals(T other);
}
public class Ecng.Common.ExpiredException : InvalidOperationException {
    public ExpiredException(string message);
}
public abstract class Ecng.Common.FactoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FactoryType>k__BackingField;
    public Type FactoryType { get; }
    protected FactoryAttribute(Type factoryType);
    [CompilerGeneratedAttribute]
public Type get_FactoryType();
}
public static class Ecng.Common.FastActivator`1 : object {
    [CompilerGeneratedAttribute]
private static bool <NotSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<T> <CreateObject>k__BackingField;
    public static bool NotSupported { get; public set; }
    public static Func`1<T> CreateObject { get; }
    private static FastActivator`1();
    [CompilerGeneratedAttribute]
public static bool get_NotSupported();
    [CompilerGeneratedAttribute]
public static void set_NotSupported(bool value);
    [CompilerGeneratedAttribute]
public static Func`1<T> get_CreateObject();
}
public class Ecng.Common.FastCsvReader : object {
    private static Func`2<string, bool> _toBool;
    private static Func`2<string, double> _toDouble;
    private static int _buffSize;
    private Char[] _buffer;
    private int _bufferLen;
    private int _bufferPos;
    private Char[] _line;
    private int _lineLen;
    private RefPair`2[] _columnPos;
    private Char[] _lineSeparatorChars;
    private int _lineSeparatorCharPos;
    [CompilerGeneratedAttribute]
private TextReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ColumnSeparator>k__BackingField;
    private int _columnCount;
    private int _columnCurr;
    public TextReader Reader { get; }
    public char ColumnSeparator { get; public set; }
    public string CurrentLine { get; }
    public int ColumnCount { get; }
    public int ColumnCurr { get; }
    public FastCsvReader(Stream stream, Encoding encoding, string lineSeparator);
    public FastCsvReader(string content, string lineSeparator);
    public FastCsvReader(TextReader reader, string lineSeparator);
    private static FastCsvReader();
    [CompilerGeneratedAttribute]
public TextReader get_Reader();
    [CompilerGeneratedAttribute]
public char get_ColumnSeparator();
    [CompilerGeneratedAttribute]
public void set_ColumnSeparator(char value);
    public string get_CurrentLine();
    public int get_ColumnCount();
    public int get_ColumnCurr();
    private RefPair`2<int, int> GetColumnPos();
    public bool NextLine();
    public void Skip(int count);
    public bool ReadBool();
    public Nullable`1<bool> ReadNullableBool();
    public T ReadEnum();
    public Nullable`1<T> ReadNullableEnum();
    public double ReadDouble();
    public Nullable`1<double> ReadNullableDouble();
    public decimal ReadDecimal();
    public Nullable`1<decimal> ReadNullableDecimal();
    public int ReadInt();
    public Nullable`1<int> ReadNullableInt();
    public long ReadLong();
    public Nullable`1<long> ReadNullableLong();
    public string ReadString();
    public DateTime ReadDateTime(string format);
    public Nullable`1<DateTime> ReadNullableDateTime(string format);
    public TimeSpan ReadTimeSpan(string format);
    public Nullable`1<TimeSpan> ReadNullableTimeSpan(string format);
    private RefPair`2<int, int> GetNextColumnPos();
}
public class Ecng.Common.FastDateTimeParser : object {
    private Tuple`2[] _parts;
    private int _yearStart;
    private int _monthStart;
    private int _dayStart;
    private int _hourStart;
    private int _minuteStart;
    private int _secondStart;
    private int _milliStart;
    private int _microStart;
    private int _nanoStart;
    private int _timeZoneStart;
    private bool _isYearTwoChars;
    private bool _isMonthTwoChars;
    private bool _isDayTwoChars;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    public FastDateTimeParser(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
    public DateTime Parse(string input);
    public DateTimeOffset ParseDto(string input);
    public string ToString(DateTime value);
    private static void Append(StringBuilder builder, int value, int size);
    public virtual string ToString();
}
public class Ecng.Common.FastEmitNotSupported : object {
}
public class Ecng.Common.FastTimeSpanParser : object {
    private Tuple`2[] _parts;
    private int _dayStart;
    private int _hourStart;
    private int _minuteStart;
    private int _secondStart;
    private int _milliStart;
    private int _microStart;
    private int _nanoStart;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    public FastTimeSpanParser(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
    public TimeSpan Parse(string input);
    public string ToString(TimeSpan value);
    private static void Append(StringBuilder builder, int value, int size);
    public virtual string ToString();
}
public static class Ecng.Common.FileSizes : object {
    public static int KB;
    public static int MB;
}
[ExtensionAttribute]
public static class Ecng.Common.FileSizesExtensions : object {
    [ExtensionAttribute]
public static long ToKB(long bytes);
    [ExtensionAttribute]
public static long ToMB(long bytes);
    [ExtensionAttribute]
public static long FromKB(long kbytes);
    [ExtensionAttribute]
public static long FromMB(long mbytes);
}
public class Ecng.Common.FloatOperator : BaseOperator`1<float> {
    public virtual float Add(float first, float second);
    public virtual float Subtract(float first, float second);
    public virtual float Multiply(float first, float second);
    public virtual float Divide(float first, float second);
    public virtual int Compare(float first, float second);
}
public class Ecng.Common.ForbiddenException : InvalidOperationException {
    public ForbiddenException(string message);
}
public class Ecng.Common.HexEncoding : Encoding {
    public virtual int GetByteCount(string hexString);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual Byte[] GetBytes(string hexString);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public static Byte[] GetBytes(Char[] chars, int charIndex, int charCount, Int32& discarded);
    public static bool IsHexDigit(char c);
    private static byte HexToByte(string hexString);
}
public interface Ecng.Common.ICloneable`1 {
    public abstract virtual T Clone();
}
public abstract class Ecng.Common.IdGenerator : object {
    public abstract virtual long GetNextId();
}
public class Ecng.Common.IncrementalIdGenerator : IdGenerator {
    private long _current;
    public long Current { get; public set; }
    public long get_Current();
    public void set_Current(long value);
    public virtual long GetNextId();
}
public class Ecng.Common.IntOperator : BaseOperator`1<int> {
    public virtual int Add(int first, int second);
    public virtual int Subtract(int first, int second);
    public virtual int Multiply(int first, int second);
    public virtual int Divide(int first, int second);
    public virtual int Compare(int first, int second);
}
[ExtensionAttribute]
public static class Ecng.Common.IOHelper : object {
    private static String[] _suf;
    public static string DocsVar;
    private static IOHelper();
    public static DirectoryInfo ClearDirectory(string path, Func`2<string, bool> filter);
    public static Task`1<DirectoryInfo> ClearDirectoryAsync(string path, Func`2<string, bool> filter, CancellationToken cancellationToken);
    public static void CopyDirectory(string sourcePath, string destPath);
    [AsyncStateMachineAttribute("Ecng.Common.IOHelper/<CopyDirectoryAsync>d__3")]
public static Task CopyDirectoryAsync(string sourcePath, string destPath, CancellationToken cancellationToken);
    public static string CopyAndMakeWritable(string fileName, string destPath);
    [ExtensionAttribute]
public static string ToFullPath(string path);
    [ExtensionAttribute]
public static string AddRelative(string path, string relativePart);
    public static int Execute(string fileName, string arg, Action`1<string> output, Action`1<string> error, Action`1<ProcessStartInfo> infoHandler, TimeSpan waitForExit, string stdInput, Nullable`1<ProcessPriorityClass> priority);
    [AsyncStateMachineAttribute("Ecng.Common.IOHelper/<ExecuteAsync>d__8")]
public static Task`1<int> ExecuteAsync(string fileName, string arg, Action`1<string> output, Action`1<string> error, Action`1<ProcessStartInfo> infoHandler, string stdInput, Nullable`1<ProcessPriorityClass> priority, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool CreateDirIfNotExists(string fullPath);
    [ExtensionAttribute]
public static string ToHumanReadableFileSize(long byteCount);
    [ExtensionAttribute]
public static void SafeDeleteDir(string path);
    public static string CreateTempDir();
    public static bool CheckInstallation(string path);
    [ExtensionAttribute]
public static string GetRelativePath(string fileFull, string folder);
    public static long GetDiskFreeSpace(string driveName);
    public static void CreateFile(string rootPath, string relativePath, string fileName, Byte[] content);
    public static void DeleteEmptyDirs(string dir);
    [ExtensionAttribute]
public static string ToFullPathIfNeed(string path);
    public static bool BlockDeleteDir(string dir, bool isRecursive, int iterCount, int sleep);
    [ExtensionAttribute]
public static bool OpenLink(string url, bool raiseError);
    public static IEnumerable`1<string> GetDirectories(string path, string searchPattern, SearchOption searchOption);
    [ExtensionAttribute]
public static DateTime GetTimestamp(Assembly assembly);
    public static DateTime GetTimestamp(string filePath);
    [ExtensionAttribute]
public static bool IsDirectory(string path);
    [ExtensionAttribute]
public static void WriteBytes(Stream stream, Byte[] bytes, int len, int pos);
    [ExtensionAttribute]
public static Byte[] ReadBytes(Stream stream, Byte[] buffer, int len, int pos);
    [ExtensionAttribute]
public static byte ReadByteEx(Stream stream, Byte[] buffer);
    [ExtensionAttribute]
public static void WriteByteEx(Stream stream, Byte[] buffer, byte value);
    [ExtensionAttribute]
public static void WriteShort(Stream stream, Byte[] buffer, short value, bool isLittleEndian);
    [ExtensionAttribute]
public static short ReadShort(Stream stream, Byte[] buffer, bool isLittleEndian);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void WriteUShort(Stream stream, Byte[] buffer, ushort value, bool isLittleEndian);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ushort ReadUShort(Stream stream, Byte[] buffer, bool isLittleEndian);
    [ExtensionAttribute]
public static void WriteInt(Stream stream, Byte[] buffer, int value, bool isLittleEndian);
    [ExtensionAttribute]
public static int ReadInt(Stream stream, Byte[] buffer, bool isLittleEndian);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void WriteUInt(Stream stream, Byte[] buffer, UInt32 value, bool isLittleEndian);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 ReadUInt(Stream stream, Byte[] buffer, bool isLittleEndian);
    [ExtensionAttribute]
public static void WriteLong(Stream stream, Byte[] buffer, long value, bool isLittleEndian, int len);
    [ExtensionAttribute]
public static long ReadLong(Stream stream, Byte[] buffer, bool isLittleEndian, int len);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void WriteULong(Stream stream, Byte[] buffer, ulong value, bool isLittleEndian, int len);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ulong ReadULong(Stream stream, Byte[] buffer, bool isLittleEndian, int len);
    [ExtensionAttribute]
public static void CopySync(Stream source, Stream destination, int count);
    [ExtensionAttribute]
public static Byte[] ReadBuffer(Stream stream, int size);
    [IteratorStateMachineAttribute("Ecng.Common.IOHelper/<EnumerateLines>d__45")]
[ExtensionAttribute]
public static IEnumerable`1<string> EnumerateLines(Stream stream, Encoding encoding, bool leaveOpen);
    [ExtensionAttribute]
public static void WriteEx(Stream stream, object value);
    [ExtensionAttribute]
public static void WriteRaw(Stream stream, object value);
    [ExtensionAttribute]
public static void WriteRaw(Stream stream, Byte[] buffer);
    [ExtensionAttribute]
public static T Read(Stream stream);
    [ExtensionAttribute]
public static object Read(Stream stream, Type type);
    [ExtensionAttribute]
public static object Read(Stream stream, Type type, int size);
    public static int SizeOf();
    [ExtensionAttribute]
public static int SizeOf(Type type);
    [ExtensionAttribute]
public static Stream Save(Stream stream, string fileName);
    [ExtensionAttribute]
public static Byte[] Save(Byte[] data, string fileName);
    [ExtensionAttribute]
public static bool TrySave(Byte[] data, string fileName, Action`1<Exception> errorHandler);
    [ExtensionAttribute]
public static void Truncate(StreamWriter writer);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetActualBuffer(MemoryStream stream);
    public static bool CheckDirContainFiles(string path);
    public static bool CheckDirContainsAnything(string path);
    public static bool IsFileLocked(string path);
    [ExtensionAttribute]
public static bool IsPathIsDir(string path);
    [ExtensionAttribute]
public static string NormalizePathNoLowercase(string path);
    [ExtensionAttribute]
public static string NormalizePath(string path, CultureInfo culture);
    public static bool IsPathsEqual(string path1, string path2);
}
public interface Ecng.Common.IOperable`1 {
    public abstract virtual T Add(T other);
    public abstract virtual T Subtract(T other);
    public abstract virtual T Multiply(T other);
    public abstract virtual T Divide(T other);
}
public interface Ecng.Common.IOperator {
    public abstract virtual object Add(object first, object second);
    public abstract virtual object Subtract(object first, object second);
    public abstract virtual object Multiply(object first, object second);
    public abstract virtual object Divide(object first, object second);
}
public interface Ecng.Common.IOperator`1 {
    public abstract virtual T Add(T first, T second);
    public abstract virtual T Subtract(T first, T second);
    public abstract virtual T Multiply(T first, T second);
    public abstract virtual T Divide(T first, T second);
}
public interface Ecng.Common.IRefTuple {
    public IEnumerable`1<object> Values { get; public set; }
    public abstract virtual IEnumerable`1<object> get_Values();
    public abstract virtual void set_Values(IEnumerable`1<object> value);
}
public interface Ecng.Common.ISmartPointer {
    public int Counter { get; }
    public abstract virtual int get_Counter();
    public abstract virtual void IncRef();
    public abstract virtual void DecRef();
}
public class Ecng.Common.LockedException : InvalidOperationException {
    public LockedException(string message);
}
public class Ecng.Common.LongOperator : BaseOperator`1<long> {
    public virtual long Add(long first, long second);
    public virtual long Subtract(long first, long second);
    public virtual long Multiply(long first, long second);
    public virtual long Divide(long first, long second);
    public virtual int Compare(long first, long second);
}
public enum Ecng.Common.LunarPhases : Enum {
    public int value__;
    public static LunarPhases NewMoon;
    public static LunarPhases WaxingCrescent;
    public static LunarPhases FirstQuarter;
    public static LunarPhases WaxingGibbous;
    public static LunarPhases FullMoon;
    public static LunarPhases WaningGibbous;
    public static LunarPhases LastQuarter;
    public static LunarPhases WaningCrescent;
}
[ExtensionAttribute]
public static class Ecng.Common.MathHelper : object {
    private static SyncObject _syncObject;
    private static Dictionary`2<decimal, int> _decimalsCache;
    private static Decimal[] _posPow10;
    private static Decimal[] _negPow10;
    private static double _minValue;
    private static double _maxValue;
    private static MathHelper();
    [ExtensionAttribute]
public static decimal Floor(decimal value, decimal step);
    [ExtensionAttribute]
public static decimal Ceiling(decimal value, decimal step);
    [ExtensionAttribute]
public static decimal Round(decimal value);
    [ExtensionAttribute]
public static decimal Round(decimal value, int digits);
    [ExtensionAttribute]
public static decimal Round(decimal value, decimal digits);
    [ExtensionAttribute]
public static decimal Ceiling(decimal value);
    [ExtensionAttribute]
public static decimal Floor(decimal value);
    [ExtensionAttribute]
public static decimal Round(decimal value, int digits, MidpointRounding rounding);
    [ExtensionAttribute]
public static decimal Round(decimal value, MidpointRounding rounding);
    [ExtensionAttribute]
public static decimal Round(decimal value, decimal step, Nullable`1<int> digits, MidpointRounding rounding);
    [ExtensionAttribute]
public static decimal Truncate(decimal value);
    [ExtensionAttribute]
public static double Truncate(double value);
    [ExtensionAttribute]
public static int DivRem(int a, int b, Int32& result);
    [ExtensionAttribute]
public static long DivRem(long a, long b, Int64& result);
    [ExtensionAttribute]
public static double Round(double value, int digits, MidpointRounding rounding);
    [ExtensionAttribute]
public static double Round(double value, MidpointRounding rounding);
    [ExtensionAttribute]
public static long BigMul(int x, int y);
    [ExtensionAttribute]
public static long Ceiling(double value);
    [ExtensionAttribute]
public static long Floor(double value);
    [ExtensionAttribute]
public static int Floor(int value, int step);
    [ExtensionAttribute]
public static long Floor(long value, long step);
    [ExtensionAttribute]
public static float Floor(float value, float step);
    [ExtensionAttribute]
public static double Floor(double value, double step);
    [ExtensionAttribute]
public static short Abs(short value);
    [ExtensionAttribute]
public static int Abs(int value);
    [ExtensionAttribute]
public static long Abs(long value);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static sbyte Abs(sbyte value);
    [ExtensionAttribute]
public static float Abs(float value);
    [ExtensionAttribute]
public static double Abs(double value);
    [ExtensionAttribute]
public static decimal Abs(decimal value);
    [ExtensionAttribute]
public static TimeSpan Abs(TimeSpan value);
    [ExtensionAttribute]
public static short Min(short value1, short value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ushort Min(ushort value1, ushort value2);
    [ExtensionAttribute]
public static int Min(int value1, int value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 Min(UInt32 value1, UInt32 value2);
    [ExtensionAttribute]
public static long Min(long value1, long value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ulong Min(ulong value1, ulong value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static sbyte Min(sbyte value1, sbyte value2);
    [ExtensionAttribute]
public static byte Min(byte value1, byte value2);
    [ExtensionAttribute]
public static float Min(float value1, float value2);
    [ExtensionAttribute]
public static double Min(double value1, double value2);
    [ExtensionAttribute]
public static decimal Min(decimal value1, decimal value2);
    [ExtensionAttribute]
public static TimeSpan Min(TimeSpan value1, TimeSpan value2);
    [ExtensionAttribute]
public static DateTime Min(DateTime value1, DateTime value2);
    [ExtensionAttribute]
public static DateTimeOffset Min(DateTimeOffset value1, DateTimeOffset value2);
    [ExtensionAttribute]
public static short Max(short value1, short value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ushort Max(ushort value1, ushort value2);
    [ExtensionAttribute]
public static int Max(int value1, int value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 Max(UInt32 value1, UInt32 value2);
    [ExtensionAttribute]
public static long Max(long value1, long value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ulong Max(ulong value1, ulong value2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static sbyte Max(sbyte value1, sbyte value2);
    [ExtensionAttribute]
public static byte Max(byte value1, byte value2);
    [ExtensionAttribute]
public static float Max(float value1, float value2);
    [ExtensionAttribute]
public static double Max(double value1, double value2);
    [ExtensionAttribute]
public static decimal Max(decimal value1, decimal value2);
    [ExtensionAttribute]
public static TimeSpan Max(TimeSpan value1, TimeSpan value2);
    [ExtensionAttribute]
public static DateTime Max(DateTime value1, DateTime value2);
    [ExtensionAttribute]
public static DateTimeOffset Max(DateTimeOffset value1, DateTimeOffset value2);
    [ExtensionAttribute]
public static double Round(double value);
    [ExtensionAttribute]
public static double Round(double value, int digits);
    [ExtensionAttribute]
public static double Sqrt(double value);
    [ExtensionAttribute]
public static decimal Pow(decimal x, decimal y);
    [ExtensionAttribute]
public static int Pow(int x, int y);
    [ExtensionAttribute]
public static double Pow(double x, double y);
    [ExtensionAttribute]
public static double Acos(double value);
    [ExtensionAttribute]
public static decimal Acos(decimal value);
    [ExtensionAttribute]
public static double Asin(double value);
    [ExtensionAttribute]
public static decimal Asin(decimal value);
    [ExtensionAttribute]
public static double Atan(double value);
    [ExtensionAttribute]
public static decimal Atan(decimal value);
    [ExtensionAttribute]
public static double Asin(double x, double y);
    [ExtensionAttribute]
public static decimal Asin(decimal x, decimal y);
    [ExtensionAttribute]
public static double Cos(double value);
    [ExtensionAttribute]
public static decimal Cos(decimal value);
    [ExtensionAttribute]
public static double Cosh(double value);
    [ExtensionAttribute]
public static decimal Cosh(decimal value);
    [ExtensionAttribute]
public static double Sin(double value);
    [ExtensionAttribute]
public static decimal Sin(decimal value);
    [ExtensionAttribute]
public static double Sinh(double value);
    [ExtensionAttribute]
public static decimal Sinh(decimal value);
    [ExtensionAttribute]
public static double Tan(double value);
    [ExtensionAttribute]
public static decimal Tan(decimal value);
    [ExtensionAttribute]
public static double Tanh(double value);
    [ExtensionAttribute]
public static decimal Tanh(decimal value);
    [ExtensionAttribute]
public static double Exp(double value);
    [ExtensionAttribute]
public static decimal Exp(decimal value);
    [ExtensionAttribute]
public static double Remainder(double x, double y);
    [ExtensionAttribute]
public static decimal Remainder(decimal x, decimal y);
    [ExtensionAttribute]
public static double Log(double value, double newBase);
    [ExtensionAttribute]
public static decimal Log(decimal value, decimal newBase);
    [ExtensionAttribute]
public static double Log(double value);
    [ExtensionAttribute]
public static decimal Log(decimal value);
    [ExtensionAttribute]
public static double Log10(double value);
    [ExtensionAttribute]
public static decimal Log10(decimal value);
    [ExtensionAttribute]
public static int Sign(short value);
    [ExtensionAttribute]
public static int Sign(int value);
    [ExtensionAttribute]
public static int Sign(long value);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static int Sign(sbyte value);
    [ExtensionAttribute]
public static int Sign(float value);
    [ExtensionAttribute]
public static int Sign(double value);
    [ExtensionAttribute]
public static int Sign(decimal value);
    [ExtensionAttribute]
public static int Sign(TimeSpan value);
    [ExtensionAttribute]
public static int Floor(float value);
    [ExtensionAttribute]
public static int Ceiling(float value);
    [ExtensionAttribute]
public static Int32[] GetParts(long value);
    [ExtensionAttribute]
public static Double[] GetParts(double value);
    [ExtensionAttribute]
public static Single[] GetParts(float value);
    [ExtensionAttribute]
public static bool GetBit(int value, int index);
    [ExtensionAttribute]
public static int SetBit(int value, int index, bool bit);
    [ExtensionAttribute]
public static bool GetBit(long value, int index);
    [ExtensionAttribute]
public static long SetBit(long value, int index, bool bit);
    [ExtensionAttribute]
public static bool GetBit(byte value, int index);
    [ExtensionAttribute]
public static byte SetBit(byte value, int index, bool bit);
    [ExtensionAttribute]
public static bool HasBits(int value, int part);
    [ExtensionAttribute]
public static bool HasBits(long value, long part);
    [ExtensionAttribute]
public static void ExtractMantissaExponent(double value, Int64& mantissa, Int32& exponent);
    [ExtensionAttribute]
public static void ExtractMantissaExponent(decimal value, Int64& mantissa, Int32& exponent);
    [ExtensionAttribute]
public static double RoundToNearest(double value);
    [ExtensionAttribute]
public static decimal RemoveTrailingZeros(decimal value);
    [ExtensionAttribute]
public static DecimalInfo GetDecimalInfo(decimal value);
    [ExtensionAttribute]
public static int GetCachedDecimals(decimal value);
    [ExtensionAttribute]
public static double ToRadians(double angle);
    [ExtensionAttribute]
public static double ToAngles(double radian);
    public static Double[] GetRoots(double a, double b, double c);
    [ExtensionAttribute]
public static long AsRaw(double value);
    [ExtensionAttribute]
public static double AsRaw(long value);
    [ExtensionAttribute]
public static float AsRaw(int value);
    [ExtensionAttribute]
public static int AsRaw(float value);
    [ExtensionAttribute]
public static bool IsNaN(double value);
    [ExtensionAttribute]
public static bool IsInfinity(double value);
    [ExtensionAttribute]
public static bool IsNegativeInfinity(double value);
    [ExtensionAttribute]
public static bool IsPositiveInfinity(double value);
    [ExtensionAttribute]
public static bool IsNaN(float value);
    [ExtensionAttribute]
public static bool IsInfinity(float value);
    [ExtensionAttribute]
public static bool IsNegativeInfinity(float value);
    [ExtensionAttribute]
public static bool IsPositiveInfinity(float value);
    [ExtensionAttribute]
public static decimal GetMiddle(short from, short to);
    [ExtensionAttribute]
public static decimal GetMiddle(int from, int to);
    [ExtensionAttribute]
public static decimal GetMiddle(long from, long to);
    [ExtensionAttribute]
public static decimal GetMiddle(float from, float to);
    [ExtensionAttribute]
public static decimal GetMiddle(double from, double to);
    [ExtensionAttribute]
public static decimal GetMiddle(decimal from, decimal to);
    public static decimal ToDecimal(long mantissa, int exponent);
    [ExtensionAttribute]
public static Nullable`1<decimal> ToDecimal(double value);
    [ExtensionAttribute]
public static Nullable`1<decimal> ToDecimal(float value);
}
public class Ecng.Common.MillisecondIdGenerator : IdGenerator {
    private DateTime _start;
    public virtual long GetNextId();
}
public class Ecng.Common.MillisecondIncrementalIdGenerator : IncrementalIdGenerator {
}
public class Ecng.Common.NtpClient : object {
    private EndPoint _ntpServer;
    public NtpClient(EndPoint ntpServer);
    public NtpClient(string ntpServer);
    public DateTime GetLocalTime(TimeZoneInfo info, int timeout);
    public DateTime GetUtcTime(int timeout);
}
[DataContractAttribute]
public class Ecng.Common.NullableEx`1 : Equatable`1<NullableEx`1<T>> {
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    private T _value;
    public bool HasValue { get; private set; }
    [DataMemberAttribute]
public T Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
private void set_HasValue(bool value);
    public T get_Value();
    public void set_Value(T value);
    protected virtual bool OnEquals(NullableEx`1<T> other);
    public virtual NullableEx`1<T> Clone();
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Ecng.Common.NullableHelper : object {
    [ExtensionAttribute]
public static Type GetUnderlyingType(Type nullableType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNull(T value);
    [ExtensionAttribute]
public static bool IsNull(T value, bool checkValueTypeOnDefault);
    [ExtensionAttribute]
public static TResult Convert(T value, Func`2<T, TResult> notNullFunc, Func`1<TResult> nullFunc);
    [ExtensionAttribute]
public static Nullable`1<T> DefaultAsNull(T value);
}
[ExtensionAttribute]
public static class Ecng.Common.OperatingSystemEx : object {
    public static IEnumerable`1<OSPlatform> Platforms { get; }
    public static bool IsFramework { get; }
    public static bool IsWindows();
    public static bool IsMacOS();
    public static bool IsLinux();
    [ExtensionAttribute]
public static bool IsOSPlatform(OSPlatform platform);
    public static IEnumerable`1<OSPlatform> get_Platforms();
    public static bool get_IsFramework();
    public static IDictionary`2<string, Version> GetRuntimePackages(Version fwVer);
}
[ExtensionAttribute]
public static class Ecng.Common.PlatformHelper : object {
    [ExtensionAttribute]
public static bool IsCompatible(Platforms platform);
}
public enum Ecng.Common.Platforms : Enum {
    public int value__;
    public static Platforms x86;
    public static Platforms x64;
    public static Platforms AnyCPU;
}
public class Ecng.Common.RandomArray`1 : object {
    private SyncObject _lock;
    private T[] _data;
    private int _index;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Max>k__BackingField;
    public int Count { get; }
    public T Min { get; }
    public T Max { get; }
    public RandomArray`1(int count);
    public RandomArray`1(T min, T max, int count);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public T get_Min();
    [CompilerGeneratedAttribute]
public T get_Max();
    public T Next();
}
public static class Ecng.Common.RandomGen : object {
    private static SyncObject _sync;
    private static Random _value;
    private static RandomGen();
    public static double GetDouble();
    public static Byte[] GetBytes(int count);
    public static void GetBytes(Byte[] buffer);
    public static int GetInt();
    public static int GetInt(int max);
    public static int GetInt(int min, int max);
    public static long GetLong();
    public static long GetLong(long min, long max);
    public static bool GetBool();
    public static T GetEnum();
    public static T GetEnum(IEnumerable`1<T> values);
    public static T GetEnum(T min, T max);
    public static T GetElement(IEnumerable`1<T> array);
    public static string GetString(int min, int max);
    public static DateTime GetDate();
    public static DateTime GetDate(DateTime min, DateTime max);
    public static TimeSpan GetTime();
    public static TimeSpan GetTime(TimeSpan min, TimeSpan max);
    public static decimal GetDecimal(int integer, int fractional);
    public static decimal GetDecimal(decimal min, decimal max, int precision);
    [CompilerGeneratedAttribute]
internal static int <GetLong>g__Log2Ceiling|9_0(ulong value);
    [CompilerGeneratedAttribute]
internal static int <GetLong>g__NumberOfSetBits|9_2(ulong i);
    [CompilerGeneratedAttribute]
internal static ulong <GetLong>g__GetULong|9_1();
}
public class Ecng.Common.RefFive`5 : RefQuadruple`4<TFirst, TSecond, TThird, TFourth> {
    [CompilerGeneratedAttribute]
private TFifth <Fifth>k__BackingField;
    public TFifth Fifth { get; public set; }
    public IEnumerable`1<object> Values { get; public set; }
    public RefFive`5(TFirst first, TSecond second, TThird third, TFourth fourth, TFifth fifth);
    [CompilerGeneratedAttribute]
public TFifth get_Fifth();
    [CompilerGeneratedAttribute]
public void set_Fifth(TFifth value);
    public virtual IEnumerable`1<object> get_Values();
    public virtual void set_Values(IEnumerable`1<object> value);
    protected virtual string GetValuesString();
}
public class Ecng.Common.RefPair`2 : object {
    [CompilerGeneratedAttribute]
private TFirst <First>k__BackingField;
    [CompilerGeneratedAttribute]
private TSecond <Second>k__BackingField;
    public TFirst First { get; public set; }
    public TSecond Second { get; public set; }
    public IEnumerable`1<object> Values { get; public set; }
    public RefPair`2(TFirst first, TSecond second);
    [CompilerGeneratedAttribute]
public TFirst get_First();
    [CompilerGeneratedAttribute]
public void set_First(TFirst value);
    [CompilerGeneratedAttribute]
public TSecond get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(TSecond value);
    public virtual IEnumerable`1<object> get_Values();
    public virtual void set_Values(IEnumerable`1<object> value);
    public virtual string ToString();
    protected virtual string GetValuesString();
    public KeyValuePair`2<TFirst, TSecond> ToValuePair();
}
public class Ecng.Common.RefQuadruple`4 : RefTriple`3<TFirst, TSecond, TThird> {
    [CompilerGeneratedAttribute]
private TFourth <Fourth>k__BackingField;
    public TFourth Fourth { get; public set; }
    public IEnumerable`1<object> Values { get; public set; }
    public RefQuadruple`4(TFirst first, TSecond second, TThird third, TFourth fourth);
    [CompilerGeneratedAttribute]
public TFourth get_Fourth();
    [CompilerGeneratedAttribute]
public void set_Fourth(TFourth value);
    public virtual IEnumerable`1<object> get_Values();
    public virtual void set_Values(IEnumerable`1<object> value);
    protected virtual string GetValuesString();
}
public class Ecng.Common.RefTriple`3 : RefPair`2<TFirst, TSecond> {
    [CompilerGeneratedAttribute]
private TThird <Third>k__BackingField;
    public TThird Third { get; public set; }
    public IEnumerable`1<object> Values { get; public set; }
    public RefTriple`3(TFirst first, TSecond second, TThird third);
    [CompilerGeneratedAttribute]
public TThird get_Third();
    [CompilerGeneratedAttribute]
public void set_Third(TThird value);
    public virtual IEnumerable`1<object> get_Values();
    public virtual void set_Values(IEnumerable`1<object> value);
    protected virtual string GetValuesString();
}
public static class Ecng.Common.RefTuple : object {
    private static RefFive`5<int, int, int, int, int> _t;
    private static RefTuple();
    public static RefPair`2<TFirst, TSecond> Create(TFirst first, TSecond second);
    public static RefTriple`3<TFirst, TSecond, TThird> Create(TFirst first, TSecond second, TThird third);
    public static RefQuadruple`4<TFirst, TSecond, TThird, TFourth> Create(TFirst first, TSecond second, TThird third, TFourth fourth);
    public static RefFive`5<TFirst, TSecond, TThird, TFourth, TFifth> Create(TFirst first, TSecond second, TThird third, TFourth fourth, TFifth fifth);
    public static string GetName(int idx);
}
public class Ecng.Common.ResettableTimer : Disposable {
    private SyncObject _sync;
    private SyncObject _finish;
    private bool _isActivated;
    private bool _isFinished;
    private bool _isCancelled;
    private TimeSpan _period;
    private string _name;
    [CompilerGeneratedAttribute]
private Action`1<Func`1<bool>> Elapsed;
    public ResettableTimer(TimeSpan period, string name);
    [CompilerGeneratedAttribute]
public void add_Elapsed(Action`1<Func`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_Elapsed(Action`1<Func`1<bool>> value);
    public void Activate();
    public void Cancel();
    public void Flush();
    private bool CanProcess();
    protected virtual void DisposeManaged();
    [CompilerGeneratedAttribute]
private void <Activate>b__11_0();
}
[CLSCompliantAttribute("False")]
public class Ecng.Common.SByteOperator : BaseOperator`1<sbyte> {
    public virtual sbyte Add(sbyte first, sbyte second);
    public virtual sbyte Subtract(sbyte first, sbyte second);
    public virtual sbyte Multiply(sbyte first, sbyte second);
    public virtual sbyte Divide(sbyte first, sbyte second);
    public virtual int Compare(sbyte first, sbyte second);
}
public class Ecng.Common.Scope`1 : Disposable {
    [CompilerGeneratedAttribute]
private Scope`1<T> <Parent>k__BackingField;
    private static AsyncLocal`1<Scope`1<T>> _current;
    [CompilerGeneratedAttribute]
private bool <OwnInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public Scope`1<T> Parent { get; }
    public static Scope`1<T> Current { get; }
    public static bool IsDefined { get; }
    public static ICollection`1<Scope`1<T>> All { get; }
    public bool OwnInstance { get; }
    public T Value { get; }
    public Scope`1(T value);
    public Scope`1(T value, bool ownInstance);
    private static Scope`1();
    [CompilerGeneratedAttribute]
public Scope`1<T> get_Parent();
    public static Scope`1<T> get_Current();
    public static bool get_IsDefined();
    public static ICollection`1<Scope`1<T>> get_All();
    [CompilerGeneratedAttribute]
public bool get_OwnInstance();
    [CompilerGeneratedAttribute]
public T get_Value();
    [SecuritySafeCriticalAttribute]
protected virtual void DisposeManaged();
}
public class Ecng.Common.ShortOperator : BaseOperator`1<short> {
    public virtual short Add(short first, short second);
    public virtual short Subtract(short first, short second);
    public virtual short Multiply(short first, short second);
    public virtual short Divide(short first, short second);
    public virtual int Compare(short first, short second);
}
public class Ecng.Common.SimpleResettableTimer : object {
    private SyncObject _sync;
    private TimeSpan _period;
    private Timer _timer;
    private bool _changed;
    [CompilerGeneratedAttribute]
private Action Elapsed;
    public SimpleResettableTimer(TimeSpan period);
    [CompilerGeneratedAttribute]
public void add_Elapsed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Elapsed(Action value);
    public void Reset();
    private void OnTimer();
    public void Flush();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Ecng.Common.StringHelper : object {
    public static string N;
    public static string R;
    public static string RN;
    private static Dictionary`2<char, string> _charMap;
    public static HexEncoding HexEncoding;
    public static Encoding WindowsCyrillic { get; }
    private static StringHelper();
    [ExtensionAttribute]
public static bool IsEmpty(string str);
    [ExtensionAttribute]
public static string IsEmpty(string str, string defaultValue);
    [ExtensionAttribute]
public static string ThrowIfEmpty(string str, string paramName);
    [ExtensionAttribute]
public static bool IsEmptyOrWhiteSpace(string str);
    [ExtensionAttribute]
public static string IsEmptyOrWhiteSpace(string str, string defaultValue);
    [ExtensionAttribute]
public static string Put(string str, Object[] args);
    [ExtensionAttribute]
public static string PutEx(string str, Object[] args);
    [ExtensionAttribute]
public static ValueTask`1<string> PutExAsync(string str, Object[] args, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static Type GetGenericType(Type targetType, Type genericType);
    [ExtensionAttribute]
public static String[] SplitByLineSeps(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByR(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByRN(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByN(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SplitByRN or SplitByN methods.")]
public static String[] SplitLines(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SplitBySep method.")]
public static String[] Split(string str, string separator, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitBySep(string str, string separator, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByComma(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByDot(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByDotComma(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByColon(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitBySpace(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByEqual(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByTab(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static String[] SplitByAt(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SplitByN methods.")]
public static String[] SplitByLine(string str, bool removeEmptyEntries);
    [ExtensionAttribute]
public static int LastIndexOf(StringBuilder builder, char value);
    [ExtensionAttribute]
public static bool IsValidEmailAddress(string email);
    [ExtensionAttribute]
public static bool IsValidUrl(string url);
    [ExtensionAttribute]
public static string Reverse(string input);
    [ExtensionAttribute]
public static string Reduce(string s, int count, string endings);
    [ExtensionAttribute]
public static string ReplaceWhiteSpaces(string s);
    [ExtensionAttribute]
public static string ReplaceWhiteSpaces(string s, char c);
    [ExtensionAttribute]
public static string RemoveSpaces(string s);
    [ExtensionAttribute]
public static string Remove(string s, string what, bool ignoreCase);
    [ExtensionAttribute]
public static bool IsNumber(string s, bool floatPoint);
    [ExtensionAttribute]
public static bool IsNumberOnly(string s, bool floatPoint);
    [ExtensionAttribute]
public static bool IsDigit(char c);
    [ExtensionAttribute]
public static string RemoveDiacritics(string s);
    [ExtensionAttribute]
public static string Nl2Br(string s);
    [ExtensionAttribute]
public static string Trim(string value, int maxLength);
    [ExtensionAttribute]
public static string JoinAt(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinTab(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinComma(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinDotComma(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinDot(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinCommaSpace(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinSpace(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinPipe(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinColon(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinEqual(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinAnd(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinN(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinRN(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string JoinNL(IEnumerable`1<string> parts);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<string> parts, string separator);
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EqualsIgnoreCase.")]
public static bool CompareIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static bool ContainsIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static string ReplaceIgnoreCase(string original, string oldValue, string newValue);
    [ExtensionAttribute]
public static StringBuilder ReplaceIgnoreCase(StringBuilder builder, string oldValue, string newValue);
    [ExtensionAttribute]
public static bool StartsWithIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static bool EndsWithIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static int IndexOfIgnoreCase(string str1, string str2, int index);
    [ExtensionAttribute]
public static int LastIndexOfIgnoreCase(string str1, string str2, int index);
    [ExtensionAttribute]
public static string ToTitleCase(string value);
    [ExtensionAttribute]
public static string Times(string value, int n);
    [ExtensionAttribute]
public static string Times(string value, int n, string separator);
    [ExtensionAttribute]
public static string Truncate(string text, int maxLength);
    [ExtensionAttribute]
public static string Truncate(string text, int maxLength, string suffix);
    [ExtensionAttribute]
public static string TruncateMiddle(string input, int limit);
    [ExtensionAttribute]
public static string RemoveTrailingZeros(string s);
    [ExtensionAttribute]
public static string RemoveTrailingZeros(string s, string separator);
    [ExtensionAttribute]
public static Byte[] Base64(string value);
    [ExtensionAttribute]
public static string Base64(Byte[] value);
    [IteratorStateMachineAttribute("Ecng.Common.StringHelper/<SplitByLength>d__79")]
[ExtensionAttribute]
public static IEnumerable`1<string> SplitByLength(string stringToSplit, int length);
    [ExtensionAttribute]
public static string TrimStart(string str, string sStartValue);
    [ExtensionAttribute]
public static string TrimEnd(string str, string sEndValue);
    [ExtensionAttribute]
public static bool CheckBrackets(string str, string sStart, string sEnd);
    [ExtensionAttribute]
public static string StripBrackets(string str, string sStart, string sEnd);
    [ExtensionAttribute]
public static string ToLatin(string russianTitle);
    [ExtensionAttribute]
public static string LightScreening(string text);
    [ExtensionAttribute]
public static bool ComparePaths(string path1, string path2);
    [ExtensionAttribute]
public static bool Like(string toSearch, string toFind, bool ignoreCase);
    [ExtensionAttribute]
public static bool IsEmpty(SecureString secureString);
    [ExtensionAttribute]
public static SecureString ThrowIfEmpty(SecureString str, string paramName);
    [ExtensionAttribute]
public static bool IsEqualTo(SecureString value1, SecureString value2);
    [ExtensionAttribute]
public static string Digest(Byte[] digest);
    [ExtensionAttribute]
public static string Digest(Byte[] digest, Nullable`1<int> length, int index);
    public static Encoding get_WindowsCyrillic();
    [ExtensionAttribute]
public static IEnumerable`1<string> Duplicates(IEnumerable`1<string> items);
    [ExtensionAttribute]
public static Byte[] Default(string v);
    [ExtensionAttribute]
public static string Default(Byte[] v);
    [ExtensionAttribute]
public static string Default(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string Default(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string Default(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static Byte[] ASCII(string v);
    [ExtensionAttribute]
public static string ASCII(Byte[] v);
    [ExtensionAttribute]
public static string ASCII(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string ASCII(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ASCII(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static Byte[] UTF8(string v);
    [ExtensionAttribute]
public static string UTF8(Byte[] v);
    [ExtensionAttribute]
public static string UTF8(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string UTF8(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string UTF8(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static Byte[] Unicode(string v);
    [ExtensionAttribute]
public static string Unicode(Byte[] v);
    [ExtensionAttribute]
public static string Unicode(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string Unicode(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string Unicode(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static Byte[] Cyrillic(string v);
    [ExtensionAttribute]
public static string Cyrillic(Byte[] v);
    [ExtensionAttribute]
public static string Cyrillic(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string Cyrillic(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string Cyrillic(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static Byte[] Hex(string v);
    [ExtensionAttribute]
public static string Hex(Byte[] v);
    [ExtensionAttribute]
public static string Hex(Byte[] v, int index, int count);
    [ExtensionAttribute]
public static string Hex(ArraySegment`1<byte> v);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string Hex(Byte[] v, UInt32 count, int index);
    [ExtensionAttribute]
public static SecureString Secure(string str);
    [ExtensionAttribute]
public static string UnSecure(SecureString str);
    [ExtensionAttribute]
public static Nullable`1<int> ToId(SecureString key);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToString(Char[] arr, UInt32 count, int index);
    [ExtensionAttribute]
public static string ToString(Char[] arr, int count, int index);
    [ExtensionAttribute]
public static string ToBitString(ArraySegment`1<byte> buffer, char separator);
    [ExtensionAttribute]
public static string ToBitString(Byte[] buffer, Nullable`1<int> index, Nullable`1<int> count, char separator);
    [ExtensionAttribute]
public static Byte[] ToByteArray(string bitString, char separator);
    [ExtensionAttribute]
public static int GetDeterministicHashCode(string value);
    [ExtensionAttribute]
public static Nullable`1<long> TryToLong(string str);
    [ExtensionAttribute]
public static int FastIndexOf(string source, string pattern);
    [ExtensionAttribute]
public static string RemoveMultipleWhitespace(string text);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static string UrlEscape(string url);
    [ExtensionAttribute]
public static string DataEscape(string url);
    [ExtensionAttribute]
public static string DataUnEscape(string url);
    [ExtensionAttribute]
public static char ToLower(char c, bool invariant);
    [ExtensionAttribute]
public static char ToUpper(char c, bool invariant);
    [ExtensionAttribute]
public static string GetLangCode(string cultureName);
    [ExtensionAttribute]
public static void RemoveLast(StringBuilder builder, int count);
    [ExtensionAttribute]
public static bool IsEmpty(StringBuilder builder);
    [ExtensionAttribute]
public static string GetAndClear(StringBuilder builder);
    [ExtensionAttribute]
public static string Intern(string str);
}
public class Ecng.Common.SyncObject : object {
    private bool _processed;
    private object _state;
    public bool TryEnter(Nullable`1<TimeSpan> timeOut);
    public void Enter();
    public void Exit();
    public void Pulse();
    public void Pulse(object state);
    public void PulseAll();
    public void PulseAll(object state);
    public void PulseSignal(object state);
    public bool Wait(Nullable`1<TimeSpan> timeOut);
    public bool WaitSignal(Nullable`1<TimeSpan> timeOut);
    public bool WaitSignal(Nullable`1<TimeSpan> timeOut, Object& state);
    private bool WaitInternal(Nullable`1<TimeSpan> timeOut);
}
[AttributeUsageAttribute("4")]
public class Ecng.Common.TargetPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Platforms <Platform>k__BackingField;
    public Platforms Platform { get; }
    public TargetPlatformAttribute(Platforms platform);
    [CompilerGeneratedAttribute]
public Platforms get_Platform();
}
[ExtensionAttribute]
public static class Ecng.Common.ThreadingHelper : object {
    private static Dictionary`2<Timer, TimeSpan> _intervals;
    private static ThreadingHelper();
    [ExtensionAttribute]
public static Timer TimerInvariant(Action handler);
    [ExtensionAttribute]
public static Timer Timer(Action handler);
    [ExtensionAttribute]
public static Timer Timer(Action`1<T> handler, T arg);
    [ExtensionAttribute]
public static Timer Timer(Action`2<T1, T2> handler, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Timer Timer(Action`3<T1, T2, T3> handler, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static Timer Timer(Action`4<T1, T2, T3, T4> handler, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [ExtensionAttribute]
public static TimeSpan Interval(Timer timer);
    [ExtensionAttribute]
public static Timer Interval(Timer timer, TimeSpan interval);
    [ExtensionAttribute]
public static Timer Interval(Timer timer, TimeSpan start, TimeSpan interval);
    private static Timer CreateTimer(TimerCallback callback);
    [ExtensionAttribute]
public static Thread ThreadInvariant(Action handler);
    [ExtensionAttribute]
public static Thread Thread(Action handler);
    [ExtensionAttribute]
public static Thread Thread(Action`1<T> handler, T arg);
    [ExtensionAttribute]
public static Thread Thread(Action`2<T1, T2> handler, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Thread Thread(Action`3<T1, T2, T3> handler, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static Thread Thread(Action`4<T1, T2, T3, T4> handler, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    private static Thread CreateThread(ThreadStart start);
    [ExtensionAttribute]
public static Thread Name(Thread thread, string name);
    [ExtensionAttribute]
public static Thread Background(Thread thread, bool isBackground);
    [ExtensionAttribute]
public static Thread Launch(Thread thread);
    [ExtensionAttribute]
public static void Sleep(TimeSpan timeOut);
    [ExtensionAttribute]
public static Thread Priority(Thread thread, ThreadPriority priority);
    [ExtensionAttribute]
public static void Write(ReaderWriterLockSlim rw, Action handler);
    [ExtensionAttribute]
public static bool TryWrite(ReaderWriterLockSlim rw, Action handler, int timeOut);
    [ExtensionAttribute]
public static void Read(ReaderWriterLockSlim rw, Action handler);
    [ExtensionAttribute]
public static bool TryRead(ReaderWriterLockSlim rw, Action handler, int timeOut);
    [ExtensionAttribute]
public static void Upgrade(ReaderWriterLockSlim rw, Action handler);
    [ExtensionAttribute]
public static bool TryUpgrade(ReaderWriterLockSlim rw, Action handler, int timeOut);
    private static bool Try(Func`2<int, bool> enter, Action exit, Action handler, int timeOut);
    [ExtensionAttribute]
public static IDisposable WriterLock(ReaderWriterLockSlim rwLock);
    [ExtensionAttribute]
public static IDisposable ReaderLock(ReaderWriterLockSlim rwLock);
    public static bool TryGetUniqueMutex(string name, Mutex& mutex);
    public static IDisposable WithCulture(CultureInfo culture);
    public static IDisposable WithInvariantCulture();
}
public class Ecng.Common.TickIdGenerator : IdGenerator {
    public virtual long GetNextId();
}
public class Ecng.Common.TickIncrementalIdGenerator : IncrementalIdGenerator {
}
[ExtensionAttribute]
public static class Ecng.Common.TimeHelper : object {
    private static Stopwatch _timer;
    private static DateTime _start;
    private static DateTime _startWithOffset;
    private static TimeSpan _nowOffset;
    [CompilerGeneratedAttribute]
private static TimeSpan <TimeZoneOffset>k__BackingField;
    public static double TicksPerNanosecond;
    public static long NanosecondsPerTick;
    public static long TicksPerMicrosecond;
    public static long TicksPerWeek;
    public static long TicksPerMonth;
    public static long TicksPerYear;
    public static long TicksPerCentury;
    public static long TicksPerMillenium;
    public static TimeSpan Minute1;
    public static TimeSpan Minute5;
    public static TimeSpan Minute10;
    public static TimeSpan Minute15;
    public static TimeSpan Hour;
    public static TimeSpan Day;
    public static TimeSpan Week;
    public static TimeSpan Month;
    public static TimeSpan Year;
    public static TimeSpan LessOneDay;
    public static DateTime GregorianStart;
    public static TimeZoneInfo Est;
    public static TimeZoneInfo Cst;
    public static TimeZoneInfo Moscow;
    public static TimeZoneInfo Gmt;
    public static TimeZoneInfo Fle;
    public static TimeZoneInfo China;
    public static TimeZoneInfo Korea;
    public static TimeZoneInfo Tokyo;
    public static TimeZoneInfo Tunisia;
    public static DateTime Now { get; }
    public static DateTimeOffset NowWithOffset { get; }
    public static TimeSpan NowOffset { get; public set; }
    public static TimeSpan TimeZoneOffset { get; public set; }
    public static double UnixNowS { get; }
    public static double UnixNowMls { get; }
    private static TimeHelper();
    public static DateTime get_Now();
    public static DateTimeOffset get_NowWithOffset();
    public static TimeSpan get_NowOffset();
    public static void set_NowOffset(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_TimeZoneOffset();
    [CompilerGeneratedAttribute]
public static void set_TimeZoneOffset(TimeSpan value);
    public static void SyncMarketTime(int timeout);
    [ExtensionAttribute]
public static double TotalWeeks(TimeSpan value);
    [ExtensionAttribute]
public static double TotalMonths(TimeSpan value);
    [ExtensionAttribute]
public static double TotalYears(TimeSpan value);
    [ExtensionAttribute]
public static double TotalCenturies(TimeSpan value);
    [ExtensionAttribute]
public static double TotalMilleniums(TimeSpan value);
    [ExtensionAttribute]
public static int GetMicroseconds(TimeSpan ts);
    [ExtensionAttribute]
public static int GetMicroseconds(DateTime dt);
    [ExtensionAttribute]
public static int GetNanoseconds(TimeSpan ts);
    [ExtensionAttribute]
public static int GetNanoseconds(DateTime dt);
    [ExtensionAttribute]
public static int GetNanoseconds(long ticks);
    [ExtensionAttribute]
public static long ToNanoseconds(TimeSpan ts);
    [ExtensionAttribute]
public static long ToNanoseconds(DateTime dt);
    [ExtensionAttribute]
public static long NanosecondsToTicks(long nanoseconds);
    [ExtensionAttribute]
public static long TicksToNanoseconds(long ticks);
    [ExtensionAttribute]
public static TimeSpan AddNanoseconds(TimeSpan t, long nanoseconds);
    [ExtensionAttribute]
public static DateTime AddNanoseconds(DateTime dt, long nanoseconds);
    [ExtensionAttribute]
public static DateTimeOffset AddNanoseconds(DateTimeOffset dto, long nanoseconds);
    [ExtensionAttribute]
public static long MicrosecondsToTicks(long mcs);
    [ExtensionAttribute]
public static long TicksToMicroseconds(long ticks);
    [ExtensionAttribute]
public static TimeSpan AddMicroseconds(TimeSpan t, long microseconds);
    [ExtensionAttribute]
public static DateTime AddMicroseconds(DateTime dt, long microseconds);
    [ExtensionAttribute]
public static DateTimeOffset AddMicroseconds(DateTimeOffset dto, long microseconds);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime time, long precision);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime dateTime, TimeSpan timeSpan);
    [ExtensionAttribute]
public static TimeSpan Truncate(TimeSpan time, long precision);
    [ExtensionAttribute]
public static TimeSpan Truncate(TimeSpan dateTime, TimeSpan timeSpan);
    [IteratorStateMachineAttribute("Ecng.Common.TimeHelper/<Range>d__61")]
[ExtensionAttribute]
public static IEnumerable`1<DateTime> Range(DateTime from, DateTime to, TimeSpan interval);
    [ExtensionAttribute]
public static int DaysInMonth(DateTime date);
    [ExtensionAttribute]
public static DateTime ChangeKind(DateTime date, DateTimeKind kind);
    [ExtensionAttribute]
public static DateTime UtcKind(DateTime date);
    [ExtensionAttribute]
public static DateTime StartOfWeek(DateTime date, DayOfWeek startOfWeek);
    [ExtensionAttribute]
public static DateTime EndOfDay(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset EndOfDay(DateTimeOffset dto);
    [ExtensionAttribute]
public static DateTime To(DateTime time, TimeZoneInfo source, TimeZoneInfo destination);
    [ExtensionAttribute]
public static Nullable`1<DateTime> TryToDateTime(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static DateTime ToDateTime(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static string FromDateTime(DateTime dt, string format, CultureInfo ci);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> TryToTimeSpan(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static TimeSpan ToTimeSpan(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static string FromTimeSpan(TimeSpan ts, string format, CultureInfo ci);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> TryToDateTimeOffset(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffset(string value, string format, CultureInfo ci);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffset(DateTime date, TimeZoneInfo zone);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffset(DateTime date, TimeSpan offset);
    [ExtensionAttribute]
public static string FromDateTimeOffset(DateTimeOffset dto, string format, CultureInfo ci);
    [ExtensionAttribute]
public static DateTimeOffset ApplyLocal(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset ApplyUtc(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset ApplyChina(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset ApplyEst(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset ApplyMoscow(DateTime dt);
    [ExtensionAttribute]
public static DateTimeOffset ApplyTimeZone(DateTime dt, TimeZoneInfo zone);
    [ExtensionAttribute]
public static DateTimeOffset ApplyTimeZone(DateTime dt, TimeSpan offset);
    [ExtensionAttribute]
public static DateTime ToLocalTime(DateTimeOffset dto, TimeZoneInfo zone);
    [ExtensionAttribute]
public static DateTimeOffset ConvertToChina(DateTimeOffset dto);
    [ExtensionAttribute]
public static DateTimeOffset ConvertToEst(DateTimeOffset dto);
    [ExtensionAttribute]
public static DateTimeOffset ConvertToMoscow(DateTimeOffset dto);
    [ExtensionAttribute]
public static DateTimeOffset ConvertToUtc(DateTimeOffset dto);
    [ExtensionAttribute]
public static DateTimeOffset Convert(DateTimeOffset dto, TimeZoneInfo zone);
    [ExtensionAttribute]
public static DateTimeOffset Truncate(DateTimeOffset time, TimeSpan timeSpan);
    [ExtensionAttribute]
public static DateTimeOffset Truncate(DateTimeOffset time, long precision);
    [ExtensionAttribute]
public static DateTime FromIso8601(string str, IFormatProvider provider);
    [ExtensionAttribute]
public static string ToIso8601(DateTime dt, IFormatProvider provider);
    [ExtensionAttribute]
public static int GetIso8601WeekOfYear(DateTime time, CultureInfo ci);
    [ExtensionAttribute]
public static double ToUnix(DateTimeOffset time, bool isSeconds);
    [ExtensionAttribute]
public static double ToUnix(DateTime time, bool isSeconds);
    [ExtensionAttribute]
public static TimeSpan GetUnixDiff(DateTime time);
    [ExtensionAttribute]
public static DateTime FromUnix(long time, bool isSeconds);
    [ExtensionAttribute]
public static DateTime FromUnix(double time, bool isSeconds);
    [ExtensionAttribute]
public static Nullable`1<DateTime> TryFromUnix(long time, bool isSeconds);
    [ExtensionAttribute]
public static Nullable`1<DateTime> TryFromUnix(double time, bool isSeconds);
    [ExtensionAttribute]
public static DateTime FromUnixMcs(long mcs);
    [ExtensionAttribute]
public static DateTime FromUnixMcs(double mcs);
    [ExtensionAttribute]
public static long ToUnixMcs(DateTime time);
    public static double get_UnixNowS();
    public static double get_UnixNowMls();
    [ExtensionAttribute]
public static bool IsDateTime(Type type);
    [ExtensionAttribute]
public static bool IsDateOrTime(Type type);
    [ExtensionAttribute]
public static bool IsWeekday(DateTimeOffset date);
    [ExtensionAttribute]
public static bool IsWeekend(DateTimeOffset date);
    [ExtensionAttribute]
public static bool IsWeekday(DateTime date);
    [ExtensionAttribute]
public static bool IsWeekend(DateTime date);
    [ExtensionAttribute]
public static bool IsWeekday(DayOfWeek dow);
    [ExtensionAttribute]
public static bool IsWeekend(DayOfWeek dow);
    [ExtensionAttribute]
public static LunarPhases GetLunarPhase(DateTime date);
    [ExtensionAttribute]
public static double ToJulianDate(DateTime date);
}
public class Ecng.Common.TimeSpanOperator : BaseOperator`1<TimeSpan> {
    public virtual TimeSpan Add(TimeSpan first, TimeSpan second);
    public virtual TimeSpan Subtract(TimeSpan first, TimeSpan second);
    public virtual TimeSpan Multiply(TimeSpan first, TimeSpan second);
    public virtual TimeSpan Divide(TimeSpan first, TimeSpan second);
    public virtual int Compare(TimeSpan first, TimeSpan second);
}
public class Ecng.Common.TooManyException : InvalidOperationException {
    public TooManyException(string message);
}
[ExtensionAttribute]
public static class Ecng.Common.TupleHelper : object {
    private static HashSet`1<Type> _tupleTypes;
    private static TupleHelper();
    [ExtensionAttribute]
public static bool IsTuple(Type tupleType);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`1<T> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__3`2")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`2<T1, T2> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__4`3")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`3<T1, T2, T3> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__5`4")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`4<T1, T2, T3, T4> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__6`5")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`5<T1, T2, T3, T4, T5> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__7`6")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(Tuple`6<T1, T2, T3, T4, T5, T6> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__8`1")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`1<T> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__9`2")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`2<T1, T2> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__10`3")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`3<T1, T2, T3> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__11`4")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`4<T1, T2, T3, T4> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__12`5")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`5<T1, T2, T3, T4, T5> tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<ToValues>d__13`6")]
[ExtensionAttribute]
public static IEnumerable`1<object> ToValues(ValueTuple`6<T1, T2, T3, T4, T5, T6> tuple);
    [ExtensionAttribute]
public static object ToTuple(IEnumerable`1<object> values, bool isValue);
    [ExtensionAttribute]
public static IEnumerable`1<object> ToValues(T tuple);
    [IteratorStateMachineAttribute("Ecng.Common.TupleHelper/<UnwrapExceptions>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Exception> UnwrapExceptions(Exception exception);
}
[ExtensionAttribute]
public static class Ecng.Common.TypeHelper : object {
    private static FieldInfo _remoteStackTraceString;
    private static Type _enumType;
    private static Lazy`1<string> _applicationName;
    private static Lazy`1<string> _applicationNameWithVersion;
    public static string ApplicationName { get; }
    public static string ApplicationNameWithVersion { get; }
    private static TypeHelper();
    [ExtensionAttribute]
public static object CreateInstance(Type type, Object[] args);
    [ExtensionAttribute]
public static T CreateInstance(Type type, Object[] args);
    [ExtensionAttribute]
public static T CreateInstanceArgs(Type type, Object[] args);
    [ExtensionAttribute]
public static Type Make(Type type, Type[] args);
    [ExtensionAttribute]
public static Type Make(Type type, IEnumerable`1<Type> args);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsNumericInteger(Type type);
    [ExtensionAttribute]
public static string GetTypeAsString(Type type, bool isAssemblyQualifiedName);
    [ExtensionAttribute]
public static bool IsStruct(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsAttribute(Type type);
    [ExtensionAttribute]
public static bool IsDelegate(Type type);
    public static TEntity CreateUnitialized();
    [ExtensionAttribute]
public static object CreateUnitialized(Type type);
    [ExtensionAttribute]
public static void DoDispose(TSource source);
    public static string get_ApplicationName();
    public static string get_ApplicationNameWithVersion();
    public static bool IsNet45OrNewer();
    [ExtensionAttribute]
public static string GetTypeName(Type type, bool isAssemblyQualifiedName);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static void Throw(Exception ex);
    public static Byte[] GenerateSalt(int saltSize);
    [ExtensionAttribute]
public static Scope`1<T> ToScope(T value, bool ownInstance);
    [ExtensionAttribute]
public static Exception SingleOrAggr(IList`1<Exception> errors);
    [ExtensionAttribute]
public static T CheckOnNull(T value, string paramName);
    [ExtensionAttribute]
public static Platforms GetPlatform(Type type);
    [ExtensionAttribute]
public static int HiWord(int iValue);
    [ExtensionAttribute]
public static int LoWord(int iValue);
    [ExtensionAttribute]
public static bool HasProperty(object settings, string name);
    [ExtensionAttribute]
public static bool Is(Type type);
    [ExtensionAttribute]
public static bool IsAutoGenerated(Type type);
    [ExtensionAttribute]
public static void EnsureRunClass(Type type);
    [ExtensionAttribute]
public static bool IsValidWebLink(string link);
    [ExtensionAttribute]
public static bool IsWebLink(Uri uri);
}
[CLSCompliantAttribute("False")]
public class Ecng.Common.UIntOperator : BaseOperator`1<UInt32> {
    public virtual UInt32 Add(UInt32 first, UInt32 second);
    public virtual UInt32 Subtract(UInt32 first, UInt32 second);
    public virtual UInt32 Multiply(UInt32 first, UInt32 second);
    public virtual UInt32 Divide(UInt32 first, UInt32 second);
    public virtual int Compare(UInt32 first, UInt32 second);
}
[CLSCompliantAttribute("False")]
public class Ecng.Common.ULongOperator : BaseOperator`1<ulong> {
    public virtual ulong Add(ulong first, ulong second);
    public virtual ulong Subtract(ulong first, ulong second);
    public virtual ulong Multiply(ulong first, ulong second);
    public virtual ulong Divide(ulong first, ulong second);
    public virtual int Compare(ulong first, ulong second);
}
[CLSCompliantAttribute("False")]
public class Ecng.Common.UShortOperator : BaseOperator`1<ushort> {
    public virtual ushort Add(ushort first, ushort second);
    public virtual ushort Subtract(ushort first, ushort second);
    public virtual ushort Multiply(ushort first, ushort second);
    public virtual ushort Divide(ushort first, ushort second);
    public virtual int Compare(ushort first, ushort second);
}
public class Ecng.Common.UTCIncrementalIdGenerator : IncrementalIdGenerator {
}
public class Ecng.Common.UTCMillisecondIdGenerator : IdGenerator {
    public virtual long GetNextId();
}
public class Ecng.Common.UTCMlsIncrementalIdGenerator : IncrementalIdGenerator {
}
public class Ecng.Common.UTCSecondIdGenerator : IdGenerator {
    public virtual long GetNextId();
}
public static class Ecng.Common.Watch : object {
    public static TimeSpan Do(Action action);
}
public abstract class Ecng.Common.Wrapper`1 : Equatable`1<Wrapper`1<T>> {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public T Value { get; public set; }
    public bool HasValue { get; }
    public bool IsDisposed { get; private set; }
    protected Wrapper`1(T value);
    [CompilerGeneratedAttribute]
public virtual T get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(T value);
    public bool get_HasValue();
    public static T op_Explicit(Wrapper`1<T> wrapper);
    protected virtual bool OnEquals(Wrapper`1<T> other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void DisposeManaged();
    protected virtual void DisposeNative();
    protected virtual override void Finalize();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Ecng.Common.XmlHelper : object {
    [ExtensionAttribute]
public static T GetElementValue(XElement parent, XName name, T defaultValue);
    [ExtensionAttribute]
public static T GetAttributeValue(XElement elem, XName name, T defaultValue);
    [ExtensionAttribute]
public static XmlWriter WriteAttribute(XmlWriter writer, string name, object value);
    [ExtensionAttribute]
public static bool Compare(XmlNode first, XmlNode second);
    [ExtensionAttribute]
public static bool IsXmlString(string value);
    [ExtensionAttribute]
public static bool IsXmlChar(char c);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class TimeZoneConverter.DataLoader : object {
    public static void Populate(IDictionary`2<string, string> ianaMap, IDictionary`2<string, string> windowsMap, IDictionary`2<string, string> railsMap, IDictionary`2<string, IList`1<string>> inverseRailsMap);
    [IteratorStateMachineAttribute("TimeZoneConverter.DataLoader/<GetEmbeddedData>d__1")]
private static IEnumerable`1<string> GetEmbeddedData(string resourceName);
}
public static class TimeZoneConverter.TZConvert : object {
    private static IDictionary`2<string, string> IanaMap;
    private static IDictionary`2<string, string> WindowsMap;
    private static IDictionary`2<string, string> RailsMap;
    private static IDictionary`2<string, IList`1<string>> InverseRailsMap;
    private static bool IsWindows;
    private static Dictionary`2<string, TimeZoneInfo> SystemTimeZones;
    [CompilerGeneratedAttribute]
private static ICollection`1<string> <KnownIanaTimeZoneNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICollection`1<string> <KnownWindowsTimeZoneIds>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICollection`1<string> <KnownRailsTimeZoneNames>k__BackingField;
    public static ICollection`1<string> KnownIanaTimeZoneNames { get; }
    public static ICollection`1<string> KnownWindowsTimeZoneIds { get; }
    public static ICollection`1<string> KnownRailsTimeZoneNames { get; }
    private static TZConvert();
    [CompilerGeneratedAttribute]
public static ICollection`1<string> get_KnownIanaTimeZoneNames();
    [CompilerGeneratedAttribute]
public static ICollection`1<string> get_KnownWindowsTimeZoneIds();
    [CompilerGeneratedAttribute]
public static ICollection`1<string> get_KnownRailsTimeZoneNames();
    public static string IanaToWindows(string ianaTimeZoneName);
    public static bool TryIanaToWindows(string ianaTimeZoneName, String& windowsTimeZoneId);
    public static string WindowsToIana(string windowsTimeZoneId, string territoryCode);
    public static bool TryWindowsToIana(string windowsTimeZoneId, String& ianaTimeZoneName);
    public static bool TryWindowsToIana(string windowsTimeZoneId, string territoryCode, String& ianaTimeZoneName);
    public static TimeZoneInfo GetTimeZoneInfo(string windowsOrIanaTimeZoneId);
    public static bool TryGetTimeZoneInfo(string windowsOrIanaTimeZoneId, TimeZoneInfo& timeZoneInfo);
    public static IList`1<string> IanaToRails(string ianaTimeZoneName);
    public static bool TryIanaToRails(string ianaTimeZoneName, IList`1& railsTimeZoneNames);
    public static string RailsToIana(string railsTimeZoneName);
    public static bool TryRailsToIana(string railsTimeZoneName, String& ianaTimeZoneName);
    public static string RailsToWindows(string railsTimeZoneName);
    public static bool TryRailsToWindows(string railsTimeZoneName, String& windowsTimeZoneId);
    public static IList`1<string> WindowsToRails(string windowsTimeZoneId, string territoryCode);
    public static bool TryWindowsToRails(string windowsTimeZoneId, IList`1& railsTimeZoneNames);
    public static bool TryWindowsToRails(string windowsTimeZoneId, string territoryCode, IList`1& railsTimeZoneNames);
    private static Dictionary`2<string, TimeZoneInfo> GetSystemTimeZones();
}
