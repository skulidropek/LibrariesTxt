public static class Ecng.ComponentModel.AppToken : object {
    private static CancellationTokenSource _cts;
    public static CancellationToken Value { get; }
    private static AppToken();
    public static CancellationToken get_Value();
    public static void Shutdown();
}
public abstract class Ecng.ComponentModel.BaseCodeGenVisitor : object {
    private string _indent;
    private int Ecng.ComponentModel.ICodeGenVisitor.CurrIndent { get; }
    private sealed virtual override int Ecng.ComponentModel.ICodeGenVisitor.get_CurrIndent();
    private sealed virtual override ICodeGenVisitor Ecng.ComponentModel.ICodeGenVisitor.AddLine(string text);
    private sealed virtual override ICodeGenVisitor Ecng.ComponentModel.ICodeGenVisitor.AddWithIndent(string text);
    private sealed virtual override ICodeGenVisitor Ecng.ComponentModel.ICodeGenVisitor.Add(string text);
    protected abstract virtual void WriteLine(string text);
    protected abstract virtual void Write(string text);
    public sealed virtual ICodeGenVisitor ChangeIndent(bool increase);
}
public abstract class Ecng.ComponentModel.BaseObservableCollection : object {
    private int _maxCount;
    public int MaxCount { get; public set; }
    public int Count { get; }
    public int get_MaxCount();
    public void set_MaxCount(int value);
    public abstract virtual int get_Count();
    public abstract virtual int RemoveRange(int index, int count);
    protected void CheckCount();
}
public abstract class Ecng.ComponentModel.BaseValidator : object {
    public abstract virtual void Validate(object value);
}
public abstract class Ecng.ComponentModel.BaseValidator`1 : BaseValidator {
    public abstract virtual void Validate(T value);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("11136")]
public abstract class Ecng.ComponentModel.BaseValidatorAttribute : Attribute {
    public abstract virtual BaseValidator CreateValidator(Type validationType);
}
[DefaultMemberAttribute("Item")]
public class Ecng.ComponentModel.ConvertibleObservableCollection`2 : BaseObservableCollection {
    private ICollection`1<TDisplay> _collection;
    private Func`2<TItem, TDisplay> _converter;
    private OrderedDictionary _convertedValues;
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<TItem>> AddedRange;
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<TItem>> RemovedRange;
    private object SyncRoot { get; }
    public TItem[] Items { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<TItem>.IsReadOnly { get; }
    public TItem Item { get; public set; }
    public ConvertibleObservableCollection`2(ICollection`1<TDisplay> collection, Func`2<TItem, TDisplay> converter);
    private object get_SyncRoot();
    public TItem[] get_Items();
    public TDisplay TryGet(TItem item);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void AddRange(IEnumerable`1<TItem> items);
    public sealed virtual void RemoveRange(IEnumerable`1<TItem> items);
    public virtual int RemoveRange(int index, int count);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    public sealed virtual void Add(TItem item);
    public sealed virtual bool Remove(TItem item);
    public virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<TItem>.get_IsReadOnly();
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAll(Func`2<TItem, bool> pred);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class Ecng.ComponentModel.CustomObjectWrapper`1 : Disposable {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private T <Obj>k__BackingField;
    private EventDescriptorCollection _eventCollection;
    private PropertyDescriptorCollection _propCollection;
    public T Obj { get; }
    protected CustomObjectWrapper`1(T obj);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string name);
    [CompilerGeneratedAttribute]
public T get_Obj();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    protected virtual IEnumerable`1<EventDescriptor> OnGetEvents();
    protected virtual IEnumerable`1<PropertyDescriptor> OnGetProperties();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private ProxyEventDescriptor<T> <OnGetEvents>b__20_0(EventDescriptor ed);
    [CompilerGeneratedAttribute]
private ProxyPropDescriptor<T> <OnGetProperties>b__21_0(PropertyDescriptor pd);
}
public class Ecng.ComponentModel.DispatcherNotifiableObject`1 : CustomObjectWrapper`1<T> {
    private IDispatcher _dispatcher;
    private SynchronizedSet`1<string> _names;
    private DateTime _nextTime;
    private TimeSpan _notifyInterval;
    private static DispatcherNotifiableObjectTimer Timer { get; }
    protected TimeSpan NotifyInterval { get; protected set; }
    public DispatcherNotifiableObject`1(IDispatcher dispatcher, T obj);
    private static DispatcherNotifiableObjectTimer get_Timer();
    protected TimeSpan get_NotifyInterval();
    protected void set_NotifyInterval(TimeSpan value);
    private void NotifiableObjectGuiWrapperTimerOnTick();
    protected virtual void DisposeManaged();
    protected virtual bool NeedToNotify(string propName);
    protected virtual IEnumerable`1<EventDescriptor> OnGetEvents();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object _, PropertyChangedEventArgs args);
}
internal class Ecng.ComponentModel.DispatcherNotifiableObjectTimer : object {
    private TimeSpan _minInterval;
    private TimeSpan _interval;
    [CompilerGeneratedAttribute]
private Action Tick;
    private static Lazy`1<DispatcherNotifiableObjectTimer> _instance;
    public TimeSpan Interval { get; public set; }
    public static DispatcherNotifiableObjectTimer Instance { get; }
    private static DispatcherNotifiableObjectTimer();
    [CompilerGeneratedAttribute]
public void add_Tick(Action value);
    [CompilerGeneratedAttribute]
public void remove_Tick(Action value);
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    [AsyncStateMachineAttribute("Ecng.ComponentModel.DispatcherNotifiableObjectTimer/<TimerTask>d__9")]
private Task TimerTask();
    public static DispatcherNotifiableObjectTimer get_Instance();
}
[DefaultMemberAttribute("Item")]
public class Ecng.ComponentModel.DispatcherObservableCollection`1 : BaseObservableCollection {
    private Queue`1<CollectionAction<TItem>> _pendingActions;
    private int _pendingCount;
    private bool _isTimerStarted;
    [CompilerGeneratedAttribute]
private Action BeforeUpdate;
    [CompilerGeneratedAttribute]
private Action AfterUpdate;
    [CompilerGeneratedAttribute]
private IListEx`1<TItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private SyncObject <SyncRoot>k__BackingField;
    public IListEx`1<TItem> Items { get; }
    public IDispatcher Dispatcher { get; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public TItem Item { get; public set; }
    public SyncObject SyncRoot { get; }
    public DispatcherObservableCollection`1(IDispatcher dispatcher, IListEx`1<TItem> items);
    [CompilerGeneratedAttribute]
public void add_BeforeUpdate(Action value);
    [CompilerGeneratedAttribute]
public void remove_BeforeUpdate(Action value);
    [CompilerGeneratedAttribute]
public void add_AfterUpdate(Action value);
    [CompilerGeneratedAttribute]
public void remove_AfterUpdate(Action value);
    [CompilerGeneratedAttribute]
public IListEx`1<TItem> get_Items();
    [CompilerGeneratedAttribute]
public IDispatcher get_Dispatcher();
    public sealed virtual void add_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void remove_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void add_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void remove_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    public virtual void AddRange(IEnumerable`1<TItem> items);
    public virtual void RemoveRange(IEnumerable`1<TItem> items);
    public virtual int RemoveRange(int index, int count);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(TItem item);
    public virtual bool Remove(TItem item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public virtual void Clear();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
    public object Do(Func`1<object> func);
    private void AddAction(CollectionAction<TItem> item);
    private void OnFlush();
    [CompilerGeneratedAttribute]
public sealed virtual SyncObject get_SyncRoot();
}
public class Ecng.ComponentModel.DocAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DocUrl>k__BackingField;
    public string DocUrl { get; }
    public DocAttribute(string docUrl);
    [CompilerGeneratedAttribute]
public string get_DocUrl();
}
public class Ecng.ComponentModel.DummyDispatcher : object {
    private sealed virtual override bool Ecng.ComponentModel.IDispatcher.CheckAccess();
    private sealed virtual override void Ecng.ComponentModel.IDispatcher.Invoke(Action action);
    private sealed virtual override void Ecng.ComponentModel.IDispatcher.InvokeAsync(Action action);
}
[AttributeUsageAttribute("144")]
public class Ecng.ComponentModel.EditorExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AutoComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sorted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSelectedItemsCount>k__BackingField;
    public bool AutoComplete { get; public set; }
    public bool Sorted { get; public set; }
    public bool IncludeObsolete { get; public set; }
    public bool ShowSelectedItemsCount { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoComplete();
    [CompilerGeneratedAttribute]
public void set_AutoComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sorted();
    [CompilerGeneratedAttribute]
public void set_Sorted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeObsolete();
    [CompilerGeneratedAttribute]
public void set_IncludeObsolete(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSelectedItemsCount();
    [CompilerGeneratedAttribute]
public void set_ShowSelectedItemsCount(bool value);
}
public class Ecng.ComponentModel.EntityProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityProperty <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntityProperty> <Properties>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public EntityProperty Parent { get; public set; }
    public IEnumerable`1<EntityProperty> Properties { get; public set; }
    public string FullDisplayName { get; }
    public string ParentName { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public EntityProperty get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(EntityProperty value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<EntityProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IEnumerable`1<EntityProperty> value);
    public string get_FullDisplayName();
    public string get_ParentName();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.EntityPropertyHelper : object {
    [ExtensionAttribute]
public static IEnumerable`1<EntityProperty> GetEntityProperties(Type type, Func`2<PropertyInfo, bool> filter);
    [ExtensionAttribute]
public static IEnumerable`1<EntityProperty> GetEntityProperties(Type type, EntityProperty parent, Func`2<PropertyInfo, bool> filter);
    [IteratorStateMachineAttribute("Ecng.ComponentModel.EntityPropertyHelper/<GetEntityProperties>d__2")]
[ExtensionAttribute]
private static IEnumerable`1<EntityProperty> GetEntityProperties(Type type, EntityProperty parent, HashSet`1<Type> processed, Func`2<PropertyInfo, bool> filter);
    [ExtensionAttribute]
public static Type GetPropType(Type type, string name, Func`3<Type, string, Type> getVirtualProp);
    [ExtensionAttribute]
public static object GetPropValue(object entity, string name, Func`3<object, string, object> getVirtualProp, IDictionary`2<string, object> vars);
    [IteratorStateMachineAttribute("Ecng.ComponentModel.EntityPropertyHelper/<GetVars>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetVars(Type type, string name, Func`3<Type, string, Type> getVirtualProp);
}
public class Ecng.ComponentModel.EventDispatcher : Disposable {
    private Action`1<Exception> _errorHandler;
    private SynchronizedDictionary`2<string, BlockingQueue`1<Action>> _events;
    public EventDispatcher(Action`1<Exception> errorHandler);
    public void Add(Action evt);
    public virtual void Add(Action evt, string syncToken);
    private static BlockingQueue`1<Action> CreateNewThreadQueuePair(string syncToken);
    protected virtual void DisposeManaged();
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.Extensions : object {
    [ExtensionAttribute]
public static string GetDisplayName(ICustomAttributeProvider provider, string defaultValue);
    [ExtensionAttribute]
public static string GetDisplayName(PropertyDescriptor pd, string defaultValue);
    [ExtensionAttribute]
public static string GetDescription(ICustomAttributeProvider provider, string defaultValue);
    [ExtensionAttribute]
public static string GetCategory(ICustomAttributeProvider provider, string defaultValue);
    [ExtensionAttribute]
private static string GetTypeName(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static string GetDisplayName(object value);
    private static TValue Get(object field, Func`2<FieldInfo, TValue> func, Func`2<object, TValue> getDefault, Func`3<TValue, TValue, TValue> aggregate, bool canSplit);
    [ExtensionAttribute]
public static string GetFieldDisplayName(object field);
    [ExtensionAttribute]
public static string GetFieldDescription(object field);
    [ExtensionAttribute]
public static Uri GetFieldIcon(object field);
    [ExtensionAttribute]
public static string GetDocUrl(Type type);
    [ExtensionAttribute]
public static Uri GetIconUrl(Type type);
    [ExtensionAttribute]
public static Uri GetResourceUrl(string resName);
    [ExtensionAttribute]
public static Uri GetResourceUrl(string resName, Type type);
    [ExtensionAttribute]
private static Uri GetResourceUrl(Assembly assembly, string resName);
    [ExtensionAttribute]
public static IEnumerable`1<IItemsSourceItem> GetValues(ItemsSourceAttribute attr);
    [ExtensionAttribute]
public static bool CanAutoLogin(ServerCredentials credentials);
    [ExtensionAttribute]
public static Nullable`1<Guid> TryGetGuid(Type controlType);
    [ExtensionAttribute]
public static string ToN(Guid id);
}
public class Ecng.ComponentModel.FileSizeFormatProvider : object {
    private static string _fileSizeFormat;
    private static String[] _letters;
    private static FileSizeFormatProvider();
    private sealed virtual override object System.IFormatProvider.GetFormat(Type formatType);
    private sealed virtual override string System.ICustomFormatter.Format(string format, object arg, IFormatProvider formatProvider);
    private static string DefaultFormat(string format, object arg, IFormatProvider formatProvider);
}
public class Ecng.ComponentModel.GreaterThanZeroAttribute : ValidationAttribute {
    public virtual bool IsValid(object value);
}
public interface Ecng.ComponentModel.ICodeGenVisitor {
    public int CurrIndent { get; }
    public abstract virtual int get_CurrIndent();
    public abstract virtual ICodeGenVisitor ChangeIndent(bool increase);
    public abstract virtual ICodeGenVisitor AddLine(string line);
    public abstract virtual ICodeGenVisitor Add(string text);
    public abstract virtual ICodeGenVisitor AddWithIndent(string text);
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.ICodeGenVisitorExtensions : object {
    [ExtensionAttribute]
public static ICodeGenVisitor AddLine(ICodeGenVisitor visitor);
    [ExtensionAttribute]
public static ICodeGenVisitor AddWithIndent(ICodeGenVisitor visitor);
    [ExtensionAttribute]
public static IDisposable ChangeIndent(ICodeGenVisitor visitor);
}
public class Ecng.ComponentModel.IconAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFullPath>k__BackingField;
    public string Icon { get; }
    public bool IsFullPath { get; }
    public IconAttribute(string icon, bool isFullPath);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public bool get_IsFullPath();
}
public interface Ecng.ComponentModel.IConvertibleObservableCollection`1 {
    public abstract virtual void RemoveAll(Func`2<TItem, bool> pred);
}
public interface Ecng.ComponentModel.IDebugger {
    public bool IsDisabled { get; public set; }
    public bool CanStepInto { get; }
    public bool CanStepOut { get; }
    public bool IsWaiting { get; }
    public bool IsWaitingOnError { get; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual bool get_CanStepInto();
    public abstract virtual bool get_CanStepOut();
    public abstract virtual bool get_IsWaiting();
    public abstract virtual bool get_IsWaitingOnError();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Continued(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Continued(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Break(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Break(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(Action value);
    public abstract virtual void Continue();
    public abstract virtual void StepNext();
    public abstract virtual void RemoveAllBreaks();
}
public interface Ecng.ComponentModel.IDebugger`2 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Break(Action`1<TLine> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Break(Action`1<TLine> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(Action`1<TMethod> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(Action`1<TMethod> value);
    public abstract virtual void AddBreak(TLine line);
    public abstract virtual void RemoveBreak(TLine line);
    public abstract virtual bool IsBreak(TLine line);
    public abstract virtual void StepInto(TMethod method);
    public abstract virtual void StepOut(TMethod method);
}
public interface Ecng.ComponentModel.IDispatcher {
    public abstract virtual void Invoke(Action action);
    public abstract virtual void InvokeAsync(Action action);
    public abstract virtual bool CheckAccess();
}
public interface Ecng.ComponentModel.IFileBrowserEditor {
}
public interface Ecng.ComponentModel.IFileSaveEditor {
}
public interface Ecng.ComponentModel.IFolderBrowserEditor {
}
public interface Ecng.ComponentModel.IItemsSource {
    public IEnumerable`1<IItemsSourceItem> Values { get; }
    public Type ValueType { get; }
    public bool ExcludeObsolete { get; }
    public Nullable`1<ListSortDirection> SortOrder { get; }
    public abstract virtual IEnumerable`1<IItemsSourceItem> get_Values();
    public abstract virtual Type get_ValueType();
    public abstract virtual bool get_ExcludeObsolete();
    public abstract virtual Nullable`1<ListSortDirection> get_SortOrder();
    public abstract virtual IItemsSourceItem CreateNewItem(object value);
}
public interface Ecng.ComponentModel.IItemsSource`1 {
    public IEnumerable`1<IItemsSourceItem`1<TValue>> Values { get; }
    public abstract virtual IEnumerable`1<IItemsSourceItem`1<TValue>> get_Values();
    public abstract virtual IItemsSourceItem`1<TValue> CreateNewItem(TValue value);
}
public interface Ecng.ComponentModel.IItemsSourceItem {
    public string DisplayName { get; }
    public string Description { get; }
    public Uri Icon { get; }
    public bool IsObsolete { get; }
    public object Value { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual Uri get_Icon();
    public abstract virtual bool get_IsObsolete();
    public abstract virtual object get_Value();
}
public interface Ecng.ComponentModel.IItemsSourceItem`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
public interface Ecng.ComponentModel.ILastDirSelector {
    public abstract virtual bool TryGetValue(string ctrlName, String& value);
    public abstract virtual void SetValue(string ctrlName, string value);
}
public interface Ecng.ComponentModel.INotifyPropertiesChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertiesChanged(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertiesChanged(Action value);
}
public interface Ecng.ComponentModel.INotifyPropertyChangedEx {
    public abstract virtual void NotifyPropertyChanged(string propertyName);
}
public interface Ecng.ComponentModel.IRange {
    public bool HasMinValue { get; }
    public bool HasMaxValue { get; }
    public object Min { get; public set; }
    public object Max { get; public set; }
    public abstract virtual bool get_HasMinValue();
    public abstract virtual bool get_HasMaxValue();
    public abstract virtual object get_Min();
    public abstract virtual void set_Min(object value);
    public abstract virtual object get_Max();
    public abstract virtual void set_Max(object value);
}
[AttributeUsageAttribute("128")]
public class Ecng.ComponentModel.ItemsSourceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEditable>k__BackingField;
    public Type Type { get; }
    public bool IsEditable { get; public set; }
    public ItemsSourceAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsEditable();
    [CompilerGeneratedAttribute]
public void set_IsEditable(bool value);
}
public class Ecng.ComponentModel.ItemsSourceBase : ItemsSourceBase`1<object> {
    private static IItemsSource Create(IEnumerable values, Type itemValueType, Nullable`1<bool> excludeObsolete, Nullable`1<ListSortDirection> sortOrder, Func`2<IItemsSourceItem, bool> filter, Func`2<object, string> getName, Func`2<object, string> getDescription);
    public static IItemsSource Create(object val, Type itemValueType, Nullable`1<bool> excludeObsolete, Nullable`1<ListSortDirection> sortOrder, Func`2<IItemsSourceItem, bool> filter, Func`2<object, string> getName, Func`2<object, string> getDescription);
    private static Type GetSourceValueType(IEnumerable values);
    private static Type GetParamType(Type type, Type genericInterfaceType);
    private static Type GetCommonType(Type[] types);
}
public class Ecng.ComponentModel.ItemsSourceBase`1 : object {
    private T[] _values;
    private Lazy`1<IEnumerable`1<IItemsSourceItem`1<T>>> _items;
    private Func`2<IItemsSourceItem, bool> _filter;
    private Func`2<T, string> _getName;
    private Func`2<T, string> _getDescription;
    [CompilerGeneratedAttribute]
private bool <ExcludeObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ListSortDirection> <SortOrder>k__BackingField;
    public bool ExcludeObsolete { get; }
    public Nullable`1<ListSortDirection> SortOrder { get; }
    private IEnumerable`1<IItemsSourceItem> Ecng.ComponentModel.IItemsSource.Values { get; }
    public IEnumerable`1<IItemsSourceItem`1<T>> Values { get; }
    public Type ValueType { get; }
    protected string Format { get; }
    public ItemsSourceBase`1(IEnumerable values, bool excludeObsolete, Nullable`1<ListSortDirection> sortOrder, Func`2<IItemsSourceItem, bool> filter, Func`2<T, string> getName, Func`2<T, string> getDescription);
    public ItemsSourceBase`1(bool excludeObsolete, Nullable`1<ListSortDirection> sortOrder, Func`2<IItemsSourceItem, bool> filter, Func`2<T, string> getName, Func`2<T, string> getDescription);
    public ItemsSourceBase`1(IEnumerable values, Func`2<T, string> getName, Func`2<T, string> getDescription);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExcludeObsolete();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ListSortDirection> get_SortOrder();
    private sealed virtual override IEnumerable`1<IItemsSourceItem> Ecng.ComponentModel.IItemsSource.get_Values();
    public sealed virtual IEnumerable`1<IItemsSourceItem`1<T>> get_Values();
    public virtual Type get_ValueType();
    protected virtual string get_Format();
    protected virtual string GetName(T value);
    protected virtual string GetDescription(T value);
    protected virtual Uri GetIcon(T value);
    protected virtual bool GetIsObsolete(T value);
    protected virtual bool Filter(IItemsSourceItem`1<T> item);
    private sealed virtual override IItemsSourceItem Ecng.ComponentModel.IItemsSource.CreateNewItem(object value);
    private IItemsSourceItem`1<T> CreateNewItem(IItemsSourceItem fromItem);
    public virtual IItemsSourceItem`1<T> CreateNewItem(T value);
    protected virtual IEnumerable`1<T> GetValues();
    private IEnumerable`1<IItemsSourceItem`1<T>> FilterItems(IEnumerable`1<IItemsSourceItem`1<T>> items);
    private IEnumerable`1<IItemsSourceItem`1<T>> CreateItems(IEnumerable`1<T> values);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IItemsSourceItem`1<T>> <.ctor>b__17_1();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IItemsSourceItem`1<T>> <.ctor>b__17_4();
}
public class Ecng.ComponentModel.ItemsSourceItem`1 : NotifiableObject {
    private Func`1<string> _getDisplayName;
    private Func`1<string> _getDescription;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    private object Ecng.ComponentModel.IItemsSourceItem.Value { get; }
    public T Value { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public Uri Icon { get; }
    public bool IsObsolete { get; }
    public ItemsSourceItem`1(T value, Func`1<string> getDisplayName, Func`1<string> getDescription, Uri iconUri, bool isObsolete);
    private sealed virtual override object Ecng.ComponentModel.IItemsSourceItem.get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObsolete();
    public virtual string ToString();
}
public interface Ecng.ComponentModel.IUndoRedoManager {
    public ICommand UndoCommand { get; }
    public ICommand RedoCommand { get; }
    public abstract virtual ICommand get_UndoCommand();
    public abstract virtual ICommand get_RedoCommand();
}
public class Ecng.ComponentModel.LengthAttribute : BaseValidatorAttribute {
    [CompilerGeneratedAttribute]
private Range`1<int> <Length>k__BackingField;
    public Range`1<int> Length { get; }
    public LengthAttribute(int minLength, int maxLength);
    public LengthAttribute(int maxLength);
    [CompilerGeneratedAttribute]
public Range`1<int> get_Length();
    public virtual BaseValidator CreateValidator(Type validationType);
}
public class Ecng.ComponentModel.LengthValidator`2 : BaseValidator`1<TCollectiom> {
    [CompilerGeneratedAttribute]
private Range`1<int> <Length>k__BackingField;
    public Range`1<int> Length { get; }
    public LengthValidator`2(Range`1<int> length);
    [CompilerGeneratedAttribute]
public Range`1<int> get_Length();
    public virtual void Validate(TCollectiom value);
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.LikeComparesExtensions : object {
    [ExtensionAttribute]
public static bool Like(string value, string like, Nullable`1<ComparisonOperator> likeCompare);
    [ExtensionAttribute]
public static string ToExpression(string like, Nullable`1<ComparisonOperator> likeCompare);
}
[DataContractAttribute]
public abstract class Ecng.ComponentModel.NotifiableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    public sealed virtual void NotifyPropertyChanged(string propertyName);
    protected void NotifyChanged(string propertyName);
    protected void NotifyChanging(string propertyName);
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.NotifyPropertyChangedExHelper : object {
    [CompilerGeneratedAttribute]
private static Func`3<object, string, bool> <Filter>k__BackingField;
    public static Func`3<object, string, bool> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public static Func`3<object, string, bool> get_Filter();
    [CompilerGeneratedAttribute]
public static void set_Filter(Func`3<object, string, bool> value);
    [ExtensionAttribute]
public static void Notify(T entity, string propertyName);
}
public class Ecng.ComponentModel.NotNullAttribute : BaseValidatorAttribute {
    public virtual BaseValidator CreateValidator(Type validationType);
}
public class Ecng.ComponentModel.NotNullValidator`1 : BaseValidator`1<T> {
    public virtual void Validate(T value);
}
[AttributeUsageAttribute("128")]
public class Ecng.ComponentModel.OAuthAttribute : Attribute {
    [CompilerGeneratedAttribute]
private long <ServiceId>k__BackingField;
    public long ServiceId { get; }
    public OAuthAttribute(long serviceId);
    [CompilerGeneratedAttribute]
public long get_ServiceId();
}
[DefaultMemberAttribute("Item")]
public class Ecng.ComponentModel.ObservableCollectionEx`1 : object {
    private List`1<TItem> _items;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private Action`1<IEnumerable`1<TItem>> _addedRange;
    private Action`1<IEnumerable`1<TItem>> _removedRange;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public TItem Item { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void remove_AddedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void add_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    public sealed virtual void remove_RemovedRange(Action`1<IEnumerable`1<TItem>> value);
    public virtual void AddRange(IEnumerable`1<TItem> items);
    public virtual void RemoveRange(IEnumerable`1<TItem> items);
    public virtual int RemoveRange(int index, int count);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(TItem item);
    public virtual bool Remove(TItem item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public virtual void Clear();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
    private void OnRemove(IList`1<TItem> items, int index);
    protected void OnPropertyChanged(string propertyName);
    private void OnCountPropertyChanged();
    private void OnIndexerPropertyChanged();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IList`1<TItem> items, int index);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item, int index);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item, int index, int oldIndex);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object oldItem, object newItem, int index);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual void ProcessCollectionChanged(IEnumerable`1<NotifyCollectionChangedEventHandler> subscribers, NotifyCollectionChangedEventArgs args);
    private void OnCollectionReset();
    [CompilerGeneratedAttribute]
private void <RemoveRange>b__16_0(TItem i);
}
[DefaultMemberAttribute("Item")]
public class Ecng.ComponentModel.ObservableDictionary`2 : object {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private KeyedDictionaryEntryCollection<TKey, TValue> _keyedEntryCollection;
    private int _countCache;
    private Dictionary`2<TKey, TValue> _dictionaryCache;
    private int _dictionaryCacheVersion;
    private int _version;
    private SerializationInfo _siInfo;
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    public TValue Item { get; public set; }
    public ValueCollection<TKey, TValue> Values { get; }
    private Dictionary`2<TKey, TValue> TrueDictionary { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ObservableDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public ObservableDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ObservableDictionary`2(IDictionary`2<TKey, TValue> dictionary, IEqualityComparer`1<TKey> comparer);
    protected ObservableDictionary`2(SerializationInfo info, StreamingContext context);
    public IEqualityComparer`1<TKey> get_Comparer();
    public int get_Count();
    public KeyCollection<TKey, TValue> get_Keys();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public ValueCollection<TKey, TValue> get_Values();
    private Dictionary`2<TKey, TValue> get_TrueDictionary();
    public void Add(TKey key, TValue value);
    public void Clear();
    public bool ContainsKey(TKey key);
    public bool ContainsValue(TValue value);
    public IEnumerator GetEnumerator();
    public bool Remove(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    protected virtual bool AddEntry(TKey key, TValue value);
    protected virtual bool ClearEntries();
    protected int GetIndexAndEntryForKey(TKey key, DictionaryEntry& entry);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual void OnPropertyChanged(string name);
    protected virtual bool RemoveEntry(TKey key);
    protected virtual bool SetEntry(TKey key, TValue value);
    private void DoAddEntry(TKey key, TValue value);
    private void DoClearEntries();
    private bool DoRemoveEntry(TKey key);
    private void DoSetEntry(TKey key, TValue value);
    private void FireEntryAddedNotifications(DictionaryEntry entry, int index);
    private void FireEntryRemovedNotifications(DictionaryEntry entry, int index);
    private void FirePropertyChangedNotifications();
    private void FireResetNotifications();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey(TKey key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue(TKey key, TValue& value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> kvp);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> kvp);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> kvp);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void OnDeserialization(object sender);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.OperatorRegistry : object {
    private static SynchronizedDictionary`2<Type, IOperator> _operators;
    private static OperatorRegistry();
    public static void AddOperator(IOperator`1<T> operator);
    [ExtensionAttribute]
public static IOperator GetOperator(Type type);
    public static IOperator`1<T> GetOperator();
    public static bool IsRegistered();
    public static bool IsRegistered(Type type);
    public static void RemoveOperator(IOperator`1<T> operator);
    [ExtensionAttribute]
public static Nullable`1<long> ThrowIfNegative(Nullable`1<long> value, string name);
    [ExtensionAttribute]
public static long ThrowIfNegative(long value, string name);
}
[DataContractAttribute]
public class Ecng.ComponentModel.Price : Equatable`1<Price> {
    [CompilerGeneratedAttribute]
private PriceTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Value>k__BackingField;
    public static char PercentChar;
    public static char LimitChar;
    [DataMemberAttribute]
public PriceTypes Type { get; public set; }
    [DataMemberAttribute]
public decimal Value { get; public set; }
    private bool IsPercent { get; }
    private bool IsLimit { get; }
    private static Price();
    public Price(decimal value, PriceTypes type);
    [CompilerGeneratedAttribute]
public PriceTypes get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PriceTypes value);
    [CompilerGeneratedAttribute]
public decimal get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(decimal value);
    public virtual Price Clone();
    public virtual int CompareTo(Price other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    protected virtual bool OnEquals(Price other);
    private bool EqualsImpl(Price p);
    public static Price op_Implicit(int value);
    public static Price op_Implicit(decimal value);
    public static double op_Explicit(Price value);
    public static Nullable`1<double> op_Explicit(Price value);
    public static decimal op_Explicit(Price value);
    public static Nullable`1<decimal> op_Explicit(Price value);
    public static bool op_Inequality(Price v1, Price v2);
    public static bool op_Equality(Price v1, Price v2);
    private static Price CreateResult(Price v1, Price v2, Func`3<decimal, decimal, decimal> operation, Func`3<decimal, decimal, decimal> percentOperation);
    public static Price op_Addition(Price v1, Price v2);
    public static Price op_Multiply(Price v1, Price v2);
    public static Price op_Subtraction(Price v1, Price v2);
    public static Price op_Division(Price v1, Price v2);
    private static Nullable`1<bool> MoreThan(Price v1, Price v2);
    public static bool op_GreaterThan(Price v1, Price v2);
    public static bool op_GreaterThanOrEqual(Price v1, Price v2);
    public static bool op_LessThan(Price v1, Price v2);
    public static bool op_LessThanOrEqual(Price v1, Price v2);
    private sealed virtual override Price Ecng.Common.IOperable<Ecng.ComponentModel.Price>.Add(Price other);
    private sealed virtual override Price Ecng.Common.IOperable<Ecng.ComponentModel.Price>.Subtract(Price other);
    private sealed virtual override Price Ecng.Common.IOperable<Ecng.ComponentModel.Price>.Multiply(Price other);
    private sealed virtual override Price Ecng.Common.IOperable<Ecng.ComponentModel.Price>.Divide(Price other);
    public static Price op_UnaryNegation(Price v);
    private bool get_IsPercent();
    private bool get_IsLimit();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override void Ecng.Serialization.IPersistable.Load(SettingsStorage storage);
    private sealed virtual override void Ecng.Serialization.IPersistable.Save(SettingsStorage storage);
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.PriceExtensions : object {
    [ExtensionAttribute]
public static Price ToPriceType(string str, bool throwIfNull);
    [ExtensionAttribute]
public static Price Percents(int value);
    [ExtensionAttribute]
public static Price Percents(double value);
    [ExtensionAttribute]
public static Price Percents(decimal value);
}
[DataContractAttribute]
public enum Ecng.ComponentModel.PriceTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static PriceTypes Absolute;
    [EnumMemberAttribute]
public static PriceTypes Percent;
    [EnumMemberAttribute]
public static PriceTypes Limit;
}
public static class Ecng.ComponentModel.ProcessSingleton : object {
    private static Locker _isRunningMutex;
    public static bool StartIsRunning(string appKey);
    public static void StopIsRunning();
}
public class Ecng.ComponentModel.Range`1 : Equatable`1<Range`1<T>> {
    public static T MinValue;
    public static T MaxValue;
    private static IOperator`1<T> _operator;
    private NullableEx`1<T> _min;
    private NullableEx`1<T> _max;
    [BrowsableAttribute("False")]
public bool HasMinValue { get; }
    [BrowsableAttribute("False")]
public bool HasMaxValue { get; }
    [BrowsableAttribute("False")]
public T Length { get; }
    public T Min { get; public set; }
    public T Max { get; public set; }
    private object Ecng.ComponentModel.IRange.Min { get; private set; }
    private object Ecng.ComponentModel.IRange.Max { get; private set; }
    private static Range`1();
    public Range`1(T min, T max);
    public sealed virtual bool get_HasMinValue();
    public sealed virtual bool get_HasMaxValue();
    public T get_Length();
    public T get_Min();
    public void set_Min(T value);
    public T get_Max();
    public void set_Max(T value);
    public static Range`1<T> op_Explicit(string str);
    public static Range`1<T> Parse(string value);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual bool OnEquals(Range`1<T> other);
    private sealed virtual override object Ecng.ComponentModel.IRange.get_Min();
    private sealed virtual override void Ecng.ComponentModel.IRange.set_Min(object value);
    private sealed virtual override object Ecng.ComponentModel.IRange.get_Max();
    private sealed virtual override void Ecng.ComponentModel.IRange.set_Max(object value);
    public virtual Range`1<T> Clone();
    public bool Contains(Range`1<T> range);
    public Range`1<T> Intersect(Range`1<T> range);
    public Range`1<T> SubRange(T min, T max);
    public bool Contains(T value);
    private void Init(T min, T max);
    private static void ValidateBounds(T min, T max);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
public class Ecng.ComponentModel.RangeAttribute : BaseValidatorAttribute {
    [CompilerGeneratedAttribute]
private object <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MaxValue>k__BackingField;
    public object MinValue { get; public set; }
    public object MaxValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual object get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(object value);
    [CompilerGeneratedAttribute]
public virtual object get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(object value);
    public virtual BaseValidator CreateValidator(Type validationType);
    private BaseValidator`1<T> CreateValidator();
}
[ExtensionAttribute]
public static class Ecng.ComponentModel.RangeHelper : object {
    [ExtensionAttribute]
public static bool IsEmpty(Range`1<T> range);
    [ExtensionAttribute]
public static IEnumerable`1<Range`1<T>> JoinRanges(IEnumerable`1<Range`1<T>> ranges);
    [ExtensionAttribute]
public static IEnumerable`1<Range`1<DateTimeOffset>> Exclude(Range`1<DateTimeOffset> from, Range`1<DateTimeOffset> excludingRange);
    [ExtensionAttribute]
public static IEnumerable`1<Range`1<DateTime>> Exclude(Range`1<DateTime> from, Range`1<DateTime> excludingRange);
    [IteratorStateMachineAttribute("Ecng.ComponentModel.RangeHelper/<Exclude>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Range`1<long>> Exclude(Range`1<long> from, Range`1<long> excludingRange);
    [ExtensionAttribute]
public static IEnumerable`1<Range`1<DateTimeOffset>> GetRanges(IEnumerable`1<DateTimeOffset> dates, DateTimeOffset from, DateTimeOffset to);
    [ExtensionAttribute]
public static IEnumerable`1<Range`1<DateTime>> GetRanges(IEnumerable`1<DateTime> dates, DateTime from, DateTime to);
    [IteratorStateMachineAttribute("Ecng.ComponentModel.RangeHelper/<GetRanges>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<Range`1<long>> GetRanges(IEnumerable`1<long> dates, long from, long to);
    [ExtensionAttribute]
public static SettingsStorage ToStorage(Range`1<T> range);
    [ExtensionAttribute]
public static Range`1<T> ToRange(SettingsStorage storage);
}
public class Ecng.ComponentModel.RangeValidator`1 : BaseValidator`1<T> {
    [CompilerGeneratedAttribute]
private Range`1<T> <Range>k__BackingField;
    public Range`1<T> Range { get; }
    public RangeValidator`1(Range`1<T> range);
    public RangeValidator`1(T minValue, T maxValue);
    [CompilerGeneratedAttribute]
public Range`1<T> get_Range();
    public virtual void Validate(T value);
}
public class Ecng.ComponentModel.ServerCredentials : NotifiableObject {
    private string _email;
    private SecureString _password;
    private SecureString _token;
    public string Email { get; public set; }
    public SecureString Password { get; public set; }
    public SecureString Token { get; public set; }
    public string get_Email();
    public void set_Email(string value);
    public SecureString get_Password();
    public void set_Password(SecureString value);
    public SecureString get_Token();
    public void set_Token(SecureString value);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
}
public class Ecng.ComponentModel.Stat`1 : object {
    [CompilerGeneratedAttribute]
private int <LongestLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FreqLimit>k__BackingField;
    private IPAddress _aggressiveIp;
    private TimeSpan _aggressiveTime;
    private Dictionary`2<TAction, int> _freq;
    private PriorityQueue`2<TimeSpan, TAction> _longests;
    private Dictionary`2<Stopwatch, ValueTuple`2<IPAddress, TAction>> _pendings;
    private Dictionary`2<IPAddress, RefTriple`3<HashSet`1<Stopwatch>, long, TimeSpan>> _allWatches;
    private SyncObject _sync;
    public int LongestLimit { get; public set; }
    public int FreqLimit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_LongestLimit();
    [CompilerGeneratedAttribute]
public void set_LongestLimit(int value);
    [CompilerGeneratedAttribute]
public int get_FreqLimit();
    [CompilerGeneratedAttribute]
public void set_FreqLimit(int value);
    public StatInfo`1<TAction> GetInfo(int skip, int take);
    public Item<TAction> Begin(TAction action, IPAddress address);
    private void End(Item<TAction> item, Stopwatch watch);
    public void Clear();
}
public class Ecng.ComponentModel.StatInfo`1 : ValueType {
    [CompilerGeneratedAttribute]
private int <UniqueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PendingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <AggressiveAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AggressiveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Item`1[] <Freq>k__BackingField;
    [CompilerGeneratedAttribute]
private Item`1[] <Longest>k__BackingField;
    [CompilerGeneratedAttribute]
private Item`1[] <Pendings>k__BackingField;
    public int UniqueCount { get; public set; }
    public int PendingCount { get; public set; }
    public IPAddress AggressiveAddress { get; public set; }
    public TimeSpan AggressiveTime { get; public set; }
    public Item`1[] Freq { get; public set; }
    public Item`1[] Longest { get; public set; }
    public Item`1[] Pendings { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_UniqueCount();
    [CompilerGeneratedAttribute]
public void set_UniqueCount(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_PendingCount();
    [CompilerGeneratedAttribute]
public void set_PendingCount(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_AggressiveAddress();
    [CompilerGeneratedAttribute]
public void set_AggressiveAddress(IPAddress value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TimeSpan get_AggressiveTime();
    [CompilerGeneratedAttribute]
public void set_AggressiveTime(TimeSpan value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Item`1[] get_Freq();
    [CompilerGeneratedAttribute]
public void set_Freq(Item`1[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Item`1[] get_Longest();
    [CompilerGeneratedAttribute]
public void set_Longest(Item`1[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Item`1[] get_Pendings();
    [CompilerGeneratedAttribute]
public void set_Pendings(Item`1[] value);
    public virtual string ToString();
}
public class Ecng.ComponentModel.StreamWriterCodeGenVisitor : BaseCodeGenVisitor {
    private StreamWriter _writer;
    public StreamWriterCodeGenVisitor(StreamWriter writer);
    protected virtual void WriteLine(string text);
    protected virtual void Write(string text);
}
public class Ecng.ComponentModel.StringAttribute : LengthAttribute {
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    public string Regex { get; public set; }
    public StringAttribute(int maxLength);
    public StringAttribute(int minLength, int maxLength);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    public virtual BaseValidator CreateValidator(Type validationType);
}
public class Ecng.ComponentModel.StringBuilderCodeGenVisitor : BaseCodeGenVisitor {
    private StringBuilder _builder;
    public StringBuilderCodeGenVisitor(StringBuilder builder);
    protected virtual void WriteLine(string text);
    protected virtual void Write(string text);
}
public class Ecng.ComponentModel.StringValidator : BaseValidator`1<string> {
    [CompilerGeneratedAttribute]
private Range`1<int> <Length>k__BackingField;
    private static FieldInfo _parrernField;
    private Regex _regex;
    private RegexOptions _options;
    public Range`1<int> Length { get; }
    public string Regex { get; public set; }
    public RegexOptions Options { get; public set; }
    public StringValidator(Range`1<int> length);
    public StringValidator(Range`1<int> length, string regex);
    private static StringValidator();
    [CompilerGeneratedAttribute]
public Range`1<int> get_Length();
    public string get_Regex();
    public void set_Regex(string value);
    public RegexOptions get_Options();
    public void set_Options(RegexOptions value);
    public virtual void Validate(string value);
}
public class Ecng.ComponentModel.TimeSpanEditorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TimeSpanEditorMask <Mask>k__BackingField;
    public static TimeSpanEditorMask DefaultMask;
    public TimeSpanEditorMask Mask { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpanEditorMask get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(TimeSpanEditorMask value);
}
[FlagsAttribute]
public enum Ecng.ComponentModel.TimeSpanEditorMask : Enum {
    public int value__;
    public static TimeSpanEditorMask Days;
    public static TimeSpanEditorMask Hours;
    public static TimeSpanEditorMask Minutes;
    public static TimeSpanEditorMask Seconds;
    public static TimeSpanEditorMask Milliseconds;
    public static TimeSpanEditorMask Microseconds;
}
public static class Ecng.ComponentModel.TypeConverterHelper : object {
    public static TypeConverter GetConverter();
    public static T FromString(string value);
    public static T FromString(ITypeDescriptorContext context, CultureInfo culture, string value);
    public static string ToString(T value);
    public static string ToString(ITypeDescriptorContext context, CultureInfo culture, T value);
}
public class Ecng.ComponentModel.VectorIconAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    public string Icon { get; }
    public VectorIconAttribute(string icon);
    [CompilerGeneratedAttribute]
public string get_Icon();
}
public abstract class Ecng.ComponentModel.ViewModelBase : Disposable {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string name);
    protected void OnPropertyChanged(Expression`1<Func`1<T>> selectorExpression);
    protected bool SetField(T& field, T value, Expression`1<Func`1<T>> selectorExpression);
    protected virtual bool SetField(T& field, T value, string name);
    public static string PropertyName(Expression`1<Func`1<T>> property);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
