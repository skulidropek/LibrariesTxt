public class Ecng.Reflection.DefaultConstructorInfo : ConstructorInfo {
    private Type _type;
    public MethodAttributes Attributes { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type ReflectedType { get; }
    public DefaultConstructorInfo(Type type);
    public virtual MethodAttributes get_Attributes();
    public virtual Type get_DeclaringType();
    public virtual string get_Name();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_ReflectedType();
    public virtual object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Ecng.Reflection.LazyHelper : object {
    private static SynchronizedDictionary`2<object, Delegate> _factories;
    private static SynchronizedDictionary`2<object, object> _states;
    private static LazyHelper();
    [ExtensionAttribute]
public static Lazy`1<T> Track(Lazy`1<T> lazy);
    [ExtensionAttribute]
public static void Reset(Lazy`1<T> lazy);
    [ExtensionAttribute]
public static void SetValue(Lazy`1<T> lazy, T value);
}
public class Ecng.Reflection.MemberSignature : Equatable`1<MemberSignature> {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ParamTypes>k__BackingField;
    public MemberInfo Member { get; }
    public Type ReturnType { get; }
    public Type[] ParamTypes { get; }
    public MemberSignature(MemberInfo member);
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
public Type[] get_ParamTypes();
    protected virtual bool OnEquals(MemberSignature other);
    public virtual int GetHashCode();
    public virtual MemberSignature Clone();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Ecng.Reflection.ReflectionHelper : object {
    public static AttributeTargets Members;
    public static AttributeTargets Types;
    public static BindingFlags AllStaticMembers;
    public static BindingFlags AllInstanceMembers;
    public static BindingFlags AllMembers;
    private static Dictionary`2<Type, Type> _proxyTypes;
    private static SynchronizedDictionary`2<ValueTuple`2<Type, Type>, Type> _genericTypeCache;
    public static string IndexerName;
    private static SynchronizedDictionary`2<MemberInfo, bool> _isAbstractCache;
    private static SynchronizedDictionary`2<MemberInfo, bool> _isVirtualCache;
    private static SynchronizedDictionary`2<Type, bool> _isCollectionCache;
    private static SynchronizedDictionary`2<MemberInfo, bool> _isStaticCache;
    private static SynchronizedDictionary`2<Type, Type> _getItemTypeCache;
    public static string GetPrefix;
    public static string SetPrefix;
    public static string AddPrefix;
    public static string RemovePrefix;
    private static SynchronizedDictionary`2<MethodInfo, MemberInfo> _getAccessorOwnerCache;
    [CompilerGeneratedAttribute]
private static bool <CacheEnabled>k__BackingField;
    public static IDictionary`2<Type, Type> ProxyTypes { get; }
    public static bool CacheEnabled { get; public set; }
    private static ReflectionHelper();
    [ExtensionAttribute]
public static MethodInfo GetInvokeMethod(Type delegType);
    public static IDictionary`2<Type, Type> get_ProxyTypes();
    [ExtensionAttribute]
public static bool IsParams(ParameterInfo pi);
    [ExtensionAttribute]
public static ValueTuple`2[] GetParameterTypes(MethodBase method);
    [ExtensionAttribute]
public static ValueTuple`2[] GetParameterTypes(MethodBase method, bool removeRef);
    [ExtensionAttribute]
public static Type GetGenericType(Type targetType, Type genericType);
    [ExtensionAttribute]
private static Type GetGenericTypeInternal(Type targetType, Type genericType);
    [ExtensionAttribute]
public static Type GetGenericTypeArg(Type targetType, Type genericType, int index);
    [ExtensionAttribute]
public static PropertyInfo GetIndexer(Type type, Type[] additionalTypes);
    [ExtensionAttribute]
public static PropertyInfo[] GetIndexers(Type type, Type[] additionalTypes);
    public static Type[] GetArgTypes(TArg arg);
    [ExtensionAttribute]
public static T GetMember(Type type, Type[] additionalTypes);
    [ExtensionAttribute]
public static T GetMember(Type type, string memberName, Type[] additionalTypes);
    [ExtensionAttribute]
public static T GetMember(Type type, string memberName, BindingFlags flags, Nullable`1<bool> isSetter, Type[] additionalTypes);
    [ExtensionAttribute]
public static T[] GetMembers(Type type, Type[] additionalTypes);
    [ExtensionAttribute]
public static T[] GetMembers(Type type, BindingFlags flags, Type[] additionalTypes);
    [ExtensionAttribute]
public static T[] GetMembers(Type type, BindingFlags flags, bool inheritance, Type[] additionalTypes);
    [ExtensionAttribute]
public static T[] GetMembers(Type type, BindingFlags flags, bool inheritance, string memberName, Nullable`1<bool> isSetter, Type[] additionalTypes);
    [ExtensionAttribute]
private static IEnumerable`1<T> GetMembers(Type type, string memberName, BindingFlags flags, bool inheritance);
    [ExtensionAttribute]
private static void AddMember(Dictionary`2<ValueTuple`3<string, MemberTypes, MemberSignature>, ICollection`1<T>> members, MemberInfo member);
    [ExtensionAttribute]
public static IEnumerable`1<T> FilterMembers(IEnumerable`1<T> members, Nullable`1<bool> isSetter, Type[] additionalTypes);
    [ExtensionAttribute]
public static IEnumerable`1<T> FilterMembers(IEnumerable`1<T> members, bool useInheritance, Nullable`1<bool> isSetter, Type[] additionalTypes);
    [ExtensionAttribute]
public static bool IsAbstract(MemberInfo member);
    [ExtensionAttribute]
public static bool IsVirtual(MemberInfo member);
    [ExtensionAttribute]
public static bool IsOverloadable(MemberInfo member);
    [ExtensionAttribute]
public static bool IsIndexer(MemberInfo member);
    [ExtensionAttribute]
public static bool IsIndexer(PropertyInfo property);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetIndexerTypes(PropertyInfo property);
    [ExtensionAttribute]
public static bool MemberIs(MemberInfo member, MemberTypes[] types);
    [ExtensionAttribute]
public static bool IsOutput(ParameterInfo param);
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo member);
    [ExtensionAttribute]
public static bool IsCollection(Type type);
    [ExtensionAttribute]
public static bool IsStatic(MemberInfo member);
    [ExtensionAttribute]
private static Type TryGetAsyncEnumerableItem(Type collectionType);
    [ExtensionAttribute]
public static Type GetItemType(Type collectionType);
    [ExtensionAttribute]
public static string MakePropertyName(string accessorName);
    [ExtensionAttribute]
public static MemberInfo GetAccessorOwner(MethodInfo method);
    [ExtensionAttribute]
public static MethodInfo Make(MethodInfo method, Type[] types);
    [ExtensionAttribute]
public static bool IsRuntimeType(Type type);
    [ExtensionAttribute]
public static bool IsAssembly(string dllName);
    [ExtensionAttribute]
public static AssemblyName VerifyAssembly(string dllName);
    [CompilerGeneratedAttribute]
public static bool get_CacheEnabled();
    [CompilerGeneratedAttribute]
public static void set_CacheEnabled(bool value);
    public static void ClearCache();
    [ExtensionAttribute]
private static TValue GetFromCache(SynchronizedDictionary`2<TKey, TValue> cache, TKey key, Func`2<TKey, TValue> createValue);
    [ExtensionAttribute]
public static IEnumerable`1<Type> FindImplementations(Assembly assembly, bool showObsolete, bool showNonPublic, bool showNonBrowsable, Func`2<Type, bool> extraFilter);
}
public class Ecng.Reflection.VoidType : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
