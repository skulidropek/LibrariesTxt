public class Ecng.Serialization.ContinueOnExceptionContext : object {
    [CompilerGeneratedAttribute]
private Action`1<Exception> Error;
    [CompilerGeneratedAttribute]
private bool <DoNotEncrypt>k__BackingField;
    public bool DoNotEncrypt { get; public set; }
    [CompilerGeneratedAttribute]
public void add_Error(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public void remove_Error(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public bool get_DoNotEncrypt();
    [CompilerGeneratedAttribute]
public void set_DoNotEncrypt(bool value);
    public static bool TryProcess(Exception ex);
    public void Process(Exception ex);
}
public class Ecng.Serialization.DelayAction : Disposable {
    private Action`1<Exception> _errorHandler;
    private Timer _flushTimer;
    private bool _isFlushing;
    private CachedSynchronizedList`1<IGroup> _groups;
    [CompilerGeneratedAttribute]
private IGroup <DefaultGroup>k__BackingField;
    private TimeSpan _flushInterval;
    private int _maxBatchSize;
    private static IEqualityComparer`1<IGroupItem> _itemComparer;
    private DummyBatchContext _batchContext;
    public IGroup DefaultGroup { get; }
    public TimeSpan FlushInterval { get; public set; }
    public int MaxBatchSize { get; public set; }
    public DelayAction(Action`1<Exception> errorHandler);
    private static DelayAction();
    [CompilerGeneratedAttribute]
public IGroup get_DefaultGroup();
    public TimeSpan get_FlushInterval();
    public void set_FlushInterval(TimeSpan value);
    public IGroup`1<T> CreateGroup(Func`1<T> init);
    public void DeleteGroup(IGroup group);
    public int get_MaxBatchSize();
    public void set_MaxBatchSize(int value);
    private void TryCreateTimer();
    public void OnFlush();
    private void Flush(IGroupItem item);
    public void WaitFlush(bool dispose);
    private void BatchFlushAndClear(IGroup group, ICollection`1<IGroupItem> actions);
    protected virtual IBatchContext BeginBatch(IGroup group);
    [CompilerGeneratedAttribute]
private bool <WaitFlush>b__27_0(IGroup g);
}
public interface Ecng.Serialization.IAsyncPersistable {
    public abstract virtual Task LoadAsync(SettingsStorage storage, CancellationToken cancellationToken);
    public abstract virtual Task SaveAsync(SettingsStorage storage, CancellationToken cancellationToken);
}
public interface Ecng.Serialization.IBatchContext {
    public abstract virtual void Commit();
}
public interface Ecng.Serialization.IJsonSerializer {
    public bool Indent { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool FillMode { get; public set; }
    public bool EnumAsString { get; public set; }
    public bool EncryptedAsByteArray { get; public set; }
    public int BufferSize { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public abstract virtual bool get_Indent();
    public abstract virtual void set_Indent(bool value);
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual bool get_FillMode();
    public abstract virtual void set_FillMode(bool value);
    public abstract virtual bool get_EnumAsString();
    public abstract virtual void set_EnumAsString(bool value);
    public abstract virtual bool get_EncryptedAsByteArray();
    public abstract virtual void set_EncryptedAsByteArray(bool value);
    public abstract virtual int get_BufferSize();
    public abstract virtual void set_BufferSize(int value);
    public abstract virtual NullValueHandling get_NullValueHandling();
    public abstract virtual void set_NullValueHandling(NullValueHandling value);
}
public interface Ecng.Serialization.IPersistable {
    public abstract virtual void Load(SettingsStorage storage);
    public abstract virtual void Save(SettingsStorage storage);
}
public interface Ecng.Serialization.IPersistableAdapter {
    public object UnderlyingValue { get; public set; }
    public abstract virtual object get_UnderlyingValue();
    public abstract virtual void set_UnderlyingValue(object value);
}
public interface Ecng.Serialization.ISerializer {
    public string FileExtension { get; }
    public abstract virtual string get_FileExtension();
    public abstract virtual ValueTask SerializeAsync(object graph, Stream stream, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<object> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
}
public interface Ecng.Serialization.ISerializer`1 {
    public abstract virtual ValueTask SerializeAsync(T graph, Stream stream, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Ecng.Serialization.ISerializerExtensions : object {
    [ExtensionAttribute]
public static void Serialize(ISerializer serializer, object graph, string fileName);
    [ExtensionAttribute]
public static Byte[] Serialize(ISerializer serializer, object graph);
    [ExtensionAttribute]
public static void Serialize(ISerializer serializer, object graph, Stream stream);
    [ExtensionAttribute]
public static T Deserialize(ISerializer`1<T> serializer, string fileName);
    [ExtensionAttribute]
public static T Deserialize(ISerializer`1<T> serializer, Byte[] data);
    [ExtensionAttribute]
public static T Deserialize(ISerializer`1<T> serializer, Stream stream);
    [ExtensionAttribute]
public static object Deserialize(ISerializer serializer, Byte[] data);
    [ExtensionAttribute]
public static object Deserialize(ISerializer serializer, Stream stream);
}
public class Ecng.Serialization.JArrayToObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Ecng.Serialization.JsonBoolConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal static class Ecng.Serialization.JsonConversions : object {
    private static JsonConversions();
}
public class Ecng.Serialization.JsonDateTimeConverter : JsonConverter {
    private bool _isSeconds;
    public JsonDateTimeConverter(bool isSeconds);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    protected virtual DateTime Convert(double value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Ecng.Serialization.JsonDateTimeMcsConverter : JsonDateTimeConverter {
    protected virtual DateTime Convert(double value);
}
public class Ecng.Serialization.JsonDateTimeMlsConverter : JsonDateTimeConverter {
}
public class Ecng.Serialization.JsonDateTimeNanoConverter : JsonDateTimeConverter {
    protected virtual DateTime Convert(double value);
}
[ExtensionAttribute]
public static class Ecng.Serialization.JsonHelper : object {
    public static Encoding UTF8NoBom;
    private static JsonHelper();
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void ChechExpectedToken(JsonReader reader, JsonToken token);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonHelper/<ReadWithCheckAsync>d__2")]
[ExtensionAttribute]
public static Task ReadWithCheckAsync(JsonReader reader, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T DeserializeObject(string content);
    [ExtensionAttribute]
public static T DeserializeObject(JToken token);
    [ExtensionAttribute]
public static object DeserializeObject(string content, Type type);
    [ExtensionAttribute]
public static object FromJson(string json, Type type);
    [ExtensionAttribute]
public static object DeserializeObject(JToken token, Type type);
    [ExtensionAttribute]
public static string ToJson(object obj, bool indent);
    [ExtensionAttribute]
public static string ToJson(object obj, bool indent, JsonSerializerSettings settings);
    public static JsonSerializerSettings CreateJsonSerializerSettings();
    [ExtensionAttribute]
public static Byte[] SkipBom(Byte[] array);
}
public class Ecng.Serialization.JsonSerializer`1 : Serializer`1<T> {
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FillMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnumAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncryptedAsByteArray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private NullValueHandling <NullValueHandling>k__BackingField;
    public bool Indent { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool FillMode { get; public set; }
    public bool EnumAsString { get; public set; }
    public bool EncryptedAsByteArray { get; public set; }
    public int BufferSize { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public string FileExtension { get; }
    private static JsonSerializer`1();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Indent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Indent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FillMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnumAsString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnumAsString(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EncryptedAsByteArray();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EncryptedAsByteArray(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_BufferSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual NullValueHandling get_NullValueHandling();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NullValueHandling(NullValueHandling value);
    public virtual string get_FileExtension();
    public static JsonSerializer`1<T> CreateDefault();
    private static bool IsJsonPrimitive();
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<SerializeAsync>d__33")]
public virtual ValueTask SerializeAsync(T graph, Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<DeserializeAsync>d__34")]
public virtual ValueTask`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<ReadAsync>d__35")]
private ValueTask`1<object> ReadAsync(JsonReader reader, Type type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<WriteAsync>d__36")]
private ValueTask WriteAsync(JsonWriter writer, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<FillAsync>d__37")]
private ValueTask FillAsync(SettingsStorage storage, JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<TryClearDeepLevel>d__38")]
private ValueTask TryClearDeepLevel(JsonReader reader, SettingsStorage storage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.JsonSerializer`1/<GetValueFromReaderAsync>d__39")]
private ValueTask`1<object> GetValueFromReaderAsync(JsonReader reader, SettingsStorage storage, string name, Type type, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Ecng.Serialization.PersistableHelper : object {
    private static CachedSynchronizedDictionary`2<Type, Type> _adapterTypes;
    private static string _typeKey;
    private static string _valueKey;
    private static PersistableHelper();
    private static Type ValidateAdapterType(Type adapterType);
    [ExtensionAttribute]
public static void RegisterAdapterType(Type type, Type adapterType);
    [ExtensionAttribute]
public static bool RemoveAdapterType(Type type);
    [ExtensionAttribute]
public static bool TryGetAdapterType(Type type, Type& adapterType);
    [ExtensionAttribute]
public static bool IsPersistable(Type type);
    [ExtensionAttribute]
public static T LoadEntire(SettingsStorage storage);
    [ExtensionAttribute]
public static SettingsStorage SaveEntire(IPersistable persistable, bool isAssemblyQualifiedName);
    [ExtensionAttribute]
public static T Clone(T obj);
    [AsyncStateMachineAttribute("Ecng.Serialization.PersistableHelper/<CloneAsync>d__9`1")]
[ExtensionAttribute]
public static ValueTask`1<T> CloneAsync(T obj, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Apply(T obj, T clone);
    [AsyncStateMachineAttribute("Ecng.Serialization.PersistableHelper/<ApplyAsync>d__11`1")]
[ExtensionAttribute]
public static ValueTask ApplyAsync(T obj, T clone, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.PersistableHelper/<SaveAsync>d__12")]
[ExtensionAttribute]
public static ValueTask`1<SettingsStorage> SaveAsync(IAsyncPersistable persistable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.PersistableHelper/<LoadAsync>d__13")]
[ExtensionAttribute]
public static ValueTask`1<IAsyncPersistable> LoadAsync(SettingsStorage storage, Type type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.PersistableHelper/<LoadAsync>d__14`1")]
[ExtensionAttribute]
public static ValueTask`1<T> LoadAsync(SettingsStorage storage, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SettingsStorage Save(IPersistable persistable);
    [ExtensionAttribute]
public static IPersistable Load(SettingsStorage storage, Type type);
    [ExtensionAttribute]
public static T Load(SettingsStorage storage);
    [ExtensionAttribute]
public static void ForceLoad(T t, SettingsStorage storage);
    [ExtensionAttribute]
public static void SetValue(SettingsStorage storage, string name, IPersistable persistable);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with serializer param.")]
public static void LoadFromString(IPersistable persistable, string value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with serializer param.")]
public static SettingsStorage LoadFromString(string value);
    [ExtensionAttribute]
public static void LoadFromString(ISerializer`1<SettingsStorage> serializer, IPersistable persistable, string value);
    [ExtensionAttribute]
public static TValue LoadFromString(ISerializer`1<TValue> serializer, string value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with serializer param.")]
public static string SaveToString(IPersistable persistable);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with serializer param.")]
public static string SaveToString(SettingsStorage settings);
    [ExtensionAttribute]
public static string SaveToString(ISerializer`1<SettingsStorage> serializer, IPersistable persistable);
    [ExtensionAttribute]
public static string SaveToString(ISerializer`1<TValue> serializer, TValue settings);
    [ExtensionAttribute]
public static bool IsSerializablePrimitive(Type type);
    [ExtensionAttribute]
public static SettingsStorage ToStorage(IRefTuple tuple);
    [ExtensionAttribute]
public static RefPair`2<T1, T2> ToRefPair(SettingsStorage storage);
    [ExtensionAttribute]
public static RefTriple`3<T1, T2, T3> ToRefTriple(SettingsStorage storage);
    [ExtensionAttribute]
public static RefQuadruple`4<T1, T2, T3, T4> ToRefQuadruple(SettingsStorage storage);
    [ExtensionAttribute]
public static RefFive`5<T1, T2, T3, T4, T5> ToRefFive(SettingsStorage storage);
    [ExtensionAttribute]
public static MemberInfo ToMember(SettingsStorage storage);
    [ExtensionAttribute]
public static T ToMember(SettingsStorage storage);
    [ExtensionAttribute]
public static SettingsStorage ToStorage(T member, bool isAssemblyQualifiedName);
    [ExtensionAttribute]
public static void Load(IPersistable persistable, SettingsStorage settings, string name);
    [ExtensionAttribute]
public static bool LoadIfNotNull(IPersistable persistable, SettingsStorage settings, string name);
    [ExtensionAttribute]
public static bool LoadIfNotNull(IPersistable persistable, SettingsStorage storage);
    [ExtensionAttribute]
public static SettingsStorage ToStorage(object value, bool isAssemblyQualifiedName);
    [ExtensionAttribute]
public static object FromStorage(SettingsStorage storage);
}
internal class Ecng.Serialization.SecureStringEncryptor : object {
    private static Lazy`1<SecureStringEncryptor> _instance;
    private SecureString _key;
    private Byte[] _salt;
    [CompilerGeneratedAttribute]
private SecureString <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Entropy>k__BackingField;
    public static SecureStringEncryptor Instance { get; }
    public SecureString Key { get; public set; }
    public Byte[] Entropy { get; public set; }
    private static SecureStringEncryptor();
    public static SecureStringEncryptor get_Instance();
    [CompilerGeneratedAttribute]
public SecureString get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(SecureString value);
    [CompilerGeneratedAttribute]
public Byte[] get_Entropy();
    [CompilerGeneratedAttribute]
public void set_Entropy(Byte[] value);
    public SecureString Decrypt(Byte[] source);
    public Byte[] Encrypt(SecureString instance);
}
public abstract class Ecng.Serialization.Serializer`1 : object {
    public string FileExtension { get; }
    public abstract virtual string get_FileExtension();
    public abstract virtual ValueTask SerializeAsync(T graph, Stream stream, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Ecng.Serialization.ISerializer.SerializeAsync(object graph, Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.Serializer`1/<Ecng-Serialization-ISerializer-DeserializeAsync>d__5")]
private sealed virtual override ValueTask`1<object> Ecng.Serialization.ISerializer.DeserializeAsync(Stream stream, CancellationToken cancellationToken);
}
public class Ecng.Serialization.SettingsStorage : SynchronizedDictionary`2<string, object> {
    private JsonReader _reader;
    private Func`6<JsonReader, SettingsStorage, string, Type, CancellationToken, ValueTask`1<object>> _readJson;
    [CompilerGeneratedAttribute]
private int <DeepLevel>k__BackingField;
    public IEnumerable`1<string> Names { get; }
    internal int DeepLevel { get; internal set; }
    internal SettingsStorage(JsonReader reader, Func`6<JsonReader, SettingsStorage, string, Type, CancellationToken, ValueTask`1<object>> readJson);
    public IEnumerable`1<string> get_Names();
    public SettingsStorage Set(string name, T value);
    private void EnsureIsNotReader();
    public void SetValue(string name, T value);
    public bool Contains(string name);
    public virtual bool ContainsKey(string key);
    [CompilerGeneratedAttribute]
internal int get_DeepLevel();
    [CompilerGeneratedAttribute]
internal void set_DeepLevel(int value);
    public T GetValue(string name, T defaultValue);
    public object GetValue(Type type, string name, object defaultValue);
    public T TryGet(string name, T defaultValue);
    public object TryGet(Type type, string name, object defaultValue);
    [AsyncStateMachineAttribute("Ecng.Serialization.SettingsStorage/<GetValueAsync>d__19`1")]
public ValueTask`1<T> GetValueAsync(string name, T defaultValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.SettingsStorage/<GetValueAsync>d__20")]
public ValueTask`1<object> GetValueAsync(Type type, string name, object defaultValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ecng.Serialization.SettingsStorage/<GetValueFromReaderAsync>d__21")]
private ValueTask`1<object> GetValueFromReaderAsync(Type type, string name, CancellationToken cancellationToken);
}
public class Ecng.Serialization.TransactionFileStream : Stream {
    private string _name;
    private string _nameTemp;
    private FileStream _temp;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public TransactionFileStream(string name, FileMode mode);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
