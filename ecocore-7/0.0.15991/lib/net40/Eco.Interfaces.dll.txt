[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Collections.Pooled.BitHelper : ValueType {
    private static int IntSize;
    private Span`1<int> _span;
    internal BitHelper(Span`1<int> span, bool clear);
    internal void MarkBit(int bitPosition);
    internal bool IsMarked(int bitPosition);
    internal int FindFirstUnmarked(int startPosition);
    internal int FindFirstMarked(int startPosition);
    internal static int ToIntArrayLength(int n);
}
public enum Collections.Pooled.ClearMode : Enum {
    public int value__;
    public static ClearMode Auto;
    public static ClearMode Always;
    public static ClearMode Never;
}
internal class Collections.Pooled.DictionaryKeyCollectionDebugView`2 : object {
    private ICollection`1<TKey> _collection;
    [DebuggerBrowsableAttribute("3")]
public TKey[] Items { get; }
    public DictionaryKeyCollectionDebugView`2(ICollection`1<TKey> collection);
    public TKey[] get_Items();
}
internal class Collections.Pooled.DictionaryValueCollectionDebugView`2 : object {
    private ICollection`1<TValue> _collection;
    [DebuggerBrowsableAttribute("3")]
public TValue[] Items { get; }
    public DictionaryValueCollectionDebugView`2(ICollection`1<TValue> collection);
    public TValue[] get_Items();
}
internal enum Collections.Pooled.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument obj;
    public static ExceptionArgument dictionary;
    public static ExceptionArgument array;
    public static ExceptionArgument info;
    public static ExceptionArgument key;
    public static ExceptionArgument text;
    public static ExceptionArgument values;
    public static ExceptionArgument value;
    public static ExceptionArgument startIndex;
    public static ExceptionArgument task;
    public static ExceptionArgument ch;
    public static ExceptionArgument s;
    public static ExceptionArgument input;
    public static ExceptionArgument list;
    public static ExceptionArgument index;
    public static ExceptionArgument capacity;
    public static ExceptionArgument collection;
    public static ExceptionArgument item;
    public static ExceptionArgument converter;
    public static ExceptionArgument match;
    public static ExceptionArgument count;
    public static ExceptionArgument action;
    public static ExceptionArgument comparison;
    public static ExceptionArgument exceptions;
    public static ExceptionArgument exception;
    public static ExceptionArgument enumerable;
    public static ExceptionArgument start;
    public static ExceptionArgument format;
    public static ExceptionArgument culture;
    public static ExceptionArgument comparer;
    public static ExceptionArgument comparable;
    public static ExceptionArgument source;
    public static ExceptionArgument state;
    public static ExceptionArgument length;
    public static ExceptionArgument comparisonType;
    public static ExceptionArgument manager;
    public static ExceptionArgument sourceBytesToCopy;
    public static ExceptionArgument callBack;
    public static ExceptionArgument creationOptions;
    public static ExceptionArgument function;
    public static ExceptionArgument delay;
    public static ExceptionArgument millisecondsDelay;
    public static ExceptionArgument millisecondsTimeout;
    public static ExceptionArgument timeout;
    public static ExceptionArgument type;
    public static ExceptionArgument sourceIndex;
    public static ExceptionArgument sourceArray;
    public static ExceptionArgument destinationIndex;
    public static ExceptionArgument destinationArray;
    public static ExceptionArgument other;
    public static ExceptionArgument newSize;
    public static ExceptionArgument lowerBounds;
    public static ExceptionArgument lengths;
    public static ExceptionArgument len;
    public static ExceptionArgument keys;
    public static ExceptionArgument indices;
    public static ExceptionArgument endIndex;
    public static ExceptionArgument elementType;
    public static ExceptionArgument arrayIndex;
}
internal enum Collections.Pooled.ExceptionResource : Enum {
    public int value__;
    public static ExceptionResource ArgumentOutOfRange_Index;
    public static ExceptionResource ArgumentOutOfRange_Count;
    public static ExceptionResource Arg_ArrayPlusOffTooSmall;
    public static ExceptionResource NotSupported_ReadOnlyCollection;
    public static ExceptionResource Arg_RankMultiDimNotSupported;
    public static ExceptionResource Arg_NonZeroLowerBound;
    public static ExceptionResource ArgumentOutOfRange_ListInsert;
    public static ExceptionResource ArgumentOutOfRange_NeedNonNegNum;
    public static ExceptionResource ArgumentOutOfRange_SmallCapacity;
    public static ExceptionResource Argument_InvalidOffLen;
    public static ExceptionResource ArgumentOutOfRange_BiggerThanCollection;
    public static ExceptionResource Serialization_MissingKeys;
    public static ExceptionResource Serialization_NullKey;
    public static ExceptionResource NotSupported_KeyCollectionSet;
    public static ExceptionResource NotSupported_ValueCollectionSet;
    public static ExceptionResource InvalidOperation_NullArray;
    public static ExceptionResource InvalidOperation_HSCapacityOverflow;
    public static ExceptionResource NotSupported_StringComparison;
    public static ExceptionResource ConcurrentCollection_SyncRoot_NotSupported;
    public static ExceptionResource ArgumentException_OtherNotArrayOfCorrectLength;
    public static ExceptionResource ArgumentOutOfRange_EndIndexStartIndex;
    public static ExceptionResource ArgumentOutOfRange_HugeArrayNotSupported;
    public static ExceptionResource Argument_AddingDuplicate;
    public static ExceptionResource Argument_InvalidArgumentForComparison;
    public static ExceptionResource Arg_LowerBoundsMustMatch;
    public static ExceptionResource Arg_MustBeType;
    public static ExceptionResource InvalidOperation_IComparerFailed;
    public static ExceptionResource NotSupported_FixedSizeCollection;
    public static ExceptionResource Rank_MultiDimNotSupported;
    public static ExceptionResource Arg_TypeNotSupported;
}
internal static class Collections.Pooled.HashHelpers : object {
    public static int HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    public static Int32[] primes;
    private static ConditionalWeakTable`2<object, SerializationInfo> s_serializationInfoTable;
    public static ConditionalWeakTable`2<object, SerializationInfo> SerializationInfoTable { get; }
    private static HashHelpers();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
    public static ConditionalWeakTable`2<object, SerializationInfo> get_SerializationInfoTable();
}
internal class Collections.Pooled.ICollectionDebugView`1 : object {
    private ICollection`1<T> _collection;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public ICollectionDebugView`1(ICollection`1<T> collection);
    public T[] get_Items();
}
internal class Collections.Pooled.IDictionaryDebugView`2 : object {
    private IDictionary`2<K, V> _dict;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public IDictionaryDebugView`2(IDictionary`2<K, V> dictionary);
    public KeyValuePair`2[] get_Items();
}
internal enum Collections.Pooled.InsertionBehavior : Enum {
    public byte value__;
    public static InsertionBehavior None;
    public static InsertionBehavior OverwriteExisting;
    public static InsertionBehavior ThrowOnExisting;
}
public interface Collections.Pooled.IReadOnlyPooledList`1 {
    public ReadOnlySpan`1<T> Span { get; }
    public abstract virtual ReadOnlySpan`1<T> get_Span();
}
public class Collections.Pooled.NonRandomizedStringEqualityComparer : EqualityComparer`1<string> {
    private static int s_empyStringHashCode;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static IEqualityComparer`1<string> <Default>k__BackingField;
    internal static IEqualityComparer`1<string> Default { get; }
    private NonRandomizedStringEqualityComparer(SerializationInfo information, StreamingContext context);
    private static NonRandomizedStringEqualityComparer();
    [CompilerGeneratedAttribute]
internal static IEqualityComparer`1<string> get_Default();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string str);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private static int GetNonRandomizedHashCode(string str);
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Collections.Pooled.IDictionaryDebugView`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Collections.Pooled.PooledDictionary`2 : object {
    private static int Lower31BitMask;
    private static string VersionName;
    private static string HashSizeName;
    private static string KeyValuePairsName;
    private static string ComparerName;
    private static string ClearKeyName;
    private static string ClearValueName;
    private static ArrayPool`1<int> s_bucketPool;
    private static ArrayPool`1<Entry<TKey, TValue>> s_entryPool;
    private Int32[] _buckets;
    private Entry[] _entries;
    private int _size;
    private int _count;
    private int _freeList;
    private int _freeCount;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    private KeyCollection<TKey, TValue> _keys;
    private ValueCollection<TKey, TValue> _values;
    private object _syncRoot;
    private bool _clearKeyOnFree;
    private bool _clearValueOnFree;
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public ClearMode KeyClearMode { get; }
    public ClearMode ValueClearMode { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    public TValue Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public PooledDictionary`2(ClearMode clearMode);
    public PooledDictionary`2(int capacity);
    public PooledDictionary`2(int capacity, ClearMode clearMode);
    public PooledDictionary`2(IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(int capacity, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public PooledDictionary`2(IDictionary`2<TKey, TValue> dictionary, ClearMode clearMode);
    public PooledDictionary`2(IDictionary`2<TKey, TValue> dictionary, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IDictionary`2<TKey, TValue> dictionary, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public PooledDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, ClearMode clearMode);
    public PooledDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IEnumerable`1<ValueTuple`2<TKey, TValue>> collection);
    public PooledDictionary`2(IEnumerable`1<ValueTuple`2<TKey, TValue>> collection, ClearMode clearMode);
    public PooledDictionary`2(IEnumerable`1<ValueTuple`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(IEnumerable`1<ValueTuple`2<TKey, TValue>> collection, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(ValueTuple`2[] array);
    public PooledDictionary`2(ValueTuple`2[] array, ClearMode clearMode);
    public PooledDictionary`2(ValueTuple`2[] array, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(ValueTuple`2[] array, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> span);
    public PooledDictionary`2(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> span, ClearMode clearMode);
    public PooledDictionary`2(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> span, IEqualityComparer`1<TKey> comparer);
    public PooledDictionary`2(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> span, ClearMode clearMode, IEqualityComparer`1<TKey> comparer);
    protected PooledDictionary`2(SerializationInfo info, StreamingContext context);
    private static PooledDictionary`2();
    public IEqualityComparer`1<TKey> get_Comparer();
    public sealed virtual int get_Count();
    public ClearMode get_KeyClearMode();
    public ClearMode get_ValueClearMode();
    public KeyCollection<TKey, TValue> get_Keys();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public void AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> enumerable);
    public void AddRange(IEnumerable`1<ValueTuple`2<TKey, TValue>> enumerable);
    public void AddRange(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> span);
    public void AddRange(ValueTuple`2[] array);
    public void AddOrUpdate(TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updater);
    public void AddOrUpdate(TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updater);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> keyValuePair);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    public bool ContainsValue(TValue value);
    private void CopyTo(KeyValuePair`2[] array, int index);
    public Enumerator<TKey, TValue> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private int FindEntry(TKey key);
    private int Initialize(int capacity);
    private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior);
    public virtual void OnDeserialization(object sender);
    private void Resize();
    private void Resize(int newSize, bool forceNewHashCodes);
    public sealed virtual bool Remove(TKey key);
    public bool Remove(TKey key, TValue& value);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public bool TryAdd(TKey key, TValue value);
    public TValue GetOrAdd(TKey key, TValue addValue);
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int EnsureCapacity(int capacity);
    public void TrimExcess();
    public void TrimExcess(int capacity);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private void ReturnArrays();
    private static bool ShouldClearKey(ClearMode mode);
    private static bool ShouldClearValue(ClearMode mode);
    private static bool IsCompatibleKey(object key);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Collections.Pooled.PooledExtensions : object {
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(IEnumerable`1<T> items, int suggestCapacity);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(T[] array);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(Span`1<T> span);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(ReadOnlyMemory`1<T> memory);
    [ExtensionAttribute]
public static PooledList`1<T> ToPooledList(Memory`1<T> memory);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(ReadOnlySpan`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(Span`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(ReadOnlyMemory`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(Memory`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TSource> ToPooledDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TSource> ToPooledDictionary(ReadOnlySpan`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TSource> ToPooledDictionary(Span`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TSource> ToPooledDictionary(ReadOnlyMemory`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TSource> ToPooledDictionary(Memory`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(IEnumerable`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(IEnumerable`1<Tuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(ReadOnlySpan`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledDictionary`2<TKey, TValue> ToPooledDictionary(Span`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static PooledSet`1<T> ToPooledSet(IEnumerable`1<T> source, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static PooledSet`1<T> ToPooledSet(Span`1<T> source, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static PooledSet`1<T> ToPooledSet(ReadOnlySpan`1<T> source, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static PooledSet`1<T> ToPooledSet(Memory`1<T> source, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static PooledSet`1<T> ToPooledSet(ReadOnlyMemory`1<T> source, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(T[] array);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(Span`1<T> span);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(ReadOnlyMemory`1<T> memory);
    [ExtensionAttribute]
public static PooledStack`1<T> ToPooledStack(Memory`1<T> memory);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(Span`1<T> span);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(ReadOnlyMemory`1<T> memory);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(Memory`1<T> memory);
    [ExtensionAttribute]
public static PooledQueue`1<T> ToPooledQueue(T[] array);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Collections.Pooled.ICollectionDebugView`1")]
public class Collections.Pooled.PooledList`1 : object {
    private static int MaxArrayLength;
    private static int DefaultCapacity;
    private static T[] s_emptyArray;
    private ArrayPool`1<T> _pool;
    private object _syncRoot;
    private T[] _items;
    private int _size;
    private int _version;
    private bool _clearOnFree;
    private bool _disposedValue;
    public Span`1<T> Span { get; }
    private ReadOnlySpan`1<T> Collections.Pooled.IReadOnlyPooledList<T>.Span { get; }
    public int Capacity { get; public set; }
    public int Count { get; }
    public ClearMode ClearMode { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public T Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public PooledList`1(ClearMode clearMode);
    public PooledList`1(ArrayPool`1<T> customPool);
    public PooledList`1(ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledList`1(int capacity);
    public PooledList`1(int capacity, bool sizeToCapacity);
    public PooledList`1(int capacity, ClearMode clearMode);
    public PooledList`1(int capacity, ClearMode clearMode, bool sizeToCapacity);
    public PooledList`1(int capacity, ArrayPool`1<T> customPool);
    public PooledList`1(int capacity, ArrayPool`1<T> customPool, bool sizeToCapacity);
    public PooledList`1(int capacity, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledList`1(int capacity, ClearMode clearMode, ArrayPool`1<T> customPool, bool sizeToCapacity);
    public PooledList`1(T[] array);
    public PooledList`1(T[] array, ClearMode clearMode);
    public PooledList`1(T[] array, ArrayPool`1<T> customPool);
    public PooledList`1(T[] array, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledList`1(ReadOnlySpan`1<T> span);
    public PooledList`1(ReadOnlySpan`1<T> span, ClearMode clearMode);
    public PooledList`1(ReadOnlySpan`1<T> span, ArrayPool`1<T> customPool);
    public PooledList`1(ReadOnlySpan`1<T> span, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledList`1(IEnumerable`1<T> collection);
    public PooledList`1(IEnumerable`1<T> collection, int suggestCapacity);
    public PooledList`1(IEnumerable`1<T> collection, ClearMode clearMode);
    public PooledList`1(IEnumerable`1<T> collection, ArrayPool`1<T> customPool);
    public PooledList`1(IEnumerable`1<T> collection, ClearMode clearMode, ArrayPool`1<T> customPool, int suggestCapacity);
    private static PooledList`1();
    public Span`1<T> get_Span();
    private sealed virtual override ReadOnlySpan`1<T> Collections.Pooled.IReadOnlyPooledList<T>.get_Span();
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public ClearMode get_ClearMode();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
    private static bool IsCompatibleObject(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual void Add(T item);
    private void AddWithResize(T item);
    private sealed virtual override int System.Collections.IList.Add(object item);
    public void AddRange(IEnumerable`1<T> collection);
    public void AddRange(T[] array);
    public void AddRange(ReadOnlySpan`1<T> span);
    public Span`1<T> AddSpan(int count);
    public ReadOnlyCollection`1<T> AsReadOnly();
    public int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
    public int BinarySearch(T item);
    public int BinarySearch(T item, IComparer`1<T> comparer);
    public virtual void Clear();
    public sealed virtual bool Contains(T item);
    private sealed virtual override bool System.Collections.IList.Contains(object item);
    public PooledList`1<TOutput> ConvertAll(Func`2<T, TOutput> converter);
    public void CopyTo(Span`1<T> span);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private void EnsureCapacity(int min);
    public bool Exists(Func`2<T, bool> match);
    public bool TryFind(Func`2<T, bool> match, T& result);
    public PooledList`1<T> FindAll(Func`2<T, bool> match);
    public int FindIndex(Func`2<T, bool> match);
    public int FindIndex(int startIndex, Func`2<T, bool> match);
    public int FindIndex(int startIndex, int count, Func`2<T, bool> match);
    public bool TryFindLast(Func`2<T, bool> match, T& result);
    public int FindLastIndex(Func`2<T, bool> match);
    public int FindLastIndex(int startIndex, Func`2<T, bool> match);
    public int FindLastIndex(int startIndex, int count, Func`2<T, bool> match);
    public void ForEach(Action`1<T> action);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Span`1<T> GetRange(int index, int count);
    public sealed virtual int IndexOf(T item);
    private sealed virtual override int System.Collections.IList.IndexOf(object item);
    public int IndexOf(T item, int index);
    public int IndexOf(T item, int index, int count);
    public sealed virtual void Insert(int index, T item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public void InsertRange(int index, ReadOnlySpan`1<T> span);
    public void InsertRange(int index, T[] array);
    public Span`1<T> InsertSpan(int index, int count);
    private Span`1<T> InsertSpan(int index, int count, bool clearOutput);
    public int LastIndexOf(T item);
    public int LastIndexOf(T item, int index);
    public int LastIndexOf(T item, int index, int count);
    public virtual bool Remove(T item);
    private sealed virtual override void System.Collections.IList.Remove(object item);
    public int RemoveAll(Func`2<T, bool> match);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    public void Reverse();
    public void Reverse(int index, int count);
    public void Sort();
    public void Sort(IComparer`1<T> comparer);
    public void Sort(int index, int count, IComparer`1<T> comparer);
    public void Sort(Func`3<T, T, int> comparison);
    public T[] ToArray();
    public void TrimExcess();
    public bool TrueForAll(Func`2<T, bool> match);
    private void ReturnArray();
    private static bool ShouldClear(ClearMode mode);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
[DebuggerTypeProxyAttribute("Collections.Pooled.QueueDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Collections.Pooled.PooledQueue`1 : object {
    private static int MinimumGrow;
    private static int GrowFactor;
    private ArrayPool`1<T> _pool;
    private object _syncRoot;
    private T[] _array;
    private int _head;
    private int _tail;
    private int _size;
    private int _version;
    private bool _clearOnFree;
    public int Count { get; }
    public ClearMode ClearMode { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public PooledQueue`1(ClearMode clearMode);
    public PooledQueue`1(ArrayPool`1<T> customPool);
    public PooledQueue`1(ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledQueue`1(int capacity);
    public PooledQueue`1(int capacity, ClearMode clearMode);
    public PooledQueue`1(int capacity, ArrayPool`1<T> customPool);
    public PooledQueue`1(int capacity, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledQueue`1(IEnumerable`1<T> enumerable);
    public PooledQueue`1(IEnumerable`1<T> enumerable, ClearMode clearMode);
    public PooledQueue`1(IEnumerable`1<T> enumerable, ArrayPool`1<T> customPool);
    public PooledQueue`1(IEnumerable`1<T> enumerable, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledQueue`1(T[] array);
    public PooledQueue`1(T[] array, ClearMode clearMode);
    public PooledQueue`1(T[] array, ArrayPool`1<T> customPool);
    public PooledQueue`1(T[] array, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledQueue`1(ReadOnlySpan`1<T> span);
    public PooledQueue`1(ReadOnlySpan`1<T> span, ClearMode clearMode);
    public PooledQueue`1(ReadOnlySpan`1<T> span, ArrayPool`1<T> customPool);
    public PooledQueue`1(ReadOnlySpan`1<T> span, ClearMode clearMode, ArrayPool`1<T> customPool);
    public sealed virtual int get_Count();
    public ClearMode get_ClearMode();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    public void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void Enqueue(T item);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T Dequeue();
    public bool TryDequeue(T& result);
    public T Peek();
    public bool TryPeek(T& result);
    public bool Contains(T item);
    public int RemoveWhere(Func`2<T, bool> match);
    public T[] ToArray();
    private void SetCapacity(int capacity);
    private void MoveNext(Int32& index);
    private void ThrowForEmptyQueue();
    public void TrimExcess();
    private void ReturnArray(T[] replaceWith);
    private static bool ShouldClear(ClearMode mode);
    public sealed virtual void Dispose();
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
[DebuggerTypeProxyAttribute("Collections.Pooled.ICollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Collections.Pooled.PooledSet`1 : object {
    private static int Lower31BitMask;
    private static int StackAllocThreshold;
    private static int ShrinkThreshold;
    private static string CapacityName;
    private static string ElementsName;
    private static string ComparerName;
    private static string VersionName;
    private static ArrayPool`1<int> s_bucketPool;
    private static ArrayPool`1<Slot<T>> s_slotPool;
    private Int32[] _buckets;
    private Slot[] _slots;
    private int _size;
    private int _count;
    private int _lastIndex;
    private int _freeList;
    private IEqualityComparer`1<T> _comparer;
    private int _version;
    private bool _clearOnFree;
    private SerializationInfo _siInfo;
    public int Count { get; }
    public ClearMode ClearMode { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public IEqualityComparer`1<T> Comparer { get; }
    public PooledSet`1(ClearMode clearMode);
    public PooledSet`1(IEqualityComparer`1<T> comparer);
    public PooledSet`1(ClearMode clearMode, IEqualityComparer`1<T> comparer);
    public PooledSet`1(int capacity);
    public PooledSet`1(int capacity, ClearMode clearMode);
    public PooledSet`1(int capacity, IEqualityComparer`1<T> comparer);
    public PooledSet`1(int capacity, ClearMode clearMode, IEqualityComparer`1<T> comparer);
    public PooledSet`1(IEnumerable`1<T> collection);
    public PooledSet`1(IEnumerable`1<T> collection, ClearMode clearMode);
    public PooledSet`1(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public PooledSet`1(IEnumerable`1<T> collection, ClearMode clearMode, IEqualityComparer`1<T> comparer);
    public PooledSet`1(T[] array);
    public PooledSet`1(T[] array, ClearMode clearMode);
    public PooledSet`1(T[] array, IEqualityComparer`1<T> comparer);
    public PooledSet`1(T[] array, ClearMode clearMode, IEqualityComparer`1<T> comparer);
    public PooledSet`1(ReadOnlySpan`1<T> span);
    public PooledSet`1(ReadOnlySpan`1<T> span, ClearMode clearMode);
    public PooledSet`1(ReadOnlySpan`1<T> span, IEqualityComparer`1<T> comparer);
    public PooledSet`1(ReadOnlySpan`1<T> span, ClearMode clearMode, IEqualityComparer`1<T> comparer);
    protected PooledSet`1(SerializationInfo info, StreamingContext context);
    private static PooledSet`1();
    private void CopyFrom(PooledSet`1<T> source);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public ClearMode get_ClearMode();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void OnDeserialization(object sender);
    public sealed virtual bool Add(T item);
    public bool TryGetValue(T equalValue, T& actualValue);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public void UnionWith(T[] other);
    public void UnionWith(ReadOnlySpan`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public void IntersectWith(T[] other);
    public void IntersectWith(ReadOnlySpan`1<T> other);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public void ExceptWith(T[] other);
    public void ExceptWith(ReadOnlySpan`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public void SymmetricExceptWith(T[] other);
    public void SymmetricExceptWith(ReadOnlySpan`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public bool IsSubsetOf(T[] other);
    public bool IsSubsetOf(ReadOnlySpan`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public bool IsProperSubsetOf(T[] other);
    public bool IsProperSubsetOf(ReadOnlySpan`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public bool IsSupersetOf(T[] other);
    public bool IsSupersetOf(ReadOnlySpan`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public bool IsProperSupersetOf(T[] other);
    public bool IsProperSupersetOf(ReadOnlySpan`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public bool Overlaps(T[] other);
    public bool Overlaps(ReadOnlySpan`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public bool SetEquals(T[] other);
    public bool SetEquals(ReadOnlySpan`1<T> other);
    public void CopyTo(T[] array);
    public void CopyTo(T[] array, int arrayIndex, int count);
    public void CopyTo(Span`1<T> span);
    public void CopyTo(Span`1<T> span, int count);
    public int RemoveWhere(Func`2<T, bool> match);
    public IEqualityComparer`1<T> get_Comparer();
    public int EnsureCapacity(int capacity);
    public void TrimExcess();
    public static IEqualityComparer`1<PooledSet`1<T>> CreateSetComparer();
    private int Initialize(int capacity);
    private void IncreaseCapacity();
    private void SetCapacity(int newSize);
    private void ReturnArrays();
    private static bool ShouldClear(ClearMode mode);
    private bool AddIfNotPresent(T value);
    private void AddValue(int index, int hashCode, T value);
    private bool ContainsAllElements(IEnumerable`1<T> other);
    private bool ContainsAllElements(ReadOnlySpan`1<T> other);
    private bool IsSubsetOfHashSetWithSameEC(PooledSet`1<T> other);
    private bool IsSubsetOfHashSetWithSameEC(HashSet`1<T> other);
    private void IntersectWithHashSetWithSameEC(PooledSet`1<T> other);
    private void IntersectWithHashSetWithSameEC(HashSet`1<T> other);
    private void IntersectWithEnumerable(IEnumerable`1<T> other);
    private void IntersectWithSpan(ReadOnlySpan`1<T> other);
    private int InternalIndexOf(T item);
    private void SymmetricExceptWithUniqueHashSet(PooledSet`1<T> other);
    private void SymmetricExceptWithUniqueHashSet(HashSet`1<T> other);
    private void SymmetricExceptWithEnumerable(IEnumerable`1<T> other);
    private void SymmetricExceptWithSpan(ReadOnlySpan`1<T> other);
    private bool AddOrGetLocation(T value, Int32& location);
    private ElementCount<T> CheckUniqueAndUnfoundElements(IEnumerable`1<T> other, bool returnIfUnfound);
    private ElementCount<T> CheckUniqueAndUnfoundElements(ReadOnlySpan`1<T> other, bool returnIfUnfound);
    internal static bool PooledSetEquals(PooledSet`1<T> set1, PooledSet`1<T> set2, IEqualityComparer`1<T> comparer);
    private static bool AreEqualityComparersEqual(PooledSet`1<T> set1, PooledSet`1<T> set2);
    private static bool AreEqualityComparersEqual(PooledSet`1<T> set1, HashSet`1<T> set2);
    private int InternalGetHashCode(T item);
    public sealed virtual void Dispose();
}
internal class Collections.Pooled.PooledSetEqualityComparer`1 : object {
    private IEqualityComparer`1<T> _comparer;
    public sealed virtual bool Equals(PooledSet`1<T> x, PooledSet`1<T> y);
    public sealed virtual int GetHashCode(PooledSet`1<T> obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerTypeProxyAttribute("Collections.Pooled.StackDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Collections.Pooled.PooledStack`1 : object {
    private ArrayPool`1<T> _pool;
    private object _syncRoot;
    private T[] _array;
    private int _size;
    private int _version;
    private bool _clearOnFree;
    private static int DefaultCapacity;
    public int Count { get; }
    public ClearMode ClearMode { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public PooledStack`1(ClearMode clearMode);
    public PooledStack`1(ArrayPool`1<T> customPool);
    public PooledStack`1(ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledStack`1(int capacity);
    public PooledStack`1(int capacity, ClearMode clearMode);
    public PooledStack`1(int capacity, ArrayPool`1<T> customPool);
    public PooledStack`1(int capacity, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledStack`1(IEnumerable`1<T> enumerable);
    public PooledStack`1(IEnumerable`1<T> enumerable, ClearMode clearMode);
    public PooledStack`1(IEnumerable`1<T> enumerable, ArrayPool`1<T> customPool);
    public PooledStack`1(IEnumerable`1<T> enumerable, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledStack`1(T[] array);
    public PooledStack`1(T[] array, ClearMode clearMode);
    public PooledStack`1(T[] array, ArrayPool`1<T> customPool);
    public PooledStack`1(T[] array, ClearMode clearMode, ArrayPool`1<T> customPool);
    public PooledStack`1(ReadOnlySpan`1<T> span);
    public PooledStack`1(ReadOnlySpan`1<T> span, ClearMode clearMode);
    public PooledStack`1(ReadOnlySpan`1<T> span, ArrayPool`1<T> customPool);
    public PooledStack`1(ReadOnlySpan`1<T> span, ClearMode clearMode, ArrayPool`1<T> customPool);
    public sealed virtual int get_Count();
    public ClearMode get_ClearMode();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    public bool Contains(T item);
    public int RemoveWhere(Func`2<T, bool> match);
    public void CopyTo(T[] array, int arrayIndex);
    public void CopyTo(Span`1<T> span);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void TrimExcess();
    public T Peek();
    public bool TryPeek(T& result);
    public T Pop();
    public bool TryPop(T& result);
    public void Push(T item);
    private void PushWithResize(T item);
    public T[] ToArray();
    private void ThrowForEmptyStack();
    private void ReturnArray(T[] replaceWith);
    private static bool ShouldClear(ClearMode mode);
    public sealed virtual void Dispose();
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
internal class Collections.Pooled.QueueDebugView`1 : object {
    private PooledQueue`1<T> _queue;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public QueueDebugView`1(PooledQueue`1<T> queue);
    public T[] get_Items();
}
internal class Collections.Pooled.StackDebugView`1 : object {
    private PooledStack`1<T> _stack;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public StackDebugView`1(PooledStack`1<T> stack);
    public T[] get_Items();
}
internal static class Collections.Pooled.ThrowHelper : object {
    internal static void ThrowArrayTypeMismatchException();
    internal static void ThrowIndexOutOfRangeException();
    internal static void ThrowArgumentOutOfRangeException();
    internal static void ThrowArgumentException_DestinationTooShort();
    internal static void ThrowArgumentException_OverlapAlignmentMismatch();
    internal static void ThrowArgumentOutOfRange_IndexException();
    internal static void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
    internal static void ThrowValueArgumentOutOfRange_NeedNonNegNumException();
    internal static void ThrowLengthArgumentOutOfRange_ArgumentOutOfRange_NeedNonNegNum();
    internal static void ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index();
    internal static void ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count();
    internal static void ThrowWrongKeyTypeArgumentException(T key, Type targetType);
    internal static void ThrowWrongValueTypeArgumentException(T value, Type targetType);
    private static ArgumentException GetAddingDuplicateWithKeyArgumentException(object key);
    internal static void ThrowAddingDuplicateWithKeyArgumentException(T key);
    internal static void ThrowKeyNotFoundException(T key);
    internal static void ThrowArgumentException(ExceptionResource resource);
    internal static void ThrowArgumentException(ExceptionResource resource, ExceptionArgument argument);
    private static ArgumentNullException GetArgumentNullException(ExceptionArgument argument);
    internal static void ThrowArgumentNullException(ExceptionArgument argument);
    internal static void ThrowArgumentNullException(ExceptionResource resource);
    internal static void ThrowArgumentNullException(ExceptionArgument argument, ExceptionResource resource);
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource);
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, int paramNumber, ExceptionResource resource);
    internal static void ThrowInvalidOperationException(ExceptionResource resource);
    internal static void ThrowInvalidOperationException(ExceptionResource resource, Exception e);
    internal static void ThrowSerializationException(ExceptionResource resource);
    internal static void ThrowSecurityException(ExceptionResource resource);
    internal static void ThrowRankException(ExceptionResource resource);
    internal static void ThrowNotSupportedException(ExceptionResource resource);
    internal static void ThrowUnauthorizedAccessException(ExceptionResource resource);
    internal static void ThrowObjectDisposedException(string objectName, ExceptionResource resource);
    internal static void ThrowObjectDisposedException(ExceptionResource resource);
    internal static void ThrowNotSupportedException();
    internal static void ThrowAggregateException(List`1<Exception> exceptions);
    internal static void ThrowOutOfMemoryException();
    internal static void ThrowArgumentException_Argument_InvalidArrayType();
    internal static void ThrowInvalidOperationException_InvalidOperation_EnumNotStarted();
    internal static void ThrowInvalidOperationException_InvalidOperation_EnumEnded();
    internal static void ThrowInvalidOperationException_EnumCurrent(int index);
    internal static void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
    internal static void ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen();
    internal static void ThrowInvalidOperationException_InvalidOperation_NoValue();
    internal static void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
    internal static void ThrowInvalidOperationException_HandleIsNotInitialized();
    internal static void ThrowFormatException_BadFormatSpecifier();
    private static ArgumentException GetArgumentException(ExceptionResource resource);
    private static InvalidOperationException GetInvalidOperationException(ExceptionResource resource);
    private static ArgumentException GetWrongKeyTypeArgumentException(object key, Type targetType);
    private static ArgumentException GetWrongValueTypeArgumentException(object value, Type targetType);
    private static KeyNotFoundException GetKeyNotFoundException(object key);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource);
    private static ArgumentException GetArgumentException(ExceptionResource resource, ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument, int paramNumber, ExceptionResource resource);
    private static InvalidOperationException GetInvalidOperationException_EnumCurrent(int index);
    internal static void IfNullAndNullsAreIllegalThenThrow(object value, ExceptionArgument argName);
    internal static void ThrowForUnsupportedVectorBaseType();
    private static string GetArgumentName(ExceptionArgument argument);
    private static string GetResourceString(ExceptionResource resource);
}
public class Eco.Cache.CanReleaseDelegate : MulticastDelegate {
    public CanReleaseDelegate(object object, IntPtr method);
    public virtual void Invoke(Locator locator, CanReleaseResult result);
    public virtual IAsyncResult BeginInvoke(Locator locator, CanReleaseResult result, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Cache.CanReleaseResult : object {
    private bool result;
    public bool Result { get; public set; }
    public bool get_Result();
    public void set_Result(bool value);
}
public enum Eco.Cache.ExistenceState : Enum {
    public int value__;
    public static ExistenceState NotCreated;
    public static ExistenceState Existing;
    public static ExistenceState Deleted;
}
public class Eco.Cache.ExtentChangedEventHandler : MulticastDelegate {
    public ExtentChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(IClass c);
    public virtual IAsyncResult BeginInvoke(IClass c, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Cache.GenericCollection`1 : object {
    private Dictionary`2<T, T> dic;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
}
public interface Eco.Cache.ICache {
    public bool IsActive { get; }
    public ICollection`1<Locator> DeleteStack { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual Locator[] GetAllLocators();
    public abstract virtual void ApplyTranslationList(IdTranslationList idTranslationList);
    public abstract virtual void SetObjectId(Locator locator, ObjectId newId);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(ValueChangedDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(ValueChangedDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExistenceChanged(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExistenceChanged(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LocatorAdded(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LocatorAdded(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DirtyChanged(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DirtyChanged(LocatorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanRelease(CanReleaseDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanRelease(CanReleaseDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExtentInvalidated(ExtentChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExtentInvalidated(ExtentChangedEventHandler value);
    public abstract virtual Locator GetEnsuredLocatorById(ObjectId objectId);
    public abstract virtual Locator GetLocatorById(ObjectId objectId);
    public abstract virtual ObjectId GetIdByLocator(Locator locator);
    public abstract virtual Locator CreateNewObject(IClass class_);
    public abstract virtual Locator CreateNewObject(IClass class_, ILoopBack loopback);
    public abstract virtual void DestroyObject(Locator locator);
    public abstract virtual IClass GetUmlClass(Locator locator);
    public abstract virtual void SetExistenceState(Locator locator, ExistenceState value);
    public abstract virtual ExistenceState GetExistenceState(Locator locator);
    public abstract virtual void SetPersistenceState(Locator locator, PersistenceState value);
    public abstract virtual PersistenceState GetPersistenceState(Locator locator);
    public abstract virtual bool IsPersistent(Locator locator);
    public abstract virtual bool IsDirty(Locator locator);
    public abstract virtual bool IsDefaultFetched(Locator locator);
    public abstract virtual bool Contains(Locator locator);
    public abstract virtual int GetTimestamp(Locator locator);
    public abstract virtual void SetTimestamp(Locator locator, int value);
    public abstract virtual void SetCurrentOrderNo(Locator locator, IStructuralFeature structuralFeature, int orderNo);
    public abstract virtual void SetCurrentAndFetchedOrderNo(Locator locator, IStructuralFeature structuralFeature, int orderNo);
    public abstract virtual int GetCurrentOrderNo(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual PersistenceState GetMemberPersistenceState(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual void SetMemberPersistenceState(Locator locator, IStructuralFeature structuralFeature, PersistenceState value);
    public abstract virtual object GetCurrentValue(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual object GetCurrentValueRaw(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual void SetCurrentValue(Locator locator, IStructuralFeature structuralFeature, object value);
    public abstract virtual object GetFetchedValue(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual object GetFetchedValueRaw(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual bool GetMemberHasFetchedValue(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual int GetFetchedOrderNo(Locator locator, IStructuralFeature structuralFeature);
    public abstract virtual void SetFetchedValue(Locator locator, IStructuralFeature structuralFeature, object value);
    public abstract virtual void SetCurrentAndFetchedValue(Locator locator, IStructuralFeature structuralFeature, object value);
    public abstract virtual bool GetExtentIsCurrent(IClass c);
    public abstract virtual void InvalidateExtent(IClass c);
    public abstract virtual void SetExtentCurrent(IClass c);
    public abstract virtual ICollection`1<Locator> get_DeleteStack();
    public abstract virtual object GetAsSharedBigValue(Locator locator, IAttribute attribute, object sourceValue);
    public abstract virtual void RememberGhostFKCreatedUntilNextSave(Locator locator);
    public abstract virtual List`1<Locator> GetAllGhostFKCreatedAndClearList();
}
public abstract class Eco.Cache.Locator : object {
    public ObjectId Id { get; }
    public abstract virtual ObjectId get_Id();
}
public class Eco.Cache.LocatorEventArgs : EventArgs {
    private Locator m_Locator;
    public Locator Locator { get; }
    public LocatorEventArgs(Locator locator);
    public Locator get_Locator();
}
public class Eco.Cache.LocatorEventHandler : MulticastDelegate {
    public LocatorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LocatorEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, LocatorEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Cache.LocatorPair : object {
    private Locator m_Loc1;
    private Locator m_Loc2;
    public Locator Loc1 { get; }
    public Locator Loc2 { get; }
    public LocatorPair(Locator loc1, Locator loc2);
    public Locator get_Loc1();
    public Locator get_Loc2();
}
public enum Eco.Cache.PersistenceState : Enum {
    public int value__;
    public static PersistenceState Current;
    public static PersistenceState Modified;
    public static PersistenceState Invalid;
    public static PersistenceState Transient;
}
public class Eco.Cache.ValueChangedDelegate : MulticastDelegate {
    public ValueChangedDelegate(object object, IntPtr method);
    public virtual void Invoke(Locator locator, IStructuralFeature feature);
    public virtual IAsyncResult BeginInvoke(Locator locator, IStructuralFeature feature, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.DataRepresentation.SingleAssociationEnd")]
[KnownTypeAttribute("Eco.DataRepresentation.IndirectSingleAssociationEnd")]
[KnownTypeAttribute("Eco.DataRepresentation.MultiAssociationEnd")]
[KnownTypeAttribute("Eco.DataRepresentation.IndirectMultiAssociationEnd")]
public abstract class Eco.DataRepresentation.AssociationEnd : object {
    public abstract virtual void ApplyTranslationList(IdTranslationList translationList);
    public abstract virtual void AddAllIds(ObjectIdList idList);
}
[DataContractAttribute]
public class Eco.DataRepresentation.Datablock : object {
    private PooledList`1<ObjectContents> m_List;
    private PooledDictionary`2<ObjectId, ObjectContents> m_Dictionary;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    public int Capacity { get; public set; }
    public int Size { get; }
    [DataMemberAttribute]
public PooledList`1<ObjectContents> List { get; public set; }
    private PooledDictionary`2<ObjectId, ObjectContents> Dictionary { get; }
    public int Count { get; }
    public Datablock(int listSize);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public int get_Capacity();
    public void set_Capacity(int value);
    public void Strip();
    public int get_Size();
    public PooledList`1<ObjectContents> get_List();
    public void set_List(PooledList`1<ObjectContents> value);
    private PooledDictionary`2<ObjectId, ObjectContents> get_Dictionary();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    public void RemoveDeletedObjects();
    public void ApplyTranslationList(IdTranslationList translationList);
    public ObjectContents GetObjectContents(ObjectId objectId);
    public void MergeInObjectContents(ObjectContents contents);
    public ObjectContents GetEnsuredObjectContents(ObjectId objectId);
    public void Clear(bool disposeObjectContent);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
public class Eco.DataRepresentation.DefaultId : ObjectId {
    public bool IsStorable { get; }
    public DefaultId(object key, int classId);
    public virtual bool get_IsStorable();
    public virtual ObjectId CloneWithClassId(int topSortedIndex);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public DefaultId CloneWithTimestamp(int timestamp);
}
public enum Eco.DataRepresentation.ExistenceState : Enum {
    public int value__;
    public static ExistenceState New;
    public static ExistenceState Existing;
    public static ExistenceState Deleted;
}
[DataContractAttribute]
public class Eco.DataRepresentation.IdTranslationList : object {
    [DataMemberAttribute]
public Dictionary`2<ObjectId, ObjectId> idTranslationHashtable;
    [DataMemberAttribute]
public Dictionary`2<ObjectId, int> timestampTranslationTable;
    public IEnumerable OldIds { get; }
    public IEnumerable NewIds { get; }
    public int Count { get; }
    public IEnumerable get_OldIds();
    public IEnumerable get_NewIds();
    public ObjectId TranslateToNewId(ObjectId oldId);
    public void AddTranslation(ObjectId oldId, ObjectId newId);
    public void AddTimestampTranslation(ObjectId id, int newTimeStamp);
    public int TranslateTimestamp(ObjectId id);
    public int get_Count();
}
[DataContractAttribute]
public class Eco.DataRepresentation.IndirectMultiAssociationEnd : AssociationEnd {
    private ObjectIdList m_List1;
    private ObjectIdList m_List2;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    [DataMemberAttribute]
public ObjectIdList List1 { get; public set; }
    [DataMemberAttribute]
public ObjectIdList List2 { get; public set; }
    public IndirectMultiAssociationEnd(ObjectIdList list1, ObjectIdList list2);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public ObjectIdList get_List1();
    public void set_List1(ObjectIdList value);
    public ObjectIdList get_List2();
    public void set_List2(ObjectIdList value);
    public virtual void ApplyTranslationList(IdTranslationList translationList);
    public virtual void AddAllIds(ObjectIdList idList);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
public class Eco.DataRepresentation.IndirectSingleAssociationEnd : AssociationEnd {
    private ObjectId m_Id1;
    private ObjectId m_Id2;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    [DataMemberAttribute]
public ObjectId Id1 { get; public set; }
    [DataMemberAttribute]
public ObjectId Id2 { get; public set; }
    public IndirectSingleAssociationEnd(ObjectId id1, ObjectId id2);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public ObjectId get_Id1();
    public void set_Id1(ObjectId value);
    public ObjectId get_Id2();
    public void set_Id2(ObjectId value);
    public virtual void ApplyTranslationList(IdTranslationList translationList);
    public virtual void AddAllIds(ObjectIdList idList);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
public class Eco.DataRepresentation.InternalObjectId : ObjectId {
    public bool IsStorable { get; }
    public InternalObjectId(object key, int classId);
    public virtual bool get_IsStorable();
    public virtual ObjectId CloneWithClassId(int topSortedIndex);
}
public class Eco.DataRepresentation.MemberNotAssignedException : ArgumentException {
    public MemberNotAssignedException(string message);
    public MemberNotAssignedException(string message, Exception inner);
    protected MemberNotAssignedException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Eco.DataRepresentation.MultiAssociationEnd : AssociationEnd {
    private ObjectIdList m_List;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    [DataMemberAttribute]
public ObjectIdList List { get; public set; }
    public MultiAssociationEnd(ObjectIdList list);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public ObjectIdList get_List();
    public void set_List(ObjectIdList value);
    public virtual void ApplyTranslationList(IdTranslationList translationList);
    public virtual void AddAllIds(ObjectIdList idList);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Eco.DataRepresentation.ObjectContents : object {
    private ObjectId objectId;
    private ExistenceState existenceState;
    private PooledList`1<object> members;
    private bool isReadOnly;
    private int timestamp;
    private static object internalNullValue;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    [DataMemberAttribute]
public PooledList`1<object> Members { get; public set; }
    public object Item { get; public set; }
    public int Size { get; }
    [DataMemberAttribute]
public ExistenceState ExistenceState { get; public set; }
    public int MemberCount { get; }
    [DataMemberAttribute]
public bool IsReadOnly { get; public set; }
    [DataMemberAttribute]
public int Timestamp { get; public set; }
    [DataMemberAttribute]
public ObjectId ObjectId { get; public set; }
    public ObjectContents(ObjectId objectId);
    private static ObjectContents();
    public PooledList`1<object> get_Members();
    public void set_Members(PooledList`1<object> value);
    public object get_Item(int i);
    public void set_Item(int i, object value);
    public int get_Size();
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public ExistenceState get_ExistenceState();
    public void set_ExistenceState(ExistenceState value);
    public object GetMember(int index);
    public void SetMember(int index, object value);
    public bool IsMemberAssigned(int index);
    public void RemoveMember(int index);
    public int get_MemberCount();
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public int get_Timestamp();
    public void set_Timestamp(int value);
    public ObjectId get_ObjectId();
    public void set_ObjectId(ObjectId value);
    public void ApplyTranslationList(IdTranslationList translationList);
    public void MergeInContents(ObjectContents contents);
    public void Clear();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.DataRepresentation.DefaultId")]
[KnownTypeAttribute("Eco.DataRepresentation.InternalObjectId")]
[KnownTypeAttribute("Eco.DataRepresentation.TimestampedDefaultId")]
public abstract class Eco.DataRepresentation.ObjectId : object {
    public static string newidtoken;
    public static string nulltoken;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ClassId>k__BackingField;
    [DataMemberAttribute]
public object Key { get; public set; }
    [DataMemberAttribute]
public int ClassId { get; public set; }
    public bool IsStorable { get; }
    public int Timestamp { get; }
    protected ObjectId(object key, int classId);
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(object value);
    [CompilerGeneratedAttribute]
public int get_ClassId();
    [CompilerGeneratedAttribute]
public void set_ClassId(int value);
    public abstract virtual bool get_IsStorable();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual int get_Timestamp();
    public int Compare(ObjectId id);
    public abstract virtual ObjectId CloneWithClassId(int topSortedIndex);
    public static void SerializeId(Stream target, ObjectId id);
    public static ObjectId DeserializeId(Stream source, BinaryReader reader);
}
public class Eco.DataRepresentation.ObjectIdCollection : object {
    private PooledDictionary`2<ObjectId, ObjectId> m_Dictionary;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    public bool IsEmpty { get; }
    public int Count { get; }
    public ObjectId Any { get; }
    public ObjectIdCollection(int capacity);
    public ObjectIdCollection(ObjectIdList list);
    public ObjectIdCollection(ObjectIdCollection list);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public bool get_IsEmpty();
    public ObjectIdCollection ExtractIds(int numberOfIds);
    public int get_Count();
    public void Add(ObjectId value);
    public void Add(ObjectIdCollection list);
    public ObjectId get_Any();
    public sealed virtual IEnumerator GetEnumerator();
    public ObjectIdCollection Clone();
    public ObjectIdCollection ReplaceWithItemsFrom(ObjectIdCollection fromCollection);
    public ObjectId IdById(ObjectId id);
    public bool Contains(ObjectId id);
    public void Remove(ObjectId id);
    public string CommaSeparatedIdList();
    public void Clear();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DefaultMemberAttribute("Item")]
public class Eco.DataRepresentation.ObjectIdList : PooledList`1<ObjectId> {
    private PooledList`1<int> _Ordernolist;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PooledList`1<int> <Ordernolist>k__BackingField;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    public ObjectId Item { get; public set; }
    [DataMemberAttribute]
public PooledList`1<int> Ordernolist { get; public set; }
    public ObjectIdList(ObjectId id);
    public ObjectIdList(IEnumerable e);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public virtual ObjectId get_Item(int i);
    public virtual void set_Item(int i, ObjectId value);
    public virtual void Add(ObjectId id);
    public virtual bool Remove(ObjectId id);
    public virtual void Clear();
    public void ApplyTranslationList(IdTranslationList translationList);
    public ObjectIdList Clone();
    public ObjectId[] GetAsArray();
    public ObjectId IdById(ObjectId id);
    public void AddList(ObjectIdList list);
    public string CommaSeparatedIdList();
    public void Sort();
    [CompilerGeneratedAttribute]
public PooledList`1<int> get_Ordernolist();
    [CompilerGeneratedAttribute]
public void set_Ordernolist(PooledList`1<int> value);
    public void Add(ObjectId objectId, int fetchedorderno);
    private void Dispose(bool disposing);
    public void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
public class Eco.DataRepresentation.SingleAssociationEnd : AssociationEnd {
    private int m_OrderNo;
    private ObjectId m_Id;
    private static int disposedFalse;
    private static int disposedTrue;
    private int disposed;
    [DataMemberAttribute]
public ObjectId Id { get; public set; }
    [DataMemberAttribute]
public int OrderNo { get; public set; }
    public SingleAssociationEnd(ObjectId id, int orderNo);
    [OnDeserializingAttribute]
private void SetValuesOnDeserializing(StreamingContext context);
    public ObjectId get_Id();
    public void set_Id(ObjectId value);
    public int get_OrderNo();
    public void set_OrderNo(int value);
    public virtual void ApplyTranslationList(IdTranslationList translationList);
    public virtual void AddAllIds(ObjectIdList idList);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DataContractAttribute]
public class Eco.DataRepresentation.TimestampedDefaultId : DefaultId {
    [DataMemberAttribute]
private int timestamp;
    public int Timestamp { get; }
    public TimestampedDefaultId(object key, int classId, int timestamp);
    public virtual int get_Timestamp();
    public virtual ObjectId CloneWithClassId(int topSortedIndex);
}
[AttributeUsageAttribute("4")]
public class Eco.DesignTimeAttributes.ComponentHelpAttribute : Attribute {
    private string m_targetTypeName;
    private string m_targetAssemblyName;
    public string TargetTypeName { get; }
    public string TargetAssemblyName { get; }
    public ComponentHelpAttribute(string targetTypeName, string targetAssemblyName);
    public string DynamicToolText(object component);
    public string get_TargetTypeName();
    public string get_TargetAssemblyName();
}
public abstract class Eco.DesignTimeAttributes.Inspector : object {
    public abstract virtual string RetrieveToolTip(object component);
}
public class Eco.Exceptions.BadLockExpressionException : EcoException {
    public BadLockExpressionException(string message);
    public BadLockExpressionException(string message, Exception inner);
    protected BadLockExpressionException(SerializationInfo info, StreamingContext context);
}
public class Eco.Exceptions.EcoException : Exception {
    public EcoException(string message);
    public EcoException(string message, Exception inner);
    protected EcoException(SerializationInfo info, StreamingContext context);
}
public class Eco.Exceptions.EcoInternalErrorException : EcoException {
    private static string InternalError;
    public EcoInternalErrorException(string message);
    public EcoInternalErrorException(string message, Exception inner);
    protected EcoInternalErrorException(SerializationInfo info, StreamingContext context);
}
public abstract class Eco.Exceptions.EcoOclErrorException : EcoException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <MessageArgs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageTemplate>k__BackingField;
    public int Position { get; }
    public string Expression { get; }
    public bool InternalError { get; }
    public Object[] MessageArgs { get; public set; }
    public string MessageTemplate { get; public set; }
    protected EcoOclErrorException(string message);
    protected EcoOclErrorException(string message, Exception inner);
    protected EcoOclErrorException(SerializationInfo info, StreamingContext context);
    public abstract virtual int get_Position();
    public abstract virtual string get_Expression();
    public abstract virtual bool get_InternalError();
    [CompilerGeneratedAttribute]
public void set_MessageArgs(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_MessageArgs();
    [CompilerGeneratedAttribute]
public void set_MessageTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_MessageTemplate();
}
public class Eco.Exceptions.InvalidMappingException : EcoException {
    public InvalidMappingException(string message);
    public InvalidMappingException(string message, Exception inner);
    protected InvalidMappingException(SerializationInfo info, StreamingContext context);
}
public class Eco.Exceptions.OperationAbortedException : EcoException {
    public OperationAbortedException(string message);
}
public class Eco.Exceptions.UpdateWithWrongModelException : EcoException {
    public UpdateWithWrongModelException(string message);
}
public class Eco.Exceptions.UserAbortException : EcoException {
    public UserAbortException(string message);
    public UserAbortException(string message, Exception inner);
    protected UserAbortException(SerializationInfo info, StreamingContext context);
}
public abstract class Eco.Framework.EcoSpacePart : object {
    private EcoSpacePartState m_State;
    public EcoSpacePartState State { get; }
    public EcoSpacePartState get_State();
    public void Activate();
    public void Deactivate();
    public void Deserialize(Stream source);
    public void Serialize(Stream target, EcoSpaceSerializationConfig config);
    protected virtual void DoActivate();
    protected virtual void DoDeactivate();
    protected virtual void DoPreDeactivate();
    protected virtual void DoDeserialize(Stream source, BinaryReader reader);
    protected virtual void DoSerialize(Stream target, EcoSpaceSerializationConfig config);
    protected virtual string FriendlyName();
    private void ActiveError();
    protected void EnsureActive();
    protected void EnsurePropertySet(object property, string propertyName);
    public abstract virtual void CleanForFree();
}
public class Eco.Framework.EcoSpacePartList : object {
    private List`1<EcoSpacePart> m_List;
    public void Add(EcoSpacePart part);
    public void Remove(EcoSpacePart part);
    public void RemoveAllAndCleanForFree();
    public bool Contains(EcoSpacePart part);
    public void Activate();
    public void Deactivate();
}
public enum Eco.Framework.EcoSpacePartState : Enum {
    public int value__;
    public static EcoSpacePartState Inactive;
    public static EcoSpacePartState Activating;
    public static EcoSpacePartState Active;
    public static EcoSpacePartState Deactivating;
    public static EcoSpacePartState Deserializing;
}
public class Eco.Framework.EcoSpacePartWithTypeSystem : EcoSpacePart {
    private IEcoTypeSystem m_TypeSystem;
    public IEcoTypeSystem TypeSystem { get; }
    public EcoSpacePartWithTypeSystem(IEcoTypeSystem typeSystem);
    public IEcoTypeSystem get_TypeSystem();
    public virtual void CleanForFree();
}
public class Eco.Framework.EcoSpaceSerializationConfig : object {
    private bool m_SerializeUndo;
    private CacheSerializationMode m_CacheMode;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<Locator> <ObjectsToSerialize>k__BackingField;
    private OptimisticLockingPrecondition m_OptimisticLockingPrecondition;
    public bool SerializeUndo { get; public set; }
    public CacheSerializationMode CacheMode { get; public set; }
    public IEnumerable`1<Locator> ObjectsToSerialize { get; public set; }
    public OptimisticLockingPrecondition OptimisticLockingPrecondition { get; public set; }
    public bool get_SerializeUndo();
    public void set_SerializeUndo(bool value);
    public CacheSerializationMode get_CacheMode();
    public void set_CacheMode(CacheSerializationMode value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Locator> get_ObjectsToSerialize();
    [CompilerGeneratedAttribute]
public void set_ObjectsToSerialize(IEnumerable`1<Locator> value);
    public OptimisticLockingPrecondition get_OptimisticLockingPrecondition();
    public void set_OptimisticLockingPrecondition(OptimisticLockingPrecondition value);
}
public enum Eco.Framework.FetchStrategy : Enum {
    public int value__;
    public static FetchStrategy FetchObjects;
    public static FetchStrategy IdsOnly;
}
public interface Eco.Framework.IAbstractDeriver {
    public abstract virtual void MarkOutOfDate();
}
public interface Eco.Framework.IFetchConsolidationService {
    public abstract virtual void EnterFetchFactFinderMode();
    public abstract virtual void LeaveFetchFactFinderMode();
    public abstract virtual bool IsFetchFactFinderMode();
    public abstract virtual int UnsafeCountCursor();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnFetchFactFinderCallback(EventHandler`1<OnFetchFactFinderCallbackArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnFetchFactFinderCallback(EventHandler`1<OnFetchFactFinderCallbackArgs> value);
    public abstract virtual bool FetchFactFinderRunFactsFeedback(ObjectIdList idList, Int32[] memberindices);
    public abstract virtual bool IsFetchFactFinderButSafeToDoEval(IObjectInstance io, IStructuralFeature member);
    public abstract virtual void IsPartOfUnsafeEval(IObjectInstance io, IStructuralFeature member);
    public abstract virtual void OperationSkippingReportBack(string operationname);
    public abstract virtual List`1<string> OperationSkippingPeek();
    public abstract virtual void OperationSkippingReset();
    public abstract virtual void DeferInvalidation(IAbstractDeriver deriver, bool deferToNextLapNotAfterAll);
    public abstract virtual void InvalidateDeferedInvalidationsNow(bool nextlaponly);
}
public interface Eco.Framework.IFetchHandler {
    public abstract virtual void ApplyAttributeValue(Locator locator, IAttribute attribute, object sourceValue);
    public abstract virtual void ApplyMultilink(Locator locator, IAssociationEnd assocEnd, IEnumerable`1<Locator> sourceValue, Dictionary`2<ObjectId, int> storedOrderNo);
    public abstract virtual void ApplyIndirectMultilink(Locator locator, IAssociationEnd assocEnd, IEnumerable`1<LocatorPair> sourceValue);
    public abstract virtual void ApplyIndirectSinglelink(Locator locator, IAssociationEnd assocEnd, LocatorPair sourceValue);
    public abstract virtual void ApplySinglelink(Locator locator, IAssociationEnd assocEnd, Locator sourceValue, int orderNo);
    public abstract virtual void ApplyDataBlock(Datablock datablock);
}
public interface Eco.Framework.IObjectRepresentationProvider {
    public abstract virtual Locator LocatorForIObject(IObjectInstance obj);
    public abstract virtual IObjectInstance IObjectForLocator(Locator locator);
    public abstract virtual IList`1<Locator> IObjectListToLocatorList(IEnumerable`1<T> objectList);
    public abstract virtual IObjectList LocatorCollectionToIObjectList(IEnumerable`1<Locator> locators, IClass umlClass);
}
public interface Eco.Framework.IPersistenceHandler {
    public int MaxSavedVersion { get; }
    public bool IsPersistent { get; }
    public bool SupportsSync { get; }
    public abstract virtual ICollection`1<Locator> FetchLinksWithObjects(ICollection`1<Locator> locators, IAssociationEnd assocEnd);
    public abstract virtual int get_MaxSavedVersion();
    public abstract virtual DateTime TimeForVersion(int version);
    public abstract virtual int VersionAtTime(DateTime time);
    public abstract virtual void Fetch(ICollection`1<Locator> locators, IStructuralFeature[] members, FetchStrategy fetchStrategy);
    public abstract virtual ICollection`1<Locator> GetAllWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public abstract virtual Datablock GetValueWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public abstract virtual void UpdateDatabaseWithList(ICollection`1<Locator> locators);
    public abstract virtual void SuspectExternalUpdateInvalidate(ICollection`1<Locator> locators);
    public abstract virtual bool get_IsPersistent();
    public abstract virtual bool get_SupportsSync();
    public abstract virtual void RetrieveChanges(DBChangeCollection& ignoredChanges);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectsUpdated(LocatorArrayEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectsUpdated(LocatorArrayEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnPreviewFetchedDataBlock(EventHandler`1<PreviewFetchedDataBlockArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnPreviewFetchedDataBlock(EventHandler`1<PreviewFetchedDataBlockArgs> value);
}
public class Eco.Framework.LocatorArrayEventHandler : MulticastDelegate {
    public LocatorArrayEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LocatorCollectionEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, LocatorCollectionEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Framework.LocatorCollectionEventArgs : EventArgs {
    private ICollection`1<Locator> m_Locators;
    public ICollection`1<Locator> Locators { get; }
    public LocatorCollectionEventArgs(ICollection`1<Locator> locators);
    public ICollection`1<Locator> get_Locators();
}
public class Eco.Framework.OnFetchFactFinderCallbackArgs : EventArgs {
    public ObjectIdList IdList;
    public Int32[] Memberindices;
    public bool WasFactFind;
    public IObjectInstance LocatorWithUnsafeDerivation;
}
public class Eco.Framework.PreviewFetchedDataBlockArgs : EventArgs {
    public Datablock DataBlock;
}
public class Eco.FrameworkImpl.Ocl.BoldOclError : object {
    public static string sIComparableNotImplemented;
    public static string boeOverloadNotSupportedForIterators;
    public static string boeNoOverloadWithXParameters;
    public static string boeTimeExpressionsUnImpl;
    public static string boeUserSpecifiedEnumsUnImpl;
    public static string boePackageSpecUnImpl;
    public static string boeConversionError;
    public static string boeInvalidMemberName;
    public static string boeInvalidEnumName;
    public static string boeInvalidLoopVariable;
    public static string boeInvalidQualifier;
    public static string boeInvalidTimeSpecifier;
    public static string boeNoConform;
    public static string boeUndefinedOperation;
    public static string boeWrongNumberOfArgs;
    public static string boeNoOverloadWithParameterCount;
    public static string boeNoOverloadWithTheseParameterTypes;
    public static string boeUnknownClass;
    public static string boeAmbiguousOverload;
    public static string boeDuplicateOverload;
    public static string boeUnknownMember;
    public static string boeUnknownVariable;
    public static string boeOperationWithLoopVar;
    public static string boeNonListArgumentToCopyArg1Elem;
    public static string boeNoCommonSuperClass;
    public static string boeExpressionNeedsContext;
    public static string boeVariableNotAssigned;
    public static string boeElementNotConformToCollection;
    public static string boeRangeMustBeInt;
    public static string boeInvalidCharacter;
    public static string boeUnmatchedParentesis;
    public static string boeUnterminatedQuote;
    public static string boeUnknownIterator;
    public static string boeUnknownTypeOfLoopVar;
    public static string boeInvalidTypeNameName;
    public static string boeUnknownType;
    public static string boeMemberofType;
    public static string boeMemberofAttr;
    public static string boeEnvSizeError;
    public static string boeUnknownExprtypeinDeduce;
    public static string boeOperationOnlyAllowedOnMembers;
    public static string boeOperationNotAllowedOnDerivedMembers;
    public static string boeOperationNotAllowedOnLoopVariables;
    public static string boeOperationNotAllowedOnConstants;
    public static string borteDivisionByZero;
    public static string borteInvalidCast;
    public static string borteOperationNotDefinedOnArgTypes;
    public static string borteNonClassAttribute;
    public static string bortePadStringEmpty;
    public static string boeArgrtIsNotList;
    public static string boeArgrtIsNotType;
    public static string boertRangeNotAssigned;
    public static string boertEnumLiteralComparision;
    public static string boertBadEnumLiteral;
    public static string boertCantGetAllInstances;
    public static string boertCantGetAllLoadedObjects;
    public static string boertObjectFromExternalIdInvalidObject;
    public static string boertAllInstancesAtTimeOnlyOnClasses;
    public static string boertFailedToEvaluateDefaultStringRepresentation;
    public static string boertInvalidConstraintType;
    public static string boeExpressionReturnsAType;
    public static string boeParameterIsNotTOclType;
    public static string boeExplicitTypesNotAllowed;
    public static string boeDerivedMemberNotAllowed;
    public static string boeTransientMemberNotAllowed;
    public static string boeTransientClassesNotAllowed;
    public static string sClassHasNoStateMachine;
    public static string sUnknownState;
    public static string sTypesDoNotConform;
    public static string boertElementIsNotIFeatured;
    public static string sSingletonOnlyForClasses;
    public static string sSingletonOnlyForSingletonClasses;
    public static string sOnlyForMembers;
}
public class Eco.FrameworkImpl.Ocl.EBoldOCLAbort : EBoldOCLError {
    public EBoldOCLAbort(SerializationInfo info, StreamingContext context);
    public EBoldOCLAbort(string msg);
    public EBoldOCLAbort(string msg, Exception InnerException);
    public static EBoldOCLAbort CreateFmt(string msg, Object[] args);
    public static EBoldOCLAbort CreateFmt(string msg, string arg1);
}
public class Eco.FrameworkImpl.Ocl.EBoldOCLError : EcoOclErrorException {
    private string _OCL;
    public int fPosition;
    public bool ErrorFixed;
    public string OCL { get; public set; }
    public int Position { get; }
    public string Expression { get; }
    public bool InternalError { get; }
    public EBoldOCLError(SerializationInfo info, StreamingContext context);
    public EBoldOCLError(string msg);
    public EBoldOCLError(string msg, Exception InnerException);
    public string get_OCL();
    public void set_OCL(string value);
    public void FixError();
    public virtual int get_Position();
    public virtual string get_Expression();
    public string ErrorPointer();
    public virtual bool get_InternalError();
    public virtual string ToString();
}
public class Eco.FrameworkImpl.Ocl.EBoldOCLInternalError : EBoldOCLError {
    public bool InternalError { get; }
    public EBoldOCLInternalError(SerializationInfo info, StreamingContext context);
    public EBoldOCLInternalError(string msg);
    public EBoldOCLInternalError(string msg, Exception InnerException);
    public static EBoldOCLInternalError CreateFmt(string msg, Object[] args);
    public virtual bool get_InternalError();
}
public class Eco.FrameworkImpl.Ocl.EBoldOclRunTimeError : EBoldOCLError {
    public EBoldOclRunTimeError(SerializationInfo info, StreamingContext context);
    public EBoldOclRunTimeError(string msg);
    public EBoldOclRunTimeError(string msg, Exception InnerException);
    public static EBoldOclRunTimeError CreateFmt(string msg, Object[] args);
}
public class Eco.FrameworkImpl.Ocl.ExceptionWithSQLPassthroughSuspect : Exception {
    public ExceptionWithSQLPassthroughSuspect(Exception inner);
}
[AttributeUsageAttribute("32767")]
public class Eco.Globalization.LocalizableCategoryAttribute : CategoryAttribute {
    private string m_key;
    private string m_description;
    private object m_classType;
    public object ClassType { get; }
    public LocalizableCategoryAttribute(Type classType, string key);
    protected virtual string GetLocalizedString(string value);
    public object get_ClassType();
}
[AttributeUsageAttribute("32767")]
public class Eco.Globalization.LocalizableDescriptionAttribute : DescriptionAttribute {
    private bool localized;
    private object m_classType;
    public string Description { get; }
    public object ClassType { get; }
    public LocalizableDescriptionAttribute(Type classType, string description);
    public virtual string get_Description();
    public object get_ClassType();
}
public class Eco.Globalization.ResManager : object {
    private static Dictionary`2<Assembly, ResourceManager> assemblyDictionary;
    private static int _uniqueRes;
    private static ResManager();
    private static ResourceManager EnsuredResMgr(Assembly asm);
    public static string GetString(object requestingObject, string key);
    public static bool IsTypeOurs(Type t);
    public static string GetString(object requestingObject, string key, Object[] args);
}
[AttributeUsageAttribute("1")]
public class Eco.Globalization.ResourceNameAttribute : Attribute {
    private string resourceName;
    public string ResourceName { get; }
    public ResourceNameAttribute(string resourceName);
    public string get_ResourceName();
}
public abstract class Eco.Globalization.StringResources : object {
    public static string GetString(object classType, string key);
}
public abstract class Eco.Handles.EcoSpaceBase : Component {
    public static string GetTypeSystemServiceName;
    public static Type ResolveTypeName(string ecoSpaceTypeName, ISite site);
}
public class Eco.Interfaces.InterfacesStringRes : object {
    public static string sConnectionNotOpen { get; }
    public static string sUMVUseTimeStampRequired { get; }
    public static string sElementIsReadOnly { get; }
    public static string sUseGetAsCollection { get; }
    public static string sReadBeforeSet { get; }
    public static string sObjectRefIsNull { get; }
    public static string sMustBeACollectionType { get; }
    public static string sUnknownClassifierTypeForElement { get; }
    public static string sUnknownClassifierType { get; }
    public static string sListIsNull { get; }
    public static string sWarning { get; }
    public static string sError { get; }
    public static string sClassMappingWithNoName { get; }
    public static string sNoClassDefinitionsInDocument { get; }
    public static string sNoFileNameForXmlMappingFile { get; }
    public static string PropertyMapperTypeName { get; }
    public static string PropertyName { get; }
    public static string sCategoryPersistenceTuning { get; }
    public static string sCategorySQLTweaks { get; }
    public static string sPropertyKeyMapperTypeName { get; }
    public static string sSqlScriptCommentStart { get; }
    public static string sSqlScriptStartTransaction { get; }
    public static string sSqlScriptTerminator { get; }
    public static string sSqlScriptCommentStop { get; }
    public static string sSqlScriptSeparator { get; }
    public static string sSqlScriptRollBackTransaction { get; }
    public static string sSqlScriptCommitTransaction { get; }
    public static string sForceUpperCase { get; }
    public static string sIdentifierCharacterMode { get; }
    public static string sUpperCaseFunctionName { get; }
    public static string sLengthFunctionName { get; }
    public static string sPropertyAllowMetadataChangesInTransaction { get; }
    public static string sPropertyDefaultStringLength { get; }
    public static string sPropertyDropColumnTemplate { get; }
    public static string sPropertyDropIndexTemplate { get; }
    public static string sPropertyDropTableTemplate { get; }
    public static string sPropertyFetchBlockSize { get; }
    public static string sPropertyMaxDbIdentifierLength { get; }
    public static string sPropertyMaxIndexNameLength { get; }
    public static string sPropertyMaxParamsInIdList { get; }
    public static string sPropertyPersistenceMappers { get; }
    public static string sPropertyIdMappers { get; }
    public static string sPropertyQuoteSqlNames { get; }
    public static string sPropertySupportsDefaultColumnValues { get; }
    public static string sPropertySQLForNotNull { get; }
    public static string sPropertySQLForAllowNull { get; }
    public static string sPropertySupportsConstraintsInCreateTable { get; }
    public static string sPropertySystemTablePrefix { get; }
    public static string sPropertyUseClockLog { get; }
    public static string sPropertyUseGlobalId { get; }
    public static string sPropertyUseReadOnly { get; }
    public static string sPropertyUseSQL92Joins { get; }
    public static string sPropertyUseTimestamp { get; }
    public static string sPropertyUseXFiles { get; }
    public static string sPropertyDefaultDateTime { get; }
    public static string sPropertyDateTimeFormat { get; }
    public static string sReservedWords { get; }
    public static string sPropertyUpdateIsolationLevel { get; }
    public static string sSqlQuoteChar { get; }
    public static string sSqlPreQuoteChar { get; }
    public static string sSqlPostQuoteChar { get; }
    public static string sSqlStringQuoteChar { get; }
    public static string sSqlQuoteCharInString { get; }
    public static string sPropertyUseTimestampColumn { get; }
    public static string sPropertyUseTimestampTable { get; }
    public static string sPropertyBooleanTrueLiteral { get; }
    public static string sMapperDefinitionHasNoName { get; }
    public static string sSQLConfigEmpty { get; }
    public static string sCannotApplyWithUndecidedAction { get; }
    public static string sKeepOnlyValidForModifiedMembers { get; }
    public static string sKeepOnlyValidForDeletedObjects { get; }
    public static string sInternalIdEncountered { get; }
    public static string sKeyAttributeHasNoValue { get; }
    public static string sAutoIncNotSupportingVersionedDBs { get; }
    public static string sUnableToFindImplementor { get; }
    public static string sLeftSideMustBeProperty { get; }
    public static string sCannotCompareNullValues { get; }
    public static string sNoElementType { get; }
    public static string sNoLocator { get; }
    public static string sGetKeyNotValidForUnsavedObjects { get; }
    public static string OclHelpTypeMethod { get; }
    public static string sArgumentNotICollection { get; }
    public static string sModelNotEcoified { get; }
    public static string sAtMost { get; }
    public static string sAtLeast { get; }
    public static string sStringTooLong { get; }
    public static string sInternalIDFromOtherEcoSpace { get; }
    public static string get_sConnectionNotOpen();
    public static string get_sUMVUseTimeStampRequired();
    public static string sDoesNotConform(object param0, object param1);
    public static string sIsNotA(object param0, object param1);
    public static string sArgumentIsNotA(object param0);
    public static string get_sElementIsReadOnly();
    public static string get_sUseGetAsCollection();
    public static string get_sReadBeforeSet();
    public static string get_sObjectRefIsNull();
    public static string get_sMustBeACollectionType();
    public static string get_sUnknownClassifierTypeForElement();
    public static string get_sUnknownClassifierType();
    public static string sNotEcoType(object param0);
    public static string get_sListIsNull();
    public static string get_sWarning();
    public static string get_sError();
    public static string get_sClassMappingWithNoName();
    public static string sDuplicateClassDefinitions(object param0);
    public static string sDuplicateTableDefinitions(object param0);
    public static string sDuplicateColumnDefinitions(object param0, object param1);
    public static string sDuplicateColumnsWithDifferentCase(object param0, object param1, object param2);
    public static string sClassNotInModel(object param0);
    public static string sNoMappingForPersistentClass(object param0);
    public static string sClassContainsAliasWithNoName(object param0);
    public static string sAliasDoesNotSpecifyTable(object param0, object param1);
    public static string sAliasDoesNotSpecifyKeys(object param0, object param1);
    public static string sAliasContainsKeyWithNoName(object param0, object param1);
    public static string sKeyImplementationMissingImplementsKey(object param0, object param1, object param2);
    public static string sKeyRefersToNonExistingKey(object param0, object param1, object param2);
    public static string sKeyColumnCountDiffers(object param0, object param1, object param2, object param3);
    public static string sKeyImplementationHasUndefinedDiscriminatorColumn(object param0, object param1, object param2, object param3);
    public static string sKeyHasConstantColumnWithNoName(object param0, object param1, object param2);
    public static string sKeyHasConstantColumnWithNoValue(object param0, object param1, object param2);
    public static string sTypeConditionRefersToUndefinedDiscriminator(object param0, object param1);
    public static string sTypeDiscriminatorImplementationRefersToUnknownDiscriminator(object param0, object param1, object param2);
    public static string sTypeDiscriminatorImplementationRefersToUnknownColumn(object param0, object param1, object param2, object param3);
    public static string sAttributeNotInModel(object param0, object param1);
    public static string sAttributeDefinedButNotInModel(object param0, object param1);
    public static string sFeatureHasNoName(object param0);
    public static string sSingleLinkNotInModel(object param0, object param1);
    public static string sSingleLinkDefinedButNotInModel(object param0, object param1);
    public static string sFeatureDoesNotSpecifyAlias(object param0, object param1);
    public static string sInvalidSuperClassReference(object param0, object param1);
    public static string sFeatureHasInvalidAlias(object param0, object param1, object param2);
    public static string sFeatureDoesNotSpecifyColumns(object param0, object param1);
    public static string sSingleLinkDoesNotSpecifyKey(object param0, object param1);
    public static string sSingleLinkKeyRefersToUndefinedClass(object param0, object param1, object param2);
    public static string sSingleLinkKeyRefersToUndefinedKey(object param0, object param1, object param2, object param3);
    public static string sSingleLinkKeyColumnCountDiffers(object param0, object param1, object param2, object param3);
    public static string sKeyHasNoName(object param0);
    public static string sInvalidMapping_DuplicateKeyDefs(object param0, object param1);
    public static string sInvalidMapping_DuplicateDiscriminatorDefs(object param0, object param1);
    public static string sInvalidMapping_DuplicateAutoIncImplForKeyDef(object param0);
    public static string sInvalidMapping_AliasDefinesNoKeys(object param0, object param1);
    public static string sInvalidMapping_TypeCondOverridesFinalValue(object param0, object param1);
    public static string sInvalidMapping_DuplicateAutoIncKeyImpl(object param0, object param1, object param2, object param3);
    public static string sKeyHasEmptySignature(object param0, object param1);
    public static string sKeyHasUnknownSignature(object param0, object param1, object param2);
    public static string sDiscriminatorDefSignatureEmpty(object param0, object param1);
    public static string sClassCannotDefineID(object param0, object param1);
    public static string sClassIDRefersToUndefinedKey(object param0, object param1);
    public static string sMissingMappingForFeature(object param0, object param1);
    public static string sMultipleDiscriminatorValuesForClass(object param0, object param1, object param2);
    public static string sMissingDiscriminatorValuesForClass(object param0, object param1);
    public static string sMissingIdForClass(object param0);
    public static string sMissingValueForDiscriminatorValue(object param0, object param1);
    public static string sMissingNameForDiscriminatorValue(object param0);
    public static string sMissingDiscriminatorForDiscriminatorImpl(object param0, object param1);
    public static string sMissingColumnNameForDiscriminatorImpl(object param0, object param1, object param2);
    public static string sAliasKeyRefersToNonExistingKey(object param0, object param1, object param2);
    public static string sUnknownElementInClass(object param0, object param1);
    public static string sUnknownElementInTable(object param0, object param1);
    public static string sUnknownElementInAlias(object param0, object param1, object param2);
    public static string sUnknownElementInKey(object param0, object param1, object param2, object param3);
    public static string sMultipleIDsForClass(object param0);
    public static string sFeatureAlsoDefinedInSuperclass(object param0, object param1);
    public static string sChildMappedConcreteClass(object param0);
    public static string ParentMappedClassIsSubclassToChildMappedClass(object param0, object param1);
    public static string sUnableToFindMapperForAttribute(object param0, object param1, object param2, object param3);
    public static string sOtherEndOfOrderedMultiLinkHasNoOrderColumn(object param0, object param1, object param2);
    public static string sClassDefinedInMultipleConfigs(object param0);
    public static string get_sNoClassDefinitionsInDocument();
    public static string sDuplicateAliasInClass(object param0, object param1);
    public static string sDuplicateKeysInClass(object param0, object param1);
    public static string sDuplicateKeysInAlias(object param0, object param1, object param2);
    public static string sMultipleTypeConditionsForClass(object param0);
    public static string sInvalidSyntaxForKeyInSingleLink(object param0, object param1);
    public static string sDuplicateFeatureDefinitionsInClass(object param0, object param1);
    public static string sUnknownDatabaseInAlias(object param0, object param1, object param2);
    public static string sUnknownDatabaseInClass(object param0, object param1);
    public static string sUnknownTableInAlias(object param0, object param1, object param2);
    public static string sUnknownColumnInSingleLink(object param0, object param1, object param2);
    public static string sUnknownColumnInAttribute(object param0, object param1, object param2);
    public static string sMissingTableInAlias(object param0, object param1);
    public static string get_sNoFileNameForXmlMappingFile();
    public static string sUnknownColumnNameInDiscriminatorColumn(object param0, object param1, object param2);
    public static string sUnknownColumnNameInKeyImpl(object param0, object param1, object param2);
    public static string MissingTypeForColumn(object param0, object param1);
    public static string get_PropertyMapperTypeName();
    public static string get_PropertyName();
    public static string get_sCategoryPersistenceTuning();
    public static string get_sCategorySQLTweaks();
    public static string get_sPropertyKeyMapperTypeName();
    public static string sMappingIsNotSingleColumn(object param0, object param1);
    public static string sUnableToFindSingleColumnMapping(object param0);
    public static string get_sSqlScriptCommentStart();
    public static string get_sSqlScriptStartTransaction();
    public static string get_sSqlScriptTerminator();
    public static string get_sSqlScriptCommentStop();
    public static string get_sSqlScriptSeparator();
    public static string get_sSqlScriptRollBackTransaction();
    public static string get_sSqlScriptCommitTransaction();
    public static string get_sForceUpperCase();
    public static string get_sIdentifierCharacterMode();
    public static string get_sUpperCaseFunctionName();
    public static string get_sLengthFunctionName();
    public static string get_sPropertyAllowMetadataChangesInTransaction();
    public static string get_sPropertyDefaultStringLength();
    public static string get_sPropertyDropColumnTemplate();
    public static string get_sPropertyDropIndexTemplate();
    public static string get_sPropertyDropTableTemplate();
    public static string get_sPropertyFetchBlockSize();
    public static string get_sPropertyMaxDbIdentifierLength();
    public static string get_sPropertyMaxIndexNameLength();
    public static string get_sPropertyMaxParamsInIdList();
    public static string get_sPropertyPersistenceMappers();
    public static string get_sPropertyIdMappers();
    public static string get_sPropertyQuoteSqlNames();
    public static string get_sPropertySupportsDefaultColumnValues();
    public static string get_sPropertySQLForNotNull();
    public static string get_sPropertySQLForAllowNull();
    public static string get_sPropertySupportsConstraintsInCreateTable();
    public static string get_sPropertySystemTablePrefix();
    public static string get_sPropertyUseClockLog();
    public static string get_sPropertyUseGlobalId();
    public static string get_sPropertyUseReadOnly();
    public static string get_sPropertyUseSQL92Joins();
    public static string get_sPropertyUseTimestamp();
    public static string get_sPropertyUseXFiles();
    public static string get_sPropertyDefaultDateTime();
    public static string get_sPropertyDateTimeFormat();
    public static string get_sReservedWords();
    public static string get_sPropertyUpdateIsolationLevel();
    public static string get_sSqlQuoteChar();
    public static string get_sSqlPreQuoteChar();
    public static string get_sSqlPostQuoteChar();
    public static string get_sSqlStringQuoteChar();
    public static string get_sSqlQuoteCharInString();
    public static string get_sPropertyUseTimestampColumn();
    public static string get_sPropertyUseTimestampTable();
    public static string get_sPropertyBooleanTrueLiteral();
    public static string sUnableToInstantiateMapper(object param0);
    public static string sMapperDoesNotSupportMappingInterfaces(object param0, object param1);
    public static string get_sMapperDefinitionHasNoName();
    public static string sMapperDefinitionHasNoMapper(object param0);
    public static string MapperDoesntImplementInterface(object param0, object param1);
    public static string MapperDoesntImplementInterfaces(object param0, object param1, object param2);
    public static string get_sSQLConfigEmpty();
    public static string get_sCannotApplyWithUndecidedAction();
    public static string get_sKeepOnlyValidForModifiedMembers();
    public static string get_sKeepOnlyValidForDeletedObjects();
    public static string get_sInternalIdEncountered();
    public static string get_sKeyAttributeHasNoValue();
    public static string get_sAutoIncNotSupportingVersionedDBs();
    public static string get_sUnableToFindImplementor();
    public static string sCantGetID(object param0, object param1);
    public static string sOptimisticLockingFailed(object param0);
    public static string sEnumValueNotInRange(object param0, object param1, object param2);
    public static string sBooleanValueMustBe(object param0, object param1, object param2);
    public static string sInvalidIntegerTVValue(object param0);
    public static string get_sLeftSideMustBeProperty();
    public static string TypeIsNotAValidForOclOperationAttribute(object param0);
    public static string sNameNotUnique(object param0);
    public static string sNameNotDefined(object param0);
    public static string sNameAmbiguous(object param0, object param1);
    public static string sNoValueForTag(object param0);
    public static string get_sCannotCompareNullValues();
    public static string sCantGetEcoSpaceProvider(object param0);
    public static string sDerivedMemberHasNoDerivation(object param0, object param1);
    public static string sDeriveAndSubscribeReturnedNull(object param0, object param1);
    public static string sNotActive(object param0);
    public static string sPropertyNull(object param0);
    public static string get_sNoElementType();
    public static string get_sNoLocator();
    public static string sUnknownMember(object param0, object param1);
    public static string sUnknownClassifier(object param0);
    public static string sClassifierIsNotAClass(object param0);
    public static string get_sGetKeyNotValidForUnsavedObjects();
    public static string get_OclHelpTypeMethod();
    public static string UnknownKeyType(object param0);
    public static string UnknownIdType(object param0);
    public static string sCannotSetElementToValue(object param0, object param1);
    public static string get_sArgumentNotICollection();
    public static string sMultipleAssociationsSameName(object param0);
    public static string sAssociationEndAlreadySet(object param0, object param1);
    public static string sBothEndsEmbedded(object param0, object param1, object param2, object param3, object param4);
    public static string sMultiplePacakgesSameName(object param0);
    public static string get_sModelNotEcoified();
    public static string sClassAlreadyBelongsToPackage(object param0, object param1);
    public static string sPackageAlreadyBelongsToPackage(object param0, object param1);
    public static string sAssociationAlreadyBelongsToPackage(object param0, object param1);
    public static string sMultiplePackageElementsSameName(object param0, object param1);
    public static string sMultipleClassFeaturesSameName(object param0, object param1);
    public static string sNotValidOclDerivationOverride(object param0);
    public static string sInvalidLoopbackIndex(object param0, object param1, object param2, object param3);
    public static string sConflictingLoopbackIndexes(object param0, object param1, object param2, object param3);
    public static string sAutoMultiplicityConstraintModelName(object param0);
    public static string sAutoMultiplicityConstraintDesc(object param0, object param1, object param2, object param3);
    public static string sAutoMandatoryConstraintDesc(object param0);
    public static string get_sAtMost();
    public static string get_sAtLeast();
    public static string sAssociationEndTypeMismatch(object param0, object param1, object param2);
    public static string sInvalidInitialValue(object param0, object param1, object param2);
    public static string sMultipleParametersSameName(object param0, object param1);
    public static string sAssociationEndNotAssociation(object param0, object param1);
    public static string sNot2Ends(object param0);
    public static string sLinkInherits(object param0);
    public static string sMemberNameCollision(object param0, object param1);
    public static string sMultipleClassesSameName(object param0);
    public static string sDerivedAssociationWithLinkClass(object param0, object param1);
    public static string sInheritedStateMachinesMustHaveUniqueNames(object param0, object param1);
    public static string sTypeNotFound(object param0, object param1, object param2);
    public static string sTypeIsNotAValidSimpleType(object param0);
    public static string sInvalidAssociation(object param0, object param1);
    public static string sIsStateAttributeNotSet(object param0, object param1);
    public static string sStateAttributeNotAnAttributeOnClass(object param0, object param1);
    public static string sTriggerIsNotAMethodOnClass(object param0, object param1);
    public static string sIsTriggerNotSet(object param0, object param1);
    public static string sErrorInitializingStateMachine(object param0);
    public static string sRegionHasMultipleInitialStates(object param0);
    public static string sRegionHasNoInitialState(object param0);
    public static string sNoUnguardedExitStateFromRegionToFinal(object param0, object param1);
    public static string sTransitionCrossesRegionBoundary(object param0, object param1);
    public static string sMultipleUnguardedTransitionsForTrigger(object param0, object param1);
    public static string sTransitionsWithAndWithoutTriggers(object param0);
    public static string sInvalidValueForStateVariable(object param0, object param1, object param2);
    public static string sNoStateAttributeForRegionContainingState(object param0);
    public static string sTriggersNotAllowedFromInitialState(object param0, object param1);
    public static string sStatemachineMultipleRegionsSameName(object param0, object param1);
    public static string sStateMultipleRegionsSameName(object param0, object param1);
    public static string sMultipleVertextesSameName(object param0, object param1);
    public static string sNoMethodInfoFound(object param0, object param1);
    public static string get_sStringTooLong();
    public static string sTriggerlessTransitionsFormLoopFromState(object param0);
    public static string sInitializationError(object param0, object param1);
    public static string sIOclOperationNotImplemented(object param0);
    public static string sAssociationNotMarkedWithAttribute(object param0);
    public static string sDuplicateAssociationName(object param0, object param1);
    public static string sTypenotAnEcoAssociation(object param0);
    public static string sInvalidOwnedElementAttribute(object param0);
    public static string sTypeNotAnEcoClass(object param0);
    public static string sDuplicateClassName(object param0, object param1);
    public static string sDuplicateUmlElementAttribute(object param0);
    public static string sAssociationEndRefersToUnknownAssociation(object param0, object param1, object param2);
    public static string sClassRefersToUnknownAssociation(object param0, object param1);
    public static string sAssociationHasNoEnds(object param0);
    public static string sClassNotInIncludedPackage(object param0, object param1);
    public static string sAssociationNotInIncludedPackage(object param0, object param1);
    public static string sAssociationOnlyHasOneNonnavigableEnd(object param0);
    public static string sInvalidAttributeType(object param0, object param1, object param2);
    public static string sInvalidAttributeTypeDomainClass(object param0, object param1, object param2);
    public static string UnknownTypeOfOtherEnd(object param0, object param1, object param2);
    public static string sOwnedElementWithNoUmlElementAttribute(object param0, object param1);
    public static string sSourceIsNotAVertex(object param0, object param1);
    public static string sTargetIsNotAVertex(object param0, object param1);
    public static string sErrorBuildingStateMachineFromTransportFormat(object param0);
    public static string sWrongParamCount(object param0, object param1, object param2);
    public static string sInvalidParamType(object param0, object param1, object param2, object param3, object param4);
    public static string sUnknownStateName(object param0);
    public static string sUnknownRegionName(object param0);
    public static string sUnknownTriggerName(object param0);
    public static string sAmbiguousTransitionsForTrigger(object param0, object param1, object param2, object param3);
    public static string sNoValidInitialTransition(object param0, object param1);
    public static string sNoTransition(object param0, object param1, object param2);
    public static string get_sInternalIDFromOtherEcoSpace();
    public static string sClassIsAbstract(object param0);
    public static string sRootStateAttributeAllowsNull(object param0, object param1);
}
public static class Eco.Interfaces.VersionInfo : object {
    public static string ProductVersion;
    public static string AssemblyVersion;
    public static string AssemblyVersionForWizards;
    public static string AssemblyVersionForDesign;
    public static string AssemblyVersionProductCompability;
    public static string AssemblyFileVersion;
    public static string PublicKey;
    public static string AssemblySuffixForDesignerQualification;
    public static string AssemblySuffixForRuntimeQualification;
    public static string CopyrightYears;
    public static string AssemblyCompany;
    public static string AssemblyCulture;
    public static string AssemblyProduct;
    public static string AssemblyEcoTrademark;
    public static string AssemblyMixedCopyright;
    public static string AssemblyCapableObjectsCopyright;
    public static string AssemblyConfiguration;
    private static int majorVersion;
    private static int minorVersion;
    private static int revision;
    public static int MajorVersion { get; }
    public static int MinorVersion { get; }
    public static int Revision { get; }
    private static VersionInfo();
    public static int get_MajorVersion();
    public static int get_MinorVersion();
    public static int get_Revision();
}
public class Eco.Logging.EcoListener : TraceListener {
    private static int c_ListenerCount;
    public static EcoListener Singleton;
    private bool m_Closed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TraceLogHandler OnTraceLog;
    private static EcoListener();
    public static void StartListening();
    private static bool EcoListenerPresent();
    public static void StopListening();
    public static void StopAllListening();
    public static void RemoveDefaultListener();
    [CompilerGeneratedAttribute]
public void add_OnTraceLog(TraceLogHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnTraceLog(TraceLogHandler value);
    protected void DoTraceMessage(string message, string category);
    public virtual void Write(string message, string category);
    public virtual void Write(object o, string category);
    public virtual void Write(string message);
    public virtual void Write(object o);
    public virtual void WriteLine(string message, string category);
    public virtual void WriteLine(object o, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(object o);
    public virtual void Close();
    public virtual void Open();
    public virtual void Flush();
}
public class Eco.Logging.EcoLogSwitches : object {
    private static OclTraceSwitch c_OclTraceSwitch;
    private static OclTraceSwitch c_EALTraceSwitch;
    private static OclTraceSwitch c_ActionExecuteTraceSwitch;
    private static OclTraceSwitch c_ActionEnableTraceSwitch;
    private static OclTraceSwitch c_MethodsSwitch;
    private static SqlTraceSwitch c_SqlTraceSwitch;
    private static SqlMetaTraceSwitch c_SqlMetaTraceSwitch;
    private static PMapperTraceSwitch c_PMapperTraceSwitch;
    private static RegionTraceSwitch c_RegionTraceSwitch;
    private static ValidationTraceSwitch c_ValidationTraceSwitch;
    private static OriginTraceSwitch c_OriginTraceSwitch;
    private static OclTraceSwitch _wecpofTraceSwitch;
    private static bool _CollectAssociationUsageStats;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <WebDebugPrint>k__BackingField;
    public static bool LogOcl { get; public set; }
    public static bool LogEAL { get; public set; }
    public static bool LogActionExecute { get; public set; }
    public static bool LogActionEnable { get; public set; }
    public static bool LogMethods { get; public set; }
    public static bool LogSql { get; public set; }
    public static bool LogSqlMeta { get; public set; }
    public static bool LogPMapper { get; public set; }
    public static bool LogRegions { get; public set; }
    public static bool LogValidation { get; public set; }
    public static bool OriginTrace { get; public set; }
    public static bool DefaultLogState { get; }
    public static bool CollectAssociationUsageStats { get; public set; }
    public static bool WebDebugPrint { get; public set; }
    public static bool LogWecpof { get; public set; }
    private static EcoLogSwitches();
    public static void RestoreDefaultLogStates();
    private static void DoSetLogOcl(bool value);
    private static void DoSetLogEAL(bool value);
    private static void DoSetLogActionExecute(bool value);
    private static void DoSetLogActionEnable(bool value);
    private static void DoSetLogMethods(bool value);
    private static void DoSetLogSql(bool value);
    private static void DoSetLogSqlMeta(bool value);
    private static void DoSetLogPMapper(bool value);
    private static void DoSetLogRegions(bool value);
    private static void DoSetLogValidations(bool value);
    private static void DoSetOriginTrace(bool value);
    public static bool get_LogOcl();
    public static void set_LogOcl(bool value);
    public static bool get_LogEAL();
    public static void set_LogEAL(bool value);
    public static bool get_LogActionExecute();
    public static void set_LogActionExecute(bool value);
    public static bool get_LogActionEnable();
    public static void set_LogActionEnable(bool value);
    public static bool get_LogMethods();
    public static void set_LogMethods(bool value);
    public static bool get_LogSql();
    public static void set_LogSql(bool value);
    public static bool get_LogSqlMeta();
    public static void set_LogSqlMeta(bool value);
    public static bool get_LogPMapper();
    public static void set_LogPMapper(bool value);
    public static bool get_LogRegions();
    public static void set_LogRegions(bool value);
    public static bool get_LogValidation();
    public static void set_LogValidation(bool value);
    public static bool get_OriginTrace();
    public static void set_OriginTrace(bool value);
    public static bool get_DefaultLogState();
    public static bool get_CollectAssociationUsageStats();
    public static void set_CollectAssociationUsageStats(bool value);
    [CompilerGeneratedAttribute]
public static bool get_WebDebugPrint();
    [CompilerGeneratedAttribute]
public static void set_WebDebugPrint(bool value);
    public static void set_LogWecpof(bool value);
    public static bool get_LogWecpof();
}
public class Eco.Logging.EcoTraceCategories : object {
    public static string Ocl;
    public static string OclActionExecute;
    public static string OclActionEnable;
    public static string OclMethod;
    public static string Sql;
    public static string SqlParams;
    public static string SqlMeta;
    public static string PMapper;
    public static string Regions;
    public static string Validation;
    public static string MDrivenServerDebug;
    public static string Wecpof;
    public static string EAL;
    private static string c_Separator;
    public static string Separator { get; public set; }
    private static EcoTraceCategories();
    public static bool IsEcoCategory(string category);
    public static string get_Separator();
    public static void set_Separator(string value);
}
public interface Eco.Logging.IMessageDisplay {
    public abstract virtual void AddMessage(string message);
    public abstract virtual void AddMessage(string title, string message);
}
public class Eco.Logging.OclTraceSwitch : BooleanSwitch {
    internal OclTraceSwitch(string displayName, string description);
}
public class Eco.Logging.OriginTraceSwitch : BooleanSwitch {
    internal OriginTraceSwitch(string displayName, string description);
}
public class Eco.Logging.PMapperTraceSwitch : BooleanSwitch {
    internal PMapperTraceSwitch(string displayName, string description);
}
public static class Eco.Logging.PTName : object {
    public static string Fetch;
    public static string FetchIDListWithCondition;
    public static string FetchDatablockWithCondition;
    public static string GetChangesSince;
    public static string Update;
}
public class Eco.Logging.RegionTraceSwitch : BooleanSwitch {
    internal RegionTraceSwitch(string displayName, string description);
}
public class Eco.Logging.SqlMetaTraceSwitch : BooleanSwitch {
    internal SqlMetaTraceSwitch(string displayName, string description);
}
public class Eco.Logging.SqlTraceSwitch : BooleanSwitch {
    internal SqlTraceSwitch(string displayName, string description);
}
public class Eco.Logging.TraceEventArgs : object {
    private string m_Message;
    private string m_Category;
    private static string c_Separator;
    public string Message { get; }
    public string Category { get; }
    public TraceEventArgs(string message, string category);
    private static TraceEventArgs();
    public string get_Message();
    public string get_Category();
    public virtual string ToString();
}
public class Eco.Logging.TraceLogHandler : MulticastDelegate {
    public TraceLogHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TraceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TraceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Logging.ValidationTraceSwitch : BooleanSwitch {
    internal ValidationTraceSwitch(string displayName, string description);
}
[DefaultMemberAttribute("Item")]
public class Eco.ObjectImplementation.EcoListShimBase`1 : object {
    private IEcoList`1<T> m_Adaptee;
    private IObjectList Eco.ObjectImplementation.IEcoList<T>.AsIObjectList { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IEcoServiceProvider ServiceProvider { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public EcoListShimBase`1(IEcoList`1<T> adaptee);
    private sealed virtual override IObjectList Eco.ObjectImplementation.IEcoList<T>.get_AsIObjectList();
    public virtual int IndexOf(T item);
    public virtual void Insert(int index, T item);
    public virtual void RemoveAt(int index);
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEcoServiceProvider get_ServiceProvider();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
[DefaultMemberAttribute("Item")]
public class Eco.ObjectImplementation.EcoObjectListAdapter`1 : object {
    private IObjectList m_Adaptee;
    private ListChangedEventHandler m_ListChanged;
    private NotifyCollectionChangedEventHandler _collectionChanged;
    protected IObjectList Adaptee { get; }
    public IObjectList AsIObjectList { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    public bool AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public IEcoServiceProvider ServiceProvider { get; }
    public EcoObjectListAdapter`1(IObjectList list);
    protected IObjectList get_Adaptee();
    public sealed virtual void Clear();
    public sealed virtual IObjectList get_AsIObjectList();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] arr, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    public sealed virtual bool get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private void OnValueChanged(object sender, EventArgs e);
    private sealed virtual override void System.ComponentModel.IBindingList.add_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEcoServiceProvider get_ServiceProvider();
    private void OnValueChanged_INotifyCollectionChanged(object sender, EventArgs e);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void HandleINotifyCollectionChanged(object o, NotifyCollectionChangedAction action, int newpos, int oldpos);
}
[DefaultMemberAttribute("Item")]
public class Eco.ObjectImplementation.EcoOfflineList`1 : object {
    private List`1<T> _internalList;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public IEcoServiceProvider ServiceProvider { get; }
    public IObjectList AsIObjectList { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEcoServiceProvider get_ServiceProvider();
    public sealed virtual IObjectList get_AsIObjectList();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void HandleINotifyCollectionChanged(object o, NotifyCollectionChangedAction action, int newpos, int oldpos);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
}
public class Eco.ObjectImplementation.EcoOfflineValues : object {
    private static string _notavail;
    private Dictionary`2<int, object> _values;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    public Dictionary`2<int, object> Values { get; }
    public Dictionary`2<int, object> get_Values();
    public sealed virtual object get_MemberByIndex(int index);
    public sealed virtual void set_MemberByIndex(int index, object value);
    public sealed virtual object get_MemberByIndex_OfflineAware(int index, Type expectedType);
    private static bool IsSubclassOfRawGeneric(Type generic, Type toCheck);
    public sealed virtual void set_MemberByIndex_OfflineAware(int index, object value, string memberName);
    public sealed virtual IObjectInstance AsIObject();
    public sealed virtual void AssertLoopbackUnassigned();
    public sealed virtual void LoopbackValid();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface Eco.ObjectImplementation.IContent {
    public abstract virtual object get_MemberByIndex(int index);
    public abstract virtual void set_MemberByIndex(int index, object value);
    public abstract virtual object get_MemberByIndex_OfflineAware(int index, Type expectedType);
    public abstract virtual void set_MemberByIndex_OfflineAware(int index, object value, string memberName);
    public abstract virtual IObjectInstance AsIObject();
    public abstract virtual void AssertLoopbackUnassigned();
    public abstract virtual void LoopbackValid();
}
public interface Eco.ObjectImplementation.IEcoList`1 {
    public IEcoServiceProvider ServiceProvider { get; }
    public IObjectList AsIObjectList { get; }
    public abstract virtual IEcoServiceProvider get_ServiceProvider();
    public abstract virtual IObjectList get_AsIObjectList();
}
public interface Eco.ObjectImplementation.IInternalObjectContentFactory {
    public abstract virtual IContent CreateContent(ILoopBack dotNetObject);
    public abstract virtual void CreateContentFailed(IContent obj, object dotNetObject);
}
public interface Eco.ObjectImplementation.ILoopBack {
    public abstract virtual object get_MemberByIndex(int index);
    public abstract virtual void set_MemberByIndex(int index, object value);
}
public interface Eco.ObjectImplementation.ILoopBack2 {
    public abstract virtual void SetContent(IContent content);
}
public interface Eco.ObjectImplementation.ILoopBack3 {
    public abstract virtual IContent GetContent();
}
public class Eco.ObjectImplementation.ObjectEnumeratorAdapter`1 : object {
    private IEnumerator adaptee;
    private T System.Collections.Generic.IEnumerator<T>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ObjectEnumeratorAdapter`1(IEnumerator enumerator);
    private sealed virtual override T System.Collections.Generic.IEnumerator<T>.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
public class Eco.ObjectImplementation.ObjectListAdapter : object {
    private IList fAdaptee;
    protected IList Adaptee { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public ObjectListAdapter(IList list);
    protected IList get_Adaptee();
    public sealed virtual void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override int System.Collections.IList.Add(object value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
}
public class Eco.ObjectImplementation.ObjectListAdapter`1 : EcoListShimBase`1<T> {
    public ObjectListAdapter`1(IList adaptee);
}
public class Eco.ObjectImplementation.ObjectListAdapterX`1 : ObjectListAdapter {
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    public ObjectListAdapterX`1(IList list);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T value);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T value);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T value);
}
public class Eco.ObjectRepresentation.AmbiguousTransitionException : EcoException {
    public AmbiguousTransitionException(string message);
    public AmbiguousTransitionException(string message, Exception inner);
    protected AmbiguousTransitionException(SerializationInfo info, StreamingContext context);
}
public class Eco.ObjectRepresentation.ArgumentNonConformException : ArgumentException {
    public ArgumentNonConformException(string fromTypeName, string toTypeName);
    protected ArgumentNonConformException(SerializationInfo info, StreamingContext context);
    private static string FormatArgument(string fromTypeName, string toTypeName);
}
public class Eco.ObjectRepresentation.ArgumentTypeException : ArgumentException {
    protected ArgumentTypeException(SerializationInfo info, StreamingContext context);
    public ArgumentTypeException(Type fromType, Type toType);
    public ArgumentTypeException(Type toType);
    public ArgumentTypeException(string fromType, string toType);
    private static string FormatArgument(string fromType, string toType);
    private static string FormatArgument(Type fromType, Type toType);
    private static string FormatArgument(Type toType);
}
[GuidAttribute("ED6167B9-3145-4EBA-8E62-F773B8A3EEA2")]
public enum Eco.ObjectRepresentation.ContentType : Enum {
    public int value__;
    public static ContentType Primitive;
    public static ContentType Collection;
    public static ContentType Tuple;
    public static ContentType Object;
    public static ContentType ObjectList;
}
[DataContractAttribute]
public class Eco.ObjectRepresentation.DynamicEnumString : ValueType {
    private string _value;
    private Type _enumType;
    private int _enumOrd;
    [DataMemberAttribute]
public string Value { get; public set; }
    [DataMemberAttribute]
public int EnumOrd { get; public set; }
    public int ToInt { get; }
    public DynamicEnumString(string value);
    public DynamicEnumString(Type enumType, object value);
    public string get_Value();
    public void set_Value(string value);
    public int get_EnumOrd();
    public void set_EnumOrd(int value);
    public virtual string ToString();
    public object GetAsEnumValue(Type enumType);
    public void SetAsEnumValue(Type enumType, object value);
    public int get_ToInt();
}
public class Eco.ObjectRepresentation.EcoObjectDeleteException : EcoException {
    public EcoObjectDeleteException(string message);
    public EcoObjectDeleteException(string message, Exception inner);
    protected EcoObjectDeleteException(SerializationInfo info, StreamingContext context);
}
public class Eco.ObjectRepresentation.ElementChangedEventArgs : EventArgs {
    private IElement element;
    public IElement Element { get; }
    public ElementChangedEventArgs(IElement element);
    public IElement get_Element();
}
public static class Eco.ObjectRepresentation.ElementEqualHash : object {
    private static EqualityComparerImpl c_EqualityComparer;
    public static IEqualityComparer`1<IElement> EqualityComparer { get; }
    public static IEqualityComparer`1<IElement> GenericEqualityComparer { get; }
    private static ElementEqualHash();
    public static IEqualityComparer`1<IElement> get_EqualityComparer();
    public static IEqualityComparer`1<IElement> get_GenericEqualityComparer();
}
public class Eco.ObjectRepresentation.ExternalIdRef : object {
    private string _xid;
    private IElement _element;
    public string IdAsString { get; }
    public ExternalIdRef(object elem);
    public IEcoObject AsObject(IEcoServiceProvider sp);
    public IElement AsIElement(IEcoServiceProvider sp);
    public string get_IdAsString();
}
public class Eco.ObjectRepresentation.ExternalIdRefList : List`1<ExternalIdRef> {
    public ExternalIdRefList(object firstDragCandidate);
    public IObjectList GetAsIObjectList(IEcoServiceProvider sp);
    public IElement GetFirstAsIElement(IEcoServiceProvider sp);
}
public interface Eco.ObjectRepresentation.IActionInstanceType {
}
public interface Eco.ObjectRepresentation.IConstraintInstance {
    public IObject Owner { get; }
    public string Name { get; }
    public string Description { get; }
    public ErrorLevel ErrorLevel { get; }
    public bool IsDeleteConstraint { get; }
    public bool IsAutoGenerated { get; }
    public string ModeledName { get; }
    public bool Broken { get; }
    public abstract virtual IObject get_Owner();
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual ErrorLevel get_ErrorLevel();
    public abstract virtual bool get_IsDeleteConstraint();
    public abstract virtual bool get_IsAutoGenerated();
    public abstract virtual string get_ModeledName();
    public abstract virtual bool get_Broken();
    public abstract virtual ITuple GetAsTuple();
    public abstract virtual IElement GetBrokenHolderElement();
}
public interface Eco.ObjectRepresentation.IConstraintInstanceType {
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("E252CD7B-A442-44a3-871B-212D20DAB2DC")]
public interface Eco.ObjectRepresentation.IEcoObject {
    public abstract virtual IObjectInstance AsIObject();
}
public interface Eco.ObjectRepresentation.IEcoServiceProvider {
    public abstract virtual object GetEcoService(Type serviceType);
    public abstract virtual T GetEcoService();
    public abstract virtual T GetEcoService(object key);
    public abstract virtual void RegisterEcoService(T service);
    public abstract virtual void RegisterEcoService(object key, T service);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("213CFEC8-2220-4FFF-A0A0-7ECDDFDBA348")]
public interface Eco.ObjectRepresentation.IElement {
    public ContentType ContentType { get; }
    public bool Mutable { get; }
    public bool ReadOnly { get; }
    public bool IsProperty { get; }
    public IClassifier UmlType { get; }
    public object AsObject { get; public set; }
    [ComVisibleAttribute("False")]
public IEcoServiceProvider ServiceProvider { get; }
    public abstract virtual IElement CloneValue(bool readOnly);
    public abstract virtual bool IsEqual(IElement element);
    public abstract virtual int GetIsEqualHashCode();
    public abstract virtual void Assign(IElement element);
    public abstract virtual void UnsubscribeFromValue(ISubscriber subscriber);
    public abstract virtual void SubscribeToValue(ISubscriber subscriber);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler value);
    public abstract virtual ContentType get_ContentType();
    public abstract virtual IElementCollection GetAsCollection();
    public abstract virtual bool get_Mutable();
    public abstract virtual bool get_ReadOnly();
    public abstract virtual bool get_IsProperty();
    public abstract virtual IClassifier get_UmlType();
    public abstract virtual object get_AsObject();
    public abstract virtual void set_AsObject(object value);
    public abstract virtual T GetValue();
    public abstract virtual void SetValue(T value);
    public abstract virtual IList`1<T> GetAsIList();
    public abstract virtual IEcoServiceProvider get_ServiceProvider();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("E4E39116-2A70-402E-864C-A30BDE903E2C")]
public interface Eco.ObjectRepresentation.IElementCollection {
    public bool SupportsAddNew { get; }
    public bool SupportsRemoveAt { get; }
    public bool SupportsMove { get; }
    public IElement Item { get; public set; }
    public ICollectionType UmlCollectionType { get; }
    public abstract virtual void Add(IElement value, bool sendValueChanged);
    public abstract virtual void Clear(bool sendValueChanged);
    public abstract virtual bool Contains(IElement value);
    public abstract virtual bool get_SupportsAddNew();
    public abstract virtual bool get_SupportsRemoveAt();
    public abstract virtual IElement AddNew();
    public abstract virtual int IndexOf(IElement value);
    public abstract virtual void Insert(int index, IElement value);
    public abstract virtual bool get_SupportsMove();
    public abstract virtual void Move(int fromPos, int toPos);
    public abstract virtual void Remove(IElement value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void EnsureRange(int fromIndex, int toIndex);
    public abstract virtual IElement get_Item(int index);
    public abstract virtual void set_Item(int index, IElement value);
    public abstract virtual ICollectionType get_UmlCollectionType();
}
public interface Eco.ObjectRepresentation.IElementProvider {
    public IElement Element { get; }
    public abstract virtual IElement get_Element();
}
[ComVisibleAttribute("True")]
[GuidAttribute("C010A476-422A-49F8-A5A3-6A8B31BD2082")]
public interface Eco.ObjectRepresentation.IExternalVariable {
    public IClassifier StaticUmlType { get; }
    public IElement Element { get; }
    public string Name { get; }
    public abstract virtual IClassifier get_StaticUmlType();
    public abstract virtual void Subscribe(ISubscriber subscriber);
    public abstract virtual IElement get_Element();
    public abstract virtual string get_Name();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[GuidAttribute("63F859AF-56F4-46DC-9151-E23D88AC561D")]
public interface Eco.ObjectRepresentation.IExternalVariableList {
    public int Count { get; }
    public IExternalVariable Item { get; }
    public IExternalVariable Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IExternalVariable get_Item(int index);
    public abstract virtual IExternalVariable get_Item(string name);
    public abstract virtual void Subscribe(ISubscriber subscriber);
    public abstract virtual IEnumerator GetEnumerator();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("31B28078-819A-4BC8-8E7A-EA30B0865F9B")]
public interface Eco.ObjectRepresentation.IFeatured {
    public IPropertyCollection Properties { get; }
    public abstract virtual IPropertyCollection get_Properties();
}
[ComVisibleAttribute("True")]
[GuidAttribute("4829986A-8730-481B-91EE-5810F23BAB02")]
public interface Eco.ObjectRepresentation.IModifiableVariableList {
    public abstract virtual void Add(string name, IElement element);
    public abstract virtual void Add(string name, IClassifier umlType);
    public abstract virtual void Add(string name, Type t);
    public abstract virtual void Add(IExternalVariable variable);
    public abstract virtual void AddConstant(string name, object value);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int i);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("B4904D19-8DBD-47C9-97A1-96D4528324E8")]
public interface Eco.ObjectRepresentation.INonDeletableReason {
    public IObjectInstance Obj { get; }
    public IAssociationEnd AssociationEnd { get; }
    public bool BusinessDeleteRuleReason { get; }
    public string BusinessDeleteRuleText { get; }
    public abstract virtual IObjectInstance get_Obj();
    public abstract virtual IAssociationEnd get_AssociationEnd();
    public abstract virtual bool get_BusinessDeleteRuleReason();
    public abstract virtual string get_BusinessDeleteRuleText();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("15387121-F239-47CB-9F49-B806A3403B58")]
public interface Eco.ObjectRepresentation.IObject {
    public bool Deleted { get; }
    public bool IsDeletable { get; }
    public INonDeletableReason NonDeletableReason { get; }
    public IObjectInstance ObjectInstance { get; }
    public string DefaultStringRepresentation { get; }
    public abstract virtual void EnsureFetched();
    public abstract virtual bool get_Deleted();
    public abstract virtual bool get_IsDeletable();
    public abstract virtual INonDeletableReason get_NonDeletableReason();
    public abstract virtual void Delete();
    public abstract virtual IObjectInstance get_ObjectInstance();
    public abstract virtual string get_DefaultStringRepresentation();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("F5092A0B-8FA6-4458-832E-3764E2C8B0B7")]
public interface Eco.ObjectRepresentation.IObjectContainer {
    public int Count { get; }
    public IClass UmlClass { get; }
    public abstract virtual void Clear();
    public abstract virtual int get_Count();
    public abstract virtual IClass get_UmlClass();
    public abstract virtual IObjectList GetAsList();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("D1BF8CB2-7800-4B04-B12D-225F12F36250")]
public interface Eco.ObjectRepresentation.IObjectInstance {
    public IObjectStateMachine StateMachine { get; }
    public bool IsNullInstance { get; }
    public IList`1<IConstraintInstance> ConstraintInstances { get; }
    public abstract virtual IObjectStateMachine get_StateMachine();
    public abstract virtual object Invoke(IMethod method, Object[] parameters);
    public abstract virtual object Invoke(string methodName, Object[] parameters);
    public abstract virtual object Invoke(IMethod method, IElement[] parameters, bool disregardOverride);
    public abstract virtual object InvokeQuery(IMethod method, IElement[] parameters, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber, bool disregardOverride);
    public abstract virtual bool get_IsNullInstance();
    public abstract virtual IList`1<IConstraintInstance> get_ConstraintInstances();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("CDF87CD2-BB49-44D4-A380-FAB01213F000")]
public interface Eco.ObjectRepresentation.IObjectList {
    public bool SupportsAddNew { get; }
    public bool SupportsRemoveAt { get; }
    public IObjectInstance Item { get; public set; }
    public bool RemoveDeletedObjects { get; public set; }
    public abstract virtual void Add(IEcoObject value);
    public abstract virtual bool Contains(IEcoObject value);
    public abstract virtual bool get_SupportsAddNew();
    public abstract virtual bool get_SupportsRemoveAt();
    public abstract virtual IElement AddNew();
    public abstract virtual int IndexOf(IEcoObject value);
    public abstract virtual void Insert(int index, IEcoObject value);
    public abstract virtual void Remove(IEcoObject value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void EnsureIdsOnly();
    public abstract virtual void EnsureObjects();
    public abstract virtual IObjectList EnsureRelatedObjects(string memberName);
    public abstract virtual IObjectInstance InternalGet(int index);
    public abstract virtual IObjectInstance get_Item(int index);
    public abstract virtual void set_Item(int index, IObjectInstance value);
    public abstract virtual bool get_RemoveDeletedObjects();
    public abstract virtual void set_RemoveDeletedObjects(bool value);
    public abstract virtual IEcoList`1<T> GetAsEcoList();
}
public interface Eco.ObjectRepresentation.IObjectListProvider {
    public IObjectList AsIObjectList { get; }
    public abstract virtual IObjectList get_AsIObjectList();
}
public class Eco.ObjectRepresentation.IObjectPair : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectInstance <Obj1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectInstance <Obj2>k__BackingField;
    public IObjectInstance Obj1 { get; private set; }
    public IObjectInstance Obj2 { get; private set; }
    public IObjectPair(IObjectInstance obj1, IObjectInstance obj2);
    [CompilerGeneratedAttribute]
public IObjectInstance get_Obj1();
    [CompilerGeneratedAttribute]
private void set_Obj1(IObjectInstance value);
    [CompilerGeneratedAttribute]
public IObjectInstance get_Obj2();
    [CompilerGeneratedAttribute]
private void set_Obj2(IObjectInstance value);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("01706422-BE69-4E9C-805B-51D91DFB9646")]
public interface Eco.ObjectRepresentation.IObjectProvider {
    public abstract virtual IObject AsIObject();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("A1CB2A38-D638-4A5C-963E-E496839F4488")]
public interface Eco.ObjectRepresentation.IObjectReference {
    public IObjectInstance ObjectInstance { get; public set; }
    public abstract virtual IObjectInstance get_ObjectInstance();
    public abstract virtual void set_ObjectInstance(IObjectInstance value);
}
public interface Eco.ObjectRepresentation.IObjectStateMachine {
    public IObjectInstance Owner { get; }
    public IStateMachine StateMachine { get; }
    public abstract virtual IObjectInstance get_Owner();
    public abstract virtual IStateMachine get_StateMachine();
    public abstract virtual object Trigger(ITrigger trigger, Object[] parameters);
    public abstract virtual IElement Trigger(ITrigger trigger, IElement[] parameters);
    public abstract virtual object Trigger(string triggerName, Object[] parameters);
    public abstract virtual IElement Trigger(string triggerName, IElement[] parameters);
    public abstract virtual bool CanTrigger(ITrigger trigger, Object[] parameters);
    public abstract virtual bool CanTrigger(ITrigger trigger, IElement[] parameters);
    public abstract virtual bool CanTrigger(ITrigger trigger, IElement[] parameters, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber);
    public abstract virtual bool CanTrigger(string triggerName, Object[] parameters);
    public abstract virtual bool CanTrigger(string triggerName, IElement[] parameters);
    public abstract virtual IStateCollection GetStates(StateFilter filter);
    public abstract virtual IStateCollection GetStates(IRegion region, StateFilter filter);
    public abstract virtual IStateCollection GetStates(string regionName, StateFilter filter);
    public abstract virtual ITriggerCollection GetTriggers();
    public abstract virtual ITriggerCollection GetTriggers(IRegion region);
    public abstract virtual ITriggerCollection GetTriggers(string regionName);
    public abstract virtual ITransitionCollection GetTransitions();
    public abstract virtual ITransitionCollection GetTransitions(IRegion region);
    public abstract virtual ITransitionCollection GetTransitions(string regionName);
    public abstract virtual bool IsInState(IState state);
    public abstract virtual bool IsInState(IStateName stateName);
    public abstract virtual bool IsInState(string stateName);
    public abstract virtual bool IsInRegion(IRegion region);
    public abstract virtual bool IsInRegion(string regionName);
    public abstract virtual IRegion RegionByName(string regionName);
    public abstract virtual IState StateByName(string stateName);
    public abstract virtual void SubscribeToState(ISubscriber subscriber);
    public abstract virtual bool IsTriggerCurrentlyAvailable(ITrigger trigger);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("F3EEF56D-DEAD-4FDE-87F0-5951FE90F68B")]
public interface Eco.ObjectRepresentation.IPrimitive {
    public IDataType UmlDataType { get; }
    public abstract virtual IDataType get_UmlDataType();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("EB33F3A1-B3C4-4DBE-A8B5-232422E3C216")]
public interface Eco.ObjectRepresentation.IProperty {
    public IStructuralFeature StructuralFeature { get; }
    public IFeatured Owner { get; }
    public abstract virtual IStructuralFeature get_StructuralFeature();
    public abstract virtual IFeatured get_Owner();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("28A0231B-BF20-4948-BCE3-00AC5744A75B")]
public interface Eco.ObjectRepresentation.IPropertyCollection {
    public int Count { get; }
    public IProperty Item { get; }
    public IProperty Item { get; }
    public IProperty Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IProperty get_Item(int index);
    public abstract virtual IProperty get_Item(IStructuralFeature feature);
    public abstract virtual IProperty get_Item(string name);
    public abstract virtual IProperty GetByLoopbackIndex(int loopbackIndex);
    public abstract virtual void SubscribeToPropertyChanged(ISubscriber subscriber);
    public abstract virtual IProperty TryGetName(string name);
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("E5B7E2B1-A8C4-4FA1-B40F-88E36C0FF517")]
public interface Eco.ObjectRepresentation.IQualifiedAccess {
    public abstract virtual IObjectInstance GetByQualifierAndSubscribe(IElement[] Qualifiers, SubscriberPair Subscribers);
}
public interface Eco.ObjectRepresentation.ISubscribableElementProvider {
    public abstract virtual void SubscribeToElement(ISubscriber subscriber);
}
public interface Eco.ObjectRepresentation.ITuple {
    public ITupleType UmlTupleType { get; }
    public abstract virtual ITupleType get_UmlTupleType();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("1D449EB1-2399-40F1-BEE7-34BF31450B48")]
public interface Eco.ObjectRepresentation.IVariable {
    public IClassifier StaticUmlType { get; }
    public abstract virtual IClassifier get_StaticUmlType();
}
public static class Eco.ObjectRepresentation.NotifyCollectionChangedArgumentCooker : object {
    public static NotifyCollectionChangedEventArgs Get(object o, NotifyCollectionChangedAction action, int newpos, int oldpos);
}
public class Eco.ObjectRepresentation.NoTransitionException : EcoException {
    public NoTransitionException(string message);
    public NoTransitionException(string message, Exception inner);
    protected NoTransitionException(SerializationInfo info, StreamingContext context);
}
public static class Eco.ObjectRepresentation.OtherEndExtenderHelper : object {
    public static int GetMemberIndexOfOtherEnd(IEcoObject obj, Type t, int loopbackIndex);
    public static IEcoList`1<T> GetMultiLink(IEcoObject obj, int memberIndex);
    public static T GetSingleLink(IEcoObject obj, int memberIndex);
    public static void SetSingleLink(IEcoObject obj, int memberIndex, T newValue);
}
[FlagsAttribute]
public enum Eco.ObjectRepresentation.StateFilter : Enum {
    public int value__;
    public static StateFilter Simple;
    public static StateFilter SingleComposite;
    public static StateFilter Orthogonal;
    public static StateFilter Recursive;
    public static StateFilter AllTopLevel;
    public static StateFilter All;
}
[DataContractAttribute]
public class Eco.Ocl.Impl.MDrivenCacheCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DoCacheUnCached>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DoInvalidationRun>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DoReturnListToUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxAnswers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelMetaChecksum>k__BackingField;
    [DataMemberAttribute]
public string ClassName { get; public set; }
    [DataMemberAttribute]
public string ViewModelName { get; public set; }
    [DataMemberAttribute]
public bool DoCacheUnCached { get; public set; }
    [DataMemberAttribute]
public bool DoInvalidationRun { get; public set; }
    [DataMemberAttribute]
public bool DoReturnListToUpdate { get; public set; }
    [DataMemberAttribute]
public int MaxAnswers { get; public set; }
    [DataMemberAttribute]
public string DbId { get; public set; }
    [DataMemberAttribute]
public string ViewModelMetaChecksum { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelName();
    [CompilerGeneratedAttribute]
public void set_ViewModelName(string value);
    [CompilerGeneratedAttribute]
public bool get_DoCacheUnCached();
    [CompilerGeneratedAttribute]
public void set_DoCacheUnCached(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoInvalidationRun();
    [CompilerGeneratedAttribute]
public void set_DoInvalidationRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoReturnListToUpdate();
    [CompilerGeneratedAttribute]
public void set_DoReturnListToUpdate(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxAnswers();
    [CompilerGeneratedAttribute]
public void set_MaxAnswers(int value);
    [CompilerGeneratedAttribute]
public string get_DbId();
    [CompilerGeneratedAttribute]
public void set_DbId(string value);
    [CompilerGeneratedAttribute]
public void set_ViewModelMetaChecksum(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelMetaChecksum();
}
public static class Eco.Ocl.Impl.Messages : object {
    public static string sNotAllowedForSQLEvaluation;
}
[DataContractAttribute]
public class Eco.Ocl.Impl.MetaConditionReturnPlatformQuery : TBoldOclCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    public string Result { get; public set; }
    public MetaConditionReturnPlatformQuery(int ClassId, string Expression);
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.ObjectsAndMembersForClass : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Int32[] <MembersIds>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ObjectIdList <ObjectsForClass>k__BackingField;
    [DataMemberAttribute]
public int ClassId { get; public set; }
    [DataMemberAttribute]
public Int32[] MembersIds { get; public set; }
    [DataMemberAttribute]
public ObjectIdList ObjectsForClass { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ClassId();
    [CompilerGeneratedAttribute]
public void set_ClassId(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_MembersIds();
    [CompilerGeneratedAttribute]
public void set_MembersIds(Int32[] value);
    [CompilerGeneratedAttribute]
public ObjectIdList get_ObjectsForClass();
    [CompilerGeneratedAttribute]
public void set_ObjectsForClass(ObjectIdList value);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.RunServerSideViewModelNowCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NameOfServerSideViewModel>k__BackingField;
    [DataMemberAttribute]
public string NameOfServerSideViewModel { get; private set; }
    public RunServerSideViewModelNowCondition(string nameOfServerSideViewModel);
    [CompilerGeneratedAttribute]
public string get_NameOfServerSideViewModel();
    [CompilerGeneratedAttribute]
private void set_NameOfServerSideViewModel(string value);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOclCondition : OclCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldOLWNode <RootNode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<TBoldOLWNode> <Env>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PsMode <PSMode>k__BackingField;
    [DataMemberAttribute]
public TBoldOLWNode RootNode { get; public set; }
    [DataMemberAttribute]
public List`1<TBoldOLWNode> Env { get; public set; }
    [DataMemberAttribute]
public PsMode PSMode { get; public set; }
    public int ExternalVariableCount { get; }
    public TBoldOclCondition(int ClassId, string Expression);
    [CompilerGeneratedAttribute]
public TBoldOLWNode get_RootNode();
    [CompilerGeneratedAttribute]
public void set_RootNode(TBoldOLWNode value);
    [CompilerGeneratedAttribute]
public List`1<TBoldOLWNode> get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(List`1<TBoldOLWNode> value);
    private ObjectId AddToContext_GetIdForObject(ICache cache, IObjectRepresentationProvider objRepProv, IObjectInstance obj);
    [CompilerGeneratedAttribute]
public void set_PSMode(PsMode value);
    [CompilerGeneratedAttribute]
public PsMode get_PSMode();
    public void AddToContext(IElement Element, ICache cache, IObjectRepresentationProvider objRepProv);
    public virtual int get_ExternalVariableCount();
    public virtual IExternalVariable GetExternalVariable(int index);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWDateLiteral : TBoldOLWMomentLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <DateValue>k__BackingField;
    [DataMemberAttribute]
public DateTime DateValue { get; public set; }
    public TBoldOLWDateLiteral(int Position, DateTime DateTimeValue);
    [CompilerGeneratedAttribute]
public DateTime get_DateValue();
    [CompilerGeneratedAttribute]
public void set_DateValue(DateTime value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWEnumLiteral : TBoldOLWLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Intvalue>k__BackingField;
    [DataMemberAttribute]
public int Intvalue { get; public set; }
    public TBoldOLWEnumLiteral(int Position);
    [CompilerGeneratedAttribute]
public int get_Intvalue();
    [CompilerGeneratedAttribute]
public void set_Intvalue(int value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWFloatLiteral : TBoldOLWLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <FloatValue>k__BackingField;
    [DataMemberAttribute]
public double FloatValue { get; public set; }
    public TBoldOLWFloatLiteral(int Position, double FloatValue);
    [CompilerGeneratedAttribute]
public double get_FloatValue();
    [CompilerGeneratedAttribute]
public void set_FloatValue(double value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWIntLiteral : TBoldOLWLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <IntValue>k__BackingField;
    [DataMemberAttribute]
public int IntValue { get; public set; }
    public TBoldOLWIntLiteral(int Position, int IntValue);
    [CompilerGeneratedAttribute]
public int get_IntValue();
    [CompilerGeneratedAttribute]
public void set_IntValue(int value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWIteration : TBoldOLWOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldOLWVariableBinding <LoopVar>k__BackingField;
    [DataMemberAttribute]
public TBoldOLWVariableBinding LoopVar { get; public set; }
    public TBoldOLWIteration(int Position, string OperationName, TBoldOLWVariableBinding LoopVar);
    [CompilerGeneratedAttribute]
public TBoldOLWVariableBinding get_LoopVar();
    [CompilerGeneratedAttribute]
public void set_LoopVar(TBoldOLWVariableBinding value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWListCoercion : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldOLWNode <Child>k__BackingField;
    [DataMemberAttribute]
public TBoldOLWNode Child { get; public set; }
    public TBoldOLWListCoercion(int Position, TBoldOLWNode Child);
    [CompilerGeneratedAttribute]
public TBoldOLWNode get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(TBoldOLWNode value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWLiteral : TBoldOLWNode {
    public TBoldOLWLiteral(int Position);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWMember : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldOLWNode <MemberOf>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MemberIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<TBoldOLWNode> <Qualifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBoolean>k__BackingField;
    [DataMemberAttribute]
public TBoldOLWNode MemberOf { get; public set; }
    [DataMemberAttribute]
public string MemberName { get; public set; }
    [DataMemberAttribute]
public int MemberIndex { get; public set; }
    [DataMemberAttribute]
public List`1<TBoldOLWNode> Qualifier { get; public set; }
    [DataMemberAttribute]
public bool IsBoolean { get; public set; }
    public TBoldOLWMember(int Position, string memberName, IStructuralFeature UMLRtInfo, TBoldOLWNode MemberOf, bool IsBoolean);
    [CompilerGeneratedAttribute]
public TBoldOLWNode get_MemberOf();
    [CompilerGeneratedAttribute]
public void set_MemberOf(TBoldOLWNode value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public int get_MemberIndex();
    [CompilerGeneratedAttribute]
public void set_MemberIndex(int value);
    [CompilerGeneratedAttribute]
public List`1<TBoldOLWNode> get_Qualifier();
    [CompilerGeneratedAttribute]
public void set_Qualifier(List`1<TBoldOLWNode> value);
    [CompilerGeneratedAttribute]
public bool get_IsBoolean();
    [CompilerGeneratedAttribute]
public void set_IsBoolean(bool value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWMomentLiteral : TBoldOLWLiteral {
    public TBoldOLWMomentLiteral(int Position);
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWListCoercion")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWOperation")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWIteration")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWMember")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWTypeNode")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWVariableBinding")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWVariableReference")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWStrLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWFloatLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWIntLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWTimeLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWDateLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWEnumLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWMomentLiteral")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOLWNode")]
public class Eco.Ocl.Impl.TBoldOLWNode : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Position>k__BackingField;
    [DataMemberAttribute]
public int Position { get; public set; }
    public TBoldOLWNode(int Position);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
public class Eco.Ocl.Impl.TBoldOLWNodeVisitor : object {
    public virtual void VisitTBoldOLWEnumLiteral(TBoldOLWEnumLiteral N);
    public virtual void VisitTBoldOLWIntLiteral(TBoldOLWIntLiteral N);
    public virtual void VisitTBoldOLWIteration(TBoldOLWIteration N);
    public virtual void VisitTBoldOLWListCoercion(TBoldOLWListCoercion N);
    public virtual void VisitTBoldOLWLiteral(TBoldOLWLiteral N);
    public virtual void VisitTBoldOLWMember(TBoldOLWMember N);
    public virtual void VisitTBoldOLWNode(TBoldOLWNode N);
    public virtual void VisitTBoldOLWFloatLiteral(TBoldOLWFloatLiteral N);
    public virtual void VisitTBoldOLWOperation(TBoldOLWOperation N);
    public virtual void VisitTBoldOLWStrLiteral(TBoldOLWStrLiteral N);
    public virtual void VisitTBoldOLWTypeNode(TBoldOLWTypeNode N);
    public virtual void VisitTBoldOLWVariableBinding(TBoldOLWVariableBinding N);
    public virtual void VisitTBoldOLWVariableReference(TBoldOLWVariableReference N);
    public virtual void VisitTBoldOLWDateLiteral(TBoldOLWDateLiteral N);
    public virtual void VisitTBoldOLWTimeLiteral(TBoldOLWTimeLiteral N);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWOperation : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<TBoldOLWNode> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OperationName>k__BackingField;
    [DataMemberAttribute]
public List`1<TBoldOLWNode> Args { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    public TBoldOLWOperation(int Position, string OperationName);
    [CompilerGeneratedAttribute]
public List`1<TBoldOLWNode> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<TBoldOLWNode> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWStrLiteral : TBoldOLWLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StrValue>k__BackingField;
    [DataMemberAttribute]
public string StrValue { get; public set; }
    public TBoldOLWStrLiteral(int Position, string StrValue);
    [CompilerGeneratedAttribute]
public string get_StrValue();
    [CompilerGeneratedAttribute]
public void set_StrValue(string value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWTimeLiteral : TBoldOLWMomentLiteral {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <TimeValue>k__BackingField;
    [DataMemberAttribute]
public TimeSpan TimeValue { get; public set; }
    public TBoldOLWTimeLiteral(int Position, TimeSpan TimeSpanValue);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeValue();
    [CompilerGeneratedAttribute]
public void set_TimeValue(TimeSpan value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWTypeNode : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TopSortedIndex>k__BackingField;
    [DataMemberAttribute]
public string TypeName { get; public set; }
    [DataMemberAttribute]
public int TopSortedIndex { get; public set; }
    public TBoldOLWTypeNode(int Position, string TypeName, int TopSortedIndex);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public int get_TopSortedIndex();
    [CompilerGeneratedAttribute]
public void set_TopSortedIndex(int value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.DataRepresentation.ObjectIdList")]
public class Eco.Ocl.Impl.TBoldOLWVariableBinding : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ExternalVarvalue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLoopVar>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassifierName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public object ExternalVarvalue { get; public set; }
    [DataMemberAttribute]
public bool IsLoopVar { get; public set; }
    [DataMemberAttribute]
public string ClassifierName { get; public set; }
    [DataMemberAttribute]
public int ClassId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    private object Eco.Persistence.OclCondition.IExternalVariable.Value { get; }
    public TBoldOLWVariableBinding(int Position, string name, int classId);
    [CompilerGeneratedAttribute]
public object get_ExternalVarvalue();
    [CompilerGeneratedAttribute]
public void set_ExternalVarvalue(object value);
    [CompilerGeneratedAttribute]
public bool get_IsLoopVar();
    [CompilerGeneratedAttribute]
public void set_IsLoopVar(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClassifierName();
    [CompilerGeneratedAttribute]
public void set_ClassifierName(string value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ClassId();
    [CompilerGeneratedAttribute]
public void set_ClassId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    private sealed virtual override object Eco.Persistence.OclCondition.IExternalVariable.get_Value();
}
[DataContractAttribute]
public class Eco.Ocl.Impl.TBoldOLWVariableReference : TBoldOLWNode {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldOLWVariableBinding <VariableBinding>k__BackingField;
    [DataMemberAttribute]
public TBoldOLWVariableBinding VariableBinding { get; public set; }
    public TBoldOLWVariableReference(int Position, TBoldOLWVariableBinding VariableBinding);
    [CompilerGeneratedAttribute]
public TBoldOLWVariableBinding get_VariableBinding();
    [CompilerGeneratedAttribute]
public void set_VariableBinding(TBoldOLWVariableBinding value);
    public virtual void AcceptVisitor(TBoldOLWNodeVisitor V);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.ViewModelCondition : OclCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<TBoldOLWVariableBinding> <Env>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StreamFetchIdGuid>k__BackingField;
    [DataMemberAttribute]
public List`1<TBoldOLWVariableBinding> Env { get; public set; }
    [DataMemberAttribute]
public string ViewModel { get; private set; }
    [DataMemberAttribute]
public string StreamFetchIdGuid { get; private set; }
    public int ExternalVariableCount { get; }
    public ViewModelCondition(IExternalVariableList variables, string viewModel, string streamFetchIdGuid);
    [CompilerGeneratedAttribute]
public List`1<TBoldOLWVariableBinding> get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(List`1<TBoldOLWVariableBinding> value);
    [CompilerGeneratedAttribute]
public string get_ViewModel();
    [CompilerGeneratedAttribute]
private void set_ViewModel(string value);
    [CompilerGeneratedAttribute]
public string get_StreamFetchIdGuid();
    [CompilerGeneratedAttribute]
private void set_StreamFetchIdGuid(string value);
    public virtual int get_ExternalVariableCount();
    public virtual IExternalVariable GetExternalVariable(int index);
    public void AddVariable(string name, IElement value, int classifierid);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.ViewModelQueryplanFetchCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<ObjectsAndMembersForClass> <ObjectsAndMembersForClasses>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FetchStrategy <FetchStrategy>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<ObjectsAndMembersForClass> ObjectsAndMembersForClasses { get; private set; }
    [DataMemberAttribute]
public FetchStrategy FetchStrategy { get; private set; }
    public ViewModelQueryplanFetchCondition(FetchStrategy fetchStrategy, Int32[] classIds, Int32[][] membersidsforclasses, ObjectIdList[] objectsidsPerClass);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ObjectsAndMembersForClass> get_ObjectsAndMembersForClasses();
    [CompilerGeneratedAttribute]
private void set_ObjectsAndMembersForClasses(IEnumerable`1<ObjectsAndMembersForClass> value);
    [CompilerGeneratedAttribute]
private void set_FetchStrategy(FetchStrategy value);
    [CompilerGeneratedAttribute]
public FetchStrategy get_FetchStrategy();
}
[DataContractAttribute]
public class Eco.Ocl.Impl.ViewModelQueryplanFetchConditionMulti : AbstractCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<ViewModelQueryplanFetchCondition> <ViewModelQueryplanFetchConditions>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<ViewModelQueryplanFetchCondition> ViewModelQueryplanFetchConditions { get; private set; }
    public ViewModelQueryplanFetchConditionMulti(ViewModelQueryplanFetchCondition[] conditions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ViewModelQueryplanFetchCondition> get_ViewModelQueryplanFetchConditions();
    [CompilerGeneratedAttribute]
private void set_ViewModelQueryplanFetchConditions(IEnumerable`1<ViewModelQueryplanFetchCondition> value);
}
[DataContractAttribute]
public class Eco.Ocl.Impl.ViewModelStreamFetchCondition : OclCondition {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StreamFetchIdGuid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ObjectIdList <FetchObjectsForIds>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CursorLastSeen>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FetchStrategy <FetchStrategy>k__BackingField;
    [DataMemberAttribute]
public string StreamFetchIdGuid { get; private set; }
    [DataMemberAttribute]
public ObjectIdList FetchObjectsForIds { get; private set; }
    [DataMemberAttribute]
public int CursorLastSeen { get; public set; }
    public int ExternalVariableCount { get; }
    public FetchStrategy FetchStrategy { get; private set; }
    public ViewModelStreamFetchCondition(string streamFetchIdGuid, FetchStrategy fetchStrategy);
    [CompilerGeneratedAttribute]
public string get_StreamFetchIdGuid();
    [CompilerGeneratedAttribute]
private void set_StreamFetchIdGuid(string value);
    [CompilerGeneratedAttribute]
public ObjectIdList get_FetchObjectsForIds();
    [CompilerGeneratedAttribute]
private void set_FetchObjectsForIds(ObjectIdList value);
    [CompilerGeneratedAttribute]
public int get_CursorLastSeen();
    [CompilerGeneratedAttribute]
public void set_CursorLastSeen(int value);
    public virtual int get_ExternalVariableCount();
    public virtual IExternalVariable GetExternalVariable(int index);
    [CompilerGeneratedAttribute]
private void set_FetchStrategy(FetchStrategy value);
    [CompilerGeneratedAttribute]
public FetchStrategy get_FetchStrategy();
}
public abstract class Eco.Ocl.Support.AbstractOclInstanceMethod : OclTypeMethod {
    private bool m_IsInfix;
    private bool m_IsProperty;
    private MethodInfo m_MethodInfo;
    public bool IsProperty { get; }
    public MethodInfo MethodInfo { get; }
    public AbstractOclInstanceMethod(string name, MethodInfo mi, IClassifier[] ecoParameters, IClassifier returnType, bool isProperty, bool isInfix);
    public bool get_IsProperty();
    public MethodInfo get_MethodInfo();
    protected virtual Type GetClrParameterType(int index);
    protected virtual void Init();
}
[AttributeUsageAttribute("4")]
public class Eco.Ocl.Support.EcoOclOperationAttribute : Attribute {
    private Type m_Operation;
    private bool m_IsQuery;
    public Type Operation { get; }
    public bool IsQuery { get; }
    public EcoOclOperationAttribute(Type operation, bool isQuery);
    public Type get_Operation();
    public bool get_IsQuery();
    public static void InstallCustomOperations(Type ecoSpaceType, ITypeService oclService, ITypeService ealService, IEcoTypeSystem typeSystem, bool validate);
}
[AttributeUsageAttribute("4")]
public class Eco.Ocl.Support.EcoOclOperationHelpAttribute : Attribute {
    private string m_HelpString;
    public string HelpString { get; }
    public EcoOclOperationHelpAttribute(string helpString);
    public string get_HelpString();
}
[AttributeUsageAttribute("68")]
public class Eco.Ocl.Support.EcoOclOperationResourcedHelpAttribute : Attribute {
    private string m_HelpResource;
    public string HelpResource { get; }
    public EcoOclOperationResourcedHelpAttribute(string helpResource);
    public string HelpString(object requestor);
    public string get_HelpResource();
}
public enum Eco.Ocl.Support.ErrorLevel : Enum {
    public int value__;
    public static ErrorLevel Error;
    public static ErrorLevel Warning;
    public static ErrorLevel Information;
}
public interface Eco.Ocl.Support.IOclNamedEnumLiteral {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Eco.Ocl.Support.IOclOperation {
    public IOclType[] FormalParameters { get; }
    public int RepeatParameters { get; }
    public IOclType ResultType { get; }
    public OclResultTypeDeduceMethod DeduceMethod { get; }
    public string Name { get; }
    public bool IsDotNotation { get; }
    public bool IsPostFix { get; }
    public bool ModifiesSource { get; }
    public bool ArgsNeedCommonType { get; }
    public bool IsTypeOperation { get; }
    public bool IsBothTypeAndInstance { get; }
    public bool UseIncaseOfAmbiguity { get; }
    public abstract virtual IOclType[] get_FormalParameters();
    public abstract virtual int get_RepeatParameters();
    public abstract virtual IOclType get_ResultType();
    public abstract virtual OclResultTypeDeduceMethod get_DeduceMethod();
    public abstract virtual IOclType CalculateReturnType(IOclOperationParameters oclParameters);
    public abstract virtual IOclType CalculateReturnTypeExtended(IOclOperationParameters oclParameters, object untypeOCLEnvironment);
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsDotNotation();
    public abstract virtual bool get_IsPostFix();
    public abstract virtual bool get_ModifiesSource();
    public abstract virtual bool ResultIsReadOnly(Boolean[] args);
    public abstract virtual bool get_ArgsNeedCommonType();
    public abstract virtual bool get_IsTypeOperation();
    public abstract virtual bool get_IsBothTypeAndInstance();
    public abstract virtual void SemanticCheck(IOclOperationParameters oclParameters);
    public abstract virtual void Evaluate(IOclOperationParameters oclParameters);
    public abstract virtual void Initialize(IOclOperationSupport support);
    public abstract virtual bool get_UseIncaseOfAmbiguity();
}
public interface Eco.Ocl.Support.IOclOperationParameters {
    public IOclValue[] Values { get; }
    public IOclValue Result { get; }
    public SubscriberPair SubscriberBlock { get; }
    public int ParamCount { get; }
    public int Pos { get; }
    public abstract virtual IOclValue[] get_Values();
    public abstract virtual IOclValue get_Result();
    public abstract virtual SubscriberPair get_SubscriberBlock();
    public abstract virtual int get_ParamCount();
    public abstract virtual int get_Pos();
}
public interface Eco.Ocl.Support.IOclOperationSupport {
    public IEcoTypeSystem Model { get; }
    public IOclType BooleanType { get; }
    public IOclType BooleanTypeWhenMissingType { get; }
    public IOclType ByteType { get; }
    public IOclType BlobType { get; }
    public IOclType SByteType { get; }
    public IOclType Int64Type { get; }
    public IOclType Int16Type { get; }
    public IOclType UInt16Type { get; }
    public IOclType IntegerType { get; }
    public IOclType RealType { get; }
    public IOclType DecimalType { get; }
    public IOclType TimeSpanType { get; }
    public IOclType DateTimeType { get; }
    public IOclType StringType { get; }
    public IOclType ListType { get; }
    public IOclType ObjectType { get; }
    public IOclType TypeType { get; }
    public IOclType AnyType { get; }
    public IOclType OclSortDirection { get; }
    public IOclType ConstraintErrorLevel { get; }
    public IOclType EnumLiteralType { get; }
    public IOclType NumericListType { get; }
    public IOclType IntegerListType { get; }
    public IOclType DecimalListType { get; }
    public IOclType Int64ListType { get; }
    public IOclType TimeSpanListType { get; }
    public IOclType DateTimeListType { get; }
    public IOclType StringListType { get; }
    public IOclType ObjectListType { get; }
    public IOclType GuidType { get; }
    public IOclType ViewModelReferenceType { get; }
    public IVariableFactoryService VariableFactory { get; }
    public IExternalIdService ExternalIdService { get; }
    public IOclService OclService { get; }
    public IExtentService ExtentService { get; }
    public IVersionService VersionService { get; }
    public IObjectFactoryService ObjectFactory { get; }
    public IUndoService UndoService { get; }
    public IPersistenceService PersistenceService { get; }
    public IAutoSubscriptionService AutoSubscriptionService { get; }
    public IEcoServiceProvider ServiceProvider { get; }
    public abstract virtual IEcoTypeSystem get_Model();
    public abstract virtual IOclType get_BooleanType();
    public abstract virtual IOclType get_BooleanTypeWhenMissingType();
    public abstract virtual IOclType get_ByteType();
    public abstract virtual IOclType get_BlobType();
    public abstract virtual IOclType get_SByteType();
    public abstract virtual IOclType get_Int64Type();
    public abstract virtual IOclType get_Int16Type();
    public abstract virtual IOclType get_UInt16Type();
    public abstract virtual IOclType get_IntegerType();
    public abstract virtual IOclType get_RealType();
    public abstract virtual IOclType get_DecimalType();
    public abstract virtual IOclType get_TimeSpanType();
    public abstract virtual IOclType get_DateTimeType();
    public abstract virtual IOclType get_StringType();
    public abstract virtual IOclType get_ListType();
    public abstract virtual IOclType get_ObjectType();
    public abstract virtual IOclType get_TypeType();
    public abstract virtual IOclType get_AnyType();
    public abstract virtual IOclType get_OclSortDirection();
    public abstract virtual IOclType get_ConstraintErrorLevel();
    public abstract virtual IOclType get_EnumLiteralType();
    public abstract virtual IOclType get_NumericListType();
    public abstract virtual IOclType get_IntegerListType();
    public abstract virtual IOclType get_DecimalListType();
    public abstract virtual IOclType get_Int64ListType();
    public abstract virtual IOclType get_TimeSpanListType();
    public abstract virtual IOclType get_DateTimeListType();
    public abstract virtual IOclType get_StringListType();
    public abstract virtual IOclType get_ObjectListType();
    public abstract virtual IOclType get_GuidType();
    public abstract virtual IOclType get_ViewModelReferenceType();
    public abstract virtual IVariableFactoryService get_VariableFactory();
    public abstract virtual IExternalIdService get_ExternalIdService();
    public abstract virtual IOclService get_OclService();
    public abstract virtual IExtentService get_ExtentService();
    public abstract virtual IVersionService get_VersionService();
    public abstract virtual IObjectFactoryService get_ObjectFactory();
    public abstract virtual IUndoService get_UndoService();
    public abstract virtual IPersistenceService get_PersistenceService();
    public abstract virtual IAutoSubscriptionService get_AutoSubscriptionService();
    public abstract virtual IEcoServiceProvider get_ServiceProvider();
    public abstract virtual IElement CreateNewConstant(IOclType type, object initialValue);
    public abstract virtual IElement CreateNewVariable(IOclType type);
    public abstract virtual IElement CreateNewVariableDontSubscribeToDeleteIfList(IOclType type);
    public abstract virtual IElement CreateNewSimpleVariable(ISimpleType type);
    public abstract virtual IOclType GetConstraintsReturnType();
    public abstract virtual void MakeNewNumeric(IOclValue node, double value);
    public abstract virtual void MakeNewDecimal(IOclValue node, decimal value);
    public abstract virtual void MakeNewTimeSpan(IOclValue node, TimeSpan value);
    public abstract virtual void MakeNewDateTime(IOclValue node, DateTime value);
    public abstract virtual void MakeNewBoolean(IOclValue node, bool value);
    public abstract virtual void MakeNewInteger(IOclValue node, int value);
    public abstract virtual void MakeNewInt64(IOclValue node, long value);
    public abstract virtual void MakeNewString(IOclValue node, string value);
    public abstract virtual void MakeNewBlob(IOclValue node, Byte[] value);
    public abstract virtual bool GetAsBoolean(IOclValue node);
    public abstract virtual int GetAsInteger(IOclValue node);
    public abstract virtual int GetAsInteger(IElement element);
    public abstract virtual long GetAsInt64(IOclValue Node);
    public abstract virtual long GetAsInt64(IElement element);
    public abstract virtual DateTime GetAsDateTime(IOclValue node);
    public abstract virtual TimeSpan GetAsTimeSpan(IOclValue node);
    public abstract virtual TimeSpan GetAsTimeSpan(IElement element);
    public abstract virtual double GetAsNumeric(IOclValue node);
    public abstract virtual double GetAsNumeric(IElement element);
    public abstract virtual decimal GetAsDecimal(IOclValue node);
    public abstract virtual decimal GetAsDecimal(IElement element);
    public abstract virtual string GetAsString(IOclValue node);
    public abstract virtual IElementCollection GetAsList(IOclValue node);
    public abstract virtual IClassifier GetAsType(IOclValue bode);
    public abstract virtual void TransferOrClone(IOclValue source, IOclValue dest);
    public abstract virtual object ConvertElement(IOclType toType, IElement Element);
    public abstract virtual IOclType GetOclTypeFor(IClassifier classifier);
    public abstract virtual IOclType GetListActionsReturnType();
}
public interface Eco.Ocl.Support.IOclType {
    public IOclType CollectionType { get; }
    public IOclType ElementType { get; }
    public IClassifier UMLType { get; }
    public abstract virtual string Name();
    public abstract virtual bool IsListType();
    public abstract virtual bool IsObjectListType();
    public abstract virtual bool IsObjectType();
    public abstract virtual bool IsFeaturedType();
    public abstract virtual bool IsPrimitiveType();
    public abstract virtual bool IsEnumType();
    public abstract virtual bool IsSimpleType();
    public abstract virtual bool IsSameType(IOclType oclType);
    public abstract virtual bool ConformsTo(IOclType oclType);
    public abstract virtual bool HasUmlType();
    public abstract virtual IOclType BagType();
    public abstract virtual IOclType SetType();
    public abstract virtual IOclType SequenceType();
    public abstract virtual IOclType OrderedSetType();
    public abstract virtual IOclType get_CollectionType();
    public abstract virtual IOclType get_ElementType();
    public abstract virtual IOclType LeastCommonType(IOclType oclType);
    public abstract virtual IClassifier get_UMLType();
}
public interface Eco.Ocl.Support.IOclTypeFactory {
    public IOclType TypeType { get; }
    public abstract virtual IOclType TypeForClassifier(IClassifier classifier);
    public abstract virtual IOclType get_TypeType();
}
public interface Eco.Ocl.Support.IOclValue {
    public IElement Element { get; }
    public IOclType OclType { get; }
    public bool IsTypeNode { get; }
    public bool OwnsValue { get; }
    public int Pos { get; }
    public IClassifier ClassifierValue { get; }
    public string ModelName { get; }
    public abstract virtual IElement get_Element();
    public abstract virtual IOclType get_OclType();
    public abstract virtual void SetOwnedElement(IElement value);
    public abstract virtual void SetReferenceElement(IElement value);
    public abstract virtual void SetReferenceClassifier(IClassifier value);
    public abstract virtual void SetDefaultValue(IOclOperationSupport support);
    public abstract virtual bool get_IsTypeNode();
    public abstract virtual bool get_OwnsValue();
    public abstract virtual int get_Pos();
    public abstract virtual IClassifier get_ClassifierValue();
    public abstract virtual void TransferValue(IOclValue node);
    public abstract virtual string get_ModelName();
}
internal class Eco.Ocl.Support.OclConstructorMethod : OclTypeMethod {
    private ConstructorInfo m_ConstructorInfo;
    public ConstructorInfo ConstructorInfo { get; }
    public OclConstructorMethod(ConstructorInfo constructor, IClassifier[] ecoParameters);
    public ConstructorInfo get_ConstructorInfo();
    protected virtual object Invoke(object root, Object[] parameters);
    protected virtual void Init();
    protected virtual Type GetClrParameterType(int index);
}
public class Eco.Ocl.Support.OclInstanceField : OclTypeMethod {
    private FieldInfo m_FieldInfo;
    public FieldInfo FieldInfo { get; }
    public OclInstanceField(string name, FieldInfo fi, IClassifier returnType, IClassifier[] ecoParameters);
    public FieldInfo get_FieldInfo();
    protected virtual Type GetClrParameterType(int index);
    protected virtual void Init();
    protected virtual object Invoke(object root, Object[] parameters);
}
public class Eco.Ocl.Support.OclInstanceMethod : AbstractOclInstanceMethod {
    public OclInstanceMethod(string name, MethodInfo mi, IClassifier[] ecoParameters, IClassifier returnType, bool isProperty, bool isInfix);
    protected virtual object Invoke(object root, Object[] parameters);
    protected virtual void Init();
}
public abstract class Eco.Ocl.Support.OclOperationBase : object {
    private IOclOperationSupport m_Support;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UseIncaseOfAmbiguity>k__BackingField;
    private OclResultTypeDeduceMethod m_DeduceMethod;
    private IOclType[] m_FormalParameters;
    private bool m_IsDotNotation;
    private bool m_IsPostFix;
    private IOclType m_ResultType;
    private bool m_ModifiesSource;
    private string m_Name;
    private bool m_ArgsNeedCommonType;
    private bool m_IsTypeOperation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBothTypeAndInstance>k__BackingField;
    private int m_RepeatParameters;
    public IOclOperationSupport Support { get; }
    public bool UseIncaseOfAmbiguity { get; public set; }
    public OclResultTypeDeduceMethod DeduceMethod { get; }
    public IOclType[] FormalParameters { get; }
    public bool IsDotNotation { get; }
    public bool IsPostFix { get; public set; }
    public bool IsInfix { get; protected set; }
    public IOclType ResultType { get; }
    public bool ModifiesSource { get; public set; }
    public string Name { get; }
    public bool ArgsNeedCommonType { get; public set; }
    public bool IsTypeOperation { get; public set; }
    public bool IsBothTypeAndInstance { get; public set; }
    public int RepeatParameters { get; public set; }
    public void InternalInit(string name, IOclType[] args, OclResultTypeDeduceMethod deduceMethod, IOclType resultType);
    protected void InternalInit(string name, IOclType[] args, OclResultTypeDeduceMethod deduceMethod);
    protected void InternalInit(string name, IOclType[] args, IOclType resultType);
    protected abstract virtual void Init();
    public sealed virtual void Initialize(IOclOperationSupport support);
    public virtual void SemanticCheck(IOclOperationParameters oclParameters);
    public abstract virtual void Evaluate(IOclOperationParameters oclParameters);
    public virtual bool ResultIsReadOnly(Boolean[] args);
    public IOclOperationSupport get_Support();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseIncaseOfAmbiguity();
    [CompilerGeneratedAttribute]
public void set_UseIncaseOfAmbiguity(bool value);
    public sealed virtual OclResultTypeDeduceMethod get_DeduceMethod();
    public virtual IOclType CalculateReturnType(IOclOperationParameters oclParameters);
    public virtual IOclType CalculateReturnTypeExtended(IOclOperationParameters oclParameters, object untypeOCLEnvironment);
    public sealed virtual IOclType[] get_FormalParameters();
    public sealed virtual bool get_IsDotNotation();
    public sealed virtual bool get_IsPostFix();
    public void set_IsPostFix(bool value);
    public bool get_IsInfix();
    protected void set_IsInfix(bool value);
    public sealed virtual IOclType get_ResultType();
    public sealed virtual bool get_ModifiesSource();
    public void set_ModifiesSource(bool value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_ArgsNeedCommonType();
    public void set_ArgsNeedCommonType(bool value);
    public sealed virtual bool get_IsTypeOperation();
    public void set_IsTypeOperation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBothTypeAndInstance();
    [CompilerGeneratedAttribute]
public void set_IsBothTypeAndInstance(bool value);
    public sealed virtual int get_RepeatParameters();
    public void set_RepeatParameters(int value);
}
public enum Eco.Ocl.Support.OclResultTypeDeduceMethod : Enum {
    public int value__;
    public static OclResultTypeDeduceMethod ExplicitType;
    public static OclResultTypeDeduceMethod LoopVariableType;
    public static OclResultTypeDeduceMethod TypeOfSource;
    public static OclResultTypeDeduceMethod ListElementTypeOfSource;
    public static OclResultTypeDeduceMethod TypeOfFirstParam;
    public static OclResultTypeDeduceMethod TypeOfSecondParam;
    public static OclResultTypeDeduceMethod LeastCommonType_SourceAndFirstParam;
    public static OclResultTypeDeduceMethod LeastCommonType_FirstAndSecondParam;
    public static OclResultTypeDeduceMethod FirstParamAsSequence;
    public static OclResultTypeDeduceMethod ObjectListFromSourceType;
    public static OclResultTypeDeduceMethod MetaType;
    public static OclResultTypeDeduceMethod TypeCast;
    public static OclResultTypeDeduceMethod SourceAsBag;
    public static OclResultTypeDeduceMethod SourceAsSet;
    public static OclResultTypeDeduceMethod SourceAsSequence;
    public static OclResultTypeDeduceMethod SourceAsOrderedSet;
    public static OclResultTypeDeduceMethod ObjectListFromFirstParamType;
    public static OclResultTypeDeduceMethod Boolean_TypesMustShareDomain;
    public static OclResultTypeDeduceMethod ObjectFromSourceType;
    public static OclResultTypeDeduceMethod SymbolCalculated;
    public static OclResultTypeDeduceMethod ElementFromSourceType;
    public static OclResultTypeDeduceMethod SymbolCalculatedExtended;
}
public enum Eco.Ocl.Support.OclSortDirection : Enum {
    public int value__;
    public static OclSortDirection ascending;
    public static OclSortDirection descending;
}
public class Eco.Ocl.Support.OclStaticInstanceMethod : AbstractOclInstanceMethod {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IfOneParameterIsNullThenReturnIsFalse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IfDenominatorInDivideIsNullReturnNull>k__BackingField;
    public bool IfOneParameterIsNullThenReturnIsFalse { get; public set; }
    public bool IfDenominatorInDivideIsNullReturnNull { get; public set; }
    public OclStaticInstanceMethod(string name, MethodInfo mi, IClassifier[] ecoParameters, IClassifier returnType, bool isProperty, bool isInfix);
    [CompilerGeneratedAttribute]
public bool get_IfOneParameterIsNullThenReturnIsFalse();
    [CompilerGeneratedAttribute]
public void set_IfOneParameterIsNullThenReturnIsFalse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IfDenominatorInDivideIsNullReturnNull();
    [CompilerGeneratedAttribute]
public void set_IfDenominatorInDivideIsNullReturnNull(bool value);
    protected virtual object Invoke(object root, Object[] parameters);
    protected virtual void Init();
}
[EcoOclOperationResourcedHelpAttribute("Eco.Interfaces.resources:OclHelpTypeMethod")]
public abstract class Eco.Ocl.Support.OclTypeMethod : OclOperationBase {
    private IClassifier[] m_EcoParameters;
    private IClassifier m_ReturnType;
    protected string m_Name;
    public IClassifier[] EcoParameters { get; }
    public OclTypeMethod(string name, IClassifier[] ecoParameters, IClassifier returnType);
    public IClassifier[] get_EcoParameters();
    private object ConvertListElement(ICollectionType targetType, IElement element);
    private object ConvertElement(IOclType targetType, IElement el, Type clrTargetType);
    public virtual void Evaluate(IOclOperationParameters oclParameters);
    protected abstract virtual object Invoke(object root, Object[] parameters);
    protected abstract virtual Type GetClrParameterType(int index);
    protected Type GetClrParameterType(int index, MethodBase method);
    protected virtual void Init();
}
public class Eco.Ocl.Support.OclTypeMethodInstaller : object {
    private HashSet`1<Type> _enumTypesTreatedAsInt32;
    private StringBuilder m_Signatures;
    private Dictionary`2<string, string> m_DupeNames;
    private Dictionary`2<string, string> m_SystemMethods;
    private Dictionary`2<string, string> m_KnownOperators;
    private Dictionary`2<string, IOclOperation> m_OrgOperations;
    private ITypeService m_TypeService;
    private IEcoTypeSystem m_TypeSystem;
    private Dictionary`2<IDataType, IDataType> installedTypes;
    public string Signatures { get; }
    public ITypeService TypeService { get; }
    public IEcoTypeSystem TypeSystem { get; }
    public OclTypeMethodInstaller(ITypeService typeService, IEcoTypeSystem typeSystem);
    private IClassifier ResolveType(Type t, bool acceptUnknownEnumAsInt);
    private void InstallConstructorInfo(ConstructorInfo ci, IDataType type);
    private void InstallMethodInfo(string name, MethodInfo mi, IClassifier type, bool isProperty);
    public sealed virtual void CleanForFree();
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    private void InstallFieldInfo(FieldInfo fi, IClassifier type);
    public void InstallOperation(IOclOperation op);
    private string GetUniqueName(string orgName, MethodInfo mi, IClassifier type, bool isStatic);
    public string get_Signatures();
    public ITypeService get_TypeService();
    public IEcoTypeSystem get_TypeSystem();
    private void InstallMethodsForType(IDataType type);
    public void InstallStaticMethodsForType(Type type);
    public static string GetOpSignature(IOclOperation op);
    private string GetOpSignature(string name, MethodInfo mi, IClassifier rootType, bool isStatic);
    public void InstallTypeMethods();
}
public class Eco.Ocl.Support.ProxyElement : object {
    private IElement el;
    private ContentType Eco.ObjectRepresentation.IElement.ContentType { get; }
    private bool Eco.ObjectRepresentation.IElement.Mutable { get; }
    private bool Eco.ObjectRepresentation.IElement.ReadOnly { get; }
    private bool Eco.ObjectRepresentation.IElement.IsProperty { get; }
    private IClassifier Eco.ObjectRepresentation.IElement.UmlType { get; }
    private object Eco.ObjectRepresentation.IElement.AsObject { get; private set; }
    private IElement Eco.ObjectRepresentation.IElementProvider.Element { get; }
    public IEcoServiceProvider ServiceProvider { get; }
    public ProxyElement(IElement el);
    private sealed virtual override IElement Eco.ObjectRepresentation.IElement.CloneValue(bool readOnly);
    private sealed virtual override bool Eco.ObjectRepresentation.IElement.IsEqual(IElement element);
    private sealed virtual override int Eco.ObjectRepresentation.IElement.GetIsEqualHashCode();
    private sealed virtual override void Eco.ObjectRepresentation.IElement.Assign(IElement element);
    private sealed virtual override void Eco.ObjectRepresentation.IElement.SubscribeToValue(ISubscriber subscriber);
    private sealed virtual override void Eco.ObjectRepresentation.IElement.UnsubscribeFromValue(ISubscriber subscriber);
    private sealed virtual override ContentType Eco.ObjectRepresentation.IElement.get_ContentType();
    private sealed virtual override IElementCollection Eco.ObjectRepresentation.IElement.GetAsCollection();
    private sealed virtual override bool Eco.ObjectRepresentation.IElement.get_Mutable();
    private sealed virtual override bool Eco.ObjectRepresentation.IElement.get_ReadOnly();
    private sealed virtual override bool Eco.ObjectRepresentation.IElement.get_IsProperty();
    private sealed virtual override IClassifier Eco.ObjectRepresentation.IElement.get_UmlType();
    private sealed virtual override object Eco.ObjectRepresentation.IElement.get_AsObject();
    private sealed virtual override void Eco.ObjectRepresentation.IElement.set_AsObject(object value);
    private sealed virtual override T Eco.ObjectRepresentation.IElement.GetValue();
    private sealed virtual override void Eco.ObjectRepresentation.IElement.SetValue(T value);
    private sealed virtual override IList`1<T> Eco.ObjectRepresentation.IElement.GetAsIList();
    private sealed virtual override void Eco.ObjectRepresentation.IElement.add_ValueChanged(EventHandler value);
    private sealed virtual override void Eco.ObjectRepresentation.IElement.remove_ValueChanged(EventHandler value);
    private sealed virtual override IElement Eco.ObjectRepresentation.IElementProvider.get_Element();
    public sealed virtual IEcoServiceProvider get_ServiceProvider();
}
public class Eco.Ocl.Support.SortElement : ProxyElement {
    private OclSortDirection direction;
    public OclSortDirection Direction { get; }
    public SortElement(IElement el, OclSortDirection direction);
    public OclSortDirection get_Direction();
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.Persistence.AllInstancesCondition")]
[KnownTypeAttribute("Eco.Persistence.OclCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.TBoldOclCondition")]
[KnownTypeAttribute("Eco.Persistence.ChangePointCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.ViewModelCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.ViewModelStreamFetchCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.ViewModelQueryplanFetchCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.ViewModelQueryplanFetchConditionMulti")]
[KnownTypeAttribute("Eco.Ocl.Impl.RunServerSideViewModelNowCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.MDrivenCacheCondition")]
[KnownTypeAttribute("Eco.Ocl.Impl.MetaConditionReturnPlatformQuery")]
public abstract class Eco.Persistence.AbstractCondition : object {
    private int m_ClassId;
    private int m_Version;
    [DataMemberAttribute]
public int ClassId { get; public set; }
    [DataMemberAttribute]
public int Version { get; public set; }
    protected AbstractCondition(int classId, int version);
    protected AbstractCondition(int classId);
    public int get_ClassId();
    public void set_ClassId(int value);
    public int get_Version();
    public void set_Version(int value);
}
public abstract class Eco.Persistence.AbstractSyncHandler : Component {
    private object Eco.Persistence.ISyncSink.SyncRoot { get; }
    private sealed virtual override object Eco.Persistence.ISyncSink.get_SyncRoot();
    private sealed virtual override SyncVersion Eco.Persistence.ISyncSink.Submit(CommitBlock commitBlock, object operationsParams, IEcoTypeSystem typeSystem);
    public abstract virtual DBChangeCollection GetChangesSince(SyncVersion fromVersion, SyncVersion[] exclude, SyncVersion& lastSyncVersion, IEcoTypeSystem typeSystem);
    public abstract virtual SyncVersion CurrentSyncVersion(IEcoTypeSystem typeSystem);
}
[DataContractAttribute]
public class Eco.Persistence.AllInstancesCondition : AbstractCondition {
    public AllInstancesCondition(int classId, int version);
    public AllInstancesCondition(int classId);
}
[DataContractAttribute]
public class Eco.Persistence.ChangePointCondition : AbstractCondition {
    private ObjectIdList m_ObjectIds;
    private int m_StartVersion;
    private int m_EndVersion;
    private Int32[] m_MemberIds;
    [DataMemberAttribute]
public ObjectIdList ObjectIds { get; public set; }
    [DataMemberAttribute]
public int StartVersion { get; public set; }
    [DataMemberAttribute]
public int EndVersion { get; public set; }
    [DataMemberAttribute]
public Int32[] MemberIds { get; public set; }
    public ChangePointCondition(int classId, ObjectIdList objectIds, int startVersion, int endVersion, Int32[] memberIds);
    public ObjectIdList get_ObjectIds();
    public void set_ObjectIds(ObjectIdList value);
    public int get_StartVersion();
    public void set_StartVersion(int value);
    public int get_EndVersion();
    public void set_EndVersion(int value);
    public Int32[] get_MemberIds();
    public void set_MemberIds(Int32[] value);
}
public class Eco.Persistence.CommitBlock : object {
    private Datablock m_Changes;
    private Datablock m_OldValues;
    private bool disposedValue;
    public Datablock Changes { get; }
    public Datablock OldValues { get; }
    public CommitBlock(Datablock changes, Datablock oldValues);
    public Datablock get_Changes();
    public Datablock get_OldValues();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class Eco.Persistence.Configuration.Common : object {
    public static string TV_NAME;
    public static string TV_PREFIX;
    public static string STARTTIMECOLUMNNAME;
    public static string STOPTIMECOLUMNNAME;
    public static string Primary;
    internal static string TruncateCharacters;
    private static bool IsAsciiChar(char ch);
    private static char MapAsciiChar(char ch, IdentifierCharacterMode charMode);
    public static string MapCharacters(string s, IdentifierCharacterMode charMode);
    public static string ExpandName(string name, string defaultName, int maxLength, SqlDatabaseConfig config, string suffix, bool isTable);
}
public enum Eco.Persistence.Configuration.IdentifierCharacterMode : Enum {
    public int value__;
    public static IdentifierCharacterMode AllowUnicode;
    public static IdentifierCharacterMode MapNationalChars;
    public static IdentifierCharacterMode StrictAscii;
}
public class Eco.Persistence.Configuration.IdMapperDefinition : KeyMapperDefinition {
}
[TypeConverterAttribute("Eco.Persistence.Configuration.KeyMapperDefinitionConverter")]
public class Eco.Persistence.Configuration.KeyMapperDefinition : object {
    private string name;
    private string m_MapperTypeName;
    private KeyMapperDefinitionCollection owner;
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "PropertyName")]
[TypeConverterAttribute("Eco.Persistence.Design.KeyMapperNameConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Type Mapper { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyKeyMapperTypeName")]
[TypeConverterAttribute("Eco.Persistence.Design.KeyMapperTypeNameConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
[EditorAttribute("Eco.Persistence.Design.MapperTypeEditor, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.Drawing.Design.UITypeEditor")]
public string MapperTypeName { get; public set; }
    private ITypeResolutionService trs { get; }
    unknown KeyMapperDefinitionCollection Owner {internal set; }
    public string get_Name();
    public void set_Name(string value);
    public Type get_Mapper();
    public void set_Mapper(Type value);
    private void ValidateKeyMapperType(Type t);
    public string get_MapperTypeName();
    public void set_MapperTypeName(string value);
    private ITypeResolutionService get_trs();
    internal void set_Owner(KeyMapperDefinitionCollection value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.Configuration.KeyMapperDefinitionCollection : CollectionBase {
    private SqlDatabaseConfig config;
    public ITypeResolutionService TypeResolutionService { get; }
    public KeyMapperDefinition Item { get; }
    public KeyMapperDefinitionCollection(SqlDatabaseConfig config);
    public ITypeResolutionService get_TypeResolutionService();
    protected virtual void OnInsertComplete(int index, object value);
    public KeyMapperDefinition get_Item(int index);
    public void Add(KeyMapperDefinition def);
    public void AddRange(KeyMapperDefinition[] defs);
    public KeyMapperDefinition FindByName(string name);
    public bool NameExists(string name);
    public void Assign(KeyMapperDefinitionCollection source);
}
public class Eco.Persistence.Configuration.KeyMapperDefinitionConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Eco.Persistence.Configuration.PMapperDefinitionConverter")]
public class Eco.Persistence.Configuration.PersistenceMapperDefinition : object {
    private string name;
    private string m_MapperTypeName;
    private PersistenceMapperDefinitionCollection owner;
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyName")]
[TypeConverterAttribute("Eco.Persistence.Design.PersistenceMapperNameConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Type Mapper { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "PropertyMapperTypeName")]
[TypeConverterAttribute("Eco.Persistence.Design.PersistenceMapperTypeNameConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
[EditorAttribute("Eco.Persistence.Design.MapperTypeEditor, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.Drawing.Design.UITypeEditor")]
public string MapperTypeName { get; public set; }
    private ITypeResolutionService trs { get; }
    unknown PersistenceMapperDefinitionCollection Owner {internal set; }
    public string get_Name();
    public void set_Name(string value);
    private void ValidatePMapperType(Type t);
    public Type get_Mapper();
    public void set_Mapper(Type value);
    public string get_MapperTypeName();
    public void set_MapperTypeName(string value);
    private ITypeResolutionService get_trs();
    internal void set_Owner(PersistenceMapperDefinitionCollection value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.Configuration.PersistenceMapperDefinitionCollection : CollectionBase {
    private SqlDatabaseConfig config;
    private PersistenceMapperDictionary m_PersistenceMapperDictionary;
    public ITypeResolutionService TypeResolutionService { get; }
    public PersistenceMapperDefinition Item { get; }
    public PersistenceMapperDefinitionCollection(SqlDatabaseConfig config);
    public ITypeResolutionService get_TypeResolutionService();
    protected virtual void OnInsertComplete(int index, object value);
    public PersistenceMapperDefinition get_Item(int index);
    public void Add(PersistenceMapperDefinition def);
    public void AddRange(PersistenceMapperDefinition[] defs);
    public PersistenceMapperDefinition FindByName(string name);
    public bool NameExists(string name);
    public void Assign(PersistenceMapperDefinitionCollection source);
    public PersistenceMapperDictionary GetMapperDictionary();
}
public class Eco.Persistence.Configuration.PersistenceMapperDictionary : object {
    private Hashtable hashtable;
    internal void Add(PersistenceMapperDefinition pmd);
    public object FindMapping(string mapperName, string memberName, Type targetType);
    private ISingleColumnAttributemapping FindSingleColumnMapping(string name, Type targetType);
    public ISingleColumnAttributemapping FindSingleColumnMappingByName(string name);
    public ISingleColumnAttributemapping FindEnsuredSingleColumnMappingByName(string name);
    public ISingleColumnAttributemapping FindSingleColumnMappingByType(Type targetType);
    public ISingleColumnAttributemapping FindEnsuredSingleColumnMappingByType(Type targetType);
}
public class Eco.Persistence.Configuration.PMapperDefinitionConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Eco.Persistence.Configuration.SqlDatabaseConfigConverter")]
public class Eco.Persistence.Configuration.SqlDatabaseConfig : object {
    private static string EmptyMarker;
    private static string sTableNameToken;
    private static string sColumnNameToken;
    private static string sTableNameTokenNoBrackets;
    private static string sColumnNameTokenNoBrackets;
    private static string sIndexNameToken;
    private bool m_UseSQL92Joins;
    private int m_FetchBlockSize;
    private int m_DefaultStringLength;
    private string m_DropColumnTemplate;
    private string m_DropIndexTemplate;
    private string m_DropTableTemplate;
    private string m_BooleanTrueLiteral;
    private string m_SQLforNotNull;
    private string m_SQLforAllowNull;
    private bool m_SupportsConstraintsInCreateTable;
    private int m_MaxParamsInIdList;
    private int m_MaxIndexNameLength;
    private int m_MaxDbIdentifierLength;
    private int m_MaxAliasNameLength;
    private string m_DateTimeFormat;
    private string m_GuidFormat;
    private DateTime m_DefaultDateTime;
    private bool m_AllowMetadataChangesInTransaction;
    private string m_SystemTablePrefix;
    private bool m_UseTimestampColumn;
    private bool m_UseTimestampTable;
    private bool m_UseClockLog;
    private bool m_SupportsDefaultColumnValues;
    private string m_SqlScriptCommentStart;
    private string m_SqlScriptStartTransaction;
    private string m_SqlScriptTerminator;
    private string m_SqlScriptCommentStop;
    private string m_SqlScriptSeparator;
    private string m_SqlScriptRollBackTransaction;
    private string m_SqlScriptCommitTransaction;
    private string m_SqlQuoteChar;
    private string m_SqlPreQuoteChar;
    private string m_SqlPostQuoteChar;
    private string m_SqlStringQuoteChar;
    private string m_SqlTopKeyword;
    private string m_SqlTopQuerySuffix;
    private string m_SqlQuoteCharInString;
    private bool m_QuoteSqlNames;
    private bool m_ForceUpperCase;
    private IdentifierCharacterMode m_IdentifierCharacterMode;
    private string m_UpperCaseFunctionName;
    private string m_LengthFunctionName;
    private IsolationLevel m_UpdateIsolationLevel;
    private IsolationLevel m_FetchIsolationLevel;
    private string m_MultiTenantPrefix;
    private bool m_TablesTableHasIndex;
    private PersistenceMapperDefinitionCollection m_PersistenceMappers;
    private KeyMapperDefinitionCollection m_KeyMappers;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DropColumnsByRecreateTableTemplate>k__BackingField;
    private IList`1<string> m_ReservedWordsList;
    private Hashtable m_ReservedWordsHash;
    private bool _SupportsFilteredIndex;
    private Component owner;
    private ITypeResolutionService typeResolutionService;
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyUseSQL92Joins")]
public bool UseSQL92Joins { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyFetchBlockSize")]
public int FetchBlockSize { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDefaultStringLength")]
public int DefaultStringLength { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyMaxParamsInIdList")]
public int MaxParamsInIdList { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDropColumnTemplate")]
public string DropColumnTemplate { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "SQLite does not allow drop of single columns - we can recreate the table instead")]
public string DropColumnsByRecreateTableTemplate { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDropTableTemplate")]
public string DropTableTemplate { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyBooleanTrueLiteral")]
public string BooleanTrueLiteral { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDropIndexTemplate")]
public string DropIndexTemplate { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyMaxDbIdentifierLength")]
[DefaultValueAttribute("-1")]
public int MaxDbIdentifierLength { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyMaxAliasNameLength")]
[DefaultValueAttribute("12")]
public int MaxAliasNameLength { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDateTimeFormat")]
[DefaultValueAttribute("")]
public string DateTimeFormat { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyGuidFormat")]
[DefaultValueAttribute("N")]
public string GuidFormat { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyDefaultDateTime")]
public DateTime DefaultDateTime { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyMaxIndexNameLength")]
[DefaultValueAttribute("18")]
public int MaxIndexNameLength { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyQuoteSqlNames")]
[DefaultValueAttribute("False")]
public bool QuoteSqlNames { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlQuoteChar")]
[DefaultValueAttribute(""")]
public string SqlQuoteChar { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlPreQuoteChar")]
[DefaultValueAttribute("")]
public string SqlPreQuoteChar { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlPostQuoteChar")]
[DefaultValueAttribute("")]
public string SqlPostQuoteChar { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlQuoteCharInString")]
[DefaultValueAttribute("''")]
public string SqlQuoteCharInString { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlStringQuoteChar")]
[DefaultValueAttribute("'")]
public string SqlStringQuoteChar { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[DefaultValueAttribute("Top")]
public string SqlTopKeyword { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[DefaultValueAttribute("")]
public string SqlTopQuerySuffix { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertySQLForNotNull")]
public string SQLforNotNull { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertySQLForAllowNull")]
[DefaultValueAttribute("")]
public string SQLforAllowNull { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertySupportsConstraintsInCreateTable")]
public bool SupportsConstraintsInCreateTable { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategorySQLTweaks")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyAllowMetadataChangesInTransaction")]
[DefaultValueAttribute("True")]
public bool AllowMetadataChangesInTransaction { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistenceTuning")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertySystemTablePrefix")]
public string SystemTablePrefix { get; public set; }
    [EditorAttribute("CollectionEditor", "ITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyPersistenceMappers")]
public PersistenceMapperDefinitionCollection PersistenceMappers { get; }
    [EditorAttribute("CollectionEditor", "ITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyIdMappers")]
public KeyMapperDefinitionCollection KeyMappers { get; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("The property has been renamed 'KeyMappers'.")]
public KeyMapperDefinitionCollection IdMappers { get; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyUseTimestampColumn")]
[DefaultValueAttribute("False")]
public bool UseTimestampColumn { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Use UseTimestampColumn and UseTimeStampTable instead")]
unknown bool UseTimestamp {public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyUseTimestampTable")]
[DefaultValueAttribute("False")]
public bool UseTimestampTable { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyUseClockLog")]
[DefaultValueAttribute("False")]
public bool UseClockLog { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptCommentStart")]
public string SqlScriptCommentStart { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptStartTransaction")]
public string SqlScriptStartTransaction { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptTerminator")]
public string SqlScriptTerminator { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptCommentStop")]
public string SqlScriptCommentStop { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptSeparator")]
public string SqlScriptSeparator { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptRollBackTransaction")]
public string SqlScriptRollBackTransaction { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sSqlScriptCommitTransaction")]
public string SqlScriptCommitTransaction { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertyUpdateIsolationLevel")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public IsolationLevel UpdateIsolationLevel { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sFetchIsolationLevel")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public IsolationLevel FetchIsolationLevel { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sForceUpperCase")]
[DefaultValueAttribute("False")]
public bool ForceUpperCase { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sIdentifierCharacterMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public IdentifierCharacterMode IdentifierCharacterMode { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sUpperCaseFunctionName")]
[DefaultValueAttribute("UPPER")]
public string UpperCaseFunctionName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sLengthFunctionName")]
[DefaultValueAttribute("Length")]
public string LengthFunctionName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
public string MultiTenantPrefix { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
public bool TablesTableHasIndex { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sPropertySupportsDefaultColumnValues")]
[DefaultValueAttribute("True")]
public bool SupportsDefaultColumnValues { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.Configuration.SqlDatabaseConfig", "sReservedWords")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
public string ReservedWords { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public IList`1<string> ReservedWordsList { get; }
    [BrowsableAttribute("False")]
public Hashtable ReservedWordsHash { get; }
    public bool SupportsFilteredIndex { get; public set; }
    public ITypeResolutionService TypeResolutionService { get; public set; }
    [BrowsableAttribute("False")]
public bool ConfigValid { get; }
    [BrowsableAttribute("False")]
public string EffectiveSQLForNotNull { get; }
    public SqlDatabaseConfig(Component owner);
    public bool get_UseSQL92Joins();
    public void set_UseSQL92Joins(bool value);
    public int get_FetchBlockSize();
    public void set_FetchBlockSize(int value);
    public int get_DefaultStringLength();
    public void set_DefaultStringLength(int value);
    public int get_MaxParamsInIdList();
    public void set_MaxParamsInIdList(int value);
    public string get_DropColumnTemplate();
    public void set_DropColumnTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_DropColumnsByRecreateTableTemplate();
    [CompilerGeneratedAttribute]
public void set_DropColumnsByRecreateTableTemplate(string value);
    public string get_DropTableTemplate();
    public void set_DropTableTemplate(string value);
    public string get_BooleanTrueLiteral();
    public void set_BooleanTrueLiteral(string value);
    public string get_DropIndexTemplate();
    public void set_DropIndexTemplate(string value);
    public int get_MaxDbIdentifierLength();
    public void set_MaxDbIdentifierLength(int value);
    public int get_MaxAliasNameLength();
    public void set_MaxAliasNameLength(int value);
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    public string get_GuidFormat();
    public void set_GuidFormat(string value);
    public DateTime get_DefaultDateTime();
    public void set_DefaultDateTime(DateTime value);
    public int get_MaxIndexNameLength();
    public void set_MaxIndexNameLength(int value);
    public bool get_QuoteSqlNames();
    public void set_QuoteSqlNames(bool value);
    public string get_SqlQuoteChar();
    public void set_SqlQuoteChar(string value);
    public string get_SqlPreQuoteChar();
    public void set_SqlPreQuoteChar(string value);
    public string get_SqlPostQuoteChar();
    public void set_SqlPostQuoteChar(string value);
    public string get_SqlQuoteCharInString();
    public void set_SqlQuoteCharInString(string value);
    public string get_SqlStringQuoteChar();
    public void set_SqlStringQuoteChar(string value);
    public string get_SqlTopKeyword();
    public void set_SqlTopKeyword(string value);
    public string get_SqlTopQuerySuffix();
    public void set_SqlTopQuerySuffix(string value);
    public string get_SQLforNotNull();
    public void set_SQLforNotNull(string value);
    public string get_SQLforAllowNull();
    public void set_SQLforAllowNull(string value);
    public bool get_SupportsConstraintsInCreateTable();
    public void set_SupportsConstraintsInCreateTable(bool value);
    public bool get_AllowMetadataChangesInTransaction();
    public void set_AllowMetadataChangesInTransaction(bool value);
    public string get_SystemTablePrefix();
    public void set_SystemTablePrefix(string value);
    public PersistenceMapperDefinitionCollection get_PersistenceMappers();
    public KeyMapperDefinitionCollection get_KeyMappers();
    public KeyMapperDefinitionCollection get_IdMappers();
    public bool get_UseTimestampColumn();
    public void set_UseTimestampColumn(bool value);
    public void set_UseTimestamp(bool value);
    public bool get_UseTimestampTable();
    public void set_UseTimestampTable(bool value);
    public bool get_UseClockLog();
    public void set_UseClockLog(bool value);
    public string get_SqlScriptCommentStart();
    public void set_SqlScriptCommentStart(string value);
    public string get_SqlScriptStartTransaction();
    public void set_SqlScriptStartTransaction(string value);
    public string get_SqlScriptTerminator();
    public void set_SqlScriptTerminator(string value);
    public string get_SqlScriptCommentStop();
    public void set_SqlScriptCommentStop(string value);
    public string get_SqlScriptSeparator();
    public void set_SqlScriptSeparator(string value);
    public string get_SqlScriptRollBackTransaction();
    public void set_SqlScriptRollBackTransaction(string value);
    public string get_SqlScriptCommitTransaction();
    public void set_SqlScriptCommitTransaction(string value);
    public IsolationLevel get_UpdateIsolationLevel();
    public void set_UpdateIsolationLevel(IsolationLevel value);
    public IsolationLevel get_FetchIsolationLevel();
    public void set_FetchIsolationLevel(IsolationLevel value);
    public bool get_ForceUpperCase();
    public void set_ForceUpperCase(bool value);
    public IdentifierCharacterMode get_IdentifierCharacterMode();
    public void set_IdentifierCharacterMode(IdentifierCharacterMode value);
    public string get_UpperCaseFunctionName();
    public void set_UpperCaseFunctionName(string value);
    public string get_LengthFunctionName();
    public void set_LengthFunctionName(string value);
    public string get_MultiTenantPrefix();
    public void set_MultiTenantPrefix(string value);
    public bool get_TablesTableHasIndex();
    public void set_TablesTableHasIndex(bool value);
    public bool get_SupportsDefaultColumnValues();
    public void set_SupportsDefaultColumnValues(bool value);
    public string get_ReservedWords();
    public void set_ReservedWords(string value);
    public void AddReservedWord(string word);
    public void ClearReservedWords();
    public IList`1<string> get_ReservedWordsList();
    public Hashtable get_ReservedWordsHash();
    public bool get_SupportsFilteredIndex();
    public void set_SupportsFilteredIndex(bool value);
    public string ForceQuoteName(string unquotedName);
    public string DeQuoteName(string quotedName);
    public string QuoteName(string unquotedName);
    public string MakeStringLiteral(string s);
    public string ForcedMakeStringLiteral(string s);
    public ITypeResolutionService get_TypeResolutionService();
    public void set_TypeResolutionService(ITypeResolutionService value);
    public void AddKeywordsFromResource(Assembly assembly, string resourceName);
    public void SetInitialValuesForBasicProperties();
    public string GetDropColumnQuery(string tableName, string columnName);
    public string GetDropIndexQuery(string tableName, string indexName);
    public string GetDropTableQuery(string tableName);
    public void SetPMapper(string name, Type mapper);
    public void SetKeyMapper(string name, Type mapper);
    public bool get_ConfigValid();
    public string get_EffectiveSQLForNotNull();
}
public class Eco.Persistence.Configuration.SqlDatabaseConfigConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Eco.Persistence.Connection.DatabaseCollection : object {
    private Hashtable m_InternalList;
    private ITransactionManager m_TransactionManager;
    public bool HandlesTransactions { get; }
    public ITransactionManager TransactionManager { get; }
    public DatabaseCollection(ITransactionManager transactionManager);
    public sealed virtual IDatabase GetDatabase(string name);
    public void Add(IDatabase db, string name);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual IList`1<string> GetNames();
    public bool get_HandlesTransactions();
    public sealed virtual ITransactionManager get_TransactionManager();
}
public interface Eco.Persistence.Connection.IDatabase {
    public bool Connected { get; }
    public bool InTransaction { get; }
    public IDbConnection DbConnection { get; }
    public DateTime OpenSince { get; }
    public SqlDatabaseConfig Config { get; }
    public abstract virtual void StartTransaction();
    public abstract virtual void Commit();
    public abstract virtual void RollBack();
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual IQuery GetQuery();
    public abstract virtual void ReleaseQuery(IQuery query);
    public abstract virtual IExecQuery GetExecQuery();
    public abstract virtual void ReleaseExecQuery(IExecQuery query);
    public abstract virtual void ReleaseCachedObjects();
    public abstract virtual IList`1<string> AllTableNames(string pattern);
    public abstract virtual bool TableExists(string tableName);
    public abstract virtual DataTable GetIndexDefsForTable(string tableName);
    public abstract virtual bool get_Connected();
    public abstract virtual bool get_InTransaction();
    public abstract virtual IDbConnection get_DbConnection();
    public abstract virtual DateTime get_OpenSince();
    public abstract virtual void DisposeConnection();
    public abstract virtual SqlDatabaseConfig get_Config();
    public abstract virtual string CheckQueryStatus();
}
public interface Eco.Persistence.Connection.IDatabaseCollection {
    public ITransactionManager TransactionManager { get; }
    public abstract virtual IDatabase GetDatabase(string name);
    public abstract virtual IList`1<string> GetNames();
    public abstract virtual ITransactionManager get_TransactionManager();
}
public interface Eco.Persistence.Connection.IDatabaseDefinition {
}
[DefaultMemberAttribute("Item")]
public interface Eco.Persistence.Connection.IDataSet {
    public bool Eof { get; }
    public int FieldCount { get; }
    public IField Item { get; }
    public abstract virtual IField FieldByName(string fieldName);
    public abstract virtual void Close();
    public abstract virtual void Next();
    public abstract virtual void Open();
    public abstract virtual int MoveBy(int distance);
    public abstract virtual bool get_Eof();
    public abstract virtual int get_FieldCount();
    public abstract virtual IField get_Item(int index);
}
public interface Eco.Persistence.Connection.IExecQuery {
    public int RowsAffected { get; }
    public abstract virtual void StartSqlBatch();
    public abstract virtual void EndSqlBatch();
    public abstract virtual void FailSqlBatch();
    public abstract virtual void ExecSql();
    public abstract virtual int get_RowsAffected();
}
public interface Eco.Persistence.Connection.IField {
    public object Value { get; }
    public short AsInt16 { get; }
    public int AsInt32 { get; }
    public long AsInt64 { get; }
    public abstract virtual object get_Value();
    public abstract virtual short get_AsInt16();
    public abstract virtual int get_AsInt32();
    public abstract virtual long get_AsInt64();
}
public interface Eco.Persistence.Connection.IImplementorOfMDrivenCacheCondition {
    public abstract virtual void HandleMDrivenCacheCondition(MDrivenCacheCondition condition, object systemPersistenceMapper_untyped, ObjectIdList resultList);
}
public interface Eco.Persistence.Connection.IImplementorOfRunServerSideViewModelNowCondition {
    public abstract virtual void RunServerSideViewModelNow(string serversideviewmodelname);
}
public interface Eco.Persistence.Connection.IImplementorOfViewModelFetch {
    public abstract virtual void FetchViewModel_StartQuery(ViewModelCondition condition);
    public abstract virtual void FetchViewModel_StreamFetchObjects(ViewModelStreamFetchCondition condition, Datablock result);
    public abstract virtual void FetchViewModel_StreamFetchIds(ViewModelStreamFetchCondition condition, ObjectIdList result);
}
public interface Eco.Persistence.Connection.IImplementorOfViewModelFetchHost {
    public abstract virtual void InstallIImplementorOfViewModelFetch(IImplementorOfViewModelFetch obj);
}
public interface Eco.Persistence.Connection.IParameterized {
    public abstract virtual void ClearParams();
    public abstract virtual IDataParameter ParamByName(string value);
}
public interface Eco.Persistence.Connection.IQuery {
}
public interface Eco.Persistence.Connection.IQueryBase {
    public string SqlText { get; }
    public abstract virtual void AssignSqlText(string sql);
    public abstract virtual string get_SqlText();
}
public interface Eco.Persistence.Connection.ITransactionable {
    public abstract virtual bool PerformUpdate(object operationParams);
}
public interface Eco.Persistence.Connection.ITransactionManager {
    public abstract virtual void PerformOperationInTransaction(object context, ITransactionable callback, IDatabaseCollection databases);
}
public class Eco.Persistence.ContentEqualArray : object {
    private Object[] m_InternalArray;
    public int Size { get; }
    public ContentEqualArray(int size);
    public ContentEqualArray(Object[] arr);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public object GetItem(int index);
    public void SetItem(int index, object value);
    public int get_Size();
}
[DataContractAttribute]
public class Eco.Persistence.DBChange : object {
    private ChangeKind m_Kind;
    private ObjectId m_ObjectId;
    private Int32[] m_MemberIds;
    public bool EmbeddedMembersChanged { get; public set; }
    [DataMemberAttribute]
public ChangeKind Kind { get; public set; }
    [DataMemberAttribute]
public Int32[] MemberIds { get; public set; }
    [DataMemberAttribute]
public ObjectId ObjectId { get; public set; }
    public DBChange(ObjectId objectId);
    public bool get_EmbeddedMembersChanged();
    public void set_EmbeddedMembersChanged(bool value);
    public void MemberChanged(int memberId);
    public void ObjectDeleted();
    public void ObjectCreated();
    public ChangeKind get_Kind();
    public void set_Kind(ChangeKind value);
    public Int32[] get_MemberIds();
    public void set_MemberIds(Int32[] value);
    public ObjectId get_ObjectId();
    public void set_ObjectId(ObjectId value);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Eco.Persistence.DBChangeCollection : object {
    private List`1<DBChange> m_List;
    private Dictionary`2<ObjectId, DBChange> m_Hashtable;
    private bool m_All;
    [DataMemberAttribute]
public List`1<DBChange> List { get; public set; }
    private Dictionary`2<ObjectId, DBChange> EnsuredHashTable { get; }
    public DBChange Item { get; }
    public int Count { get; }
    [DataMemberAttribute]
public bool All { get; public set; }
    public List`1<DBChange> get_List();
    public void set_List(List`1<DBChange> value);
    public void Strip();
    private Dictionary`2<ObjectId, DBChange> get_EnsuredHashTable();
    public DBChange get_Item(ObjectId id);
    public DBChange GetEnsured(ObjectId id);
    public void Add(DBChange change);
    public sealed virtual IEnumerator GetEnumerator();
    public int get_Count();
    public bool get_All();
    public void set_All(bool value);
}
public class Eco.Persistence.DefaultCleanPsConfig : object {
    private bool m_DeleteUnknowTables;
    private IList`1<string> m_SystemTables;
    public DefaultCleanPsConfig(bool deleteUnknowTables);
    private sealed virtual override void Eco.Persistence.IConfigureCleanPS.InstallExternalSystemTables(IList`1<string> tableNames);
    private sealed virtual override IList`1<string> Eco.Persistence.IConfigureCleanPS.DetermineTablesToDelete(IList`1<string> allTables, IList`1<string> knownTables, IList`1<string> SQLTables);
}
public class Eco.Persistence.EcoCantGetNewObjectIdException : EcoException {
    public EcoCantGetNewObjectIdException(string message);
    public EcoCantGetNewObjectIdException(string message, Exception innerException);
}
public class Eco.Persistence.FormerNamesHandler : object {
    private Dictionary`2<string, List`1<string>> classNames;
    private static string memberFormatMask;
    private Dictionary`2<string, List`1<string>> memberNames;
    private void InternalAddFormerClassName(string name1, string name2);
    public void AddFormerClassName(string className, string formerName);
    private void InternalAddFormerMemberName(string className, string memberName1, string memberName2);
    public void AddFormerMemberName(string className, string memberName, string formerName);
    public IList`1<string> FormerClassNames(string className);
    public IList`1<string> FormerMemberNames(string className, string memberName);
}
public class Eco.Persistence.GetDateTimeDelegate : MulticastDelegate {
    public GetDateTimeDelegate(object object, IntPtr method);
    public virtual DateTime Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual DateTime EndInvoke(IAsyncResult result);
}
public interface Eco.Persistence.IAttributemapping {
    public abstract virtual String[] ColumnNames(string name);
    public abstract virtual String[] ColumnTypes(int length);
    public abstract virtual String[] DefaultDbValues(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public abstract virtual void ValueToParameters(object value, IDataParameter[] parameters);
    public abstract virtual object ColumnsToValue(Object[] columnValues);
    public abstract virtual bool IsEqual(object value, Object[] columnValues);
}
public interface Eco.Persistence.IAutoHookable {
    public abstract virtual bool CanHookup(Component component);
    public abstract virtual void AutoHookup(Component component);
    public abstract virtual bool IsHookedUpTo(Component component);
}
public interface Eco.Persistence.IAutoIncAttributemapping {
    public abstract virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public interface Eco.Persistence.IConfigureCleanPS {
    public abstract virtual void InstallExternalSystemTables(IList`1<string> tableNames);
    public abstract virtual IList`1<string> DetermineTablesToDelete(IList`1<string> allTables, IList`1<string> knownTables, IList`1<string> SQLTables);
}
public interface Eco.Persistence.ICustomOrderByMapping {
    public abstract virtual string GetOrderableColumn(string column);
}
public enum Eco.Persistence.IdAllocationMode : Enum {
    public int value__;
    public static IdAllocationMode FromAttributes;
    public static IdAllocationMode PreUpdate;
    public static IdAllocationMode PostUpdate;
}
public interface Eco.Persistence.IDBEvolutor {
    public abstract virtual void CalculateScript();
    public abstract virtual String[] GenerateDbScript();
    public abstract virtual String[] GenerateMappingScript();
    public abstract virtual String[] GenerateWarnings();
    public abstract virtual String[] GenerateErrors();
    public abstract virtual String[] GenerateExecutedStatements();
    public abstract virtual void ExecuteScript();
    public abstract virtual FormerNamesHandler GetFormerNamesHandler();
}
public interface Eco.Persistence.IDefaultReverseMapping {
}
public interface Eco.Persistence.IGenericSingleColumnAttributemapping {
    public abstract virtual object ColumnToValue(object columnValue, Type expectedType);
}
public interface Eco.Persistence.IKeyMapper {
    public abstract virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    public abstract virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public abstract virtual int ColumnCount();
    public abstract virtual void ReserveId();
    public abstract virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
    public abstract virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public abstract virtual void InitializePSDescriptions(IDatabaseDefinition db);
    public abstract virtual void InitializeDatabase(IDatabase db);
    public abstract virtual void InitializeDatabaseScript(IList`1<string> script);
    public abstract virtual IdAllocationMode GetIdAllocationMode();
    public abstract virtual string ColumnType(ArrayList KeyMappers, int columnNum);
    public abstract virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    public abstract virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns);
    public abstract virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
    public abstract virtual string IdToWhereFragment(ObjectId id, IParameterized parameterized, IList`1<string> idColumns);
    public abstract virtual string IdToWhereFragment(ObjectId id, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
}
public interface Eco.Persistence.INonBooleanBooleanMapping {
    public string TrueString { get; }
    public abstract virtual string get_TrueString();
}
public interface Eco.Persistence.INumericAttributeMapping {
    public abstract virtual string ColumnType(int precision, int scale);
}
public interface Eco.Persistence.IOptimisticLockHandler {
    public abstract virtual OptimisticLockingPrecondition CreatePrecondition(IEnumerable`1<Locator> locators);
}
public interface Eco.Persistence.IPersistenceMapper {
    public bool SupportsSync { get; }
    public SyncVersion CurrentSyncVersion { get; }
    public abstract virtual void Fetch(ObjectIdList idList, Datablock& datablock, Int32[] memberIdList, FetchStrategy fetchStrategy);
    public abstract virtual void FetchIDListWithCondition(AbstractCondition condition, ObjectIdList& result, int maxResults, int offset);
    public abstract virtual void FetchDatablockWithCondition(AbstractCondition condition, Datablock& result, int maxResults, int offset);
    public abstract virtual void VersionForTime(DateTime clockTime, Int32& version);
    public abstract virtual void TimeForVersion(int version, DateTime& clockTime);
    public abstract virtual bool get_SupportsSync();
    public abstract virtual void Update(Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    public abstract virtual void GetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, DBChangeCollection& changes, SyncVersion& lastSyncVersion);
    public abstract virtual SyncVersion get_CurrentSyncVersion();
}
public interface Eco.Persistence.IPersistenceMapperDb {
    public abstract virtual IDBEvolutor GetEvolutor(ITypeSystemService typeSystemService);
    public abstract virtual void ReturnEvolutor(IDBEvolutor evolutor);
    public abstract virtual void CreateDatabaseSchema(ITypeSystemService typeSystemService, IConfigureCleanPS configureCleanPS);
}
public interface Eco.Persistence.IPersistencemapperProvider {
    public abstract virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public abstract virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
public interface Eco.Persistence.IPersistenceMapperWithIDatabase {
    public abstract virtual void Fetch(IDatabaseCollection databases, ObjectIdList idList, Datablock& datablock, Int32[] memberIdList, FetchStrategy fetchStrategy);
    public abstract virtual void FetchIDListWithCondition(IDatabaseCollection databases, AbstractCondition condition, ObjectIdList& result, int maxResults, int offset);
    public abstract virtual void FetchDatablockWithCondition(IDatabaseCollection databases, AbstractCondition condition, Datablock& result, int maxResults, int offset);
    public abstract virtual void Update(IDatabaseCollection databases, Datablock datablock, UpdatePrecondition Precondition, IdTranslationList& translationList, Int32& version, UpdateResult& result, SyncVersion& syncVersion, ISyncSink syncSink);
    public abstract virtual void VersionForTime(IDatabase database, DateTime clockTime, Int32& Version);
    public abstract virtual void TimeForVersion(IDatabase database, int version, DateTime& clockTime);
}
public interface Eco.Persistence.ISingleColumnAttributemapping {
    public abstract virtual string ColumnName(string name);
    public abstract virtual string ColumnType(int length);
    public abstract virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public abstract virtual void ValueToParameter(object value, IDataParameter parameter);
    public abstract virtual void StringToParameter(string value, IDataParameter parameter);
    public abstract virtual object ColumnToValue(object columnValue);
    public abstract virtual bool IsEqual(object value, object columnValue);
    public abstract virtual Type ValueType();
}
public interface Eco.Persistence.ISyncSink {
    public object SyncRoot { get; }
    public abstract virtual object get_SyncRoot();
    public abstract virtual SyncVersion Submit(CommitBlock commitBlock, object operationsParams, IEcoTypeSystem typeSystem);
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.Persistence.OptimisticLockingPrecondition")]
public class Eco.Persistence.ModelChecksumPrecondition : UpdatePrecondition {
    private int m_modelChecksum;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SuspectExternalInvalidateRunNoUpdate>k__BackingField;
    [DataMemberAttribute]
public int ModelChecksum { get; public set; }
    [DataMemberAttribute]
public bool SuspectExternalInvalidateRunNoUpdate { get; public set; }
    public int get_ModelChecksum();
    public void set_ModelChecksum(int value);
    [CompilerGeneratedAttribute]
public bool get_SuspectExternalInvalidateRunNoUpdate();
    [CompilerGeneratedAttribute]
public void set_SuspectExternalInvalidateRunNoUpdate(bool value);
}
[DataContractAttribute]
public abstract class Eco.Persistence.OclCondition : AbstractCondition {
    private string m_Expression;
    private ObjectIdList m_Context;
    [DataMemberAttribute]
public string Expression { get; public set; }
    [DataMemberAttribute]
public ObjectIdList Context { get; public set; }
    public int ExternalVariableCount { get; }
    public OclCondition(int classId, string expression);
    public string get_Expression();
    public void set_Expression(string value);
    public ObjectIdList get_Context();
    public void set_Context(ObjectIdList value);
    public abstract virtual int get_ExternalVariableCount();
    public abstract virtual IExternalVariable GetExternalVariable(int index);
}
[DataContractAttribute]
public class Eco.Persistence.OkResult : UpdateResult {
    public bool Failed { get; }
    public string FailureReason { get; }
    public virtual bool get_Failed();
    public virtual string get_FailureReason();
}
[DataContractAttribute]
public class Eco.Persistence.OptimisticLockingPrecondition : ModelChecksumPrecondition {
    private Datablock m_Datablock;
    [DataMemberAttribute]
public Datablock Datablock { get; public set; }
    public bool HasOptimisticLocks { get; }
    public Datablock get_Datablock();
    public void set_Datablock(Datablock value);
    public bool get_HasOptimisticLocks();
}
[DataContractAttribute]
public class Eco.Persistence.OptimisticLockingResult : UpdateResult {
    private Datablock m_Conflicts;
    [DataMemberAttribute]
public Datablock Conflicts { get; public set; }
    public bool Failed { get; }
    public string FailureReason { get; }
    public Datablock get_Conflicts();
    public void set_Conflicts(Datablock value);
    public virtual bool get_Failed();
    public virtual string get_FailureReason();
}
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceMapper", "ComponentCategoryPersistence")]
public abstract class Eco.Persistence.PersistenceMapper : Component {
    public abstract virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public abstract virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
public enum Eco.Persistence.PsMode : Enum {
    public int value__;
    public static PsMode ObjectList;
    public static PsMode Element;
    public static PsMode Tuple;
}
[DataContractAttribute]
public class Eco.Persistence.SyncVersion : object {
    private int m_Version;
    private int m_BlockInnerIndex;
    private bool m_IncompleteFetch;
    private Guid m_Guid;
    private static SyncVersion c_None;
    [DataMemberAttribute]
public int Version { get; public set; }
    [DataMemberAttribute]
public int BlockInnerIndex { get; public set; }
    [DataMemberAttribute]
public bool IncompleteFetch { get; public set; }
    [DataMemberAttribute]
public Guid Guid { get; public set; }
    public static SyncVersion None { get; }
    public SyncVersion(int version, Guid guid);
    private static SyncVersion();
    public int get_Version();
    public void set_Version(int value);
    public int get_BlockInnerIndex();
    public void set_BlockInnerIndex(int value);
    public bool get_IncompleteFetch();
    public void set_IncompleteFetch(bool value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public static SyncVersion get_None();
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.Persistence.OptimisticLockingPrecondition")]
[KnownTypeAttribute("Eco.Persistence.ModelChecksumPrecondition")]
public abstract class Eco.Persistence.UpdatePrecondition : object {
}
[DataContractAttribute]
[KnownTypeAttribute("Eco.Persistence.OkResult")]
[KnownTypeAttribute("Eco.Persistence.OptimisticLockingResult")]
public abstract class Eco.Persistence.UpdateResult : object {
    public bool Failed { get; }
    public string FailureReason { get; }
    public abstract virtual bool get_Failed();
    public abstract virtual string get_FailureReason();
}
public abstract class Eco.Persistence.VersionConst : object {
    public static int NonVersioned;
    public static int CurrentVersion;
}
public static class Eco.Services.AsyncServiceSupportThreadInfo : object {
    [ThreadStaticAttribute]
private static bool _InAsyncThreadOrTheMainThreadInNonAsyncAppSoYouCanNeverGiveUp;
    [ThreadStaticAttribute]
private static int _LocksLostForThisThread;
    public static bool InAsyncThreadOrTheMainThreadInNonAsyncAppSoYouCanNeverGiveUp { get; public set; }
    public static int LocksLostForThisThread { get; public set; }
    private static AsyncServiceSupportThreadInfo();
    public static bool get_InAsyncThreadOrTheMainThreadInNonAsyncAppSoYouCanNeverGiveUp();
    public static void set_InAsyncThreadOrTheMainThreadInNonAsyncAppSoYouCanNeverGiveUp(bool value);
    public static int get_LocksLostForThisThread();
    public static void set_LocksLostForThisThread(int value);
}
public class Eco.Services.BusinessDeleteServiceEventArgs : EventArgs {
    public string Message;
    public bool AskUserIfGoOn;
    public bool UserSaysGoOn;
    public IAssociationEnd AssociationEnd;
    public IProperty Member;
    public BusinessDeleteRuleEnum BusinessDeleteSetting;
    public IObject BrokenDeleteConstraintObject;
    public ErrorLevel BrokenDeleteConstraintErrorLevel;
    public IConstraint BrokenDeleteConstraint;
}
[ComVisibleAttribute("True")]
[GuidAttribute("F46A3737-6D2B-471B-B795-5B57B69D0CB4")]
public enum Eco.Services.ChangeActionKind : Enum {
    public int value__;
    public static ChangeActionKind Ignore;
    public static ChangeActionKind Discard;
    public static ChangeActionKind Keep;
    public static ChangeActionKind Verify;
    public static ChangeActionKind Reread;
    public static ChangeActionKind Undecided;
}
[ComVisibleAttribute("True")]
[GuidAttribute("769CF26F-D3FD-414A-9CE8-C44B4781DF8C")]
public enum Eco.Services.ChangeKind : Enum {
    public int value__;
    public static ChangeKind MemberChanged;
    public static ChangeKind ObjectCreated;
    public static ChangeKind ObjectDeleted;
    public static ChangeKind LinkConflict;
    public static ChangeKind All;
}
public class Eco.Services.ContextFullHttpClientServiceArgs : EventArgs {
    public string SessionKey;
    public object CreatedHttpClientReturned;
}
[DefaultMemberAttribute("Item")]
public class Eco.Services.DebugSettingsStack : object {
    private Stack`1<KeyValuePair`2<string, object>> settingsStack;
    public static string FeatureIndexSetting;
    public static string SubscriberSetting;
    public static string WrapperIDsToShow;
    public static string ShowWrapperSummary;
    public static string ShowOclDetails;
    public static string CollectEcoSpaceDetails;
    public static string ShowEcoSpaceDerivedMembers;
    public static string ShowObjectDetails;
    public static string ShowSubscriptionsDetails;
    public static string ObjectFilter;
    public object Item { get; }
    public void Push(KeyValuePair`2<string, object> keyValuePair);
    public void Push(string key, object value);
    public KeyValuePair`2<string, object> Pop();
    public object GetValue(string key);
    public bool GetBoolValue(string key);
    public object get_Item(string key);
    public bool Contains(string key);
    public DebugSettingsStack Clone();
}
public class Eco.Services.DownloadTemplateFromUrlArgs : EventArgs {
    public string UrlToDownload;
    public Stream StreamToFill;
}
public class Eco.Services.EcoRuntimeInformation : object {
    private bool disposedValue;
    public static int MBsNeededBeforeRunningOutOfMemory { get; }
    public static bool RunningOutOfMemory { get; }
    public static int get_MBsNeededBeforeRunningOutOfMemory();
    public static bool get_RunningOutOfMemory();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Eco.Services.EcoServiceHelper : object {
    public static IEcoServiceProvider SafeGetServiceProvider(object obj);
    public static IEcoServiceProvider GetServiceProvider(object obj);
    public static IActionLanguageService GetActionLanguageService(object obj);
    public static IActionLanguageTypeService GetActionLanguageTypeService(object obj);
    public static IDirtyListService GetDirtyListService(object obj);
    public static IDirtyListForContextService GetDirtyListForContextService(object obj);
    public static IExtentService GetExtentService(object obj);
    public static IEcoSpaceService GetEcoSpaceService(object obj);
    public static IExternalIdService GetExternalIdService(object obj);
    public static IObjectFactoryService GetObjectFactoryService(object obj);
    public static IOclPsService GetOclPsService(object obj);
    public static IOclPsTypeService GetOclPsTypeService(object obj);
    public static IOclService GetOclService(object obj);
    public static IOclTypeService GetOclTypeService(object obj);
    public static IPersistenceService GetPersistenceService(object obj);
    public static IStateService GetStateService(object obj);
    public static ITypeService GetTypeService(object obj);
    public static ITypeSystemService GetTypeSystemService(object obj);
    public static IUndoService GetUndoService(object obj);
    public static IVariableFactoryService GetVariableFactoryService(object obj);
    public static IVersionService GetVersionService(object obj);
    public static ICacheContentService GetCacheContentService(object obj);
    public static IAsyncSupportService GetAsyncSupportService(object obj);
    public static T GetEcoService(object obj);
}
[ComVisibleAttribute("True")]
[GuidAttribute("C414A3EB-2B7B-42DE-B3AD-62F2A7D26662")]
public interface Eco.Services.IActionLanguageService {
    public bool SideEffectsTurnedOff { get; }
    public abstract virtual void Execute(string expression);
    public abstract virtual void Execute(string expression, IExternalVariableList variableList);
    public abstract virtual void Execute(IElement root, string expression);
    public abstract virtual void Execute(IElement root, string expression, IExternalVariableList variableList);
    public abstract virtual IElement Evaluate(string expression);
    public abstract virtual IElement Evaluate(string expression, IExternalVariableList variableList);
    public abstract virtual IElement Evaluate(IElement root, string expression);
    public abstract virtual IElement Evaluate(IElement root, string expression, IExternalVariableList variableList);
    public abstract virtual IElement Evaluate(IElement root, IClassifier context, string expression, IExternalVariableList vars);
    public abstract virtual void TurnOffAllModelSideEffects(bool turnOff);
    public abstract virtual bool get_SideEffectsTurnedOff();
}
public interface Eco.Services.IActionLanguageTypeService {
}
public interface Eco.Services.IAsyncSupportService {
    public List`1<Action> AsyncTasksTodo { get; }
    public List`1<Exception> AsyncExceptions { get; }
    public Action CurrentAsyncTask { get; }
    public Thread ThreadForAsyncOperations { get; }
    public bool CurrentContextIsAsync { get; }
    public bool CurrentContextIsTrulyAsync { get; }
    public bool AsyncHandlingEnabled { get; }
    public bool AsyncPriorityAboveNormal { get; public set; }
    public bool AllowFetchingFromMainThreadTemporarilyToAllowPSEvalFromOCL { get; public set; }
    public object InsideCriticalEvalMonitor { get; }
    public IEcoServiceProvider ServiceProvider { get; }
    public abstract virtual void TurnOnAsyncHandling();
    public abstract virtual void TurnOffAsyncHandling();
    public abstract virtual void PerformTaskAsync(Action task);
    public abstract virtual void PerformTaskNowIfInAsyncThread(Action task);
    public abstract virtual void DispatchTaskToMainThread(Action task);
    public abstract virtual void DispatchTaskToMainThread(Action task, bool asyncexecution);
    public abstract virtual List`1<Action> get_AsyncTasksTodo();
    public abstract virtual List`1<Exception> get_AsyncExceptions();
    public abstract virtual Action get_CurrentAsyncTask();
    public abstract virtual Thread get_ThreadForAsyncOperations();
    public abstract virtual bool get_CurrentContextIsAsync();
    public abstract virtual bool get_CurrentContextIsTrulyAsync();
    public abstract virtual bool get_AsyncHandlingEnabled();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncExceptionsEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncExceptionsEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncQueueHasFormedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncQueueHasFormedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncQueueDissolvedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncQueueDissolvedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncQueueTickEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncQueueTickEvent(EventHandler value);
    public abstract virtual bool WrapTaskInStandardExceptionHandling(Action action);
    public abstract virtual void PerformTaskAsyncWaitUntilFinished(Action task);
    public abstract virtual void set_AsyncPriorityAboveNormal(bool value);
    public abstract virtual bool get_AsyncPriorityAboveNormal();
    public abstract virtual void ExecuteTaskDispatchedToMainThreadImmediately(bool yes);
    public abstract virtual DateTime GetTimeForLastAsyncThreadLoop();
    public abstract virtual bool WaitForWorkDoneWithTimeout(int ms);
    public abstract virtual bool get_AllowFetchingFromMainThreadTemporarilyToAllowPSEvalFromOCL();
    public abstract virtual void set_AllowFetchingFromMainThreadTemporarilyToAllowPSEvalFromOCL(bool value);
    public abstract virtual bool RemoveTasksForObject(object objectToRemove);
    public abstract virtual object get_InsideCriticalEvalMonitor();
    public abstract virtual void MainThreadInExpressionEnter();
    public abstract virtual void MainThreadInExpressionExit();
    public abstract virtual IEcoServiceProvider get_ServiceProvider();
}
public interface Eco.Services.IAutoSubscriptionContext {
    public ISubscriber Subscriber { get; }
    public abstract virtual ISubscriber get_Subscriber();
}
public interface Eco.Services.IAutoSubscriptionService {
    public IAutoSubscriptionContext ActiveContext { get; }
    public ISubscriber ActiveSubscriber { get; }
    public abstract virtual IAutoSubscriptionContext StartSubscribe(ISubscriber subscriber, string AutoSubscriberTagname);
    public abstract virtual IAutoSubscriptionContext get_ActiveContext();
    public abstract virtual ISubscriber get_ActiveSubscriber();
}
public interface Eco.Services.IBusinessDeleteService {
    public abstract virtual void CheckOneAssociationEnd(IAssociationEnd associationEnd, IProperty member, Boolean& goAheadAndDelete, String& reasontext, bool deleteIsInProgress);
    public abstract virtual void CheckDeleteConstraints(IObject io, Boolean& goAheadAndDelete, String& reasontext, IConstraint& brokenconstraint, bool deleteIsInProgress);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnInformTheUser(EventHandler`1<BusinessDeleteServiceEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnInformTheUser(EventHandler`1<BusinessDeleteServiceEventArgs> value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("4578FF3C-0BA2-4172-A9CA-D5564C4C29B2")]
public interface Eco.Services.ICacheContentService {
    public ICache Cache { get; }
    public abstract virtual IObjectInstance GetObject(object key, IClass c);
    public abstract virtual IObjectInstance GetObject(object key, Type t);
    public abstract virtual T GetObject(object key);
    public abstract virtual IObjectInstance GetObject(object key, string className);
    public abstract virtual object GetKey(IObject obj);
    public abstract virtual void SetAttribute(IObject obj, string attributeName, object value);
    public abstract virtual void SetAttribute(IObject obj, IAttribute attribute, object value);
    public abstract virtual void SetAttribute(IObject obj, int loopbackIndex, object value);
    public abstract virtual void SetSinglelink(IObject obj, string assocEndName, IObject value, int orderNo);
    public abstract virtual void SetSinglelink(IObject obj, IAssociationEnd assocEnd, IObject value, int orderNo);
    public abstract virtual void SetSinglelink(IObject obj, int loopbackIndex, IObject value, int orderNo);
    public abstract virtual void SetMultilink(IObject obj, string assocEndName, IEnumerable value);
    public abstract virtual void SetMultilink(IObject obj, IAssociationEnd assocEnd, IEnumerable value);
    public abstract virtual void SetMultilink(IObject obj, int loopbackIndex, IEnumerable value);
    public abstract virtual void SetIndirectMultilink(IObject obj, string assocEndName, IEnumerable value);
    public abstract virtual void SetIndirectMultilink(IObject obj, IAssociationEnd assocEnd, IEnumerable value);
    public abstract virtual void SetIndirectMultilink(IObject obj, int loopbackIndex, IEnumerable value);
    public abstract virtual void SetIndirectSinglelink(IObject obj, string assocEndName, IObjectPair value);
    public abstract virtual void SetIndirectSinglelink(IObject obj, IAssociationEnd assocEnd, IObjectPair value);
    public abstract virtual void SetIndirectSinglelink(IObject obj, int loopbackIndex, IObjectPair value);
    public abstract virtual void SetMultilinkCurrent(IObject obj, string assocEndName);
    public abstract virtual void SetMultilinkCurrent(IObject obj, IAssociationEnd assocEnd);
    public abstract virtual void SetMultilinkCurrent(IObject obj, int loopbackIndex);
    public abstract virtual void SetExtentCurrent(IClass c);
    public abstract virtual void SetExtentCurrent(Type t);
    public abstract virtual void SetExtentCurrent(string className);
    public abstract virtual void ApplyDatablock(Datablock datablock);
    public abstract virtual ICache get_Cache();
    public abstract virtual IObjectRepresentationProvider GetObjectRepresentationProvider();
    public abstract virtual void SendStructuralFeatureChanged(IObject io, IStructuralFeature sf);
}
[ComVisibleAttribute("True")]
[GuidAttribute("57155F05-7FD9-427E-8DC5-175A667076DB")]
public interface Eco.Services.IChange {
    public ChangeKind Kind { get; }
    public ChangeActionKind Action { get; public set; }
    public bool Applied { get; }
    public IElement ChangedElement { get; }
    public IClass ChangedElementType { get; }
    public bool IsDirectConflict { get; }
    public abstract virtual ChangeKind get_Kind();
    public abstract virtual ChangeActionKind get_Action();
    public abstract virtual void set_Action(ChangeActionKind value);
    public abstract virtual bool get_Applied();
    public abstract virtual void Apply();
    public abstract virtual IElement get_ChangedElement();
    public abstract virtual IClass get_ChangedElementType();
    public abstract virtual bool get_IsDirectConflict();
}
public interface Eco.Services.IContextFullHttpClientService {
    public abstract virtual void RequestHttpClient(string url, string user, string pwd, Object& untypedHttpClient, String& sessionKey);
    public abstract virtual void CloseHttpClient(string sessionKey, object untypedHttpClient);
}
public interface Eco.Services.IDeepCloneService {
    public abstract virtual IObject DeepClone(IObject rootobject, string viewModelName);
    public abstract virtual bool Transform(IObject rootobject, string viewModelName, IObject destinationObject);
    public abstract virtual string AsTaJson(IObject obj, string viewModelName, bool skipempties);
    public abstract virtual string ApplyTaJson(IObject obj, string viewModelName, string thejson);
    public abstract virtual string MergeTaJson(IObject obj, string viewModelName, string thejson);
    public abstract virtual string JsonGetProp(string json, string propertyname);
}
public interface Eco.Services.IDirtyListForContextService {
    public abstract virtual void EnterContext(Guid guid);
    public abstract virtual void LeaveContext(Guid guid);
    public abstract virtual void ForgetAboutContext(Guid guid);
    public abstract virtual Guid GetCurrentContext();
    public abstract virtual IObjectList GetContextDirtyList(Guid guid);
}
[ComVisibleAttribute("True")]
[GuidAttribute("3C8B7CC2-B8B5-45BA-B7CE-A0CE7FDD9718")]
public interface Eco.Services.IDirtyListService {
    public abstract virtual IObjectList AllDirtyObjects();
    public abstract virtual bool HasDirtyObjects();
    public abstract virtual void Subscribe(ISubscriber subscriber);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DirtyListChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DirtyListChanged(EventHandler value);
}
public interface Eco.Services.IEcoSpaceService {
    public abstract virtual IEcoSpaceService GetEcoSpace();
}
public interface Eco.Services.IExecutionAndDebug {
    public abstract virtual void PruneResources(bool LowMemoryCondition);
    public abstract virtual void CleanForFree();
    public abstract virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
}
[ComVisibleAttribute("True")]
[GuidAttribute("D56C0231-09A1-4539-92FB-C01CB607B4BB")]
public interface Eco.Services.IExtentService {
    public abstract virtual IObjectList AllInstances(IClass c);
    [ComVisibleAttribute("False")]
public abstract virtual IObjectList AllInstances(Type t);
    public abstract virtual IObjectList AllInstances(string className);
    public abstract virtual IEcoList`1<T> AllInstances();
    public abstract virtual IObjectList AllLoadedInstances(IClass c);
    [ComVisibleAttribute("False")]
public abstract virtual IObjectList AllLoadedInstances(Type t);
    public abstract virtual IObjectList AllLoadedInstances(string className);
    public abstract virtual IEcoList`1<T> AllLoadedInstances();
    public abstract virtual void SubscribeToObjectAdded(ISubscriber subscriber, IClass c);
    [ComVisibleAttribute("False")]
public abstract virtual void SubscribeToObjectAdded(ISubscriber subscriber, Type t);
    public abstract virtual void SubscribeToObjectAdded(ISubscriber subscriber, string className);
    public abstract virtual void SubscribeToObjectRemoved(ISubscriber subscriber, IClass c);
    [ComVisibleAttribute("False")]
public abstract virtual void SubscribeToObjectRemoved(ISubscriber subscriber, Type t);
    public abstract virtual void SubscribeToObjectRemoved(ISubscriber subscriber, string className);
    public abstract virtual void Unload(IClass c);
    public abstract virtual IObjectList AllInstancesAtTime(IClass c, int version);
    public abstract virtual bool IsAllKnownFetched(IClass c);
}
[ComVisibleAttribute("True")]
[GuidAttribute("62832CF2-3E97-4AE8-B432-6585C3AD80FC")]
public interface Eco.Services.IExternalIdService {
    public abstract virtual string IdForObject(IEcoObject obj);
    public abstract virtual IObjectInstance ObjectForId(string id);
    public abstract virtual IObjectInstance ObjectForIdSeperateClassInfo(string id, IClass theclass);
    public abstract virtual IObjectInstance ObjectForGuidIfClassHasGuidProperty(string id, IClass theclass);
    public abstract virtual IObjectInstance ObjectForUnkownId(string id, IClass theclass);
    public abstract virtual IObjectList ObjectsForIds(List`1<string> idlist);
}
public interface Eco.Services.IExternalLateBoundService {
    public abstract virtual IElement Execute(IClassifier classifier, IObject theobject, IMethod method, IModifiableVariableList variableList);
}
public interface Eco.Services.IMDrivenMiscSettings {
    public bool GlobalReadOnlyMode { get; }
    public bool GlobalToolbarMode { get; }
    public bool GlobalHideActionOnDisable { get; }
    public bool GlobalCenteredPopUp { get; }
    public bool GlobalBlazorClient { get; }
    public bool GlobalNavigateOnDoubleClickWithoutMenu { get; }
    public bool GlobalReadOnlyModeUseSaveAndLock { get; }
    public abstract virtual bool get_GlobalReadOnlyMode();
    public abstract virtual bool get_GlobalToolbarMode();
    public abstract virtual bool get_GlobalHideActionOnDisable();
    public abstract virtual bool get_GlobalCenteredPopUp();
    public abstract virtual bool get_GlobalBlazorClient();
    public abstract virtual bool get_GlobalNavigateOnDoubleClickWithoutMenu();
    public abstract virtual bool get_GlobalReadOnlyModeUseSaveAndLock();
}
public interface Eco.Services.IMDrivenUITranslation {
    public string DefaultLanguage { get; }
    public abstract virtual string get_DefaultLanguage();
    public abstract virtual void SetDefaultLanguage(string lang);
    public abstract virtual string Translate(string translatable);
    public abstract virtual string TranslateToLang(string translatable, string lang);
    public abstract virtual void SpoolMissedTranslations();
    public abstract virtual void ResetCache();
    public abstract virtual DateTime CacheTime();
}
public abstract class Eco.Services.Impl.ExternalIdServiceBase : EcoSpacePartWithTypeSystem {
    private static char separator;
    private Guid m_Guid;
    private List`1<Locator> m_ExposedInternalLocators;
    private Dictionary`2<Locator, int> m_InternalIndexByLocator;
    private ICache m_Cache;
    private IObjectRepresentationProvider m_ObjectRepresentationProvider;
    private IPersistenceHandler m_PersistenceHandler;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IAsyncSupportService <AsyncSupportService>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEcoServiceProvider <ServiceProvider>k__BackingField;
    public ICache Cache { get; public set; }
    public IObjectRepresentationProvider ObjectRepresentationProvider { get; public set; }
    public IPersistenceHandler PersistenceHandler { get; public set; }
    public IAsyncSupportService AsyncSupportService { get; public set; }
    public IEcoServiceProvider ServiceProvider { get; public set; }
    public ExternalIdServiceBase(IEcoTypeSystem typeSystem);
    private static ExternalIdServiceBase();
    public void SetSeparator(char newSeparator);
    public ICache get_Cache();
    public void set_Cache(ICache value);
    public IObjectRepresentationProvider get_ObjectRepresentationProvider();
    public void set_ObjectRepresentationProvider(IObjectRepresentationProvider value);
    public IPersistenceHandler get_PersistenceHandler();
    public void set_PersistenceHandler(IPersistenceHandler value);
    protected abstract virtual string GetExternalClassId(IObject obj, Locator loc, ObjectId id);
    protected abstract virtual int GetTopSortedIndex(string classId);
    protected virtual void DoActivate();
    protected virtual void DoDeactivate();
    protected virtual void DoDeserialize(Stream source, BinaryReader reader);
    protected virtual void DoSerialize(Stream target, EcoSpaceSerializationConfig config);
    private string GetBase64BinaryForId(DefaultId id);
    public string IdForObject(IObject obj);
    private sealed virtual override string Eco.Services.IExternalIdService.IdForObject(IEcoObject obj);
    private object GetObjectIdKeyFromBase64Binary(string base64binary);
    private object GetObjectIdKeyFromSoapEnvelope(string soapenvelope);
    public virtual IObjectInstance ObjectForIdSeperateClassInfo(string id, IClass theclass);
    private static bool IsGuid(string possibleGuid, Guid& guid);
    private sealed virtual override IObjectInstance Eco.Services.IExternalIdService.ObjectForUnkownId(string id, IClass theclass);
    private sealed virtual override IObjectInstance Eco.Services.IExternalIdService.ObjectForGuidIfClassHasGuidProperty(string id, IClass theclass);
    private sealed virtual override IObjectList Eco.Services.IExternalIdService.ObjectsForIds(List`1<string> idlist);
    private sealed virtual override IObjectInstance Eco.Services.IExternalIdService.ObjectForId(string id);
    private IObjectInstance internalObjectForIdCheckAndCleanButDontFecthIfNotAlreadyFetched(string id, ObjectId& cleanid, Boolean& needfetchofcleanid);
    [CompilerGeneratedAttribute]
public IAsyncSupportService get_AsyncSupportService();
    [CompilerGeneratedAttribute]
public void set_AsyncSupportService(IAsyncSupportService value);
    [CompilerGeneratedAttribute]
public IEcoServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IEcoServiceProvider value);
    public virtual void CleanForFree();
}
public class Eco.Services.InvalidateByRealtimeDoneArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Locator <Locator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IStructuralFeature <Feature>k__BackingField;
    public Locator Locator { get; public set; }
    public IStructuralFeature Feature { get; public set; }
    [CompilerGeneratedAttribute]
public Locator get_Locator();
    [CompilerGeneratedAttribute]
public void set_Locator(Locator value);
    [CompilerGeneratedAttribute]
public IStructuralFeature get_Feature();
    [CompilerGeneratedAttribute]
public void set_Feature(IStructuralFeature value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("68739D28-86C9-41C7-A884-0A769528CACF")]
public interface Eco.Services.IObjectFactoryService {
    public abstract virtual IObjectInstance CreateNewObject(IClass c);
    [ComVisibleAttribute("False")]
public abstract virtual IObjectInstance CreateNewObject(Type t);
    public abstract virtual IObjectInstance CreateNewObject(string className);
    public abstract virtual IObjectInstance CreateNewLinkObject(IEcoObject end1, IEcoObject end2);
    public abstract virtual IObjectInstance CreateNewLinkObject(IEcoObject end1, IEcoObject end2, IAssociation assoc);
    public abstract virtual object CreateNewLinkObject(IEcoObject end1, IEcoObject end2, Type assocClass);
    public abstract virtual void DeleteObjects(IEnumerable`1<IEcoObject> list);
}
[ComVisibleAttribute("True")]
[GuidAttribute("86F79502-6257-40B4-868D-F867B16A7DFD")]
public interface Eco.Services.IOclPsService {
    public abstract virtual IObjectList Execute(string expression);
    public abstract virtual IObjectList Execute(string expression, int maxAnswers, int offset);
    public abstract virtual IObjectList Execute(IElement root, string expression);
    public abstract virtual IObjectList Execute(IElement root, IExternalVariableList variableList, string expression, int maxAnswers, int offset);
    public abstract virtual IObjectList ExpandDerivationsThenExecute(IElement root, IExternalVariableList variableList, string expression, int maxAnswers, int offset);
    public abstract virtual IElement GetValue(IElement root, IExternalVariableList variableList, string expression, int maxAnswers, int offset);
    public abstract virtual string ReturnPlatformQuery(IElement root, IExternalVariableList variableList, string expression);
    public abstract virtual string ReturnPlatformQueryValue(IElement root, IExternalVariableList variableList, string expression);
    public abstract virtual IElementCollection GetTuples(IElement root, IExternalVariableList variableList, string expression, int maxAnswers, int offset);
    public abstract virtual string ReturnPlatformQueryTuples(IElement root, IExternalVariableList variableList, string expression);
}
public interface Eco.Services.IOclPsTypeService {
}
[ComVisibleAttribute("True")]
[GuidAttribute("0688C213-5A24-4691-982D-6936BE8C83A4")]
public interface Eco.Services.IOclService {
    public abstract virtual IElement Evaluate(string expression);
    public abstract virtual IElement Evaluate(string expression, IExternalVariableList variableList);
    public abstract virtual IElement Evaluate(IElement root, string expression);
    public abstract virtual IElement Evaluate(IElement root, string expression, IExternalVariableList variableList);
    public abstract virtual IElement EvaluateAndSubscribe(IElement root, string expression, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber);
    public abstract virtual IElement EvaluateAndSubscribe(IElement root, IExternalVariableList variableList, string expression, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber);
    public abstract virtual IElement EvaluateAndSubscribe(IElement root, IClassifier rootType, string expression, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber);
    public abstract virtual IElement EvaluateAndSubscribe(IElement root, IClassifier rootType, IExternalVariableList variableList, string expression, ISubscriber reevaluateSubscriber, ISubscriber resubscribeSubscriber);
    public abstract virtual IElement GetDerivedElement(IElement root, string expression);
}
public interface Eco.Services.IOclTypeService {
}
public interface Eco.Services.IOpenDocumentService {
    public abstract virtual Byte[] AsByteArray(IObject vmroot, string viewModelName, String& reportname, String& reportDirectoryName);
    public abstract virtual string AsHtmlText(IObject vmroot, string viewModelName);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnOpenDocument(EventHandler`1<OpenDocumentArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnOpenDocument(EventHandler`1<OpenDocumentArgs> value);
    public abstract virtual void ExecuteOnOpenDocument(IObject vmroot, string viewModelName, Byte[] openDocumentData, string reportname, string reportDirectoryName, bool failed, string infoonfail);
    public abstract virtual bool CanAccess(IObject vmroot, string viewModelName);
    public abstract virtual void DownloadTemplateFromUrl(string templateurl, Stream templateStream);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDownloadTemplateFromUrl(EventHandler`1<DownloadTemplateFromUrlArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDownloadTemplateFromUrl(EventHandler`1<DownloadTemplateFromUrlArgs> value);
    public abstract virtual object GetSharedHttpClient();
    public abstract virtual void InitiateUserDownloadOfData(string filename, Byte[] bytes);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnInitiateUserDownloadOfData(EventHandler`1<OnInitiateUserDownloadOfDataArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnInitiateUserDownloadOfData(EventHandler`1<OnInitiateUserDownloadOfDataArgs> value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("E9DB2B3D-7A00-4625-B705-CEDA65CDDD27")]
public interface Eco.Services.IPersistenceService {
    public bool SupportsSync { get; }
    public bool IsPersistent { get; }
    public int PageSize { get; public set; }
    public DateTime LatestServerRestartDiscovered { get; }
    public abstract virtual void UpdateDatabaseWithList(IEnumerable`1<T> list);
    public abstract virtual bool get_SupportsSync();
    public abstract virtual void Refresh(bool fetchValues);
    public abstract virtual void RetrieveChanges();
    public abstract virtual void RetrieveChanges(DBChangeCollection& ignoredChanges);
    public abstract virtual IChange[] GetChanges();
    public abstract virtual void ApplyAllChanges();
    [ComVisibleAttribute("False")]
public abstract virtual IObjectList GetAllWithCondition(AbstractCondition condition);
    [ComVisibleAttribute("False")]
public abstract virtual IObjectList GetAllWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public abstract virtual IElement GetValueWithCondition(AbstractCondition condition, int maxAnswers, int offset, IClassifier resultType);
    public abstract virtual IElementCollection GetTuplesWithCondition(AbstractCondition condition, int maxAnswers, int offset, IClassifier resultType);
    public abstract virtual Datablock GetObjectsWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public abstract virtual void EnsureEnclosure(IObjectList objects);
    public abstract virtual void Unload(IEnumerable`1<T> objects);
    public abstract virtual void DiscardChanges(IEnumerable`1<T> objects);
    public abstract virtual bool IsLoaded(IEcoObject obj);
    public abstract virtual void EnsureRange(IObjectList objects, int fromIndex, int toIndex);
    public abstract virtual bool IsRangeEnsured(IObjectList objects, int fromIndex, int toIndex);
    public abstract virtual void EnsureObject(IObjectInstance obj);
    public abstract virtual IObjectList EnsureRelatedObjects(IEnumerable`1<T> objects, string memberName);
    public abstract virtual IObjectList EnsureRelatedObjects(IEnumerable`1<T> objects, IAssociationEnd associationEnd);
    public abstract virtual bool get_IsPersistent();
    public abstract virtual void set_PageSize(int value);
    public abstract virtual int get_PageSize();
    public abstract virtual void SuspectExternalUpdateInvalidate(IEnumerable`1<T> list);
    public abstract virtual DateTime get_LatestServerRestartDiscovered();
    public abstract virtual bool RefreshSafePeriodic(int secsapart);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InvalidationsDone(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InvalidationsDone(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InvalidateByRealtimeDone(EventHandler`1<InvalidateByRealtimeDoneArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InvalidateByRealtimeDone(EventHandler`1<InvalidateByRealtimeDoneArgs> value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("1CAEA52A-8DB8-407F-8916-4E3E4FA772CC")]
public interface Eco.Services.IStateService {
    public abstract virtual bool IsDirty(IEcoObject obj);
    public abstract virtual bool IsDirty(IProperty prop);
    public abstract virtual bool IsInvalid(IProperty prop);
    public abstract virtual bool IsNew(IEcoObject obj);
}
public interface Eco.Services.IStaticContext {
    public IEcoTypeSystem TypeSystem { get; }
    public IOclTypeService OclTypeService { get; }
    public IOclPsTypeService OclPsTypeService { get; }
    public IActionLanguageTypeService ActionLanguageTypeService { get; }
    public IExternalVariableList VariableList { get; }
    public IClassifier StaticUmlType { get; }
    public abstract virtual IEcoTypeSystem get_TypeSystem();
    public abstract virtual IOclTypeService get_OclTypeService();
    public abstract virtual IOclPsTypeService get_OclPsTypeService();
    public abstract virtual IActionLanguageTypeService get_ActionLanguageTypeService();
    public abstract virtual IExternalVariableList get_VariableList();
    public abstract virtual IClassifier get_StaticUmlType();
}
[ComVisibleAttribute("True")]
[GuidAttribute("621D7076-EB41-40A9-9D82-D7B42E1B122E")]
public interface Eco.Services.ITypeService {
    public IOclOperation[] InstalledOclOperations { get; }
    public abstract virtual IClassifier ExpressionType(string expression, IClassifier context, bool reRaise);
    public abstract virtual IClassifier ExpressionType(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual IFeature ExpressionFeatureInfo(string expression, IClassifier context, bool reRaise);
    public abstract virtual IFeature ExpressionFeatureInfo(string expression, IClassifier context, IExternalVariableList variableList, bool reRaise);
    public abstract virtual IStructuralFeature ExpressionModelInfo(string expression, IClassifier context, bool reRaise);
    public abstract virtual IStructuralFeature ExpressionModelInfo(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual bool ExpressionIsReadOnly(string expression, IClassifier context, bool reRaise);
    public abstract virtual bool ExpressionIsReadOnly(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual IOclOperation[] get_InstalledOclOperations();
    public abstract virtual void InstallOperation(IOclOperation operation);
    public abstract virtual void ClearCachedExpressions();
    public abstract virtual object ExpressionParseTree(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual string ExpandDerivationsInExpression(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual object ExpressionSyntacticParseTree(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList);
    public abstract virtual StringBuilder GetOCLUsageReport();
    public abstract virtual string ExpandDerivationsInExpressionExtractOrderBy(string expression, IClassifier context, bool reRaise, IExternalVariableList variableList, String& orderexpression);
}
[ComVisibleAttribute("True")]
[GuidAttribute("996CAAAD-1E83-4A72-92A2-602414E0EE51")]
public interface Eco.Services.ITypeSystemService {
    public IEcoTypeSystem TypeSystem { get; }
    public IEcoServiceProvider StaticEcoServices { get; }
    public abstract virtual IEcoTypeSystem get_TypeSystem();
    public abstract virtual IEcoServiceProvider get_StaticEcoServices();
}
[ComVisibleAttribute("True")]
[GuidAttribute("C095A4AE-15AD-4202-A549-C7E45C5CC634")]
public interface Eco.Services.IUndoBlock {
    public string Name { get; }
    public bool ContainsChanges { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_ContainsChanges();
    public abstract virtual IObjectList GetChangedObjects();
    public abstract virtual void Subscribe(ISubscriber subscriber);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[GuidAttribute("D2EFF866-03E5-4FD8-BA14-A56EA0BB827D")]
public interface Eco.Services.IUndoBlockList {
    public int Count { get; }
    public IUndoBlock Item { get; }
    public IUndoBlock Item { get; }
    public IUndoBlock TopBlock { get; }
    public abstract virtual void RenameBlock(string oldName, string newName);
    public abstract virtual bool RemoveBlock(string blockName);
    public abstract virtual void MoveToTop(string blockName);
    public abstract virtual int IndexOf(string blockName);
    public abstract virtual bool CanMergeBlock(int curIndex, int newIndex);
    public abstract virtual bool CanMoveBlock(int curIndex, int newIndex);
    public abstract virtual void MergeBlocks(string destinationBlockName, string sourceBlockName);
    public abstract virtual void MoveBlock(int curIndex, int newIndex);
    public abstract virtual int get_Count();
    public abstract virtual IUndoBlock get_Item(int index);
    public abstract virtual IUndoBlock get_Item(string name);
    public abstract virtual IUndoBlock get_TopBlock();
}
[ComVisibleAttribute("True")]
[GuidAttribute("5E6B6AEA-FD73-41EA-BA27-85F369F4FA6D")]
public interface Eco.Services.IUndoService {
    public IUndoBlockList UndoList { get; }
    public IUndoBlockList RedoList { get; }
    public bool IsInTransaction { get; }
    public int TransactionNesting { get; }
    public abstract virtual string GetUniqueBlockName(string suggestedName);
    public abstract virtual bool CanUndoBlock(string blockName);
    public abstract virtual bool CanRedoBlock(string blockName);
    public abstract virtual void UndoLatest();
    public abstract virtual void RedoLatest();
    public abstract virtual void UndoBlock(string blockName);
    public abstract virtual void RedoBlock(string blockName);
    public abstract virtual void StartUndoBlock(string blockName);
    public abstract virtual void StartUndoBlock();
    public abstract virtual void ClearAllUndoBlocks();
    public abstract virtual IUndoBlockList get_UndoList();
    public abstract virtual IUndoBlockList get_RedoList();
    public abstract virtual void StartTransaction();
    public abstract virtual void CommitTransaction();
    public abstract virtual void RollbackTransaction();
    public abstract virtual bool get_IsInTransaction();
    public abstract virtual int get_TransactionNesting();
}
[ComVisibleAttribute("True")]
[GuidAttribute("7FC6BFD9-9845-427E-BA10-C72FE0D46C5D")]
public interface Eco.Services.IVariableFactoryService {
    public IExternalVariableList EmptyVariableList { get; }
    public IObjectInstance NullReference { get; }
    public abstract virtual IElement CreateVariable(IClassifier classifier);
    [ComVisibleAttribute("False")]
public abstract virtual IElement CreateVariable(Type type);
    public abstract virtual IElement CreateVariable(string typeName);
    public abstract virtual IElement CreateConstant(IClassifier classifier, object asObject);
    public abstract virtual IElement CreateConstant(object asObject);
    public abstract virtual IObjectList CreateUntypedObjectList(bool allowDuplicates);
    public abstract virtual IObjectList CreateTypedObjectList(IClass umlClass, bool allowDuplicates);
    [ComVisibleAttribute("False")]
public abstract virtual IObjectList CreateTypedObjectList(Type type, bool allowDuplicates);
    public abstract virtual IElementCollection CreateUntypedElementCollection(bool allowDuplicates);
    public abstract virtual IModifiableVariableList CreateVariableList();
    public abstract virtual IModifiableVariableList CreateVariableList(string name, object valueAsObject);
    public abstract virtual IModifiableVariableList CreateVariableList(string name, IElement value);
    public abstract virtual IModifiableVariableList CreateVariableList(string name, IClassifier classifier);
    [ComVisibleAttribute("False")]
public abstract virtual IModifiableVariableList CreateVariableList(string name, Type type);
    public abstract virtual IExternalVariableList get_EmptyVariableList();
    public abstract virtual IObjectInstance get_NullReference();
    public abstract virtual IObjectInstance CreateTypedNullReference(IClass umlClass);
    public abstract virtual IElementCollection CreateTypedElementCollection(Type type, bool allowDuplicates);
}
[ComVisibleAttribute("True")]
[GuidAttribute("0E9B9C5D-20C4-45A7-B5A5-31FF5BD988EB")]
public interface Eco.Services.IVersionService {
    public int CurrentVersion { get; }
    public int MaxSavedVersion { get; }
    public abstract virtual IElement GetVersion(int version, IElement element);
    public abstract virtual int ElementVersion(IElement element);
    public abstract virtual int VersionAtTime(DateTime time);
    public abstract virtual DateTime TimeForVersion(int version);
    public abstract virtual int get_CurrentVersion();
    public abstract virtual int get_MaxSavedVersion();
    public abstract virtual AbstractCondition GetChangePointCondition(IObjectList objects, int startVersion, int stopVersion, String[] members);
    public abstract virtual AbstractCondition GetChangePointCondition(IObjectList objects, int startVersion, int stopVersion);
    public abstract virtual AbstractCondition GetChangePointCondition(IEcoObject obj, int startVersion, int stopVersion, String[] members);
    public abstract virtual AbstractCondition GetChangePointCondition(IEcoObject obj, int startVersion, int stopVersion);
    public abstract virtual bool SystemWideVersionNumberInUse();
    public abstract virtual int GetSystemWideVersionNumber();
    public abstract virtual void SetSystemWideVersionNumber(int version);
}
public interface Eco.Services.IViewModelReferenceService {
    public abstract virtual void ExecuteFetchHints(ViewModelReferenceType vmref, IObjectList list);
    public abstract virtual void ExecuteQueryPlan(ViewModelReferenceType vmref);
    public abstract virtual void Save(ViewModelReferenceType vmref);
    public abstract virtual void ExecuteAction(ViewModelReferenceType vmref, string viewModelClassName, string actioname);
    public abstract virtual bool CanExecuteAction(ViewModelReferenceType vmref, string viewModelClassName, string actioname, SubscriberPair subscriberBlock);
    public abstract virtual void Navigate(ViewModelReferenceType vmref, IObject root, string viewmodel);
    public abstract virtual void Search(ViewModelReferenceType vmref);
    public abstract virtual void ReQuery(ViewModelReferenceType vmref);
    public abstract virtual void ImportTabSepData(ViewModelReferenceType vmref);
    public abstract virtual void Refresh(ViewModelReferenceType vmref);
    public abstract virtual IElement ExecutePS(ViewModelReferenceType vmref, string viewModelClassName, string columnName);
    public abstract virtual void PSExpression_Refresh(ViewModelReferenceType vmref);
    public abstract virtual bool IsDirty(ViewModelReferenceType vmref, SubscriberPair SubscriberBlock);
    public abstract virtual IObjectList GetDirtyList(ViewModelReferenceType vmref, SubscriberPair SubscriberBlock);
    public abstract virtual string ViewModelAsXml(ViewModelReferenceType vmref, string viewModelName, IObject root);
    public abstract virtual string XsltTransformXml(ViewModelReferenceType vmref, string xslt, string xml);
    public abstract virtual List`1<string> XmlValidateWithSchemas(ViewModelReferenceType vmref, string xml, IEnumerable`1<string> listofstringswithSchemaurls);
    public abstract virtual bool SaveToFile(ViewModelReferenceType vmref, string filepathandname, Byte[] data);
    public abstract virtual List`1<string> ViewModels(IClass theclass);
    public abstract virtual Dictionary`2<string, object> ViewModelAsDictionaryHierarcy(string vmname, IObject io);
    public abstract virtual void SuspectExternalUpdateInvalidate(ViewModelReferenceType vmref, IObjectList list);
    public abstract virtual void RunServerSideViewModelNow(ViewModelReferenceType vmref, string serversideviewmodelname);
    public abstract virtual IObject GetRootObject(ViewModelReferenceType vmref);
    public abstract virtual bool AccessGroupsEnable(ViewModelReferenceType vmref, string commasepofags, SubscriberPair subscriberBlock);
    public abstract virtual string ViewModelName(ViewModelReferenceType vmref);
    public abstract virtual bool ShowActionMenuForCurrentInNesting(ViewModelReferenceType vmref, string nameofNesting);
    public abstract virtual void ListActions(ViewModelReferenceType vmref, string nameofNesting, IElementCollection listToFillWithTuples, SubscriberPair subscriberBlock);
    public abstract virtual void NavigateUrl(ViewModelReferenceType vmref, string url, bool opennewtab);
    public abstract virtual void ExecuteCurrentActionAgainOnce(ViewModelReferenceType vmref);
    public abstract virtual List`1<string> GetStylesInModel(ViewModelReferenceType vmref);
    public abstract virtual Byte[] SysDocBatchZip(ViewModelReferenceType vmref, IObject sysdocbatch);
    public abstract virtual void Download(ViewModelReferenceType vmref, string filename, Byte[] bytes);
}
public interface Eco.Services.IViewModelReferenceService_net45Part {
    public abstract virtual string RestGet(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual string RestPost(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual string RestPut(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual string RestPatch(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual string RestDelete(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual Byte[] RestDownload(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public abstract virtual IElement JSonToObjects(ViewModelReferenceType vmref, IClass resultJsonRootType, string jsondata);
    public abstract virtual IElement XmlToObjects(ViewModelReferenceType vmref, IClass resultXmlRootType, string xmldata);
    public abstract virtual string SoapCall(ViewModelReferenceType vmref, string url, string action, string actionnamespace, string user, string pwd, string nestingWithParams, bool passwordDigest, string SOAPAction);
    public abstract virtual string ViewModelAsJSon(ViewModelReferenceType vmref, string viewModelName, IObject root);
    public abstract virtual string RemoteTurnkeyConnectGetSessionKey(ViewModelReferenceType vmref, string url, string user, string pwd);
    public abstract virtual string RemoteTurnkeyExecuteAction(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string actionName);
    public abstract virtual string RemoteTurnkeyGetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public abstract virtual Byte[] RemoteTurnkeyGetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public abstract virtual string RemoteTurnkeySetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, string value);
    public abstract virtual string RemoteTurnkeySetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, Byte[] value);
    public abstract virtual string RemoteTurnkeyCloseSession(ViewModelReferenceType vmref, string sessionKey);
    public abstract virtual string GetGridAsTabSepData(ViewModelReferenceType vmref, string columnName);
}
public class Eco.Services.ObjectListHelper : object {
    public static void EnsureFetchedPage(IObjectList list, IObjectInstance obj);
}
public class Eco.Services.OnInitiateUserDownloadOfDataArgs : EventArgs {
    public string Filename;
    public Byte[] Filedata;
}
public class Eco.Services.OpenDocumentArgs : EventArgs {
    public Byte[] OpenDocumentData;
    public string ViewModelName;
    public IObject Root;
    public string Reportname;
    public string ReportDirectoryName;
    public bool Failed;
    public string InfoOnFailed;
}
public class Eco.Services.OptimisticLockException : InvalidOperationException {
    public OptimisticLockException(string message);
    public OptimisticLockException(string message, Exception inner);
    protected OptimisticLockException(SerializationInfo info, StreamingContext context);
}
public class Eco.Subscription.DefaultFrontsideLocatorRuntimeInformation : EcoRuntimeInformation {
    public string Classname;
    public string DefaultStringRepresentation;
    public PublisherListRuntimeInformation PublisherList;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
public class Eco.Subscription.EventSubscriber : object {
    private SubscriberAdapter m_SubscriberAdapter;
    private bool disposedValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Receive;
    public ISubscriber AsISubscriber { get; }
    [CompilerGeneratedAttribute]
public void add_Receive(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Receive(EventHandler value);
    private void DoReceive(object sender, EventArgs e);
    public void CancelAllSubscriptions();
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual void CleanForFree();
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    public ISubscriber get_AsISubscriber();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Eco.Subscription.EventSubscriberRuntimeInformation : EcoRuntimeInformation {
    public SubscriberRuntimeInformation SubscribingTo;
    public string SendingEventsToClassName;
    public EcoRuntimeInformation EventSubscriberDetails;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
public interface Eco.Subscription.ISubscriber {
    public int HashKey { get; }
    public abstract virtual bool Receive(object sender, EventArgs e);
    public abstract virtual bool IsActive();
    public abstract virtual int get_HashKey();
}
public class Eco.Subscription.Publisher : object {
    private Action _noSubscribersNotification;
    private PooledDictionary`2<int, SubscriberReference> _subscriberDictionary;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Event;
    [ThreadStaticAttribute]
private static List`1<DelayRec> m_delayList;
    [ThreadStaticAttribute]
private static int m_delayCounter;
    private int AddSubscriptionCalls;
    private int AddSubscriptionCallsForExistingSubscriber;
    private int RemoveSubscriptionCalls;
    private PooledDictionary`2<int, SubscriberReference> EnsuredSubscriberDictionary { get; }
    public bool HasSubscribers { get; }
    public Publisher(Action NoSubscribersNotification);
    [CompilerGeneratedAttribute]
public void add_Event(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Event(EventHandler value);
    private PooledDictionary`2<int, SubscriberReference> get_EnsuredSubscriberDictionary();
    public void AddSubscription(ISubscriber subscriber);
    public void RemoveSubscription(ISubscriber subscriber);
    public void RemoveUnusedSubscribers();
    private void InternalAddSubscription(ISubscriber subscriber);
    private void InternalRemoveSubscription(ISubscriber subscriber);
    private void InternalRemoveUnusedSubscribers();
    public bool Send(object sender, EventArgs e);
    public bool get_HasSubscribers();
    public static void StartDelayingEvents();
    public static void StopDelayingEvents();
    public static void StopDelayingEvents(Dispatcher dispatcher);
    private static void SendDelayList(DelayRec[] list);
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual void CleanForFree();
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    [CompilerGeneratedAttribute]
private void <RemoveUnusedSubscribers>b__12_0();
    [CompilerGeneratedAttribute]
private void <CleanForFree>b__27_0();
}
public class Eco.Subscription.PublisherForClassRuntimeInformation : EcoRuntimeInformation {
    public string ClassName;
    public int ObjectCount;
    public int PublisherCount;
    public int EmptyPublisherCount;
    public int SubscriberCount;
    public int SubscriberAliveCount;
    public int SubscriberActiveCount;
    public int SubscribersActiveUniqueCount;
    public string StackTraceHTML;
    public List`1<DefaultFrontsideLocatorRuntimeInformation> locatorInformation;
    public List`1<DefaultFrontsideLocatorRuntimeInformation> interestingLocators;
    public List`1<PublisherRuntimeInformation> publisherRuntimeDetails;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public abstract class Eco.Subscription.PublisherList : object {
    public Publisher Item { get; }
    public int MinIndex { get; }
    public int Length { get; }
    public bool IsWithoutPublishers { get; }
    public int CloneCount { get; internal set; }
    public abstract virtual Publisher get_Item(int index);
    public static PublisherList EnsurePublisher(PublisherList oldList, int newIndex, Action NoSubscribersNotification);
    protected abstract virtual bool TryAdd(int index, Publisher publisher);
    public abstract virtual PublisherList Remove(int index);
    public abstract virtual int get_MinIndex();
    public abstract virtual int get_Length();
    public abstract virtual bool get_IsWithoutPublishers();
    public abstract virtual int get_CloneCount();
    internal abstract virtual void set_CloneCount(int value);
    protected abstract virtual void Clear();
    public abstract virtual void CleanForFree();
    public abstract virtual void PruneResources(bool LowMemoryCondition);
    public abstract virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
}
[DefaultMemberAttribute("Item")]
public class Eco.Subscription.PublisherListMulti : PublisherList {
    private int m_MinIndex;
    private Publisher[] m_Publishers;
    private int m_CloneCount;
    public Publisher Item { get; }
    public int MinIndex { get; }
    public int Length { get; }
    public bool IsWithoutPublishers { get; }
    public int CloneCount { get; internal set; }
    public PublisherListMulti(int minIndex, int size);
    protected virtual bool TryAdd(int index, Publisher publisher);
    public virtual Publisher get_Item(int index);
    public virtual PublisherList Remove(int index);
    public virtual int get_MinIndex();
    public virtual int get_Length();
    public virtual bool get_IsWithoutPublishers();
    public virtual int get_CloneCount();
    internal virtual void set_CloneCount(int value);
    protected virtual void Clear();
    public virtual void CleanForFree();
    public virtual void PruneResources(bool LowMemoryCondition);
    public virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
}
public class Eco.Subscription.PublisherListRuntimeInformation : EcoRuntimeInformation {
    public string DefaultStringRepresentation;
    public string ClassName;
    public int PublisherCount;
    public int PublisherListSize;
    public int SubscriberCount;
    public int SubscriberAliveCount;
    public int SubscriberActiveCount;
    public int MaxSubscribersOnPublisher;
    public int CloneCount;
    public int AddSubscriptionCalls;
    public int AddSubscriptionCallsForExistingSubscriber;
    public int RemoveSubscriptionCalls;
    public List`1<PublisherRuntimeInformation> publisherList;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
public class Eco.Subscription.PublisherRuntimeInformation : EcoRuntimeInformation {
    public int Index;
    public string Membername;
    public string Membervalue;
    public int SubscriberCount;
    public int SubscriberAliveCount;
    public int SubscriberActiveCount;
    public int AddSubscriptionCalls;
    public int AddSubscriptionCallsForExistingSubscriber;
    public int RemoveSubscriptionCalls;
    public List`1<int> SubscriberActiveHashes;
    public List`1<int> SubscriberAliveButNotActiveHashes;
    public string DebugTrackText;
    public List`1<SubscriberRuntimeInformation> subscriberRuntimeInformation;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
public abstract class Eco.Subscription.SubscriberAdapterBase : object {
    private WeakReference actualSubscriberWeakReference;
    private HashSet`1<Publisher> m_subscribingToPublishers;
    private string actualSubscriberCreatorType;
    public int HashKey { get; }
    public object ActualSubscriber { get; }
    protected SubscriberAdapterBase(object subscriber);
    public void SubscribingToPublisher(Publisher publisher);
    public void UnsubscribingFromPublisher(Publisher publisher);
    protected abstract virtual void DoReceive(object sender, EventArgs e, object actualSubscriber);
    public sealed virtual int get_HashKey();
    private sealed virtual override bool Eco.Subscription.ISubscriber.Receive(object sender, EventArgs e);
    public object get_ActualSubscriber();
    public void CancelAllSubscriptions();
    public void Deactivate();
    public sealed virtual bool IsActive();
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual void CleanForFree();
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
}
public class Eco.Subscription.SubscriberPair : object {
    private ISubscriber valueChangeSubscriber;
    private ISubscriber resubscribeSubscriber;
    private static SubscriberPair empty;
    public static SubscriberPair Empty { get; }
    public ISubscriber ValueChangeSubscriber { get; }
    public ISubscriber ResubscribeSubscriber { get; }
    public SubscriberPair(ISubscriber valueChangeSubscriber, ISubscriber resubscribeSubscriber);
    private static SubscriberPair();
    public static SubscriberPair get_Empty();
    public ISubscriber get_ValueChangeSubscriber();
    public ISubscriber get_ResubscribeSubscriber();
}
public class Eco.Subscription.SubscriberRuntimeInformation : EcoRuntimeInformation {
    public int HashKey;
    public int SubscribingToPublishersCount;
    public string SubscriberTypeInfo;
    public string SubscriberAdditionalInfo;
    public bool HasActualSubscriber;
    public string actualSubscriberCreatorType;
    public string ActualSubscriberTypeInfo;
    public EcoRuntimeInformation ActualSubscriberRuntimeInformation;
    public List`1<PublisherRuntimeInformation> publishersRuntimeInformationList;
    private bool disposedValue;
    protected virtual void Dispose(bool disposing);
}
public class Eco.Subscription.TestSubscriber : object {
    private List`1<EventArgs> m_Events;
    private bool m_Active;
    private Publisher m_publisher;
    public Publisher SubscribingToPublisher { get; public set; }
    public EventArgs[] Events { get; }
    public int HashKey { get; }
    public TestSubscriber(object subscriber);
    public Publisher get_SubscribingToPublisher();
    public void set_SubscribingToPublisher(Publisher value);
    public EventArgs[] get_Events();
    public sealed virtual int get_HashKey();
    private sealed virtual override bool Eco.Subscription.ISubscriber.Receive(object sender, EventArgs e);
    public void Clear();
    public void Deactivate();
    private sealed virtual override bool Eco.Subscription.ISubscriber.IsActive();
}
public abstract class Eco.Support.CommaTextSupport : object {
    private static char QuoteChar;
    private static char Delimiter;
    private static char Space;
    private static Char[] ForceQuoteChars;
    private static CommaTextSupport();
    public static string StringCollectionToCommaText(ICollection`1<string> strCollection);
    public static IList`1<string> CommaTextToStringCollection(string s);
}
public static class Eco.Support.EcoSupport : object {
    public static EventDescriptorCollection EmptyEventDescriptorCollection;
    public static AttributeCollection EmptyAttributeCollection;
    private static Dictionary`2<string, int> _AssociationUsageStats;
    public static Dictionary`2<string, int> AssociationUsageStats { get; }
    public static CultureInfo CurrentCultureInfo { get; }
    private static EcoSupport();
    public static int CaseIndependentCompare(string s1, string s2);
    public static bool CaseIndependentEqual(string s1, string s2);
    public static string FixLocalizedLineFeeds(string s);
    public static string SeparateStringCollection(ICollection`1<string> strings, string separator, string preString, string postString);
    public static string StringsToLines(IEnumerable objs);
    public static bool ReferenceEqualsFix(object o1, object o2);
    public static int StrToIntDef(string s, int defaultValue);
    public static Stopwatch TraceLogConditional_StopWatchStart(bool condition, string logMessage, string category);
    public static void TraceLogConditional_StopWatchStop(bool condition, string logMessage, string category, Stopwatch stopWatch);
    public static void TraceLogConditional(bool condition, string logMessage, string category);
    public static void TraceIndentConditional(bool condition);
    public static void TraceUnindentConditional(bool condition);
    public static Dictionary`2<string, int> get_AssociationUsageStats();
    public static void CollectAssociationUsageStats(IAssociationEnd assocEnd);
    public static CultureInfo get_CurrentCultureInfo();
    private static bool MatchSignature(MethodInfo mi, Type[] signature);
    public static MethodInfo GetMethod(Type type, string name, Type[] signature);
    public static string MakeRelativePath(string rootPath, string fileName);
    public static bool CharArraysAreEqual(object value1, object value2);
    public static bool ByteArraysAreEqual(object value1, object value2);
    public static int GetHashCode(string value);
    public static bool TryRetryLock(object syncRoot, Action action);
}
public class Eco.Support.EventArgsEcoSpaceRuntimeTypeResolution : EventArgs {
    public string EcoSpaceTypeName;
    public Type ResolvedType;
}
public static class Eco.Support.FinalizationDebugger`1 : object {
    private static Dictionary`2<object, InvokedFinalizerException> _db;
    public static int FinalizerExceptionToKeep;
    public static Queue`1<InvokedFinalizerException> HistoryOfExceptions;
    public static int CreatedObjects;
    public static int ConstructedObjects;
    public static int DeserializedObjects;
    public static int DisposedObjects;
    public static int MissedDisposals;
    public static int CreatedWithoutConstructor;
    public static bool RunProperDispose;
    public static int DerivedActive { get; }
    public static int ActiveObjects { get; }
    private static FinalizationDebugger`1();
    public static int get_DerivedActive();
    public static int get_ActiveObjects();
    private static void CreatedObject(T obj);
    public static void Constructor(T obj);
    public static void Deserialized(T obj);
    public static void Dispose(T obj);
    public static void Finalizer(T obj);
    public static string TextToHtml(string text);
    public static string GetSummary(string Description);
    public static string GetDetails();
}
public class Eco.Support.HelpHelpers : object {
    private static string HelpALinkPrefix;
    public static string hcOCLEditor;
    public static string hcEcoSpaceDesignerForm;
    public static string hcEcoPackageSelector;
    public static string hcEcoDbEvolutionForm;
    public static string hcEcoConfigureCleanPSForm;
    public static string hcReferredECOPackages;
    public static string hcCodegenAutoform;
    public static string hcEcoPrototyper;
    private static HelpHelpers();
}
public class Eco.Support.InvokedFinalizerException : Exception {
    public DateTime InstantiationTime;
    public Nullable`1<DateTime> FinalizationTime;
    public int InstantiationThreadId;
    public StackTrace InstantiationStackTrace;
    public InvokedFinalizerException(string message);
    public InvokedFinalizerException(string message, Exception inner);
    protected InvokedFinalizerException(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
public static class Eco.Support.MDrivenEncrypt : object {
    public static string EncryptString(string key, string plainText);
    private static Byte[] GetValid256BitKey(string key);
    public static string DecryptString(string key, string cipherText);
}
public static class Eco.Support.MemoryTracking : object {
    public static bool TrackDisposeLifecycle;
    public static bool CollectInstantiationStackTrace;
}
public enum Eco.Support.OclEditorKind : Enum {
    public int value__;
    public static OclEditorKind ocl;
    public static OclEditorKind action;
    public static OclEditorKind ps;
}
public class Eco.Support.PotentialAutoSave : object {
    private IEcoServiceProvider _sp;
    private bool _saveTouchedStuff;
    private Guid _thisguid;
    public PotentialAutoSave(IEcoServiceProvider sp, bool saveTouchedStuff);
    public IObjectList GetDirtyList();
    public sealed virtual void Dispose();
}
public class Eco.Support.ReaderWriterLockReporting : ReaderWriterLockSlim {
    public static long WaitedForEnteringReadLocks;
    public static long WaitedForEnteringWriteLocks;
    public void EnterReadLock();
    public void ExitReadLock();
    public void EnterWriteLock();
    public void EnterWriteLock(string tag);
    public void ExitWriteLock();
}
public class Eco.Support.ReportingRecyclableMemoryStreamManager : object {
    public static ReportingRecyclableMemoryStreamManager Singleton;
    private static int KeepSmallBufferSizeMB;
    public RecyclableMemoryStreamManager MemoryStreamManager;
    public int StreamsCreated;
    public int StreamsDisposed;
    public int StreamsOverCapacity;
    public int StreamsFinalized;
    public List`1<long> HugeUsedStreamLengths;
    public int HugeUsedStreams;
    public List`1<long> LargeUsedStreamLengths;
    public int LargeUsedStreams;
    public List`1<long> SmallUsedStreamLengths;
    public int SmallUsedStreams;
    public List`1<long> TinyUsedStreamLengths;
    public int TinyUsedStreams;
    public long MinStreamLength;
    public long MaxStreamLength;
    private bool CollectingReport;
    public bool CollectReport { get; public set; }
    private static ReportingRecyclableMemoryStreamManager();
    private void StartCollecting();
    private void StopCollecting();
    public bool get_CollectReport();
    public void set_CollectReport(bool value);
    private void _RecyclableMemoryStreamManager_StreamLength(object sender, StreamLengthEventArgs e);
    private void _RecyclableMemoryStreamManager_StreamOverCapacity(object sender, StreamOverCapacityEventArgs e);
    private void _RecyclableMemoryStreamManager_StreamDisposed(object sender, StreamDisposedEventArgs e);
    private void _RecyclableMemoryStreamManager_StreamCreated(object sender, StreamCreatedEventArgs e);
    private void MemoryStreamManager_StreamFinalized(object sender, StreamFinalizedEventArgs e);
    public MemoryStream GetStream();
    public MemoryStream GetStream(string tag, Byte[] buffer, int offset, int count);
    public MemoryStream GetStream(string tag);
}
public abstract class Eco.Support.SerializationSupport : object {
    public static void Write(Stream target, object value, bool allowNull);
    public static object Read(Stream source, Type type, bool allowNull, BinaryReader reader);
}
public class Eco.Support.TraceOrigin : object {
    private bool _active;
    private string _originInfo;
    [ThreadStaticAttribute]
private static Stack`1<string> _stack;
    public TraceOrigin(Func`1<string> aFunctionThatGivesTheOriginString);
    private static void EnsureStack();
    public static string Current();
    public sealed virtual void Dispose();
}
public class Eco.Support.TypeSupport : object {
    public static bool IsRunningInIDE;
    private static Dictionary`2<Assembly, Assembly> likelyAssemblies;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<EventArgsEcoSpaceRuntimeTypeResolution> EcoSpaceRuntimeTypeResolution;
    public static TimeSpan elapsedTime;
    private static HashSet`1<Type> _NumberTypes;
    private static TypeSupport();
    private static Type GetTypeFromAssembly(Assembly assembly, string typeName, Dictionary`2<string, Assembly> queuedAssemblies, Queue`1<AssemblyName> asmNameQueue, Dictionary`2<AssemblyName, AssemblyName> queuedAssemblyNames, string prefferedVersion);
    public static string GetAssemblyNameValue(string fullName, string name);
    public static string GetAssemblyNameValue(Assembly assembly, string name);
    [CompilerGeneratedAttribute]
public static void add_EcoSpaceRuntimeTypeResolution(EventHandler`1<EventArgsEcoSpaceRuntimeTypeResolution> value);
    [CompilerGeneratedAttribute]
public static void remove_EcoSpaceRuntimeTypeResolution(EventHandler`1<EventArgsEcoSpaceRuntimeTypeResolution> value);
    public static Type ResolveType(string typeName, ISite site, Type requiredSuperclass);
    public static Type ResolveType(string typeName, ITypeResolutionService trs, Type requiredSuperclass);
    public static Type ResolveType(string typeName, ISite site, Type requiredSuperclass, string prefferedVersion);
    public static Type ResolveType(string typeName, ITypeResolutionService trs, Type requiredSuperclass, string prefferedVersion);
    public static object GetObjectFromType(Assembly checkFirst, string assemblyName, string typeName, ISite site);
    private static void EnqueueAssembly(Assembly assembly, Queue`1<Assembly> queue, Queue`1<Assembly> ecoQueue, Dictionary`2<string, Assembly> queuedAssemblies);
    public static bool IsNullable(Type type);
    public static Type GetNullableParameterType(Type type);
    public static Type StripNullable(Type type);
    public static bool IsNumber(Type type);
}
[AttributeUsageAttribute("5")]
public class Eco.UmlCodeAttributes.ChecksumAttribute : Attribute {
    public int Checksum;
    public ChecksumAttribute(int value);
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.EcoAutoGeneratedAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.EcoAutoMaintainedAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.EcoCodeGenVersionAttribute : Attribute {
    private static string defaultVersion;
    private static string generator;
    private string m_Version;
    private string m_Generator;
    public string Version { get; }
    public string Generator { get; }
    public EcoCodeGenVersionAttribute(string version);
    public EcoCodeGenVersionAttribute(string generator, string version);
    public string get_Version();
    public string get_Generator();
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.EcoSpaceAttribute : Attribute {
    public static string DefaultName;
    private string m_Name;
    public string Name { get; }
    public EcoSpaceAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.EcoSpacePackageAttribute : Attribute {
    private Type m_Package;
    public static string EcoSpacePackageFieldPrefix;
    public Type Package { get; }
    public EcoSpacePackageAttribute(Type package);
    public Type get_Package();
}
public enum Eco.UmlCodeAttributes.ForceCodegenEnum : Enum {
    public int value__;
    public static ForceCodegenEnum DoAllNoMatterWhat;
    public static ForceCodegenEnum DoAllBasedOnTouchTime;
    public static ForceCodegenEnum DoAllBasedOnChecksum;
}
[AttributeUsageAttribute("128")]
public class Eco.UmlCodeAttributes.InnerLinkAttribute : Attribute {
    private string m_Id;
    public string Id { get; }
    public InnerLinkAttribute(string id);
    public string get_Id();
}
[AttributeUsageAttribute("128")]
public class Eco.UmlCodeAttributes.LinkRoleAttribute : Attribute {
    private string m_Id;
    public string Id { get; }
    public LinkRoleAttribute(string id);
    public string get_Id();
}
[AttributeUsageAttribute("1024")]
public class Eco.UmlCodeAttributes.LinqTreatAsMDrivenImplemented : Attribute {
}
[AttributeUsageAttribute("6141")]
public class Eco.UmlCodeAttributes.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
    public PreserveAttribute(bool allMembers, bool conditional);
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.StateMachineAttribute : Attribute {
    private string m_Name;
    private string m_Value;
    public string Name { get; }
    public string Value { get; }
    public StateMachineAttribute(string name, string value);
    public string get_Name();
    public string get_Value();
}
[AttributeUsageAttribute("1024")]
public class Eco.UmlCodeAttributes.UmlCollectionAttribute : Attribute {
    private Type m_ElementType;
    public Type ElementType { get; }
    public UmlCollectionAttribute(Type elementType);
    public Type get_ElementType();
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.UmlElementAttribute : Attribute {
    private string m_MetaType;
    private int m_Index;
    private string m_Id;
    public string MetaType { get; }
    public int Index { get; public set; }
    public string Id { get; public set; }
    public UmlElementAttribute(string metaType);
    public string get_MetaType();
    public int get_Index();
    public void set_Index(int value);
    public string get_Id();
    public void set_Id(string value);
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.UmlMetaAttributeAttribute : Attribute {
    private string m_Name;
    private object m_Value;
    private int m_Index;
    public string Name { get; }
    public object Value { get; }
    public int Index { get; public set; }
    public UmlMetaAttributeAttribute(string name, object value);
    public UmlMetaAttributeAttribute(string name, Type value);
    public UmlMetaAttributeAttribute(string name, bool value);
    public UmlMetaAttributeAttribute(string name, int value);
    public string get_Name();
    public object get_Value();
    public int get_Index();
    public void set_Index(int value);
}
[AttributeUsageAttribute("32767")]
public class Eco.UmlCodeAttributes.UmlTaggedValueAttribute : Attribute {
    private string m_Tag;
    private string m_Value;
    public string Tag { get; }
    public string Value { get; }
    public UmlTaggedValueAttribute(string tag, string value);
    public string get_Tag();
    public string get_Value();
}
[ComVisibleAttribute("True")]
[GuidAttribute("ECE62455-57F7-434F-8B05-8E2AA46C8F73")]
public enum Eco.UmlRt.AggregationKind : Enum {
    public int value__;
    public static AggregationKind None;
    public static AggregationKind Aggregate;
    public static AggregationKind Composite;
}
public enum Eco.UmlRt.AssociationEndDefaultRegionMode : Enum {
    public int value__;
    public static AssociationEndDefaultRegionMode Default;
    public static AssociationEndDefaultRegionMode None;
    public static AssociationEndDefaultRegionMode Cascade;
    public static AssociationEndDefaultRegionMode IndependentCascade;
    public static AssociationEndDefaultRegionMode Existence;
}
[ComVisibleAttribute("True")]
[GuidAttribute("D47FEB77-7DD7-4D4A-BA83-95BBCE6D7498")]
public enum Eco.UmlRt.AssociationEndKind : Enum {
    public int value__;
    public static AssociationEndKind Normal;
    public static AssociationEndKind ToLinkObject;
    public static AssociationEndKind InnerLink;
}
[ComVisibleAttribute("True")]
[GuidAttribute("CC170120-0F83-404E-99D0-5FAE75C71CC8")]
public enum Eco.UmlRt.ChangeableKind : Enum {
    public int value__;
    public static ChangeableKind Frozen;
    public static ChangeableKind Changeable;
}
public class Eco.UmlRt.ClassifierNamePair : ValueType {
    public IClassifier Classifier;
    public string Name;
}
[ComVisibleAttribute("True")]
[GuidAttribute("16EC33D6-D18E-4E9B-9B00-679A7451FDA9")]
public enum Eco.UmlRt.ClassifierType : Enum {
    public int value__;
    public static ClassifierType Class;
    public static ClassifierType Collection;
    public static ClassifierType Primitive;
    public static ClassifierType Enumeration;
    public static ClassifierType Tuple;
}
[ComVisibleAttribute("True")]
[GuidAttribute("BBC0C0E9-D248-4A08-9D3E-65363C741045")]
public enum Eco.UmlRt.CollectionTypeKind : Enum {
    public int value__;
    public static CollectionTypeKind Collection;
    public static CollectionTypeKind Bag;
    public static CollectionTypeKind Set;
    public static CollectionTypeKind Sequence;
    public static CollectionTypeKind OrderedSet;
}
[ComVisibleAttribute("True")]
[GuidAttribute("675F211F-2ECC-498A-83D6-83F8EF6C0DD4")]
public enum Eco.UmlRt.DeleteAction : Enum {
    public int value__;
    public static DeleteAction Cascade;
    public static DeleteAction Allow;
    public static DeleteAction Prohibit;
}
public abstract class Eco.UmlRt.EcoTaggedValues : UmlTaggedValues {
    public static string EcoPrefix;
    public static string Name;
    public static string Default_Value;
    public static StringTV InnerLinkName;
    public static StringTV LinkRoleName;
    public static StringTV ModeledName;
    public static StringTV TableName;
    public static StringTV PMapperName;
    public static StringTV PrimaryKey;
    public static StringTV PrimaryKeyMapper;
    public static StringTV Discriminator;
    public static StringTV DiscriminatorImpl;
    public static StringTV DiscriminatorValue;
    public static StringTV DefaultStringRepresentation;
    public static StringTV DerivationExpressions;
    public static StringTV FormerNames;
    public static StringTV RegionDefinitions;
    public static LengthTV Length;
    public static IntTV Precision;
    public static IntTV Scale;
    public static StringTV ColumnName;
    public static StringTV DbSignature;
    public static StringTV DerivationOCL;
    public static StringTV DerivationOCLSet;
    public static StringTV DefaultDBValue;
    public static StringTV StateAttributeDeprecated;
    public static StringTV Representation;
    public static BlobTypeEnumTV BlobType;
    public static BusinessDeleteRuleEnumTV BusinessDeleteRule;
    public static StringTV Presentation;
    public static StringTV PresentationUnit;
    public static StringTV HiliteGridColumn;
    public static StringTV SeekerDefaultOrderColumnName;
    public static StringTV SeekerDefaultOrderReverseState;
    public static BooleanTV RestAllowed;
    public static BooleanTV UIAllowed;
    public static BooleanTV AutoSave;
    public static BooleanTV ExecuteOnInitialShow;
    public static BooleanTV AlwaysShowActions;
    public static StringTV ContentOverrideType;
    public static StringTV ContentOverrideTypeDesignTimePath;
    public static StringTV PresentationLinkRole;
    public static StringTV PresentationInnerLink;
    public static BooleanTV Versioned;
    public static BooleanTV VersionedStopTimeOnAllTables;
    public static BooleanTV GenerateDefaultRegions;
    public static BooleanTV GenerateDefaultRegion;
    public static BooleanTV GenerateMultiplicityConstraints;
    public static BooleanTV InitializeNullableStringsToNull;
    public static BooleanTV AllowNULL;
    public static BooleanTV DelayedFetch;
    public static BooleanTV DerivedSettable;
    public static BooleanTV Embed;
    public static BooleanTV IsStateAttribute;
    public static BooleanTV IsTrigger;
    public static BooleanTV Ordered;
    public static BooleanTV HasUserCode;
    public static BooleanTV IsConstrained;
    public static StringTV DatabaseName;
    public static StringTV Body;
    public static StringTV Precondition;
    public static OptimisticLockingTV OptimisticLocking;
    public static DeleteActionTV DeleteAction;
    public static SaveActionTV SaveAction;
    public static DefaultRegionModeTV DefaultRegionMode;
    public static TableMappingTV TableMapping;
    public static LinkFetchStrategyTV LinkFetchStrategy;
    public static StringTV DefaultColor;
    public static StringTV DefaultSuperClass;
    public static BooleanTV IsSingleton;
    public static WECPOFDoubleClickActionTV WECPOFDoubleClickAction;
    public static StringTV InitialZoom;
    private static EcoTaggedValues();
}
public class Eco.UmlRt.Encoding : ValueType {
    private Encoding _value;
    public static Encoding ASCII { get; }
    public static Encoding Default { get; }
    public static Encoding UTF32 { get; }
    public static Encoding UTF7 { get; }
    public static Encoding BigEndianUnicode { get; }
    public static Encoding Unicode { get; }
    public static Encoding UTF8 { get; }
    public Encoding(Encoding enc);
    public static Encoding get_ASCII();
    public static Encoding get_Default();
    public static Encoding get_UTF32();
    public static Encoding get_UTF7();
    public static Encoding get_BigEndianUnicode();
    public static Encoding get_Unicode();
    public static Encoding get_UTF8();
    public Byte[] GetBytes(string s);
    public string GetString(Byte[] bytes);
}
[ComVisibleAttribute("True")]
[GuidAttribute("50F08967-5CD6-4B2E-B040-D041225E4477")]
public enum Eco.UmlRt.FeatureType : Enum {
    public int value__;
    public static FeatureType Attribute;
    public static FeatureType AssociationEnd;
    public static FeatureType Method;
    public static FeatureType TuplePart;
}
public interface Eco.UmlRt.IActivity {
    public string Language { get; }
    public string Body { get; }
    public abstract virtual string get_Language();
    public abstract virtual string get_Body();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[GuidAttribute("0F7702F5-F938-4939-965B-370F710F7E41")]
public interface Eco.UmlRt.IAssociation {
    public IAssociationEnd Item { get; }
    public int Count { get; }
    public IClass AssociationClass { get; }
    [ObsoleteAttribute("All properties moved to IAssociation")]
public IEcoAssociation EcoAssociation { get; }
    public bool IsDerived { get; }
    public bool IsReverseDerived { get; }
    public string Id { get; }
    public abstract virtual IAssociationEnd get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IClass get_AssociationClass();
    public abstract virtual IEcoAssociation get_EcoAssociation();
    public abstract virtual bool get_IsDerived();
    public abstract virtual bool get_IsReverseDerived();
    public abstract virtual string get_Id();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IAssociationCollection {
    public IAssociation Item { get; }
    public abstract virtual IAssociation GetItemByName(string name);
    public abstract virtual IAssociation get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("C92F4578-2C3B-490F-B3FF-9D4017ABA5D0")]
public interface Eco.UmlRt.IAssociationEnd {
    public bool IsNavigable { get; }
    public OrderingKind Ordering { get; }
    public AggregationKind Aggregation { get; }
    public IAssociationEnd OppositeEnd { get; }
    public IAssociation Association { get; }
    public AssociationEndKind AssociationEndKind { get; }
    [ObsoleteAttribute("All properties moved to IAssociationEnd")]
public IEcoAssociationEnd EcoAssociationEnd { get; }
    public IClass Class_ { get; }
    public IClass AssociationClass { get; }
    public IAssociationEnd AssociationClassEndPointingHere { get; }
    public IAssociationEnd AssociationClassEndPointingAway { get; }
    public IAssociationEnd EndPointingToAssociationClass { get; }
    public DeleteAction DeleteAction { get; }
    public AssociationEndDefaultRegionMode DefaultRegionMode { get; }
    public IAssociationEnd MainAssociationEnd { get; }
    public LinkFetchStrategy LinkFetchStrategy { get; }
    public abstract virtual bool get_IsNavigable();
    public abstract virtual OrderingKind get_Ordering();
    public abstract virtual AggregationKind get_Aggregation();
    public abstract virtual IAssociationEnd get_OppositeEnd();
    public abstract virtual IAssociation get_Association();
    public abstract virtual AssociationEndKind get_AssociationEndKind();
    public abstract virtual IEcoAssociationEnd get_EcoAssociationEnd();
    public abstract virtual IClass get_Class_();
    public abstract virtual IClass get_AssociationClass();
    public abstract virtual IAssociationEnd get_AssociationClassEndPointingHere();
    public abstract virtual IAssociationEnd get_AssociationClassEndPointingAway();
    public abstract virtual IAssociationEnd get_EndPointingToAssociationClass();
    public abstract virtual DeleteAction get_DeleteAction();
    public abstract virtual AssociationEndDefaultRegionMode get_DefaultRegionMode();
    public abstract virtual IAssociationEnd get_MainAssociationEnd();
    public abstract virtual LinkFetchStrategy get_LinkFetchStrategy();
}
[ComVisibleAttribute("True")]
[GuidAttribute("054700C7-C58E-46E3-9C4F-4962E984C1CE")]
public interface Eco.UmlRt.IAttribute {
    public IExpression InitialValue { get; }
    [ObsoleteAttribute("All properties moved to IAttribute")]
public IEcoAttribute EcoAttribute { get; }
    public bool AllowNull { get; }
    public string DefaultDbValue { get; }
    public int Length { get; }
    public int Precision { get; }
    public int Scale { get; }
    public object InitialValueAsObject { get; }
    public bool IsStateAttribute { get; }
    public abstract virtual IExpression get_InitialValue();
    public abstract virtual IEcoAttribute get_EcoAttribute();
    public abstract virtual bool get_AllowNull();
    public abstract virtual string get_DefaultDbValue();
    public abstract virtual int get_Length();
    public abstract virtual int get_Precision();
    public abstract virtual int get_Scale();
    public abstract virtual object get_InitialValueAsObject();
    public abstract virtual bool get_IsStateAttribute();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IAttributeCollection {
    public IAttribute Item { get; }
    public abstract virtual IAttribute GetItemByName(string name);
    public abstract virtual IAttribute get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("6A24B0CC-2221-4606-B913-B012F46C4440")]
public interface Eco.UmlRt.IBagType {
}
[ComVisibleAttribute("True")]
[GuidAttribute("9B9109AB-BF74-4A76-AA58-D131D7FD00CD")]
public interface Eco.UmlRt.IClass {
    [ObsoleteAttribute("All properties moved to IClass")]
public IEcoClass EcoClass { get; }
    public bool IsAssociationClass { get; }
    public IAssociation Association { get; }
    public IStateMachine StateMachine { get; }
    public string DefaultStringRepresentation { get; }
    public bool Versioned { get; }
    public bool VersionedStopTimeOnAllTables { get; }
    public IMethodCollection AllMethods { get; }
    public int FirstOwnStructuralFeatureIndex { get; }
    public IClass SuperClass { get; }
    public bool Persistent { get; }
    public bool IsLinkClass { get; }
    public bool IsImplicit { get; }
    public int InternalIndex { get; }
    public bool GenerateDefaultRegion { get; }
    public OptimisticLockingMode OptimisticLockingMode { get; }
    public string Id { get; }
    public string Presentation { get; }
    public abstract virtual IEcoClass get_EcoClass();
    public abstract virtual bool get_IsAssociationClass();
    public abstract virtual IAssociation get_Association();
    public abstract virtual IStateMachine get_StateMachine();
    public abstract virtual string get_DefaultStringRepresentation();
    public abstract virtual bool get_Versioned();
    public abstract virtual bool get_VersionedStopTimeOnAllTables();
    public abstract virtual IMethodCollection get_AllMethods();
    public abstract virtual int get_FirstOwnStructuralFeatureIndex();
    public abstract virtual int GetStructuralFeatureIndexByLoopbackIndex(int loopbackIndex);
    public abstract virtual IClass get_SuperClass();
    public abstract virtual bool get_Persistent();
    public abstract virtual bool get_IsLinkClass();
    public abstract virtual bool get_IsImplicit();
    public abstract virtual int get_InternalIndex();
    public abstract virtual bool get_GenerateDefaultRegion();
    public abstract virtual OptimisticLockingMode get_OptimisticLockingMode();
    public abstract virtual string GetDerivationOcl(IStructuralFeature feature);
    public abstract virtual string GetDerivationOclSettable(IStructuralFeature feature);
    public abstract virtual string get_Id();
    public abstract virtual string get_Presentation();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IClassCollection {
    public IClass Item { get; }
    public abstract virtual IClass GetItemByName(string name);
    public abstract virtual IClass get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("09C06CCF-BB13-4FD0-AB1E-B8D417538109")]
public interface Eco.UmlRt.IClassifier {
    public Type ObjectType { get; }
    public IClassifierCollection SubTypes { get; }
    public IClassifierCollection SuperTypes { get; }
    public IFeatureCollection Features { get; }
    public ClassifierType ClassifierType { get; }
    [ObsoleteAttribute("All properties moved to IClassifier")]
public IEcoClassifier EcoClassifier { get; }
    public ICollectionType CollectionType { get; }
    public IEcoTypeSystem TypeSystem { get; }
    public bool IsAbstract { get; }
    public abstract virtual Type get_ObjectType();
    public abstract virtual IClassifierCollection get_SubTypes();
    public abstract virtual IClassifierCollection get_SuperTypes();
    public abstract virtual IFeatureCollection get_Features();
    public abstract virtual ClassifierType get_ClassifierType();
    public abstract virtual IEcoClassifier get_EcoClassifier();
    public abstract virtual ICollectionType get_CollectionType();
    public abstract virtual bool IsA(IClassifier classifier);
    public abstract virtual IClassifier LeastCommonType(IClassifier classifier);
    public abstract virtual bool ConformsTo(IClassifier classifier);
    public abstract virtual object ConvertAsObject(object value, IClassifier toType);
    public abstract virtual IEcoTypeSystem get_TypeSystem();
    public abstract virtual bool get_IsAbstract();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IClassifierCollection {
    public IClassifier Item { get; }
    public abstract virtual IClassifier GetItemByName(string name);
    public abstract virtual IClassifier get_Item(int index);
}
public interface Eco.UmlRt.ICollectionKinds {
    public ICollectionType CollectionType { get; }
    public ISetType SetType { get; }
    public IBagType BagType { get; }
    public ISequenceType SequenceType { get; }
    public IOrderedSetType OrderedSetType { get; }
    public abstract virtual ICollectionType get_CollectionType();
    public abstract virtual ISetType get_SetType();
    public abstract virtual IBagType get_BagType();
    public abstract virtual ISequenceType get_SequenceType();
    public abstract virtual IOrderedSetType get_OrderedSetType();
}
[ComVisibleAttribute("True")]
[GuidAttribute("E3F71A8B-9702-4789-8F01-9B4B6976BE62")]
public interface Eco.UmlRt.ICollectionType {
    public IClassifier ElementType { get; }
    public CollectionTypeKind Kind { get; }
    public ICollectionKinds CollectionKinds { get; }
    public abstract virtual IClassifier get_ElementType();
    public abstract virtual CollectionTypeKind get_Kind();
    public abstract virtual ICollectionKinds get_CollectionKinds();
}
[ComVisibleAttribute("True")]
[GuidAttribute("41EC6B81-14FA-4826-85F8-4EC2AEA925EF")]
public interface Eco.UmlRt.IConstraint {
    public IExpression Body { get; }
    [ObsoleteAttribute("All properties moved to IEcoConstraint")]
public IEcoConstraint EcoConstraint { get; }
    public bool IsAutoGenerated { get; }
    public string Description { get; }
    public ErrorLevel ErrorLevel { get; }
    public bool IsDeleteConstraint { get; }
    public string Id { get; }
    public string ConstrainedTargetName { get; }
    public abstract virtual IExpression get_Body();
    public abstract virtual IEcoConstraint get_EcoConstraint();
    public abstract virtual bool get_IsAutoGenerated();
    public abstract virtual string get_Description();
    public abstract virtual ErrorLevel get_ErrorLevel();
    public abstract virtual bool get_IsDeleteConstraint();
    public abstract virtual string get_Id();
    public abstract virtual string get_ConstrainedTargetName();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IConstraintCollection {
    public IConstraint Item { get; }
    public abstract virtual IConstraint GetItemByName(string name);
    public abstract virtual IConstraint get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("F4499A98-E13D-4E00-9F9D-57D5628FA447")]
public interface Eco.UmlRt.IDataType {
}
public interface Eco.UmlRt.IEcoAssociation {
}
public interface Eco.UmlRt.IEcoAssociationEnd {
}
public interface Eco.UmlRt.IEcoAttribute {
}
public interface Eco.UmlRt.IEcoClass {
}
public interface Eco.UmlRt.IEcoClassifier {
}
public interface Eco.UmlRt.IEcoConstraint {
}
public interface Eco.UmlRt.IEcoEnumerationLiteral {
}
public interface Eco.UmlRt.IEcoFeature {
}
public interface Eco.UmlRt.IEcoMethod {
}
public interface Eco.UmlRt.IEcoPackage {
}
public interface Eco.UmlRt.IEcoPredefinedTypes {
    public IDataType Byte { get; }
    public IDataType Blob { get; }
    public IDataType SByte { get; }
    public IDataType Int16 { get; }
    public IDataType UInt16 { get; }
    public IDataType Int32 { get; }
    public IDataType UInt32 { get; }
    public IDataType Int64 { get; }
    public IDataType UInt64 { get; }
    public IDataType Single { get; }
    public IDataType Double { get; }
    public IDataType Boolean { get; }
    public IDataType Char { get; }
    public IDataType Decimal { get; }
    public IDataType String_ { get; }
    public IDataType DateTime { get; }
    public IDataType TimeSpan { get; }
    public IDataType Guid { get; }
    public IClass NullType { get; }
    public IClass RootClassType { get; }
    public IEnumerationType OclSortDirection { get; }
    public IEnumerationType ConstraintErrorLevel { get; }
    public ICollectionType GenericCollectionType { get; }
    public IDataType ViewModelReference { get; }
    public abstract virtual IDataType get_Byte();
    public abstract virtual IDataType get_Blob();
    public abstract virtual IDataType get_SByte();
    public abstract virtual IDataType get_Int16();
    public abstract virtual IDataType get_UInt16();
    public abstract virtual IDataType get_Int32();
    public abstract virtual IDataType get_UInt32();
    public abstract virtual IDataType get_Int64();
    public abstract virtual IDataType get_UInt64();
    public abstract virtual IDataType get_Single();
    public abstract virtual IDataType get_Double();
    public abstract virtual IDataType get_Boolean();
    public abstract virtual IDataType get_Char();
    public abstract virtual IDataType get_Decimal();
    public abstract virtual IDataType get_String_();
    public abstract virtual IDataType get_DateTime();
    public abstract virtual IDataType get_TimeSpan();
    public abstract virtual IDataType get_Guid();
    public abstract virtual IClass get_NullType();
    public abstract virtual IClass get_RootClassType();
    public abstract virtual IEnumerationType get_OclSortDirection();
    public abstract virtual IEnumerationType get_ConstraintErrorLevel();
    public abstract virtual ICollectionType get_GenericCollectionType();
    public abstract virtual IDataType get_ViewModelReference();
}
public interface Eco.UmlRt.IEcoPrimitiveType {
}
public interface Eco.UmlRt.IEcoRegion {
}
public interface Eco.UmlRt.IEcoRegionContainer {
}
public interface Eco.UmlRt.IEcoSimpleType {
}
public interface Eco.UmlRt.IEcoState {
}
public interface Eco.UmlRt.IEcoStateMachine {
}
public interface Eco.UmlRt.IEcoStructuralFeature {
}
[ComVisibleAttribute("True")]
[GuidAttribute("2986FFEB-4331-41CC-8111-6948E31C997A")]
public interface Eco.UmlRt.IEcoTypeSystem {
    public bool IsRunnable { get; }
    public bool IsBrowsable { get; }
    public string NonRunnableReason { get; }
    public String[] Errors { get; }
    public IClassCollection AllClasses { get; }
    public IClassifierCollection AllDatatypes { get; }
    public IAssociationCollection AllAssociations { get; }
    public IPackageCollection Packages { get; }
    public IPackageCollection AllPackages { get; }
    public IEcoPredefinedTypes PredefinedTypes { get; }
    public string RegionDefinitions { get; }
    public bool GenerateDefaultRegions { get; }
    public int CheckSum { get; }
    public int CheckSumRelaxed { get; }
    public bool InitializeNullableStringsToNull { get; }
    public abstract virtual IClassifier GetClassifierByName(string name);
    public abstract virtual IClass GetClassById(string id);
    public abstract virtual IClassifier GetClassifierByType(Type t);
    public abstract virtual IClass GetClassByType(Type t);
    public abstract virtual bool get_IsRunnable();
    public abstract virtual bool get_IsBrowsable();
    public abstract virtual string get_NonRunnableReason();
    public abstract virtual String[] get_Errors();
    public abstract virtual IClassCollection get_AllClasses();
    public abstract virtual IClassifierCollection get_AllDatatypes();
    public abstract virtual IAssociationCollection get_AllAssociations();
    public abstract virtual IPackageCollection get_Packages();
    public abstract virtual IPackageCollection get_AllPackages();
    public abstract virtual IEcoPredefinedTypes get_PredefinedTypes();
    public abstract virtual string get_RegionDefinitions();
    public abstract virtual bool get_GenerateDefaultRegions();
    public abstract virtual int get_CheckSum();
    public abstract virtual int get_CheckSumRelaxed();
    public abstract virtual ITupleType GetTupleType(string name, IList`1<ClassifierNamePair> parts);
    public abstract virtual ITupleType GetTupleType(IList`1<ClassifierNamePair> parts);
    public abstract virtual ITupleType GetConstraintInstanceTupleType();
    public abstract virtual ITupleType GetActionInstanceTupleType();
    public abstract virtual bool get_InitializeNullableStringsToNull();
}
public interface Eco.UmlRt.IEcoVertex {
}
[ComVisibleAttribute("True")]
[GuidAttribute("3C1CFAC7-A419-4A41-BA08-3134EF72951F")]
public interface Eco.UmlRt.IEnumerationLiteral {
    [ObsoleteAttribute("All properties moved to IEnumerationLiteral")]
public IEcoEnumerationLiteral EcoEnumerationLiteral { get; }
    public int IntegerValue { get; }
    public object EnumValue { get; }
    public abstract virtual IEcoEnumerationLiteral get_EcoEnumerationLiteral();
    public abstract virtual int get_IntegerValue();
    public abstract virtual object get_EnumValue();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IEnumerationLiteralCollection {
    public IEnumerationLiteral Item { get; }
    public abstract virtual IEnumerationLiteral get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("99D7FAC9-20CC-49BA-8F81-AF99108D4789")]
public interface Eco.UmlRt.IEnumerationType {
    public IEnumerationLiteralCollection Literals { get; }
    public abstract virtual IEnumerationLiteralCollection get_Literals();
}
[ComVisibleAttribute("True")]
[GuidAttribute("4EA8A2D1-4FA1-47D0-84A3-B2A7C06A264D")]
public interface Eco.UmlRt.IExpression {
    public string Language { get; }
    public string Body { get; }
    public abstract virtual string get_Language();
    public abstract virtual string get_Body();
}
[ComVisibleAttribute("True")]
[GuidAttribute("7A1A8018-EF24-489D-A1BA-8ABA0D719936")]
public interface Eco.UmlRt.IFeature {
    public ScopeKind OwnerScope { get; }
    public VisibilityKind Visibility { get; }
    public IClassifier Owner { get; }
    public FeatureType FeatureType { get; }
    [ObsoleteAttribute("All properties moved to IFeature")]
public IEcoFeature EcoFeature { get; }
    public string Id { get; }
    public string Presentation { get; }
    public abstract virtual ScopeKind get_OwnerScope();
    public abstract virtual VisibilityKind get_Visibility();
    public abstract virtual IClassifier get_Owner();
    public abstract virtual FeatureType get_FeatureType();
    public abstract virtual IEcoFeature get_EcoFeature();
    public abstract virtual string get_Id();
    public abstract virtual string get_Presentation();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IFeatureCollection {
    public IFeature Item { get; }
    public abstract virtual IFeature GetItemByName(string name);
    public abstract virtual IFeature get_Item(int index);
}
public interface Eco.UmlRt.IFeaturedType {
    public IStructuralFeatureCollection AllStructuralFeatures { get; }
    public PropertyDescriptorCollection Properties { get; }
    public abstract virtual IStructuralFeatureCollection get_AllStructuralFeatures();
    public abstract virtual PropertyDescriptorCollection get_Properties();
}
public interface Eco.UmlRt.IFinalState {
}
[ComVisibleAttribute("True")]
[GuidAttribute("0586A8DE-76D6-4455-8FD7-91209ABCD6AC")]
public interface Eco.UmlRt.IMethod {
    public IParameterCollection Parameters { get; }
    public IClassifier ReturnType { get; }
    public bool IsQuery { get; }
    [ObsoleteAttribute("All properties moved to IMethod")]
public IEcoMethod EcoMethod { get; }
    public MethodInfo MethodInfo { get; }
    public bool IsTrigger { get; }
    public bool IsEcoCallable { get; }
    public bool IsImplementedAsActivity { get; }
    public IActivity Implementation { get; }
    public IExpression Precondition { get; }
    public ITriggerCollection Triggers { get; }
    public IList`1<IMethod> Overloads { get; }
    public abstract virtual IParameterCollection get_Parameters();
    public abstract virtual IClassifier get_ReturnType();
    public abstract virtual bool get_IsQuery();
    public abstract virtual IEcoMethod get_EcoMethod();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual bool get_IsTrigger();
    public abstract virtual bool get_IsEcoCallable();
    public abstract virtual bool get_IsImplementedAsActivity();
    public abstract virtual IActivity get_Implementation();
    public abstract virtual IExpression get_Precondition();
    public abstract virtual ITriggerCollection get_Triggers();
    public abstract virtual IList`1<IMethod> get_Overloads();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IMethodCollection {
    public IMethod Item { get; }
    public abstract virtual IMethod GetItemByName(string name);
    public abstract virtual IMethod get_Item(int index);
}
public interface Eco.UmlRt.IMethodTrigger {
    public IMethod Method { get; }
    public abstract virtual IMethod get_Method();
}
[ComVisibleAttribute("True")]
[GuidAttribute("7CBF3AE8-1CD3-40BC-865A-963196FF10E4")]
public interface Eco.UmlRt.IModelElement {
    public string Name { get; }
    public string ModeledName { get; }
    public IConstraintCollection Constraints { get; }
    public ITaggedValueCollection TaggedValues { get; }
    public IPackage Package { get; }
    public abstract virtual bool IsSame(IModelElement value);
    public abstract virtual int GetIsSameHashCode();
    public abstract virtual string get_Name();
    public abstract virtual string get_ModeledName();
    public abstract virtual IConstraintCollection get_Constraints();
    public abstract virtual ITaggedValueCollection get_TaggedValues();
    public abstract virtual IPackage get_Package();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IModelElementCollection {
    public IModelElement Item { get; }
    public abstract virtual IModelElement GetItemByName(string name);
    public abstract virtual IModelElement get_Item(int index);
    public abstract virtual bool Contains(IModelElement value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("79B7B064-CDD4-4F90-BA0F-A3764341F94C")]
public interface Eco.UmlRt.IMultiplicity {
    public int Lower { get; }
    public int Upper { get; }
    public bool IsUnbounded { get; }
    public bool IsSingle { get; }
    public abstract virtual int get_Lower();
    public abstract virtual int get_Upper();
    public abstract virtual bool get_IsUnbounded();
    public abstract virtual bool get_IsSingle();
}
[ComVisibleAttribute("True")]
[GuidAttribute("E2EBBED6-A0AA-4A5D-842A-77295CA02222")]
public interface Eco.UmlRt.IOrderedSetType {
}
[ComVisibleAttribute("True")]
[GuidAttribute("1AB1174C-9C83-4CD1-87FF-E6A7EEE66F94")]
public interface Eco.UmlRt.IPackage {
    public IModelElementCollection OwnedElements { get; }
    [ObsoleteAttribute("All properties moved to IPackage")]
public IEcoPackage EcoPackage { get; }
    public IClassCollection Classes { get; }
    public IAssociationCollection Associations { get; }
    public IPackageCollection Packages { get; }
    public string Id { get; }
    public abstract virtual IModelElementCollection get_OwnedElements();
    public abstract virtual IEcoPackage get_EcoPackage();
    public abstract virtual IClassCollection get_Classes();
    public abstract virtual IAssociationCollection get_Associations();
    public abstract virtual IPackageCollection get_Packages();
    public abstract virtual string get_Id();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IPackageCollection {
    public IPackage Item { get; }
    public abstract virtual IPackage GetItemByName(string name);
    public abstract virtual IPackage get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("2040F440-8A63-4894-9426-DE54747B5467")]
public interface Eco.UmlRt.IParameter {
    public ParameterDirectionKind Kind { get; }
    public IClassifier Type { get; }
    public abstract virtual ParameterDirectionKind get_Kind();
    public abstract virtual IClassifier get_Type();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IParameterCollection {
    public IParameter Item { get; }
    public abstract virtual IParameter GetItemByName(string name);
    public abstract virtual IParameter get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("C5D4F18E-C91D-41CE-A355-8798F4F9B054")]
public interface Eco.UmlRt.IPrimitiveType {
    [ObsoleteAttribute("All properties moved to IPrimitiveType")]
public IEcoPrimitiveType EcoPrimitiveType { get; }
    public abstract virtual IEcoPrimitiveType get_EcoPrimitiveType();
    public abstract virtual object AssignConvertAsObject(object value, IClassifier toType);
}
public interface Eco.UmlRt.IPseudostate {
    public PseudostateKind Kind { get; }
    public abstract virtual PseudostateKind get_Kind();
}
public interface Eco.UmlRt.IRegion {
    public ITransitionCollection Transitions { get; }
    public IVertexCollection Vertexes { get; }
    public IRegionContainer Container { get; }
    [ObsoleteAttribute("All properties moved to IRegion")]
public IEcoRegion EcoRegion { get; }
    public string FullStatemachineName { get; }
    public IAttribute StateAttribute { get; }
    public IStateNamedCollection States { get; }
    public IPseudostate InitialState { get; }
    public IStateCollection AllStates { get; }
    public bool IsTopLevel { get; }
    public IStateMachine StateMachine { get; }
    public abstract virtual ITransitionCollection get_Transitions();
    public abstract virtual IVertexCollection get_Vertexes();
    public abstract virtual IRegionContainer get_Container();
    public abstract virtual IEcoRegion get_EcoRegion();
    public abstract virtual string get_FullStatemachineName();
    public abstract virtual IAttribute get_StateAttribute();
    public abstract virtual IStateNamedCollection get_States();
    public abstract virtual IPseudostate get_InitialState();
    public abstract virtual IStateCollection get_AllStates();
    public abstract virtual bool get_IsTopLevel();
    public abstract virtual IStateMachine get_StateMachine();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IRegionCollection {
    public IRegion Item { get; }
    public abstract virtual IRegion GetItemByName(string name);
    public abstract virtual IRegion get_Item(int index);
}
public interface Eco.UmlRt.IRegionContainer {
    public IRegionCollection Regions { get; }
    public string FullStatemachineName { get; }
    [ObsoleteAttribute("All properties moved to IRegionContainer")]
public IEcoRegionContainer EcoRegionContainer { get; }
    public abstract virtual IRegionCollection get_Regions();
    public abstract virtual string get_FullStatemachineName();
    public abstract virtual bool Contains(IState state);
    public abstract virtual IEcoRegionContainer get_EcoRegionContainer();
}
[ComVisibleAttribute("True")]
[GuidAttribute("C96E7EFB-BFBD-49C9-B4C5-14312DCDA94C")]
public interface Eco.UmlRt.ISequenceType {
}
[ComVisibleAttribute("True")]
[GuidAttribute("3E5A3EDB-EE8E-4CDD-9F37-D7F928EE61A3")]
public interface Eco.UmlRt.ISetType {
}
[ComVisibleAttribute("True")]
[GuidAttribute("B68B9163-811D-423C-9452-CEEEEEA89489")]
public interface Eco.UmlRt.ISimpleType {
    [ObsoleteAttribute("All properties moved to ISimpleType")]
public IEcoSimpleType EcoSimpleType { get; }
    public object DefaultContent { get; }
    public abstract virtual IEcoSimpleType get_EcoSimpleType();
    public abstract virtual object get_DefaultContent();
    public abstract virtual object AsObjectFromString(string value);
    public abstract virtual object AsObjectFromStringNotNull(string value);
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.ISimpleTypeCollection {
    public ISimpleType Item { get; }
    public abstract virtual ISimpleType GetItemByName(string name);
    public abstract virtual ISimpleType get_Item(int index);
}
public interface Eco.UmlRt.IState {
    public IActivity Entry { get; }
    public IActivity Exit { get; }
    public bool IsSimple { get; }
    public bool IsComposite { get; }
    public bool IsOrthogonal { get; }
    public IStateRepresentationPartCollection Representation { get; }
    [ObsoleteAttribute("All properties moved to IState")]
public IEcoState EcoState { get; }
    public abstract virtual IActivity get_Entry();
    public abstract virtual IActivity get_Exit();
    public abstract virtual bool get_IsSimple();
    public abstract virtual bool get_IsComposite();
    public abstract virtual bool get_IsOrthogonal();
    public abstract virtual IStateRepresentationPartCollection get_Representation();
    public abstract virtual IEcoState get_EcoState();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IStateCollection {
    public IState Item { get; }
    public abstract virtual IState get_Item(int index);
    public abstract virtual bool Contains(IState value);
}
public interface Eco.UmlRt.IStateMachine {
    public IClass Class_ { get; }
    public IAttributeCollection AllStateAttributes { get; }
    [ObsoleteAttribute("All properties moved to IStateMachine")]
public IEcoStateMachine EcoStateMachine { get; }
    public abstract virtual IClass get_Class_();
    public abstract virtual IVertex GetVertexByPartialName(string name);
    public abstract virtual IVertex GetVertexByFullName(string name);
    public abstract virtual IRegion GetRegionByPartialName(string name);
    public abstract virtual IRegion GetRegionByFullName(string name);
    public abstract virtual ITrigger GetTriggerByName(string name);
    public abstract virtual IAttributeCollection get_AllStateAttributes();
    public abstract virtual IEcoStateMachine get_EcoStateMachine();
}
public interface Eco.UmlRt.IStateName {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Eco.UmlRt.IStateNamedCollection {
    public abstract virtual IState GetItemByName(string name);
}
public interface Eco.UmlRt.IStateRepresentationPart {
    public IAttribute Attribute { get; }
    public object Value { get; }
    public abstract virtual IAttribute get_Attribute();
    public abstract virtual object get_Value();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IStateRepresentationPartCollection {
    public IStateRepresentationPart Item { get; }
    public abstract virtual IStateRepresentationPart get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("86F2B977-151E-4010-AA22-5E6D34002106")]
public interface Eco.UmlRt.IStereotype {
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IStereotypeCollection {
    public IStereotype Item { get; }
    public abstract virtual IStereotype GetItemByName(string name);
    public abstract virtual IStereotype get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("0E0CEE23-E780-431E-BF13-ACF0D9AC5775")]
public interface Eco.UmlRt.IStructuralFeature {
    public IMultiplicity Multiplicity { get; }
    public ChangeableKind Changeability { get; }
    public IClassifier Type_ { get; }
    [ObsoleteAttribute("All properties moved to IStructuralFeature")]
public IEcoStructuralFeature EcoStructuralFeature { get; }
    public int IndexInAllStructuralFeatures { get; }
    public bool IsStoredInObject { get; }
    public bool Persistent { get; }
    public bool IsDerived { get; }
    public bool IsReverseDerived { get; }
    public bool IsDelayedFetch { get; }
    public bool CanHaveOldValue { get; }
    public bool HasUserCode { get; }
    public bool EncouragesOptimisticLockingOnDeletedOnly { get; }
    public int LoopbackIndex { get; }
    public SaveAction SaveAction { get; }
    public MethodInfo DeriveAndSubscribeMethod { get; }
    public bool IsAutoDerived { get; }
    public PropertyInfo PropertyInfo { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IMultiplicity get_Multiplicity();
    public abstract virtual ChangeableKind get_Changeability();
    public abstract virtual IClassifier get_Type_();
    public abstract virtual IEcoStructuralFeature get_EcoStructuralFeature();
    public abstract virtual int get_IndexInAllStructuralFeatures();
    public abstract virtual bool get_IsStoredInObject();
    public abstract virtual bool get_Persistent();
    public abstract virtual bool get_IsDerived();
    public abstract virtual bool get_IsReverseDerived();
    public abstract virtual bool get_IsDelayedFetch();
    public abstract virtual bool get_CanHaveOldValue();
    public abstract virtual bool get_HasUserCode();
    public abstract virtual bool get_EncouragesOptimisticLockingOnDeletedOnly();
    public abstract virtual int get_LoopbackIndex();
    public abstract virtual SaveAction get_SaveAction();
    public abstract virtual MethodInfo get_DeriveAndSubscribeMethod();
    public abstract virtual bool get_IsAutoDerived();
    public abstract virtual PropertyInfo get_PropertyInfo();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IStructuralFeatureCollection {
    public IStructuralFeature Item { get; }
    public abstract virtual IStructuralFeature GetItemByName(string name);
    public abstract virtual IStructuralFeature get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("1778E5F3-10C6-48D0-8893-73958EA32351")]
public interface Eco.UmlRt.ITaggedValue {
    public string Tag { get; }
    public string Value { get; }
    public abstract virtual string get_Tag();
    public abstract virtual string get_Value();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.ITaggedValueCollection {
    public ITaggedValue Item { get; }
    public abstract virtual ITaggedValue GetItemByTag(string tag);
    public abstract virtual ITaggedValue get_Item(int index);
    public abstract virtual string ValueForTag(string tag, string defaultValue);
    public abstract virtual bool ValueForTagBoolean(string tag, bool defaultValue);
    public abstract virtual string ValueForTag(string tag);
}
public interface Eco.UmlRt.ITransition {
    public IRegion Region { get; }
    public IExpression Guard { get; }
    public IVertex Source { get; }
    public IVertex Target { get; }
    public ITrigger Trigger { get; }
    public IActivity Effect { get; }
    public abstract virtual IRegion get_Region();
    public abstract virtual IExpression get_Guard();
    public abstract virtual IVertex get_Source();
    public abstract virtual IVertex get_Target();
    public abstract virtual ITrigger get_Trigger();
    public abstract virtual IActivity get_Effect();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.ITransitionCollection {
    public ITransition Item { get; }
    public abstract virtual ITransition get_Item(int index);
}
public interface Eco.UmlRt.ITrigger {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.ITriggerCollection {
    public ITrigger Item { get; }
    public abstract virtual ITrigger get_Item(int index);
    public abstract virtual bool Contains(ITrigger value);
}
public interface Eco.UmlRt.ITupleType {
}
public interface Eco.UmlRt.ITypeConverter {
    public abstract virtual object Convert(object value);
}
public interface Eco.UmlRt.IVertex {
    public ITransitionCollection Outgoing { get; }
    public ITransitionCollection Incoming { get; }
    public IRegion Container { get; }
    public string FullStatemachineName { get; }
    public bool HasUntriggeredOutgoing { get; }
    public bool IsFinalState { get; }
    public IRegion TopSimpleRegion { get; }
    [ObsoleteAttribute("All properties moved to IVertex")]
public IEcoVertex EcoVertex { get; }
    public abstract virtual ITransitionCollection get_Outgoing();
    public abstract virtual ITransitionCollection get_Incoming();
    public abstract virtual IRegion get_Container();
    public abstract virtual string get_FullStatemachineName();
    public abstract virtual bool get_HasUntriggeredOutgoing();
    public abstract virtual bool get_IsFinalState();
    public abstract virtual IRegion get_TopSimpleRegion();
    public abstract virtual IEcoVertex get_EcoVertex();
}
[DefaultMemberAttribute("Item")]
public interface Eco.UmlRt.IVertexCollection {
    public IVertex Item { get; }
    public abstract virtual IVertex GetItemByName(string name);
    public abstract virtual IVertex get_Item(int index);
}
[ComVisibleAttribute("True")]
[GuidAttribute("92F5DE0B-6CAD-4AE0-A61D-A5960D8E0DBE")]
public enum Eco.UmlRt.LinkFetchStrategy : Enum {
    public int value__;
    public static LinkFetchStrategy Default;
    public static LinkFetchStrategy IdsOnly;
    public static LinkFetchStrategy FetchObjects;
}
public static class Eco.UmlRt.ModelElementSameHash : object {
    private static IEqualityComparer c_OldEqualityComparer;
    private static IEqualityComparer`1<IModelElement> c_EqualityComparer;
    private static IEqualityComparer`1<IClassifier> c_ClasssifierEqualityComparer;
    public static IEqualityComparer OldEqualityComparer { get; }
    public static IEqualityComparer`1<IModelElement> ElementEqualityComparer { get; }
    public static IEqualityComparer`1<IClassifier> ClasssifierEqualityComparer { get; }
    private static ModelElementSameHash();
    public static IEqualityComparer get_OldEqualityComparer();
    public static IEqualityComparer`1<IModelElement> get_ElementEqualityComparer();
    public static IEqualityComparer`1<IClassifier> get_ClasssifierEqualityComparer();
}
[ComVisibleAttribute("True")]
[GuidAttribute("BB92D723-88FD-4A8D-968B-0DBBFA56B667")]
public enum Eco.UmlRt.OptimisticLockingMode : Enum {
    public int value__;
    public static OptimisticLockingMode Off;
    public static OptimisticLockingMode ModifiedMembers;
    public static OptimisticLockingMode AllMembers;
    public static OptimisticLockingMode TimeStamp;
}
[ComVisibleAttribute("True")]
[GuidAttribute("D6BD972F-832D-4CB9-92A8-6BCF8E14F898")]
public enum Eco.UmlRt.OrderingKind : Enum {
    public int value__;
    public static OrderingKind Ordered;
    public static OrderingKind Unordered;
}
[ComVisibleAttribute("True")]
[GuidAttribute("3F9A1381-9D56-4442-B966-F8B730F15855")]
public enum Eco.UmlRt.ParameterDirectionKind : Enum {
    public int value__;
    public static ParameterDirectionKind In;
    public static ParameterDirectionKind Out;
    public static ParameterDirectionKind InOut;
}
public enum Eco.UmlRt.PseudostateKind : Enum {
    public int value__;
    public static PseudostateKind Initial;
}
[ComVisibleAttribute("True")]
[GuidAttribute("680C5806-203C-49C6-BAED-5AECE52048A0")]
public enum Eco.UmlRt.SaveAction : Enum {
    public int value__;
    public static SaveAction None;
    public static SaveAction Freeze;
    public static SaveAction DbAssign;
}
[ComVisibleAttribute("True")]
[GuidAttribute("52E2C1F2-45F2-4057-A50E-05C6EA85FF38")]
public enum Eco.UmlRt.ScopeKind : Enum {
    public int value__;
    public static ScopeKind Instance;
    public static ScopeKind Classifier;
}
[ComVisibleAttribute("True")]
[GuidAttribute("05083741-C2DE-4558-8ADB-94091B0FAE0D")]
public enum Eco.UmlRt.TableMapping : Enum {
    public int value__;
    public static TableMapping Own;
    public static TableMapping Parent;
    public static TableMapping Children;
    public static TableMapping Imported;
}
public abstract class Eco.UmlRt.UmlTaggedValues : object {
    public static StringTV Documentation;
    public static BooleanTV Derived;
    public static string TrueString;
    public static string FalseString;
    public static PersistenceTV Persistence;
    private static UmlTaggedValues();
    protected static bool StrEqual(string s1, string s2);
    public static int AsInt(ITaggedValueCollection taggedValues, string tag, int defaultValue);
    public static int AsInt(ITaggedValueCollection taggedValues, string tag);
    public static int AsInt(string value);
    public static bool AsBool(ITaggedValueCollection taggedValues, string tag, bool defaultValue);
    public static bool AsBool(ITaggedValueCollection taggedValues, string tag);
    public static bool AsBool(string value);
    public static string BoolAsString(bool value);
}
public class Eco.UmlRt.ViewModelReferenceType : ValueType {
    private object _value;
    public static ViewModelReferenceType Empty { get; }
    public object Value { get; }
    public ViewModelReferenceType(object viewmodel);
    public static ViewModelReferenceType get_Empty();
    public object get_Value();
}
[ComVisibleAttribute("True")]
[GuidAttribute("54183B64-0584-4DFA-BBCA-DAF36AC29FFE")]
public enum Eco.UmlRt.VisibilityKind : Enum {
    public int value__;
    public static VisibilityKind Private_;
    public static VisibilityKind Protected_;
    public static VisibilityKind Public_;
    public static VisibilityKind Package;
}
public class Eco.Wcf.Common.EcoWCFPMapperSerializerOperationBehaviour : DataContractSerializerOperationBehavior {
    public EcoWCFPMapperSerializerOperationBehaviour(OperationDescription operationDescription);
    public virtual XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList`1<Type> knownTypes);
    private static XmlObjectSerializer CreateDataContractSerializer(Type type, string name, string ns, IList`1<Type> knownTypes);
    public virtual XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1<Type> knownTypes);
    public static void SetDataContractSerializerBehavior(ContractDescription contractDescription);
}
[ServiceKnownTypeAttribute("GetKnownTypes", "MDriven.Persistence.KnownTypesHelper")]
[ServiceContractAttribute]
public interface Eco.Wcf.Common.IPersistenceMapperWCF {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginFetch(ObjectIdList idList, Int32[] memberIdList, FetchStrategy fetchStrategy, AsyncCallback callback, object asyncState);
    public abstract virtual Datablock EndFetch(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginFetchIDListWithCondition(AbstractCondition condition, int maxResults, int offset, AsyncCallback callback, object asyncState);
    public abstract virtual ObjectIdList EndFetchIDListWithCondition(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginFetchDatablockWithCondition(AbstractCondition condition, int maxResults, int offset, AsyncCallback callback, object asyncState);
    public abstract virtual Datablock EndFetchDatablockWithCondition(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginVersionForTime(DateTime clockTime, AsyncCallback callback, object asyncState);
    public abstract virtual int EndVersionForTime(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTimeForVersion(int version, AsyncCallback callback, object asyncState);
    public abstract virtual DateTime EndTimeForVersion(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginSupportsSync(AsyncCallback callback, object asyncState);
    public abstract virtual bool EndSupportsSync(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginUpdate(Datablock datablock, UpdatePrecondition precondition, AsyncCallback callback, object asyncState);
    public abstract virtual ResultFromEndUpdate EndUpdate(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginGetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, AsyncCallback callback, object asyncState);
    public abstract virtual ResultFromGetChanges EndGetChangesSince(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginCurrentSyncVersion(AsyncCallback callback, object asyncState);
    public abstract virtual SyncVersion EndCurrentSyncVersion(IAsyncResult result);
}
[DataContractAttribute]
public class Eco.Wcf.Common.ResultFromEndUpdate : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IdTranslationList <translationList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <version>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SyncVersion <syncVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateResult <updateResult>k__BackingField;
    [DataMemberAttribute]
public IdTranslationList translationList { get; public set; }
    [DataMemberAttribute]
public int version { get; public set; }
    [DataMemberAttribute]
public SyncVersion syncVersion { get; public set; }
    [DataMemberAttribute]
public UpdateResult updateResult { get; public set; }
    [CompilerGeneratedAttribute]
public void set_translationList(IdTranslationList value);
    [CompilerGeneratedAttribute]
public IdTranslationList get_translationList();
    [CompilerGeneratedAttribute]
public void set_version(int value);
    [CompilerGeneratedAttribute]
public int get_version();
    [CompilerGeneratedAttribute]
public void set_syncVersion(SyncVersion value);
    [CompilerGeneratedAttribute]
public SyncVersion get_syncVersion();
    [CompilerGeneratedAttribute]
public void set_updateResult(UpdateResult value);
    [CompilerGeneratedAttribute]
public UpdateResult get_updateResult();
}
[DataContractAttribute]
public class Eco.Wcf.Common.ResultFromGetChanges : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DBChangeCollection <changes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SyncVersion <lastSyncVersion>k__BackingField;
    [DataMemberAttribute]
public DBChangeCollection changes { get; public set; }
    [DataMemberAttribute]
public SyncVersion lastSyncVersion { get; public set; }
    [CompilerGeneratedAttribute]
public void set_changes(DBChangeCollection value);
    [CompilerGeneratedAttribute]
public DBChangeCollection get_changes();
    [CompilerGeneratedAttribute]
public void set_lastSyncVersion(SyncVersion value);
    [CompilerGeneratedAttribute]
public SyncVersion get_lastSyncVersion();
}
public class Eco.Wcf.Common.WFCWrapProxyAndActSync : object {
    private IPersistenceMapperWCF _proxy;
    private List`1<Exception> _seenSecurityExceptions;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> Faulted;
    public WFCWrapProxyAndActSync(IPersistenceMapperWCF proxy);
    private void WFCWrapProxyAndActSync_Opening(object sender, EventArgs e);
    private void WFCWrapProxyAndActSync_Closing(object sender, EventArgs e);
    private void WFCWrapProxyAndActSync_Faulted(object sender, EventArgs e);
    public void Abort();
    public bool SeemsOk();
    [CompilerGeneratedAttribute]
public void add_Faulted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Faulted(EventHandler`1<EventArgs> value);
    public void Fetch(ObjectIdList idList, Int32[] memberIdList, FetchStrategy fetchStrategy, Datablock& datablock);
    public void FetchIDListWithCondition(AbstractCondition condition, int maxResults, int offset, ObjectIdList& result);
    public void FetchDataBlockWithCondition(AbstractCondition condition, int maxResults, int offset, Datablock& result);
    private void LogQueryPlan(ViewModelQueryplanFetchCondition x);
    public void VersionForTime(DateTime clockTime, Int32& version);
    public DateTime TimeForVersion(int version);
    public bool SupportsSync();
    public void Update(Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    public void GetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, DBChangeCollection& changes, SyncVersion& lastSyncVersion);
    public SyncVersion CurrentSyncVersion();
}
public static class MDriven.Persistence.KnownTypesHelper : object {
    private static List`1<Type> _additionalTypes;
    public static List`1<Type> AdditionalTypes { get; }
    private static KnownTypesHelper();
    public static List`1<Type> get_AdditionalTypes();
    public static IEnumerable`1<Type> GetKnownTypes(ICustomAttributeProvider provider);
}
