public class Eco.Actions.Runtime.AbstractActionRuntime : object {
    private string _ModelName;
    private string _runtimeName;
    private string _runtimeNameBasedOnName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortcutKeyModifierWindows>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortcutKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExecuteExpression>k__BackingField;
    private string _Presentation;
    private string _OrgPresentation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EnableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DividerGroupTagSortKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortcutKeyModifierControl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelRootObjectExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelExecuteExpressionOnShow>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SubMenuGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DividerGroupTag>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortcutKeyModifierAlt>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SubMenuGroupSortKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortcutKeyModifierShift>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BringUpViewModel_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BringUpViewModel_Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BringUpViewModel_RuntimeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BringUpReport_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BringUpReport_Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaggedValueCollection <TaggedValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AutoSave>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SaveBeforeNavigate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ViewModelIsModal>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ViewModelIsPopUp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelModalOkEnableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelExecuteExpressionAfterModalOk>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExecuteFrameworkRuntimeActionRT <ExecuteFrameworkRuntimeAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MenuGroup_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Symbol_Identity>k__BackingField;
    private string _AreYouSureQuestion;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AreYouSureExecuteVerb>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AreYouSureCancelVerb>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HintWhenDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HintWhenEnabled>k__BackingField;
    private Type _accessgroupsInitiated;
    private List`1<AccessGroupRuntime> _accessGroups;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OnlyInThis>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UniqifiedName>k__BackingField;
    private bool _ExpressionWillEffectPersistentDataIsInit;
    private bool _ExpressionWillEffectPersistentData;
    public static string TV_HideOnDisable;
    public string Name { get; }
    public string ModelName { get; public set; }
    public string RuntimeName { get; }
    public bool ShortcutKeyModifierWindows { get; internal set; }
    public string ShortcutKey { get; internal set; }
    public string ExecuteExpression { get; internal set; }
    public string Presentation { get; public set; }
    public string SortKeyCombined { get; }
    public string EnableExpression { get; public set; }
    public string DividerGroupTagSortKey { get; public set; }
    public string Id { get; internal set; }
    public bool ShortcutKeyModifierControl { get; internal set; }
    public string ViewModelRootObjectExpression { get; public set; }
    public string ViewModelExecuteExpressionOnShow { get; internal set; }
    public string SubMenuGroup { get; internal set; }
    public string DividerGroupTag { get; public set; }
    public bool ShortcutKeyModifierAlt { get; internal set; }
    public string SubMenuGroupSortKey { get; public set; }
    public bool ShortcutKeyModifierShift { get; internal set; }
    public string BringUpViewModel_Identity { get; internal set; }
    public string BringUpViewModel_Name { get; public set; }
    public string BringUpViewModel_RuntimeName { get; public set; }
    public string BringUpReport_Identity { get; internal set; }
    public string BringUpReport_Name { get; internal set; }
    public ITaggedValueCollection TaggedValues { get; internal set; }
    public bool AutoSave { get; internal set; }
    public bool SaveBeforeNavigate { get; internal set; }
    public bool ViewModelIsModal { get; public set; }
    public bool ViewModelIsPopUp { get; internal set; }
    public string ViewModelModalOkEnableExpression { get; public set; }
    public string ViewModelExecuteExpressionAfterModalOk { get; internal set; }
    public ExecuteFrameworkRuntimeActionRT ExecuteFrameworkRuntimeAction { get; public set; }
    public string MenuGroup_Identity { get; internal set; }
    public string Symbol_Identity { get; internal set; }
    public string AreYouSureQuestion { get; public set; }
    public string AreYouSureExecuteVerb { get; internal set; }
    public string AreYouSureCancelVerb { get; internal set; }
    public string HintWhenDisabled { get; internal set; }
    public string HintWhenEnabled { get; internal set; }
    public string OnlyInThis { get; internal set; }
    public string UniqifiedName { get; public set; }
    public string get_Name();
    public string get_ModelName();
    public void set_ModelName(string value);
    public string get_RuntimeName();
    [CompilerGeneratedAttribute]
internal void set_ShortcutKeyModifierWindows(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortcutKeyModifierWindows();
    [CompilerGeneratedAttribute]
internal void set_ShortcutKey(string value);
    [CompilerGeneratedAttribute]
public string get_ShortcutKey();
    [CompilerGeneratedAttribute]
internal void set_ExecuteExpression(string value);
    [CompilerGeneratedAttribute]
public string get_ExecuteExpression();
    public void set_Presentation(string value);
    public string get_Presentation();
    public string GetPresentationWithTranslation(IEcoServiceProvider sp);
    private string Translate(IEcoServiceProvider sp, string translateable);
    public string PresentationBasedOnContext(IEcoObject obj);
    public static int CompareAA(AbstractActionRuntime x, AbstractActionRuntime y);
    public string get_SortKeyCombined();
    private string GetAsStringValue(IEcoObject obj);
    [CompilerGeneratedAttribute]
public void set_EnableExpression(string value);
    [CompilerGeneratedAttribute]
public string get_EnableExpression();
    [CompilerGeneratedAttribute]
public void set_DividerGroupTagSortKey(string value);
    [CompilerGeneratedAttribute]
public string get_DividerGroupTagSortKey();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_ShortcutKeyModifierControl(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortcutKeyModifierControl();
    [CompilerGeneratedAttribute]
public void set_ViewModelRootObjectExpression(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelRootObjectExpression();
    [CompilerGeneratedAttribute]
internal void set_ViewModelExecuteExpressionOnShow(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelExecuteExpressionOnShow();
    [CompilerGeneratedAttribute]
internal void set_SubMenuGroup(string value);
    [CompilerGeneratedAttribute]
public string get_SubMenuGroup();
    public string GetSubMenuGroupWithTranslation(IEcoServiceProvider sp);
    [CompilerGeneratedAttribute]
public void set_DividerGroupTag(string value);
    [CompilerGeneratedAttribute]
public string get_DividerGroupTag();
    [CompilerGeneratedAttribute]
internal void set_ShortcutKeyModifierAlt(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortcutKeyModifierAlt();
    [CompilerGeneratedAttribute]
public void set_SubMenuGroupSortKey(string value);
    [CompilerGeneratedAttribute]
public string get_SubMenuGroupSortKey();
    [CompilerGeneratedAttribute]
internal void set_ShortcutKeyModifierShift(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortcutKeyModifierShift();
    [CompilerGeneratedAttribute]
internal void set_BringUpViewModel_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_BringUpViewModel_Identity();
    [CompilerGeneratedAttribute]
public void set_BringUpViewModel_Name(string value);
    [CompilerGeneratedAttribute]
public string get_BringUpViewModel_Name();
    [CompilerGeneratedAttribute]
public void set_BringUpViewModel_RuntimeName(string value);
    [CompilerGeneratedAttribute]
public string get_BringUpViewModel_RuntimeName();
    [CompilerGeneratedAttribute]
internal void set_BringUpReport_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_BringUpReport_Identity();
    [CompilerGeneratedAttribute]
internal void set_BringUpReport_Name(string value);
    [CompilerGeneratedAttribute]
public string get_BringUpReport_Name();
    [CompilerGeneratedAttribute]
public ITaggedValueCollection get_TaggedValues();
    [CompilerGeneratedAttribute]
internal void set_TaggedValues(ITaggedValueCollection value);
    [CompilerGeneratedAttribute]
internal void set_AutoSave(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSave();
    [CompilerGeneratedAttribute]
internal void set_SaveBeforeNavigate(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveBeforeNavigate();
    [CompilerGeneratedAttribute]
public void set_ViewModelIsModal(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViewModelIsModal();
    [CompilerGeneratedAttribute]
internal void set_ViewModelIsPopUp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViewModelIsPopUp();
    [CompilerGeneratedAttribute]
public void set_ViewModelModalOkEnableExpression(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelModalOkEnableExpression();
    [CompilerGeneratedAttribute]
internal void set_ViewModelExecuteExpressionAfterModalOk(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelExecuteExpressionAfterModalOk();
    [CompilerGeneratedAttribute]
public void set_ExecuteFrameworkRuntimeAction(ExecuteFrameworkRuntimeActionRT value);
    [CompilerGeneratedAttribute]
public ExecuteFrameworkRuntimeActionRT get_ExecuteFrameworkRuntimeAction();
    [CompilerGeneratedAttribute]
internal void set_MenuGroup_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_MenuGroup_Identity();
    [CompilerGeneratedAttribute]
internal void set_Symbol_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Symbol_Identity();
    public void set_AreYouSureQuestion(string value);
    public string get_AreYouSureQuestion();
    public string GetAreYouSureQuestionWithTranslation(IEcoServiceProvider es);
    public string AreYouSureQuestionWithContext(IEcoObject obj);
    [CompilerGeneratedAttribute]
public string get_AreYouSureExecuteVerb();
    [CompilerGeneratedAttribute]
internal void set_AreYouSureExecuteVerb(string value);
    [CompilerGeneratedAttribute]
public string get_AreYouSureCancelVerb();
    [CompilerGeneratedAttribute]
internal void set_AreYouSureCancelVerb(string value);
    [CompilerGeneratedAttribute]
public string get_HintWhenDisabled();
    [CompilerGeneratedAttribute]
internal void set_HintWhenDisabled(string value);
    [CompilerGeneratedAttribute]
public string get_HintWhenEnabled();
    [CompilerGeneratedAttribute]
internal void set_HintWhenEnabled(string value);
    private void EnsureInitOfAccessGroups(Type ecospaceType);
    public bool EnableDueToAccessGroups(EcoSpace es);
    public string GetSelfVMEnbleDueToAccessGroupsExpression(EcoSpace es, ViewModel vm);
    public bool VisibleDueToAccessGroups(EcoSpace es);
    public bool VisibleDueToAccessGroups(EcoSpace es, HashSet`1<string> targetgroupsToConsider);
    private void SubscribeToUsedAccessGroups(EcoSpace es, ISubscriber sub);
    public List`1<AccessGroupRuntime> GetAccessGroups(Type ecospaceType);
    public IEcoObject ResolveProxyActAsActionsRootObject(IEcoObject curr, AbstractActionRuntime& aa);
    public bool Enable(EcoSpace es, IEcoObject expressionroot, ViewModel vm, Boolean& visible);
    [CompilerGeneratedAttribute]
public string get_OnlyInThis();
    [CompilerGeneratedAttribute]
internal void set_OnlyInThis(string value);
    public virtual AbstractActionRuntime ResolvedAction();
    [CompilerGeneratedAttribute]
public string get_UniqifiedName();
    [CompilerGeneratedAttribute]
public void set_UniqifiedName(string value);
    public bool GetExpressionWillEffectPersistentData(IEcoServiceProvider sp, IClass umlclass, IExternalVariableList variables);
}
public class Eco.Actions.Runtime.AccessGroupRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EnableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <VisibleExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewEnableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ActAsInterestGroup>k__BackingField;
    public List`1<string> ActionIdRefs;
    public List`1<string> ViewModelIdRefs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaggedValueCollection <TaggedValues>k__BackingField;
    public string Identity { get; internal set; }
    public string Name { get; internal set; }
    public string EnableExpression { get; internal set; }
    public string VisibleExpression { get; internal set; }
    public string ViewEnableExpression { get; internal set; }
    public bool ActAsInterestGroup { get; internal set; }
    public bool IsVisibleUsed { get; }
    public ITaggedValueCollection TaggedValues { get; internal set; }
    public bool IsEnabledUsed { get; }
    public bool IsViewEnabledUsed { get; }
    public bool IsRuntimeDefaultOnViews { get; }
    [CompilerGeneratedAttribute]
internal void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_EnableExpression(string value);
    [CompilerGeneratedAttribute]
public string get_EnableExpression();
    [CompilerGeneratedAttribute]
internal void set_VisibleExpression(string value);
    [CompilerGeneratedAttribute]
public string get_VisibleExpression();
    [CompilerGeneratedAttribute]
internal void set_ViewEnableExpression(string value);
    [CompilerGeneratedAttribute]
public string get_ViewEnableExpression();
    [CompilerGeneratedAttribute]
internal void set_ActAsInterestGroup(bool value);
    [CompilerGeneratedAttribute]
public bool get_ActAsInterestGroup();
    public bool get_IsVisibleUsed();
    [CompilerGeneratedAttribute]
public ITaggedValueCollection get_TaggedValues();
    [CompilerGeneratedAttribute]
internal void set_TaggedValues(ITaggedValueCollection value);
    public bool get_IsEnabledUsed();
    public bool get_IsViewEnabledUsed();
    public bool get_IsRuntimeDefaultOnViews();
    public Publisher AccessGroupAsSubscribablePublisher(EcoSpace es);
    private AccessGroupRuntimeResultMemory GetAccessGroupRuntimeMemory(EcoSpace es);
    public bool IsEnabled(EcoSpace es);
    public bool IsViewEnabled(EcoSpace es);
    public bool IsVisible(EcoSpace es);
}
public class Eco.Actions.Runtime.AccessGroupRuntimeResultMemory : object {
    private IGlobalActionAndAccessGroupService _iagrs;
    private AccessGroupRuntime _ag;
    private EventSubscriber _subscriber;
    private bool _isOutOfDate;
    private bool _isEnabled;
    private bool _isVisible;
    private bool _isViewEnable;
    private Publisher _publisher;
    public Publisher AccessGroupAsSubscribablePublisher { get; }
    public bool IsEnabled { get; }
    public bool IsVisible { get; }
    public bool IsViewEnabled { get; }
    public AccessGroupRuntimeResultMemory(IGlobalActionAndAccessGroupService iagrs, AccessGroupRuntime ag);
    public Publisher get_AccessGroupAsSubscribablePublisher();
    public bool get_IsEnabled();
    public void EnsureUpToDate();
    public bool get_IsVisible();
    public bool get_IsViewEnabled();
    private void _subscriber_Receive(object sender, EventArgs e);
    private void PublishSend(bool onreceive);
    internal void CleanForFree();
    [CompilerGeneratedAttribute]
private void <EnsureUpToDate>b__13_0();
}
public class Eco.Actions.Runtime.ActionModalityHelper : object {
    public static void CheckAndPerformActionAfterOk(EcoSpace es, IExternalVariableList modalViewModelVars, IEcoObject recieverOnOk_Root, AbstractActionRuntime actionThatStartedModality, IExternalVariableList viewModelThatStartedModalityVars);
}
public class Eco.Actions.Runtime.ActionOnShowHelper : object {
    public static IModifiableVariableList CopyVarRefsToNewModifiableList(EcoSpace es, IExternalVariableList variablestoref);
    public static void CheckAndPerformOnShow(EcoSpace es, AbstractActionRuntime aa, IExternalVariableList variablesinNewWindow, IExternalVariableList variablesCurrentWindow, IElement objectToPerformActionOn, IElement newVMRoot);
}
public class Eco.Actions.Runtime.ActionsRTCreator : object {
    private XDocument _xdoc;
    public XDocument XDoc { get; }
    public ActionsRTCreator(XDocument xdoc);
    public XDocument get_XDoc();
    public static ActionsRTCreator LoadFromXmlString(string xml);
    public ActionsRuntime Iterate();
    private void ParseXml(ActionsRuntime ar);
    public void ParseStylesInModel(ActionsRuntime ar, XElement xeStylesInModel);
    private void CreateOrUpdateStyleColorPropertiesFromXml(XElement colorelem, Dictionary`2<string, XElement> indexedstuff, ActionsRuntime ar);
    private void CreateOrUpdateStyleDefinitionFromXml(XElement StyleDefinitionselement, Dictionary`2<string, XElement> indexedstuff, ActionsRuntime ar);
    private StyleColorRuntime ParseStyleColor(XElement xecolorprops);
    private string SafeGetAttribute(XElement xechild, string v);
    public void CleanForFree();
}
public class Eco.Actions.Runtime.ActionsRuntime : object {
    private List`1<GlobalActionRuntime> _GlobalActions;
    private List`1<ContextActionRuntime> _ContextActions;
    private List`1<ClassActionRuntime> _ClassActions;
    private List`1<ClassActionRuntime> _ClassDragActions;
    private Dictionary`2<string, MenuGroupRuntime> _MenuGroups;
    private Dictionary`2<string, SymbolRuntime> _Symbols;
    private Dictionary`2<string, AccessGroupRuntime> _AccessGroups;
    private Dictionary`2<string, AccessGroupRuntime> _AccessGroupsByName;
    private Dictionary`2<string, AbstractActionRuntime> _AllActionsByIdentity;
    private Dictionary`2<string, AbstractActionRuntime> _AllActionsByUniqifiedName;
    private HashSet`1<string> _targetGroups;
    private Dictionary`2<string, StyleDefinitionRuntime> _StyleDefinitionRuntimeDictionary;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <StylesLastUpdateTime>k__BackingField;
    private Dictionary`2<string, StyleDefinitionRuntimeThemeColor> _StyleDefinitionRuntimeThemeColorDictionary;
    public List`1<GlobalActionRuntime> GlobalActions { get; }
    public List`1<ContextActionRuntime> ContextActions { get; }
    public List`1<ClassActionRuntime> ClassActions { get; }
    public List`1<ClassActionRuntime> ClassDragActions { get; }
    public Dictionary`2<string, MenuGroupRuntime> MenuGroups { get; }
    public Dictionary`2<string, SymbolRuntime> Symbols { get; }
    public Dictionary`2<string, AccessGroupRuntime> AccessGroups { get; }
    public Dictionary`2<string, AccessGroupRuntime> AccessGroupsByName { get; }
    public Dictionary`2<string, AbstractActionRuntime> AllActionsByIdentity { get; }
    public Dictionary`2<string, AbstractActionRuntime> AllActionsByUniqifiedName { get; }
    public HashSet`1<string> TargetGroups { get; }
    public Dictionary`2<string, StyleDefinitionRuntime> StyleDefinitionRuntimeDictionary { get; }
    public DateTime StylesLastUpdateTime { get; public set; }
    public Dictionary`2<string, StyleDefinitionRuntimeThemeColor> StyleDefinitionRuntimeThemeColorDictionary { get; }
    public List`1<GlobalActionRuntime> get_GlobalActions();
    public List`1<ContextActionRuntime> get_ContextActions();
    public List`1<ClassActionRuntime> get_ClassActions();
    public List`1<ClassActionRuntime> get_ClassDragActions();
    public Dictionary`2<string, MenuGroupRuntime> get_MenuGroups();
    public Dictionary`2<string, SymbolRuntime> get_Symbols();
    public Dictionary`2<string, AccessGroupRuntime> get_AccessGroups();
    public Dictionary`2<string, AccessGroupRuntime> get_AccessGroupsByName();
    public Dictionary`2<string, AbstractActionRuntime> get_AllActionsByIdentity();
    public Dictionary`2<string, AbstractActionRuntime> get_AllActionsByUniqifiedName();
    internal void FixUpAfterLoad();
    public void Merge(ActionsRuntime other);
    private void ResolveMenuGroupForOneAction(AbstractActionRuntime aa);
    public Dictionary`2<string, IClass> OkClasses(IClass iClass);
    public List`1<AbstractActionRuntime> GetActionsBasedOnViewModelClass(ViewModelClass vc, IEcoObject optionalTargetToHandleSubClassActions);
    private List`1<AbstractActionRuntime> GetActionsBasedOnClass(IClass typetotarget, ViewModelClass vc, IEcoObject optionalTargetToHandleSubClassActions, bool thisTheIsActAsRun);
    public IEcoObject ResolveIElementToIEcoObjectMultiStrategy(IElement currelem, IClass classOfTypedNullInCaseOfNullValue);
    public HashSet`1<string> get_TargetGroups();
    public void InstallTargetGroup(Type ecospaceType, string aTargetGroup);
    public bool IsVisibleGivenListOfAccessGroups(EcoSpace es, List`1<AccessGroupRuntime> ags, bool thisIsViewModelSkipTargetGroups);
    public bool IsVisibleGivenListOfAccessGroups(EcoSpace es, List`1<AccessGroupRuntime> ags, HashSet`1<string> targetGroupsToConsider, bool thisIsViewModelSkipTargetGroups);
    public Dictionary`2<string, StyleDefinitionRuntime> get_StyleDefinitionRuntimeDictionary();
    [CompilerGeneratedAttribute]
public DateTime get_StylesLastUpdateTime();
    [CompilerGeneratedAttribute]
public void set_StylesLastUpdateTime(DateTime value);
    internal StyleDefinitionRuntime GetOrCreateStyleDefinitionRuntime(string value);
    internal void CleanForFree();
    public Dictionary`2<string, StyleDefinitionRuntimeThemeColor> get_StyleDefinitionRuntimeThemeColorDictionary();
    public StyleDefinitionRuntimeThemeColor GetOrCreateThemeColor(string name);
}
public class Eco.Actions.Runtime.ClassActionRuntime : AbstractActionRuntime {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassToPerformActionOn_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassToPerformActionOn_Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDragAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DraggedArgumentClass_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DraggedArgumentClass_Name>k__BackingField;
    private IClass _iclassTarget;
    private IClass _iclassDragged;
    private IMethod _MethodForTrigger;
    private Nullable`1<bool> _isTriggerAction;
    public string ClassToPerformActionOn_Identity { get; internal set; }
    public string ClassToPerformActionOn_Name { get; public set; }
    public bool IsDragAction { get; internal set; }
    public string DraggedArgumentClass_Identity { get; internal set; }
    public string DraggedArgumentClass_Name { get; internal set; }
    [CompilerGeneratedAttribute]
internal void set_ClassToPerformActionOn_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_ClassToPerformActionOn_Identity();
    [CompilerGeneratedAttribute]
public void set_ClassToPerformActionOn_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ClassToPerformActionOn_Name();
    [CompilerGeneratedAttribute]
internal void set_IsDragAction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDragAction();
    [CompilerGeneratedAttribute]
internal void set_DraggedArgumentClass_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_DraggedArgumentClass_Identity();
    [CompilerGeneratedAttribute]
internal void set_DraggedArgumentClass_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DraggedArgumentClass_Name();
    public IClass ClassToPerformActionOnIClass(IEcoTypeSystem iEcoTypeSystem);
    public IClass DraggedArgumentIClass(IEcoTypeSystem iEcoTypeSystem);
    public bool IsTriggerAction(IEcoServiceProvider es);
    public bool ShouldActionBeVisibleBasedOnCurrentStateAndTriggerAvailability(IObject io);
}
public class Eco.Actions.Runtime.ContextActionRuntime : AbstractActionRuntime {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelContext_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelContext_Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OnlyInThisNesting_Name>k__BackingField;
    public string ViewModelContext_Identity { get; internal set; }
    public string ViewModelContext_Name { get; internal set; }
    public string OnlyInThisNesting_Name { get; internal set; }
    [CompilerGeneratedAttribute]
internal void set_ViewModelContext_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelContext_Identity();
    [CompilerGeneratedAttribute]
internal void set_ViewModelContext_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ViewModelContext_Name();
    [CompilerGeneratedAttribute]
internal void set_OnlyInThisNesting_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OnlyInThisNesting_Name();
}
public enum Eco.Actions.Runtime.ExecuteFrameworkRuntimeActionRT : Enum {
    public int value__;
    public static ExecuteFrameworkRuntimeActionRT Save;
    public static ExecuteFrameworkRuntimeActionRT Refresh;
    public static ExecuteFrameworkRuntimeActionRT Undo;
    public static ExecuteFrameworkRuntimeActionRT Redo;
    public static ExecuteFrameworkRuntimeActionRT Exit;
    public static ExecuteFrameworkRuntimeActionRT None;
    public static ExecuteFrameworkRuntimeActionRT BusinessDelete;
    public static ExecuteFrameworkRuntimeActionRT DoModalOk;
    public static ExecuteFrameworkRuntimeActionRT Cancel;
    public static ExecuteFrameworkRuntimeActionRT ReadOnlyModeToogle;
    public static ExecuteFrameworkRuntimeActionRT BackwardsNav;
}
public class Eco.Actions.Runtime.GlobalActionAndAccessGroupRuntimeService : EcoSpacePart {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<bool> <IsModalOkEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<bool> <IsUndoEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<bool> <IsExitEnabled>k__BackingField;
    private IEcoServiceProvider _es;
    private Publisher _publisherOneGlobalActionWasInvalidated;
    private Dictionary`2<AccessGroupRuntime, AccessGroupRuntimeResultMemory> _resultMemory;
    private Dictionary`2<GlobalActionRuntime, GlobalActionRuntimeResultMemory> _resultMemoryGlobalActions;
    public Func`1<bool> IsModalOkEnabled { get; public set; }
    public Func`1<bool> IsUndoEnabled { get; public set; }
    public Func`1<bool> IsExitEnabled { get; public set; }
    public IEcoServiceProvider SP { get; }
    public Publisher ChangeInAnyGlobalActionEnableOrVisiblePublisher { get; }
    public GlobalActionAndAccessGroupRuntimeService(IEcoServiceProvider es);
    public static void InstallAsEcoService(IEcoServiceProvider sp);
    public static bool AsNullableBool(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsModalOkEnabled(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<bool> get_IsModalOkEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsUndoEnabled(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<bool> get_IsUndoEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsExitEnabled(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<bool> get_IsExitEnabled();
    protected virtual void DoDeactivate();
    protected virtual void DoActivate();
    private void CleanUpAllMemory();
    public sealed virtual IEcoServiceProvider get_SP();
    public virtual void CleanForFree();
    public sealed virtual AccessGroupRuntimeResultMemory GetAccessGroupRuntimeResultMemory(AccessGroupRuntime ag);
    public sealed virtual GlobalActionRuntimeResultMemory GetGlobalActionRuntimeResultMemory(GlobalActionRuntime ga);
    public sealed virtual Publisher get_ChangeInAnyGlobalActionEnableOrVisiblePublisher();
    internal void OneGlobalActionWasInvalidated();
}
public class Eco.Actions.Runtime.GlobalActionRuntime : AbstractActionRuntime {
    public Publisher GlobalActionAsSubscribablePublisher(EcoSpace es);
    private GlobalActionRuntimeResultMemory GetGlobalActionRuntimeMemory(EcoSpace es);
    public bool IsEnabled(EcoSpace es);
    public bool IsVisible(EcoSpace es);
}
public class Eco.Actions.Runtime.GlobalActionRuntimeResultMemory : object {
    private GlobalActionAndAccessGroupRuntimeService _iagrs;
    private GlobalActionRuntime _ga;
    private EventSubscriber _subscriber;
    private bool _isOutOfDate;
    private bool _isPendingRefresh;
    private bool _isEnabled;
    private bool _isVisible;
    private Publisher _publisherGlobalActionInvalidated;
    public Publisher GlobalActionAsSubscribablePublisher { get; }
    public bool IsEnabled { get; }
    public bool IsPendingRefresh { get; }
    public bool IsVisible { get; }
    public GlobalActionRuntimeResultMemory(GlobalActionAndAccessGroupRuntimeService iagrs, GlobalActionRuntime ga);
    public Publisher get_GlobalActionAsSubscribablePublisher();
    public bool get_IsEnabled();
    public bool get_IsPendingRefresh();
    public void EnsureUpToDate();
    public bool get_IsVisible();
    private void _subscriber_Receive(object sender, EventArgs e);
    private void PublishSend(bool onreceive);
    internal void CleanForFree();
    [CompilerGeneratedAttribute]
private void <EnsureUpToDate>b__15_0();
}
public interface Eco.Actions.Runtime.IActionCreator {
}
public interface Eco.Actions.Runtime.IGlobalActionAndAccessGroupService {
    public IEcoServiceProvider SP { get; }
    public Publisher ChangeInAnyGlobalActionEnableOrVisiblePublisher { get; }
    public Func`1<bool> IsModalOkEnabled { get; public set; }
    public Func`1<bool> IsUndoEnabled { get; public set; }
    public Func`1<bool> IsExitEnabled { get; public set; }
    public abstract virtual IEcoServiceProvider get_SP();
    public abstract virtual AccessGroupRuntimeResultMemory GetAccessGroupRuntimeResultMemory(AccessGroupRuntime ag);
    public abstract virtual GlobalActionRuntimeResultMemory GetGlobalActionRuntimeResultMemory(GlobalActionRuntime ga);
    public abstract virtual Publisher get_ChangeInAnyGlobalActionEnableOrVisiblePublisher();
    public abstract virtual void set_IsModalOkEnabled(Func`1<bool> value);
    public abstract virtual Func`1<bool> get_IsModalOkEnabled();
    public abstract virtual void set_IsUndoEnabled(Func`1<bool> value);
    public abstract virtual Func`1<bool> get_IsUndoEnabled();
    public abstract virtual void set_IsExitEnabled(Func`1<bool> value);
    public abstract virtual Func`1<bool> get_IsExitEnabled();
}
public class Eco.Actions.Runtime.MenuGroupRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SortKey>k__BackingField;
    public string Identity { get; internal set; }
    public string Name { get; internal set; }
    public string SortKey { get; internal set; }
    [CompilerGeneratedAttribute]
internal void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_SortKey(string value);
    [CompilerGeneratedAttribute]
public string get_SortKey();
    public string GetNameWithTranslation(IEcoServiceProvider sp);
}
public class Eco.Actions.Runtime.ProxyActAsActionRuntime : AbstractActionRuntime {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassActionRuntime <ClassActionRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionActAs>k__BackingField;
    public ClassActionRuntime ClassActionRuntime { get; private set; }
    public string ExpressionActAs { get; private set; }
    public ProxyActAsActionRuntime(ClassActionRuntime ca, string expressionActAs);
    [CompilerGeneratedAttribute]
public ClassActionRuntime get_ClassActionRuntime();
    [CompilerGeneratedAttribute]
private void set_ClassActionRuntime(ClassActionRuntime value);
    [CompilerGeneratedAttribute]
public string get_ExpressionActAs();
    [CompilerGeneratedAttribute]
private void set_ExpressionActAs(string value);
    public virtual AbstractActionRuntime ResolvedAction();
}
public class Eco.Actions.Runtime.StyleColorRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <A>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <R>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <G>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <B>k__BackingField;
    public string A { get; internal set; }
    public string R { get; internal set; }
    public string G { get; internal set; }
    public string B { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_A();
    [CompilerGeneratedAttribute]
internal void set_A(string value);
    [CompilerGeneratedAttribute]
public string get_R();
    [CompilerGeneratedAttribute]
internal void set_R(string value);
    [CompilerGeneratedAttribute]
public string get_G();
    [CompilerGeneratedAttribute]
internal void set_G(string value);
    [CompilerGeneratedAttribute]
public string get_B();
    [CompilerGeneratedAttribute]
internal void set_B(string value);
}
public class Eco.Actions.Runtime.StyleDefinitionRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    private Dictionary`2<string, StyleTargetRuntime> _StyleTargetRuntimeDictionary;
    public string Name { get; public set; }
    public Dictionary`2<string, StyleTargetRuntime> StyleTargetRuntimeDictionary { get; }
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    public Dictionary`2<string, StyleTargetRuntime> get_StyleTargetRuntimeDictionary();
    public StyleTargetRuntime GetOrCreateStyleTargetRuntime(string name, bool createifnotfound);
}
public class Eco.Actions.Runtime.StyleDefinitionRuntimeThemeColor : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <A>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <R>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <G>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <B>k__BackingField;
    public string Name { get; public set; }
    public byte A { get; public set; }
    public byte R { get; public set; }
    public byte G { get; public set; }
    public byte B { get; public set; }
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_A(byte value);
    [CompilerGeneratedAttribute]
public byte get_A();
    [CompilerGeneratedAttribute]
public void set_R(byte value);
    [CompilerGeneratedAttribute]
public byte get_R();
    [CompilerGeneratedAttribute]
public void set_G(byte value);
    [CompilerGeneratedAttribute]
public byte get_G();
    [CompilerGeneratedAttribute]
public void set_B(byte value);
    [CompilerGeneratedAttribute]
public byte get_B();
    public object AsHex();
}
public class Eco.Actions.Runtime.StyleTargetRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AlignHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AlignVertical>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderBottom>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderTop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderRight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PaddingBottom>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PaddingTop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PaddingLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PaddingRight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StyleColorRuntime <ColorFill>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StyleColorRuntime <ColorStroke>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StyleColorRuntime <ColorFont>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontDecoration>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderTopLeftRadius>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderTopRightRadius>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderBottomLeftRadius>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BorderBottomRightRadius>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Animation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HeightMax>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HeightMin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <WidthMax>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <WidthMin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileNameInFontsDir>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Shadow>k__BackingField;
    public string Name { get; public set; }
    public string AlignHorizontal { get; internal set; }
    public string AlignVertical { get; internal set; }
    public string BorderBottom { get; internal set; }
    public string BorderTop { get; internal set; }
    public string BorderLeft { get; internal set; }
    public string BorderRight { get; internal set; }
    public string MarginBottom { get; internal set; }
    public string MarginTop { get; internal set; }
    public string MarginLeft { get; internal set; }
    public string MarginRight { get; internal set; }
    public string PaddingBottom { get; internal set; }
    public string PaddingTop { get; internal set; }
    public string PaddingLeft { get; internal set; }
    public string PaddingRight { get; internal set; }
    public StyleColorRuntime ColorFill { get; internal set; }
    public StyleColorRuntime ColorStroke { get; internal set; }
    public StyleColorRuntime ColorFont { get; internal set; }
    public string FontDecoration { get; internal set; }
    public string FontFamily { get; internal set; }
    public string FontWeight { get; internal set; }
    public string FontSize { get; internal set; }
    public string BorderTopLeftRadius { get; internal set; }
    public string BorderTopRightRadius { get; internal set; }
    public string BorderBottomLeftRadius { get; internal set; }
    public string BorderBottomRightRadius { get; internal set; }
    public string Animation { get; internal set; }
    public string HeightMax { get; internal set; }
    public string HeightMin { get; internal set; }
    public string WidthMax { get; internal set; }
    public string WidthMin { get; internal set; }
    public bool Italic { get; internal set; }
    public bool Bold { get; internal set; }
    public bool Strikethrough { get; internal set; }
    public bool Underline { get; internal set; }
    public string FileNameInFontsDir { get; public set; }
    public string Shadow { get; public set; }
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_AlignHorizontal();
    [CompilerGeneratedAttribute]
internal void set_AlignHorizontal(string value);
    [CompilerGeneratedAttribute]
public string get_AlignVertical();
    [CompilerGeneratedAttribute]
internal void set_AlignVertical(string value);
    [CompilerGeneratedAttribute]
public string get_BorderBottom();
    [CompilerGeneratedAttribute]
internal void set_BorderBottom(string value);
    [CompilerGeneratedAttribute]
public string get_BorderTop();
    [CompilerGeneratedAttribute]
internal void set_BorderTop(string value);
    [CompilerGeneratedAttribute]
public string get_BorderLeft();
    [CompilerGeneratedAttribute]
internal void set_BorderLeft(string value);
    [CompilerGeneratedAttribute]
public string get_BorderRight();
    [CompilerGeneratedAttribute]
internal void set_BorderRight(string value);
    [CompilerGeneratedAttribute]
public string get_MarginBottom();
    [CompilerGeneratedAttribute]
internal void set_MarginBottom(string value);
    [CompilerGeneratedAttribute]
public string get_MarginTop();
    [CompilerGeneratedAttribute]
internal void set_MarginTop(string value);
    [CompilerGeneratedAttribute]
public string get_MarginLeft();
    [CompilerGeneratedAttribute]
internal void set_MarginLeft(string value);
    [CompilerGeneratedAttribute]
public string get_MarginRight();
    [CompilerGeneratedAttribute]
internal void set_MarginRight(string value);
    [CompilerGeneratedAttribute]
public string get_PaddingBottom();
    [CompilerGeneratedAttribute]
internal void set_PaddingBottom(string value);
    [CompilerGeneratedAttribute]
public string get_PaddingTop();
    [CompilerGeneratedAttribute]
internal void set_PaddingTop(string value);
    [CompilerGeneratedAttribute]
public string get_PaddingLeft();
    [CompilerGeneratedAttribute]
internal void set_PaddingLeft(string value);
    [CompilerGeneratedAttribute]
public string get_PaddingRight();
    [CompilerGeneratedAttribute]
internal void set_PaddingRight(string value);
    [CompilerGeneratedAttribute]
public StyleColorRuntime get_ColorFill();
    [CompilerGeneratedAttribute]
internal void set_ColorFill(StyleColorRuntime value);
    [CompilerGeneratedAttribute]
public StyleColorRuntime get_ColorStroke();
    [CompilerGeneratedAttribute]
internal void set_ColorStroke(StyleColorRuntime value);
    [CompilerGeneratedAttribute]
public StyleColorRuntime get_ColorFont();
    [CompilerGeneratedAttribute]
internal void set_ColorFont(StyleColorRuntime value);
    [CompilerGeneratedAttribute]
public string get_FontDecoration();
    [CompilerGeneratedAttribute]
internal void set_FontDecoration(string value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
internal void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public string get_FontWeight();
    [CompilerGeneratedAttribute]
internal void set_FontWeight(string value);
    [CompilerGeneratedAttribute]
public string get_FontSize();
    [CompilerGeneratedAttribute]
internal void set_FontSize(string value);
    [CompilerGeneratedAttribute]
public string get_BorderTopLeftRadius();
    [CompilerGeneratedAttribute]
internal void set_BorderTopLeftRadius(string value);
    [CompilerGeneratedAttribute]
public string get_BorderTopRightRadius();
    [CompilerGeneratedAttribute]
internal void set_BorderTopRightRadius(string value);
    [CompilerGeneratedAttribute]
public string get_BorderBottomLeftRadius();
    [CompilerGeneratedAttribute]
internal void set_BorderBottomLeftRadius(string value);
    [CompilerGeneratedAttribute]
public string get_BorderBottomRightRadius();
    [CompilerGeneratedAttribute]
internal void set_BorderBottomRightRadius(string value);
    [CompilerGeneratedAttribute]
public string get_Animation();
    [CompilerGeneratedAttribute]
internal void set_Animation(string value);
    [CompilerGeneratedAttribute]
public string get_HeightMax();
    [CompilerGeneratedAttribute]
internal void set_HeightMax(string value);
    [CompilerGeneratedAttribute]
public string get_HeightMin();
    [CompilerGeneratedAttribute]
internal void set_HeightMin(string value);
    [CompilerGeneratedAttribute]
public string get_WidthMax();
    [CompilerGeneratedAttribute]
internal void set_WidthMax(string value);
    [CompilerGeneratedAttribute]
public string get_WidthMin();
    [CompilerGeneratedAttribute]
internal void set_WidthMin(string value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
internal void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
internal void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strikethrough();
    [CompilerGeneratedAttribute]
internal void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
internal void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public string get_FileNameInFontsDir();
    [CompilerGeneratedAttribute]
public void set_FileNameInFontsDir(string value);
    [CompilerGeneratedAttribute]
public string get_Shadow();
    [CompilerGeneratedAttribute]
public void set_Shadow(string value);
}
public class Eco.Actions.Runtime.SymbolRuntime : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <XamlDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string Identity { get; internal set; }
    public string XamlDefinition { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
internal void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
internal void set_XamlDefinition(string value);
    [CompilerGeneratedAttribute]
public string get_XamlDefinition();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[ExtensionAttribute]
public static class Eco.Linq.EcoLinqExtender : object {
    [ExtensionAttribute]
public static EcoQuery`1<T> PSQuery(IEcoServiceProvider sp);
    [ExtensionAttribute]
public static EcoQuery`1<T> PSQuery(IEcoServiceProvider sp, IEcoList`1<T> context);
    [ExtensionAttribute]
public static EcoQuery`1<T> MemQuery(IEcoServiceProvider sp);
    [ExtensionAttribute]
public static bool SqlLike(string s, string pattern);
    [ExtensionAttribute]
public static bool SqlLikeCaseInsensitive(string s, string pattern);
}
public class Eco.Linq.EcoQuery`1 : object {
    private EcoQueryProvider`1<T> provider;
    private Expression expression;
    public bool InPS { get; public set; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public EcoQuery`1(IEcoServiceProvider sp);
    public EcoQuery`1(IObjectList source);
    public EcoQuery`1(IObject source);
    public EcoQuery`1(EcoQueryProvider`1<T> provider, Expression expression);
    public bool get_InPS();
    public void set_InPS(bool value);
    public string GetResultingOclExpression();
    public EcoQuery`1<T> Intersection(EcoQuery`1<T> queryToIntersect);
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Eco.Linq.EcoQueryProvider`1 : object {
    private Type _roottype;
    private IEcoServiceProvider serviceProvider;
    private IObjectList listSource;
    private IObject objectSource;
    private bool inPS;
    private OclEnvironment _env;
    private Dictionary`2<ParameterExpression, OclVariableBinding> _lambdaParameters;
    private Dictionary`2<string, object> _uniqueConstants;
    private Dictionary`2<string, IOclOperation> _operations;
    private string _resultingOclExpression;
    private int _StartAt;
    private int _MaxFetch;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DelistResultReturnFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DelistResultReturnFirst_MustBeSingleResult>k__BackingField;
    public bool InPS { get; public set; }
    public IEcoTypeSystem TypeSystem { get; }
    public IVariableFactoryService VariableFactory { get; }
    private OclServiceImpl OclService { get; }
    public int StartAt { get; public set; }
    public int MaxFetch { get; public set; }
    public bool DelistResultReturnFirst { get; public set; }
    public bool DelistResultReturnFirst_MustBeSingleResult { get; public set; }
    public EcoQueryProvider`1(IEcoServiceProvider sp);
    public EcoQueryProvider`1(IEcoServiceProvider sp, Type roottype);
    public EcoQueryProvider`1(IObjectList source);
    public EcoQueryProvider`1(IObject source);
    public sealed virtual IQueryable`1<S2> CreateQuery(Expression expression);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual T2 Execute(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public string GetResultingOclExpression(Expression expression);
    private object InternalExecute(Expression expression);
    public bool get_InPS();
    public void set_InPS(bool value);
    public IEcoTypeSystem get_TypeSystem();
    public IVariableFactoryService get_VariableFactory();
    private OclServiceImpl get_OclService();
    private sealed virtual override OclNode Eco.Linq.IEcoQuery.GetSourceNode();
    private bool NullableAndNull(Expression expr, OclNode node);
    private OclNode AddOclNot(OclNode node);
    private OclNode AddOclFilterOnType(OclNode node, Type t);
    private OclNode WalkExpression(Expression parentexpression, Expression expression, int recursedepth);
    private OclNode WalkExpressionAllButBinary(Expression parentexpression, Expression expression, int recursedepth);
    public static Type GetUnderlyingType(MemberInfo member);
    public static object GetResolvedValue(MemberExpression memberexp);
    private OclNode CreateOclMethodCallNode(Expression parentexpression, int recursedepth, MethodCallExpression methodCallExp);
    private OclNode HandleIntersect(Expression parentexpression, MethodCallExpression methodCallExp);
    private OclNode HandleExcept(Expression parentexpression, MethodCallExpression methodCallExp);
    private OclNode HandleContains(Expression parentexpression, MethodCallExpression methodCallExp);
    private OclNode HandleAnyOrAll(Expression parentexpression, MethodCallExpression methodCallExp, string op);
    private OclNode CreateOclMemberNode(Expression parentexpression, int recursedepth, MemberExpression memberExp);
    private OclNode CreateOclConstantNode(ConstantExpression constExp);
    private OclNode CreateOclBinaryNode(BinaryExpression binExp, OclNode left, OclNode right);
    private bool NoIEcoObjectInExpressionPath(MemberExpression memExp);
    private OclNode HandleOperator(Expression parentexpression, MethodCallExpression methodCallExp);
    private OclNode HandleOperatorWithOclOperator(Expression parentexpression, MethodCallExpression methodCallExp, string oclNamedOperator);
    private TBoldOclVariableReference CreateBindingReferencePair(string name, object value, bool addbinding);
    private void EnsureConstantNameIsDifferentIfValueIsDifferent(String& name, object value);
    private OclNode HandleIterator(Expression parentexpression, MethodCallExpression methodCallExp, string iteratorName, TBoldOCLIteratorSpecifier iteratorType);
    private void LookUpAndSetSymbol(OclOperation op);
    public OclEntry InterpretExpressionAndInitOcl(Expression expression);
    public int get_StartAt();
    public void set_StartAt(int value);
    public int get_MaxFetch();
    public void set_MaxFetch(int value);
    [CompilerGeneratedAttribute]
public bool get_DelistResultReturnFirst();
    [CompilerGeneratedAttribute]
public void set_DelistResultReturnFirst(bool value);
    [CompilerGeneratedAttribute]
public void set_DelistResultReturnFirst_MustBeSingleResult(bool value);
    [CompilerGeneratedAttribute]
public bool get_DelistResultReturnFirst_MustBeSingleResult();
}
internal interface Eco.Linq.IEcoQuery {
    public abstract virtual OclNode GetSourceNode();
}
public class Eco.Linq.ProviderException : Exception {
    public ProviderException(string message, Exception ex);
    public ProviderException(string message);
}
[ExtensionAttribute]
public static class Eco.ObjectRepresentation.EcoObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsNull(IEcoObject ecoObject);
    [ExtensionAttribute]
public static T GetValue(IEcoObject obj);
    [ExtensionAttribute]
public static IEcoServiceProvider ServiceProvider(IEcoObject obj);
    [ExtensionAttribute]
public static IEnumerable`1<IEcoObject> ToEnumerable(IEcoObject ecoObject);
    [ExtensionAttribute]
public static string ExternalId(IEcoObject obj);
    [ExtensionAttribute]
public static string ExternalIdWithClassName(IEcoObject obj);
}
[ExtensionAttribute]
public static class Eco.Services.IActionLanguageServiceExtensions : object {
    [ExtensionAttribute]
public static void Execute(IActionLanguageService service, IEcoObject root, string expression);
    [ExtensionAttribute]
public static void Execute(IActionLanguageService service, IEcoObject root, string expression, IExternalVariableList variableList);
    [ExtensionAttribute]
public static IElement Evaluate(IActionLanguageService service, IEcoObject root, string expression);
    [ExtensionAttribute]
public static IElement Evaluate(IActionLanguageService service, IEcoObject root, string expression, IExternalVariableList variableList);
}
[ExtensionAttribute]
public static class Eco.Services.IOclPsServiceExtensions : object {
    [ExtensionAttribute]
public static IObjectList Execute(IOclPsService service, IEcoObject root, string expression);
    [ExtensionAttribute]
public static IObjectList Execute(IOclPsService service, IEcoObject root, string expression, IExternalVariableList variables);
    [ExtensionAttribute]
public static IObjectList Execute(IOclPsService service, IEcoObject root, string expression, IExternalVariableList variables, int maxAnswers, int offset);
}
[ExtensionAttribute]
public static class Eco.Services.IOclServiceExtensions : object {
    [ExtensionAttribute]
public static IElement Evaluate(IOclService service, IEcoObject root, string expression);
    [ExtensionAttribute]
public static IElement Evaluate(IOclService service, IEcoObject root, string expression, IExternalVariableList variables);
}
[ExtensionAttribute]
public static class Eco.Services.PersistenceServiceExtensions : object {
    [ExtensionAttribute]
public static void UpdateDatabase(IPersistenceService persistenceService, IEcoObject obj);
    [ExtensionAttribute]
public static void Unload(IPersistenceService persistenceService, IEcoObject obj);
    [ExtensionAttribute]
public static void DiscardChanges(IPersistenceService persistenceService, IEcoObject obj);
}
public class Eco.ViewModel.Runtime.ActionInViewModel : object {
    private AbstractActionRuntime _Action;
    private bool _Enable;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PresentationWithContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PresentationOfTarget>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ActionRenderPositionEnum <ActionRenderPosition>k__BackingField;
    private string _NameOfNesting;
    private ITuple _tuple;
    public AbstractActionRuntime Action { get; }
    public bool Enable { get; public set; }
    public string PresentationWithContext { get; public set; }
    public string PresentationOfTarget { get; public set; }
    public ActionRenderPositionEnum ActionRenderPosition { get; public set; }
    public ActionInViewModel(AbstractActionRuntime action, string NameOfNesting, ActionRenderPositionEnum actionRenderPosition);
    public ActionInViewModel(AbstractActionRuntime action, bool enable, ActionRenderPositionEnum actionRenderPosition);
    public AbstractActionRuntime get_Action();
    public bool get_Enable();
    public void set_Enable(bool value);
    [CompilerGeneratedAttribute]
public string get_PresentationWithContext();
    [CompilerGeneratedAttribute]
public void set_PresentationWithContext(string value);
    [CompilerGeneratedAttribute]
public string get_PresentationOfTarget();
    [CompilerGeneratedAttribute]
public void set_PresentationOfTarget(string value);
    [CompilerGeneratedAttribute]
public ActionRenderPositionEnum get_ActionRenderPosition();
    [CompilerGeneratedAttribute]
public void set_ActionRenderPosition(ActionRenderPositionEnum value);
    internal IElement GetAsTuple(ViewModelReferenceType vmref);
}
public enum Eco.ViewModel.Runtime.ActionRenderPositionEnum : Enum {
    public int value__;
    public static ActionRenderPositionEnum LeftSide;
    public static ActionRenderPositionEnum ContextMenu;
    public static ActionRenderPositionEnum ToolBarLeft;
    public static ActionRenderPositionEnum ToolBarRight;
}
public class Eco.ViewModel.Runtime.ColumnReadOnlyAndVisbleUpdateEventArgs : EventArgs {
    public ViewModelColumn ViewModelColumn;
    public object UIGridColumn;
    public bool ReadOnly;
    public bool Visible;
}
public class Eco.ViewModel.Runtime.CreateTypedVMClassDelegate : MulticastDelegate {
    public CreateTypedVMClassDelegate(object object, IntPtr method);
    public virtual VMClass Invoke(VMClassDescriptor desc, IEcoServiceProvider sp, VMClass ownedBy, IElement content, IExternalVariableList vars);
    public virtual IAsyncResult BeginInvoke(VMClassDescriptor desc, IEcoServiceProvider sp, VMClass ownedBy, IElement content, IExternalVariableList vars, AsyncCallback callback, object object);
    public virtual VMClass EndInvoke(IAsyncResult result);
}
public class Eco.ViewModel.Runtime.EALImplementorOpenDocumentService : object {
    private IEcoServiceProvider _sp;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OpenDocumentArgs> OnOpenDocument;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnInitiateUserDownloadOfDataArgs> OnInitiateUserDownloadOfData;
    private HttpClient _sharedHttpClient;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<DownloadTemplateFromUrlArgs> OnDownloadTemplateFromUrl;
    public IEcoServiceProvider Sp { get; }
    internal EALImplementorOpenDocumentService(IEcoServiceProvider sp);
    public IEcoServiceProvider get_Sp();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnOpenDocument(EventHandler`1<OpenDocumentArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnOpenDocument(EventHandler`1<OpenDocumentArgs> value);
    public sealed virtual void ExecuteOnOpenDocument(IObject vmroot, string viewModelName, Byte[] openDocumentData, string reportname, string reportDirectoryName, bool failed, string infoonfail);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnInitiateUserDownloadOfData(EventHandler`1<OnInitiateUserDownloadOfDataArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnInitiateUserDownloadOfData(EventHandler`1<OnInitiateUserDownloadOfDataArgs> value);
    public sealed virtual void InitiateUserDownloadOfData(string filename, Byte[] bytes);
    public sealed virtual bool CanAccess(IObject vmroot, string viewModelName);
    public sealed virtual Byte[] AsByteArray(IObject vmroot, string viewModelName, String& reportFileName, String& reportDirectoryName);
    private MemoryStream GetBlobTemplate(XDocument vmWithDataXDoc, String& suggestedextension);
    private XDocument GetDataAsXDoc(IObject vmroot, string viewModelName, Dictionary`2& metalabels);
    public string ExpandAsHtmlTextExternalData(XDocument template, XDocument expanderdata, Dictionary`2<string, string> metalabels);
    public sealed virtual string AsHtmlText(IObject vmroot, string viewModelName);
    public sealed virtual object GetSharedHttpClient();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDownloadTemplateFromUrl(EventHandler`1<DownloadTemplateFromUrlArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDownloadTemplateFromUrl(EventHandler`1<DownloadTemplateFromUrlArgs> value);
    public sealed virtual void DownloadTemplateFromUrl(string filename, Stream destStream);
}
public class Eco.ViewModel.Runtime.GeneratedSeekerColumn : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AttributeToSearch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionLeadingUpToExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SearchWithBiggerSmaller>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSearchable>k__BackingField;
    public string Header { get; public set; }
    public string Expression { get; public set; }
    public string AttributeToSearch { get; public set; }
    public string ExpressionLeadingUpToExpression { get; public set; }
    public bool IsAttribute { get; public set; }
    public bool SearchWithBiggerSmaller { get; public set; }
    public bool IsSearchable { get; public set; }
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_AttributeToSearch(string value);
    [CompilerGeneratedAttribute]
public string get_AttributeToSearch();
    [CompilerGeneratedAttribute]
public void set_ExpressionLeadingUpToExpression(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionLeadingUpToExpression();
    [CompilerGeneratedAttribute]
public void set_IsAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAttribute();
    [CompilerGeneratedAttribute]
public void set_SearchWithBiggerSmaller(bool value);
    [CompilerGeneratedAttribute]
public bool get_SearchWithBiggerSmaller();
    [CompilerGeneratedAttribute]
public void set_IsSearchable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSearchable();
}
public class Eco.ViewModel.Runtime.GetVMClassTypeDelegate : MulticastDelegate {
    public GetVMClassTypeDelegate(object object, IntPtr method);
    public virtual Type Invoke(VMClassDescriptor desc);
    public virtual IAsyncResult BeginInvoke(VMClassDescriptor desc, AsyncCallback callback, object object);
    public virtual Type EndInvoke(IAsyncResult result);
}
public interface Eco.ViewModel.Runtime.IDispatcherTimerImplementor {
    public TimeSpan Interval { get; public set; }
    public abstract virtual TimeSpan get_Interval();
    public abstract virtual void set_Interval(TimeSpan value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tick(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tick(EventHandler value);
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public interface Eco.ViewModel.Runtime.IExternalWECPOFUIComponent {
    public abstract virtual string TheRequirementsToShowDeveloperInDesignTime();
    public abstract virtual void InstallYourSelf(ViewModelColumn vmc, bool isDesignTime);
}
public class Eco.ViewModel.Runtime.ImageInfo : object {
    public static EventHandler`1<EventArgs> HookToGetImageWidthAndHeightFromBase64;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <ImageData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Dpi>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public Byte[] ImageData { get; public set; }
    public double Dpi { get; public set; }
    public ImageInfo(string imageData);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public Byte[] get_ImageData();
    [CompilerGeneratedAttribute]
public void set_ImageData(Byte[] value);
    internal void GetWidthAndHeight(Double& w, Double& h);
    [CompilerGeneratedAttribute]
public double get_Dpi();
    [CompilerGeneratedAttribute]
public void set_Dpi(double value);
}
public class Eco.ViewModel.Runtime.ImportTabSeperated : object {
    public static void ImportTabSep(Stream stream, string viewmodelName, bool useKey, string keycolumn, string optionalFilter, EcoSpace ecoSpaceX, bool cacheLookupLists);
    public static void ImportTabSep(List`1<String[]> lines, string viewmodelName, bool useKey, string keycolumn, string optionalFilter, EcoSpace ecoSpaceX, bool cacheLookupLists, IExternalVariableList varsfromstartingvm);
    private static void ImportTabSep_NestingSupport(List`1<String[]> lines, string viewmodelName, bool useKey, string keycolumn, string optionalFilter, EcoSpace ecoSpaceX, bool cacheLookupLists, IExternalVariableList varsfromstartingvm);
    private static void Import_CreateOrLookUpObjects(List`1<String[]> lines, bool useKey, string keycolumn, string optionalFilter, EcoSpace ecoSpaceX, IClass classtype, Dictionary`2& thelistOfLookUps, List`1& linkclasscreated, Dictionary`2& lookedupObjects);
    private static void Import_DressCreatedObjectsWithData(EcoSpace ecoSpaceX, bool cacheLookupLists, VMClass vmclassROW, Dictionary`2<string, Dictionary`2<string, IObject>> thelistOfLookUps, List`1<IObject> linkclasscreated, String[] headers, Dictionary`2<IObject, String[]> lookedupObjects);
    public static string ApplyImportValueToVMMember(EcoSpace ecoSpaceX, string theincommingstring, VMAbstractMember themembertoset, bool cacheLookupLists, Dictionary`2<string, Dictionary`2<string, IObject>> thelistOfLookUps);
    public static void HandleCreatedLinkClassAdministrationAndChecks(List`1<IObject> linkclasscreated);
    public static object GetParsedValue(Type type, string s);
}
public interface Eco.ViewModel.Runtime.IUIComponent {
    public abstract virtual void BindTo(VMAbstractMember member);
}
public interface Eco.ViewModel.Runtime.IUIComponentFactory {
    public abstract virtual Dictionary`2<string, Type> GetComponentTypes();
}
public interface Eco.ViewModel.Runtime.IViewDataCreator {
    public abstract virtual RootedHandle CreateHandle(ViewModel vm, string name);
    public abstract virtual void AddViewModelColumn(ViewModelClass vclass, ViewModelColumn vcol);
    public abstract virtual void AddViewModelAction(ViewModelClass vclass, ViewModelColumn vcol);
    public abstract virtual void SetExpressionOnHandle(string exp, ViewModelClass vclass);
    public abstract virtual void ConnectMasterDetail(ViewModelClass vclassMaster, ViewModelClass vclassDetail);
    public abstract virtual bool GetIsPreview();
}
public interface Eco.ViewModel.Runtime.IViewFactoryService {
    public abstract virtual void BringUpView(AbstractActionRuntime actionThatTriggered, ViewModelColumn ViewModelContext, IElement actiontarget, IObjectList dirtyListAsAResultOfRootExpressionExecute);
    public abstract virtual void BringUpReport(AbstractActionRuntime actionThatTriggered, ViewModelColumn ViewModelContext, IElement actiontarget, IObjectList dirtyListAsAResultOfRootExpressionExecute);
}
public interface Eco.ViewModel.Runtime.IViewUICreator {
    public bool ReadOnly { get; }
    public abstract virtual void PrepareDisplayGrid(ViewModel vm);
    public abstract virtual void SimpleUIFor(ViewModelColumn vcol);
    public abstract virtual void GridFor(ViewModelClass vclass);
    public abstract virtual void Combobox(ViewModelColumn vcol);
    public abstract virtual void Action(ViewModelColumn vcol, Action onExecute);
    public abstract virtual void InPlacePopup(ViewModelColumn vcol);
    public abstract virtual void FinalizeUI(ViewModel vm);
    public abstract virtual bool get_ReadOnly();
}
public static class Eco.ViewModel.Runtime.JsonHierarchyImportExport : object {
    public static string THISATTRIBUTEISRAWJSON;
    public static string JsonHierarchyStringFromViewModelAndRootObject(string viewmodelName, IEcoObject root, EcoSpace es, bool skipEmpties);
    public static Dictionary`2<string, object> VMClassToDictionaryWithAimForJson(VMClass vmclass, Dictionary`2<string, object> resdict, bool skipEmpties);
    public static string JsonGetProp(string json, string propertyname);
    public static string ApplyOneObjectRecurse(string jsonasstring, IObject rootobject, string viewmodelname, bool mergeMode);
    public static string ApplyOneObjectRecurse(JObject json, VMClass vmClass, bool mergeMode);
    private static void ApplyManyAssociation(VMClass vmClass, VMManyAssociation manyassociation, KeyValuePair`2<string, JToken> JsonKeyAndJToken, bool mergeMode, StringBuilder applyOneObjectLog, Dictionary`2<string, Dictionary`2<string, IObject>> thelistOfLookUps);
    public static void TryToUpdateImportKeyVariable(VMClass vmclass, string key);
    private static void DoDelete(VMClass vmc);
}
internal class Eco.ViewModel.Runtime.NullElement : object {
    private EventHandler _ValueChangedEvent;
    public ContentType ContentType { get; }
    public bool Mutable { get; }
    public bool ReadOnly { get; }
    public bool IsProperty { get; }
    public IClassifier UmlType { get; }
    public object AsObject { get; public set; }
    public IEcoServiceProvider ServiceProvider { get; }
    public IElement Element { get; }
    public sealed virtual IElement CloneValue(bool readOnly);
    public sealed virtual bool IsEqual(IElement element);
    public sealed virtual int GetIsEqualHashCode();
    public sealed virtual void Assign(IElement element);
    public sealed virtual void SubscribeToValue(ISubscriber subscriber);
    public sealed virtual void UnsubscribeFromValue(ISubscriber subscriber);
    private sealed virtual override void Eco.ObjectRepresentation.IElement.add_ValueChanged(EventHandler value);
    private sealed virtual override void Eco.ObjectRepresentation.IElement.remove_ValueChanged(EventHandler value);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IElementCollection GetAsCollection();
    public sealed virtual bool get_Mutable();
    public sealed virtual bool get_ReadOnly();
    public sealed virtual bool get_IsProperty();
    public sealed virtual IClassifier get_UmlType();
    public sealed virtual object get_AsObject();
    public sealed virtual void set_AsObject(object value);
    public sealed virtual T GetValue();
    public sealed virtual void SetValue(T value);
    public sealed virtual IList`1<T> GetAsIList();
    public sealed virtual IEcoServiceProvider get_ServiceProvider();
    public sealed virtual IElement get_Element();
}
public class Eco.ViewModel.Runtime.OnBringUpActionMenuForNestingArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelClass <ViewModelClass>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <WasPossibleToShow>k__BackingField;
    public ViewModelClass ViewModelClass { get; internal set; }
    public bool WasPossibleToShow { get; public set; }
    [CompilerGeneratedAttribute]
internal void set_ViewModelClass(ViewModelClass value);
    [CompilerGeneratedAttribute]
public ViewModelClass get_ViewModelClass();
    [CompilerGeneratedAttribute]
public void set_WasPossibleToShow(bool value);
    [CompilerGeneratedAttribute]
public bool get_WasPossibleToShow();
}
public class Eco.ViewModel.Runtime.OnBringUpViewEventArgs : EventArgs {
    public string ViewName;
    public IEcoObject ViewRoot;
    public AbstractActionRuntime AbstractAction;
    public IElement ClassActionRoot;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectList <DirtyListAsAResultOfRootExpressionExecute>k__BackingField;
    public bool ContinueWithDefault;
    public IObjectList DirtyListAsAResultOfRootExpressionExecute { get; internal set; }
    [CompilerGeneratedAttribute]
public IObjectList get_DirtyListAsAResultOfRootExpressionExecute();
    [CompilerGeneratedAttribute]
internal void set_DirtyListAsAResultOfRootExpressionExecute(IObjectList value);
}
public class Eco.ViewModel.Runtime.OnBringUpViewPreviewEventArgs : EventArgs {
    public AbstractActionRuntime AbstractAction;
    public ViewModelClass ViewModelClass;
    public bool ContinueWithDefault;
    public IElement Element;
}
public class Eco.ViewModel.Runtime.OnColumnUIApplyStyleArgs : EventArgs {
    public ViewModel ViewModel;
    public ViewModelColumn ViewModelColumn;
    public ViewModelUIComponentType ViewModelUIComponentType;
}
public class Eco.ViewModel.Runtime.OnColumnUIOverrideArgs : EventArgs {
    public ViewModel ViewModel;
    public ViewModelColumn ViewModelColumn;
    public ViewModelUIComponentType ViewModelUIComponentType;
    public bool ContinueWithDefault;
}
public class Eco.ViewModel.Runtime.OnDoubleClickInGridsArgs : EventArgs {
    public ViewModel ViewModel;
    public IElement Element;
    public ViewModelClass ViewModelClass;
    public bool Handled;
}
public class Eco.ViewModel.Runtime.OnExecuteFrameworkActionArgs : EventArgs {
    public AbstractActionRuntime AbstractAction;
}
public class Eco.ViewModel.Runtime.OnNavigateUrlEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OpenNewTab>k__BackingField;
    public string TargetUrl { get; public set; }
    public bool OpenNewTab { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
public void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_OpenNewTab();
    [CompilerGeneratedAttribute]
public void set_OpenNewTab(bool value);
}
public class Eco.ViewModel.Runtime.OnPeriodicActionPotentialExecuteArgs : EventArgs {
    public ViewModelColumn Column;
}
public class Eco.ViewModel.Runtime.OnViewModelActionClosedEventArgs : EventArgs {
    public ViewModelClass ViewModelClassToPerformActionOn;
}
public class Eco.ViewModel.Runtime.OnViewModelActionExecuteEventArgs : EventArgs {
    public ViewModelColumn ViewModelColumn;
    public bool ContinueWithStandardImplementation;
}
public class Eco.ViewModel.Runtime.OnViewModelActionPopulateEventArgs : EventArgs {
    public object UntypedMenuToFill;
    public ViewModelClass ViewModelClassToPerformActionOn;
    public bool AddAutoFormAction;
    public bool ClearOldItems;
}
public class Eco.ViewModel.Runtime.PlacingContainerRuntime : object {
    private List`1<PlacingContainerRuntime> _ChildContainers;
    private List`1<ViewModelColumn> _Columns;
    public int MarginBottom;
    public int MarginTop;
    public int MarginLeft;
    public int MarginRight;
    public int MinSize;
    public int MaxSize;
    public int Grow;
    public int SizePercent;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <VisibleExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StyleExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AlignItem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <JustifyContent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AlignContent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SelfAlign>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewUniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CanScroll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StyleDesign>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <FloatInParent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HideInDesign>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HideOverflow>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsListViewBuilderLevel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelClassName>k__BackingField;
    public List`1<PlacingContainerRuntime> ChildContainers { get; }
    public List`1<ViewModelColumn> Columns { get; }
    public string Id { get; internal set; }
    public string VisibleExpression { get; internal set; }
    public string StyleExpression { get; internal set; }
    public string Type { get; internal set; }
    public string AlignItem { get; internal set; }
    public string JustifyContent { get; internal set; }
    public bool Wrap { get; internal set; }
    public bool Reverse { get; internal set; }
    public string AlignContent { get; internal set; }
    public string SelfAlign { get; internal set; }
    public string ViewUniqueName { get; public set; }
    public bool IsRow { get; }
    public string NameForVisibleColumn { get; }
    public string NameForStyleColumn { get; }
    public bool CanScroll { get; internal set; }
    public string StyleDesign { get; public set; }
    public bool FloatInParent { get; internal set; }
    public bool HideInDesign { get; internal set; }
    public bool HideOverflow { get; internal set; }
    public bool IsListViewBuilderLevel { get; internal set; }
    public string ViewModelClassName { get; internal set; }
    public List`1<PlacingContainerRuntime> get_ChildContainers();
    public List`1<ViewModelColumn> get_Columns();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_VisibleExpression();
    [CompilerGeneratedAttribute]
internal void set_VisibleExpression(string value);
    [CompilerGeneratedAttribute]
public string get_StyleExpression();
    [CompilerGeneratedAttribute]
internal void set_StyleExpression(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_AlignItem();
    [CompilerGeneratedAttribute]
internal void set_AlignItem(string value);
    [CompilerGeneratedAttribute]
public string get_JustifyContent();
    [CompilerGeneratedAttribute]
internal void set_JustifyContent(string value);
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
internal void set_Wrap(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
internal void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public string get_AlignContent();
    [CompilerGeneratedAttribute]
internal void set_AlignContent(string value);
    [CompilerGeneratedAttribute]
public string get_SelfAlign();
    [CompilerGeneratedAttribute]
internal void set_SelfAlign(string value);
    public void AddColumnBackLink(ViewModelColumn vmcol);
    public void OrderColumnsOnIndexAndRecurse();
    [CompilerGeneratedAttribute]
public string get_ViewUniqueName();
    [CompilerGeneratedAttribute]
public void set_ViewUniqueName(string value);
    public bool get_IsRow();
    public string get_NameForVisibleColumn();
    public string get_NameForStyleColumn();
    [CompilerGeneratedAttribute]
public bool get_CanScroll();
    [CompilerGeneratedAttribute]
internal void set_CanScroll(bool value);
    [CompilerGeneratedAttribute]
public string get_StyleDesign();
    [CompilerGeneratedAttribute]
public void set_StyleDesign(string value);
    [CompilerGeneratedAttribute]
public bool get_FloatInParent();
    [CompilerGeneratedAttribute]
internal void set_FloatInParent(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideInDesign();
    [CompilerGeneratedAttribute]
internal void set_HideInDesign(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideOverflow();
    [CompilerGeneratedAttribute]
internal void set_HideOverflow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsListViewBuilderLevel();
    [CompilerGeneratedAttribute]
internal void set_IsListViewBuilderLevel(bool value);
    [CompilerGeneratedAttribute]
public string get_ViewModelClassName();
    [CompilerGeneratedAttribute]
internal void set_ViewModelClassName(string value);
    internal void ModernQueryPlanExpressionRunToFindMissing_Leaf(ViewModel viewModel, IElement contextforlevel);
}
internal static class Eco.ViewModel.Runtime.QPLog : object {
    internal static int _qpTuning;
    internal static void Log(string logText, int logLevel);
    internal static Stopwatch LogStopWatchStart(string logText, int logLevel);
    internal static void LogStopWatchStop(string logText, int logLevel, Stopwatch stopwatch);
    internal static void Indent(int logLevel);
    internal static void Unindent(int logLevel);
}
public class Eco.ViewModel.Runtime.SearchLogic : object {
    public static string vSeekerResult;
    public static string vSeekParam;
    public static string vSeekerPage;
    public static string vSeekerPageCount;
    public static string vSeekerPageLength;
    public static string vSeekerResultCount;
    public static string vSeekerOrderColumnName;
    public static string vSeekerOrderReverseState;
    public static string vSeekerHiliteColumn;
    public static String[] VariablesExcludedFromSeeker;
    private static SearchLogic();
    public static void ExecuteSearch(IEcoServiceProvider sp, ViewModel viewModel, Int32& searchbatch, List`1& oldseekvalues, List`1& seekerVMCInEffect, int maxFetch, bool reQuery);
    public static void ExecuteSearch(IEcoServiceProvider sp, ViewModel viewModel, IElement rootcontext, Int32& searchbatch, List`1& oldseekvalues, List`1& seekerVMCInEffect, int maxFetch, bool reQuery);
    private static bool ConsiderMultiSearchSemicolon(ViewModel viewModel, IElement rootcontext, int maxFetch, IOclService ocl, IOclPsService oclps, bool ispersistent, List`1<SearchExpression> searchexpressions, Int32& searchexpressiontouse, IObjectList result, String& expr, IExternalVariable v);
    private static bool ConsiderImportRows(ViewModel viewModel, IElement rootcontext, IObjectList& result);
    private static void SearchMany(ViewModel viewModel, IElement rootcontext, int maxFetch, IOclService ocl, IOclPsService oclps, bool ispersistent, List`1<SearchExpression> searchexpressions, Int32& searchexpressiontouse, IObjectList result, String& expr, IExternalVariable v, String[] varvalueparts);
    private static IObjectList LoopThruAndExecuteSearchExpressionBreakOnResult(ViewModel viewModel, IElement rootcontext, String& expr, int maxFetch, IOclService ocl, IOclPsService oclps, bool doPersistantSearch, List`1<SearchExpression> searchexpressions, Int32& searchexpressiontouse, int page, IExternalVariable seekerResultCountVar);
    private static void AssignValueIntAndInt64Check(IElement element, int count);
    private static void DoWriteThese(String[] linesOfTabSepDataToWrite, ViewModel vm, IObjectList result);
    private static void ConsiderAsIntAsGuidSearchParams(ViewModel vm);
    private static void ManagedSetSeekParamValueFromName(ViewModel vm, string valueasstring);
    private static void LookUpPossibleCreate(EcoSpace es, ViewModel vm, IObjectList seeklist, AbstractActionRuntime actionforCreateNew, string cell, Dictionary`2<string, IEcoObject> dictCrossRef, List`1<IObject> linkclasscreated);
}
public enum Eco.ViewModel.Runtime.TabOrder : Enum {
    public int value__;
    public static TabOrder DisplayOrderYBeforeX;
    public static TabOrder DisplayOrderXBeforeY;
    public static TabOrder ColumnDesignOrder;
}
public class Eco.ViewModel.Runtime.TheRawJSonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Eco.ViewModel.Runtime.VariableChangedEventArgs : EventArgs {
    public string VariableName;
}
public class Eco.ViewModel.Runtime.ViewDefinitionsInApplication : ViewModelDefinitionsInApplication {
}
public class Eco.ViewModel.Runtime.ViewModel : ViewModelElement {
    public static string AccessDeniedViewModelName;
    public static string RedirectView;
    public static string MemorySeeker;
    public static string StartUpView;
    internal List`1<ViewModelVariable> _ViewModelVariables;
    internal Dictionary`2<string, ViewModelValidation> _ViewModelValidations;
    private ITypeSystemService _tss;
    internal IViewUICreator _viewUICreator;
    private static int _vmCount;
    private bool _qpcallispendingalready;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> OnValidationsOutOfDate;
    private bool _ValidationsOutOfDateEventPending;
    private Type _EcoSpaceType;
    private string _EcoSpaceTypeName;
    private EventSubscriber _ModernQueryPlanvCurrentSubs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AddExternalIdColumn>k__BackingField;
    private Func`1<object> _FunctionToFindBindingSource;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> OnEnsureSpanFetchStartOrStop;
    internal int _traceNumFetch;
    internal TimeSpan _traceFetchTime;
    private ViewModelClass _ModernQueryPlanCurrentViewModelClass;
    private ViewModelColumn _ModernQueryPlanCurrentViewModelColumn;
    private bool _ModernQueryPlanIsStructure;
    private Dictionary`2<Locator, HashSet`1<int>> _nevertryfetchtwicememory_OldLap;
    private Dictionary`2<Locator, HashSet`1<int>> _nevertryfetchtwicememory_CurrentLap;
    internal static int _CurrentlyFetchHints;
    internal static int _CurrentlyInQueryplanFetchingNesting;
    private int _reentryQueryplanOnNewObjects;
    private Dictionary`2<string, object> _SpawnedDataComponents;
    public static string vDraggedObject_VarName;
    public static string vGridActionArgument;
    public static string vselfVM;
    internal OclVariables _OclVariables;
    private bool _seekerVariableIsDesigned;
    private IModifiableVariableList _designtimevars;
    internal Dictionary`2<string, ViewModelClass> _AllViewModelClasses;
    internal ReferenceHandle _RootHandle;
    private ExpressionHandle _ValidationHandle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TabOrder <TabOrder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ColCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ColWidth>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionForReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionForAccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExternalExpressionForReadOnly>k__BackingField;
    private Type _accessgroupsInitiated;
    private List`1<AccessGroupRuntime> _accessGroups;
    private bool _useExtendedUIFunctions;
    public static string vSysReadOnlyMode;
    private bool _vSysReadOnlyModeExists;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnGetGridDataAsTabSepDataForRootColumnEventArgs> OnGetGridDataAsTabSepDataForRootColumn;
    private bool _initedAtLeastOnce;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnSignalUpdateContextMenuInExternalWECPOFUIComponentEventArgs> OnSignalUpdateContextMenuInExternalWECPOFUIComponent;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ErrorInPeriodicActionEventArgs> ErrorInPeriodicAction;
    private bool _periodicActionsOn;
    private List`1<PeriodActionTimerTuple> _periodicActionTimerList;
    private bool _pendingNotify;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ColumnReadOnlyAndVisbleUpdateEventArgs> ColumnReadOnlyAndVisbleUpdateEvent;
    private List`1<ReadOnlyAndVisibleAction> _readOnlyAndVisibleActionList;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnViewModelActionExecuteEventArgs> OnViewModelActionExecute;
    private Stack`1<Tuple`2<string, string>> _stackOfActionCalls;
    private List`1<Tuple`2<string, string>> _listOfActionCallsAgain;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnExecuteExceptionArgs> OnExecuteException;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnBringUpViewEventArgs> OnBringUpView;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnExecuteFrameworkActionArgs> OnExecuteFrameworkAction;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnBringUpViewPreviewEventArgs> OnBringUpViewPreview;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnNavigateUrlEventArgs> OnNavigateUrl;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnViewModelActionPopulateEventArgs> OnViewModelActionPopulate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnViewModelActionClosedEventArgs> OnViewModelActionClosed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnColumnUIOverrideArgs> OnColumnUIOverride;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnColumnUIApplyStyleArgs> OnColumnUIApplyStyle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<VariableChangedEventArgs> OnVariableChanged;
    private HashSet`1<int> _splitterPosColumns;
    private HashSet`1<int> _splitterPosRows;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCleanedForFree>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RootWentFromAssignedToUnassigned>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnPeriodicActionPotentialExecuteArgs> OnPeriodicActionPotentialExecute;
    private string _ViewModelModalOkEnableExpression;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ViewModelClassCreatedArgs> OnViewModelClassCreated;
    private List`1<string> _OptOutConstraints;
    private List`1<ViewModelClass> _ListOfOutOfDateCurrentVariables;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RequiresRootObject>k__BackingField;
    private Guid _instanceIdentity;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> OnContextSaved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<SearchArgs> OnSelfVMSearch;
    private bool _maxFetchIsInitiated;
    private int _maxFetch;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> OnPSExpressionRefresh;
    private Dictionary`2<string, ViewModelColumn> _groupboxes;
    private int _isInitiating;
    private IEcoServiceProvider _KeepBetterServiceProviderDuringInitToHelpWithTranslation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowDefaultTypeSafeDragDrop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <QueryPlanFeedback>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnBringUpActionMenuForNestingArgs> OnBringUpActionMenuForNesting;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <BlockedByModal>k__BackingField;
    private bool _usetoolbar;
    public ISubscriber ModernQueryPlanvCurrentSubs { get; }
    public Type EcoSpaceType { get; }
    public string Name { get; internal set; }
    public bool AddExternalIdColumn { get; public set; }
    public EcoSpace EcoSpace { get; public set; }
    unknown Func`1<object> FunctionToFindBindingSource {public set; }
    public object BindingSource { get; }
    public bool IsEnsureSpanFetchOnGoing { get; }
    public static bool CurrentlyFetchHints { get; }
    public static bool CurrentlyInQueryplanFetching { get; }
    public Dictionary`2<string, object> SpawnedDataComponents { get; }
    public IEcoServiceProvider EcoServiceProvider { get; }
    public List`1<ViewModelVariable> ViewModelVariables { get; }
    public Dictionary`2<string, ViewModelValidation> ViewModelValidations { get; }
    public ViewModelClass RootViewModelClass { get; }
    public ViewModelClass StatusViewModelClass { get; }
    public ViewModelClass ValidationsViewModelClass { get; }
    public ViewModelClass VariablesViewModelClass { get; }
    public Dictionary`2<string, ViewModelClass> AllViewModelClasses { get; }
    public ReferenceHandle RootHandle { get; }
    public ExpressionHandle ValidationHandle { get; }
    public TabOrder TabOrder { get; public set; }
    public int ColCount { get; public set; }
    public int RowCount { get; public set; }
    public int ColWidth { get; public set; }
    public int RowHeight { get; public set; }
    public string ExpressionForReadOnly { get; public set; }
    public string ExpressionForAccess { get; public set; }
    public string ExternalExpressionForReadOnly { get; public set; }
    public string ExpressionForReadOnlyEffective { get; }
    public bool ReadOnlyModeExists { get; internal set; }
    public List`1<PeriodActionTimerTuple> PeriodicActionTimerList { get; }
    public IEcoObject RootObject { get; public set; }
    public HashSet`1<int> SplitterPosRows { get; }
    public HashSet`1<int> SplitterPosColumns { get; }
    public bool IsCleanedForFree { get; private set; }
    public bool RootWentFromAssignedToUnassigned { get; private set; }
    public string NameOfModalOkEnableColumn { get; }
    public string ViewModelModalOkEnableExpression { get; public set; }
    public List`1<string> OptOutConstraints { get; }
    public bool RequiresRootObject { get; internal set; }
    public Guid InstanceIdentity { get; public set; }
    public bool IsFullyInitiated { get; }
    public bool AllowDefaultTypeSafeDragDrop { get; public set; }
    public string QueryPlanFeedback { get; private set; }
    public bool BlockedByModal { get; public set; }
    internal ViewModel(EcoSpace EcoSpace, ITypeSystemService tss, IViewUICreator viewUICreator);
    internal ViewModel(ViewModel mountowner);
    internal ViewModel(string EcoSpaceTypeName, Type EcoSpaceType, EcoSpace ecoSpace, ITypeSystemService tss, IViewUICreator viewUICreator, bool useExtendedUIFunctions);
    private static ViewModel();
    [CompilerGeneratedAttribute]
public void add_OnValidationsOutOfDate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnValidationsOutOfDate(EventHandler`1<EventArgs> value);
    private void ValidationsChanged(object sender, PropertyChangedEventArgs e);
    public ISubscriber get_ModernQueryPlanvCurrentSubs();
    public Type get_EcoSpaceType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public void set_AddExternalIdColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddExternalIdColumn();
    public void set_EcoSpace(EcoSpace value);
    public EcoSpace get_EcoSpace();
    public void set_FunctionToFindBindingSource(Func`1<object> value);
    public static void InterpretStringAsVariableDeclaration(IEcoTypeSystem ts, string line, List`1<string> varsAsStringList, IModifiableVariableList vars);
    public object get_BindingSource();
    public string DebugInfoAboutQueryPlans();
    public void SeekerLogicAddResultAndEvaluateQueryPlan(IObjectList seekerResultList, bool resetList);
    public void UpdateErrorsFromConstraints(List`1<string> errors, List`1<string> warnings, List`1<string> info, ISubscriber subscriber);
    internal bool ColumnToHarvest(ViewModelColumn vmcol);
    public void EnsureSpanFetch_vCurrentPathOnly();
    [CompilerGeneratedAttribute]
public void add_OnEnsureSpanFetchStartOrStop(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnEnsureSpanFetchStartOrStop(EventHandler`1<EventArgs> value);
    public bool get_IsEnsureSpanFetchOnGoing();
    public bool IsStillActive();
    public void EnsureSpanFetch();
    private void ModernQueryPlanExecute(Action doFirstThingInsideQueryPlanAction);
    private void ModernQueryPlanLoop(IFetchConsolidationService fetchconsolidation, bool doStructureNotLevel);
    private string DebugClearTextOfTheFetchConditions(List`1<ViewModelQueryplanFetchCondition> modernQueryPlanCondcollector);
    public string GetTranslatedText(string v);
    internal void ModernQueryPlanCurrentlyWorkingWith(ViewModelClass currentViewModelClass, bool isStructure, ViewModelColumn col);
    private void ModernQueryPlanFactFinderRunCallback(object sender, OnFetchFactFinderCallbackArgs args);
    private bool MaintainNeverTryTwiceNeverSeenThisBefore(Locator targetLocator, Int32[] memberindices, Dictionary`2<Locator, HashSet`1<int>> memory, bool addtomemory);
    public static bool get_CurrentlyFetchHints();
    public static bool get_CurrentlyInQueryplanFetching();
    public bool IsSeeker();
    public ViewModelColumn GetFirstSeekerAction();
    public Dictionary`2<string, object> get_SpawnedDataComponents();
    public void UpdateVariableWithDraggedObjectVariableOfType(IClass aclass);
    public OclVariables OclVariables(bool reinit);
    internal void ReducevSelectedVariables();
    private void AddStandardVariable(IVariableFactoryService vfs, ViewModelClass vmc, string varname, bool asCollectionType);
    private OclVariable InsertNewVar(string vName, string vTypeName, string vInitialValue);
    private void AssignEcoSpace(VariableHandle vh);
    public IEcoServiceProvider get_EcoServiceProvider();
    public IExternalVariableList GetIExternalVariableList();
    public List`1<ViewModelVariable> get_ViewModelVariables();
    public Dictionary`2<string, ViewModelValidation> get_ViewModelValidations();
    public ViewModelClass get_RootViewModelClass();
    public ViewModelClass get_StatusViewModelClass();
    public ViewModelClass get_ValidationsViewModelClass();
    public ViewModelClass get_VariablesViewModelClass();
    private ViewModelClass CheckAndAddAdminVMClass(string name);
    public Dictionary`2<string, ViewModelClass> get_AllViewModelClasses();
    public ReferenceHandle get_RootHandle();
    public ExpressionHandle get_ValidationHandle();
    [CompilerGeneratedAttribute]
public void set_TabOrder(TabOrder value);
    [CompilerGeneratedAttribute]
public TabOrder get_TabOrder();
    [CompilerGeneratedAttribute]
public void set_ColCount(int value);
    [CompilerGeneratedAttribute]
public int get_ColCount();
    [CompilerGeneratedAttribute]
public void set_RowCount(int value);
    [CompilerGeneratedAttribute]
public int get_RowCount();
    [CompilerGeneratedAttribute]
public void set_ColWidth(int value);
    [CompilerGeneratedAttribute]
public int get_ColWidth();
    [CompilerGeneratedAttribute]
public void set_RowHeight(int value);
    [CompilerGeneratedAttribute]
public int get_RowHeight();
    [CompilerGeneratedAttribute]
public void set_ExpressionForReadOnly(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionForReadOnly();
    [CompilerGeneratedAttribute]
public void set_ExpressionForAccess(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionForAccess();
    [CompilerGeneratedAttribute]
public string get_ExternalExpressionForReadOnly();
    [CompilerGeneratedAttribute]
public void set_ExternalExpressionForReadOnly(string value);
    public string get_ExpressionForReadOnlyEffective();
    private void EnsureInitOfAccessGroups(Type ecospaceType);
    public bool get_ReadOnlyModeExists();
    internal void set_ReadOnlyModeExists(bool value);
    internal void CheckReadOnlyModeExtensionOfExternalExpressionForReadOnly();
    [CompilerGeneratedAttribute]
public void add_OnGetGridDataAsTabSepDataForRootColumn(EventHandler`1<OnGetGridDataAsTabSepDataForRootColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnGetGridDataAsTabSepDataForRootColumn(EventHandler`1<OnGetGridDataAsTabSepDataForRootColumnEventArgs> value);
    public string GetGridDataAsTabSepData(string columnName);
    public bool EnableDueToAccessGroups(EcoSpace es);
    internal void InitAccessGroupsViewEnableExpressionAsExternalExpressionForReadOnly(Type EcoSpaceType);
    public bool VisibleDueToAccessGroups(EcoSpace es, IObject rootOnView);
    private List`1<AccessGroupRuntime> GetAccessGroups(EcoSpace es);
    public void SetElement(IEcoObject obj);
    [CompilerGeneratedAttribute]
public void add_OnSignalUpdateContextMenuInExternalWECPOFUIComponent(EventHandler`1<OnSignalUpdateContextMenuInExternalWECPOFUIComponentEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnSignalUpdateContextMenuInExternalWECPOFUIComponent(EventHandler`1<OnSignalUpdateContextMenuInExternalWECPOFUIComponentEventArgs> value);
    public void SignalUpdateContextMenuInExternalWECPOFUIComponent(object untypedContextMenu, object untypedCommanTarget, ViewModelClass viewModelClass, IObject iobj);
    [CompilerGeneratedAttribute]
public void add_ErrorInPeriodicAction(EventHandler`1<ErrorInPeriodicActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorInPeriodicAction(EventHandler`1<ErrorInPeriodicActionEventArgs> value);
    internal void HandleErrorInPeriodicAction(PeriodActionTimerTuple periodActionTimerTuple, Exception e2);
    public List`1<PeriodActionTimerTuple> get_PeriodicActionTimerList();
    public void InitPeriodicActions();
    private void BuildListOfPeriodicActions();
    private void CheckPeriodicActions();
    public void ShutdownPeriodicActions();
    private void InitializeReadOnlyAndVisibleNotfication();
    private void SetReadOnlyAndVisibleNotfication();
    private void ViewModel_ListChanged(object sender, ListChangedEventArgs e);
    public sealed virtual void NotifyOnIdle();
    [CompilerGeneratedAttribute]
public void add_ColumnReadOnlyAndVisbleUpdateEvent(EventHandler`1<ColumnReadOnlyAndVisbleUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnReadOnlyAndVisbleUpdateEvent(EventHandler`1<ColumnReadOnlyAndVisbleUpdateEventArgs> value);
    private void SendColumnReadOnlyAndVisbleUpdateEvent(ViewModelColumn viewModelColumn, object p, bool aRO, bool aVI);
    public void UpdateReadOnlyAndVisibleChangeAction(ViewModelColumn vc, object col, Action`4<ViewModelColumn, object, bool, bool> theAction);
    public IEcoObject get_RootObject();
    public void set_RootObject(IEcoObject value);
    public OclVariable OclVariableFromName(string p);
    public IElement GetElement();
    [CompilerGeneratedAttribute]
public void add_OnViewModelActionExecute(EventHandler`1<OnViewModelActionExecuteEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnViewModelActionExecute(EventHandler`1<OnViewModelActionExecuteEventArgs> value);
    public bool CanExecuteAction(string ViewModelClassName, string ActionName, SubscriberPair subscriberBlock);
    public void ExecuteCurrentActionAgainOnce();
    public void ExecuteAction(string ViewModelClassName, string ActionName);
    public void ExecuteAction(IElement elem, string ViewModelClassName, string ActionName);
    private void ExecuteActionInternal(IElement elem, string ViewModelClassName, string ActionName);
    private bool ExecuteActionInternalIfFoundOnLevel(IElement elem, ViewModelClass vmc, string ActionName);
    public bool AccessGroupsEnable(string commasepofags, SubscriberPair subscriberBlock);
    public void Navigate(IObject root, string viewmodel);
    public void NavigateUrl(string url, bool opennewtab);
    internal void FindAction(ViewModelClass vmc, string ActionName, ViewModelColumn& placedButtonVMCol, ActionInViewModel& leftSideAction);
    public ViewModelClass FindViewModelClassFromNameOrRuntimeName(string viewModelClassName);
    internal void OnExecute(IElement elem, ViewModelColumn viewModelColumn);
    [CompilerGeneratedAttribute]
public static void add_OnExecuteException(EventHandler`1<OnExecuteExceptionArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnExecuteException(EventHandler`1<OnExecuteExceptionArgs> value);
    private void OnExecutePossiblyWithAbstractAction(string exp, IElement elem, ViewModelColumn viewModelColumn, ViewModelClass viewModelClass, AbstractActionRuntime absact);
    public static void CheckAndDoSaveBeforeNavigate(IEcoServiceProvider sp, AbstractActionRuntime absact);
    [CompilerGeneratedAttribute]
public void add_OnBringUpView(EventHandler`1<OnBringUpViewEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnBringUpView(EventHandler`1<OnBringUpViewEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnExecuteFrameworkAction(EventHandler`1<OnExecuteFrameworkActionArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnExecuteFrameworkAction(EventHandler`1<OnExecuteFrameworkActionArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnBringUpViewPreview(EventHandler`1<OnBringUpViewPreviewEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnBringUpViewPreview(EventHandler`1<OnBringUpViewPreviewEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnNavigateUrl(EventHandler`1<OnNavigateUrlEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnNavigateUrl(EventHandler`1<OnNavigateUrlEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnViewModelActionPopulate(EventHandler`1<OnViewModelActionPopulateEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnViewModelActionPopulate(EventHandler`1<OnViewModelActionPopulateEventArgs> value);
    public void PopulateActions(object untypedMenuToFill, ViewModelClass viewModelClassToPerformActionOn, Boolean& addAutoFormAction);
    public void PopulateActions(object untypedMenuToFill, ViewModelClass viewModelClassToPerformActionOn, Boolean& addAutoFormAction, Boolean& clearOldItems);
    [CompilerGeneratedAttribute]
public void add_OnViewModelActionClosed(EventHandler`1<OnViewModelActionClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnViewModelActionClosed(EventHandler`1<OnViewModelActionClosedEventArgs> value);
    public void ActionsClosed(ViewModelClass viewModelClassToPerformActionOn);
    [CompilerGeneratedAttribute]
public void add_OnColumnUIOverride(EventHandler`1<OnColumnUIOverrideArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnColumnUIOverride(EventHandler`1<OnColumnUIOverrideArgs> value);
    public bool CheckColumnOverride(ViewModelColumn vc, ViewModelUIComponentType viewModelUIComponentType);
    [CompilerGeneratedAttribute]
public void add_OnColumnUIApplyStyle(EventHandler`1<OnColumnUIApplyStyleArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnColumnUIApplyStyle(EventHandler`1<OnColumnUIApplyStyleArgs> value);
    public void HandleApplyStyle(ViewModelColumn vc, ViewModelUIComponentType viewModelUIComponentType);
    internal void StyleWasChanged(ViewModelColumn vc, ViewModelUIComponentType viewModelUIComponentType);
    public ViewModelClass FindViewModelClassFromHandle(object handle);
    public void SetOclVariableValueFromName(string p, object obj);
    public void SetOclVariableValueFromName(string varname, IElement iElement);
    private void InternalSetOclVariableValueFromName(string p, IElement iElement);
    [CompilerGeneratedAttribute]
public void add_OnVariableChanged(EventHandler`1<VariableChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnVariableChanged(EventHandler`1<VariableChangedEventArgs> value);
    public IElement GetOclVariableValueFromName(string p);
    private void MakeSureThatIfVariableIsvCurrentThatItIsNotPendingUpdate(string p);
    internal void ColumnAndRuleConnections(ViewModelColumn vmc);
    internal void PopulateValidationHandle();
    public string GetEffectiveReadOnlyExpression(ViewModelColumn vcol);
    public string GetEffectiveVisibleExpression(ViewModelColumn vcol);
    public string GetEffectiveStyleExpression(ViewModelColumn vcol);
    internal void AddSplitterPosColumn(string p);
    internal void AddSplitterPosRow(string p);
    public HashSet`1<int> get_SplitterPosRows();
    public HashSet`1<int> get_SplitterPosColumns();
    [CompilerGeneratedAttribute]
public bool get_IsCleanedForFree();
    [CompilerGeneratedAttribute]
private void set_IsCleanedForFree(bool value);
    [CompilerGeneratedAttribute]
public bool get_RootWentFromAssignedToUnassigned();
    [CompilerGeneratedAttribute]
private void set_RootWentFromAssignedToUnassigned(bool value);
    public sealed virtual void CleanForFree();
    public sealed virtual void Dispose();
    public bool DragDropActionActOnObjectList(IObjectList list, bool execute, ViewModelClass targetViewModelClass);
    public bool DragDropActionActOnListOfExternalIds(String[] ids, bool execute, ViewModelClass target);
    private void CompatibleEnabledDragDropActions(IObject iob, List`1& list, List`1& listOfTargets, ViewModelClass targetViewModelClass);
    [CompilerGeneratedAttribute]
public void add_OnPeriodicActionPotentialExecute(EventHandler`1<OnPeriodicActionPotentialExecuteArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnPeriodicActionPotentialExecute(EventHandler`1<OnPeriodicActionPotentialExecuteArgs> value);
    internal void PeriodicActionPotentialExecute(ViewModelColumn viewModelColumn);
    public string get_NameOfModalOkEnableColumn();
    public string get_ViewModelModalOkEnableExpression();
    public void set_ViewModelModalOkEnableExpression(string value);
    internal void ViewModelClassCreated(ViewModelClass viewModelClass);
    [CompilerGeneratedAttribute]
public void add_OnViewModelClassCreated(EventHandler`1<ViewModelClassCreatedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnViewModelClassCreated(EventHandler`1<ViewModelClassCreatedArgs> value);
    public List`1<string> get_OptOutConstraints();
    internal void AddOptOutConstraint(string p);
    private void TryLockEnterOrDoAsync(object thelock, Action act);
    internal void ListOfOutOfDateCurrentVariables_Add(ViewModelClass viewModelClass);
    internal void ListOfOutOfDateCurrentVariables_Remove(ViewModelClass viewModelClass);
    internal void ListOfOutOfDateCurrentVariables_EnsureAll();
    [CompilerGeneratedAttribute]
public bool get_RequiresRootObject();
    [CompilerGeneratedAttribute]
internal void set_RequiresRootObject(bool value);
    public void ExecuteFetchHints(IObjectList list);
    public void ExecuteQueryPlan();
    public Guid get_InstanceIdentity();
    public void set_InstanceIdentity(Guid value);
    public void SaveContextBasedOnInstanceIdentity(bool stayInEdit);
    [CompilerGeneratedAttribute]
public void add_OnContextSaved(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnContextSaved(EventHandler`1<EventArgs> value);
    private IObjectList TransactionSafeSave(bool stayInEdit);
    public static IObjectList TransactionSafeSave(IEcoServiceProvider sp, IObjectList listtosave, Action actionAfterSaveBeforeTransRestart);
    public IObjectList GetDirtylistForSave();
    [CompilerGeneratedAttribute]
public void add_OnSelfVMSearch(EventHandler`1<SearchArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnSelfVMSearch(EventHandler`1<SearchArgs> value);
    public void ExecuteSearchAction(bool reQuery);
    public int GetMaxFetch();
    [ObsoleteAttribute]
public int GetMaxFectch();
    public void ExecuteRefresh();
    public IElement ExecutePS(string viewModelClassName, string columnName);
    [CompilerGeneratedAttribute]
public void add_OnPSExpressionRefresh(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnPSExpressionRefresh(EventHandler`1<EventArgs> value);
    public void PSExpression_Refresh();
    internal ViewModelColumn GetGroupBoxFromId(string includeInGroupBox_Id);
    internal void IndexThisGroupBox(ViewModelColumn vc);
    internal void Initiating();
    internal void InitiatingDone();
    internal void KeepBetterServiceProviderDuringInitToHelpWithTranslation(IEcoServiceProvider spToUse);
    public bool get_IsFullyInitiated();
    [CompilerGeneratedAttribute]
public bool get_AllowDefaultTypeSafeDragDrop();
    [CompilerGeneratedAttribute]
public void set_AllowDefaultTypeSafeDragDrop(bool value);
    [CompilerGeneratedAttribute]
public string get_QueryPlanFeedback();
    [CompilerGeneratedAttribute]
private void set_QueryPlanFeedback(string value);
    [CompilerGeneratedAttribute]
public void add_OnBringUpActionMenuForNesting(EventHandler`1<OnBringUpActionMenuForNestingArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnBringUpActionMenuForNesting(EventHandler`1<OnBringUpActionMenuForNestingArgs> value);
    public bool ShowActionMenuForCurrentInNesting(ViewModelClass viewModelClass);
    internal bool IsMemorySeeker();
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    [CompilerGeneratedAttribute]
public void set_BlockedByModal(bool value);
    [CompilerGeneratedAttribute]
public bool get_BlockedByModal();
    public static bool WillThisExpressionEffectPersistentData(IEcoServiceProvider sp, IClass umlclass, IExternalVariableList variables, string theexp, bool isAction);
    public IObject CreateAndSaveSysViewStateCookie();
    public XDocument GetXDocWithVarsValuesToUseWithSysViewStateCookie();
    public List`1<AccessGroupRuntime> GetAccessGroups();
    public void SetReadOnlyModeIfExists(bool v);
    public bool GetReadOnlyModeIfExists();
    internal bool GetUseToolbar();
    public ActionRenderPositionEnum GetCorrectRenderPosition(ActionRenderPositionEnum pos);
    public static IObject SysDocBatchReportCatcherGetActive(IEcoServiceProvider sp);
    public static bool SysDocBatchPatternUse(IEcoServiceProvider sp);
    public void SysDocBatchViewClosing();
    public bool SysDocBatchViewRequestedShowButNotShown();
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0(object s2, ListChangedEventArgs e2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <ValidationsChanged>b__17_0();
    [CompilerGeneratedAttribute]
private void <EnsureSpanFetch>b__55_0();
    [CompilerGeneratedAttribute]
private void <EnsureSpanFetch>b__55_1();
    [CompilerGeneratedAttribute]
private void <InitPeriodicActions>b__187_0();
    [CompilerGeneratedAttribute]
private void <ListOfOutOfDateCurrentVariables_EnsureAll>b__319_0();
}
public class Eco.ViewModel.Runtime.ViewModelAidedObjectDeepClone : object {
    public static void InstallAsEALMethod(IEcoServiceProvider sp);
    public static IEcoObject Clone(IEcoServiceProvider sp, ViewModel vm);
    public static IEcoObject Clone(EcoSpace es, ViewModel vm);
    public static IEcoObject Clone(IEcoServiceProvider sp, IEcoObject objectToClone, string vmName);
    public static IEcoObject Clone(EcoSpace es, IEcoObject objectToClone, string vmName);
    private static IEcoObject Clone(IEcoServiceProvider sp, VMClass vmclass);
    public static bool Transform(IEcoServiceProvider sp, ViewModel vm, IEcoObject destinationObject);
    public static bool Transform(EcoSpace es, ViewModel vm, IEcoObject destinationObject);
    public static bool Transform(IEcoServiceProvider sp, IEcoObject rootobject, string vmName, IEcoObject destinationObject);
    public static bool Transform(EcoSpace es, IEcoObject rootobject, string vmName, IEcoObject destinationObject);
    private static bool Transform(IEcoServiceProvider sp, VMClass vmclass, IEcoObject destinationObject);
    private static bool TransformMembers(IEcoServiceProvider sp, VMClass sourceVMClass, IEcoObject destinationObject, IClass destinationUmlClass, IExternalVariableList vars);
}
public class Eco.ViewModel.Runtime.ViewModelClass : ViewModelElement {
    internal XElement ColumnsElem;
    private ViewModel _vm;
    private EventSubscriber _currentSubscriber;
    private HashSet`1<IFeature> _avoidDerivedsAlreadySeen;
    private HashSet`1<IFeature> _avoidDerivedsAlreadySeenStructure;
    private HashSet`1<IStructuralFeature> _QueryPlansMembersStructural;
    private Dictionary`2<IClass, HashSet`1<IStructuralFeature>> _QueryPlansMembersPerClassifierStructural;
    private HashSet`1<IStructuralFeature> _QueryPlansMembers;
    private Dictionary`2<IClass, HashSet`1<IStructuralFeature>> _QueryPlansMembersPerClassifier;
    private HashSet`1<IClassifier> _QueryPlansAllInstances;
    private HashSet`1<IClassifier> _QueryPlanTypesSeenAndDoneDefaultRepFor;
    private Dictionary`2<IStructuralFeature, StatsPerFeature> _QueryPlansStats;
    private bool _initQueryplan;
    private bool _QueryplanForAllinstancesDone;
    private HashSet`1<IElement> _TrackedObjects;
    private HashSet`1<IElement> _TrackedObjectsNew;
    private HashSet`1<IElement> _TrackedObjectsStructuralToGetHere;
    private HashSet`1<IElement> _TrackedObjectsStructuralToGetHereNew;
    private EventSubscriber _StructuralSubscriber;
    private bool _insideQueryPlanStructureExp;
    private HashSet`1<IElement> _tempfetchnew;
    private bool _EvaluateStructureExpressionToGetHereAndQueryplanDownstreamIsOutOfDate;
    private HashSet`1<IElement> _worklist_structure;
    private HashSet`1<IElement> _worklist_level;
    private int _queryIndex;
    private bool _currentVarOutOfDate;
    private HashSet`1<IElement> _seenLocalRoots;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Identity>k__BackingField;
    private string _ModelName;
    private string _runtimeName;
    private string _runtimeNameBasedOnName;
    private IClassifier _IClassifier;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelColumn <RootColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RootedHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <CurrencyHandle>k__BackingField;
    private Func`2<ViewModelClass, IElement> _FunctionToFindCurrent;
    private Func`2<ViewModelClass, object> _FunctionToFindBindingSource;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisplayAsGrid>k__BackingField;
    private List`1<ViewModelColumn> _Columns;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ClassIsPickList>k__BackingField;
    public static string vCurrent_;
    public static string vCurrent_Root;
    public static string vSelected_;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UsedForSeekerColumns>k__BackingField;
    private List`1<string> _optoutActionIdentities;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionActAsForActions>k__BackingField;
    private EventSubscriber _subsForActions;
    private Publisher _ActionsPublisher;
    private bool _actionsoutofdate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> ActionsOutOfDate;
    private List`1<ActionInViewModel> _actions;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCleanedForFree>k__BackingField;
    private IElement _ModernQueryPlanStructureToGetHereResult;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ModernQueryPlanStructureTouched>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ModernQueryPlanLevelTouched>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PlacingContainerRuntime <PlacingContainer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ThisIsCallBackPerListViewRow>k__BackingField;
    private List`1<string> _isInUseBlockTearDown;
    private Dictionary`2<string, PlacingContainerRuntime> _placingContainerDict;
    internal Dictionary`2<IClass, HashSet`1<IStructuralFeature>> QueryPlansMembersPerClassifier { get; }
    internal Dictionary`2<IClass, HashSet`1<IStructuralFeature>> QueryPlansMembersPerClassifierStructural { get; }
    public ITaggedValueCollection TaggedValues { get; internal set; }
    public ISubscriber CurrentSubscriber { get; }
    public bool AlwaysShowActions { get; }
    public string Identity { get; public set; }
    public ViewModel ViewModel { get; }
    public string Name { get; }
    public string ModelName { get; public set; }
    public string RuntimeName { get; }
    public IClassifier IClass { get; internal set; }
    public ViewModelColumn RootColumn { get; public set; }
    public RootedHandle Handle { get; public set; }
    public object CurrencyHandle { get; public set; }
    public Func`2<ViewModelClass, IElement> FunctionToFindCurrent { get; public set; }
    public Func`2<ViewModelClass, object> FunctionToFindBindingSource { get; public set; }
    public object BindingSource { get; }
    public bool DisplayAsGrid { get; public set; }
    public List`1<ViewModelColumn> Columns { get; }
    public bool ClassIsPickList { get; public set; }
    public bool UsedForSeekerColumns { get; public set; }
    public bool UsedForSeekerColumnsOrderByExpressions { get; }
    public List`1<string> OptOutActionIdentities { get; }
    public bool IsAdmin { get; internal set; }
    public string ExpressionActAsForActions { get; internal set; }
    private Publisher EnsuredActionPublisher { get; }
    public List`1<ActionInViewModel> Actions { get; }
    public bool IsCleanedForFree { get; private set; }
    public IElement ModernQueryPlanStructureToGetHereResult { get; internal set; }
    public bool ModernQueryPlanStructureTouched { get; internal set; }
    public bool ModernQueryPlanLevelTouched { get; private set; }
    public ViewModelColumn FirstAttribute_Column { get; }
    public PlacingContainerRuntime PlacingContainer { get; internal set; }
    public bool ThisIsCallBackPerListViewRow { get; internal set; }
    internal ViewModelClass(ViewModel vm);
    public void QueryplanAnalysisViewModelClass(IOclTypeService ocltypeserv, IClassifier rootelemtype, IExternalVariableList vars);
    internal void QueryplanAnalysisSingleColumn(IOclTypeService ocltypeserv, ViewModelColumn vmcol, IExternalVariableList vars);
    public bool IsSeekerResult();
    public bool IsSeekerResultWithPager();
    private void CalculateQueryPlanActionForExpression(IOclTypeService ocltypeserv, IClassifier classifier, string expression, IExternalVariableList vars, ViewModelClass vmclassToKeepStructuralQueryPlan);
    private void HandleDerivedForQueryPlanForSpecificType(IOclTypeService ocltypeserv, IExternalVariableList vars, ViewModelClass vmclassToKeepStructuralQueryPlan, IStructuralFeature sf, IClass contextclass);
    private bool AlreadySeen(IFeature qp, ViewModelClass vmclassToKeepStructuralQueryPlan);
    private void CheckDefaultStringRepExp(IOclTypeService ocltypeserv, IClass ic);
    private void AddToQueryPlan(HashSet`1<IStructuralFeature> queryPlansMembers, Dictionary`2<IClass, HashSet`1<IStructuralFeature>> queryPlansMembersPerClassifier, IStructuralFeature member);
    private void QueryplanAnalysisOfConstraints(IOclTypeService ocltypeserv, IClass cl, bool dosubsNotSuper);
    internal Dictionary`2<IClass, HashSet`1<IStructuralFeature>> get_QueryPlansMembersPerClassifier();
    internal Dictionary`2<IClass, HashSet`1<IStructuralFeature>> get_QueryPlansMembersPerClassifierStructural();
    private void QueryplansForAllinstances(IOclService ocl);
    internal void EnsureQueryplanAndTrackingAccessedObjects();
    internal void EnsureQueryplanForAllInstances();
    internal void ModernQueryPlanExpressionsRunToFindMissing(IElement root, bool runallnotsparse, bool doStructureNotLevel);
    internal void ModernQueryPlan_DoAllViewModelQueryplanFetchConditionBasedOnMissing(List`1<ViewModelQueryplanFetchCondition> condcollector, bool doStructureNotLevel);
    internal bool ExecuteAllViewModelQueryplanFetchConditions(List`1<ViewModelQueryplanFetchCondition> condcollector, HashSet`1<IElement> fetchedNew);
    private void SpreadSuperClassMembersUptoExistingSubClasses(List`1<ViewModelQueryplanFetchCondition> condcollector, ICache cache);
    private void AddArayToListUnique(Int32[] membersIds, List`1<int> completeuniquemembers);
    private void Cache_LocatorAdded(object sender, LocatorEventArgs args);
    internal void ActOnTrackedObjectsWithQueryPlansWorkList_AddCriteriaToCollector(Dictionary`2<IClass, HashSet`1<IStructuralFeature>> queryPlansMembersPerClassifier, HashSet`1<IElement> trackedObjectsNew, List`1<ViewModelQueryplanFetchCondition> condcollector);
    internal void ModernQueryPlan_AddObjectsForCollector(HashSet`1<IElement> worklist, bool isStructureNotLevel, Int32[] memberindices);
    public virtual ITaggedValueCollection get_TaggedValues();
    internal virtual void set_TaggedValues(ITaggedValueCollection value);
    public ISubscriber get_CurrentSubscriber();
    private void _currentSubscriber_Receive(object sender, EventArgs e);
    public bool get_AlwaysShowActions();
    public void CurrentVariableOutOfdate();
    public sealed virtual void Dispose();
    public void UpdateVCurrentToCurrentValue();
    public void UpdateDownStreamvCurrents();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    public ViewModel get_ViewModel();
    public string get_Name();
    public string get_ModelName();
    public void set_ModelName(string value);
    public string get_RuntimeName();
    internal void set_IClass(IClassifier value);
    public IClassifier get_IClass();
    [CompilerGeneratedAttribute]
public void set_RootColumn(ViewModelColumn value);
    [CompilerGeneratedAttribute]
public ViewModelColumn get_RootColumn();
    [CompilerGeneratedAttribute]
public void set_Handle(RootedHandle value);
    [CompilerGeneratedAttribute]
public RootedHandle get_Handle();
    [CompilerGeneratedAttribute]
public void set_CurrencyHandle(object value);
    [CompilerGeneratedAttribute]
public object get_CurrencyHandle();
    public void set_FunctionToFindCurrent(Func`2<ViewModelClass, IElement> value);
    public Func`2<ViewModelClass, IElement> get_FunctionToFindCurrent();
    public void set_FunctionToFindBindingSource(Func`2<ViewModelClass, object> value);
    public Func`2<ViewModelClass, object> get_FunctionToFindBindingSource();
    public object get_BindingSource();
    [CompilerGeneratedAttribute]
public void set_DisplayAsGrid(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayAsGrid();
    public List`1<ViewModelColumn> get_Columns();
    [CompilerGeneratedAttribute]
public void set_ClassIsPickList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClassIsPickList();
    public string NameOfCurrentVariable_Runtime();
    public string NameOfCurrentVariable_Ocl();
    public string NameOfSelectedVariable_Runtime();
    public string NameOfSelectedVariable_Ocl();
    [CompilerGeneratedAttribute]
public void set_UsedForSeekerColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsedForSeekerColumns();
    public bool get_UsedForSeekerColumnsOrderByExpressions();
    public IClassifier GetDerivedType(IEcoServiceProvider sp);
    internal void AddOptOutActionIdentity(string identity);
    public List`1<string> get_OptOutActionIdentities();
    public ViewModelColumn ColumnFromName(string name);
    [CompilerGeneratedAttribute]
public bool get_IsAdmin();
    [CompilerGeneratedAttribute]
internal void set_IsAdmin(bool value);
    [CompilerGeneratedAttribute]
public string get_ExpressionActAsForActions();
    [CompilerGeneratedAttribute]
internal void set_ExpressionActAsForActions(string value);
    private Publisher get_EnsuredActionPublisher();
    private void OnLastSub();
    protected void InitActionSubscriptions();
    [CompilerGeneratedAttribute]
public void add_ActionsOutOfDate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ActionsOutOfDate(EventHandler`1<EventArgs> value);
    private void _subsForActions_Receive(object sender, EventArgs e);
    public void SubscribeToActions(ISubscriber subs);
    public List`1<ActionInViewModel> get_Actions();
    private void EnsureActionsUptoDate();
    [CompilerGeneratedAttribute]
public bool get_IsCleanedForFree();
    [CompilerGeneratedAttribute]
private void set_IsCleanedForFree(bool value);
    public IElement get_ModernQueryPlanStructureToGetHereResult();
    internal void set_ModernQueryPlanStructureToGetHereResult(IElement value);
    internal void CheckAndActIfThisIsAFreeableResult(IElement res);
    [CompilerGeneratedAttribute]
public bool get_ModernQueryPlanStructureTouched();
    [CompilerGeneratedAttribute]
internal void set_ModernQueryPlanStructureTouched(bool value);
    [CompilerGeneratedAttribute]
public bool get_ModernQueryPlanLevelTouched();
    [CompilerGeneratedAttribute]
private void set_ModernQueryPlanLevelTouched(bool value);
    public ViewModelColumn get_FirstAttribute_Column();
    [CompilerGeneratedAttribute]
public PlacingContainerRuntime get_PlacingContainer();
    [CompilerGeneratedAttribute]
internal void set_PlacingContainer(PlacingContainerRuntime value);
    [CompilerGeneratedAttribute]
public bool get_ThisIsCallBackPerListViewRow();
    [CompilerGeneratedAttribute]
internal void set_ThisIsCallBackPerListViewRow(bool value);
    public sealed virtual void CleanForFree();
    internal string DebugInfoAboutQueryPlans();
    private string GetStatsInfo(IStructuralFeature y);
    internal void CollectObjectsForCOnstraintsCheck(HashSet`1<IObject> allobjects);
    public string GetTabSepDataFromHandle();
    private string GetAsTabSepDataFromTupleRow(RenderedTuple rt);
    internal PlacingContainerRuntime ResolvePlacingContainerId(string placingContainerId);
    internal void MaintainPlacingContainerDict(PlacingContainerRuntime placingContainer);
    internal void OwnerChangedByMount(ViewModel vm);
    public bool ShowActionMenuForCurrentInNesting();
    public ViewModelColumn GetFirstNonGridRootColFromNesting();
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    [CompilerGeneratedAttribute]
private void <EnsureQueryplanAndTrackingAccessedObjects>b__37_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <CurrentVariableOutOfdate>b__61_0();
}
public class Eco.ViewModel.Runtime.ViewModelClassCreatedArgs : EventArgs {
    public ViewModelClass ViewModelClass;
}
public class Eco.ViewModel.Runtime.ViewModelColumn : ViewModelElement {
    private ViewModelClass _vc;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Identity>k__BackingField;
    internal string ColumnForPickListName;
    private string _erroroninit;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StyleRef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StyleDesign>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StyleRefExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ContentOverride>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PresentationStringColSpan>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionForReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionForEnable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionForVisible>k__BackingField;
    private ViewModelColumn _ExplicitColumnFor_Visible;
    private bool _ExplicitColumnFor_VisibleInitiated;
    private ViewModelColumn _ExplicitColumnFor_ReadOnly;
    private bool _ExplicitColumnFor_ReadOnlyInitiated;
    private ViewModelColumn _ExplicitColumnFor_Style;
    private bool _ExplicitColumnFor_StyleInitiated;
    private string _ModelName;
    private string _runtimeName;
    private string _runtimeNameBasedOnName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ColSpan>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPSExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ActionPeriodicityMillisec>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsGroupBox>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IncludeInGroupBox_Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AbstractActionIdRef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasDefaultName>k__BackingField;
    private string _PresentationString;
    private bool _useAbstractActionPresentation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RowSpan>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <XPos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <YPos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelClass <DetailAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelColumn <ColumnForPickList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelColumn <PickListForColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SuggestedTabOrder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ColumnUsedForPickList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassifier <ExpressionResultType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ExpressionResultIsImmutable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IStructuralFeature <ModelInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ColSpanWhenInGrid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullRowMode <NullRowMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NullRowRepresentation>k__BackingField;
    private Dictionary`2<string, object> _SpawnedArtifacts;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCollection>k__BackingField;
    private Nullable`1<bool> _hasDisplayPosition;
    private Dictionary`2<string, ViewModelValidation> _ViewModelValidations;
    private bool _ensureSpanChacedTypeSet;
    private IClassifier _ensureSpanCachedType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelUIComponentType <ViewModelUIComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RendersActionIdRef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ActionRenderedByIdRef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <NotVisible>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <VisibleFollowsEnable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PlacingContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PlacingContainerRuntime <PlacingContainer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PCSelfAlign>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MountPointToViewModelIfSet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MountPointToViewModelIdIfSet>k__BackingField;
    private bool _ExpressionWillEffectPersistentDataInit;
    private bool _ExpressionWillEffectPersistentData;
    private ViewModelColumn _RendersAction;
    private ViewModelColumn _ActionRenderedBy;
    private EventSubscriber _evsubForStyleChange;
    public int PCGrow;
    public int PCMarginTop;
    public int PCMarginBottom;
    public int PCMarginLeft;
    public int PCMarginRight;
    public int PCMaxSize;
    public int PCMinSize;
    public int PCIndex;
    public int PCMaxSizeSecondary;
    public int PCMinSizeSecondary;
    public ViewModel ViewModel { get; }
    public string Identity { get; public set; }
    public string ErrorOnInit { get; public set; }
    public string StyleRef { get; public set; }
    public string StyleDesign { get; public set; }
    public string StyleRefExpression { get; public set; }
    public bool ContentOverride { get; public set; }
    public string EnableExpressionOverrideFromAbstractAction { get; }
    public string ExpressionForEnableConsideringPossibleAbstractActionAndAlsoIfThatActionIsClassAction { get; }
    public int PresentationStringColSpan { get; public set; }
    public bool IsStatic { get; public set; }
    public string ExpressionForReadOnly { get; public set; }
    public string ExpressionForEnable { get; public set; }
    public string ExpressionForVisible { get; public set; }
    public string Name { get; }
    public string ModelName { get; public set; }
    public string RuntimeName { get; }
    public int ColSpan { get; public set; }
    public string Expression { get; public set; }
    public bool IsAction { get; public set; }
    public bool IsInPlacePopup { get; }
    public bool IsPSExpression { get; public set; }
    public bool IsPeriodicAction { get; }
    public int ActionPeriodicityMillisec { get; public set; }
    public bool IsGroupBox { get; public set; }
    public string IncludeInGroupBox_Id { get; internal set; }
    public string AbstractActionIdRef { get; public set; }
    public bool HasDefaultName { get; public set; }
    public string PresentationString { get; }
    public int RowSpan { get; public set; }
    public int XPos { get; public set; }
    public int YPos { get; public set; }
    public ViewModelClass DetailAssociation { get; public set; }
    public ViewModelColumn ColumnForPickList { get; public set; }
    public ViewModelColumn PickListForColumn { get; public set; }
    public int SuggestedTabOrder { get; internal set; }
    public ViewModelClass OwningDisplayClass { get; }
    public ViewModelClass ViewModelClass { get; }
    public bool ColumnUsedForPickList { get; public set; }
    public IClassifier ExpressionResultType { get; internal set; }
    public bool ExpressionResultIsImmutable { get; internal set; }
    public IStructuralFeature ModelInfo { get; internal set; }
    public bool AllowNull { get; internal set; }
    public int ColSpanWhenInGrid { get; public set; }
    public NullRowMode NullRowMode { get; public set; }
    public string NullRowRepresentation { get; public set; }
    public Dictionary`2<string, object> SpawnedArtifacts { get; }
    public bool IsCollection { get; internal set; }
    public Dictionary`2<string, ViewModelValidation> ViewModelValidations { get; }
    internal bool EnsureSpanChacedTypeSet { get; }
    public ViewModelUIComponentType ViewModelUIComponentType { get; internal set; }
    public string RendersActionIdRef { get; internal set; }
    public string ActionRenderedByIdRef { get; internal set; }
    public bool NotVisible { get; internal set; }
    public bool IsListView { get; public set; }
    public bool VisibleFollowsEnable { get; internal set; }
    public string PlacingContainerId { get; internal set; }
    public PlacingContainerRuntime PlacingContainer { get; internal set; }
    public string PCSelfAlign { get; internal set; }
    public string MountPointToViewModelIfSet { get; internal set; }
    public string MountPointToViewModelIdIfSet { get; internal set; }
    public bool ExpressionWillEffectPersistentData { get; }
    internal ViewModelColumn(ViewModelClass vc);
    public ViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    public void set_ErrorOnInit(string value);
    public string get_ErrorOnInit();
    [CompilerGeneratedAttribute]
public void set_StyleRef(string value);
    [CompilerGeneratedAttribute]
public string get_StyleRef();
    [CompilerGeneratedAttribute]
public void set_StyleDesign(string value);
    [CompilerGeneratedAttribute]
public string get_StyleDesign();
    [CompilerGeneratedAttribute]
public void set_StyleRefExpression(string value);
    [CompilerGeneratedAttribute]
public string get_StyleRefExpression();
    [CompilerGeneratedAttribute]
public void set_ContentOverride(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContentOverride();
    public string get_EnableExpressionOverrideFromAbstractAction();
    public string get_ExpressionForEnableConsideringPossibleAbstractActionAndAlsoIfThatActionIsClassAction();
    [CompilerGeneratedAttribute]
public void set_PresentationStringColSpan(int value);
    [CompilerGeneratedAttribute]
public int get_PresentationStringColSpan();
    [CompilerGeneratedAttribute]
public void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_ExpressionForReadOnly(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionForReadOnly();
    [CompilerGeneratedAttribute]
public void set_ExpressionForEnable(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionForEnable();
    [CompilerGeneratedAttribute]
public void set_ExpressionForVisible(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionForVisible();
    public ViewModelColumn GetExplicitColumnFor_Visible();
    public ViewModelColumn GetExplicitColumnFor_ReadOnly();
    public ViewModelColumn GetExplicitColumnFor_Style();
    public string get_Name();
    public string get_ModelName();
    public void set_ModelName(string value);
    public string get_RuntimeName();
    private string AvoidCertainNamesThatCauseProblems(string runtimeName);
    [CompilerGeneratedAttribute]
public void set_ColSpan(int value);
    [CompilerGeneratedAttribute]
public int get_ColSpan();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_IsAction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAction();
    public bool get_IsInPlacePopup();
    [CompilerGeneratedAttribute]
public void set_IsPSExpression(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPSExpression();
    public bool get_IsPeriodicAction();
    [CompilerGeneratedAttribute]
public void set_ActionPeriodicityMillisec(int value);
    [CompilerGeneratedAttribute]
public int get_ActionPeriodicityMillisec();
    [CompilerGeneratedAttribute]
public void set_IsGroupBox(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGroupBox();
    [CompilerGeneratedAttribute]
public string get_IncludeInGroupBox_Id();
    [CompilerGeneratedAttribute]
internal void set_IncludeInGroupBox_Id(string value);
    [CompilerGeneratedAttribute]
public void set_AbstractActionIdRef(string value);
    [CompilerGeneratedAttribute]
public string get_AbstractActionIdRef();
    public AbstractActionRuntime GetAbstractAction();
    private Type SafeGetEcoType();
    public bool IsSeekAction();
    internal void OnExecute();
    internal void ExecutePeriodAction();
    public string TaggedValueLocalAndModelInfo(string tag);
    [CompilerGeneratedAttribute]
public bool get_HasDefaultName();
    [CompilerGeneratedAttribute]
public void set_HasDefaultName(bool value);
    public string get_PresentationString();
    private string Translate(string translateable);
    public void InitPresentationString(string pres);
    [CompilerGeneratedAttribute]
public void set_RowSpan(int value);
    [CompilerGeneratedAttribute]
public int get_RowSpan();
    [CompilerGeneratedAttribute]
public void set_XPos(int value);
    [CompilerGeneratedAttribute]
public int get_XPos();
    [CompilerGeneratedAttribute]
public void set_YPos(int value);
    [CompilerGeneratedAttribute]
public int get_YPos();
    [CompilerGeneratedAttribute]
public void set_DetailAssociation(ViewModelClass value);
    [CompilerGeneratedAttribute]
public ViewModelClass get_DetailAssociation();
    [CompilerGeneratedAttribute]
public void set_ColumnForPickList(ViewModelColumn value);
    [CompilerGeneratedAttribute]
public ViewModelColumn get_ColumnForPickList();
    [CompilerGeneratedAttribute]
public void set_PickListForColumn(ViewModelColumn value);
    [CompilerGeneratedAttribute]
public ViewModelColumn get_PickListForColumn();
    [CompilerGeneratedAttribute]
internal void set_SuggestedTabOrder(int value);
    [CompilerGeneratedAttribute]
public int get_SuggestedTabOrder();
    public ViewModelClass get_OwningDisplayClass();
    public ViewModelClass get_ViewModelClass();
    [CompilerGeneratedAttribute]
public void set_ColumnUsedForPickList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ColumnUsedForPickList();
    [CompilerGeneratedAttribute]
internal void set_ExpressionResultType(IClassifier value);
    [CompilerGeneratedAttribute]
public IClassifier get_ExpressionResultType();
    [CompilerGeneratedAttribute]
internal void set_ExpressionResultIsImmutable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpressionResultIsImmutable();
    [CompilerGeneratedAttribute]
internal void set_ModelInfo(IStructuralFeature value);
    [CompilerGeneratedAttribute]
public IStructuralFeature get_ModelInfo();
    [CompilerGeneratedAttribute]
internal void set_AllowNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
public void set_ColSpanWhenInGrid(int value);
    [CompilerGeneratedAttribute]
public int get_ColSpanWhenInGrid();
    [CompilerGeneratedAttribute]
public void set_NullRowMode(NullRowMode value);
    [CompilerGeneratedAttribute]
public NullRowMode get_NullRowMode();
    [CompilerGeneratedAttribute]
public void set_NullRowRepresentation(string value);
    [CompilerGeneratedAttribute]
public string get_NullRowRepresentation();
    public Dictionary`2<string, object> get_SpawnedArtifacts();
    public Type GetNonNullableResultType();
    public bool IsNumericType();
    [CompilerGeneratedAttribute]
internal void set_IsCollection(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCollection();
    public bool HasDisplayPosition(bool thisIsCallBackPerListViewRow);
    private bool InternalHasDisplayPosition(bool thisIsCallBackPerListViewRow);
    public string NameOfReadOnlyColumnInRootHandle();
    public string NameOfEnabledColumnInRootHandle();
    public string NameOfVisibleColumnInRootHandle();
    public string NameOfStyleColumnInRootHandle();
    public string GetSuggestedNameForSpawnedControl();
    public string GetSuggestedNameForSpawnedLabel();
    public string GetSuggestedNameForSpawnedGrid();
    internal void HookUpThisValidation(ViewModelValidation viewModelValidation);
    public Dictionary`2<string, ViewModelValidation> get_ViewModelValidations();
    internal bool get_EnsureSpanChacedTypeSet();
    internal void SetEnsureSpanCachedType(IClassifier iClassifier);
    internal IClassifier GetEnsureSpanCachedType();
    internal void CleanForFree();
    [CompilerGeneratedAttribute]
public ViewModelUIComponentType get_ViewModelUIComponentType();
    [CompilerGeneratedAttribute]
internal void set_ViewModelUIComponentType(ViewModelUIComponentType value);
    [CompilerGeneratedAttribute]
public string get_RendersActionIdRef();
    [CompilerGeneratedAttribute]
internal void set_RendersActionIdRef(string value);
    [CompilerGeneratedAttribute]
public string get_ActionRenderedByIdRef();
    [CompilerGeneratedAttribute]
internal void set_ActionRenderedByIdRef(string value);
    [CompilerGeneratedAttribute]
public bool get_NotVisible();
    [CompilerGeneratedAttribute]
internal void set_NotVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsListView();
    [CompilerGeneratedAttribute]
public void set_IsListView(bool value);
    [CompilerGeneratedAttribute]
public bool get_VisibleFollowsEnable();
    [CompilerGeneratedAttribute]
internal void set_VisibleFollowsEnable(bool value);
    [CompilerGeneratedAttribute]
public string get_PlacingContainerId();
    [CompilerGeneratedAttribute]
internal void set_PlacingContainerId(string value);
    [CompilerGeneratedAttribute]
public PlacingContainerRuntime get_PlacingContainer();
    [CompilerGeneratedAttribute]
internal void set_PlacingContainer(PlacingContainerRuntime value);
    [CompilerGeneratedAttribute]
public string get_PCSelfAlign();
    [CompilerGeneratedAttribute]
internal void set_PCSelfAlign(string value);
    [CompilerGeneratedAttribute]
public string get_MountPointToViewModelIfSet();
    [CompilerGeneratedAttribute]
internal void set_MountPointToViewModelIfSet(string value);
    [CompilerGeneratedAttribute]
public string get_MountPointToViewModelIdIfSet();
    [CompilerGeneratedAttribute]
internal void set_MountPointToViewModelIdIfSet(string value);
    public bool get_ExpressionWillEffectPersistentData();
    public ViewModelColumn GetRendersAction();
    public ViewModelColumn GetActionRenderedBy();
    internal void SubscribeToStyleChanges();
    private void _evsubForStyleChange_Receive(object sender, EventArgs e);
    public sealed virtual void Dispose();
    private void UpdateStyleAndSubscribe();
    public ViewModelColumn GetParentGroupBox();
    internal void ModernQueryPlanExpressionRunToFindMissing_Leaf(IElement contextforlevel);
    private static void ForceLoad(IElement forceloadtrigger);
    internal void ModernQueryPlanExpressionRunToFindMissing_Structure(bool runallnotsparse, IOclService ocl, IExternalVariableList vars, IElement& contextforlevel, bool doStructureNotLevel);
    public ViewModelColumn GetLabelExpressionColumnIfGrid();
    public ViewModelColumn GetLabelExpressionColumnNoneGrid();
    public int GetPCMinSizeInYDirection();
    [CompilerGeneratedAttribute]
private void <_evsubForStyleChange_Receive>b__283_0();
    [CompilerGeneratedAttribute]
private void <UpdateStyleAndSubscribe>b__285_0();
}
internal class Eco.ViewModel.Runtime.ViewModelDefinitionPerEcoType : object {
    internal Dictionary`2<string, ViewModelMemory> ListOfViewModelRTCreators;
    internal Dictionary`2<string, ViewModelMemory> ListOfViewModelRTCreatorsByRuntimeName;
    internal ActionsRuntime ActionsRuntime;
    internal bool IsInitiated;
    internal Dictionary`2<string, string> ReportsByNameDictionary;
    internal bool ContainsAsNameOrRuntimeName(string name);
    internal ViewModelMemory GetFromNameOrRuntimeName(string name);
    internal void AddOrUpdate(string name, string runtimename, ViewModelRTCreator ViewModelRTCreator, DateTime timestamp, DateTime readfromfile);
    internal void AddOrReplaceReportDefinition(string name, string reportasxml);
    internal bool HasViewModelName(string name);
}
public class Eco.ViewModel.Runtime.ViewModelDefinitionsInApplication : object {
    private static ViewModelDefinitionPerEcoType _viewModelDefinitionPerESPNull;
    private static Dictionary`2<Type, ViewModelDefinitionPerEcoType> _listOfViewModelDefinitionPerESP;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <DynamicViewModels>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <DynamicViewModelPath>k__BackingField;
    private static Func`1<IDispatcherTimerImplementor> _createIDispatcherTimerImplementor;
    public static bool DynamicViewModels { get; protected set; }
    public static string DynamicViewModelPath { get; protected set; }
    private static ViewModelDefinitionsInApplication();
    private static ViewModelDefinitionPerEcoType GetViewModelDefinitionPerEcoType(Type esp);
    public static ActionsRuntime GetActionsRuntime(Type ecospaceType);
    public static ActionsRuntime GetActionsRuntime();
    protected static void EnsureInitiated(Type EcoSpaceType);
    public static IEcoServiceProvider GetStaticEcoServicesFromEcoType(Type EcoSpaceType);
    public static Type EcoSpaceTypeThatHasViewModelWithName(string name);
    public static ViewModelRTCreator ViewModelFromName(string name);
    public static ViewModelRTCreator ViewModelFromName(string name, EcoSpace es);
    public static ViewModelRTCreator ViewModelFromName(string name, Type EcoSpaceType);
    public static ViewModelRTCreator ViewModelFromIdentity(string id, Type EcoSpaceType);
    public static List`1<string> ViewModels(Type EcoSpaceType);
    public static void InjectViewModelWithName(string name, ViewModelRTCreator vmc, Type EcoSpaceType);
    public static void InjectReportXmlWithName(string name, XDocument xd, Type EcoSpaceType, ITypeSystemService itss);
    [CompilerGeneratedAttribute]
protected static void set_DynamicViewModels(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DynamicViewModels();
    [CompilerGeneratedAttribute]
protected static void set_DynamicViewModelPath(string value);
    [CompilerGeneratedAttribute]
public static string get_DynamicViewModelPath();
    public static void InitDynamicViewModels(string dynamicViewModelPath);
    public static string GetRefreshTimePointAsIntegerStringIfAvailable(string viewName, Type EcoSpaceType);
    private static void CheckAndUpdateDynamicViewModel(string name, Type EcoSpaceType);
    public static List`1<string> ViewModelsFromClass(IClass umlClass, EcoSpace EcoSpace);
    public static List`1<string> ViewModelsFromClass(IClass umlClass);
    public static List`1<string> ViewModelsFromClass(IClass umlClass, Type EcoSpaceType);
    public static List`1<string> ViewModelsNotRequiresRoot(Type EcoSpaceType);
    public static bool HasViewModel(string name);
    public static bool HasViewModel(string name, Type EcoSpaceType);
    public static void ExternalInit(Type EcoSpaceType, IEcoServiceProvider esp, Dictionary`2<string, ViewModelRTCreator> ViewModelRTCreators);
    public static void ExternalInit(Type EcoSpaceType, IEcoServiceProvider esp, Dictionary`2<string, ViewModelRTCreator> ViewModelRTCreators, ActionsRTCreator actionsRTCreator);
    public static void ForceReInit(Type EcoSpaceType, IEcoServiceProvider esp);
    public static void Init(EcoSpace es);
    public static void Init(IEcoServiceProvider esp);
    public static bool IsInitiated(Type ecoSpaceType);
    public static bool IsInitiatedForESP(IEcoServiceProvider esp);
    public static void Init(Type EcoSpaceType, IEcoServiceProvider esp);
    public static void InitViewModelsForEcoSpaceTypeByReadingViewModelsFromAssemblies(Type EcoSpaceType, IEnumerable`1<Assembly> list);
    public static List`1<Assembly> GetModelContainingAssemblies(IEcoServiceProvider esp);
    public static void ExternalLoadOfActions(string actioncontentxml);
    public static void ExternalLoadOfActions(Type EcoSpaceType, string actioncontentxml);
    public static ViewModelRTCreator ViewModelInDesignTime(string ViewModelName, string EcoSpaceTypeName, ISite site);
    public static ViewModelRTCreator ViewModelInDesignTime(string ViewModelName, Type EcoSpaceType);
    public static void InstallCreateIDispatcherTimerImplementor(Func`1<IDispatcherTimerImplementor> createIDispatcherTimerImplementor);
    public static IDispatcherTimerImplementor CreateIDispatcherTimerImplementor();
}
public class Eco.ViewModel.Runtime.ViewModelElement : object {
    private ITaggedValueCollection _tv;
    public ITaggedValueCollection TaggedValues { get; internal set; }
    public virtual ITaggedValueCollection get_TaggedValues();
    internal virtual void set_TaggedValues(ITaggedValueCollection value);
}
public class Eco.ViewModel.Runtime.ViewModelHelper : object {
    private static Dictionary`2<string, Type> _CodeGenViewModelTypes;
    public static string c_NonEditComboDisplaySuffix;
    private static ViewModelHelper();
    public static void InstallCodeGenViewModelType(Type type);
    public static bool IsCodeGenViewModelInstalled(string name);
    public static VMClass CreateCodeGenViewModelFromName(string name, EcoSpace es, IEcoObject ieo, bool fallbackToVMClassIfCodeNotFound);
    public static VMClass CreateCodeGenViewModelFromNameOffline(string name, bool fallbackToVMClassIfCodeNotFound);
    public static VMClass CreateFromViewModelOffline(string name, bool useExtendedUIFunctions);
    public static void InitTypedOfflineVMClass(VMClass typedvmclasstoinit, GetVMClassTypeDelegate creator);
    public static void InstallAllCodeGenViewModelsInAssemblyToEnableCreateByName(Assembly a);
    public static List`1<VMClass> CreateListFromViewModel(string viewmodelName, EcoSpace es, IList`1<IEcoObject> objects);
    public static List`1<VMClass> CreateListFromViewModel(string viewmodelName, EcoSpace es, IObjectList objects);
    public static VMClass CreateFromViewModel(string viewmodelName, EcoSpace es, IEcoObject root, bool useDisplayQueueDrivenAutoPopulate);
    public static VMClass CreateFromViewModelWithExtendedUIFunctions(string viewmodelName, EcoSpace es, IEcoObject root, bool useDisplayQueueDrivenAutoPopulate);
    public static VMClass CreateFromViewModel(string viewmodelName, EcoSpace es, IEcoObject root, bool useDisplayQueueDrivenAutoPopulate, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(string viewmodelName, EcoSpace es, IEcoObject root, GetVMClassTypeDelegate creator);
    public static VMClass CreateFromViewModel(string viewmodelName, EcoSpace es, IEcoObject root, GetVMClassTypeDelegate creator, bool useDisplayQueueDrivenAutoPopulate, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(Type esType, IEcoObject root, ViewModelRTCreator vmc_c, GetVMClassTypeDelegate creator, IEcoServiceProvider spToUse, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(Type esType, IEcoObject root, ViewModelRTCreator vmc_c, GetVMClassTypeDelegate creator, bool useDisplayQueueDrivenAutoPopulate, IEcoServiceProvider spToUse, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(EcoSpace es, IEcoObject root, ViewModelRTCreator vmc_c, GetVMClassTypeDelegate creator, bool useDisplayQueueDrivenAutoPopulate, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(Type esType, EcoSpace es, IEcoObject root, ViewModelRTCreator vmc_c, GetVMClassTypeDelegate creator, bool useDisplayQueueDrivenAutoPopulate, IEcoServiceProvider spToUse, bool useExtendedUIFunctions);
    public static VMClass CreateFromViewModel(Type esType, EcoSpace es, IEcoObject root, ViewModelRTCreator vmc_c, GetVMClassTypeDelegate creator, IViewUICreator externalViewUICreator, Action`1<ViewModel> initViewModelAction, bool useDisplayQueueDrivenAutoPopulate, IEcoServiceProvider spToUse, bool useExtendedUIFunctions);
    public static List`1<object> CreateDynamicsFromViewModel(string viewmodelName, EcoSpace es, IList`1<IEcoObject> objects);
    public static object CreateDynamicFromViewModel(string viewmodelName, EcoSpace es, IEcoObject root);
    private static object FromVMClassToDynamic(VMClass vm);
    private static VMClass ActOnVMClassFromViewModelRTCreator(VMClassFromViewModelRTCreator x, IEcoObject root, bool useDisplayQueueDrivenAutoPopulate);
    private static VMClass ActOnVMClassFromViewModelRTCreator_WithOptionalVMClassSupplied(VMClass optionalVMClass, VMClassFromViewModelRTCreator x, IEcoObject root, bool useDisplayQueueDrivenAutoPopulate);
    public static void ApplyValues(VMClass offline, VMClass online);
    public static void ApplyValues(VMClass offline, VMClass online, Func`3<VMClass, VMAbstractMember, IElement> offlineVMClassToOnlineIElement);
    private static void ApplyValuesInternal(VMClass offline, VMClass online, Func`3<VMClass, VMAbstractMember, IElement> offlineVMClassToOnlineIElement, List`1<Action> listofVariableSettingsActionsToDoAfter);
    private static void HandleApplyForVariableBeforeValueUpdates(VMClass offline, VMClass online, KeyValuePair`2<string, VMAbstractMember> prop, object value, List`1<Action> listofVariableSettingsActionsToDoAfter);
    public static List`1<string> GetListOfKeysFromCommaStringCompositeSafe(string commastring);
    private static void HandleApplyForVariableAfterValueUpdates(VMClass online, KeyValuePair`2<string, VMAbstractMember> prop, object value, ViewModelClass vmc);
    private static void EnsureMissingCurrentAndSelectedVariablesAreClearedForGrids(VMClass offline, VMClass online);
}
public class Eco.ViewModel.Runtime.ViewModelMemory : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelRTCreator <ViewModelRTCreator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RuntimeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <ReadFromFileTimestamp>k__BackingField;
    public ViewModelRTCreator ViewModelRTCreator { get; public set; }
    public string Name { get; public set; }
    public string RuntimeName { get; public set; }
    public DateTime Timestamp { get; public set; }
    public DateTime ReadFromFileTimestamp { get; public set; }
    [CompilerGeneratedAttribute]
public void set_ViewModelRTCreator(ViewModelRTCreator value);
    [CompilerGeneratedAttribute]
public ViewModelRTCreator get_ViewModelRTCreator();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_RuntimeName(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeName();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_ReadFromFileTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ReadFromFileTimestamp();
}
public class Eco.ViewModel.Runtime.ViewModelOpenDocumentReports : object {
    public static string AttrName_TemplateHtml;
    public static string AttrName_ReportFileName;
    public static string AttrName_TemplateIsHtml;
    public static string AttrName_ReportDirectoryName;
    public static string AttrName_TemplateUrl;
    public static string AttrName_TemplateBlob;
    public static string AttrName_SkipReplaceOfReturnAndTab;
    public String[] allAttributes;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static NetworkCredential <CredentialsToInsteadOfDefault>k__BackingField;
    private Dictionary`2<string, string> _meta;
    private Dictionary`2<string, ImageInfo> _imagesInDoc;
    private bool _isCleanedForFree;
    public static NetworkCredential CredentialsToInsteadOfDefault { get; public set; }
    public void CleanForFree();
    public static void InstallAsEALMethod(IEcoServiceProvider sp);
    [CompilerGeneratedAttribute]
public static void set_CredentialsToInsteadOfDefault(NetworkCredential value);
    [CompilerGeneratedAttribute]
public static NetworkCredential get_CredentialsToInsteadOfDefault();
    public string ProduceFileFromMergedTemplateAndData(string filename, string tempname, string suggestedName, string xmldata, Dictionary`2<string, string> metalabels);
    public void BringUpMergedTemplateAndData(string filename, string tempname, string suggestedName, string xmldata, Dictionary`2<string, string> metalabels);
    public void MergeIntoTempZip(string tempname, string xmldata, Dictionary`2<string, string> metalabels, bool skipReplaceOfReturnAndTab);
    public static XDocument StreamToXDocument(Stream orgstream);
    public static XDocument StringToXDocument(string html);
    public void DoAllTheMerging(XDocument xdoc, XDocument xdocData, Dictionary`2<string, string> metalabels, bool alsoSearchAttributes, bool skipReplaceOfReturnAndTab);
    private static void ExtendDataDictWithMissingMetaTags(Dictionary`2<string, XElement> dataDictionary, Dictionary`2<string, string> metalabels);
    private static void InitDataDict(XElement xElement, Dictionary`2<string, XElement> dataDictionary);
    private void DoAllTheMergingElement(XElement xe, Dictionary`2<string, XElement> dataDictionary, List`1<InsideLoop> aInsideLoopStack, bool alsoSearchAttributes, bool skipReplaceOfReturnAndTab);
    private void ScanAndMergeOneString(XText xText, Dictionary`2<string, XElement> dataDictionary, Boolean& breakrest, List`1<InsideLoop> aInsideLoopStack, bool alsoSearchAttributes, bool skipReplaceOfReturnAndTab);
    private void DoTextMergeFromDataDict(XText xText, Dictionary`2<string, XElement> dataDictionary, List`1<InsideLoop> aInsideLoopStack, bool skipReplaceOfReturnAndTab);
    private bool CheckAndHandleImage(XText xText, Dictionary`2<string, XElement> dataDictionary, List`1<InsideLoop> aInsideLoopStack);
    private static void HandleTabsAndReturns(XText xText, bool skipReplaceOfReturnAndTab);
    private static string GetString(XElement data);
}
public class Eco.ViewModel.Runtime.ViewModelParseHelper : object {
    public static TaggedValueCollectionImpl TaggedValueParse(XElement el);
}
public class Eco.ViewModel.Runtime.ViewModelReferenceTypeSupport : object {
    private IEcoServiceProvider _sp;
    private List`1<string> _StylesInModelCacheSinceTheyDoNotChangeAfterInit;
    private static IViewModelReferenceService_net45Part _ViewModelReferenceService_net45Part;
    internal ViewModelReferenceTypeSupport(IEcoServiceProvider sp);
    public sealed virtual List`1<string> ViewModels(IClass theclass);
    public sealed virtual IObject GetRootObject(ViewModelReferenceType vmref);
    public sealed virtual Dictionary`2<string, object> ViewModelAsDictionaryHierarcy(string vmname, IObject io);
    private Dictionary`2<string, object> DoDict(VMClass vmclass, Dictionary`2<string, object> resdict);
    public sealed virtual string ViewModelAsXml(ViewModelReferenceType vmref, string viewModelName, IObject root);
    public sealed virtual bool SaveToFile(ViewModelReferenceType vmref, string filepathandname, Byte[] data);
    public sealed virtual string XsltTransformXml(ViewModelReferenceType vmref, string xslttext, string xmltext);
    public sealed virtual List`1<string> XmlValidateWithSchemas(ViewModelReferenceType vmref, string xml, IEnumerable`1<string> listofstringswithSchemaurls);
    public sealed virtual void ExecuteFetchHints(ViewModelReferenceType vmref, IObjectList list);
    public sealed virtual void ExecuteQueryPlan(ViewModelReferenceType vmref);
    public sealed virtual void SuspectExternalUpdateInvalidate(ViewModelReferenceType vmref, IObjectList list);
    public sealed virtual void Save(ViewModelReferenceType vmref);
    public sealed virtual void Navigate(ViewModelReferenceType vmref, IObject root, string viewmodel);
    public sealed virtual void NavigateUrl(ViewModelReferenceType vmref, string url, bool opennewtab);
    public sealed virtual void ExecuteAction(ViewModelReferenceType vmref, string viewModelClassName, string actioname);
    public sealed virtual void ExecuteCurrentActionAgainOnce(ViewModelReferenceType vmref);
    public sealed virtual bool CanExecuteAction(ViewModelReferenceType vmref, string viewModelClassName, string actioname, SubscriberPair subscriberBlock);
    public sealed virtual bool AccessGroupsEnable(ViewModelReferenceType vmref, string commasepofags, SubscriberPair subscriberBlock);
    public sealed virtual List`1<string> GetStylesInModel(ViewModelReferenceType vmref);
    public sealed virtual void Download(ViewModelReferenceType vmref, string filename, Byte[] bytes);
    public sealed virtual Byte[] SysDocBatchZip(ViewModelReferenceType vmref, IObject sysdocbatch);
    public sealed virtual void PSExpression_Refresh(ViewModelReferenceType vmref);
    public sealed virtual bool IsDirty(ViewModelReferenceType vmref, SubscriberPair subscriberBlock);
    public sealed virtual IObjectList GetDirtyList(ViewModelReferenceType vmref, SubscriberPair subscriberBlock);
    public sealed virtual void Search(ViewModelReferenceType vmref);
    public sealed virtual void ReQuery(ViewModelReferenceType vmref);
    public sealed virtual void ImportTabSepData(ViewModelReferenceType vmref);
    public sealed virtual void Refresh(ViewModelReferenceType vmref);
    public sealed virtual IElement ExecutePS(ViewModelReferenceType vmref, string viewModelClassName, string columnName);
    public sealed virtual void RunServerSideViewModelNow(ViewModelReferenceType vmref, string serversideviewmodelname);
    public sealed virtual string ViewModelName(ViewModelReferenceType vmref);
    public sealed virtual bool ShowActionMenuForCurrentInNesting(ViewModelReferenceType vmref, string nameofNesting);
    public sealed virtual void ListActions(ViewModelReferenceType vmref, string nameofNesting, IElementCollection listToFillWithTuples, SubscriberPair subscriberBlock);
    public static void Installnet45Part(IViewModelReferenceService_net45Part x);
    public sealed virtual IElement JSonToObjects(ViewModelReferenceType vmref, IClass resultJsonRootType, string jsondata);
    public sealed virtual IElement XmlToObjects(ViewModelReferenceType vmref, IClass resultXmlRootType, string xmldata);
    private void CheckNet45Part(string methname);
    public sealed virtual string RestGet(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string RestDelete(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual Byte[] RestDownload(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string RestPost(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string RestPut(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string RestPatch(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string SoapCall(ViewModelReferenceType vmref, string url, string action, string actionnamespace, string user, string pwd, string nestingWithParams, bool passwordDigest, string SOAPAction);
    public sealed virtual string ViewModelAsJSon(ViewModelReferenceType vmref, string viewModelName, IObject root);
    public sealed virtual string RemoteTurnkeyConnectGetSessionKey(ViewModelReferenceType vmref, string url, string user, string pwd);
    public sealed virtual string RemoteTurnkeyExecuteAction(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string actionName);
    public sealed virtual string RemoteTurnkeyGetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public sealed virtual Byte[] RemoteTurnkeyGetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public sealed virtual string RemoteTurnkeySetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, string value);
    public sealed virtual string RemoteTurnkeySetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, Byte[] value);
    public sealed virtual string RemoteTurnkeyCloseSession(ViewModelReferenceType vmref, string sessionKey);
    public sealed virtual string GetGridAsTabSepData(ViewModelReferenceType vmref, string columnName);
    public static bool IsInstalled(IEcoServiceProvider sp);
    public static void InstallAsEALMethod(IEcoServiceProvider sp);
}
public class Eco.ViewModel.Runtime.ViewModelRTCreator : object {
    private XDocument _xdoc;
    private string _metaChecksumCached;
    private bool _useExtendedUIFunctions;
    private int _MountOffsetX;
    private int _MountOffsetY;
    private bool _cleanedforfree;
    public bool IsCleanedForFree { get; }
    public ViewModelRTCreator(XDocument xdoc);
    public XDocument GetAsXml();
    public static ViewModelRTCreator LoadFromXmlString(string xml);
    public string GetMetaChecksum(Type EcoSpaceType);
    public ViewModelElement GetRootTaggedValues();
    public IModifiableVariableList GetPrePeekOfVariables(IEcoServiceProvider sp);
    public string GetExpressionForAccess();
    public string GetRootClassAsString();
    public ViewModel Iterate(IViewDataCreator aViewDataCreator, IViewUICreator aViewUICreator, string EcoSpaceTypeName, Type EcoSpaceType, EcoSpace EcoSpace, Action`1<ViewModel> InitViewModelAction, IEcoServiceProvider spToUse, bool useExtendedUIFunctions);
    public static void CreateDataAndUI(IViewDataCreator aViewDataCreator, IViewUICreator aViewUICreator, ViewModel vm);
    private static void CreateUIForViewModelClass(IViewUICreator aViewUICreator, ViewModel vm, Int32& columncounter, ViewModelClass viewmodelclass, bool thisIsCallBackPerListViewRow);
    private static void ConsiderGridFor(IViewUICreator aViewUICreator, ViewModel vm, ViewModelClass viewmodelclass);
    private void ParseXml(IViewDataCreator aViewDataCreator, ViewModel vm, IEcoServiceProvider spToUse);
    private bool CheckGlobalReadOnlyMode(IEcoServiceProvider spToUse);
    private void ParseColumnsForViewModelClass(IViewDataCreator aViewDataCreator, ViewModel vm, ViewModelClass viewmodelclass, IEcoServiceProvider spToUse);
    private void CheckMountOtherVM(IViewDataCreator aViewDataCreator, ViewModel vm, IEcoServiceProvider spToUse, XElement col, ViewModelColumn vmc);
    private void SetMountOffsetXY(int xPos, int yPos);
    private void InjectArtificialPlacingContainerStyleAndVisibilityColumns(ViewModelClass viewmodelclass, PlacingContainerRuntime placingContainer);
    private void ParsePlacingContainer(XElement xmlelem, ViewModelClass vmc);
    private void ParsePlacingContainerAndChildren(XElement placingContainerxml, PlacingContainerRuntime placingContainer, ViewModelClass vmc);
    public static string GetAsRuntimeName(string value);
    private static void InitTypeOnVMC(ViewModel vm, IEcoServiceProvider spToUse, ViewModelColumn vmc);
    private void ParseTaggedValues(XElement el, ViewModelElement vme);
    private void CreateEnableExpressionColumnForModalOk(ViewModel vm);
    private void CreateReadOnlyHandleColumns(ViewModelColumn col, IEcoServiceProvider spToUse);
    private IClassifier LookUpClassfierFromNodeWithClass(XElement spanelem, IEcoServiceProvider spToUse);
    public string GetViewModelName();
    public string GetViewModelIdentity();
    public bool GetViewModelRequiresRootObject();
    public string GetViewModelTypeName();
    public bool get_IsCleanedForFree();
    internal void CleanForFree();
    public void IterateAsListViewRow(IViewUICreator aViewUICreator, ViewModelClass viewModelClass);
    public void IterateForInPlacePopup(IViewUICreator aViewUICreator, ViewModelColumn col);
}
public class Eco.ViewModel.Runtime.ViewModelRuntimeInformation : EcoRuntimeInformation {
    public string ViewModelName;
    public int SubscribingToPublishersCount;
}
public enum Eco.ViewModel.Runtime.ViewModelUIComponentType : Enum {
    public int value__;
    public static ViewModelUIComponentType simple;
    public static ViewModelUIComponentType combo;
    public static ViewModelUIComponentType grid;
    public static ViewModelUIComponentType action;
    public static ViewModelUIComponentType gridCol;
}
public class Eco.ViewModel.Runtime.ViewModelValidation : ViewModelElement {
    private ViewModel _vm;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Expression>k__BackingField;
    private string _Message;
    private List`1<string> _Columnsidref;
    private Dictionary`2<string, ViewModelColumn> _ColumnsThatUseThisValidation;
    public ViewModel ViewModel { get; }
    public string Name { get; public set; }
    public string Expression { get; public set; }
    public string Message { get; public set; }
    public Dictionary`2<string, ViewModelColumn> ColumnsThatUseThisValidation { get; }
    internal ViewModelValidation(ViewModel vm);
    public ViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    public void set_Message(string value);
    public string get_Message();
    internal void AddColumnIdRef(string p);
    internal void CheckAndHookUpColumn(ViewModelColumn vmc);
    public Dictionary`2<string, ViewModelColumn> get_ColumnsThatUseThisValidation();
    public bool Check();
    internal void CleanForFree();
    internal void OwnerChangedByMount(ViewModel vm);
}
public class Eco.ViewModel.Runtime.ViewModelVariable : ViewModelElement {
    private ViewModel _vm;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UserData>k__BackingField;
    public ViewModel ViewModel { get; }
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string InitialValue { get; public set; }
    public string UserData { get; public set; }
    internal ViewModelVariable(ViewModel vm);
    public ViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_InitialValue(string value);
    [CompilerGeneratedAttribute]
public string get_InitialValue();
    [CompilerGeneratedAttribute]
public string get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(string value);
    internal void OwnerChangedByMount(ViewModel vm);
}
public class Eco.ViewModel.Runtime.ViewModelXmlSeekerBasedOnType : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxFetch>k__BackingField;
    public int MaxFetch { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxFetch();
    [CompilerGeneratedAttribute]
public void set_MaxFetch(int value);
    public string GetAutoFormSeekerForTypeReturnName(DefaultEcoSpace es, IClass iclass, string vmname);
    public string GetAutoFormSeekerForTypeReturnName(DefaultEcoSpace es, IClass iclass, string vmname, int maxMembersToSearch);
    public StringBuilder GetSeekerForListOfColumns(IEcoServiceProvider sp, string vmname, IClass iclass, string theidforvm, IEnumerable`1<GeneratedSeekerColumn> gsclist);
    public StringBuilder GetSeekerForListOfColumns(IEcoServiceProvider sp, string vmname, IClass iclass, string theidforvm, IEnumerable`1<GeneratedSeekerColumn> gsclist, bool allowAddRemove);
    private StringBuilder FigureOutSearchFields(IEcoServiceProvider sp, IClass iclass, List`1<string> searchFields, List`1<string> searchFieldsType, List`1<string> searchFieldsColName, Dictionary`2<GeneratedSeekerColumn, string> postfixOnColumnExpression, IEnumerable`1<GeneratedSeekerColumn> gsclist);
    private static string CheckType(Boolean& isSearchable, Type typenotnull, IEcoTypeSystem typeSys);
}
public class Eco.ViewModel.Runtime.ViewModelXmlSimplifiedBasedOnType : object {
    private int _row;
    private bool _readOnly;
    public string CreateAndReturnName(IClass theclass, DefaultEcoSpace es, string vmname);
    public string CreateAndReturnName(IClass theclass, DefaultEcoSpace es, string vmname, bool readOnlyView, int limitAttributes);
    public string CreateAndReturnNameForStates(IClass theclass, DefaultEcoSpace es, string suggestedname);
    public string CreateAndReturnNameForMultiLink(IClass theclass, DefaultEcoSpace es, string multilinkname, string vmname);
    private void AddNestingToXmlString(StringBuilder thexml, string theNestingName, IClass classfornesting, List`1<XElement> columnelements);
    private void GetColumnToTargetNesting(IAssociationEnd assend, string nestingname, List`1<XElement> elements);
    private void GetMultiAssociationEndButtonXml(IAssociationEnd x, List`1<XElement> elements);
    private void GetSingleAssociationEndViewModelXml(IAssociationEnd x, List`1<XElement> elements, bool addNesting, StringBuilder theNestingsForCombos, bool addactions, bool canhavestyle);
    private void GetFeatureAsViewModelXml(IAttribute x, List`1<XElement> elements, List`1<XElement> nestingsForEnumPickersNullIfNotWanted, bool skipStateButton, bool canhavestyle);
    private XElement GetColumnXElement(IFeature x, bool canhavestyle);
    private XElement GetColumnXElement(string name, string id, bool rw);
    private XElement GetColumnXElement(string name, string id, bool rw, IFeature feat, bool canhavestyle);
}
public class Eco.ViewModel.Runtime.ViewModelXMLUtils : object {
    public static XDocument GetDataAsXml_DoNotExecuteAnyActions(EcoSpace ecospace, IEcoObject io, IExternalVariableList vars, string vmname, Dictionary`2& metalabels);
    public static XDocument GetDataAsXml(EcoSpace ecospace, IEcoObject io, IExternalVariableList vars, string vmname, Dictionary`2& metalabels);
    internal static XDocument GetDataAsXmlInternal(EcoSpace ecospace, IEcoObject io, IExternalVariableList vars, string vmname, Dictionary`2& metalabels, bool doActions);
    public static void UpdateViewModelFromDataAsXml(EcoSpace ecospace, IEcoObject io, IExternalVariableList vars, string vmname, XDocument xData);
    private static void TryAndUpdateOneAttribute(VMClass vmclass, XElement xe);
    public static void FillDocumentMeta(string namePrefix, ViewModelClass vmclass, Dictionary`2<string, string> metalabels);
    public static string RemoveInvalidXmlChars(string text);
    private static void FillDocument(string namePrefix, XElement xElement, VMClass vmclass, bool doActions);
}
public abstract class Eco.ViewModel.Runtime.VMAbstractMember : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OfflineValueSet>k__BackingField;
    private object _offlineValue;
    private string _expression;
    private VMClass _owner;
    private string _name;
    private EventSubscriber _subs;
    private bool _outofdate;
    private bool _currentlyDeriving;
    protected bool _isOwnValueSetter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler OnInvalidate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    private bool _isDisposed;
    protected bool OfflineValueSet { get; protected set; }
    public bool IsOffline { get; }
    protected object OfflineValue { get; protected set; }
    public bool HasOfflineValue { get; }
    public string Expression { get; protected set; }
    public VMClass Owner { get; internal set; }
    protected EventSubscriber Subs { get; }
    public VMMemberDescriptor MemberDescriptor { get; }
    public string Name { get; protected set; }
    public ViewModelColumn ViewModelColumn { get; }
    public bool IsAdmin { get; }
    protected VMAbstractMember(VMClass owner, string name, string expression);
    [CompilerGeneratedAttribute]
protected void set_OfflineValueSet(bool value);
    [CompilerGeneratedAttribute]
protected bool get_OfflineValueSet();
    public bool get_IsOffline();
    internal void SetInitialOfflineValue(object o);
    protected object get_OfflineValue();
    protected void set_OfflineValue(object value);
    public bool get_HasOfflineValue();
    internal void TurnIntoOnline(VMClass owner, string name, string expression);
    public string get_Expression();
    protected void set_Expression(string value);
    public VMClass get_Owner();
    internal void set_Owner(VMClass value);
    protected EventSubscriber get_Subs();
    public VMMemberDescriptor get_MemberDescriptor();
    protected void InitSubscription();
    private void EnsureSubscriber();
    private void subs_Receive(object sender, EventArgs e);
    internal void MarkOutOfDate();
    protected void CheckOnInvalidate();
    [CompilerGeneratedAttribute]
public void add_OnInvalidate(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnInvalidate(EventHandler value);
    public string get_Name();
    protected void set_Name(string value);
    protected abstract virtual void HandleDeriveAndSubscribe();
    internal void EnsureUptoDate();
    protected void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public ViewModelColumn get_ViewModelColumn();
    public bool get_IsAdmin();
    internal abstract virtual void PSExpressionRefresh();
    public virtual void Dispose();
    public sealed virtual void CleanForFree();
    public virtual void CleanForFree(bool softAsWhenLeafIsRemovedFromList);
    public sealed virtual void PruneResources(bool LowMemoryCondition);
    public sealed virtual EcoRuntimeInformation GetRuntimeInformation(IExecutionAndDebug owner, DebugSettingsStack settings, int depth);
    [CompilerGeneratedAttribute]
private void <MarkOutOfDate>b__35_0();
}
public class Eco.ViewModel.Runtime.VMAbstractMemberRuntimeInformation : EcoRuntimeInformation {
    public string Membername;
    public string ViewModelColumn;
}
[DefaultMemberAttribute("Item")]
public class Eco.ViewModel.Runtime.VMClass : object {
    private Dictionary`2<string, VMAbstractMember> _memberDictionary;
    private IEcoServiceProvider _sp;
    private IElement _content;
    private IExternalVariableList _variables;
    private VMClass _ownedBy;
    private bool _isCleaned;
    private VMClassDescriptor _vMClassDescriptor;
    private bool _offline;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Tag>k__BackingField;
    private Dictionary`2<string, string> _Baggage;
    private string _offlineExternalId;
    public static string ThisAsExternalId_nameOf;
    public static string GetvCurrentMember_nameOf;
    public static string GetvCurrentBoolValue_nameOf;
    public static string GetvCurrentListMember_nameOf;
    public static string GetvCurrent_nameOf;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    private Dictionary`2<string, VMClass> _focusDictionary;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UseDisplayQueueDrivenAutoPopulate>k__BackingField;
    private HashSet`1<VMAbstractMember> _invalidMembers;
    private HashSet`1<VMClass> _invalidChildVMClasses;
    private bool _ViewModelCallbackEventsHookedupDone;
    public object Tag { get; public set; }
    public Dictionary`2<string, string> Baggage { get; }
    public Dictionary`2<string, VMAbstractMember> AsDictionary { get; }
    public string FirstAttribute_ToUseAsPresentationInComboBoxes { get; }
    public VMNativeTypeAttribute FirstAttribute_Member { get; }
    public VMAbstractMember Item { get; }
    public VMClassDescriptor VMClassDescriptor { get; }
    public IEcoServiceProvider Sp { get; }
    public bool IsOffline { get; }
    public string ThisAsExternalId { get; public set; }
    public VMClass OwnedBy { get; }
    public IElement Content { get; public set; }
    public VMAbstractMember RootVMMember { get; }
    public IExternalVariableList Variables { get; }
    public bool IsCurrent { get; public set; }
    public ViewModelClass ViewModelClass { get; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    public IElement Element { get; }
    internal bool UseDisplayQueueDrivenAutoPopulate { get; internal set; }
    public bool IsCleanedForDelete { get; }
    [PreserveAttribute("True", "True")]
public VMClass(VMClassDescriptor vMClassDescriptor, IEcoServiceProvider sp, VMClass ownedby, IElement content, IExternalVariableList variables);
    [PreserveAttribute("True", "True")]
public VMClass(VMClassDescriptor vMClassDescriptor, IEcoServiceProvider sp, VMClass ownedby, IElement content, IExternalVariableList variables, bool useDisplayQueueDrivenAutoPopulate);
    private static VMClass();
    public void UpdateNameOfModalOkEnableExpression(string exp);
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    public Dictionary`2<string, string> get_Baggage();
    public Dictionary`2<string, VMAbstractMember> get_AsDictionary();
    public VMNativeTypeAttribute GetAttribute(string name);
    public VMSingleAssociation GetSingleAssociation(string name);
    public VMManyAssociation GetManyAssociation(string name);
    public string get_FirstAttribute_ToUseAsPresentationInComboBoxes();
    public VMNativeTypeAttribute get_FirstAttribute_Member();
    public VMAbstractMember get_Item(string member);
    public object Value(string member);
    public VMClassDescriptor get_VMClassDescriptor();
    public bool TryGetValue(string name, VMAbstractMember& member);
    protected object GetMemberOfflineAware(string memberName, Type vMMemberType);
    protected object GetMemberOfflineAware(string memberName, Type vMMemberType, object initialValue);
    private void InitVMClassFromDescriptor();
    public IEcoServiceProvider get_Sp();
    public bool get_IsOffline();
    public string get_ThisAsExternalId();
    public void set_ThisAsExternalId(string value);
    public VMClass get_OwnedBy();
    public IElement get_Content();
    public void set_Content(IElement value);
    public VMAbstractMember get_RootVMMember();
    public void SetContentEvenIfThisIsNotRoot(IElement content);
    protected void SetEcoSpace(string viewmodelName, EcoSpace es, GetVMClassTypeDelegate creator);
    private void UpdateContent(IElement value, bool skipCheckOfBeingRoot);
    public IExternalVariableList get_Variables();
    public VMAbstractMember GetvCurrentMember(string vmcName, string memberName);
    public bool GetvCurrentBoolValue(string vmcName, string memberName);
    public VMManyAssociation GetvCurrentListMember(string vmcName, string listMemberName);
    public VMClass GetvCurrent(string vmcname);
    public VMClass GetvCurrent(ViewModelClass vmc);
    public VMClass GetvCurrentVMClassFromViewModelClass(ViewModelClass vmc);
    internal void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void SetFocus(string vmClassName, VMClass value);
    private void EnsureFocusDictionary();
    protected VMClass GetFocus(string vmClassName);
    public void Update_vCurrent_VariableToThis();
    public void set_IsCurrent(bool value);
    public bool get_IsCurrent();
    public void Update_vCurrent_VariableToThis(bool doDownStreamPropagation);
    public void ExecuteNamedAction(string name);
    public ViewModelClass get_ViewModelClass();
    public bool CanExecuteNamedAction(string name, bool updatevCurrentBeforeCheck);
    public bool GetReadOnly(string name, bool updatevCurrentBeforeCheck);
    public bool GetReadOnly(ViewModelColumn vcol, bool updatevCurrentBeforeCheck);
    public bool GetVisible(string name, bool updatevCurrentBeforeCheck);
    public bool GetVisible(ViewModelColumn vcol, bool updatevCurrentBeforeCheck);
    private VMClass GetStatusVM();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string columnName);
    private void AppendValidationErrorsToString(ViewModelColumn vcol, String& result);
    public sealed virtual IElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_UseDisplayQueueDrivenAutoPopulate(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseDisplayQueueDrivenAutoPopulate();
    internal void MaintainListOfOutOfDateMembers(VMAbstractMember member);
    internal void MaintainListOfOutOfDateMembersRemove(VMAbstractMember member);
    private void MaintainListOfChildVMClassesThatHasDirtyMembers(VMClass vMClass);
    internal void MaintainListOfChildVMClassesThatHasDirtyMembersRemove(VMClass vMClass);
    public bool HasInvalidatedMembers();
    public void EnsureMembersAreUpToDate(Int32& leftdirty);
    internal void MarkAsOffline();
    internal void InjectDescriptor(VMClassDescriptor vMClassDescriptor);
    internal void EnsureViewModelCallBackEventsHookedup();
    private void ViewModel_OnGetGridDataAsTabSepDataForRootColumn(object sender, OnGetGridDataAsTabSepDataForRootColumnEventArgs e);
    private void ViewModel_OnPSExpressionRefresh(object sender, EventArgs e);
    public sealed virtual void Dispose();
    public void CleanForFree(bool softAsWhenLeafIsRemovedFromList);
    public bool get_IsCleanedForDelete();
    public void IfvCurrentInContextNullOutvCurrent();
    public bool IfvCurrentInContext();
    [CompilerGeneratedAttribute]
private void <EnsureMembersAreUpToDate>b__109_0();
}
public class Eco.ViewModel.Runtime.VMClassDescriptor : Dictionary`2<string, VMMemberDescriptor> {
    private GetVMClassTypeDelegate _creator;
    private string _name;
    private ViewModelClass _viewModelClass;
    public string Name { get; }
    public ViewModelClass ViewModelClass { get; internal set; }
    public VMClassDescriptor(string name, GetVMClassTypeDelegate creator);
    public string get_Name();
    public void AddManyAssociation(string name, string expression, NullRowMode nullrowmode, VMClassDescriptor targetDescriptorForAssociation);
    public void AddAttribute_AsExternalId(string name, string expression, IClassifier iclassifier, bool allownull, bool isObjectRef);
    public void AddAttribute_ComboboxPresentation(string name, string expression, IClassifier iclassifier, bool allownull);
    public void AddAttribute(string name, string expression, bool readOnly, IClassifier iclassifier, bool allownull);
    public void AddAction(string name);
    public void AddSingleAssociation(string name, string expression, VMClassDescriptor targetDescriptorForAssociation);
    public VMClass CreateInstance(VMClass owner, IElement content);
    public VMClass CreateInstance(IEcoServiceProvider sp, IEcoObject iEcoObject, IExternalVariableList iExternalVariableList);
    public VMClass CreateInstance(IEcoServiceProvider sp, IEcoObject iEcoObject, IExternalVariableList iExternalVariableList, bool useDisplayQueueDrivenAutoPopulate);
    internal VMManyAssociation CreateInstanceOfVMManyAssociation(VMClass vMClass, string name, string expression, NullRowMode nullRowMode);
    public sealed virtual void Dispose();
    internal void set_ViewModelClass(ViewModelClass value);
    public ViewModelClass get_ViewModelClass();
}
internal class Eco.ViewModel.Runtime.VMClassFromViewModelRTCreator : object {
    private ViewModel _vm;
    private Dictionary`2<string, VMClassDescriptor> _vMClassDescriptorDict;
    private GetVMClassTypeDelegate _creator;
    private bool _didValidationsAlready;
    internal VMClassDescriptor RootVMClassDescriptor { get; }
    internal VMClassDescriptor StatusVMClassDescriptor { get; }
    internal VMClassDescriptor ValidationsVMClassDescriptor { get; }
    internal VMClassDescriptor VariablesVMClassDescriptor { get; }
    public ViewModel ViewModel { get; }
    internal VMClassFromViewModelRTCreator(GetVMClassTypeDelegate creator);
    private sealed virtual override bool Eco.ViewModel.Runtime.IViewDataCreator.GetIsPreview();
    private sealed virtual override RootedHandle Eco.ViewModel.Runtime.IViewDataCreator.CreateHandle(ViewModel vm, string name);
    private void AddvCurrentAndvSelectedAttributes(VMClassDescriptor vMClassDescriptor, bool skipSelected);
    private sealed virtual override void Eco.ViewModel.Runtime.IViewDataCreator.AddViewModelColumn(ViewModelClass vclass, ViewModelColumn vcol);
    private sealed virtual override void Eco.ViewModel.Runtime.IViewDataCreator.AddViewModelAction(ViewModelClass vclass, ViewModelColumn vcol);
    private sealed virtual override void Eco.ViewModel.Runtime.IViewDataCreator.SetExpressionOnHandle(string exp, ViewModelClass vclass);
    private sealed virtual override void Eco.ViewModel.Runtime.IViewDataCreator.ConnectMasterDetail(ViewModelClass vclassMaster, ViewModelClass vclassDetail);
    internal VMClassDescriptor get_RootVMClassDescriptor();
    internal VMClassDescriptor get_StatusVMClassDescriptor();
    internal VMClassDescriptor get_ValidationsVMClassDescriptor();
    internal VMClassDescriptor get_VariablesVMClassDescriptor();
    internal IExternalVariableList GetIExternalVariableList();
    public ViewModel get_ViewModel();
}
[DefaultMemberAttribute("Item")]
public class Eco.ViewModel.Runtime.VMManyAssociation : VMAbstractMember {
    private NullRowMode _nullRowMode;
    private VMClassDescriptor _descriptorofitems;
    protected Dictionary`2<IElement, VMClass> m_AllElementDictionary;
    protected List`1<IElement> m_AllElementOrder;
    protected List`1<VMClass> m_ItemList;
    protected IElement valueForNullRow;
    private VMClass _offlineCurrent;
    private int _reentrycheckcursor;
    private IElement _element;
    internal string eNotSupportedMessage;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public VMClass Item { get; }
    public int Count { get; }
    public VMClass vCurrent { get; public set; }
    public VMClassDescriptor Descriptorofitems { get; }
    public IElement Element { get; }
    public List`1<IElement> Elements { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public VMManyAssociation(VMClass owner, string name, string expression, NullRowMode nullRowMode, VMClassDescriptor descriptorofitems);
    internal void TurnIntoOnline(VMClass owner, string name, string expression, NullRowMode nullRowMode, VMClassDescriptor descriptorofitems);
    public VMClass get_Item(int index);
    public sealed virtual int get_Count();
    public VMClass get_vCurrent();
    public void set_vCurrent(VMClass value);
    public virtual void CleanForFree(bool softAsWhenLeafIsRemovedFromList);
    public VMClassDescriptor get_Descriptorofitems();
    private void UpdateList(IElement element);
    private void SignalCollectionChanged(VMClass vmc, NotifyCollectionChangedAction action, int newpos, int oldpos);
    private void InternalAddElement(Dictionary`2<IElement, VMClass> oldDictionary, IElement el);
    public IElement get_Element();
    protected virtual void HandleDeriveAndSubscribe();
    internal virtual void PSExpressionRefresh();
    public List`1<IElement> get_Elements();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual string ToString();
    public string GetAsTabSeparatedData();
    private string DoTabSep(VMClass row);
    public VMClass LookUpCorrespondingVMClass(IEcoObject ieo);
}
[PreserveAttribute("True", "True")]
public class Eco.ViewModel.Runtime.VMManyAssociation`1 : VMManyAssociation {
    public bool IsReadOnly { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    [PreserveAttribute("True", "True")]
public VMManyAssociation`1(VMClass owner, string name, string expression, NullRowMode nullRowMode, VMClassDescriptor descriptorofitems);
    public sealed virtual void Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
}
public class Eco.ViewModel.Runtime.VMManyAssociationFAKE : VMManyAssociation {
    private List`1<VMClass> fakeList;
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void HandleDeriveAndSubscribe();
    internal virtual void PSExpressionRefresh();
}
public class Eco.ViewModel.Runtime.VMMemberDescriptor : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullRowMode <NullRowModeIfManyAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VMMemberKind <VMMemberKind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VMClassDescriptor <TargetDescriptorForAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReadOnly>k__BackingField;
    private IClassifier _memberType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NameOfSupportedAttributeWhenAsExternalId>k__BackingField;
    public string Name { get; public set; }
    public string Expression { get; public set; }
    public NullRowMode NullRowModeIfManyAssociation { get; public set; }
    public VMMemberKind VMMemberKind { get; public set; }
    public VMClassDescriptor TargetDescriptorForAssociation { get; public set; }
    public bool ReadOnly { get; public set; }
    public IClassifier MemberType { get; public set; }
    public bool AllowNull { get; public set; }
    public string NameOfSupportedAttributeWhenAsExternalId { get; public set; }
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_NullRowModeIfManyAssociation(NullRowMode value);
    [CompilerGeneratedAttribute]
public NullRowMode get_NullRowModeIfManyAssociation();
    [CompilerGeneratedAttribute]
public void set_VMMemberKind(VMMemberKind value);
    [CompilerGeneratedAttribute]
public VMMemberKind get_VMMemberKind();
    [CompilerGeneratedAttribute]
public void set_TargetDescriptorForAssociation(VMClassDescriptor value);
    [CompilerGeneratedAttribute]
public VMClassDescriptor get_TargetDescriptorForAssociation();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    public void set_MemberType(IClassifier value);
    public IClassifier get_MemberType();
    [CompilerGeneratedAttribute]
public void set_AllowNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
public string get_NameOfSupportedAttributeWhenAsExternalId();
    [CompilerGeneratedAttribute]
public void set_NameOfSupportedAttributeWhenAsExternalId(string value);
    public sealed virtual void Dispose();
}
public enum Eco.ViewModel.Runtime.VMMemberKind : Enum {
    public int value__;
    public static VMMemberKind Attribute;
    public static VMMemberKind SingleAssociation;
    public static VMMemberKind ManyAssociation;
    public static VMMemberKind Action;
    public static VMMemberKind Attribute_AsExternalId;
    public static VMMemberKind vCurrent;
    public static VMMemberKind vSelected;
    public static VMMemberKind ComboboxPresentation;
}
public class Eco.ViewModel.Runtime.VMNativeTypeAttribute : VMNativeTypeBase {
    public VMManyAssociation PickList { get; }
    public VMNativeTypeAttribute Column_AsExternalId { get; }
    public VMNativeTypeAttribute(VMClass owner, string name, string expression, bool readOnly, IClassifier classifierOnAttribute);
    protected virtual void NotifyChange(IElement orgvalue, IElement currresult);
    internal virtual void PSExpressionRefresh();
    public virtual string ToString();
    public VMManyAssociation get_PickList();
    public VMNativeTypeAttribute get_Column_AsExternalId();
}
public abstract class Eco.ViewModel.Runtime.VMNativeTypeBase : VMAbstractMember {
    private bool _readOnly;
    private IClassifier _classifierOnAttribute;
    private IElement _result;
    private bool _signaledOnce;
    private object _resultLastTime;
    public IClassifier ClassifierOnAttribute { get; }
    public IElement IElement { get; }
    public string ValueAsString { get; public set; }
    public Nullable`1<bool> ValueAsBool { get; public set; }
    public Nullable`1<int> ValueAsInt { get; public set; }
    public Nullable`1<double> ValueAsDouble { get; public set; }
    public Nullable`1<DateTime> ValueAsDateTime { get; public set; }
    public object Value { get; public set; }
    public bool AllowNull { get; }
    public bool Mutable { get; }
    public VMNativeTypeBase(VMClass owner, string name, string expression, bool readOnly, IClassifier classifierOnAttribute);
    internal void TurnIntoOnline(VMClass owner, string name, string expression, bool readOnly, IClassifier classifierOnAttribute);
    public IClassifier get_ClassifierOnAttribute();
    public IElement get_IElement();
    public string get_ValueAsString();
    public void set_ValueAsString(string value);
    public Nullable`1<bool> get_ValueAsBool();
    public void set_ValueAsBool(Nullable`1<bool> value);
    public Nullable`1<int> get_ValueAsInt();
    public void set_ValueAsInt(Nullable`1<int> value);
    public Nullable`1<double> get_ValueAsDouble();
    public void set_ValueAsDouble(Nullable`1<double> value);
    public Nullable`1<DateTime> get_ValueAsDateTime();
    public void set_ValueAsDateTime(Nullable`1<DateTime> value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_AllowNull();
    public bool get_Mutable();
    protected virtual void HandleDeriveAndSubscribe();
    protected abstract virtual void NotifyChange(IElement orgvalue, IElement _result);
    public string GetValueForTabSep();
}
public abstract class Eco.ViewModel.Runtime.VMNativeTypeCollection : VMNativeTypeBase {
    public VMNativeTypeCollection(VMClass owner, string name, string expression, IClassifier classifierOnAttribute);
}
[PreserveAttribute("True", "True")]
public class Eco.ViewModel.Runtime.VMNativeTypeCollection`1 : VMNativeTypeCollection {
    private Dictionary`2<IElement, int> _olddict;
    private ObservableCollection`1<T> _typedList;
    public ObservableCollection`1<T> TypedList { get; }
    [PreserveAttribute("True", "True")]
public VMNativeTypeCollection`1(VMClass owner, string name, string expression, IClassifier classifierOnAttribute);
    protected virtual void NotifyChange(IElement orgvalue, IElement result);
    private void OnCollectionChanged(IElement orgcollection, IElement iElement);
    public ObservableCollection`1<T> get_TypedList();
    internal virtual void PSExpressionRefresh();
    public virtual void CleanForFree(bool softAsWhenLeafIsRemovedFromList);
}
public class Eco.ViewModel.Runtime.VMSingleAssociation : VMAbstractMember {
    private VMClassDescriptor _descriptorofitem;
    private bool _readOnly;
    private VMClass _vMClassResult;
    private IElement _result;
    private object _lastCommunicatedComparableResult;
    public VMClassDescriptor DescriptorOfItem { get; }
    public IElement IElement { get; }
    public VMClass Value { get; public set; }
    public VMSingleAssociation(VMClass owner, string name, string expression, bool readOnly, VMClassDescriptor descriptorofitem);
    internal void TurnIntoOnline(VMClass owner, string name, string expression, bool readOnly, VMClassDescriptor descriptorofitem);
    public VMClassDescriptor get_DescriptorOfItem();
    public IElement get_IElement();
    public VMClass get_Value();
    public void set_Value(VMClass value);
    protected virtual void HandleDeriveAndSubscribe();
    internal virtual void PSExpressionRefresh();
    public virtual string ToString();
}
public class MDriven.MDrivenServer.CommonServerSideJobActions : object {
    private string _tagForLogging;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<KPICreateArgs> OnKPICreate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<LogArgs> OnLog;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EmailArgs> OnSendEmail;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RealtimeSubscribeArgs> OnRealtimeSubscribe;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RealtimeTriggerArgs> OnRealtimeTrigger;
    public static string kNameOfServerSideViewModelForSysAsyncTicketClass;
    public static string kNameOfServerSideViewModelForSysAsyncTicketClassTicketDelete;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnTimerArgs> OnTimer;
    public CommonServerSideJobActions(string tagForLogging);
    [CompilerGeneratedAttribute]
public void add_OnKPICreate(EventHandler`1<KPICreateArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnKPICreate(EventHandler`1<KPICreateArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnLog(EventHandler`1<LogArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnLog(EventHandler`1<LogArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnSendEmail(EventHandler`1<EmailArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnSendEmail(EventHandler`1<EmailArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnRealtimeSubscribe(EventHandler`1<RealtimeSubscribeArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnRealtimeSubscribe(EventHandler`1<RealtimeSubscribeArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnRealtimeTrigger(EventHandler`1<RealtimeTriggerArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnRealtimeTrigger(EventHandler`1<RealtimeTriggerArgs> value);
    private string GetTagForLogging();
    public void Logging(string log);
    public void Logging(Exception exc);
    public void Logging(string log, Exception exc);
    public int CommonServerSideJob_Run(Int32& touchsummary, IModifiableVariableList appModelVars, DefaultEcoSpace runnerspace, string psocl, int maxanswers, string viewname, DatabaseIdentity dbid, List`1<string> listOfActualRunningAsyncTicket, List`1<string> listOfActualRunningNormals);
    private void RunOneSysAsyncTicket(Int32& touchsummary, IModifiableVariableList appModelVars, DefaultEcoSpace runnerspace, DatabaseIdentity dbid, IObjectInstance theobj, List`1<string> listOfActualRunningAsyncTicket);
    [CompilerGeneratedAttribute]
public void add_OnTimer(EventHandler`1<OnTimerArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnTimer(EventHandler`1<OnTimerArgs> value);
    private void Timing(string label, bool startNotStop);
    private void TreatAsAsyncTicketMethodRun(DefaultEcoSpace runnerspace, String& error, string classid, string rootid, String[] classAndMethod);
    public void RunOneViewObjectCombination(Int32& touchsummary, IModifiableVariableList appModelVars, DefaultEcoSpace runnerspace, string viewname, DatabaseIdentity dbid, IEcoObject io);
    public void ExecuteAllRootClassActionsOnViewModel_OnFailWriteToModel(DefaultEcoSpace rmes, VMClass vmc, DatabaseIdentity dbid, Int32& touchsummary);
    public void ExecuteAllRootClassActionsOnViewModel_OnFailWriteToModel_SkipSaving(DefaultEcoSpace rmes, VMClass vmc, DatabaseIdentity dbid, Int32& touchsummary);
    private void ExecuteAllRootClassActionsOnViewModel_OnFailWriteToModel_Internal(DefaultEcoSpace rmes, VMClass vmc, DatabaseIdentity dbid, Int32& touchsummary, bool saveAfterExecute);
    private void ExecuteOnErrorActionIfFound_NeverFail(DefaultEcoSpace rmes, VMClass vmc, string errorinfo, Exception exceptioninfoforcaller, bool saveAfterExecute);
    private void ExecuteAllRootClassActionsOnViewModel(DefaultEcoSpace rmes, VMClass vmc, DatabaseIdentity dbid, Int32& touchsummary, String& errorinfoforcaller, Exception& exceptioninfoforcaller, bool saveAfterExecute);
    private void DoRealtimeTriggerEvent(VMClass vmc);
    private void DoRealtimeSubscribeToEvent(VMClass vmc);
    private void DoSQLImportAction(VMClass vmc);
    private DbConnection GetExtDBConnection(bool useODBC);
    private void DoSQLExportAction(VMClass vmc, DatabaseIdentity dbid, String& info);
    private void HandleSQLExportForThisData(string connectionstring, VMManyAssociation datanesting, ViewModelColumn vc, bool useODBC);
    private DbCommand GetExtDBCommand(string query, DbConnection connection, DbTransaction trans);
    private void CheckAndPopulateSqlParameters(DbCommand command, VMClass row, List`1<string> parameters);
    private void DoKPIAction(VMClass vmc, DatabaseIdentity dbid, String& info);
    private void RecordKPIValue(string kpisys, string kpigroup, string kpiname, int value, DateTime time);
    private void DoSaveFileAction(VMClass vmc, DatabaseIdentity dbid, String& info, string postfix);
    private static void DoSaveFileActionWithFileData(string filename, string path, object filedata);
    private void DoSaveFileActionVMAsXML(VMClass vmc, string filename, string path, string xslttext);
    private void DoEmailAction(VMClass vmc, DatabaseIdentity dbid, String& info);
    public static void MergeVariablesBasedOnNameFromFirstToSecond(IModifiableVariableList sourcelist, IExternalVariableList targetlist);
    private void ViewModel_OnSelfVMSearch(object sender, EventArgs e);
    private void DoSeekAction(ViewModel sender);
}
public enum MDriven.MDrivenServer.DatabaseIdentity : Enum {
    public int value__;
    public static DatabaseIdentity Unknown;
    public static DatabaseIdentity Admin;
    public static DatabaseIdentity A0;
    public static DatabaseIdentity A1;
    public static DatabaseIdentity A2;
}
public class MDriven.MDrivenServer.EmailArgs : EventArgs {
    public EmailSettings EmailSettings;
}
public class MDriven.MDrivenServer.EmailSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <HostPort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HostPwd>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HostSsl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FromToUseAsLogin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FromPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Bcc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Cc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ToPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VMManyAssociation <Attachments>k__BackingField;
    public string Host { get; public set; }
    public int HostPort { get; public set; }
    public string HostPwd { get; public set; }
    public bool HostSsl { get; public set; }
    public string From { get; public set; }
    public string FromToUseAsLogin { get; public set; }
    public string FromPresentation { get; public set; }
    public string To { get; public set; }
    public string Bcc { get; public set; }
    public string Cc { get; public set; }
    public string ToPresentation { get; public set; }
    public string Subject { get; public set; }
    public string Body { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public VMManyAssociation Attachments { get; internal set; }
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_HostPort(int value);
    [CompilerGeneratedAttribute]
public int get_HostPort();
    [CompilerGeneratedAttribute]
public void set_HostPwd(string value);
    [CompilerGeneratedAttribute]
public string get_HostPwd();
    [CompilerGeneratedAttribute]
public void set_HostSsl(bool value);
    [CompilerGeneratedAttribute]
public bool get_HostSsl();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_FromToUseAsLogin(string value);
    [CompilerGeneratedAttribute]
public string get_FromToUseAsLogin();
    [CompilerGeneratedAttribute]
public void set_FromPresentation(string value);
    [CompilerGeneratedAttribute]
public string get_FromPresentation();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_Bcc(string value);
    [CompilerGeneratedAttribute]
public string get_Bcc();
    [CompilerGeneratedAttribute]
public void set_Cc(string value);
    [CompilerGeneratedAttribute]
public string get_Cc();
    [CompilerGeneratedAttribute]
public void set_ToPresentation(string value);
    [CompilerGeneratedAttribute]
public string get_ToPresentation();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public VMManyAssociation get_Attachments();
    [CompilerGeneratedAttribute]
internal void set_Attachments(VMManyAssociation value);
}
public class MDriven.MDrivenServer.KPICreateArgs : EventArgs {
    public DateTime Time;
    public int Value;
    public string DatabaseIdentity;
    public string GroupName;
    public string Name;
}
public class MDriven.MDrivenServer.LogArgs : EventArgs {
    public string Log;
    public Exception Exception;
}
public class MDriven.MDrivenServer.RealtimeSubscribeArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RealtimeHub>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EventGuid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EventCookie>k__BackingField;
    public string RealtimeHub { get; internal set; }
    public string EventGuid { get; internal set; }
    public string EventCookie { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_RealtimeHub();
    [CompilerGeneratedAttribute]
internal void set_RealtimeHub(string value);
    [CompilerGeneratedAttribute]
public string get_EventGuid();
    [CompilerGeneratedAttribute]
internal void set_EventGuid(string value);
    [CompilerGeneratedAttribute]
public string get_EventCookie();
    [CompilerGeneratedAttribute]
internal void set_EventCookie(string value);
}
public class MDriven.MDrivenServer.RealtimeTriggerArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EventGuid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EventData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EventRemoveAfterSend>k__BackingField;
    public string EventGuid { get; internal set; }
    public string EventData { get; internal set; }
    public bool EventRemoveAfterSend { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_EventGuid();
    [CompilerGeneratedAttribute]
internal void set_EventGuid(string value);
    [CompilerGeneratedAttribute]
public string get_EventData();
    [CompilerGeneratedAttribute]
internal void set_EventData(string value);
    [CompilerGeneratedAttribute]
public bool get_EventRemoveAfterSend();
    [CompilerGeneratedAttribute]
internal void set_EventRemoveAfterSend(bool value);
}
public class MDriven.Translation.MDrivenUITranslationImpl : object {
    private IEcoServiceProvider _sp;
    private string _DefaultLanguage;
    private bool _initiated;
    private bool _initiatedTypeLevel;
    private bool _initiatedFailed;
    private TranslationMemory _TranslationMemoryReference;
    private static Dictionary`2<string, TranslationMemory> _translationsPerChecksum;
    public string DefaultLanguage { get; }
    public MDrivenUITranslationImpl(IEcoServiceProvider sp);
    private static MDrivenUITranslationImpl();
    public sealed virtual string get_DefaultLanguage();
    public static void Install(IEcoServiceProvider sp);
    public sealed virtual void SetDefaultLanguage(string lang);
    public sealed virtual string Translate(string translatable);
    public sealed virtual string TranslateToLang(string translatable, string lang);
    private string ActualTranslate(string translatable, string lang);
    private bool CorrectlyInitiated();
    private void ResetForReInit();
    private bool LookupExistingTypeLevelTranslation(EcoSpace es);
    private void TypeLevelInit(EcoSpace es);
    public sealed virtual void SpoolMissedTranslations();
    public sealed virtual void ResetCache();
    public sealed virtual DateTime CacheTime();
}
public class MDriven.Translation.TranslationMemory : object {
    private Dictionary`2<string, TranslationPerLanguage> _translationsperlanguage;
    private HashSet`1<string> _missedTranslations;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsStale>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CacheTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UseCheckLanguageMapping>k__BackingField;
    internal HashSet`1<string> MissedTranslations { get; }
    public bool IsStale { get; private set; }
    public DateTime CacheTime { get; internal set; }
    public bool UseCheckLanguageMapping { get; internal set; }
    internal void Add(string key, string value, string language);
    internal string Translate(string translatable, string lang);
    internal void MarkAsStale();
    internal HashSet`1<string> get_MissedTranslations();
    [CompilerGeneratedAttribute]
public bool get_IsStale();
    [CompilerGeneratedAttribute]
private void set_IsStale(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_CacheTime();
    [CompilerGeneratedAttribute]
internal void set_CacheTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_UseCheckLanguageMapping();
    [CompilerGeneratedAttribute]
internal void set_UseCheckLanguageMapping(bool value);
}
public class MDriven.Translation.TranslationPerLanguage : object {
    private string _orginal;
    private Dictionary`2<string, string> _languageDict;
    public TranslationPerLanguage(string orginal);
    internal void Add(string value, string language);
    internal string Translate(string lang);
}
public class System.Collections.Generic.ComparisonComparer`1 : object {
    private Comparison`1<T> _comparison;
    public ComparisonComparer`1(Comparison`1<T> comparison);
    public sealed virtual int Compare(T x, T y);
    public sealed virtual int Compare(object o1, object o2);
}
[ExtensionAttribute]
public static class System.Collections.Generic.ECO_IListOfStringExtender : object {
    [ExtensionAttribute]
public static void AddRange(IList`1<string> list, IList`1<string> range);
}
[ExtensionAttribute]
public static class System.Collections.Generic.SortExtensions : object {
    [ExtensionAttribute]
public static IList`1<T> Sort(IList`1<T> list, Comparison`1<T> comparison);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(IEnumerable`1<T> list, Comparison`1<T> comparison);
}
public class System.Collections.Generic.WECPOFVarsForStoringInSessionState : object {
    public Dictionary`2<string, object> Values;
}
