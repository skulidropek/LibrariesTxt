[DataContractAttribute]
public class AppCompleteGeneric.PortalPushConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PortalSettings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PortalSignatureOfSettings>k__BackingField;
    [DataMemberAttribute]
public string PortalSettings { get; public set; }
    [DataMemberAttribute]
public string PortalSignatureOfSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PortalSettings();
    [CompilerGeneratedAttribute]
public void set_PortalSettings(string value);
    [CompilerGeneratedAttribute]
public string get_PortalSignatureOfSettings();
    [CompilerGeneratedAttribute]
public void set_PortalSignatureOfSettings(string value);
}
[DataContractAttribute]
public class AppCompleteGeneric.ServerSideJobDefinition : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewModelName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SelectOcl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxItemsPerBatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PreEAL>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Blocking>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <CachedAndAutoUpdated>k__BackingField;
    [DataMemberAttribute]
public string ViewModelName { get; public set; }
    [DataMemberAttribute]
public string SelectOcl { get; public set; }
    [DataMemberAttribute]
public int Interval { get; public set; }
    [DataMemberAttribute]
public int MaxItemsPerBatch { get; public set; }
    [DataMemberAttribute]
public string PreEAL { get; public set; }
    [DataMemberAttribute]
public string Variables { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Blocking { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> CachedAndAutoUpdated { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ViewModelName();
    [CompilerGeneratedAttribute]
public void set_ViewModelName(string value);
    [CompilerGeneratedAttribute]
public string get_SelectOcl();
    [CompilerGeneratedAttribute]
public void set_SelectOcl(string value);
    [CompilerGeneratedAttribute]
public int get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(int value);
    [CompilerGeneratedAttribute]
public int get_MaxItemsPerBatch();
    [CompilerGeneratedAttribute]
public void set_MaxItemsPerBatch(int value);
    [CompilerGeneratedAttribute]
public string get_PreEAL();
    [CompilerGeneratedAttribute]
public void set_PreEAL(string value);
    [CompilerGeneratedAttribute]
public string get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Blocking();
    [CompilerGeneratedAttribute]
public void set_Blocking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CachedAndAutoUpdated();
    [CompilerGeneratedAttribute]
public void set_CachedAndAutoUpdated(Nullable`1<bool> value);
}
public class MDriven.Net.Http.ActuallySendArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ActuallySend>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SuggestedMinSecApart>k__BackingField;
    public bool ActuallySend { get; public set; }
    public int SuggestedMinSecApart { get; public set; }
    [CompilerGeneratedAttribute]
public void set_ActuallySend(bool value);
    [CompilerGeneratedAttribute]
public bool get_ActuallySend();
    [CompilerGeneratedAttribute]
public void set_SuggestedMinSecApart(int value);
    [CompilerGeneratedAttribute]
public int get_SuggestedMinSecApart();
}
public class MDriven.Net.Http.GraphAPISupport : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <SysTokenCryptSecret>k__BackingField;
    public static string SysTokenCryptSecret { get; public set; }
    [CompilerGeneratedAttribute]
public static string get_SysTokenCryptSecret();
    [CompilerGeneratedAttribute]
public static void set_SysTokenCryptSecret(string value);
    public static void GetSysToken(IObject sysuserio, string provider, String& accesstoken, String& refreshtoken, DateTime& validuntil);
    public static void UpdateSysToken(IObject sysuserio, string provider, string accesstoken, string refreshtoken);
    public static void SetAccessTokenOnClient(HttpClient client, IObject sysGraphApi);
    public static void GetDecodedAccessAndRefreshTokenOnClient(IObject sysGraphApi, String& accesstoken, String& refreshtoken);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetUsersFromGroup>d__8")]
[DebuggerStepThroughAttribute]
public static Task`1<int> GetUsersFromGroup(HttpClient client, IObject sysGraphApi, string groupid);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetUsersFromGroupInternal>d__9")]
[DebuggerStepThroughAttribute]
private static Task`1<int> GetUsersFromGroupInternal(HttpClient client, IObject sysGraphApi, string groupid, bool isNextPage, string nextpageurl);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetGroups>d__10")]
[DebuggerStepThroughAttribute]
public static Task`1<int> GetGroups(HttpClient client, IObject sysGraphApi, string userprincipal);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetGroupsInternal>d__11")]
[DebuggerStepThroughAttribute]
private static Task`1<int> GetGroupsInternal(HttpClient client, IObject sysGraphApi, string userprincipal, bool isNextPage, string nextpageurl);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetUsers>d__12")]
[DebuggerStepThroughAttribute]
public static Task`1<int> GetUsers(HttpClient client, IObject sysGraphApi, string startingWith);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetUsersInternal>d__13")]
[DebuggerStepThroughAttribute]
private static Task`1<int> GetUsersInternal(HttpClient client, IObject sysGraphApi, string startingWith, bool isNextPage, string nextpageurl);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<Search>d__14")]
[DebuggerStepThroughAttribute]
public static Task`1<int> Search(HttpClient client, IObject sysGraphApi, string searchstring, bool swallowerrors);
    private static IObject CreateSysGraphAPIGroup(IObject sysGraphApi, JsonElement jsonelem);
    private static IObject CreateSysGraphAPIResultUser(IObject sysGraphApi, JsonElement jsonelem);
    private static void GetPropAndAssign(IObjectInstance row, JsonElement jsonelem, string v);
    private static IObject CreateSearchRowAndAdd(IObject sysGraphApi, string weburl, string id, string driveid, string name, int rank, string dtype, string sharepointdocid, string versionnumber, bool isFolder, string parentid);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<RunTheQuery>d__19")]
[DebuggerStepThroughAttribute]
private static Task`1<JsonDocument> RunTheQuery(HttpClient client, string qqq);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<LookUpFromUrl>d__20")]
[DebuggerStepThroughAttribute]
public static Task`1<IObject> LookUpFromUrl(HttpClient httpClient, IObject sysGraphApi, string url);
    private static IObject ExtractItemDataAndAddRow(IObject sysGraphApi, JsonElement json);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<LookUpFromDriveIdAndIdAndVersion>d__22")]
[DebuggerStepThroughAttribute]
public static Task`1<IObject> LookUpFromDriveIdAndIdAndVersion(HttpClient httpClient, IObject sysGraphApi, string driveid, string itemid, string version);
    public static void GetContentDownloadPathsFromDriveidAndItemId(string driveid, string itemid, string tennantidIfKnown, String& urlToContentViaGraph, String& urlToContentViaSharepoint);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<GetContentFromDriveIdAndIdAndVersion>d__24")]
[DebuggerStepThroughAttribute]
public static Task`1<Byte[]> GetContentFromDriveIdAndIdAndVersion(HttpClient httpClient, IObject sysGraphApi, string driveid, string itemid, string version);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<DriveDriveItemToThumbnailUrl>d__25")]
[DebuggerStepThroughAttribute]
public static Task`1<string> DriveDriveItemToThumbnailUrl(HttpClient httpClient, IObject sysGraphApi, string driveid, string itemid);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<UpdateOutlookCalender>d__26")]
[DebuggerStepThroughAttribute]
public Task`1<string> UpdateOutlookCalender(HttpClient httpClient, IObject sysGraphApi, string eventid, string headerOfEvent, string textforevent, string useremail, DateTime start, DateTime stop, string link, string location, string calendarid);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<NavigateUpToParentFolder>d__27")]
[DebuggerStepThroughAttribute]
public static Task`1<int> NavigateUpToParentFolder(HttpClient httpClient, IObject SysGraphAPIResultRow);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<ClearCurrentAndFillWith>d__28")]
[DebuggerStepThroughAttribute]
private static void ClearCurrentAndFillWith(HttpClient httpClient, IObject sysGraphApi, string parentdrive, object id);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<NavigateDownInFolder>d__29")]
[DebuggerStepThroughAttribute]
public static Task`1<int> NavigateDownInFolder(HttpClient httpClient, IObject SysGraphAPIResultRow);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<AdHocGetQuery>d__30")]
[DebuggerStepThroughAttribute]
public static Task`1<string> AdHocGetQuery(HttpClient httpClient, IObject sysGraphApi, string url);
    [AsyncStateMachineAttribute("MDriven.Net.Http.GraphAPISupport/<LookUpLocationFromDriveIdAndId>d__31")]
[DebuggerStepThroughAttribute]
public static Task`1<IObject> LookUpLocationFromDriveIdAndId(HttpClient httpClient, IObject sysGraphApi, string driveid, string itemid);
}
public interface MDriven.Net.Http.IRealtimeStateSubscriberService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnConnectionStateChange(EventHandler`1<StateChange> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnConnectionStateChange(EventHandler`1<StateChange> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnConnectionError(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnConnectionError(EventHandler`1<Exception> value);
    public abstract virtual void SignalAllIsWellLatestVersionId(int minsecondsapart);
    public abstract virtual void SignalAllIsWellLatestVersionId(int minsecondsapart, bool serverHasEvolved);
    public abstract virtual void GetAllIsWellInfoSentByServer(String& versionGuid, Int32& versionId, DateTime& updated, DateTime& lastknownevolvetime);
}
public class MDriven.Net.Http.MDrivenRestLogic : object {
    private static MDrivenRestLogic _thisSingleton;
    private ConcurrentDictionary`2<string, HttpClient> cache;
    private static string _xmlencoding;
    private Dictionary`2<string, RemoteTurnkeySession> _RemoteTurnkeySessions;
    public static void Install();
    public sealed virtual IElement XmlToObjects(ViewModelReferenceType vmref, IClass resultXmlRootType, string xmldata);
    public sealed virtual IElement JSonToObjects(ViewModelReferenceType vmref, IClass resultJsonRootType, string jsondata);
    public sealed virtual string RestGet(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    private void CheckAndHandleStatusCode(ViewModelReferenceType vmref, HttpResponseMessage response);
    public sealed virtual string RestDelete(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual Byte[] RestDownload(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    private IElement CreateObjectsFromContent(ViewModelReferenceType vmref, string data, IClass resultJsonRootType);
    private IStructuralFeature GetByNameRuntimeOrModel(IClass modlrType, string name);
    private IList`1<IElement> CreateObjectsFromContentList(ViewModelReferenceType vmref, List`1<object> jsonobjectstoconvert, IClass modlrType);
    public sealed virtual string RestPost(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    private string GetValueGeneric(HttpContent content, bool base64returnstream);
    public sealed virtual string RestPut(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string RestPatch(ViewModelReferenceType vmref, string endpoint, string user, string pwd, string nestingWithParams);
    public sealed virtual string ViewModelAsJSon(ViewModelReferenceType vmref, string viewModelName, IObject root);
    private X509Certificate2 GetTheCert(string certThumbprint);
    private static X509Certificate2 GetTheCertInThisStore(string certThumbprint, StoreLocation storelocation);
    private HttpClient CreateHttpClient(X509Certificate2 cert, string user, string password);
    private HttpClient GetHttpClient(X509Certificate2 cert, string user, string password);
    public HttpResponseMessage RestGeneric(ViewModelReferenceType vmRef, string endpoint, string user, string password, string nestingWithParams, HttpMethod httpMethod, Boolean& base64ReturnStream);
    private HttpResponseMessage RestGenericInternal(ViewModelReferenceType vmRef, string endpoint, string user, string password, string nestingWithParams, HttpMethod httpMethod, Boolean& base64ReturnStream);
    private static void HandleColumnToRestParam(ViewModelReferenceType vmRef, HttpRequestMessage request, Dictionary`2<string, string> theValuesForUrlEncoded, IElement rootObject, Dictionary`2<ViewModelColumn, ViewModelColumn> filenameColumns, ViewModelColumn secondPassCol, object value, string columnnametouse);
    public sealed virtual string SoapCall(ViewModelReferenceType vmref, string url, string action, string actionnamespace, string user, string pwd, string nestingWithParams, bool passwordDigest, string SOAPAction);
    private X509Certificate2 GetClientCert(ViewModelReferenceType vmref);
    private HttpWebRequest CreateWebRequest(string url, string action);
    private static bool IsSelfSigned(X509Certificate certificate);
    private XDocument CreateSoapEnvelope(ViewModelReferenceType vmref, string action, string actionnamespace, string user, string pwd, string nestingWithParams, bool passwordDigest);
    private StringBuilder GetParamsForSoapCall(ViewModelReferenceType vmref, string nestingWithParams);
    private void DoSoapCallParamForRoot(ViewModelReferenceType vmref, IElement root, ViewModelClass vmc, StringBuilder parametersForSoapCall);
    private static void InsertSoapEnvelopeIntoWebRequest(XDocument soapEnvelopeXml, HttpWebRequest webRequest);
    private RemoteTurnkeySession CheckServiceCreatedHttpClientTurnkeySession(ViewModel viewModel, string url, string user, string pwd);
    private void HandleCloseOfServiceCreatedSession(ViewModel viewModel, string sessionKey, HttpClient client);
    public sealed virtual string RemoteTurnkeyConnectGetSessionKey(ViewModelReferenceType vmref, string url, string user, string pwd);
    private static string CleanUrl_BaseAddr(string url);
    private static string CleanUrl_UrlPart(string url);
    private RemoteTurnkeySession CreateSimpleUserPWDRemoteTurnkeySession(ViewModel viewModel, string url, string user, string pwd, String& error);
    public sealed virtual string RemoteTurnkeyExecuteAction(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string actionName);
    public sealed virtual string RemoteTurnkeyGetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public sealed virtual Byte[] RemoteTurnkeyGetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName);
    public sealed virtual string RemoteTurnkeySetStringValue(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, string value);
    public sealed virtual string RemoteTurnkeySetByteArray(ViewModelReferenceType vmref, string sessionKey, string vmclassid, string columnName, Byte[] value);
    public sealed virtual string RemoteTurnkeyCloseSession(ViewModelReferenceType vmref, string sessionKey);
    public sealed virtual string GetGridAsTabSepData(ViewModelReferenceType vmref, string columnName);
}
public class MDriven.Net.Http.PatternBasedMethodsPrio1 : object {
    public static bool CheckAndHandleSupportedImports(DefaultEcoSpace es, HttpClient httpClient, IClassifier classifier, IObject theobject, IMethod method, IModifiableVariableList variableList, IElement& result);
    private static void HandleLibreOfficeConv(DefaultEcoSpace es, IObject theobject, bool toPDF, IElement& result);
}
public class MDriven.Net.Http.RealtimeStateSubscriberService : EcoSpacePart {
    private bool _ConnectionFailedGuessCoreServerForThisFrameworkClient;
    private IHubProxy _Proxy;
    private HubConnection _Connection;
    private bool _Active;
    private IEcoServiceProvider _sp;
    private bool _PreDeActive;
    private DateTime _lastcallwesentAllIsWell;
    private string _host;
    private HubConnection _ConnectionToCoreServerFromFramework;
    private bool _itHasBeenWorkingAtAnEarlierPointSoIfItDoesNotWorkNowItsJustNetwork;
    private string _ServerVersionidGuid;
    private int _ServerVersionidId;
    private DateTime _ServerVersionidUpdated;
    private DateTime _ServerLastKnownEvolveTime;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <SkipSignalR>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<StateChange> OnConnectionStateChange;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<Exception> OnConnectionError;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<ActuallySendArgs> OnActuallySignalAllIsWellLatestEvent;
    public IEcoServiceProvider Sp { get; }
    public static bool SkipSignalR { get; public set; }
    public RealtimeStateSubscriberService(IEcoServiceProvider sp);
    public IEcoServiceProvider get_Sp();
    public sealed virtual void SignalAllIsWellLatestVersionId(int minsecondsapart);
    public sealed virtual void SignalAllIsWellLatestVersionId(int minsecondsapart, bool serverHasEvolved);
    protected virtual void DoActivate();
    private void TryConnectFrameworkClientToCoreServer();
    private HubConnection ActivateCoreServerConnection();
    public sealed virtual void GetAllIsWellInfoSentByServer(String& versionGuid, Int32& versionId, DateTime& updated, DateTime& lastknownevolvetime);
    private void EnsureConnectedToSignalR();
    private void EnsureConnectedToSignalR_CoreServer(HubConnection connectionToCoreServer);
    [CompilerGeneratedAttribute]
public static bool get_SkipSignalR();
    [CompilerGeneratedAttribute]
public static void set_SkipSignalR(bool value);
    private void HandleAllIsWellLatestVersionId(string guid, int versionid);
    private void _Connection_StateChanged(StateChange obj);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnConnectionStateChange(EventHandler`1<StateChange> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnConnectionStateChange(EventHandler`1<StateChange> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnConnectionError(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnConnectionError(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public static void add_OnActuallySignalAllIsWellLatestEvent(EventHandler`1<ActuallySendArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnActuallySignalAllIsWellLatestEvent(EventHandler`1<ActuallySendArgs> value);
    private void _Connection_Error(Exception obj);
    private void InvalidateIfNotAlready(object id, int classid, int featureindex);
    private void Cache_OnRealtimeChangeDetected(object sender, RealtimeChangeArgs e);
    private void Cache_OnRealtimeChangeDetected_CoreServer(HubConnection connectionToCoreServer, RealtimeChangeArgs e);
    protected virtual void DoPreDeactivate();
    protected virtual void DoDeactivate();
    public virtual void CleanForFree();
    public static void InstallAsService(IEcoServiceProvider sp);
    [CompilerGeneratedAttribute]
private void <DoActivate>b__12_0(string id, int classid, int featureindex);
    [CompilerGeneratedAttribute]
private void <DoActivate>b__12_1(string guid, int versionid);
    [CompilerGeneratedAttribute]
private void <ActivateCoreServerConnection>b__16_0(object id, int classid, int featureindex);
    [CompilerGeneratedAttribute]
private void <ActivateCoreServerConnection>b__16_1(string guid, int versionid);
}
public interface MDriven.SharePoint.ISharepointServices {
    public abstract virtual string DocIdToUrl(SharepointServicesAuth auth, string anysiteurl, string docid, bool allowEditUrl);
    public abstract virtual string UrlToDocId(SharepointServicesAuth auth, string url);
    public abstract virtual string GetCurrentVersion(SharepointServicesAuth auth, string anysiteurl, string docid);
    public abstract virtual string GetUrlToOpenVersion(SharepointServicesAuth auth, string anysiteurl, string docid, string versionlabel);
    public abstract virtual string GetUrlToOpenDocument(SharepointServicesAuth auth, string anysiteurl, string docid);
    public abstract virtual string GetUrlToFolderFromDocId(SharepointServicesAuth auth, string anysiteurl, string docid);
    public abstract virtual void SeparateUrlIntoParts(SharepointServicesAuth auth, string completeurl, String& host, String& site, String& path, String& filename);
    public abstract virtual Dictionary`2<string, string> GetDetailedHistoryFromDocId(SharepointServicesAuth auth, string anysiteurl, string docid);
    public abstract virtual string QueryToDocId(SharepointServicesAuth auth, string anysiteurl, string querystring, Int32& numberofhits);
    public abstract virtual string DocPreview(SharepointServicesAuth auth, string anysiteurl, string docid);
}
public class MDriven.SharePoint.SharepointServicesAuth : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AuthHeadervalue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CookieContainer <CookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICredentials <Credentials>k__BackingField;
    private HttpClient _HttpClientNoRedirect;
    internal string AuthHeadervalue { get; public set; }
    internal CookieContainer CookieContainer { get; public set; }
    internal ICredentials Credentials { get; public set; }
    [CompilerGeneratedAttribute]
public void set_AuthHeadervalue(string value);
    [CompilerGeneratedAttribute]
internal string get_AuthHeadervalue();
    [CompilerGeneratedAttribute]
public void set_CookieContainer(CookieContainer value);
    [CompilerGeneratedAttribute]
internal CookieContainer get_CookieContainer();
    [CompilerGeneratedAttribute]
public void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
internal ICredentials get_Credentials();
    public HttpClient HttpClientNoRedirect(string url);
}
public class MDriven.SharePoint.SharepointServicesImpl : object {
    public static void InstallAsService(IEcoServiceProvider sp);
    public sealed virtual string DocIdToUrl(SharepointServicesAuth auth, string anysiteurl, string docid, bool allowEditUrl);
    public sealed virtual string QueryToDocId(SharepointServicesAuth auth, string anysiteurl, string querytext, Int32& numberofhits);
    public sealed virtual string DocPreview(SharepointServicesAuth auth, string anysiteurl, string docid);
    private string SearchGetPathToFirst(SharepointServicesAuth auth, string anysiteurl, string theq, Int32& numberofhits);
    private static string GetDocRedirUrl(string anysiteurl, string docid);
    public sealed virtual string UrlToDocId(SharepointServicesAuth auth, string url);
    private string UrlToProperty(SharepointServicesAuth auth, string url, string property);
    public sealed virtual string GetCurrentVersion(SharepointServicesAuth auth, string anysiteurl, string docid);
    public sealed virtual string GetUrlToOpenVersion(SharepointServicesAuth auth, string anysiteurl, string docid, string versionlabel);
    public sealed virtual string GetUrlToOpenDocument(SharepointServicesAuth auth, string anysiteurl, string docid);
    public sealed virtual string GetUrlToFolderFromDocId(SharepointServicesAuth auth, string anysiteurl, string docid);
    public sealed virtual void SeparateUrlIntoParts(SharepointServicesAuth auth, string completeurl, String& host, String& site, String& path, String& filename);
    public sealed virtual Dictionary`2<string, string> GetDetailedHistoryFromDocId(SharepointServicesAuth auth, string anysiteurl, string docid);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.CurrentSyncVersion_Args : WebApiArgsAndResultBase {
}
[DataContractAttribute]
public class MDriven.WebApi.Client.CurrentSyncVersion_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public SyncVersion SyncVersion;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.ExtractAdminDBCopyArgs : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Dummy>k__BackingField;
    [DataMemberAttribute]
public string Dummy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Dummy();
    [CompilerGeneratedAttribute]
public void set_Dummy(string value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.ExtractAdminDBCopyResult : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Info>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <DownloadedDB>k__BackingField;
    [DataMemberAttribute]
public string Info { get; public set; }
    [DataMemberAttribute]
public Byte[] DownloadedDB { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_DownloadedDB();
    [CompilerGeneratedAttribute]
public void set_DownloadedDB(Byte[] value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Fetch_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public ObjectIdList IdList;
    [DataMemberAttribute]
public Int32[] MemberIdList;
    [DataMemberAttribute]
public FetchStrategy FetchStrategy;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Fetch_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public Datablock Datablock;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.FetchDataBlockWithCondition_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public AbstractCondition Condition;
    [DataMemberAttribute]
public int MaxResults;
    [DataMemberAttribute]
public int Offset;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.FetchDataBlockWithCondition_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public Datablock Result;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.FetchIDListWithCondition_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public AbstractCondition Condition;
    [DataMemberAttribute]
public int MaxResults;
    [DataMemberAttribute]
public int Offset;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.FetchIDListWithCondition_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public ObjectIdList Result;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.GetChangesSince_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public SyncVersion SyncVersion;
    [DataMemberAttribute]
public IEnumerable`1<SyncVersion> ExcludeList;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.GetChangesSince_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public DBChangeCollection Changes;
    [DataMemberAttribute]
public SyncVersion LastSyncVersion;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.InjectAdminDBArgs : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Newdb>k__BackingField;
    [DataMemberAttribute]
public Byte[] Newdb { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Newdb();
    [CompilerGeneratedAttribute]
public void set_Newdb(Byte[] value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.InjectAdminDBResult : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    [DataMemberAttribute]
public string Result { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Login_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public string User;
    [DataMemberAttribute]
public string Password;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Login_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public string Result;
}
[ToolboxBitmapAttribute("Eco.Wcf.Client.PersistenceMapperWCFClient")]
[ToolboxItemAttribute("True")]
public class MDriven.WebApi.Client.PersistenceMapperWEBAPIClient : PersistenceMapper {
    private IEcoTypeSystem typeSystem;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ServerUserName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ServerPassword>k__BackingField;
    private WEBAPIProxy proxy;
    private int _FailedConnectionRetryTimes;
    private int _FailedConnectionRetryMaxSeconds;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <MDrivenServerHasAdvisedRestartOfClient>k__BackingField;
    public string Uri { get; public set; }
    public string ServerUserName { get; public set; }
    public string ServerPassword { get; public set; }
    public HttpClient UsedHttpClient { get; }
    public int FailedConnectionRetryTimes { get; public set; }
    public int FailedConnectionRetryMaxSeconds { get; public set; }
    private SyncVersion Eco.Persistence.IPersistenceMapper.CurrentSyncVersion { get; }
    private bool Eco.Persistence.IPersistenceMapper.SupportsSync { get; }
    public DateTime MDrivenServerHasAdvisedRestartOfClient { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_ServerUserName();
    [CompilerGeneratedAttribute]
public void set_ServerUserName(string value);
    [CompilerGeneratedAttribute]
public string get_ServerPassword();
    [CompilerGeneratedAttribute]
public void set_ServerPassword(string value);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
    public void Connect();
    public HttpClient get_UsedHttpClient();
    private void proxy_Faulted(object sender, EventArgs e);
    private void EnsureProxy();
    public void set_FailedConnectionRetryTimes(int value);
    public int get_FailedConnectionRetryTimes();
    public void set_FailedConnectionRetryMaxSeconds(int value);
    public int get_FailedConnectionRetryMaxSeconds();
    private sealed virtual override SyncVersion Eco.Persistence.IPersistenceMapper.get_CurrentSyncVersion();
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.Fetch(ObjectIdList idList, Datablock& datablock, Int32[] memberIdList, FetchStrategy fetchStrategy);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.FetchIDListWithCondition(AbstractCondition condition, ObjectIdList& result, int maxResults, int offset);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.GetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, DBChangeCollection& changes, SyncVersion& lastSyncVersion);
    private sealed virtual override bool Eco.Persistence.IPersistenceMapper.get_SupportsSync();
    [CompilerGeneratedAttribute]
public DateTime get_MDrivenServerHasAdvisedRestartOfClient();
    [CompilerGeneratedAttribute]
private void set_MDrivenServerHasAdvisedRestartOfClient(DateTime value);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.TimeForVersion(int version, DateTime& clockTime);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.Update(Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.VersionForTime(DateTime clockTime, Int32& version);
    private sealed virtual override void Eco.Persistence.IPersistenceMapper.FetchDatablockWithCondition(AbstractCondition condition, Datablock& result, int maxResults, int offset);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.SubmitNewModelArgs : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Modlrcontent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppSlot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AutomatedDeploy>k__BackingField;
    [DataMemberAttribute]
public Byte[] Modlrcontent { get; public set; }
    [DataMemberAttribute]
public string AppSlot { get; public set; }
    [DataMemberAttribute]
public bool AutomatedDeploy { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Modlrcontent();
    [CompilerGeneratedAttribute]
public void set_Modlrcontent(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AppSlot();
    [CompilerGeneratedAttribute]
public void set_AppSlot(string value);
    [CompilerGeneratedAttribute]
public bool get_AutomatedDeploy();
    [CompilerGeneratedAttribute]
public void set_AutomatedDeploy(bool value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.SubmitNewModelResult : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    [DataMemberAttribute]
public string Result { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.SupportsSync_Args : WebApiArgsAndResultBase {
}
[DataContractAttribute]
public class MDriven.WebApi.Client.SupportsSync_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public bool SupportsSync;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.TimeForVersion_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public int Version;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.TimeForVersion_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public DateTime TimeForVersion;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Update_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public Datablock Datablock;
    [DataMemberAttribute]
public UpdatePrecondition Precondition;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.Update_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public IdTranslationList TranslationList;
    [DataMemberAttribute]
public int Version;
    [DataMemberAttribute]
public SyncVersion SyncVersion;
    [DataMemberAttribute]
public UpdateResult Result;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.UpdateServerSideJobsArgs : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppSlot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ServerSideJobDefinition[] <Jobs>k__BackingField;
    [DataMemberAttribute]
public string AppSlot { get; public set; }
    [DataMemberAttribute]
public ServerSideJobDefinition[] Jobs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppSlot();
    [CompilerGeneratedAttribute]
public void set_AppSlot(string value);
    [CompilerGeneratedAttribute]
public ServerSideJobDefinition[] get_Jobs();
    [CompilerGeneratedAttribute]
public void set_Jobs(ServerSideJobDefinition[] value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.UpdateServerSideJobsResult : WebApiArgsAndResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    [DataMemberAttribute]
public string Result { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
[DataContractAttribute]
public class MDriven.WebApi.Client.VersionForTime_Args : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public DateTime ClockTime;
}
[DataContractAttribute]
public class MDriven.WebApi.Client.VersionForTime_Result : WebApiArgsAndResultBase {
    [DataMemberAttribute]
public int Version;
}
[DataContractAttribute]
[KnownTypeAttribute("MDriven.WebApi.Client.Login_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.Login_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.CurrentSyncVersion_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.CurrentSyncVersion_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.Fetch_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.Fetch_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.FetchIDListWithCondition_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.FetchIDListWithCondition_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.GetChangesSince_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.GetChangesSince_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.SupportsSync_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.SupportsSync_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.TimeForVersion_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.TimeForVersion_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.Update_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.Update_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.VersionForTime_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.VersionForTime_Result")]
[KnownTypeAttribute("MDriven.WebApi.Client.FetchDataBlockWithCondition_Args")]
[KnownTypeAttribute("MDriven.WebApi.Client.FetchDataBlockWithCondition_Result")]
public class MDriven.WebApi.Client.WebApiArgsAndResultBase : object {
}
public class MDriven.WebApi.Client.WEBAPIProxy : object {
    private HttpClient _client;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> Faulted;
    private static Dictionary`2<Type, DataContractSerializer> _serilizers;
    private static DataContractSerializerSettings _settings;
    public HttpClient UsedHttpClient { get; }
    internal WEBAPIProxy(PersistenceMapperWEBAPIClient owner);
    private static WEBAPIProxy();
    public HttpClient get_UsedHttpClient();
    [CompilerGeneratedAttribute]
internal void add_Faulted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Faulted(EventHandler`1<EventArgs> value);
    internal void Abort();
    internal bool SeemsOk();
    internal WebApiArgsAndResultBase GenericSend(string command, WebApiArgsAndResultBase args, Type typeOnRes);
    public static WebApiArgsAndResultBase GenericSend(HttpClient client, string command, WebApiArgsAndResultBase args, Type typeOnRes);
    [AsyncStateMachineAttribute("MDriven.WebApi.Client.WEBAPIProxy/<GenericSendAsync>d__11")]
[DebuggerStepThroughAttribute]
public static Task`1<WebApiArgsAndResultBase> GenericSendAsync(HttpClient client, string command, WebApiArgsAndResultBase args, Type typeOnRes);
    public static DataContractSerializer GetSerializer(Type type);
    internal SyncVersion CurrentSyncVersion();
    internal void Fetch(ObjectIdList idList, Int32[] memberIdList, FetchStrategy fetchStrategy, Datablock& datablock);
    internal void FetchIDListWithCondition(AbstractCondition condition, int maxResults, int offset, ObjectIdList& result);
    internal void GetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, DBChangeCollection& changes, SyncVersion& lastSyncVersion);
    internal bool SupportsSync();
    internal DateTime TimeForVersion(int version);
    internal void Update(Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    internal void VersionForTime(DateTime clockTime, Int32& version);
    internal void FetchDataBlockWithCondition(AbstractCondition condition, int maxResults, int offset, Datablock& result);
}
