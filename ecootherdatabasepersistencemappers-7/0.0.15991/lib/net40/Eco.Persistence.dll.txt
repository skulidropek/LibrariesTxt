public class BoldDBConst.Units.BoldDBConst : object {
    public static string sGenerateDatabaseSchema;
    public static string sSchemaGenerationAborted;
    public static string sCannotEvolve_NoOldMapping;
    public static string sCannotEvolve_NoNewMapping;
    public static string sCannotCreateSchema_NoNewMapping;
}
public class BoldDbDataValidator.Units.BoldDbDataValidator : object {
    public static string BOLDCRLF;
    public static string ExistenceInParentTest;
    public static string ExistenceInChildTest;
    public static string TypeTest;
    public static string RelationTest;
    public static string LinkObjectDupesTest;
    public static string LinkObjectTest;
    public static string LinkObjectTest2;
    public static string StrayObjectsTest;
    public static string SingleSingleEmbeddInconsistencyTest;
    public static string RemedyInsertTypes;
    public static string MultiPointersToSingleLinks;
}
public class BoldPMappers.Units.BoldPMappers : object {
    public static int TIMESTAMPMEMBERINDEX;
    public static void BoldPMLog(string s);
    public static void BoldPMLogFmtx(string s, Object[] Args);
}
public class BoldPMConsts.Units.BoldPMConsts : object {
    public static string sAliasHasNoIdKey;
    public static string sAliasHasCompositeKey;
    public static string sUnknownTypeOfExternalVarValue;
    public static string sAbstractError;
    public static string sCallToAbstractMethodOnCustomMapper;
    public static string sConditionWrongType;
    public static string sSuperClassNotVersioned;
    public static string sSuperClassNotPersistent;
    public static string sObjectListIsEmpty;
    public static string sInvalidMapping_TypeForAbstractIndeterminable;
    public static string sInvalidMapping_UnableToDetermineTypeForSecondaryKey;
    public static string sInvalidMapping_DiscriminatorHasNoDefinedValueForClass;
    public static string sKeyHasMultipleImplementationsMappedToAttributes;
    public static string sInvalidMapping_MappingMissingForConcreteMember;
    public static string sInvalidMapping_MissingClassDef;
    public static string sInvalidMapping_MultiColumnAttributesNotSupportedForIdColumns;
    public static string sInvalidMapping_IncompatibleAttributeMappingsForKey;
    public static string sKeyHasNoImplementationMappedToAttributes;
    public static string sInvalidMapping_UnsupportedComplexityInSecondaryKey;
    public static string sInvalidMapping_UnableToFindJoinToMainAlias;
    public static string sInvalidMapping_TwoMembersStoredInSameColumn;
    public static string sInvalidMapping_NoMappingForAttribute;
    public static string sInvalidMapping_NoMappingForSingleLink;
    public static string sInvalidMapping_NoMappingForLinkObjectLink;
    public static string sInvalidMapping_UnknownAliasForMember;
    public static string sInvalidMapping_NoKeysForConcreteClass;
    public static string sInvalidMapping_NoIdKeyForConcreteClass;
    public static string sInvalidMapping_InvalidSingleLinkKeyDef;
    public static string sInvalidMapping_InvalidSingleLinkKeyDefClass;
    public static string sInvalidMapping_NonStoredMemberHasMapping;
    public static string sInvalidMapping_AttributesUsedAsKeysCanNotAllowNull;
    public static string sInvalidMapping_TemporalDbWithSecondaryKeyIndices;
    public static string sInvalidMapping_ClassWithAutoIncMapperButNoAutoIncKeyImpl;
    public static string sInvalidMapping_ClassWithAutoIncMapperandMultipleAutoIncKeyImpls;
    public static string sInvalidMapping_ClassWithAutoIncKeyImplsButNoAutoIncKeyMapper;
    public static string sInvalidMapping_AttributeThatIsIdIsNotMarkedAsFreezeInModel;
    public static string sInvalidMapping_DuplicateAliasName;
    public static string sNoKeyMapperFound;
    public static string sIdMapperHasInvalidType;
    public static string sModelErrors;
    public static string sMappingErrors;
    public static string sMappingIsNotResolved;
    public static string sMappingIsNotValidated;
    public static string sTriedUpdateColumnMappedAsKey;
    public static string sSomeColumnsNotFoundInTable;
    public static string sCyclicReferencesInUpdateBlock;
    public static string sUnknownMember;
    public static string sClockLogIsNotEnabled;
    public static string sCannotCompareNonStoredLink;
    public static string sOptimisticLockingOnLinkFailed;
    public static string sObjectListNotHomogenous;
    public static string sObjectListContainsMultipleTimeStamps;
    public static string sLogFetchedIDsForNonEmbeddedLinks;
    public static string sUnableToFindAJoinBetweenAliases;
    public static string sInternalIdInSingleLink;
    public static string sInternalIdInSingleLink2;
    public static string sInnerLinkWriteNull;
    public static string sInnerLinkReadNull;
    public static string sLogWritingTableNames;
    public static string sLogInitializingDefaultPS;
    public static string sLogCommittingInitialData;
    public static string sLogCreatingTables;
    public static string sLogCleaningPS;
    public static string sLogDeletingTable;
    public static string sLogKeepingTable;
    public static string sLogErrorDeletingTable;
    public static string sLogCreatingTable;
    public static string sLogCommitingMetaDataChanges;
    public static string sLogRollBackMetaDataChanges;
    public static string sNoAttributeMapperFound;
    public static string sNoSingleColumnMappingFound;
    public static string sNoTablesDefined;
    public static string sColumnHasNoType;
    public static string sChildMappedClassesNotSupported;
    public static string sUnableToJoinAliases;
    public static string sCannotFindSQLSymbol;
    public static string sOrderByArgumentMustBeMember;
    public static string sOrderByArgumentMustHaveOneColumn;
    public static string sUnknownSortDirection;
    public static string sAliasesDoesNotShareIdKey;
    public static string sDBMustBeOpened;
    public static string sDBNotOpened;
    public static string sLogProcessingClass;
    public static string sRemedyUnsupportedTypes;
    public static string sRemedyAddMissingEntries;
    public static string sLogNotFoundInParentTable;
    public static string sLogTypeMismatch;
    public static string sLogNotFoundInChildTable;
    public static string sLogLinkObjectDuplicates;
    public static string sLogDanglingLinkObjects;
    public static string sLogHalfDanglingLinkObjects;
    public static string sLogObjectsHaveInvalidLinks;
    public static string sLogLinkDirectionMissing;
    public static string sLogTypeIsWrong;
    public static string sLogCheckingTable;
    public static string sLogColumnMissing;
    public static string sLogIndexMissing;
    public static string sLogNullValuesFound;
    public static string sLogTableDoesNotExist;
    public static string sLogDatabaseValidation;
    public static string sLogInconsistenciesFound;
    public static string sLogValidationFailed;
    public static string sOptimisticLockingFailedOnTimeStamp;
    public static string sOptimisticLockingFailedOnMissing;
    public static string sOptimisticLockingFailedOnColumn;
    public static string sFailureIDs;
    public static string sShortFailingIDs;
    public static string sPMLogFetch;
    public static string sPMLogFetchIDs;
    public static string sPMLogFetchMissing;
    public static string sUnknownConditionType;
    public static string sGetChangePointsNotSupported;
    public static string sLinkInAliasWithoutIDKeyNotSupported;
    public static string sErrorReadingQueryField;
    public static string sErrorSettingQueryParam;
    public static string sErrorReadingQueryFields;
    public static string sErrorSettingQueryParams;
    public static string sErrorString;
    public static string sMessageString;
}
public class BoldSqlNodeMaker.TBoldSqlNodeMaker : TBoldOLWNodeVisitor {
    private TBoldOclCondition fCondition;
    private TBoldSqlNodeList fSqlVarBindings;
    private Dictionary`2<TBoldOLWVariableBinding, TBoldSqlVariableBinding> fOLWVarBindings;
    private TBoldSqlNode fRootNode;
    public Dictionary`2<TBoldOLWVariableBinding, TBoldSqlVariableBinding> OLWVarBindings { get; }
    public TBoldSqlNode RootNode { get; }
    public TBoldSqlNodeList SQLVarBindings { get; }
    public TBoldSqlNodeMaker(TBoldOclCondition Condition);
    public Dictionary`2<TBoldOLWVariableBinding, TBoldSqlVariableBinding> get_OLWVarBindings();
    public TBoldSqlNode get_RootNode();
    public TBoldSqlNodeList get_SQLVarBindings();
    public TBoldSqlVariableBinding SQLBindingForVarBinding(TBoldOLWVariableBinding VarBinding);
    public virtual void VisitTBoldOLWEnumLiteral(TBoldOLWEnumLiteral N);
    public virtual void VisitTBoldOLWIntLiteral(TBoldOLWIntLiteral N);
    public virtual void VisitTBoldOLWIteration(TBoldOLWIteration N);
    public virtual void VisitTBoldOLWListCoercion(TBoldOLWListCoercion N);
    public virtual void VisitTBoldOLWLiteral(TBoldOLWLiteral N);
    public virtual void VisitTBoldOLWMember(TBoldOLWMember N);
    public virtual void VisitTBoldOLWNode(TBoldOLWNode N);
    public virtual void VisitTBoldOLWFloatLiteral(TBoldOLWFloatLiteral N);
    public virtual void VisitTBoldOLWOperation(TBoldOLWOperation N);
    public virtual void VisitTBoldOLWStrLiteral(TBoldOLWStrLiteral N);
    public virtual void VisitTBoldOLWTypeNode(TBoldOLWTypeNode N);
    public virtual void VisitTBoldOLWVariableBinding(TBoldOLWVariableBinding N);
    public virtual void VisitTBoldOLWVariableReference(TBoldOLWVariableReference N);
    public void Execute();
    public virtual void VisitTBoldOLWDateLiteral(TBoldOLWDateLiteral N);
    public virtual void VisitTBoldOLWTimeLiteral(TBoldOLWTimeLiteral N);
}
public class BoldSqlNodes.TBoldSqlDateLiteral : TBoldSqlLiteral {
    private DateTime fDateValue;
    public DateTime DateValue { get; }
    public TBoldSqlDateLiteral(int Position, DateTime DateValue);
    public DateTime get_DateValue();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlEnumLiteral : TBoldSqlLiteral {
    private int fIntValue;
    public int Intvalue { get; public set; }
    public TBoldSqlEnumLiteral(int Position, int IntValue);
    public int get_Intvalue();
    public void set_Intvalue(int value);
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlFloatLiteral : TBoldSqlLiteral {
    private double fFloatValue;
    public double FloatValue { get; }
    public TBoldSqlFloatLiteral(int Position, double FloatValue);
    public double get_FloatValue();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlIntLiteral : TBoldSqlLiteral {
    private int fIntValue;
    public int IntValue { get; }
    public TBoldSqlIntLiteral(int Position, int IntValue);
    public int get_IntValue();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlIteration : TBoldSqlOperation {
    private TBoldSqlVariableBinding fLoopVar;
    public TBoldSqlVariableBinding LoopVar { get; }
    public TBoldSqlIteration(int Position, string OperationName, TBoldSqlVariableBinding LoopVar);
    public TBoldSqlVariableBinding get_LoopVar();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
    public virtual TBoldSQLAliasReference AliasReferenceForAlias(AliasDefinition Alias, TBoldSQLQuery Query, bool ForceOwntable);
}
public class BoldSqlNodes.TBoldSqlListCoercion : TBoldSqlNode {
    private TBoldSqlNode fChild;
    public TBoldSqlNode Child { get; }
    public TBoldSqlListCoercion(int Position, TBoldSqlNode Child);
    public TBoldSqlNode get_Child();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlLiteral : TBoldSqlNode {
    public TBoldSqlLiteral(int Position);
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlMember : TBoldSqlNode {
    private int fMemberIndex;
    private string fMemberName;
    private TBoldSqlNode fmemberOf;
    private TBoldSqlNodeList fQualifier;
    private TBoldMemberPersistenceMapper fMemberMapper;
    private bool fIsBoolean;
    public TBoldSqlNode MemberOf { get; }
    public string MemberName { get; }
    public int MemberIndex { get; }
    public TBoldSqlNodeList Qualifier { get; }
    public TBoldMemberPersistenceMapper MemberMapper { get; public set; }
    public bool IsBoolean { get; }
    public TBoldSqlMember(int Position, string memberName, int MemberIndex, TBoldSqlNode MemberOf, bool IsBoolean);
    public TBoldSqlNode get_MemberOf();
    public string get_MemberName();
    public int get_MemberIndex();
    public TBoldSqlNodeList get_Qualifier();
    public TBoldMemberPersistenceMapper get_MemberMapper();
    public void set_MemberMapper(TBoldMemberPersistenceMapper value);
    public bool get_IsBoolean();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
    public bool QueryOfMemberOfIsEnclosing();
    public virtual TBoldSQLAliasReference AliasReferenceForAlias(AliasDefinition Alias, TBoldSQLQuery Query, bool ForceOwntable);
}
public class BoldSqlNodes.TBoldSqlNode : object {
    private int fPosition;
    private ClassPersistenceMapper fObjectMapper;
    private TBoldSqlAliasReferenceList fAliasReferences;
    private TBoldSqlWCF fWCF;
    private TBoldSQLQuery fQuery;
    public int Position { get; }
    public ClassPersistenceMapper ObjectMapper { get; public set; }
    public TBoldSqlWCF WCF { get; public set; }
    public TBoldSQLQuery Query { get; public set; }
    public bool HasQuery { get; }
    public bool HasObjectMapper { get; }
    public TBoldSqlNode(int Position);
    public int get_Position();
    public virtual ClassPersistenceMapper get_ObjectMapper();
    public virtual void set_ObjectMapper(ClassPersistenceMapper value);
    public TBoldSqlWCF get_WCF();
    public void set_WCF(TBoldSqlWCF value);
    public virtual TBoldSQLQuery get_Query();
    public virtual void set_Query(TBoldSQLQuery value);
    public bool get_HasQuery();
    public bool get_HasObjectMapper();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
    public TBoldSQLAliasReference MainAliasRef(TBoldSQLQuery Query);
    public void NewQuery(TBoldSQLNameSpace __NameSpace);
    public void HandleVersioningForMainAliasOfQuery();
    public void EnsureRetrievalOfMainColumns();
    public void CopyAliasReferences(TBoldSqlNode node);
    public void MergeAliasReferences(TBoldSQLAliasReference aliasReference);
    public bool AliasReferenceForAlias_ObjectMapperContainsAlias(ClassPersistenceMapper mapper, AliasDefinition Alias);
    public virtual TBoldSQLAliasReference AliasReferenceForAlias(AliasDefinition Alias, TBoldSQLQuery Query, bool ForceOwntable);
    public virtual TBoldSQLQuery RelinquishQuery();
    public virtual TBoldSqlWCF RelinquishWCF();
    internal virtual TBoldSqlAliasReferenceList GetAliasReferences();
}
[DefaultMemberAttribute("Item")]
public class BoldSqlNodes.TBoldSqlNodeList : ArrayList {
    public TBoldSqlNode Item { get; public set; }
    public TBoldSqlNode get_Item(int index);
    public void set_Item(int index, TBoldSqlNode value);
    public int Add(TBoldSqlNode Item);
    public virtual void TraverseList(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlNodeVisitor : object {
    public virtual void VisitTBoldSqlEnumLiteral(TBoldSqlEnumLiteral N);
    public virtual void VisitTBoldSqlIntLiteral(TBoldSqlIntLiteral N);
    public virtual void VisitTBoldSqlIteration(TBoldSqlIteration N);
    public virtual void VisitTBoldSqlListCoercion(TBoldSqlListCoercion N);
    public virtual void VisitTBoldSqlLiteral(TBoldSqlLiteral N);
    public virtual void VisitTBoldSqlMember(TBoldSqlMember N);
    public virtual void VisitTBoldSqlNode(TBoldSqlNode N);
    public virtual void VisitTBoldSqlFloatLiteral(TBoldSqlFloatLiteral N);
    public virtual void VisitTBoldSqlOperation(TBoldSqlOperation N);
    public virtual void VisitTBoldSqlStrLiteral(TBoldSqlStrLiteral N);
    public virtual void VisitTBoldSqlTypeNode(TBoldSqlTypeNode N);
    public virtual void VisitTBoldSqlVariableBinding(TBoldSqlVariableBinding N);
    public virtual void VisitTBoldSqlVariableReference(TBoldSqlVariableReference N);
    public virtual void VisitTBoldSqlDateLiteral(TBoldSqlDateLiteral N);
    public virtual void VisitTBoldSqlTimeLiteral(TBoldSqlTimeLiteral N);
}
public class BoldSqlNodes.TBoldSqlOperation : TBoldSqlNode {
    private TBoldSqlNodeList fArgs;
    private string fOperationName;
    private TBoldSqlSymbol fSymbol;
    private bool fIsAssociative;
    private bool fParentIsSameOperation;
    public TBoldSqlNodeList Args { get; }
    public string OperationName { get; }
    public TBoldSqlSymbol Symbol { get; public set; }
    public bool IsAssociative { get; }
    public bool ParentIsSameOperation { get; public set; }
    public TBoldSqlOperation(int Position, string OperationName);
    public TBoldSqlNodeList get_Args();
    public string get_OperationName();
    public TBoldSqlSymbol get_Symbol();
    public void set_Symbol(TBoldSqlSymbol value);
    public bool get_IsAssociative();
    public bool get_ParentIsSameOperation();
    public void set_ParentIsSameOperation(bool value);
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlStrLiteral : TBoldSqlLiteral {
    private string fStrValue;
    public string StrValue { get; }
    public TBoldSqlStrLiteral(int Position, string StrValue);
    public string get_StrValue();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public abstract class BoldSqlNodes.TBoldSqlSymbol : object {
    public string Name { get; }
    public string SqlName { get; }
    public virtual string get_Name();
    public virtual string get_SqlName();
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlNodes.TBoldSqlTimeLiteral : TBoldSqlLiteral {
    private TimeSpan fTimeValue;
    public TimeSpan TimeValue { get; }
    public TBoldSqlTimeLiteral(int Position, TimeSpan TimeValue);
    public TimeSpan get_TimeValue();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlTypeNode : TBoldSqlNode {
    private string fTypeName;
    private int fTopSortedIndex;
    public string TypeName { get; }
    public int TopSortedIndex { get; }
    public TBoldSqlTypeNode(int Position, string TypeName, int TopSortedIndex);
    public string get_TypeName();
    public int get_TopSortedIndex();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
}
public class BoldSqlNodes.TBoldSqlVariableBinding : TBoldSqlNode {
    private string fName;
    private bool fIsExternal;
    private int fClassId;
    private object fExternalVarValue;
    private bool fIsLoopVar;
    private int fRefCount;
    public string Name { get; }
    public int ClassId { get; }
    public object ExternalVarvalue { get; public set; }
    public bool IsLoopVar { get; public set; }
    public bool IsExternal { get; public set; }
    public int RefCount { get; }
    public TBoldSqlVariableBinding(int Position, string Name, int classId);
    public string get_Name();
    public int get_ClassId();
    public object get_ExternalVarvalue();
    public void set_ExternalVarvalue(object value);
    public bool get_IsLoopVar();
    public void set_IsLoopVar(bool value);
    public bool get_IsExternal();
    public void set_IsExternal(bool value);
    public int get_RefCount();
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
    public void AddRef();
    internal void UpdateName(string v);
}
public class BoldSqlNodes.TBoldSqlVariableReference : TBoldSqlNode {
    private TBoldSqlVariableBinding fVariableBinding;
    private int fRefCount;
    public TBoldSqlVariableBinding VariableBinding { get; }
    public int RefCount { get; public set; }
    public ClassPersistenceMapper ObjectMapper { get; public set; }
    public TBoldSQLQuery Query { get; public set; }
    public TBoldSqlVariableReference(int Position, TBoldSqlVariableBinding VariableBinding);
    public TBoldSqlVariableBinding get_VariableBinding();
    public int get_RefCount();
    public void set_RefCount(int value);
    public virtual ClassPersistenceMapper get_ObjectMapper();
    public virtual void set_ObjectMapper(ClassPersistenceMapper value);
    public virtual TBoldSQLQuery get_Query();
    public virtual void set_Query(TBoldSQLQuery value);
    public virtual void AcceptVisitor(TBoldSqlNodeVisitor V);
    public virtual TBoldSqlWCF RelinquishWCF();
    public virtual TBoldSQLQuery RelinquishQuery();
    public virtual TBoldSQLAliasReference AliasReferenceForAlias(AliasDefinition Alias, TBoldSQLQuery Query, bool ForceOwntable);
    public bool IsExternalVariable();
    internal virtual TBoldSqlAliasReferenceList GetAliasReferences();
}
public class BoldSqlNodes.TBoldSQLWCFVariable : TBoldSqlWCF {
    private TBoldSqlQueryParameter fParam;
    private TBoldSqlVariableBinding fVariableBinding;
    private TBoldSqlVariableReference fVariableReference;
    public TBoldSQLWCFVariable(TBoldSqlVariableBinding VariableBinding, TBoldSqlVariableReference VariableReference);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSqlNodesResolver.TBoldSqlNodeResolver : TBoldSqlNodeVisitor {
    private SystemPersistenceMapper fSystemMapper;
    private TBoldSqlNode fRootNode;
    private TBoldSqlNodeList fExternalVariables;
    public TBoldSqlNodeResolver(SystemPersistenceMapper SystemMapper, TBoldSqlNode RootNode, TBoldSqlNodeList ExternalVariables);
    public void Execute();
    public virtual void VisitTBoldSqlDateLiteral(TBoldSqlDateLiteral N);
    public virtual void VisitTBoldSqlEnumLiteral(TBoldSqlEnumLiteral N);
    public virtual void VisitTBoldSqlFloatLiteral(TBoldSqlFloatLiteral N);
    public virtual void VisitTBoldSqlIntLiteral(TBoldSqlIntLiteral N);
    public virtual void VisitTBoldSqlIteration(TBoldSqlIteration N);
    public virtual void VisitTBoldSqlListCoercion(TBoldSqlListCoercion N);
    public virtual void VisitTBoldSqlLiteral(TBoldSqlLiteral N);
    public virtual void VisitTBoldSqlMember(TBoldSqlMember N);
    public virtual void VisitTBoldSqlNode(TBoldSqlNode N);
    public virtual void VisitTBoldSqlOperation(TBoldSqlOperation N);
    public virtual void VisitTBoldSqlStrLiteral(TBoldSqlStrLiteral N);
    public virtual void VisitTBoldSqlTimeLiteral(TBoldSqlTimeLiteral N);
    public virtual void VisitTBoldSqlTypeNode(TBoldSqlTypeNode N);
    public virtual void VisitTBoldSqlVariableBinding(TBoldSqlVariableBinding N);
    public virtual void VisitTBoldSqlVariableReference(TBoldSqlVariableReference N);
}
public class BoldSqlNodesResolver.Units.BoldSqlNodesResolver : object {
}
public class BoldSQLQuery.TBoldSQLAliasReference : object {
    private ArrayList fColumnReferences;
    private TBoldSQLQuery fQuery;
    private string fAliasName;
    internal AliasDefinition fAliasDefinition;
    public AliasDefinition AliasDefinition { get; }
    public string AliasName { get; }
    public string TableAliasDeclaration { get; }
    public TBoldSQLQuery Query { get; }
    public TBoldSQLAliasReference(TBoldSQLQuery Query);
    public AliasDefinition get_AliasDefinition();
    public string get_AliasName();
    public string get_TableAliasDeclaration();
    public TBoldSQLQuery get_Query();
    public TBoldSQLColumnReference GetColumnReference(string ColumnName);
    private void EnsureColumnExists(string ColumnName, string Operation);
}
[DefaultMemberAttribute("Item")]
public class BoldSQLQuery.TBoldSqlAliasReferenceList : ArrayList {
    public TBoldSQLAliasReference Item { get; public set; }
    public TBoldSQLAliasReference get_Item(int Index);
    public void set_Item(int Index, TBoldSQLAliasReference value);
    public int Add(TBoldSQLAliasReference Item);
    public void Insert(int Index, TBoldSQLAliasReference Item);
}
public class BoldSQLQuery.TBoldSQLColumnReference : object {
    private ColumnDefinition fColumnDescription;
    private TBoldSQLAliasReference fAliasReference;
    public TBoldSQLAliasReference AliasReference { get; }
    public ColumnDefinition ColumnDescription { get; }
    public string PrefixedColumnName { get; }
    public TBoldSQLColumnReference(TBoldSQLAliasReference AliasReference, ColumnDefinition ColumnDescription);
    public TBoldSQLAliasReference get_AliasReference();
    public ColumnDefinition get_ColumnDescription();
    public string get_PrefixedColumnName();
}
public class BoldSQLQuery.TBoldSQLJoin : object {
    internal TBoldSQLColumnReference fColumnRef1;
    internal TBoldSQLColumnReference fColumnRef2;
    public string JoinStatement { get; }
    public TBoldSQLJoin(TBoldSQLColumnReference ColumnRef1, TBoldSQLColumnReference ColumnRef2);
    public string get_JoinStatement();
    public bool Matches(TBoldSQLColumnReference ColumnRef1, TBoldSQLColumnReference ColumnRef2, bool tableLevel);
    private bool OrderedMatches(TBoldSQLColumnReference ColumnRef1, TBoldSQLColumnReference ColumnRef2, bool tableLevel);
}
public class BoldSQLQuery.TBoldSQLNameSpace : object {
    private List`1<string> fUsedNames;
    private int fUsedParams;
    private IDatabase fDatabase;
    private PsMode _psmode;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <HistoryVersion>k__BackingField;
    public IDatabase Database { get; }
    public bool IsValueFetch { get; }
    public PsMode PsMode { get; }
    public int HistoryVersion { get; public set; }
    public TBoldSQLNameSpace(IDatabase Database, PsMode psmode);
    public IDatabase get_Database();
    public bool get_IsValueFetch();
    public PsMode get_PsMode();
    [CompilerGeneratedAttribute]
public int get_HistoryVersion();
    [CompilerGeneratedAttribute]
public void set_HistoryVersion(int value);
    public string GetUniqueAlias(string TableName);
    public int GetUnusedParamNumber();
}
public class BoldSQLQuery.TBoldSqlOrderByColumn : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OclSortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldSQLColumnReference <ColumnRef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICustomOrderByMapping <OrderByMapping>k__BackingField;
    public OclSortDirection Direction { get; private set; }
    public TBoldSQLColumnReference ColumnRef { get; private set; }
    public ICustomOrderByMapping OrderByMapping { get; private set; }
    public TBoldSqlOrderByColumn(OclSortDirection Direction, TBoldSQLColumnReference ColumnRef, ICustomOrderByMapping orderByMapping);
    [CompilerGeneratedAttribute]
public OclSortDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(OclSortDirection value);
    [CompilerGeneratedAttribute]
public TBoldSQLColumnReference get_ColumnRef();
    [CompilerGeneratedAttribute]
private void set_ColumnRef(TBoldSQLColumnReference value);
    [CompilerGeneratedAttribute]
public ICustomOrderByMapping get_OrderByMapping();
    [CompilerGeneratedAttribute]
private void set_OrderByMapping(ICustomOrderByMapping value);
}
public class BoldSQLQuery.TBoldSQLQuery : object {
    private TBoldSQLQueryMode fMode;
    private ArrayList fJoins;
    private TBoldSqlAliasReferenceList fAliasReferences;
    private ArrayList fColumnsToRetrieve;
    private ArrayList fColumnsToOrderBy;
    private ArrayList fWhereClauseFragments;
    private TBoldSqlQueryParameterList fParams;
    private bool fRetrieveCountStar;
    private TBoldSQLNameSpace fNameSpace;
    private TBoldSQLAliasReference fMainAlias;
    private bool fIgnoreHistoricObjects;
    private SqlDatabaseConfig fSQLDatabaseConfig;
    internal string fGroupOperation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxAnswers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <HistoryVersion>k__BackingField;
    private List`1<Tuple`2<string, bool>> _fColumnsToTupleFetch;
    private string _theSqlToPassthrough;
    private List`1<AliasPair> _aliasRefsHandledForVersioning;
    protected TBoldSqlAliasReferenceList AliasReferences { get; }
    public TBoldSQLQueryMode Mode { get; }
    public TBoldSQLAliasReference MainAlias { get; }
    public SqlDatabaseConfig SQLDatabaseConfig { get; }
    public TBoldSqlQueryParameterList Params { get; }
    public bool IgnoreHistoricObjects { get; public set; }
    public ArrayList Joins { get; }
    public int MaxAnswers { get; public set; }
    public int Offset { get; public set; }
    public PsMode PsMode { get; }
    public int HistoryVersion { get; private set; }
    public TBoldSQLQuery(TBoldSQLQueryMode Mode, SqlDatabaseConfig SQLDatabaseConfig, TBoldSQLNameSpace __NameSpace);
    protected TBoldSqlAliasReferenceList get_AliasReferences();
    protected TBoldSQLJoin GetJoin(int index);
    protected TBoldSqlWCF GetWCF(int index);
    public TBoldSQLQueryMode get_Mode();
    public TBoldSQLAliasReference get_MainAlias();
    public SqlDatabaseConfig get_SQLDatabaseConfig();
    public TBoldSqlQueryParameterList get_Params();
    public bool get_IgnoreHistoricObjects();
    public void set_IgnoreHistoricObjects(bool value);
    public TBoldSQLColumnReference GetColumnToRetrieve(int Index);
    public ArrayList get_Joins();
    public TBoldSQLAliasReference AddAliasReference(AliasDefinition AliasDefinition);
    public TBoldSQLAliasReference MergeAliasReferences(TBoldSQLAliasReference aliasReference);
    [CompilerGeneratedAttribute]
public int get_MaxAnswers();
    [CompilerGeneratedAttribute]
public void set_MaxAnswers(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    public PsMode get_PsMode();
    [CompilerGeneratedAttribute]
public int get_HistoryVersion();
    [CompilerGeneratedAttribute]
private void set_HistoryVersion(int value);
    public string SQLQuickAccessForDebug();
    public void GenerateSQL(IList`1<string> Strings);
    private void GenerateSelect(IList`1<string> selectStrings);
    internal void HandleWhere(IList`1<string> selectStrings, string PrefixOfNextWCF);
    private void HandleOrderByOrGroupBy(IList`1<string> selectStrings, List`1<string> tempSelectList, List`1<string> tempGroupBy);
    private void HandleJoins(IList`1<string> Strings, String& PrefixOfNextWCF);
    public void AddColumnToRetrieve(TBoldSQLColumnReference ColumnReference);
    internal string GetUniqueAlias(string TableName);
    public TBoldSQLJoin AddJoin(TBoldSQLColumnReference ColumnRef1, TBoldSQLColumnReference ColumnRef2, bool tableLevel);
    public TBoldSqlQueryParameter AddParam(string name, DbType FieldType);
    public void AddWCF(TBoldSqlWCF WCF);
    public void ClearColumnsToRetrieve();
    public bool HasAliasReferenceInList(TBoldSQLAliasReference AliasReference);
    public void RetrieveCountStar();
    public void AddColumnToOrderBy(TBoldSQLColumnReference Columnreference, OclSortDirection Direction, ICustomOrderByMapping orderByMapping);
    public void AddColumnToTupleFetch(string selectstatement, bool addtogroupby);
    internal bool HasSqlPassthrough();
    internal void AssignSqlPassthrough(string theSqlToPassthrough);
    internal void CheckForSqlPassthroughParams(TBoldSqlNodeList tBoldSqlNodeList);
    private DbType GetParamTypeFromValue(object p);
    public bool JoinExistsForThisAlias(TBoldSQLAliasReference aliasref);
    internal void AliasRefsHandledForVersioning(TBoldSQLAliasReference aliasRefStartTime, AliasDefinition optionalAliasStopTime);
    internal bool IsAliasAlreadyHandledForVersioning(TBoldSQLAliasReference aliasRefStartTime, AliasDefinition optionalAliasStopTime);
    internal void JoinStartAndStopOnKey(TBoldSQLAliasReference alias, TBoldSQLAliasReference stopTimeAlias);
}
public enum BoldSQLQuery.TBoldSQLQueryMode : Enum {
    public int value__;
    public static TBoldSQLQueryMode qmSelect;
    public static TBoldSQLQueryMode qmInsert;
    public static TBoldSQLQueryMode qmUpdate;
    public static TBoldSQLQueryMode qmDelete;
}
public class BoldSQLQuery.TBoldSqlQueryParameter : object {
    private string fName;
    private object fValue;
    private DbType fFieldType;
    public object Value { get; public set; }
    public string Name { get; }
    public DbType FieldType { get; }
    public TBoldSqlQueryParameter(string Name, DbType FieldType);
    public object get_Value();
    public void set_Value(object value);
    public string get_Name();
    public DbType get_FieldType();
}
[DefaultMemberAttribute("Item")]
public class BoldSQLQuery.TBoldSqlQueryParameterList : object {
    private ArrayList fList;
    private TBoldSQLQuery fQuery;
    public TBoldSqlQueryParameter Item { get; }
    public int Count { get; }
    public TBoldSqlQueryParameterList(TBoldSQLQuery Query);
    public TBoldSqlQueryParameter get_Item(int i);
    public int get_Count();
    public TBoldSqlQueryParameter AddParam(string Name, DbType FieldType);
    public TBoldSqlQueryParameter FindParam(string Name);
    public void TransferParams(IParameterized Parameterized);
}
public abstract class BoldSQLQuery.TBoldSqlWCF : object {
    public abstract virtual string GetAsString(TBoldSQLQuery Query);
    public virtual string GetAsStringForTupleWhere(TBoldSQLQuery Query);
}
public abstract class BoldSQLQuery.TBoldSQLWCFBinary : TBoldSqlWCF {
    protected TBoldSqlWCF fArg1;
    protected TBoldSqlWCF fArg2;
    protected string fSymbol;
    public TBoldSQLWCFBinary(TBoldSqlWCF arg1, TBoldSqlWCF arg2, string Symbol);
}
public class BoldSQLQuery.TBoldSQLWCFBinaryInfix : TBoldSQLWCFBinary {
    private bool fNeedsParenthesis;
    public TBoldSQLWCFBinaryInfix(TBoldSqlWCF arg1, TBoldSqlWCF arg2, string Symbol);
    public TBoldSQLWCFBinaryInfix(TBoldSqlWCF arg1, TBoldSqlWCF arg2, string Symbol, bool NeedsParenthesis);
    public virtual string GetAsString(TBoldSQLQuery Query);
    public static string CommaSeparatedIdList(ObjectIdCollection IdList, SqlDatabaseConfig Config);
    public static string GetStringRep(object value, SqlDatabaseConfig Config);
    public static TBoldSQLWCFBinaryInfix CreateWCFForIdList(TBoldSQLColumnReference ColumnRef, ObjectIdList IdList);
    public static TBoldSQLWCFBinaryInfix CreateWCFForIdCollection(TBoldSQLColumnReference ColumnRef, ObjectIdCollection IdList);
}
public class BoldSQLQuery.TBoldSQLWCFBinaryPrefix : TBoldSQLWCFBinary {
    public TBoldSQLWCFBinaryPrefix(TBoldSqlWCF arg1, TBoldSqlWCF arg2, string Symbol);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFColumnRef : TBoldSqlWCF {
    private TBoldSQLColumnReference fColumnref;
    public TBoldSQLColumnReference ColumnRef { get; }
    public TBoldSQLWCFColumnRef(TBoldSQLColumnReference ColumnRef);
    public TBoldSQLColumnReference get_ColumnRef();
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFDate : TBoldSqlWCF {
    private DateTime fDate;
    private TBoldSqlQueryParameter fParam;
    public TBoldSQLWCFDate(DateTime Value);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFExists : TBoldSQLWCFWithQuery {
    public TBoldSQLWCFExists(TBoldSQLQuery query, TBoldSQLAliasReference MainAlias);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFFloat : TBoldSqlWCF {
    private double fFloat;
    private TBoldSqlQueryParameter fParam;
    public TBoldSQLWCFFloat(double Value);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFGenericExpression : TBoldSqlWCF {
    private string fExpr;
    public TBoldSQLWCFGenericExpression(string Expr);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFGroupFunction : TBoldSQLWCFWithQuery {
    public TBoldSQLWCFGroupFunction(TBoldSQLQuery query);
    public virtual string GetAsStringForTupleWhere(TBoldSQLQuery outerQuery);
    public virtual string GetAsString(TBoldSQLQuery outerQuery);
    protected virtual void PreGetAsString();
}
public class BoldSQLQuery.TBoldSQLWCFGroupFunctionWithColumn : TBoldSQLWCFGroupFunction {
    public TBoldSQLWCFGroupFunctionWithColumn(TBoldSQLQuery query, TBoldSQLColumnReference ColumnRef, string Operation);
}
public class BoldSQLQuery.TBoldSQLWCFInQuery : TBoldSQLWCFWithQuery {
    private TBoldSqlWCF fArg1;
    public TBoldSqlWCF Arg1 { get; }
    public TBoldSQLWCFInQuery(TBoldSqlWCF Arg1, TBoldSQLQuery Query, TBoldSQLAliasReference MainAlias);
    public TBoldSqlWCF get_Arg1();
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFInteger : TBoldSqlWCF {
    private int fInt;
    public TBoldSQLWCFInteger(int Value);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFJoin : TBoldSqlWCF {
    private TBoldSQLColumnReference fColumnref1;
    private TBoldSQLColumnReference fColumnref2;
    public TBoldSQLWCFJoin(TBoldSQLColumnReference ColumnRef1, TBoldSQLColumnReference ColumnRef2);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFLiteralString : TBoldSqlWCF {
    private string fStr;
    public TBoldSQLWCFLiteralString(string Value);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFPlainStringWriter : TBoldSqlWCF {
    private string fStr;
    public string Str { get; }
    public TBoldSQLWCFPlainStringWriter(string Value);
    public string get_Str();
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFSize : TBoldSQLWCFGroupFunction {
    public TBoldSQLWCFSize(TBoldSQLQuery query);
    protected virtual void PreGetAsString();
}
public class BoldSQLQuery.TBoldSQLWCFSqlPassthrough : TBoldSQLWCFGroupFunction {
    public TBoldSQLWCFSqlPassthrough(TBoldSQLQuery query, string theSqlToPassthrough);
}
public class BoldSQLQuery.TBoldSQLWCFSqlPassthroughObjects : TBoldSQLWCFWithQuery {
    public TBoldSQLWCFSqlPassthroughObjects(TBoldSQLQuery query, string theSqlToPassthrough);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFString : TBoldSqlWCF {
    private string fStr;
    private TBoldSqlQueryParameter fParam;
    public string Str { get; }
    public TBoldSQLWCFString(string Value);
    public string get_Str();
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFTime : TBoldSqlWCF {
    private TimeSpan fTime;
    private TBoldSqlQueryParameter fParam;
    public TBoldSQLWCFTime(TimeSpan Value);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public abstract class BoldSQLQuery.TBoldSQLWCFUnary : TBoldSqlWCF {
    internal TBoldSqlWCF fArg1;
    internal string fSymbol;
    public TBoldSQLWCFUnary(TBoldSqlWCF arg1, string Symbol);
}
public class BoldSQLQuery.TBoldSQLWCFUnaryPostfix : TBoldSQLWCFUnary {
    public TBoldSQLWCFUnaryPostfix(TBoldSqlWCF arg1, string Symbol);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFUnaryPrefix : TBoldSQLWCFUnary {
    public TBoldSQLWCFUnaryPrefix(TBoldSqlWCF arg1, string Symbol);
    public virtual string GetAsString(TBoldSQLQuery Query);
}
public class BoldSQLQuery.TBoldSQLWCFWithQuery : TBoldSqlWCF {
    internal TBoldSQLQuery fQuery;
    public TBoldSQLQuery Query { get; }
    public TBoldSQLWCFWithQuery(TBoldSQLQuery query);
    public TBoldSQLQuery get_Query();
    protected void AddIdKeyColumns(TBoldSQLAliasReference Alias, TBoldSQLQuery Query);
    protected void CopyParams(TBoldSQLQuery outerQuery);
    public virtual string GetAsString(TBoldSQLQuery Query);
    protected string QueryAsString();
}
public class BoldSQLQuery.Units.BoldSQLQuery : object {
}
public class BoldSqlQueryGenerator.TBoldSqlQueryGenerator : TBoldSqlNodeVisitor {
    private TBoldSQLNameSpace fNameSpace;
    private SqlDatabaseConfig fConfig;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AtLeastOneHasPassthrough>k__BackingField;
    public bool AtLeastOneHasPassthrough { get; private set; }
    public TBoldSqlQueryGenerator(TBoldSQLNameSpace __NameSpace, SqlDatabaseConfig Config);
    public virtual void VisitTBoldSqlEnumLiteral(TBoldSqlEnumLiteral N);
    public virtual void VisitTBoldSqlFloatLiteral(TBoldSqlFloatLiteral N);
    public virtual void VisitTBoldSqlIntLiteral(TBoldSqlIntLiteral N);
    public virtual void VisitTBoldSqlIteration(TBoldSqlIteration N);
    public virtual void VisitTBoldSqlListCoercion(TBoldSqlListCoercion N);
    public virtual void VisitTBoldSqlLiteral(TBoldSqlLiteral N);
    private void HandleRelation(TBoldSqlMember N);
    private void CheckVersioningLinkClass(TBoldSqlMember N, ClassPersistenceMapper ObjectMapper, TBoldSQLAliasReference mainAliasRefForLinkClass);
    private void CheckVersioning(TBoldSqlMember N, ClassPersistenceMapper ObjectMapper, TBoldSQLAliasReference alias);
    private void HandleAttribute(TBoldSqlMember N);
    public virtual void VisitTBoldSqlMember(TBoldSqlMember N);
    public virtual void VisitTBoldSqlNode(TBoldSqlNode N);
    [CompilerGeneratedAttribute]
private void set_AtLeastOneHasPassthrough(bool value);
    [CompilerGeneratedAttribute]
public bool get_AtLeastOneHasPassthrough();
    public virtual void VisitTBoldSqlOperation(TBoldSqlOperation N);
    public virtual void VisitTBoldSqlStrLiteral(TBoldSqlStrLiteral N);
    public virtual void VisitTBoldSqlTypeNode(TBoldSqlTypeNode N);
    public virtual void VisitTBoldSqlVariableBinding(TBoldSqlVariableBinding N);
    public virtual void VisitTBoldSqlVariableReference(TBoldSqlVariableReference N);
    public virtual void VisitTBoldSqlDateLiteral(TBoldSqlDateLiteral N);
    public virtual void VisitTBoldSqlTimeLiteral(TBoldSqlTimeLiteral N);
}
public class BoldSqlSymbols.TBoldSqlSymbols : object {
    private static ArrayList C_SqlSymbols;
    private static TBoldSqlSymbols();
    public static TBSS_Symbol FindSymbolByName(string Name);
}
public class BoldSqlSymbols.TBSS_Abs : TBSS_UnarySymbol {
}
public abstract class BoldSqlSymbols.TBSS_AbstractOrder : TBSS_Iteration {
    public abstract virtual OclSortDirection GetDirection(TBoldSqlNodeList Args, int index);
    public abstract virtual TBoldSqlNode GetNode(TBoldSqlNodeList Args, int index);
    public abstract virtual int GetArgCount(TBoldSqlNodeList Args);
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Add : TBSS_BinarySymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_AllInstances : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_and : TBSS_BinarySymbol {
}
public class BoldSqlSymbols.TBSS_Average : TBSS_GroupFunctions {
    public string SqlName { get; }
    public virtual string get_SqlName();
}
public class BoldSqlSymbols.TBSS_BinaryBooleanSymbol : TBSS_BinarySymbol {
}
public class BoldSqlSymbols.TBSS_BinarySymbol : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    protected void CollectArgWCFs(TBoldSqlOperation OpNode);
    protected void ConvertQueryToWCF(TBoldSqlNode SourceNode, TBoldSqlNode DestNode);
}
public class BoldSqlSymbols.TBSS_Collect : TBSS_Iteration {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    private void AddAllJoinsToThisQuery(TBoldSQLQuery query, TBoldSqlNode node);
}
public class BoldSqlSymbols.TBSS_Common_OclIsTypeOf_OclIsKindOf : TBSS_BinarySymbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_Contains : TBSS_SqlLikeUsersBase {
    protected virtual TBoldSqlWCF AdjustLikeArgument(TBoldSqlWCF arg);
}
public class BoldSqlSymbols.TBSS_Difference : TBSS_ListOperations {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Div : TBSS_PrefixBinarySymbol {
}
public class BoldSqlSymbols.TBSS_Divide : TBSS_BinarySymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_Equal : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_Exists : TBSS_Iteration {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_FilterOnType : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_Floor : TBSS_UnarySymbol {
}
public class BoldSqlSymbols.TBSS_ForAll : TBSS_Iteration {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Greater : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_GreaterEQ : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_GroupFunctions : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_implies : TBSS_BinarySymbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_includes : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Intersection : TBSS_ListOperations {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_isEmpty : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_isNull : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Iteration : TBSS_Symbol {
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_Length : TBSS_UnarySymbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Less : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_LessEQ : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_ListOperations : TBSS_Symbol {
    protected TBoldSqlWCF CreateBoldIdMatchWCF(TBoldSqlOperation MainNode, TBoldSqlNode ArgNode);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_Maxvalue : TBSS_GroupFunctions {
    public string SqlName { get; }
    public virtual string get_SqlName();
}
public class BoldSqlSymbols.TBSS_MinValue : TBSS_GroupFunctions {
    public string SqlName { get; }
    public virtual string get_SqlName();
}
public class BoldSqlSymbols.TBSS_Mod : TBSS_PrefixBinarySymbol {
}
public class BoldSqlSymbols.TBSS_ModifiedSinceTimeStamp : TBSS_BinarySymbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Multiply : TBSS_BinarySymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_not : TBSS_UnarySymbol {
}
public class BoldSqlSymbols.TBSS_NotEmpty : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_NotEqual : TBSS_BinaryBooleanSymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_notNull : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_OclAsType : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_OclIsKindOf : TBSS_Common_OclIsTypeOf_OclIsKindOf {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_OclIsTypeOf : TBSS_Common_OclIsTypeOf_OclIsKindOf {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_or : TBSS_BinarySymbol {
}
public class BoldSqlSymbols.TBSS_orderby : TBSS_AbstractOrder {
    public virtual OclSortDirection GetDirection(TBoldSqlNodeList Args, int index);
    public virtual TBoldSqlNode GetNode(TBoldSqlNodeList Args, int index);
    public virtual int GetArgCount(TBoldSqlNodeList Args);
}
public class BoldSqlSymbols.TBSS_orderDescending : TBSS_AbstractOrder {
    public virtual OclSortDirection GetDirection(TBoldSqlNodeList Args, int index);
    public virtual TBoldSqlNode GetNode(TBoldSqlNodeList Args, int index);
    public virtual int GetArgCount(TBoldSqlNodeList Args);
}
public class BoldSqlSymbols.TBSS_orderGeneric : TBSS_AbstractOrder {
    public virtual OclSortDirection GetDirection(TBoldSqlNodeList Args, int index);
    public virtual TBoldSqlNode GetNode(TBoldSqlNodeList Args, int index);
    public virtual int GetArgCount(TBoldSqlNodeList Args);
}
public class BoldSqlSymbols.TBSS_PrefixBinarySymbol : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_reject : TBSS_Iteration {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Round : TBSS_UnarySymbol {
}
public class BoldSqlSymbols.TBSS_Select : TBSS_Iteration {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Size : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_SQLLike : TBSS_BinarySymbol {
    public string SqlName { get; }
    public virtual string get_SqlName();
}
public class BoldSqlSymbols.TBSS_SQLLikeCaseInsensitive : TBSS_SQLLike {
    public TBoldSqlWCF BuildWCFOrQuery_MakeUpper(TBoldSqlNode Node, TBoldSQLNameSpace __NameSpace);
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public abstract class BoldSqlSymbols.TBSS_SqlLikeUsersBase : TBSS_BinarySymbol {
    public string SqlName { get; }
    public virtual string get_SqlName();
    protected string ArmourString(string s);
    protected abstract virtual TBoldSqlWCF AdjustLikeArgument(TBoldSqlWCF arg);
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_SqlPassthrough : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_SqlPassthroughObjects : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
    public virtual ClassPersistenceMapper ResolveObjectMapper(TBoldSqlOperation OperationNode);
}
public class BoldSqlSymbols.TBSS_StartsWith : TBSS_SqlLikeUsersBase {
    protected virtual TBoldSqlWCF AdjustLikeArgument(TBoldSqlWCF arg);
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_Subtract : TBSS_BinarySymbol {
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_Sum : TBSS_GroupFunctions {
}
public class BoldSqlSymbols.TBSS_Symbol : TBoldSqlSymbol {
    private string fName;
    public string Name { get; }
    public virtual string get_Name();
}
public class BoldSqlSymbols.TBSS_SymmetricDifference : TBSS_ListOperations {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_toLower : TBSS_Symbol {
    public string SqlName { get; }
    public virtual string get_SqlName();
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_ToUpper : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_UnaryMinus : TBSS_UnarySymbol {
    public string Name { get; }
    public string SqlName { get; }
    public virtual string get_Name();
    public virtual string get_SqlName();
}
public class BoldSqlSymbols.TBSS_UnarySymbol : TBSS_Symbol {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_union : TBSS_ListOperations {
    public virtual void BuildWCFOrQuery(TBoldSqlOperation OperationNode, TBoldSQLNameSpace __NameSpace);
}
public class BoldSqlSymbols.TBSS_xor : TBSS_BinarySymbol {
}
public class BoldSqlSymbols.Units.BoldSqlSymbols : object {
    public static TBoldSqlWCF JoinNodesOnPrimaryKey(TBoldSqlNode PrimaryNode, TBoldSqlNode SecondaryNode);
}
public class DBEvolutorConst.Units.DBEvolutorConst : object {
    public static string sLogAddTable;
    public static string sLogAddColumn;
    public static string sLogCommittingChanges;
    public static string sLogRollbackChanges;
    public static string sLogAddInstances;
    public static string sLogMoveData;
    public static string sLogDeleteInstances;
    public static string sLogWarning_UnsafeDelete;
    public static string sLogDropIndex;
    public static string sLogDropColumn;
    public static string sLogDropTable;
    public static string sCannotCompareTypes;
    public static string sLogHeader;
    public static string sMapperChangedDataLoss;
    public static string sColumnDataLoss;
    public static string sClassNoLongerExists;
    public static string sClassIsRenamed;
    public static string sNotNullWithNoDefaultValue;
    public static string sMapperChangedAllowNull;
    public static string sMapperChangedLength;
    public static string sMapperChangedDefaultValue;
    public static string sAddingAutoIncOnEvolve;
    public static string sChangedVersionedSettingForClassOnEvolve;
    public static string sNewStateAttributeWithNoDefaultDbValue;
    public static string sNewAttributeWithInitialValueButNoDefaultDbValue;
    public static string sNewStateAttributeWithAllowNull;
    public static string sAddingTables;
    public static string sAddingColumns;
    public static string sAddingInstances;
    public static string sMovingData;
    public static string sDeletingOldInstances;
    public static string sDroppingOldColumns;
    public static string sDroppingOldTables;
    public static string sOptimizingScript;
    public static string sDetectingTypeClash;
}
public abstract class Eco.Collections.CollectionBase : object {
    private ArrayList m_InternalList;
    private object System.Collections.IList.Item { get; private set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    protected ArrayList InternalList { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void Clear();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    protected ArrayList get_InternalList();
}
public abstract class Eco.Collections.HashBase : object {
    private Hashtable m_InternalList;
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    protected Hashtable InternalList { get; }
    public bool Contains(IHashBaseElement value);
    public void Clear();
    public void Remove(object value);
    public bool get_IsReadOnly();
    public bool get_IsFixedSize();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    protected void InternalAdd(IHashBaseElement value);
    protected object GetByName(string Name);
    protected Hashtable get_InternalList();
}
public interface Eco.Collections.IHashBaseElement {
    public abstract virtual object GetHashKey();
}
public abstract class Eco.Persistence.AbstractAutoGuidKeyMapper : GenericKeyMapper {
    private ISingleColumnAttributemapping m_GuidMapper;
    private IAutoIncAttributemapping m_AutoIncMapper;
    protected string AutoGuidAttributeMapperName { get; }
    protected string GuidAttributeMapperName { get; }
    public sealed virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    public sealed virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual int ColumnCount();
    public sealed virtual void ReserveId();
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
    public sealed virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public sealed virtual void InitializePSDescriptions(IDatabaseDefinition db);
    public sealed virtual void InitializeDatabase(IDatabase db);
    public sealed virtual void InitializeDatabaseScript(IList`1<string> script);
    public sealed virtual IdAllocationMode GetIdAllocationMode();
    public sealed virtual string ColumnType(ArrayList KeyMappers, int columnNum);
    public sealed virtual string ColumnTypeForAutoInc();
    public sealed virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    public virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
    public sealed virtual void InitializeAutoIncField(string tableName, string columnName, IDatabase database);
    protected abstract virtual string get_AutoGuidAttributeMapperName();
    protected abstract virtual string get_GuidAttributeMapperName();
    public virtual string GetAutoIncValueRetrievalQuery(string tableName, string columnName);
}
public abstract class Eco.Persistence.AbstractAutoIncKeyMapper : GenericKeyMapper {
    private ISingleColumnAttributemapping m_NativeMapper;
    private IAutoIncAttributemapping m_AutoIncMapper;
    protected string AutoIncAttributeMapperName { get; }
    public sealed virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    public sealed virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual int ColumnCount();
    public sealed virtual void ReserveId();
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
    public sealed virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public sealed virtual void InitializePSDescriptions(IDatabaseDefinition db);
    public sealed virtual void InitializeDatabase(IDatabase db);
    public sealed virtual void InitializeDatabaseScript(IList`1<string> script);
    public sealed virtual IdAllocationMode GetIdAllocationMode();
    public sealed virtual string ColumnType(ArrayList KeyMappers, int columnNum);
    public sealed virtual string ColumnTypeForAutoInc();
    public sealed virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    public virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
    public sealed virtual void InitializeAutoIncField(string tableName, string columnName, IDatabase database);
    protected abstract virtual string get_AutoIncAttributeMapperName();
    public virtual string GetAutoIncValueRetrievalQuery(string tableName, string columnName);
}
public abstract class Eco.Persistence.AbstractPersistenceMapperDb : PersistenceMapper {
    private int m_ActiveCount;
    private IPersistenceMapperWithIDatabase m_PmapperWithDb;
    private ITypeSystemService m_TypeSystemService;
    private EcoCompatibilityMode m_CompatibilityMode;
    private DefaultORMappingBuilder m_DefaultRunTimeMappingProvider;
    private IORMappingProvider m_RunTimeMappingProvider;
    private TimeSpan m_VersionGranularity;
    private GetDateTimeDelegate m_GetDateTime;
    private AbstractSyncHandler m_SyncHandler;
    protected int ActiveCount { get; protected set; }
    protected IPersistenceMapperWithIDatabase PmapperWithDb { get; }
    public EcoCompatibilityMode CompatibilityMode { get; public set; }
    protected ITypeSystemService TypeSystemService { get; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategorySynchronization")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertySyncHandler")]
[DefaultValueAttribute("")]
public AbstractSyncHandler SyncHandler { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryMapping")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyRunTimeMappingProvider")]
[DefaultValueAttribute("")]
public IORMappingProvider RunTimeMappingProvider { get; public set; }
    [ObsoleteAttribute("Sync can no longer be activated by setting SyncActive. Set the SyncHandler property instead.", "True")]
unknown bool SyncActive {public set; }
    [ObsoleteAttribute("HistoryLength has moved to the SyncHandler component", "False")]
unknown int HistoryLength {public set; }
    [BrowsableAttribute("False")]
public IORMappingProvider EffectiveRunTimeMappingProvider { get; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryVersioning")]
[DefaultValueAttribute("")]
public GetDateTimeDelegate OnGetCurrentTime { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryVersioning")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyClockLogGranularity")]
public TimeSpan VersionGranularity { get; public set; }
    protected int get_ActiveCount();
    protected void set_ActiveCount(int value);
    protected IPersistenceMapperWithIDatabase get_PmapperWithDb();
    protected void SetPersistenceMapperWithIDatabase(IPersistenceMapperWithIDatabase value);
    public EcoCompatibilityMode get_CompatibilityMode();
    public void set_CompatibilityMode(EcoCompatibilityMode value);
    protected virtual void SetCompatibilityMode(EcoCompatibilityMode mode);
    protected ITypeSystemService get_TypeSystemService();
    protected void SetTypeSystemService(ITypeSystemService value);
    protected void EnsureNotActive();
    public AbstractSyncHandler get_SyncHandler();
    public void set_SyncHandler(AbstractSyncHandler value);
    public IORMappingProvider get_RunTimeMappingProvider();
    public void set_RunTimeMappingProvider(IORMappingProvider value);
    public void set_SyncActive(bool value);
    public void set_HistoryLength(int value);
    public IORMappingProvider get_EffectiveRunTimeMappingProvider();
    public GetDateTimeDelegate get_OnGetCurrentTime();
    public void set_OnGetCurrentTime(GetDateTimeDelegate value);
    public TimeSpan get_VersionGranularity();
    public void set_VersionGranularity(TimeSpan value);
    public abstract virtual void CloseConnections(bool force);
    protected virtual void Dispose(bool disposing);
    protected IList`1<string> CreateSchemaScript(ITypeSystemService typeSystemService, IDatabaseCollection databases, string dbName, IORMappingProvider newMappingProvider, IORMappingProvider oldMappingProvider);
    protected bool ValidateSchemaStructure(IList`1<string> remedies, ITypeSystemService typeSystemService, IDatabaseCollection databases, string databaseName, IORMappingProvider mappingProvider);
    protected bool ColumnFieldConsistencyCheck(IList`1<string> remedies, ITypeSystemService typeSystemService, IDatabaseCollection databases, string databaseName, IORMappingProvider mappingProvider, bool errorsasexceptions);
    protected bool ValidateDataStructure(IList`1<string> remedies, ITypeSystemService typeSystemService, IDatabaseCollection databases, string databaseName, IORMappingProvider mappingProvider, bool errorsasexceptions);
    public void CreateDatabaseSchema(ITypeSystemService typeSystemService, IDatabaseCollection databases, string databaseName, IORMappingProvider newMappingProvider, IORMappingProvider oldMappingProvider, IConfigureCleanPS configureCleanPS);
    protected IDBEvolutor GetEvolutor(ITypeSystemService typeSystemService, IDatabaseCollection databases, string databaseName, IORMappingProvider newMappingProvider, IORMappingProvider oldMappingProvider);
    protected virtual IPersistenceMapperWithIDatabase CreateNewPersistenceMapper(ITypeSystemService typeSystemService, IDatabaseCollection databases, ORMappingDefinition mapping, TimeSpan versionGranularity, GetDateTimeDelegate getDateTime);
    protected virtual IPersistenceMapperWithIDatabase GetPersistenceMapper(ITypeSystemService typeSystemService, IDatabaseCollection databases, ORMappingDefinition mapping, TimeSpan versionGranularity, GetDateTimeDelegate getDateTime);
}
public class Eco.Persistence.AttributeKeyMapper : GenericKeyMapper {
    public sealed virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    private object GetFieldValue(int fieldno, IField[] keyFields);
    public sealed virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual int ColumnCount();
    public sealed virtual void ReserveId();
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
    private object GetMemberValue(object member, IdTranslationList translationList, bool isOrderColumn);
    public sealed virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public sealed virtual void InitializePSDescriptions(IDatabaseDefinition db);
    public sealed virtual void InitializeDatabase(IDatabase db);
    public sealed virtual void InitializeDatabaseScript(IList`1<string> script);
    public sealed virtual IdAllocationMode GetIdAllocationMode();
    public sealed virtual string ColumnType(ArrayList keyMappers, int columnNum);
    public sealed virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    private string GetParamStr(ObjectId id, int idIndex, int fieldIndex, bool useParams, IParameterized parameterized, string idPrefix);
    public virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
}
public class Eco.Persistence.AutoGuidKeyMapper : AbstractAutoGuidKeyMapper {
    protected string AutoGuidAttributeMapperName { get; }
    protected string GuidAttributeMapperName { get; }
    protected virtual string get_AutoGuidAttributeMapperName();
    protected virtual string get_GuidAttributeMapperName();
}
public class Eco.Persistence.AutoInc16KeyMapper : AbstractAutoIncKeyMapper {
    protected string AutoIncAttributeMapperName { get; }
    protected virtual string get_AutoIncAttributeMapperName();
}
public class Eco.Persistence.AutoIncKeyMapper : AbstractAutoIncKeyMapper {
    protected string AutoIncAttributeMapperName { get; }
    protected virtual string get_AutoIncAttributeMapperName();
}
public class Eco.Persistence.Blackfish.BooleanAsBoolean : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Blackfish.GenericByteArrayAsVarBinary : AbstractSingleColumnAttribute {
    public virtual object ColumnToValue(object columnValue);
    public string ColumnType(int length);
    public string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public void StringToParameter(string value, IDataParameter parameter);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Blackfish.Int32AsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.Blackfish.Int64AsBigInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Blackfish.SingleAsFloat : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.ChainedPersistenceHandlerBase : object {
    private IEcoTypeSystem m_TypeSystem;
    private IPersistenceHandler m_NextPersistenceHandler;
    protected IEcoTypeSystem TypeSystem { get; }
    public IPersistenceHandler NextPersistenceHandler { get; public set; }
    public int MaxSavedVersion { get; }
    public bool IsPersistent { get; }
    public bool SupportsSync { get; }
    public ChainedPersistenceHandlerBase(IEcoTypeSystem typeSystem);
    protected IEcoTypeSystem get_TypeSystem();
    public IPersistenceHandler get_NextPersistenceHandler();
    public void set_NextPersistenceHandler(IPersistenceHandler value);
    public virtual ICollection`1<Locator> FetchLinksWithObjects(ICollection`1<Locator> objects, IAssociationEnd assocEnd);
    public virtual int get_MaxSavedVersion();
    public virtual DateTime TimeForVersion(int version);
    public virtual int VersionAtTime(DateTime time);
    public virtual void Fetch(ICollection`1<Locator> locators, IStructuralFeature[] members, FetchStrategy FetchStrategy);
    public virtual ICollection`1<Locator> GetAllWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public virtual Datablock GetValueWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public virtual void UpdateDatabaseWithList(ICollection`1<Locator> locators);
    public sealed virtual void SuspectExternalUpdateInvalidate(ICollection`1<Locator> locators);
    public sealed virtual bool get_IsPersistent();
    public sealed virtual bool get_SupportsSync();
    public virtual void RetrieveChanges(DBChangeCollection& ignoredChanges);
    public virtual void add_ObjectsUpdated(LocatorArrayEventHandler value);
    public virtual void remove_ObjectsUpdated(LocatorArrayEventHandler value);
    public virtual void add_OnPreviewFetchedDataBlock(EventHandler`1<PreviewFetchedDataBlockArgs> value);
    public virtual void remove_OnPreviewFetchedDataBlock(EventHandler`1<PreviewFetchedDataBlockArgs> value);
}
public abstract class Eco.Persistence.ChainedPersistenceMapperBase : PersistenceMapper {
    private PersistenceMapper m_NextPersistenceMapper;
    public PersistenceMapper NextPersistenceMapper { get; public set; }
    public PersistenceMapper get_NextPersistenceMapper();
    public void set_NextPersistenceMapper(PersistenceMapper value);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public abstract virtual ChainedPersistenceMapperImplBase CreatePersistenceMapperImpl(ITypeSystemService typeSystemService, IPersistenceMapper nextPersistenceMapper);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
public class Eco.Persistence.ChainedPersistenceMapperImplBase : MarshalByRefObject {
    private IPersistenceMapper m_NextPersistenceMapper;
    private ITypeSystemService m_TypeSystemService;
    public IPersistenceMapper NextPersistenceMapper { get; }
    public ITypeSystemService TypeSystemService { get; }
    public bool SupportsSync { get; }
    public SyncVersion CurrentSyncVersion { get; }
    public ChainedPersistenceMapperImplBase(ITypeSystemService typeSystemService, IPersistenceMapper nextPersistenceMapper);
    public IPersistenceMapper get_NextPersistenceMapper();
    public ITypeSystemService get_TypeSystemService();
    public virtual void Fetch(ObjectIdList idList, Datablock& datablock, Int32[] memberIdList, FetchStrategy fetchStrategy);
    public virtual void FetchIDListWithCondition(AbstractCondition condition, ObjectIdList& result, int maxResults, int offset);
    public virtual void FetchDatablockWithCondition(AbstractCondition condition, Datablock& result, int maxResults, int offset);
    public virtual void VersionForTime(DateTime clockTime, Int32& version);
    public virtual void TimeForVersion(int version, DateTime& clockTime);
    public virtual bool get_SupportsSync();
    public virtual void Update(Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    public virtual void GetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, DBChangeCollection& changes, SyncVersion& lastSyncVersion);
    public virtual SyncVersion get_CurrentSyncVersion();
}
public class Eco.Persistence.ChainedPersistenceServiceBase : object {
    private IPersistenceService nextPersistenceService;
    public IPersistenceService NextPersistenceService { get; public set; }
    public bool SupportsSync { get; }
    public bool IsPersistent { get; }
    private int Eco.Services.IPersistenceService.PageSize { get; private set; }
    public DateTime LatestServerRestartDiscovered { get; }
    public IPersistenceService get_NextPersistenceService();
    public void set_NextPersistenceService(IPersistenceService value);
    public virtual void UpdateDatabaseWithList(IEnumerable`1<T> list);
    public virtual bool get_SupportsSync();
    public virtual void Refresh(bool fetchValues);
    public virtual void RetrieveChanges(DBChangeCollection& ignoredChanges);
    public virtual void RetrieveChanges();
    public virtual IChange[] GetChanges();
    public virtual void ApplyAllChanges();
    public virtual IObjectList GetAllWithCondition(AbstractCondition condition);
    public virtual IObjectList GetAllWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public virtual Datablock GetObjectsWithCondition(AbstractCondition condition, int maxAnswers, int offset);
    public virtual IElement GetValueWithCondition(AbstractCondition condition, int maxAnswers, int offset, IClassifier resultType);
    public virtual IElementCollection GetTuplesWithCondition(AbstractCondition condition, int maxAnswers, int offset, IClassifier resultType);
    public virtual void EnsureEnclosure(IObjectList objectList);
    public virtual void Unload(IEnumerable`1<T> objects);
    public virtual void DiscardChanges(IEnumerable`1<T> objects);
    public virtual bool IsLoaded(IEcoObject obj);
    public virtual void EnsureRange(IObjectList objects, int fromIndex, int toIndex);
    public virtual bool IsRangeEnsured(IObjectList objects, int fromIndex, int toIndex);
    public virtual void EnsureObject(IObjectInstance obj);
    public virtual IObjectList EnsureRelatedObjects(IEnumerable`1<T> objects, string memberName);
    public virtual IObjectList EnsureRelatedObjects(IEnumerable`1<T> objects, IAssociationEnd assocEnd);
    public virtual bool get_IsPersistent();
    private sealed virtual override void Eco.Services.IPersistenceService.set_PageSize(int value);
    private sealed virtual override int Eco.Services.IPersistenceService.get_PageSize();
    public virtual void SuspectExternalUpdateInvalidate(IEnumerable`1<T> list);
    public sealed virtual DateTime get_LatestServerRestartDiscovered();
    public sealed virtual bool RefreshSafePeriodic(int secsapart);
    public sealed virtual void add_InvalidationsDone(EventHandler value);
    public sealed virtual void remove_InvalidationsDone(EventHandler value);
    public sealed virtual void add_InvalidateByRealtimeDone(EventHandler`1<InvalidateByRealtimeDoneArgs> value);
    public sealed virtual void remove_InvalidateByRealtimeDone(EventHandler`1<InvalidateByRealtimeDoneArgs> value);
}
public class Eco.Persistence.ColumnDescription : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultDBValue>k__BackingField;
    public string ColumnName { get; private set; }
    public string ColumnType { get; private set; }
    public bool AllowNull { get; private set; }
    public string DefaultDBValue { get; private set; }
    public ColumnDescription(string columnName, string columnType, bool allowNull, string defaultDbValue);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
private void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
private void set_AllowNull(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultDBValue();
    [CompilerGeneratedAttribute]
private void set_DefaultDBValue(string value);
}
public class Eco.Persistence.CommitBlockWrapper : object {
    public CommitBlock CommitBlock;
    public int Id;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DBChangeCollection <PreCookedDBChangeCollection>k__BackingField;
    public DBChangeCollection PreCookedDBChangeCollection { get; public set; }
    [CompilerGeneratedAttribute]
public void set_PreCookedDBChangeCollection(DBChangeCollection value);
    [CompilerGeneratedAttribute]
public DBChangeCollection get_PreCookedDBChangeCollection();
}
[FlagsAttribute]
public enum Eco.Persistence.Configuration.DataBaseEngine : Enum {
    public long value__;
    public static DataBaseEngine Unknown;
    public static DataBaseEngine InterbaseSqlDialect1;
    public static DataBaseEngine InterbaseSqlDialect3;
    public static DataBaseEngine GenericANSISQL92;
    public static DataBaseEngine SqlServerBdp;
    public static DataBaseEngine SqlServerSqlClient;
    public static DataBaseEngine SqlServer7Bdp;
    public static DataBaseEngine SqlServer7SqlClient;
    public static DataBaseEngine DBISAM;
    public static DataBaseEngine OracleBdp;
    public static DataBaseEngine Advantage;
    public static DataBaseEngine Informix;
    public static DataBaseEngine DB2;
    public static DataBaseEngine SqlServerMBCSBdp;
    public static DataBaseEngine SqlServerMBCSSqlClient;
    public static DataBaseEngine SqlServer7MBCSBdp;
    public static DataBaseEngine SqlServer7MBCSSqlClient;
    public static DataBaseEngine OracleBdpMBCS;
    public static DataBaseEngine InterbaseSqlDialect3MBCS;
    public static DataBaseEngine DB2MBCS;
    public static DataBaseEngine SybaseCommon;
    public static DataBaseEngine SybaseBdp;
    public static DataBaseEngine AccessBdp;
    public static DataBaseEngine AccessSqlClient;
    public static DataBaseEngine Blackfish;
    public static DataBaseEngine BlackfishBdp;
    public static DataBaseEngine MySql4Bdp;
    public static DataBaseEngine MySql4Mys;
    public static DataBaseEngine MySql5Bdp;
    public static DataBaseEngine MySql5Mys;
    public static DataBaseEngine OracleClient;
    public static DataBaseEngine OracleDbx;
    public static DataBaseEngine AccessDbx;
    public static DataBaseEngine InterbaseSqlDialect3Dbx;
    public static DataBaseEngine MySql4Dbx;
    public static DataBaseEngine SqlServerDbx;
    public static DataBaseEngine SybaseDbx;
    public static DataBaseEngine SqlServerMBCSDbx;
    public static DataBaseEngine SqlServer7Dbx;
    public static DataBaseEngine SqlServer7MBCSDbx;
    public static DataBaseEngine BlackfishDbx;
    public static DataBaseEngine MySql5Dbx;
    public static DataBaseEngine DB2Dbx;
    public static DataBaseEngine OracleDbxMBCS;
    public static DataBaseEngine InterbaseSqlDialect3DbxMBCS;
    public static DataBaseEngine Firebird;
    public static DataBaseEngine SqlCe;
    public static DataBaseEngine ODBC;
    public static DataBaseEngine SQLite;
    public static DataBaseEngine VistaDB;
    public static DataBaseEngine PostgreSQL;
}
public class Eco.Persistence.Configuration.DatabaseEngineInitializer : object {
    private static List`1<MapperDefinition> c_AttributeMapperList;
    private static List`1<MapperDefinition> c_KeyMapperList;
    public static DataBaseEngine sqlServer7;
    public static DataBaseEngine sqlServerBdp;
    public static DataBaseEngine sqlServerDbx;
    public static DataBaseEngine sqlServerSqlClient;
    public static DataBaseEngine msAccess;
    public static DataBaseEngine sqlServerSqlCe;
    public static DataBaseEngine vistaDB;
    public static DataBaseEngine sqlServer;
    public static DataBaseEngine microsoftEngines;
    public static DataBaseEngine interbaseDialect3;
    public static DataBaseEngine interbaseDialect3Dbx;
    public static DataBaseEngine allInterbaseDialect3;
    public static DataBaseEngine sybase;
    public static DataBaseEngine oracleBdp;
    public static DataBaseEngine oracleDbx;
    public static DataBaseEngine oracle;
    public static DataBaseEngine genericMbcs;
    public static DataBaseEngine blackfish;
    public static DataBaseEngine db2;
    public static DataBaseEngine mysql4;
    public static DataBaseEngine mysql5;
    public static DataBaseEngine mysqlMys;
    public static DataBaseEngine mysqlBdp;
    public static DataBaseEngine mysqlDbx;
    public static DataBaseEngine mysql;
    public static DataBaseEngine postgreSQL;
    public static DataBaseEngine allEngines;
    public static List`1<MapperDefinition> AttributeMapperList { get; }
    public static List`1<MapperDefinition> KeyMapperList { get; }
    private static DatabaseEngineInitializer();
    public static List`1<MapperDefinition> get_AttributeMapperList();
    public static List`1<MapperDefinition> get_KeyMapperList();
    private static void AddAttributeMappers();
    private static void AddKeyMappers();
    private static void SetPersistenceMappers(SqlDatabaseConfig cfg, DataBaseEngine databaseEngine);
    private static void SetKeyMappers(SqlDatabaseConfig cfg, DataBaseEngine databaseEngine);
    private static void AddKeywordsFromResource(SqlDatabaseConfig cfg, string resourceName);
    private static void SetInitialValues(SqlDatabaseConfig cfg);
    private static void InitializeSQLServerCommon(SqlDatabaseConfig cfg);
    private static void InitializeSQLServerBdp(SqlDatabaseConfig cfg);
    private static void InitializeSQLServerSqlCeClient(SqlDatabaseConfig cfg);
    private static void InitializeSQLServerSqlClient(SqlDatabaseConfig cfg);
    private static void InitializeAccess(SqlDatabaseConfig cfg);
    private static void InitializeGenericANSISQL92(SqlDatabaseConfig cfg);
    private static void InitializeInterbaseSQLDialect3(SqlDatabaseConfig cfg);
    private static void InitializeInterbaseSQLDialect1(SqlDatabaseConfig cfg);
    private static void InitializeDBISAM(SqlDatabaseConfig cfg);
    private static void InitializeAdvantage(SqlDatabaseConfig cfg);
    private static void InitializeSybase(SqlDatabaseConfig cfg);
    private static void InitializeOracle(SqlDatabaseConfig cfg);
    private static void InitializeInformix(SqlDatabaseConfig cfg);
    private static void InitializeBlackfish(SqlDatabaseConfig cfg);
    private static void InitializeMySqlCommon(SqlDatabaseConfig cfg);
    private static void InitializeMySql5(SqlDatabaseConfig cfg);
    private static void InitializeDB2(SqlDatabaseConfig cfg);
    public static void InitializeDbEngineSettings(DataBaseEngine engine, SqlDatabaseConfig sqlDatabaseConfig);
    private static void InitializePostgreSQL(SqlDatabaseConfig cfg);
    private static void InitializeVistaClient(SqlDatabaseConfig cfg);
}
public class Eco.Persistence.Configuration.MapperDefinition : object {
    private DataBaseEngine m_DatabaseEngine;
    private string m_TypeName;
    private Type m_MapperType;
    public DataBaseEngine DatabaseEngines { get; }
    public string TypeName { get; }
    public Type MapperType { get; }
    public MapperDefinition(DataBaseEngine databaseEngine, string typeName, Type mapperType);
    public DataBaseEngine get_DatabaseEngines();
    public string get_TypeName();
    public Type get_MapperType();
}
public class Eco.Persistence.Configuration.StringLiterals : object {
    public static string SystemDateTime;
    public static string SystemByteArr;
    public static string SystemString;
    public static string SystemBoolean;
    public static string SystemByte;
    public static string SystemSByte;
    public static string SystemInt16;
    public static string SystemUInt16;
    public static string SystemInt32;
    public static string SystemUInt32;
    public static string SystemInt64;
    public static string SystemUInt64;
    public static string SystemDouble;
    public static string SystemSingle;
    public static string SystemDecimal;
    public static string SystemChar;
    public static string SystemGuid;
    public static string SystemTimeSpan;
    public static string SystemDrawingColor;
    public static string AutoInc;
    public static string Enum;
    public static string AutoInc16;
    public static string AutoIncDecimal;
    public static string Guid;
    public static string AutoGuid;
    public static string Attribute;
    public static string GuidAsVarChar32;
    public static string ReservedWords_Access;
    public static string ReservedWords_Advantage;
    public static string ReservedWords_ANSISQL92;
    public static string ReservedWords_DB2;
    public static string ReservedWords_DBISAM;
    public static string ReservedWords_Default;
    public static string ReservedWords_Informix;
    public static string ReservedWords_InterbaseSQLDialect1;
    public static string ReservedWords_InterbaseSQLDialect3;
    public static string ReservedWords_MySqlCommon;
    public static string ReservedWords_MySql5;
    public static string ReservedWords_Blackfish;
    public static string ReservedWords_Oracle;
    public static string ReservedWords_SqlServer;
    public static string ReservedWords_Sybase;
    public static string ReservedWords_VistaDB;
}
public abstract class Eco.Persistence.Connection.AbstractIDatabaseImpl : object {
    private SqlDatabaseConfig m_Config;
    internal int m_ExecedQueries;
    internal int m_ClosedQueries;
    internal IDbTransaction m_ImplicitTransaction;
    internal int m_OpenedQueries;
    private IDbTransaction m_CurrentTransaction;
    private int m_AllocatedQueries;
    private int m_ReturnedQueries;
    private int m_AllocatedExecQueries;
    private int m_ReturnedExecQueries;
    private int m_StatedTransactions;
    private int m_CommitedTransactions;
    private int m_RolledBackTransactions;
    private DateTime m_OpenSince;
    private bool m_ConnectionDisposed;
    public static bool TrackQueryAllocation;
    private Dictionary`2<IQuery, string> querytracker;
    private Dictionary`2<IExecQuery, string> execquerytracker;
    protected static string HIDE_WORD1;
    protected static string HIDE_WORD_REPLACEMENT1;
    public SqlDatabaseConfig Config { get; }
    private DateTime Eco.Persistence.Connection.IDatabase.OpenSince { get; }
    public bool Connected { get; }
    private bool Eco.Persistence.Connection.IDatabase.InTransaction { get; }
    public IDbConnection DbConnection { get; }
    protected IDbTransaction CurrentTransaction { get; }
    protected IDbTransaction ImplicitTransaction { get; }
    public bool InTransaction { get; }
    public bool InImplicitTransaction { get; }
    public bool AlwaysReadInTransactions { get; }
    protected AbstractIDatabaseImpl(SqlDatabaseConfig config);
    private static AbstractIDatabaseImpl();
    public sealed virtual SqlDatabaseConfig get_Config();
    protected void EnsureConnected();
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.StartTransaction();
    protected virtual IDbTransaction StartTransactionNoChecks();
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.Commit();
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.RollBack();
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.Open();
    private sealed virtual override DateTime Eco.Persistence.Connection.IDatabase.get_OpenSince();
    public sealed virtual string CheckQueryStatus();
    public sealed virtual void Close();
    public sealed virtual IQuery GetQuery();
    public sealed virtual void ReleaseQuery(IQuery query);
    public sealed virtual void DisposeConnection();
    private sealed virtual override IExecQuery Eco.Persistence.Connection.IDatabase.GetExecQuery();
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.ReleaseExecQuery(IExecQuery query);
    private sealed virtual override void Eco.Persistence.Connection.IDatabase.ReleaseCachedObjects();
    public abstract virtual IList`1<string> AllTableNames(string pattern);
    private sealed virtual override bool Eco.Persistence.Connection.IDatabase.TableExists(string tableName);
    public abstract virtual DataTable GetIndexDefsForTable(string tableName);
    public sealed virtual bool get_Connected();
    private sealed virtual override bool Eco.Persistence.Connection.IDatabase.get_InTransaction();
    public abstract virtual IDbConnection get_DbConnection();
    protected abstract virtual AbstractIQueryImpl CreateCommand();
    protected static bool FindFirstParam(string text, String& head, String& name, String& tail);
    protected static string ConvertParametersToLiterals(string commandText, IDataParameterCollection parameters);
    protected static string ConvertParametersToAtPrefix(string commandText, IDataParameterCollection parameters);
    protected static string ConvertParametersToColonPrefix(string commandText, IDataParameterCollection parameters);
    protected static string ConvertParametersToPrefixed(string commandText, IDataParameterCollection parameters, string prefix, bool addPrefixToParam);
    protected static string ConvertParametersToUpperCase(string commandText, IDataParameterCollection parameters);
    protected static string ConvertParametersToQuestionMarks(string commandText, IDataParameterCollection parameters);
    protected void RemoveUnusedVariables(string sql, IDataParameterCollection parameters);
    protected static string PreProcess(string text);
    protected static string PostProcess(string text);
    protected IDbTransaction get_CurrentTransaction();
    protected IDbTransaction get_ImplicitTransaction();
    internal IDbTransaction StartImplicitTransaction();
    internal void EndImplicitTransaction();
    protected internal abstract virtual string HandleCommandParameters(string commandText, IDataParameterCollection parameters);
    public bool get_InTransaction();
    public bool get_InImplicitTransaction();
    public virtual bool get_AlwaysReadInTransactions();
}
public abstract class Eco.Persistence.Connection.AbstractIQueryImpl : object {
    private ParameterCollection m_Parameters;
    private int m_LastRowsAffected;
    private bool m_EndOfQuery;
    private IDbCommand m_DbCommand;
    private IDataReader m_DataReader;
    private IDataRecord m_DataRecord;
    private AbstractIDatabaseImpl m_ConnectionAdapter;
    private string m_SQL;
    private int m_LastFieldFetched;
    private bool InImplicitTransaction { get; }
    public bool Eof { get; }
    private int Eco.Persistence.Connection.IDataSet.FieldCount { get; }
    private IField Eco.Persistence.Connection.IDataSet.Item { get; }
    private string Eco.Persistence.Connection.IQueryBase.SqlText { get; }
    private int Eco.Persistence.Connection.IExecQuery.RowsAffected { get; }
    private bool IsOpen { get; }
    protected IDbCommand DbCommand { get; }
    protected IDataRecord DataRecord { get; }
    protected IDataReader DataReader { get; }
    protected AbstractIQueryImpl(IDbCommand dbCommand, AbstractIDatabaseImpl connectionAdapter);
    private bool get_InImplicitTransaction();
    private sealed virtual override IField Eco.Persistence.Connection.IDataSet.FieldByName(string fieldName);
    protected virtual void InternalClose();
    public sealed virtual void Close();
    public sealed virtual void Next();
    private sealed virtual override void Eco.Persistence.Connection.IDataSet.Open();
    private sealed virtual override int Eco.Persistence.Connection.IDataSet.MoveBy(int distance);
    public sealed virtual bool get_Eof();
    private sealed virtual override int Eco.Persistence.Connection.IDataSet.get_FieldCount();
    private sealed virtual override IField Eco.Persistence.Connection.IDataSet.get_Item(int index);
    private sealed virtual override void Eco.Persistence.Connection.IParameterized.ClearParams();
    public virtual IDataParameter ParamByName(string value);
    private sealed virtual override void Eco.Persistence.Connection.IQueryBase.AssignSqlText(string sql);
    private sealed virtual override string Eco.Persistence.Connection.IQueryBase.get_SqlText();
    public virtual void StartSqlBatch();
    public virtual void EndSqlBatch();
    public virtual void FailSqlBatch();
    protected virtual string GetParameterTypeDescription(IDataParameter p);
    private void BuildParameterInfoString(IList paramList, StringBuilder sb);
    private void LogSqlStatement(string sql, TimeSpan time);
    private void TransferParametersToCommand();
    private void ClearParameters();
    public virtual void ExecSql();
    private sealed virtual override int Eco.Persistence.Connection.IExecQuery.get_RowsAffected();
    private bool get_IsOpen();
    protected IDbCommand get_DbCommand();
    protected IDataRecord get_DataRecord();
    protected IDataReader get_DataReader();
    protected void EndImplicitTransaction();
    internal void Dispose();
    protected virtual void CreateReader();
    protected void ReleaseReader();
    protected abstract virtual IDataParameter CreateParam(string paramName);
}
public abstract class Eco.Persistence.Connection.Ado2IDatabaseImpl : AbstractIDatabaseImpl {
    private DbConnection m_Connection;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CommandTimeout>k__BackingField;
    protected DbConnection Connection { get; }
    public int CommandTimeout { get; public set; }
    public IDbConnection DbConnection { get; }
    public Ado2IDatabaseImpl(DbConnection connection, SqlDatabaseConfig config);
    protected DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    public virtual IDbConnection get_DbConnection();
    protected virtual AbstractIQueryImpl CreateCommand();
    protected static DataColumn CreateColumn(string name, string dataType);
    protected static DataColumn CreateColumn(string name, string dataType, bool readOnly);
    protected static DataTable CreateIndexDefsTable();
    public virtual DataTable GetIndexDefsForTable(string tableName);
    private sealed virtual override void Eco.Persistence.IDistributedTransactionParticipant.EnlistInTransaction(object transaction);
    protected virtual void InternalEnlistInTransaction(object transaction);
}
public class Eco.Persistence.Connection.Ado2IQueryImpl : AbstractIQueryImpl {
    private IDbCommand m_Command;
    public Ado2IQueryImpl(IDbCommand command, AbstractIDatabaseImpl connectionAdapter);
    protected virtual IDataParameter CreateParam(string paramName);
}
public class Eco.Persistence.Connection.DatabaseOperationFailedException : Exception {
    protected DatabaseOperationFailedException(SerializationInfo info, StreamingContext context);
    public DatabaseOperationFailedException(string message, Exception innerException);
}
public class Eco.Persistence.ConnectionPool : object {
    private int m_MaxOpenConnections;
    private int m_MaxPoolConnections;
    private Queue`1<IDatabase> m_Pool;
    private List`1<IDatabase> m_UsedConnections;
    private bool _OnlyOneDBConnectionPerThreadMode;
    [ThreadStaticAttribute]
private static IDatabase _OnlyOneDBConnectionPerThreadModeActiveDB;
    [ThreadStaticAttribute]
private static int _OnlyOneDBConnectionPerThreadModeActiveDBUseCount;
    private PersistenceMapperDb m_Owner;
    private int m_Waiters;
    public int MaxOpenConnections { get; public set; }
    public int MaxPoolConnections { get; public set; }
    private int EffectiveMaxPoolConnections { get; }
    public ConnectionPool(PersistenceMapperDb owner);
    public void EnterOnlyOneDBConnectionPerThreadMode();
    public int get_MaxOpenConnections();
    public void set_MaxOpenConnections(int value);
    public int get_MaxPoolConnections();
    public void set_MaxPoolConnections(int value);
    private int get_EffectiveMaxPoolConnections();
    public IDatabase RetrieveClosedDatabaseConnection(bool exclusive);
    public IDatabase RetrieveDatabaseConnection(bool exclusive);
    public void ReturnDatabaseConnection(IDatabase database);
    public void ReturnDatabaseConnection(IDatabase database, bool destroy);
    public void CloseConnections(bool force);
}
internal enum Eco.Persistence.CreateMappingMode : Enum {
    public int value__;
    public static CreateMappingMode CreateDb;
    public static CreateMappingMode Run;
}
public class Eco.Persistence.Db2.DecimalAsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Db2.Int64AsBigInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Db2.Int64AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Db2.SingleAsFloat : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public abstract class Eco.Persistence.Default.AbstractNumericSingleColumnAttribute : AbstractSingleColumnAttribute {
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
}
public abstract class Eco.Persistence.Default.AbstractSingleColumnAttribute : object {
    public sealed virtual string ColumnName(string name);
    private void ThrowTypeError(object value, Type t);
    protected void EnsureType(object value, Type t);
    protected TypeConverter EnsureConvertibleType(object value, Type t);
    protected object ConvertFromConverter(object value, Type type);
    public abstract virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public abstract class Eco.Persistence.Default.AbstractStringSingleColumnAttribute : AbstractSingleColumnAttribute {
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
}
public class Eco.Persistence.Default.BooleanAsInteger : AbstractSingleColumnAttribute {
    public string TrueString { get; }
    public sealed virtual Type ValueType();
    public virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual string get_TrueString();
}
public class Eco.Persistence.Default.BooleanAsYNChar : AbstractSingleColumnAttribute {
    public string TrueString { get; }
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual string get_TrueString();
}
public class Eco.Persistence.Default.ByteAsSmallInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.CharAsChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.CharAsNChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.ColorAsInteger : AbstractSingleColumnAttribute {
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual Type ValueType();
    private bool TryParseColor(string value, Color& result);
    private bool TryParseKnownColor(string name, Color& result);
    private bool TryParseHexValue(string hexValue, Color& result);
}
public class Eco.Persistence.Default.DateTimeAsDateTime : GenericDateTimeMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.DateTimeAsDateTime2 : GenericDateTimeMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.DateTimeAsSmallDateTime : GenericDateTimeMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.DateTimeAsTimeStamp : GenericDateTimeMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.DecimalAsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.DoubleAsDouble : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.DoubleAsNumeric : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.GenericAttributeMapper : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public abstract class Eco.Persistence.Default.GenericDateTimeMapper : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public abstract virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Default.GenericEnumAsInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public void StringToParameter(string value, IDataParameter parameter, Type expectedType);
    public virtual object ColumnToValue(object columnValue);
    private object convertToInt32(object value);
    public sealed virtual object ColumnToValue(object columnValue, Type expectedType);
    public virtual bool IsEqual(object value, object columnValue);
    public sealed virtual Type ValueType();
}
public class Eco.Persistence.Default.GenericEnumAsNVarChar : GenericEnumAsVarChar {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.GenericEnumAsVarChar : AbstractStringSingleColumnAttribute {
    public virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public void StringToParameter(string value, IDataParameter parameter, Type expectedType);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual object ColumnToValue(object columnValue, Type expectedType);
    public virtual bool IsEqual(object value, object columnValue);
    public sealed virtual Type ValueType();
}
public abstract class Eco.Persistence.Default.GenericTimeSpanMapper : AbstractSingleColumnAttribute {
    private DateTime ZeroDateTime;
    public sealed virtual Type ValueType();
    public abstract virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Default.GuidAsNVarChar32 : GuidAsVarChar32 {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.GuidAsVarChar32 : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.Int16AsSmallint : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.Int32AsInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.Int64AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.InvalidFieldTypeException : Exception {
    public InvalidFieldTypeException(string message);
    public InvalidFieldTypeException(string message, Exception inner);
    protected InvalidFieldTypeException(SerializationInfo info, StreamingContext context);
}
public class Eco.Persistence.Default.MappingUtils : object {
    public static object ConvertStringToInt64(string value);
    public static object ConvertStringToBoolean(string value);
    public static object ConvertStringToInt32(string value);
    public static object ConvertStringToInt16(string value);
    public static object ConvertStringToByte(string value);
    public static object ConvertStringToSByte(string value);
    public static object ConvertStringToChar(string value);
    public static object ConvertStringToDouble(string value);
    public static object ConvertStringToSingle(string value);
    public static object ConvertStringToDecimal(string value);
    public static object ConvertStringToDateTime(string value);
    public static object ConvertStringToTimespan(string value);
    public static bool CharArraysAreEqual(object value, object columnValue);
    public static bool ByteArraysAreEqual(object value, object columnValue);
    public static bool DateTimeIsEqual(object value, object columnValue);
    public static bool TimeSpanIsEqual(object value, object columnValue);
}
public class Eco.Persistence.Default.SByteAsSmallInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.SingleAsSingle : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.StringAsChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.StringAsNChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.StringAsNVarChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.StringAsVarChar : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.TimeSpanAsDateTime : GenericTimeSpanMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.TimeSpanAsTimeStamp : GenericTimeSpanMapper {
    public virtual string ColumnType(int length);
}
public class Eco.Persistence.Default.TimeStampAsTwoInt32 : object {
    private Int32AsInteger intmapper;
    private void ThrowTypeError(object value, Type t);
    protected void EnsureType(object value, Type t);
    public sealed virtual String[] ColumnNames(string name);
    public sealed virtual String[] ColumnTypes(int length);
    public sealed virtual String[] DefaultDbValues(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    private object ColumnValuesToValue(Object[] columnValues);
    private Object[] ValueToColumnValues(object value);
    public sealed virtual void ValueToParameters(object value, IDataParameter[] parameters);
    public sealed virtual object ColumnsToValue(Object[] columnValues);
    public sealed virtual bool IsEqual(object value, Object[] columnValues);
}
public class Eco.Persistence.Default.UInt16AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.UInt32AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Default.UInt64AsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.DefaultEcoIdMapper : DefaultEcoKeyMapperBase {
    private ThreadLocal`1<int> m_LastReservedId;
    private ThreadLocal`1<int> m_NextId;
    public static string DefaultKeyMapperName;
    protected ISingleColumnAttributemapping KeyMapping { get; }
    private static DefaultEcoIdMapper();
    protected virtual ISingleColumnAttributemapping get_KeyMapping();
    public virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
}
public class Eco.Persistence.DefaultEcoInt64KeyMapper : DefaultEcoKeyMapperBase {
    private ThreadLocal`1<long> m_LastReservedId;
    private ThreadLocal`1<long> m_NextId;
    private ISingleColumnAttributemapping m_Int64Mapper;
    public static string Int64KeyMapperName;
    public ISingleColumnAttributemapping Int64Mapper { get; }
    protected ISingleColumnAttributemapping KeyMapping { get; }
    private static DefaultEcoInt64KeyMapper();
    protected virtual void InternalInitialize(SqlDatabaseConfig sqlDatabaseConfig, ArrayList keyMappers);
    public ISingleColumnAttributemapping get_Int64Mapper();
    protected virtual ISingleColumnAttributemapping get_KeyMapping();
    public virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
}
public abstract class Eco.Persistence.DefaultEcoKeyMapperBase : GenericKeyMapper {
    private ThreadLocal`1<int> m_ReservedCount;
    protected static string IDTABLE_NAME;
    protected static string IDCOLUMN_NAME;
    protected static int INTERNALNULLKEY;
    protected ISingleColumnAttributemapping KeyMapping { get; }
    public bool UseInternalNullKey { get; }
    protected ThreadLocal`1<int> ReservedCount { get; }
    private static DefaultEcoKeyMapperBase();
    protected abstract virtual ISingleColumnAttributemapping get_KeyMapping();
    public bool get_UseInternalNullKey();
    protected string EffectiveIdTableName();
    protected string InternalColumnType(int columnNum);
    public sealed virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    public abstract virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual int ColumnCount();
    protected ThreadLocal`1<int> get_ReservedCount();
    public sealed virtual void ReserveId();
    public sealed virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public sealed virtual void InitializePSDescriptions(IDatabaseDefinition idb);
    public sealed virtual void InitializeDatabase(IDatabase db);
    public sealed virtual void InitializeDatabaseScript(IList`1<string> script);
    public sealed virtual IdAllocationMode GetIdAllocationMode();
    public sealed virtual string ColumnType(ArrayList KeyMappers, int columnNum);
    public sealed virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    public virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
}
public class Eco.Persistence.DistributedTransactionManager : object {
    private TransactionUtil transactionUtil;
    private sealed virtual override void Eco.Persistence.Connection.ITransactionManager.PerformOperationInTransaction(object operationParams, ITransactionable callback, IDatabaseCollection databases);
}
public class Eco.Persistence.Evolutor.TBoldAddColumn : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <ColumnDesc>k__BackingField;
    public ColumnDefinition ColumnDesc { get; private set; }
    public TBoldAddColumn(TBoldDataBaseEvolutorScript script, ColumnDefinition columnDesc);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_ColumnDesc();
    [CompilerGeneratedAttribute]
private void set_ColumnDesc(ColumnDefinition value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldAddTable : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableDefinition <TableDescr>k__BackingField;
    public TableDefinition TableDescr { get; private set; }
    public TBoldAddTable(TBoldDataBaseEvolutorScript script, TableDefinition tableDescr);
    [CompilerGeneratedAttribute]
public TableDefinition get_TableDescr();
    [CompilerGeneratedAttribute]
private void set_TableDescr(TableDefinition value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldCopyInstances : TBoldTwoTableOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassDefinition <TargetClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldMoveData <MoveData>k__BackingField;
    public string ExpressionName { get; private set; }
    public ClassDefinition TargetClassDef { get; private set; }
    public TBoldMoveData MoveData { get; public set; }
    public TBoldCopyInstances(TBoldDataBaseEvolutorScript script, string expressionName, AliasDefinition sourceAlias, AliasDefinition targetAlias, ClassDefinition targetClassDef);
    [CompilerGeneratedAttribute]
public string get_ExpressionName();
    [CompilerGeneratedAttribute]
private void set_ExpressionName(string value);
    [CompilerGeneratedAttribute]
public ClassDefinition get_TargetClassDef();
    [CompilerGeneratedAttribute]
private void set_TargetClassDef(ClassDefinition value);
    [CompilerGeneratedAttribute]
public TBoldMoveData get_MoveData();
    [CompilerGeneratedAttribute]
public void set_MoveData(TBoldMoveData value);
    public void Execute_AddTypeDiscriminatorConditions(AliasDefinition Alias, IList`1<string> WhereConds);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldDataBaseEvolutor : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnSupervisedTryToRepair>k__BackingField;
    private SqlDatabaseConfig fSqlConfig;
    private SystemPersistenceMapper fPersistenceMapper;
    private IDatabase fDatabase;
    private TBoldDataBaseEvolutorScript fPreScript;
    private TBoldDataBaseEvolutorScript fScript;
    private ORMappingDefinition fOldMapping;
    private ORMappingDefinition fNewMapping;
    private IORMappingProvider fOldMappingProvider;
    private IORMappingProvider fNewMappingProvider;
    private Hashtable fOldTables;
    private Hashtable fNewColumns;
    private Hashtable fOldColumns;
    private Hashtable fNewTables;
    private IEcoTypeSystem fNewTypeSystem;
    private List`1<string> fErrors;
    private List`1<string> fExistingInstances;
    private FormerNamesHandler fFormerNames;
    public bool UnSupervisedTryToRepair { get; public set; }
    private ORMappingDefinition OldMapping { get; }
    private ORMappingDefinition NewMapping { get; }
    private IList`1<string> Errors { get; }
    private Hashtable OldTables { get; }
    private Hashtable NewTables { get; }
    private Hashtable NewColumns { get; }
    private Hashtable OldColumns { get; }
    private SqlDatabaseConfig SqlConfig { get; }
    private TBoldDataBaseEvolutorScript Script { get; }
    private TBoldDataBaseEvolutorScript PreScript { get; }
    public IDatabase Database { get; }
    public TBoldDataBaseEvolutor(IDatabase database, SqlDatabaseConfig SqlConfig, SystemPersistenceMapper PersistenceMapper, IORMappingProvider OldMappingProvider, IORMappingProvider NewMappingProvider, FormerNamesHandler FormerNames, IEcoTypeSystem typeSystem);
    [CompilerGeneratedAttribute]
public bool get_UnSupervisedTryToRepair();
    [CompilerGeneratedAttribute]
public void set_UnSupervisedTryToRepair(bool value);
    private ORMappingDefinition get_OldMapping();
    private ORMappingDefinition get_NewMapping();
    private IList`1<string> get_Errors();
    private Hashtable get_OldTables();
    private Hashtable get_NewTables();
    private Hashtable get_NewColumns();
    private Hashtable get_OldColumns();
    private SqlDatabaseConfig get_SqlConfig();
    private TBoldDataBaseEvolutorScript get_Script();
    private TBoldDataBaseEvolutorScript get_PreScript();
    private void AddNewColumns();
    private void AddNewInstances();
    private void AddNewTables();
    private void DeleteOldInstances();
    private void DropOldColumns();
    private void DropOldTables();
    public sealed virtual void CalculateScript();
    private bool HasStorageMapping(ClassDefinition ClassDef, AliasDefinition Alias);
    public void InitializeTableData_AddName(string Name, Hashtable List);
    private void InitializeTableData(Hashtable TableList, Hashtable ColumnList, ORMappingDefinition MappingInfo);
    private void ForEachMemberMappingPair(TBoldMemberMappingPairAction Action, bool IgnoreInstances, IList`1<string> Param);
    private void CheckNewAttributes(IList`1<string> Info);
    private void MoveDataAction(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping, object Param);
    private void MoveData();
    private void MoveDataBetweenMappings(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping);
    private ClassDefinition TranslateClassName(ClassDefinition ClassDef, ORMappingDefinition SourceMapping, ORMappingDefinition DestMapping);
    private StructuralFeatureDefinition TranslateMemberName(ClassDefinition SourceClass, ClassDefinition DestClass, StructuralFeatureDefinition SourceMember, ORMappingDefinition SourceMapping, ORMappingDefinition DestMapping);
    public sealed virtual void ExecuteScript();
    public sealed virtual String[] GenerateDbScript();
    public sealed virtual String[] GenerateMappingScript();
    private void DetectMapperChange(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping, IList`1<string> Param);
    public sealed virtual String[] GenerateWarnings();
    private void DetectTypeClashes();
    private void DetectTypeClashesAction(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping, object Param);
    public sealed virtual String[] GenerateExecutedStatements();
    public sealed virtual String[] GenerateErrors();
    public sealed virtual FormerNamesHandler GetFormerNamesHandler();
    public IDatabase get_Database();
}
public class Eco.Persistence.Evolutor.TBoldDataBaseEvolutorScript : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnSupervisedTryToRepairOnScript>k__BackingField;
    private ArrayList fAddedTables;
    private ArrayList fAddedColumns;
    private ArrayList fCopiedInstances;
    private ArrayList fDeletedInstances;
    private ArrayList fDroppedColumns;
    private ArrayList fDroppedTables;
    private ArrayList fMovedData;
    private Hashtable fDroppedIndices;
    private List`1<string> fScript;
    private IDatabase fDataBase;
    private List`1<string> fSQLStatements;
    private List`1<string> fInternalLog;
    private List`1<TableDefinition> _RecreateTables;
    internal SqlDatabaseConfig fSQLDataBaseConfig;
    public bool UnSupervisedTryToRepairOnScript { get; public set; }
    public SqlDatabaseConfig SQLDataBaseConfig { get; }
    public List`1<string> InternalLog { get; }
    [CompilerGeneratedAttribute]
public bool get_UnSupervisedTryToRepairOnScript();
    [CompilerGeneratedAttribute]
public void set_UnSupervisedTryToRepairOnScript(bool value);
    protected TBoldAddTable GetAddedTables(int index);
    protected TBoldAddColumn GetAddedColumns(int index);
    protected TBoldDropTable GetDroppedTables(int index);
    protected TBoldDropColumn GetDroppedColumns(int index);
    protected TBoldCopyInstances GetCopiedInstances(int index);
    protected TBoldMoveData GetMovedData(int index);
    protected TBoldDeleteInstances GetDeletedInstances(int index);
    public SqlDatabaseConfig get_SQLDataBaseConfig();
    public List`1<string> get_InternalLog();
    public void AddColumn(ColumnDefinition ColumnDesc);
    public void AddTable(TableDefinition TableDescr);
    public void CopyInstances(string ExpressionName, AliasDefinition SourceAlias, AliasDefinition TargetAlias, ClassDefinition TargetClassDef);
    public void DeleteInstances(ClassDefinition ClassDef, AliasDefinition Alias);
    public void DropColumn(string TableName, string ColumnName);
    public void PossiblyRecreateTable(TableDefinition td);
    private void RecreateTable(TableDefinition tableDefinition);
    public void DropTable(string TableName);
    public void UpdateDatabase(IDatabase DataBase, SqlDatabaseConfig SQLDataBaseConfig);
    public void GenerateScript(List`1<string> Script, SqlDatabaseConfig SQLDataBaseConfig);
    public void MoveData(AliasDefinition SourceAlias, AliasDefinition TargetAlias, string SourceColumn, string TargetColumn, ClassDefinition TargetClassDef);
    protected void Execute();
    public void Comment(string msg, Object[] Args);
    public void ExecuteSQL(string SQL);
    public void OptimizeScript();
    public void DropIndex(string IndexName, string TableName);
    public void AddSQLStatement(string sql);
    private void AdjustContents();
    private void ExtendSchema();
    private void ReduceSchema();
    private void ExecuteSQLStatements();
    private void AddCommandToScript(string s);
    private bool StartTransaction();
    private void CommitTransaction();
    private void RollBackTransaction();
}
public class Eco.Persistence.Evolutor.TBoldDeleteInstances : TBoldTableOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassDefinition <ClassDef>k__BackingField;
    public ClassDefinition ClassDef { get; private set; }
    public TBoldDeleteInstances(TBoldDataBaseEvolutorScript script, ClassDefinition classDef, AliasDefinition alias);
    [CompilerGeneratedAttribute]
public ClassDefinition get_ClassDef();
    [CompilerGeneratedAttribute]
private void set_ClassDef(ClassDefinition value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldDropColumn : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    public string ColumnName { get; private set; }
    public string TableName { get; private set; }
    public TBoldDropColumn(TBoldDataBaseEvolutorScript script, string tableName, string columnName);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldDropIndex : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    public string IndexName { get; private set; }
    public string TableName { get; private set; }
    public TBoldDropIndex(TBoldDataBaseEvolutorScript script, string indexName, string tableName);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
private void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldDropTable : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    public string TableName { get; private set; }
    public TBoldDropTable(TBoldDataBaseEvolutorScript script, string tableName);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    public void Execute();
}
public class Eco.Persistence.Evolutor.TBoldMemberMappingPairAction : MulticastDelegate {
    public TBoldMemberMappingPairAction(object object, IntPtr method);
    public virtual void Invoke(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping, IList`1<string> Param);
    public virtual IAsyncResult BeginInvoke(ClassDefinition NewClassDef, ClassDefinition OldClassDef, StructuralFeatureDefinition NewMemberMapping, StructuralFeatureDefinition OldMemberMapping, IList`1<string> Param, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.Persistence.Evolutor.TBoldMoveData : TBoldTwoColumnOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassDefinition <TargetClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldMoveData <AlsoMoveData>k__BackingField;
    public ClassDefinition TargetClassDef { get; private set; }
    public string Signature { get; }
    public TBoldMoveData AlsoMoveData { get; public set; }
    public TBoldMoveData(TBoldDataBaseEvolutorScript script, AliasDefinition sourceAlias, AliasDefinition targetAlias, string sourceColumn, string targetColumn, ClassDefinition targetClassDef);
    [CompilerGeneratedAttribute]
public ClassDefinition get_TargetClassDef();
    [CompilerGeneratedAttribute]
private void set_TargetClassDef(ClassDefinition value);
    public string get_Signature();
    [CompilerGeneratedAttribute]
public TBoldMoveData get_AlsoMoveData();
    [CompilerGeneratedAttribute]
public void set_AlsoMoveData(TBoldMoveData value);
    public void Execute();
    public sealed virtual int CompareTo(object o);
}
public class Eco.Persistence.Evolutor.TBoldScriptOperation : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldDataBaseEvolutorScript <Script>k__BackingField;
    protected TBoldDataBaseEvolutorScript Script { get; private set; }
    public TBoldScriptOperation(TBoldDataBaseEvolutorScript script);
    [CompilerGeneratedAttribute]
protected TBoldDataBaseEvolutorScript get_Script();
    [CompilerGeneratedAttribute]
private void set_Script(TBoldDataBaseEvolutorScript value);
    protected string QuoteName(string name);
}
public class Eco.Persistence.Evolutor.TBoldTableOperation : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <Alias>k__BackingField;
    public AliasDefinition Alias { get; private set; }
    public TBoldTableOperation(TBoldDataBaseEvolutorScript script, AliasDefinition alias);
    [CompilerGeneratedAttribute]
public AliasDefinition get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(AliasDefinition value);
}
public class Eco.Persistence.Evolutor.TBoldTwoColumnOperation : TBoldTwoTableOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TargetColumn>k__BackingField;
    public string SourceColumn { get; private set; }
    public string TargetColumn { get; private set; }
    public TBoldTwoColumnOperation(TBoldDataBaseEvolutorScript script, AliasDefinition sourceAlias, AliasDefinition targetAlias, string sourceColumn, string targetColumn);
    [CompilerGeneratedAttribute]
public string get_SourceColumn();
    [CompilerGeneratedAttribute]
private void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public string get_TargetColumn();
    [CompilerGeneratedAttribute]
private void set_TargetColumn(string value);
}
public class Eco.Persistence.Evolutor.TBoldTwoTableOperation : TBoldScriptOperation {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <SourceAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <TargetAlias>k__BackingField;
    public AliasDefinition SourceAlias { get; private set; }
    public AliasDefinition TargetAlias { get; private set; }
    public TBoldTwoTableOperation(TBoldDataBaseEvolutorScript script, AliasDefinition sourceAlias, AliasDefinition targetAlias);
    [CompilerGeneratedAttribute]
public AliasDefinition get_SourceAlias();
    [CompilerGeneratedAttribute]
private void set_SourceAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_TargetAlias();
    [CompilerGeneratedAttribute]
private void set_TargetAlias(AliasDefinition value);
}
public abstract class Eco.Persistence.GenericKeyMapper : object {
    private SqlDatabaseConfig m_SqlDatabaseConfig;
    private PersistenceMapperDictionary m_MapperDictionary;
    private ISingleColumnAttributemapping m_Int32Mapper;
    private ISingleColumnAttributemapping m_Int16Mapper;
    private ArrayList m_KeyMappers;
    public ISingleColumnAttributemapping Int32Mapper { get; }
    public ISingleColumnAttributemapping Int16Mapper { get; }
    public SqlDatabaseConfig SqlDatabaseConfig { get; }
    public PersistenceMapperDictionary MapperDictionary { get; }
    public ArrayList KeyMappers { get; }
    public ISingleColumnAttributemapping get_Int32Mapper();
    public ISingleColumnAttributemapping get_Int16Mapper();
    private string GetParamStr(ObjectId id, int index, bool useParams, IParameterized parameterized, ISingleColumnAttributemapping mapper, string idPrefix);
    protected string InternalIdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, ISingleColumnAttributemapping mapper, string idPrefix);
    protected virtual void InternalInitialize(SqlDatabaseConfig sqlDatabaseConfig, ArrayList keyMappers);
    public SqlDatabaseConfig get_SqlDatabaseConfig();
    public PersistenceMapperDictionary get_MapperDictionary();
    public ArrayList get_KeyMappers();
    public ISingleColumnAttributemapping GetKeyMapper(int index);
    public sealed virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns);
    public abstract virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
    public sealed virtual string IdToWhereFragment(ObjectId id, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
    public sealed virtual string IdToWhereFragment(ObjectId id, IParameterized parameterized, IList`1<string> idColumns);
}
public class Eco.Persistence.GuidKeyMapper : GenericKeyMapper {
    private ISingleColumnAttributemapping m_GuidMapper;
    private string InternalColumnType(int columnNum);
    public sealed virtual void IdToParameters(ObjectId id, IDataParameter[] parameters);
    public sealed virtual ObjectId IdFromFields(IField[] keyFields, ArrayList keyMappers, int classId, int timeStamp);
    public sealed virtual int ColumnCount();
    public sealed virtual void ReserveId();
    public sealed virtual ObjectId NewIdPreUpdate(IDatabase db, ObjectId oldId);
    public sealed virtual ObjectId NewIdFromAttributes(ObjectContents objContents, ArrayList memberIndexes, IdTranslationList translationList);
    public sealed virtual void InitializePSDescriptions(IDatabaseDefinition db);
    public sealed virtual void InitializeDatabase(IDatabase db);
    public sealed virtual void InitializeDatabaseScript(IList`1<string> script);
    public sealed virtual IdAllocationMode GetIdAllocationMode();
    public sealed virtual string ColumnType(ArrayList KeyMappers, int columnNum);
    public sealed virtual void Initialize(SqlDatabaseConfig config, ArrayList keyMappers);
    public virtual string IdListToWhereFragment(ObjectIdCollection idList, IParameterized parameterized, IList`1<string> idColumns, string idPrefix);
}
public interface Eco.Persistence.IAutoIncIdMapper {
    public abstract virtual void InitializeAutoIncField(string tableName, string columnName, IDatabase database);
    public abstract virtual string ColumnTypeForAutoInc();
    public abstract virtual string GetAutoIncValueRetrievalQuery(string tableName, string columnName);
}
public interface Eco.Persistence.IDistributedTransactionParticipant {
    public abstract virtual void EnlistInTransaction(object transaction);
}
public class Eco.Persistence.Impl.ClassMapperList : List`1<ClassPersistenceMapper> {
}
public class Eco.Persistence.Impl.ClassPersistenceMapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasSubClasses>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLinkClass>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <MainAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBoldMemberPersistenceMapperList <MemberPersistenceMappers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassPersistenceMapper <SuperClassMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassMapperList <DirectSubClasses>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassMapperList <AllSubClassesIncludingSelf>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SystemPersistenceMapper <SystemPersistenceMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TopSortedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Versioned>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasCollection <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiscriminatorDefCollection <Discriminators>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyDefinitionCollection <KeyDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyDefinition <IdKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <StartTimeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <StopTimeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasAbstractMembers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IntroducesIdMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StaticDependencyEquivalenceGroup <EquivalenceGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasEmbeddedSingleLinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasSecondaryKeyLinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllSubclassesHasSameKeyDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClass <UmlClass>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ExtentRequiresDiscriminator>k__BackingField;
    private int m_LinkRoleMapperIndex1;
    private int m_LinkRoleMapperIndex2;
    private Int32[] m_MemberMapperIndexByMemberIndex;
    private IKeyMapper m_IdMapper;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Hashtable <fMemberIndexListForKeyDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <PrimaryAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OptimisticLockingMode <OptimisticLockingMode>k__BackingField;
    private static TimeSpan gctimer;
    private static DateTime LastGC;
    public string ExpressionName { get; private set; }
    public bool HasSubClasses { get; private set; }
    public bool IsLinkClass { get; private set; }
    public TBoldMemberPersistenceMapper LinkClassRole1 { get; }
    public TBoldMemberPersistenceMapper LinkClassRole2 { get; }
    public AliasDefinition MainAlias { get; private set; }
    public TBoldMemberPersistenceMapperList MemberPersistenceMappers { get; private set; }
    public ClassPersistenceMapper SuperClassMapper { get; private set; }
    public ClassMapperList DirectSubClasses { get; private set; }
    public ClassMapperList AllSubClassesIncludingSelf { get; private set; }
    public SystemPersistenceMapper SystemPersistenceMapper { get; private set; }
    public int TopSortedIndex { get; private set; }
    public bool Versioned { get; private set; }
    public AliasCollection Aliases { get; private set; }
    public DiscriminatorDefCollection Discriminators { get; private set; }
    public KeyDefinitionCollection KeyDefinitions { get; private set; }
    public IKeyMapper IdMapper { get; }
    public KeyDefinition IdKey { get; private set; }
    public bool IsAbstract { get; private set; }
    public AliasDefinition StartTimeAlias { get; private set; }
    public AliasDefinition StopTimeAlias { get; private set; }
    public bool HasAbstractMembers { get; internal set; }
    public bool IntroducesIdMapper { get; private set; }
    public StaticDependencyEquivalenceGroup EquivalenceGroup { get; public set; }
    public bool HasEmbeddedSingleLinks { get; private set; }
    public bool HasSecondaryKeyLinks { get; public set; }
    public bool AllSubclassesHasSameKeyDef { get; public set; }
    public string DbName { get; private set; }
    public IClass UmlClass { get; private set; }
    public bool ExtentRequiresDiscriminator { get; private set; }
    internal Hashtable fMemberIndexListForKeyDefinition { get; internal set; }
    internal AliasDefinition PrimaryAlias { get; private set; }
    internal OptimisticLockingMode OptimisticLockingMode { get; private set; }
    public ClassPersistenceMapper(IClass umlClass, ClassDefinition classDef, SystemPersistenceMapper Owner, IDatabaseCollection Databases);
    private static ClassPersistenceMapper();
    [CompilerGeneratedAttribute]
public string get_ExpressionName();
    [CompilerGeneratedAttribute]
private void set_ExpressionName(string value);
    [CompilerGeneratedAttribute]
public bool get_HasSubClasses();
    [CompilerGeneratedAttribute]
private void set_HasSubClasses(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLinkClass();
    [CompilerGeneratedAttribute]
private void set_IsLinkClass(bool value);
    public TBoldMemberPersistenceMapper get_LinkClassRole1();
    public TBoldMemberPersistenceMapper get_LinkClassRole2();
    [CompilerGeneratedAttribute]
public AliasDefinition get_MainAlias();
    [CompilerGeneratedAttribute]
private void set_MainAlias(AliasDefinition value);
    public int MemberMapperIndexByMemberIndex(int MemberIndex);
    [CompilerGeneratedAttribute]
public TBoldMemberPersistenceMapperList get_MemberPersistenceMappers();
    [CompilerGeneratedAttribute]
private void set_MemberPersistenceMappers(TBoldMemberPersistenceMapperList value);
    [CompilerGeneratedAttribute]
public ClassPersistenceMapper get_SuperClassMapper();
    [CompilerGeneratedAttribute]
private void set_SuperClassMapper(ClassPersistenceMapper value);
    [CompilerGeneratedAttribute]
public ClassMapperList get_DirectSubClasses();
    [CompilerGeneratedAttribute]
private void set_DirectSubClasses(ClassMapperList value);
    [CompilerGeneratedAttribute]
public ClassMapperList get_AllSubClassesIncludingSelf();
    [CompilerGeneratedAttribute]
private void set_AllSubClassesIncludingSelf(ClassMapperList value);
    [CompilerGeneratedAttribute]
public SystemPersistenceMapper get_SystemPersistenceMapper();
    [CompilerGeneratedAttribute]
private void set_SystemPersistenceMapper(SystemPersistenceMapper value);
    [CompilerGeneratedAttribute]
public int get_TopSortedIndex();
    [CompilerGeneratedAttribute]
private void set_TopSortedIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_Versioned();
    [CompilerGeneratedAttribute]
private void set_Versioned(bool value);
    [CompilerGeneratedAttribute]
public AliasCollection get_Aliases();
    [CompilerGeneratedAttribute]
private void set_Aliases(AliasCollection value);
    [CompilerGeneratedAttribute]
public DiscriminatorDefCollection get_Discriminators();
    [CompilerGeneratedAttribute]
private void set_Discriminators(DiscriminatorDefCollection value);
    [CompilerGeneratedAttribute]
public KeyDefinitionCollection get_KeyDefinitions();
    [CompilerGeneratedAttribute]
private void set_KeyDefinitions(KeyDefinitionCollection value);
    public IKeyMapper get_IdMapper();
    [CompilerGeneratedAttribute]
public KeyDefinition get_IdKey();
    [CompilerGeneratedAttribute]
private void set_IdKey(KeyDefinition value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
private void set_IsAbstract(bool value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_StartTimeAlias();
    [CompilerGeneratedAttribute]
private void set_StartTimeAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_StopTimeAlias();
    [CompilerGeneratedAttribute]
private void set_StopTimeAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public bool get_HasAbstractMembers();
    [CompilerGeneratedAttribute]
internal void set_HasAbstractMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IntroducesIdMapper();
    [CompilerGeneratedAttribute]
private void set_IntroducesIdMapper(bool value);
    [CompilerGeneratedAttribute]
public StaticDependencyEquivalenceGroup get_EquivalenceGroup();
    [CompilerGeneratedAttribute]
public void set_EquivalenceGroup(StaticDependencyEquivalenceGroup value);
    [CompilerGeneratedAttribute]
public bool get_HasEmbeddedSingleLinks();
    [CompilerGeneratedAttribute]
private void set_HasEmbeddedSingleLinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSecondaryKeyLinks();
    [CompilerGeneratedAttribute]
public void set_HasSecondaryKeyLinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllSubclassesHasSameKeyDef();
    [CompilerGeneratedAttribute]
public void set_AllSubclassesHasSameKeyDef(bool value);
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
private void set_DbName(string value);
    [CompilerGeneratedAttribute]
public IClass get_UmlClass();
    [CompilerGeneratedAttribute]
private void set_UmlClass(IClass value);
    [CompilerGeneratedAttribute]
public bool get_ExtentRequiresDiscriminator();
    [CompilerGeneratedAttribute]
private void set_ExtentRequiresDiscriminator(bool value);
    [CompilerGeneratedAttribute]
internal Hashtable get_fMemberIndexListForKeyDefinition();
    [CompilerGeneratedAttribute]
internal void set_fMemberIndexListForKeyDefinition(Hashtable value);
    [CompilerGeneratedAttribute]
internal AliasDefinition get_PrimaryAlias();
    [CompilerGeneratedAttribute]
private void set_PrimaryAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
internal OptimisticLockingMode get_OptimisticLockingMode();
    [CompilerGeneratedAttribute]
private void set_OptimisticLockingMode(OptimisticLockingMode value);
    private void FindExtendingMappers(ClassPersistenceMapper classMapper, ClassMapperList extendingMappers);
    internal void ExactifyByExtent(IDatabaseCollection databases, InexactIdList ids, IdTranslationList translationList, int Timestamp);
    private bool CanExactifyClass(DiscriminatorDef discriminator, int TopSortedIndex);
    internal void Exactify(IDatabaseCollection Databases, InexactIdList IdList, IdTranslationList TranslationList, int Timestamp);
    public void CreatePersistentStorage(IDatabase Database);
    internal void BuildMappingStructs(ClassDefinition ClassDef, IDatabase Database);
    public virtual void PMFetchPolymorphIdList(IDatabaseCollection databases, ObjectIdCollection idList, Datablock dataBlock, Int32[] memberIdList, FetchMode fetchMode, IdTranslationList translationList, FetchStrategy fetchStrategy);
    private void FillInMembers(IClass umlClass, ClassDefinition classDef, IDatabase database);
    public bool EcoIsA(ClassPersistenceMapper ObjectPMapper);
    private void BuildMemberFetchLists_TestAdd(TBoldMemberPersistenceMapper MemberMapper, TBoldMemberPersistenceMapperList DefaultFetchMemberList, TBoldMemberPersistenceMapperList CustomFetchMemberList, bool includeDelayed);
    public void BuildMemberFetchLists(Int32[] MemberIdList, TBoldMemberPersistenceMapperList DefaultFetchMemberList, TBoldMemberPersistenceMapperList CustomFetchMemberList, FetchMode FetchMode);
    internal ClassPersistenceMapper LeastCommonSuperClassMapper(ClassPersistenceMapper ObjectMapper);
    private ClassPersistenceMapper LeastCommonSuperMapper(ClassPersistenceMapper ObjectPMapper);
    public void ValuesFromFieldsByMemberList(ObjectContents ObjContents, InexactIdList RequiresExactification, IDataSet DataSet, TBoldMemberPersistenceMapperList memberList);
    public IField[] ExtractFields(IQuery Query, ColumnReferenceCollection ColumnReferences);
    public IField[] ExtractFields(IQuery Query, ColumnReferenceCollection ColumnReferences, string columnPrefix);
    public void ValuesToParamsByMemberList(ObjectId Id, Datablock ValueSpace, IExecQuery Query, TBoldMemberPersistenceMapperList memberList, IdTranslationList TranslationList, TDatabaseCollection Databases);
    public virtual void GenerateDatabaseScript(IList`1<string> Script);
    internal void GetListUsingQuery(IDatabaseCollection databases, ObjectIdList resultList, IQuery aQuery, int timestamp, int maxAnswers, int offset, DiscriminatorImplementationCollection discriminators);
    private void PMUpdateStopTime(TDatabaseCollection Databases, ObjectIdCollection IdList);
    private void PurgeVersionsLowerThan(TDatabaseCollection Databases, int version);
    public void PMCreate_CreateInAlias(TDatabaseCollection Databases, AliasDefinition Alias, IExecQuery aQuery, TDatabaseRT DatabaseRT, ObjectIdList SortedIdList, Datablock ValueSpace, IdTranslationList TranslationList, bool containsDependencies);
    public void PMCreate(TDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, IdTranslationList TranslationList, bool containsDependencies);
    private void FillDiscriminatorParameter(DiscriminatorImplementation disc, IExecQuery aQuery);
    private void PMTemporalUpdate(TDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, IdTranslationList TranslationList);
    public void PMUpdate(TDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, Datablock Old_Values, IdTranslationList TranslationList, bool onlySinglelinks, bool passToNullOutOneToOne);
    public void PMDelete_DeleteInAlias(AliasDefinition Alias, ObjectIdCollection IdListBlock, IExecQuery aQuery, SqlDatabaseConfig Config);
    public void PMDelete(TDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, Datablock Old_Values, IdTranslationList TranslationList);
    internal void PMMultiPurposeRetrievePolymorphIdList(IDatabaseCollection Databases, ObjectIdCollection ObjectsToFetch, Datablock Precondition, Int32[] MemberIdList, FetchMode FetchMode, IdTranslationList TranslationList, Datablock FailureList, int Timestamp, FetchStrategy fetchStrategy);
    internal void PMMultiPurposeRetrieveExactIdList(IDatabaseCollection Databases, ObjectIdCollection ObjectsToFetch, Datablock Precondition, Int32[] MemberIdList, FetchMode FetchMode, IdTranslationList TranslationList, Datablock FailureList, int Timestamp, FetchStrategy fetchStrategy);
    private bool CompareFieldsToMembers(ObjectId ID, Datablock ValueSpace, IDataSet DataSet, TBoldMemberPersistenceMapperList memberList, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    public void PMFetchExactIDList(IDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, Int32[] MemberIdList, FetchMode FetchMode, IdTranslationList TranslationList, FetchStrategy fetchStrategy);
    internal void PMFetchWithCondition(IDatabaseCollection Databases, ObjectIdList IdList, AbstractCondition BoldCondition, int MaxResults, int Offset);
    public void FetchPreviousSingleLinkValues(IDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, Datablock Old_Values);
    internal void GetChangePointsQuery(IQuery Query, ObjectIdCollection IdList, int StartTime, int EndTime, TBoldSQLNameSpace __NameSpace);
    public string GetDiscriminatorValuesForSubtree(DiscriminatorImplementation DiscriminatorImpl);
    internal void GetChangePoints(IDatabaseCollection Databases, ObjectIdCollection SourceList, ObjectIdList ResultList, ChangePointCondition Condition, TBoldSQLNameSpace __NameSpace);
    public ArrayList MemberIndexListForKeyDefinition(KeyDefinition KeyDef);
    public string SubClassesId(DiscriminatorDef discriminator, SqlDatabaseConfig SQLDatabaseConfig);
}
public enum Eco.Persistence.Impl.FetchMode : Enum {
    public int value__;
    public static FetchMode Normal;
    public static FetchMode Compare;
    public static FetchMode TimestampCompare;
}
public class Eco.Persistence.Impl.HashKey : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ArrayList <MemberList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassPersistenceMapper <Mapper>k__BackingField;
    public ArrayList MemberList { get; private set; }
    public ClassPersistenceMapper Mapper { get; private set; }
    public HashKey(ClassPersistenceMapper ObjectMapper, ArrayList MemberList);
    [CompilerGeneratedAttribute]
public ArrayList get_MemberList();
    [CompilerGeneratedAttribute]
private void set_MemberList(ArrayList value);
    [CompilerGeneratedAttribute]
public ClassPersistenceMapper get_Mapper();
    [CompilerGeneratedAttribute]
private void set_Mapper(ClassPersistenceMapper value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Eco.Persistence.Impl.InexactIdList : Hashtable {
    private TInexactId fFirstId;
    public bool IsEmpty { get; }
    public bool get_IsEmpty();
    public void Add(TInexactId id);
    public InexactIdList Clone();
    public ObjectIdList CloneToIdList();
    public ObjectIdCollection CloneToIdCollection();
    public TInexactId Any();
    public string CommaSeparatedIdList();
    public TInexactId FindIdIgnoreDescr(TInexactId Id);
}
public class Eco.Persistence.Impl.StaticDependencyEquivalenceGroup : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ContainsCycles>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GroupName>k__BackingField;
    private bool fCalculatingGeneration;
    private int fGeneration;
    private ArrayList fSubGroups;
    private ArrayList fSuperGroups;
    private ArrayList fMappers;
    public int Generation { get; }
    public bool ContainsCycles { get; internal set; }
    public string GroupName { get; private set; }
    public StaticDependencyEquivalenceGroup(string GroupName, ClassPersistenceMapper mapper);
    public int get_Generation();
    [CompilerGeneratedAttribute]
public bool get_ContainsCycles();
    [CompilerGeneratedAttribute]
internal void set_ContainsCycles(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
private void set_GroupName(string value);
    public void AddDependency(StaticDependencyEquivalenceGroup SubGroup);
    public void Merge(StaticDependencyEquivalenceGroup Group);
    public bool Contains(ClassPersistenceMapper mapper);
}
public class Eco.Persistence.Impl.SystemPersistenceMapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <ClockLogGranularity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <ClockLogTableLastClockColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <ClockLogTableLastTimeStampColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <ClockLogTableThisClockColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <ClockLogTableThisTimeStampColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <LastClockTableLastClockColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <LastClockTableLastTimeStampColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassPersistenceMapper[] <ObjectPersistenceMappers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GetDateTimeDelegate <OnGetCurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassPersistenceMapper <RootClassObjectPersistenceMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnDefinition <TimeStampTableTimeStampColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasCollection <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasSecondaryKeyLinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ORMappingDefinition <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableDefinition <TableTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableDefinition <TimeStampTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableDefinition <LastClockTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableDefinition <ClockLogTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEcoTypeSystem <TypeSystem>k__BackingField;
    private int m_HighestGeneration;
    private List`1<string> m_MappingErrors;
    private IImplementorOfViewModelFetch _ImplementorOfViewModelFetch;
    private IImplementorOfRunServerSideViewModelNowCondition _ImplementorOfRunServerSideViewModelNowCondition;
    private IImplementorOfMDrivenCacheCondition _ImplementorOfMDrivenCacheCondition;
    public TimeSpan ClockLogGranularity { get; public set; }
    public ColumnDefinition ClockLogTableLastClockColumn { get; private set; }
    public ColumnDefinition ClockLogTableLastTimeStampColumn { get; private set; }
    public ColumnDefinition ClockLogTableThisClockColumn { get; private set; }
    public ColumnDefinition ClockLogTableThisTimeStampColumn { get; private set; }
    public ColumnDefinition LastClockTableLastClockColumn { get; private set; }
    public ColumnDefinition LastClockTableLastTimeStampColumn { get; private set; }
    public ClassPersistenceMapper[] ObjectPersistenceMappers { get; private set; }
    public GetDateTimeDelegate OnGetCurrentTime { get; public set; }
    public ClassPersistenceMapper RootClassObjectPersistenceMapper { get; private set; }
    public ColumnDefinition TimeStampTableTimeStampColumn { get; private set; }
    public AliasCollection Aliases { get; private set; }
    public bool HasSecondaryKeyLinks { get; public set; }
    public ORMappingDefinition Mapping { get; private set; }
    public TableDefinition TableTable { get; private set; }
    public TableDefinition TimeStampTable { get; private set; }
    public TableDefinition LastClockTable { get; private set; }
    public TableDefinition ClockLogTable { get; private set; }
    public IEcoTypeSystem TypeSystem { get; private set; }
    public SystemPersistenceMapper(ITypeSystemService typeSystemService, ORMappingDefinition mapping, IDatabaseCollection databases);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClockLogGranularity();
    [CompilerGeneratedAttribute]
public void set_ClockLogGranularity(TimeSpan value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_ClockLogTableLastClockColumn();
    [CompilerGeneratedAttribute]
private void set_ClockLogTableLastClockColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_ClockLogTableLastTimeStampColumn();
    [CompilerGeneratedAttribute]
private void set_ClockLogTableLastTimeStampColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_ClockLogTableThisClockColumn();
    [CompilerGeneratedAttribute]
private void set_ClockLogTableThisClockColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_ClockLogTableThisTimeStampColumn();
    [CompilerGeneratedAttribute]
private void set_ClockLogTableThisTimeStampColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_LastClockTableLastClockColumn();
    [CompilerGeneratedAttribute]
private void set_LastClockTableLastClockColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_LastClockTableLastTimeStampColumn();
    [CompilerGeneratedAttribute]
private void set_LastClockTableLastTimeStampColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ClassPersistenceMapper[] get_ObjectPersistenceMappers();
    [CompilerGeneratedAttribute]
private void set_ObjectPersistenceMappers(ClassPersistenceMapper[] value);
    [CompilerGeneratedAttribute]
public GetDateTimeDelegate get_OnGetCurrentTime();
    [CompilerGeneratedAttribute]
public void set_OnGetCurrentTime(GetDateTimeDelegate value);
    [CompilerGeneratedAttribute]
public ClassPersistenceMapper get_RootClassObjectPersistenceMapper();
    [CompilerGeneratedAttribute]
private void set_RootClassObjectPersistenceMapper(ClassPersistenceMapper value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_TimeStampTableTimeStampColumn();
    [CompilerGeneratedAttribute]
private void set_TimeStampTableTimeStampColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public AliasCollection get_Aliases();
    [CompilerGeneratedAttribute]
private void set_Aliases(AliasCollection value);
    [CompilerGeneratedAttribute]
public bool get_HasSecondaryKeyLinks();
    [CompilerGeneratedAttribute]
public void set_HasSecondaryKeyLinks(bool value);
    [CompilerGeneratedAttribute]
public ORMappingDefinition get_Mapping();
    [CompilerGeneratedAttribute]
private void set_Mapping(ORMappingDefinition value);
    [CompilerGeneratedAttribute]
public TableDefinition get_TableTable();
    [CompilerGeneratedAttribute]
private void set_TableTable(TableDefinition value);
    [CompilerGeneratedAttribute]
public TableDefinition get_TimeStampTable();
    [CompilerGeneratedAttribute]
private void set_TimeStampTable(TableDefinition value);
    [CompilerGeneratedAttribute]
public TableDefinition get_LastClockTable();
    [CompilerGeneratedAttribute]
private void set_LastClockTable(TableDefinition value);
    [CompilerGeneratedAttribute]
public TableDefinition get_ClockLogTable();
    [CompilerGeneratedAttribute]
private void set_ClockLogTable(TableDefinition value);
    [CompilerGeneratedAttribute]
public IEcoTypeSystem get_TypeSystem();
    [CompilerGeneratedAttribute]
private void set_TypeSystem(IEcoTypeSystem value);
    private void RecurseConstrainedLinks(ClassPersistenceMapper objectMapper, List`1<ClassPersistenceMapper> stack);
    private void ContraintsForEmbeddedLink(ClassPersistenceMapper objectMapper, List`1<ClassPersistenceMapper> stack, TBoldEmbeddedSingleLinkDefaultMapper singleLinkMapper);
    private void CalculateStaticConstraintOrder();
    public void PMFetch(IDatabaseCollection databases, ObjectIdList idList, Datablock dataBLock, Int32[] memberIds, IdTranslationList translationList, FetchStrategy fetchStrategy);
    private void PMFetchClassWithCondition_FixQueriesForEnv(TBoldOclCondition oclCondition, IQuery query, TBoldSqlVariableBinding varBinding, ObjectIdList context, TBoldSQLNameSpace sqlNameSpace, int paramNum);
    public void PMFetchDataWithCondition(IDatabaseCollection databases, Datablock& result, AbstractCondition condition, int maxResults, int offset);
    private void HandleViewModelQueryplanFetchConditionMulti(IDatabaseCollection databases, Datablock& resultBlock, ViewModelQueryplanFetchConditionMulti viewModelQueryplanFetchConditionMulti);
    private void HandleViewModelQueryplanFetchCondition(IDatabaseCollection databases, Datablock& result, ViewModelQueryplanFetchCondition viewModelQueryplanFetchCondition, HashSet`1& processedAsPK);
    private int GetBestClassIdPossiblySuperClass(int classid, Dictionary`2<int, Int32[]> classidAndItsMembersToFetch);
    private bool TakeIdAddMakeSureWeTryToFetchItsMembersNextPassEvenIfThisIsSubClass(ObjectId id, Dictionary`2<int, Int32[]> classidAndItsMembersToFetch, Dictionary`2<int, ObjectIdList> classidAndIdsToFetch);
    public sealed virtual void InstallIImplementorOfViewModelFetch(IImplementorOfViewModelFetch obj);
    public void InstallIImplementorOfRunsServerSideViewModelNow(IImplementorOfRunServerSideViewModelNowCondition obj);
    public void InstallIImplementorOfMDrivenCacheCondition(IImplementorOfMDrivenCacheCondition obj);
    public virtual void PMFetchClassWithCondition(IDatabaseCollection databases, ObjectIdList& resultList, AbstractCondition condition, int maxResults, int offset);
    private void HandleSQLFormulation(int maxResults, int offset, TBoldOclCondition OclCondition, IDatabase database, IQuery query, TBoldSqlNodeMaker sqlNodeMaker, TBoldSQLNameSpace globalNameSpace, Boolean& containsSQLPassthrough);
    public void DetermineClassId(DiscriminatorDef typeDiscriminator, IField field, Int32& classId, Boolean& exact);
    public void ExactifyByExtent(IDatabaseCollection databases, InexactIdList idList, IdTranslationList translationList, int timestamp);
    public void Exactify(IDatabaseCollection databases, InexactIdList idList, IdTranslationList translationList, int timestamp);
    internal int SplitOnTimeStamp(ObjectIdCollection processNow, ObjectIdCollection processLater);
    internal ClassPersistenceMapper SplitOnClassId(ObjectIdCollection processNow, ObjectIdCollection processLater);
    private void InternalPMCreate(TDatabaseCollection databases, ObjectIdCollection idList, Datablock datablock, IdTranslationList translationList, bool containsDependencies);
    private void InternalPMDelete(TDatabaseCollection databases, ObjectIdCollection idList, Datablock dataBlock, Datablock Old_Values, IdTranslationList TranslationList);
    private void FetchPreviousSingleLinkValues(IDatabaseCollection databases, ObjectIdCollection idList, Datablock datablock, Datablock oldValues);
    private void InternalPMUpdate(TDatabaseCollection databases, ObjectIdCollection idList, Datablock dataBlock, Datablock oldValues, IdTranslationList translationList, bool onlySingleLinks, bool passToNullOutOneToOne);
    public void CreatePersistentStorage(IDatabase database, IConfigureCleanPS configureCleanPS);
    private void FindNonDependent(ObjectIdCollection ids, ObjectIdCollection dependentObjects, ObjectIdCollection nonDependentObjects, Datablock dataBlock, IdTranslationList translationList);
    private bool ObjectRefersToNonSavesObject(ObjectId id, Datablock dataBlock, IdTranslationList translationList);
    private ObjectIdList FindModifiedSecondaryKeyLinks(ObjectIdList IdList, Datablock dataBlock);
    private void ReplaceSecondaryKeyReferences(ObjectIdCollection IdList, Datablock dataBlock, Datablock SecKeyDatablock, IdTranslationList TranslationList);
    public void PMUpdate(IDatabaseCollection databases, ObjectIdList idList, Datablock dataBlock, UpdatePrecondition precondition, IdTranslationList translationList, Int32& timestamp, UpdateResult& aResult, SyncVersion& aSyncVersion, ISyncSink syncSink);
    private void PerformUpdate_DetectCreateDelete(TUpdateParameters parameters, ObjectIdCollection newObjectIds, ObjectIdCollection deletedObjectIDList, ObjectIdCollection modifiedObjectIDList, ObjectIdCollection newObjectIDList);
    public sealed virtual bool PerformUpdate(object operationParams);
    public void ReserveNewIds(IDatabaseCollection Databases, Datablock dataBlock, ObjectIdList IdList, IdTranslationList TranslationList);
    public void GenerateNewIds(IDatabaseCollection Databases, Datablock dataBlock, ObjectIdCollection IdList, IdTranslationList TranslationList);
    public ClassPersistenceMapper CommonSuperClassObjectMapper(ObjectIdList idList);
    public DateTime GetCorrectTime();
    private void BuildMappingStructs(IDatabaseCollection Databases);
    public TableDefinition InitializePSDescriptions_EnsureTable(DatabaseDefinition db, string TableName, IDatabase Database);
    public ColumnDefinition InitializePSDescriptions_AddColumn(TableDefinition Table, string ColumnName, string ColumnType, bool AllowNull, string DefaultDbValue);
    private void InitializePSDescriptions(IDatabaseCollection databases);
    private void AddMappingError(string msg);
    public virtual void GenerateDatabaseScript(List`1<string> Script, IDatabase Database);
    private UpdateResult EnsurePrecondition(IDatabaseCollection Databases, UpdatePrecondition Precondition, IdTranslationList TranslationList);
    private OptimisticLockingResult EnsureOptimisticLocking(IDatabaseCollection Databases, OptimisticLockingPrecondition Precondition, IdTranslationList TranslationList);
    private static void GetNewTimeStamp_AddParam(IExecQuery q, string name, DbType dbtype, object value);
    protected virtual int GetNewTimeStamp(IDatabase Database);
    private void HandleChangePointsCondition(IDatabaseCollection Databases, ChangePointCondition aCPCond, ObjectIdList ResultList, int MaxResults, int Offset);
    private void SortAndFilterChangePointsList(ObjectIdList IdList);
    private static void PMTimeForTimestamp_AddParam(IQuery q, string name, DbType dbtype, object value);
    public void PMTimeForTimestamp(IDatabase Database, int Timestamp, DateTime& ClockTime);
    public void PMTimestampForTime_AddParam(IQuery q, string name, DbType dbtype, object value);
    public void PMTimestampForTime(IDatabase Database, DateTime ClockTime, Int32& Timestamp);
}
public abstract class Eco.Persistence.Impl.TBoldAbstractGenericAttributeMapper : TBoldMemberPersistenceMapper {
    public TBoldAbstractGenericAttributeMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IStructuralFeature StructuralFeature);
}
public class Eco.Persistence.Impl.TBoldCreateDatabaseSupport : object {
    public static void CreateTable(TableDefinition tableDef, IExecQuery Query, SqlDatabaseConfig config);
    public static void CreatePersistentStorage(IDatabase db, IConfigureCleanPS configureCleanPS, DatabaseDefinition dbDef, SqlDatabaseConfig config, TableDefinition TableTable);
    public static void CleanPersistentStorage_DeleteTableSQL(string tableName, IExecQuery Query, SqlDatabaseConfig config);
    public static void CleanPersistentStorage(IDatabase db, IConfigureCleanPS configureCleanPS, DatabaseDefinition dbDef, SqlDatabaseConfig config, TableDefinition tabletable);
    public static void AddTableNames(IDatabase db, DatabaseDefinition dbDef, TableDefinition tableTable);
    public static void GenerateDatabaseScript(DatabaseDefinition dbDef, SqlDatabaseConfig config, IList`1<string> Script, TableDefinition tableTable);
    public static void GenerateScriptForTableNames(DatabaseDefinition dbDef, SqlDatabaseConfig config, IList`1<string> Script, TableDefinition tableTable);
    public static void InitializeKnownSystemtables(IList`1<string> KnownTables, IDatabase db, IConfigureCleanPS configureCleanPS, DatabaseDefinition dbDef, SqlDatabaseConfig config, TableDefinition tableTable);
    public static bool EffectiveUseTransactions(SqlDatabaseConfig config);
    public static void AddScriptSeparator(IList`1<string> Script, SqlDatabaseConfig config);
    public static void CommitMetaDataTransaction(IDatabase db);
    public static void RollBackMetaDataTransaction(IDatabase db);
    public static void StartMetaDataTransaction(IDatabase db, SqlDatabaseConfig config);
    public static void ValidateDatabaseStructure(DatabaseDefinition dbDef);
}
public class Eco.Persistence.Impl.TBoldDirectMultiLinkDefaultMapper : TBoldMultiLinkDefaultMapper {
    public ClassPersistenceMapper LinkClassObjectMapper { get; }
    public TBoldDirectMultiLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual ClassPersistenceMapper get_LinkClassObjectMapper();
    protected virtual bool CompareValuesToLists(ObjectId OwningId, AssociationEnd MemberInterface, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList);
    protected virtual void StuffValuesFromLists(ObjectContents ObjContents, int MemberIndex, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd);
}
public class Eco.Persistence.Impl.TBoldDirectSingleLinkDefaultMapper : TBoldSingleLinkDefaultMapper {
    public ClassPersistenceMapper LinkClassObjectMapper { get; }
    public TBoldDirectSingleLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual ClassPersistenceMapper get_LinkClassObjectMapper();
    protected virtual bool CompareValuesToLists(ObjectId OwningId, AssociationEnd MemberInterface, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList);
    protected virtual void StuffValuesFromLists(ObjectContents ObjContents, int MemberIndex, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd);
}
public class Eco.Persistence.Impl.TBoldEmbeddedSingleLinkDefaultMapper : TBoldLinkDefaultMapper {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OtherEndObjectPMIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OtherEndExact>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnReference <OrderColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyDefinition <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnReferenceCollection <KeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsConstrained>k__BackingField;
    private int fOtherEndMemberIndex;
    private int fColumnCount;
    private ISingleColumnAttributemapping fInt32Mapper;
    private bool fIsInnerLink;
    public int OtherEndObjectPMIndex { get; private set; }
    public int OtherEndMemberPMIndex { get; }
    public bool OtherEndExact { get; private set; }
    public ColumnReference OrderColumn { get; private set; }
    public bool ContainsOrderingInfo { get; }
    public KeyDefinition Key { get; private set; }
    public ColumnReferenceCollection KeyColumns { get; private set; }
    public bool IsConstrained { get; private set; }
    public ClassPersistenceMapper OtherEndObjectMapper { get; }
    public TBoldEmbeddedSingleLinkDefaultMapper(SingleLinkDefinition SingleLinkDef, IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    [CompilerGeneratedAttribute]
public int get_OtherEndObjectPMIndex();
    [CompilerGeneratedAttribute]
private void set_OtherEndObjectPMIndex(int value);
    public int get_OtherEndMemberPMIndex();
    [CompilerGeneratedAttribute]
public bool get_OtherEndExact();
    [CompilerGeneratedAttribute]
private void set_OtherEndExact(bool value);
    [CompilerGeneratedAttribute]
public ColumnReference get_OrderColumn();
    [CompilerGeneratedAttribute]
private void set_OrderColumn(ColumnReference value);
    public bool get_ContainsOrderingInfo();
    [CompilerGeneratedAttribute]
public KeyDefinition get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(KeyDefinition value);
    [CompilerGeneratedAttribute]
public ColumnReferenceCollection get_KeyColumns();
    [CompilerGeneratedAttribute]
private void set_KeyColumns(ColumnReferenceCollection value);
    [CompilerGeneratedAttribute]
public bool get_IsConstrained();
    [CompilerGeneratedAttribute]
private void set_IsConstrained(bool value);
    public virtual ClassPersistenceMapper get_OtherEndObjectMapper();
    protected virtual bool CompareFields(ObjectContents ObjectContent, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int TimeStamp);
    public virtual void ValueToParams(ObjectContents ObjectContent, Datablock ValueSpace, IDataParameter[] __Params, IdTranslationList TranslationList, TDatabaseCollection Databases);
    public virtual void ValueFromFields(ObjectContents ObjectContent, InexactIdList RequiresExactification, IField[] Fields);
    public virtual void BuildMappingStructs(StructuralFeatureDefinition def, IDatabaseCollection Databases);
    public void GetNonEmbeddedChangePoints_FetchIds(IDatabaseCollection Databases, ObjectIdList ResultList, TBoldSQLQuery SQLQuery, int AddTime);
    public TBoldSQLQuery GetNonEmbeddedChangePoints_MakeMainQuery(ObjectIdCollection SourceList, TBoldSQLAliasReference& NewAliasRef, IDatabase Database, TBoldSQLNameSpace __NameSpace);
    public void GetNonEmbeddedChangePoints_AddKeyJoin(TBoldSQLAliasReference Alias1, TBoldSQLAliasReference Alias2, TBoldSQLQuery Query);
    public TBoldSQLQuery GetNonEmbeddedChangePoints_MakeSubQuery(TBoldSQLQuery Query, TBoldSQLAliasReference JoinAliasRef, TBoldSQLAliasReference& NewAliasRef, IDatabase Database, TBoldSQLNameSpace __NameSpace);
    public TBoldSQLAliasReference GetNonEmbeddedChangePoints_JoinRootTableInto(TBoldSQLQuery Query, TBoldSQLAliasReference AliasRef);
    public void GetNonEmbeddedChangePoints_AddConsecutiveTimeJoin(TBoldSQLQuery Query, TBoldSQLAliasReference firstAliasRef, TBoldSQLAliasReference nextAliasRef);
    internal void GetNonEmbeddedChangePoints(IDatabaseCollection Databases, ObjectIdCollection SourceList, ObjectIdList ResultList, ChangePointCondition Condition, TBoldSQLNameSpace __NameSpace);
}
public class Eco.Persistence.Impl.TBoldGenericAttributeMapper : TBoldAbstractGenericAttributeMapper {
    private IAttributemapping fMapping;
    private int fColumnCount;
    public string BooleanTrueString { get; }
    public TBoldGenericAttributeMapper(AttributeDefinition AttributeDef, IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAttributemapping Mapping, IAttribute attr);
    public virtual string get_BooleanTrueString();
    protected virtual bool CompareFields(ObjectContents ObjContents, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    public virtual void ValueFromFields(ObjectContents ObjContents, InexactIdList RequiresExactification, IField[] Fields);
    public virtual void ValueToParams(ObjectContents ObjContents, Datablock ValueSpace, IDataParameter[] __Params, IdTranslationList TranslationList, TDatabaseCollection Databases);
}
public class Eco.Persistence.Impl.TBoldGenericSingleColumnAttributeMapper : TBoldAbstractGenericAttributeMapper {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISingleColumnAttributemapping <Mapping>k__BackingField;
    private IGenericSingleColumnAttributemapping fGenericMapping;
    private Type fTargetType;
    public ISingleColumnAttributemapping Mapping { get; private set; }
    public string BooleanTrueString { get; }
    public TBoldGenericSingleColumnAttributeMapper(AttributeDefinition AttributeDef, IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, ISingleColumnAttributemapping Mapping, IAttribute attr);
    [CompilerGeneratedAttribute]
public ISingleColumnAttributemapping get_Mapping();
    [CompilerGeneratedAttribute]
private void set_Mapping(ISingleColumnAttributemapping value);
    public virtual string get_BooleanTrueString();
    protected virtual bool CompareFields(ObjectContents ObjContents, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    public bool UsesCompatibleMapping(ISingleColumnAttributemapping mapping);
    public virtual void ValueFromFields(ObjectContents ObjContents, InexactIdList RequiresExactification, IField[] Fields);
    public virtual void ValueFromField(ObjectContents ObjContents, InexactIdList RequiresExactification, IField Field);
    public virtual void ValueToParams(ObjectContents ObjContents, Datablock ValueSpace, IDataParameter[] __Params, IdTranslationList TranslationList, TDatabaseCollection Databases);
    public virtual void CreatePersistentStorage(IDatabase Database);
}
public class Eco.Persistence.Impl.TBoldIndirectMultiLinkDefaultMapper : TBoldMultiLinkDefaultMapper {
    public ClassPersistenceMapper LinkClassObjectMapper { get; }
    public TBoldIndirectMultiLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual ClassPersistenceMapper get_LinkClassObjectMapper();
    protected virtual bool CompareValuesToLists(ObjectId OwningId, AssociationEnd MemberInterface, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList);
    protected virtual void StuffValuesFromLists(ObjectContents ObjContents, int MemberIndex, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd);
}
public class Eco.Persistence.Impl.TBoldIndirectSingleLinkDefaultMapper : TBoldSingleLinkDefaultMapper {
    public ClassPersistenceMapper LinkClassObjectMapper { get; }
    public TBoldIndirectSingleLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual ClassPersistenceMapper get_LinkClassObjectMapper();
    protected virtual bool CompareValuesToLists(ObjectId OwningId, AssociationEnd MemberInterface, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList);
    protected virtual void StuffValuesFromLists(ObjectContents ObjContents, int MemberIndex, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd);
}
public abstract class Eco.Persistence.Impl.TBoldLinkDefaultMapper : TBoldMemberPersistenceMapper {
    public ClassPersistenceMapper OtherEndObjectMapper { get; }
    public TBoldLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IStructuralFeature StructuralFeature);
    public virtual ClassPersistenceMapper get_OtherEndObjectMapper();
    public ClassPersistenceMapper GetObjectPersistenceMapper(int Index);
}
public abstract class Eco.Persistence.Impl.TBoldMemberPersistenceMapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CustomCreateUpDate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CustomFetch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExpressionName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MemberIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsInherited>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ModeledDefaultDbValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClassPersistenceMapper <ObjectPersistenceMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasMappingStruct>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnReferenceCollection <ColumnReferences>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ColumnsCoveredByKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ColumnsCoveredByDiscriminator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDbAssigned>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsFrozen>k__BackingField;
    private Type fContentType;
    private bool fDelayedFetch;
    internal bool fIsStoredInObject;
    public bool AllowNull { get; protected set; }
    public string BooleanTrueString { get; }
    public Type ContentType { get; }
    public bool CustomCreateUpDate { get; private set; }
    public bool CustomFetch { get; protected set; }
    public bool DelayedFetch { get; }
    public string ExpressionName { get; private set; }
    public bool IsStoredInObject { get; }
    public int MemberIndex { get; private set; }
    public bool IsInherited { get; public set; }
    public string ModeledDefaultDbValue { get; protected set; }
    public ClassPersistenceMapper ObjectPersistenceMapper { get; private set; }
    public bool SupportsPolymorphicFetch { get; }
    public SystemPersistenceMapper SystemPersistenceMapper { get; }
    public bool HasMappingStruct { get; private set; }
    public AliasDefinition Alias { get; private set; }
    public ColumnReferenceCollection ColumnReferences { get; private set; }
    public bool ColumnsCoveredByKey { get; internal set; }
    public bool ColumnsCoveredByDiscriminator { get; internal set; }
    public bool IsDbAssigned { get; private set; }
    public bool IsFrozen { get; private set; }
    public bool IsPseudoMember { get; }
    public TBoldMemberPersistenceMapper(IClass umlClass, ClassPersistenceMapper owner, int memberIndex, IStructuralFeature structuralFeature);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
protected void set_AllowNull(bool value);
    public virtual string get_BooleanTrueString();
    public Type get_ContentType();
    [CompilerGeneratedAttribute]
public bool get_CustomCreateUpDate();
    [CompilerGeneratedAttribute]
private void set_CustomCreateUpDate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CustomFetch();
    [CompilerGeneratedAttribute]
protected void set_CustomFetch(bool value);
    public bool get_DelayedFetch();
    [CompilerGeneratedAttribute]
public string get_ExpressionName();
    [CompilerGeneratedAttribute]
private void set_ExpressionName(string value);
    public bool get_IsStoredInObject();
    [CompilerGeneratedAttribute]
public int get_MemberIndex();
    [CompilerGeneratedAttribute]
private void set_MemberIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsInherited();
    [CompilerGeneratedAttribute]
public void set_IsInherited(bool value);
    [CompilerGeneratedAttribute]
public string get_ModeledDefaultDbValue();
    [CompilerGeneratedAttribute]
protected void set_ModeledDefaultDbValue(string value);
    [CompilerGeneratedAttribute]
public ClassPersistenceMapper get_ObjectPersistenceMapper();
    [CompilerGeneratedAttribute]
private void set_ObjectPersistenceMapper(ClassPersistenceMapper value);
    public virtual bool get_SupportsPolymorphicFetch();
    public SystemPersistenceMapper get_SystemPersistenceMapper();
    [CompilerGeneratedAttribute]
public bool get_HasMappingStruct();
    [CompilerGeneratedAttribute]
private void set_HasMappingStruct(bool value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public ColumnReferenceCollection get_ColumnReferences();
    [CompilerGeneratedAttribute]
private void set_ColumnReferences(ColumnReferenceCollection value);
    [CompilerGeneratedAttribute]
public bool get_ColumnsCoveredByKey();
    [CompilerGeneratedAttribute]
internal void set_ColumnsCoveredByKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_ColumnsCoveredByDiscriminator();
    [CompilerGeneratedAttribute]
internal void set_ColumnsCoveredByDiscriminator(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDbAssigned();
    [CompilerGeneratedAttribute]
private void set_IsDbAssigned(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFrozen();
    [CompilerGeneratedAttribute]
private void set_IsFrozen(bool value);
    public virtual bool get_IsPseudoMember();
    protected abstract virtual bool CompareFields(ObjectContents ObjContents, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    public virtual void PMCreate(IDatabase Database, ObjectIdCollection IdList, Datablock ValueSpace, IdTranslationList TranslationList);
    public virtual void PMUpdate(IDatabase Database, ObjectIdCollection IdList, Datablock ValueSpace, IdTranslationList TranslationList);
    public virtual void PMDelete(IDatabase Database, ObjectIdCollection IdList, Datablock ValueSpace, IdTranslationList TranslationList);
    protected virtual string InitialExpressionName(IStructuralFeature StructuralFeature);
    protected virtual void Init3fields(IStructuralFeature StructuralFeature, IClass umlClass, Boolean& DelayedFetch, Boolean& IsStoredInObject, Type& ContentType);
    public virtual bool IsDirty(ObjectContents ObjContents);
    public object GetValue(ObjectContents ObjContents);
    public object GetEnsuredValue(ObjectContents ObjContents);
    public virtual bool ShouldFetch(ObjectContents ObjContents);
    public virtual void ValueToParams(ObjectContents ObjContents, Datablock ValueSpace, IDataParameter[] __Params, IdTranslationList TranslationList, TDatabaseCollection Databases);
    public virtual void ValueFromFields(ObjectContents ObjContents, InexactIdList RequiresExactification, IField[] Fields);
    public virtual void ValueFromField(ObjectContents ObjContents, InexactIdList RequiresExactification, IField Field);
    public void ValueToQuery(ObjectContents ObjContents, Datablock ValueSpace, IExecQuery Query, IdTranslationList TranslationList, TDatabaseCollection Databases);
    public virtual void ValueFromQuery(ObjectContents ObjContents, InexactIdList RequiresExactification, IDataSet DataSet);
    public virtual void GenerateDatabaseScript(IList`1<string> Script);
    public virtual void CreatePersistentStorage(IDatabase Database);
    protected virtual string PesudoMemberRootColumnName();
    public virtual void PMFetch(IDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, FetchMode FetchMode, IdTranslationList TranslationList, Datablock FailureList, FetchStrategy fetchStrategy);
    internal bool CompareFieldsForMember(ObjectContents ObjContents, IDataSet DataSet, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    internal virtual void GetChangePoints(IDatabaseCollection Databases, ObjectIdCollection SourceList, ObjectIdList ResultList, ChangePointCondition Condition, TBoldSQLNameSpace __NameSpace);
    protected virtual bool SupportsComparingWithoutValue();
    public virtual void BuildMappingStructs(StructuralFeatureDefinition def, IDatabaseCollection Databases);
}
public class Eco.Persistence.Impl.TBoldMemberPersistenceMapperList : List`1<TBoldMemberPersistenceMapper> {
    public TBoldMemberPersistenceMapper GetPseudoMember(string Name);
}
public abstract class Eco.Persistence.Impl.TBoldMultiLinkDefaultMapper : TBoldNonEmbeddedLinkDefaultMapper {
    private bool FOrdered;
    public bool Ordered { get; }
    public TBoldMultiLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual bool get_Ordered();
}
public abstract class Eco.Persistence.Impl.TBoldNonEmbeddedLinkDefaultMapper : TBoldLinkDefaultMapper {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ClosestOtherEndObjectMapperIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RemoteOtherEndObjectMapperIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIndirect>k__BackingField;
    internal int fClosestOtherEndMemberIndex;
    internal int fRemoteInnerLinkMemberIndex;
    internal int ClosestOtherEndObjectMapperIndex { get; internal set; }
    private int ClosestOtherEndMemberMapperIndex { get; }
    protected int RemoteOtherEndObjectMapperIndex { get; protected set; }
    public TBoldEmbeddedSingleLinkDefaultMapper RemoteInnerLinkMapper { get; }
    public ClassPersistenceMapper ClosestOtherEndObjectMapper { get; }
    public bool IsIndirect { get; protected set; }
    public string LinkClassTablename { get; }
    public ClassPersistenceMapper LinkClassObjectMapper { get; }
    public bool Ordered { get; }
    public ClassPersistenceMapper OtherEndObjectMapper { get; }
    public bool SupportsPolymorphicFetch { get; }
    public TBoldNonEmbeddedLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    [CompilerGeneratedAttribute]
internal int get_ClosestOtherEndObjectMapperIndex();
    [CompilerGeneratedAttribute]
internal void set_ClosestOtherEndObjectMapperIndex(int value);
    private int get_ClosestOtherEndMemberMapperIndex();
    [CompilerGeneratedAttribute]
protected int get_RemoteOtherEndObjectMapperIndex();
    [CompilerGeneratedAttribute]
protected void set_RemoteOtherEndObjectMapperIndex(int value);
    public TBoldEmbeddedSingleLinkDefaultMapper get_RemoteInnerLinkMapper();
    public ClassPersistenceMapper get_ClosestOtherEndObjectMapper();
    [CompilerGeneratedAttribute]
public bool get_IsIndirect();
    [CompilerGeneratedAttribute]
protected void set_IsIndirect(bool value);
    public string get_LinkClassTablename();
    public virtual ClassPersistenceMapper get_LinkClassObjectMapper();
    public virtual bool get_Ordered();
    public virtual ClassPersistenceMapper get_OtherEndObjectMapper();
    public virtual bool get_SupportsPolymorphicFetch();
    protected abstract virtual bool CompareValuesToLists(ObjectId OwningId, AssociationEnd MemberInterface, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList);
    protected abstract virtual void StuffValuesFromLists(ObjectContents ObjContents, int MemberIndex, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd);
    protected virtual bool CompareFields(ObjectContents ObjectContent, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int TimeStamp);
    private void ProcessSQL(IDatabaseCollection Databases, IQuery Query, ArrayList resultList, int TimeStamp, ObjectIdCollection IdList, TBoldEmbeddedSingleLinkDefaultMapper EmbeddingMapper, InexactIdList RequiresExactification, IdTranslationList TranslationList, FetchMode FetchMode, Datablock ValueSpace, FetchStrategy fetchStrategy);
    public void ProcessResult_ProcessResultForOneObject(Datablock ValueSpace, ObjectId CurrentObjectId, int MemberID, ObjectIdList ListOfClosestEnd, ObjectIdList ListOfRemoteEnd, IdTranslationList TranslationList, FetchMode FetchMode, Datablock FailureList, ObjectIdCollection UnprocessedObjects);
    private void ProcessResult(ArrayList ResultList, Datablock ValueSpace, ObjectIdCollection IdList, IdTranslationList TranslationList, int TimeStamp, FetchMode FetchMode, Datablock FailureList);
    public void PMFetch_ApplyTranslationListToLinkValues(IdTranslationList ExactifyList, ArrayList ResultList);
    public virtual void PMFetch(IDatabaseCollection Databases, ObjectIdCollection IdList, Datablock ValueSpace, FetchMode FetchMode, IdTranslationList TranslationList, Datablock FailureList, FetchStrategy fetchStrategy);
    internal virtual void GetChangePoints(IDatabaseCollection Databases, ObjectIdCollection SourceList, ObjectIdList ResultList, ChangePointCondition Condition, TBoldSQLNameSpace __NameSpace);
    public TBoldEmbeddedSingleLinkDefaultMapper EmbeddingMapper();
}
public class Eco.Persistence.Impl.TBoldPersistenceControllerDefault : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SystemPersistenceMapper <PersistenceMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnFetchViewModel_StartQueryArgs> OnFetchViewModel_StartQuery;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnFetchViewModel_StreamFetchArgs> OnFetchViewModel_StreamFetchObjects;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnFetchViewModel_StreamFetchArgs> OnFetchViewModel_StreamFetchIds;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnRunServerSideViewModelFetchArgs> OnRunServerSideViewModel;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<OnHandleMDrivenCacheConditionArgs> OnHandleMDrivenCacheCondition;
    public SystemPersistenceMapper PersistenceMapper { get; protected set; }
    public TBoldPersistenceControllerDefault(ITypeSystemService typeSysteService, ORMappingDefinition orMapping, IDatabaseCollection databases);
    [CompilerGeneratedAttribute]
public SystemPersistenceMapper get_PersistenceMapper();
    [CompilerGeneratedAttribute]
protected void set_PersistenceMapper(SystemPersistenceMapper value);
    [CompilerGeneratedAttribute]
public static void add_OnFetchViewModel_StartQuery(EventHandler`1<OnFetchViewModel_StartQueryArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFetchViewModel_StartQuery(EventHandler`1<OnFetchViewModel_StartQueryArgs> value);
    [CompilerGeneratedAttribute]
public static void add_OnFetchViewModel_StreamFetchObjects(EventHandler`1<OnFetchViewModel_StreamFetchArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFetchViewModel_StreamFetchObjects(EventHandler`1<OnFetchViewModel_StreamFetchArgs> value);
    [CompilerGeneratedAttribute]
public static void add_OnFetchViewModel_StreamFetchIds(EventHandler`1<OnFetchViewModel_StreamFetchArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFetchViewModel_StreamFetchIds(EventHandler`1<OnFetchViewModel_StreamFetchArgs> value);
    private sealed virtual override void Eco.Persistence.Connection.IImplementorOfViewModelFetch.FetchViewModel_StartQuery(ViewModelCondition condition);
    private sealed virtual override void Eco.Persistence.Connection.IImplementorOfViewModelFetch.FetchViewModel_StreamFetchObjects(ViewModelStreamFetchCondition condition, Datablock result);
    private sealed virtual override void Eco.Persistence.Connection.IImplementorOfViewModelFetch.FetchViewModel_StreamFetchIds(ViewModelStreamFetchCondition condition, ObjectIdList result);
    [CompilerGeneratedAttribute]
public static void add_OnRunServerSideViewModel(EventHandler`1<OnRunServerSideViewModelFetchArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnRunServerSideViewModel(EventHandler`1<OnRunServerSideViewModelFetchArgs> value);
    private sealed virtual override void Eco.Persistence.Connection.IImplementorOfRunServerSideViewModelNowCondition.RunServerSideViewModelNow(string serversideviewmodelname);
    [CompilerGeneratedAttribute]
public static void add_OnHandleMDrivenCacheCondition(EventHandler`1<OnHandleMDrivenCacheConditionArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnHandleMDrivenCacheCondition(EventHandler`1<OnHandleMDrivenCacheConditionArgs> value);
    private sealed virtual override void Eco.Persistence.Connection.IImplementorOfMDrivenCacheCondition.HandleMDrivenCacheCondition(MDrivenCacheCondition condition, object systemPersistenceMapper_untyped, ObjectIdList resultList);
    public sealed virtual void Update(IDatabaseCollection databases, Datablock dataBlock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, UpdateResult& result, SyncVersion& syncVersion, ISyncSink syncSink);
    public sealed virtual void Fetch(IDatabaseCollection databases, ObjectIdList objectIDList, Datablock& dataBlock, Int32[] memberIdList, FetchStrategy fetchStrategy);
    public sealed virtual void FetchIDListWithCondition(IDatabaseCollection databases, AbstractCondition Condition, ObjectIdList& ResultList, int MaxResults, int Offset);
    public sealed virtual void FetchDatablockWithCondition(IDatabaseCollection databases, AbstractCondition Condition, Datablock& result, int MaxResults, int Offset);
    public sealed virtual void TimeForVersion(IDatabase Database, int version, DateTime& clockTime);
    public sealed virtual void VersionForTime(IDatabase database, DateTime clockTime, Int32& version);
    private List`1<IDatabase> GetCleanDatabases(IDatabaseCollection databases);
}
public abstract class Eco.Persistence.Impl.TBoldRootTableMembers : TBoldSingleColumnMember {
    public TBoldRootTableMembers(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IStructuralFeature StructuralFeature);
}
public abstract class Eco.Persistence.Impl.TBoldSingleColumnMember : TBoldMemberPersistenceMapper {
    public TBoldSingleColumnMember(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IStructuralFeature StructuralFeature);
}
public abstract class Eco.Persistence.Impl.TBoldSingleLinkDefaultMapper : TBoldNonEmbeddedLinkDefaultMapper {
    public bool Ordered { get; }
    public TBoldSingleLinkDefaultMapper(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IAssociationEnd associationEnd);
    public virtual bool get_Ordered();
    protected ObjectId FirstIdInList(ObjectIdList List, ObjectId targetId);
}
public class Eco.Persistence.Impl.TBoldTimeStampMember : TBoldRootTableMembers {
    private ISingleColumnAttributemapping fInt32Mapper;
    public bool IsPseudoMember { get; }
    public TBoldTimeStampMember(IClass umlClass, ClassPersistenceMapper Owner, int MemberIndex, IStructuralFeature StructuralFeature);
    public virtual bool get_IsPseudoMember();
    public virtual void BuildMappingStructs(StructuralFeatureDefinition def, IDatabaseCollection Databases);
    protected virtual bool CompareFields(ObjectContents ObjContents, IField[] Fields, Datablock ValueSpace, IdTranslationList TranslationList, IDatabaseCollection Databases, int Timestamp);
    protected virtual void Init3fields(IStructuralFeature StructuralFeature, IClass umlClass, Boolean& DelayedFetch, Boolean& IsStoredInObject, Type& ContentType);
    protected virtual string InitialExpressionName(IStructuralFeature StructuralFeature);
    public virtual bool IsDirty(ObjectContents ObjContents);
    protected virtual string PesudoMemberRootColumnName();
    public virtual bool ShouldFetch(ObjectContents ObjContents);
    protected virtual bool SupportsComparingWithoutValue();
    public virtual void ValueFromFields(ObjectContents ObjContents, InexactIdList RequiresExactification, IField[] Fields);
    public virtual void ValueFromField(ObjectContents ObjContents, InexactIdList RequiresExactification, IField Field);
    public virtual void ValueToParams(ObjectContents ObjContents, Datablock ValueSpace, IDataParameter[] __Params, IdTranslationList TranslationList, TDatabaseCollection Databases);
}
public class Eco.Persistence.Impl.TDatabaseCollection : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDatabaseCollection <Databases>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <TransactionContext>k__BackingField;
    private Hashtable fHashTable;
    public IDatabaseCollection Databases { get; private set; }
    public object TransactionContext { get; public set; }
    public int Count { get; }
    public TDatabaseCollection(IDatabaseCollection databases);
    [CompilerGeneratedAttribute]
public IDatabaseCollection get_Databases();
    [CompilerGeneratedAttribute]
private void set_Databases(IDatabaseCollection value);
    [CompilerGeneratedAttribute]
public object get_TransactionContext();
    [CompilerGeneratedAttribute]
public void set_TransactionContext(object value);
    public sealed virtual IEnumerator GetEnumerator();
    public IDatabase GetDatabase(string name);
    public IList`1<string> GetNames();
    public int get_Count();
    public TDatabaseRT GetDatabaseRT(string name);
}
public class Eco.Persistence.Impl.TDatabaseRT : object {
    public IDatabase Database;
    public int CurrentTimeStamp;
    public string Name;
}
public class Eco.Persistence.Impl.TimeStampComparer : object {
    public sealed virtual int Compare(ObjectId x, ObjectId y);
}
public class Eco.Persistence.Impl.TInexactId : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ObjectId <InnerId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyDefinition <KeyDef>k__BackingField;
    private SystemPersistenceMapper fSystemMapper;
    public ObjectId InnerId { get; private set; }
    public KeyDefinition KeyDef { get; private set; }
    public TInexactId(ObjectId InnerId, KeyDefinition KeyDef, SystemPersistenceMapper SystemMapper);
    [CompilerGeneratedAttribute]
public ObjectId get_InnerId();
    [CompilerGeneratedAttribute]
private void set_InnerId(ObjectId value);
    [CompilerGeneratedAttribute]
public KeyDefinition get_KeyDef();
    [CompilerGeneratedAttribute]
private void set_KeyDef(KeyDefinition value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool CompareWithoutClassId(TInexactId CompareId);
}
public class Eco.Persistence.Impl.TLinkValuesComparer : object {
    public sealed virtual int Compare(object Item1, object Item2);
}
public class Eco.Persistence.Impl.TTempLinkValues : object {
    public ObjectId ObjectId;
    public int Ordervalue;
    public ObjectId ClosestId;
    public int ClosestClassid;
    public ObjectId RemoteId;
}
public class Eco.Persistence.Impl.TUpdateParameters : object {
    public IDatabaseCollection Databases;
    public TDatabaseCollection DatabasesRT;
    public ObjectIdList IdList;
    public Datablock ValueSpace;
    public UpdatePrecondition Precondition;
    public IdTranslationList TranslationList;
    public int Timestamp;
    public UpdateResult aResult;
    public SyncVersion aSyncVersion;
    public ISyncSink SyncSink;
    public Datablock SecKeyDatablock;
}
public abstract class Eco.Persistence.Interbase.AbstractAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.Interbase.BooleanAsBoolean : AbstractSingleColumnAttribute {
    public string TrueString { get; }
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual string get_TrueString();
}
public class Eco.Persistence.Interbase.CharAsNCharUnicode : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Interbase.DecimalAsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Interbase.Int16AsAutoInc : AbstractAutoInc {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Interbase.Int32AsAutoInc : AbstractAutoInc {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Interbase.Int64AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Interbase.StringAsNCharUnicode : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public interface Eco.Persistence.IRemotePersistenceMapperProvider {
    public abstract virtual IPersistenceMapper GetPersistenceMapper(int typeSystemHash);
}
public class Eco.Persistence.LocalTransactionManager : object {
    private sealed virtual override void Eco.Persistence.Connection.ITransactionManager.PerformOperationInTransaction(object context, ITransactionable callback, IDatabaseCollection databases);
    private static void StartTransaction(Object& transactionContext, IDatabaseCollection databases);
    private static void RollbackTransaction(object transactionContext, IDatabaseCollection databases);
    private static void CommitTransaction(object transactionContext, IDatabaseCollection databases);
}
public class Eco.Persistence.MemberIndexColumnIndex : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MemberIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOrderColumn>k__BackingField;
    public int MemberIndex { get; private set; }
    public int ColumnIndex { get; private set; }
    public bool IsOrderColumn { get; private set; }
    public MemberIndexColumnIndex(int memberIndex, int columnIndex, bool isOrderColumn);
    [CompilerGeneratedAttribute]
public int get_MemberIndex();
    [CompilerGeneratedAttribute]
private void set_MemberIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
private void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsOrderColumn();
    [CompilerGeneratedAttribute]
private void set_IsOrderColumn(bool value);
}
public class Eco.Persistence.MySql.ByteAsUnsingedTinyInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.MySql.DateTimeAsDateTime : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.MySql.Int16AsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.MySql.Int32AsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.MySql.Int64AsBigInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.MySql.UInt16AsUnsignedSmallint : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.OnFetchViewModel_StartQueryArgs : EventArgs {
    public ViewModelCondition Condition;
    public IEcoTypeSystem TypeSystem;
}
public class Eco.Persistence.OnFetchViewModel_StreamFetchArgs : EventArgs {
    public ViewModelStreamFetchCondition Condition;
    public Datablock ResultDatablock;
    public ObjectIdList ResultIds;
    public IEcoTypeSystem TypeSystem;
}
public class Eco.Persistence.OnHandleMDrivenCacheConditionArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MDrivenCacheCondition <MDrivenCacheCondition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SystemPersistenceMapper <SystemPersistenceMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ObjectIdList <ResultList>k__BackingField;
    public MDrivenCacheCondition MDrivenCacheCondition { get; public set; }
    public SystemPersistenceMapper SystemPersistenceMapper { get; public set; }
    public string DbId { get; public set; }
    public ObjectIdList ResultList { get; public set; }
    [CompilerGeneratedAttribute]
public MDrivenCacheCondition get_MDrivenCacheCondition();
    [CompilerGeneratedAttribute]
public void set_MDrivenCacheCondition(MDrivenCacheCondition value);
    [CompilerGeneratedAttribute]
public SystemPersistenceMapper get_SystemPersistenceMapper();
    [CompilerGeneratedAttribute]
public void set_SystemPersistenceMapper(SystemPersistenceMapper value);
    [CompilerGeneratedAttribute]
public string get_DbId();
    [CompilerGeneratedAttribute]
public void set_DbId(string value);
    [CompilerGeneratedAttribute]
public ObjectIdList get_ResultList();
    [CompilerGeneratedAttribute]
public void set_ResultList(ObjectIdList value);
}
public class Eco.Persistence.OnLoadPersistedCommitBlocksArgs : EventArgs {
    public SyncVersion RequestedFromVersion;
    public int CurrentFromVersion;
    public int CurrentTopVersion;
    public List`1<CommitBlockWrapper> OutListOfLoadedCommitBlocksBEFORE;
    public List`1<CommitBlockWrapper> OutListOfLoadedCommitBlocksAFTER;
    public bool FillHole;
    public int FillHoleStart;
    public int FillHoleStop;
    public List`1<CommitBlockWrapper> OutLoadedCommitBlocksFILLHOLE;
}
public class Eco.Persistence.OnRunServerSideViewModelFetchArgs : EventArgs {
    public string ServerSideViewModelName;
}
public class Eco.Persistence.OnSubmittedCommitBlockArgs : EventArgs {
    public CommitBlock CommitBlock;
    public object OperationsParams;
    public int ReturnedPersistedCommitBlockHighestId;
}
public abstract class Eco.Persistence.Oracle.AbstractAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    private static void ExecuteSql(IExecQuery q, string sql);
    private static void SafeExecuteSql(IExecQuery q, string sql);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.Oracle.BooleanAsInteger : AbstractSingleColumnAttribute {
    public string TrueString { get; }
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual string get_TrueString();
}
public class Eco.Persistence.Oracle.ByteAsSmallInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.DateTimeAsDate : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Oracle.DateTimeAsTimeStamp : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Oracle.DecimalAsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.DoubleAsNumber : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.Int16AsNumber : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    private static short obj2Int16(object value);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.Int32AsAutoInc : AbstractAutoInc {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.Int32AsNumber : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    private static int obj2Int32(object value);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.Int64AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.SingleAsSingle : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.StringAsVarChar2 : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Oracle.TimeSpanAsDate : AbstractSingleColumnAttribute {
    private DateTime ZeroDateTime;
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Oracle.TimeSpanAsLongInteger : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.AliasCollection : HashBase {
    public AliasDefinition Item { get; }
    public AliasDefinition Any { get; }
    public void Add(AliasDefinition value);
    public AliasDefinition get_Item(string name);
    public AliasDefinition get_Any();
}
public class Eco.Persistence.ORMapping.AliasDefinition : NamedDefinition {
    private TableDefinition m_Table;
    private ColumnReference m_StartTimeColumn;
    private ColumnReference m_StopTimeColumn;
    private KeyImplementationCollection m_Keys;
    private bool m_ExtentRequiresDiscriminator;
    private DiscriminatorImplementationCollection m_Discriminators;
    private bool m_IsMainAlias;
    private bool m_HasIdKey;
    private KeyImplementation m_IdKey;
    public TableDefinition Table { get; public set; }
    public ColumnReference StartTimeColumn { get; public set; }
    public ColumnReference StopTimeColumn { get; public set; }
    public KeyImplementationCollection Keys { get; }
    public bool ExtentRequiresDiscriminator { get; public set; }
    public DiscriminatorImplementationCollection Discriminators { get; }
    public bool IsMainAlias { get; public set; }
    unknown string Name {public set; }
    public bool HasIdKey { get; }
    public KeyImplementation IdKey { get; }
    public TableDefinition get_Table();
    public void set_Table(TableDefinition value);
    public ColumnReference get_StartTimeColumn();
    public void set_StartTimeColumn(ColumnReference value);
    public ColumnReference get_StopTimeColumn();
    public void set_StopTimeColumn(ColumnReference value);
    public KeyImplementationCollection get_Keys();
    public bool get_ExtentRequiresDiscriminator();
    public void set_ExtentRequiresDiscriminator(bool value);
    public DiscriminatorImplementationCollection get_Discriminators();
    public bool get_IsMainAlias();
    public void set_IsMainAlias(bool value);
    public virtual void set_Name(string value);
    public void MarkHasIdKey();
    public bool get_HasIdKey();
    public KeyImplementation get_IdKey();
    public KeyDefinition FindCommonKey(AliasDefinition alias);
    public string AliasTable(SqlDatabaseConfig config);
}
public enum Eco.Persistence.ORMapping.AliasMode : Enum {
    public int value__;
    public static AliasMode UseAlias;
    public static AliasMode SkipAlias;
}
public class Eco.Persistence.ORMapping.AttributeDefinition : StructuralFeatureDefinition {
    private string m_AttributeMapper;
    private bool m_Pseudo;
    public string AttributeMapper { get; public set; }
    public bool Pseudo { get; public set; }
    public string get_AttributeMapper();
    public void set_AttributeMapper(string value);
    public virtual bool get_Pseudo();
    public virtual void set_Pseudo(bool value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.ClassCollection : HashBase {
    public ClassDefinition Item { get; }
    public void Add(ClassDefinition value);
    public ClassDefinition get_Item(string name);
}
public class Eco.Persistence.ORMapping.ClassDefinition : NamedDefinition {
    private ORMappingDefinition m_Mapping;
    private AliasCollection m_AllAliases;
    private AliasCollection m_Aliases;
    private DiscriminatorDefCollection m_Discriminators;
    private DiscriminatorValueCollection m_DiscriminatorValues;
    private KeyDefinitionCollection m_Keys;
    private KeyDefinition m_Id;
    private DatabaseDefinition m_Database;
    private ClassDefinition m_SuperClass;
    private FeatureCollection m_Features;
    private FeatureCollection m_AllFeatures;
    private int m_ClassId;
    public ORMappingDefinition Mapping { get; }
    public AliasCollection AllAliases { get; }
    public AliasDefinition MainAlias { get; }
    public AliasCollection Aliases { get; }
    public DiscriminatorDefCollection Discriminators { get; }
    public DiscriminatorValueCollection DiscriminatorValues { get; }
    public KeyDefinitionCollection Keys { get; }
    public KeyDefinition Id { get; public set; }
    public DatabaseDefinition Database { get; public set; }
    public ClassDefinition SuperClass { get; public set; }
    public FeatureCollection Features { get; }
    public FeatureCollection AllFeatures { get; }
    public int ClassId { get; public set; }
    public ClassDefinition(ORMappingDefinition mapping);
    public ORMappingDefinition get_Mapping();
    internal void SetMapping(ORMappingDefinition mapping);
    public AliasCollection get_AllAliases();
    public AliasDefinition get_MainAlias();
    public AliasCollection get_Aliases();
    public DiscriminatorDefCollection get_Discriminators();
    public DiscriminatorValueCollection get_DiscriminatorValues();
    public DiscriminatorValue GetValueForDiscriminator(DiscriminatorDef disc);
    public KeyDefinitionCollection get_Keys();
    public KeyDefinition get_Id();
    public void set_Id(KeyDefinition value);
    public DatabaseDefinition get_Database();
    public void set_Database(DatabaseDefinition value);
    public ClassDefinition get_SuperClass();
    public void set_SuperClass(ClassDefinition value);
    public FeatureCollection get_Features();
    public FeatureCollection get_AllFeatures();
    public int get_ClassId();
    public void set_ClassId(int value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.ColumnCollection : CollectionBase {
    private Dictionary`2<string, ColumnDefinition> columns;
    public ColumnDefinition Item { get; public set; }
    public ColumnDefinition Item { get; }
    public void Add(ColumnDefinition value);
    public ColumnDefinition get_Item(int index);
    public void set_Item(int index, ColumnDefinition value);
    public ColumnDefinition get_Item(string name);
    public string CommaList();
}
public class Eco.Persistence.ORMapping.ColumnDefinition : NamedDefinition {
    private string m_UnqoutedName;
    private string m_SqlType;
    private bool m_TypeIsExplicit;
    private string m_ParamName;
    private string m_DefaultValue;
    private bool m_AllowNull;
    private int m_Length;
    private int m_Scale;
    private int m_Precision;
    private TableDefinition m_Table;
    public string UnquotedName { get; }
    public string SqlType { get; public set; }
    public bool TypeIsExplicit { get; public set; }
    public string ParamName { get; }
    public string DefaultValue { get; public set; }
    public bool AllowNull { get; public set; }
    public int Length { get; public set; }
    public int Scale { get; public set; }
    public int Precision { get; public set; }
    public TableDefinition Table { get; }
    public string SqlName { get; }
    public ColumnDefinition(TableDefinition table, string columnName);
    public string get_UnquotedName();
    internal void SetUnquotedName(string value);
    public string get_SqlType();
    public void set_SqlType(string value);
    public bool get_TypeIsExplicit();
    public void set_TypeIsExplicit(bool value);
    public string get_ParamName();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    public int get_Length();
    public void set_Length(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public int get_Precision();
    public void set_Precision(int value);
    public TableDefinition get_Table();
    public string get_SqlName();
}
public class Eco.Persistence.ORMapping.ColumnReference : object {
    private ColumnDefinition m_Column;
    private AliasDefinition m_Alias;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsReadonly>k__BackingField;
    public ColumnDefinition Column { get; public set; }
    public AliasDefinition Alias { get; public set; }
    public bool IsReadonly { get; public set; }
    public ColumnReference(AliasDefinition alias, ColumnDefinition column);
    public ColumnDefinition get_Column();
    public void set_Column(ColumnDefinition value);
    public AliasDefinition get_Alias();
    public void set_Alias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public bool get_IsReadonly();
    [CompilerGeneratedAttribute]
public void set_IsReadonly(bool value);
    public string AliasColumn(SqlDatabaseConfig config);
    public string AliasColumn(SqlDatabaseConfig config, string columnPrefix);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.ColumnReferenceCollection : CollectionBase {
    public ColumnReference Item { get; }
    public int Add(ColumnReference value);
    public ColumnReference get_Item(int index);
    public void AddRange(ColumnReferenceCollection range);
    public IList`1<string> CreateStringCollection(AliasMode mode, SqlDatabaseConfig config);
}
public class Eco.Persistence.ORMapping.ColumnTypeFixer : object {
    private ORMappingDefinition m_Mapping;
    private SqlDatabaseConfig m_Config;
    private IEcoTypeSystem m_Model;
    private PersistenceMapperDictionary m_MapperDictionary;
    private ISingleColumnAttributemapping m_Int32Mapper;
    private ColumnTypeFixer(ORMappingDefinition mapping, SqlDatabaseConfig config, IEcoTypeSystem model);
    public static void FixTypes(ORMappingDefinition mapping, SqlDatabaseConfig config, IEcoTypeSystem model);
    private void EnsureType(ColumnDefinition col, ISingleColumnAttributemapping mapping, int length);
    private void EnsureType(ColumnDefinition col, string sqlType);
    private static void ForceType(ColumnDefinition col, string sqlType);
    private void EnsureTypes(ColumnCollection cols, IAttributemapping mapping);
    private void Fixit();
    private void FixAlias(AliasDefinition aliasDef);
    private void FixSingleLink(SingleLinkDefinition singleLinkDef);
    private void FixAttribute(AttributeDefinition attrDef, IAttribute attr);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.ConstantColumnCollection : CollectionBase {
    public ConstantColumnDefinition Item { get; public set; }
    public int Add(ConstantColumnDefinition value);
    public void Insert(int index, ConstantColumnDefinition value);
    public ConstantColumnDefinition get_Item(int index);
    public void set_Item(int index, ConstantColumnDefinition value);
}
public class Eco.Persistence.ORMapping.ConstantColumnDefinition : object {
    private ColumnReference m_ColumnRef;
    private string m_Value;
    private string m_Signature;
    private ISingleColumnAttributemapping m_Mapper;
    public ColumnReference ColumnRef { get; public set; }
    public string Value { get; public set; }
    public string Signature { get; public set; }
    public ISingleColumnAttributemapping Mapper { get; public set; }
    public ColumnReference get_ColumnRef();
    public void set_ColumnRef(ColumnReference value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Signature();
    public void set_Signature(string value);
    public ISingleColumnAttributemapping get_Mapper();
    public void set_Mapper(ISingleColumnAttributemapping value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.DatabaseCollection : HashBase {
    public DatabaseDefinition Item { get; }
    public DatabaseDefinition Any { get; }
    public void Add(DatabaseDefinition value);
    public DatabaseDefinition get_Item(string name);
    public DatabaseDefinition get_Any();
}
public class Eco.Persistence.ORMapping.DatabaseDefinition : NamedDefinition {
    private TableCollection m_Tables;
    private ORMappingDefinition m_Mapping;
    private bool m_AllowImplicitDefinitions;
    public TableCollection Tables { get; }
    public ORMappingDefinition Mapping { get; }
    public bool AllowImplicitDefinitions { get; public set; }
    public DatabaseDefinition(ORMappingDefinition mapping, string name);
    public TableDefinition GetTable(string tableName);
    public TableDefinition EnsureTable(string tableName);
    public TableCollection get_Tables();
    internal void SetMapping(ORMappingDefinition mapping);
    public ORMappingDefinition get_Mapping();
    public bool get_AllowImplicitDefinitions();
    public void set_AllowImplicitDefinitions(bool value);
}
[ToolboxBitmapAttribute("Eco.Persistence.ORMapping.DbMappingProvider")]
[ToolboxItemAttribute("True")]
[LocalizableCategoryAttribute("Eco.Persistence.ORMapping.DbMappingProvider", "ComponentCategoryPersistence")]
public class Eco.Persistence.ORMapping.DbMappingProvider : Component {
    private string m_MappingTableName;
    private string m_ColumnName;
    private static string TABLESTABLE_NAME;
    private static string TABLESTABLE_COLUMNNAME;
    private ORMappingDefinition m_Mapping;
    private SqlDatabaseConfig m_Config;
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "TableName")]
[DefaultValueAttribute("<Prefix>_ORMAPPING")]
public string MappingTableName { get; public set; }
    [BrowsableAttribute("False")]
public string EffectiveMappingTableName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ObsoleteAttribute("Use the property MappingTableName instead")]
public string TableName { get; public set; }
    [LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "ColumnName")]
[DefaultValueAttribute("ECO_ORMAPPING")]
public string ColumnName { get; public set; }
    private string EffectiveTableTableName { get; }
    [BrowsableAttribute("False")]
public ORMappingDefinition Mapping { get; }
    private SqlDatabaseConfig Config { get; }
    public string get_MappingTableName();
    public void set_MappingTableName(string value);
    public string get_EffectiveMappingTableName();
    public string get_TableName();
    public void set_TableName(string value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    private string get_EffectiveTableTableName();
    public sealed virtual ORMappingDefinition get_Mapping();
    private static ISingleColumnAttributemapping GetMapper(SqlDatabaseConfig sqlDatabaseConfig, string mapperName);
    private static ISingleColumnAttributemapping GetEnsuredMapper(SqlDatabaseConfig sqlDatabaseConfig, string mapperName);
    private SqlDatabaseConfig get_Config();
    private XmlTextReader LoadMappingFromDb(IDatabase db, SqlDatabaseConfig config);
    public sealed virtual void Initialize(IEcoTypeSystem typeSystem, IDatabase db, SqlDatabaseConfig config, bool addMissingTypes);
    public sealed virtual void PostCreateDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    private static bool CollectionContains(IList`1<string> strings, string containedString);
    public sealed virtual void SaveMappingInfo(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDbScript(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping, IList`1<string> script);
    public sealed virtual IList`1<string> SystemTableNames(SqlDatabaseConfig config);
}
public class Eco.Persistence.ORMapping.DbMetaSupport : object {
    public static string SqlForColumn(ColumnDefinition col, SqlDatabaseConfig config);
    public static string SqlForCreateTable(TableDefinition table, SqlDatabaseConfig config);
    public static string SqlForPrimaryKey(IndexDefinition index, SqlDatabaseConfig config);
    public static string SqlForSecondaryIndex(IndexDefinition index, SqlDatabaseConfig config);
}
[ToolboxBitmapAttribute("Eco.Persistence.ORMapping.DefaultORMappingBuilder")]
[ToolboxItemAttribute("True")]
[DesignerAttribute("Eco.Persistence.Design.DefaultORMappingBuilderDesigner, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.ComponentModel.Design.IDesigner")]
[LocalizableCategoryAttribute("Eco.Persistence.ORMapping.DefaultORMappingBuilder", "ComponentCategoryPersistence")]
public class Eco.Persistence.ORMapping.DefaultORMappingBuilder : Component {
    private bool m_ChildMapRootClass;
    private string m_RootTableName;
    private string m_TypeTableName;
    private string m_TypeColumnName;
    private string m_ClassNameColumnName;
    private string m_TablesTableName;
    private string m_TablesColumnName;
    private string m_IdKeyName;
    private string m_IdKeySignature;
    private string m_IdColumnName;
    private string m_IdMapperName;
    private bool m_IdIsAutoInc;
    private string m_TypeDiscriminatorName;
    private string m_TypeDiscriminatorSignature;
    private string m_ClassNameSignature;
    private bool m_AssignDefaultTypeConditions;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultSingleLinkColumnName>k__BackingField;
    private string m_ReservedWordTableSuffix;
    private string m_ReservedWordColumnSuffix;
    private string m_Database;
    private ORMappingDefinition m_mappingDefinition;
    private SqlDatabaseConfig m_config;
    private bool m_UseTimeStampColumn;
    private bool m_UseTimeStampTable;
    private PersistenceMapperDictionary m_MapperDictionary;
    private Dictionary`2<string, short> types;
    private int highestUsedType;
    private Dictionary`2<string, IClass> m_ClassesThatNeedDisctriminatorFromDb;
    private Dictionary`2<string, IClass> m_ClassesWithoutDiscriminator;
    private IClass m_RootClass;
    private IEcoTypeSystem m_typeSystem;
    private bool m_HasDiscriminatorlessClasses;
    private bool m_HasClassesWithExplicitPrimaryKey;
    private List`1<DiscriminatorValue> newDiscriminators;
    private Dictionary`2<short, string> updatedDiscriminators;
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sChildMapRootClass")]
[DefaultValueAttribute("False")]
public bool ChildMapRootClass { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyRootTableName")]
[DefaultValueAttribute("<Default>")]
public string RootTableName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTypeTableName")]
[DefaultValueAttribute("<Prefix>_TYPE")]
public string TypeTableName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTypeColumnName")]
[DefaultValueAttribute("ECO_TYPE")]
public string TypeColumnName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyClassNameColumnName")]
[DefaultValueAttribute("CLASSNAME")]
public string ClassNameColumnName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTablesTableName")]
[DefaultValueAttribute("<Prefix>_TABLES")]
public string TablesTableName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTablesColumnName")]
[DefaultValueAttribute("TABLENAME")]
public string TablesColumnName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyIdKeyName")]
[DefaultValueAttribute("EcoKey")]
public string IdKeyName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyIdKeySignature")]
[DefaultValueAttribute("System.Int32")]
public string IdKeySignature { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyIdColumnName")]
[DefaultValueAttribute("ECO_ID")]
public string IdColumnName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyIdMapperName")]
[DefaultValueAttribute("DefaultEcoIdMapper.DefaultKeyMapperName")]
public string IdMapperName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyIdIsAutoInc")]
[DefaultValueAttribute("False")]
public bool IdIsAutoInc { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTypeDiscriminatorName")]
[DefaultValueAttribute("EcoType")]
public string TypeDiscriminatorName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyTypeDiscriminatorSignature")]
[DefaultValueAttribute("System.Int16")]
public string TypeDiscriminatorSignature { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyClassNameSignature")]
[DefaultValueAttribute("System.String")]
public string ClassNameSignature { get; public set; }
    [BrowsableAttribute("False")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyAssignDefaultTypeConditions")]
[DefaultValueAttribute("False")]
public bool AssignDefaultTypeConditions { get; public set; }
    [DefaultValueAttribute("<Name>")]
public string DefaultSingleLinkColumnName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sReservedWordTableSuffix")]
[DefaultValueAttribute("_TBL")]
public string ReservedWordTableSuffix { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sReservedWordColumnSuffix")]
[DefaultValueAttribute("_COL")]
public string ReservedWordColumnSuffix { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyDatabase")]
[DefaultValueAttribute("")]
public string Database { get; public set; }
    [BrowsableAttribute("False")]
public ORMappingDefinition Mapping { get; }
    [BrowsableAttribute("False")]
public SqlDatabaseConfig Config { get; }
    private bool UseTimeStampColumn { get; }
    private bool UseTimeStampTable { get; }
    [BrowsableAttribute("False")]
public PersistenceMapperDictionary MapperDictionary { get; }
    [BrowsableAttribute("False")]
public ISingleColumnAttributemapping Int32Mapper { get; }
    [BrowsableAttribute("False")]
public ISingleColumnAttributemapping IdKeyMapper { get; }
    [BrowsableAttribute("False")]
public ISingleColumnAttributemapping DiscriminatorMapper { get; }
    [BrowsableAttribute("False")]
public ISingleColumnAttributemapping ClassNameMapper { get; }
    public string EffectiveTypeTableName { get; }
    public string EffectiveTablesTableName { get; }
    public IClass RootClass { get; }
    public bool get_ChildMapRootClass();
    public void set_ChildMapRootClass(bool value);
    public string get_RootTableName();
    public void set_RootTableName(string value);
    public string get_TypeTableName();
    public void set_TypeTableName(string value);
    public string get_TypeColumnName();
    public void set_TypeColumnName(string value);
    public string get_ClassNameColumnName();
    public void set_ClassNameColumnName(string value);
    public string get_TablesTableName();
    public void set_TablesTableName(string value);
    public string get_TablesColumnName();
    public void set_TablesColumnName(string value);
    public string get_IdKeyName();
    public void set_IdKeyName(string value);
    public string get_IdKeySignature();
    public void set_IdKeySignature(string value);
    public string get_IdColumnName();
    public void set_IdColumnName(string value);
    public string get_IdMapperName();
    public void set_IdMapperName(string value);
    public bool get_IdIsAutoInc();
    public void set_IdIsAutoInc(bool value);
    public string get_TypeDiscriminatorName();
    public void set_TypeDiscriminatorName(string value);
    public string get_TypeDiscriminatorSignature();
    public void set_TypeDiscriminatorSignature(string value);
    public string get_ClassNameSignature();
    public void set_ClassNameSignature(string value);
    public bool get_AssignDefaultTypeConditions();
    public void set_AssignDefaultTypeConditions(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultSingleLinkColumnName();
    [CompilerGeneratedAttribute]
public void set_DefaultSingleLinkColumnName(string value);
    public string get_ReservedWordTableSuffix();
    public void set_ReservedWordTableSuffix(string value);
    public string get_ReservedWordColumnSuffix();
    public void set_ReservedWordColumnSuffix(string value);
    public string get_Database();
    public void set_Database(string value);
    public sealed virtual ORMappingDefinition get_Mapping();
    public SqlDatabaseConfig get_Config();
    private bool get_UseTimeStampColumn();
    private bool get_UseTimeStampTable();
    public PersistenceMapperDictionary get_MapperDictionary();
    public ISingleColumnAttributemapping get_Int32Mapper();
    public ISingleColumnAttributemapping get_IdKeyMapper();
    public ISingleColumnAttributemapping get_DiscriminatorMapper();
    public ISingleColumnAttributemapping get_ClassNameMapper();
    protected virtual string ExpandName(string name, string defaultName, int maxLength, SqlDatabaseConfig config, string suffix, bool isTable);
    public string get_EffectiveTypeTableName();
    public string get_EffectiveTablesTableName();
    private void SetCommonDefaults();
    public void SetBoldDefaults();
    public void SetEcoIDefaults();
    public void SetEcoIIDefaults();
    public void SetEcoIIIDefaults();
    public void SetEcoCompatibilityMode(EcoCompatibilityMode mode);
    public void SetAutoIncIdDefaults();
    public void SetGuidIdDefaults();
    public void SetInt32IdDefaults();
    public void SetInt64IdDefaults();
    private void BuildFeatureMappingsForClass(IClass c, ClassDefinition def, AliasDefinition alias);
    private void BuildFeatureMappingsForChildMappedSuperClasses(IClass c, ClassDefinition def, AliasDefinition alias);
    private void BuildFeatureMappingsForParentMappedClass(IClass c, ClassDefinition def);
    private bool AllParentClassesAreChildMapped(IClass c);
    private ClassDefinition BuildMappingForClassPass1(IClass c);
    public static bool MyInterfaceFilter(Type typeObj, object criteriaObj);
    private DiscriminatorMode GetDiscriminatorModeForClass(IClass c);
    private TableMapping GetTableMapping(IClass c);
    private void BuildMappingForClassPass2(ClassDefinition res, IClass c);
    public bool VersionedClassHasStopTimeColumn(IClass c);
    private static void AddDiscriminatorValue(ClassDefinition classDef, string discriminatorvalueName, string discriminatorvalue, bool isFinal);
    private NameValueCollection CreateNameValueCollection(string s, string context);
    private void BuildMappingForAttribute(ClassDefinition classDef, IAttribute a, AliasDefinition alias);
    private void BuildMappingForSingleLinks(IClass c, ClassDefinition classDef, IAssociationEnd ae, AliasDefinition alias);
    private void GetDiscriminatorValuesFromConnection(IDatabase db, Dictionary`2<string, short> types);
    public IClass get_RootClass();
    public sealed virtual void Initialize(IEcoTypeSystem typeSystem, IDatabase db, SqlDatabaseConfig config, bool addMissingTypes);
    private void EnsureTypesForAllClasses();
    private void SaveTypesToDb(IExecQuery execQ, IQuery query, IDatabase db);
    public sealed virtual void PostCreateDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void SaveMappingInfo(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDbScript(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping, IList`1<string> script);
    public sealed virtual IList`1<string> SystemTableNames(SqlDatabaseConfig config);
}
public class Eco.Persistence.ORMapping.DiscriminatorDef : NamedDefinition {
    private bool m_IsStringType;
    private string m_Signature;
    private DiscriminatorValueCollection m_Values;
    private ISingleColumnAttributemapping m_Mapper;
    private List`1<DiscriminatorValue> m_DiscriminatorValuesByClassId;
    public bool IsStringType { get; }
    public string Signature { get; public set; }
    public DiscriminatorValueCollection Values { get; }
    public ISingleColumnAttributemapping Mapper { get; public set; }
    public bool get_IsStringType();
    public string get_Signature();
    public void set_Signature(string value);
    public DiscriminatorValueCollection get_Values();
    public ISingleColumnAttributemapping get_Mapper();
    public void set_Mapper(ISingleColumnAttributemapping value);
    public DiscriminatorValue DiscriminatorValuesByClassId(int classId);
    public void SetDiscriminatorValuesByClassId(int classId, DiscriminatorValue value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.DiscriminatorDefCollection : HashBase {
    public DiscriminatorDef Item { get; }
    public void Add(DiscriminatorDef value);
    public DiscriminatorDef get_Item(string name);
}
public class Eco.Persistence.ORMapping.DiscriminatorImplementation : object {
    private AliasDefinition m_Alias;
    private ColumnReference m_ColumnRef;
    private DiscriminatorDef m_Discriminator;
    public AliasDefinition Alias { get; }
    public ColumnReference ColumnRef { get; public set; }
    public DiscriminatorDef Discriminator { get; public set; }
    public DiscriminatorImplementation(AliasDefinition alias);
    public AliasDefinition get_Alias();
    private sealed virtual override object Eco.Collections.IHashBaseElement.GetHashKey();
    public ColumnReference get_ColumnRef();
    public void set_ColumnRef(ColumnReference value);
    public DiscriminatorDef get_Discriminator();
    public void set_Discriminator(DiscriminatorDef value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.DiscriminatorImplementationCollection : HashBase {
    public DiscriminatorImplementation Item { get; }
    public void Add(DiscriminatorImplementation value);
    public DiscriminatorImplementation get_Item(string name);
}
public enum Eco.Persistence.ORMapping.DiscriminatorMode : Enum {
    public int value__;
    public static DiscriminatorMode Default;
    public static DiscriminatorMode Custom;
    public static DiscriminatorMode None;
}
public class Eco.Persistence.ORMapping.DiscriminatorValue : object {
    private string m_Value;
    private bool m_IsFinal;
    private DiscriminatorDef m_Discriminator;
    private ClassDefinition m_Class;
    public string Value { get; public set; }
    public bool IsFinal { get; public set; }
    public DiscriminatorDef Discriminator { get; public set; }
    public ClassDefinition Class_ { get; public set; }
    private sealed virtual override object Eco.Collections.IHashBaseElement.GetHashKey();
    public string get_Value();
    public void set_Value(string value);
    public bool get_IsFinal();
    public void set_IsFinal(bool value);
    public DiscriminatorDef get_Discriminator();
    public void set_Discriminator(DiscriminatorDef value);
    public ClassDefinition get_Class_();
    public void set_Class_(ClassDefinition value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.DiscriminatorValueCollection : CollectionBase {
    private Dictionary`2<string, DiscriminatorValue> m_Valuehash;
    private Dictionary`2<string, DiscriminatorValue> m_Namehash;
    public DiscriminatorValue Item { get; }
    public void Add(DiscriminatorValue value);
    private void AddToValuehash(DiscriminatorValue v);
    private void AddToNamehash(DiscriminatorValue v);
    private void EnsureNameHash();
    private void EnsureValueHash();
    public DiscriminatorValue get_Item(int index);
    public DiscriminatorValue FindByName(string name);
    public DiscriminatorValue FindByValue(string value);
}
public enum Eco.Persistence.ORMapping.EcoCompatibilityMode : Enum {
    public int value__;
    public static EcoCompatibilityMode Bold;
    public static EcoCompatibilityMode EcoI;
    public static EcoCompatibilityMode EcoII;
    public static EcoCompatibilityMode EcoIII;
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.FeatureCollection : HashBase {
    public StructuralFeatureDefinition Item { get; }
    public void Add(StructuralFeatureDefinition value);
    public StructuralFeatureDefinition get_Item(string name);
}
[ToolboxBitmapAttribute("Eco.Persistence.ORMapping.FileMappingProvider")]
[ToolboxItemAttribute("True")]
[LocalizableCategoryAttribute("Eco.Persistence.ORMapping.FileMappingProvider", "ComponentCategoryPersistence")]
public class Eco.Persistence.ORMapping.FileMappingProvider : Component {
    private string m_FileName;
    private string m_ResourceName;
    private ORMappingDefinition m_Mapping;
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyXmlFileName")]
[EditorAttribute("Eco.Persistence.Design.NewXmlMappingFileNameEditor,Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string FileName { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyResourceName")]
[DefaultValueAttribute("")]
public string ResourceName { get; public set; }
    [BrowsableAttribute("False")]
public ORMappingDefinition Mapping { get; }
    public string get_FileName();
    public void set_FileName(string value);
    public string get_ResourceName();
    public void set_ResourceName(string value);
    public sealed virtual ORMappingDefinition get_Mapping();
    public sealed virtual void Initialize(IEcoTypeSystem typeSystem, IDatabase db, SqlDatabaseConfig config, bool addMissingTypes);
    public sealed virtual void PostCreateDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void SaveMappingInfo(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDbScript(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping, IList`1<string> script);
    public sealed virtual IList`1<string> SystemTableNames(SqlDatabaseConfig config);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.ForeignKeyCollection : HashBase {
    public ForeignKeyDefinition Item { get; }
    public void Add(ForeignKeyDefinition value);
    public ForeignKeyDefinition get_Item(string name);
}
public class Eco.Persistence.ORMapping.ForeignKeyDefinition : NamedDefinition {
    private ColumnCollection m_Columns;
    private TableDefinition m_Table;
    private ColumnCollection m_ForeignColumns;
    public ColumnCollection OwnColumns { get; }
    public TableDefinition Table { get; }
    public ColumnCollection ForeignColumns { get; }
    public ForeignKeyDefinition(TableDefinition table, string name);
    public ColumnCollection get_OwnColumns();
    public TableDefinition get_Table();
    public ColumnCollection get_ForeignColumns();
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.IndexCollection : CollectionBase {
    public IndexDefinition Item { get; }
    public void Add(IndexDefinition value);
    public IndexDefinition get_Item(int index);
}
public class Eco.Persistence.ORMapping.IndexDefinition : NamedDefinition {
    private TableDefinition m_Table;
    private ColumnCollection m_Columns;
    private bool m_IsPrimary;
    private bool m_IsUnique;
    private bool m_IsDescending;
    private bool m_IsCaseInsensitive;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsFilteredOnNotNull>k__BackingField;
    public TableDefinition Table { get; }
    public ColumnCollection Columns { get; }
    public bool IsPrimary { get; public set; }
    public bool IsUnique { get; public set; }
    public bool IsDescending { get; public set; }
    public bool IsCaseInsensitive { get; public set; }
    public bool IsFilteredOnNotNull { get; public set; }
    public IndexDefinition(TableDefinition table, string name);
    public TableDefinition get_Table();
    public ColumnCollection get_Columns();
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public bool get_IsDescending();
    public void set_IsDescending(bool value);
    public bool get_IsCaseInsensitive();
    public void set_IsCaseInsensitive(bool value);
    [CompilerGeneratedAttribute]
public void set_IsFilteredOnNotNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFilteredOnNotNull();
}
public interface Eco.Persistence.ORMapping.IORMappingProvider {
    public ORMappingDefinition Mapping { get; }
    public abstract virtual ORMappingDefinition get_Mapping();
    public abstract virtual void Initialize(IEcoTypeSystem typeSystem, IDatabase db, SqlDatabaseConfig config, bool addMissingTypes);
    public abstract virtual IList`1<string> SystemTableNames(SqlDatabaseConfig config);
    public abstract virtual void PostCreateDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public abstract virtual void PostEvolveDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public abstract virtual void PostEvolveDbScript(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping, IList`1<string> script);
    public abstract virtual void SaveMappingInfo(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
}
public enum Eco.Persistence.ORMapping.KeyCoverage : Enum {
    public int value__;
    public static KeyCoverage NotCovered;
    public static KeyCoverage CoveredByDbAssigned;
    public static KeyCoverage CoveredByFrozen;
}
public class Eco.Persistence.ORMapping.KeyDefinition : NamedDefinition {
    private List`1<string> m_Signature;
    private bool m_IsId;
    private string m_KeyMapperName;
    private bool m_IsAutoInc;
    private ArrayList m_Attributemappings;
    private IKeyMapper m_KeyMapper;
    private KeyImplementationCollection m_KeyImplementations;
    public List`1<string> Signature { get; }
    public bool IsId { get; public set; }
    public string KeyMapperName { get; public set; }
    public bool IsAutoInc { get; }
    public ArrayList Attributemappings { get; }
    public int KeyColumnCount { get; }
    public IKeyMapper KeyMapper { get; }
    public KeyImplementationCollection KeyImplementations { get; }
    public List`1<string> get_Signature();
    public bool get_IsId();
    public void set_IsId(bool value);
    public string get_KeyMapperName();
    public void set_KeyMapperName(string value);
    public bool get_IsAutoInc();
    public void MarkAutoInc();
    public ArrayList get_Attributemappings();
    public int get_KeyColumnCount();
    public IKeyMapper get_KeyMapper();
    public void SetKeyMapper(IKeyMapper keyMapper);
    public KeyImplementationCollection get_KeyImplementations();
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.KeyDefinitionCollection : HashBase {
    public KeyDefinition Item { get; }
    public void Add(KeyDefinition value);
    public KeyDefinition get_Item(string name);
}
public class Eco.Persistence.ORMapping.KeyImplementation : object {
    private AliasDefinition m_Alias;
    private ColumnReferenceCollection m_KeyColumns;
    private ColumnReferenceCollection m_DiscriminatorColumns;
    private ConstantColumnCollection m_ConstantColumns;
    private bool m_AutoInc;
    private KeyDefinition m_Key;
    private KeyCoverage m_ColumnsCoveredByMember;
    public AliasDefinition Alias { get; }
    public ColumnReferenceCollection KeyColumns { get; }
    public ColumnReferenceCollection DiscriminatorColumns { get; }
    public ConstantColumnCollection ConstantColumns { get; }
    public bool AutoInc { get; public set; }
    public KeyDefinition Key { get; public set; }
    public KeyCoverage ColumnsCoveredByMember { get; public set; }
    public KeyImplementation(AliasDefinition alias);
    public AliasDefinition get_Alias();
    private sealed virtual override object Eco.Collections.IHashBaseElement.GetHashKey();
    public ColumnReferenceCollection get_KeyColumns();
    public ColumnReferenceCollection get_DiscriminatorColumns();
    public ConstantColumnCollection get_ConstantColumns();
    public bool get_AutoInc();
    public void set_AutoInc(bool value);
    public KeyDefinition get_Key();
    public void set_Key(KeyDefinition value);
    public KeyCoverage get_ColumnsCoveredByMember();
    public void set_ColumnsCoveredByMember(KeyCoverage value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.KeyImplementationCollection : CollectionBase {
    private Dictionary`2<string, KeyImplementation> m_NameHash;
    public KeyImplementation Item { get; }
    public KeyImplementation Item { get; }
    public int Add(KeyImplementation value);
    private void AddToNameHash(KeyImplementation value);
    private void EnsureNameHash();
    public KeyImplementation get_Item(int index);
    public KeyImplementation get_Item(string name);
}
public class Eco.Persistence.ORMapping.NamedDefinition : object {
    private string m_Name;
    private static Regex m_NameMatcher1;
    private static Regex m_NameMatcher2;
    public string Name { get; public set; }
    private static NamedDefinition();
    private sealed virtual override object Eco.Collections.IHashBaseElement.GetHashKey();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public static string CleanName(string name);
}
public class Eco.Persistence.ORMapping.ORMappingDefinition : object {
    private IList`1<string> m_Messages;
    private bool m_HasErrors;
    private bool m_HasWarnings;
    private bool m_IsValidated;
    private ClassCollection m_Classes;
    private DatabaseCollection m_Databases;
    public IList`1<string> Messages { get; }
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public bool ValidatedOK { get; }
    public bool IsValidated { get; public set; }
    public ClassCollection Classes { get; }
    public DatabaseCollection Databases { get; }
    public DatabaseDefinition DefaultDatabase { get; }
    private string TranslateString(string msg);
    public void Warning(string msg);
    public void Error(string msg);
    public IList`1<string> get_Messages();
    public bool get_HasErrors();
    public bool get_HasWarnings();
    public bool get_ValidatedOK();
    public bool get_IsValidated();
    public void set_IsValidated(bool value);
    public ClassCollection get_Classes();
    public DatabaseCollection get_Databases();
    public DatabaseDefinition get_DefaultDatabase();
    public void Merge(ORMappingDefinition def, string dbName);
    public static KeyDefinition FindKeyDefinition(ClassDefinition c, string keyName);
    public KeyDefinition FindPrimaryKeyDefinition(ClassDefinition c);
    public static DiscriminatorDef FindDiscriminator(ClassDefinition c, string name);
    public void Validate(SqlDatabaseConfig config, IEcoTypeSystem typeSystem);
}
public class Eco.Persistence.ORMapping.ORMappingValidator : object {
    private ORMappingDefinition m_Mapping;
    private IEcoTypeSystem m_TypeSystem;
    private SqlDatabaseConfig m_Config;
    private PersistenceMapperDictionary m_MapperDictionary;
    private Dictionary`2<ClassDefinition, ClassDefinition> m_classesWithId;
    public ORMappingDefinition Mapping { get; }
    public IEcoTypeSystem TypeSystem { get; }
    public SqlDatabaseConfig Config { get; }
    public ORMappingValidator(ORMappingDefinition mapping, IEcoTypeSystem typeSystem, SqlDatabaseConfig config);
    public ORMappingDefinition get_Mapping();
    public IEcoTypeSystem get_TypeSystem();
    public SqlDatabaseConfig get_Config();
    public void ValidateMapping();
    private void ValidateClassMapping(ClassDefinition classDef, IClass umlClass);
    private void EnsureDiscriminatorValue(ClassDefinition classDef, DiscriminatorDef t, IClass umlClass);
    private void ValidateAliasMapping(AliasDefinition aliasDef, ClassDefinition classDef, IClass umlClass);
    private void ValidateKeyImpl(KeyImplementation keyImpl, AliasDefinition aliasDef, ClassDefinition classDef, IClass umlClass);
    private void ValidateDiscriminatorDef(DiscriminatorDef typeDisc, ClassDefinition classDef);
    private void ValidateDiscriminatorValue(DiscriminatorValue typeCond, ClassDefinition classDef, IClass umlClass);
    private void ValidateDiscriminatorImpl(DiscriminatorImplementation t, AliasDefinition aliasDef, ClassDefinition classDef, IClass umlClass);
    private void ValidateAttributeDefinition(AttributeDefinition a, ClassDefinition classDef, IClass umlClass);
    private void ValidateSingleLinkDefinition(SingleLinkDefinition s, ClassDefinition classDef, IClass umlClass);
    private void ValidateKeyDef(KeyDefinition k, ClassDefinition classDef);
}
public class Eco.Persistence.ORMapping.ORMappingXmlGenerator : object {
    private static void SetAttribute(XmlNode node, XmlDocument doc, string attributeName, string value);
    private static string CommaSeparate(IList`1<string> s);
    private static string CommaSeparate(ColumnCollection columns);
    public void GenerateMappingXml(ORMappingDefinition mapping, string fileName);
    public string GenerateMappingXmlString(ORMappingDefinition mapping);
    public XmlDocument GenerateMappingXml(ORMappingDefinition mapping);
    private void GenerateClassMapping(ClassDefinition c, XmlDocument doc, XmlNode parent);
    private void GenerateAliasMapping(AliasDefinition a, XmlDocument doc, XmlNode parent);
    private void GenerateKeyImpl(KeyImplementation k, XmlDocument doc, XmlNode parent);
    private void GenerateDiscriminatorDef(DiscriminatorDef t, XmlDocument doc, XmlNode parent);
    private void GenerateDiscriminatorValue(DiscriminatorValue t, XmlDocument doc, XmlNode parent);
    private void GenerateDiscriminatorImpl(DiscriminatorImplementation t, XmlDocument doc, XmlNode parent);
    private void GenerateAttributeDefinition(AttributeDefinition a, XmlDocument doc, XmlNode parent);
    private void GenerateSingleLinkDefinition(SingleLinkDefinition s, XmlDocument doc, XmlNode parent);
    private void GenerateKeyDef(KeyDefinition k, XmlDocument doc, XmlNode parent);
    private void GenerateDatabaseMapping(DatabaseDefinition db, XmlDocument doc, XmlNode parent);
    private void GenerateTableMapping(TableDefinition table, XmlDocument doc, XmlNode parent);
    private void GenerateColumnMapping(ColumnDefinition col, XmlDocument doc, XmlNode parent);
    private void GenerateIndexMapping(IndexDefinition ix, XmlDocument doc, XmlNode parent);
    private void GenerateFKMapping(ForeignKeyDefinition fk, XmlDocument doc, XmlNode parent);
}
public class Eco.Persistence.ORMapping.ORMappingXmlReader : object {
    private static string COMMENTNAME;
    private DatabaseDefinition m_DefaultDatabaseDef;
    private bool m_ExplicitDatabases;
    private ORMappingDefinition m_Mapping;
    private bool m_ImplicitAliasInFeatures;
    private bool m_ImplicitColumnInFeatures;
    private Dictionary`2<XmlNode, ClassDefinition> classmap;
    private Dictionary`2<XmlNode, TableDefinition> tablemap;
    private Dictionary`2<XmlNode, AliasDefinition> aliasmap;
    public ORMappingDefinition Mapping { get; }
    internal bool ImplicitAliasInFeatures { get; }
    internal bool ImplicitColumnInFeatures { get; }
    private static string GetAttribute(XmlNode node, string attributeName);
    private static bool GetBoolAttribute(XmlNode node, string attributeName);
    private static int GetIntAttribute(XmlNode node, string attributeName, int def);
    private String[] GetAttribute(XmlNode node, string attributeName, char splitchar);
    private static bool IsEmpty(string s);
    public ORMappingDefinition get_Mapping();
    internal bool get_ImplicitAliasInFeatures();
    internal bool get_ImplicitColumnInFeatures();
    public ORMappingDefinition ReadMappingXml(string fileName);
    private void ReadGlobals(XmlNode root);
    public ORMappingDefinition ReadMappingXml(XmlDocument doc);
    public void ReadClassPass1(XmlNode node);
    public void ReadClassSuperClasses(XmlNode node);
    public void ReadClassPass3(XmlNode node);
    public void ReadAliasPass1(XmlNode node, ClassDefinition classDef);
    public void ReadAliasPass3(XmlNode node, ClassDefinition classDef);
    public void ReadKeyDefinition(XmlNode node, ClassDefinition classDef);
    private AliasDefinition GetAlias(string aliasName, ClassDefinition classDef, string propertyname);
    public void ReadAttribute(XmlNode node, ClassDefinition classDef);
    public void ReadSingleLink(XmlNode node, ClassDefinition classDef);
    public void ReadDiscriminatorValue(XmlNode node, ClassDefinition classDef);
    public void ReadDiscriminatorDef(XmlNode node, ClassDefinition classDef);
    public void ReadDiscriminatorImpl(XmlNode node, AliasDefinition aliasDef, ClassDefinition classDef);
    public void ReadKeyImpl(XmlNode node, ClassDefinition classDef, AliasDefinition aliasDef);
    private void ReadConstantColumn(XmlNode node, AliasDefinition aliasDef, KeyImplementation keyImpl);
    private void ReadDatabase(XmlNode node);
    private void ReadTablePass1(XmlNode node, DatabaseDefinition db);
    private void ReadTablePass2(XmlNode node, DatabaseDefinition db);
    private void ReadIndex(XmlNode node, TableDefinition tableDef);
    private void ReadForeignKey(XmlNode node, TableDefinition tableDef);
    private void ReadColumn(XmlNode node, TableDefinition tableDef);
}
public class Eco.Persistence.ORMapping.SingleLinkDefinition : StructuralFeatureDefinition {
    private ColumnReference m_OrderColumn;
    private string m_OtherEndName;
    private ClassDefinition m_OtherEnd;
    private string m_KeyName;
    private KeyDefinition m_Key;
    private bool m_IsConstrained;
    private bool m_Mandatory;
    public ColumnReference OrderColumn { get; public set; }
    public string OtherEndName { get; public set; }
    public ClassDefinition OtherEnd { get; public set; }
    public string KeyName { get; public set; }
    public KeyDefinition Key { get; public set; }
    public bool IsConstrained { get; public set; }
    public bool Mandatory { get; public set; }
    public ColumnReference get_OrderColumn();
    public void set_OrderColumn(ColumnReference value);
    public string get_OtherEndName();
    public void set_OtherEndName(string value);
    public ClassDefinition get_OtherEnd();
    public void set_OtherEnd(ClassDefinition value);
    public string get_KeyName();
    public void set_KeyName(string value);
    public KeyDefinition get_Key();
    public void set_Key(KeyDefinition value);
    public bool get_IsConstrained();
    public void set_IsConstrained(bool value);
    public bool get_Mandatory();
    public void set_Mandatory(bool value);
}
public class Eco.Persistence.ORMapping.StructuralFeatureDefinition : NamedDefinition {
    private ColumnCollection m_Columns;
    private ColumnCollection m_ReadonlyColumns;
    private AliasDefinition m_Alias;
    public ColumnCollection Columns { get; }
    public ColumnCollection ReadonlyColumns { get; }
    public string ColumnsAsString { get; }
    public string ColumnTypesAsString { get; }
    public bool Pseudo { get; public set; }
    public AliasDefinition Alias { get; public set; }
    public ColumnCollection get_Columns();
    public ColumnCollection get_ReadonlyColumns();
    public string get_ColumnsAsString();
    public string get_ColumnTypesAsString();
    public virtual bool get_Pseudo();
    public virtual void set_Pseudo(bool value);
    public AliasDefinition get_Alias();
    public void set_Alias(AliasDefinition value);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.ORMapping.TableCollection : CollectionBase {
    private Dictionary`2<string, TableDefinition> tables;
    public TableDefinition Item { get; public set; }
    public TableDefinition Item { get; }
    public void Add(TableDefinition value);
    public TableDefinition get_Item(int index);
    public void set_Item(int index, TableDefinition value);
    public TableDefinition get_Item(string name);
}
public class Eco.Persistence.ORMapping.TableDefinition : NamedDefinition {
    private ColumnCollection m_Columns;
    private IndexCollection m_Indices;
    private ForeignKeyCollection m_ForeignKeys;
    private DatabaseDefinition m_Database;
    public ColumnCollection Columns { get; }
    public IndexCollection Indices { get; }
    public ForeignKeyCollection ForeignKeys { get; }
    public DatabaseDefinition Database { get; }
    public string SqlName { get; }
    public bool HasPrimaryKeyIndex { get; }
    public IndexDefinition PrimaryKeyIndex { get; }
    public TableDefinition(DatabaseDefinition db, string tableName);
    public ColumnDefinition GetColumn(string columnName);
    public ColumnDefinition EnsureColumn(string columnName);
    public ColumnCollection get_Columns();
    public IndexCollection get_Indices();
    public ForeignKeyCollection get_ForeignKeys();
    public DatabaseDefinition get_Database();
    public string get_SqlName();
    public bool get_HasPrimaryKeyIndex();
    public IndexDefinition get_PrimaryKeyIndex();
}
internal class Eco.Persistence.ORMapping.Utf8StringWriter : StringWriter {
    public Encoding Encoding { get; }
    public virtual Encoding get_Encoding();
}
internal abstract class Eco.Persistence.ORMapping.XmlCommon : object {
    internal static string NodeName_Globals;
    internal static string NodeName_ImplicitAliasInFeatures;
    internal static string NodeName_ImplicitColumnInFeatures;
    internal static string NodeName_Classes;
    internal static string NodeName_ORMapping;
    internal static string NodeName_Class;
    internal static string AttributeName_SuperClass;
    internal static string AttributeName_Name;
    internal static string NodeName_Alias;
    internal static string NodeName_Database;
    internal static string NodeName_Table;
    internal static string NodeName_Column;
    internal static string NodeName_Index;
    internal static string NodeName_ForeignKey;
    internal static string AttributeName_ForeignColumns;
    internal static string AttributeName_AllowImplicitDefinitions;
    internal static string AttributeName_Table;
    internal static string AttributeName_Database;
    internal static string AttributeName_IsMainAlias;
    internal static string AttributeName_Type;
    internal static string AttributeName_IsCaseSensitive;
    internal static string AttributeName_IsUnique;
    internal static string AttributeName_IsPrimary;
    internal static string AttributeName_IsDescending;
    internal static string AttributeName_IsFilteredOnNotNull;
    internal static string AttributeName_DefaultValue;
    internal static string AttributeName_ExtentRequiresDiscriminator;
    internal static string AttributeName_ContainsStartTime;
    internal static string AttributeName_ContainsStopTime;
    internal static string NodeName_KeyDef;
    internal static string AttributeName_Signature;
    internal static string AttributeName_IsId;
    internal static string AttributeName_KeyMapper;
    internal static string NodeName_KeyImpl;
    internal static string AttributeName_AutoInc;
    internal static string NodeName_KeyColumn;
    internal static string NodeName_DiscriminatorColumn;
    internal static string NodeName_ConstantColumn;
    internal static string AttributeName_Column;
    internal static string AttributeName_Value;
    internal static string NodeName_TypeDiscriminatorDef;
    internal static string AttributeName_Alias;
    internal static string NodeName_TypeCondition;
    internal static string AttributeName_IsFinal;
    internal static string NodeName_TypeDiscriminatorImpl;
    internal static string AttributeName_Parent;
    internal static string AttributeName_Local;
    internal static string NodeName_Attribute;
    internal static string AttributeName_AttributeMapper;
    internal static string AttributeName_Columns;
    internal static string AttributeName_AllowNull;
    internal static string AttributeName_Length;
    internal static string AttributeName_Precision;
    internal static string AttributeName_Scale;
    internal static string AttributeName_Pseudo;
    internal static string NodeName_SingleLink;
    internal static string AttributeName_Key;
    internal static string AttributeName_OrderColumn;
    internal static string AttributeName_Mandatory;
    internal static string AttributeName_IsConstrained;
}
public abstract class Eco.Persistence.PersistenceMapperAdo2 : PersistenceMapperDb {
    private bool m_ConnectionDisposed;
    private bool m_ConnectionBusy;
    private string m_ConnectionString;
    private DbConnection m_InternalConnection;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CommandTimeout>k__BackingField;
    private DbConnection m_DbConnection;
    [BrowsableAttribute("False")]
public bool HasConnection { get; }
    [DefaultValueAttribute("")]
[SettingsBindableAttribute("True")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
public string ConnectionString { get; public set; }
    protected DbConnection EffectiveConnection { get; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    private sealed virtual override bool Eco.Persistence.IAutoHookable.CanHookup(Component component);
    private sealed virtual override void Eco.Persistence.IAutoHookable.AutoHookup(Component component);
    private sealed virtual override bool Eco.Persistence.IAutoHookable.IsHookedUpTo(Component component);
    protected abstract virtual Type ConnectionType();
    public virtual bool get_HasConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    protected DbConnection get_EffectiveConnection();
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    protected DbConnection get_DbConnection();
    protected void set_DbConnection(DbConnection value);
    private void ConnectionDisposedEventHandler(object sender, EventArgs e);
    protected abstract virtual IDatabase InternalCreateIDatabase(DbConnection connection, SqlDatabaseConfig config);
    protected internal virtual IDatabase MakeDatabase();
    protected internal virtual void ReturnDatabase(IDatabase database);
}
[DesignerAttribute("Eco.Persistence.Design.PersistenceHandleDesigner, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.ComponentModel.Design.IDesigner")]
[ComponentHelpAttribute("Eco.Persistence.Design.PersistenceMapperInspector", "Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
public abstract class Eco.Persistence.PersistenceMapperDb : AbstractPersistenceMapperDb {
    private SqlDatabaseConfig m_SqlDatabaseConfig;
    private IORMappingProvider m_DefaultOldMappingProvider;
    private DefaultORMappingBuilder m_DefaultNewMappingProvider;
    private IORMappingProvider m_OldMappingProvider;
    private IORMappingProvider m_NewMappingProvider;
    private ConnectionPool m_ConnectionPool;
    [BrowsableAttribute("False")]
public bool HasConnection { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Active property is obsolete. Setting or getting this property has no effect. Please remove code line.")]
unknown bool Active {public set; }
    [BrowsableAttribute("False")]
public ConnectionPool ConnectionPool { get; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryMapping")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyOldMappingProvider")]
[DefaultValueAttribute("")]
public IORMappingProvider OldMappingProvider { get; public set; }
    [BrowsableAttribute("False")]
public IORMappingProvider EffectiveOldMappingProvider { get; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryMapping")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyNewMappingProvider")]
[DefaultValueAttribute("")]
public IORMappingProvider NewMappingProvider { get; public set; }
    [BrowsableAttribute("False")]
public IORMappingProvider EffectiveNewMappingProvider { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPersistence")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertySqlDatabaseConfig")]
public SqlDatabaseConfig SqlDatabaseConfig { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ObsoleteAttribute]
unknown string ClockLogGranularity {public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ObsoleteAttribute]
unknown bool EvolutionSupport {public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPooling")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyMaxOpenConnections")]
[DefaultValueAttribute("50")]
public int MaxOpenConnections { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryPooling")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyMaxPooledConnections")]
[DefaultValueAttribute("50")]
public int MaxPoolConnections { get; public set; }
    protected virtual void SetCompatibilityMode(EcoCompatibilityMode mode);
    public abstract virtual bool get_HasConnection();
    public void set_Active(bool value);
    public ConnectionPool get_ConnectionPool();
    public IORMappingProvider get_OldMappingProvider();
    public void set_OldMappingProvider(IORMappingProvider value);
    public IORMappingProvider get_EffectiveOldMappingProvider();
    public IORMappingProvider get_NewMappingProvider();
    public void set_NewMappingProvider(IORMappingProvider value);
    public IORMappingProvider get_EffectiveNewMappingProvider();
    public void CreateDatabaseSchema(ITypeSystemService typeSystemService);
    public IList`1<string> CreateSchemaScript(ITypeSystemService typeSystemService);
    private string GetRuntimeDbName();
    private string GetNewDbName();
    public bool ValidateSchemaStructure(IList`1<string> remedies, ITypeSystemService typeSystemService);
    public bool ColumnFieldConsistencyCheck(IList`1<string> remedies, ITypeSystemService typeSystemService, bool errorsasexceptions);
    public bool ValidateDataStructure(IList`1<string> remedies, ITypeSystemService typeSystemService);
    public bool ValidateDataStructure(IList`1<string> remedies, ITypeSystemService typeSystemService, bool errorsasexceptions);
    private void ValidateMapping(ORMappingDefinition mapping, SqlDatabaseConfig config, IEcoTypeSystem typeSystem);
    public sealed virtual void CreateDatabaseSchema(ITypeSystemService typeSystemService, IConfigureCleanPS configureCleanPS);
    private void EnsureValidSqlDatabaseConfig();
    public void ApplyScript(List`1<string> sqlScript);
    public void SaveMappingInfo(ITypeSystemService typeSystemService);
    public bool DatabaseHasTable(string tableName);
    public sealed virtual IDBEvolutor GetEvolutor(ITypeSystemService typeSystemService);
    public IDatabase GetDatabaseConnection(bool exclusive);
    public void ReturnDatabaseConnection(IDatabase db);
    public sealed virtual void ReturnEvolutor(IDBEvolutor evolutor);
    public SqlDatabaseConfig get_SqlDatabaseConfig();
    public void set_ClockLogGranularity(string value);
    public void set_EvolutionSupport(bool value);
    public int get_MaxOpenConnections();
    public void set_MaxOpenConnections(int value);
    public int get_MaxPoolConnections();
    public void set_MaxPoolConnections(int value);
    public virtual void CloseConnections(bool force);
    protected internal abstract virtual IDatabase MakeDatabase();
    protected internal abstract virtual void ReturnDatabase(IDatabase database);
    private static IDatabaseCollection GetDatabaseCollection(IDatabase db, string name);
    private void EnsureSingleDb(IORMappingProvider mappingProvider);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
[DefaultMemberAttribute("Item")]
public class Eco.Persistence.PersistenceMapperDbCollection : CollectionBase {
    public PMapperDef Item { get; }
    protected virtual void OnInsertComplete(int index, object value);
    public PMapperDef get_Item(int index);
    public void Add(PMapperDef def);
    public void AddRange(PMapperDef[] defs);
    public PMapperDef FindByName(string name);
    public bool NameExists(string name);
    public PMapperDef FindVersionedDatabase();
    public void Assign(PersistenceMapperDbCollection source);
}
[ToolboxBitmapAttribute("Eco.Persistence.PersistenceMapperMultiDb")]
[ToolboxItemAttribute("True")]
public class Eco.Persistence.PersistenceMapperMultiDb : AbstractPersistenceMapperDb {
    private PersistenceMapperDbCollection m_PersistenceMappers;
    private ITransactionManager m_DistributedTransactionManager;
    private ITransactionManager effectiveTransactionManager;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
private TransactionMode m_TransactionMode;
    [DesignerSerializationVisibilityAttribute("2")]
public PersistenceMapperDbCollection PersistenceMappers { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ITransactionManager DistributedTransactionManager { get; public set; }
    public TransactionMode TransactionMode { get; public set; }
    public virtual void CloseConnections(bool force);
    public IDatabaseCollection RetrieveDatabaseConnections();
    public void ReturnDatabaseConnections(IDatabaseCollection databases);
    public void CreateDatabaseSchema(ITypeSystemService typeSystemService, string dbName);
    public void CreateDatabaseSchema(ITypeSystemService typeSystemService, IConfigureCleanPS configureCleanPS, string dbName);
    private ORMappingDefinition GetCompoundMapping(ITypeSystemService typeSystemService, IDatabaseCollection databases, CreateMappingMode mode);
    private static void MergeMapping(ITypeSystemService typeSystemService, ORMappingDefinition targetMapping, IORMappingProvider sourceMappingProvider, IDatabase db, SqlDatabaseConfig config, string dbName, CreateMappingMode mode);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
    public PersistenceMapperDbCollection get_PersistenceMappers();
    public ITransactionManager get_DistributedTransactionManager();
    public void set_DistributedTransactionManager(ITransactionManager value);
    public TransactionMode get_TransactionMode();
    public void set_TransactionMode(TransactionMode value);
}
[ToolboxItemAttribute("False")]
[DesignerAttribute("Eco.Persistence.Design.PersistenceMapperProviderDesigner, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c", "System.ComponentModel.Design.IRootDesigner")]
[ComponentHelpAttribute("Eco.Persistence.Design.PersistenceMapperProviderInspector", "Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
public class Eco.Persistence.PersistenceMapperProvider : Component {
    private Type m_EcoSpaceType;
    private string m_EcoSpaceTypeName;
    private PersistenceMapper m_PersistenceMapper;
    private IPersistenceMapper m_MarchalByRefMapper;
    private static Hashtable C_Instances;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReCreateDueToErrors>k__BackingField;
    private Dictionary`2<string, Type> persistenceMapperRepository;
    private Dictionary`2<string, DataBaseEngine> databaseEngineRepository;
    private List`1<PSServerEncounteredException> _PSServerEncounteredExceptions;
    public bool ReCreateDueToErrors { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryEco")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyPersistenceMapper")]
[DefaultValueAttribute("")]
public PersistenceMapper PersistenceMapper { get; public set; }
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryEco")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyEcoSpaceTypeName")]
[TypeConverterAttribute("Eco.Handles.Design.EcoSpaceTypeNameTypeConverter, Eco.Handles.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
[DefaultValueAttribute("")]
public string EcoSpaceTypeName { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Type EcoSpaceType { get; public set; }
    [BrowsableAttribute("False")]
public PSServerEncounteredException[] GetPSServerEncounteredExceptions { get; }
    private static PersistenceMapperProvider();
    [CompilerGeneratedAttribute]
public void set_ReCreateDueToErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReCreateDueToErrors();
    public static PersistenceMapperProvider GetInstance(Type mapperType);
    public static T GetInstance();
    public static void ReleaseInstance();
    public PersistenceMapper get_PersistenceMapper();
    public void set_PersistenceMapper(PersistenceMapper value);
    private void CheckUnused();
    public string get_EcoSpaceTypeName();
    public void set_EcoSpaceTypeName(string value);
    public Type get_EcoSpaceType();
    public void set_EcoSpaceType(Type value);
    public ITypeSystemService GetTypeSystemService(bool required);
    private sealed virtual override IPersistenceMapper Eco.Persistence.IRemotePersistenceMapperProvider.GetPersistenceMapper(int typeSystemHash);
    public sealed virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public sealed virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
    protected void RegisterPersistenceMapper(string providerName, DataBaseEngine dbEngine);
    protected PersistenceMapperAdo2 CreatePersistenceMapper(string providerName, string connectionString);
    protected virtual string TryAndGetIpFromContext();
    public void ReportPSServerEncounteredException(Exception e, bool wasInWrite, string operation);
    public PSServerEncounteredException[] get_GetPSServerEncounteredExceptions();
    public void ClearPSServerEncounteredExceptions();
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("Eco.Persistence.PersistenceMapperSharer")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceMapperSharer", "ComponentCategoryPersistence")]
public class Eco.Persistence.PersistenceMapperSharer : PersistenceMapper {
    private Type m_MapperProviderType;
    private string m_MapperProviderTypeName;
    private int m_UseCount;
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sMapping")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sMapperProviderTypeName")]
[TypeConverterAttribute("Eco.Persistence.Design.PersistenceMapperProviderTypeNameTypeConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
[DefaultValueAttribute("")]
public string MapperProviderTypeName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Type MapperProviderType { get; public set; }
    public string get_MapperProviderTypeName();
    public void set_MapperProviderTypeName(string value);
    public Type get_MapperProviderType();
    public void set_MapperProviderType(Type value);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
public class Eco.Persistence.PersistenceStringRes : object {
    public static string ComponentCategoryPersistence { get; }
    public static string sPropertyClockLogGranularity { get; }
    public static string sPropertyEvolutionSupport { get; }
    public static string sPropertyRunTimeMappingProvider { get; }
    public static string sPropertySyncHandler { get; }
    public static string sPropertySyncActive { get; }
    public static string sPropertyHistoryLength { get; }
    public static string sDatabaseAlreadyBusy { get; }
    public static string sTransactionNotFinished { get; }
    public static string sSyncNotActive { get; }
    public static string sDatabaseNotFromPool { get; }
    public static string sNoValueChangeOnActivePersistenceMapper { get; }
    public static string sPropertySqlDatabaseConfig { get; }
    public static string sPropertyNewMappingProvider { get; }
    public static string sPropertyOldMappingProvider { get; }
    public static string sPropertyMaxOpenConnections { get; }
    public static string sPropertyMaxPooledConnections { get; }
    public static string sMappingDoesNotDefineAnyDatabase { get; }
    public static string sMappingDefinesMultipleDatabases { get; }
    public static string sPropertyConnection { get; }
    public static string sConnectionNotSetInPMapper { get; }
    public static string sCannotConvertImageToString { get; }
    public static string sDoNotCallDecimalAsAutoIncValueToParameter { get; }
    public static string sDoNotCallDecimalAsAutoIncStringToParameter { get; }
    public static string sDoNotCallInt16AsAutoIncValueToParameter { get; }
    public static string sDoNotCallInt16AsAutoIncStringToParameter { get; }
    public static string sCannotConvertInt64ToTimestamp { get; }
    public static string sCannotConvertStringToTimestamp { get; }
    public static string sCannotConvertStringToByteArray { get; }
    public static string sDoNotCallInt32AsAutoIncValueToParameter { get; }
    public static string sDoNotCallInt32AsAutoIncStringToParameter { get; }
    public static string sCategoryPersistence { get; }
    public static string sCategoryVersioning { get; }
    public static string sCategoryEvolution { get; }
    public static string sCategoryMapping { get; }
    public static string sCategoryPooling { get; }
    public static string sCategorySynchronization { get; }
    public static string sCategoryTypes { get; }
    public static string sCategoryEco { get; }
    public static string sCategoryRemoting { get; }
    public static string sPropertyTypeTableName { get; }
    public static string sPropertyTypeColumnName { get; }
    public static string sPropertyClassNameColumnName { get; }
    public static string sPropertyTablesTableName { get; }
    public static string sPropertyTablesColumnName { get; }
    public static string sPropertyIdKeyName { get; }
    public static string sPropertyIdKeySignature { get; }
    public static string sPropertyIdColumnName { get; }
    public static string sPropertyIdIsAutoInc { get; }
    public static string sPropertyTypeDiscriminatorName { get; }
    public static string sPropertyTypeDiscriminatorSignature { get; }
    public static string sPropertyIdMapperName { get; }
    public static string sReservedWordTableSuffix { get; }
    public static string sReservedWordColumnSuffix { get; }
    public static string sPropertyDatabase { get; }
    public static string sPropertyClassNameSignature { get; }
    public static string sPropertyRootTableName { get; }
    public static string sRootclassIsNotPersistent { get; }
    public static string NoTypeSystem { get; }
    public static string TypeSystemHasNoClasses { get; }
    public static string sFailedToStoreMappingInfo { get; }
    public static string sPropertyXmlFileName { get; }
    public static string sPropertyResourceName { get; }
    public static string sMissingFileAndResourceName { get; }
    public static string sSharerInUse { get; }
    public static string sMapping { get; }
    public static string sMapperProviderTypeName { get; }
    public static string sPMapperInUse { get; }
    public static string sEcoSpaceTypeNameNotSetInPMP { get; }
    public static string CompilingTheProjectMightHelp { get; }
    public static string sPersistenceMapperNotSetInPMP { get; }
    public static string sProviderUsedWithOtherTypeSystem { get; }
    public static string sPropertyEcoSpaceTypeName { get; }
    public static string sPropertyPersistenceMapper { get; }
    public static string sMapperTypeNotInHierarchy { get; }
    public static string sPersistenceMapperInUseWithOtherTypeSystem { get; }
    public static string sPropertyUrl { get; }
    public static string sImplicitReadTransactionInProgress { get; }
    public static string sTransactionInProgress { get; }
    public static string sNoTransactionToCommit { get; }
    public static string sNoTransactionToRollback { get; }
    public static string sAllocatedQueriesNotAllowedWhenStartingTransaction { get; }
    public static string sAllocatedExecQueriesNotAllowedWhenStartingTransaction { get; }
    public static string sNotConnected { get; }
    public static string sNegativeDistanceNotAllowed { get; }
    public static string UnabletoReadParameterValue { get; }
    public static string sHelpSqlDatabaseConfig { get; }
    public static string sHelpOldMapperProvider { get; }
    public static string sHelpNewMapperProvider { get; }
    public static string sHelpRunTimeMapperProvider { get; }
    public static string sHelpSpecifyConnection { get; }
    public static string sEcoISetup { get; }
    public static string sEcoIISetup { get; }
    public static string sEcoIIISetup { get; }
    public static string sAutoIncIdSetup { get; }
    public static string sGuidIdSetup { get; }
    public static string sInt32IdSetup { get; }
    public static string sInt64IdSetup { get; }
    public static string sANSI92Setup { get; }
    public static string sDB2MBCSSetup { get; }
    public static string sOracleMBCSSetup { get; }
    public static string sDB2Setup { get; }
    public static string sSqlServerMBCSSetup { get; }
    public static string sInterbase3Setup { get; }
    public static string sSqlServer7Setup { get; }
    public static string sInterbase3MBCSSetup { get; }
    public static string sInformixSetup { get; }
    public static string sOracleSetup { get; }
    public static string sMimerSetup { get; }
    public static string sFirebirdSetup { get; }
    public static string sBlackfishSetup { get; }
    public static string sSqlServerSetup { get; }
    public static string sSqlServer7MBCSSetup { get; }
    public static string sSybaseSetup { get; }
    public static string sAccessSetup { get; }
    public static string sMySql4Setup { get; }
    public static string sMySql5Setup { get; }
    public static string sSaveMappingInfo { get; }
    public static string sSQLConfigDesignerTransactionName { get; }
    public static string sSchemaGenerationCaption { get; }
    public static string sPersistenceHandleCaption { get; }
    public static string sModelValidationCaption { get; }
    public static string sEvolutionCaption { get; }
    public static string sModelError { get; }
    public static string sOperationMustBePerformedFromPersistenceMapperProvider { get; }
    public static string sEcoToolValidateModelHint { get; }
    public static string sEcoToolEvolveSchemaHint { get; }
    public static string sEcoToolGenerateSchemaHint { get; }
    public static string sEcoToolGenerateDefaultMappingXmlHint { get; }
    public static string sEcoToolSaveMappingInfoHint { get; }
    public static string sGenerateDefaultMappingXmlCaption { get; }
    public static string sOperationCreateDatabase { get; }
    public static string sOperationEvolveDB { get; }
    public static string sOperationGenerateMappingXml { get; }
    public static string sSchemaCreated { get; }
    public static string sPersistenceHandleMissing { get; }
    public static string sModelValidatedOK { get; }
    public static string sOldMappingProviderIsNotDb { get; }
    public static string sSaveMappingInfoCaption { get; }
    public static string sDatabaseContainsMappingTable1 { get; }
    public static string sDatabaseContainsMappingTable2 { get; }
    public static string sDatabaseContainsMappingTable3 { get; }
    public static string sMappingInformationStored { get; }
    public static string sModelErrors { get; }
    public static string sNoPMapper { get; }
    public static string sMultipleVersionedDatabasesNotAllowed { get; }
    public static string sNoDatabaseMarkedAsVersioned { get; }
    public static string ConnectionNotSet { get; }
    public static string SqlDatabaseConfigNotValid { get; }
    public static string ConnectionStringNotSet { get; }
    public static string UnsupportedStringToParameterCall { get; }
    public static string EnumExpected { get; }
    public static string UnsupportedColumnToValueCall { get; }
    public static string ProviderNotInitialized { get; }
    public static string RootclassHasNoDiscriminatorDefined { get; }
    public static string ClassHasNoDiscriminatorValueDefined { get; }
    public static string DiscriminatorIsFinal { get; }
    public static string MappingProviderNotInitialized { get; }
    public static string sConnectionDoesntSupportInterface { get; }
    public static string sCantFindInt64Mapper { get; }
    public static string get_ComponentCategoryPersistence();
    public static string sInt32AsNumber_CannotConvert(object param0);
    public static string sInt16AsNumber_CannotConvert(object param0);
    public static string get_sPropertyClockLogGranularity();
    public static string get_sPropertyEvolutionSupport();
    public static string get_sPropertyRunTimeMappingProvider();
    public static string get_sPropertySyncHandler();
    public static string get_sPropertySyncActive();
    public static string get_sPropertyHistoryLength();
    public static string get_sDatabaseAlreadyBusy();
    public static string get_sTransactionNotFinished();
    public static string get_sSyncNotActive();
    public static string get_sDatabaseNotFromPool();
    public static string get_sNoValueChangeOnActivePersistenceMapper();
    public static string get_sPropertySqlDatabaseConfig();
    public static string get_sPropertyNewMappingProvider();
    public static string get_sPropertyOldMappingProvider();
    public static string get_sPropertyMaxOpenConnections();
    public static string get_sPropertyMaxPooledConnections();
    public static string get_sMappingDoesNotDefineAnyDatabase();
    public static string get_sMappingDefinesMultipleDatabases();
    public static string sORMappingValidationFailed(object param0);
    public static string get_sPropertyConnection();
    public static string get_sConnectionNotSetInPMapper();
    public static string get_sCannotConvertImageToString();
    public static string get_sDoNotCallDecimalAsAutoIncValueToParameter();
    public static string get_sDoNotCallDecimalAsAutoIncStringToParameter();
    public static string get_sDoNotCallInt16AsAutoIncValueToParameter();
    public static string get_sDoNotCallInt16AsAutoIncStringToParameter();
    public static string get_sCannotConvertInt64ToTimestamp();
    public static string get_sCannotConvertStringToTimestamp();
    public static string get_sCannotConvertStringToByteArray();
    public static string get_sDoNotCallInt32AsAutoIncValueToParameter();
    public static string get_sDoNotCallInt32AsAutoIncStringToParameter();
    public static string get_sCategoryPersistence();
    public static string get_sCategoryVersioning();
    public static string get_sCategoryEvolution();
    public static string get_sCategoryMapping();
    public static string get_sCategoryPooling();
    public static string get_sCategorySynchronization();
    public static string get_sCategoryTypes();
    public static string get_sCategoryEco();
    public static string get_sCategoryRemoting();
    public static string get_sPropertyTypeTableName();
    public static string get_sPropertyTypeColumnName();
    public static string get_sPropertyClassNameColumnName();
    public static string get_sPropertyTablesTableName();
    public static string get_sPropertyTablesColumnName();
    public static string get_sPropertyIdKeyName();
    public static string get_sPropertyIdKeySignature();
    public static string get_sPropertyIdColumnName();
    public static string get_sPropertyIdIsAutoInc();
    public static string get_sPropertyTypeDiscriminatorName();
    public static string get_sPropertyTypeDiscriminatorSignature();
    public static string get_sPropertyIdMapperName();
    public static string get_sReservedWordTableSuffix();
    public static string get_sReservedWordColumnSuffix();
    public static string get_sPropertyDatabase();
    public static string get_sPropertyClassNameSignature();
    public static string get_sPropertyRootTableName();
    public static string get_sRootclassIsNotPersistent();
    public static string sSuperclassIsNotPersistent(object param0, object param1);
    public static string get_NoTypeSystem();
    public static string get_TypeSystemHasNoClasses();
    public static string sUnknownPrimaryKeyCol(object param0, object param1);
    public static string sAttributeMapperNotDefinedForType(object param0);
    public static string sFailedToGetORMapping(object param0);
    public static string get_sFailedToStoreMappingInfo();
    public static string UnknownMapperTypeForOrMappingProvider(object param0);
    public static string UnknownValueTypeInEcoOrMappingTable(object param0, object param1);
    public static string get_sPropertyXmlFileName();
    public static string get_sPropertyResourceName();
    public static string sUnableToLoadFromResource(object param0);
    public static string sUnableToLoadFromFile(object param0);
    public static string get_sMissingFileAndResourceName();
    public static string get_sSharerInUse();
    public static string get_sMapping();
    public static string get_sMapperProviderTypeName();
    public static string UnableToResolveMapperProviderType(object param0);
    public static string get_sPMapperInUse();
    public static string get_sEcoSpaceTypeNameNotSetInPMP();
    public static string EcoSpaceTypeNameCouldNotBeResolved(object param0);
    public static string get_CompilingTheProjectMightHelp();
    public static string sGetTypeSystemServiceMissing(object param0);
    public static string sNotATypeSystemProvider(object param0);
    public static string get_sPersistenceMapperNotSetInPMP();
    public static string get_sProviderUsedWithOtherTypeSystem();
    public static string get_sPropertyEcoSpaceTypeName();
    public static string get_sPropertyPersistenceMapper();
    public static string get_sMapperTypeNotInHierarchy();
    public static string MismatchingModelChecksums(object param0, object param1);
    public static string ServerEcoSpaceBuildTime(object param0);
    public static string get_sPersistenceMapperInUseWithOtherTypeSystem();
    public static string get_sPropertyUrl();
    public static string sPersistenceMapperClientFailedToConnect(object param0, object param1);
    public static string get_sImplicitReadTransactionInProgress();
    public static string get_sTransactionInProgress();
    public static string get_sNoTransactionToCommit();
    public static string get_sNoTransactionToRollback();
    public static string sErrorHandlingSql(object param0, object param1);
    public static string sErrorExecutingSql(object param0, object param1);
    public static string sExecSqlError(object param0, object param1, object param2);
    public static string get_sAllocatedQueriesNotAllowedWhenStartingTransaction();
    public static string get_sAllocatedExecQueriesNotAllowedWhenStartingTransaction();
    public static string get_sNotConnected();
    public static string get_sNegativeDistanceNotAllowed();
    public static string ParamLogLine(object param0, object param1, object param2, object param3);
    public static string get_UnabletoReadParameterValue();
    public static string sInvalidType(object param0, object param1, object param2, object param3);
    public static string get_sHelpSqlDatabaseConfig();
    public static string get_sHelpOldMapperProvider();
    public static string get_sHelpNewMapperProvider();
    public static string get_sHelpRunTimeMapperProvider();
    public static string get_sHelpSpecifyConnection();
    public static string get_sEcoISetup();
    public static string get_sEcoIISetup();
    public static string get_sEcoIIISetup();
    public static string get_sAutoIncIdSetup();
    public static string get_sGuidIdSetup();
    public static string get_sInt32IdSetup();
    public static string get_sInt64IdSetup();
    public static string get_sANSI92Setup();
    public static string get_sDB2MBCSSetup();
    public static string get_sOracleMBCSSetup();
    public static string get_sDB2Setup();
    public static string get_sSqlServerMBCSSetup();
    public static string get_sInterbase3Setup();
    public static string get_sSqlServer7Setup();
    public static string get_sInterbase3MBCSSetup();
    public static string get_sInformixSetup();
    public static string get_sOracleSetup();
    public static string get_sMimerSetup();
    public static string get_sFirebirdSetup();
    public static string get_sBlackfishSetup();
    public static string get_sSqlServerSetup();
    public static string get_sSqlServer7MBCSSetup();
    public static string get_sSybaseSetup();
    public static string get_sAccessSetup();
    public static string get_sMySql4Setup();
    public static string get_sMySql5Setup();
    public static string get_sSaveMappingInfo();
    public static string get_sSQLConfigDesignerTransactionName();
    public static string get_sSchemaGenerationCaption();
    public static string get_sPersistenceHandleCaption();
    public static string get_sModelValidationCaption();
    public static string get_sEvolutionCaption();
    public static string get_sModelError();
    public static string sPersistenceHandleDoesNotSupportOperation(object param0);
    public static string get_sOperationMustBePerformedFromPersistenceMapperProvider();
    public static string get_sEcoToolValidateModelHint();
    public static string get_sEcoToolEvolveSchemaHint();
    public static string get_sEcoToolGenerateSchemaHint();
    public static string get_sEcoToolGenerateDefaultMappingXmlHint();
    public static string get_sEcoToolSaveMappingInfoHint();
    public static string get_sGenerateDefaultMappingXmlCaption();
    public static string get_sOperationCreateDatabase();
    public static string get_sOperationEvolveDB();
    public static string get_sOperationGenerateMappingXml();
    public static string get_sSchemaCreated();
    public static string get_sPersistenceHandleMissing();
    public static string get_sModelValidatedOK();
    public static string get_sOldMappingProviderIsNotDb();
    public static string get_sSaveMappingInfoCaption();
    public static string get_sDatabaseContainsMappingTable1();
    public static string get_sDatabaseContainsMappingTable2();
    public static string get_sDatabaseContainsMappingTable3();
    public static string get_sMappingInformationStored();
    public static string get_sModelErrors();
    public static string sConnectionMissing(object param0);
    public static string get_sNoPMapper();
    public static string sDatabaseHasNoMappingInfo(object param0);
    public static string sCouldNotLoadAssembly(object param0);
    public static string get_sMultipleVersionedDatabasesNotAllowed();
    public static string get_sNoDatabaseMarkedAsVersioned();
    public static string get_ConnectionNotSet();
    public static string get_SqlDatabaseConfigNotValid();
    public static string get_ConnectionStringNotSet();
    public static string get_UnsupportedStringToParameterCall();
    public static string get_EnumExpected();
    public static string get_UnsupportedColumnToValueCall();
    public static string get_ProviderNotInitialized();
    public static string get_RootclassHasNoDiscriminatorDefined();
    public static string get_ClassHasNoDiscriminatorValueDefined();
    public static string get_DiscriminatorIsFinal();
    public static string get_MappingProviderNotInitialized();
    public static string DiscriminatorValueNotDefined(object param0);
    public static string get_sConnectionDoesntSupportInterface();
    public static string sNoDatabaseWithName(object param0);
    public static string get_sCantFindInt64Mapper();
}
public class Eco.Persistence.PersistenceTiming : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<TimingCallbackArgs> TimingCreateCallback;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<TimingCallbackArgs> TimingCallback;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AbstractCondition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ResultSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <InputSize>k__BackingField;
    public string Name { get; private set; }
    public DateTime Start { get; private set; }
    public TimeSpan Duration { get; private set; }
    public TimeSpan DurationSoFar { get; }
    public AbstractCondition Condition { get; public set; }
    public int ResultSize { get; public set; }
    public int InputSize { get; public set; }
    public PersistenceTiming(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(TimeSpan value);
    public TimeSpan get_DurationSoFar();
    [CompilerGeneratedAttribute]
public static void add_TimingCreateCallback(EventHandler`1<TimingCallbackArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_TimingCreateCallback(EventHandler`1<TimingCallbackArgs> value);
    [CompilerGeneratedAttribute]
public static void add_TimingCallback(EventHandler`1<TimingCallbackArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_TimingCallback(EventHandler`1<TimingCallbackArgs> value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public AbstractCondition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(AbstractCondition value);
    [CompilerGeneratedAttribute]
public int get_ResultSize();
    [CompilerGeneratedAttribute]
public void set_ResultSize(int value);
    [CompilerGeneratedAttribute]
public int get_InputSize();
    [CompilerGeneratedAttribute]
public void set_InputSize(int value);
}
[TypeConverterAttribute("Eco.Persistence.PMapperDefConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
public class Eco.Persistence.PMapperDef : object {
    private string name;
    private PersistenceMapperDb m_Mapper;
    private PersistenceMapperDbCollection owner;
    private bool m_ImportConfig;
    private bool m_IsVersioned;
    [LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyName")]
public string Name { get; public set; }
    [LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyMapper")]
public PersistenceMapperDb Mapper { get; public set; }
    unknown PersistenceMapperDbCollection Owner {internal set; }
    public bool ImportConfig { get; public set; }
    public bool IsVersioned { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public PersistenceMapperDb get_Mapper();
    public void set_Mapper(PersistenceMapperDb value);
    internal void set_Owner(PersistenceMapperDbCollection value);
    public virtual string ToString();
    public bool get_ImportConfig();
    public void set_ImportConfig(bool value);
    public bool get_IsVersioned();
    public void set_IsVersioned(bool value);
}
public enum Eco.Persistence.PMapperOp : Enum {
    public int value__;
    public static PMapperOp Update;
    public static PMapperOp Fetch;
    public static PMapperOp FetchWithCondition;
    public static PMapperOp VersionForTime;
    public static PMapperOp TimeForVersion;
}
[ToolboxBitmapAttribute("Eco.Persistence.Remoting.PersistenceMapperClient")]
[ToolboxItemAttribute("True")]
[LocalizableCategoryAttribute("Eco.Persistence.Remoting.PersistenceMapperClient", "ComponentCategoryPersistence")]
public class Eco.Persistence.Remoting.PersistenceMapperClient : PersistenceMapper {
    private IPersistenceMapper m_PMProxy;
    private string m_Url;
    private ITypeSystemService m_TypeSystemService;
    private Hashtable m_Adapters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PrepareChannelEventHandler PrepareChannel;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategoryRemoting")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyUrl")]
public string Url { get; public set; }
    public string get_Url();
    public void set_Url(string value);
    [CompilerGeneratedAttribute]
public void add_PrepareChannel(PrepareChannelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PrepareChannel(PrepareChannelEventHandler value);
    private IPersistenceMapper GetMapper(bool refresh);
    public virtual IPersistenceMapper GetPersistenceMapper(ITypeSystemService typeSystemService);
    public virtual void ReturnPersistenceMapper(IPersistenceMapper persistenceMapper);
}
public enum Eco.Persistence.RestoreDbStatus : Enum {
    public int value__;
    public static RestoreDbStatus TryAgain;
    public static RestoreDbStatus Failed;
}
public class Eco.Persistence.SimpleORMappingProvider : object {
    private ORMappingDefinition m_Mapping;
    private IORMappingProvider m_NextProvider;
    public ORMappingDefinition Mapping { get; }
    public SimpleORMappingProvider(ORMappingDefinition mapping, IORMappingProvider nextProvider);
    public sealed virtual ORMappingDefinition get_Mapping();
    public sealed virtual void Initialize(IEcoTypeSystem typeSystem, IDatabase db, SqlDatabaseConfig config, bool addMissingTypes);
    public sealed virtual IList`1<string> SystemTableNames(SqlDatabaseConfig config);
    public sealed virtual void PostCreateDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDb(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
    public sealed virtual void PostEvolveDbScript(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping, IList`1<string> script);
    public sealed virtual void SaveMappingInfo(IDatabase db, SqlDatabaseConfig sqlDatabaseConfig, ORMappingDefinition newMapping);
}
public class Eco.Persistence.SqlServer.BooleanAsBit : AbstractSingleColumnAttribute {
    public string TrueString { get; }
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public string get_TrueString();
}
public class Eco.Persistence.SqlServer.ByteAsTinyInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.DateTimeAsDateTime : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    private object ConvertToValidDate(object value);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.SqlServer.DateTimeAsDateTimeWithoutMilliseconds : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.SqlServer.DecimalAsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.SqlServer.DecimalAsDecimal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.DecimalAsDecimal28 : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string ColumnType(int precision, int scale);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.DecimalAsMoney : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.DecimalAsSmallMoney : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.GuidAsUniqueIdentifier : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.GuidAsUniqueIdentifierWithDefault : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.SqlServer.Int16AsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.SqlServer.Int32AsAutoInc : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.SqlServer.Int32AsInt : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.Int64AsLongInteger : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.Int64AsTimeStamp : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    private long convertToLong(Byte[] arr);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.SqlServer.SingleAsFloat : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.SingleAsReal : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.StringAsXml : AbstractStringSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.SqlServer.TimeSpanAsDateTime : AbstractSingleColumnAttribute {
    private DateTime ZeroDateTime;
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public virtual bool IsEqual(object value, object columnValue);
}
public class Eco.Persistence.Sybase.BooleanAsBit : AbstractSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
public class Eco.Persistence.Sybase.Int32AsNumericIdentity : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public virtual string DefaultDbValue(string modeledValue, SqlDatabaseConfig sqlDatabaseConfig);
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
    public sealed virtual void MakeColumnAutoInc(string tableName, string columnName, IDatabase database);
}
public class Eco.Persistence.Sybase.SingleAsFloat : AbstractNumericSingleColumnAttribute {
    public sealed virtual Type ValueType();
    public sealed virtual string ColumnType(int length);
    public sealed virtual void ValueToParameter(object value, IDataParameter parameter);
    public sealed virtual void StringToParameter(string value, IDataParameter parameter);
    public virtual object ColumnToValue(object columnValue);
}
[ToolboxBitmapAttribute("Eco.Persistence.SyncHandler")]
[TypeConverterAttribute("Eco.Persistence.SyncHandlerConverter, Eco.Persistence.Design, Version=7.1.0.0, Culture=neutral, PublicKeyToken=46a833be9e90de8c")]
[ToolboxItemAttribute("True")]
[LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "ComponentCategoryPersistence")]
public class Eco.Persistence.SyncHandler : AbstractSyncHandler {
    private Queue`1<CommitBlockWrapper> m_CommitQueueOfNotYetAddedBlocks;
    private List`1<CommitBlockWrapper> m_Blocks;
    private Guid m_Guid;
    private Guid m_TheFixedGuidForPersistedCommitBlocks;
    private int m_FirstVersion;
    private int m_CurrentVersion;
    private int m_HistoryLength;
    private static int HistoryDelta;
    private int m_MaxSentChangesInOneGo;
    private List`1<string> _bugHuntInfo_BlockListHoles;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnSubmittedCommitBlockArgs> OnSubmittedCommitBlock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnLoadPersistedCommitBlocksArgs> OnLoadPersistedCommitBlocks;
    private int _reentry;
    [LocalizableCategoryAttribute("Eco.Persistence.PersistenceStringRes", "sCategorySynchronization")]
[LocalizableDescriptionAttribute("Eco.Persistence.PersistenceStringRes", "sPropertyHistoryLength")]
[DefaultValueAttribute("100000")]
public int HistoryLength { get; public set; }
    [DefaultValueAttribute("1000")]
public int MaxSentChangesInOneGo { get; public set; }
    private object Eco.Persistence.ISyncSink.SyncRoot { get; }
    public int get_HistoryLength();
    public void set_HistoryLength(int value);
    public int get_MaxSentChangesInOneGo();
    public void set_MaxSentChangesInOneGo(int value);
    private void EmptyCommitQueue(string caller, IEcoTypeSystem typeSystem);
    private void PreCookDBChangesAndFreeCommitBlock(CommitBlockWrapper commitBlockWrapper, IEcoTypeSystem typeSystem);
    private sealed virtual override object Eco.Persistence.ISyncSink.get_SyncRoot();
    private sealed virtual override SyncVersion Eco.Persistence.ISyncSink.Submit(CommitBlock commitBlock, object operationsParams, IEcoTypeSystem typeSystem);
    [CompilerGeneratedAttribute]
public void add_OnSubmittedCommitBlock(EventHandler`1<OnSubmittedCommitBlockArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnSubmittedCommitBlock(EventHandler`1<OnSubmittedCommitBlockArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnLoadPersistedCommitBlocks(EventHandler`1<OnLoadPersistedCommitBlocksArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnLoadPersistedCommitBlocks(EventHandler`1<OnLoadPersistedCommitBlocksArgs> value);
    private void ConsiderPersistedSyncUpdateBlockQueue(SyncVersion fromVersion);
    private void FixSyncHoles(int start, int stop);
    private static void AddNonEmbeddedChanges(DBChangeCollection changeCollection, ObjectContents oc, ObjectContents orgOc, IEcoTypeSystem typeSystem);
    public virtual SyncVersion CurrentSyncVersion(IEcoTypeSystem typeSystem);
    public virtual DBChangeCollection GetChangesSince(SyncVersion fromVersion, SyncVersion[] exclude, SyncVersion& lastSyncVersionReturned, IEcoTypeSystem typeSystem);
    private bool PurgeOldBlocks();
}
public class Eco.Persistence.TimingCallbackArgs : EventArgs {
    public PersistenceTiming PersistenceTiming;
}
public class Eco.Persistence.TKeyJoinPair : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyImplementation <Key1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyImplementation <Key2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IncludeTimeStampInJoin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Alias1PostFix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Alias2PostFix>k__BackingField;
    public KeyImplementation Key1 { get; private set; }
    public KeyImplementation Key2 { get; private set; }
    public bool IncludeTimeStampInJoin { get; public set; }
    public string Alias1PostFix { get; public set; }
    public string Alias2PostFix { get; public set; }
    public string Alias1EffectiveName { get; }
    public string Alias2EffectiveName { get; }
    public TKeyJoinPair(KeyImplementation key1, KeyImplementation key2);
    [CompilerGeneratedAttribute]
public KeyImplementation get_Key1();
    [CompilerGeneratedAttribute]
private void set_Key1(KeyImplementation value);
    [CompilerGeneratedAttribute]
public KeyImplementation get_Key2();
    [CompilerGeneratedAttribute]
private void set_Key2(KeyImplementation value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTimeStampInJoin();
    [CompilerGeneratedAttribute]
public void set_IncludeTimeStampInJoin(bool value);
    [CompilerGeneratedAttribute]
public string get_Alias1PostFix();
    [CompilerGeneratedAttribute]
public void set_Alias1PostFix(string value);
    [CompilerGeneratedAttribute]
public string get_Alias2PostFix();
    [CompilerGeneratedAttribute]
public void set_Alias2PostFix(string value);
    public string get_Alias1EffectiveName();
    public string get_Alias2EffectiveName();
    public void GenerateJoinConditions(IList`1<string> list, SqlDatabaseConfig config);
    public static TKeyJoinPair FindJoinKey(AliasDefinition Alias1, AliasDefinition Alias2);
}
public enum Eco.Persistence.TransactionMode : Enum {
    public int value__;
    public static TransactionMode Disabled;
    public static TransactionMode Local;
    public static TransactionMode Distributed;
}
[TransactionAttribute]
[ComVisibleAttribute("True")]
[GuidAttribute("26AFFDE6-6851-4FC4-8901-D32932933AD6")]
public class Eco.Persistence.TransactionUtil : ServicedComponent {
    public void EnlistDatabases(IDatabaseCollection databases, ITransaction tx);
    public void PerformUpdateInTransaction(object operationParams, ITransactionable callback, IDatabaseCollection databases);
}
public class Eco.Persistence.TSelectQuery : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PrimaryKeyColumnPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnReferenceCollection <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <WhereClause>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TimeStampCondition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <TimeStampStartAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <TimeStampStopAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasCollection <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AliasDefinition <PrimaryAlias>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyImplementation <PrimaryKeyImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiscriminatorDefCollection <TypeDiscriminators>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiscriminatorImplementationCollection <TypeDiscriminatorImplementations>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlDatabaseConfig <Config>k__BackingField;
    private TSelectQuery fSecondaryQuery;
    private KeyDefinition fSecondaryQueryKeyDef;
    private KeyImplementation fSecondaryQueryKeyImpl;
    public string PrimaryKeyColumnPrefix { get; public set; }
    public ColumnReferenceCollection Columns { get; private set; }
    public IList`1<string> OrderBy { get; private set; }
    public IList`1<string> WhereClause { get; private set; }
    public int TimeStampCondition { get; private set; }
    public AliasDefinition TimeStampStartAlias { get; private set; }
    public AliasDefinition TimeStampStopAlias { get; private set; }
    public AliasCollection Aliases { get; private set; }
    public AliasDefinition PrimaryAlias { get; private set; }
    public KeyImplementation PrimaryKeyImplementation { get; private set; }
    public DiscriminatorDefCollection TypeDiscriminators { get; private set; }
    public DiscriminatorImplementationCollection TypeDiscriminatorImplementations { get; private set; }
    public SqlDatabaseConfig Config { get; private set; }
    public TSelectQuery(SqlDatabaseConfig Config);
    [CompilerGeneratedAttribute]
public string get_PrimaryKeyColumnPrefix();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeyColumnPrefix(string value);
    [CompilerGeneratedAttribute]
public ColumnReferenceCollection get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(ColumnReferenceCollection value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_OrderBy();
    [CompilerGeneratedAttribute]
private void set_OrderBy(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_WhereClause();
    [CompilerGeneratedAttribute]
private void set_WhereClause(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_TimeStampCondition();
    [CompilerGeneratedAttribute]
private void set_TimeStampCondition(int value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_TimeStampStartAlias();
    [CompilerGeneratedAttribute]
private void set_TimeStampStartAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_TimeStampStopAlias();
    [CompilerGeneratedAttribute]
private void set_TimeStampStopAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public AliasCollection get_Aliases();
    [CompilerGeneratedAttribute]
private void set_Aliases(AliasCollection value);
    [CompilerGeneratedAttribute]
public AliasDefinition get_PrimaryAlias();
    [CompilerGeneratedAttribute]
private void set_PrimaryAlias(AliasDefinition value);
    [CompilerGeneratedAttribute]
public KeyImplementation get_PrimaryKeyImplementation();
    [CompilerGeneratedAttribute]
private void set_PrimaryKeyImplementation(KeyImplementation value);
    [CompilerGeneratedAttribute]
public DiscriminatorDefCollection get_TypeDiscriminators();
    [CompilerGeneratedAttribute]
private void set_TypeDiscriminators(DiscriminatorDefCollection value);
    [CompilerGeneratedAttribute]
public DiscriminatorImplementationCollection get_TypeDiscriminatorImplementations();
    [CompilerGeneratedAttribute]
private void set_TypeDiscriminatorImplementations(DiscriminatorImplementationCollection value);
    [CompilerGeneratedAttribute]
public SqlDatabaseConfig get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(SqlDatabaseConfig value);
    public void AddAlias(AliasDefinition Alias);
    private ArrayList CollectAliases(AliasDefinition IdAliasCandidate);
    private ArrayList CalculateJoins(ArrayList ToBeJoined);
    public void AddColumnsFromQuery(TSelectQuery Query, KeyImplementation KeyImpl, KeyDefinition KeyDef);
    public void CollectDiscriminators();
    public string GenerateSql(ObjectIdCollection IdList, ColumnReferenceCollection ColumnsForIdList, IKeyMapper IdMapper, bool ImplicitTypeDiscriminators, AliasDefinition IdAliasCandidate, IParameterized Parameters);
    public void SetTimeStampCondition(int TimeStamp, AliasDefinition TSStartAlias, AliasDefinition TSStopAlias);
    public void AddDiscriminator(DiscriminatorImplementation Discriminator);
    public void AddAliases(AliasCollection Aliases);
}
public class Eco.Persistence.Validator.MDrivenColumnFieldDbStructureValidator : TBoldDbValidator {
    private Hashtable fAllTableNames;
    public MDrivenColumnFieldDbStructureValidator(IDatabase Database, SystemPersistenceMapper Mapper);
    protected virtual void Validate();
    private void ValidateColumnsNullabilityForTable(TableDefinition tabledef, ClassDefinition c);
    private void ValidateColumnsForTable(TableDefinition tabledef, ClassDefinition c);
    private void ValidateIndex(IndexDefinition indexdef);
    private void ValidateIndicesForTable(TableDefinition tabledef);
    private void ValidateNotNullForColumn(ColumnDefinition coldef);
    private void ValidateTable(TableDefinition tabledef, ClassDefinition c);
}
public class Eco.Persistence.Validator.MDrivenDbDataValidator : TBoldDbValidator {
    private string fIdColumnName;
    private List`1<string> fTypeTestedTables;
    private IQuery fQuery;
    private List`1<string> fExistenceInParentTestedTables;
    private IQuery Query { get; }
    private List`1<string> TypeTestedTables { get; }
    private List`1<string> ExistenceInParentTestedTables { get; }
    public string IdColumnName { get; public set; }
    public MDrivenDbDataValidator(IDatabase Database, SystemPersistenceMapper Mapper, bool errorsasexceptions);
    private IQuery get_Query();
    private List`1<string> get_TypeTestedTables();
    private List`1<string> get_ExistenceInParentTestedTables();
    public string get_IdColumnName();
    public void set_IdColumnName(string value);
    private bool Prepare2TableTest(string SQLTemplate, List`1<string> CheckList, Object[] args, string table1, string table2, List`1<string> IdList, List`1<string> TypeList);
    protected virtual void Validate();
    private void ValidateRelations(ClassPersistenceMapper ObjectSQLMapper);
    private void ValidateSingleLinks(ClassPersistenceMapper ObjectPMapper);
    private void SuggesttableInsert(TableDefinition table, List`1<string> IdList, List`1<string> TypeList);
    private void ValidateExistence(ClassPersistenceMapper ObjectSQLMapper);
    public void ValidateLinkObjectDupes(ClassPersistenceMapper ObjectSQLMapper);
    public void ValidateLinkObjects(ClassPersistenceMapper ObjectSQLMapper);
    private void ValidateStrayObjects(ClassPersistenceMapper ObjectDefaultMapper);
}
public abstract class Eco.Persistence.Validator.TBoldDbValidator : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SystemPersistenceMapper <SystemSQLMapper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDatabase <DataBase>k__BackingField;
    private IList`1<string> fRemedy;
    private bool _errorsasexceptions;
    protected SystemPersistenceMapper SystemSQLMapper { get; private set; }
    protected IDatabase DataBase { get; private set; }
    public IList`1<string> Remedy { get; }
    public TBoldDbValidator(IDatabase database, SystemPersistenceMapper mapper, bool errorsasexceptions);
    [CompilerGeneratedAttribute]
protected SystemPersistenceMapper get_SystemSQLMapper();
    [CompilerGeneratedAttribute]
private void set_SystemSQLMapper(SystemPersistenceMapper value);
    [CompilerGeneratedAttribute]
protected IDatabase get_DataBase();
    [CompilerGeneratedAttribute]
private void set_DataBase(IDatabase value);
    public IList`1<string> get_Remedy();
    protected abstract virtual void Validate();
    public static void ValidationLog(string message);
    public bool Execute();
}
public class Eco.Services.Impl.ExternalIdServiceImpl_DbType : ExternalIdServiceBase {
    private IORMappingProvider m_mappingProvider;
    public ExternalIdServiceImpl_DbType(IEcoTypeSystem typeSystem, IORMappingProvider mappingProvider);
    protected virtual string GetExternalClassId(IObject obj, Locator loc, ObjectId id);
    protected virtual int GetTopSortedIndex(string externalClassId);
    private DiscriminatorDef GetDiscriminatorDef();
    public virtual IObjectInstance ObjectForIdSeperateClassInfo(string id, IClass theclass);
}
public class Eco.Wcf.Server.CheckSecurityContextArgs : EventArgs {
    public ServiceSecurityContext ServiceSecurityContext;
}
public class Eco.Wcf.Server.CompletedAsyncResult`1 : object {
    private T data;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <AsyncState>k__BackingField;
    public T Data { get; }
    public object AsyncState { get; public set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public CompletedAsyncResult`1(T data);
    public T get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
public void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
}
[AspNetCompatibilityRequirementsAttribute]
public class Eco.Wcf.Server.PersistenceMapperProviderWCF`1 : object {
    private string _TypeNamePrefix;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CheckSecurityContextArgs> CheckSecurityContext;
    private ITypeSystemService tss { get; }
    public static ServiceHost Register(Type t, string uri);
    public static ServiceHost Register(Type t, string uri, int maxReceivedMessageSize);
    private string TypeNamePrefix();
    [CompilerGeneratedAttribute]
public void add_CheckSecurityContext(EventHandler`1<CheckSecurityContextArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CheckSecurityContext(EventHandler`1<CheckSecurityContextArgs> value);
    private ITypeSystemService get_tss();
    private PersistenceMapperProvider GetPersistenceMapperProvider();
    private void LoggOpportunity(Exception e, bool wasInWrite, string operation);
    private IPersistenceMapper GetPMapper();
    private void ReturnPMapper(IPersistenceMapper pmapper);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginFetch(ObjectIdList idList, Int32[] memberIdList, FetchStrategy fetchStrategy, AsyncCallback callback, object asyncState);
    private sealed virtual override Datablock Eco.Wcf.Common.IPersistenceMapperWCF.EndFetch(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginFetchIDListWithCondition(AbstractCondition condition, int maxResults, int offset, AsyncCallback callback, object asyncState);
    private sealed virtual override ObjectIdList Eco.Wcf.Common.IPersistenceMapperWCF.EndFetchIDListWithCondition(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginFetchDatablockWithCondition(AbstractCondition condition, int maxResults, int offset, AsyncCallback callback, object asyncState);
    private sealed virtual override Datablock Eco.Wcf.Common.IPersistenceMapperWCF.EndFetchDatablockWithCondition(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginVersionForTime(DateTime clockTime, AsyncCallback callback, object asyncState);
    private sealed virtual override int Eco.Wcf.Common.IPersistenceMapperWCF.EndVersionForTime(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginTimeForVersion(int version, AsyncCallback callback, object asyncState);
    private sealed virtual override DateTime Eco.Wcf.Common.IPersistenceMapperWCF.EndTimeForVersion(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginSupportsSync(AsyncCallback callback, object asyncState);
    private sealed virtual override bool Eco.Wcf.Common.IPersistenceMapperWCF.EndSupportsSync(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginUpdate(Datablock datablock, UpdatePrecondition precondition, AsyncCallback callback, object asyncState);
    protected virtual bool CheckUpdateOverride();
    protected virtual void UpdateOverride(IPersistenceMapper originalpmapper, Datablock datablock, UpdatePrecondition precondition, IdTranslationList& translationList, Int32& version, SyncVersion& syncVersion, UpdateResult& result);
    private sealed virtual override ResultFromEndUpdate Eco.Wcf.Common.IPersistenceMapperWCF.EndUpdate(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginGetChangesSince(SyncVersion syncVersion, SyncVersion[] excludeList, AsyncCallback callback, object asyncState);
    private sealed virtual override ResultFromGetChanges Eco.Wcf.Common.IPersistenceMapperWCF.EndGetChangesSince(IAsyncResult result);
    private sealed virtual override IAsyncResult Eco.Wcf.Common.IPersistenceMapperWCF.BeginCurrentSyncVersion(AsyncCallback callback, object asyncState);
    private sealed virtual override SyncVersion Eco.Wcf.Common.IPersistenceMapperWCF.EndCurrentSyncVersion(IAsyncResult result);
}
public class MDriPMDefs.Units.MDriPMDefs : object {
    public static string TABLEPREFIXTAG;
    public static string TABLEPREFIXTAG_UPPERCASE;
    public static int TABLEPREFIXTAG_Length;
    public static string TABLETABLE_NAME;
    public static string TIMESTAMPTABLE_NAME;
    public static string CLOCKLOGTABLE_NAME;
    public static string LASTCLOCKTABLE_NAME;
    public static string CLASSNAMECOLUMN_NAME;
    public static string TABLENAMECOLUMN_NAME;
    public static string TIMESTAMPCOLUMN_NAME;
    public static string TIMESTAMPSTARTCOLUMNNAME;
    public static string TIMESTAMPSTOPCOLUMNNAME;
    public static string LASTTIMESTAMPCOLUMN_NAME;
    public static string THISTIMESTAMPCOLUMN_NAME;
    public static string LASTCLOCKCOLUMN_NAME;
    public static string THISCLOCKCOLUMN_NAME;
    public static void SqlMetaLog(string message);
}
