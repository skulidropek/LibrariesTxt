public class Eco.BootstrapLayout.ActionRenderInfo : object {
    public ViewModelColumn column;
    public Action action;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<GridControl> <InPlacePopupContentList>k__BackingField;
    public List`1<GridControl> InPlacePopupContentList { get; internal set; }
    [CompilerGeneratedAttribute]
public List`1<GridControl> get_InPlacePopupContentList();
    [CompilerGeneratedAttribute]
internal void set_InPlacePopupContentList(List`1<GridControl> value);
}
public class Eco.BootstrapLayout.DelegateRendering : MulticastDelegate {
    public DelegateRendering(object object, IntPtr method);
    public virtual void Invoke(GridControl GC, HtmlTag parentTag);
    public virtual IAsyncResult BeginInvoke(GridControl GC, HtmlTag parentTag, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Eco.BootstrapLayout.GridControl : GridObject {
    public string _htmltext;
    internal DelegateRendering _renderer;
    internal object _renderingReference;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewModelColumn <ViewModelColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UseRectangleWidth>k__BackingField;
    public ViewModelColumn ViewModelColumn { get; private set; }
    public object RenderingReference { get; }
    public bool UseRectangleWidth { get; internal set; }
    public GridControl(string htmltext, ViewModelColumn viewModelColumn, int X, int Y, int XSpan, int YSpan);
    public GridControl(string htmltext, ViewModelColumn viewModelColumn, int X, int Y, int XSpan, int YSpan, bool useRectangleWidth);
    public GridControl(string htmltext, ViewModelColumn viewModelColumn, Rectangle rect);
    public GridControl(string htmltext, ViewModelColumn viewModelColumn, Rectangle rect, bool useRectangleWidth);
    public GridControl(string htmltext, ViewModelColumn viewModelColumn, object RenderingReference, Rectangle rect, bool useRectangleWidth);
    public GridControl(DelegateRendering renderer, ViewModelColumn viewModelColumn, object RenderingReference, Rectangle rect);
    public GridControl(DelegateRendering renderer, ViewModelColumn viewModelColumn, object RenderingReference, Rectangle rect, bool useRectangleWidth);
    [CompilerGeneratedAttribute]
public ViewModelColumn get_ViewModelColumn();
    [CompilerGeneratedAttribute]
private void set_ViewModelColumn(ViewModelColumn value);
    public object get_RenderingReference();
    [CompilerGeneratedAttribute]
public bool get_UseRectangleWidth();
    [CompilerGeneratedAttribute]
internal void set_UseRectangleWidth(bool value);
    public virtual void CreateDebugText(StringBuilder _sb, int IndentationLevel);
    public virtual HtmlTag RenderHtml(HtmlTag parentTag);
}
public abstract class Eco.BootstrapLayout.GridObject : object {
    private Rectangle _rectangle;
    public int BsWidth;
    public int BsHeight;
    public int BsOffset;
    public int GridBoxWidth;
    public Rectangle rectangle { get; public set; }
    public int X { get; }
    public int Y { get; }
    public int Width { get; }
    public int Height { get; }
    public int Left { get; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public GridObject(int X, int Y, int XSpan, int YSpan);
    public GridObject(Rectangle rect);
    public virtual Rectangle get_rectangle();
    public virtual void set_rectangle(Rectangle value);
    public int get_X();
    public int get_Y();
    public int get_Width();
    public int get_Height();
    public int get_Left();
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public abstract virtual void CreateDebugText(StringBuilder _sb, int IndentationLevel);
    public abstract virtual HtmlTag RenderHtml(HtmlTag parentTag);
}
public class Eco.BootstrapLayout.Point : object {
    public int x;
    public int y;
    public Point(int x, int y);
    public virtual bool Equals(object obj);
    public bool Equals(Point p);
    public virtual int GetHashCode();
    public static bool op_Equality(Point a, Point b);
    public static bool op_Inequality(Point a, Point b);
}
public class Eco.BootstrapLayout.Range : object {
    public int Start;
    public int End;
    public Range(int Start, int End);
    public static bool IsValidValues(int Start, int End);
    public virtual bool Equals(object obj);
    public bool Equals(Range r);
    public virtual int GetHashCode();
    public static bool op_Equality(Range a, Range b);
    public static bool op_Inequality(Range a, Range b);
    public bool Contains(int aValue);
    public bool Intersects(Range aRange);
    public Range Intersection(Range aRange);
    public Range Union(Range aRange);
    internal static Range GetIntersection(Range range1, Range range2);
    internal static Range GetUnion(Range range1, Range range2);
}
public class Eco.BootstrapLayout.Rectangle : object {
    public Range Xrange;
    public Range Yrange;
    public int X { get; }
    public int Y { get; }
    public int Width { get; }
    public int Height { get; }
    public int Left { get; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public Rectangle(int X, int Y, int XSpan, int YSpan);
    public Rectangle(Range Xrange, Range Yrange);
    public static bool IsValidValues(int X, int Y, int XSpan, int YSpan);
    public int get_X();
    public int get_Y();
    public int get_Width();
    public int get_Height();
    public int get_Left();
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public virtual bool Equals(object obj);
    public bool Equals(Rectangle r);
    public virtual int GetHashCode();
    public static bool op_Equality(Rectangle a, Rectangle b);
    public static bool op_Inequality(Rectangle a, Rectangle b);
    public bool Contains(Point aPoint);
    public bool Contains(Rectangle rect);
    public bool UpperLeftInside(Rectangle go);
    public bool Intersects(Rectangle rect);
    public static Rectangle Intersect(Rectangle a, Rectangle b);
    public Rectangle Intersect(Rectangle rect);
    public static Rectangle Union(Rectangle a, Rectangle b);
    public Rectangle Union(Rectangle rect);
    public Point UpperLeftPoint();
    public Point LowerRightPoint();
}
public class Eco.BootstrapLayout.RenderingDevInfo : object {
    public string headerText;
    public string html;
    public ViewModelColumn vcol;
}
public class Eco.CSSGridLayout.CSSGridViewUICreator : object {
    protected WebControlRenderer _htmlControlRenderer;
    protected List`1<GridControl> _gridContentList;
    protected List`1<GridControl> _gridContentListSavedForTagExpander;
    protected StringBuilder _completeHTML;
    private ViewModelRTCreator _viewModelRTCreator;
    private ViewModelRTCreator _rTCreator;
    private int _youAreCurrentlyInDataTableGridAsSimpleUI;
    private StringBuilder _placingContainerCss;
    private bool isTableInLastRow;
    private string _cssinpage;
    private static string _CSSThatHidesMenu;
    private static string _CSSRemovesGlobalPadding;
    public bool ReadOnly { get; }
    public List`1<GridControl> ListOfSeenGridControlsForBlazor { get; }
    public CSSGridViewUICreator(WebControlRenderer controlRenderer, StringBuilder completeHTML, ViewModelRTCreator viewModelRTCreator);
    public CSSGridViewUICreator(WebControlRenderer controlRenderer, List`1<RenderingDevInfo> _devInfo, ViewModelRTCreator viewModelRTCreator);
    public sealed virtual void PrepareDisplayGrid(ViewModel vm);
    private Rectangle VColToRectangle(ViewModelColumn vcol);
    public sealed virtual void SimpleUIFor(ViewModelColumn vcol);
    public sealed virtual void Combobox(ViewModelColumn vcol);
    public sealed virtual void GridFor(ViewModelClass vclass);
    public void RendererOfPlacingContainerInsteadOfDataTableGrid(GridControl GC, HtmlTag parentTag);
    public sealed virtual void Action(ViewModelColumn vcol, Action onExecute);
    public sealed virtual void InPlacePopup(ViewModelColumn vcol);
    private void RendererOfInPlacePopupButtonAndPopup(GridControl gc, HtmlTag parentTag);
    private void ColumnOverride(object viewModel, OnColumnUIOverrideArgs overrideArgs);
    public sealed virtual void FinalizeUI(ViewModel vm);
    private void RenderListOfGridControls(ViewModelClass viewmodelclass, List`1<GridControl> gridContentList, Dictionary`2<ViewModelColumn, List`1<GridControl>> groupboxes, StringBuilder controlcontent);
    private void DoPlacingContainer(ViewModelClass vmclass, PlacingContainerRuntime placingContainer, Dictionary`2<ViewModelColumn, GridControl> colGcDict, Dictionary`2<ViewModelColumn, List`1<GridControl>> groupboxes, HtmlTag theplacingContainerDiv, Func`1<HtmlTag> repeatCreator);
    private static string GetSelfAlignCssSnippet(string selfAlignValue);
    private string GetPCMarginsAndMinMaxForOneControl(PlacingContainerRuntime placingContainer, ViewModelColumn vmcol);
    private void CreatePlacingContainerCss(string placingcontCssName, PlacingContainerRuntime placingContainer);
    private void DoesChildrenUseWrap(PlacingContainerRuntime placingContainer, Boolean& yesRowWrap, Boolean& yesColumnWrap);
    private void MountResultInMainDivAndSetCssClasses(ViewModel vm, string mainGridClassName, StringBuilder controlcontent);
    private void BuildGroupBoxes(ViewModel vm, Dictionary`2<ViewModelColumn, List`1<GridControl>> groupboxes, StringBuilder viewComponentCSS, List`1<int> lastYCord);
    private HtmlTag RenderHtmlInFormGroupPlusInnerGroupBoxContentIfAvailable(GridControl gc, ViewModelColumn vc, ViewModelColumn groupBoxFilter, Dictionary`2<ViewModelColumn, List`1<GridControl>> groupboxedcontrols);
    private string GetCSSForControl(int x1, int x2, int y1, int y2, ViewModelColumn vc, ViewModel vm);
    private string GetCSSForContainer(int gapx, int gapy, int colCount, int rowCount, bool fixedColSize, GridControl controlToFlexHeight);
    private ViewModelColumn ResolveViewModelColumn(GridControl gc);
    public sealed virtual bool get_ReadOnly();
    public string GetCSSGridStyleDefAsString();
    public List`1<GridControl> get_ListOfSeenGridControlsForBlazor();
    public void FillTagAndValueDictionaryWithTheControlsDefinitions(Dictionary`2<string, string> tagsAndValuesDict);
    private void HandleTagExpanderForAllButControl(Dictionary`2<string, string> tagsAndValuesDict, ViewModelColumn vc);
}
public class Eco.MVC.ActionMenuItem : ActionMenuNode {
    public ActionMenuList parentMenuGroup;
    public AbstractActionRuntime AbstractAction;
}
public class Eco.MVC.ActionMenuList : ActionMenuNode {
    public VMClass vmClassContext;
    public ViewModelClass ViewModelClassContext;
    public Dictionary`2<string, ActionMenuNode> ActionMenuItems;
    internal ActionMenuList FindOrCreateMenuListForAction(IEcoServiceProvider es, AbstractActionRuntime aa);
    internal ActionMenuList SplitSubMenuGroup(String[] parts, int level, AbstractActionRuntime aResolvedAction);
}
public abstract class Eco.MVC.ActionMenuNode : object {
    internal string SubMenuGroupSortKey;
    public string DividerGroupTag;
    internal string DividerGroupTagSortKey;
    internal bool Enabled;
    public string Presentation;
}
public class Eco.MVC.AngularControlRenderer : HTMLControlRenderer {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<OnCheckAngularUIOverrideExistsArgs> OnCheckAngularUIOverrideControlExists;
    [CompilerGeneratedAttribute]
public void add_OnCheckAngularUIOverrideControlExists(EventHandler`1<OnCheckAngularUIOverrideExistsArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnCheckAngularUIOverrideControlExists(EventHandler`1<OnCheckAngularUIOverrideExistsArgs> value);
    public virtual string RendererOfColumnOverride(ViewModel viewModel, OnColumnUIOverrideArgs e);
    protected virtual string Get_modelExpressionForVMClass(ViewModelColumn vcol);
    protected virtual string Get_modelExpressionForColumn(ViewModelColumn vcol);
    protected virtual string Get_boolValueExpressionForColumn(ViewModelColumn vcol);
    protected virtual HtmlTag GetHtmlForFileUpload(ViewModelColumn vcol);
    protected virtual string Get_modelExpressionForColumnWhenGridList(ViewModelColumn vcol);
    private string GetDisplayFilter(ViewModelColumn c);
    protected virtual string Get_DisplayExpressionForColumn(ViewModelColumn vcol, HtmlTag& displayIsMarkup);
    protected virtual void AddModelExpressionForColumn(ViewModelColumn vcol, HtmlTag addToTag, string ngModelExtraForCombos);
    protected virtual string Get_StatusExpressionForColumn(ViewModelColumn vcol, string statusValueName);
    protected virtual string GetSourceUrlExpressionForBlob(ViewModelColumn vcol);
    protected virtual void AddDisableExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected virtual void AddReadOnlyExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    public virtual void AddShowExpression(ViewModelColumn vcol, HtmlTag addToTag, bool EnableExpression);
    public virtual void AddClassStyleExpression(ViewModelColumn vcol, HtmlTag addToTag);
    protected virtual string GetInputId(ViewModelColumn vcol);
    protected virtual void AddIdToTag(ViewModelColumn vcol, HtmlTag addToTag);
    protected virtual void DataBindComboBox(ViewModelColumn vcol, HtmlTag combobox, string presentationExpression, string pickListExpression);
    public virtual string GetActionClientScriptForActionColumn(ViewModelColumn vcol);
    public virtual void AddActionForColumn(ViewModelColumn vcol, HtmlTag addToTag);
    public virtual void AddColumnHeaderSortingAction(ViewModelColumn vcol, HtmlTag addToTag, bool ColumnClientSortable);
    protected virtual void AddActionsToRow(TableRowTag bodyRow, ViewModelClass vclass);
    protected virtual void AddDragActions(TableTag table, HtmlTag bodyRow, ViewModelClass vclass);
    public virtual void RendererOfGridFor(GridControl GC, HtmlTag parentTag);
    protected virtual void DoAllSeekMoreButtons(HtmlTag tableContent, ViewModelClass vclass);
    private void DoOneSeekMoreButton(HtmlTag seekmorediv, string pres, string command, string disableexpression, string showexpression);
    public void RenderPivotTable(GridControl GC, HtmlTag parentTag);
    private string CheckOverrideGetValue(ViewModelColumn vmcol);
    private string ToValidClassName(string srcString);
    protected virtual void AddInputTypeSettingsForColumn(Type inputType, HtmlTag inputTag);
    public virtual void AddHyperLinkToTag(ViewModelColumn vcol, HtmlTag linkTag);
    protected virtual TableRowTag CreateTableBodyrowTemplate(TableTag tableTag, ViewModelClass vclass, bool multiSelect);
    public virtual HtmlTag AddPlacingContainerListExpression(HtmlTag rootTag, ViewModelClass vclass, bool multiSelect);
    public virtual void AddPlacingContainerStyle(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public virtual void AddPlacingContainerVisible(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    protected virtual string GetHtmlTextForComboboxPresentationNotEditable(string runtimeName);
}
public class Eco.MVC.AngularJSComponentRenderer : WebControlRenderer {
    protected string ViewModelRoot;
    protected string StyleColumnName;
    protected string StyleClassColumnName;
    public virtual void RendererOfAction(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfInplacePopup(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfCombobox(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfGridFor(GridControl GC, HtmlTag parentTag);
    protected string Get_modelExpressionForColumnWhenGridList(ViewModelColumn vcol);
    private void RenderTableComponent(GridControl GC, HtmlTag parentTag);
    protected HtmlTag RenderSimpleTableComponent(GridControl GC);
    protected HtmlTag RenderDataGridComponent(GridControl GC);
    protected TableRowTag CreateTableBodyrowTemplate(TableTag tableTag, ViewModelClass vclass);
    protected void CreateTableHeadCell(ViewModelClass vclass, ViewModelColumn cell, TableRowTag hr, bool clientSortable);
    public void AddColumnHeaderSortingAction(ViewModelColumn vcol, HtmlTag addToTag, bool ColumnClientSortable);
    protected void AddRenderBy(ViewModelColumn vcol, HtmlTag component);
    private void RenderOneTableCell(ViewModelClass vclass, ViewModelColumn vcol, TableRowTag rowTemplate, bool Styled, bool editable);
    protected string GetHtmlTextForComboboxPresentationNotEditable(string runtimeName);
    public virtual void RendererOfGroupBox(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfSimpleUIFor(GridControl GC, HtmlTag parentTag);
    public virtual void AddActionForColumn(ViewModelColumn vcol, HtmlTag addToTag);
    public virtual HtmlTag AddPlacingContainerListExpression(HtmlTag rootTag, ViewModelClass vclass, bool multiSelect);
    public virtual void AddPlacingContainerStyle(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public virtual void AddPlacingContainerVisible(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public virtual string GetActionClientScriptForActionColumn(ViewModelColumn vcol);
    public virtual string GetColumnAsPlainData(ViewModelColumn vcol);
    protected string Get_StatusExpressionForColumn(ViewModelColumn vcol, string statusValueName);
    protected string Get_DisplayExpressionForColumn(ViewModelColumn vcol, HtmlTag& displayIsMarkup);
    protected string Get_modelExpressionForVMClass(ViewModelColumn vcol);
    protected string Get_modelExpressionForColumn(ViewModelColumn vcol);
    protected string GetDisplayFilter(ViewModelColumn c);
    protected bool GetFormatStringFromStyleRef(ViewModelColumn vcol, String& style, String& format, bool forangularNotRazor);
    public virtual void AddClassStyleExpression(ViewModelColumn vcol, HtmlTag addToTag);
    public virtual void AddShowExpression(ViewModelColumn vcol, HtmlTag addToTag, bool EnableExpression);
    protected void AddDisableExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected void AddReadOnlyExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected void AddModelExpressionForColumn(ViewModelColumn vcol, HtmlTag addToTag, string ngModelExtraForCombos);
    protected string GetInputId(ViewModelColumn vcol);
    private string GetPresentationForFiledownloadConsiderFilenameProperty(ViewModelColumn c);
    protected string GetSourceUrlExpressionForBlob(ViewModelColumn vcol);
    private HtmlTag CreateTextfieldComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateTextareaComponent(ViewModelColumn vcol);
    private HtmlTag CreateCheckboxComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateImageComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateImageUploadComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateFileUploadComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateSwitchComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateDatePickerComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateTimePickerComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateBlobDownloadComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateFABButtonComponent(ViewModelColumn vcol);
    private HtmlTag CreateIconComponent(ViewModelColumn vcol);
    private string GetLabelExpressionForColumn(ViewModelColumn vcol);
    private HtmlTag CreateButtonComponent(ViewModelColumn vcol);
    private HtmlTag CreateComboboxComponent(ViewModelColumn vcol, bool inTable);
    private HtmlTag CreateTypographyComponent(ViewModelColumn vcol);
    private HtmlTag GetDisplayHtmlForColumn(ViewModelColumn vcol);
}
public class Eco.MVC.AngularJSViewUICreatorDebug : object {
    private StringBuilder _sb;
    public AngularJSViewUICreatorDebug(string name, EcoSpace ecoSpace);
    private void DoMembersAsJsonHtmlRep(string prefix, int treelevel, VMClassDescriptor cdec);
    private void AddMemberBindingAsHtml(string prefix, int treelevel, VMMemberDescriptor member, string separator);
    public string GetCompleteHtmlString();
}
public class Eco.MVC.AngularModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EcoSpace <EcoSpace>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RootId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPopUp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AngularJSComponentRendering>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <GlobalModalOfferOpenStandalone>k__BackingField;
    public EcoSpace EcoSpace { get; public set; }
    public string ViewName { get; public set; }
    public string RootId { get; public set; }
    public bool IsPopUp { get; public set; }
    public bool AngularJSComponentRendering { get; public set; }
    public bool GlobalModalOfferOpenStandalone { get; public set; }
    [CompilerGeneratedAttribute]
public EcoSpace get_EcoSpace();
    [CompilerGeneratedAttribute]
public void set_EcoSpace(EcoSpace value);
    [CompilerGeneratedAttribute]
public string get_ViewName();
    [CompilerGeneratedAttribute]
public void set_ViewName(string value);
    [CompilerGeneratedAttribute]
public string get_RootId();
    [CompilerGeneratedAttribute]
public void set_RootId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPopUp();
    [CompilerGeneratedAttribute]
public void set_IsPopUp(bool value);
    [CompilerGeneratedAttribute]
public bool get_AngularJSComponentRendering();
    [CompilerGeneratedAttribute]
public void set_AngularJSComponentRendering(bool value);
    [CompilerGeneratedAttribute]
public bool get_GlobalModalOfferOpenStandalone();
    [CompilerGeneratedAttribute]
public void set_GlobalModalOfferOpenStandalone(bool value);
}
public class Eco.MVC.BootstrapMenuRenderer : object {
    public ActionMenuList CreateMenuAndExpandMenuGroups(EcoSpace es, List`1<AbstractActionRuntime> actions);
    private void RenderMenuGroupDividerIfNeeded(HtmlTag menuTag, string thisGroup, String& lastGroup);
    private bool RenderMenuGroupDividerIfNeededXml(string thisGroup, String& lastGroup);
    public void RenderMenuListAsGlobalMenuXml(ActionMenuList menuList, XElement xelement, EcoSpace es);
    private bool RenderMenuListAsGlobalMenu(HttpContextBase HttpContext_Current, ActionMenuList menuList, int menuLevel, HtmlTag menuTag, string _controllerName, EcoSpace es);
    public static MvcHtmlString RenderGlobalNavigatingActions(HttpContextBase HttpContext_Current, EcoSpace ecoSpace, string _controllerName);
    private static string GetGroupHeaderForVMClass(ViewModelClass viewmodelclass);
    public ActionMenuList CreateLeftMenu(ViewModel vm, VMClass vmRootClass);
    public void RenderActionsAsSideMenu(EcoSpace ecoSpace, string _controllerName, ActionMenuList TopLevelMenuList, VMClass vmRootClass, ViewModel vm, HtmlTag addToTag);
    private void RenderMenuListAsSideMenu(EcoSpace ecoSpace, string _controllerName, ActionMenuList menuList, VMClass vmClass, ViewModel vm, string menuName, int menuLevel, HtmlTag addToTag);
    public void AddSubmitOkCancelButtons(VMClass vmc, string _controllerName, HtmlTag addToTag, bool renderAsSeperateButtons);
}
public class Eco.MVC.DevelopmentInfoModel : object {
    public List`1<string> AvailableViewModels;
    public VMClassDescriptor Content;
    public string SelectedViewModel;
    public string Name;
    public EcoSpace EcoSpace;
}
public class Eco.MVC.EcoController`1 : Controller {
    private DefaultEcoSpace _ecoSpace;
    private IEcoSpaceCacheWrapper _ecoSpaceWrapper;
    protected IEcoSpaceCacheProvider EcoSpaceProvider;
    protected VMClass UnshelvedVMClass;
    private static DateTime ShelfCleaningTime;
    protected bool EcoSpaceShelved;
    private static AutoResetEvent _TimeConsumingStartUpWorkDoneSemaphore;
    private static bool _TimeConsumingStartUpWorkDoneSemaphoreDoneAlready;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SaveEvenInvalidModel>k__BackingField;
    public string SessionID { get; }
    public string RemoteIPDetails { get; }
    public DefaultEcoSpace EcoSpace { get; }
    public IEcoSpaceCacheWrapper EcoSpaceWrapper { get; }
    public bool SaveEvenInvalidModel { get; public set; }
    private static EcoController`1();
    protected void UpdateDatabase();
    public string get_SessionID();
    public string get_RemoteIPDetails();
    protected T ObjectForId(string idToGetObjectFor);
    protected IObjectInstance ObjectForId(string idToGetObjectFor);
    protected static IObjectInstance ObjectForId(DefaultEcoSpace es, string idToGetObjectFor);
    protected static IObjectList ObjectForIds(DefaultEcoSpace es, List`1<string> ids);
    protected void ApplyValues(IEcoObject offlineObject, IEcoObject onlineObject);
    protected void ApplyValues(VMClass offline, VMClass online);
    [ObsoleteAttribute]
protected virtual void AfterEcoSpaceCreate();
    protected virtual void AfterEcoSpaceEnsured();
    protected void ShelveEcoSpace(string shelfKey, VMClass vmClass);
    protected virtual VMClass UnshelveEcoSpace(string shelfKey);
    [ObsoleteAttribute]
protected DefaultEcoSpace GetEcoSpace();
    [ObsoleteAttribute]
protected DefaultEcoSpace EnsuredEcoSpace();
    public DefaultEcoSpace get_EcoSpace();
    public IEcoSpaceCacheWrapper get_EcoSpaceWrapper();
    protected virtual DefaultEcoSpace EnsureEcoSpace(string shelfKey);
    internal void InitiateTranslationServiceForWeb(IEcoServiceProvider sp);
    protected virtual void ReleaseEcoSpace();
    protected virtual DefaultEcoSpace CreateEcoSpace();
    [ObsoleteAttribute]
protected void InjectEcoSpace(DefaultEcoSpace es);
    protected void OverrideEcoSpace(DefaultEcoSpace es);
    protected virtual EcoSpaceRequestInfo GetEcoSpaceRequestInfo();
    public static bool HangUntilAppStarted(int maxwait);
    public static void HangUntilAppStartedNotifyThatWeAreNowStarted();
    public ActionResult StylesInModelCss(string unique);
    public ActionResult GetImage(string img);
    private bool CheckStaticAccess(IProperty prop);
    protected bool Commit(VMClass viewmodel);
    protected bool Commit();
    [CompilerGeneratedAttribute]
public bool get_SaveEvenInvalidModel();
    [CompilerGeneratedAttribute]
public void set_SaveEvenInvalidModel(bool value);
    protected bool CommitSkipValidate();
    protected bool BusinessDelete(IEcoObject obj);
    protected virtual void OnActionExecuting(ActionExecutingContext filterContext);
    protected virtual void OnResultExecuted(ResultExecutedContext filterContext);
    [ObsoleteAttribute]
protected virtual void ManagedDispose(EcoSpace es);
    [ObsoleteAttribute]
protected virtual DefaultEcoSpace ManagedCreate();
    protected void ValidateChanges(VMClass viewmodel);
    protected void ValidateChanges();
    protected void ValidateObject(IObject objectToValidate);
}
public class Eco.MVC.EcoSpaceRequestInfo : object {
}
public abstract class Eco.MVC.HTMLControlRenderer : WebControlRenderer {
    protected string ViewModelRoot;
    protected string StyleColumnName;
    protected string StyleClassColumnName;
    public static string RazorCurlyBrace;
    public virtual string GetColumnAsPlainData(ViewModelColumn vcol);
    protected abstract virtual string Get_modelExpressionForVMClass(ViewModelColumn vcol);
    protected abstract virtual string Get_modelExpressionForColumn(ViewModelColumn vcol);
    protected abstract virtual string Get_boolValueExpressionForColumn(ViewModelColumn vcol);
    protected abstract virtual string Get_modelExpressionForColumnWhenGridList(ViewModelColumn vcol);
    protected abstract virtual string Get_DisplayExpressionForColumn(ViewModelColumn vcol, HtmlTag& displayIsMarkup);
    protected abstract virtual void AddModelExpressionForColumn(ViewModelColumn vcol, HtmlTag addToTag, string ngModelExtraForCombos);
    protected abstract virtual string Get_StatusExpressionForColumn(ViewModelColumn vcol, string statusValueName);
    protected abstract virtual void AddDisableExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected abstract virtual void AddReadOnlyExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected abstract virtual void AddInputTypeSettingsForColumn(Type inputType, HtmlTag inputTag);
    protected abstract virtual string GetInputId(ViewModelColumn vcol);
    protected abstract virtual void AddIdToTag(ViewModelColumn vcol, HtmlTag addToTag);
    protected abstract virtual void DataBindComboBox(ViewModelColumn vcol, HtmlTag combobox, string presentationExpression, string pickListExpression);
    public abstract virtual void AddHyperLinkToTag(ViewModelColumn vcol, HtmlTag linkTag);
    public abstract virtual void AddColumnHeaderSortingAction(ViewModelColumn vcol, HtmlTag addToTag, bool ColumnClientSortable);
    protected abstract virtual void AddActionsToRow(TableRowTag bodyrowTemplate, ViewModelClass vclass);
    protected abstract virtual void AddDragActions(TableTag table, HtmlTag bodyRow, ViewModelClass vclass);
    protected abstract virtual TableRowTag CreateTableBodyrowTemplate(TableTag tableTag, ViewModelClass vclass, bool multiSelect);
    protected abstract virtual string GetSourceUrlExpressionForBlob(ViewModelColumn vcol);
    protected abstract virtual string GetHtmlTextForComboboxPresentationNotEditable(string runtimeName);
    protected abstract virtual void DoAllSeekMoreButtons(HtmlTag tableContent, ViewModelClass vclass);
    private HtmlTag GetLabelHtmlForColumn(ViewModelColumn vcol);
    private HtmlTag GetDisplayHtmlForColumn(ViewModelColumn vcol);
    protected HtmlTag GetInputHtmlForColumn(ViewModelColumn vcol, CSSControlType& cssControlType, CSSBEMModifier& cssBemModifier, HtmlTag labelTag);
    public virtual void RendererOfGroupBox(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfSimpleUIFor(GridControl GC, HtmlTag parentTag);
    protected HtmlTag GetHtmlForCheckbox(ViewModelColumn vcol, bool inGrid, CSSControlType& cssControlType, bool forceReadOnly, bool isStatic);
    protected HtmlTag GetCheckboxForMultiSelect(ViewModelClass vclass, bool header);
    protected HtmlTag GetHtmlForRenderedByAction(ViewModelColumn vcol, HtmlTag elementTag, bool isInGrid);
    protected abstract virtual HtmlTag GetHtmlForFileUpload(ViewModelColumn vcol);
    protected HtmlTag GetHtmlForImageInGrid(ViewModelColumn vcol, string size, string modelexpression);
    protected HtmlTag GetHtmlForImages(ViewModelColumn vcol, bool imageInGrid, string modelexpression, CSSControlType& cssControlType);
    protected HtmlTag GetHtmlForPictureWithUpload(ViewModelColumn vcol, string size, bool pictureInGrid, string modelexpression);
    protected virtual HtmlTag GetComboboxHtmlForColumn(ViewModelColumn vcol, string pickListExpression);
    public virtual void RendererOfCombobox(GridControl GC, HtmlTag parentTag);
    private static void InjectValidationStuff(HtmlTag parentTag, ViewModelColumn vcol, HtmlTag control, CSSControlType controltype);
    public virtual void RendererOfGridFor(GridControl GC, HtmlTag parentTag);
    protected void RenderTable(GridControl GC, HtmlTag parentTag);
    private void RenderOneColElement(ViewModelColumn vmcol, HtmlTag colGroup, double colSize);
    private void RenderTableHeaderColumn(ViewModelColumn c, bool isAdvancedTable, TableRowTag hr, bool ClientSortable, ViewModelClass vclass, List`1<ViewModelColumn> colsthatshow, Int32& totalUsedColUnits);
    private bool CheckListViewWithViewModel(ViewModelClass vclass, HtmlTag parentTag);
    private void RenderOneTableColumnCell(ViewModelClass vclass, bool Styled, TableRowTag bodyrowTemplate, bool Editable, ViewModelColumn c);
    private string GetPresentationForFiledownloadConsiderFilenameProperty(ViewModelColumn c);
    public virtual void RendererOfAction(GridControl GC, HtmlTag parentTag);
    public virtual void RendererOfInplacePopup(GridControl GC, HtmlTag parentTag);
    protected void DefaultControlLabelValueWidths(GridControl GC, Int32& BsLabelWidth, Int32& BsValueWidth);
    protected void AddTabOrderForColumn(ViewModelColumn vcol, HtmlTag toTag);
    protected bool GetFormatStringFromStyleRef(ViewModelColumn vcol, String& style, String& format, bool forangularNotRazor);
    protected void AddDocumentation(string _headerText, HtmlTag _htmltag, ViewModelColumn _vcol);
    protected bool CheckForSubColumn(ViewModelColumn vcol, string subColumnSuffix);
    protected string CreateDataBindingExpressionForSubcolumn(string suffix, ViewModelColumn vcol);
    [CompilerGeneratedAttribute]
private bool <RenderTable>b__42_0(ViewModelColumn c);
}
[ExtensionAttribute]
public static class Eco.MVC.HtmlHelpersForAngularJS : object {
    [ExtensionAttribute]
public static MvcHtmlString DisplayErrorsWarningsInfos(HtmlHelper`1<AngularModel> htmlHelper, AngularModel model);
    private static void DoActionGroup(StringBuilder sb, string groupName);
    private static void DoActionGroup(HtmlTag appendToTag, string groupName);
    [ExtensionAttribute]
public static MvcHtmlString SuggestedMVCRazorUsage(HtmlHelper html, DevelopmentInfoModel model);
    [ExtensionAttribute]
public static MvcHtmlString RenderSelectedViewModelItems(HtmlHelper`1<DevelopmentInfoModel> htmlHelper, VMClassDescriptor vdesc);
    [ExtensionAttribute]
public static MvcHtmlString SuggestedAngularJsUsage(HtmlHelper`1<DevelopmentInfoModel> htmlHelper, DevelopmentInfoModel model);
    [ExtensionAttribute]
public static StringBuilder SuggestedUsageGeneric(HtmlHelper html, DevelopmentInfoModel model, Func`1<HTMLControlRenderer> rendererCreatorFunc);
    [ExtensionAttribute]
public static MvcHtmlString SuggestedAngularJsUsageAction(HtmlHelper`1<DevelopmentInfoModel> htmlHelper, DevelopmentInfoModel model);
}
public interface Eco.MVC.IEcoSpaceCacheProvider {
    public abstract virtual IEcoSpaceCacheWrapper BorrowEcoSpace(EcoSpaceRequestInfo requestInfo);
    public abstract virtual IEcoSpaceCacheWrapper BorrowAgain(IEcoSpaceCacheWrapper ecoSpaceWrapperInterface);
    public abstract virtual void ReturnEcoSpace(IEcoSpaceCacheWrapper ecoSpaceWrapperInterface);
}
public interface Eco.MVC.IEcoSpaceCacheWrapper {
    public DefaultEcoSpace EcoSpace { get; }
    public abstract virtual DefaultEcoSpace get_EcoSpace();
}
public static class Eco.MVC.MapPathService : object {
    public static string MapPath(string path);
    public static string ApplicationVirtualPath(HttpContext c);
    public static string GetDataDirectory();
}
public class Eco.MVC.ModalityCookie : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ContextView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AbstractActionRuntime <Action>k__BackingField;
    public string ContextView { get; public set; }
    public string ContextId { get; public set; }
    public AbstractActionRuntime Action { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContextView();
    [CompilerGeneratedAttribute]
public void set_ContextView(string value);
    [CompilerGeneratedAttribute]
public string get_ContextId();
    [CompilerGeneratedAttribute]
public void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public AbstractActionRuntime get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(AbstractActionRuntime value);
}
public class Eco.MVC.ModelDrivenControllerBase`1 : EcoController`1<ESType> {
    private static bool _initiatedViewModelsIn;
    private string _viewname;
    private string _DisplayActionName;
    private AbstractActionRuntime _mailboxforNavigatingAction;
    private IElement _mailboxforNavigatingActionElem;
    private string _mailboxforNavigatingUrl;
    private bool _mailboxforNavigatingUrlOpenNewTab;
    public static string WAct_nameOf;
    private static Dictionary`2<string, string> _viewControllerOverride;
    private VMClass _actionTargetVMClass;
    private ActionResult _buttonActionResult;
    public string ViewName { get; public set; }
    public string DisplayActionName { get; public set; }
    public static Dictionary`2<string, string> ViewControllerOverride { get; }
    private static ModelDrivenControllerBase`1();
    protected virtual void AfterEcoSpaceEnsured();
    protected virtual void InitiateViewModelsByReadingModelAssembly();
    protected virtual void OnActionExecuting(ActionExecutingContext filterContext);
    [HttpPostAttribute]
public ActionResult ModalOk(VMClass offlinevm, string id, string contextView, string contextId, string contextAction);
    public string get_ViewName();
    public void set_ViewName(string value);
    public string get_DisplayActionName();
    public void set_DisplayActionName(string value);
    protected virtual VMClass GetOnlineVMClass(string viewName, string id);
    public virtual ActionResult Display(string view, string id);
    private bool HandlePeriodicActionsForMVCCheckOnEachPostBack(string view, string id, VMClass onlineVMClass);
    private void CallAbstractActionWatchForNavigation(VMClass onlineVMClass, string actioncolname, VMClass targetForAction);
    private void ViewModel_OnNavigateUrl(object sender, OnNavigateUrlEventArgs e);
    private void ViewModel_OnBringUpViewPreview(object sender, OnBringUpViewPreviewEventArgs e);
    internal ActionResult RedirectDisplay(string inview, string inid, bool keepPageAndSort);
    private void SetModelState(ModelStateDictionary modelState);
    private ModelStateDictionary GetModelState();
    public ActionResult WActNav(string id, string actionref);
    public ActionResult WActNavContext(string id, string actionref, string rootid, string viewname, string vartoset);
    [HttpPostAttribute]
public ActionResult WAct(VMClass offlinevm, string id, string actionref, string rootid, string viewname);
    public ActionResult WAct(string id, string actionref, string rootid, string viewname);
    public ActionResult WActPartial(string id, string actionref, string rootid, string viewname, bool partial);
    private ActionResult WActInternal(string id, string actionref, string nestingrootid, string nestingname, bool partial, VMClass onlinevm, string vartosetWhenContextActionGridClick);
    protected virtual void OnActionAboutToBeExecuted(string viewName, VMClass onlineVMClass, AbstractActionRuntime action);
    public static Dictionary`2<string, string> get_ViewControllerOverride();
    private ActionResult DoView(bool partial, VMClass onlineVMClass, bool keepPageAndSort);
    protected string GetRoundTrippableViewName(VMClass vmc);
    private ActionResult RedirectDisplaySaveVMOnTempData(VMClass onlineVMClass, bool keeppageandsort);
    private ActionResult HandleNavigateToView(IEcoObject context, bool stayOnView, string targetViewName, AbstractActionRuntime action, IExternalVariableList varsForOriginatingContext, bool partial, VMClass onlineVMClass);
    protected void ViewModel_OnViewModelActionExecute(object sender, OnViewModelActionExecuteEventArgs eventArgs);
    protected virtual VMClass ReCreateVMClass(string viewmodelname, IEcoObject root);
    protected VMClass CreateVMClassFromName(string targetViewName, object targetViewRootObject);
    protected virtual string PlugPointForMVCAutoFormCreation(string targetViewName, IEcoObject ecoObject);
    protected VMClass CreateVMClassForAccessDenied();
    protected virtual ActionResult GetAccessDeniedAction();
    private string SafeIDForObject(object obj);
    protected void LoadVariablesFromSessionStateIfAvailable(string viewname, string rootid, IExternalVariableList thevars);
    protected void SaveVariablesToSessionState(VMClass result);
    protected void SaveVariablesToSessionState(string vmclassname, string rootid, IExternalVariableList variablellist);
    [HttpPostAttribute]
public ActionResult SubmitPartial(VMClass offlinevm);
    [HttpPostAttribute]
public ActionResult Submit(VMClass offlinevm);
    protected VMClass DoSubmit(VMClass offlinevm);
    protected VMClass DoSubmit(VMClass offlinevm, bool performActionsOnRootVMClass);
    private object SafeObjectForId(string thisAsExternalId);
    private void HandleSearchAction(VMClass onlinevm);
}
[ExtensionAttribute]
public static class Eco.MVC.MvcRazorHtmlHelper : object {
    private static Dictionary`2<string, string> ControllerNameCache;
    public static string GetvCurrentBoolValueGridRow_nameOf;
    public static string ServerUrlForDownloadUrls;
    public static string GetVMImageUrl_nameof;
    public static string DisplayMemberForvCurrent_nameof;
    public static string DisplayMember_nameOf;
    public static string Action_nameof;
    public static string GetSearchMoreEnable_nameof;
    public static string GetSearchMoreVisible_nameof;
    public static string GetStatus_nameof;
    private static MvcRazorHtmlHelper();
    [ExtensionAttribute]
public static string GetControllerName(HtmlHelper htmlHelper);
    [ExtensionAttribute]
public static bool GetvCurrentBoolValueGridRow(VMAbstractMember mem);
    [ExtensionAttribute]
public static MvcHtmlString WecpofScripts(HtmlHelper html);
    [ExtensionAttribute]
public static MvcHtmlString RenderMDrivenGlobalNavigatingActions(HtmlHelper htmlHelper);
    [ExtensionAttribute]
public static MvcHtmlString DisplayWecpofSubmitOkCancel(HtmlHelper html);
    [ExtensionAttribute]
public static MvcHtmlString DisplayLeftMenuButtons(HtmlHelper`1<VMClass> htmlHelper);
    [ExtensionAttribute]
public static MvcHtmlString DisplayLeftSection(HtmlHelper`1<VMClass> htmlHelper);
    [ExtensionAttribute]
public static MvcHtmlString GetVMImageUrl(HtmlHelper`1<VMClass> htmlHelper, VMClass vmClass, string attributeName);
    [ExtensionAttribute]
public static object GetValueForvCurrent(HtmlHelper`1<VMClass> htmlHelper, string vmcname, string memberName);
    public static object GetValueForMember(VMClass vmClass, string memberName);
    public static MvcHtmlString FormatValueForDisplay(HttpContextBase HttpContext_Current, object valueToFormat, string formatString);
    [ExtensionAttribute]
public static MvcHtmlString DisplayMemberForvCurrent(HtmlHelper`1<VMClass> htmlHelper, string vmcname, string memberName, string formatString);
    [ExtensionAttribute]
public static MvcHtmlString DisplayMember(HtmlHelper`1<VMClass> htmlHelper, VMClass vmClass, string memberName, string formatString);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper`1<VMClass> htmlHelper, VMClass vmClass, string nameOfAction);
    [ExtensionAttribute]
public static bool GetSearchMoreVarEnable(HtmlHelper`1<VMClass> htmlHelper, string varname);
    [ExtensionAttribute]
public static bool GetSearchMoreVisible(HtmlHelper`1<VMClass> htmlHelper, string varname);
    [ExtensionAttribute]
public static object GetStatus(HtmlHelper`1<VMClass> htmlHelper, string statusName);
}
[ExtensionAttribute]
public static class Eco.MVC.MvcRazorPartialView : object {
    private static bool DebugViewCaching;
    private static bool DebugViewRendering;
    public static PartialViewPathProvider partialViewPathProvider;
    private static Dictionary`2<string, PartialViewFile> _PartialViewCache;
    private static DateTime _translationCache;
    private static string _PartialViewCache_SuggestedFileHashForCurrentModelViews;
    private static MvcRazorPartialView();
    public static string GetWWWFileRoot();
    public static HtmlString RenderRazorPartial(ViewModel viewModel);
    public static void AllViewModelsHasChangedUseNewHash(string hashtouse);
    public static string RenderRazorPartialFile(ViewModelClass viewModelClass, HtmlHelper`1<VMClass> htmlHelper);
    [ExtensionAttribute]
public static string RazorPartialFile(HtmlHelper`1<VMClass> htmlHelper);
    internal static Stream GenerateStreamFromString(string s);
}
internal static class Eco.MVC.MvcRazorPartialViewShared : object {
    internal static string RenderRazorPartial(ViewModel viewModel);
}
public class Eco.MVC.RazorControlRenderer : HTMLControlRenderer {
    public static string PlacedButtonPrefix;
    private static RazorControlRenderer();
    private static RazorParameter RazorParam(string value, bool quoteIt);
    private string RazorFunction(string objectName, string functionName, RazorParameter[] parameters);
    protected virtual HtmlTag GetHtmlForFileUpload(ViewModelColumn vcol);
    protected virtual string Get_modelExpressionForVMClass(ViewModelColumn vcol);
    protected virtual string Get_modelExpressionForColumn(ViewModelColumn vcol);
    protected virtual string Get_boolValueExpressionForColumn(ViewModelColumn vcol);
    protected virtual string Get_modelExpressionForColumnWhenGridList(ViewModelColumn vcol);
    private string GetDisplayFilter(ViewModelColumn c);
    protected virtual string GetHtmlTextForComboboxPresentationNotEditable(string runtimeName);
    protected virtual string Get_DisplayExpressionForColumn(ViewModelColumn vcol, HtmlTag& displayIsMarkup);
    protected virtual void AddModelExpressionForColumn(ViewModelColumn vcol, HtmlTag addToTag, string ngModelExtraForCombos);
    protected virtual string Get_StatusExpressionForColumn(ViewModelColumn vcol, string statusValueName);
    protected string Get_SearchMoreEnable(string searchMoreVar);
    protected string Get_SearchMoreVisible(string searchMoreVar);
    protected virtual string GetSourceUrlExpressionForBlob(ViewModelColumn vcol);
    protected virtual void AddDisableExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    protected virtual void AddReadOnlyExpression(ViewModelColumn vcol, HtmlTag addToTag, bool forceToReadOnly);
    public virtual void AddShowExpression(ViewModelColumn vcol, HtmlTag addToTag, bool EnableExpression);
    public virtual void AddClassStyleExpression(ViewModelColumn vcol, HtmlTag addToTag);
    protected virtual string GetInputId(ViewModelColumn vcol);
    protected virtual void AddIdToTag(ViewModelColumn vcol, HtmlTag addToTag);
    protected virtual void DataBindComboBox(ViewModelColumn vcol, HtmlTag combobox, string presentationExpression, string pickListExpression);
    public virtual string GetActionClientScriptForActionColumn(ViewModelColumn vcol);
    public virtual void AddActionForColumn(ViewModelColumn vcol, HtmlTag addToTag);
    public virtual void AddColumnHeaderSortingAction(ViewModelColumn vcol, HtmlTag addToTag, bool ColumnClientSortable);
    protected virtual void AddActionsToRow(TableRowTag bodyRow, ViewModelClass vclass);
    protected virtual void AddDragActions(TableTag table, HtmlTag bodyRow, ViewModelClass vclass);
    public virtual void FinalizeUI(ViewModel vm, StringBuilder completeHTML);
    protected virtual void AddInputTypeSettingsForColumn(Type inputType, HtmlTag inputTag);
    public virtual void AddHyperLinkToTag(ViewModelColumn vcol, HtmlTag linkTag);
    protected virtual void DoAllSeekMoreButtons(HtmlTag tableContent, ViewModelClass vclass);
    private void DoOneSeekMoreButton(HtmlTag seekmorediv, ViewModelClass vclass, string pres, string command);
    protected virtual TableRowTag CreateTableBodyrowTemplate(TableTag tableTag, ViewModelClass vclass, bool multiSelect);
    public virtual HtmlTag AddPlacingContainerListExpression(HtmlTag rootTag, ViewModelClass vclass, bool multiSelect);
    public virtual void AddPlacingContainerStyle(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public virtual void AddPlacingContainerVisible(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
}
public static class Eco.MVC.RenderSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <UseCSSGridByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <UseAngularJSComponents>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <AdvancedTables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static IList`1<string> <TableColumnsExcludeNames>k__BackingField;
    public static bool UseCSSGridByDefault { get; public set; }
    public static bool UseAngularJSComponents { get; public set; }
    public static bool AdvancedTables { get; public set; }
    public static IList`1<string> TableColumnsExcludeNames { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_UseCSSGridByDefault();
    [CompilerGeneratedAttribute]
public static void set_UseCSSGridByDefault(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseAngularJSComponents();
    [CompilerGeneratedAttribute]
public static void set_UseAngularJSComponents(bool value);
    [CompilerGeneratedAttribute]
public static bool get_AdvancedTables();
    [CompilerGeneratedAttribute]
public static void set_AdvancedTables(bool value);
    [CompilerGeneratedAttribute]
public static IList`1<string> get_TableColumnsExcludeNames();
    [CompilerGeneratedAttribute]
public static void set_TableColumnsExcludeNames(IList`1<string> value);
    public static bool CheckUseAngularJSComponents(ViewModel viewModel);
    private static bool InternalCheckUseAngularJSComponents(ITaggedValueCollection taggedValues);
    public static bool CheckUseAngularJSComponents(ViewModelRTCreator rTCreator);
}
public static class Eco.MVC.SeekMoreHelper : object {
    public static void HandleSeekMoreAction(VMClass vmclass, string action);
    public static bool IsSeekMoreAction(string actionref);
    public static bool IsEnabled(VMClass vmclass, string varname);
    public static bool IsVisible(VMClass vmclass, string varname);
}
public static class Eco.MVC.SessionVarsHandler : object {
    public static object GetSessionValue(HttpSessionStateBase Session, string key, Type resultType);
    public static void SetSessionValue(HttpSessionStateBase Session, string key, object val);
}
internal class Eco.MVC.ShelvedEcoSpace : object {
    private DefaultEcoSpace _ecoSpace;
    private VMClass _vmClass;
    private IEcoSpaceCacheProvider _providerInterface;
    private IEcoSpaceCacheWrapper _wrapperInterface;
    private DateTime timeOutTime;
    private bool disposedValue;
    public bool TimedOut { get; }
    public ShelvedEcoSpace(DefaultEcoSpace ecoSpace, IEcoSpaceCacheProvider ecoSpaceProvider, IEcoSpaceCacheWrapper wrapper, VMClass vmClass);
    public void UnshelveEcoSpace(DefaultEcoSpace& ecoSpace, IEcoSpaceCacheProvider& ecoSpaceProvider, IEcoSpaceCacheWrapper& wrapper, VMClass& vmClass);
    public bool get_TimedOut();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public static void CleanShelvedEcoSpaces(TempDataDictionary tempData);
}
public class Eco.MVC.StylesInModelCssGenerator : object {
    private static string _cssgeneratedforCS;
    private static StringBuilder _css;
    private static DateTime _stylesLastUpdateTime;
    private static bool _seenforthefirsttime;
    private static bool _hasThemeDataInModel;
    private static string _lastKnownThemeDataName;
    private static StylesInModelCssGenerator();
    public static void ReEvaluateNextTime();
    public static string GetForEs(EcoSpace es);
    private static void BuildCSS(ActionsRuntime ar, StringBuilder result);
    private static void DoOneStyleInModel(string v, StyleTargetRuntime onestyletarget, StringBuilder result, bool useFontInfo, bool useborder, Dictionary`2<string, StyleTargetRuntime> fontFaces);
}
public class Eco.MVC.VMClassBinder : object {
    public static string ViewModelNameFormAttribute;
    public sealed virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
    private void UpdateWithoutSpecificTypeByCodeGen(string key, string value, VMClass model, ModelBindingContext bindingContext, HttpRequestBase request);
    private void HandlePossibleFileUpload(VMClass context, VMNativeTypeAttribute theBlobTypedMNativeTypeAttribute, HttpPostedFileBase theFile);
    private object SafeConvertFromStr(string value, Type orgtype);
    private void ManageBooleanValue(String& value, Type type);
    public static string GetBindingName(ViewModelColumn vcol, bool bindToExternalId);
}
public abstract class Eco.MVC.WebControlRenderer : object {
    public static Dictionary`2<CSSControlType, string> BEM_BlockName;
    public static Dictionary`2<CSSBEMElement, string> BEM_ElementName;
    public static Dictionary`2<CSSBEMModifier, string> BEM_ModifierName;
    public List`1<RenderingDevInfo> devInfo;
    private static WebControlRenderer();
    public abstract virtual void RendererOfGroupBox(GridControl GC, HtmlTag parentTag);
    public abstract virtual void RendererOfSimpleUIFor(GridControl GC, HtmlTag parentTag);
    public abstract virtual void RendererOfCombobox(GridControl GC, HtmlTag parentTag);
    public abstract virtual void RendererOfGridFor(GridControl GC, HtmlTag parentTag);
    public abstract virtual void RendererOfAction(GridControl GC, HtmlTag parentTag);
    public abstract virtual void RendererOfInplacePopup(GridControl GC, HtmlTag parentTag);
    public abstract virtual HtmlTag AddPlacingContainerListExpression(HtmlTag rootTag, ViewModelClass vclass, bool multiSelect);
    public abstract virtual void AddPlacingContainerStyle(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public abstract virtual void AddPlacingContainerVisible(HtmlTag theplacingContainerDiv, ViewModelColumn vcol);
    public abstract virtual void AddClassStyleExpression(ViewModelColumn vcol, HtmlTag addToTag);
    public abstract virtual void AddShowExpression(ViewModelColumn vcol, HtmlTag addToTag, bool EnableExpression);
    public abstract virtual string GetActionClientScriptForActionColumn(ViewModelColumn vcol);
    public abstract virtual void AddActionForColumn(ViewModelColumn vcol, HtmlTag addToTag);
    public abstract virtual string GetColumnAsPlainData(ViewModelColumn vcol);
    public virtual string RendererOfColumnOverride(ViewModel viewModel, OnColumnUIOverrideArgs e);
    public virtual void FinalizeUI(ViewModel vm, StringBuilder completeHTML);
}
public class StreamingAppGenericAPIAndControllers.EarlyIntroductionOfTurnkeyNamespace : object {
}
