[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.CamelCaseNameRewriter : object {
    private CultureInfo _culture;
    public CamelCaseNameRewriter(CultureInfo culture);
    public sealed virtual string RewriteName(string name);
}
[NullableContextAttribute("1")]
public interface EFCore.NamingConventions.Internal.INameRewriter {
    public abstract virtual string RewriteName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.LowerCaseNameRewriter : object {
    private CultureInfo _culture;
    public LowerCaseNameRewriter(CultureInfo culture);
    public sealed virtual string RewriteName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.NameRewritingConvention : object {
    private static StoreObjectType[] _storeObjectTypes;
    private IDictionary`2<Type, string> _sets;
    private INameRewriter _namingNameRewriter;
    public NameRewritingConvention(ProviderConventionSetBuilderDependencies dependencies, INameRewriter nameRewriter);
    private static NameRewritingConvention();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public sealed virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void ProcessHierarchyChange(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public sealed virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    private void ProcessOwnershipChange(IConventionForeignKey foreignKey, IConventionContext context);
    public sealed virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public sealed virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public sealed virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
    public sealed virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public sealed virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public sealed virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private void RewriteColumnName(IConventionPropertyBuilder propertyBuilder);
    [CompilerGeneratedAttribute]
private string <ProcessHierarchyChange>g__GetDefaultTableName|6_0(IConventionEntityType entityType);
    [CompilerGeneratedAttribute]
private void <ProcessOwnershipChange>g__ProcessJsonOwnedEntity|9_0(IConventionEntityType entityType, string containerColumnName);
}
public enum EFCore.NamingConventions.Internal.NamingConvention : Enum {
    public int value__;
    public static NamingConvention None;
    public static NamingConvention SnakeCase;
    public static NamingConvention LowerCase;
    public static NamingConvention CamelCase;
    public static NamingConvention UpperCase;
    public static NamingConvention UpperSnakeCase;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.NamingConventionSetPlugin : object {
    private ProviderConventionSetBuilderDependencies _dependencies;
    private IDbContextOptions _options;
    public NamingConventionSetPlugin(ProviderConventionSetBuilderDependencies dependencies, IDbContextOptions options);
    public sealed virtual ConventionSet ModifyConventions(ConventionSet conventionSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.NamingConventionsOptionsExtension : object {
    [NullableAttribute("2")]
private DbContextOptionsExtensionInfo _info;
    private NamingConvention _namingConvention;
    [NullableAttribute("2")]
private CultureInfo _culture;
    public DbContextOptionsExtensionInfo Info { get; }
    internal NamingConvention NamingConvention { get; }
    [NullableAttribute("2")]
internal CultureInfo Culture { get; }
    protected NamingConventionsOptionsExtension(NamingConventionsOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual NamingConventionsOptionsExtension Clone();
    internal virtual NamingConvention get_NamingConvention();
    [NullableContextAttribute("2")]
internal virtual CultureInfo get_Culture();
    public virtual NamingConventionsOptionsExtension WithoutNaming();
    public virtual NamingConventionsOptionsExtension WithSnakeCaseNamingConvention(CultureInfo culture);
    public virtual NamingConventionsOptionsExtension WithLowerCaseNamingConvention(CultureInfo culture);
    public virtual NamingConventionsOptionsExtension WithUpperCaseNamingConvention(CultureInfo culture);
    public virtual NamingConventionsOptionsExtension WithUpperSnakeCaseNamingConvention(CultureInfo culture);
    public virtual NamingConventionsOptionsExtension WithCamelCaseNamingConvention(CultureInfo culture);
    public sealed virtual void Validate(IDbContextOptions options);
    public sealed virtual void ApplyServices(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.SnakeCaseNameRewriter : object {
    private CultureInfo _culture;
    public SnakeCaseNameRewriter(CultureInfo culture);
    public virtual string RewriteName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.UpperCaseNameRewriter : object {
    private CultureInfo _culture;
    public UpperCaseNameRewriter(CultureInfo culture);
    public sealed virtual string RewriteName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EFCore.NamingConventions.Internal.UpperSnakeCaseNameRewriter : SnakeCaseNameRewriter {
    private CultureInfo _culture;
    public UpperSnakeCaseNameRewriter(CultureInfo culture);
    public virtual string RewriteName(string name);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NamingConventionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSnakeCaseNamingConvention(DbContextOptionsBuilder optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSnakeCaseNamingConvention(DbContextOptionsBuilder`1<TContext> optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseLowerCaseNamingConvention(DbContextOptionsBuilder optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseLowerCaseNamingConvention(DbContextOptionsBuilder`1<TContext> optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseUpperCaseNamingConvention(DbContextOptionsBuilder optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseUpperCaseNamingConvention(DbContextOptionsBuilder`1<TContext> optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseUpperSnakeCaseNamingConvention(DbContextOptionsBuilder optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseUpperSnakeCaseNamingConvention(DbContextOptionsBuilder`1<TContext> optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseCamelCaseNamingConvention(DbContextOptionsBuilder optionsBuilder, CultureInfo culture);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseCamelCaseNamingConvention(DbContextOptionsBuilder`1<TContext> optionsBuilder, CultureInfo culture);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NamingConventionsServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkNamingConventions(IServiceCollection serviceCollection);
}
