[ExtensionAttribute]
public static class Elastic.Apm.AspNetCore.ApplicationBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This extension is maintained for backward compatibility. We recommend registering the agent via the IServiceCollection using the AddElasticApm extension method instead. This method may be removed in a future release.")]
public static IApplicationBuilder UseElasticApm(IApplicationBuilder builder, IConfiguration configuration, IDiagnosticsSubscriber[] subscribers);
    [ExtensionAttribute]
internal static IApplicationBuilder UseElasticApm(IApplicationBuilder builder, ApmAgent agent, IApmLogger logger, IDiagnosticsSubscriber[] subscribers);
    [ExtensionAttribute]
private static string GetEnvironmentName(IServiceProvider serviceProvider);
}
internal class Elastic.Apm.AspNetCore.AspNetCoreHttpForm : object {
    private IFormCollection _form;
    public int Count { get; }
    public bool HasValue { get; }
    public AspNetCoreHttpForm(IFormCollection form);
    public sealed virtual int get_Count();
    public sealed virtual bool get_HasValue();
    public sealed virtual IEnumerator`1<ValueTuple`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Elastic.Apm.AspNetCore.AspNetCoreHttpFormEnumerator : object {
    private IEnumerator`1<KeyValuePair`2<string, StringValues>> _enumerator;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<string, string> Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public AspNetCoreHttpFormEnumerator(IEnumerator`1<KeyValuePair`2<string, StringValues>> enumerator);
    public sealed virtual ValueTuple`2<string, string> get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Elastic.Apm.AspNetCore.AspNetCoreHttpRequest : object {
    private HttpRequest _request;
    public bool HasValue { get; }
    public string ContentType { get; }
    internal AspNetCoreHttpRequest(HttpRequest request);
    public sealed virtual string ExtractBody(IConfiguration configuration, IApmLogger logger, Boolean& longerThanMaxLength);
    public sealed virtual bool get_HasValue();
    public sealed virtual string get_ContentType();
}
internal static class Elastic.Apm.AspNetCore.Consts : object {
}
internal class Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreDiagnosticListener : DiagnosticListenerBase {
    private PropertyFetcher _defaultHttpContextFetcher;
    private PropertyFetcher _exceptionContextPropertyFetcher;
    private PropertyFetcher _httpContextPropertyFetcher;
    private PropertyFetcher _hostDefaultHttpContextFetcher;
    private PropertyFetcher _hostExceptionContextPropertyFetcher;
    internal ConditionalWeakTable`2<HttpContext, ITransaction> ProcessingRequests;
    public string Name { get; }
    public AspNetCoreDiagnosticListener(ApmAgent agent);
    public virtual string get_Name();
    protected virtual void HandleOnNext(KeyValuePair`2<string, object> kv);
}
public class Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreDiagnosticSubscriber : object {
    public sealed virtual IDisposable Subscribe(IApmAgent agent);
}
[ExtensionAttribute]
internal static class Elastic.Apm.AspNetCore.Extensions.HttpRequestExtensions : object {
    [ExtensionAttribute]
internal static string ExtractRequestBody(HttpRequest request, IConfiguration configuration, Boolean& longerThanMaxLength);
}
internal static class Elastic.Apm.AspNetCore.WebRequestTransactionCreator : object {
    internal static ITransaction StartTransactionAsync(HttpContext context, IApmLogger logger, ITracer tracer, IConfiguration configuration);
    internal static void FillSampledTransactionContextRequest(Transaction transaction, HttpContext context, IApmLogger logger);
    private static void FillSampledTransactionContextRequest(HttpContext context, Transaction transaction, IApmLogger logger);
    private static Dictionary`2<string, string> GetHeaders(IHeaderDictionary headers, IConfigurationReader configuration);
    private static string GetRawUrl(HttpRequest httpRequest, IApmLogger logger);
    private static string GetHttpVersion(string protocolString);
    internal static void StopTransaction(Transaction transaction, HttpContext context, IApmLogger logger);
    private static ValueTuple`2<string, string> CollectGrpcInfo();
    private static void FillSampledTransactionContextResponse(HttpContext context, Transaction transaction, IApmLogger logger);
    private static void FillSampledTransactionContextUser(HttpContext context, Transaction transaction, IApmLogger logger);
    [CompilerGeneratedAttribute]
internal static string <FillSampledTransactionContextUser>g__GetClaimWithFallbackValue|9_0(string claimType, string fallbackClaimType, <>c__DisplayClass9_0& );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddElasticApmForAspNetCore(IServiceCollection services, IDiagnosticsSubscriber[] subscribers);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
