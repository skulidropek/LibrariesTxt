internal class Elastic.Apm.Extensions.Hosting.ApmExtensionsLogger : object {
    private ILogger _logger;
    public ApmExtensionsLogger(ILoggerFactory loggerFactory);
    public sealed virtual bool IsEnabled(LogLevel level);
    public sealed virtual void Log(LogLevel level, TState state, Exception e, Func`3<TState, Exception, string> formatter);
    private static LogLevel Convert(LogLevel logLevel);
    internal static IApmLogger GetApmLogger(IServiceProvider serviceProvider);
}
internal class Elastic.Apm.Extensions.Hosting.CompositeLogger : object {
    [CompilerGeneratedAttribute]
private TraceLogger <TraceLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IApmLogger <ApmLogger>k__BackingField;
    private bool _isDisposed;
    public TraceLogger TraceLogger { get; }
    public IApmLogger ApmLogger { get; }
    public CompositeLogger(TraceLogger traceLogger, IApmLogger logger);
    [CompilerGeneratedAttribute]
public TraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public IApmLogger get_ApmLogger();
    public sealed virtual void Dispose();
    public sealed virtual void Log(LogLevel level, TState state, Exception e, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
}
internal class Elastic.Apm.Extensions.Hosting.Config.ApmConfiguration : FallbackToEnvironmentConfigurationBase {
    private static string ThisClassName;
    public ApmConfiguration(IConfiguration configuration, IApmLogger logger, string defaultEnvironmentName);
    private void ChangeCallback(object obj);
}
internal class Elastic.Apm.Extensions.Hosting.Config.ConfigurationKeyValueProvider : object {
    private IConfiguration _configuration;
    public string Description { get; }
    public ConfigurationKeyValueProvider(IConfiguration configuration);
    public sealed virtual string get_Description();
    public sealed virtual ApplicationKeyValue Read(ConfigurationOption option);
}
[ExtensionAttribute]
public static class Elastic.Apm.Extensions.Hosting.HostBuilderExtensions : object {
    internal static string GetHostingEnvironmentName(HostBuilderContext ctx, IApmLogger logger);
    [ExtensionAttribute]
[ObsoleteAttribute("This extension is maintained for backward compatibility. We recommend registering the agent via the IServiceCollection using the AddElasticApm extension method instead. This method may be removed in a future release.")]
public static IHostBuilder UseElasticApm(IHostBuilder builder, IDiagnosticsSubscriber[] subscribers);
    internal static void UpdateServiceInformation(Service service);
    private static string GetAssemblyVersion(string assemblyName);
}
internal class Elastic.Apm.NetCoreAll.ApmService : object {
    private IApmAgent _agent;
    public ApmService(IApmAgent agent);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddElasticApm(IServiceCollection services, IDiagnosticsSubscriber[] subscribers);
    private static string GetDefaultEnvironmentName(IServiceProvider serviceProvider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
