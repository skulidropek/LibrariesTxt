public class Elasticsearch.Net.Aws.AwsHttpConnection : HttpConnection {
    private AWSCredentials _credentials;
    private RegionEndpoint _region;
    public AwsHttpConnection(AWSOptions options);
    public AwsHttpConnection(AWSCredentials credentials, RegionEndpoint region);
    public AwsHttpConnection(string region);
    private static AWSCredentials GetCredentials();
    private static RegionEndpoint GetRegion();
    private static AWSCredentials GetCredentialsFromOptions(AWSOptions options);
    protected virtual HttpMessageHandler CreateHttpClientHandler(RequestData requestData);
}
[ExtensionAttribute]
internal static class Elasticsearch.Net.Aws.HttpMessageHandlerExtensions : object {
    private static Func`4<HttpMessageHandler, HttpRequestMessage, CancellationToken, Task`1<HttpResponseMessage>> _sendFunc;
    private static HttpMessageHandlerExtensions();
    private static Func`4<HttpMessageHandler, HttpRequestMessage, CancellationToken, Task`1<HttpResponseMessage>> GetSendAsync();
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpMessageHandler handler, HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Elasticsearch.Net.Aws.HttpRequestMessageAdapter : object {
    private HttpRequestMessage _message;
    [CompilerGeneratedAttribute]
private IHeaders <Headers>k__BackingField;
    private Byte[] _content;
    public IHeaders Headers { get; private set; }
    public string Method { get; }
    public Uri RequestUri { get; }
    public Byte[] Content { get; }
    public HttpRequestMessageAdapter(HttpRequestMessage message);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IHeaders value);
    public sealed virtual string get_Method();
    public sealed virtual Uri get_RequestUri();
    public sealed virtual Byte[] get_Content();
    public sealed virtual Task PrepareForSigningAsync();
    [AsyncStateMachineAttribute("Elasticsearch.Net.Aws.HttpRequestMessageAdapter/<PrepareForSigningWithContentReplacementAsync>d__15")]
private Task PrepareForSigningWithContentReplacementAsync();
}
internal interface Elasticsearch.Net.Aws.IHeaders {
    public string XAmzDate { get; public set; }
    public string Authorization { get; public set; }
    public string XAmzSecurityToken { get; public set; }
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual string get_XAmzDate();
    public abstract virtual void set_XAmzDate(string value);
    public abstract virtual string get_Authorization();
    public abstract virtual void set_Authorization(string value);
    public abstract virtual string get_XAmzSecurityToken();
    public abstract virtual void set_XAmzSecurityToken(string value);
    public abstract virtual IEnumerable`1<string> GetValues(string name);
    public abstract virtual IEnumerable`1<string> get_Keys();
}
internal interface Elasticsearch.Net.Aws.IRequest {
    public IHeaders Headers { get; }
    public string Method { get; }
    public Uri RequestUri { get; }
    public Byte[] Content { get; }
    public abstract virtual IHeaders get_Headers();
    public abstract virtual string get_Method();
    public abstract virtual Uri get_RequestUri();
    public abstract virtual Task PrepareForSigningAsync();
    public abstract virtual Byte[] get_Content();
}
internal class Elasticsearch.Net.Aws.SigningHttpMessageHandler : HttpClientHandler {
    private AWSCredentials _credentials;
    private RegionEndpoint _region;
    private HttpMessageHandler _innerHandler;
    private bool _innerHandlerDisposed;
    public SigningHttpMessageHandler(AWSCredentials credentials, RegionEndpoint region, HttpMessageHandler innerHandler);
    [AsyncStateMachineAttribute("Elasticsearch.Net.Aws.SigningHttpMessageHandler/<SendAsync>d__5")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Elasticsearch.Net.Aws.SignV4Util : object {
    private static Char[] _datePartSplitChars;
    private static Byte[] _emptyBytes;
    private static UTF8Encoding _encoding;
    private static SignV4Util();
    [AsyncStateMachineAttribute("Elasticsearch.Net.Aws.SignV4Util/<SignRequestAsync>d__1")]
public static Task SignRequestAsync(IRequest request, ImmutableCredentials credentials, string region, string service);
    public static Byte[] GetSigningKey(string secretKey, string dateStamp, string region, string service);
    [ExtensionAttribute]
private static Byte[] GetHmacSha256Hash(Byte[] key, string data);
    public static string GetStringToSign(IRequest request, string region, string service);
    private static string GetCredentialScope(string date, string region, string service);
    public static string GetCanonicalRequest(IRequest request);
    private static string GetPath(Uri uri);
    private static bool ShouldSignHeader(string headerName);
    [ExtensionAttribute]
private static Dictionary`2<string, string> GetCanonicalHeaders(IRequest request);
    private static void WriteCanonicalHeaders(Dictionary`2<string, string> canonicalHeaders, StringBuilder output);
    private static string GetSignedHeaders(IRequest request);
    private static void WriteSignedHeaders(Dictionary`2<string, string> canonicalHeaders, StringBuilder output);
    private static NameValueCollection ParseQueryString(string query);
    [ExtensionAttribute]
public static string GetCanonicalQueryString(Uri uri);
    [ExtensionAttribute]
private static void WriteEncoded(StringBuilder output, string value);
    [ExtensionAttribute]
private static bool RequiresEncoding(char value);
    private static void WriteRequestPayloadHash(Byte[] data, StringBuilder output);
    [ExtensionAttribute]
private static string ToLowercaseHex(Byte[] data);
    private static Byte[] GetHash(string data);
    [ExtensionAttribute]
private static Byte[] GetHash(Byte[] data);
}
[ExtensionAttribute]
internal static class Elasticsearch.Net.Aws.StringUtil : object {
    [ExtensionAttribute]
public static string Trimall(string value);
    private static void ReadQuotedString(StringBuilder output, StringReader reader);
    private static void ReadWhitespace(StringBuilder output, StringReader reader);
}
