internal class Elmah.Mvc.AuthorizeAttribute : AuthorizeAttribute {
    private String[] allowedRoles;
    private String[] allowedUsers;
    private bool isHandlerDisabled;
    private bool requiresAuthentication;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    protected virtual bool AuthorizeCore(HttpContextBase httpContext);
    private bool UserIsAllowed(HttpContextBase httpContext);
    private bool UserIsAllowedByRole(HttpContextBase httpContext);
    private bool UserIsAllowedByName(HttpContextBase httpContext);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(string r);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(string r);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(string r);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__3(string r);
}
public class Elmah.Mvc.Bootstrap : object {
    public static void Initialize();
}
[AuthorizeAttribute]
public class Elmah.Mvc.ElmahController : Controller {
    public ActionResult Index(string resource);
    public ActionResult Detail(string resource);
}
internal class Elmah.Mvc.ElmahResult : ActionResult {
    public virtual void ExecuteResult(ControllerContext context);
}
internal class Elmah.Mvc.HandleErrorAttribute : HandleErrorAttribute {
    private static ErrorFilterConfiguration config;
    public virtual void OnException(ExceptionContext context);
    private static bool RaiseErrorSignal(Exception e, HttpContext context);
    private static bool IsFiltered(Exception e, HttpContext context);
    private static void LogException(Exception e, HttpContext context);
}
internal class Elmah.Mvc.Settings : object {
    public static string AllowedRoles { get; }
    public static string AllowedUsers { get; }
    public static string Route { get; }
    public static bool DisableHandleErrorFilter { get; }
    public static bool DisableHandler { get; }
    public static bool RequiresAuthentication { get; }
    public static bool IgnoreDefaultRoute { get; }
    public static bool UserAuthCaseSensitive { get; }
    public static string get_AllowedRoles();
    public static string get_AllowedUsers();
    public static string get_Route();
    public static bool get_DisableHandleErrorFilter();
    public static bool get_DisableHandler();
    public static bool get_RequiresAuthentication();
    public static bool get_IgnoreDefaultRoute();
    public static bool get_UserAuthCaseSensitive();
    private static bool GetBoolValue(string key, bool defaultValue);
}
