internal static class Elmah.Apm : object {
    public static AsyncResult`1<T> BeginSync(AsyncCallback asyncCallback, object asyncState, object owner, string operationId, Func`1<T> syncFunc);
    public static AsyncResult Begin(Func`2<Func`1<AsyncCallback>, IEnumerable`1<IAsyncResult>> starter, AsyncCallback asyncCallback, object state, object owner, string operationId);
}
public class Elmah.ApplicationException : Exception {
    public ApplicationException(string message);
    public ApplicationException(string message, Exception innerException);
    protected ApplicationException(SerializationInfo info, StreamingContext context);
}
internal class Elmah.AsyncResult : object {
    private AsyncCallback _asyncCallback;
    private object _asyncState;
    private static int StatePending;
    private static int StateCompletedSynchronously;
    private static int StateCompletedAsynchronously;
    private int _completedState;
    private ManualResetEvent _waitHandle;
    private Exception _exception;
    private object _owner;
    private string _operationId;
    public object AsyncState { get; }
    public bool CompletedSynchronously { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool IsCompleted { get; }
    protected internal AsyncResult(AsyncCallback asyncCallback, object state, object owner, string operationId);
    internal virtual void Process();
    public bool Complete();
    public bool Complete(Exception exception);
    public bool Complete(Exception exception, bool completedSynchronously);
    private void CheckUsage(object owner, string operationId);
    public static void End(IAsyncResult result, object owner, string operationId);
    public sealed virtual object get_AsyncState();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_IsCompleted();
    protected virtual void Completing(Exception exception, bool completedSynchronously);
    protected virtual void MakeCallback(AsyncCallback callback, AsyncResult result);
    protected virtual void Completed(Exception exception, bool completedSynchronously);
}
internal class Elmah.AsyncResult`1 : AsyncResult {
    private T _result;
    public AsyncResult`1(AsyncCallback asyncCallback, object state, object owner, string operationId);
    public void SetResult(T result);
    public static T End(IAsyncResult result, object owner, string operationId);
}
internal static class Elmah.Build : object {
    public static bool IsDebug;
    public static bool IsRelease;
    public static string Type;
    public static string TypeUppercase;
    public static string TypeLowercase;
    public static string Framework;
    public static string Configuration;
    public static string Status;
    public static string ImageRuntimeVersion { get; }
    public static string get_ImageRuntimeVersion();
}
[AttributeUsageAttribute("2048")]
public class Elmah.CallerFilePathAttribute : Attribute {
}
public class Elmah.CallerInfo : object {
    public static CallerInfo Empty;
    private string _memberName;
    private string _filePath;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string MemberName { get; }
    public string FilePath { get; }
    public int LineNumber { get; private set; }
    public bool IsEmpty { get; }
    public CallerInfo(string memberName, string filePath, int lineNumber);
    private static CallerInfo();
    public string get_MemberName();
    public string get_FilePath();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    public bool get_IsEmpty();
    public virtual string ToString();
}
[AttributeUsageAttribute("2048")]
public class Elmah.CallerLineNumberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class Elmah.CallerMemberNameAttribute : Attribute {
}
internal static class Elmah.Configuration : object {
    internal static string GroupName;
    internal static string GroupSlash;
    public static object GetSubsection(string name);
    public static object GetSection(string name);
}
internal static class Elmah.Debug : object {
    [ConditionalAttribute("DEBUG")]
[DebuggerStepThroughAttribute]
[AssertionMethodAttribute]
public static void Assert(bool condition);
    [ConditionalAttribute("DEBUG")]
[DebuggerStepThroughAttribute]
public static void AssertStringNotEmpty(string s);
}
internal class Elmah.DelegatingDisposable : object {
    private Action _disposer;
    public DelegatingDisposable(Action disposer);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Elmah.DictionaryExtensions : object {
    [ExtensionAttribute]
public static T Find(IDictionary dict, object key, T default);
}
public class Elmah.Error : object {
    private Exception _exception;
    private string _applicationName;
    private string _hostName;
    private string _typeName;
    private string _source;
    private string _message;
    private string _detail;
    private string _user;
    private DateTime _time;
    private int _statusCode;
    private string _webHostHtmlMessage;
    private NameValueCollection _serverVariables;
    private NameValueCollection _queryString;
    private NameValueCollection _form;
    private NameValueCollection _cookies;
    public Exception Exception { get; }
    public string ApplicationName { get; public set; }
    public string HostName { get; public set; }
    public string Type { get; public set; }
    public string Source { get; public set; }
    public string Message { get; public set; }
    public string Detail { get; public set; }
    public string User { get; public set; }
    public DateTime Time { get; public set; }
    public int StatusCode { get; public set; }
    public string WebHostHtmlMessage { get; public set; }
    public NameValueCollection ServerVariables { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Form { get; }
    public NameValueCollection Cookies { get; }
    public Error(Exception e);
    public Error(Exception e, HttpContextBase context);
    private static string TryGetHtmlErrorMessage(HttpException e);
    public Exception get_Exception();
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Source();
    public void set_Source(string value);
    public string get_Message();
    public void set_Message(string value);
    public string get_Detail();
    public void set_Detail(string value);
    public string get_User();
    public void set_User(string value);
    public DateTime get_Time();
    public void set_Time(DateTime value);
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_WebHostHtmlMessage();
    public void set_WebHostHtmlMessage(string value);
    public NameValueCollection get_ServerVariables();
    public NameValueCollection get_QueryString();
    public NameValueCollection get_Form();
    public NameValueCollection get_Cookies();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
    private static NameValueCollection CopyCollection(NameValueCollection collection);
    private static NameValueCollection CopyCollection(HttpCookieCollection cookies);
    private static NameValueCollection FaultIn(NameValueCollection& collection);
}
public static class Elmah.ErrorJson : object {
    public static string EncodeString(Error error);
    public static void Encode(Error error, TextWriter writer);
    private static void EncodeEnclosed(Error error, JsonTextWriter writer);
    public static void EncodeMembers(Error error, JsonTextWriter writer);
    private static void Member(JsonTextWriter writer, string name, int value, int defaultValue);
    private static void Member(JsonTextWriter writer, string name, DateTime value, DateTime defaultValue);
    private static void Member(JsonTextWriter writer, string name, string value);
    private static void Member(JsonTextWriter writer, string name, NameValueCollection collection);
}
public abstract class Elmah.ErrorLog : object {
    private string _appName;
    private bool _appNameInitialized;
    private static object _contextKey;
    public string Name { get; }
    public string ApplicationName { get; public set; }
    private static ErrorLog();
    public abstract virtual string Log(Error error);
    public virtual IAsyncResult BeginLog(Error error, AsyncCallback asyncCallback, object asyncState);
    public virtual string EndLog(IAsyncResult asyncResult);
    public abstract virtual ErrorLogEntry GetError(string id);
    public virtual IAsyncResult BeginGetError(string id, AsyncCallback asyncCallback, object asyncState);
    public virtual ErrorLogEntry EndGetError(IAsyncResult asyncResult);
    public abstract virtual int GetErrors(int pageIndex, int pageSize, ICollection`1<ErrorLogEntry> errorEntryList);
    public virtual IAsyncResult BeginGetErrors(int pageIndex, int pageSize, ICollection`1<ErrorLogEntry> errorEntryList, AsyncCallback asyncCallback, object asyncState);
    public virtual int EndGetErrors(IAsyncResult asyncResult);
    public virtual string get_Name();
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public static ErrorLog GetDefault(HttpContextBase context);
    internal static ErrorLog GetDefaultImpl(HttpContextBase context);
    private static string InferApplicationName(HttpContextBase context);
}
public class Elmah.ErrorLogEntry : object {
    private string _id;
    private ErrorLog _log;
    private Error _error;
    public ErrorLog Log { get; }
    public string Id { get; }
    public Error Error { get; }
    public ErrorLogEntry(ErrorLog log, string id, Error error);
    public ErrorLog get_Log();
    public string get_Id();
    public Error get_Error();
}
public static class Elmah.ErrorXml : object {
    public static Error DecodeString(string xml);
    public static Error Decode(XmlReader reader);
    private static void ReadXmlAttributes(XmlReader reader, Error error);
    private static void ReadInnerXml(XmlReader reader, Error error);
    public static string EncodeString(Error error);
    public static void Encode(Error error, XmlWriter writer);
    private static void WriteXmlAttributes(Error error, XmlWriter writer);
    private static void WriteInnerXml(Error error, XmlWriter writer);
    private static void WriteCollection(XmlWriter writer, string name, NameValueCollection collection);
    private static void WriteXmlAttribute(XmlWriter writer, string name, string value);
    private static void Encode(NameValueCollection collection, XmlWriter writer);
    private static void UpcodeTo(XmlReader reader, NameValueCollection collection);
}
[ExtensionAttribute]
public static class Elmah.ExceptionExtensions : object {
    private static string CallerInfoKey;
    [ExtensionAttribute]
public static CallerInfo TrySetCallerInfo(Exception exception, CallerInfo info);
    [ExtensionAttribute]
public static IDisposable TryScopeCallerInfo(Exception exception, CallerInfo info);
    [ExtensionAttribute]
public static CallerInfo TryGetCallerInfo(Exception exception);
    [ExtensionAttribute]
public static CallerInfo TryPopCallerInfo(Exception exception);
    [ExtensionAttribute]
public static void TryClearCallerInfo(Exception exception);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<object, object>> EnumerateDataWithoutCallerInfo(Exception exception);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<object, object>> EnumerateData(Exception exception);
    [ExtensionAttribute]
private static bool IsWritableData(Exception exception);
    [ExtensionAttribute]
private static bool IsData(Exception exception, bool writable);
}
[ExtensionAttribute]
internal static class Elmah.HttpRequestValidation : object {
    [ExtensionAttribute]
internal static T TryGetUnvalidatedCollections(HttpRequestBase request, Func`4<NameValueCollection, NameValueCollection, HttpCookieCollection, T> resultor);
}
public class Elmah.JsonTextWriter : object {
    private TextWriter _writer;
    private Int32[] _counters;
    private Char[] _terminators;
    private string _memberName;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    private static DateTime Epoch;
    public int Depth { get; private set; }
    private int ItemCount { get; private set; }
    private char Terminator { get; private set; }
    public JsonTextWriter(TextWriter writer);
    private static JsonTextWriter();
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
private void set_Depth(int value);
    private int get_ItemCount();
    private void set_ItemCount(int value);
    private char get_Terminator();
    private void set_Terminator(char value);
    public JsonTextWriter Object();
    public JsonTextWriter EndObject();
    public JsonTextWriter Array();
    public JsonTextWriter EndArray();
    public JsonTextWriter Pop();
    public JsonTextWriter Member(string name);
    private JsonTextWriter Write(string text);
    private JsonTextWriter WriteEnquoted(string text);
    private JsonTextWriter WriteImpl(string text, bool raw);
    public JsonTextWriter Number(int value);
    public JsonTextWriter String(string str);
    public JsonTextWriter Null();
    public JsonTextWriter Boolean(bool value);
    public JsonTextWriter Number(DateTime time);
    public JsonTextWriter String(DateTime time);
    private JsonTextWriter StartStructured(string start, string end);
    private JsonTextWriter EndStructured();
    private static void Enquote(string s, TextWriter writer);
}
internal static class Elmah.KeyValuePair : object {
    public static KeyValuePair`2<TKey, TValue> Create(TKey key, TValue value);
}
public static class Elmah.ManifestResourceHelper : object {
    public static void WriteResourceToStream(Stream outputStream, Type type, string resourceName);
}
internal static class Elmah.Mask : object {
    public static string EmptyString(string s, string filler);
}
public class Elmah.MemoryErrorLog : ErrorLog {
    private static EntryCollection _entries;
    private static ReaderWriterLockSlim _lock;
    private int _size;
    public static int MaximumSize;
    public static int DefaultSize;
    public string Name { get; }
    public MemoryErrorLog(int size);
    public MemoryErrorLog(IDictionary config);
    private static MemoryErrorLog();
    public virtual string get_Name();
    public virtual string Log(Error error);
    public virtual ErrorLogEntry GetError(string id);
    public virtual int GetErrors(int pageIndex, int pageSize, ICollection`1<ErrorLogEntry> errorEntryList);
    internal void Reset();
}
public class Elmah.Message`2 : object {
    private State<TInput, TOutput> _state;
    private bool TryUpdateState(State<TInput, TOutput> replacement, State<TInput, TOutput> current);
    public IDisposable PushHandler(Func`2<Func`3<object, TInput, TOutput>, Func`3<object, TInput, TOutput>> binder);
    private void RemoveHandler(Func`2<Func`3<object, TInput, TOutput>, Func`3<object, TInput, TOutput>> binder);
    public TOutput Send(TInput input);
    public virtual TOutput Send(object sender, TInput input);
}
[AttributeUsageAttribute("5")]
public class Elmah.SccAttribute : Attribute {
    private string _id;
    public string Id { get; public set; }
    public SccAttribute(string id);
    public string get_Id();
    public void set_Id(string value);
    public virtual string ToString();
}
public class Elmah.SccStamp : object {
    private string _id;
    private string _author;
    private string _fileName;
    private int _revision;
    private DateTime _lastChanged;
    private static Regex _regex;
    public string Id { get; }
    public string Author { get; }
    public string FileName { get; }
    public int Revision { get; }
    public DateTime LastChanged { get; }
    public DateTime LastChangedUtc { get; }
    private static SccStamp();
    public SccStamp(string id);
    public string get_Id();
    public string get_Author();
    public string get_FileName();
    public int get_Revision();
    public DateTime get_LastChanged();
    public DateTime get_LastChangedUtc();
    public virtual string ToString();
    public static SccStamp[] FindAll(Assembly assembly);
    public static SccStamp FindLatest(Assembly assembly);
    public static SccStamp FindLatest(SccStamp[] stamps);
    public static void SortByRevision(SccStamp[] stamps);
    public static void SortByRevision(SccStamp[] stamps, bool descending);
}
public static class Elmah.ServiceCenter : object {
    public static ServiceProviderQueryHandler Default;
    private static ServiceProviderQueryHandler _current;
    public static ServiceProviderQueryHandler Current { get; public set; }
    private static ServiceCenter();
    private static IServiceProvider CreateServiceContainer(object context);
    public static ServiceProviderQueryHandler get_Current();
    public static void set_Current(ServiceProviderQueryHandler value);
    public static object FindService(object context, Type serviceType);
    public static object GetService(object context, Type serviceType);
    public static IServiceProvider GetServiceProvider(object context);
}
internal class Elmah.ServiceContainer : object {
    private HttpContextBase _context;
    public ServiceContainer(object context);
    public sealed virtual object GetService(Type serviceType);
}
public class Elmah.ServiceProviderQueryHandler : MulticastDelegate {
    public ServiceProviderQueryHandler(object object, IntPtr method);
    public virtual IServiceProvider Invoke(object context);
    public virtual IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object);
    public virtual IServiceProvider EndInvoke(IAsyncResult result);
}
internal static class Elmah.SimpleServiceProviderFactory : object {
    public static object CreateFromConfigSection(string sectionName);
}
public static class Elmah.TypeResolution : object {
    private static Message`2<TypeResolutionArgs, Type> _message;
    private static TypeResolution();
    public static IDisposable PushHandler(Func`2<Func`3<object, TypeResolutionArgs, Type>, Func`3<object, TypeResolutionArgs, Type>> binder);
    public static Type FindType(string typeName);
    public static Type FindType(string typeName, bool ignoreCase);
    public static Type GetType(string typeName);
    public static Type GetType(string typeName, bool ignoreCase);
    private static Type Send(TypeResolutionArgs args);
}
public class Elmah.TypeResolutionArgs : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    public string TypeName { get; private set; }
    public bool ThrowOnError { get; private set; }
    public bool IgnoreCase { get; private set; }
    public TypeResolutionArgs(string typeName, bool throwOnError, bool ignoreCase);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnError();
    [CompilerGeneratedAttribute]
private void set_ThrowOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
private void set_IgnoreCase(bool value);
}
public class Elmah.XmlFileErrorLog : ErrorLog {
    private string _logPath;
    public string LogPath { get; }
    public string Name { get; }
    public XmlFileErrorLog(IDictionary config);
    public XmlFileErrorLog(string logPath);
    private static string MapPath(string path);
    public virtual string get_LogPath();
    public virtual string get_Name();
    public virtual string Log(Error error);
    public virtual int GetErrors(int pageIndex, int pageSize, ICollection`1<ErrorLogEntry> errorEntryList);
    private ErrorLogEntry LoadErrorLogEntry(string path);
    public virtual ErrorLogEntry GetError(string id);
    private static bool IsUserFile(FileAttributes attributes);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    private AssertionConditionType myConditionType;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Mannex.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static TValue Find(IDictionary`2<TKey, TValue> dict, TKey key);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static TValue Find(IDictionary`2<TKey, TValue> dict, TKey key, TValue default);
}
[ExtensionAttribute]
internal static class Mannex.ICloneableExtensions : object {
    [ExtensionAttribute]
public static T CloneObject(T source);
}
[ExtensionAttribute]
internal static class Mannex.Int32Extensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string ToInvariantString(int value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static T DivRem(int dividend, int divisor, Func`3<int, int, T> resultFunc);
}
