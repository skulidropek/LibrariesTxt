[AttributeUsageAttribute("2048")]
internal class EnsureThat.Annotations.ValidatedNotNullAttribute : Attribute {
}
public class EnsureThat.CustomExceptionFactory : MulticastDelegate {
    public CustomExceptionFactory(object object, IntPtr method);
    public virtual Exception Invoke(string message, string paramName);
    public virtual IAsyncResult BeginInvoke(string message, string paramName, AsyncCallback callback, object object);
    public virtual Exception EndInvoke(IAsyncResult result);
}
public class EnsureThat.Enforcers.AnyArg : object {
    [ContractAnnotationAttribute("value:null => halt")]
public T HasValue(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T IsNotNull(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public Nullable`1<T> IsNotNull(Nullable`1<T> value, string paramName, OptsFn optsFn);
    public T IsNotDefault(T value, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.BoolArg : object {
    [ContractAnnotationAttribute("value:false=>halt; value:true=>true")]
public bool IsTrue(bool value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:true=>halt; value:false=>false")]
public bool IsFalse(bool value, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.CollectionArg : object {
    [ContractAnnotationAttribute("value:null => halt")]
public T HasItems(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public ICollection`1<T> HasItems(ICollection`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IReadOnlyCollection`1<T> HasItems(IReadOnlyCollection`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IReadOnlyList`1<T> HasItems(IReadOnlyList`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public ISet`1<T> HasItems(ISet`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T[] HasItems(T[] value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IList`1<T> HasItems(IList`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IDictionary`2<TKey, TValue> HasItems(IDictionary`2<TKey, TValue> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public Collection`1<T> HasItems(Collection`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public List`1<T> HasItems(List`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public HashSet`1<T> HasItems(HashSet`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public Dictionary`2<TKey, TValue> HasItems(Dictionary`2<TKey, TValue> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T[] SizeIs(T[] value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T[] SizeIs(T[] value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T SizeIs(T value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T SizeIs(T value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public ICollection`1<T> SizeIs(ICollection`1<T> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public ICollection`1<T> SizeIs(ICollection`1<T> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IList`1<T> SizeIs(IList`1<T> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IList`1<T> SizeIs(IList`1<T> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IDictionary`2<TKey, TValue> SizeIs(IDictionary`2<TKey, TValue> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IDictionary`2<TKey, TValue> SizeIs(IDictionary`2<TKey, TValue> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IDictionary`2<TKey, TValue> ContainsKey(IDictionary`2<TKey, TValue> value, TKey expectedKey, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IList`1<T> HasAny(IList`1<T> value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public ICollection`1<T> HasAny(ICollection`1<T> value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public T[] HasAny(T[] value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.ComparableArg : object {
    public T Is(T value, T expected, string paramName, OptsFn optsFn);
    public T Is(T value, T expected, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsNot(T value, T expected, string paramName, OptsFn optsFn);
    public T IsNot(T value, T expected, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsLt(T value, T limit, string paramName, OptsFn optsFn);
    public T IsLt(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsLte(T value, T limit, string paramName, OptsFn optsFn);
    public T IsLte(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsGt(T value, T limit, string paramName, OptsFn optsFn);
    public T IsGt(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsGte(T value, T limit, string paramName, OptsFn optsFn);
    public T IsGte(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public T IsInRange(T value, T min, T max, string paramName, OptsFn optsFn);
    public T IsInRange(T value, T min, T max, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    private static bool ValueIsLt(T x, T y);
    private static bool ValueIsEq(T x, T y);
    private static bool ValueIsGt(T x, T y);
    private static bool ValueIsLt(T x, T y, IComparer`1<T> c);
    private static bool ValueIsEq(T x, T y, IComparer`1<T> c);
    private static bool ValueIsGt(T x, T y, IComparer`1<T> c);
    public DateTime Is(DateTime value, DateTime expected, string paramName, OptsFn optsFn);
    public DateTime IsNot(DateTime value, DateTime expected, string paramName, OptsFn optsFn);
    public DateTime IsLt(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public DateTime IsLte(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public DateTime IsGt(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public DateTime IsGte(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public DateTime IsInRange(DateTime value, DateTime min, DateTime max, string paramName, OptsFn optsFn);
    public decimal Is(decimal value, decimal expected, string paramName, OptsFn optsFn);
    public decimal IsNot(decimal value, decimal expected, string paramName, OptsFn optsFn);
    public decimal IsLt(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public decimal IsLte(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public decimal IsGt(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public decimal IsGte(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public decimal IsInRange(decimal value, decimal min, decimal max, string paramName, OptsFn optsFn);
    public double Is(double value, double expected, string paramName, OptsFn optsFn);
    public double IsNot(double value, double expected, string paramName, OptsFn optsFn);
    public double IsLt(double value, double limit, string paramName, OptsFn optsFn);
    public double IsLte(double value, double limit, string paramName, OptsFn optsFn);
    public double IsGt(double value, double limit, string paramName, OptsFn optsFn);
    public double IsGte(double value, double limit, string paramName, OptsFn optsFn);
    public double IsInRange(double value, double min, double max, string paramName, OptsFn optsFn);
    public int Is(int value, int expected, string paramName, OptsFn optsFn);
    public int IsNot(int value, int expected, string paramName, OptsFn optsFn);
    public int IsLt(int value, int limit, string paramName, OptsFn optsFn);
    public int IsLte(int value, int limit, string paramName, OptsFn optsFn);
    public int IsGt(int value, int limit, string paramName, OptsFn optsFn);
    public int IsGte(int value, int limit, string paramName, OptsFn optsFn);
    public int IsInRange(int value, int min, int max, string paramName, OptsFn optsFn);
    public long Is(long value, long expected, string paramName, OptsFn optsFn);
    public long IsNot(long value, long expected, string paramName, OptsFn optsFn);
    public long IsLt(long value, long limit, string paramName, OptsFn optsFn);
    public long IsLte(long value, long limit, string paramName, OptsFn optsFn);
    public long IsGt(long value, long limit, string paramName, OptsFn optsFn);
    public long IsGte(long value, long limit, string paramName, OptsFn optsFn);
    public long IsInRange(long value, long min, long max, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.EnumArg : object {
    public T IsDefined(T value, string paramName, OptsFn optsFn);
    public T IsDefinedWithFlagsSupport(T value, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.EnumerableArg : object {
    [ContractAnnotationAttribute("value:null => halt")]
public IEnumerable`1<T> HasItems(IEnumerable`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IEnumerable`1<T> SizeIs(IEnumerable`1<T> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IEnumerable`1<T> SizeIs(IEnumerable`1<T> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public IEnumerable`1<T> HasAny(IEnumerable`1<T> value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.GuidArg : object {
    public Guid IsNotEmpty(Guid value, string paramName, OptsFn optsFn);
}
public class EnsureThat.Enforcers.StringArg : object {
    [ContractAnnotationAttribute("value:null => halt")]
public string IsNotNull(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string IsNotNullOrWhiteSpace(string value, string paramName, OptsFn optsFn);
    public string IsNotNullOrEmpty(string value, string paramName, OptsFn optsFn);
    public string IsNotEmptyOrWhiteSpace(string value, string paramName, OptsFn optsFn);
    public string IsNotEmpty(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string HasLength(string value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string HasLengthBetween(string value, int minLength, int maxLength, string paramName, OptsFn optsFn);
    public string Matches(string value, string match, string paramName, OptsFn optsFn);
    public string Matches(string value, Regex match, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
[ObsoleteAttribute("Use 'HasLength' instead. This will be removed in an upcoming version.")]
public string SizeIs(string value, int expected, string paramName, OptsFn optsFn);
    public string Is(string value, string expected, string paramName, OptsFn optsFn);
    public string IsEqualTo(string value, string expected, string paramName, OptsFn optsFn);
    public string Is(string value, string expected, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsEqualTo(string value, string expected, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsNot(string value, string notExpected, string paramName, OptsFn optsFn);
    public string IsNotEqualTo(string value, string notExpected, string paramName, OptsFn optsFn);
    public string IsNot(string value, string notExpected, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsNotEqualTo(string value, string notExpected, StringComparison comparison, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public Guid IsGuid(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string StartsWith(string value, string expectedStartsWith, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string StartsWith(string value, string expectedStartsWith, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsLt(string value, string limit, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsLte(string value, string limit, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsGt(string value, string limit, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsGte(string value, string limit, StringComparison comparison, string paramName, OptsFn optsFn);
    public string IsInRange(string value, string min, string max, StringComparison comparison, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public string IsAllLettersOrDigits(string value, string paramName, OptsFn optsFn);
    private static bool StringEquals(string x, string y);
    private static bool StringEquals(string x, string y, StringComparison comparison);
    private static bool StringIsLt(string x, string y, StringComparison c);
    private static bool StringIsGt(string x, string y, StringComparison c);
}
public class EnsureThat.Enforcers.TypeArg : object {
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsInt(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsInt(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsShort(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsShort(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsDecimal(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsDecimal(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsDouble(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsDouble(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsFloat(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsFloat(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsBool(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsBool(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsDateTime(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsDateTime(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsString(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public object IsString(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public T IsOfType(T param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsOfType(Type param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public T IsNotOfType(T param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsNotOfType(Type param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public T IsAssignableToType(T param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsAssignableToType(Type param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public T IsNotAssignableToType(T param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsNotAssignableToType(Type param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public T IsClass(T param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public Type IsClass(Type param, string paramName, OptsFn optsFn);
}
public static class EnsureThat.Ensure : object {
    [CompilerGeneratedAttribute]
private static IExceptionFactory <ExceptionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static AnyArg <Any>k__BackingField;
    [CompilerGeneratedAttribute]
private static BoolArg <Bool>k__BackingField;
    [CompilerGeneratedAttribute]
private static EnumArg <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private static EnumerableArg <Enumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static CollectionArg <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private static ComparableArg <Comparable>k__BackingField;
    [CompilerGeneratedAttribute]
private static GuidArg <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private static StringArg <String>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypeArg <Type>k__BackingField;
    public static IExceptionFactory ExceptionFactory { get; public set; }
    public static AnyArg Any { get; }
    public static BoolArg Bool { get; }
    public static EnumArg Enum { get; }
    public static EnumerableArg Enumerable { get; }
    public static CollectionArg Collection { get; }
    public static ComparableArg Comparable { get; }
    public static GuidArg Guid { get; }
    public static StringArg String { get; }
    public static TypeArg Type { get; }
    private static Ensure();
    [CompilerGeneratedAttribute]
public static IExceptionFactory get_ExceptionFactory();
    [CompilerGeneratedAttribute]
public static void set_ExceptionFactory(IExceptionFactory value);
    [CompilerGeneratedAttribute]
public static AnyArg get_Any();
    [CompilerGeneratedAttribute]
public static BoolArg get_Bool();
    [CompilerGeneratedAttribute]
public static EnumArg get_Enum();
    [CompilerGeneratedAttribute]
public static EnumerableArg get_Enumerable();
    [CompilerGeneratedAttribute]
public static CollectionArg get_Collection();
    [CompilerGeneratedAttribute]
public static ComparableArg get_Comparable();
    [CompilerGeneratedAttribute]
public static GuidArg get_Guid();
    [CompilerGeneratedAttribute]
public static StringArg get_String();
    [CompilerGeneratedAttribute]
public static TypeArg get_Type();
    public static Param`1<T> That(T value, string name, OptsFn optsFn);
    public static StringParam That(string value, string name, OptsFn optsFn);
    public static TypeParam ThatTypeFor(T value, string name, OptsFn optsFn);
    public static TypeParam ThatType(Type value, string name, OptsFn optsFn);
}
public static class EnsureThat.EnsureArg : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T HasValue(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T IsNotNull(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T HasItems(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static ICollection`1<T> HasItems(ICollection`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyCollection`1<T> HasItems(IReadOnlyCollection`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> HasItems(IReadOnlyList`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static ISet`1<T> HasItems(ISet`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T[] HasItems(T[] value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IList`1<T> HasItems(IList`1<T> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IDictionary`2<TKey, TValue> HasItems(IDictionary`2<TKey, TValue> value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T[] SizeIs(T[] value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T[] SizeIs(T[] value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T SizeIs(T value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T SizeIs(T value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static ICollection`1<T> SizeIs(ICollection`1<T> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static ICollection`1<T> SizeIs(ICollection`1<T> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IList`1<T> SizeIs(IList`1<T> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IList`1<T> SizeIs(IList`1<T> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IDictionary`2<TKey, TValue> SizeIs(IDictionary`2<TKey, TValue> value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IDictionary`2<TKey, TValue> SizeIs(IDictionary`2<TKey, TValue> value, long expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IDictionary`2<TKey, TValue> ContainsKey(IDictionary`2<TKey, TValue> value, TKey expectedKey, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static IList`1<T> HasAny(IList`1<T> value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static ICollection`1<T> HasAny(ICollection`1<T> value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static T[] HasAny(T[] value, Func`2<T, bool> predicate, string paramName, OptsFn optsFn);
    public static T Is(T value, T expected, string paramName, OptsFn optsFn);
    public static T Is(T value, T expected, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsNot(T value, T expected, string paramName, OptsFn optsFn);
    public static T IsNot(T value, T expected, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsLt(T value, T limit, string paramName, OptsFn optsFn);
    public static T IsLt(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsLte(T value, T limit, string paramName, OptsFn optsFn);
    public static T IsLte(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsGt(T value, T limit, string paramName, OptsFn optsFn);
    public static T IsGt(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsGte(T value, T limit, string paramName, OptsFn optsFn);
    public static T IsGte(T value, T limit, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static T IsInRange(T value, T min, T max, string paramName, OptsFn optsFn);
    public static T IsInRange(T value, T min, T max, IComparer`1<T> comparer, string paramName, OptsFn optsFn);
    public static DateTime Is(DateTime value, DateTime expected, string paramName, OptsFn optsFn);
    public static DateTime IsNot(DateTime value, DateTime expected, string paramName, OptsFn optsFn);
    public static DateTime IsLt(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public static DateTime IsLte(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public static DateTime IsGt(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public static DateTime IsGte(DateTime value, DateTime limit, string paramName, OptsFn optsFn);
    public static DateTime IsInRange(DateTime value, DateTime min, DateTime max, string paramName, OptsFn optsFn);
    public static decimal Is(decimal value, decimal expected, string paramName, OptsFn optsFn);
    public static decimal IsNot(decimal value, decimal expected, string paramName, OptsFn optsFn);
    public static decimal IsLt(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public static decimal IsLte(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public static decimal IsGt(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public static decimal IsGte(decimal value, decimal limit, string paramName, OptsFn optsFn);
    public static decimal IsInRange(decimal value, decimal min, decimal max, string paramName, OptsFn optsFn);
    public static double Is(double value, double expected, string paramName, OptsFn optsFn);
    public static double IsNot(double value, double expected, string paramName, OptsFn optsFn);
    public static double IsLt(double value, double limit, string paramName, OptsFn optsFn);
    public static double IsLte(double value, double limit, string paramName, OptsFn optsFn);
    public static double IsGt(double value, double limit, string paramName, OptsFn optsFn);
    public static double IsGte(double value, double limit, string paramName, OptsFn optsFn);
    public static double IsInRange(double value, double min, double max, string paramName, OptsFn optsFn);
    public static int Is(int value, int expected, string paramName, OptsFn optsFn);
    public static int IsNot(int value, int expected, string paramName, OptsFn optsFn);
    public static int IsLt(int value, int limit, string paramName, OptsFn optsFn);
    public static int IsLte(int value, int limit, string paramName, OptsFn optsFn);
    public static int IsGt(int value, int limit, string paramName, OptsFn optsFn);
    public static int IsGte(int value, int limit, string paramName, OptsFn optsFn);
    public static int IsInRange(int value, int min, int max, string paramName, OptsFn optsFn);
    public static long Is(long value, long expected, string paramName, OptsFn optsFn);
    public static long IsNot(long value, long expected, string paramName, OptsFn optsFn);
    public static long IsLt(long value, long limit, string paramName, OptsFn optsFn);
    public static long IsLte(long value, long limit, string paramName, OptsFn optsFn);
    public static long IsGt(long value, long limit, string paramName, OptsFn optsFn);
    public static long IsGte(long value, long limit, string paramName, OptsFn optsFn);
    public static long IsInRange(long value, long min, long max, string paramName, OptsFn optsFn);
    public static T EnumIsDefined(T value, string paramName, OptsFn optsFn);
    public static T EnumIsDefinedWithFlagsSupport(T value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string IsNotNull(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string IsNotNullOrWhiteSpace(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string IsNotNullOrEmpty(string value, string paramName, OptsFn optsFn);
    public static string IsNotEmptyOrWhiteSpace(string value, string paramName, OptsFn optsFn);
    public static string IsNotEmpty(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string HasLength(string value, int expected, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string HasLengthBetween(string value, int minLength, int maxLength, string paramName, OptsFn optsFn);
    public static string Matches(string value, string match, string paramName, OptsFn optsFn);
    public static string Matches(string value, Regex match, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
[ObsoleteAttribute("Use 'HasLength' instead. This will be removed in an upcoming version.")]
public static string SizeIs(string value, int expected, string paramName, OptsFn optsFn);
    public static string Is(string value, string expected, string paramName, OptsFn optsFn);
    public static string IsEqualTo(string value, string expected, string paramName, OptsFn optsFn);
    public static string Is(string value, string expected, StringComparison comparison, string paramName, OptsFn optsFn);
    public static string IsEqualTo(string value, string expected, StringComparison comparison, string paramName, OptsFn optsFn);
    public static string IsNot(string value, string notExpected, string paramName, OptsFn optsFn);
    public static string IsNotEqualTo(string value, string notExpected, string paramName, OptsFn optsFn);
    public static string IsNot(string value, string notExpected, StringComparison comparison, string paramName, OptsFn optsFn);
    public static string IsNotEqualTo(string value, string notExpected, StringComparison comparison, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static Guid IsGuid(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string StartsWith(string value, string expectedStartsWith, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string StartsWith(string value, string expectedStartsWith, StringComparison comparisonType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("value:null => halt")]
public static string IsAllLettersOrDigits(string value, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsInt(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsInt(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsShort(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsShort(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsDecimal(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsDecimal(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsDouble(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsDouble(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsFloat(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsFloat(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsBool(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsBool(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsDateTime(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsDateTime(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsString(Type param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsString(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsOfType(object param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsOfType(Type param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsNotOfType(object param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsNotOfType(Type param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsAssignableToType(object param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsAssignableToType(Type param, Type expectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsNotAssignableToType(object param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsNotAssignableToType(Type param, Type nonExpectedType, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static object IsClass(object param, string paramName, OptsFn optsFn);
    [ContractAnnotationAttribute("param:null => halt")]
public static Type IsClass(Type param, string paramName, OptsFn optsFn);
    public static bool IsTrue(bool value, string paramName, OptsFn optsFn);
    public static bool IsFalse(bool value, string paramName, OptsFn optsFn);
    public static T IsNotDefault(T value, string paramName, OptsFn optsFn);
    public static Nullable`1<T> IsNotNull(Nullable`1<T> value, string paramName, OptsFn optsFn);
    public static Guid IsNotEmpty(Guid value, string paramName, OptsFn optsFn);
}
[IsReadOnlyAttribute]
public class EnsureThat.EnsureOptions : ValueType {
    public static EnsureOptions Default;
    [CompilerGeneratedAttribute]
private CustomExceptionFactory <CustomExceptionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <CustomException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomMessage>k__BackingField;
    public CustomExceptionFactory CustomExceptionFactory { get; }
    public Exception CustomException { get; }
    public string CustomMessage { get; }
    private EnsureOptions(CustomExceptionFactory customExceptionFactory, Exception customException, string customMessage);
    private static EnsureOptions();
    [CompilerGeneratedAttribute]
public CustomExceptionFactory get_CustomExceptionFactory();
    [CompilerGeneratedAttribute]
public Exception get_CustomException();
    [CompilerGeneratedAttribute]
public string get_CustomMessage();
    public EnsureOptions WithExceptionFactory(CustomExceptionFactory factory);
    public EnsureOptions WithException(Exception ex);
    public EnsureOptions WithMessage(string message);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatAnyExtensions : object {
    [ExtensionAttribute]
public static Param`1<T> HasValue(Param`1& param);
    [ExtensionAttribute]
public static Param`1<T> IsNotNull(Param`1& param);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatCollectionExtensions : object {
    [ExtensionAttribute]
public static Param`1<T> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<Collection`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<ICollection`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<T[]> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<List`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<IList`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<HashSet`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<ISet`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<Dictionary`2<TKey, TValue>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<IDictionary`2<TKey, TValue>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<IReadOnlyCollection`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<IReadOnlyList`1<T>> HasItems(Param`1& param);
    [ExtensionAttribute]
public static Param`1<T[]> SizeIs(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<T[]> SizeIs(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<T> SizeIs(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<T> SizeIs(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<ICollection`1<T>> SizeIs(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<ICollection`1<T>> SizeIs(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<IList`1<T>> SizeIs(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<IList`1<T>> SizeIs(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<IDictionary`2<TKey, TValue>> SizeIs(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<IDictionary`2<TKey, TValue>> SizeIs(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<IDictionary`2<TKey, TValue>> ContainsKey(Param`1& param, TKey key);
    [ExtensionAttribute]
public static Param`1<Dictionary`2<TKey, TValue>> ContainsKey(Param`1& param, TKey key);
    [ExtensionAttribute]
public static Param`1<IList`1<T>> HasAny(Param`1& param, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Param`1<List`1<T>> HasAny(Param`1& param, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Param`1<ICollection`1<T>> HasAny(Param`1& param, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Param`1<Collection`1<T>> HasAny(Param`1& param, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Param`1<IDictionary`2<TKey, TValue>> HasAny(Param`1& param, Func`2<KeyValuePair`2<TKey, TValue>, bool> predicate);
    [ExtensionAttribute]
public static Param`1<Dictionary`2<TKey, TValue>> HasAny(Param`1& param, Func`2<KeyValuePair`2<TKey, TValue>, bool> predicate);
    [ExtensionAttribute]
public static Param`1<T[]> HasAny(Param`1& param, Func`2<T, bool> predicate);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableDateTimeExtensions : object {
    [ExtensionAttribute]
public static Param`1<DateTime> Is(Param`1& param, DateTime expected);
    [ExtensionAttribute]
public static Param`1<DateTime> IsNot(Param`1& param, DateTime expected);
    [ExtensionAttribute]
public static Param`1<DateTime> IsLt(Param`1& param, DateTime limit);
    [ExtensionAttribute]
public static Param`1<DateTime> IsLte(Param`1& param, DateTime limit);
    [ExtensionAttribute]
public static Param`1<DateTime> IsGt(Param`1& param, DateTime limit);
    [ExtensionAttribute]
public static Param`1<DateTime> IsGte(Param`1& param, DateTime limit);
    [ExtensionAttribute]
public static Param`1<DateTime> IsInRange(Param`1& param, DateTime min, DateTime max);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableDecimalExtensions : object {
    [ExtensionAttribute]
public static Param`1<decimal> Is(Param`1& param, decimal expected);
    [ExtensionAttribute]
public static Param`1<decimal> IsNot(Param`1& param, decimal expected);
    [ExtensionAttribute]
public static Param`1<decimal> IsLt(Param`1& param, decimal limit);
    [ExtensionAttribute]
public static Param`1<decimal> IsLte(Param`1& param, decimal limit);
    [ExtensionAttribute]
public static Param`1<decimal> IsGt(Param`1& param, decimal limit);
    [ExtensionAttribute]
public static Param`1<decimal> IsGte(Param`1& param, decimal limit);
    [ExtensionAttribute]
public static Param`1<decimal> IsInRange(Param`1& param, decimal min, decimal max);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableDoubleExtensions : object {
    [ExtensionAttribute]
public static Param`1<double> Is(Param`1& param, double expected);
    [ExtensionAttribute]
public static Param`1<double> IsNot(Param`1& param, double expected);
    [ExtensionAttribute]
public static Param`1<double> IsLt(Param`1& param, double limit);
    [ExtensionAttribute]
public static Param`1<double> IsLte(Param`1& param, double limit);
    [ExtensionAttribute]
public static Param`1<double> IsGt(Param`1& param, double limit);
    [ExtensionAttribute]
public static Param`1<double> IsGte(Param`1& param, double limit);
    [ExtensionAttribute]
public static Param`1<double> IsInRange(Param`1& param, double min, double max);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableExtensions : object {
    [ExtensionAttribute]
public static Param`1<T> Is(Param`1& param, T expected);
    [ExtensionAttribute]
public static Param`1<T> Is(Param`1& param, T expected, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsNot(Param`1& param, T expected);
    [ExtensionAttribute]
public static Param`1<T> IsNot(Param`1& param, T expected, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsLt(Param`1& param, T limit);
    [ExtensionAttribute]
public static Param`1<T> IsLt(Param`1& param, T limit, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsLte(Param`1& param, T limit);
    [ExtensionAttribute]
public static Param`1<T> IsLte(Param`1& param, T limit, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsGt(Param`1& param, T limit);
    [ExtensionAttribute]
public static Param`1<T> IsGt(Param`1& param, T limit, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsGte(Param`1& param, T limit);
    [ExtensionAttribute]
public static Param`1<T> IsGte(Param`1& param, T limit, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static Param`1<T> IsInRange(Param`1& param, T min, T max);
    [ExtensionAttribute]
public static Param`1<T> IsInRange(Param`1& param, T min, T max, IComparer`1<T> comparer);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableIntExtensions : object {
    [ExtensionAttribute]
public static Param`1<int> Is(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<int> IsNot(Param`1& param, int expected);
    [ExtensionAttribute]
public static Param`1<int> IsLt(Param`1& param, int limit);
    [ExtensionAttribute]
public static Param`1<int> IsLte(Param`1& param, int limit);
    [ExtensionAttribute]
public static Param`1<int> IsGt(Param`1& param, int limit);
    [ExtensionAttribute]
public static Param`1<int> IsGte(Param`1& param, int limit);
    [ExtensionAttribute]
public static Param`1<int> IsInRange(Param`1& param, int min, int max);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatComparableLongExtensions : object {
    [ExtensionAttribute]
public static Param`1<long> Is(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<long> IsNot(Param`1& param, long expected);
    [ExtensionAttribute]
public static Param`1<long> IsLt(Param`1& param, long limit);
    [ExtensionAttribute]
public static Param`1<long> IsLte(Param`1& param, long limit);
    [ExtensionAttribute]
public static Param`1<long> IsGt(Param`1& param, long limit);
    [ExtensionAttribute]
public static Param`1<long> IsGte(Param`1& param, long limit);
    [ExtensionAttribute]
public static Param`1<long> IsInRange(Param`1& param, long min, long max);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatEnumExtensions : object {
    [ExtensionAttribute]
public static Param`1<T> IsDefined(Param`1& param);
    [ExtensionAttribute]
public static Param`1<T> IsDefinedWithFlagsSupport(Param`1& param);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatStringExtensions : object {
    [ExtensionAttribute]
public static StringParam IsNotNull(StringParam& param);
    [ExtensionAttribute]
public static StringParam IsNotNullOrWhiteSpace(StringParam& param);
    [ExtensionAttribute]
public static StringParam IsNotNullOrEmpty(StringParam& param);
    [ExtensionAttribute]
public static StringParam IsNotEmptyOrWhiteSpace(StringParam& param);
    [ExtensionAttribute]
public static StringParam IsNotEmpty(StringParam& param);
    [ExtensionAttribute]
public static StringParam HasLength(StringParam& param, int expected);
    [ExtensionAttribute]
public static StringParam HasLengthBetween(StringParam& param, int minLength, int maxLength);
    [ExtensionAttribute]
public static StringParam Matches(StringParam& param, string match);
    [ExtensionAttribute]
public static StringParam Matches(StringParam& param, Regex match);
    [ExtensionAttribute]
[ObsoleteAttribute("Use 'HasLength' instead. This will be removed in an upcoming version.")]
public static StringParam SizeIs(StringParam& param, int expected);
    [ExtensionAttribute]
public static StringParam Is(StringParam& param, string expected);
    [ExtensionAttribute]
public static StringParam IsEqualTo(StringParam& param, string expected);
    [ExtensionAttribute]
public static StringParam Is(StringParam& param, string expected, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsEqualTo(StringParam& param, string expected, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsNot(StringParam& param, string notExpected);
    [ExtensionAttribute]
public static StringParam IsNotEqualTo(StringParam& param, string notExpected);
    [ExtensionAttribute]
public static StringParam IsNot(StringParam& param, string notExpected, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsNotEqualTo(StringParam& param, string notExpected, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsGuid(StringParam& param);
    [ExtensionAttribute]
public static StringParam StartsWith(StringParam& param, string expectedStartsWith);
    [ExtensionAttribute]
public static StringParam StartsWith(StringParam& param, string expectedStartsWith, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsLt(StringParam& param, string limit, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsLte(StringParam& param, string limit, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsGt(StringParam& param, string limit, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsGte(StringParam& param, string limit, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsInRange(StringParam& param, string min, string max, StringComparison comparison);
    [ExtensionAttribute]
public static StringParam IsAllLettersOrDigits(StringParam& param);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatTypeExtensions : object {
    [ExtensionAttribute]
public static TypeParam IsInt(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsShort(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsDecimal(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsDouble(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsFloat(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsBool(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsDateTime(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsString(TypeParam& param);
    [ExtensionAttribute]
public static TypeParam IsOfType(TypeParam& param, Type expectedType);
    [ExtensionAttribute]
public static TypeParam IsNotOfType(TypeParam& param, Type expectedType);
    [ExtensionAttribute]
public static TypeParam IsAssignableToType(TypeParam& param, Type expectedType);
    [ExtensionAttribute]
public static TypeParam IsNotAssignableToType(TypeParam& param, Type expectedType);
    [ExtensionAttribute]
public static Param`1<T> IsClass(Param`1& param);
    [ExtensionAttribute]
public static TypeParam IsClass(TypeParam& param);
}
[ExtensionAttribute]
public static class EnsureThat.EnsureThatValueTypeExtensions : object {
    [ExtensionAttribute]
public static Param`1<bool> IsTrue(Param`1& param);
    [ExtensionAttribute]
public static Param`1<bool> IsFalse(Param`1& param);
    [ExtensionAttribute]
public static Param`1<T> IsNotDefault(Param`1& param);
    [ExtensionAttribute]
public static Param`1<Nullable`1<T>> IsNotNull(Param`1& param);
    [ExtensionAttribute]
public static Param`1<Guid> IsNotEmpty(Param`1& param);
}
public static class EnsureThat.ExceptionFactory : object {
    [CompilerGeneratedAttribute]
private static IExceptionFactory <Default>k__BackingField;
    public static IExceptionFactory Default { get; }
    private static ExceptionFactory();
    [CompilerGeneratedAttribute]
public static IExceptionFactory get_Default();
}
public static class EnsureThat.ExceptionMessages : object {
    [CompilerGeneratedAttribute]
private static string <Common_IsNotNull_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Booleans_IsTrueFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Booleans_IsFalseFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Collections_Any_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Collections_ContainsKey_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Collections_HasItemsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Collections_SizeIs_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_Is_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNot_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotLt>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotLte>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotGt>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotGte>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotInRange_ToLow>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Comp_IsNotInRange_ToHigh>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Enum_IsValidEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Guids_IsNotEmpty_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsEqualTo_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsNotEqualTo_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_SizeIs_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsNotNullOrWhiteSpace_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsNotNullOrEmpty_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsNotEmptyOrWhiteSpace_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_HasLengthBetween_Failed_ToShort>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_HasLengthBetween_Failed_ToLong>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_Matches_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsNotEmpty_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsGuid_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_StartsWith_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Strings_IsAllLettersOrDigits_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsOfType_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsNotOfType_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsAssignableToType_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsNotAssignableToType_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsClass_Failed_Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Types_IsClass_Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ValueTypes_IsNotDefault_Failed>k__BackingField;
    public static string Common_IsNotNull_Failed { get; }
    public static string Booleans_IsTrueFailed { get; }
    public static string Booleans_IsFalseFailed { get; }
    public static string Collections_Any_Failed { get; }
    public static string Collections_ContainsKey_Failed { get; }
    public static string Collections_HasItemsFailed { get; }
    public static string Collections_SizeIs_Failed { get; }
    public static string Comp_Is_Failed { get; }
    public static string Comp_IsNot_Failed { get; }
    public static string Comp_IsNotLt { get; }
    public static string Comp_IsNotLte { get; }
    public static string Comp_IsNotGt { get; }
    public static string Comp_IsNotGte { get; }
    public static string Comp_IsNotInRange_ToLow { get; }
    public static string Comp_IsNotInRange_ToHigh { get; }
    public static string Enum_IsValidEnum { get; }
    public static string Guids_IsNotEmpty_Failed { get; }
    public static string Strings_IsEqualTo_Failed { get; }
    public static string Strings_IsNotEqualTo_Failed { get; }
    public static string Strings_SizeIs_Failed { get; }
    public static string Strings_IsNotNullOrWhiteSpace_Failed { get; }
    public static string Strings_IsNotNullOrEmpty_Failed { get; }
    public static string Strings_IsNotEmptyOrWhiteSpace_Failed { get; }
    public static string Strings_HasLengthBetween_Failed_ToShort { get; }
    public static string Strings_HasLengthBetween_Failed_ToLong { get; }
    public static string Strings_Matches_Failed { get; }
    public static string Strings_IsNotEmpty_Failed { get; }
    public static string Strings_IsGuid_Failed { get; }
    public static string Strings_StartsWith_Failed { get; }
    public static string Strings_IsAllLettersOrDigits_Failed { get; }
    public static string Types_IsOfType_Failed { get; }
    public static string Types_IsNotOfType_Failed { get; }
    public static string Types_IsAssignableToType_Failed { get; }
    public static string Types_IsNotAssignableToType_Failed { get; }
    public static string Types_IsClass_Failed_Null { get; }
    public static string Types_IsClass_Failed { get; }
    public static string ValueTypes_IsNotDefault_Failed { get; }
    private static ExceptionMessages();
    [CompilerGeneratedAttribute]
public static string get_Common_IsNotNull_Failed();
    [CompilerGeneratedAttribute]
public static string get_Booleans_IsTrueFailed();
    [CompilerGeneratedAttribute]
public static string get_Booleans_IsFalseFailed();
    [CompilerGeneratedAttribute]
public static string get_Collections_Any_Failed();
    [CompilerGeneratedAttribute]
public static string get_Collections_ContainsKey_Failed();
    [CompilerGeneratedAttribute]
public static string get_Collections_HasItemsFailed();
    [CompilerGeneratedAttribute]
public static string get_Collections_SizeIs_Failed();
    [CompilerGeneratedAttribute]
public static string get_Comp_Is_Failed();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNot_Failed();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotLt();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotLte();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotGt();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotGte();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotInRange_ToLow();
    [CompilerGeneratedAttribute]
public static string get_Comp_IsNotInRange_ToHigh();
    [CompilerGeneratedAttribute]
public static string get_Enum_IsValidEnum();
    [CompilerGeneratedAttribute]
public static string get_Guids_IsNotEmpty_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsEqualTo_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsNotEqualTo_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_SizeIs_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsNotNullOrWhiteSpace_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsNotNullOrEmpty_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsNotEmptyOrWhiteSpace_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_HasLengthBetween_Failed_ToShort();
    [CompilerGeneratedAttribute]
public static string get_Strings_HasLengthBetween_Failed_ToLong();
    [CompilerGeneratedAttribute]
public static string get_Strings_Matches_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsNotEmpty_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsGuid_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_StartsWith_Failed();
    [CompilerGeneratedAttribute]
public static string get_Strings_IsAllLettersOrDigits_Failed();
    [CompilerGeneratedAttribute]
public static string get_Types_IsOfType_Failed();
    [CompilerGeneratedAttribute]
public static string get_Types_IsNotOfType_Failed();
    [CompilerGeneratedAttribute]
public static string get_Types_IsAssignableToType_Failed();
    [CompilerGeneratedAttribute]
public static string get_Types_IsNotAssignableToType_Failed();
    [CompilerGeneratedAttribute]
public static string get_Types_IsClass_Failed_Null();
    [CompilerGeneratedAttribute]
public static string get_Types_IsClass_Failed();
    [CompilerGeneratedAttribute]
public static string get_ValueTypes_IsNotDefault_Failed();
}
public interface EnsureThat.IExceptionFactory {
    public abstract virtual Exception ArgumentException(string defaultMessage, string paramName, OptsFn optsFn);
    public abstract virtual Exception ArgumentNullException(string defaultMessage, string paramName, OptsFn optsFn);
    public abstract virtual Exception ArgumentOutOfRangeException(string defaultMessage, string paramName, TValue value, OptsFn optsFn);
}
public class EnsureThat.Internals.DefaultExceptionFactory : object {
    public sealed virtual Exception ArgumentException(string defaultMessage, string paramName, OptsFn optsFn);
    public sealed virtual Exception ArgumentNullException(string defaultMessage, string paramName, OptsFn optsFn);
    public sealed virtual Exception ArgumentOutOfRangeException(string defaultMessage, string paramName, TValue value, OptsFn optsFn);
}
internal static class EnsureThat.Internals.EnumOf`1 : object {
    internal static Type EnumType;
    private static bool _hasFlags;
    private static List`1<ulong> _values;
    private static EnumOf`1();
    internal static bool Contains(T value);
}
public class EnsureThat.OptsFn : MulticastDelegate {
    public OptsFn(object object, IntPtr method);
    public virtual EnsureOptions Invoke(EnsureOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
    public virtual IAsyncResult BeginInvoke(EnsureOptions& modreq(System.Runtime.InteropServices.InAttribute) options, AsyncCallback callback, object object);
    public virtual EnsureOptions EndInvoke(EnsureOptions& modreq(System.Runtime.InteropServices.InAttribute) options, IAsyncResult result);
}
[IsReadOnlyAttribute]
public class EnsureThat.Param`1 : ValueType {
    public string Name;
    public T Value;
    public OptsFn OptsFn;
    public Param`1(string name, T value, OptsFn optsFn);
}
[IsReadOnlyAttribute]
public class EnsureThat.StringParam : ValueType {
    public string Name;
    public string Value;
    public OptsFn OptsFn;
    public StringParam(string name, string value, OptsFn optsFn);
}
[IsReadOnlyAttribute]
public class EnsureThat.TypeParam : ValueType {
    public string Name;
    [NotNullAttribute]
public Type Type;
    public OptsFn OptsFn;
    public TypeParam(string name, Type type, OptsFn optsFn);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
