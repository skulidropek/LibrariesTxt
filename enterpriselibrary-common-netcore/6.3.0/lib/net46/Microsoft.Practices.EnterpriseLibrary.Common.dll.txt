public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AttributeKeyValidator : object {
    private static Regex expression;
    private static AttributeKeyValidator();
    public static bool IsValid(string key);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames : object {
    public static string Data;
    public static string Logging;
    public static string ExceptionHandling;
    public static string PolicyInjection;
    public static string Validation;
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler : ConfigurationSourceHandler {
    private Dictionary`2<string, string> sectionRedirectTable;
    private IConfigurationSource mainConfigurationSource;
    public CompositeConfigurationSourceHandler(IConfigurationSource mainConfigurationSource);
    protected virtual void Initialize();
    protected virtual void DoRefresh();
    private Dictionary`2<string, string> GetSectionRedirectTable();
    protected virtual ConfigurationSection DoCheckGetSection(string sectionName, ConfigurationSection configurationSection);
    protected virtual bool DoCheckAddSection(string sectionName, ConfigurationSection configurationSection);
    protected virtual bool DoCheckRemoveSection(string sectionName);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs : EventArgs {
    private string sectionName;
    public string SectionName { get; }
    public ConfigurationChangedEventArgs(string sectionName);
    public string get_SectionName();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler : MulticastDelegate {
    public ConfigurationChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConfigurationChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConfigurationChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute : Attribute {
    private string typeName;
    public Type ConfigurationType { get; }
    public string TypeName { get; }
    public ConfigurationElementTypeAttribute(Type configurationType);
    public ConfigurationElementTypeAttribute(string typeName);
    public Type get_ConfigurationType();
    public string get_TypeName();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs : ConfigurationChangedEventArgs {
    private string configurationFile;
    public string ConfigurationFile { get; }
    public ConfigurationFileChangedEventArgs(string configurationFile, string sectionName);
    public string get_ConfigurationFile();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher : ConfigurationSourceWatcher {
    private string configurationFilepath;
    private ConfigurationChangeFileWatcher configWatcher;
    public ConfigurationChangeWatcher Watcher { get; }
    public ConfigurationFileSourceWatcher(string configurationFilepath, string configSource, bool refresh, int refreshInterval, ConfigurationChangedEventHandler changed);
    private void SetUpWatcher(int refreshInterval, ConfigurationChangedEventHandler changed);
    public static string GetFullFileName(string configurationFilepath, string configSource);
    public virtual ConfigurationChangeWatcher get_Watcher();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner : object {
    public ConfigurationSection Clone(ConfigurationSection section);
    public static ConfigurationElement CloneElement(ConfigurationElement sourceElement, ConfigurationElement targetElement);
    private static ConfigurationElementCollection CloneCollection(ConfigurationElementCollection sourceCollection, ConfigurationElementCollection targetCollection);
    private static ConfigurationElement CreateCopyOfCollectionElement(IMergeableConfigurationElementCollection mergeableSource, ConfigurationElement sourceElement);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder : object {
    private DictionaryConfigurationSource configurationSource;
    public sealed virtual IConfigurationSourceBuilder AddSection(string sectionName, ConfigurationSection configurationSection);
    public sealed virtual bool Contains(string sectionName);
    public sealed virtual ConfigurationSection Get(string sectionName);
    public sealed virtual T Get(string sectionName);
    public sealed virtual void UpdateConfigurationWithReplace(IConfigurationSource source);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs : EventArgs {
    private IConfigurationSource configurationSource;
    private ReadOnlyCollection`1<string> changedSectionNames;
    public IConfigurationSource ConfigurationSource { get; }
    public ReadOnlyCollection`1<string> ChangedSectionNames { get; }
    public ConfigurationSourceChangedEventArgs(IConfigurationSource configurationSource, IEnumerable`1<string> changedSectionNames);
    public IConfigurationSource get_ConfigurationSource();
    public ReadOnlyCollection`1<string> get_ChangedSectionNames();
}
[BrowsableAttribute("False")]
[CommandAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.ConfigurationSourceElementDeleteCommand, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement : NameTypeConfigurationElement {
    public ConfigurationSourceElement(string name, Type type);
    public virtual IConfigurationSource CreateSource();
    public virtual IDesignConfigurationSource CreateDesignSource(IDesignConfigurationSource rootSource);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException : ConfigurationErrorsException {
    public ConfigurationSourceErrorsException(string message);
    public ConfigurationSourceErrorsException(string message, Exception innerException);
    public ConfigurationSourceErrorsException(string message, Exception innerException, string filename, int line);
    protected ConfigurationSourceErrorsException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory : object {
    public static IConfigurationSource Create(string name);
    public static IConfigurationSource Create();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler : object {
    private object LockObject;
    private IConfigurationSource configurationSource;
    private EventHandler`1<ConfigurationSourceChangedEventArgs> configurationSourceChangedHandler;
    private Dictionary`2<string, SubordinateSource> subordinateSourcesByName;
    private Dictionary`2<string, SectionInSubordinateSource> sectionMappings;
    private bool initialized;
    [CompilerGeneratedAttribute]
private ConfigurationChangedEventHandler ConfigurationSectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConfigurationSourceChangedEventArgs> ConfigurationSourceChanged;
    protected ConfigurationSourceHandler(IConfigurationSource configurationSource);
    public ConfigurationSection CheckGetSection(string sectionName, ConfigurationSection configurationSection);
    protected virtual ConfigurationSection DoCheckGetSection(string sectionName, ConfigurationSection configurationSection);
    public bool CheckAddSection(string sectionName, ConfigurationSection configurationSection);
    protected virtual bool DoCheckAddSection(string sectionName, ConfigurationSection configurationSection);
    public bool CheckRemoveSection(string sectionName);
    protected virtual bool DoCheckRemoveSection(string sectionName);
    private void EnsureInitialized();
    protected virtual void Initialize();
    private void configurationSource_ConfigurationSourceChanged(object sender, ConfigurationSourceChangedEventArgs args);
    protected void Refresh();
    protected virtual void DoRefresh();
    private void RefreshSubordinateSources();
    private IEnumerable`1<string> SourceNamesToRemove();
    private void ClearRemovedSubordinateSources(IEnumerable`1<string> sourcesToRemove);
    private void ClearRemovedSubordinateSections(IEnumerable`1<string> removedSources);
    private void RefreshExistingSubordinateSources();
    private void RefreshExistingSectionMappings();
    protected void DoConfigurationSourceChanged(IEnumerable`1<string> affectedSections);
    protected void DoConfigurationSectionChanged(string sectionName);
    [CompilerGeneratedAttribute]
public void add_ConfigurationSectionChanged(ConfigurationChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationSectionChanged(ConfigurationChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConfigurationSourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationSourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    protected void AddCustomSubordinateSource(string sourceName, IConfigurationSource configurationSource);
    protected IConfigurationSource GetSubordinateSource(string sourceName);
    private IConfigurationSource CreateSubordinateSource(string sourceName, bool throwWhenNotFound);
    protected void EnsurePropagatingSectionChangeEvents(string sourceName, string sectionName);
    protected void StopPropagatingSectionChangeEvents(string sectionName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.ConfigurationSourceSectionViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionDisplayName")]
[EnvironmentalOverridesAttribute("False")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection : SerializableConfigurationSection {
    private static string selectedSourceProperty;
    private static string sourcesProperty;
    private static string parentSourceProperty;
    private static string redirectSectionsProperty;
    public static string SectionName;
    [ConfigurationPropertyAttribute("selectedSource")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionSelectedSourceDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionSelectedSourceDisplayName")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement>", "Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement")]
[ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.SelectedSourceValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public string SelectedSource { get; public set; }
    [ConfigurationPropertyAttribute("parentSource")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionParentSourceDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionParentSourceDisplayName")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement>", "Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement")]
public string ParentSource { get; public set; }
    [ConfigurationPropertyAttribute("sources")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionSourcesDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionSourcesDisplayName")]
public CustomConfigurationElementCollection`2<ConfigurationSourceElement, ConfigurationSourceElement> Sources { get; }
    [ConfigurationPropertyAttribute("redirectSections")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionRedirectedSectionsDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "ConfigurationSourceSectionRedirectedSectionsDisplayName")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement")]
public NamedElementCollection`1<RedirectedSectionElement> RedirectedSections { get; }
    public static ConfigurationSourceSection GetConfigurationSourceSection();
    public string get_SelectedSource();
    public void set_SelectedSource(string value);
    public string get_ParentSource();
    public void set_ParentSource(string value);
    public CustomConfigurationElementCollection`2<ConfigurationSourceElement, ConfigurationSourceElement> get_Sources();
    public NamedElementCollection`1<RedirectedSectionElement> get_RedirectedSections();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher : object {
    private string configurationSource;
    private IList`1<string> watchedSections;
    public string ConfigSource { get; public set; }
    public IList`1<string> WatchedSections { get; public set; }
    public ConfigurationChangeWatcher Watcher { get; }
    protected ConfigurationSourceWatcher(string configSource, bool refresh, ConfigurationChangedEventHandler changed);
    public string get_ConfigSource();
    public void set_ConfigSource(string value);
    public IList`1<string> get_WatchedSections();
    public void set_WatchedSections(IList`1<string> value);
    public void StartWatching();
    public void StopWatching();
    public abstract virtual ConfigurationChangeWatcher get_Watcher();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2 : NameTypeConfigurationElementCollection`2<ConfigurationSourceElement, ConfigurationSourceElement> {
    protected virtual Type RetrieveConfigurationElementType(XmlReader reader);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1 : object {
    private IHelperAssistedCustomConfigurationData`1<T> helpedCustomProviderData;
    private NameValueCollection attributes;
    private object lockObject;
    protected internal ConfigurationPropertyCollection propertiesCollection;
    public NameValueCollection Attributes { get; }
    public ConfigurationPropertyCollection Properties { get; }
    public CustomProviderDataHelper`1(T helpedCustomProviderData);
    public bool HandleIsModified();
    public bool HandleOnDeserializeUnrecognizedAttribute(string name, string value);
    public void HandleReset(ConfigurationElement parentElement);
    public void HandleSetAttributeValue(string key, string value);
    public void HandleUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    public NameValueCollection get_Attributes();
    public ConfigurationPropertyCollection get_Properties();
    protected internal virtual bool IsKnownPropertyName(string propertyName);
    private void AddAttributesFromConfigurationProperties();
    private ConfigurationProperty CreateProperty(string propertyName);
    private void CreateAttributes();
    private bool CopyPropertiesToAttributes();
    private bool CheckForValidKey(string key);
    private void CreateRemoveList(List`1<string> removeList);
    private ConfigurationProperty GetProperty(string propertyName);
    private string GetPropertyValue(string propertyName);
    private bool RemoveDeletedConfigurationProperties();
    private void SetPropertyValue(string propertyName, string value);
    private bool UpdatePropertyCollection();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute : CommandAttribute {
    private string sectionName;
    private Type configurationSectionType;
    public string SectionName { get; }
    public Type ConfigurationSectionType { get; }
    public AddApplicationBlockCommandAttribute(string sectionName, Type configurationSectionType);
    public string get_SectionName();
    public Type get_ConfigurationSectionType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute : CommandAttribute {
    private string sectionName;
    private Type defaultProviderConfigurationType;
    private string defaultProviderConfigurationPropertyName;
    private string sateliteProviderReferencePropertyName;
    public string SectionName { get; }
    public Type DefaultProviderConfigurationType { get; }
    public string DefaultProviderConfigurationPropertyName { get; }
    public string SateliteProviderReferencePropertyName { get; }
    public AddSateliteProviderCommandAttribute(string sectionName);
    public AddSateliteProviderCommandAttribute(string sectionName, Type defaultProviderConfigurationType, string defaultProviderConfigurationPropertyName, string sateliteProviderReferencePropertyName);
    public string get_SectionName();
    public Type get_DefaultProviderConfigurationType();
    public string get_DefaultProviderConfigurationPropertyName();
    public string get_SateliteProviderReferencePropertyName();
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime : object {
    public static string AppSettingsSectionName;
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute : Attribute {
    private Type configurationType;
    private Type baseType;
    private TypeSelectorIncludes typeSelectorIncludes;
    public TypeSelectorIncludes TypeSelectorIncludes { get; }
    public Type BaseType { get; }
    public Type ConfigurationType { get; }
    public BaseTypeAttribute(Type baseType);
    public BaseTypeAttribute(Type baseType, Type configurationType);
    public BaseTypeAttribute(Type baseType, TypeSelectorIncludes typeSelectorIncludes);
    public BaseTypeAttribute(Type baseType, TypeSelectorIncludes typeSelectorIncludes, Type configurationType);
    public TypeSelectorIncludes get_TypeSelectorIncludes();
    public Type get_BaseType();
    public Type get_ConfigurationType();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute : Attribute {
    private Type cloneableConfigurationElementType;
    public Type CloneableConfigurationElementType { get; }
    public CloneableConfigurationElementTypeAttribute(Type cloneableConfigurationElementType);
    public Type get_CloneableConfigurationElementType();
}
[AttributeUsageAttribute("133")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute : Attribute {
    private Guid typeId;
    private string title;
    private bool resourceLoaded;
    [CompilerGeneratedAttribute]
private string <TitleResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TitleResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandReplacement <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandPlacement <CommandPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandModelTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyGesture>k__BackingField;
    public string TitleResourceName { get; public set; }
    public Type TitleResourceType { get; public set; }
    public string Title { get; public set; }
    public CommandReplacement Replace { get; public set; }
    public CommandPlacement CommandPlacement { get; public set; }
    public string CommandModelTypeName { get; public set; }
    public Type CommandModelType { get; }
    public string KeyGesture { get; public set; }
    public object TypeId { get; }
    public CommandAttribute(string commandModelTypeName);
    public CommandAttribute(Type commandModelType);
    [CompilerGeneratedAttribute]
public string get_TitleResourceName();
    [CompilerGeneratedAttribute]
public void set_TitleResourceName(string value);
    [CompilerGeneratedAttribute]
public Type get_TitleResourceType();
    [CompilerGeneratedAttribute]
public void set_TitleResourceType(Type value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    private void EnsureTitleLoaded();
    [CompilerGeneratedAttribute]
public CommandReplacement get_Replace();
    [CompilerGeneratedAttribute]
public void set_Replace(CommandReplacement value);
    [CompilerGeneratedAttribute]
public CommandPlacement get_CommandPlacement();
    [CompilerGeneratedAttribute]
public void set_CommandPlacement(CommandPlacement value);
    [CompilerGeneratedAttribute]
public string get_CommandModelTypeName();
    [CompilerGeneratedAttribute]
public void set_CommandModelTypeName(string value);
    public Type get_CommandModelType();
    [CompilerGeneratedAttribute]
public string get_KeyGesture();
    [CompilerGeneratedAttribute]
public void set_KeyGesture(string value);
    public virtual object get_TypeId();
}
public enum Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement : Enum {
    public int value__;
    public static CommandPlacement FileMenu;
    public static CommandPlacement BlocksMenu;
    public static CommandPlacement WizardMenu;
    public static CommandPlacement ContextAdd;
    public static CommandPlacement ContextCustom;
    public static CommandPlacement ContextDelete;
}
public enum Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement : Enum {
    public int value__;
    public static CommandReplacement DefaultAddCommandReplacement;
    public static CommandReplacement DefaultDeleteCommandReplacement;
    public static CommandReplacement NoCommand;
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime : object {
}
internal static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime : object {
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource : FileConfigurationSource {
    public string ConfigurationFilePath { get; }
    public DesignConfigurationSource(string configurationFilePath);
    public sealed virtual ConfigurationSection GetLocalSection(string sectionName);
    public sealed virtual void AddLocalSection(string sectionName, ConfigurationSection section);
    public sealed virtual void RemoveLocalSection(string sectionName);
    public string get_ConfigurationFilePath();
    public static IDesignConfigurationSource CreateDesignSource(IDesignConfigurationSource rootSource, string filePath);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute : Attribute {
    private string bindableDefaultValue;
    public string BindableDefaultValue { get; }
    public DesigntimeDefaultAttribute(string bindableDefaultValue);
    public string get_BindableDefaultValue();
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public bool ReadOnly { get; private set; }
    public DesignTimeReadOnlyAttribute(bool readOnly);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
private void set_ReadOnly(bool value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute : Attribute {
    private bool readonlyText;
    public bool ReadonlyText { get; }
    public EditorWithReadOnlyTextAttribute(bool readonlyText);
    public bool get_ReadonlyText();
}
[AttributeUsageAttribute("132")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute : Attribute {
    private bool canOverride;
    [CompilerGeneratedAttribute]
private Type <CustomOverridesPropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StorageConverterType>k__BackingField;
    public bool CanOverride { get; }
    public Type CustomOverridesPropertyType { get; public set; }
    public Type StorageConverterType { get; public set; }
    public EnvironmentalOverridesAttribute(bool canOverride);
    public bool get_CanOverride();
    [CompilerGeneratedAttribute]
public Type get_CustomOverridesPropertyType();
    [CompilerGeneratedAttribute]
public void set_CustomOverridesPropertyType(Type value);
    [CompilerGeneratedAttribute]
public Type get_StorageConverterType();
    [CompilerGeneratedAttribute]
public void set_StorageConverterType(Type value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute : Attribute {
    private string filter;
    [CompilerGeneratedAttribute]
private bool <CheckFileExists>k__BackingField;
    public string Filter { get; }
    public bool CheckFileExists { get; public set; }
    public FilteredFileNameEditorAttribute(Type resourceType, string resourceKey);
    public string get_Filter();
    [CompilerGeneratedAttribute]
public bool get_CheckFileExists();
    [CompilerGeneratedAttribute]
public void set_CheckFileExists(bool value);
}
[AttributeUsageAttribute("1")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute : Attribute {
    private string sectionName;
    [CompilerGeneratedAttribute]
private bool <ClearOnly>k__BackingField;
    public string SectionName { get; }
    public bool ClearOnly { get; public set; }
    public HandlesSectionAttribute(string sectionName);
    public string get_SectionName();
    [CompilerGeneratedAttribute]
public bool get_ClearOnly();
    [CompilerGeneratedAttribute]
public void set_ClearOnly(bool value);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource {
    public abstract virtual ConfigurationSection GetLocalSection(string sectionName);
    public abstract virtual void AddLocalSection(string sectionName, ConfigurationSection section);
    public abstract virtual void RemoveLocalSection(string sectionName);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute : Attribute {
    private Type mergeableConfigurationCollectionType;
    public Type MergeableConfigurationCollectionType { get; }
    public MergeableConfigurationCollectionTypeAttribute(Type mergeableConfigurationCollectionType);
    public Type get_MergeableConfigurationCollectionType();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute : Attribute {
    private string propertyName;
    [CompilerGeneratedAttribute]
private string <NamePropertyDisplayFormat>k__BackingField;
    public string PropertyName { get; }
    public string NamePropertyDisplayFormat { get; public set; }
    public NamePropertyAttribute(string propertyName);
    public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_NamePropertyDisplayFormat();
    [CompilerGeneratedAttribute]
public void set_NamePropertyDisplayFormat(string value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.OmitCustomAttributesPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.PromoteCommandsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute : Attribute {
    private string scopeTypeName;
    private string targetTypeName;
    private Type cachedType;
    private Type cachedScopeType;
    private bool scopeTypeCached;
    [CompilerGeneratedAttribute]
private bool <ScopeIsDeclaringElement>k__BackingField;
    public Type ScopeType { get; }
    public bool ScopeIsDeclaringElement { get; public set; }
    public Type TargetType { get; }
    public ReferenceAttribute(string targetTypeName);
    public ReferenceAttribute(string scopeTypeName, string targetTypeName);
    public ReferenceAttribute(Type targetType);
    public ReferenceAttribute(Type scopeType, Type targetType);
    public Type get_ScopeType();
    [CompilerGeneratedAttribute]
public bool get_ScopeIsDeclaringElement();
    [CompilerGeneratedAttribute]
public void set_ScopeIsDeclaringElement(bool value);
    public Type get_TargetType();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute : Attribute {
    private Type targetType;
    public Type TargetType { get; }
    public RegisterAsMetadataTypeAttribute(Type targetType);
    public Type get_TargetType();
}
[AttributeUsageAttribute("32767")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute : CategoryAttribute {
    private Type resourceType;
    private static ResourceCategoryAttribute general;
    public Type ResourceType { get; }
    public static ResourceCategoryAttribute General { get; }
    private static ResourceCategoryAttribute();
    public ResourceCategoryAttribute(Type resourceType, string category);
    public Type get_ResourceType();
    protected virtual string GetLocalizedString(string value);
    public static ResourceCategoryAttribute get_General();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute : DescriptionAttribute {
    private bool resourceLoaded;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    public Type ResourceType { get; public set; }
    public string ResourceName { get; public set; }
    public string Description { get; }
    public ResourceDescriptionAttribute(Type resourceType, string resourceName);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    public virtual string get_Description();
    private void EnsureDescriptionLoaded();
}
[AttributeUsageAttribute("132")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute : DisplayNameAttribute {
    private bool resourceLoaded;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    public Type ResourceType { get; public set; }
    public string ResourceName { get; public set; }
    public string DisplayName { get; }
    public ResourceDisplayNameAttribute(Type resourceType, string resourceName);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    public virtual string get_DisplayName();
    private void EnsureDisplayNameLoaded();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute : CommandAttribute {
    private string property;
    public string Property { get; }
    public TypePickingCommandAttribute(string property);
    public string get_Property();
}
[FlagsAttribute]
public enum Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes : Enum {
    public int value__;
    public static TypeSelectorIncludes None;
    public static TypeSelectorIncludes AbstractTypes;
    public static TypeSelectorIncludes Interfaces;
    public static TypeSelectorIncludes BaseType;
    public static TypeSelectorIncludes NonpublicTypes;
    public static TypeSelectorIncludes All;
}
[AttributeUsageAttribute("132")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute : Attribute {
    private string validatorTypeName;
    public Type ValidatorType { get; }
    public object TypeId { get; }
    public ElementValidationAttribute(string validatorTypeName);
    public ElementValidationAttribute(Type validatorType);
    public Type get_ValidatorType();
    public object CreateValidator();
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("384")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute : Attribute {
    private string validatorType;
    public Type ValidatorType { get; }
    public object TypeId { get; }
    public ValidationAttribute(string validatorType);
    public ValidationAttribute(Type validatorType);
    public Type get_ValidatorType();
    public object CreateValidator();
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("132")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute : Attribute {
    private string modelTypeName;
    public Type ModelType { get; }
    public ViewModelAttribute(Type modelType);
    public ViewModelAttribute(string modelTypeName);
    public Type get_ModelType();
}
[AttributeUsageAttribute("1")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute : CommandAttribute {
    [CompilerGeneratedAttribute]
private string <WizardTypeName>k__BackingField;
    public Type WizardType { get; public set; }
    public string WizardTypeName { get; public set; }
    public WizardCommandAttribute(string commandModelTypeName);
    public WizardCommandAttribute(Type commandModelType);
    public Type get_WizardType();
    public void set_WizardType(Type value);
    [CompilerGeneratedAttribute]
public string get_WizardTypeName();
    [CompilerGeneratedAttribute]
public void set_WizardTypeName(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddApplicationSettingsTitle { get; }
    internal static string AddConfigurationSourcesTitle { get; }
    internal static string AddInstrumentationSettingsTitle { get; }
    internal static string AppSettingsSectionMetadataDescription { get; }
    internal static string AppSettingsSectionMetadataDisplayName { get; }
    internal static string CategoryGeneral { get; }
    internal static string CategoryLocalization { get; }
    internal static string CategoryName { get; }
    internal static string ConfigurationElementManageabilityProviderDataDescription { get; }
    internal static string ConfigurationElementManageabilityProviderDataDisplayName { get; }
    internal static string ConfigurationElementManageabilityProviderDataNameDescription { get; }
    internal static string ConfigurationElementManageabilityProviderDataNameDisplayName { get; }
    internal static string ConfigurationElementManageabilityProviderDataTargetTypeDescription { get; }
    internal static string ConfigurationElementManageabilityProviderDataTargetTypeDisplayName { get; }
    internal static string ConfigurationElementManageabilityProviderDataTypeNameDescription { get; }
    internal static string ConfigurationElementManageabilityProviderDataTypeNameDisplayName { get; }
    internal static string ConfigurationSectionManageabilityProviderDataDescription { get; }
    internal static string ConfigurationSectionManageabilityProviderDataDisplayName { get; }
    internal static string ConfigurationSectionManageabilityProviderDataManageabilityProvidersDescription { get; }
    internal static string ConfigurationSectionManageabilityProviderDataManageabilityProvidersDisplayName { get; }
    internal static string ConfigurationSectionManageabilityProviderDataNameDescription { get; }
    internal static string ConfigurationSectionManageabilityProviderDataNameDisplayName { get; }
    internal static string ConfigurationSectionManageabilityProviderDataTypeNameDescription { get; }
    internal static string ConfigurationSectionManageabilityProviderDataTypeNameDisplayName { get; }
    internal static string ConfigurationSourceElementDescription { get; }
    internal static string ConfigurationSourceElementDisplayName { get; }
    internal static string ConfigurationSourceElementNameDescription { get; }
    internal static string ConfigurationSourceElementNameDisplayName { get; }
    internal static string ConfigurationSourceElementTypeNameDescription { get; }
    internal static string ConfigurationSourceElementTypeNameDisplayName { get; }
    internal static string ConfigurationSourceSectionDescription { get; }
    internal static string ConfigurationSourceSectionDisplayName { get; }
    internal static string ConfigurationSourceSectionParentSourceDescription { get; }
    internal static string ConfigurationSourceSectionParentSourceDisplayName { get; }
    internal static string ConfigurationSourceSectionRedirectedSectionsDescription { get; }
    internal static string ConfigurationSourceSectionRedirectedSectionsDisplayName { get; }
    internal static string ConfigurationSourceSectionSelectedSourceDescription { get; }
    internal static string ConfigurationSourceSectionSelectedSourceDisplayName { get; }
    internal static string ConfigurationSourceSectionSourcesDescription { get; }
    internal static string ConfigurationSourceSectionSourcesDisplayName { get; }
    internal static string FileConfigurationSourceElementDescription { get; }
    internal static string FileConfigurationSourceElementDisplayName { get; }
    internal static string FileConfigurationSourceElementFilePathDescription { get; }
    internal static string FileConfigurationSourceElementFilePathDisplayName { get; }
    internal static string FileConfigurationSourceElementFilePathFilter { get; }
    internal static string FileConfigurationSourceElementNameDescription { get; }
    internal static string FileConfigurationSourceElementNameDisplayName { get; }
    internal static string FileConfigurationSourceElementTypeNameDescription { get; }
    internal static string FileConfigurationSourceElementTypeNameDisplayName { get; }
    internal static string InstrumentationConfigurationSectionApplicationInstanceNameDescription { get; }
    internal static string InstrumentationConfigurationSectionApplicationInstanceNameDisplayName { get; }
    internal static string InstrumentationConfigurationSectionDescription { get; }
    internal static string InstrumentationConfigurationSectionDisplayName { get; }
    internal static string InstrumentationConfigurationSectionEventLoggingEnabledDescription { get; }
    internal static string InstrumentationConfigurationSectionEventLoggingEnabledDisplayName { get; }
    internal static string InstrumentationConfigurationSectionPerformanceCountersEnabledDescription { get; }
    internal static string InstrumentationConfigurationSectionPerformanceCountersEnabledDisplayName { get; }
    internal static string KeyValueConfigurationCollectionMetadataDescription { get; }
    internal static string KeyValueConfigurationCollectionMetadataDisplayName { get; }
    internal static string KeyValueConfigurationElementMetadataDescription { get; }
    internal static string KeyValueConfigurationElementMetadataDisplayName { get; }
    internal static string KeyValueConfigurationElementMetadataKeyDescription { get; }
    internal static string KeyValueConfigurationElementMetadataKeyDisplayName { get; }
    internal static string KeyValueConfigurationElementMetadataValueDescription { get; }
    internal static string KeyValueConfigurationElementMetadataValueDisplayName { get; }
    internal static string ManageableConfigurationSourceElementApplicationNameDescription { get; }
    internal static string ManageableConfigurationSourceElementApplicationNameDisplayName { get; }
    internal static string ManageableConfigurationSourceElementConfigurationManageabilityProvidersDescription { get; }
    internal static string ManageableConfigurationSourceElementConfigurationManageabilityProvidersDisplayName { get; }
    internal static string ManageableConfigurationSourceElementDescription { get; }
    internal static string ManageableConfigurationSourceElementDisplayName { get; }
    internal static string ManageableConfigurationSourceElementEnableGroupPoliciesDescription { get; }
    internal static string ManageableConfigurationSourceElementEnableGroupPoliciesDisplayName { get; }
    internal static string ManageableConfigurationSourceElementFilePathDescription { get; }
    internal static string ManageableConfigurationSourceElementFilePathDisplayName { get; }
    internal static string ManageableConfigurationSourceElementNameDescription { get; }
    internal static string ManageableConfigurationSourceElementNameDisplayName { get; }
    internal static string ManageableConfigurationSourceElementTypeNameDescription { get; }
    internal static string ManageableConfigurationSourceElementTypeNameDisplayName { get; }
    internal static string NamedConfigurationElementDescription { get; }
    internal static string NamedConfigurationElementDisplayName { get; }
    internal static string NamedConfigurationElementNameDescription { get; }
    internal static string NamedConfigurationElementNameDisplayName { get; }
    internal static string NamedElementCollectionDescription { get; }
    internal static string NamedElementCollectionDisplayName { get; }
    internal static string NameTypeConfigurationElementCollectionDescription { get; }
    internal static string NameTypeConfigurationElementCollectionDisplayName { get; }
    internal static string NameTypeConfigurationElementDescription { get; }
    internal static string NameTypeConfigurationElementDisplayName { get; }
    internal static string NameTypeConfigurationElementNameDescription { get; }
    internal static string NameTypeConfigurationElementNameDisplayName { get; }
    internal static string NameTypeConfigurationElementTypeNameDescription { get; }
    internal static string NameTypeConfigurationElementTypeNameDisplayName { get; }
    internal static string PolymorphicConfigurationElementCollectionDescription { get; }
    internal static string PolymorphicConfigurationElementCollectionDisplayName { get; }
    internal static string RedirectedSectionElementDescription { get; }
    internal static string RedirectedSectionElementDisplayName { get; }
    internal static string RedirectedSectionElementNameDescription { get; }
    internal static string RedirectedSectionElementNameDisplayName { get; }
    internal static string RedirectedSectionElementSourceNameDescription { get; }
    internal static string RedirectedSectionElementSourceNameDisplayName { get; }
    internal static string SerializableConfigurationSectionDescription { get; }
    internal static string SerializableConfigurationSectionDisplayName { get; }
    internal static string SystemConfigurationSourceElementDescription { get; }
    internal static string SystemConfigurationSourceElementDisplayName { get; }
    internal static string SystemConfigurationSourceElementNameDescription { get; }
    internal static string SystemConfigurationSourceElementNameDisplayName { get; }
    internal static string SystemConfigurationSourceElementTypeNameDescription { get; }
    internal static string SystemConfigurationSourceElementTypeNameDisplayName { get; }
    internal static string TypeRegistrationProviderElementCollectionDescription { get; }
    internal static string TypeRegistrationProviderElementCollectionDisplayName { get; }
    internal static string TypeRegistrationProviderElementDescription { get; }
    internal static string TypeRegistrationProviderElementDisplayName { get; }
    internal static string TypeRegistrationProviderElementNameDescription { get; }
    internal static string TypeRegistrationProviderElementNameDisplayName { get; }
    internal static string TypeRegistrationProviderElementProviderTypeNameDescription { get; }
    internal static string TypeRegistrationProviderElementProviderTypeNameDisplayName { get; }
    internal static string TypeRegistrationProviderElementSectionNameDescription { get; }
    internal static string TypeRegistrationProviderElementSectionNameDisplayName { get; }
    internal static string TypeRegistrationProvidersConfigurationSectionDescription { get; }
    internal static string TypeRegistrationProvidersConfigurationSectionDisplayName { get; }
    internal static string TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDescription { get; }
    internal static string TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDisplayName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddApplicationSettingsTitle();
    internal static string get_AddConfigurationSourcesTitle();
    internal static string get_AddInstrumentationSettingsTitle();
    internal static string get_AppSettingsSectionMetadataDescription();
    internal static string get_AppSettingsSectionMetadataDisplayName();
    internal static string get_CategoryGeneral();
    internal static string get_CategoryLocalization();
    internal static string get_CategoryName();
    internal static string get_ConfigurationElementManageabilityProviderDataDescription();
    internal static string get_ConfigurationElementManageabilityProviderDataDisplayName();
    internal static string get_ConfigurationElementManageabilityProviderDataNameDescription();
    internal static string get_ConfigurationElementManageabilityProviderDataNameDisplayName();
    internal static string get_ConfigurationElementManageabilityProviderDataTargetTypeDescription();
    internal static string get_ConfigurationElementManageabilityProviderDataTargetTypeDisplayName();
    internal static string get_ConfigurationElementManageabilityProviderDataTypeNameDescription();
    internal static string get_ConfigurationElementManageabilityProviderDataTypeNameDisplayName();
    internal static string get_ConfigurationSectionManageabilityProviderDataDescription();
    internal static string get_ConfigurationSectionManageabilityProviderDataDisplayName();
    internal static string get_ConfigurationSectionManageabilityProviderDataManageabilityProvidersDescription();
    internal static string get_ConfigurationSectionManageabilityProviderDataManageabilityProvidersDisplayName();
    internal static string get_ConfigurationSectionManageabilityProviderDataNameDescription();
    internal static string get_ConfigurationSectionManageabilityProviderDataNameDisplayName();
    internal static string get_ConfigurationSectionManageabilityProviderDataTypeNameDescription();
    internal static string get_ConfigurationSectionManageabilityProviderDataTypeNameDisplayName();
    internal static string get_ConfigurationSourceElementDescription();
    internal static string get_ConfigurationSourceElementDisplayName();
    internal static string get_ConfigurationSourceElementNameDescription();
    internal static string get_ConfigurationSourceElementNameDisplayName();
    internal static string get_ConfigurationSourceElementTypeNameDescription();
    internal static string get_ConfigurationSourceElementTypeNameDisplayName();
    internal static string get_ConfigurationSourceSectionDescription();
    internal static string get_ConfigurationSourceSectionDisplayName();
    internal static string get_ConfigurationSourceSectionParentSourceDescription();
    internal static string get_ConfigurationSourceSectionParentSourceDisplayName();
    internal static string get_ConfigurationSourceSectionRedirectedSectionsDescription();
    internal static string get_ConfigurationSourceSectionRedirectedSectionsDisplayName();
    internal static string get_ConfigurationSourceSectionSelectedSourceDescription();
    internal static string get_ConfigurationSourceSectionSelectedSourceDisplayName();
    internal static string get_ConfigurationSourceSectionSourcesDescription();
    internal static string get_ConfigurationSourceSectionSourcesDisplayName();
    internal static string get_FileConfigurationSourceElementDescription();
    internal static string get_FileConfigurationSourceElementDisplayName();
    internal static string get_FileConfigurationSourceElementFilePathDescription();
    internal static string get_FileConfigurationSourceElementFilePathDisplayName();
    internal static string get_FileConfigurationSourceElementFilePathFilter();
    internal static string get_FileConfigurationSourceElementNameDescription();
    internal static string get_FileConfigurationSourceElementNameDisplayName();
    internal static string get_FileConfigurationSourceElementTypeNameDescription();
    internal static string get_FileConfigurationSourceElementTypeNameDisplayName();
    internal static string get_InstrumentationConfigurationSectionApplicationInstanceNameDescription();
    internal static string get_InstrumentationConfigurationSectionApplicationInstanceNameDisplayName();
    internal static string get_InstrumentationConfigurationSectionDescription();
    internal static string get_InstrumentationConfigurationSectionDisplayName();
    internal static string get_InstrumentationConfigurationSectionEventLoggingEnabledDescription();
    internal static string get_InstrumentationConfigurationSectionEventLoggingEnabledDisplayName();
    internal static string get_InstrumentationConfigurationSectionPerformanceCountersEnabledDescription();
    internal static string get_InstrumentationConfigurationSectionPerformanceCountersEnabledDisplayName();
    internal static string get_KeyValueConfigurationCollectionMetadataDescription();
    internal static string get_KeyValueConfigurationCollectionMetadataDisplayName();
    internal static string get_KeyValueConfigurationElementMetadataDescription();
    internal static string get_KeyValueConfigurationElementMetadataDisplayName();
    internal static string get_KeyValueConfigurationElementMetadataKeyDescription();
    internal static string get_KeyValueConfigurationElementMetadataKeyDisplayName();
    internal static string get_KeyValueConfigurationElementMetadataValueDescription();
    internal static string get_KeyValueConfigurationElementMetadataValueDisplayName();
    internal static string get_ManageableConfigurationSourceElementApplicationNameDescription();
    internal static string get_ManageableConfigurationSourceElementApplicationNameDisplayName();
    internal static string get_ManageableConfigurationSourceElementConfigurationManageabilityProvidersDescription();
    internal static string get_ManageableConfigurationSourceElementConfigurationManageabilityProvidersDisplayName();
    internal static string get_ManageableConfigurationSourceElementDescription();
    internal static string get_ManageableConfigurationSourceElementDisplayName();
    internal static string get_ManageableConfigurationSourceElementEnableGroupPoliciesDescription();
    internal static string get_ManageableConfigurationSourceElementEnableGroupPoliciesDisplayName();
    internal static string get_ManageableConfigurationSourceElementFilePathDescription();
    internal static string get_ManageableConfigurationSourceElementFilePathDisplayName();
    internal static string get_ManageableConfigurationSourceElementNameDescription();
    internal static string get_ManageableConfigurationSourceElementNameDisplayName();
    internal static string get_ManageableConfigurationSourceElementTypeNameDescription();
    internal static string get_ManageableConfigurationSourceElementTypeNameDisplayName();
    internal static string get_NamedConfigurationElementDescription();
    internal static string get_NamedConfigurationElementDisplayName();
    internal static string get_NamedConfigurationElementNameDescription();
    internal static string get_NamedConfigurationElementNameDisplayName();
    internal static string get_NamedElementCollectionDescription();
    internal static string get_NamedElementCollectionDisplayName();
    internal static string get_NameTypeConfigurationElementCollectionDescription();
    internal static string get_NameTypeConfigurationElementCollectionDisplayName();
    internal static string get_NameTypeConfigurationElementDescription();
    internal static string get_NameTypeConfigurationElementDisplayName();
    internal static string get_NameTypeConfigurationElementNameDescription();
    internal static string get_NameTypeConfigurationElementNameDisplayName();
    internal static string get_NameTypeConfigurationElementTypeNameDescription();
    internal static string get_NameTypeConfigurationElementTypeNameDisplayName();
    internal static string get_PolymorphicConfigurationElementCollectionDescription();
    internal static string get_PolymorphicConfigurationElementCollectionDisplayName();
    internal static string get_RedirectedSectionElementDescription();
    internal static string get_RedirectedSectionElementDisplayName();
    internal static string get_RedirectedSectionElementNameDescription();
    internal static string get_RedirectedSectionElementNameDisplayName();
    internal static string get_RedirectedSectionElementSourceNameDescription();
    internal static string get_RedirectedSectionElementSourceNameDisplayName();
    internal static string get_SerializableConfigurationSectionDescription();
    internal static string get_SerializableConfigurationSectionDisplayName();
    internal static string get_SystemConfigurationSourceElementDescription();
    internal static string get_SystemConfigurationSourceElementDisplayName();
    internal static string get_SystemConfigurationSourceElementNameDescription();
    internal static string get_SystemConfigurationSourceElementNameDisplayName();
    internal static string get_SystemConfigurationSourceElementTypeNameDescription();
    internal static string get_SystemConfigurationSourceElementTypeNameDisplayName();
    internal static string get_TypeRegistrationProviderElementCollectionDescription();
    internal static string get_TypeRegistrationProviderElementCollectionDisplayName();
    internal static string get_TypeRegistrationProviderElementDescription();
    internal static string get_TypeRegistrationProviderElementDisplayName();
    internal static string get_TypeRegistrationProviderElementNameDescription();
    internal static string get_TypeRegistrationProviderElementNameDisplayName();
    internal static string get_TypeRegistrationProviderElementProviderTypeNameDescription();
    internal static string get_TypeRegistrationProviderElementProviderTypeNameDisplayName();
    internal static string get_TypeRegistrationProviderElementSectionNameDescription();
    internal static string get_TypeRegistrationProviderElementSectionNameDisplayName();
    internal static string get_TypeRegistrationProvidersConfigurationSectionDescription();
    internal static string get_TypeRegistrationProvidersConfigurationSectionDisplayName();
    internal static string get_TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDescription();
    internal static string get_TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDisplayName();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource : object {
    protected internal Dictionary`2<string, ConfigurationSection> sections;
    protected internal EventHandlerList eventHandlers;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConfigurationSourceChangedEventArgs> SourceChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    public sealed virtual ConfigurationSection GetSection(string sectionName);
    public sealed virtual void Add(string name, ConfigurationSection section);
    public sealed virtual void Remove(string sectionName);
    public bool Contains(string name);
    public sealed virtual void AddSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public sealed virtual void RemoveSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    protected void OnSourceChangedEvent(ConfigurationSourceChangedEventArgs args);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1 : EnumConverter {
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource : object {
    public static string NullConfigSource;
    private string configurationFilepath;
    private bool refresh;
    private int refreshInterval;
    private object refreshLock;
    private object eventHandlersLock;
    private EventHandlerList eventHandlers;
    private object watchersLock;
    private ConfigurationSourceWatcher configFileWatcher;
    private Dictionary`2<string, ConfigurationSourceWatcher> watchedConfigSourceMapping;
    private Dictionary`2<string, ConfigurationSourceWatcher> watchedSectionMapping;
    private CompositeConfigurationSourceHandler CompositeConfigurationHandler;
    private HierarchicalConfigurationSourceHandler HierarchicalConfigurationHandler;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConfigurationSourceChangedEventArgs> SourceChanged;
    protected string ConfigurationFilePath { get; }
    private IDictionary`2<string, ConfigurationSourceWatcher> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceWatcherMappings { get; }
    private ICollection`1<string> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedConfigSources { get; }
    private ICollection`1<string> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedSections { get; }
    protected FileBasedConfigurationSource(string configurationFilepath, bool refresh, int refreshInterval);
    private void handler_ConfigurationSourceChanged(object sender, ConfigurationSourceChangedEventArgs e);
    private void handler_ConfigurationSectionChanged(object sender, ConfigurationChangedEventArgs e);
    public sealed virtual ConfigurationSection GetSection(string sectionName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    public sealed virtual void AddSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public sealed virtual void RemoveSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public sealed virtual void Add(string sectionName, ConfigurationSection configurationSection);
    public abstract virtual void DoAdd(string sectionName, ConfigurationSection configurationSection);
    public sealed virtual void Remove(string sectionName);
    public abstract virtual void DoRemove(string sectionName);
    private void ConfigSourceChanged(string configSource);
    private void AddKnownSectionsToRefresh(IDictionary`2<string, string> localSectionsToRefresh, IDictionary`2<string, string> externalSectionsToRefresh);
    private void ExternalConfigSourceChanged(string configSource);
    private static void AddSectionsToUpdate(ConfigurationSourceWatcher watcher, IDictionary`2<string, string> sectionsToUpdate);
    private ConfigurationSourceWatcher CreateWatcherForConfigSource(string configSource);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private bool IsWatchingConfigSource(string configSource);
    private bool IsWatchingSection(string sectionName);
    private void LinkWatcherForSection(ConfigurationSourceWatcher watcher, string sectionName);
    protected void NotifyUpdatedSections(IEnumerable`1<string> sectionsToNotify);
    private void DoNotifyUpdatedSection(string sectionName);
    protected abstract virtual ConfigurationSection DoGetSection(string sectionName);
    protected virtual void OnSourceChanged(ConfigurationSourceChangedEventArgs configurationSourceChangedEventArgs);
    private void OnConfigurationChanged(object sender, ConfigurationChangedEventArgs args);
    private void OnExternalConfigurationChanged(object sender, ConfigurationChangedEventArgs args);
    protected abstract virtual void RefreshAndValidateSections(IDictionary`2<string, string> localSectionsToRefresh, IDictionary`2<string, string> externalSectionsToRefresh, ICollection`1& sectionsToNotify, IDictionary`2& sectionsWithChangedConfigSource);
    protected abstract virtual void RefreshExternalSections(IEnumerable`1<string> sectionsToRefresh);
    private void RemoveConfigSourceWatcher(ConfigurationSourceWatcher watcher);
    private void SetConfigurationWatchers(string sectionName, ConfigurationSection configurationSection);
    private void SetWatcherForSection(string sectionName, string configSource);
    private void UnlinkWatcherForSection(ConfigurationSourceWatcher watcher, string sectionName);
    private void UpdateWatcherForSection(string sectionName, string configSource);
    private void UpdateWatchersForSections(IEnumerable`1<KeyValuePair`2<string, string>> sectionsChangingSource);
    protected string get_ConfigurationFilePath();
    protected static void ValidateArgumentsAndFileExists(string fileName, string section, ConfigurationSection configurationSection);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceChanged(string configSource);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ExternalConfigSourceChanged(string configSource);
    private sealed virtual override IDictionary`2<string, ConfigurationSourceWatcher> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.get_ConfigSourceWatcherMappings();
    private sealed virtual override ICollection`1<string> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.get_WatchedConfigSources();
    private sealed virtual override ICollection`1<string> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.get_WatchedSections();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource : FileBasedConfigurationSource {
    private ExeConfigurationFileMap fileMap;
    private object cachedConfigurationLock;
    private Configuration cachedConfiguration;
    public FileConfigurationSource(string configurationFilepath);
    public FileConfigurationSource(string configurationFilepath, bool refresh);
    public FileConfigurationSource(string configurationFilepath, bool refresh, int refreshInterval);
    public virtual void DoAdd(string sectionName, ConfigurationSection configurationSection);
    public virtual void DoRemove(string sectionName);
    public sealed virtual void Add(string sectionName, ConfigurationSection configurationSection, string protectionProviderName);
    public void Save(string section, ConfigurationSection configurationSection);
    public void Save(string section, ConfigurationSection configurationSection, string protectionProvider);
    protected virtual ConfigurationSection DoGetSection(string sectionName);
    protected virtual void RefreshAndValidateSections(IDictionary`2<string, string> localSectionsToRefresh, IDictionary`2<string, string> externalSectionsToRefresh, ICollection`1& sectionsToNotify, IDictionary`2& sectionsWithChangedConfigSource);
    protected virtual void RefreshExternalSections(IEnumerable`1<string> sectionsToRefresh);
    private void InternalSave(string fileName, string section, ConfigurationSection configurationSection, string protectionProvider);
    private static void ProtectConfigurationSection(ConfigurationSection configurationSection, string protectionProvider);
    private void UpdateApplicationSettings(string section, ConfigurationSection configurationSection, Configuration config, string protectionProvider);
    private void UpdateConnectionStrings(string section, ConfigurationSection configurationSection, Configuration config, string protectionProvider);
    private static string GetRootedCurrentConfigurationFile(string configurationFile);
    private Configuration GetConfiguration();
    internal void UpdateCache(bool forceUpdate);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "FileConfigurationSourceElementDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "FileConfigurationSourceElementDisplayName")]
[BrowsableAttribute("True")]
[EnvironmentalOverridesAttribute("False")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement : ConfigurationSourceElement {
    private static string filePathProperty;
    [ConfigurationPropertyAttribute("filePath")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "FileConfigurationSourceElementFilePathDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "FileConfigurationSourceElementFilePathDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.FilteredFileNameEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[FilteredFileNameEditorAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "FileConfigurationSourceElementFilePathFilter")]
[ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.FilePathExistsValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.FileWritableValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public string FilePath { get; public set; }
    public FileConfigurationSourceElement(string name, string filePath);
    public string get_FilePath();
    public void set_FilePath(string value);
    public virtual IConfigurationSource CreateSource();
    public virtual IDesignConfigurationSource CreateDesignSource(IDesignConfigurationSource rootSource);
}
internal class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.GenericEnumeratorWrapper`1 : object {
    private IEnumerator wrappedEnumerator;
    private T System.Collections.Generic.IEnumerator<T>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal GenericEnumeratorWrapper`1(IEnumerator wrappedEnumerator);
    private sealed virtual override T System.Collections.Generic.IEnumerator<T>.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler : ConfigurationSourceHandler {
    private static string CustomParentSourceName;
    private IConfigurationSource localSource;
    private string parentSourceName;
    public HierarchicalConfigurationSourceHandler(IConfigurationSource localSource);
    public HierarchicalConfigurationSourceHandler(IConfigurationSource localSource, IConfigurationSource parentSource);
    protected virtual void Initialize();
    protected virtual void DoRefresh();
    protected virtual ConfigurationSection DoCheckGetSection(string sectionName, ConfigurationSection configurationSection);
    private static ConfigurationSection CloneSection(ConfigurationSection sourceSection);
    private static string GetParentConfigurationSourceName(IConfigurationSource source);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement {
    public abstract virtual ConfigurationElement CreateFullClone();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource {
    public abstract virtual ConfigurationSection GetSection(string sectionName);
    public abstract virtual void Add(string sectionName, ConfigurationSection configurationSection);
    public abstract virtual void Remove(string sectionName);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    public abstract virtual void AddSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public abstract virtual void RemoveSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder {
    [EditorBrowsableAttribute("1")]
public abstract virtual IConfigurationSourceBuilder AddSection(string sectionName, ConfigurationSection section);
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Contains(string sectionName);
    [EditorBrowsableAttribute("1")]
public abstract virtual ConfigurationSection Get(string sectionName);
    [EditorBrowsableAttribute("1")]
public abstract virtual T Get(string sectionName);
    public abstract virtual void UpdateConfigurationWithReplace(IConfigurationSource source);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest {
    public IDictionary`2<string, ConfigurationSourceWatcher> ConfigSourceWatcherMappings { get; }
    public ICollection`1<string> WatchedConfigSources { get; }
    public ICollection`1<string> WatchedSections { get; }
    public abstract virtual void ConfigSourceChanged(string configSource);
    public abstract virtual void ExternalConfigSourceChanged(string configSource);
    public abstract virtual IDictionary`2<string, ConfigurationSourceWatcher> get_ConfigSourceWatcherMappings();
    public abstract virtual ICollection`1<string> get_WatchedConfigSources();
    public abstract virtual ICollection`1<string> get_WatchedSections();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData {
    public string Name { get; }
    public NameValueCollection Attributes { get; }
    public abstract virtual string get_Name();
    public abstract virtual NameValueCollection get_Attributes();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1 {
    public CustomProviderDataHelper`1<T> Helper { get; }
    public abstract virtual CustomProviderDataHelper`1<T> get_Helper();
    public abstract virtual object BaseGetPropertyValue(ConfigurationProperty property);
    public abstract virtual bool BaseIsModified();
    public abstract virtual void BaseReset(ConfigurationElement parentElement);
    public abstract virtual void BaseSetPropertyValue(ConfigurationProperty property, object value);
    public abstract virtual void BaseUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection {
    public abstract virtual void ResetCollection(IEnumerable`1<ConfigurationElement> configurationElements);
    public abstract virtual ConfigurationElement CreateNewElement(Type configurationType);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType {
    public Type Type { get; }
    public abstract virtual Type get_Type();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource {
    public abstract virtual void Add(string sectionName, ConfigurationSection configurationSection, string protectionProviderName);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.MergeableConfigurationCollectionFactory : object {
    public static IMergeableConfigurationElementCollection GetCreateMergeableCollection(ConfigurationElementCollection collection);
}
[NamePropertyAttribute("Name")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement : ConfigurationElement {
    public static string nameProperty;
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "NamedConfigurationElementNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "NamedConfigurationElementNameDisplayName")]
[ResourceCategoryAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute", "CategoryName")]
[EnvironmentalOverridesAttribute("False")]
public string Name { get; public set; }
    public NamedConfigurationElement(string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public void DeserializeElement(XmlReader reader);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1 : ConfigurationElementCollection {
    public void ForEach(Action`1<T> action);
    public T Get(int index);
    public void Add(T element);
    public T Get(string name);
    public bool Contains(string name);
    public void Remove(string name);
    public void Clear();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.ResetCollection(IEnumerable`1<ConfigurationElement> configurationElements);
    private sealed virtual override ConfigurationElement Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.CreateNewElement(Type configurationType);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement : NamedConfigurationElement {
    private AssemblyQualifiedTypeNameConverter typeConverter;
    public static string typeProperty;
    public Type Type { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[BrowsableAttribute("True")]
[DesignTimeReadOnlyAttribute("True")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "NameTypeConfigurationElementTypeNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "NameTypeConfigurationElementTypeNameDisplayName")]
[ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.TypeValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.TypeNameProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public string TypeName { get; public set; }
    internal ConfigurationPropertyCollection MetadataProperties { get; }
    public NameTypeConfigurationElement(string name, Type type);
    public virtual Type get_Type();
    public virtual void set_Type(Type value);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    internal ConfigurationPropertyCollection get_MetadataProperties();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2 : PolymorphicConfigurationElementCollection`1<T> {
    private static string typeAttribute;
    protected virtual Type RetrieveConfigurationElementType(XmlReader reader);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NonNegativeOrInfiniteTimeSpanValidator : TimeSpanValidator {
    public virtual void Validate(object value);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NonNegativeOrInfiniteTimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ConfigurationSourceChangedEventArgs> SourceChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SourceChanged(EventHandler`1<ConfigurationSourceChangedEventArgs> value);
    public sealed virtual ConfigurationSection GetSection(string sectionName);
    public sealed virtual void Add(string sectionName, ConfigurationSection configurationSection);
    public sealed virtual void Remove(string sectionName);
    public sealed virtual void AddSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public sealed virtual void RemoveSectionChangeHandler(string sectionName, ConfigurationChangedEventHandler handler);
    public sealed virtual void Dispose();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1 : NamedElementCollection`1<T> {
    private Dictionary`2<string, Type> configurationElementTypeMapping;
    private T currentElement;
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected abstract virtual Type RetrieveConfigurationElementType(XmlReader reader);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual ConfigurationElement CreateNewElement(string elementName);
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    private void CreateTypesMap(PolymorphicConfigurationElementCollection`1<T> sourceCollection);
    private void ReleaseTypesMap();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "RedirectedSectionElementDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "RedirectedSectionElementDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement : NamedConfigurationElement {
    private static string sourceNameProperty;
    [ConfigurationPropertyAttribute("sourceName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "RedirectedSectionElementSourceNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "RedirectedSectionElementSourceNameDisplayName")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement>", "Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.RedirectedSectionSourceProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[EnvironmentalOverridesAttribute("False")]
public string SourceName { get; public set; }
    public string get_SourceName();
    public void set_SourceName(string value);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection : ConfigurationSection {
    private static string SourceProperty;
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher : ConfigurationChangeWatcher {
    private static string eventSourceName;
    private string configurationSectionName;
    private string configFilePath;
    public string SectionName { get; }
    public ConfigurationChangeFileWatcher(string configFilePath, string configurationSectionName);
    public virtual string get_SectionName();
    protected virtual DateTime GetCurrentLastWriteTime();
    protected virtual ConfigurationChangedEventArgs BuildEventData();
    protected virtual string GetEventSourceName();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher : object {
    private static object configurationChangedKey;
    internal static int defaultPollDelayInMilliseconds;
    private int pollDelayInMilliseconds;
    private EventHandlerList eventHandlers;
    private DateTime lastWriteTime;
    private ElapsedEventHandler pollTimerHandler;
    private Timer pollTimer;
    private bool polling;
    public string SectionName { get; }
    private static ConfigurationChangeWatcher();
    public static void SetDefaultPollDelayInMilliseconds(int newDefaultPollDelayInMilliseconds);
    public static void ResetDefaultPollDelay();
    public void SetPollDelayInMilliseconds(int newDelayInMilliseconds);
    private void pollTimer_Elapsed(object sender, ElapsedEventArgs e);
    protected virtual override void Finalize();
    public sealed virtual void add_ConfigurationChanged(ConfigurationChangedEventHandler value);
    public sealed virtual void remove_ConfigurationChanged(ConfigurationChangedEventHandler value);
    public abstract virtual string get_SectionName();
    public sealed virtual void StartWatching();
    public sealed virtual void StopWatching();
    public sealed virtual void Dispose();
    protected virtual void Disposing(bool isDisposing);
    protected virtual void Dispose(bool isDisposing);
    protected virtual void OnConfigurationChanged();
    private void LogException(Exception e);
    protected abstract virtual DateTime GetCurrentLastWriteTime();
    protected abstract virtual ConfigurationChangedEventArgs BuildEventData();
    protected abstract virtual string GetEventSourceName();
}
internal class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcherPauser : object {
    private IConfigurationChangeWatcher watcher;
    public ConfigurationChangeWatcherPauser(IConfigurationChangeWatcher watcher);
    public sealed virtual void Dispose();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher {
    public string SectionName { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationChanged(ConfigurationChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationChanged(ConfigurationChangedEventHandler value);
    public abstract virtual void StartWatching();
    public abstract virtual void StopWatching();
    public abstract virtual string get_SectionName();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource : FileBasedConfigurationSource {
    public SystemConfigurationSource(bool refresh);
    public SystemConfigurationSource(bool refresh, int refreshInterval);
    public virtual void DoAdd(string sectionName, ConfigurationSection configurationSection);
    public virtual void DoRemove(string sectionName);
    public void Save(string section, ConfigurationSection configurationSection);
    protected virtual ConfigurationSection DoGetSection(string sectionName);
    protected virtual void RefreshAndValidateSections(IDictionary`2<string, string> localSectionsToRefresh, IDictionary`2<string, string> externalSectionsToRefresh, ICollection`1& sectionsToNotify, IDictionary`2& sectionsWithChangedConfigSource);
    protected virtual void RefreshExternalSections(IEnumerable`1<string> sectionsToRefresh);
    private static void RefreshSingleSection(string sectionName);
    private static string SafeGetCurrentConfigurationFile();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "SystemConfigurationSourceElementDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources", "SystemConfigurationSourceElementDisplayName")]
[BrowsableAttribute("True")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement : ConfigurationSourceElement {
    public SystemConfigurationSourceElement(string name);
    public virtual IConfigurationSource CreateSource();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TimeSpanOrInfiniteConverter : TimeSpanConverter {
    public static string Infinite;
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object obj);
}
[SecurityCriticalAttribute]
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder : object {
    private IList`1<Type> instrumentedTypes;
    protected IList`1<Type> InstrumentedTypes { get; protected set; }
    protected AbstractInstallerBuilder(Type[] availableTypes, Type instrumentationAttributeType);
    public void Fill(Installer installer);
    protected IList`1<Type> get_InstrumentedTypes();
    protected void set_InstrumentedTypes(IList`1<Type> value);
    protected bool ConfirmAttributeExists(Type instrumentedType, Type attributeType);
    protected bool IsInstrumented(Type instrumentedType, Type instrumentedAttributeType);
    private Type[] FindInstrumentedTypes(Type[] reflectableTypes, Type instrumentedAttributeType);
    protected abstract virtual ICollection`1<Installer> CreateInstallers(ICollection`1<Type> instrumentedTypes);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter : object {
    private string applicationInstanceName;
    private static string InvalidCharacters;
    public AppDomainNameFormatter(string applicationInstanceName);
    public sealed virtual string CreateName(string nameSuffix);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter : object {
    private PerformanceCounter[] counters;
    private String[] instanceNames;
    private string counterName;
    private string counterCategoryName;
    public PerformanceCounter[] Counters { get; }
    public long Value { get; }
    public EnterpriseLibraryPerformanceCounter(string counterCategoryName, string counterName);
    public EnterpriseLibraryPerformanceCounter(string counterCategoryName, string counterName, String[] instanceNames);
    public EnterpriseLibraryPerformanceCounter(PerformanceCounter[] counters);
    public PerformanceCounter[] get_Counters();
    public void Clear();
    public long get_Value();
    public void Increment();
    public void IncrementBy(long value);
    public long GetValueFor(string instanceName);
    public void SetValueFor(string instanceName, long value);
    protected PerformanceCounter InstantiateCounter(string instanceName);
    public void Increment(string instanceName);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory : object {
    private Dictionary`2<string, PerformanceCounter> counterCache;
    private object lockObject;
    public EnterpriseLibraryPerformanceCounter CreateCounter(string categoryName, string counterName, String[] instanceNames);
    public void ClearCachedCounters();
}
[AttributeUsageAttribute("12")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute : Attribute {
    private string logName;
    private string sourceName;
    private int categoryCount;
    private string categoryResourceFile;
    private string messageResourceFile;
    private string parameterResourceFile;
    public string LogName { get; }
    public string SourceName { get; }
    public int CategoryCount { get; public set; }
    public string CategoryResourceFile { get; public set; }
    public string MessageResourceFile { get; public set; }
    public string ParameterResourceFile { get; public set; }
    public EventLogDefinitionAttribute(string logName, string sourceName);
    public string get_LogName();
    public string get_SourceName();
    public int get_CategoryCount();
    public void set_CategoryCount(int value);
    public string get_CategoryResourceFile();
    public void set_CategoryResourceFile(string value);
    public string get_MessageResourceFile();
    public void set_MessageResourceFile(string value);
    public string get_ParameterResourceFile();
    public void set_ParameterResourceFile(string value);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter : object {
    private string applicationName;
    private string blockName;
    private static String[] emptyExtraInformation;
    private string EntryTemplate { get; }
    public EventLogEntryFormatter(string blockName);
    public EventLogEntryFormatter(string applicationName, string blockName);
    private static EventLogEntryFormatter();
    public sealed virtual string GetEntryText(string message, String[] extraInformation);
    public sealed virtual string GetEntryText(string message, Exception exception, String[] extraInformation);
    private string BuildEntryText(string message, Exception exception, String[] extraInformation);
    private static string GetApplicationName();
    private string get_EntryTemplate();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder : AbstractInstallerBuilder {
    public EventLogInstallerBuilder(Type[] potentialTypes);
    [SecurityCriticalAttribute]
protected virtual ICollection`1<Installer> CreateInstallers(ICollection`1<Type> instrumentedTypes);
}
[AttributeUsageAttribute("12")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute : Attribute {
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter {
    public abstract virtual string GetEntryText(string message, String[] extraInformation);
    public abstract virtual string GetEntryText(string message, Exception exception, String[] extraInformation);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter {
    public abstract virtual string CreateName(string nameSuffix);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter : object {
    public sealed virtual string CreateName(string nameSuffix);
}
[AttributeUsageAttribute("256")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute : Attribute {
    private string counterName;
    private string counterHelp;
    private PerformanceCounterType counterType;
    private string baseCounterName;
    private string baseCounterHelp;
    private PerformanceCounterType baseCounterType;
    public PerformanceCounterType CounterType { get; }
    public string CounterHelp { get; }
    public string CounterName { get; }
    public PerformanceCounterType BaseCounterType { get; public set; }
    public string BaseCounterHelp { get; public set; }
    public string BaseCounterName { get; public set; }
    public PerformanceCounterAttribute(string counterName, string counterHelp, PerformanceCounterType counterType);
    public PerformanceCounterType get_CounterType();
    public string get_CounterHelp();
    public string get_CounterName();
    public PerformanceCounterType get_BaseCounterType();
    public void set_BaseCounterType(PerformanceCounterType value);
    public string get_BaseCounterHelp();
    public void set_BaseCounterHelp(string value);
    public string get_BaseCounterName();
    public void set_BaseCounterName(string value);
    public bool HasBaseCounter();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder : AbstractInstallerBuilder {
    public PerformanceCounterInstallerBuilder(Type[] availableTypes);
    private void CollectPerformanceCounters(Type instrumentedType, PerformanceCounterInstaller installer);
    [SecurityCriticalAttribute]
protected virtual ICollection`1<Installer> CreateInstallers(ICollection`1<Type> instrumentedTypes);
    public static string GetCategoryHelp(PerformanceCountersDefinitionAttribute attribute, Assembly originalAssembly);
    public static string GetCounterHelp(string resourceName, Assembly originalAssembly);
    private static CounterCreationData GetExistingCounter(PerformanceCounterInstaller installer, string counterName);
    private static PerformanceCounterInstaller GetExistingInstaller(string categoryName, IEnumerable`1<Installer> installers);
    private PerformanceCounterInstaller GetOrCreateInstaller(Type instrumentedType, ICollection`1<Installer> installers);
    private static string GetResourceString(string name, Assembly originalAssembly);
    private void PopulateCounterCategoryData(PerformanceCountersDefinitionAttribute attribute, Assembly originalAssembly, PerformanceCounterInstaller installer);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName : object {
    private static int MaxPrefixLength;
    private static int MaxSuffixLength;
    private string prefix;
    private string suffix;
    public PerformanceCounterInstanceName(string prefix, string suffix);
    public PerformanceCounterInstanceName(string prefix, string suffix, int maxPrefixLength, int maxSuffixLength);
    private static string NormalizeStringLength(string namePart, int namePartMaxLength);
    public virtual string ToString();
}
[AttributeUsageAttribute("12")]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute : Attribute {
    private PerformanceCounterCategoryType categoryType;
    private string categoryName;
    private string categoryHelp;
    public PerformanceCounterCategoryType CategoryType { get; }
    public string CategoryName { get; }
    public string CategoryHelp { get; }
    public PerformanceCountersDefinitionAttribute(string categoryName, string categoryHelp);
    public PerformanceCountersDefinitionAttribute(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType);
    public PerformanceCounterCategoryType get_CategoryType();
    public string get_CategoryName();
    public string get_CategoryHelp();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1 : Installer {
    [SecurityCriticalAttribute]
public virtual void Install(IDictionary stateSaver);
    [SecurityCriticalAttribute]
public virtual void Uninstall(IDictionary stateSaver);
    private void PrepareInstaller();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CannotCreateDesignSource { get; }
    public static string ConfigurationSourceInvalidTypeErrorMessage { get; }
    public static string EventLogEntryExceptionTemplate { get; }
    public static string EventLogEntryHeaderTemplate { get; }
    public static string ExceptionArgumentShouldDeriveFromIDictionary { get; }
    public static string ExceptionArgumentShouldDeriveFromIList { get; }
    public static string ExceptionAssemblerAttributeNotSet { get; }
    public static string ExceptionAssemblerTypeNotCompatible { get; }
    public static string ExceptionBaseConfigurationSourceElementIsInvalid { get; }
    public static string ExceptionCannotAddParametersAfterDispose { get; }
    public static string ExceptionCanNotConvertType { get; }
    public static string ExceptionCannotFinish { get; }
    public static string ExceptionConfigurationFileNotFound { get; }
    public static string ExceptionConfigurationLoadFileNotFound { get; }
    public static string ExceptionConfigurationObjectIsNotCustomProviderData { get; }
    public static string ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet { get; }
    public static string ExceptionConfigurationSectionPointsToNonExistingSource { get; }
    public static string ExceptionConfigurationSourceNotFound { get; }
    public static string ExceptionConfigurationSourceSectionNotFound { get; }
    public static string ExceptionContainerPolicyCreatorAttributeNotPresent { get; }
    public static string ExceptionCustomFactoryAttributeNotFound { get; }
    public static string ExceptionCustomProviderTypeDoesNotHaveTheRequiredConstructor { get; }
    public static string ExceptionEventRaisingFailed { get; }
    public static string ExceptionFactoryMethodHasInvalidReturnType { get; }
    public static string ExceptionIncompaitbleMergeElementType { get; }
    public static string ExceptionInvalidType { get; }
    public static string ExceptionMustBeNameTypeConfigurationElement { get; }
    public static string ExceptionMustHaveNoArgsConstructor { get; }
    public static string ExceptionMustImplementIContainerPolicyCreator { get; }
    public static string ExceptionNamedConfigurationNotFound { get; }
    public static string ExceptionNoConfigurationElementAttribute { get; }
    public static string ExceptionNoConfigurationObjectPolicySet { get; }
    public static string ExceptionNoMatchingConstructorFound { get; }
    public static string ExceptionNoMethodAnnotatedForInjectionFound { get; }
    public static string ExceptionNoSuitableFactoryMethodFound { get; }
    public static string ExceptionNoTypeAttribute { get; }
    public static string ExceptionParameterNotAnnotatedForInjection { get; }
    public static string ExceptionPerformanceCounterRedefined { get; }
    public static string ExceptionPolicyBuilderFinished { get; }
    public static string ExceptionPolicyBuilderStillWaitingForPropertyPolicy { get; }
    public static string ExceptionPropertyAccessExpressionNotPropertyAccess { get; }
    public static string ExceptionPropertyNotFound { get; }
    public static string ExceptionRedirectedConfigurationSectionNotFound { get; }
    public static string ExceptionRegistrationServiceTypeIsNotCompatible { get; }
    public static string ExceptionRegistrationTypeExpressionMustBeNewLambda { get; }
    public static string ExceptionRetrievalAttributeNotFound { get; }
    public static string ExceptionShouldBeImplementedBySubclass { get; }
    public static string ExceptionSourcePropertyDoesNotExist { get; }
    public static string ExceptionStringEmpty { get; }
    public static string ExceptionStringNullOrEmpty { get; }
    public static string ExceptionSuppliedCreationExpressionIsNotNewExpression { get; }
    public static string ExceptionSystemSourceNotDefined { get; }
    public static string ExceptionTheSpecifiedDefaultProviderDoesNotExistInConfiguration { get; }
    public static string ExceptionTypeCouldNotBeCreated { get; }
    public static string ExceptionTypeDoesNotProvideCorrectConstructor { get; }
    public static string ExceptionTypeMustDeriveFromType { get; }
    public static string ExceptionTypeMustImplementInterface { get; }
    public static string ExceptionTypeNotCustomFactory { get; }
    public static string ExceptionTypeNotNameMapper { get; }
    public static string ExceptionTypeNotRetriever { get; }
    public static string ExceptionUnableToMatchConstructorToConfigurationObject { get; }
    public static string ExceptionUnexpectedType { get; }
    public static string ExceptionUnknownResolveMethod { get; }
    public static string ExceptionUnrecognizedContainerMarkerMethod { get; }
    public static string ExceptionUnrecognizedDependencyParameterType { get; }
    public static string ExceptionUnsupportedBindingExpressionType { get; }
    public static string FileConfigurationSourceName { get; }
    public static string SystemConfigurationSourceName { get; }
    public static string TypesAreNotAssignable { get; }
    public static string UnknownType { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CannotCreateDesignSource();
    public static string get_ConfigurationSourceInvalidTypeErrorMessage();
    public static string get_EventLogEntryExceptionTemplate();
    public static string get_EventLogEntryHeaderTemplate();
    public static string get_ExceptionArgumentShouldDeriveFromIDictionary();
    public static string get_ExceptionArgumentShouldDeriveFromIList();
    public static string get_ExceptionAssemblerAttributeNotSet();
    public static string get_ExceptionAssemblerTypeNotCompatible();
    public static string get_ExceptionBaseConfigurationSourceElementIsInvalid();
    public static string get_ExceptionCannotAddParametersAfterDispose();
    public static string get_ExceptionCanNotConvertType();
    public static string get_ExceptionCannotFinish();
    public static string get_ExceptionConfigurationFileNotFound();
    public static string get_ExceptionConfigurationLoadFileNotFound();
    public static string get_ExceptionConfigurationObjectIsNotCustomProviderData();
    public static string get_ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet();
    public static string get_ExceptionConfigurationSectionPointsToNonExistingSource();
    public static string get_ExceptionConfigurationSourceNotFound();
    public static string get_ExceptionConfigurationSourceSectionNotFound();
    public static string get_ExceptionContainerPolicyCreatorAttributeNotPresent();
    public static string get_ExceptionCustomFactoryAttributeNotFound();
    public static string get_ExceptionCustomProviderTypeDoesNotHaveTheRequiredConstructor();
    public static string get_ExceptionEventRaisingFailed();
    public static string get_ExceptionFactoryMethodHasInvalidReturnType();
    public static string get_ExceptionIncompaitbleMergeElementType();
    public static string get_ExceptionInvalidType();
    public static string get_ExceptionMustBeNameTypeConfigurationElement();
    public static string get_ExceptionMustHaveNoArgsConstructor();
    public static string get_ExceptionMustImplementIContainerPolicyCreator();
    public static string get_ExceptionNamedConfigurationNotFound();
    public static string get_ExceptionNoConfigurationElementAttribute();
    public static string get_ExceptionNoConfigurationObjectPolicySet();
    public static string get_ExceptionNoMatchingConstructorFound();
    public static string get_ExceptionNoMethodAnnotatedForInjectionFound();
    public static string get_ExceptionNoSuitableFactoryMethodFound();
    public static string get_ExceptionNoTypeAttribute();
    public static string get_ExceptionParameterNotAnnotatedForInjection();
    public static string get_ExceptionPerformanceCounterRedefined();
    public static string get_ExceptionPolicyBuilderFinished();
    public static string get_ExceptionPolicyBuilderStillWaitingForPropertyPolicy();
    public static string get_ExceptionPropertyAccessExpressionNotPropertyAccess();
    public static string get_ExceptionPropertyNotFound();
    public static string get_ExceptionRedirectedConfigurationSectionNotFound();
    public static string get_ExceptionRegistrationServiceTypeIsNotCompatible();
    public static string get_ExceptionRegistrationTypeExpressionMustBeNewLambda();
    public static string get_ExceptionRetrievalAttributeNotFound();
    public static string get_ExceptionShouldBeImplementedBySubclass();
    public static string get_ExceptionSourcePropertyDoesNotExist();
    public static string get_ExceptionStringEmpty();
    public static string get_ExceptionStringNullOrEmpty();
    public static string get_ExceptionSuppliedCreationExpressionIsNotNewExpression();
    public static string get_ExceptionSystemSourceNotDefined();
    public static string get_ExceptionTheSpecifiedDefaultProviderDoesNotExistInConfiguration();
    public static string get_ExceptionTypeCouldNotBeCreated();
    public static string get_ExceptionTypeDoesNotProvideCorrectConstructor();
    public static string get_ExceptionTypeMustDeriveFromType();
    public static string get_ExceptionTypeMustImplementInterface();
    public static string get_ExceptionTypeNotCustomFactory();
    public static string get_ExceptionTypeNotNameMapper();
    public static string get_ExceptionTypeNotRetriever();
    public static string get_ExceptionUnableToMatchConstructorToConfigurationObject();
    public static string get_ExceptionUnexpectedType();
    public static string get_ExceptionUnknownResolveMethod();
    public static string get_ExceptionUnrecognizedContainerMarkerMethod();
    public static string get_ExceptionUnrecognizedDependencyParameterType();
    public static string get_ExceptionUnsupportedBindingExpressionType();
    public static string get_FileConfigurationSourceName();
    public static string get_SystemConfigurationSourceName();
    public static string get_TypesAreNotAssignable();
    public static string get_UnknownType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter : object {
    private List`1<ReplacementToken> tokens;
    public ReplacementFormatter(ReplacementToken[] tokens);
    public ReplacementFormatter(IEnumerable`1<ReplacementToken> tokens);
    public void Add(ReplacementToken[] tokens);
    public void AddRange(IEnumerable`1<ReplacementToken> tokens);
    public string Format(string template);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.ReplacementTextDelegate : MulticastDelegate {
    public ReplacementTextDelegate(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken : object {
    private string token;
    private ReplacementTextDelegate getReplacementText;
    public string Token { get; }
    public string ReplacementText { get; }
    public ReplacementToken(string token, ReplacementTextDelegate getReplacementText);
    public string get_Token();
    public string get_ReplacementText();
    public void ReplaceToken(StringBuilder sb);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader : object {
    public static string LoadString(string baseName, string resourceName);
    public static string LoadString(string baseName, string resourceName, Assembly asm);
    private static string SearchForResource(Assembly asm, string resourceName);
    private static string LoadAssemblyString(Assembly asm, string baseName, string resourceName);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver : object {
    private string value;
    public ConstantStringResolver(string value);
    private sealed virtual override string Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver : object {
    private Func`1<string> resolverDelegate;
    public DelegateStringResolver(Func`1<string> resolverDelegate);
    private sealed virtual override string Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString();
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> sequence, Action`1<T> action);
    [IteratorStateMachineAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions/<Zip>d__1`3")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<T1> sequence1, IEnumerable`1<T2> sequence2, Func`3<T1, T2, TResult> zipper);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<T1, T2>> Zip(IEnumerable`1<T1> sequence1, IEnumerable`1<T2> sequence2);
    [ExtensionAttribute]
public static IDictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<TKey> keys, IEnumerable`1<TValue> values);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Utility.Guard : object {
    public static void ArgumentNotNull(object argumentValue, string argumentName);
    public static void ArgumentNotNullOrEmpty(string argumentValue, string argumentName);
    public static void InstanceIsAssignable(Type assignmentTargetType, object assignmentInstance, string argumentName);
    private static string GetTypeName(object assignmentInstance);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver {
    public abstract virtual string GetString();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver : object {
    private Type resourceType;
    private string resourceName;
    private string fallbackValue;
    public ResourceStringResolver(Type resourceType, string resourceName, string fallbackValue);
    public ResourceStringResolver(string resourceTypeName, string resourceName, string fallbackValue);
    private static Type LoadType(string resourceTypeName);
    private sealed virtual override string Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString();
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Utility.StaticReflection : object {
    public static MethodInfo GetMethodInfo(Expression`1<Action> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Action`1<T>> expression);
    private static MethodInfo GetMethodInfo(LambdaExpression lambda);
    public static MethodInfo GetPropertyGetMethodInfo(Expression`1<Func`2<T, TProperty>> expression);
    public static MethodInfo GetPropertySetMethodInfo(Expression`1<Func`2<T, TProperty>> expression);
    private static PropertyInfo GetPropertyInfo(LambdaExpression lambda);
    public static MemberInfo GetMemberInfo(Expression`1<Func`2<T, TProperty>> expression);
    public static ConstructorInfo GetConstructorInfo(Expression`1<Func`1<T>> expression);
    private static void GuardProperExpressionForm(Expression expression);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Utility.TypeExtensions : object {
    [ExtensionAttribute]
public static Type FindGenericParent(Type rootType, Type parentType);
}
public static class Microsoft.Practices.EnterpriseLibrary.Common.Utility.WrappedAsyncOperation : object {
    public static IAsyncResult BeginAsyncOperation(AsyncCallback callback, Func`2<AsyncCallback, IAsyncResult> beginOperation, Func`2<IAsyncResult, TWrappingAsyncResult> wrappingResultCreator);
}
