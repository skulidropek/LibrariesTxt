[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DatabaseProviderExtensions : object {
    [ExtensionAttribute]
public static IDatabaseSqlDatabaseConfiguration ASqlDatabase(IDatabaseConfigurationProviders context);
    [ExtensionAttribute]
public static IDatabaseSqlCeDatabaseConfiguration ASqlCeDatabase(IDatabaseConfigurationProviders context);
    [ExtensionAttribute]
public static IOleDbDatabaseConfiguration AnOleDbDatabase(IDatabaseConfigurationProviders context);
    [ExtensionAttribute]
public static IOdbcDatabaseConfiguration AnOdbcDatabase(IDatabaseConfigurationProviders context);
    [ExtensionAttribute]
[ObsoleteAttribute("OracleDatabase has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", "False")]
public static IDatabaseOracleConfiguration AnOracleDatabase(IDatabaseConfigurationProviders context);
    [ExtensionAttribute]
public static IDatabaseAnotherDatabaseConfiguration AnotherDatabaseType(IDatabaseConfigurationProviders context, string providerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DataConfigurationSourceBuilderExtensions : object {
    [ExtensionAttribute]
public static IDataConfiguration ConfigureData(IConfigurationSourceBuilder configurationSourceBuilderRoot);
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism : object {
    private Hashtable paramCache;
    public static IDataParameter[] CloneParameters(IDataParameter[] originalParameters);
    public void Clear();
    public void AddParameterSetToCache(string connectionString, IDbCommand command, IDataParameter[] parameters);
    public IDataParameter[] GetCachedParameterSet(string connectionString, IDbCommand command);
    public bool IsParameterSetCached(string connectionString, IDbCommand command);
    private static string CreateHashKey(string connectionString, string storedProcedure);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.ColumnNameMapping : PropertyMapping {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public string ColumnName { get; private set; }
    public ColumnNameMapping(PropertyInfo property, string columnName);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    public virtual object GetPropertyValue(IDataRecord row);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.CommandAccessor`1 : DataAccessor`1<TResult> {
    private IResultSetMapper`1<TResult> resultSetMapper;
    private Database database;
    protected Database Database { get; }
    protected CommandAccessor`1(Database database, IRowMapper`1<TResult> rowMapper);
    protected CommandAccessor`1(Database database, IResultSetMapper`1<TResult> resultSetMapper);
    protected Database get_Database();
    protected IEnumerable`1<TResult> Execute(DbCommand command);
    protected IAsyncResult BeginExecute(DbCommand command, IParameterMapper parameterMapper, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IEnumerable`1<TResult> EndExecute(IAsyncResult asyncResult);
    protected void GuardAsyncAllowed();
}
public static class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DataAccessDesignTime : object {
    public static string ConnectionStringSettingsSectionName;
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseData : object {
    [CompilerGeneratedAttribute]
private ConnectionStringSettings <ConnectionStringSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, ConfigurationSection> <ConfigurationSource>k__BackingField;
    protected ConnectionStringSettings ConnectionStringSettings { get; private set; }
    protected Func`2<string, ConfigurationSection> ConfigurationSource { get; private set; }
    public string Name { get; }
    public string ConnectionString { get; }
    protected DatabaseData(ConnectionStringSettings connectionStringSettings, Func`2<string, ConfigurationSection> configurationSource);
    [CompilerGeneratedAttribute]
protected ConnectionStringSettings get_ConnectionStringSettings();
    [CompilerGeneratedAttribute]
private void set_ConnectionStringSettings(ConnectionStringSettings value);
    [CompilerGeneratedAttribute]
protected Func`2<string, ConfigurationSection> get_ConfigurationSource();
    [CompilerGeneratedAttribute]
private void set_ConfigurationSource(Func`2<string, ConfigurationSection> value);
    public string get_Name();
    public string get_ConnectionString();
    public abstract virtual Database BuildDatabase();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings : SerializableConfigurationSection {
    private static string defaultDatabaseProperty;
    private static string dbProviderMappingsProperty;
    public static string SectionName;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsDefaultDatabaseDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsDefaultDatabaseDisplayName")]
[ConfigurationPropertyAttribute("defaultDatabase")]
[ReferenceAttribute("System.Configuration.ConnectionStringSettingsCollection", "System.Configuration.ConnectionStringSettings")]
public string DefaultDatabase { get; public set; }
    [ConfigurationPropertyAttribute("providerMappings")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsProviderMappingsDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DatabaseSettingsProviderMappingsDisplayName")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DbProviderMapping")]
public NamedElementCollection`1<DbProviderMapping> ProviderMappings { get; }
    public static DatabaseSettings GetDatabaseSettings(IConfigurationSource configurationSource);
    public string get_DefaultDatabase();
    public void set_DefaultDatabase(string value);
    public NamedElementCollection`1<DbProviderMapping> get_ProviderMappings();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSyntheticConfigSettings : object {
    private static DbProviderMapping defaultSqlMapping;
    private static DbProviderMapping defaultOracleMapping;
    private static DbProviderMapping defaultGenericMapping;
    private Func`2<string, ConfigurationSection> configurationSource;
    public string DefaultDatabase { get; }
    public IEnumerable`1<DatabaseData> Databases { get; }
    public DatabaseSyntheticConfigSettings(IConfigurationSource configurationSource);
    public DatabaseSyntheticConfigSettings(Func`2<string, ConfigurationSection> configurationSource);
    private static DatabaseSyntheticConfigSettings();
    public string get_DefaultDatabase();
    public IEnumerable`1<DatabaseData> get_Databases();
    public ConnectionStringSettings GetConnectionStringSettings(string name);
    public DatabaseData GetDatabase(string name);
    private static void ValidateConnectionStringSettings(string name, ConnectionStringSettings connectionStringSettings);
    private ConnectionStringSettingsCollection GetConnectionStrings();
    private static bool IsValidProviderName(string providerName);
    private DatabaseData GetDatabaseData(ConnectionStringSettings connectionString, DatabaseSettings databaseSettings);
    private static ConfigurationElementTypeAttribute GetAttribute(Type databaseType);
    private static DatabaseData CreateDatabaseData(Type configurationElementType, ConnectionStringSettings settings, Func`2<string, ConfigurationSection> source);
    public DbProviderMapping GetProviderMapping(string dbProviderName);
    private static DbProviderMapping GetProviderMapping(string dbProviderName, DatabaseSettings databaseSettings);
    private static DbProviderMapping GetDefaultMapping(string dbProviderName);
    private static DbProviderMapping GetGenericMapping();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DbProviderMappingDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DbProviderMappingDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DbProviderMapping : NamedConfigurationElement {
    public static string DefaultSqlProviderName;
    public static string DefaultOracleProviderName;
    internal static string DefaultGenericProviderName;
    private static string databaseTypeProperty;
    private static AssemblyQualifiedTypeNameConverter typeConverter;
    public Type DatabaseType { get; public set; }
    [BaseTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Database")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.TypeSelectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ConfigurationPropertyAttribute("databaseType")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DbProviderMappingDatabaseTypeNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources", "DbProviderMappingDatabaseTypeNameDisplayName")]
public string DatabaseTypeName { get; public set; }
    public string DbProviderName { get; }
    public string Name { get; public set; }
    public DbProviderMapping(string dbProviderName, Type databaseType);
    public DbProviderMapping(string dbProviderName, string databaseTypeName);
    private static DbProviderMapping();
    public Type get_DatabaseType();
    public void set_DatabaseType(Type value);
    public string get_DatabaseTypeName();
    public void set_DatabaseTypeName(string value);
    public string get_DbProviderName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DesignResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddDataSettings { get; }
    internal static string CategoryName { get; }
    internal static string ConnectionStringSettingsCollectionMetadataDescription { get; }
    internal static string ConnectionStringSettingsCollectionMetadataDisplayName { get; }
    internal static string ConnectionStringSettingsMetadataConnectionStringDescription { get; }
    internal static string ConnectionStringSettingsMetadataConnectionStringDisplayName { get; }
    internal static string ConnectionStringSettingsMetadataDescription { get; }
    internal static string ConnectionStringSettingsMetadataDisplayName { get; }
    internal static string ConnectionStringSettingsMetadataNameDescription { get; }
    internal static string ConnectionStringSettingsMetadataNameDisplayName { get; }
    internal static string ConnectionStringSettingsMetadataProviderNameDescription { get; }
    internal static string ConnectionStringSettingsMetadataProviderNameDisplayName { get; }
    internal static string ConnectionStringsSectionMetadataDescription { get; }
    internal static string ConnectionStringsSectionMetadataDisplayName { get; }
    internal static string DatabaseSettingsDefaultDatabaseDescription { get; }
    internal static string DatabaseSettingsDefaultDatabaseDisplayName { get; }
    internal static string DatabaseSettingsDescription { get; }
    internal static string DatabaseSettingsDisplayName { get; }
    internal static string DatabaseSettingsProviderMappingsDescription { get; }
    internal static string DatabaseSettingsProviderMappingsDisplayName { get; }
    internal static string DbProviderMappingDatabaseTypeNameDescription { get; }
    internal static string DbProviderMappingDatabaseTypeNameDisplayName { get; }
    internal static string DbProviderMappingDescription { get; }
    internal static string DbProviderMappingDisplayName { get; }
    internal static string DbProviderMappingNameDescription { get; }
    internal static string DbProviderMappingNameDisplayName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddDataSettings();
    internal static string get_CategoryName();
    internal static string get_ConnectionStringSettingsCollectionMetadataDescription();
    internal static string get_ConnectionStringSettingsCollectionMetadataDisplayName();
    internal static string get_ConnectionStringSettingsMetadataConnectionStringDescription();
    internal static string get_ConnectionStringSettingsMetadataConnectionStringDisplayName();
    internal static string get_ConnectionStringSettingsMetadataDescription();
    internal static string get_ConnectionStringSettingsMetadataDisplayName();
    internal static string get_ConnectionStringSettingsMetadataNameDescription();
    internal static string get_ConnectionStringSettingsMetadataNameDisplayName();
    internal static string get_ConnectionStringSettingsMetadataProviderNameDescription();
    internal static string get_ConnectionStringSettingsMetadataProviderNameDisplayName();
    internal static string get_ConnectionStringsSectionMetadataDescription();
    internal static string get_ConnectionStringsSectionMetadataDisplayName();
    internal static string get_DatabaseSettingsDefaultDatabaseDescription();
    internal static string get_DatabaseSettingsDefaultDatabaseDisplayName();
    internal static string get_DatabaseSettingsDescription();
    internal static string get_DatabaseSettingsDisplayName();
    internal static string get_DatabaseSettingsProviderMappingsDescription();
    internal static string get_DatabaseSettingsProviderMappingsDisplayName();
    internal static string get_DbProviderMappingDatabaseTypeNameDescription();
    internal static string get_DbProviderMappingDatabaseTypeNameDisplayName();
    internal static string get_DbProviderMappingDescription();
    internal static string get_DbProviderMappingDisplayName();
    internal static string get_DbProviderMappingNameDescription();
    internal static string get_DbProviderMappingNameDisplayName();
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.AnotherDatabaseConfigurationExtensions : DatabaseConfigurationExtension {
    public AnotherDatabaseConfigurationExtensions(IDatabaseConfigurationProviders context, string providerName);
    private sealed virtual override IDatabaseAnotherDatabaseConfiguration Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseAnotherDatabaseConfiguration.WithConnectionString(DbConnectionStringBuilder builder);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.DatabaseConfigurationExtension : object {
    private IDatabaseConfigurationProperties context;
    public IDatabaseConfigurationProviders ThatIs { get; }
    public ConnectionStringSettings ConnectionString { get; }
    public IConfigurationSourceBuilder Builder { get; }
    protected DatabaseConfigurationExtension(IDatabaseConfigurationProviders context);
    public sealed virtual IDatabaseConfigurationProviders get_ThatIs();
    public sealed virtual IDatabaseConfigurationProperties ForDatabaseNamed(string databaseName);
    public sealed virtual IDatabaseConfigurationProperties AsDefault();
    public ConnectionStringSettings get_ConnectionString();
    public IConfigurationSourceBuilder get_Builder();
    public sealed virtual IDatabaseConfigurationProperties WithConnectionString(string connectionString);
    public IDatabaseConfigurationProperties WithConnectionString(DbConnectionStringBuilder builder);
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseAnotherDatabaseConfiguration {
    public abstract virtual IDatabaseAnotherDatabaseConfiguration WithConnectionString(DbConnectionStringBuilder builder);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseConfiguration {
    public abstract virtual IDatabaseConfigurationProperties ForDatabaseNamed(string databaseName);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseConfigurationProperties {
    public abstract virtual IDatabaseConfigurationProperties AsDefault();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseConfigurationProviderEntry {
    public IDatabaseConfigurationProviders ThatIs { get; }
    public abstract virtual IDatabaseConfigurationProviders get_ThatIs();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseConfigurationProviders {
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseDefaultConnectionString {
    public abstract virtual IDatabaseConfigurationProperties WithConnectionString(string connectionString);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseOracleConfiguration {
    public abstract virtual IDatabaseOracleConfiguration WithConnectionString(string connectionString);
    public abstract virtual IDatabaseOracleConfiguration WithConnectionString(OracleConnectionStringBuilder builder);
    public abstract virtual IDatabaseOraclePackageConfiguration WithPackageNamed(string name);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseOraclePackageConfiguration {
    public abstract virtual IDatabaseConfigurationProperties AndPrefix(string prefix);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseProviderConfiguration {
    public abstract virtual IDataConfiguration MappedToDatabase(Type databaseType);
    public abstract virtual IDataConfiguration MappedToDatabase();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseProviderExtensionContext {
    public ConnectionStringSettings ConnectionString { get; }
    public IConfigurationSourceBuilder Builder { get; }
    public abstract virtual ConnectionStringSettings get_ConnectionString();
    public abstract virtual IConfigurationSourceBuilder get_Builder();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseSqlCeDatabaseConfiguration {
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseSqlDatabaseConfiguration {
    public abstract virtual IDatabaseConfigurationProperties WithConnectionString(SqlConnectionStringBuilder builder);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDataConfiguration {
    public abstract virtual IDatabaseProviderConfiguration WithProviderNamed(string providerName);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IOdbcDatabaseConfiguration {
    public abstract virtual IDatabaseConfigurationProperties WithConnectionString(OdbcConnectionStringBuilder builder);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IOleDbDatabaseConfiguration {
    public abstract virtual IDatabaseConfigurationProperties WithConnectionString(OleDbConnectionStringBuilder builder);
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.OdbcConfigurationExtension : DatabaseConfigurationExtension {
    public OdbcConfigurationExtension(IDatabaseConfigurationProviders context);
    public sealed virtual IDatabaseConfigurationProperties WithConnectionString(OdbcConnectionStringBuilder builder);
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.OleDbConfigurationExtension : DatabaseConfigurationExtension {
    public OleDbConfigurationExtension(IDatabaseConfigurationProviders context);
    public sealed virtual IDatabaseConfigurationProperties WithConnectionString(OleDbConnectionStringBuilder builder);
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.OracleConfigurationExtension : DatabaseConfigurationExtension {
    private OracleConnectionSettings currentOracleSettings;
    private OraclePackageData currentOraclePackageData;
    private OracleConnectionData currentOracleConnectionData;
    public OracleConfigurationExtension(IDatabaseConfigurationProviders context);
    private sealed virtual override IDatabaseOracleConfiguration Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseOracleConfiguration.WithConnectionString(string connectionString);
    private sealed virtual override IDatabaseOracleConfiguration Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseOracleConfiguration.WithConnectionString(OracleConnectionStringBuilder builder);
    private sealed virtual override IDatabaseConfigurationProperties Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.IDatabaseOraclePackageConfiguration.AndPrefix(string prefix);
    public sealed virtual IDatabaseOraclePackageConfiguration WithPackageNamed(string name);
    private void EnsureOracleSettings();
    private void EnsureOracleConnectionData();
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.SqlCeDatabaseConfigurationExtension : DatabaseConfigurationExtension {
    public SqlCeDatabaseConfigurationExtension(IDatabaseConfigurationProviders context);
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.Fluent.SqlDatabaseConfigurationExtension : DatabaseConfigurationExtension {
    public SqlDatabaseConfigurationExtension(IDatabaseConfigurationProviders context);
    public sealed virtual IDatabaseConfigurationProperties WithConnectionString(SqlConnectionStringBuilder builder);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Configuration.GenericDatabaseData : DatabaseData {
    public string ProviderName { get; }
    public GenericDatabaseData(ConnectionStringSettings connectionStringSettings, Func`2<string, ConfigurationSection> configurationSource);
    public string get_ProviderName();
    public virtual Database BuildDatabase();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString : object {
    private static char CONNSTRING_DELIM;
    private string connectionString;
    private string connectionStringWithoutCredentials;
    private string userIdTokens;
    private string passwordTokens;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public ConnectionString(string connectionString, string userIdTokens, string passwordTokens);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public virtual string ToString();
    public string ToStringNoCredentials();
    public ConnectionString CreateNewConnectionString(string connectionStringToFormat);
    private void GetTokenPositions(string tokenString, Int32& tokenPos, Int32& tokenMPos);
    private string RemoveCredentials(string connectionStringToModify);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.DaabAsyncResult : object {
    private IAsyncResult innerAsyncResult;
    private DbCommand command;
    private bool disposeCommand;
    private bool closeConnection;
    private DateTime startTime;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public IAsyncResult InnerAsyncResult { get; }
    public bool DisposeCommand { get; }
    public DbCommand Command { get; }
    public bool CloseConnection { get; }
    public DbConnection Connection { get; }
    public DateTime StartTime { get; }
    public DaabAsyncResult(IAsyncResult innerAsyncResult, DbCommand command, bool disposeCommand, bool closeConnection, DateTime startTime);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public IAsyncResult get_InnerAsyncResult();
    public bool get_DisposeCommand();
    public DbCommand get_Command();
    public bool get_CloseConnection();
    public DbConnection get_Connection();
    public DateTime get_StartTime();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.DataAccessor`1 : object {
    public abstract virtual IEnumerable`1<TResult> Execute(Object[] parameterValues);
    public abstract virtual IAsyncResult BeginExecute(AsyncCallback callback, object state, Object[] parameterValues);
    public abstract virtual IEnumerable`1<TResult> EndExecute(IAsyncResult asyncResult);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.Database : object {
    private static ParameterCache parameterCache;
    private static string VALID_PASSWORD_TOKENS;
    private static string VALID_USER_ID_TOKENS;
    private ConnectionString connectionString;
    private DbProviderFactory dbProviderFactory;
    public string ConnectionString { get; }
    protected string ConnectionStringNoCredentials { get; }
    public string ConnectionStringWithoutCredentials { get; }
    public DbProviderFactory DbProviderFactory { get; }
    public bool SupportsParemeterDiscovery { get; }
    public bool SupportsAsync { get; }
    protected Database(string connectionString, DbProviderFactory dbProviderFactory);
    private static Database();
    public string get_ConnectionString();
    protected string get_ConnectionStringNoCredentials();
    public string get_ConnectionStringWithoutCredentials();
    public DbProviderFactory get_DbProviderFactory();
    public void AddInParameter(DbCommand command, string name, DbType dbType);
    public void AddInParameter(DbCommand command, string name, DbType dbType, object value);
    public void AddInParameter(DbCommand command, string name, DbType dbType, string sourceColumn, DataRowVersion sourceVersion);
    public void AddOutParameter(DbCommand command, string name, DbType dbType, int size);
    public virtual void AddParameter(DbCommand command, string name, DbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public void AddParameter(DbCommand command, string name, DbType dbType, ParameterDirection direction, string sourceColumn, DataRowVersion sourceVersion, object value);
    private void AssignParameterValues(DbCommand command, Object[] values);
    private static DbTransaction BeginTransaction(DbConnection connection);
    public virtual string BuildParameterName(string name);
    public static void ClearParameterCache();
    private static void CommitTransaction(IDbTransaction tran);
    protected virtual void ConfigureParameter(DbParameter param, string name, DbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    private DbCommand CreateCommandByCommandType(CommandType commandType, string commandText);
    public virtual DbConnection CreateConnection();
    protected DbParameter CreateParameter(string name, DbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    protected DbParameter CreateParameter(string name);
    public virtual bool get_SupportsParemeterDiscovery();
    protected abstract virtual void DeriveParameters(DbCommand discoveryCommand);
    public void DiscoverParameters(DbCommand command);
    protected int DoExecuteNonQuery(DbCommand command);
    private IDataReader DoExecuteReader(DbCommand command, CommandBehavior cmdBehavior);
    private object DoExecuteScalar(IDbCommand command);
    private void DoLoadDataSet(IDbCommand command, DataSet dataSet, String[] tableNames);
    private int DoUpdateDataSet(UpdateBehavior behavior, DataSet dataSet, string tableName, IDbCommand insertCommand, IDbCommand updateCommand, IDbCommand deleteCommand, Nullable`1<int> updateBatchSize);
    public virtual DataSet ExecuteDataSet(DbCommand command);
    public virtual DataSet ExecuteDataSet(DbCommand command, DbTransaction transaction);
    public virtual DataSet ExecuteDataSet(string storedProcedureName, Object[] parameterValues);
    public virtual DataSet ExecuteDataSet(DbTransaction transaction, string storedProcedureName, Object[] parameterValues);
    public virtual DataSet ExecuteDataSet(CommandType commandType, string commandText);
    public virtual DataSet ExecuteDataSet(DbTransaction transaction, CommandType commandType, string commandText);
    public virtual int ExecuteNonQuery(DbCommand command);
    public virtual int ExecuteNonQuery(DbCommand command, DbTransaction transaction);
    public virtual int ExecuteNonQuery(string storedProcedureName, Object[] parameterValues);
    public virtual int ExecuteNonQuery(DbTransaction transaction, string storedProcedureName, Object[] parameterValues);
    public virtual int ExecuteNonQuery(CommandType commandType, string commandText);
    public virtual int ExecuteNonQuery(DbTransaction transaction, CommandType commandType, string commandText);
    public virtual IDataReader ExecuteReader(DbCommand command);
    protected virtual IDataReader CreateWrappedReader(DatabaseConnectionWrapper connection, IDataReader innerReader);
    public virtual IDataReader ExecuteReader(DbCommand command, DbTransaction transaction);
    public IDataReader ExecuteReader(string storedProcedureName, Object[] parameterValues);
    public IDataReader ExecuteReader(DbTransaction transaction, string storedProcedureName, Object[] parameterValues);
    public IDataReader ExecuteReader(CommandType commandType, string commandText);
    public IDataReader ExecuteReader(DbTransaction transaction, CommandType commandType, string commandText);
    public virtual object ExecuteScalar(DbCommand command);
    public virtual object ExecuteScalar(DbCommand command, DbTransaction transaction);
    public virtual object ExecuteScalar(string storedProcedureName, Object[] parameterValues);
    public virtual object ExecuteScalar(DbTransaction transaction, string storedProcedureName, Object[] parameterValues);
    public virtual object ExecuteScalar(CommandType commandType, string commandText);
    public virtual object ExecuteScalar(DbTransaction transaction, CommandType commandType, string commandText);
    public DbDataAdapter GetDataAdapter();
    protected DbDataAdapter GetDataAdapter(UpdateBehavior updateBehavior);
    internal DbConnection GetNewOpenConnection();
    protected DatabaseConnectionWrapper GetOpenConnection();
    protected virtual DatabaseConnectionWrapper GetWrappedConnection();
    public virtual object GetParameterValue(DbCommand command, string name);
    public DbCommand GetSqlStringCommand(string query);
    public virtual DbCommand GetStoredProcCommand(string storedProcedureName);
    public virtual DbCommand GetStoredProcCommand(string storedProcedureName, Object[] parameterValues);
    public virtual void AssignParameters(DbCommand command, Object[] parameterValues);
    public DbCommand GetStoredProcCommandWithSourceColumns(string storedProcedureName, String[] sourceColumns);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, string tableName);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, string tableName, DbTransaction transaction);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, String[] tableNames);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, String[] tableNames, DbTransaction transaction);
    public virtual void LoadDataSet(string storedProcedureName, DataSet dataSet, String[] tableNames, Object[] parameterValues);
    public virtual void LoadDataSet(DbTransaction transaction, string storedProcedureName, DataSet dataSet, String[] tableNames, Object[] parameterValues);
    public virtual void LoadDataSet(CommandType commandType, string commandText, DataSet dataSet, String[] tableNames);
    public void LoadDataSet(DbTransaction transaction, CommandType commandType, string commandText, DataSet dataSet, String[] tableNames);
    protected static void PrepareCommand(DbCommand command, DbConnection connection);
    protected static void PrepareCommand(DbCommand command, DbTransaction transaction);
    private static void RollbackTransaction(IDbTransaction tran);
    protected virtual bool SameNumberOfParametersAndValues(DbCommand command, Object[] values);
    public virtual void SetParameterValue(DbCommand command, string parameterName, object value);
    protected virtual void SetUpRowUpdatedEvent(DbDataAdapter adapter);
    public int UpdateDataSet(DataSet dataSet, string tableName, DbCommand insertCommand, DbCommand updateCommand, DbCommand deleteCommand, UpdateBehavior updateBehavior, Nullable`1<int> updateBatchSize);
    public int UpdateDataSet(DataSet dataSet, string tableName, DbCommand insertCommand, DbCommand updateCommand, DbCommand deleteCommand, UpdateBehavior updateBehavior);
    public int UpdateDataSet(DataSet dataSet, string tableName, DbCommand insertCommand, DbCommand updateCommand, DbCommand deleteCommand, DbTransaction transaction, Nullable`1<int> updateBatchSize);
    public int UpdateDataSet(DataSet dataSet, string tableName, DbCommand insertCommand, DbCommand updateCommand, DbCommand deleteCommand, DbTransaction transaction);
    public virtual bool get_SupportsAsync();
    public virtual IAsyncResult BeginExecuteNonQuery(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteNonQuery(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteNonQuery(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual int EndExecuteNonQuery(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginExecuteReader(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteReader(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteReader(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IDataReader EndExecuteReader(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginExecuteScalar(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteScalar(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteScalar(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual object EndExecuteScalar(IAsyncResult asyncResult);
    private void AsyncNotSupported();
    protected virtual int UserParametersStartIndex();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConnectionWrapper : object {
    private int refCount;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    public DbConnection Connection { get; private set; }
    public bool IsDisposed { get; }
    public DatabaseConnectionWrapper(DbConnection connection);
    [CompilerGeneratedAttribute]
public DbConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(DbConnection value);
    public bool get_IsDisposed();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public DatabaseConnectionWrapper AddRef();
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Data.DatabaseExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, Object[] parameterValues);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper, Object[] parameterValues);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, IRowMapper`1<TResult> rowMapper, Object[] parameterValues);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper, IRowMapper`1<TResult> rowMapper, Object[] parameterValues);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, IResultSetMapper`1<TResult> resultSetMapper, Object[] parameterValues);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper, IResultSetMapper`1<TResult> resultSetMapper, Object[] parameterValues);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName, IRowMapper`1<TResult> rowMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper, IRowMapper`1<TResult> rowMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName, IResultSetMapper`1<TResult> resultSetMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSprocAccessor(Database database, string procedureName, IParameterMapper parameterMapper, IResultSetMapper`1<TResult> resultSetMapper);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSqlStringAccessor(Database database, string sqlString);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSqlStringAccessor(Database database, string sqlString, IResultSetMapper`1<TResult> resultSetMapper);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ExecuteSqlStringAccessor(Database database, string sqlString, IRowMapper`1<TResult> rowMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString, IParameterMapper parameterMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString, IRowMapper`1<TResult> rowMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString, IResultSetMapper`1<TResult> resultSetMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString, IParameterMapper parameterMapper, IRowMapper`1<TResult> rowMapper);
    [ExtensionAttribute]
public static DataAccessor`1<TResult> CreateSqlStringAccessor(Database database, string sqlString, IParameterMapper parameterMapper, IResultSetMapper`1<TResult> resultSetMapper);
}
public static class Microsoft.Practices.EnterpriseLibrary.Data.DatabaseFactory : object {
    private static Func`2 modreq(System.Runtime.CompilerServices.IsVolatile) createNamedDatabase;
    private static Func`1 modreq(System.Runtime.CompilerServices.IsVolatile) createDefaultDatabase;
    public static Database CreateDatabase();
    public static Database CreateDatabase(string name);
    public static void SetDatabaseProviderFactory(DatabaseProviderFactory factory, bool throwIfSet);
    public static void SetDatabases(Func`1<Database> createDefaultDatabase, Func`2<string, Database> createNamedDatabase, bool throwIfSet);
    public static void ClearDatabaseProviderFactory();
    private static Func`2<string, Database> GetCreateDatabase();
    private static Func`1<Database> GetCreateDefaultDatabase();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory : object {
    private DatabaseConfigurationBuilder builder;
    [CompilerGeneratedAttribute]
private static Func`2<string, ConfigurationSection> CS$<>9__CachedAnonymousMethodDelegate1;
    public DatabaseProviderFactory(IConfigurationSource configurationSource);
    public DatabaseProviderFactory(Func`2<string, ConfigurationSection> configurationAccessor);
    public Database CreateDefault();
    public Database Create(string name);
    [CompilerGeneratedAttribute]
private static ConfigurationSection <.ctor>b__0(string s);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.DataReaderWrapper : MarshalByRefObject {
    private IDataReader innerReader;
    public IDataReader InnerReader { get; }
    public int FieldCount { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    private object System.Data.IDataRecord.Item { get; }
    private object System.Data.IDataRecord.Item { get; }
    protected DataReaderWrapper(IDataReader innerReader);
    public IDataReader get_InnerReader();
    public virtual int get_FieldCount();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string GetName(int i);
    public virtual string GetDataTypeName(int i);
    public virtual Type GetFieldType(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual float GetFloat(int i);
    public virtual double GetDouble(int i);
    public virtual string GetString(int i);
    public virtual decimal GetDecimal(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual IDataReader GetData(int i);
    public virtual bool IsDBNull(int i);
    private sealed virtual override object System.Data.IDataRecord.get_Item(int i);
    private sealed virtual override object System.Data.IDataRecord.get_Item(string name);
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.FuncMapping : PropertyMapping {
    [CompilerGeneratedAttribute]
private Func`2<IDataRecord, object> <Func>k__BackingField;
    public Func`2<IDataRecord, object> Func { get; private set; }
    public FuncMapping(PropertyInfo property, Func`2<IDataRecord, object> func);
    [CompilerGeneratedAttribute]
public Func`2<IDataRecord, object> get_Func();
    [CompilerGeneratedAttribute]
private void set_Func(Func`2<IDataRecord, object> value);
    public virtual object GetPropertyValue(IDataRecord row);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Configuration.GenericDatabaseData")]
public class Microsoft.Practices.EnterpriseLibrary.Data.GenericDatabase : Database {
    public GenericDatabase(string connectionString, DbProviderFactory dbProviderFactory);
    protected virtual void DeriveParameters(DbCommand discoveryCommand);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IMapBuilderContext`1 {
    public abstract virtual IMapBuilderContext`1<TResult> MapByName(PropertyInfo property);
    public abstract virtual IMapBuilderContext`1<TResult> MapByName(Expression`1<Func`2<TResult, TMember>> propertySelector);
    public abstract virtual IMapBuilderContext`1<TResult> DoNotMap(PropertyInfo property);
    public abstract virtual IMapBuilderContext`1<TResult> DoNotMap(Expression`1<Func`2<TResult, TMember>> propertySelector);
    public abstract virtual IMapBuilderContextMap`2<TResult, TMember> Map(Expression`1<Func`2<TResult, TMember>> propertySelector);
    public abstract virtual IMapBuilderContextMap`2<TResult, object> Map(PropertyInfo property);
    public abstract virtual IRowMapper`1<TResult> Build();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IMapBuilderContextMap`2 {
    public abstract virtual IMapBuilderContext`1<TResult> ToColumn(string columnName);
    public abstract virtual IMapBuilderContext`1<TResult> WithFunc(Func`2<IDataRecord, TMember> f);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IMapBuilderContextTest`1 {
    public abstract virtual IEnumerable`1<PropertyMapping> GetPropertyMappings();
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper {
    public abstract virtual void AssignParameters(DbCommand command, Object[] parameterValues);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper`1 {
    public abstract virtual IEnumerable`1<TResult> MapSet(IDataReader reader);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper`1 {
    public abstract virtual TResult MapRow(IDataRecord row);
}
public static class Microsoft.Practices.EnterpriseLibrary.Data.MapBuilder`1 : object {
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public static IRowMapper`1<TResult> BuildAllProperties();
    public static IMapBuilderContext`1<TResult> MapAllProperties();
    public static IMapBuilderContext`1<TResult> MapNoProperties();
    private static bool IsAutoMappableProperty(PropertyInfo property);
    private static bool IsCollectionType(Type type);
    [CompilerGeneratedAttribute]
private static bool <MapAllProperties>b__0(PropertyInfo property);
    [CompilerGeneratedAttribute]
private static bool <IsCollectionType>b__2(Type inf);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OracleConnectionDataDescription { get; }
    internal static string OracleConnectionDataDisplayName { get; }
    internal static string OracleConnectionDataNameDescription { get; }
    internal static string OracleConnectionDataNameDisplayName { get; }
    internal static string OracleConnectionDataPackagesDescription { get; }
    internal static string OracleConnectionDataPackagesDisplayName { get; }
    internal static string OracleConnectionSettingsDescription { get; }
    internal static string OracleConnectionSettingsDisplayName { get; }
    internal static string OracleConnectionSettingsOracleConnectionsDataDescription { get; }
    internal static string OracleConnectionSettingsOracleConnectionsDataDisplayName { get; }
    internal static string OraclePackageDataDescription { get; }
    internal static string OraclePackageDataDisplayName { get; }
    internal static string OraclePackageDataNameDescription { get; }
    internal static string OraclePackageDataNameDisplayName { get; }
    internal static string OraclePackageDataPrefixDescription { get; }
    internal static string OraclePackageDataPrefixDisplayName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OracleConnectionDataDescription();
    internal static string get_OracleConnectionDataDisplayName();
    internal static string get_OracleConnectionDataNameDescription();
    internal static string get_OracleConnectionDataNameDisplayName();
    internal static string get_OracleConnectionDataPackagesDescription();
    internal static string get_OracleConnectionDataPackagesDisplayName();
    internal static string get_OracleConnectionSettingsDescription();
    internal static string get_OracleConnectionSettingsDisplayName();
    internal static string get_OracleConnectionSettingsOracleConnectionsDataDescription();
    internal static string get_OracleConnectionSettingsOracleConnectionsDataDisplayName();
    internal static string get_OraclePackageDataDescription();
    internal static string get_OraclePackageDataDisplayName();
    internal static string get_OraclePackageDataNameDescription();
    internal static string get_OraclePackageDataNameDisplayName();
    internal static string get_OraclePackageDataPrefixDescription();
    internal static string get_OraclePackageDataPrefixDisplayName();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataDisplayName")]
[NamePropertyAttribute("Name")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OracleConnectionData : NamedConfigurationElement {
    private static string packagesProperty;
    [ReferenceAttribute("System.Configuration.ConnectionStringSettingsCollection", "System.Configuration.ConnectionStringSettings")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataNameDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataNameDescription")]
public string Name { get; public set; }
    [EnvironmentalOverridesAttribute("False")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OraclePackageData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataPackagesDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionDataPackagesDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.ElementCollectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Windows.FrameworkElement, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[DesignTimeReadOnlyAttribute("False")]
[ConfigurationPropertyAttribute("packages")]
public NamedElementCollection`1<OraclePackageData> Packages { get; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public NamedElementCollection`1<OraclePackageData> get_Packages();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionSettingsDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionSettingsDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OracleConnectionSettings : SerializableConfigurationSection {
    private static string oracleConnectionDataCollectionProperty;
    public static string SectionName;
    [ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OracleConnectionData")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionSettingsOracleConnectionsDataDisplayName")]
[ConfigurationPropertyAttribute("")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OracleConnectionSettingsOracleConnectionsDataDescription")]
public NamedElementCollection`1<OracleConnectionData> OracleConnectionsData { get; }
    public static OracleConnectionSettings GetSettings(IConfigurationSource configurationSource);
    public NamedElementCollection`1<OracleConnectionData> get_OracleConnectionsData();
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OracleDatabaseData : DatabaseData {
    [CompilerGeneratedAttribute]
private OracleConnectionData <ConnectionData>k__BackingField;
    public IEnumerable`1<OraclePackageData> PackageMappings { get; }
    private OracleConnectionData ConnectionData { get; private set; }
    public OracleDatabaseData(ConnectionStringSettings connectionStringSettings, Func`2<string, ConfigurationSection> configurationSource);
    public IEnumerable`1<OraclePackageData> get_PackageMappings();
    [CompilerGeneratedAttribute]
private OracleConnectionData get_ConnectionData();
    [CompilerGeneratedAttribute]
private void set_ConnectionData(OracleConnectionData value);
    public virtual Database BuildDatabase();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OraclePackageDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OraclePackageDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OraclePackageData : NamedConfigurationElement {
    private static string prefixProperty;
    [ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.CollectionEditorContainedElementProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OraclePackageDataPrefixDescription")]
[ConfigurationPropertyAttribute("prefix")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.DesignResources", "OraclePackageDataPrefixDisplayName")]
public string Prefix { get; public set; }
    [ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.CollectionEditorContainedElementProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public string Name { get; public set; }
    public OraclePackageData(string name, string prefix);
    public sealed virtual string get_Prefix();
    public void set_Prefix(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
public interface Microsoft.Practices.EnterpriseLibrary.Data.Oracle.IOraclePackage {
    public string Name { get; }
    public string Prefix { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Prefix();
}
[ObsoleteAttribute("OracleDatabase has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", "False")]
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Oracle.Configuration.OracleDatabaseData")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase : Database {
    private static string RefCursorName;
    private IEnumerable`1<IOraclePackage> packages;
    private static IEnumerable`1<IOraclePackage> emptyPackages;
    private IDictionary`2<string, ParameterTypeRegistry> registeredParameterTypes;
    public bool SupportsParemeterDiscovery { get; }
    public OracleDatabase(string connectionString);
    public OracleDatabase(string connectionString, IEnumerable`1<IOraclePackage> packages);
    private static OracleDatabase();
    public virtual void AddParameter(DbCommand command, string name, DbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public void AddParameter(OracleCommand command, string name, OracleType oracleType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public virtual IDataReader ExecuteReader(DbCommand command);
    protected virtual IDataReader CreateWrappedReader(DatabaseConnectionWrapper connection, IDataReader innerReader);
    public virtual IDataReader ExecuteReader(DbCommand command, DbTransaction transaction);
    public virtual DataSet ExecuteDataSet(DbCommand command);
    public virtual DataSet ExecuteDataSet(DbCommand command, DbTransaction transaction);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, String[] tableNames);
    public virtual void LoadDataSet(DbCommand command, DataSet dataSet, String[] tableNames, DbTransaction transaction);
    public virtual object GetParameterValue(DbCommand command, string parameterName);
    public virtual void SetParameterValue(DbCommand command, string parameterName, object value);
    private void PrepareCWRefCursor(DbCommand command);
    private ParameterTypeRegistry GetParameterTypeRegistry(string commandText);
    private void RegisterParameterType(DbCommand command, string parameterName, DbType dbType);
    private static object ConvertGuidToByteArray(object value);
    private static object ConvertByteArrayToGuid(object value);
    private static bool QueryProcedureNeedsCursorParameter(DbCommand command);
    private void OnOracleRowUpdated(object sender, OracleRowUpdatedEventArgs args);
    public virtual bool get_SupportsParemeterDiscovery();
    protected virtual void DeriveParameters(DbCommand discoveryCommand);
    public virtual DbCommand GetStoredProcCommand(string storedProcedureName, Object[] parameterValues);
    public virtual void AssignParameters(DbCommand command, Object[] parameterValues);
    public virtual DbCommand GetStoredProcCommand(string storedProcedureName);
    private string TranslatePackageSchema(string storedProcedureName);
    protected virtual void SetUpRowUpdatedEvent(DbDataAdapter adapter);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDataReaderWrapper : DataReaderWrapper {
    public OracleDataReader InnerReader { get; }
    internal OracleDataReaderWrapper(OracleDataReader innerReader);
    public OracleDataReader get_InnerReader();
    public virtual bool GetBoolean(int index);
    public virtual byte GetByte(int index);
    public virtual Guid GetGuid(int index);
    public virtual short GetInt16(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.ParameterTypeRegistry : object {
    private string commandText;
    private IDictionary`2<string, DbType> parameterTypes;
    internal ParameterTypeRegistry(string commandText);
    internal void RegisterParameterType(string parameterName, DbType parameterType);
    internal bool HasRegisteredParameterType(string parameterName);
    internal DbType GetRegisteredParameterType(string parameterName);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Oracle.RefCountingOracleDataReaderWrapper : OracleDataReaderWrapper {
    private DatabaseConnectionWrapper connection;
    internal RefCountingOracleDataReaderWrapper(DatabaseConnectionWrapper connection, OracleDataReader innerReader);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache : object {
    private CachingMechanism cache;
    public void SetParameters(DbCommand command, Database database);
    protected internal void Clear();
    protected virtual void AddParametersFromCache(DbCommand command, Database database);
    private bool AlreadyCached(IDbCommand command, Database database);
    private static IDataParameter[] CreateParameterCopy(DbCommand command);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Data.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AsyncOperationsNotSupported { get; }
    internal static string BlockName { get; }
    internal static string ConfigurationFailureCreatingDatabase { get; }
    internal static string DefaultSqlConnctionString { get; }
    internal static string ErrorConnectionFailedExtraInformation { get; }
    internal static string ErrorConnectionFailedMessage { get; }
    internal static string ExceptionArgumentMustBePropertyExpression { get; }
    internal static string ExceptionArgumentMustInheritFromDatabase { get; }
    internal static string ExceptionCannotCreateRowMapping { get; }
    internal static string ExceptionColumnNotFoundWhileMapping { get; }
    internal static string ExceptionCommandNotSqlCommand { get; }
    internal static string ExceptionConvertionFailedWhenMappingPropertyToColumn { get; }
    internal static string ExceptionDatabaseDataTypeDoesNotHaveRequiredConstructor { get; }
    internal static string ExceptionDatabaseDataTypeDoesNotInheritFromDatabaseData { get; }
    internal static string ExceptionDatabaseInvalid { get; }
    internal static string ExceptionDatabaseProviderFactoryAlreadySet { get; }
    internal static string ExceptionDatabaseProviderFactoryNotSet { get; }
    internal static string ExceptionDatabaseTypeDoesNotHaveAssemblerAttribute { get; }
    internal static string ExceptionDatabaseTypeDoesNotHaveRequiredConfigurationTypeAttribute { get; }
    internal static string ExceptionDefaultDatabaseInvalid { get; }
    internal static string ExceptionMessageParameterMatchFailure { get; }
    internal static string ExceptionMessageUpdateDataSetArgumentFailure { get; }
    internal static string ExceptionMessageUpdateDataSetRowFailure { get; }
    internal static string ExceptionNoConfigurationElementTypeAttribute { get; }
    internal static string ExceptionNoDatabaseDefined { get; }
    internal static string ExceptionNoDefaultDatabaseDefined { get; }
    internal static string ExceptionNoProviderDefinedForConnectionString { get; }
    internal static string ExceptionNoValidProviderForConnectionString { get; }
    internal static string ExceptionNullOrEmptyString { get; }
    internal static string ExceptionParameterDiscoveryNotSupported { get; }
    internal static string ExceptionParameterDiscoveryNotSupportedOnGenericDatabase { get; }
    internal static string ExceptionSqlStringAccessorCannotDiscoverParameters { get; }
    internal static string ExceptionTableNameArrayEmpty { get; }
    internal static string ExceptionTypeNotDatabaseAssembler { get; }
    internal static string Password { get; }
    internal static string UserName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AsyncOperationsNotSupported();
    internal static string get_BlockName();
    internal static string get_ConfigurationFailureCreatingDatabase();
    internal static string get_DefaultSqlConnctionString();
    internal static string get_ErrorConnectionFailedExtraInformation();
    internal static string get_ErrorConnectionFailedMessage();
    internal static string get_ExceptionArgumentMustBePropertyExpression();
    internal static string get_ExceptionArgumentMustInheritFromDatabase();
    internal static string get_ExceptionCannotCreateRowMapping();
    internal static string get_ExceptionColumnNotFoundWhileMapping();
    internal static string get_ExceptionCommandNotSqlCommand();
    internal static string get_ExceptionConvertionFailedWhenMappingPropertyToColumn();
    internal static string get_ExceptionDatabaseDataTypeDoesNotHaveRequiredConstructor();
    internal static string get_ExceptionDatabaseDataTypeDoesNotInheritFromDatabaseData();
    internal static string get_ExceptionDatabaseInvalid();
    internal static string get_ExceptionDatabaseProviderFactoryAlreadySet();
    internal static string get_ExceptionDatabaseProviderFactoryNotSet();
    internal static string get_ExceptionDatabaseTypeDoesNotHaveAssemblerAttribute();
    internal static string get_ExceptionDatabaseTypeDoesNotHaveRequiredConfigurationTypeAttribute();
    internal static string get_ExceptionDefaultDatabaseInvalid();
    internal static string get_ExceptionMessageParameterMatchFailure();
    internal static string get_ExceptionMessageUpdateDataSetArgumentFailure();
    internal static string get_ExceptionMessageUpdateDataSetRowFailure();
    internal static string get_ExceptionNoConfigurationElementTypeAttribute();
    internal static string get_ExceptionNoDatabaseDefined();
    internal static string get_ExceptionNoDefaultDatabaseDefined();
    internal static string get_ExceptionNoProviderDefinedForConnectionString();
    internal static string get_ExceptionNoValidProviderForConnectionString();
    internal static string get_ExceptionNullOrEmptyString();
    internal static string get_ExceptionParameterDiscoveryNotSupported();
    internal static string get_ExceptionParameterDiscoveryNotSupportedOnGenericDatabase();
    internal static string get_ExceptionSqlStringAccessorCannotDiscoverParameters();
    internal static string get_ExceptionTableNameArrayEmpty();
    internal static string get_ExceptionTypeNotDatabaseAssembler();
    internal static string get_Password();
    internal static string get_UserName();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Data.PropertyMapping : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    protected PropertyMapping(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public abstract virtual object GetPropertyValue(IDataRecord row);
    public void Map(object instance, IDataRecord row);
    protected void SetValue(object instance, object value);
    protected static object ConvertValue(object value, Type conversionType);
    private static bool IsNullableType(Type t);
    protected static object ConvertNullableValue(object value, Type conversionType);
    protected static object ConvertNonNullableValue(object value, Type conversionType);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.RefCountingDataReader : DataReaderWrapper {
    private DatabaseConnectionWrapper connectionWrapper;
    public RefCountingDataReader(DatabaseConnectionWrapper connection, IDataReader innerReader);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.ReflectionRowMapper`1 : object {
    private static MethodInfo ConvertValue;
    private static NewExpression CreationExpression;
    private Func`2<IDataRecord, TResult> mapping;
    public ReflectionRowMapper`1(IDictionary`2<PropertyInfo, PropertyMapping> propertyMappings);
    private static ReflectionRowMapper`1();
    public sealed virtual TResult MapRow(IDataRecord row);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.SprocAccessor`1 : CommandAccessor`1<TResult> {
    private IParameterMapper parameterMapper;
    private string procedureName;
    public SprocAccessor`1(Database database, string procedureName, IRowMapper`1<TResult> rowMapper);
    public SprocAccessor`1(Database database, string procedureName, IResultSetMapper`1<TResult> resultSetMapper);
    public SprocAccessor`1(Database database, string procedureName, IParameterMapper parameterMapper, IRowMapper`1<TResult> rowMapper);
    public SprocAccessor`1(Database database, string procedureName, IParameterMapper parameterMapper, IResultSetMapper`1<TResult> resultSetMapper);
    public virtual IEnumerable`1<TResult> Execute(Object[] parameterValues);
    public virtual IAsyncResult BeginExecute(AsyncCallback callback, object state, Object[] parameterValues);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.Sql.Configuration.SqlDatabaseData : DatabaseData {
    public SqlDatabaseData(ConnectionStringSettings connectionStringSettings, Func`2<string, ConfigurationSection> configurationSource);
    public virtual Database BuildDatabase();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Practices.EnterpriseLibrary.Data.Sql.RefCountingXmlReader : XmlReader {
    private DatabaseConnectionWrapper connection;
    private XmlReader innerReader;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasAttributes { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public XmlReaderSettings Settings { get; }
    public string Value { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public RefCountingXmlReader(DatabaseConnectionWrapper connection, XmlReader innerReader);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual string get_Item(int i);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual XmlReaderSettings get_Settings();
    public virtual string get_Value();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual XmlNodeType MoveToContent();
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual decimal ReadContentAsDecimal();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual object ReadContentAsObject();
    public virtual string ReadContentAsString();
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual string ReadElementString();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual string ReadString();
    public virtual XmlReader ReadSubtree();
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual void ResolveEntity();
    public virtual void Skip();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Data.Sql.Configuration.SqlDatabaseData")]
public class Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase : Database {
    protected char ParameterToken { get; }
    public bool SupportsAsync { get; }
    public bool SupportsParemeterDiscovery { get; }
    public SqlDatabase(string connectionString);
    protected char get_ParameterToken();
    public virtual bool get_SupportsAsync();
    public XmlReader ExecuteXmlReader(DbCommand command);
    public XmlReader ExecuteXmlReader(DbCommand command, DbTransaction transaction);
    public IAsyncResult BeginExecuteXmlReader(DbCommand command, AsyncCallback callback, object state);
    public IAsyncResult BeginExecuteXmlReader(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    private IAsyncResult DoBeginExecuteXmlReader(SqlCommand command, AsyncCallback callback, object state);
    private XmlReader DoExecuteXmlReader(SqlCommand sqlCommand);
    private static SqlCommand CheckIfSqlCommand(DbCommand command);
    private void OnSqlRowUpdated(object sender, SqlRowUpdatedEventArgs rowThatCouldNotBeWritten);
    public virtual bool get_SupportsParemeterDiscovery();
    protected virtual void DeriveParameters(DbCommand discoveryCommand);
    protected virtual int UserParametersStartIndex();
    public virtual string BuildParameterName(string name);
    protected virtual void SetUpRowUpdatedEvent(DbDataAdapter adapter);
    protected virtual bool SameNumberOfParametersAndValues(DbCommand command, Object[] values);
    public virtual void AddParameter(DbCommand command, string name, SqlDbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public void AddParameter(DbCommand command, string name, SqlDbType dbType, ParameterDirection direction, string sourceColumn, DataRowVersion sourceVersion, object value);
    public void AddOutParameter(DbCommand command, string name, SqlDbType dbType, int size);
    public void AddInParameter(DbCommand command, string name, SqlDbType dbType);
    public void AddInParameter(DbCommand command, string name, SqlDbType dbType, object value);
    public void AddInParameter(DbCommand command, string name, SqlDbType dbType, string sourceColumn, DataRowVersion sourceVersion);
    protected DbParameter CreateParameter(string name, SqlDbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    protected virtual void ConfigureParameter(SqlParameter param, string name, SqlDbType dbType, int size, ParameterDirection direction, bool nullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    private static SqlCommand CreateSqlCommandByCommandType(CommandType commandType, string commandText);
    private IAsyncResult DoBeginExecuteNonQuery(SqlCommand command, bool disposeCommand, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteNonQuery(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteNonQuery(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteNonQuery(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual int EndExecuteNonQuery(IAsyncResult asyncResult);
    private IAsyncResult DoBeginExecuteReader(SqlCommand command, bool disposeCommand, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteReader(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteReader(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteReader(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IDataReader EndExecuteReader(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginExecuteScalar(DbCommand command, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(DbCommand command, DbTransaction transaction, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteScalar(DbTransaction transaction, string storedProcedureName, AsyncCallback callback, object state, Object[] parameterValues);
    public virtual IAsyncResult BeginExecuteScalar(CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginExecuteScalar(DbTransaction transaction, CommandType commandType, string commandText, AsyncCallback callback, object state);
    public virtual object EndExecuteScalar(IAsyncResult asyncResult);
    private static void CleanupConnectionFromAsyncOperation(DaabAsyncResult daabAsyncResult);
}
public class Microsoft.Practices.EnterpriseLibrary.Data.SqlStringAccessor`1 : CommandAccessor`1<TResult> {
    private IParameterMapper parameterMapper;
    private string sqlString;
    public SqlStringAccessor`1(Database database, string sqlString, IRowMapper`1<TResult> rowMapper);
    public SqlStringAccessor`1(Database database, string sqlString, IResultSetMapper`1<TResult> resultSetMapper);
    public SqlStringAccessor`1(Database database, string sqlString, IParameterMapper parameterMapper, IRowMapper`1<TResult> rowMapper);
    public SqlStringAccessor`1(Database database, string sqlString, IParameterMapper parameterMapper, IResultSetMapper`1<TResult> resultSetMapper);
    public virtual IEnumerable`1<TResult> Execute(Object[] parameterValues);
    public virtual IAsyncResult BeginExecute(AsyncCallback callback, object state, Object[] parameterValues);
}
public static class Microsoft.Practices.EnterpriseLibrary.Data.TransactionScopeConnections : object {
    private static Dictionary`2<Transaction, Dictionary`2<string, DatabaseConnectionWrapper>> transactionConnections;
    private static TransactionScopeConnections();
    public static DatabaseConnectionWrapper GetConnection(Database db);
    private static void OnTransactionCompleted(object sender, TransactionEventArgs e);
}
public enum Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior : Enum {
    public int value__;
    public static UpdateBehavior Standard;
    public static UpdateBehavior Continue;
    public static UpdateBehavior Transactional;
}
