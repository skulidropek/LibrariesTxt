[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BinaryFormatterBuilderExtensions : object {
    [ExtensionAttribute]
public static BinaryFormatterBuilder BinaryFormatterNamed(FormatterBuilder builder, string formatterName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CategoryFilterBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationFilterOnCategory FilterOnCategory(ILoggingConfigurationOptions context, string categoryFilterName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationOptions FilterCustom(ILoggingConfigurationOptions context, string customFilterName);
    [ExtensionAttribute]
public static ILoggingConfigurationOptions FilterCustom(ILoggingConfigurationOptions context, string customFilterName, Type customFilterType);
    [ExtensionAttribute]
public static ILoggingConfigurationOptions FilterCustom(ILoggingConfigurationOptions context, string customFilterName, NameValueCollection attributes);
    [ExtensionAttribute]
public static ILoggingConfigurationOptions FilterCustom(ILoggingConfigurationOptions context, string customFilterName, Type customFilterType, NameValueCollection attributes);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions : object {
    [ExtensionAttribute]
public static CustomFormatterBuilder CustomFormatterNamed(FormatterBuilder builder, string formatterName);
    [ExtensionAttribute]
public static CustomFormatterBuilder CustomFormatterNamed(FormatterBuilder builder, string formatterName, Type customFormatterType);
    [ExtensionAttribute]
public static CustomFormatterBuilder CustomFormatterNamed(FormatterBuilder builder, string formatterName, NameValueCollection attributes);
    [ExtensionAttribute]
public static CustomFormatterBuilder CustomFormatterNamed(FormatterBuilder builder, string formatterName, Type customFormatterType, NameValueCollection attributes);
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.BinaryFormatterBuilder : object {
    private BinaryLogFormatterData formatterData;
    internal BinaryFormatterBuilder(string formatterName);
    private sealed virtual override FormatterData Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder.GetFormatterData();
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CustomFormatterBuilder : object {
    private CustomFormatterData customFormatterData;
    internal CustomFormatterBuilder(string formatterName, Type customFormatterType);
    internal CustomFormatterBuilder(string formatterName, Type customFormatterType, NameValueCollection attributes);
    private sealed virtual override FormatterData Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder.GetFormatterData();
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder {
    public abstract virtual FormatterData GetFormatterData();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd {
    public ILoggingConfigurationSendTo SendTo { get; }
    public abstract virtual ILoggingConfigurationSendTo get_SendTo();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions {
    public abstract virtual ILoggingConfigurationCategoryOptions ToSourceLevels(SourceLevels sourceLevels);
    public abstract virtual ILoggingConfigurationCategoryOptions DoNotAutoFlushEntries();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryStart {
    public ILoggingConfigurationCategoryOptions WithOptions { get; }
    public abstract virtual ILoggingConfigurationCategoryOptions get_WithOptions();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd {
    public ILoggingConfigurationSpecialSources SpecialSources { get; }
    public abstract virtual ILoggingConfigurationCustomCategoryStart LogToCategoryNamed(string categoryName);
    public abstract virtual ILoggingConfigurationSpecialSources get_SpecialSources();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions {
    public abstract virtual ILoggingConfigurationCustomCategoryOptions ToSourceLevels(SourceLevels sourceLevels);
    public abstract virtual ILoggingConfigurationCustomCategoryOptions DoNotAutoFlushEntries();
    public abstract virtual ILoggingConfigurationCustomCategoryOptions SetAsDefaultCategory();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryStart {
    public ILoggingConfigurationCustomCategoryOptions WithOptions { get; }
    public abstract virtual ILoggingConfigurationCustomCategoryOptions get_WithOptions();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension {
    public ILoggingConfigurationOptions LoggingOptions { get; }
    public LoggingSettings LoggingSettings { get; }
    public abstract virtual ILoggingConfigurationOptions get_LoggingOptions();
    public abstract virtual LoggingSettings get_LoggingSettings();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterLogEnabled {
    public abstract virtual ILoggingConfigurationOptions Enable();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory {
    public abstract virtual ILoggingConfigurationOptions AllowAllCategoriesExcept(String[] categories);
    public abstract virtual ILoggingConfigurationOptions DenyAllCategoriesExcept(String[] categories);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority {
    public abstract virtual ILoggingConfigurationFilterOnPriority StartingWithPriority(int minimumPriority);
    public abstract virtual ILoggingConfigurationFilterOnPriority UpToPriority(int maximumPriority);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions {
    public abstract virtual ILoggingConfigurationOptions DisableTracing();
    public abstract virtual ILoggingConfigurationOptions DoNotRevertImpersonation();
    public abstract virtual ILoggingConfigurationOptions DoNotLogWarningsWhenNoCategoryExists();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo {
    public abstract virtual ILoggingConfigurationCategoryContd SharedListenerNamed(string listenerName);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener {
    public abstract virtual ILoggingConfigurationSendToCustomTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToCustomTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToCustomTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToCustomTraceListener WithTraceOptions(TraceOptions traceOptions);
    public abstract virtual ILoggingConfigurationSendToCustomTraceListener UsingInitData(string initData);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener {
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener UsingSmtpServer(string smtpServer);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener UsingSmtpServerPort(int smtpServerPort);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener To(string toEmailAddress);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener From(string fromEmailAddress);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener WithSubjectStart(string subjectLineStart);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener WithSubjectEnd(string subjectLineEnd);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener WithTraceOptions(TraceOptions traceOptions);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener UseSSL(bool useSSL);
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener Unauthenticated();
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener WithWindowsCredentials();
    public abstract virtual ILoggingConfigurationSendToEmailTraceListener WithUserNameAndPassword(string userName, string password);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener {
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener ToLog(string logName);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener ToMachine(string machineName);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener UsingEventLogSource(string source);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToEventLogTraceListener WithTraceOptions(TraceOptions traceOptions);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension {
    public ILoggingConfigurationCategoryContd LoggingCategoryContd { get; }
    public TraceSourceData CurrentTraceSource { get; }
    public abstract virtual ILoggingConfigurationCategoryContd get_LoggingCategoryContd();
    public abstract virtual TraceSourceData get_CurrentTraceSource();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener {
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener ToFile(string filename);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener WithFooter(string footer);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener WithHeader(string header);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToFlatFileTraceListener WithTraceOptions(TraceOptions traceOptions);
}
[SecurityCriticalAttribute]
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener {
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener WithTransactionType(MessageQueueTransactionType TransactionType);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener SetTimeToReachQueue(TimeSpan maximumTimeToReachQueue);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener SetTimeToBeReceived(TimeSpan maximumTimeToBeReceived);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener AsRecoverable();
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener UseQueue(string queuePath);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener UseDeadLetterQueue();
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener UseEncryption();
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener UseAuthentication();
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener WithTraceOptions(TraceOptions traceOptions);
    public abstract virtual ILoggingConfigurationSendToMsmqTraceListener Prioritize(MessagePriority priority);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener {
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener RollEvery(RollInterval interval);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener WhenRollFileExists(RollFileExistsBehavior behavior);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener RollAfterSize(int rollSizeInKB);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener UseTimeStampPattern(string timeStampPattern);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener WithFooter(string footer);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener WithHeader(string header);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener ToFile(string filename);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener FormatWith(IFormatterBuilder formatBuilder);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener FormatWithSharedFormatter(string formatterName);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener WithTraceOptions(TraceOptions traceOptions);
    public abstract virtual ILoggingConfigurationSendToRollingFileTraceListener CleanUpArchivedFilesWhenMoreThan(int maximumArchivedFiles);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener {
    public abstract virtual ILoggingConfigurationSendToSystemDiagnosticsTraceListener ForTraceListenerType(Type tracelistenerType);
    public abstract virtual ILoggingConfigurationSendToSystemDiagnosticsTraceListener ForTraceListenerType();
    public abstract virtual ILoggingConfigurationSendToSystemDiagnosticsTraceListener UsingInitData(string initData);
    public abstract virtual ILoggingConfigurationSendToSystemDiagnosticsTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToSystemDiagnosticsTraceListener WithTraceOptions(TraceOptions traceOptions);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToXmlTraceListener {
    public abstract virtual ILoggingConfigurationSendToXmlTraceListener ToFile(string filename);
    public abstract virtual ILoggingConfigurationSendToXmlTraceListener Filter(SourceLevels sourceLevel);
    public abstract virtual ILoggingConfigurationSendToXmlTraceListener WithTraceOptions(TraceOptions traceOptions);
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources {
    public ILoggingConfigurationCategoryStart LoggingErrorsAndWarningsCategory { get; }
    public ILoggingConfigurationCategoryStart UnprocessedCategory { get; }
    public ILoggingConfigurationCategoryStart AllEventsCategory { get; }
    public abstract virtual ILoggingConfigurationCategoryStart get_LoggingErrorsAndWarningsCategory();
    public abstract virtual ILoggingConfigurationCategoryStart get_UnprocessedCategory();
    public abstract virtual ILoggingConfigurationCategoryStart get_AllEventsCategory();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationStart {
    public ILoggingConfigurationOptions WithOptions { get; }
    public abstract virtual ILoggingConfigurationOptions get_WithOptions();
}
public interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ITextFormatterBuilder {
    public abstract virtual IFormatterBuilder UsingTemplate(string template);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension : object {
    private ILoggingConfigurationExtension contextExtension;
    protected LoggingSettings LoggingSettings { get; }
    protected ILoggingConfigurationOptions LoggingOptions { get; }
    private ILoggingConfigurationSpecialSources Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.SpecialSources { get; }
    private ILoggingConfigurationOptions Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingOptions { get; }
    private LoggingSettings Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingSettings { get; }
    protected LoggingConfigurationExtension(ILoggingConfigurationContd context);
    protected LoggingSettings get_LoggingSettings();
    protected ILoggingConfigurationOptions get_LoggingOptions();
    private sealed virtual override ILoggingConfigurationOptions Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DisableTracing();
    private sealed virtual override ILoggingConfigurationOptions Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DoNotRevertImpersonation();
    private sealed virtual override ILoggingConfigurationOptions Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DoNotLogWarningsWhenNoCategoryExists();
    private sealed virtual override ILoggingConfigurationCustomCategoryStart Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.LogToCategoryNamed(string categoryName);
    private sealed virtual override ILoggingConfigurationSpecialSources Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.get_SpecialSources();
    private sealed virtual override ILoggingConfigurationOptions Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.get_LoggingOptions();
    private sealed virtual override LoggingSettings Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.get_LoggingSettings();
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension : object {
    private ILoggingConfigurationSendToExtension extensionContext;
    public LoggingSettings LoggingSettings { get; }
    public TraceSourceData CurrentTraceSource { get; }
    private ILoggingConfigurationSendTo Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd.SendTo { get; }
    private ILoggingConfigurationSpecialSources Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.SpecialSources { get; }
    protected SendToTraceListenerExtension(ILoggingConfigurationSendTo context);
    protected void AddTraceListenerToSettingsAndCategory(TraceListenerData traceListenerData);
    public LoggingSettings get_LoggingSettings();
    public TraceSourceData get_CurrentTraceSource();
    private sealed virtual override ILoggingConfigurationSendTo Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd.get_SendTo();
    private sealed virtual override ILoggingConfigurationCustomCategoryStart Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.LogToCategoryNamed(string categoryName);
    private sealed virtual override ILoggingConfigurationSpecialSources Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.get_SpecialSources();
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder : object {
    private TextFormatterData formatterData;
    internal TextFormatterBuilder(string name);
    public sealed virtual IFormatterBuilder UsingTemplate(string template);
    private sealed virtual override FormatterData Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder.GetFormatterData();
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
public class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder : object {
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    private sealed virtual override Type Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType();
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LogEnabledFilterBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationFilterLogEnabled FilterEnableOrDisable(ILoggingConfigurationOptions context, string logEnabledFilterName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationStart ConfigureLogging(IConfigurationSourceBuilder configurationSourceBuilder);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PriorityFilterBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationFilterOnPriority FilterOnPriority(ILoggingConfigurationOptions context, string logFilterName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToCustomTraceListener Custom(ILoggingConfigurationSendTo context, string listenerName, Type customTraceListenerType);
    [ExtensionAttribute]
public static ILoggingConfigurationSendToCustomTraceListener Custom(ILoggingConfigurationSendTo context, string listenerName);
    [ExtensionAttribute]
public static ILoggingConfigurationSendToCustomTraceListener Custom(ILoggingConfigurationSendTo context, string listenerName, NameValueCollection attributes);
    [ExtensionAttribute]
public static ILoggingConfigurationSendToCustomTraceListener Custom(ILoggingConfigurationSendTo context, string listenerName, Type customTraceListenerType, NameValueCollection attributes);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToEmailTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToEmailTraceListener Email(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFlatFileTraceListenerExtension : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToFlatFileTraceListener FlatFile(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFormattedEventLogTraceListenerExtension : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToEventLogTraceListener EventLog(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
[SecurityCriticalAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToMsmqTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToMsmqTraceListener Msmq(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToRollingFileTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToRollingFileTraceListener RollingFile(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToSystemDiagnosticsTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToSystemDiagnosticsTraceListener SystemDiagnosticsListener(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToXmlTraceListenerExtensions : object {
    [ExtensionAttribute]
public static ILoggingConfigurationSendToXmlTraceListener XmlFile(ILoggingConfigurationSendTo context, string listenerName);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TextFormatterBuilderExtensions : object {
    [ExtensionAttribute]
public static TextFormatterBuilder TextFormatterNamed(FormatterBuilder builder, string formatterName);
}
public enum Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode : Enum {
    public int value__;
    public static CategoryFilterMode AllowAllExceptDenied;
    public static CategoryFilterMode DenyAllExceptAllowed;
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData : TraceListenerData {
    internal static string initDataProperty;
    private CustomProviderDataHelper`1<BasicCustomTraceListenerData> helper;
    [ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.NameValueCollectionValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public NameValueCollection Attributes { get; }
    public string InitData { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    private CustomProviderDataHelper`1<BasicCustomTraceListenerData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.Helper { get; }
    public BasicCustomTraceListenerData(string name, Type type, string initData);
    public BasicCustomTraceListenerData(string name, string typeName, string initData);
    public BasicCustomTraceListenerData(string name, Type type, string initData, TraceOptions traceOutputOptions);
    public BasicCustomTraceListenerData(string name, string typeName, string initData, TraceOptions traceOutputOptions);
    public void SetAttributeValue(string key, string value);
    public sealed virtual NameValueCollection get_Attributes();
    public string get_InitData();
    public void set_InitData(string value);
    protected virtual CustomProviderDataHelper`1<BasicCustomTraceListenerData> CreateHelper();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual bool IsModified();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    private sealed virtual override CustomProviderDataHelper`1<BasicCustomTraceListenerData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.get_Helper();
    private sealed virtual override object Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.BaseGetPropertyValue(ConfigurationProperty property);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.BaseSetPropertyValue(ConfigurationProperty property, object value);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.BaseUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.BaseReset(ConfigurationElement parentElement);
    private sealed virtual override bool Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData>.BaseIsModified();
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
    private ConstructorInfo GetConstructor(Type[] constructorParameters);
}
internal class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerDataHelper : CustomProviderDataHelper`1<BasicCustomTraceListenerData> {
    private static ConfigurationProperty traceListenerTypeProperty;
    private static ConfigurationProperty traceOutputOptionsProperty;
    private static ConfigurationProperty initDataProperty;
    internal BasicCustomTraceListenerDataHelper(BasicCustomTraceListenerData helpedCustomProviderData);
    private static BasicCustomTraceListenerDataHelper();
    protected virtual bool IsKnownPropertyName(string propertyName);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "BinaryLogFormatterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "BinaryLogFormatterDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData : FormatterData {
    public BinaryLogFormatterData(string name);
    public virtual ILogFormatter BuildFormatter();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData : LogFilterData {
    private static string categoryFilterModeProperty;
    private static string categoryFiltersProperty;
    [CompilerGeneratedAttribute]
private static Func`2<CategoryFilterEntry, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataCategoryFilterModeDisplayName")]
[ConfigurationPropertyAttribute("categoryFilterMode")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataCategoryFilterModeDescription")]
public CategoryFilterMode CategoryFilterMode { get; public set; }
    [ConfigurationPropertyAttribute("categoryFilters")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataCategoryFiltersDisplayName")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterDataCategoryFiltersDescription")]
[EnvironmentalOverridesAttribute("False")]
[DesignTimeReadOnlyAttribute("False")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.ElementCollectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Windows.FrameworkElement, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public NamedElementCollection`1<CategoryFilterEntry> CategoryFilters { get; private set; }
    public CategoryFilterData(NamedElementCollection`1<CategoryFilterEntry> categoryFilters, CategoryFilterMode categoryFilterMode);
    public CategoryFilterData(string name, NamedElementCollection`1<CategoryFilterEntry> categoryFilters, CategoryFilterMode categoryFilterMode);
    public CategoryFilterMode get_CategoryFilterMode();
    public void set_CategoryFilterMode(CategoryFilterMode value);
    public NamedElementCollection`1<CategoryFilterEntry> get_CategoryFilters();
    private void set_CategoryFilters(NamedElementCollection`1<CategoryFilterEntry> value);
    public virtual ILogFilter BuildFilter();
    [CompilerGeneratedAttribute]
private static string <BuildFilter>b__0(CategoryFilterEntry cfe);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterEntryDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CategoryFilterEntryDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry : NamedConfigurationElement {
    [ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.CollectionEditorContainedElementReferenceProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData")]
public string Name { get; public set; }
    public CategoryFilterEntry(string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomFormatterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomFormatterDataDisplayName")]
[TypePickingCommandAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData : FormatterData {
    private CustomProviderDataHelper`1<CustomFormatterData> helper;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate7;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomFormatterDataTypeNameDisplayName")]
[BrowsableAttribute("True")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.TypeSelectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BaseTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomFormatterDataTypeNameDescription")]
public string TypeName { get; public set; }
    [ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.NameValueCollectionValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public NameValueCollection Attributes { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private CustomProviderDataHelper`1<CustomFormatterData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.Helper { get; }
    public CustomFormatterData(string name, Type type);
    public CustomFormatterData(string name, string typeName);
    public void SetAttributeValue(string key, string value);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    public sealed virtual NameValueCollection get_Attributes();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual bool IsModified();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    private sealed virtual override CustomProviderDataHelper`1<CustomFormatterData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.get_Helper();
    private sealed virtual override object Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.BaseGetPropertyValue(ConfigurationProperty property);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.BaseSetPropertyValue(ConfigurationProperty property, object value);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.BaseUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.BaseReset(ConfigurationElement parentElement);
    private sealed virtual override bool Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>.BaseIsModified();
    public virtual ILogFormatter BuildFormatter();
    [CompilerGeneratedAttribute]
private static string <BuildFormatter>b__0();
    [CompilerGeneratedAttribute]
private static string <BuildFormatter>b__1();
    [CompilerGeneratedAttribute]
private static string <BuildFormatter>b__2();
    [CompilerGeneratedAttribute]
private static string <BuildFormatter>b__3();
}
[TypePickingCommandAttribute]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomLogFilterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomLogFilterDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData : LogFilterData {
    private static AssemblyQualifiedTypeNameConverter typeConverter;
    private CustomProviderDataHelper`1<CustomLogFilterData> helper;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate7;
    [BrowsableAttribute("True")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomLogFilterDataTypeNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomLogFilterDataTypeNameDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.TypeSelectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BaseTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData")]
public string TypeName { get; public set; }
    [ValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Validation.NameValueCollectionValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public NameValueCollection Attributes { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private CustomProviderDataHelper`1<CustomLogFilterData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.Helper { get; }
    public CustomLogFilterData(string name, Type type);
    public CustomLogFilterData(string name, string typeName);
    private static CustomLogFilterData();
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    public void SetAttributeValue(string key, string value);
    public sealed virtual NameValueCollection get_Attributes();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual bool IsModified();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    private sealed virtual override CustomProviderDataHelper`1<CustomLogFilterData> Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.get_Helper();
    private sealed virtual override object Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.BaseGetPropertyValue(ConfigurationProperty property);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.BaseSetPropertyValue(ConfigurationProperty property, object value);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.BaseUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    private sealed virtual override void Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.BaseReset(ConfigurationElement parentElement);
    private sealed virtual override bool Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData>.BaseIsModified();
    public virtual ILogFilter BuildFilter();
    [CompilerGeneratedAttribute]
private static string <BuildFilter>b__0();
    [CompilerGeneratedAttribute]
private static string <BuildFilter>b__1();
    [CompilerGeneratedAttribute]
private static string <BuildFilter>b__2();
    [CompilerGeneratedAttribute]
private static string <BuildFilter>b__3();
}
internal static class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomProviderBuildHelper : object {
    public static T Build(TC customData, Func`1<string> noHandlerType, Func`1<string> noValidType, Func`1<string> typeNotAssignable, Func`1<string> noConstructor);
}
[TypePickingCommandAttribute]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.CustomTraceListenerDataViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomTraceListenerDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomTraceListenerDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData : BasicCustomTraceListenerData {
    internal static string formatterNameProperty;
    [ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomTraceListenerDataFormatterDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "CustomTraceListenerDataFormatterDisplayName")]
public string Formatter { get; public set; }
    [BaseTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.TypeSelectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BrowsableAttribute("True")]
public string TypeName { get; public set; }
    public CustomTraceListenerData(string name, Type type, string initData);
    public CustomTraceListenerData(string name, Type type, string initData, TraceOptions traceOutputOptions);
    public CustomTraceListenerData(string name, string typeName, string initData, TraceOptions traceOutputOptions);
    public string get_Formatter();
    public void set_Formatter(string value);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    protected virtual CustomProviderDataHelper`1<BasicCustomTraceListenerData> CreateHelper();
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
internal class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerDataHelper : BasicCustomTraceListenerDataHelper {
    private static ConfigurationProperty formatterProperty;
    internal CustomTraceListenerDataHelper(CustomTraceListenerData helpedCustomProviderData);
    private static CustomTraceListenerDataHelper();
    protected virtual bool IsKnownPropertyName(string propertyName);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddLoggingSettings { get; }
    internal static string BasicCustomTraceListenerDataDescription { get; }
    internal static string BasicCustomTraceListenerDataDisplayName { get; }
    internal static string BasicCustomTraceListenerDataFilterDescription { get; }
    internal static string BasicCustomTraceListenerDataFilterDisplayName { get; }
    internal static string BasicCustomTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string BasicCustomTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string BasicCustomTraceListenerDataNameDescription { get; }
    internal static string BasicCustomTraceListenerDataNameDisplayName { get; }
    internal static string BasicCustomTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string BasicCustomTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string BasicCustomTraceListenerDataTypeNameDescription { get; }
    internal static string BasicCustomTraceListenerDataTypeNameDisplayName { get; }
    internal static string BinaryLogFormatterDataDescription { get; }
    internal static string BinaryLogFormatterDataDisplayName { get; }
    internal static string BinaryLogFormatterDataNameDescription { get; }
    internal static string BinaryLogFormatterDataNameDisplayName { get; }
    internal static string BinaryLogFormatterDataTypeNameDescription { get; }
    internal static string BinaryLogFormatterDataTypeNameDisplayName { get; }
    internal static string CategoryFilterDataCategoryFilterModeDescription { get; }
    internal static string CategoryFilterDataCategoryFilterModeDisplayName { get; }
    internal static string CategoryFilterDataCategoryFiltersDescription { get; }
    internal static string CategoryFilterDataCategoryFiltersDisplayName { get; }
    internal static string CategoryFilterDataDescription { get; }
    internal static string CategoryFilterDataDisplayName { get; }
    internal static string CategoryFilterDataNameDescription { get; }
    internal static string CategoryFilterDataNameDisplayName { get; }
    internal static string CategoryFilterDataTypeNameDescription { get; }
    internal static string CategoryFilterDataTypeNameDisplayName { get; }
    internal static string CategoryFilterEntryDescription { get; }
    internal static string CategoryFilterEntryDisplayName { get; }
    internal static string CategoryFilterEntryNameDescription { get; }
    internal static string CategoryFilterEntryNameDisplayName { get; }
    internal static string CustomFormatterDataDescription { get; }
    internal static string CustomFormatterDataDisplayName { get; }
    internal static string CustomFormatterDataNameDescription { get; }
    internal static string CustomFormatterDataNameDisplayName { get; }
    internal static string CustomFormatterDataTypeNameDescription { get; }
    internal static string CustomFormatterDataTypeNameDisplayName { get; }
    internal static string CustomLogFilterDataDescription { get; }
    internal static string CustomLogFilterDataDisplayName { get; }
    internal static string CustomLogFilterDataNameDescription { get; }
    internal static string CustomLogFilterDataNameDisplayName { get; }
    internal static string CustomLogFilterDataTypeNameDescription { get; }
    internal static string CustomLogFilterDataTypeNameDisplayName { get; }
    internal static string CustomTraceListenerDataDescription { get; }
    internal static string CustomTraceListenerDataDisplayName { get; }
    internal static string CustomTraceListenerDataFilterDescription { get; }
    internal static string CustomTraceListenerDataFilterDisplayName { get; }
    internal static string CustomTraceListenerDataFormatterDescription { get; }
    internal static string CustomTraceListenerDataFormatterDisplayName { get; }
    internal static string CustomTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string CustomTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string CustomTraceListenerDataNameDescription { get; }
    internal static string CustomTraceListenerDataNameDisplayName { get; }
    internal static string CustomTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string CustomTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string CustomTraceListenerDataTypeNameDescription { get; }
    internal static string CustomTraceListenerDataTypeNameDisplayName { get; }
    internal static string EmailTraceListenerAuthenticationModeDescription { get; }
    internal static string EmailTraceListenerAuthenticationModeDisplayName { get; }
    internal static string EmailTraceListenerDataDescription { get; }
    internal static string EmailTraceListenerDataDisplayName { get; }
    internal static string EmailTraceListenerDataFilterDescription { get; }
    internal static string EmailTraceListenerDataFilterDisplayName { get; }
    internal static string EmailTraceListenerDataFormatterDescription { get; }
    internal static string EmailTraceListenerDataFormatterDisplayName { get; }
    internal static string EmailTraceListenerDataFromAddressDescription { get; }
    internal static string EmailTraceListenerDataFromAddressDisplayName { get; }
    internal static string EmailTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string EmailTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string EmailTraceListenerDataNameDescription { get; }
    internal static string EmailTraceListenerDataNameDisplayName { get; }
    internal static string EmailTraceListenerDataSmtpPortDescription { get; }
    internal static string EmailTraceListenerDataSmtpPortDisplayName { get; }
    internal static string EmailTraceListenerDataSmtpServerDescription { get; }
    internal static string EmailTraceListenerDataSmtpServerDisplayName { get; }
    internal static string EmailTraceListenerDataSubjectLineEnderDescription { get; }
    internal static string EmailTraceListenerDataSubjectLineEnderDisplayName { get; }
    internal static string EmailTraceListenerDataSubjectLineStarterDescription { get; }
    internal static string EmailTraceListenerDataSubjectLineStarterDisplayName { get; }
    internal static string EmailTraceListenerDataToAddressDescription { get; }
    internal static string EmailTraceListenerDataToAddressDisplayName { get; }
    internal static string EmailTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string EmailTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string EmailTraceListenerDataTypeNameDescription { get; }
    internal static string EmailTraceListenerDataTypeNameDisplayName { get; }
    internal static string EmailTraceListenerPasswordDescription { get; }
    internal static string EmailTraceListenerPasswordDisplayName { get; }
    internal static string EmailTraceListenerUserNameDescription { get; }
    internal static string EmailTraceListenerUserNameDisplayName { get; }
    internal static string EmailTraceListenerUseSSLDescription { get; }
    internal static string EmailTraceListenerUseSSLDisplayName { get; }
    internal static string FlatFileTraceListenerDataDescription { get; }
    internal static string FlatFileTraceListenerDataDisplayName { get; }
    internal static string FlatFileTraceListenerDataFileNameDescription { get; }
    internal static string FlatFileTraceListenerDataFileNameDisplayName { get; }
    internal static string FlatFileTraceListenerDataFilterDescription { get; }
    internal static string FlatFileTraceListenerDataFilterDisplayName { get; }
    internal static string FlatFileTraceListenerDataFooterDescription { get; }
    internal static string FlatFileTraceListenerDataFooterDisplayName { get; }
    internal static string FlatFileTraceListenerDataFormatterDescription { get; }
    internal static string FlatFileTraceListenerDataFormatterDisplayName { get; }
    internal static string FlatFileTraceListenerDataHeaderDescription { get; }
    internal static string FlatFileTraceListenerDataHeaderDisplayName { get; }
    internal static string FlatFileTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string FlatFileTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string FlatFileTraceListenerDataNameDescription { get; }
    internal static string FlatFileTraceListenerDataNameDisplayName { get; }
    internal static string FlatFileTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string FlatFileTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string FlatFileTraceListenerDataTypeNameDescription { get; }
    internal static string FlatFileTraceListenerDataTypeNameDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataDescription { get; }
    internal static string FormattedEventLogTraceListenerDataDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataFilterDescription { get; }
    internal static string FormattedEventLogTraceListenerDataFilterDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataFormatterDescription { get; }
    internal static string FormattedEventLogTraceListenerDataFormatterDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string FormattedEventLogTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataLogDescription { get; }
    internal static string FormattedEventLogTraceListenerDataLogDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataMachineNameDescription { get; }
    internal static string FormattedEventLogTraceListenerDataMachineNameDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataNameDescription { get; }
    internal static string FormattedEventLogTraceListenerDataNameDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataSourceDescription { get; }
    internal static string FormattedEventLogTraceListenerDataSourceDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string FormattedEventLogTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string FormattedEventLogTraceListenerDataTypeNameDescription { get; }
    internal static string FormattedEventLogTraceListenerDataTypeNameDisplayName { get; }
    internal static string FormatterDataDescription { get; }
    internal static string FormatterDataDisplayName { get; }
    internal static string FormatterDataNameDescription { get; }
    internal static string FormatterDataNameDisplayName { get; }
    internal static string FormatterDataTypeNameDescription { get; }
    internal static string FormatterDataTypeNameDisplayName { get; }
    internal static string JsonLogFormatterDataDescription { get; }
    internal static string JsonLogFormatterDataDisplayName { get; }
    internal static string JsonLogFormatterDataFormattingDescription { get; }
    internal static string JsonLogFormatterDataFormattingDisplayName { get; }
    internal static string JsonLogFormatterDataNameDescription { get; }
    internal static string JsonLogFormatterDataNameDisplayName { get; }
    internal static string JsonLogFormatterDataTypeNameDescription { get; }
    internal static string JsonLogFormatterDataTypeNameDisplayName { get; }
    internal static string LogEnabledFilterDataDescription { get; }
    internal static string LogEnabledFilterDataDisplayName { get; }
    internal static string LogEnabledFilterDataEnabledDescription { get; }
    internal static string LogEnabledFilterDataEnabledDisplayName { get; }
    internal static string LogEnabledFilterDataNameDescription { get; }
    internal static string LogEnabledFilterDataNameDisplayName { get; }
    internal static string LogEnabledFilterDataTypeNameDescription { get; }
    internal static string LogEnabledFilterDataTypeNameDisplayName { get; }
    internal static string LogFileDialogFilter { get; }
    internal static string LogFilterDataDescription { get; }
    internal static string LogFilterDataDisplayName { get; }
    internal static string LogFilterDataNameDescription { get; }
    internal static string LogFilterDataNameDisplayName { get; }
    internal static string LogFilterDataTypeNameDescription { get; }
    internal static string LogFilterDataTypeNameDisplayName { get; }
    internal static string LoggingSettingsDefaultCategoryDescription { get; }
    internal static string LoggingSettingsDefaultCategoryDisplayName { get; }
    internal static string LoggingSettingsDescription { get; }
    internal static string LoggingSettingsDisplayName { get; }
    internal static string LoggingSettingsFormattersDescription { get; }
    internal static string LoggingSettingsFormattersDisplayName { get; }
    internal static string LoggingSettingsLogFiltersDescription { get; }
    internal static string LoggingSettingsLogFiltersDisplayName { get; }
    internal static string LoggingSettingsLogWarningWhenNoCategoriesMatchDescription { get; }
    internal static string LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName { get; }
    internal static string LoggingSettingsNameDescription { get; }
    internal static string LoggingSettingsNameDisplayName { get; }
    internal static string LoggingSettingsRevertImpersonationDescription { get; }
    internal static string LoggingSettingsRevertImpersonationDisplayName { get; }
    internal static string LoggingSettingsSpecialTraceSourcesDescription { get; }
    internal static string LoggingSettingsSpecialTraceSourcesDisplayName { get; }
    internal static string LoggingSettingsTraceListenersDescription { get; }
    internal static string LoggingSettingsTraceListenersDisplayName { get; }
    internal static string LoggingSettingsTraceSourcesDescription { get; }
    internal static string LoggingSettingsTraceSourcesDisplayName { get; }
    internal static string LoggingSettingsTracingEnabledDescription { get; }
    internal static string LoggingSettingsTracingEnabledDisplayName { get; }
    internal static string MsmqTraceListenerDataCategoryQueuePathDescription { get; }
    internal static string MsmqTraceListenerDataCategoryQueuePathDisplayName { get; }
    internal static string MsmqTraceListenerDataDescription { get; }
    internal static string MsmqTraceListenerDataDisplayName { get; }
    internal static string MsmqTraceListenerDataFilterDescription { get; }
    internal static string MsmqTraceListenerDataFilterDisplayName { get; }
    internal static string MsmqTraceListenerDataFormatterDescription { get; }
    internal static string MsmqTraceListenerDataFormatterDisplayName { get; }
    internal static string MsmqTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string MsmqTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string MsmqTraceListenerDataMessagePriorityDescription { get; }
    internal static string MsmqTraceListenerDataMessagePriorityDisplayName { get; }
    internal static string MsmqTraceListenerDataNameDescription { get; }
    internal static string MsmqTraceListenerDataNameDisplayName { get; }
    internal static string MsmqTraceListenerDataQueuePathDescription { get; }
    internal static string MsmqTraceListenerDataQueuePathDisplayName { get; }
    internal static string MsmqTraceListenerDataRecoverableDescription { get; }
    internal static string MsmqTraceListenerDataRecoverableDisplayName { get; }
    internal static string MsmqTraceListenerDataTimeToBeReceivedDescription { get; }
    internal static string MsmqTraceListenerDataTimeToBeReceivedDisplayName { get; }
    internal static string MsmqTraceListenerDataTimeToReachQueueDescription { get; }
    internal static string MsmqTraceListenerDataTimeToReachQueueDisplayName { get; }
    internal static string MsmqTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string MsmqTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string MsmqTraceListenerDataTransactionTypeDescription { get; }
    internal static string MsmqTraceListenerDataTransactionTypeDisplayName { get; }
    internal static string MsmqTraceListenerDataTypeNameDescription { get; }
    internal static string MsmqTraceListenerDataTypeNameDisplayName { get; }
    internal static string MsmqTraceListenerDataUseAuthenticationDescription { get; }
    internal static string MsmqTraceListenerDataUseAuthenticationDisplayName { get; }
    internal static string MsmqTraceListenerDataUseDeadLetterQueueDescription { get; }
    internal static string MsmqTraceListenerDataUseDeadLetterQueueDisplayName { get; }
    internal static string MsmqTraceListenerDataUseEncryptionDescription { get; }
    internal static string MsmqTraceListenerDataUseEncryptionDisplayName { get; }
    internal static string PriorityFilterDataDescription { get; }
    internal static string PriorityFilterDataDisplayName { get; }
    internal static string PriorityFilterDataMaximumPriorityDescription { get; }
    internal static string PriorityFilterDataMaximumPriorityDisplayName { get; }
    internal static string PriorityFilterDataMinimumPriorityDescription { get; }
    internal static string PriorityFilterDataMinimumPriorityDisplayName { get; }
    internal static string PriorityFilterDataNameDescription { get; }
    internal static string PriorityFilterDataNameDisplayName { get; }
    internal static string PriorityFilterDataTypeNameDescription { get; }
    internal static string PriorityFilterDataTypeNameDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataDescription { get; }
    internal static string RollingFlatFileTraceListenerDataDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataFileNameDescription { get; }
    internal static string RollingFlatFileTraceListenerDataFileNameDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataFilterDescription { get; }
    internal static string RollingFlatFileTraceListenerDataFilterDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataFooterDescription { get; }
    internal static string RollingFlatFileTraceListenerDataFooterDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataFormatterDescription { get; }
    internal static string RollingFlatFileTraceListenerDataFormatterDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataHeaderDescription { get; }
    internal static string RollingFlatFileTraceListenerDataHeaderDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string RollingFlatFileTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataMaxArchivedFilesDescription { get; }
    internal static string RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataNameDescription { get; }
    internal static string RollingFlatFileTraceListenerDataNameDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription { get; }
    internal static string RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataRollIntervalDescription { get; }
    internal static string RollingFlatFileTraceListenerDataRollIntervalDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataRollSizeKBDescription { get; }
    internal static string RollingFlatFileTraceListenerDataRollSizeKBDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataTimeStampPatternDescription { get; }
    internal static string RollingFlatFileTraceListenerDataTimeStampPatternDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string RollingFlatFileTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string RollingFlatFileTraceListenerDataTypeNameDescription { get; }
    internal static string RollingFlatFileTraceListenerDataTypeNameDisplayName { get; }
    internal static string SpecialTraceSourcesDataAllEventsTraceSourceDescription { get; }
    internal static string SpecialTraceSourcesDataAllEventsTraceSourceDisplayName { get; }
    internal static string SpecialTraceSourcesDataDescription { get; }
    internal static string SpecialTraceSourcesDataDisplayName { get; }
    internal static string SpecialTraceSourcesDataErrorsTraceSourceDescription { get; }
    internal static string SpecialTraceSourcesDataErrorsTraceSourceDisplayName { get; }
    internal static string SpecialTraceSourcesDataNotProcessedTraceSourceDescription { get; }
    internal static string SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataFilterDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataFilterDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataNameDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataNameDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string SystemDiagnosticsTraceListenerDataTypeNameDescription { get; }
    internal static string SystemDiagnosticsTraceListenerDataTypeNameDisplayName { get; }
    internal static string TextFormatterDataDescription { get; }
    internal static string TextFormatterDataDisplayName { get; }
    internal static string TextFormatterDataNameDescription { get; }
    internal static string TextFormatterDataNameDisplayName { get; }
    internal static string TextFormatterDataTemplateDescription { get; }
    internal static string TextFormatterDataTemplateDisplayName { get; }
    internal static string TextFormatterDataTypeNameDescription { get; }
    internal static string TextFormatterDataTypeNameDisplayName { get; }
    internal static string TraceListenerDataAsynchronousBufferSizeDescription { get; }
    internal static string TraceListenerDataAsynchronousBufferSizeDisplayName { get; }
    internal static string TraceListenerDataAsynchronousDescription { get; }
    internal static string TraceListenerDataAsynchronousDisplayName { get; }
    internal static string TraceListenerDataAsynchronousDisposeTimeoutDescription { get; }
    internal static string TraceListenerDataAsynchronousDisposeTimeoutDisplayName { get; }
    internal static string TraceListenerDataAsynchronousMaxDegreeOfParallelismDescription { get; }
    internal static string TraceListenerDataAsynchronousMaxDegreeOfParallelismDisplayName { get; }
    internal static string TraceListenerDataCollectionDescription { get; }
    internal static string TraceListenerDataCollectionDisplayName { get; }
    internal static string TraceListenerDataDescription { get; }
    internal static string TraceListenerDataDisplayName { get; }
    internal static string TraceListenerDataFilterDescription { get; }
    internal static string TraceListenerDataFilterDisplayName { get; }
    internal static string TraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string TraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string TraceListenerDataNameDescription { get; }
    internal static string TraceListenerDataNameDisplayName { get; }
    internal static string TraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string TraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string TraceListenerDataTypeNameDescription { get; }
    internal static string TraceListenerDataTypeNameDisplayName { get; }
    internal static string TraceListenerReferenceDataDescription { get; }
    internal static string TraceListenerReferenceDataDisplayName { get; }
    internal static string TraceListenerReferenceDataNameDescription { get; }
    internal static string TraceListenerReferenceDataNameDisplayName { get; }
    internal static string TraceSourceDataAutoFlushDescription { get; }
    internal static string TraceSourceDataAutoFlushDisplayName { get; }
    internal static string TraceSourceDataDefaultLevelDescription { get; }
    internal static string TraceSourceDataDefaultLevelDisplayName { get; }
    internal static string TraceSourceDataDescription { get; }
    internal static string TraceSourceDataDisplayName { get; }
    internal static string TraceSourceDataNameDescription { get; }
    internal static string TraceSourceDataNameDisplayName { get; }
    internal static string TraceSourceDataTraceListenersDescription { get; }
    internal static string TraceSourceDataTraceListenersDisplayName { get; }
    internal static string XmlTraceListenerDataDescription { get; }
    internal static string XmlTraceListenerDataDisplayName { get; }
    internal static string XmlTraceListenerDataFileNameDescription { get; }
    internal static string XmlTraceListenerDataFileNameDisplayName { get; }
    internal static string XmlTraceListenerDataFilterDescription { get; }
    internal static string XmlTraceListenerDataFilterDisplayName { get; }
    internal static string XmlTraceListenerDataListenerDataTypeNameDescription { get; }
    internal static string XmlTraceListenerDataListenerDataTypeNameDisplayName { get; }
    internal static string XmlTraceListenerDataNameDescription { get; }
    internal static string XmlTraceListenerDataNameDisplayName { get; }
    internal static string XmlTraceListenerDataTraceOutputOptionsDescription { get; }
    internal static string XmlTraceListenerDataTraceOutputOptionsDisplayName { get; }
    internal static string XmlTraceListenerDataTypeNameDescription { get; }
    internal static string XmlTraceListenerDataTypeNameDisplayName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddLoggingSettings();
    internal static string get_BasicCustomTraceListenerDataDescription();
    internal static string get_BasicCustomTraceListenerDataDisplayName();
    internal static string get_BasicCustomTraceListenerDataFilterDescription();
    internal static string get_BasicCustomTraceListenerDataFilterDisplayName();
    internal static string get_BasicCustomTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_BasicCustomTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_BasicCustomTraceListenerDataNameDescription();
    internal static string get_BasicCustomTraceListenerDataNameDisplayName();
    internal static string get_BasicCustomTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_BasicCustomTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_BasicCustomTraceListenerDataTypeNameDescription();
    internal static string get_BasicCustomTraceListenerDataTypeNameDisplayName();
    internal static string get_BinaryLogFormatterDataDescription();
    internal static string get_BinaryLogFormatterDataDisplayName();
    internal static string get_BinaryLogFormatterDataNameDescription();
    internal static string get_BinaryLogFormatterDataNameDisplayName();
    internal static string get_BinaryLogFormatterDataTypeNameDescription();
    internal static string get_BinaryLogFormatterDataTypeNameDisplayName();
    internal static string get_CategoryFilterDataCategoryFilterModeDescription();
    internal static string get_CategoryFilterDataCategoryFilterModeDisplayName();
    internal static string get_CategoryFilterDataCategoryFiltersDescription();
    internal static string get_CategoryFilterDataCategoryFiltersDisplayName();
    internal static string get_CategoryFilterDataDescription();
    internal static string get_CategoryFilterDataDisplayName();
    internal static string get_CategoryFilterDataNameDescription();
    internal static string get_CategoryFilterDataNameDisplayName();
    internal static string get_CategoryFilterDataTypeNameDescription();
    internal static string get_CategoryFilterDataTypeNameDisplayName();
    internal static string get_CategoryFilterEntryDescription();
    internal static string get_CategoryFilterEntryDisplayName();
    internal static string get_CategoryFilterEntryNameDescription();
    internal static string get_CategoryFilterEntryNameDisplayName();
    internal static string get_CustomFormatterDataDescription();
    internal static string get_CustomFormatterDataDisplayName();
    internal static string get_CustomFormatterDataNameDescription();
    internal static string get_CustomFormatterDataNameDisplayName();
    internal static string get_CustomFormatterDataTypeNameDescription();
    internal static string get_CustomFormatterDataTypeNameDisplayName();
    internal static string get_CustomLogFilterDataDescription();
    internal static string get_CustomLogFilterDataDisplayName();
    internal static string get_CustomLogFilterDataNameDescription();
    internal static string get_CustomLogFilterDataNameDisplayName();
    internal static string get_CustomLogFilterDataTypeNameDescription();
    internal static string get_CustomLogFilterDataTypeNameDisplayName();
    internal static string get_CustomTraceListenerDataDescription();
    internal static string get_CustomTraceListenerDataDisplayName();
    internal static string get_CustomTraceListenerDataFilterDescription();
    internal static string get_CustomTraceListenerDataFilterDisplayName();
    internal static string get_CustomTraceListenerDataFormatterDescription();
    internal static string get_CustomTraceListenerDataFormatterDisplayName();
    internal static string get_CustomTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_CustomTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_CustomTraceListenerDataNameDescription();
    internal static string get_CustomTraceListenerDataNameDisplayName();
    internal static string get_CustomTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_CustomTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_CustomTraceListenerDataTypeNameDescription();
    internal static string get_CustomTraceListenerDataTypeNameDisplayName();
    internal static string get_EmailTraceListenerAuthenticationModeDescription();
    internal static string get_EmailTraceListenerAuthenticationModeDisplayName();
    internal static string get_EmailTraceListenerDataDescription();
    internal static string get_EmailTraceListenerDataDisplayName();
    internal static string get_EmailTraceListenerDataFilterDescription();
    internal static string get_EmailTraceListenerDataFilterDisplayName();
    internal static string get_EmailTraceListenerDataFormatterDescription();
    internal static string get_EmailTraceListenerDataFormatterDisplayName();
    internal static string get_EmailTraceListenerDataFromAddressDescription();
    internal static string get_EmailTraceListenerDataFromAddressDisplayName();
    internal static string get_EmailTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_EmailTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_EmailTraceListenerDataNameDescription();
    internal static string get_EmailTraceListenerDataNameDisplayName();
    internal static string get_EmailTraceListenerDataSmtpPortDescription();
    internal static string get_EmailTraceListenerDataSmtpPortDisplayName();
    internal static string get_EmailTraceListenerDataSmtpServerDescription();
    internal static string get_EmailTraceListenerDataSmtpServerDisplayName();
    internal static string get_EmailTraceListenerDataSubjectLineEnderDescription();
    internal static string get_EmailTraceListenerDataSubjectLineEnderDisplayName();
    internal static string get_EmailTraceListenerDataSubjectLineStarterDescription();
    internal static string get_EmailTraceListenerDataSubjectLineStarterDisplayName();
    internal static string get_EmailTraceListenerDataToAddressDescription();
    internal static string get_EmailTraceListenerDataToAddressDisplayName();
    internal static string get_EmailTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_EmailTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_EmailTraceListenerDataTypeNameDescription();
    internal static string get_EmailTraceListenerDataTypeNameDisplayName();
    internal static string get_EmailTraceListenerPasswordDescription();
    internal static string get_EmailTraceListenerPasswordDisplayName();
    internal static string get_EmailTraceListenerUserNameDescription();
    internal static string get_EmailTraceListenerUserNameDisplayName();
    internal static string get_EmailTraceListenerUseSSLDescription();
    internal static string get_EmailTraceListenerUseSSLDisplayName();
    internal static string get_FlatFileTraceListenerDataDescription();
    internal static string get_FlatFileTraceListenerDataDisplayName();
    internal static string get_FlatFileTraceListenerDataFileNameDescription();
    internal static string get_FlatFileTraceListenerDataFileNameDisplayName();
    internal static string get_FlatFileTraceListenerDataFilterDescription();
    internal static string get_FlatFileTraceListenerDataFilterDisplayName();
    internal static string get_FlatFileTraceListenerDataFooterDescription();
    internal static string get_FlatFileTraceListenerDataFooterDisplayName();
    internal static string get_FlatFileTraceListenerDataFormatterDescription();
    internal static string get_FlatFileTraceListenerDataFormatterDisplayName();
    internal static string get_FlatFileTraceListenerDataHeaderDescription();
    internal static string get_FlatFileTraceListenerDataHeaderDisplayName();
    internal static string get_FlatFileTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_FlatFileTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_FlatFileTraceListenerDataNameDescription();
    internal static string get_FlatFileTraceListenerDataNameDisplayName();
    internal static string get_FlatFileTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_FlatFileTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_FlatFileTraceListenerDataTypeNameDescription();
    internal static string get_FlatFileTraceListenerDataTypeNameDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataDescription();
    internal static string get_FormattedEventLogTraceListenerDataDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataFilterDescription();
    internal static string get_FormattedEventLogTraceListenerDataFilterDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataFormatterDescription();
    internal static string get_FormattedEventLogTraceListenerDataFormatterDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_FormattedEventLogTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataLogDescription();
    internal static string get_FormattedEventLogTraceListenerDataLogDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataMachineNameDescription();
    internal static string get_FormattedEventLogTraceListenerDataMachineNameDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataNameDescription();
    internal static string get_FormattedEventLogTraceListenerDataNameDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataSourceDescription();
    internal static string get_FormattedEventLogTraceListenerDataSourceDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_FormattedEventLogTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_FormattedEventLogTraceListenerDataTypeNameDescription();
    internal static string get_FormattedEventLogTraceListenerDataTypeNameDisplayName();
    internal static string get_FormatterDataDescription();
    internal static string get_FormatterDataDisplayName();
    internal static string get_FormatterDataNameDescription();
    internal static string get_FormatterDataNameDisplayName();
    internal static string get_FormatterDataTypeNameDescription();
    internal static string get_FormatterDataTypeNameDisplayName();
    internal static string get_JsonLogFormatterDataDescription();
    internal static string get_JsonLogFormatterDataDisplayName();
    internal static string get_JsonLogFormatterDataFormattingDescription();
    internal static string get_JsonLogFormatterDataFormattingDisplayName();
    internal static string get_JsonLogFormatterDataNameDescription();
    internal static string get_JsonLogFormatterDataNameDisplayName();
    internal static string get_JsonLogFormatterDataTypeNameDescription();
    internal static string get_JsonLogFormatterDataTypeNameDisplayName();
    internal static string get_LogEnabledFilterDataDescription();
    internal static string get_LogEnabledFilterDataDisplayName();
    internal static string get_LogEnabledFilterDataEnabledDescription();
    internal static string get_LogEnabledFilterDataEnabledDisplayName();
    internal static string get_LogEnabledFilterDataNameDescription();
    internal static string get_LogEnabledFilterDataNameDisplayName();
    internal static string get_LogEnabledFilterDataTypeNameDescription();
    internal static string get_LogEnabledFilterDataTypeNameDisplayName();
    internal static string get_LogFileDialogFilter();
    internal static string get_LogFilterDataDescription();
    internal static string get_LogFilterDataDisplayName();
    internal static string get_LogFilterDataNameDescription();
    internal static string get_LogFilterDataNameDisplayName();
    internal static string get_LogFilterDataTypeNameDescription();
    internal static string get_LogFilterDataTypeNameDisplayName();
    internal static string get_LoggingSettingsDefaultCategoryDescription();
    internal static string get_LoggingSettingsDefaultCategoryDisplayName();
    internal static string get_LoggingSettingsDescription();
    internal static string get_LoggingSettingsDisplayName();
    internal static string get_LoggingSettingsFormattersDescription();
    internal static string get_LoggingSettingsFormattersDisplayName();
    internal static string get_LoggingSettingsLogFiltersDescription();
    internal static string get_LoggingSettingsLogFiltersDisplayName();
    internal static string get_LoggingSettingsLogWarningWhenNoCategoriesMatchDescription();
    internal static string get_LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName();
    internal static string get_LoggingSettingsNameDescription();
    internal static string get_LoggingSettingsNameDisplayName();
    internal static string get_LoggingSettingsRevertImpersonationDescription();
    internal static string get_LoggingSettingsRevertImpersonationDisplayName();
    internal static string get_LoggingSettingsSpecialTraceSourcesDescription();
    internal static string get_LoggingSettingsSpecialTraceSourcesDisplayName();
    internal static string get_LoggingSettingsTraceListenersDescription();
    internal static string get_LoggingSettingsTraceListenersDisplayName();
    internal static string get_LoggingSettingsTraceSourcesDescription();
    internal static string get_LoggingSettingsTraceSourcesDisplayName();
    internal static string get_LoggingSettingsTracingEnabledDescription();
    internal static string get_LoggingSettingsTracingEnabledDisplayName();
    internal static string get_MsmqTraceListenerDataCategoryQueuePathDescription();
    internal static string get_MsmqTraceListenerDataCategoryQueuePathDisplayName();
    internal static string get_MsmqTraceListenerDataDescription();
    internal static string get_MsmqTraceListenerDataDisplayName();
    internal static string get_MsmqTraceListenerDataFilterDescription();
    internal static string get_MsmqTraceListenerDataFilterDisplayName();
    internal static string get_MsmqTraceListenerDataFormatterDescription();
    internal static string get_MsmqTraceListenerDataFormatterDisplayName();
    internal static string get_MsmqTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_MsmqTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_MsmqTraceListenerDataMessagePriorityDescription();
    internal static string get_MsmqTraceListenerDataMessagePriorityDisplayName();
    internal static string get_MsmqTraceListenerDataNameDescription();
    internal static string get_MsmqTraceListenerDataNameDisplayName();
    internal static string get_MsmqTraceListenerDataQueuePathDescription();
    internal static string get_MsmqTraceListenerDataQueuePathDisplayName();
    internal static string get_MsmqTraceListenerDataRecoverableDescription();
    internal static string get_MsmqTraceListenerDataRecoverableDisplayName();
    internal static string get_MsmqTraceListenerDataTimeToBeReceivedDescription();
    internal static string get_MsmqTraceListenerDataTimeToBeReceivedDisplayName();
    internal static string get_MsmqTraceListenerDataTimeToReachQueueDescription();
    internal static string get_MsmqTraceListenerDataTimeToReachQueueDisplayName();
    internal static string get_MsmqTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_MsmqTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_MsmqTraceListenerDataTransactionTypeDescription();
    internal static string get_MsmqTraceListenerDataTransactionTypeDisplayName();
    internal static string get_MsmqTraceListenerDataTypeNameDescription();
    internal static string get_MsmqTraceListenerDataTypeNameDisplayName();
    internal static string get_MsmqTraceListenerDataUseAuthenticationDescription();
    internal static string get_MsmqTraceListenerDataUseAuthenticationDisplayName();
    internal static string get_MsmqTraceListenerDataUseDeadLetterQueueDescription();
    internal static string get_MsmqTraceListenerDataUseDeadLetterQueueDisplayName();
    internal static string get_MsmqTraceListenerDataUseEncryptionDescription();
    internal static string get_MsmqTraceListenerDataUseEncryptionDisplayName();
    internal static string get_PriorityFilterDataDescription();
    internal static string get_PriorityFilterDataDisplayName();
    internal static string get_PriorityFilterDataMaximumPriorityDescription();
    internal static string get_PriorityFilterDataMaximumPriorityDisplayName();
    internal static string get_PriorityFilterDataMinimumPriorityDescription();
    internal static string get_PriorityFilterDataMinimumPriorityDisplayName();
    internal static string get_PriorityFilterDataNameDescription();
    internal static string get_PriorityFilterDataNameDisplayName();
    internal static string get_PriorityFilterDataTypeNameDescription();
    internal static string get_PriorityFilterDataTypeNameDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataDescription();
    internal static string get_RollingFlatFileTraceListenerDataDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataFileNameDescription();
    internal static string get_RollingFlatFileTraceListenerDataFileNameDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataFilterDescription();
    internal static string get_RollingFlatFileTraceListenerDataFilterDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataFooterDescription();
    internal static string get_RollingFlatFileTraceListenerDataFooterDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataFormatterDescription();
    internal static string get_RollingFlatFileTraceListenerDataFormatterDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataHeaderDescription();
    internal static string get_RollingFlatFileTraceListenerDataHeaderDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_RollingFlatFileTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataMaxArchivedFilesDescription();
    internal static string get_RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataNameDescription();
    internal static string get_RollingFlatFileTraceListenerDataNameDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription();
    internal static string get_RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataRollIntervalDescription();
    internal static string get_RollingFlatFileTraceListenerDataRollIntervalDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataRollSizeKBDescription();
    internal static string get_RollingFlatFileTraceListenerDataRollSizeKBDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataTimeStampPatternDescription();
    internal static string get_RollingFlatFileTraceListenerDataTimeStampPatternDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_RollingFlatFileTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_RollingFlatFileTraceListenerDataTypeNameDescription();
    internal static string get_RollingFlatFileTraceListenerDataTypeNameDisplayName();
    internal static string get_SpecialTraceSourcesDataAllEventsTraceSourceDescription();
    internal static string get_SpecialTraceSourcesDataAllEventsTraceSourceDisplayName();
    internal static string get_SpecialTraceSourcesDataDescription();
    internal static string get_SpecialTraceSourcesDataDisplayName();
    internal static string get_SpecialTraceSourcesDataErrorsTraceSourceDescription();
    internal static string get_SpecialTraceSourcesDataErrorsTraceSourceDisplayName();
    internal static string get_SpecialTraceSourcesDataNotProcessedTraceSourceDescription();
    internal static string get_SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataFilterDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataFilterDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataNameDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataNameDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_SystemDiagnosticsTraceListenerDataTypeNameDescription();
    internal static string get_SystemDiagnosticsTraceListenerDataTypeNameDisplayName();
    internal static string get_TextFormatterDataDescription();
    internal static string get_TextFormatterDataDisplayName();
    internal static string get_TextFormatterDataNameDescription();
    internal static string get_TextFormatterDataNameDisplayName();
    internal static string get_TextFormatterDataTemplateDescription();
    internal static string get_TextFormatterDataTemplateDisplayName();
    internal static string get_TextFormatterDataTypeNameDescription();
    internal static string get_TextFormatterDataTypeNameDisplayName();
    internal static string get_TraceListenerDataAsynchronousBufferSizeDescription();
    internal static string get_TraceListenerDataAsynchronousBufferSizeDisplayName();
    internal static string get_TraceListenerDataAsynchronousDescription();
    internal static string get_TraceListenerDataAsynchronousDisplayName();
    internal static string get_TraceListenerDataAsynchronousDisposeTimeoutDescription();
    internal static string get_TraceListenerDataAsynchronousDisposeTimeoutDisplayName();
    internal static string get_TraceListenerDataAsynchronousMaxDegreeOfParallelismDescription();
    internal static string get_TraceListenerDataAsynchronousMaxDegreeOfParallelismDisplayName();
    internal static string get_TraceListenerDataCollectionDescription();
    internal static string get_TraceListenerDataCollectionDisplayName();
    internal static string get_TraceListenerDataDescription();
    internal static string get_TraceListenerDataDisplayName();
    internal static string get_TraceListenerDataFilterDescription();
    internal static string get_TraceListenerDataFilterDisplayName();
    internal static string get_TraceListenerDataListenerDataTypeNameDescription();
    internal static string get_TraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_TraceListenerDataNameDescription();
    internal static string get_TraceListenerDataNameDisplayName();
    internal static string get_TraceListenerDataTraceOutputOptionsDescription();
    internal static string get_TraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_TraceListenerDataTypeNameDescription();
    internal static string get_TraceListenerDataTypeNameDisplayName();
    internal static string get_TraceListenerReferenceDataDescription();
    internal static string get_TraceListenerReferenceDataDisplayName();
    internal static string get_TraceListenerReferenceDataNameDescription();
    internal static string get_TraceListenerReferenceDataNameDisplayName();
    internal static string get_TraceSourceDataAutoFlushDescription();
    internal static string get_TraceSourceDataAutoFlushDisplayName();
    internal static string get_TraceSourceDataDefaultLevelDescription();
    internal static string get_TraceSourceDataDefaultLevelDisplayName();
    internal static string get_TraceSourceDataDescription();
    internal static string get_TraceSourceDataDisplayName();
    internal static string get_TraceSourceDataNameDescription();
    internal static string get_TraceSourceDataNameDisplayName();
    internal static string get_TraceSourceDataTraceListenersDescription();
    internal static string get_TraceSourceDataTraceListenersDisplayName();
    internal static string get_XmlTraceListenerDataDescription();
    internal static string get_XmlTraceListenerDataDisplayName();
    internal static string get_XmlTraceListenerDataFileNameDescription();
    internal static string get_XmlTraceListenerDataFileNameDisplayName();
    internal static string get_XmlTraceListenerDataFilterDescription();
    internal static string get_XmlTraceListenerDataFilterDisplayName();
    internal static string get_XmlTraceListenerDataListenerDataTypeNameDescription();
    internal static string get_XmlTraceListenerDataListenerDataTypeNameDisplayName();
    internal static string get_XmlTraceListenerDataNameDescription();
    internal static string get_XmlTraceListenerDataNameDisplayName();
    internal static string get_XmlTraceListenerDataTraceOutputOptionsDescription();
    internal static string get_XmlTraceListenerDataTraceOutputOptionsDisplayName();
    internal static string get_XmlTraceListenerDataTypeNameDescription();
    internal static string get_XmlTraceListenerDataTypeNameDisplayName();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage : object {
    private EmailTraceListenerData configurationData;
    private ILogFormatter formatter;
    private LogEntry logEntry;
    public EmailMessage(EmailTraceListenerData configurationData, LogEntry logEntry, ILogFormatter formatter);
    public EmailMessage(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, LogEntry logEntry, ILogFormatter formatter);
    public EmailMessage(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, LogEntry logEntry, ILogFormatter formatter, EmailAuthenticationMode authenticationMode, string userName, string password, bool useSSL);
    public EmailMessage(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string message, ILogFormatter formatter);
    public EmailMessage(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string message, ILogFormatter formatter, EmailAuthenticationMode authenticationMode, string userName, string password, bool useSSL);
    private static string GenerateSubjectPrefix(string subjectLineField);
    private static string GenerateSubjectSuffix(string subjectLineField);
    protected MailMessage CreateMailMessage();
    public virtual void Send();
    public virtual void SendMessage(MailMessage message);
    private void SetCredentials(SmtpClient smtpClient);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataDisplayName")]
[ElementValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.Logging.EmailTraceListenerAuthenticationValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData : TraceListenerData {
    private static string toAddressProperty;
    private static string fromAddressProperty;
    private static string subjectLineStarterProperty;
    private static string subjectLineEnderProperty;
    private static string smtpServerProperty;
    private static string smtpPortProperty;
    private static string formatterNameProperty;
    private static string authenticationModeProperty;
    private static string useSSLProperty;
    private static string userNameProperty;
    private static string passwordProperty;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataToAddressDisplayName")]
[ConfigurationPropertyAttribute("toAddress")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataToAddressDescription")]
[DesigntimeDefaultAttribute("to@example.com")]
public string ToAddress { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataFromAddressDescription")]
[ConfigurationPropertyAttribute("fromAddress")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataFromAddressDisplayName")]
[DesigntimeDefaultAttribute("from@example.com")]
public string FromAddress { get; public set; }
    [ConfigurationPropertyAttribute("subjectLineStarter")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSubjectLineStarterDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSubjectLineStarterDescription")]
public string SubjectLineStarter { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSubjectLineEnderDisplayName")]
[ConfigurationPropertyAttribute("subjectLineEnder")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSubjectLineEnderDescription")]
public string SubjectLineEnder { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSmtpServerDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSmtpServerDescription")]
[ConfigurationPropertyAttribute("smtpServer")]
public string SmtpServer { get; public set; }
    [ConfigurationPropertyAttribute("smtpPort")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSmtpPortDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataSmtpPortDisplayName")]
public int SmtpPort { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataFormatterDescription")]
[ConfigurationPropertyAttribute("formatter")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerDataFormatterDisplayName")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
public string Formatter { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerAuthenticationModeDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerAuthenticationModeDisplayName")]
[ConfigurationPropertyAttribute("authenticationMode")]
public EmailAuthenticationMode AuthenticationMode { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerUseSSLDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerUseSSLDescription")]
[ConfigurationPropertyAttribute("useSSL")]
public bool UseSSL { get; public set; }
    [ConfigurationPropertyAttribute("userName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerUserNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerUserNameDisplayName")]
public string UserName { get; public set; }
    [ConfigurationPropertyAttribute("password")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.Logging.EmailTraceListenerPasswordProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerPasswordDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "EmailTraceListenerPasswordDescription")]
public string Password { get; public set; }
    public EmailTraceListenerData(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, string formatterName);
    public EmailTraceListenerData(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string formatterName);
    public EmailTraceListenerData(string name, string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string formatterName);
    public EmailTraceListenerData(string name, string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string formatterName, TraceOptions traceOutputOptions);
    public EmailTraceListenerData(string name, string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string formatterName, TraceOptions traceOutputOptions, SourceLevels filter);
    public EmailTraceListenerData(string name, string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, string formatterName, TraceOptions traceOutputOptions, SourceLevels filter, EmailAuthenticationMode authenticationMode, string userName, string password, bool useSSL);
    public string get_ToAddress();
    public void set_ToAddress(string value);
    public string get_FromAddress();
    public void set_FromAddress(string value);
    public string get_SubjectLineStarter();
    public void set_SubjectLineStarter(string value);
    public string get_SubjectLineEnder();
    public void set_SubjectLineEnder(string value);
    public string get_SmtpServer();
    public void set_SmtpServer(string value);
    public int get_SmtpPort();
    public void set_SmtpPort(int value);
    public string get_Formatter();
    public void set_Formatter(string value);
    public EmailAuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(EmailAuthenticationMode value);
    public bool get_UseSSL();
    public void set_UseSSL(bool value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData : TraceListenerData {
    private static string fileNameProperty;
    private static string headerProperty;
    private static string footerProperty;
    private static string formatterNameProperty;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFileNameDescription")]
[ConfigurationPropertyAttribute("fileName")]
[FilteredFileNameEditorAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogFileDialogFilter")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.FilteredFileNameEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFileNameDisplayName")]
public string FileName { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataHeaderDescription")]
[ConfigurationPropertyAttribute("header")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataHeaderDisplayName")]
public string Header { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFooterDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFooterDisplayName")]
[ConfigurationPropertyAttribute("footer")]
public string Footer { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFormatterDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FlatFileTraceListenerDataFormatterDescription")]
[ConfigurationPropertyAttribute("formatter")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
public string Formatter { get; public set; }
    public FlatFileTraceListenerData(string fileName, string formatterName);
    public FlatFileTraceListenerData(string name, string fileName, string formatterName);
    public FlatFileTraceListenerData(string name, string fileName, string header, string footer, string formatterName);
    public FlatFileTraceListenerData(string name, string fileName, string header, string footer, string formatterName, TraceOptions traceOutputOptions);
    public FlatFileTraceListenerData(string name, Type listenerType, string fileName, string formatterName);
    public FlatFileTraceListenerData(string name, Type listenerType, string fileName, string formatterName, TraceOptions traceOutputOptions);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_Header();
    public void set_Header(string value);
    public string get_Footer();
    public void set_Footer(string value);
    public string get_Formatter();
    public void set_Formatter(string value);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData : TraceListenerData {
    private static string sourceProperty;
    private static string formatterNameProperty;
    private static string logNameProperty;
    private static string machineNameProperty;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataSourceDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataSourceDescription")]
[ConfigurationPropertyAttribute("source")]
public string Source { get; public set; }
    [ConfigurationPropertyAttribute("formatter")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataFormatterDescription")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataFormatterDisplayName")]
public string Formatter { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataLogDescription")]
[ConfigurationPropertyAttribute("log")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataLogDisplayName")]
public string Log { get; public set; }
    [ConfigurationPropertyAttribute("machineName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataMachineNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "FormattedEventLogTraceListenerDataMachineNameDisplayName")]
public string MachineName { get; public set; }
    public FormattedEventLogTraceListenerData(string source, string formatterName);
    public FormattedEventLogTraceListenerData(string name, string source, string formatterName);
    public FormattedEventLogTraceListenerData(string name, string source, string logName, string machineName, string formatterName);
    public FormattedEventLogTraceListenerData(string name, string source, string logName, string machineName, string formatterName, TraceOptions traceOutputOptions);
    public string get_Source();
    public void set_Source(string value);
    public string get_Formatter();
    public void set_Formatter(string value);
    public string get_Log();
    public void set_Log(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData : NameTypeConfigurationElement {
    public FormatterData(string name, Type formatterType);
    public virtual ILogFormatter BuildFormatter();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "JsonLogFormatterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "JsonLogFormatterDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData : FormatterData {
    private static string FormattingProperty;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "JsonLogFormatterDataFormattingDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "JsonLogFormatterDataFormattingDescription")]
[ConfigurationPropertyAttribute("formatting")]
public JsonFormatting Formatting { get; public set; }
    public JsonLogFormatterData(string name);
    public JsonFormatting get_Formatting();
    public void set_Formatting(JsonFormatting value);
    public virtual ILogFormatter BuildFormatter();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogEnabledFilterDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogEnabledFilterDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData : LogFilterData {
    private static string enabledProperty;
    [ConfigurationPropertyAttribute("enabled")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogEnabledFilterDataEnabledDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogEnabledFilterDataEnabledDisplayName")]
public bool Enabled { get; public set; }
    public LogEnabledFilterData(bool enabled);
    public LogEnabledFilterData(string name, bool enabled);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public virtual ILogFilter BuildFilter();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData : NameTypeConfigurationElement {
    public LogFilterData(string name, Type type);
    public virtual ILogFilter BuildFilter();
}
internal static class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingDesignTime : object {
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsDisplayName")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.LoggingSectionViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings : SerializableConfigurationSection {
    private static string ErrorsTraceSourceKey;
    private static string AllTraceSourceKey;
    private static string NoMatchesTraceSourceKey;
    private static string tracingEnabledProperty;
    private static string nameProperty;
    private static string traceListenerDataCollectionProperty;
    private static string formatterDataCollectionProperty;
    private static string logFiltersProperty;
    private static string traceSourcesProrperty;
    private static string defaultCategoryProperty;
    private static string logWarningsWhenNoCategoriesMatchProperty;
    private static string specialTraceSourcesProperty;
    private static string revertImpersonationProperty;
    public static string SectionName;
    [CompilerGeneratedAttribute]
private static Func`2<TraceSourceData, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<LogFilterData, ILogFilter> CS$<>9__CachedAnonymousMethodDelegate4;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTracingEnabledDescription")]
[ConfigurationPropertyAttribute("tracingEnabled")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTracingEnabledDisplayName")]
public bool TracingEnabled { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsDefaultCategoryDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsDefaultCategoryDescription")]
[ConfigurationPropertyAttribute("defaultCategory")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData")]
public string DefaultCategory { get; public set; }
    [ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTraceListenersDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTraceListenersDisplayName")]
[ConfigurationPropertyAttribute("listeners")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.TraceListenerElementCollectionViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public TraceListenerDataCollection TraceListeners { get; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsFormattersDisplayName")]
[ConfigurationPropertyAttribute("formatters")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsFormattersDescription")]
public NameTypeConfigurationElementCollection`2<FormatterData, CustomFormatterData> Formatters { get; }
    [ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData")]
[ConfigurationPropertyAttribute("logFilters")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsLogFiltersDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsLogFiltersDescription")]
public NameTypeConfigurationElementCollection`2<LogFilterData, CustomLogFilterData> LogFilters { get; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTraceSourcesDisplayName")]
[ConfigurationPropertyAttribute("categorySources")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsTraceSourcesDescription")]
public NamedElementCollection`1<TraceSourceData> TraceSources { get; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsSpecialTraceSourcesDescription")]
[ConfigurationPropertyAttribute("specialSources")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsSpecialTraceSourcesDisplayName")]
public SpecialTraceSourcesData SpecialTraceSources { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName")]
[ConfigurationPropertyAttribute("logWarningsWhenNoCategoriesMatch")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsLogWarningWhenNoCategoriesMatchDescription")]
public bool LogWarningWhenNoCategoriesMatch { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsRevertImpersonationDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LoggingSettingsRevertImpersonationDisplayName")]
[ConfigurationPropertyAttribute("revertImpersonation")]
public bool RevertImpersonation { get; public set; }
    public LoggingSettings(string name);
    public LoggingSettings(string name, bool tracingEnabled, string defaultCategory);
    public static LoggingSettings GetLoggingSettings(IConfigurationSource configurationSource);
    public bool get_TracingEnabled();
    public void set_TracingEnabled(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_DefaultCategory();
    public void set_DefaultCategory(string value);
    public TraceListenerDataCollection get_TraceListeners();
    public NameTypeConfigurationElementCollection`2<FormatterData, CustomFormatterData> get_Formatters();
    public NameTypeConfigurationElementCollection`2<LogFilterData, CustomLogFilterData> get_LogFilters();
    public NamedElementCollection`1<TraceSourceData> get_TraceSources();
    public SpecialTraceSourcesData get_SpecialTraceSources();
    public void set_SpecialTraceSources(SpecialTraceSourcesData value);
    public bool get_LogWarningWhenNoCategoriesMatch();
    public void set_LogWarningWhenNoCategoriesMatch(bool value);
    public bool get_RevertImpersonation();
    public void set_RevertImpersonation(bool value);
    public LogWriter BuildLogWriter();
    private LogSource BuildTraceSource(TraceSourceData tsd, Dictionary`2<string, TraceListener> listeners);
    private TraceListener BuildTraceListener(string name, ConfigurationElement requestor);
    [CompilerGeneratedAttribute]
private static string <BuildLogWriter>b__0(TraceSourceData tsd);
    [CompilerGeneratedAttribute]
private static ILogFilter <BuildLogWriter>b__2(LogFilterData tfd);
}
[SecurityCriticalAttribute]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData : TraceListenerData {
    private static string queuePathProperty;
    private static string formatterNameProperty;
    private static string messagePriorityProperty;
    private static string timeToReachQueueProperty;
    private static string timeToBeReceivedProperty;
    private static string recoverableProperty;
    private static string useAuthenticationProperty;
    private static string useDeadLetterQueueProperty;
    private static string useEncryptionProperty;
    private static string transactionTypeProperty;
    public static MessagePriority DefaultPriority;
    public static bool DefaultRecoverable;
    public static bool DefaultUseAuthentication;
    public static bool DefaultUseDeadLetter;
    public static bool DefaultUseEncryption;
    public static MessageQueueTransactionType DefaultTransactionType;
    public static TimeSpan DefaultTimeToReachQueue;
    public static TimeSpan DefaultTimeToBeReceived;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataQueuePathDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataQueuePathDescription")]
[ConfigurationPropertyAttribute]
[DesigntimeDefaultAttribute(".\Private$\myQueue")]
public string QueuePath { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataFormatterDisplayName")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
[ConfigurationPropertyAttribute]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataFormatterDescription")]
public string Formatter { get; public set; }
    [ConfigurationPropertyAttribute]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataMessagePriorityDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataMessagePriorityDisplayName")]
public MessagePriority MessagePriority { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTimeToReachQueueDisplayName")]
[ConfigurationPropertyAttribute("timeToReachQueue")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTimeToReachQueueDescription")]
[EnvironmentalOverridesAttribute("True")]
public TimeSpan TimeToReachQueue { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTimeToBeReceivedDisplayName")]
[EnvironmentalOverridesAttribute("True")]
[ConfigurationPropertyAttribute("timeToBeReceived")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTimeToBeReceivedDescription")]
public TimeSpan TimeToBeReceived { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataRecoverableDisplayName")]
[ConfigurationPropertyAttribute("recoverable")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataRecoverableDescription")]
public bool Recoverable { get; public set; }
    [ConfigurationPropertyAttribute("useAuthentication")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseAuthenticationDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseAuthenticationDisplayName")]
public bool UseAuthentication { get; public set; }
    [ConfigurationPropertyAttribute("useDeadLetterQueue")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseDeadLetterQueueDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseDeadLetterQueueDisplayName")]
public bool UseDeadLetterQueue { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseEncryptionDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataUseEncryptionDescription")]
[ConfigurationPropertyAttribute("useEncryption")]
public bool UseEncryption { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTransactionTypeDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "MsmqTraceListenerDataTransactionTypeDisplayName")]
[ConfigurationPropertyAttribute]
public MessageQueueTransactionType TransactionType { get; public set; }
    public MsmqTraceListenerData(string name, string queuePath, string formatterName);
    public MsmqTraceListenerData(string name, string queuePath, string formatterName, MessagePriority messagePriority, bool recoverable, TimeSpan timeToReachQueue, TimeSpan timeToBeReceived, bool useAuthentication, bool useDeadLetterQueue, bool useEncryption, MessageQueueTransactionType transactionType);
    public MsmqTraceListenerData(string name, string queuePath, string formatterName, MessagePriority messagePriority, bool recoverable, TimeSpan timeToReachQueue, TimeSpan timeToBeReceived, bool useAuthentication, bool useDeadLetterQueue, bool useEncryption, MessageQueueTransactionType transactionType, TraceOptions traceOutputOptions, SourceLevels filter);
    private static MsmqTraceListenerData();
    public string get_QueuePath();
    public void set_QueuePath(string value);
    public string get_Formatter();
    public void set_Formatter(string value);
    public MessagePriority get_MessagePriority();
    public void set_MessagePriority(MessagePriority value);
    public TimeSpan get_TimeToReachQueue();
    public void set_TimeToReachQueue(TimeSpan value);
    public TimeSpan get_TimeToBeReceived();
    public void set_TimeToBeReceived(TimeSpan value);
    public bool get_Recoverable();
    public void set_Recoverable(bool value);
    public bool get_UseAuthentication();
    public void set_UseAuthentication(bool value);
    public bool get_UseDeadLetterQueue();
    public void set_UseDeadLetterQueue(bool value);
    public bool get_UseEncryption();
    public void set_UseEncryption(bool value);
    public MessageQueueTransactionType get_TransactionType();
    public void set_TransactionType(MessageQueueTransactionType value);
    [SecuritySafeCriticalAttribute]
protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
    private void CheckQueuePath();
    private void CheckFormatter();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataDisplayName")]
[ElementValidationAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.Logging.LogPriorityMinMaxValidator, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData : LogFilterData {
    private static string minimumPriorityProperty;
    private static string maximumPriorityProperty;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataMinimumPriorityDescription")]
[ConfigurationPropertyAttribute("minimumPriority")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataMinimumPriorityDisplayName")]
public int MinimumPriority { get; public set; }
    [ConfigurationPropertyAttribute("maximumPriority")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataMaximumPriorityDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "PriorityFilterDataMaximumPriorityDisplayName")]
public int MaximumPriority { get; public set; }
    public PriorityFilterData(int minimumPriority);
    public PriorityFilterData(string name, int minimumPriority);
    public int get_MinimumPriority();
    public void set_MinimumPriority(int value);
    public int get_MaximumPriority();
    public void set_MaximumPriority(int value);
    public virtual ILogFilter BuildFilter();
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData : TraceListenerData {
    private static string FileNamePropertyName;
    private static string footerProperty;
    private static string formatterNameProperty;
    private static string headerProperty;
    private static string RollFileExistsBehaviorPropertyName;
    private static string RollIntervalPropertyName;
    private static string RollSizeKBPropertyName;
    private static string TimeStampPatternPropertyName;
    private static string MaxArchivedFilesPropertyName;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFileNameDescription")]
[FilteredFileNameEditorAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "LogFileDialogFilter")]
[ConfigurationPropertyAttribute("fileName")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFileNameDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.FilteredFileNameEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FileName { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFooterDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFooterDescription")]
[ConfigurationPropertyAttribute("footer")]
public string Footer { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFormatterDisplayName")]
[ConfigurationPropertyAttribute("formatter")]
[ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2<Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData>", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataFormatterDescription")]
public string Formatter { get; public set; }
    [ConfigurationPropertyAttribute("header")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataHeaderDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataHeaderDescription")]
public string Header { get; public set; }
    [ConfigurationPropertyAttribute("rollFileExistsBehavior")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription")]
public RollFileExistsBehavior RollFileExistsBehavior { get; public set; }
    [ConfigurationPropertyAttribute("rollInterval")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollIntervalDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollIntervalDisplayName")]
public RollInterval RollInterval { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollSizeKBDescription")]
[ConfigurationPropertyAttribute("rollSizeKB")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataRollSizeKBDisplayName")]
public int RollSizeKB { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataTimeStampPatternDescription")]
[ConfigurationPropertyAttribute("timeStampPattern")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataTimeStampPatternDisplayName")]
public string TimeStampPattern { get; public set; }
    [ConfigurationPropertyAttribute("maxArchivedFiles")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataMaxArchivedFilesDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName")]
public int MaxArchivedFiles { get; public set; }
    public RollingFlatFileTraceListenerData(string name, string fileName, string header, string footer, int rollSizeKB, string timeStampPattern, RollFileExistsBehavior rollFileExistsBehavior, RollInterval rollInterval, TraceOptions traceOutputOptions, string formatter);
    public RollingFlatFileTraceListenerData(string name, string fileName, string header, string footer, int rollSizeKB, string timeStampPattern, RollFileExistsBehavior rollFileExistsBehavior, RollInterval rollInterval, TraceOptions traceOutputOptions, string formatter, SourceLevels filter);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_Footer();
    public void set_Footer(string value);
    public string get_Formatter();
    public void set_Formatter(string value);
    public string get_Header();
    public void set_Header(string value);
    public RollFileExistsBehavior get_RollFileExistsBehavior();
    public void set_RollFileExistsBehavior(RollFileExistsBehavior value);
    public RollInterval get_RollInterval();
    public void set_RollInterval(RollInterval value);
    public int get_RollSizeKB();
    public void set_RollSizeKB(int value);
    public string get_TimeStampPattern();
    public void set_TimeStampPattern(string value);
    public int get_MaxArchivedFiles();
    public void set_MaxArchivedFiles(int value);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData : ConfigurationElement {
    private static string mandatoryTraceSourceProperty;
    private static string notProcessedTraceSourceProperty;
    private static string errorsTraceSourceProperty;
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataAllEventsTraceSourceDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataAllEventsTraceSourceDescription")]
[ConfigurationPropertyAttribute("allEvents")]
public TraceSourceData AllEventsTraceSource { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataNotProcessedTraceSourceDescription")]
[ConfigurationPropertyAttribute("notProcessed")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName")]
public TraceSourceData NotProcessedTraceSource { get; public set; }
    [ConfigurationPropertyAttribute("errors")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataErrorsTraceSourceDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SpecialTraceSourcesDataErrorsTraceSourceDisplayName")]
public TraceSourceData ErrorsTraceSource { get; public set; }
    public SpecialTraceSourcesData(TraceSourceData mandatory, TraceSourceData notProcessed, TraceSourceData errors);
    public TraceSourceData get_AllEventsTraceSource();
    public void set_AllEventsTraceSource(TraceSourceData value);
    public TraceSourceData get_NotProcessedTraceSource();
    public void set_NotProcessedTraceSource(TraceSourceData value);
    public TraceSourceData get_ErrorsTraceSource();
    public void set_ErrorsTraceSource(TraceSourceData value);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SystemDiagnosticsTraceListenerDataDisplayName")]
[OmitCustomAttributesPropertyAttribute]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "SystemDiagnosticsTraceListenerDataDescription")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.SystemDiagnosticsTraceListenerDataViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData : BasicCustomTraceListenerData {
    [ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.ElementProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.TypeSelectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BaseTypeAttribute("System.Diagnostics.TraceListener")]
[BrowsableAttribute("True")]
[DesignTimeReadOnlyAttribute("False")]
public string TypeName { get; public set; }
    public SystemDiagnosticsTraceListenerData(string name, Type type, string initData);
    public SystemDiagnosticsTraceListenerData(string name, string typeName, string initData);
    public SystemDiagnosticsTraceListenerData(string name, Type type, string initData, TraceOptions traceOutputOptions);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TextFormatterDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TextFormatterDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData : FormatterData {
    public static string DefaultTemplate;
    private static string templateProperty;
    [EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Design.Formatters.TemplateEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ConfigurationPropertyAttribute("template")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TextFormatterDataTemplateDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TextFormatterDataTemplateDisplayName")]
public string Template { get; public set; }
    public TextFormatterData(string templateData);
    public TextFormatterData(string name, string templateData);
    private TextFormatterData(string name, Type formatterType, string templateData);
    public string get_Template();
    public void set_Template(string value);
    public virtual ILogFormatter BuildFormatter();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData : NameTypeConfigurationElement {
    internal static string TraceListenerNameSuffix;
    protected internal static string listenerDataTypeProperty;
    protected internal static string traceOutputOptionsProperty;
    protected internal static string filterProperty;
    protected internal static string asynchronousProperty;
    protected internal static string asynchronousDisposeTimeoutProperty;
    protected internal static string asynchronousBufferSizeProperty;
    protected internal static string asynchronousMaxDegreeOfParallelismProperty;
    private AssemblyQualifiedTypeNameConverter typeConverter;
    private static IDictionary`2<string, string> emptyAttributes;
    public Type ListenerDataType { get; public set; }
    [ConfigurationPropertyAttribute("listenerDataType")]
[BrowsableAttribute("False")]
public string ListenerDataTypeName { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataTraceOutputOptionsDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataTraceOutputOptionsDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.FlagsEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Windows.FrameworkElement, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ConfigurationPropertyAttribute("traceOutputOptions")]
public TraceOptions TraceOutputOptions { get; public set; }
    [ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.Logging.SourceLevelsProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[ConfigurationPropertyAttribute("filter")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataFilterDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataFilterDisplayName")]
public SourceLevels Filter { get; public set; }
    [ConfigurationPropertyAttribute("asynchronous")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousDescription")]
public bool Asynchronous { get; public set; }
    [ConfigurationPropertyAttribute("asynchronousDisposeTimeout")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousDisposeTimeoutDescription")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.TimeSpanElementConfigurationProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[NonNegativeOrInfiniteTimeSpanValidatorAttribute]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousDisposeTimeoutDisplayName")]
[TypeConverterAttribute("Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan AsynchronousDisposeTimeout { get; public set; }
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousBufferSizeDescription")]
[ConfigurationPropertyAttribute("asynchronousBufferSize")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousBufferSizeDisplayName")]
public int AsynchronousBufferSize { get; public set; }
    [ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousMaxDegreeOfParallelismDisplayName")]
[ConfigurationPropertyAttribute("asynchronousDegreeOfParallelism")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerDataAsynchronousMaxDegreeOfParallelismDescription")]
public Nullable`1<int> AsynchronousMaxDegreeOfParallelism { get; public set; }
    public TraceListenerData(Type traceListenerType);
    protected TraceListenerData(string name, Type traceListenerType, TraceOptions traceOutputOptions);
    protected TraceListenerData(string name, Type traceListenerType, TraceOptions traceOutputOptions, SourceLevels filter);
    private static TraceListenerData();
    public Type get_ListenerDataType();
    public void set_ListenerDataType(Type value);
    public string get_ListenerDataTypeName();
    public void set_ListenerDataTypeName(string value);
    public TraceOptions get_TraceOutputOptions();
    public void set_TraceOutputOptions(TraceOptions value);
    public SourceLevels get_Filter();
    public void set_Filter(SourceLevels value);
    public bool get_Asynchronous();
    public void set_Asynchronous(bool value);
    public TimeSpan get_AsynchronousDisposeTimeout();
    public void set_AsynchronousDisposeTimeout(TimeSpan value);
    public int get_AsynchronousBufferSize();
    public void set_AsynchronousBufferSize(int value);
    public Nullable`1<int> get_AsynchronousMaxDegreeOfParallelism();
    public void set_AsynchronousMaxDegreeOfParallelism(Nullable`1<int> value);
    public TraceListener BuildTraceListener(LoggingSettings settings);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
    protected ILogFormatter BuildFormatterSafe(LoggingSettings settings, string formatterName);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerDataCollection : PolymorphicConfigurationElementCollection`1<TraceListenerData> {
    protected virtual Type RetrieveConfigurationElementType(XmlReader reader);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerReferenceDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceListenerReferenceDataDescription")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.TraceListenerReferenceViewModel, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData : NamedConfigurationElement {
    [ReferenceAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerDataCollection", "Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.CollectionEditorContainedElementReferenceProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[EnvironmentalOverridesAttribute("True")]
public string Name { get; public set; }
    public TraceListenerReferenceData(string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataDisplayName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataDescription")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData : NamedConfigurationElement {
    private static string defaultLevelProperty;
    private static string traceListenersProperty;
    private static string autoFlushProperty;
    [ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataDefaultLevelDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataDefaultLevelDisplayName")]
[ConfigurationPropertyAttribute("switchValue")]
[ViewModelAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.Logging.SourceLevelsProperty, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
public SourceLevels DefaultLevel { get; public set; }
    [ConfigurationPropertyAttribute("autoFlush")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataAutoFlushDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataAutoFlushDisplayName")]
public bool AutoFlush { get; public set; }
    [EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.OverriddenTraceListenerCollectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics.IEnvironmentalOverridesEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.ElementCollectionEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Windows.FrameworkElement, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ConfigurationPropertyAttribute("listeners")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataTraceListenersDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "TraceSourceDataTraceListenersDisplayName")]
[ConfigurationCollectionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData")]
[DesignTimeReadOnlyAttribute("False")]
public NamedElementCollection`1<TraceListenerReferenceData> TraceListeners { get; }
    public TraceSourceData(string name, SourceLevels defaultLevel);
    public TraceSourceData(string name, SourceLevels defaultLevel, bool autoFlush);
    public SourceLevels get_DefaultLevel();
    public void set_DefaultLevel(SourceLevels value);
    public bool get_AutoFlush();
    public void set_AutoFlush(bool value);
    public NamedElementCollection`1<TraceListenerReferenceData> get_TraceListeners();
}
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "XmlTraceListenerDataDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "XmlTraceListenerDataDisplayName")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData : TraceListenerData {
    private static string fileNameProperty;
    [ConfigurationPropertyAttribute("fileName")]
[ResourceDescriptionAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "XmlTraceListenerDataFileNameDescription")]
[ResourceDisplayNameAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources", "XmlTraceListenerDataFileNameDisplayName")]
[EditorAttribute("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ComponentModel.Editors.FilteredFileNameEditor, Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FileName { get; public set; }
    public XmlTraceListenerData(string name, string fileName);
    public string get_FileName();
    public void set_FileName(string value);
    protected virtual TraceListener CoreBuildTraceListener(LoggingSettings settings);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems : object {
    public static string CallContextSlotName;
    [SecurityCriticalAttribute]
public void SetContextItem(object key, object value);
    [SecurityCriticalAttribute]
public void FlushContextItems();
    [SecuritySafeCriticalAttribute]
public void ProcessContextItems(LogEntry log);
    [SecurityCriticalAttribute]
private static Hashtable GetContextItems();
    private string GetContextItemValue(object contextData);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter : object {
    private static string LineSeparator;
    public static string Header;
    private NameValueCollection additionalInfo;
    private string applicationName;
    public ExceptionFormatter(NameValueCollection additionalInfo, string applicationName);
    private static ExceptionFormatter();
    public string GetMessage(Exception exception);
    private static void ReflectException(Exception currException, StringBuilder strEventInfo);
    private static void ProcessAdditionalInfo(PropertyInfo propinfo, object propValue, StringBuilder stringBuilder);
    private void CollectAdditionalInfo();
    private static string GetWindowsIdentity();
    private static string GetMachineName();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider : object {
    private IContextUtils contextUtils;
    public string OriginalCallerAccountName { get; }
    public string DirectCallerAccountName { get; }
    public string TransactionId { get; }
    public string ApplicationId { get; }
    public string ActivityId { get; }
    internal ComPlusInformationProvider(IContextUtils contextUtils);
    [SecuritySafeCriticalAttribute]
public sealed virtual void PopulateDictionary(IDictionary`2<string, object> dict);
    public string get_OriginalCallerAccountName();
    public string get_DirectCallerAccountName();
    public string get_TransactionId();
    public string get_ApplicationId();
    public string get_ActivityId();
    private string GetSafeProperty(ContextAccessorDelegate accessorDelegate);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider : object {
    private IDebugUtils debugUtils;
    public DebugInformationProvider(IDebugUtils debugUtils);
    public sealed virtual void PopulateDictionary(IDictionary`2<string, object> dict);
}
[SecurityCriticalAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.ContextUtils : object {
    private SecurityCallContext currentCall;
    private SecurityCallContext CurrentCall { get; }
    private IObjectContext ObjectContext { get; }
    [SecurityCriticalAttribute]
public sealed virtual string GetActivityId();
    [SecurityCriticalAttribute]
public sealed virtual string GetApplicationId();
    [SecurityCriticalAttribute]
public sealed virtual string GetTransactionId();
    [SecurityCriticalAttribute]
public sealed virtual string GetDirectCallerAccountName();
    [SecurityCriticalAttribute]
public sealed virtual string GetOriginalCallerAccountName();
    private SecurityCallContext get_CurrentCall();
    private IObjectContext get_ObjectContext();
}
internal class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.DebugUtils : object {
    public sealed virtual string GetStackTraceWithSourceInfo(StackTrace stackTrace);
}
[SecurityCriticalAttribute]
public interface Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils {
    public abstract virtual string GetActivityId();
    public abstract virtual string GetApplicationId();
    public abstract virtual string GetTransactionId();
    public abstract virtual string GetDirectCallerAccountName();
    public abstract virtual string GetOriginalCallerAccountName();
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IDebugUtils {
    public abstract virtual string GetStackTraceWithSourceInfo(StackTrace stackTrace);
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.IExtraInformationProvider {
    public abstract virtual void PopulateDictionary(IDictionary`2<string, object> dict);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider : object {
    public string AuthenticationType { get; }
    public string IdentityName { get; }
    public bool IsAuthenticated { get; }
    public sealed virtual void PopulateDictionary(IDictionary`2<string, object> dict);
    public string get_AuthenticationType();
    public string get_IdentityName();
    public bool get_IsAuthenticated();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider : object {
    public string CurrentUser { get; }
    public string ProcessAccountName { get; }
    [SecuritySafeCriticalAttribute]
public sealed virtual void PopulateDictionary(IDictionary`2<string, object> dict);
    public string get_CurrentUser();
    public string get_ProcessAccountName();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter : LogFilter {
    private ICollection`1<string> categoryFilters;
    private CategoryFilterMode categoryFilterMode;
    public ICollection`1<string> CategoryFilters { get; }
    public CategoryFilterMode CategoryFilterMode { get; public set; }
    public CategoryFilter(string name, ICollection`1<string> categoryFilters, CategoryFilterMode categoryFilterMode);
    public virtual bool Filter(LogEntry log);
    public bool ShouldLog(IEnumerable`1<string> categories);
    public bool ShouldLog(string category);
    public ICollection`1<string> get_CategoryFilters();
    public CategoryFilterMode get_CategoryFilterMode();
    public void set_CategoryFilterMode(CategoryFilterMode value);
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter {
    public string Name { get; }
    public abstract virtual bool Filter(LogEntry log);
    public abstract virtual string get_Name();
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler {
    public abstract virtual bool FilterCheckingFailed(Exception ex, LogEntry logEntry, ILogFilter filter);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter : LogFilter {
    private bool enabled;
    public bool Enabled { get; public set; }
    public LogEnabledFilter(string name, bool enabled);
    public virtual bool Filter(LogEntry log);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter : object {
    private string name;
    public string Name { get; }
    protected LogFilter(string name);
    public abstract virtual bool Filter(LogEntry log);
    public sealed virtual string get_Name();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper : object {
    private IEnumerable`1<ILogFilter> filters;
    private ILogFilterErrorHandler handler;
    public LogFilterHelper(IEnumerable`1<ILogFilter> filters, ILogFilterErrorHandler handler);
    public bool CheckFilters(LogEntry log);
    public T GetFilter();
    public T GetFilter(string name);
    public ILogFilter GetFilter(string name);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter : LogFilter {
    private int minimumPriority;
    private int maximumPriority;
    public int MinimumPriority { get; }
    public int MaximumPriority { get; }
    public PriorityFilter(string name, int minimumPriority);
    public PriorityFilter(string name, int minimumPriority, int maximumPriority);
    public virtual bool Filter(LogEntry log);
    public bool ShouldLog(int priority);
    public int get_MinimumPriority();
    public int get_MaximumPriority();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter : LogFormatter {
    public virtual string Format(LogEntry log);
    public static LogEntry Deserialize(string serializedLogEntry);
    private static BinaryFormatter GetFormatter();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1 : MulticastDelegate {
    public Formatter`1(object object, IntPtr method);
    public virtual string Invoke(T instance);
    public virtual IAsyncResult BeginInvoke(T instance, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1 : object {
    private IEnumerable`1<Formatter`1<T>> formatters;
    public GenericTextFormatter`1(string template, IDictionary`2<string, TokenHandler`1<T>> tokenHandlers);
    private static IEnumerable`1<Formatter`1<T>> SetUpFormatters(string template, IDictionary`2<string, TokenHandler`1<T>> tokenHandlers);
    public static TokenHandler`1<T> CreateSimpleTokenHandler(string constant);
    public static TokenHandler`1<T> CreateSimpleTokenHandler(Formatter`1<T> formatter);
    public static TokenHandler`1<T> CreateParameterizedTokenHandler(ParameterizedFormatterFactory`1<T> formatterFactory);
    public void Format(T instance, StringBuilder output);
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter {
    public abstract virtual string Format(LogEntry log);
}
public enum Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting : Enum {
    public int value__;
    public static JsonFormatting None;
    public static JsonFormatting Indented;
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter : LogFormatter {
    [CompilerGeneratedAttribute]
private JsonFormatting <Formatting>k__BackingField;
    public JsonFormatting Formatting { get; public set; }
    public JsonLogFormatter(JsonFormatting formatting);
    [CompilerGeneratedAttribute]
public JsonFormatting get_Formatting();
    [CompilerGeneratedAttribute]
public void set_Formatting(JsonFormatting value);
    public virtual string Format(LogEntry log);
    public static T Deserialize(string serializedLogEntry);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter : object {
    public abstract virtual string Format(LogEntry log);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ParameterizedFormatterFactory`1 : MulticastDelegate {
    public ParameterizedFormatterFactory`1(object object, IntPtr method);
    public virtual Formatter`1<T> Invoke(string parameter);
    public virtual IAsyncResult BeginInvoke(string parameter, AsyncCallback callback, object object);
    public virtual Formatter`1<T> EndInvoke(IAsyncResult result);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter : LogFormatter {
    private static string TimestampLocalStartDelimiter;
    private static string TimestampLocalStartDelimiterWithFormat;
    private static string FixedFormatUSDateFormat;
    private static string FixedFormatISOInternationalDateFormat;
    private static string FixedFormatTimeFormat;
    private static Dictionary`2<string, TokenHandler`1<LogEntry>> defaultTokenHandlers;
    private static Dictionary`2<string, TokenHandler`1<LogEntry>> emptyExtraTokenHandlers;
    private string template;
    private GenericTextFormatter`1<LogEntry> formatter;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Formatter`1<LogEntry> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<LogEntry, DateTime> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<LogEntry, DateTime> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Formatter`1<KeyValuePair`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Formatter`1<KeyValuePair`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate2f;
    public string Template { get; public set; }
    public static string DefaultTextFormat { get; }
    private static TextFormatter();
    public TextFormatter(string template);
    protected TextFormatter(string template, IDictionary`2<string, TokenHandler`1<LogEntry>> extraTokenHandlers);
    private static Formatter`1<LogEntry> TimestampFormatterFactory(string parameter);
    public static string FormatFixedIsoDate(DateTime date);
    public static string FormatFixedUSDate(DateTime date);
    public static string FormatFixedTime(DateTime date);
    private static Formatter`1<LogEntry> ReflectedPropertyFormatterFactory(string parameter);
    private static Formatter`1<LogEntry> KeyValueFormatterFactory(string parameter);
    private static Formatter`1<LogEntry> DictionaryTokenHandlerFactory(string parameter);
    public string get_Template();
    public void set_Template(string value);
    public virtual string Format(LogEntry log);
    public static string FormatCategoriesCollection(ICollection`1<string> categories);
    private static string FormatSeverity(TraceEventType severity);
    public static string get_DefaultTextFormat();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__0(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__1(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__3(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__4(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__5(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__6(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__7(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__8(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__9(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__a(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__b(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__c(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__d(LogEntry le);
    [CompilerGeneratedAttribute]
private static DateTime <TimestampFormatterFactory>b__1c(LogEntry le);
    [CompilerGeneratedAttribute]
private static DateTime <TimestampFormatterFactory>b__1d(LogEntry le);
    [CompilerGeneratedAttribute]
private static string <DictionaryTokenHandlerFactory>b__2b(KeyValuePair`2<string, object> kvp);
    [CompilerGeneratedAttribute]
private static string <DictionaryTokenHandlerFactory>b__2c(KeyValuePair`2<string, object> kvp);
}
[ObsoleteAttribute("Use the TokenHandler delegate instead.")]
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction : object {
    private string startDelimiter;
    private string endDelimiter;
    protected TokenFunction(string tokenStartDelimiter);
    protected TokenFunction(string tokenStartDelimiter, string tokenEndDelimiter);
    public virtual void Format(StringBuilder messageBuilder, LogEntry log);
    public abstract virtual string FormatToken(string tokenTemplate, LogEntry log);
    protected virtual string GetInnerTemplate(int startPos, string message);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1 : MulticastDelegate {
    public TokenHandler`1(object object, IntPtr method);
    public virtual Formatter`1<T> Invoke(string template, Int32& currentIndex);
    public virtual IAsyncResult BeginInvoke(string template, Int32& currentIndex, AsyncCallback callback, object object);
    public virtual Formatter`1<T> EndInvoke(Int32& currentIndex, IAsyncResult result);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.XmlLogFormatter : LogFormatter {
    private static string DefaultValue;
    public virtual string Format(LogEntry log);
    private void Format(object obj, XmlWriter writer);
    private string CreateRootName(object obj);
    private string ConvertToString(PropertyInfo propertyInfo, object obj);
}
[XmlRootAttribute("logEntry")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry : object {
    private static bool isFullyTrusted;
    private static TextFormatter toStringFormatter;
    private string message;
    private string title;
    private ICollection`1<string> categories;
    private String[] categoryStrings;
    private int priority;
    private int eventId;
    private Guid activityId;
    private Nullable`1<Guid> relatedActivityId;
    private TraceEventType severity;
    private string machineName;
    private DateTime timeStamp;
    private StringBuilder errorMessages;
    private IDictionary`2<string, object> extendedProperties;
    private string appDomainName;
    private string processId;
    private string processName;
    private string threadName;
    private string win32ThreadId;
    internal bool timeStampInitialized;
    internal bool appDomainNameInitialized;
    internal bool machineNameInitialized;
    internal bool processIdInitialized;
    internal bool processNameInitialized;
    internal bool win32ThreadIdInitialized;
    internal bool threadNameInitialized;
    internal bool activityIdInitialized;
    private bool unmanagedCodePermissionAvailable;
    private bool unmanagedCodePermissionAvailableInitialized;
    public string Message { get; public set; }
    public ICollection`1<string> Categories { get; public set; }
    public int Priority { get; public set; }
    public int EventId { get; public set; }
    public TraceEventType Severity { get; public set; }
    public string LoggedSeverity { get; }
    public string Title { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public string MachineName { get; public set; }
    public string AppDomainName { get; public set; }
    public string ProcessId { get; public set; }
    public string ProcessName { get; public set; }
    public string ManagedThreadName { get; public set; }
    public string Win32ThreadId { get; public set; }
    public IDictionary`2<string, object> ExtendedProperties { get; public set; }
    public string TimeStampString { get; }
    public Guid ActivityId { get; public set; }
    public Nullable`1<Guid> RelatedActivityId { get; public set; }
    public string ErrorMessages { get; }
    private bool UnmanagedCodePermissionAvailable { get; private set; }
    public string ActivityIdString { get; }
    public String[] CategoriesStrings { get; }
    public static string DefaultTitle { get; }
    private static LogEntry();
    public LogEntry(object message, string category, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public LogEntry(object message, ICollection`1<string> categories, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public string get_Message();
    public void set_Message(string value);
    public ICollection`1<string> get_Categories();
    public void set_Categories(ICollection`1<string> value);
    public int get_Priority();
    public void set_Priority(int value);
    public int get_EventId();
    public void set_EventId(int value);
    public TraceEventType get_Severity();
    public void set_Severity(TraceEventType value);
    public string get_LoggedSeverity();
    public string get_Title();
    public void set_Title(string value);
    public DateTime get_TimeStamp();
    public void set_TimeStamp(DateTime value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_AppDomainName();
    public void set_AppDomainName(string value);
    public string get_ProcessId();
    public void set_ProcessId(string value);
    public string get_ProcessName();
    public void set_ProcessName(string value);
    public string get_ManagedThreadName();
    public void set_ManagedThreadName(string value);
    public string get_Win32ThreadId();
    public void set_Win32ThreadId(string value);
    public IDictionary`2<string, object> get_ExtendedProperties();
    public void set_ExtendedProperties(IDictionary`2<string, object> value);
    public string get_TimeStampString();
    private void InitializeTimeStamp();
    private void InitializeActivityId();
    private void InitializeMachineName();
    private void InitializeAppDomainName();
    private void InitializeProcessId();
    private void InitializeProcessName();
    private void InitializeThreadName();
    private void InitializeWin32ThreadId();
    public Guid get_ActivityId();
    public void set_ActivityId(Guid value);
    public Nullable`1<Guid> get_RelatedActivityId();
    public void set_RelatedActivityId(Nullable`1<Guid> value);
    public sealed virtual object Clone();
    public virtual void AddErrorMessage(string message);
    public string get_ErrorMessages();
    public virtual string ToString();
    [SecuritySafeCriticalAttribute]
private bool get_UnmanagedCodePermissionAvailable();
    private void set_UnmanagedCodePermissionAvailable(bool value);
    internal void CollectIntrinsicProperties();
    internal void CollectThreadSpecificIntrinsicProperties();
    public static string GetProcessName();
    private static ICollection`1<string> BuildCategoriesCollection(string category);
    public string get_ActivityIdString();
    public String[] get_CategoriesStrings();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public static string get_DefaultTitle();
}
internal static class Microsoft.Practices.EnterpriseLibrary.Logging.LogEntryContext : object {
    internal static string GetAppDomainNameSafe();
    internal static string GetMachineNameSafe();
    [SecuritySafeCriticalAttribute]
internal static string GetProcessIdSafe();
    [SecuritySafeCriticalAttribute]
internal static string GetProcessNameSafe();
    [SecuritySafeCriticalAttribute]
internal static string GetCurrentThreadIdSafe();
    [SecuritySafeCriticalAttribute]
internal static Guid GetActivityId();
    [SecurityCriticalAttribute]
private static string GetProcessName();
    [SecurityCriticalAttribute]
private static string GetCurrentProcessId();
    [SecurityCriticalAttribute]
private static string GetCurrentThreadId();
}
public static class Microsoft.Practices.EnterpriseLibrary.Logging.Logger : object {
    private static object sync;
    private static LogWriter modreq(System.Runtime.CompilerServices.IsVolatile) writer;
    public static LogWriter Writer { get; }
    private static Logger();
    [SecurityCriticalAttribute]
public static void SetContextItem(object key, object value);
    [SecurityCriticalAttribute]
public static void FlushContextItems();
    public static void Write(object message);
    public static void Write(object message, string category);
    public static void Write(object message, string category, int priority);
    public static void Write(object message, string category, int priority, int eventId);
    public static void Write(object message, string category, int priority, int eventId, TraceEventType severity);
    public static void Write(object message, string category, int priority, int eventId, TraceEventType severity, string title);
    public static void Write(object message, IDictionary`2<string, object> properties);
    public static void Write(object message, string category, IDictionary`2<string, object> properties);
    public static void Write(object message, string category, int priority, IDictionary`2<string, object> properties);
    public static void Write(object message, string category, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public static void Write(object message, ICollection`1<string> categories);
    public static void Write(object message, ICollection`1<string> categories, int priority);
    public static void Write(object message, ICollection`1<string> categories, int priority, int eventId);
    public static void Write(object message, ICollection`1<string> categories, int priority, int eventId, TraceEventType severity);
    public static void Write(object message, ICollection`1<string> categories, int priority, int eventId, TraceEventType severity, string title);
    public static void Write(object message, ICollection`1<string> categories, IDictionary`2<string, object> properties);
    public static void Write(object message, ICollection`1<string> categories, int priority, IDictionary`2<string, object> properties);
    public static void Write(object message, ICollection`1<string> categories, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public static void Write(LogEntry log);
    public static T GetFilter();
    public static T GetFilter(string name);
    public static ILogFilter GetFilter(string name);
    public static bool IsLoggingEnabled();
    public static bool ShouldLog(LogEntry log);
    public static void Reset();
    public static LogWriter get_Writer();
    public static void SetLogWriter(LogWriter logWriter, bool throwIfSet);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LoggingConfiguration : object {
    [CompilerGeneratedAttribute]
private LogSourceDataCollection <LogSources>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ILogFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecialSourcesConfiguration <SpecialSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTracingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseImpersonation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogWarningsWhenNoCategoriesMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, IEnumerable`1<TraceListener>> CS$<>9__CachedAnonymousMethodDelegate1;
    public LogSourceDataCollection LogSources { get; private set; }
    public IList`1<ILogFilter> Filters { get; private set; }
    public SpecialSourcesConfiguration SpecialSources { get; private set; }
    public bool IsTracingEnabled { get; public set; }
    public bool IsLoggingEnabled { get; public set; }
    public bool UseImpersonation { get; public set; }
    public bool LogWarningsWhenNoCategoriesMatch { get; public set; }
    public string DefaultSource { get; public set; }
    public IEnumerable`1<TraceListener> AllTraceListeners { get; }
    internal LoggingConfiguration(IEnumerable`1<ILogFilter> filters, IEnumerable`1<LogSourceData> logSources, SpecialLogSourceData allEventsTraceSource, SpecialLogSourceData notProcessedTraceSource, SpecialLogSourceData errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch, bool revertImpersonation);
    [CompilerGeneratedAttribute]
public LogSourceDataCollection get_LogSources();
    [CompilerGeneratedAttribute]
private void set_LogSources(LogSourceDataCollection value);
    [CompilerGeneratedAttribute]
public IList`1<ILogFilter> get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(IList`1<ILogFilter> value);
    [CompilerGeneratedAttribute]
public SpecialSourcesConfiguration get_SpecialSources();
    [CompilerGeneratedAttribute]
private void set_SpecialSources(SpecialSourcesConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_IsTracingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsTracingEnabled(bool value);
    public bool get_IsLoggingEnabled();
    public void set_IsLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseImpersonation();
    [CompilerGeneratedAttribute]
public void set_UseImpersonation(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogWarningsWhenNoCategoriesMatch();
    [CompilerGeneratedAttribute]
public void set_LogWarningsWhenNoCategoriesMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultSource();
    [CompilerGeneratedAttribute]
public void set_DefaultSource(string value);
    public IEnumerable`1<TraceListener> get_AllTraceListeners();
    public LogSourceData AddLogSource(string name);
    public LogSourceData AddLogSource(string name, TraceListener[] traceListeners);
    public LogSourceData AddLogSource(string name, SourceLevels level);
    public LogSourceData AddLogSource(string name, SourceLevels level, bool autoFlush);
    public LogSourceData AddLogSource(string name, SourceLevels level, bool autoFlush, TraceListener[] traceListeners);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TraceListener> <get_AllTraceListeners>b__0(LogSourceData c);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.Logging.LoggingConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddTraceListener(LogSourceData logSource, TraceListener traceListener);
    [ExtensionAttribute]
public static void AddTraceListener(SpecialLogSourceData logSource, TraceListener traceListener);
    [ExtensionAttribute]
public static void AddAsynchronousTraceListener(LogSourceData logSource, TraceListener traceListener, Nullable`1<int> bufferSize, Nullable`1<int> maxDegreeOfParallelism, Nullable`1<TimeSpan> disposeTimeout);
    [ExtensionAttribute]
public static void AddAsynchronousTraceListener(SpecialLogSourceData logSource, TraceListener traceListener, Nullable`1<int> bufferSize, Nullable`1<int> maxDegreeOfParallelism, Nullable`1<TimeSpan> disposeTimeout);
    private static TraceListener BuildAsynchronousWrapper(TraceListener traceListener, Nullable`1<int> bufferSize, Nullable`1<int> maxDegreeOfParallelism, Nullable`1<TimeSpan> disposeTimeout);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException : Exception {
    public LoggingException(string message);
    public LoggingException(string message, Exception exception);
    protected LoggingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogSource : object {
    public static bool DefaultAutoFlushProperty;
    private SourceLevels level;
    private string name;
    private IList`1<TraceListener> traceListeners;
    private bool autoFlush;
    public string Name { get; }
    public IEnumerable`1<TraceListener> Listeners { get; }
    public SourceLevels Level { get; public set; }
    public bool AutoFlush { get; public set; }
    public LogSource(string name);
    public LogSource(string name, SourceLevels level);
    public LogSource(string name, IEnumerable`1<TraceListener> traceListeners, SourceLevels level);
    public LogSource(string name, IEnumerable`1<TraceListener> traceListeners, SourceLevels level, bool autoFlush);
    public string get_Name();
    public IEnumerable`1<TraceListener> get_Listeners();
    public SourceLevels get_Level();
    public void set_Level(SourceLevels value);
    public bool get_AutoFlush();
    public void set_AutoFlush(bool value);
    public void TraceData(TraceEventType eventType, int id, LogEntry logEntry);
    public void TraceData(TraceEventType eventType, int id, LogEntry logEntry, TraceListenerFilter traceListenerFilter);
    internal void TraceData(TraceEventType eventType, int id, LogEntry logEntry, TraceListenerFilter traceListenerFilter, TraceEventCache traceEventCache, ReportTracingError reportError);
    private bool ShouldTrace(TraceEventType eventType);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogSourceData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLevels <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TraceListener> <Listeners>k__BackingField;
    public string Name { get; public set; }
    public bool AutoFlush { get; public set; }
    public SourceLevels Level { get; public set; }
    public ICollection`1<TraceListener> Listeners { get; private set; }
    public LogSourceData(string name, SourceLevels level, bool autoFlush, TraceListener[] traceListeners);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoFlush();
    [CompilerGeneratedAttribute]
public void set_AutoFlush(bool value);
    [CompilerGeneratedAttribute]
public SourceLevels get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(SourceLevels value);
    [CompilerGeneratedAttribute]
public ICollection`1<TraceListener> get_Listeners();
    [CompilerGeneratedAttribute]
private void set_Listeners(ICollection`1<TraceListener> value);
    internal LogSource ToLogSource();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogSourceDataCollection : object {
    private Dictionary`2<string, LogSourceData> dict;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public LogSourceData Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public LogSourceDataCollection(IEnumerable`1<LogSourceData> collection);
    public LogSourceData get_Item(string name);
    public sealed virtual void Add(LogSourceData item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(LogSourceData item);
    public sealed virtual void CopyTo(LogSourceData[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(LogSourceData item);
    public sealed virtual IEnumerator`1<LogSourceData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(LogSourceData k);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter : object {
    public static int LogWriterFailureEventID;
    private static int DefaultPriority;
    private static TraceEventType DefaultSeverity;
    private static int DefaultEventId;
    private static string DefaultTitle;
    private LogWriterStructureHolder structureHolder;
    private LogFilterHelper filter;
    private ReaderWriterLockSlim rwSyncLock;
    private static ICollection`1<string> emptyCategoriesList;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, LogSource> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, LogSource>, LogSourceData> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<LogSourceData, LogSource> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, LogSource>, LogSource> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<LogSource, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<LogSource, IEnumerable`1<TraceListener>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Action`1<IDisposable> CS$<>9__CachedAnonymousMethodDelegate11;
    public IDictionary`2<string, LogSource> TraceSources { get; }
    private ReaderWriterLockSlim SyncLock { get; }
    public LogWriter(LoggingConfiguration config);
    public LogWriter(IEnumerable`1<ILogFilter> filters, IDictionary`2<string, LogSource> traceSources, LogSource errorsTraceSource, string defaultCategory);
    public LogWriter(IEnumerable`1<ILogFilter> filters, IDictionary`2<string, LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch);
    public LogWriter(IEnumerable`1<ILogFilter> filters, IDictionary`2<string, LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch, bool revertImpersonation);
    public LogWriter(IEnumerable`1<ILogFilter> filters, IEnumerable`1<LogSource> traceSources, LogSource errorsTraceSource, string defaultCategory);
    public LogWriter(IEnumerable`1<ILogFilter> filters, IEnumerable`1<LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch);
    public LogWriter(LogWriterStructureHolder structureHolder);
    private static LogWriter();
    public IDictionary`2<string, LogSource> get_TraceSources();
    private ReaderWriterLockSlim get_SyncLock();
    public void Configure(Action`1<LoggingConfiguration> configurationScript);
    private static void AddTracingCategories(LogEntry log, Stack logicalOperationStack, bool replacementDone);
    private static LogWriterStructureHolder CreateStructureHolder(IEnumerable`1<ILogFilter> filters, IDictionary`2<string, LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch, bool revertImpersonation);
    private static IDictionary`2<string, LogSource> CreateTraceSourcesDictionary(IEnumerable`1<LogSource> traceSources);
    private static IEnumerable`1<TraceListener> GetAllListeners(LogWriterStructureHolder holder);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    private IEnumerable`1<LogSource> DoGetMatchingTraceSources(LogEntry logEntry);
    public sealed virtual bool FilterCheckingFailed(Exception ex, LogEntry logEntry, ILogFilter filter);
    public T GetFilter();
    public T GetFilter(string name);
    public ILogFilter GetFilter(string name);
    private static Stack GetLogicalOperationStack();
    [SecuritySafeCriticalAttribute]
private static Stack DoGetLogicalOperationStack();
    public IEnumerable`1<LogSource> GetMatchingTraceSources(LogEntry logEntry);
    public bool IsLoggingEnabled();
    public bool IsTracingEnabled();
    private static bool IsValidTraceSource(LogSource traceSource);
    private void ProcessLog(LogEntry log, TraceEventCache traceEventCache);
    private WindowsImpersonationContext RevertExistingImpersonation();
    internal void ReplaceStructureHolder(LogWriterStructureHolder newStructureHolder);
    private void ReportExceptionCheckingFilters(Exception exception, object log, ILogFilter logFilter);
    private void ReportExceptionDuringTracing(Exception exception, object log, string traceSourceName);
    private void ReportMissingCategories(ICollection`1<string> missingCategories, LogEntry logEntry);
    private void ReportUnknownException(Exception exception, LogEntry log);
    public bool ShouldLog(LogEntry log);
    public void Write(LogEntry log);
    private void ExecuteReadOperation(Action readOperation);
    [SecurityCriticalAttribute]
public void FlushContextItems();
    [SecurityCriticalAttribute]
public void SetContextItem(object key, object value);
    public void Write(object message);
    public void Write(object message, string category);
    public void Write(object message, string category, int priority);
    public void Write(object message, string category, int priority, int eventId);
    public void Write(object message, string category, int priority, int eventId, TraceEventType severity);
    public void Write(object message, string category, int priority, int eventId, TraceEventType severity, string title);
    public void Write(object message, IDictionary`2<string, object> properties);
    public void Write(object message, string category, IDictionary`2<string, object> properties);
    public void Write(object message, string category, int priority, IDictionary`2<string, object> properties);
    public void Write(object message, string category, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public void Write(object message, IEnumerable`1<string> categories);
    public void Write(object message, IEnumerable`1<string> categories, int priority);
    public void Write(object message, IEnumerable`1<string> categories, int priority, int eventId);
    public void Write(object message, IEnumerable`1<string> categories, int priority, int eventId, TraceEventType severity);
    public void Write(object message, IEnumerable`1<string> categories, int priority, int eventId, TraceEventType severity, string title);
    public void Write(object message, IEnumerable`1<string> categories, IDictionary`2<string, object> properties);
    public void Write(object message, IEnumerable`1<string> categories, int priority, IDictionary`2<string, object> properties);
    public void Write(object message, IEnumerable`1<string> categories, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(LogSourceData c);
    [CompilerGeneratedAttribute]
private static LogSource <.ctor>b__1(LogSourceData c);
    [CompilerGeneratedAttribute]
private static LogSourceData <Configure>b__4(KeyValuePair`2<string, LogSource> c);
    [CompilerGeneratedAttribute]
private static string <Configure>b__5(LogSourceData c);
    [CompilerGeneratedAttribute]
private static LogSource <Configure>b__6(LogSourceData c);
    [CompilerGeneratedAttribute]
private static LogSource <GetAllListeners>b__a(KeyValuePair`2<string, LogSource> s);
    [CompilerGeneratedAttribute]
private static bool <GetAllListeners>b__b(LogSource s);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TraceListener> <GetAllListeners>b__c(LogSource c);
    [CompilerGeneratedAttribute]
private static void <Dispose>b__10(IDisposable l);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory : object {
    private LogWriterConfigurationBuilder builder;
    [CompilerGeneratedAttribute]
private static Func`2<string, ConfigurationSection> CS$<>9__CachedAnonymousMethodDelegate1;
    public LogWriterFactory(IConfigurationSource configurationSource);
    public LogWriterFactory(Func`2<string, ConfigurationSection> configurationAccessor);
    public LogWriter Create();
    [CompilerGeneratedAttribute]
private static ConfigurationSection <.ctor>b__0(string s);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder : object {
    private IEnumerable`1<ILogFilter> filters;
    private IDictionary`2<string, LogSource> traceSources;
    private LogSource allEventsTraceSource;
    private LogSource notProcessedTraceSource;
    private LogSource errorsTraceSource;
    private string defaultCategory;
    private bool tracingEnabled;
    private bool logWarningsWhenNoCategoriesMatch;
    private bool revertImpersonation;
    public IEnumerable`1<ILogFilter> Filters { get; }
    public IDictionary`2<string, LogSource> TraceSources { get; }
    public LogSource AllEventsTraceSource { get; }
    public LogSource NotProcessedTraceSource { get; }
    public LogSource ErrorsTraceSource { get; }
    public string DefaultCategory { get; }
    public bool TracingEnabled { get; }
    public bool LogWarningsWhenNoCategoriesMatch { get; }
    public bool RevertImpersonation { get; }
    public LogWriterStructureHolder(IEnumerable`1<ILogFilter> filters, IDictionary`2<string, LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch, bool revertImpersonation);
    public LogWriterStructureHolder(IEnumerable`1<ILogFilter> filters, IEnumerable`1<string> traceSourceNames, IEnumerable`1<LogSource> traceSources, LogSource allEventsTraceSource, LogSource notProcessedTraceSource, LogSource errorsTraceSource, string defaultCategory, bool tracingEnabled, bool logWarningsWhenNoCategoriesMatch, bool revertImpersonation);
    public IEnumerable`1<ILogFilter> get_Filters();
    public IDictionary`2<string, LogSource> get_TraceSources();
    public LogSource get_AllEventsTraceSource();
    public LogSource get_NotProcessedTraceSource();
    public LogSource get_ErrorsTraceSource();
    public string get_DefaultCategory();
    public bool get_TracingEnabled();
    public bool get_LogWarningsWhenNoCategoriesMatch();
    public bool get_RevertImpersonation();
}
[SecurityCriticalAttribute]
internal static class Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods : object {
    internal static UInt32 OWNER_SECURITY_INFORMATION;
    internal static UInt32 GROUP_SECURITY_INFORMATION;
    internal static UInt32 DACL_SECURITY_INFORMATION;
    internal static UInt32 SACL_SECURITY_INFORMATION;
    internal static int CONTEXT_E_NOCONTEXT;
    internal static int E_NOINTERFACE;
    internal static int QueryPerformanceCounter(Int64& lpPerformanceCount);
    internal static int QueryPerformanceFrequency(Int64& lpPerformanceCount);
    internal static int GetObjectContext(IObjectContext& pCtx);
    internal static IntPtr GetCurrentProcess();
    public static int GetCurrentProcessId();
    public static int GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
    public static IntPtr GetModuleHandle(string moduleName);
    internal static bool GetUserNameEx(ExtendedNameFormat nameFormat, StringBuilder nameBuffer, UInt32& size);
    internal static int GetSecurityInfo(IntPtr handle, SE_OBJECT_TYPE objectType, UInt32 securityInformation, IntPtr& ppSidOwner, IntPtr& ppSidGroup, IntPtr& ppDacl, IntPtr& ppSacl, IntPtr& ppSecurityDescriptor);
    internal static bool LookupAccountSid(IntPtr systemName, IntPtr sid, StringBuilder accountName, UInt32& accountNameLength, StringBuilder domainName, UInt32& domainNameLength, Int32& sidType);
    public static int GetCurrentThreadId();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AllEventsTraceSourceName { get; }
    internal static string AverageTraceExecutionTimeBaseHelpResource { get; }
    internal static string AverageTraceExecutionTimeHelpResource { get; }
    internal static string BlockName { get; }
    internal static string ComPlusInfo_ActivityId { get; }
    internal static string ComPlusInfo_ApplicationId { get; }
    internal static string ComPlusInfo_DirectCallerAccountName { get; }
    internal static string ComPlusInfo_OriginalCallerAccountName { get; }
    internal static string ComPlusInfo_TransactionID { get; }
    internal static string ConfigurationFailureLogging { get; }
    internal static string ConfigurationFailureUpdating { get; }
    internal static string ConfigurationSectionNotFound { get; }
    internal static string CouldNotLookupAccountSid { get; }
    internal static string DebugInfo_SchemaHelperAtString { get; }
    internal static string DebugInfo_SchemaHelperLine { get; }
    internal static string DebugInfo_SchemaHelperUnknownType { get; }
    internal static string DebugInfo_StackTrace { get; }
    internal static string DebugInfo_StackTraceException { get; }
    internal static string DebugInfo_StackTraceSecurityException { get; }
    internal static string DefaultLogDestinationFailed { get; }
    internal static string DefaultLogDestinationMessage { get; }
    internal static string DefaultLogDestinationSinkName { get; }
    internal static string DefaultLogEntryTitle { get; }
    internal static string DefaultTextFormat { get; }
    internal static string DistEventLoggerMessagePrefix { get; }
    internal static string DistEventLoggerSummary { get; }
    internal static string DistributorEventLoggerDefaultApplicationName { get; }
    internal static string EmailSinkMissingParameters { get; }
    internal static string ErrorsTraceSourceName { get; }
    internal static string ErrorWritingData { get; }
    internal static string EventLogAccessDenied { get; }
    internal static string EventLogSinkMissingEventSource { get; }
    internal static string ExceptionAsynchronousBufferSizeMustBePositive { get; }
    internal static string ExceptionAsynchronousBufferTimeoutMustBeNonNegative { get; }
    internal static string ExceptionAsynchronousTraceListenerFullCapacity { get; }
    internal static string ExceptionCannotCheckImpersonatedIdentity { get; }
    internal static string ExceptionCannotFindAppropriateConstructor { get; }
    internal static string ExceptionCannotLoadDefaultCategory { get; }
    internal static string ExceptionCannotLoadDefaultFormatter { get; }
    internal static string ExceptionCannotRevertImpersonatedIdentity { get; }
    internal static string ExceptionCategoryFilterDataName { get; }
    internal static string ExceptionCategoryNotDefined { get; }
    internal static string ExceptionConfigurationObjectIsNotCustomTraceListenerData { get; }
    internal static string ExceptionCreationLinqExpressionMustBeNew { get; }
    internal static string ExceptionCustomFilterDataHasNoType { get; }
    internal static string ExceptionCustomFilterDataNotFormatter { get; }
    internal static string ExceptionCustomFilterDataTypeCannotBeLoaded { get; }
    internal static string ExceptionCustomFilterTypeDoesNotHaveConstructor { get; }
    internal static string ExceptionCustomFormatterDataHasNoType { get; }
    internal static string ExceptionCustomFormatterDataNotFormatter { get; }
    internal static string ExceptionCustomFormatterDataTypeCannotBeLoaded { get; }
    internal static string ExceptionCustomFormatterTypeDoesNotHaveConstructor { get; }
    internal static string ExceptionCustomListenerTypeDoesNotHaveDefaultConstructor { get; }
    internal static string ExceptionCustomListenerTypeDoesNotHaveRequiredConstructorSignature { get; }
    internal static string ExceptionCustomTraceListenerNotATraceListenerType { get; }
    internal static string ExceptionCustomTraceListenerTypeDoesNotHaveRequiredConstructor { get; }
    internal static string ExceptionDetails { get; }
    internal static string ExceptionDuringFormattingOriginalEntryForReporting { get; }
    internal static string ExceptionFailedToAcquireLockToUpdate { get; }
    internal static string ExceptionFailedToAcquireLockToWriteLog { get; }
    internal static string ExceptionFormatterHeader { get; }
    internal static string ExceptionFormatterNameRequired { get; }
    internal static string ExceptionFormatterNotDefined { get; }
    internal static string ExceptionIncompatibleConfigurationType { get; }
    internal static string ExceptionInvalidTraceListenerType { get; }
    internal static string ExceptionLoggingSectionNotFound { get; }
    internal static string ExceptionLogWriterAlreadySet { get; }
    internal static string ExceptionLogWriterNotSet { get; }
    internal static string ExceptionMethodMustBeImplementedBySubclasses { get; }
    internal static string ExceptionMsmqQueuePathMissing { get; }
    internal static string ExceptionNoSinkDefined { get; }
    internal static string ExceptionNoSinksDefined { get; }
    internal static string ExceptionNullOrEmptyString { get; }
    internal static string ExceptionReadEnvironmentVariablesDenied { get; }
    internal static string ExceptionStackTraceDetails { get; }
    internal static string ExceptionSummary { get; }
    internal static string ExceptionTraceListenerConfigurationElementMissingTypeAttribute { get; }
    internal static string ExceptionTraceListenerConfigurationElementTypeNotFound { get; }
    internal static string ExceptionTraceListenerConfigurationNotFound { get; }
    internal static string ExceptionTraceListenerNotDefined { get; }
    internal static string ExceptionType { get; }
    internal static string ExceptionUnknownErrorPerformingAsynchronousOperation { get; }
    internal static string ExceptionWriterShouldNotBeNull { get; }
    internal static string ExtendedPropertyError { get; }
    internal static string FailureWhileCheckingFilters { get; }
    internal static string FailureWhileReportingMissingCategories { get; }
    internal static string FailureWhileTracing { get; }
    internal static string FileSinkMissingConfiguration { get; }
    internal static string FilterEvaluationFailed { get; }
    internal static string FilterEvaluationFailed2 { get; }
    internal static string FilterEvaluationFailed3 { get; }
    internal static string FormatterFactoryName { get; }
    internal static string InstanceNameNotFoundForSpecifiedType { get; }
    internal static string InstrumentationCounterCategory { get; }
    internal static string InstrumentationCounterCategoryHelp { get; }
    internal static string InstrumentationEventSource { get; }
    internal static string IntrinsicPropertyError { get; }
    internal static string InvalidSink { get; }
    internal static string InvalidSinkMessage { get; }
    internal static string LogEntryIntrinsicPropertyNotFullyTrusted { get; }
    internal static string LogEntryIntrinsicPropertyNoUnmanagedCodePermissionError { get; }
    internal static string LoggingEventRaisedHelpResource { get; }
    internal static string ManagedSecurity_AuthenticationType { get; }
    internal static string ManagedSecurity_IdentityName { get; }
    internal static string ManagedSecurity_IsAuthenticated { get; }
    internal static string MethodNotImplemented { get; }
    internal static string MissingCategories { get; }
    internal static string MissingDefaultFormatter { get; }
    internal static string NotProcessedTraceSourceName { get; }
    internal static string NumLogsDefaultSinkSec { get; }
    internal static string NumLogsDefaultSinkSecMsg { get; }
    internal static string NumLogsDistributedSec { get; }
    internal static string NumLogsDistributedSecMsg { get; }
    internal static string NumLogsWrittenSec { get; }
    internal static string NumLogsWrittenSecMsg { get; }
    internal static string ParameterMustImplementType { get; }
    internal static string ProcessMessageFailed { get; }
    internal static string ProcessMessageFailed2 { get; }
    internal static string ProcessMessageFailed3 { get; }
    internal static string PropertyAccessFailed { get; }
    internal static string ReconfigurationFailure { get; }
    internal static string ReflectedPropertyTokenException { get; }
    internal static string ReflectedPropertyTokenIndexer { get; }
    internal static string ReflectedPropertyTokenNotFound { get; }
    internal static string ReflectedPropertyTokenNotReadable { get; }
    internal static string SinkFactoryName { get; }
    internal static string SinkFailure { get; }
    internal static string TemplateForFailedLogEntry { get; }
    internal static string TotalLoggingEventsRaisedHelpResource { get; }
    internal static string TotalTraceListenerEntriesWrittenHelpResource { get; }
    internal static string TotalTraceOperationsStartedHelpResource { get; }
    internal static string TraceListenerEntryWrittenHelpResource { get; }
    internal static string TraceOperationStartedHelpResource { get; }
    internal static string Tracer_EndMessageFormat { get; }
    internal static string Tracer_StartMessageFormat { get; }
    internal static string TraceSourceFailed { get; }
    internal static string TraceSourceFailed2 { get; }
    internal static string TraceSourceFailed3 { get; }
    internal static string UnknownError { get; }
    internal static string UnknownFailure { get; }
    internal static string UnmanagedSecurity_CurrentUser { get; }
    internal static string UnmanagedSecurity_ProcessAccountName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AllEventsTraceSourceName();
    internal static string get_AverageTraceExecutionTimeBaseHelpResource();
    internal static string get_AverageTraceExecutionTimeHelpResource();
    internal static string get_BlockName();
    internal static string get_ComPlusInfo_ActivityId();
    internal static string get_ComPlusInfo_ApplicationId();
    internal static string get_ComPlusInfo_DirectCallerAccountName();
    internal static string get_ComPlusInfo_OriginalCallerAccountName();
    internal static string get_ComPlusInfo_TransactionID();
    internal static string get_ConfigurationFailureLogging();
    internal static string get_ConfigurationFailureUpdating();
    internal static string get_ConfigurationSectionNotFound();
    internal static string get_CouldNotLookupAccountSid();
    internal static string get_DebugInfo_SchemaHelperAtString();
    internal static string get_DebugInfo_SchemaHelperLine();
    internal static string get_DebugInfo_SchemaHelperUnknownType();
    internal static string get_DebugInfo_StackTrace();
    internal static string get_DebugInfo_StackTraceException();
    internal static string get_DebugInfo_StackTraceSecurityException();
    internal static string get_DefaultLogDestinationFailed();
    internal static string get_DefaultLogDestinationMessage();
    internal static string get_DefaultLogDestinationSinkName();
    internal static string get_DefaultLogEntryTitle();
    internal static string get_DefaultTextFormat();
    internal static string get_DistEventLoggerMessagePrefix();
    internal static string get_DistEventLoggerSummary();
    internal static string get_DistributorEventLoggerDefaultApplicationName();
    internal static string get_EmailSinkMissingParameters();
    internal static string get_ErrorsTraceSourceName();
    internal static string get_ErrorWritingData();
    internal static string get_EventLogAccessDenied();
    internal static string get_EventLogSinkMissingEventSource();
    internal static string get_ExceptionAsynchronousBufferSizeMustBePositive();
    internal static string get_ExceptionAsynchronousBufferTimeoutMustBeNonNegative();
    internal static string get_ExceptionAsynchronousTraceListenerFullCapacity();
    internal static string get_ExceptionCannotCheckImpersonatedIdentity();
    internal static string get_ExceptionCannotFindAppropriateConstructor();
    internal static string get_ExceptionCannotLoadDefaultCategory();
    internal static string get_ExceptionCannotLoadDefaultFormatter();
    internal static string get_ExceptionCannotRevertImpersonatedIdentity();
    internal static string get_ExceptionCategoryFilterDataName();
    internal static string get_ExceptionCategoryNotDefined();
    internal static string get_ExceptionConfigurationObjectIsNotCustomTraceListenerData();
    internal static string get_ExceptionCreationLinqExpressionMustBeNew();
    internal static string get_ExceptionCustomFilterDataHasNoType();
    internal static string get_ExceptionCustomFilterDataNotFormatter();
    internal static string get_ExceptionCustomFilterDataTypeCannotBeLoaded();
    internal static string get_ExceptionCustomFilterTypeDoesNotHaveConstructor();
    internal static string get_ExceptionCustomFormatterDataHasNoType();
    internal static string get_ExceptionCustomFormatterDataNotFormatter();
    internal static string get_ExceptionCustomFormatterDataTypeCannotBeLoaded();
    internal static string get_ExceptionCustomFormatterTypeDoesNotHaveConstructor();
    internal static string get_ExceptionCustomListenerTypeDoesNotHaveDefaultConstructor();
    internal static string get_ExceptionCustomListenerTypeDoesNotHaveRequiredConstructorSignature();
    internal static string get_ExceptionCustomTraceListenerNotATraceListenerType();
    internal static string get_ExceptionCustomTraceListenerTypeDoesNotHaveRequiredConstructor();
    internal static string get_ExceptionDetails();
    internal static string get_ExceptionDuringFormattingOriginalEntryForReporting();
    internal static string get_ExceptionFailedToAcquireLockToUpdate();
    internal static string get_ExceptionFailedToAcquireLockToWriteLog();
    internal static string get_ExceptionFormatterHeader();
    internal static string get_ExceptionFormatterNameRequired();
    internal static string get_ExceptionFormatterNotDefined();
    internal static string get_ExceptionIncompatibleConfigurationType();
    internal static string get_ExceptionInvalidTraceListenerType();
    internal static string get_ExceptionLoggingSectionNotFound();
    internal static string get_ExceptionLogWriterAlreadySet();
    internal static string get_ExceptionLogWriterNotSet();
    internal static string get_ExceptionMethodMustBeImplementedBySubclasses();
    internal static string get_ExceptionMsmqQueuePathMissing();
    internal static string get_ExceptionNoSinkDefined();
    internal static string get_ExceptionNoSinksDefined();
    internal static string get_ExceptionNullOrEmptyString();
    internal static string get_ExceptionReadEnvironmentVariablesDenied();
    internal static string get_ExceptionStackTraceDetails();
    internal static string get_ExceptionSummary();
    internal static string get_ExceptionTraceListenerConfigurationElementMissingTypeAttribute();
    internal static string get_ExceptionTraceListenerConfigurationElementTypeNotFound();
    internal static string get_ExceptionTraceListenerConfigurationNotFound();
    internal static string get_ExceptionTraceListenerNotDefined();
    internal static string get_ExceptionType();
    internal static string get_ExceptionUnknownErrorPerformingAsynchronousOperation();
    internal static string get_ExceptionWriterShouldNotBeNull();
    internal static string get_ExtendedPropertyError();
    internal static string get_FailureWhileCheckingFilters();
    internal static string get_FailureWhileReportingMissingCategories();
    internal static string get_FailureWhileTracing();
    internal static string get_FileSinkMissingConfiguration();
    internal static string get_FilterEvaluationFailed();
    internal static string get_FilterEvaluationFailed2();
    internal static string get_FilterEvaluationFailed3();
    internal static string get_FormatterFactoryName();
    internal static string get_InstanceNameNotFoundForSpecifiedType();
    internal static string get_InstrumentationCounterCategory();
    internal static string get_InstrumentationCounterCategoryHelp();
    internal static string get_InstrumentationEventSource();
    internal static string get_IntrinsicPropertyError();
    internal static string get_InvalidSink();
    internal static string get_InvalidSinkMessage();
    internal static string get_LogEntryIntrinsicPropertyNotFullyTrusted();
    internal static string get_LogEntryIntrinsicPropertyNoUnmanagedCodePermissionError();
    internal static string get_LoggingEventRaisedHelpResource();
    internal static string get_ManagedSecurity_AuthenticationType();
    internal static string get_ManagedSecurity_IdentityName();
    internal static string get_ManagedSecurity_IsAuthenticated();
    internal static string get_MethodNotImplemented();
    internal static string get_MissingCategories();
    internal static string get_MissingDefaultFormatter();
    internal static string get_NotProcessedTraceSourceName();
    internal static string get_NumLogsDefaultSinkSec();
    internal static string get_NumLogsDefaultSinkSecMsg();
    internal static string get_NumLogsDistributedSec();
    internal static string get_NumLogsDistributedSecMsg();
    internal static string get_NumLogsWrittenSec();
    internal static string get_NumLogsWrittenSecMsg();
    internal static string get_ParameterMustImplementType();
    internal static string get_ProcessMessageFailed();
    internal static string get_ProcessMessageFailed2();
    internal static string get_ProcessMessageFailed3();
    internal static string get_PropertyAccessFailed();
    internal static string get_ReconfigurationFailure();
    internal static string get_ReflectedPropertyTokenException();
    internal static string get_ReflectedPropertyTokenIndexer();
    internal static string get_ReflectedPropertyTokenNotFound();
    internal static string get_ReflectedPropertyTokenNotReadable();
    internal static string get_SinkFactoryName();
    internal static string get_SinkFailure();
    internal static string get_TemplateForFailedLogEntry();
    internal static string get_TotalLoggingEventsRaisedHelpResource();
    internal static string get_TotalTraceListenerEntriesWrittenHelpResource();
    internal static string get_TotalTraceOperationsStartedHelpResource();
    internal static string get_TraceListenerEntryWrittenHelpResource();
    internal static string get_TraceOperationStartedHelpResource();
    internal static string get_Tracer_EndMessageFormat();
    internal static string get_Tracer_StartMessageFormat();
    internal static string get_TraceSourceFailed();
    internal static string get_TraceSourceFailed2();
    internal static string get_TraceSourceFailed3();
    internal static string get_UnknownError();
    internal static string get_UnknownFailure();
    internal static string get_UnmanagedSecurity_CurrentUser();
    internal static string get_UnmanagedSecurity_ProcessAccountName();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.ReportTracingError : MulticastDelegate {
    public ReportTracingError(object object, IntPtr method);
    public virtual void Invoke(Exception exception, object data, string source);
    public virtual IAsyncResult BeginInvoke(Exception exception, object data, string source, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.SpecialLogSourceData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLevels <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TraceListener> <Listeners>k__BackingField;
    public string Name { get; public set; }
    public bool AutoFlush { get; public set; }
    public SourceLevels Level { get; public set; }
    public ICollection`1<TraceListener> Listeners { get; private set; }
    public SpecialLogSourceData(string name);
    public SpecialLogSourceData(string name, SourceLevels level, bool autoFlush, TraceListener[] traceListeners);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoFlush();
    [CompilerGeneratedAttribute]
public void set_AutoFlush(bool value);
    [CompilerGeneratedAttribute]
public SourceLevels get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(SourceLevels value);
    [CompilerGeneratedAttribute]
public ICollection`1<TraceListener> get_Listeners();
    [CompilerGeneratedAttribute]
private void set_Listeners(ICollection`1<TraceListener> value);
    internal LogSource ToLogSource();
    internal static SpecialLogSourceData FromLogSource(LogSource logSource);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.SpecialSourcesConfiguration : object {
    [CompilerGeneratedAttribute]
private SpecialLogSourceData <LoggingErrorsAndWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecialLogSourceData <Unprocessed>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecialLogSourceData <AllEvents>k__BackingField;
    public SpecialLogSourceData LoggingErrorsAndWarnings { get; internal set; }
    public SpecialLogSourceData Unprocessed { get; internal set; }
    public SpecialLogSourceData AllEvents { get; internal set; }
    public SpecialSourcesConfiguration(SpecialLogSourceData loggingErrorsAndWarnings, SpecialLogSourceData unprocessed, SpecialLogSourceData allEvents);
    [CompilerGeneratedAttribute]
public SpecialLogSourceData get_LoggingErrorsAndWarnings();
    [CompilerGeneratedAttribute]
internal void set_LoggingErrorsAndWarnings(SpecialLogSourceData value);
    [CompilerGeneratedAttribute]
public SpecialLogSourceData get_Unprocessed();
    [CompilerGeneratedAttribute]
internal void set_Unprocessed(SpecialLogSourceData value);
    [CompilerGeneratedAttribute]
public SpecialLogSourceData get_AllEvents();
    [CompilerGeneratedAttribute]
internal void set_AllEvents(SpecialLogSourceData value);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter : object {
    private Dictionary`2<TraceListener, object> viewedTraceListeners;
    public IEnumerable`1<TraceListener> GetAvailableTraceListeners(IEnumerable`1<TraceListener> traceListeners);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AsynchronousTraceListenerWrapper : TraceListener {
    internal static int DefaultBufferSize;
    private static Lazy`1<TraceListener> reportingTraceListener;
    private TraceListener wrappedTraceListener;
    private bool ownsWrappedTraceListener;
    private BlockingCollection`1<Action`1<TraceListener>> requests;
    private int maxDegreeOfParallelism;
    private TimeSpan disposeTimeout;
    private Task asyncProcessingTask;
    private CancellationTokenSource closeSource;
    private int closed;
    [CompilerGeneratedAttribute]
private static Action`1<TraceListener> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<TraceListener> CS$<>9__CachedAnonymousMethodDelegate51;
    public TraceListener TraceListener { get; }
    public AsynchronousTraceListenerWrapper(TraceListener wrappedTraceListener, bool ownsWrappedTraceListener, Nullable`1<int> bufferSize, Nullable`1<int> maxDegreeOfParallelism, Nullable`1<TimeSpan> disposeTimeout);
    private static AsynchronousTraceListenerWrapper();
    public TraceListener get_TraceListener();
    public virtual void Close();
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void Flush();
    public sealed virtual void Flush(ReportTracingError reportError);
    public sealed virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data, ReportTracingError reportError);
    public sealed virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId, ReportTracingError reportError);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    public virtual void Write(string message);
    public virtual void Write(string message, string category);
    public virtual void Write(object o);
    public virtual void Write(object o, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(string message, string category);
    public virtual void WriteLine(object o);
    public virtual void WriteLine(object o, string category);
    protected virtual void Dispose(bool disposing);
    private static void CaptureContextInformation(object data);
    private static void CheckBufferSize(Nullable`1<int> bufferSize);
    private void CheckMaxDegreeOfParallelism(Nullable`1<int> maxDegreeOfParallelism);
    private static void CheckDisposeTimeout(Nullable`1<TimeSpan> disposeBufferPurgeTimeout);
    private void ProcessRequests();
    private void ProcessRequestsInParallel();
    private void AddRequest(Action`1<TraceListener> request);
    private bool CheckFilter(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string formatOrMessage, Object[] args, object data1, Object[] data);
    private void TryCompleteBuffer();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AsynchronousTraceListenerWrapper/<TryAddBufferCompleteSignal>d__4b")]
private Task TryAddBufferCompleteSignal(Action`1<TraceListener> signalComplete, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static void <Flush>b__6(TraceListener tl);
    [CompilerGeneratedAttribute]
private void <ProcessRequestsInParallel>b__45(Action`1<TraceListener> request);
    [CompilerGeneratedAttribute]
private static TraceListener <.cctor>b__50();
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener : TraceListener {
    private ILogFormatter formatter;
    public ILogFormatter Formatter { get; public set; }
    public ILogFormatter get_Formatter();
    public void set_Formatter(ILogFormatter value);
}
public enum Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode : Enum {
    public int value__;
    public static EmailAuthenticationMode None;
    public static EmailAuthenticationMode WindowsCredentials;
    public static EmailAuthenticationMode UserNameAndPassword;
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener : FormattedTraceListenerBase {
    private string toAddress;
    private string fromAddress;
    private string subjectLineStarter;
    private string subjectLineEnder;
    private string smtpServer;
    private int smtpPort;
    private EmailAuthenticationMode authenticationMode;
    private string userName;
    private string password;
    private bool useSSL;
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, ILogFormatter formatter);
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, ILogFormatter formatter);
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, ILogFormatter formatter, EmailAuthenticationMode authenticationMode, string userName, string password, bool useSSL);
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer);
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort);
    public EmailTraceListener(string toAddress, string fromAddress, string subjectLineStarter, string subjectLineEnder, string smtpServer, int smtpPort, EmailAuthenticationMode authenticationMode, string userName, string password, bool useSSL);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    protected virtual String[] GetSupportedAttributes();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener : TraceListener {
    private static string TraceEventCacheKey;
    private static Regex NamespaceRegex;
    private static String[] SupportedAttributes;
    private static Regex XPathRegex;
    private IList`1<string> categoriesXPathQueries;
    private XmlNamespaceManager xmlNamespaceManager;
    public IList`1<string> CategoriesXPathQueries { get; }
    public bool IsThreadSafe { get; }
    public XmlNamespaceManager NamespaceManager { get; }
    private static EntLibLoggingProxyTraceListener();
    public IList`1<string> get_CategoriesXPathQueries();
    public virtual bool get_IsThreadSafe();
    public XmlNamespaceManager get_NamespaceManager();
    protected virtual String[] GetSupportedAttributes();
    public static IDictionary`2<string, string> SplitNamespacesString(string namespacesString);
    public static IList`1<string> SplitXPathQueriesString(string xpathsStrings);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EnvironmentHelper : object {
    public static string ReplaceEnvironmentVariables(string fileName);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener : FormattedTextWriterTraceListener {
    private string header;
    private string footer;
    public FlatFileTraceListener(string fileName, string header, string footer, ILogFormatter formatter);
    public FlatFileTraceListener(FileStream stream, string name, ILogFormatter formatter);
    public FlatFileTraceListener(StreamWriter writer, string name, ILogFormatter formatter);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    protected virtual String[] GetSupportedAttributes();
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener : FormattedTraceListenerWrapperBase {
    public static string DefaultLogName;
    public static string DefaultMachineName;
    public FormattedEventLogTraceListener(EventLog eventLog);
    public FormattedEventLogTraceListener(EventLog eventLog, ILogFormatter formatter);
    public FormattedEventLogTraceListener(string source);
    public FormattedEventLogTraceListener(string source, ILogFormatter formatter);
    public FormattedEventLogTraceListener(string source, string log, ILogFormatter formatter);
    public FormattedEventLogTraceListener(string source, string log, string machineName, ILogFormatter formatter);
    private static string NormalizeMachineName(string machineName);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener : TextWriterTraceListener {
    private ILogFormatter formatter;
    public ILogFormatter Formatter { get; public set; }
    public FormattedTextWriterTraceListener(ILogFormatter formatter);
    public FormattedTextWriterTraceListener(Stream stream, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(Stream stream);
    public FormattedTextWriterTraceListener(TextWriter writer, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(TextWriter writer);
    public FormattedTextWriterTraceListener(string fileName, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(string fileName);
    public FormattedTextWriterTraceListener(Stream stream, string name, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(Stream stream, string name);
    public FormattedTextWriterTraceListener(TextWriter writer, string name, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(TextWriter writer, string name);
    public FormattedTextWriterTraceListener(string fileName, string name, ILogFormatter formatter);
    public FormattedTextWriterTraceListener(string fileName, string name);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public ILogFormatter get_Formatter();
    public void set_Formatter(ILogFormatter value);
    protected virtual String[] GetSupportedAttributes();
    private static string RootFileNameAndEnsureTargetFolderExists(string fileName);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase : TraceListener {
    private ILogFormatter formatter;
    public bool IsThreadSafe { get; }
    public ILogFormatter Formatter { get; public set; }
    protected FormattedTraceListenerBase(ILogFormatter formatter);
    public virtual bool get_IsThreadSafe();
    public ILogFormatter get_Formatter();
    public void set_Formatter(ILogFormatter value);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
}
public abstract class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase : FormattedTraceListenerBase {
    private TraceListener innerListener;
    public TraceListener InnerListener { get; }
    protected FormattedTraceListenerWrapperBase(TraceListener innerListener);
    protected FormattedTraceListenerWrapperBase(TraceListener innerListener, ILogFormatter formater);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType severity, int id, Object[] data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType severity, int id, object data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string format, Object[] args);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public TraceListener get_InnerListener();
    protected virtual void Dispose(bool disposing);
}
public interface Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IAsynchronousTraceListener {
    public abstract virtual void Flush(ReportTracingError reportError);
    public abstract virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data, ReportTracingError reportError);
    public abstract virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId, ReportTracingError reportError);
}
[SecurityCriticalAttribute]
public interface Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterface {
    public bool Transactional { get; }
    public abstract virtual void Close();
    public abstract virtual void Send(Message message, MessageQueueTransactionType transactionType);
    public abstract virtual bool get_Transactional();
}
[SecurityCriticalAttribute]
public interface Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterfaceFactory {
    public abstract virtual IMsmqSendInterface CreateMsmqInterface(string queuePath);
}
[SecurityCriticalAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface : object {
    private MessageQueue messageQueue;
    public bool Transactional { get; }
    internal MsmqSendInterface(string queuePath);
    [SecurityCriticalAttribute]
public sealed virtual void Close();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
public sealed virtual void Send(Message message, MessageQueueTransactionType transactionType);
    [SecurityCriticalAttribute]
public sealed virtual bool get_Transactional();
}
[SecurityCriticalAttribute]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterfaceFactory : object {
    [SecurityCriticalAttribute]
public sealed virtual IMsmqSendInterface CreateMsmqInterface(string queuePath);
}
[SecurityCriticalAttribute]
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener : FormattedTraceListenerBase {
    private MessagePriority messagePriority;
    private IMsmqSendInterfaceFactory msmqInterfaceFactory;
    private string queuePath;
    private bool recoverable;
    private TimeSpan timeToBeReceived;
    private TimeSpan timeToReachQueue;
    private MessageQueueTransactionType transactionType;
    private bool useAuthentication;
    private bool useDeadLetterQueue;
    private bool useEncryption;
    public string QueuePath { get; }
    public MsmqTraceListener(string name, string queuePath, ILogFormatter formatter);
    public MsmqTraceListener(string name, string queuePath, ILogFormatter formatter, MessagePriority messagePriority, bool recoverable, TimeSpan timeToReachQueue, TimeSpan timeToBeReceived, bool useAuthentication, bool useDeadLetterQueue, bool useEncryption, MessageQueueTransactionType transactionType);
    public MsmqTraceListener(string name, string queuePath, ILogFormatter formatter, MessagePriority messagePriority, bool recoverable, TimeSpan timeToReachQueue, TimeSpan timeToBeReceived, bool useAuthentication, bool useDeadLetterQueue, bool useEncryption, MessageQueueTransactionType transactionType, IMsmqSendInterfaceFactory msmqInterfaceFactory);
    public string get_QueuePath();
    public Message CreateMessage(LogEntry logEntry);
    private Message CreateMessage(string messageBody, string messageLabel);
    private string FormatEntry(LogEntry entry);
    private void SendMessageToQueue(string message);
    private void SendMessageToQueue(LogEntry logEntry);
    [SecuritySafeCriticalAttribute]
public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    [SecuritySafeCriticalAttribute]
public virtual void Write(string message);
    [SecuritySafeCriticalAttribute]
public virtual void WriteLine(string message);
}
public enum Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior : Enum {
    public int value__;
    public static RollFileExistsBehavior Overwrite;
    public static RollFileExistsBehavior Increment;
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger : object {
    private string directory;
    private string baseFileName;
    private int cap;
    [CompilerGeneratedAttribute]
private static Func`2<string, ArchiveFile> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ArchiveFile, ArchiveFile> CS$<>9__CachedAnonymousMethodDelegate3;
    public RollingFlatFilePurger(string directory, string baseFileName, int cap);
    public void Purge();
    private String[] TryGetMatchingFiles(string searchPattern);
    private static void TryDelete(string path);
    private static DateTime GetCreationTime(string path);
    public static string GetSequence(string fileName);
    [CompilerGeneratedAttribute]
private static ArchiveFile <Purge>b__0(string matchingFile);
    [CompilerGeneratedAttribute]
private static ArchiveFile <Purge>b__1(ArchiveFile archiveFile);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener : FlatFileTraceListener {
    public static string DefaultSeparator;
    private StreamWriterRollingHelper rollingHelper;
    private RollFileExistsBehavior rollFileExistsBehavior;
    private RollInterval rollInterval;
    private int rollSizeInBytes;
    private string timeStampPattern;
    private int maxArchivedFiles;
    private Timer timer;
    private bool disposed;
    public StreamWriterRollingHelper RollingHelper { get; }
    public RollingFlatFileTraceListener(string fileName, string header, string footer, ILogFormatter formatter, int rollSizeKB, string timeStampPattern, RollFileExistsBehavior rollFileExistsBehavior, RollInterval rollInterval, int maxArchivedFiles);
    public StreamWriterRollingHelper get_RollingHelper();
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object o);
}
public enum Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval : Enum {
    public int value__;
    public static RollInterval None;
    public static RollInterval Minute;
    public static RollInterval Hour;
    public static RollInterval Day;
    public static RollInterval Week;
    public static RollInterval Month;
    public static RollInterval Year;
    public static RollInterval Midnight;
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TallyKeepingFileStreamWriter : StreamWriter {
    private long tally;
    public long Tally { get; }
    public TallyKeepingFileStreamWriter(FileStream stream);
    public TallyKeepingFileStreamWriter(FileStream stream, Encoding encoding);
    public long get_Tally();
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(string value);
}
[ConfigurationElementTypeAttribute("Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData")]
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener : XmlWriterTraceListener {
    public XmlTraceListener(string filename);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    internal virtual XPathNavigator GetXml(LogEntry logEntry);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager : object {
    private LogWriter logWriter;
    public LogWriter LogWriter { get; }
    public TraceManager(LogWriter logWriter);
    public LogWriter get_LogWriter();
    public Tracer StartTrace(string operation);
    public Tracer StartTrace(string operation, Guid activityId);
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.Tracer : object {
    public static int priority;
    public static int eventId;
    public static string startTitle;
    public static string endTitle;
    public static string ActivityIdPropertyKey;
    private static bool isFullyTrusted;
    private Stopwatch stopwatch;
    private long tracingStartTicks;
    private bool tracerDisposed;
    private Nullable`1<Guid> previousActivityId;
    private bool tracingAvailable;
    private LogWriter writer;
    private static Tracer();
    public Tracer(string operation);
    public Tracer(string operation, Guid activityId);
    public Tracer(string operation, Guid activityId, LogWriter writer);
    public Tracer(string operation, LogWriter writer);
    public sealed virtual void Dispose();
    public bool IsTracingEnabled();
    [SecuritySafeCriticalAttribute]
private static void CheckPermissionsIfFullyTrusted();
    protected virtual void Dispose(bool disposing);
    private void Initialize(string operation);
    private void WriteTraceStartMessage(string entryTitle);
    private void WriteTraceEndMessage(string entryTitle);
    private void WriteTraceMessage(string message, string entryTitle, TraceEventType eventType);
    private string GetExecutingMethodName();
    private decimal GetSecondsElapsed(long milliseconds);
    private LogWriter GetWriter();
    [SecuritySafeCriticalAttribute]
private static Guid GetOrCreateActivityId();
    [SecuritySafeCriticalAttribute]
private static Guid GetActivityId();
    [SecuritySafeCriticalAttribute]
private static Guid SetActivityId(Guid activityId);
    [SecuritySafeCriticalAttribute]
private static void StartLogicalOperation(string operation);
    [SecuritySafeCriticalAttribute]
private static void StopLogicalOperation();
    [SecuritySafeCriticalAttribute]
private static object PeekLogicalOperationStack();
}
public class Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry : LogEntry {
    private string xmlString;
    private XPathNavigator xml;
    public XPathNavigator Xml { get; public set; }
    public XmlLogEntry(object message, ICollection`1<string> category, int priority, int eventId, TraceEventType severity, string title, IDictionary`2<string, object> properties);
    public XPathNavigator get_Xml();
    public void set_Xml(XPathNavigator value);
}
