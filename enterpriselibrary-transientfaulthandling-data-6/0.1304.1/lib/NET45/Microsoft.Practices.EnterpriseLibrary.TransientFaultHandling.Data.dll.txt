public enum Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.ThrottledResourceType : Enum {
    public int value__;
    public static ThrottledResourceType PhysicalDatabaseSpace;
    public static ThrottledResourceType PhysicalLogSpace;
    public static ThrottledResourceType LogWriteIoDelay;
    public static ThrottledResourceType DataReadIoDelay;
    public static ThrottledResourceType Cpu;
    public static ThrottledResourceType DatabaseSize;
    public static ThrottledResourceType WorkerThreads;
    public static ThrottledResourceType Internal;
    public static ThrottledResourceType Unknown;
}
public class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.ThrottlingCondition : object {
    public static int ThrottlingErrorNumber;
    private IList`1<Tuple`2<ThrottledResourceType, ThrottlingType>> throttledResources;
    private static Regex sqlErrorCodeRegEx;
    [CompilerGeneratedAttribute]
private ThrottlingMode <ThrottlingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ThrottledResourceType, ThrottlingType>, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate15;
    public static ThrottlingCondition Unknown { get; }
    public ThrottlingMode ThrottlingMode { get; private set; }
    public IEnumerable`1<Tuple`2<ThrottledResourceType, ThrottlingType>> ThrottledResources { get; }
    public bool IsThrottledOnDataSpace { get; }
    public bool IsThrottledOnLogSpace { get; }
    public bool IsThrottledOnLogWrite { get; }
    public bool IsThrottledOnDataRead { get; }
    public bool IsThrottledOnCpu { get; }
    public bool IsThrottledOnDatabaseSize { get; }
    public bool IsThrottledOnWorkerThreads { get; }
    public bool IsUnknown { get; }
    private static ThrottlingCondition();
    public static ThrottlingCondition get_Unknown();
    [CompilerGeneratedAttribute]
public ThrottlingMode get_ThrottlingMode();
    [CompilerGeneratedAttribute]
private void set_ThrottlingMode(ThrottlingMode value);
    public IEnumerable`1<Tuple`2<ThrottledResourceType, ThrottlingType>> get_ThrottledResources();
    public bool get_IsThrottledOnDataSpace();
    public bool get_IsThrottledOnLogSpace();
    public bool get_IsThrottledOnLogWrite();
    public bool get_IsThrottledOnDataRead();
    public bool get_IsThrottledOnCpu();
    public bool get_IsThrottledOnDatabaseSize();
    public bool get_IsThrottledOnWorkerThreads();
    public bool get_IsUnknown();
    public static ThrottlingCondition FromException(SqlException ex);
    public static ThrottlingCondition FromError(SqlError error);
    public static ThrottlingCondition FromReasonCode(int reasonCode);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnDataSpace>b__1(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnLogSpace>b__3(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnLogWrite>b__5(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnDataRead>b__7(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnCpu>b__9(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnDatabaseSize>b__b(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <get_IsThrottledOnWorkerThreads>b__d(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static bool <ToString>b__10(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static string <ToString>b__11(Tuple`2<ThrottledResourceType, ThrottlingType> x);
    [CompilerGeneratedAttribute]
private static string <ToString>b__12(string x);
}
public enum Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.ThrottlingMode : Enum {
    public int value__;
    public static ThrottlingMode NoThrottling;
    public static ThrottlingMode RejectUpdateInsert;
    public static ThrottlingMode RejectAllWrites;
    public static ThrottlingMode RejectAll;
    public static ThrottlingMode Unknown;
}
public enum Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.ThrottlingType : Enum {
    public int value__;
    public static ThrottlingType None;
    public static ThrottlingType Soft;
    public static ThrottlingType Hard;
    public static ThrottlingType Unknown;
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ConnectionHasNotBeenInitialized { get; }
    internal static string StringCannotBeEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ConnectionHasNotBeenInitialized();
    internal static string get_StringCannotBeEmpty();
}
public class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ReliableSqlConnection : object {
    private SqlConnection underlyingConnection;
    private RetryPolicy connectionRetryPolicy;
    private RetryPolicy commandRetryPolicy;
    private RetryPolicy connectionStringFailoverPolicy;
    private string connectionString;
    public string ConnectionString { get; public set; }
    public RetryPolicy ConnectionRetryPolicy { get; }
    public RetryPolicy CommandRetryPolicy { get; }
    public SqlConnection Current { get; }
    public Guid SessionTracingId { get; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public ReliableSqlConnection(string connectionString);
    public ReliableSqlConnection(string connectionString, RetryPolicy retryPolicy);
    public ReliableSqlConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public RetryPolicy get_ConnectionRetryPolicy();
    public RetryPolicy get_CommandRetryPolicy();
    public SqlConnection get_Current();
    public Guid get_SessionTracingId();
    public sealed virtual int get_ConnectionTimeout();
    public sealed virtual string get_Database();
    public sealed virtual ConnectionState get_State();
    public SqlConnection Open();
    public SqlConnection Open(RetryPolicy retryPolicy);
    public T ExecuteCommand(IDbCommand command);
    public T ExecuteCommand(IDbCommand command, CommandBehavior behavior);
    public T ExecuteCommand(IDbCommand command, RetryPolicy retryPolicy);
    public T ExecuteCommand(IDbCommand command, RetryPolicy retryPolicy, CommandBehavior behavior);
    public int ExecuteCommand(IDbCommand command);
    public int ExecuteCommand(IDbCommand command, RetryPolicy retryPolicy);
    public sealed virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public sealed virtual IDbTransaction BeginTransaction();
    public sealed virtual void ChangeDatabase(string databaseName);
    private sealed virtual override void System.Data.IDbConnection.Open();
    public sealed virtual void Close();
    public SqlCommand CreateCommand();
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <Open>b__0();
    [CompilerGeneratedAttribute]
private void <Open>b__1();
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryManagerSqlExtensions : object {
    public static string DefaultStrategyCommandTechnologyName;
    public static string DefaultStrategyConnectionTechnologyName;
    [ExtensionAttribute]
public static RetryStrategy GetDefaultSqlCommandRetryStrategy(RetryManager retryManager);
    [ExtensionAttribute]
public static RetryPolicy GetDefaultSqlCommandRetryPolicy(RetryManager retryManager);
    [ExtensionAttribute]
public static RetryStrategy GetDefaultSqlConnectionRetryStrategy(RetryManager retryManager);
    [ExtensionAttribute]
public static RetryPolicy GetDefaultSqlConnectionRetryPolicy(RetryManager retryManager);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.SqlCommandExtensions : object {
    [ExtensionAttribute]
public static int ExecuteNonQueryWithRetry(SqlCommand command);
    [ExtensionAttribute]
public static int ExecuteNonQueryWithRetry(SqlCommand command, RetryPolicy retryPolicy);
    [ExtensionAttribute]
public static int ExecuteNonQueryWithRetry(SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command, RetryPolicy retryPolicy);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command, CommandBehavior behavior);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command, CommandBehavior behavior, RetryPolicy retryPolicy);
    [ExtensionAttribute]
public static SqlDataReader ExecuteReaderWithRetry(SqlCommand command, CommandBehavior behavior, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy);
    [ExtensionAttribute]
public static object ExecuteScalarWithRetry(SqlCommand command);
    [ExtensionAttribute]
public static object ExecuteScalarWithRetry(SqlCommand command, RetryPolicy retryPolicy);
    [ExtensionAttribute]
public static object ExecuteScalarWithRetry(SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReaderWithRetry(SqlCommand command);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReaderWithRetry(SqlCommand command, RetryPolicy retryPolicy);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReaderWithRetry(SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy);
    private static void GuardConnectionIsNotNull(SqlCommand command);
    private static bool EnsureValidConnection(SqlCommand command, RetryPolicy retryPolicy);
}
public static class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.SqlCommandFactory : object {
    public static int DefaultCommandTimeoutSeconds;
    public static IDbCommand CreateCommand(IDbConnection connection);
    public static IDbCommand CreateCommand(IDbConnection connection, string commandText);
    public static IDbCommand CreateGetContextInfoCommand(IDbConnection connection);
}
[ExtensionAttribute]
public static class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.SqlConnectionExtensions : object {
    [ExtensionAttribute]
public static void OpenWithRetry(SqlConnection connection);
    [ExtensionAttribute]
public static void OpenWithRetry(SqlConnection connection, RetryPolicy retryPolicy);
}
public class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.SqlDatabaseTransientErrorDetectionStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
internal class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.SqlXmlReader : XmlReader {
    private IDbConnection connection;
    private XmlReader innerReader;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public SqlXmlReader(IDbConnection connection, XmlReader innerReader);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name, string namespaceUri);
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
}
public class Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.TransactionRetryScope : object {
    private RetryPolicy retryPolicy;
    private TransactionScopeInitializer transactionScopeInit;
    private Action unitOfWork;
    private TransactionScope transactionScope;
    public RetryPolicy RetryPolicy { get; }
    public TransactionRetryScope(Action unitOfWork);
    public TransactionRetryScope(RetryPolicy retryPolicy, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, RetryPolicy retryPolicy, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, RetryPolicy retryPolicy, Action unitOfWork);
    public TransactionRetryScope(TransactionScopeOption scopeOption, RetryPolicy retryPolicy, Action unitOfWork);
    public TransactionRetryScope(Transaction tx, Action unitOfWork);
    public TransactionRetryScope(Transaction tx, RetryPolicy retryPolicy, Action unitOfWork);
    public TransactionRetryScope(Transaction tx, TimeSpan scopeTimeout, Action unitOfWork);
    public TransactionRetryScope(Transaction tx, TimeSpan scopeTimeout, RetryPolicy retryPolicy, Action unitOfWork);
    public RetryPolicy get_RetryPolicy();
    public void InvokeUnitOfWork();
    public void Complete();
    public sealed virtual void Dispose();
    private void InitializeRetryPolicy();
    [CompilerGeneratedAttribute]
private void <InitializeRetryPolicy>b__11(object sender, RetryingEventArgs args);
}
[ObsoleteAttribute("Use SqlDatabaseTransientErrorDetectionStrategy instead.", "False")]
public class Microsoft.Practices.EnterpriseLibrary.WindowsAzure.TransientFaultHandling.SqlAzure.SqlAzureTransientErrorDetectionStrategy : object {
    private SqlDatabaseTransientErrorDetectionStrategy inner;
    public sealed virtual bool IsTransient(Exception ex);
}
