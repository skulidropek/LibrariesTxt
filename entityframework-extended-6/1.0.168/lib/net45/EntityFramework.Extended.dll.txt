[AttributeUsageAttribute("384")]
public class EntityFramework.Audit.AlwaysAuditAttribute : Attribute {
}
[DataContractAttribute]
public enum EntityFramework.Audit.AuditAction : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AuditAction Added;
    [EnumMemberAttribute]
public static AuditAction Modified;
    [EnumMemberAttribute]
public static AuditAction Deleted;
}
[AttributeUsageAttribute("12")]
public class EntityFramework.Audit.AuditAttribute : Attribute {
}
public class EntityFramework.Audit.AuditConfiguration : object {
    private static BindingFlags _defaultBinding;
    private ConcurrentDictionary`2<Type, bool> _auditableCache;
    private ConcurrentDictionary`2<string, bool> _notAuditedCache;
    private ConcurrentDictionary`2<string, bool> _alwaysAuditCache;
    private ConcurrentDictionary`2<string, IMethodAccessor> _formatterCache;
    private ConcurrentDictionary`2<Type, IMemberAccessor> _displayCache;
    private static Lazy`1<AuditConfiguration> _default;
    [CompilerGeneratedAttribute]
private bool <IncludeInserts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRelationships>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadRelationships>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultAuditable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaintainAcrossSaves>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<AuditConfiguration> CS$<>9__CachedAnonymousMethodDelegate14;
    public bool IncludeInserts { get; public set; }
    public bool IncludeDeletes { get; public set; }
    public bool IncludeRelationships { get; public set; }
    public bool LoadRelationships { get; public set; }
    public bool DefaultAuditable { get; public set; }
    public bool MaintainAcrossSaves { get; public set; }
    public static AuditConfiguration Default { get; }
    private static AuditConfiguration();
    internal bool IsAuditable(object entity);
    internal bool IsAuditable(Type entityType);
    internal bool IsNotAudited(Type entityType, string name);
    internal bool IsAlwaysAudited(Type entityType, string name);
    internal IMethodAccessor GetFormatter(Type entityType, string name);
    internal IMemberAccessor GetDisplayMember(Type entityType);
    private static bool HasAttribute(Type entityType, string fullName, Type attributeType);
    private static bool HasAttribute(MemberInfo memberInfo, Type attributeType);
    private static TAttribute GetAttribute(Type entityType, string fullName);
    private static TAttribute GetAttribute(MemberInfo memberInfo);
    private static MemberInfo FindMember(Type entityType, string fullName);
    [CompilerGeneratedAttribute]
public bool get_IncludeInserts();
    [CompilerGeneratedAttribute]
public void set_IncludeInserts(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDeletes();
    [CompilerGeneratedAttribute]
public void set_IncludeDeletes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRelationships();
    [CompilerGeneratedAttribute]
public void set_IncludeRelationships(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadRelationships();
    [CompilerGeneratedAttribute]
public void set_LoadRelationships(bool value);
    [CompilerGeneratedAttribute]
public bool get_DefaultAuditable();
    [CompilerGeneratedAttribute]
public void set_DefaultAuditable(bool value);
    [CompilerGeneratedAttribute]
public bool get_MaintainAcrossSaves();
    [CompilerGeneratedAttribute]
public void set_MaintainAcrossSaves(bool value);
    public static AuditConfiguration get_Default();
    public AuditEntityConfiguration`1<TEntity> IsAuditable(bool value);
    [CompilerGeneratedAttribute]
private static bool <IsAuditable>b__0(Type key);
    [CompilerGeneratedAttribute]
private static AuditConfiguration <.cctor>b__13();
}
[XmlRootAttribute]
[DataContractAttribute]
[DebuggerDisplayAttribute("Action: {Action}, Type: {Type}")]
public class EntityFramework.Audit.AuditEntity : object {
    private static int HASH_SEED;
    private WeakReference _current;
    private Type _entityType;
    [CompilerGeneratedAttribute]
private AuditAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditKeyCollection <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AuditKey, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`3<int, AuditKey, int> CS$<>9__CachedAnonymousMethodDelegate3;
    [XmlElementAttribute("action")]
[DataMemberAttribute]
public AuditAction Action { get; public set; }
    [XmlElementAttribute("type")]
[DataMemberAttribute]
public string Type { get; public set; }
    [XmlArrayItemAttribute("key")]
[DataMemberAttribute]
[XmlArrayAttribute("keys")]
public AuditKeyCollection Keys { get; public set; }
    [XmlIgnoreAttribute]
public object Current { get; }
    [XmlIgnoreAttribute]
public Type EntityType { get; }
    [XmlArrayItemAttribute("property")]
[DataMemberAttribute]
[XmlArrayAttribute("properties")]
public AuditPropertyCollection Properties { get; public set; }
    public AuditEntity(object current);
    [CompilerGeneratedAttribute]
public AuditAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(AuditAction value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public AuditKeyCollection get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(AuditKeyCollection value);
    public object get_Current();
    public Type get_EntityType();
    [CompilerGeneratedAttribute]
public AuditPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuditPropertyCollection value);
    public sealed virtual bool Equals(AuditEntity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static bool <GetHashCode>b__0(AuditKey key);
    [CompilerGeneratedAttribute]
private static int <GetHashCode>b__1(int current, AuditKey key);
}
internal class EntityFramework.Audit.AuditEntryState : object {
    [CompilerGeneratedAttribute]
private ObjectContext <ObjectContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditLog <AuditLog>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectStateEntry <ObjectStateEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeAccessor <EntityAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEntity <AuditEntity>k__BackingField;
    public ObjectContext ObjectContext { get; public set; }
    public AuditLog AuditLog { get; public set; }
    public object Entity { get; private set; }
    public Type ObjectType { get; private set; }
    public EntityType EntityType { get; private set; }
    public ObjectStateEntry ObjectStateEntry { get; private set; }
    public TypeAccessor EntityAccessor { get; private set; }
    public AuditEntity AuditEntity { get; private set; }
    public bool IsAdded { get; }
    public bool IsDeleted { get; }
    public bool IsModified { get; }
    public AuditEntryState(ObjectContext objectContext, ObjectStateEntry objectStateEntry);
    [CompilerGeneratedAttribute]
public ObjectContext get_ObjectContext();
    [CompilerGeneratedAttribute]
public void set_ObjectContext(ObjectContext value);
    [CompilerGeneratedAttribute]
public AuditLog get_AuditLog();
    [CompilerGeneratedAttribute]
public void set_AuditLog(AuditLog value);
    [CompilerGeneratedAttribute]
public object get_Entity();
    [CompilerGeneratedAttribute]
private void set_Entity(object value);
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(Type value);
    [CompilerGeneratedAttribute]
public EntityType get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(EntityType value);
    [CompilerGeneratedAttribute]
public ObjectStateEntry get_ObjectStateEntry();
    [CompilerGeneratedAttribute]
private void set_ObjectStateEntry(ObjectStateEntry value);
    [CompilerGeneratedAttribute]
public TypeAccessor get_EntityAccessor();
    [CompilerGeneratedAttribute]
private void set_EntityAccessor(TypeAccessor value);
    [CompilerGeneratedAttribute]
public AuditEntity get_AuditEntity();
    [CompilerGeneratedAttribute]
private void set_AuditEntity(AuditEntity value);
    public bool get_IsAdded();
    public bool get_IsDeleted();
    public bool get_IsModified();
    private static AuditAction GetAction(ObjectStateEntry entity);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1(EntityType x);
}
[DataContractAttribute]
[XmlRootAttribute]
[DebuggerDisplayAttribute("Name: {Name}, Value: {Value}")]
public class EntityFramework.Audit.AuditKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [XmlElementAttribute("name")]
[DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[XmlElementAttribute("type")]
public string Type { get; public set; }
    [XmlElementAttribute("value")]
[DataMemberAttribute]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[CollectionDataContractAttribute]
public class EntityFramework.Audit.AuditKeyCollection : KeyedCollection`2<string, AuditKey> {
    protected virtual string GetKeyForItem(AuditKey item);
}
[XmlRootAttribute]
[DataContractAttribute]
public class EntityFramework.Audit.AuditLog : object {
    public static string AuditNamespace;
    private static Lazy`1<XmlSerializer> _serializer;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AuditEntity> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<XmlSerializer> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<AuditProperty, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [DataMemberAttribute]
[XmlElementAttribute("username")]
public string Username { get; public set; }
    [DataMemberAttribute]
[XmlElementAttribute("date")]
public DateTime Date { get; public set; }
    [DataMemberAttribute]
[XmlArrayItemAttribute("entity")]
[XmlArrayAttribute("entities")]
public List`1<AuditEntity> Entities { get; public set; }
    private static AuditLog();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public List`1<AuditEntity> get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(List`1<AuditEntity> value);
    public AuditLog Refresh();
    public string ToXml();
    public void ToXml(XmlWriter writer);
    public static AuditLog FromXml(string auditLog);
    public static AuditLog FromXml(XmlReader reader);
    [CompilerGeneratedAttribute]
private static XmlSerializer <.cctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <Refresh>b__2(AuditProperty p);
}
public class EntityFramework.Audit.AuditLogger : object {
    private static string _nullText;
    private static string _errorText;
    private static Lazy`1<MethodInfo> _relatedAccessor;
    private ObjectContext _objectContext;
    private AuditConfiguration _configuration;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private AuditLog <LastLog>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, StructuralType> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, string> CS$<>9__CachedAnonymousMethodDelegatef;
    public ObjectContext ObjectContext { get; }
    public AuditConfiguration Configuration { get; }
    public AuditLog LastLog { get; private set; }
    public AuditLogger(ObjectContext objectContext);
    public AuditLogger(ObjectContext objectContext, AuditConfiguration configuration);
    public AuditLogger(DbContext dbContext);
    public AuditLogger(DbContext dbContext, AuditConfiguration configuration);
    private static AuditLogger();
    private void AttachEvents();
    private void DetachEvents();
    protected virtual void OnSavingChanges(object sender, EventArgs e);
    public ObjectContext get_ObjectContext();
    public AuditConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public AuditLog get_LastLog();
    [CompilerGeneratedAttribute]
private void set_LastLog(AuditLog value);
    public AuditLog CreateLog();
    public AuditLog UpdateLog(AuditLog auditLog);
    private bool WriteEntity(AuditEntryState state);
    private void WriteKeys(AuditEntryState state);
    private void WriteProperties(AuditEntryState state);
    private void WriteRelationships(AuditEntryState state);
    private object FormatValue(AuditEntryState state, string name, object value);
    private static string GetForeignKey(NavigationProperty navigationProperty);
    private static object GetDisplayValue(AuditEntryState state, NavigationProperty navigationProperty, IMemberAccessor displayMember, DbDataRecord values);
    private static bool IsModifed(NavigationProperty navigationProperty, IEnumerable`1<string> modifiedMembers);
    private static bool IsLoaded(AuditEntryState state, NavigationProperty navigationProperty, IMemberAccessor accessor);
    private static string GetType(EdmMember edmMember);
    private static MethodInfo FindRelatedMethod();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    protected virtual void Finalize();
    [CompilerGeneratedAttribute]
private static string <GetForeignKey>b__6(EdmProperty p);
    [CompilerGeneratedAttribute]
private static string <GetDisplayValue>b__8(EdmProperty p);
    [CompilerGeneratedAttribute]
private static string <GetDisplayValue>b__9(EdmProperty p);
    [CompilerGeneratedAttribute]
private static StructuralType <GetDisplayValue>b__a(EdmProperty p);
    [CompilerGeneratedAttribute]
private static string <IsModifed>b__e(EdmProperty p);
}
[XmlRootAttribute]
[DebuggerDisplayAttribute("Name: {Name}, Type: {Type}")]
[DataContractAttribute]
public class EntityFramework.Audit.AuditProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRelationship>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Original>k__BackingField;
    [DataMemberAttribute]
[XmlElementAttribute("name")]
public string Name { get; public set; }
    [DataMemberAttribute]
[XmlElementAttribute("type")]
public string Type { get; public set; }
    [XmlElementAttribute("isRelationship")]
[DefaultValueAttribute("False")]
[DataMemberAttribute]
public bool IsRelationship { get; public set; }
    [DataMemberAttribute]
[XmlElementAttribute("foreignKey")]
public string ForeignKey { get; public set; }
    [DataMemberAttribute]
[XmlElementAttribute("current")]
public object Current { get; public set; }
    [XmlElementAttribute("original")]
[DataMemberAttribute]
public object Original { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRelationship();
    [CompilerGeneratedAttribute]
public void set_IsRelationship(bool value);
    [CompilerGeneratedAttribute]
public string get_ForeignKey();
    [CompilerGeneratedAttribute]
public void set_ForeignKey(string value);
    [CompilerGeneratedAttribute]
public object get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(object value);
    [CompilerGeneratedAttribute]
public object get_Original();
    [CompilerGeneratedAttribute]
public void set_Original(object value);
}
[CollectionDataContractAttribute]
public class EntityFramework.Audit.AuditPropertyCollection : KeyedCollection`2<string, AuditProperty> {
    protected virtual string GetKeyForItem(AuditProperty item);
}
public class EntityFramework.Audit.AuditPropertyContext : object {
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValueType>k__BackingField;
    public object Entity { get; public set; }
    public object Value { get; public set; }
    public Type ValueType { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Type get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(Type value);
}
[AttributeUsageAttribute("384")]
public class EntityFramework.Audit.AuditPropertyFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FormatType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type FormatType { get; private set; }
    public string MethodName { get; private set; }
    public AuditPropertyFormatAttribute(Type formatType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_FormatType();
    [CompilerGeneratedAttribute]
private void set_FormatType(Type value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
}
[AttributeUsageAttribute("384")]
public class EntityFramework.Audit.NotAuditedAttribute : Attribute {
}
public interface EntityFramework.Batch.IBatchRunner {
    public abstract virtual int Delete(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    public abstract virtual Task`1<int> DeleteAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    public abstract virtual int Update(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    public abstract virtual Task`1<int> UpdateAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
}
public class EntityFramework.Batch.MySqlBatchRunner : object {
    public sealed virtual int Delete(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    public sealed virtual Task`1<int> DeleteAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    [AsyncStateMachineAttribute("EntityFramework.Batch.MySqlBatchRunner/<InternalDelete>d__0`1")]
[DebuggerStepThroughAttribute]
private Task`1<int> InternalDelete(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, bool async);
    public sealed virtual int Update(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    public sealed virtual Task`1<int> UpdateAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("EntityFramework.Batch.MySqlBatchRunner/<InternalUpdate>d__15`1")]
private Task`1<int> InternalUpdate(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, bool async);
    private static Tuple`2<DbConnection, DbTransaction> GetStore(ObjectContext objectContext);
    private static string GetSelectSql(ObjectQuery`1<TEntity> query, EntityMap entityMap, DbCommand command);
    [CompilerGeneratedAttribute]
private static string <InternalUpdate>b__e(PropertyMap p);
}
public class EntityFramework.Batch.SqlServerBatchRunner : object {
    public sealed virtual int Delete(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    public sealed virtual Task`1<int> DeleteAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("EntityFramework.Batch.SqlServerBatchRunner/<InternalDelete>d__0`1")]
private Task`1<int> InternalDelete(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, bool async);
    public sealed virtual int Update(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    public sealed virtual Task`1<int> UpdateAsync(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [AsyncStateMachineAttribute("EntityFramework.Batch.SqlServerBatchRunner/<InternalUpdate>d__15`1")]
[DebuggerStepThroughAttribute]
private Task`1<int> InternalUpdate(ObjectContext objectContext, EntityMap entityMap, ObjectQuery`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, bool async);
    private static Tuple`2<DbConnection, DbTransaction> GetStore(ObjectContext objectContext);
    private static string GetSelectSql(ObjectQuery`1<TEntity> query, EntityMap entityMap, DbCommand command);
    [CompilerGeneratedAttribute]
private static string <InternalUpdate>b__e(PropertyMap p);
}
public enum EntityFramework.Caching.CacheExpirationMode : Enum {
    public int value__;
    public static CacheExpirationMode None;
    public static CacheExpirationMode Duration;
    public static CacheExpirationMode Sliding;
    public static CacheExpirationMode Absolute;
}
public class EntityFramework.Caching.CacheKey : object {
    private string _key;
    private HashSet`1<CacheTag> _tags;
    [CompilerGeneratedAttribute]
private static Func`2<string, CacheTag> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Key { get; }
    public HashSet`1<CacheTag> Tags { get; }
    public CacheKey(string key);
    public CacheKey(string key, IEnumerable`1<string> tags);
    public string get_Key();
    public HashSet`1<CacheTag> get_Tags();
    [CompilerGeneratedAttribute]
private static CacheTag <.ctor>b__0(string k);
}
public class EntityFramework.Caching.CacheManager : object {
    private static Lazy`1<CacheManager> _current;
    [CompilerGeneratedAttribute]
private static Func`1<CacheManager> CS$<>9__CachedAnonymousMethodDelegate4;
    public static CacheManager Current { get; }
    private static CacheManager();
    public static CacheManager get_Current();
    public bool Add(string key, object value);
    public bool Add(string key, object value, DateTimeOffset absoluteExpiration);
    public bool Add(string key, object value, TimeSpan slidingExpiration);
    public bool Add(string key, object value, CachePolicy cachePolicy);
    public virtual bool Add(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public virtual object Get(string key);
    public object GetOrAdd(string key, object value);
    public object GetOrAdd(string key, object value, DateTimeOffset absoluteExpiration);
    public object GetOrAdd(string key, object value, TimeSpan slidingExpiration);
    public object GetOrAdd(string key, object value, CachePolicy cachePolicy);
    public object GetOrAdd(CacheKey key, object value, CachePolicy cachePolicy);
    public object GetOrAdd(string key, Func`2<string, object> valueFactory);
    public object GetOrAdd(string key, Func`2<string, object> valueFactory, DateTimeOffset absoluteExpiration);
    public object GetOrAdd(string key, Func`2<string, object> valueFactory, TimeSpan slidingExpiration);
    public object GetOrAdd(string key, Func`2<string, object> valueFactory, CachePolicy cachePolicy);
    public virtual object GetOrAdd(CacheKey cacheKey, Func`2<CacheKey, object> valueFactory, CachePolicy cachePolicy);
    public virtual Task`1<object> GetOrAddAsync(CacheKey cacheKey, Func`2<CacheKey, Task`1<object>> valueFactory, CachePolicy cachePolicy);
    public object Remove(string key);
    public virtual object Remove(CacheKey cacheKey);
    public int Expire(string tag);
    public virtual int Expire(CacheTag cacheTag);
    public void Set(string key, object value);
    public void Set(string key, object value, DateTimeOffset absoluteExpiration);
    public void Set(string key, object value, TimeSpan slidingExpiration);
    public void Set(string key, object value, CachePolicy cachePolicy);
    public virtual void Set(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public virtual void Clear();
    protected ICacheProvider ResolveProvider();
    [CompilerGeneratedAttribute]
private static CacheManager <.cctor>b__3();
}
public class EntityFramework.Caching.CachePolicy : object {
    private static Lazy`1<CachePolicy> _current;
    private DateTimeOffset _absoluteExpiration;
    private TimeSpan _slidingExpiration;
    private TimeSpan _duration;
    [CompilerGeneratedAttribute]
private CacheExpirationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<CachePolicy> CS$<>9__CachedAnonymousMethodDelegate4;
    public static CachePolicy Default { get; }
    public CacheExpirationMode Mode { get; public set; }
    public DateTimeOffset AbsoluteExpiration { get; public set; }
    public TimeSpan SlidingExpiration { get; public set; }
    public TimeSpan Duration { get; public set; }
    private static CachePolicy();
    public static CachePolicy get_Default();
    [CompilerGeneratedAttribute]
public CacheExpirationMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(CacheExpirationMode value);
    public DateTimeOffset get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(DateTimeOffset value);
    public TimeSpan get_SlidingExpiration();
    public void set_SlidingExpiration(TimeSpan value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public static CachePolicy WithDurationExpiration(TimeSpan expirationSpan);
    public static CachePolicy WithAbsoluteExpiration(DateTimeOffset absoluteExpiration);
    public static CachePolicy WithSlidingExpiration(TimeSpan slidingExpiration);
    [CompilerGeneratedAttribute]
private static CachePolicy <.cctor>b__3();
}
public class EntityFramework.Caching.CacheTag : object {
    private string _tag;
    public CacheTag(string tag);
    public sealed virtual bool Equals(CacheTag other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(CacheTag left, CacheTag right);
    public static bool op_Inequality(CacheTag left, CacheTag right);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static string op_Implicit(CacheTag cacheTag);
}
internal static class EntityFramework.Caching.Evaluator : object {
    public static Expression PartialEval(Expression expression, Func`2<Expression, bool> fnCanBeEvaluated);
    public static Expression PartialEval(Expression expression);
    private static bool CanBeEvaluatedLocally(Expression expression);
}
public interface EntityFramework.Caching.ICacheProvider {
    public abstract virtual bool Add(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public abstract virtual object Get(CacheKey cacheKey);
    public abstract virtual object GetOrAdd(CacheKey cacheKey, Func`2<CacheKey, object> valueFactory, CachePolicy cachePolicy);
    public abstract virtual Task`1<object> GetOrAddAsync(CacheKey cacheKey, Func`2<CacheKey, Task`1<object>> valueFactory, CachePolicy cachePolicy);
    public abstract virtual object Remove(CacheKey cacheKey);
    public abstract virtual int Expire(CacheTag cacheTag);
    public abstract virtual bool Set(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public abstract virtual long ClearCache();
}
internal class EntityFramework.Caching.LocalCollectionExpander : ExpressionVisitor {
    [CompilerGeneratedAttribute]
private static Func`3<ParameterInfo, Expression, <>f__AnonymousType0`2<Type, Expression>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Type, Expression>, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Type, Expression>, <>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, <>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type>> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type>, ConstantExpression>, <>f__AnonymousType4`2<Expression, ConstantExpression>> CS$<>9__CachedAnonymousMethodDelegate14;
    public static Expression Rewrite(Expression expression);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    private ConstantExpression MakePrinter(ConstantExpression enumerable, Type elementType);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<Type, Expression> <VisitMethodCall>b__3(ParameterInfo p, Expression a);
    [CompilerGeneratedAttribute]
private static bool <VisitMethodCall>b__4(<>f__AnonymousType0`2<Type, Expression> x);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type> <VisitMethodCall>b__5(<>f__AnonymousType0`2<Type, Expression> x);
    [CompilerGeneratedAttribute]
private static bool <VisitMethodCall>b__6(<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static bool <VisitMethodCall>b__7(<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type> <VisitMethodCall>b__8(<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType3`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type>, ConstantExpression> <VisitMethodCall>b__9(<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<Expression, ConstantExpression> <VisitMethodCall>b__a(<>f__AnonymousType3`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<Type, Expression>, Type>, Type>, ConstantExpression> <>h__TransparentIdentifier2);
}
public class EntityFramework.Caching.MemoryCacheProvider : object {
    private static string _tagKey;
    public sealed virtual bool Add(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public sealed virtual object Get(CacheKey cacheKey);
    public sealed virtual object GetOrAdd(CacheKey cacheKey, Func`2<CacheKey, object> valueFactory, CachePolicy cachePolicy);
    [AsyncStateMachineAttribute("EntityFramework.Caching.MemoryCacheProvider/<GetOrAddAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<object> GetOrAddAsync(CacheKey cacheKey, Func`2<CacheKey, Task`1<object>> valueFactory, CachePolicy cachePolicy);
    public sealed virtual object Remove(CacheKey cacheKey);
    public sealed virtual int Expire(CacheTag cacheTag);
    public sealed virtual bool Set(CacheKey cacheKey, object value, CachePolicy cachePolicy);
    public sealed virtual long ClearCache();
    internal static string GetKey(CacheKey cacheKey);
    internal static string GetTagKey(CacheTag t);
    internal static CacheItemPolicy CreatePolicy(CacheKey key, CachePolicy cachePolicy);
    internal static CacheEntryChangeMonitor CreateChangeMonitor(CacheKey key);
}
[ExtensionAttribute]
public static class EntityFramework.Caching.QueryCache : object {
    [CompilerGeneratedAttribute]
private static Func`2<Expression, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static Func`2<Expression, bool> CanBeEvaluatedLocally { get; }
    [ExtensionAttribute]
public static string GetCacheKey(IQueryable query);
    private static Func`2<Expression, bool> get_CanBeEvaluatedLocally();
    [CompilerGeneratedAttribute]
private static bool <get_CanBeEvaluatedLocally>b__0(Expression expression);
}
[ExtensionAttribute]
internal static class EntityFramework.Caching.Utility : object {
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, byte, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static string ToMd5Fingerprint(string s);
    [ExtensionAttribute]
public static string ToConcatenatedString(IEnumerable`1<T> source, Func`2<T, string> selector, string separator);
    [ExtensionAttribute]
public static LinkedList`1<T> ToLinkedList(IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
private static StringBuilder <ToMd5Fingerprint>b__0(StringBuilder sb, byte b);
}
public class EntityFramework.Container : object {
    private ConcurrentDictionary`2<Type, object> _factories;
    public virtual TService Resolve();
    public virtual void Register(Func`1<TService> factory);
    public void Register(Func`2<IContainer, TService> factory);
    public void Register(Func`2<TArg, TService> factory);
    public void Register(Func`3<TArg1, TArg2, TService> factory);
    public void Register(Func`4<TArg1, TArg2, TArg3, TService> factory);
    public void Register(Func`5<TArg1, TArg2, TArg3, TArg4, TService> factory);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.AuditExtensions : object {
    [ExtensionAttribute]
public static AuditLogger BeginAudit(ObjectContext objectContext, AuditConfiguration configuration);
    [ExtensionAttribute]
public static AuditLogger BeginAudit(DbContext dbContext, AuditConfiguration configuration);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.BatchExtensions : object {
    [ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).Delete() syntax instead.")]
[ExtensionAttribute]
public static int Delete(IQueryable`1<TEntity> source, IQueryable`1<TEntity> query);
    [ExtensionAttribute]
[ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).Delete() syntax instead.")]
public static int Delete(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, bool>> filterExpression);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
[ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).DeleteAsync() syntax instead.")]
public static Task`1<int> DeleteAsync(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, bool>> filterExpression);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
[ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).Update(updateExpression) syntax instead.")]
public static int Update(IQueryable`1<TEntity> source, IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [ExtensionAttribute]
[ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).Update(updateExpression) syntax instead.")]
public static int Update(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, bool>> filterExpression, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [ExtensionAttribute]
public static int Update(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [ObsoleteAttribute("The API was refactored to no longer need this extension method. Use query.Where(expression).UpdateAsync(updateExpression) syntax instead.")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, bool>> filterExpression, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    private static IBatchRunner ResolveRunner();
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.CacheExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TEntity> FromCache(IQueryable`1<TEntity> query, CachePolicy cachePolicy, IEnumerable`1<string> tags);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("EntityFramework.Extensions.CacheExtensions/<FromCacheAsync>d__9`1")]
[DebuggerStepThroughAttribute]
public static Task`1<IEnumerable`1<TEntity>> FromCacheAsync(IQueryable`1<TEntity> query, CachePolicy cachePolicy, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static TEntity FromCacheFirstOrDefault(IQueryable`1<TEntity> query, CachePolicy cachePolicy, IEnumerable`1<string> tags);
    [AsyncStateMachineAttribute("EntityFramework.Extensions.CacheExtensions/<FromCacheFirstOrDefaultAsync>d__10`1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<TEntity> FromCacheFirstOrDefaultAsync(IQueryable`1<TEntity> query, CachePolicy cachePolicy, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> RemoveCache(IQueryable`1<TEntity> query);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> RemoveCache(IQueryable`1<TEntity> query, IEnumerable`1& removed);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.DataRecordExtensions : object {
    [ExtensionAttribute]
public static object GetValue(IDataRecord record, string name);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression Visit(Expression expression, Func`2<TExpression, Expression> visitor);
    [ExtensionAttribute]
public static TReturn Visit(TReturn expression, Func`2<TExpression, Expression> visitor);
    [ExtensionAttribute]
public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> expression, Func`2<TExpression, Expression> visitor);
}
public class EntityFramework.Extensions.ExpressionVisitor`1 : ExpressionVisitor {
    private Func`2<TExpression, Expression> _visitor;
    public ExpressionVisitor`1(Func`2<TExpression, Expression> visitor);
    public virtual Expression Visit(Expression expression);
    public static Expression Visit(Expression expression, Func`2<TExpression, Expression> visitor);
    public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> expression, Func`2<TExpression, Expression> visitor);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.FutureExtensions : object {
    [ExtensionAttribute]
public static FutureQuery`1<TEntity> Future(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static FutureCount FutureCount(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static FutureValue`1<TResult> FutureValue(IQueryable`1<TEntity> source, Expression`1<Func`2<IQueryable`1<TEntity>, TResult>> selector);
    [ExtensionAttribute]
public static FutureValue`1<TEntity> FutureFirstOrDefault(IQueryable`1<TEntity> source);
    private static IFutureContext GetFutureContext(ObjectQuery objectQuery);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.ObjectContextExtensions : object {
    [ExtensionAttribute]
public static DbTransaction BeginTransaction(ObjectContext context, IsolationLevel isolationLevel);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DbContext.Database.BeginTransaction()")]
public static DbTransaction BeginTransaction(DbContext context, IsolationLevel isolationLevel);
    [ExtensionAttribute]
internal static EntitySetBase GetEntitySet(ObjectContext context);
    [ExtensionAttribute]
internal static EntitySetBase GetEntitySet(ObjectContext context, string elementTypeName);
}
[ExtensionAttribute]
public static class EntityFramework.Extensions.ObjectQueryExtensions : object {
    [ExtensionAttribute]
public static ObjectQuery`1<TEntity> ToObjectQuery(IQueryable`1<TEntity> query);
    [ExtensionAttribute]
public static ObjectQuery ToObjectQuery(IQueryable query);
    [ExtensionAttribute]
public static ObjectQuery CreateQuery(IQueryable source, Expression expression, Type type);
    [ExtensionAttribute]
public static ObjectContext GetContext(IQueryable`1<TEntity> query);
}
public class EntityFramework.Future.FutureContext : object {
    private IList`1<IFutureQuery> _futureQueries;
    private WeakReference _objectContext;
    public IList`1<IFutureQuery> FutureQueries { get; }
    public ObjectContext ObjectContext { get; }
    public bool IsAlive { get; }
    public FutureContext(ObjectContext objectContext);
    public sealed virtual IList`1<IFutureQuery> get_FutureQueries();
    public ObjectContext get_ObjectContext();
    public bool get_IsAlive();
    public sealed virtual void ExecuteFutureQueries();
    public sealed virtual void AddQuery(IFutureQuery query);
}
[DebuggerDisplayAttribute("IsLoaded={IsLoaded}, Value={ValueForDebugDisplay}")]
public class EntityFramework.Future.FutureCount : FutureValue`1<int> {
    internal FutureCount(IQueryable query, Action loadAction);
    public FutureCount(int underlyingValue);
}
public class EntityFramework.Future.FutureException : Exception {
    public FutureException(string message);
    public FutureException(string message, Exception innerException);
    protected FutureException(SerializationInfo info, StreamingContext context);
}
public class EntityFramework.Future.FuturePlan : object {
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectParameterCollection <Parameters>k__BackingField;
    public string CommandText { get; public set; }
    public ObjectParameterCollection Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public ObjectParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ObjectParameterCollection value);
}
[DebuggerDisplayAttribute("IsLoaded={IsLoaded}")]
public class EntityFramework.Future.FutureQuery`1 : FutureQueryBase`1<T> {
    internal FutureQuery`1(IQueryable query, Action loadAction);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerDisplayAttribute("IsLoaded={IsLoaded}")]
public abstract class EntityFramework.Future.FutureQueryBase`1 : object {
    private Action _loadAction;
    private IQueryable _query;
    private IEnumerable`1<T> _result;
    private bool _isLoaded;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    protected Action LoadAction { get; }
    public bool IsLoaded { get; }
    public Exception Exception { get; public set; }
    private IQueryable EntityFramework.Future.IFutureQuery.Query { get; }
    protected FutureQueryBase`1(IQueryable query, Action loadAction);
    protected Action get_LoadAction();
    public sealed virtual bool get_IsLoaded();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    private sealed virtual override IQueryable EntityFramework.Future.IFutureQuery.get_Query();
    protected virtual IEnumerable`1<T> GetResult();
    private sealed virtual override FuturePlan EntityFramework.Future.IFutureQuery.GetPlan(ObjectContext dataContext);
    protected virtual FuturePlan GetPlan(ObjectContext dataContext);
    private sealed virtual override void EntityFramework.Future.IFutureQuery.SetResult(ObjectContext dataContext, DbDataReader reader);
    protected virtual void SetResult(ObjectContext dataContext, DbDataReader reader);
}
public class EntityFramework.Future.FutureRunner : object {
    public sealed virtual void ExecuteFutureQueries(ObjectContext context, IList`1<IFutureQuery> futureQueries);
    private static DbCommand CreateFutureCommand(ObjectContext context, IEnumerable`1<IFutureQuery> futureQueries);
}
public class EntityFramework.Future.FutureStore : object {
    private ConcurrentDictionary`2<int, FutureContext> _futureContext;
    private static Lazy`1<FutureStore> _current;
    [CompilerGeneratedAttribute]
private int <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, FutureContext>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, FutureContext>, int> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<FutureContext, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`1<FutureStore> CS$<>9__CachedAnonymousMethodDelegatea;
    public int Threshold { get; public set; }
    public static FutureStore Default { get; }
    private static FutureStore();
    public IFutureContext GetOrCreate(ObjectQuery objectQuery);
    [CompilerGeneratedAttribute]
public int get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(int value);
    public void Cleanup();
    private void MaybeCleanup();
    private bool ShouldCleanup();
    private static int MakeFit(int value, int low, int high);
    public static FutureStore get_Default();
    [CompilerGeneratedAttribute]
private static bool <Cleanup>b__3(KeyValuePair`2<int, FutureContext> p);
    [CompilerGeneratedAttribute]
private static int <Cleanup>b__4(KeyValuePair`2<int, FutureContext> p);
    [CompilerGeneratedAttribute]
private static bool <ShouldCleanup>b__7(FutureContext x);
    [CompilerGeneratedAttribute]
private static FutureStore <.cctor>b__9();
}
[DebuggerDisplayAttribute("IsLoaded={IsLoaded}, Value={UnderlingValue}")]
public class EntityFramework.Future.FutureValue`1 : FutureQueryBase`1<T> {
    private bool _hasValue;
    [CompilerGeneratedAttribute]
private T <UnderlyingValue>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
public T Value { get; public set; }
    internal T UnderlyingValue { get; private set; }
    internal FutureValue`1(IQueryable query, Action loadAction);
    public FutureValue`1(T underlyingValue);
    public T get_Value();
    public void set_Value(T value);
    public static T op_Implicit(FutureValue`1<T> futureValue);
    [CompilerGeneratedAttribute]
internal T get_UnderlyingValue();
    [CompilerGeneratedAttribute]
private void set_UnderlyingValue(T value);
}
public interface EntityFramework.Future.IFutureContext {
    public IList`1<IFutureQuery> FutureQueries { get; }
    public abstract virtual IList`1<IFutureQuery> get_FutureQueries();
    public abstract virtual void ExecuteFutureQueries();
    public abstract virtual void AddQuery(IFutureQuery query);
}
public interface EntityFramework.Future.IFutureQuery {
    public bool IsLoaded { get; }
    public IQueryable Query { get; }
    public abstract virtual bool get_IsLoaded();
    public abstract virtual IQueryable get_Query();
    public abstract virtual FuturePlan GetPlan(ObjectContext dataContext);
    public abstract virtual void SetResult(ObjectContext dataContext, DbDataReader reader);
}
public interface EntityFramework.Future.IFutureRunner {
    public abstract virtual void ExecuteFutureQueries(ObjectContext context, IList`1<IFutureQuery> futureQueries);
}
public interface EntityFramework.IContainer {
    public abstract virtual void Register(Func`1<TService> factory);
    public abstract virtual TService Resolve();
}
public interface EntityFramework.IQueryUnwrapper {
    public abstract virtual IQueryable`1<TEntity> Unwrap(IQueryable`1<TEntity> query);
    public abstract virtual IQueryable Unwrap(IQueryable query);
}
public class EntityFramework.Locator : object {
    private static Locator _instance;
    private IContainer _container;
    [CompilerGeneratedAttribute]
private static Func`1<IMappingProvider> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<IBatchRunner> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`1<IFutureRunner> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<ICacheProvider> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`1<CacheManager> CS$<>9__CachedAnonymousMethodDelegate9;
    public static IContainer Current { get; }
    protected IContainer Container { get; }
    private static Locator();
    public static IContainer get_Current();
    public static void SetContainer(IContainer container);
    protected IContainer get_Container();
    protected void SetInnerContainer(IContainer container);
    public static void RegisterDefaults(IContainer container);
    [CompilerGeneratedAttribute]
private static IMappingProvider <RegisterDefaults>b__0();
    [CompilerGeneratedAttribute]
private static IBatchRunner <RegisterDefaults>b__1();
    [CompilerGeneratedAttribute]
private static IFutureRunner <RegisterDefaults>b__2();
    [CompilerGeneratedAttribute]
private static ICacheProvider <RegisterDefaults>b__3();
    [CompilerGeneratedAttribute]
private static CacheManager <RegisterDefaults>b__4();
}
[DebuggerDisplayAttribute("Table: {TableName}")]
public class EntityFramework.Mapping.EntityMap : object {
    private Type _entityType;
    private List`1<PropertyMap> _propertyMaps;
    private List`1<PropertyMap> _keyMaps;
    [CompilerGeneratedAttribute]
private EntitySet <ModelSet>k__BackingField;
    [CompilerGeneratedAttribute]
private EntitySet <StoreSet>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public EntitySet ModelSet { get; public set; }
    public EntitySet StoreSet { get; public set; }
    public EntityType ModelType { get; public set; }
    public EntityType StoreType { get; public set; }
    public Type EntityType { get; }
    public string TableName { get; public set; }
    public List`1<PropertyMap> PropertyMaps { get; }
    public List`1<PropertyMap> KeyMaps { get; }
    public EntityMap(Type entityType);
    [CompilerGeneratedAttribute]
public EntitySet get_ModelSet();
    [CompilerGeneratedAttribute]
public void set_ModelSet(EntitySet value);
    [CompilerGeneratedAttribute]
public EntitySet get_StoreSet();
    [CompilerGeneratedAttribute]
public void set_StoreSet(EntitySet value);
    [CompilerGeneratedAttribute]
public EntityType get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(EntityType value);
    [CompilerGeneratedAttribute]
public EntityType get_StoreType();
    [CompilerGeneratedAttribute]
public void set_StoreType(EntityType value);
    public Type get_EntityType();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    public List`1<PropertyMap> get_PropertyMaps();
    public List`1<PropertyMap> get_KeyMaps();
}
public interface EntityFramework.Mapping.IMappingProvider {
    public abstract virtual EntityMap GetEntityMap(ObjectQuery query);
    public abstract virtual EntityMap GetEntityMap(Type type, DbContext dbContext);
    public abstract virtual EntityMap GetEntityMap(Type type, ObjectContext objectContext);
}
[ExtensionAttribute]
public static class EntityFramework.Mapping.MappingResolver : object {
    private static MappingResolver();
    [ExtensionAttribute]
public static EntityMap GetEntityMap(ObjectQuery query);
    [ExtensionAttribute]
public static EntitySet GetEntitySet(ObjectContext objectContext);
    private static Dictionary`2<Type, EntitySet> CreateEntitySetMappings(MetadataWorkspace metadataWorkspace);
}
public class EntityFramework.Mapping.MetadataMappingProvider : object {
    [CompilerGeneratedAttribute]
private static Func`2<EntityContainer, IEnumerable`1<EntitySet>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<GlobalItem, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<EntityTypeMapping, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<EntityTypeMapping, IEnumerable`1<MappingFragment>> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<MappingFragment, IEnumerable`1<PropertyMapping>> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyMapping, string> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, PropertyMapping>, PropertyMapping> CS$<>9__CachedAnonymousMethodDelegate2e;
    public sealed virtual EntityMap GetEntityMap(ObjectQuery query);
    public sealed virtual EntityMap GetEntityMap(Type type, DbContext dbContext);
    public sealed virtual EntityMap GetEntityMap(Type type, ObjectContext objectContext);
    private static EntitySetMapping GetMapping(List`1<EntitySetMapping> entitySetMappings, EntityType entitySet);
    private static void SetKeys(EntityMap entityMap);
    private static IEnumerable`1<Type> GetParentTypes(Type type);
    private static void SetProperties(EntityMap entityMap, EntitySetMapping mapping, Type type);
    private static void SetTableName(EntityMap entityMap);
    private static string QuoteIdentifier(string name);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<EntitySet> <GetEntityMap>b__1(EntityContainer a);
    [CompilerGeneratedAttribute]
private static bool <GetEntityMap>b__3(GlobalItem x);
    [CompilerGeneratedAttribute]
private static bool <GetEntityMap>b__5(EntityTypeMapping a);
    [CompilerGeneratedAttribute]
private static string <SetProperties>b__23(Type o);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<MappingFragment> <SetProperties>b__26(EntityTypeMapping o);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PropertyMapping> <SetProperties>b__27(MappingFragment o);
    [CompilerGeneratedAttribute]
private static string <SetProperties>b__28(PropertyMapping o);
    [CompilerGeneratedAttribute]
private static PropertyMapping <SetProperties>b__29(IGrouping`2<string, PropertyMapping> o);
}
[DebuggerDisplayAttribute("Property: {PropertyName}, Column: {ColumnName}")]
public class EntityFramework.Mapping.PropertyMap : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public string PropertyName { get; public set; }
    public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
}
internal static class EntityFramework.Reflection.DelegateFactory : object {
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    public static LateBoundMethod CreateMethod(MethodInfo methodInfo);
    public static LateBoundConstructor CreateConstructor(Type type);
    public static LateBoundGet CreateGet(PropertyInfo propertyInfo);
    public static LateBoundGet CreateGet(FieldInfo fieldInfo);
    public static LateBoundSet CreateSet(PropertyInfo propertyInfo);
    public static LateBoundSet CreateSet(FieldInfo fieldInfo);
}
public class EntityFramework.Reflection.DynamicProxy : DynamicObject {
    private static BindingFlags _flags;
    private object _wrapped;
    private TypeAccessor _typeAccessor;
    [CompilerGeneratedAttribute]
private bool <SafeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, Type> CS$<>9__CachedAnonymousMethodDelegate1;
    public object Wrapped { get; }
    public bool SafeMode { get; public set; }
    public DynamicProxy(object wrapped);
    public DynamicProxy(object wrapped, bool safeMode);
    public object get_Wrapped();
    [CompilerGeneratedAttribute]
public bool get_SafeMode();
    [CompilerGeneratedAttribute]
public void set_SafeMode(bool value);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    [CompilerGeneratedAttribute]
private static Type <TryInvokeMember>b__0(object a);
}
public class EntityFramework.Reflection.FieldAccessor : MemberAccessor {
    private FieldInfo _fieldInfo;
    private string _name;
    private bool _hasGetter;
    private bool _hasSetter;
    private Type _memberType;
    private Lazy`1<LateBoundGet> _lateBoundGet;
    private Lazy`1<LateBoundSet> _lateBoundSet;
    public Type MemberType { get; }
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public FieldAccessor(FieldInfo fieldInfo);
    public virtual Type get_MemberType();
    public virtual MemberInfo get_MemberInfo();
    public virtual string get_Name();
    public virtual bool get_HasGetter();
    public virtual bool get_HasSetter();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    [CompilerGeneratedAttribute]
private LateBoundGet <.ctor>b__0();
    [CompilerGeneratedAttribute]
private LateBoundSet <.ctor>b__1();
}
[ExtensionAttribute]
internal static class EntityFramework.Reflection.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
    [ExtensionAttribute]
public static void FastInt(ILGenerator il, int value);
}
public interface EntityFramework.Reflection.IMemberAccessor {
    public abstract virtual object GetValue(object instance);
    public abstract virtual void SetValue(object instance, object value);
}
public interface EntityFramework.Reflection.IMemberInfo {
    public Type MemberType { get; }
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public abstract virtual Type get_MemberType();
    public abstract virtual MemberInfo get_MemberInfo();
    public abstract virtual string get_Name();
    public abstract virtual bool get_HasGetter();
    public abstract virtual bool get_HasSetter();
}
public interface EntityFramework.Reflection.IMethodAccessor {
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual string get_Name();
    public abstract virtual object Invoke(object instance, Object[] arguments);
}
public static class EntityFramework.Reflection.LateBinder : object {
    public static BindingFlags DefaultPublicFlags;
    public static BindingFlags DefaultNonPublicFlags;
    [CompilerGeneratedAttribute]
private static Func`2<object, Type> CS$<>9__CachedAnonymousMethodDelegate1;
    public static IMethodAccessor FindMethod(Type type, string name, Object[] arguments);
    public static IMethodAccessor FindMethod(Type type, string name, BindingFlags flags, Object[] arguments);
    public static IMemberAccessor FindProperty(Expression`1<Func`1<T>> propertyExpression);
    public static IMemberAccessor FindProperty(Type type, string name);
    public static IMemberAccessor FindProperty(Type type, string name, BindingFlags flags);
    public static IMemberAccessor FindField(Type type, string name);
    public static IMemberAccessor FindField(Type type, string name, BindingFlags flags);
    public static IMemberAccessor Find(Type type, string name);
    public static IMemberAccessor Find(Type type, string name, BindingFlags flags);
    public static void SetProperty(object target, string name, object value);
    public static void SetProperty(object target, string name, object value, BindingFlags flags);
    public static void SetField(object target, string name, object value);
    public static void SetField(object target, string name, object value, BindingFlags flags);
    public static void Set(object target, string name, object value);
    public static void Set(object target, string name, object value, BindingFlags flags);
    public static object GetProperty(object target, string name);
    public static object GetProperty(object target, string name, BindingFlags flags);
    public static object GetField(object target, string name);
    public static object GetField(object target, string name, BindingFlags flags);
    public static object Get(object target, string name);
    public static object Get(object target, string name, BindingFlags flags);
    public static object CreateInstance(Type type);
    public static object InvokeMethod(object target, string name, Object[] arguments);
    [CompilerGeneratedAttribute]
private static Type <FindMethod>b__0(object a);
}
internal class EntityFramework.Reflection.LateBoundConstructor : MulticastDelegate {
    public LateBoundConstructor(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class EntityFramework.Reflection.LateBoundGet : MulticastDelegate {
    public LateBoundGet(object object, IntPtr method);
    public virtual object Invoke(object target);
    public virtual IAsyncResult BeginInvoke(object target, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class EntityFramework.Reflection.LateBoundMethod : MulticastDelegate {
    public LateBoundMethod(object object, IntPtr method);
    public virtual object Invoke(object target, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(object target, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class EntityFramework.Reflection.LateBoundSet : MulticastDelegate {
    public LateBoundSet(object object, IntPtr method);
    public virtual void Invoke(object target, object value);
    public virtual IAsyncResult BeginInvoke(object target, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerDisplayAttribute("Name: {Name}")]
public abstract class EntityFramework.Reflection.MemberAccessor : object {
    public Type MemberType { get; }
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public abstract virtual Type get_MemberType();
    public abstract virtual MemberInfo get_MemberInfo();
    public abstract virtual string get_Name();
    public abstract virtual bool get_HasGetter();
    public abstract virtual bool get_HasSetter();
    public abstract virtual object GetValue(object instance);
    public abstract virtual void SetValue(object instance, object value);
    public sealed virtual bool Equals(IMemberAccessor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("Name: {Name}")]
public class EntityFramework.Reflection.MethodAccessor : object {
    private MethodInfo _methodInfo;
    private string _name;
    private Lazy`1<LateBoundMethod> _lateBoundMethod;
    [CompilerGeneratedAttribute]
private static Func`3<int, Type, int> CS$<>9__CachedAnonymousMethodDelegate3;
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public MethodAccessor(MethodInfo methodInfo);
    public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual string get_Name();
    public sealed virtual object Invoke(object instance, Object[] arguments);
    internal static int GetKey(string name, IEnumerable`1<Type> parameterTypes);
    [CompilerGeneratedAttribute]
private LateBoundMethod <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static int <GetKey>b__2(int r, Type p);
}
public class EntityFramework.Reflection.ObjectCloner : object {
    private Dictionary`2<int, object> _objectReferences;
    public object Clone(object source);
    private object CloneInstance(object source);
    private void CloneArray(IMemberAccessor accessor, object originalValue, object target);
    private void CloneCollection(IMemberAccessor accessor, object originalValue, object target);
    private void CloneDictionary(IMemberAccessor accessor, object originalValue, object target);
    private void CloneObject(IMemberAccessor accessor, object originalValue, object target);
    private object CreateTargetValue(IMemberAccessor accessor, object originalValue, object target);
}
public static class EntityFramework.Reflection.ObjectCopier : object {
    public static T Clone(T source);
    public static object Clone(object source);
    public static void Copy(object source, object target);
    public static void Copy(object source, object target, String[] ignoreList);
    public static void Copy(object source, object target, bool suppressExceptions, String[] ignoreList);
    public static void Copy(object source, object target, bool suppressExceptions, Func`2<string, bool> propertyFilter);
    public static void Copy(object source, IDictionary`2<string, object> target);
    public static void Copy(object source, IDictionary`2<string, object> target, String[] ignoreList);
    public static void Copy(object source, IDictionary`2<string, object> target, bool suppressExceptions, String[] ignoreList);
    public static void Copy(object source, IDictionary`2<string, object> target, bool suppressExceptions, Func`2<string, bool> propertyFilter);
    public static void Copy(NameValueCollection source, object target);
    public static void Copy(NameValueCollection source, object target, String[] ignoreList);
    public static void Copy(NameValueCollection source, object target, bool suppressExceptions, String[] ignoreList);
    public static void Copy(NameValueCollection source, object target, bool suppressExceptions, Func`2<string, bool> propertyFilter);
    public static void Copy(IDictionary`2<string, object> source, object target);
    public static void Copy(IDictionary`2<string, object> source, object target, String[] ignoreList);
    public static void Copy(IDictionary`2<string, object> source, object target, bool suppressExceptions, String[] ignoreList);
    public static void Copy(IDictionary`2<string, object> source, object target, bool suppressExceptions, Func`2<string, bool> propertyFilter);
    private static void SetValueWithCoercion(object target, IMemberAccessor accessor, object value);
}
public class EntityFramework.Reflection.PropertyAccessor : MemberAccessor {
    private PropertyInfo _propertyInfo;
    private string _name;
    private bool _hasGetter;
    private bool _hasSetter;
    private Type _memberType;
    private Lazy`1<LateBoundGet> _lateBoundGet;
    private Lazy`1<LateBoundSet> _lateBoundSet;
    public Type MemberType { get; }
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public PropertyAccessor(PropertyInfo propertyInfo);
    public virtual Type get_MemberType();
    public virtual MemberInfo get_MemberInfo();
    public virtual string get_Name();
    public virtual bool get_HasGetter();
    public virtual bool get_HasSetter();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    [CompilerGeneratedAttribute]
private LateBoundGet <.ctor>b__0();
    [CompilerGeneratedAttribute]
private LateBoundSet <.ctor>b__1();
}
[ExtensionAttribute]
public static class EntityFramework.Reflection.ReflectionHelper : object {
    private static Type _stringType;
    private static Type _byteArrayType;
    private static Type _nullableType;
    private static Type _genericCollectionType;
    private static Type _collectionType;
    private static Type _genericDictionaryType;
    private static Type _dictionaryType;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private static ReflectionHelper();
    public static string ExtractPropertyName(Expression`1<Func`1<TValue>> propertyExpression);
    public static string ExtractPropertyName(Expression`1<Func`2<TSource, TValue>> propertyExpression);
    public static string ExtractPropertyName(MemberExpression memberExpression);
    public static PropertyInfo ExtractPropertyInfo(Expression`1<Func`1<TValue>> propertyExpression);
    public static PropertyInfo ExtractPropertyInfo(Expression`1<Func`2<TSource, TValue>> propertyExpression);
    public static PropertyInfo ExtractPropertyInfo(MemberExpression memberExpression);
    [ExtensionAttribute]
public static Type GetUnderlyingType(Type type);
    [ExtensionAttribute]
public static bool IsCollection(Type type);
    [ExtensionAttribute]
public static bool IsDictionary(Type type);
    public static object CoerceValue(Type desiredType, Type valueType, object value);
    [CompilerGeneratedAttribute]
private static bool <IsCollection>b__0(Type x);
    [CompilerGeneratedAttribute]
private static bool <IsDictionary>b__2(Type x);
}
public class EntityFramework.Reflection.TypeAccessor : object {
    private static ConcurrentDictionary`2<Type, TypeAccessor> _typeCache;
    private ConcurrentDictionary`2<string, IMemberAccessor> _memberCache;
    private ConcurrentDictionary`2<int, IMethodAccessor> _methodCache;
    private ConcurrentDictionary`2<int, IEnumerable`1<IMemberAccessor>> _propertyCache;
    private Lazy`1<LateBoundConstructor> _lateBoundConstructor;
    private Type _type;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Type, TypeAccessor> CS$<>9__CachedAnonymousMethodDelegate26;
    public Type Type { get; }
    public TypeAccessor(Type type);
    private static TypeAccessor();
    public Type get_Type();
    public object Create();
    public IMethodAccessor FindMethod(string name);
    public IMethodAccessor FindMethod(string name, Type[] parameterTypes);
    public IMethodAccessor FindMethod(string name, Type[] parameterTypes, BindingFlags flags);
    private IMethodAccessor CreateMethodAccessor(string name, Type[] parameters, BindingFlags flags);
    private static MethodInfo FindMethod(Type type, string name, Type[] parameterTypes, BindingFlags flags);
    private static IMethodAccessor CreateAccessor(MethodInfo methodInfo);
    public IMemberAccessor Find(string name);
    public IMemberAccessor Find(string name, BindingFlags flags);
    private IMemberAccessor CreateAccessor(string name, BindingFlags flags);
    public IMemberAccessor FindProperty(Expression`1<Func`1<T>> propertyExpression);
    public IMemberAccessor FindProperty(Expression`1<Func`2<TSource, TValue>> propertyExpression);
    private IMemberAccessor FindProperty(MemberExpression memberExpression);
    public IMemberAccessor FindProperty(string name);
    public IMemberAccessor FindProperty(string name, BindingFlags flags);
    public IMemberAccessor GetAccessor(PropertyInfo propertyInfo);
    public IEnumerable`1<IMemberAccessor> GetProperties();
    public IEnumerable`1<IMemberAccessor> GetProperties(BindingFlags flags);
    private IMemberAccessor CreatePropertyAccessor(string name, BindingFlags flags);
    private static PropertyInfo FindProperty(Type type, string name, BindingFlags flags);
    private static IMemberAccessor CreateAccessor(PropertyInfo propertyInfo);
    public IMemberAccessor FindField(string name);
    public IMemberAccessor FindField(string name, BindingFlags flags);
    public IMemberAccessor GetAccessor(FieldInfo fieldInfo);
    private IMemberAccessor CreateFieldAccessor(string name, BindingFlags flags);
    private static FieldInfo FindField(Type type, string name, BindingFlags flags);
    private static IMemberAccessor CreateAccessor(FieldInfo fieldInfo);
    public static TypeAccessor GetAccessor();
    public static TypeAccessor GetAccessor(Type type);
    [CompilerGeneratedAttribute]
private LateBoundConstructor <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static Type <FindMethod>b__7(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static TypeAccessor <GetAccessor>b__25(Type t);
}
internal class System.Linq.Dynamic.ClassFactory : object {
    public static ClassFactory Instance;
    private ModuleBuilder module;
    private Dictionary`2<Signature, Type> classes;
    private int classCount;
    private ReaderWriterLock rwLock;
    private static ClassFactory();
    public Type GetDynamicClass(IEnumerable`1<DynamicProperty> properties);
    private Type CreateDynamicClass(DynamicProperty[] properties);
    private FieldInfo[] GenerateProperties(TypeBuilder tb, DynamicProperty[] properties);
    private void GenerateEquals(TypeBuilder tb, FieldInfo[] fields);
    private void GenerateGetHashCode(TypeBuilder tb, FieldInfo[] fields);
}
public abstract class System.Linq.Dynamic.DynamicClass : object {
    public virtual string ToString();
}
public static class System.Linq.Dynamic.DynamicExpression : object {
    public static Expression Parse(Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(Type itType, Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(ParameterExpression[] parameters, Type resultType, string expression, Object[] values);
    public static Expression`1<Func`2<T, S>> ParseLambda(string expression, Object[] values);
    public static Type CreateClass(DynamicProperty[] properties);
    public static Type CreateClass(IEnumerable`1<DynamicProperty> properties);
}
internal class System.Linq.Dynamic.DynamicOrdering : object {
    public Expression Selector;
    public bool Ascending;
}
public class System.Linq.Dynamic.DynamicProperty : object {
    private string name;
    private Type type;
    public string Name { get; }
    public Type Type { get; }
    public DynamicProperty(string name, Type type);
    public string get_Name();
    public Type get_Type();
}
[ExtensionAttribute]
public static class System.Linq.Dynamic.DynamicQueryable : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Select(IQueryable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IQueryable`1<T> OrderBy(IQueryable`1<T> source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable OrderBy(IQueryable source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable Skip(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable GroupBy(IQueryable source, string keySelector, string elementSelector, Object[] values);
    [ExtensionAttribute]
public static bool Any(IQueryable source);
    [ExtensionAttribute]
public static int Count(IQueryable source);
}
internal class System.Linq.Dynamic.ExpressionParser : object {
    private static Type[] predefinedTypes;
    private static Expression trueLiteral;
    private static Expression falseLiteral;
    private static Expression nullLiteral;
    private static string keywordIt;
    private static string keywordIif;
    private static string keywordNew;
    private static Dictionary`2<string, object> keywords;
    private Dictionary`2<string, object> symbols;
    private IDictionary`2<string, object> externals;
    private Dictionary`2<Expression, string> literals;
    private ParameterExpression it;
    private string text;
    private int textPos;
    private int textLen;
    private char ch;
    private Token token;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, MethodBase> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<MethodBase, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MethodBase, MethodData> CS$<>9__CachedAnonymousMethodDelegated;
    public ExpressionParser(ParameterExpression[] parameters, string expression, Object[] values);
    private static ExpressionParser();
    private void ProcessParameters(ParameterExpression[] parameters);
    private void ProcessValues(Object[] values);
    private void AddSymbol(string name, object value);
    public Expression Parse(Type resultType);
    public IEnumerable`1<DynamicOrdering> ParseOrdering();
    private Expression ParseExpression();
    private Expression ParseLogicalOr();
    private Expression ParseLogicalAnd();
    private Expression ParseComparison();
    private Expression ParseAdditive();
    private Expression ParseMultiplicative();
    private Expression ParseUnary();
    private Expression ParsePrimary();
    private Expression ParsePrimaryStart();
    private Expression ParseStringLiteral();
    private Expression ParseIntegerLiteral();
    private Expression ParseRealLiteral();
    private Expression CreateLiteral(object value, string text);
    private Expression ParseParenExpression();
    private Expression ParseIdentifier();
    private Expression ParseIt();
    private Expression ParseIif();
    private Expression GenerateConditional(Expression test, Expression expr1, Expression expr2, int errorPos);
    private Expression ParseNew();
    private Expression ParseLambdaInvocation(LambdaExpression lambda);
    private Expression ParseTypeAccess(Type type);
    private Expression GenerateConversion(Expression expr, Type type, int errorPos);
    private Expression ParseMemberAccess(Type type, Expression instance);
    private static Type FindGenericType(Type generic, Type type);
    private Expression ParseAggregate(Expression instance, Type elementType, string methodName, int errorPos);
    private Expression[] ParseArgumentList();
    private Expression[] ParseArguments();
    private Expression ParseElementAccess(Expression expr);
    private static bool IsPredefinedType(Type type);
    private static bool IsNullableType(Type type);
    private static Type GetNonNullableType(Type type);
    private static string GetTypeName(Type type);
    private static bool IsNumericType(Type type);
    private static bool IsSignedIntegralType(Type type);
    private static bool IsUnsignedIntegralType(Type type);
    private static int GetNumericTypeKind(Type type);
    private static bool IsEnumType(Type type);
    private void CheckAndPromoteOperand(Type signatures, string opName, Expression& expr, int errorPos);
    private void CheckAndPromoteOperands(Type signatures, string opName, Expression& left, Expression& right, int errorPos);
    private Exception IncompatibleOperandsError(string opName, Expression left, Expression right, int pos);
    private MemberInfo FindPropertyOrField(Type type, string memberName, bool staticAccess);
    private int FindMethod(Type type, string methodName, bool staticAccess, Expression[] args, MethodBase& method);
    private int FindIndexer(Type type, Expression[] args, MethodBase& method);
    private static IEnumerable`1<Type> SelfAndBaseTypes(Type type);
    private static IEnumerable`1<Type> SelfAndBaseClasses(Type type);
    private static void AddInterface(List`1<Type> types, Type type);
    private int FindBestMethod(IEnumerable`1<MethodBase> methods, Expression[] args, MethodBase& method);
    private bool IsApplicable(MethodData method, Expression[] args);
    private Expression PromoteExpression(Expression expr, Type type, bool exact);
    private static object ParseNumber(string text, Type type);
    private static object ParseEnum(string name, Type type);
    private static bool IsCompatibleWith(Type source, Type target);
    private static bool IsBetterThan(Expression[] args, MethodData m1, MethodData m2);
    private static int CompareConversions(Type s, Type t1, Type t2);
    private Expression GenerateEqual(Expression left, Expression right);
    private Expression GenerateNotEqual(Expression left, Expression right);
    private Expression GenerateGreaterThan(Expression left, Expression right);
    private Expression GenerateGreaterThanEqual(Expression left, Expression right);
    private Expression GenerateLessThan(Expression left, Expression right);
    private Expression GenerateLessThanEqual(Expression left, Expression right);
    private Expression GenerateAdd(Expression left, Expression right);
    private Expression GenerateSubtract(Expression left, Expression right);
    private Expression GenerateStringConcat(Expression left, Expression right);
    private MethodInfo GetStaticMethod(string methodName, Expression left, Expression right);
    private Expression GenerateStaticMethodCall(string methodName, Expression left, Expression right);
    private void SetTextPos(int pos);
    private void NextChar();
    private void NextToken();
    private bool TokenIdentifierIs(string id);
    private string GetIdentifier();
    private void ValidateDigit();
    private void ValidateToken(TokenId t, string errorMessage);
    private void ValidateToken(TokenId t);
    private Exception ParseError(string format, Object[] args);
    private Exception ParseError(int pos, string format, Object[] args);
    private static Dictionary`2<string, object> CreateKeywords();
    [CompilerGeneratedAttribute]
private static MethodBase <FindIndexer>b__1(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static bool <FindIndexer>b__2(MethodBase m);
    [CompilerGeneratedAttribute]
private static MethodData <FindBestMethod>b__9(MethodBase m);
}
public class System.Linq.Dynamic.ParseException : Exception {
    private int position;
    public int Position { get; }
    public ParseException(string message, int position);
    public int get_Position();
    public virtual string ToString();
}
internal static class System.Linq.Dynamic.Res : object {
    public static string DuplicateIdentifier;
    public static string ExpressionTypeMismatch;
    public static string ExpressionExpected;
    public static string InvalidCharacterLiteral;
    public static string InvalidIntegerLiteral;
    public static string InvalidRealLiteral;
    public static string UnknownIdentifier;
    public static string NoItInScope;
    public static string IifRequiresThreeArgs;
    public static string FirstExprMustBeBool;
    public static string BothTypesConvertToOther;
    public static string NeitherTypeConvertsToOther;
    public static string MissingAsClause;
    public static string ArgsIncompatibleWithLambda;
    public static string TypeHasNoNullableForm;
    public static string NoMatchingConstructor;
    public static string AmbiguousConstructorInvocation;
    public static string CannotConvertValue;
    public static string NoApplicableMethod;
    public static string MethodsAreInaccessible;
    public static string MethodIsVoid;
    public static string AmbiguousMethodInvocation;
    public static string UnknownPropertyOrField;
    public static string NoApplicableAggregate;
    public static string CannotIndexMultiDimArray;
    public static string InvalidIndex;
    public static string NoApplicableIndexer;
    public static string AmbiguousIndexerInvocation;
    public static string IncompatibleOperand;
    public static string IncompatibleOperands;
    public static string UnterminatedStringLiteral;
    public static string InvalidCharacter;
    public static string DigitExpected;
    public static string SyntaxError;
    public static string TokenExpected;
    public static string ParseExceptionFormat;
    public static string ColonExpected;
    public static string OpenParenExpected;
    public static string CloseParenOrOperatorExpected;
    public static string CloseParenOrCommaExpected;
    public static string DotOrOpenParenExpected;
    public static string OpenBracketExpected;
    public static string CloseBracketOrCommaExpected;
    public static string IdentifierExpected;
}
internal class System.Linq.Dynamic.Signature : object {
    public DynamicProperty[] properties;
    public int hashCode;
    public Signature(IEnumerable`1<DynamicProperty> properties);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Signature other);
}
internal class ThisAssembly : object {
    internal static string AssemblyProduct;
    internal static string AssemblyDescription;
    internal static string AssemblyCompany;
    internal static string AssemblyCopyright;
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
}
