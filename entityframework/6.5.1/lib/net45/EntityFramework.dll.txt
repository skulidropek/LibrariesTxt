[AttributeUsageAttribute("128")]
public class System.ComponentModel.DataAnnotations.Schema.IndexAttribute : Attribute {
    private string _name;
    private int _order;
    private Nullable`1<bool> _isClustered;
    private Nullable`1<bool> _isUnique;
    public string Name { get; internal set; }
    public int Order { get; public set; }
    public bool IsClustered { get; public set; }
    public bool IsClusteredConfigured { get; }
    public bool IsUnique { get; public set; }
    public bool IsUniqueConfigured { get; }
    public object TypeId { get; }
    public IndexAttribute(string name);
    public IndexAttribute(string name, int order);
    internal IndexAttribute(string name, Nullable`1<bool> isClustered, Nullable`1<bool> isUnique);
    internal IndexAttribute(string name, int order, Nullable`1<bool> isClustered, Nullable`1<bool> isUnique);
    public virtual string get_Name();
    internal virtual void set_Name(string value);
    public virtual int get_Order();
    public virtual void set_Order(int value);
    public virtual bool get_IsClustered();
    public virtual void set_IsClustered(bool value);
    public virtual bool get_IsClusteredConfigured();
    public virtual bool get_IsUnique();
    public virtual void set_IsUnique(bool value);
    public virtual bool get_IsUniqueConfigured();
    public virtual object get_TypeId();
    protected virtual bool Equals(IndexAttribute other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor : BasicExpressionVisitor {
    protected virtual void VisitSetClause(DbSetClause setClause);
    protected virtual void VisitModificationClause(DbModificationClause modificationClause);
    protected virtual void VisitModificationClauses(IList`1<DbModificationClause> modificationClauses);
    public virtual void VisitCommandTree(DbCommandTree commandTree);
    protected virtual void VisitDeleteCommandTree(DbDeleteCommandTree deleteTree);
    protected virtual void VisitFunctionCommandTree(DbFunctionCommandTree functionTree);
    protected virtual void VisitInsertCommandTree(DbInsertCommandTree insertTree);
    protected virtual void VisitQueryCommandTree(DbQueryCommandTree queryTree);
    protected virtual void VisitUpdateCommandTree(DbUpdateCommandTree updateTree);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor : DbExpressionVisitor {
    protected virtual void VisitUnaryExpression(DbUnaryExpression expression);
    protected virtual void VisitBinaryExpression(DbBinaryExpression expression);
    protected virtual void VisitExpressionBindingPre(DbExpressionBinding binding);
    protected virtual void VisitExpressionBindingPost(DbExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingPre(DbGroupExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingMid(DbGroupExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingPost(DbGroupExpressionBinding binding);
    protected virtual void VisitLambdaPre(DbLambda lambda);
    protected virtual void VisitLambdaPost(DbLambda lambda);
    public virtual void VisitExpression(DbExpression expression);
    public virtual void VisitExpressionList(IList`1<DbExpression> expressionList);
    public virtual void VisitAggregateList(IList`1<DbAggregate> aggregates);
    public virtual void VisitAggregate(DbAggregate aggregate);
    internal virtual void VisitRelatedEntityReferenceList(IList`1<DbRelatedEntityRef> relatedEntityReferences);
    internal virtual void VisitRelatedEntityReference(DbRelatedEntityRef relatedEntityRef);
    public virtual void Visit(DbExpression expression);
    public virtual void Visit(DbConstantExpression expression);
    public virtual void Visit(DbNullExpression expression);
    public virtual void Visit(DbVariableReferenceExpression expression);
    public virtual void Visit(DbParameterReferenceExpression expression);
    public virtual void Visit(DbFunctionExpression expression);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression expression);
    public virtual void Visit(DbComparisonExpression expression);
    public virtual void Visit(DbLikeExpression expression);
    public virtual void Visit(DbLimitExpression expression);
    public virtual void Visit(DbIsNullExpression expression);
    public virtual void Visit(DbArithmeticExpression expression);
    public virtual void Visit(DbAndExpression expression);
    public virtual void Visit(DbOrExpression expression);
    public virtual void Visit(DbInExpression expression);
    public virtual void Visit(DbNotExpression expression);
    public virtual void Visit(DbDistinctExpression expression);
    public virtual void Visit(DbElementExpression expression);
    public virtual void Visit(DbIsEmptyExpression expression);
    public virtual void Visit(DbUnionAllExpression expression);
    public virtual void Visit(DbIntersectExpression expression);
    public virtual void Visit(DbExceptExpression expression);
    public virtual void Visit(DbOfTypeExpression expression);
    public virtual void Visit(DbTreatExpression expression);
    public virtual void Visit(DbCastExpression expression);
    public virtual void Visit(DbIsOfExpression expression);
    public virtual void Visit(DbCaseExpression expression);
    public virtual void Visit(DbNewInstanceExpression expression);
    public virtual void Visit(DbRefExpression expression);
    public virtual void Visit(DbRelationshipNavigationExpression expression);
    public virtual void Visit(DbDerefExpression expression);
    public virtual void Visit(DbRefKeyExpression expression);
    public virtual void Visit(DbEntityRefExpression expression);
    public virtual void Visit(DbScanExpression expression);
    public virtual void Visit(DbFilterExpression expression);
    public virtual void Visit(DbProjectExpression expression);
    public virtual void Visit(DbCrossJoinExpression expression);
    public virtual void Visit(DbJoinExpression expression);
    public virtual void Visit(DbApplyExpression expression);
    public virtual void Visit(DbGroupByExpression expression);
    public virtual void Visit(DbSkipExpression expression);
    public virtual void Visit(DbSortExpression expression);
    public virtual void Visit(DbQuantifierExpression expression);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbAggregate : object {
    private DbExpressionList _args;
    private TypeUsage _type;
    public TypeUsage ResultType { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbAggregate(TypeUsage resultType, DbExpressionList arguments);
    public TypeUsage get_ResultType();
    public IList`1<DbExpression> get_Arguments();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbAndExpression : DbBinaryExpression {
    internal DbAndExpression(TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression : DbExpression {
    private DbExpressionBinding _input;
    private DbExpressionBinding _apply;
    public DbExpressionBinding Apply { get; }
    public DbExpressionBinding Input { get; }
    internal DbApplyExpression(DbExpressionKind applyKind, TypeUsage resultRowCollectionTypeUsage, DbExpressionBinding input, DbExpressionBinding apply);
    public DbExpressionBinding get_Apply();
    public DbExpressionBinding get_Input();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression : DbExpression {
    private DbExpressionList _args;
    public IList`1<DbExpression> Arguments { get; }
    internal DbArithmeticExpression(DbExpressionKind kind, TypeUsage numericResultType, DbExpressionList args);
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression : DbExpression {
    private DbExpression _left;
    private DbExpression _right;
    public DbExpression Left { get; }
    public DbExpression Right { get; }
    internal DbBinaryExpression(DbExpressionKind kind, TypeUsage type, DbExpression left, DbExpression right);
    public virtual DbExpression get_Left();
    public virtual DbExpression get_Right();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression : DbExpression {
    private DbExpressionList _when;
    private DbExpressionList _then;
    private DbExpression _else;
    public IList`1<DbExpression> When { get; }
    public IList`1<DbExpression> Then { get; }
    public DbExpression Else { get; }
    internal DbCaseExpression(TypeUsage commonResultType, DbExpressionList whens, DbExpressionList thens, DbExpression elseExpr);
    public IList`1<DbExpression> get_When();
    public IList`1<DbExpression> get_Then();
    public DbExpression get_Else();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbCastExpression : DbUnaryExpression {
    internal DbCastExpression(TypeUsage type, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbCommandTree : object {
    private MetadataWorkspace _metadata;
    private DataSpace _dataSpace;
    private bool _useDatabaseNullSemantics;
    private bool _disableFilterOverProjectionSimplificationForCustomFunctions;
    public bool UseDatabaseNullSemantics { get; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; }
    public IEnumerable`1<KeyValuePair`2<string, TypeUsage>> Parameters { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    public MetadataWorkspace MetadataWorkspace { get; }
    public DataSpace DataSpace { get; }
    internal DbCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, bool useDatabaseNullSemantics, bool disableFilterOverProjectionSimplificationForCustomFunctions);
    public bool get_UseDatabaseNullSemantics();
    public bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    public IEnumerable`1<KeyValuePair`2<string, TypeUsage>> get_Parameters();
    public abstract virtual DbCommandTreeKind get_CommandTreeKind();
    internal abstract virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    public virtual MetadataWorkspace get_MetadataWorkspace();
    public virtual DataSpace get_DataSpace();
    internal void Dump(ExpressionDumper dumper);
    internal abstract virtual void DumpStructure(ExpressionDumper dumper);
    public virtual string ToString();
    internal string Print();
    internal abstract virtual string PrintTree(ExpressionPrinter printer);
    internal static bool IsValidDataSpace(DataSpace dataSpace);
    internal static bool IsValidParameterName(string name);
}
public enum System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind : Enum {
    public int value__;
    public static DbCommandTreeKind Query;
    public static DbCommandTreeKind Update;
    public static DbCommandTreeKind Insert;
    public static DbCommandTreeKind Delete;
    public static DbCommandTreeKind Function;
}
public class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression : DbBinaryExpression {
    internal DbComparisonExpression(DbExpressionKind kind, TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression : DbExpression {
    private bool _shouldCloneValue;
    private object _value;
    public object Value { get; }
    internal DbConstantExpression(TypeUsage resultType, object value);
    internal object GetValue();
    public virtual object get_Value();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression : DbExpression {
    private ReadOnlyCollection`1<DbExpressionBinding> _inputs;
    public IList`1<DbExpressionBinding> Inputs { get; }
    internal DbCrossJoinExpression(TypeUsage collectionOfRowResultType, ReadOnlyCollection`1<DbExpressionBinding> inputs);
    public IList`1<DbExpressionBinding> get_Inputs();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree : DbModificationCommandTree {
    private DbExpression _predicate;
    public DbExpression Predicate { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    public DbDeleteCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, DbExpression predicate);
    public DbExpression get_Predicate();
    public virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression : DbUnaryExpression {
    internal DbDerefExpression(TypeUsage entityResultType, DbExpression refExpr);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression : DbUnaryExpression {
    internal DbDistinctExpression(TypeUsage resultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbElementExpression : DbUnaryExpression {
    private bool _singlePropertyUnwrapped;
    internal bool IsSinglePropertyUnwrapped { get; }
    internal DbElementExpression(TypeUsage resultType, DbExpression argument);
    internal DbElementExpression(TypeUsage resultType, DbExpression argument, bool unwrapSingleProperty);
    internal bool get_IsSinglePropertyUnwrapped();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression : DbUnaryExpression {
    internal DbEntityRefExpression(TypeUsage refResultType, DbExpression entity);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression : DbBinaryExpression {
    internal DbExceptExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbExpression : object {
    private TypeUsage _type;
    private DbExpressionKind _kind;
    public TypeUsage ResultType { get; }
    public DbExpressionKind ExpressionKind { get; }
    internal DbExpression(DbExpressionKind kind, TypeUsage type, bool forceNullable);
    public virtual TypeUsage get_ResultType();
    public virtual DbExpressionKind get_ExpressionKind();
    public abstract virtual void Accept(DbExpressionVisitor visitor);
    public abstract virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static DbExpression FromBinary(Byte[] value);
    public static DbExpression op_Implicit(Byte[] value);
    public static DbExpression FromBoolean(Nullable`1<bool> value);
    public static DbExpression op_Implicit(Nullable`1<bool> value);
    public static DbExpression FromByte(Nullable`1<byte> value);
    public static DbExpression op_Implicit(Nullable`1<byte> value);
    public static DbExpression FromDateTime(Nullable`1<DateTime> value);
    public static DbExpression op_Implicit(Nullable`1<DateTime> value);
    public static DbExpression FromDateTimeOffset(Nullable`1<DateTimeOffset> value);
    public static DbExpression op_Implicit(Nullable`1<DateTimeOffset> value);
    public static DbExpression FromDecimal(Nullable`1<decimal> value);
    public static DbExpression op_Implicit(Nullable`1<decimal> value);
    public static DbExpression FromDouble(Nullable`1<double> value);
    public static DbExpression op_Implicit(Nullable`1<double> value);
    public static DbExpression FromGeography(DbGeography value);
    public static DbExpression op_Implicit(DbGeography value);
    public static DbExpression FromGeometry(DbGeometry value);
    public static DbExpression op_Implicit(DbGeometry value);
    public static DbExpression FromGuid(Nullable`1<Guid> value);
    public static DbExpression op_Implicit(Nullable`1<Guid> value);
    public static DbExpression FromInt16(Nullable`1<short> value);
    public static DbExpression op_Implicit(Nullable`1<short> value);
    public static DbExpression FromInt32(Nullable`1<int> value);
    public static DbExpression op_Implicit(Nullable`1<int> value);
    public static DbExpression FromInt64(Nullable`1<long> value);
    public static DbExpression op_Implicit(Nullable`1<long> value);
    public static DbExpression FromSingle(Nullable`1<float> value);
    public static DbExpression op_Implicit(Nullable`1<float> value);
    public static DbExpression FromString(string value);
    public static DbExpression op_Implicit(string value);
    internal static void CheckExpressionKind(DbExpressionKind kind);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding : object {
    private DbExpression _expr;
    private DbVariableReferenceExpression _varRef;
    public DbExpression Expression { get; }
    public string VariableName { get; }
    public TypeUsage VariableType { get; }
    public DbVariableReferenceExpression Variable { get; }
    internal DbExpressionBinding(DbExpression input, DbVariableReferenceExpression varRef);
    public DbExpression get_Expression();
    public string get_VariableName();
    public TypeUsage get_VariableType();
    public DbVariableReferenceExpression get_Variable();
}
public enum System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind : Enum {
    public int value__;
    public static DbExpressionKind All;
    public static DbExpressionKind And;
    public static DbExpressionKind Any;
    public static DbExpressionKind Case;
    public static DbExpressionKind Cast;
    public static DbExpressionKind Constant;
    public static DbExpressionKind CrossApply;
    public static DbExpressionKind CrossJoin;
    public static DbExpressionKind Deref;
    public static DbExpressionKind Distinct;
    public static DbExpressionKind Divide;
    public static DbExpressionKind Element;
    public static DbExpressionKind EntityRef;
    public static DbExpressionKind Equals;
    public static DbExpressionKind Except;
    public static DbExpressionKind Filter;
    public static DbExpressionKind FullOuterJoin;
    public static DbExpressionKind Function;
    public static DbExpressionKind GreaterThan;
    public static DbExpressionKind GreaterThanOrEquals;
    public static DbExpressionKind GroupBy;
    public static DbExpressionKind InnerJoin;
    public static DbExpressionKind Intersect;
    public static DbExpressionKind IsEmpty;
    public static DbExpressionKind IsNull;
    public static DbExpressionKind IsOf;
    public static DbExpressionKind IsOfOnly;
    public static DbExpressionKind LeftOuterJoin;
    public static DbExpressionKind LessThan;
    public static DbExpressionKind LessThanOrEquals;
    public static DbExpressionKind Like;
    public static DbExpressionKind Limit;
    public static DbExpressionKind Minus;
    public static DbExpressionKind Modulo;
    public static DbExpressionKind Multiply;
    public static DbExpressionKind NewInstance;
    public static DbExpressionKind Not;
    public static DbExpressionKind NotEquals;
    public static DbExpressionKind Null;
    public static DbExpressionKind OfType;
    public static DbExpressionKind OfTypeOnly;
    public static DbExpressionKind Or;
    public static DbExpressionKind OuterApply;
    public static DbExpressionKind ParameterReference;
    public static DbExpressionKind Plus;
    public static DbExpressionKind Project;
    public static DbExpressionKind Property;
    public static DbExpressionKind Ref;
    public static DbExpressionKind RefKey;
    public static DbExpressionKind RelationshipNavigation;
    public static DbExpressionKind Scan;
    public static DbExpressionKind Skip;
    public static DbExpressionKind Sort;
    public static DbExpressionKind Treat;
    public static DbExpressionKind UnaryMinus;
    public static DbExpressionKind UnionAll;
    public static DbExpressionKind VariableReference;
    public static DbExpressionKind Lambda;
    public static DbExpressionKind In;
}
internal static class System.Data.Entity.Core.Common.CommandTrees.DbExpressionKindHelper : object {
    public static DbExpressionKind Last;
    private static DbExpressionKindHelper();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder : DefaultExpressionVisitor {
    private MetadataWorkspace _metadata;
    private Perspective _perspective;
    protected DbExpressionRebinder(MetadataWorkspace targetWorkspace);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction functionMetadata);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    private static bool TryGetMember(DbExpression instance, string memberName, TMember& member);
    public virtual DbExpression Visit(DbPropertyExpression expression);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor : object {
    public abstract virtual void Visit(DbExpression expression);
    public abstract virtual void Visit(DbAndExpression expression);
    public abstract virtual void Visit(DbApplyExpression expression);
    public abstract virtual void Visit(DbArithmeticExpression expression);
    public abstract virtual void Visit(DbCaseExpression expression);
    public abstract virtual void Visit(DbCastExpression expression);
    public abstract virtual void Visit(DbComparisonExpression expression);
    public abstract virtual void Visit(DbConstantExpression expression);
    public abstract virtual void Visit(DbCrossJoinExpression expression);
    public abstract virtual void Visit(DbDerefExpression expression);
    public abstract virtual void Visit(DbDistinctExpression expression);
    public abstract virtual void Visit(DbElementExpression expression);
    public abstract virtual void Visit(DbExceptExpression expression);
    public abstract virtual void Visit(DbFilterExpression expression);
    public abstract virtual void Visit(DbFunctionExpression expression);
    public abstract virtual void Visit(DbEntityRefExpression expression);
    public abstract virtual void Visit(DbRefKeyExpression expression);
    public abstract virtual void Visit(DbGroupByExpression expression);
    public abstract virtual void Visit(DbIntersectExpression expression);
    public abstract virtual void Visit(DbIsEmptyExpression expression);
    public abstract virtual void Visit(DbIsNullExpression expression);
    public abstract virtual void Visit(DbIsOfExpression expression);
    public abstract virtual void Visit(DbJoinExpression expression);
    public virtual void Visit(DbLambdaExpression expression);
    public abstract virtual void Visit(DbLikeExpression expression);
    public abstract virtual void Visit(DbLimitExpression expression);
    public abstract virtual void Visit(DbNewInstanceExpression expression);
    public abstract virtual void Visit(DbNotExpression expression);
    public abstract virtual void Visit(DbNullExpression expression);
    public abstract virtual void Visit(DbOfTypeExpression expression);
    public abstract virtual void Visit(DbOrExpression expression);
    public abstract virtual void Visit(DbParameterReferenceExpression expression);
    public abstract virtual void Visit(DbProjectExpression expression);
    public abstract virtual void Visit(DbPropertyExpression expression);
    public abstract virtual void Visit(DbQuantifierExpression expression);
    public abstract virtual void Visit(DbRefExpression expression);
    public abstract virtual void Visit(DbRelationshipNavigationExpression expression);
    public abstract virtual void Visit(DbScanExpression expression);
    public abstract virtual void Visit(DbSkipExpression expression);
    public abstract virtual void Visit(DbSortExpression expression);
    public abstract virtual void Visit(DbTreatExpression expression);
    public abstract virtual void Visit(DbUnionAllExpression expression);
    public abstract virtual void Visit(DbVariableReferenceExpression expression);
    public virtual void Visit(DbInExpression expression);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1 : object {
    public abstract virtual TResultType Visit(DbExpression expression);
    public abstract virtual TResultType Visit(DbAndExpression expression);
    public abstract virtual TResultType Visit(DbApplyExpression expression);
    public abstract virtual TResultType Visit(DbArithmeticExpression expression);
    public abstract virtual TResultType Visit(DbCaseExpression expression);
    public abstract virtual TResultType Visit(DbCastExpression expression);
    public abstract virtual TResultType Visit(DbComparisonExpression expression);
    public abstract virtual TResultType Visit(DbConstantExpression expression);
    public abstract virtual TResultType Visit(DbCrossJoinExpression expression);
    public abstract virtual TResultType Visit(DbDerefExpression expression);
    public abstract virtual TResultType Visit(DbDistinctExpression expression);
    public abstract virtual TResultType Visit(DbElementExpression expression);
    public abstract virtual TResultType Visit(DbExceptExpression expression);
    public abstract virtual TResultType Visit(DbFilterExpression expression);
    public abstract virtual TResultType Visit(DbFunctionExpression expression);
    public abstract virtual TResultType Visit(DbEntityRefExpression expression);
    public abstract virtual TResultType Visit(DbRefKeyExpression expression);
    public abstract virtual TResultType Visit(DbGroupByExpression expression);
    public abstract virtual TResultType Visit(DbIntersectExpression expression);
    public abstract virtual TResultType Visit(DbIsEmptyExpression expression);
    public abstract virtual TResultType Visit(DbIsNullExpression expression);
    public abstract virtual TResultType Visit(DbIsOfExpression expression);
    public abstract virtual TResultType Visit(DbJoinExpression expression);
    public virtual TResultType Visit(DbLambdaExpression expression);
    public abstract virtual TResultType Visit(DbLikeExpression expression);
    public abstract virtual TResultType Visit(DbLimitExpression expression);
    public abstract virtual TResultType Visit(DbNewInstanceExpression expression);
    public abstract virtual TResultType Visit(DbNotExpression expression);
    public abstract virtual TResultType Visit(DbNullExpression expression);
    public abstract virtual TResultType Visit(DbOfTypeExpression expression);
    public abstract virtual TResultType Visit(DbOrExpression expression);
    public abstract virtual TResultType Visit(DbParameterReferenceExpression expression);
    public abstract virtual TResultType Visit(DbProjectExpression expression);
    public abstract virtual TResultType Visit(DbPropertyExpression expression);
    public abstract virtual TResultType Visit(DbQuantifierExpression expression);
    public abstract virtual TResultType Visit(DbRefExpression expression);
    public abstract virtual TResultType Visit(DbRelationshipNavigationExpression expression);
    public abstract virtual TResultType Visit(DbScanExpression expression);
    public abstract virtual TResultType Visit(DbSortExpression expression);
    public abstract virtual TResultType Visit(DbSkipExpression expression);
    public abstract virtual TResultType Visit(DbTreatExpression expression);
    public abstract virtual TResultType Visit(DbUnionAllExpression expression);
    public abstract virtual TResultType Visit(DbVariableReferenceExpression expression);
    public virtual TResultType Visit(DbInExpression expression);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression : DbExpression {
    private DbExpressionBinding _input;
    private DbExpression _predicate;
    public DbExpressionBinding Input { get; }
    public DbExpression Predicate { get; }
    internal DbFilterExpression(TypeUsage resultType, DbExpressionBinding input, DbExpression predicate);
    public DbExpressionBinding get_Input();
    public DbExpression get_Predicate();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate : DbAggregate {
    private bool _distinct;
    private EdmFunction _aggregateFunction;
    public bool Distinct { get; }
    public EdmFunction Function { get; }
    internal DbFunctionAggregate(TypeUsage resultType, DbExpressionList arguments, EdmFunction function, bool isDistinct);
    public bool get_Distinct();
    public EdmFunction get_Function();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree : DbCommandTree {
    private EdmFunction _edmFunction;
    private TypeUsage _resultType;
    private ReadOnlyCollection`1<string> _parameterNames;
    private ReadOnlyCollection`1<TypeUsage> _parameterTypes;
    public EdmFunction EdmFunction { get; }
    public TypeUsage ResultType { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    public DbFunctionCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, EdmFunction edmFunction, TypeUsage resultType, IEnumerable`1<KeyValuePair`2<string, TypeUsage>> parameters);
    public EdmFunction get_EdmFunction();
    public TypeUsage get_ResultType();
    public virtual DbCommandTreeKind get_CommandTreeKind();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree/<GetParameters>d__11")]
internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression : DbExpression {
    private EdmFunction _functionInfo;
    private DbExpressionList _arguments;
    public EdmFunction Function { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbFunctionExpression(TypeUsage resultType, EdmFunction function, DbExpressionList arguments);
    public virtual EdmFunction get_Function();
    public virtual IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate : DbAggregate {
    internal DbGroupAggregate(TypeUsage resultType, DbExpressionList arguments);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression : DbExpression {
    private DbGroupExpressionBinding _input;
    private DbExpressionList _keys;
    private ReadOnlyCollection`1<DbAggregate> _aggregates;
    public DbGroupExpressionBinding Input { get; }
    public IList`1<DbExpression> Keys { get; }
    public IList`1<DbAggregate> Aggregates { get; }
    internal DbGroupByExpression(TypeUsage collectionOfRowResultType, DbGroupExpressionBinding input, DbExpressionList groupKeys, ReadOnlyCollection`1<DbAggregate> aggregates);
    public DbGroupExpressionBinding get_Input();
    public IList`1<DbExpression> get_Keys();
    public IList`1<DbAggregate> get_Aggregates();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding : object {
    private DbExpression _expr;
    private DbVariableReferenceExpression _varRef;
    private DbVariableReferenceExpression _groupVarRef;
    private DbGroupAggregate _groupAggregate;
    public DbExpression Expression { get; }
    public string VariableName { get; }
    public TypeUsage VariableType { get; }
    public DbVariableReferenceExpression Variable { get; }
    public string GroupVariableName { get; }
    public TypeUsage GroupVariableType { get; }
    public DbVariableReferenceExpression GroupVariable { get; }
    public DbGroupAggregate GroupAggregate { get; }
    internal DbGroupExpressionBinding(DbExpression input, DbVariableReferenceExpression inputRef, DbVariableReferenceExpression groupRef);
    public DbExpression get_Expression();
    public string get_VariableName();
    public TypeUsage get_VariableType();
    public DbVariableReferenceExpression get_Variable();
    public string get_GroupVariableName();
    public TypeUsage get_GroupVariableType();
    public DbVariableReferenceExpression get_GroupVariable();
    public DbGroupAggregate get_GroupAggregate();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbInExpression : DbExpression {
    private DbExpression _item;
    private DbExpressionList _list;
    public DbExpression Item { get; }
    public IList`1<DbExpression> List { get; }
    internal DbInExpression(TypeUsage booleanResultType, DbExpression item, DbExpressionList list);
    public DbExpression get_Item();
    public IList`1<DbExpression> get_List();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree : DbModificationCommandTree {
    private ReadOnlyCollection`1<DbModificationClause> _setClauses;
    private DbExpression _returning;
    public IList`1<DbModificationClause> SetClauses { get; }
    public DbExpression Returning { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    public DbInsertCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, ReadOnlyCollection`1<DbModificationClause> setClauses, DbExpression returning);
    public IList`1<DbModificationClause> get_SetClauses();
    public DbExpression get_Returning();
    public virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression : DbBinaryExpression {
    internal DbIntersectExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression : DbUnaryExpression {
    internal DbIsEmptyExpression(TypeUsage booleanResultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression : DbUnaryExpression {
    internal DbIsNullExpression(TypeUsage booleanResultType, DbExpression arg);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression : DbUnaryExpression {
    private TypeUsage _ofType;
    public TypeUsage OfType { get; }
    internal DbIsOfExpression(DbExpressionKind isOfKind, TypeUsage booleanResultType, DbExpression argument, TypeUsage isOfType);
    public TypeUsage get_OfType();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression : DbExpression {
    private DbExpressionBinding _left;
    private DbExpressionBinding _right;
    private DbExpression _condition;
    public DbExpressionBinding Left { get; }
    public DbExpressionBinding Right { get; }
    public DbExpression JoinCondition { get; }
    internal DbJoinExpression(DbExpressionKind joinKind, TypeUsage collectionOfRowResultType, DbExpressionBinding left, DbExpressionBinding right, DbExpression condition);
    public DbExpressionBinding get_Left();
    public DbExpressionBinding get_Right();
    public DbExpression get_JoinCondition();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbLambda : object {
    private ReadOnlyCollection`1<DbVariableReferenceExpression> _variables;
    private DbExpression _body;
    public DbExpression Body { get; }
    public IList`1<DbVariableReferenceExpression> Variables { get; }
    internal DbLambda(ReadOnlyCollection`1<DbVariableReferenceExpression> variables, DbExpression bodyExp);
    public DbExpression get_Body();
    public IList`1<DbVariableReferenceExpression> get_Variables();
    public static DbLambda Create(DbExpression body, IEnumerable`1<DbVariableReferenceExpression> variables);
    public static DbLambda Create(DbExpression body, DbVariableReferenceExpression[] variables);
    public static DbLambda Create(TypeUsage argument1Type, Func`2<DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, Func`3<DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, Func`4<DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, Func`5<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, Func`6<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, Func`7<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, Func`8<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, Func`9<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, Func`10<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, Func`11<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, Func`12<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, Func`13<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, Func`14<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, Func`15<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, TypeUsage argument15Type, Func`16<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, TypeUsage argument15Type, TypeUsage argument16Type, Func`17<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    private static DbVariableReferenceExpression[] CreateVariables(MethodInfo lambdaMethod, TypeUsage[] argumentTypes);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression : DbExpression {
    private DbLambda _lambda;
    private DbExpressionList _arguments;
    public DbLambda Lambda { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbLambdaExpression(TypeUsage resultType, DbLambda lambda, DbExpressionList args);
    public DbLambda get_Lambda();
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression : DbExpression {
    private DbExpression _argument;
    private DbExpression _pattern;
    private DbExpression _escape;
    public DbExpression Argument { get; }
    public DbExpression Pattern { get; }
    public DbExpression Escape { get; }
    internal DbLikeExpression(TypeUsage booleanResultType, DbExpression input, DbExpression pattern, DbExpression escape);
    public DbExpression get_Argument();
    public DbExpression get_Pattern();
    public DbExpression get_Escape();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression : DbExpression {
    private DbExpression _argument;
    private DbExpression _limit;
    private bool _withTies;
    public DbExpression Argument { get; }
    public DbExpression Limit { get; }
    public bool WithTies { get; }
    internal DbLimitExpression(TypeUsage resultType, DbExpression argument, DbExpression limit, bool withTies);
    public DbExpression get_Argument();
    public DbExpression get_Limit();
    public bool get_WithTies();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbModificationClause : object {
    internal abstract virtual void DumpStructure(ExpressionDumper dumper);
    internal abstract virtual TreeNode Print(DbExpressionVisitor`1<TreeNode> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree : DbCommandTree {
    private DbExpressionBinding _target;
    private ReadOnlyCollection`1<DbParameterReferenceExpression> _parameters;
    public DbExpressionBinding Target { get; }
    internal bool HasReader { get; }
    internal DbModificationCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target);
    public DbExpressionBinding get_Target();
    internal abstract virtual bool get_HasReader();
    internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression : DbExpression {
    private DbExpressionList _elements;
    private ReadOnlyCollection`1<DbRelatedEntityRef> _relatedEntityRefs;
    public IList`1<DbExpression> Arguments { get; }
    internal bool HasRelatedEntityReferences { get; }
    internal ReadOnlyCollection`1<DbRelatedEntityRef> RelatedEntityReferences { get; }
    internal DbNewInstanceExpression(TypeUsage type, DbExpressionList args);
    internal DbNewInstanceExpression(TypeUsage resultType, DbExpressionList attributeValues, ReadOnlyCollection`1<DbRelatedEntityRef> relationships);
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    internal bool get_HasRelatedEntityReferences();
    internal ReadOnlyCollection`1<DbRelatedEntityRef> get_RelatedEntityReferences();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbNotExpression : DbUnaryExpression {
    internal DbNotExpression(TypeUsage booleanResultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbNullExpression : DbExpression {
    internal DbNullExpression(TypeUsage type);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression : DbUnaryExpression {
    private TypeUsage _ofType;
    public TypeUsage OfType { get; }
    internal DbOfTypeExpression(DbExpressionKind ofTypeKind, TypeUsage collectionResultType, DbExpression argument, TypeUsage type);
    public TypeUsage get_OfType();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbOrExpression : DbBinaryExpression {
    internal DbOrExpression(TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression : DbExpression {
    private string _name;
    public string ParameterName { get; }
    internal DbParameterReferenceExpression(TypeUsage type, string name);
    public virtual string get_ParameterName();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression : DbExpression {
    private DbExpressionBinding _input;
    private DbExpression _projection;
    public DbExpressionBinding Input { get; }
    public DbExpression Projection { get; }
    internal DbProjectExpression(TypeUsage resultType, DbExpressionBinding input, DbExpression projection);
    public DbExpressionBinding get_Input();
    public DbExpression get_Projection();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression : DbExpression {
    private EdmMember _property;
    private DbExpression _instance;
    public EdmMember Property { get; }
    public DbExpression Instance { get; }
    internal DbPropertyExpression(TypeUsage resultType, EdmMember property, DbExpression instance);
    public virtual EdmMember get_Property();
    public virtual DbExpression get_Instance();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    public KeyValuePair`2<string, DbExpression> ToKeyValuePair();
    public static KeyValuePair`2<string, DbExpression> op_Implicit(DbPropertyExpression value);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression : DbExpression {
    private DbExpressionBinding _input;
    private DbExpression _predicate;
    public DbExpressionBinding Input { get; }
    public DbExpression Predicate { get; }
    internal DbQuantifierExpression(DbExpressionKind kind, TypeUsage booleanResultType, DbExpressionBinding input, DbExpression predicate);
    public DbExpressionBinding get_Input();
    public DbExpression get_Predicate();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree : DbCommandTree {
    private DbExpression _query;
    private ReadOnlyCollection`1<DbParameterReferenceExpression> _parameters;
    public DbExpression Query { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    public DbQueryCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query, bool validate, bool useDatabaseNullSemantics, bool disableFilterOverProjectionSimplificationForCustomFunctions);
    public DbQueryCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query, bool validate, bool useDatabaseNullSemantics);
    public DbQueryCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query, bool validate);
    public DbQueryCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query);
    public DbExpression get_Query();
    public virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
    internal static DbQueryCommandTree FromValidExpression(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query, bool useDatabaseNullSemantics, bool disableFilterOverProjectionSimplificationForCustomFunctions);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression : DbUnaryExpression {
    private EntitySet _entitySet;
    public EntitySet EntitySet { get; }
    internal DbRefExpression(TypeUsage refResultType, EntitySet entitySet, DbExpression refKeys);
    public EntitySet get_EntitySet();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression : DbUnaryExpression {
    internal DbRefKeyExpression(TypeUsage rowResultType, DbExpression reference);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
internal class System.Data.Entity.Core.Common.CommandTrees.DbRelatedEntityRef : object {
    private RelationshipEndMember _sourceEnd;
    private RelationshipEndMember _targetEnd;
    private DbExpression _targetEntityRef;
    internal RelationshipEndMember SourceEnd { get; }
    internal RelationshipEndMember TargetEnd { get; }
    internal DbExpression TargetEntityReference { get; }
    internal DbRelatedEntityRef(RelationshipEndMember sourceEnd, RelationshipEndMember targetEnd, DbExpression targetEntityRef);
    internal RelationshipEndMember get_SourceEnd();
    internal RelationshipEndMember get_TargetEnd();
    internal DbExpression get_TargetEntityReference();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression : DbExpression {
    private RelationshipType _relation;
    private RelationshipEndMember _fromRole;
    private RelationshipEndMember _toRole;
    private DbExpression _from;
    public RelationshipType Relationship { get; }
    public RelationshipEndMember NavigateFrom { get; }
    public RelationshipEndMember NavigateTo { get; }
    public DbExpression NavigationSource { get; }
    internal DbRelationshipNavigationExpression(TypeUsage resultType, RelationshipType relType, RelationshipEndMember fromEnd, RelationshipEndMember toEnd, DbExpression navigateFrom);
    public RelationshipType get_Relationship();
    public RelationshipEndMember get_NavigateFrom();
    public RelationshipEndMember get_NavigateTo();
    public DbExpression get_NavigationSource();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbScanExpression : DbExpression {
    private EntitySetBase _targetSet;
    public EntitySetBase Target { get; }
    internal DbScanExpression(TypeUsage collectionOfEntityType, EntitySetBase entitySet);
    public virtual EntitySetBase get_Target();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbSetClause : DbModificationClause {
    private DbExpression _prop;
    private DbExpression _val;
    public DbExpression Property { get; }
    public DbExpression Value { get; }
    internal DbSetClause(DbExpression targetProperty, DbExpression sourceValue);
    public DbExpression get_Property();
    public DbExpression get_Value();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual TreeNode Print(DbExpressionVisitor`1<TreeNode> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression : DbExpression {
    private DbExpressionBinding _input;
    private ReadOnlyCollection`1<DbSortClause> _keys;
    private DbExpression _count;
    public DbExpressionBinding Input { get; }
    public IList`1<DbSortClause> SortOrder { get; }
    public DbExpression Count { get; }
    internal DbSkipExpression(TypeUsage resultType, DbExpressionBinding input, ReadOnlyCollection`1<DbSortClause> sortOrder, DbExpression count);
    public DbExpressionBinding get_Input();
    public IList`1<DbSortClause> get_SortOrder();
    public DbExpression get_Count();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbSortClause : object {
    private DbExpression _expr;
    private bool _asc;
    private string _coll;
    public bool Ascending { get; }
    public string Collation { get; }
    public DbExpression Expression { get; }
    internal DbSortClause(DbExpression key, bool asc, string collation);
    public bool get_Ascending();
    public string get_Collation();
    public DbExpression get_Expression();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression : DbExpression {
    private DbExpressionBinding _input;
    private ReadOnlyCollection`1<DbSortClause> _keys;
    public DbExpressionBinding Input { get; }
    public IList`1<DbSortClause> SortOrder { get; }
    internal DbSortExpression(TypeUsage resultType, DbExpressionBinding input, ReadOnlyCollection`1<DbSortClause> sortOrder);
    public DbExpressionBinding get_Input();
    public IList`1<DbSortClause> get_SortOrder();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression : DbUnaryExpression {
    internal DbTreatExpression(TypeUsage asType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression : DbExpression {
    private DbExpression _argument;
    public DbExpression Argument { get; }
    internal DbUnaryExpression(DbExpressionKind kind, TypeUsage resultType, DbExpression argument);
    public virtual DbExpression get_Argument();
}
public class System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression : DbBinaryExpression {
    internal DbUnionAllExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree : DbModificationCommandTree {
    private DbExpression _predicate;
    private DbExpression _returning;
    private ReadOnlyCollection`1<DbModificationClause> _setClauses;
    public IList`1<DbModificationClause> SetClauses { get; }
    public DbExpression Returning { get; }
    public DbExpression Predicate { get; }
    public DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    public DbUpdateCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, DbExpression predicate, ReadOnlyCollection`1<DbModificationClause> setClauses, DbExpression returning);
    public IList`1<DbModificationClause> get_SetClauses();
    public DbExpression get_Returning();
    public DbExpression get_Predicate();
    public virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression : DbExpression {
    private string _name;
    public string VariableName { get; }
    internal DbVariableReferenceExpression(TypeUsage type, string name);
    public virtual string get_VariableName();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor : DbExpressionVisitor`1<DbExpression> {
    private Dictionary`2<DbVariableReferenceExpression, DbVariableReferenceExpression> varMappings;
    protected virtual void OnExpressionReplaced(DbExpression oldExpression, DbExpression newExpression);
    protected virtual void OnVariableRebound(DbVariableReferenceExpression fromVarRef, DbVariableReferenceExpression toVarRef);
    protected virtual void OnEnterScope(IEnumerable`1<DbVariableReferenceExpression> scopeVariables);
    protected virtual void OnExitScope();
    protected virtual DbExpression VisitExpression(DbExpression expression);
    protected virtual IList`1<DbExpression> VisitExpressionList(IList`1<DbExpression> list);
    protected virtual DbExpressionBinding VisitExpressionBinding(DbExpressionBinding binding);
    protected virtual IList`1<DbExpressionBinding> VisitExpressionBindingList(IList`1<DbExpressionBinding> list);
    protected virtual DbGroupExpressionBinding VisitGroupExpressionBinding(DbGroupExpressionBinding binding);
    protected virtual DbSortClause VisitSortClause(DbSortClause clause);
    protected virtual IList`1<DbSortClause> VisitSortOrder(IList`1<DbSortClause> sortOrder);
    protected virtual DbAggregate VisitAggregate(DbAggregate aggregate);
    protected virtual DbFunctionAggregate VisitFunctionAggregate(DbFunctionAggregate aggregate);
    protected virtual DbGroupAggregate VisitGroupAggregate(DbGroupAggregate aggregate);
    protected virtual DbLambda VisitLambda(DbLambda lambda);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction functionMetadata);
    private void NotifyIfChanged(DbExpression originalExpression, DbExpression newExpression);
    private static IList`1<TElement> VisitList(IList`1<TElement> list, Func`2<TElement, TElement> map);
    private DbExpression VisitUnary(DbUnaryExpression expression, Func`2<DbExpression, DbExpression> callback);
    private DbExpression VisitTypeUnary(DbUnaryExpression expression, TypeUsage type, Func`3<DbExpression, TypeUsage, DbExpression> callback);
    private DbExpression VisitBinary(DbBinaryExpression expression, Func`3<DbExpression, DbExpression, DbExpression> callback);
    private DbRelatedEntityRef VisitRelatedEntityRef(DbRelatedEntityRef entityRef);
    private void VisitRelationshipEnds(RelationshipEndMember source, RelationshipEndMember target, RelationshipEndMember& newSource, RelationshipEndMember& newTarget);
    private DbExpression VisitTerminal(DbExpression expression, Func`2<TypeUsage, DbExpression> reconstructor);
    private void RebindVariable(DbVariableReferenceExpression from, DbVariableReferenceExpression to);
    private DbExpressionBinding VisitExpressionBindingEnterScope(DbExpressionBinding binding);
    private void EnterScope(DbVariableReferenceExpression[] scopeVars);
    private void ExitScope();
    public virtual DbExpression Visit(DbExpression expression);
    public virtual DbExpression Visit(DbConstantExpression expression);
    public virtual DbExpression Visit(DbNullExpression expression);
    public virtual DbExpression Visit(DbVariableReferenceExpression expression);
    public virtual DbExpression Visit(DbParameterReferenceExpression expression);
    public virtual DbExpression Visit(DbFunctionExpression expression);
    public virtual DbExpression Visit(DbLambdaExpression expression);
    public virtual DbExpression Visit(DbPropertyExpression expression);
    public virtual DbExpression Visit(DbComparisonExpression expression);
    public virtual DbExpression Visit(DbLikeExpression expression);
    public virtual DbExpression Visit(DbLimitExpression expression);
    public virtual DbExpression Visit(DbIsNullExpression expression);
    public virtual DbExpression Visit(DbArithmeticExpression expression);
    public virtual DbExpression Visit(DbAndExpression expression);
    public virtual DbExpression Visit(DbOrExpression expression);
    public virtual DbExpression Visit(DbInExpression expression);
    public virtual DbExpression Visit(DbNotExpression expression);
    public virtual DbExpression Visit(DbDistinctExpression expression);
    public virtual DbExpression Visit(DbElementExpression expression);
    public virtual DbExpression Visit(DbIsEmptyExpression expression);
    public virtual DbExpression Visit(DbUnionAllExpression expression);
    public virtual DbExpression Visit(DbIntersectExpression expression);
    public virtual DbExpression Visit(DbExceptExpression expression);
    public virtual DbExpression Visit(DbTreatExpression expression);
    public virtual DbExpression Visit(DbIsOfExpression expression);
    public virtual DbExpression Visit(DbCastExpression expression);
    public virtual DbExpression Visit(DbCaseExpression expression);
    public virtual DbExpression Visit(DbOfTypeExpression expression);
    public virtual DbExpression Visit(DbNewInstanceExpression expression);
    public virtual DbExpression Visit(DbRefExpression expression);
    public virtual DbExpression Visit(DbRelationshipNavigationExpression expression);
    public virtual DbExpression Visit(DbDerefExpression expression);
    public virtual DbExpression Visit(DbRefKeyExpression expression);
    public virtual DbExpression Visit(DbEntityRefExpression expression);
    public virtual DbExpression Visit(DbScanExpression expression);
    public virtual DbExpression Visit(DbFilterExpression expression);
    public virtual DbExpression Visit(DbProjectExpression expression);
    public virtual DbExpression Visit(DbCrossJoinExpression expression);
    public virtual DbExpression Visit(DbJoinExpression expression);
    public virtual DbExpression Visit(DbApplyExpression expression);
    public virtual DbExpression Visit(DbGroupByExpression expression);
    public virtual DbExpression Visit(DbSkipExpression expression);
    public virtual DbExpression Visit(DbSortExpression expression);
    public virtual DbExpression Visit(DbQuantifierExpression expression);
    [CompilerGeneratedAttribute]
private DbVariableReferenceExpression <VisitLambda>b__16_0(DbVariableReferenceExpression varRef);
}
[ExtensionAttribute]
public static class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder : object {
    private static TypeUsage _booleanType;
    private static AliasGenerator _bindingAliases;
    private static DbNullExpression _binaryNull;
    private static DbNullExpression _boolNull;
    private static DbNullExpression _byteNull;
    private static DbNullExpression _dateTimeNull;
    private static DbNullExpression _dateTimeOffsetNull;
    private static DbNullExpression _decimalNull;
    private static DbNullExpression _doubleNull;
    private static DbNullExpression _geographyNull;
    private static DbNullExpression _geometryNull;
    private static DbNullExpression _guidNull;
    private static DbNullExpression _int16Null;
    private static DbNullExpression _int32Null;
    private static DbNullExpression _int64Null;
    private static DbNullExpression _sbyteNull;
    private static DbNullExpression _singleNull;
    private static DbNullExpression _stringNull;
    private static DbNullExpression _timeNull;
    private static DbConstantExpression _boolTrue;
    private static DbConstantExpression _boolFalse;
    public static DbConstantExpression True { get; }
    public static DbConstantExpression False { get; }
    internal static AliasGenerator AliasGenerator { get; }
    private static DbExpressionBuilder();
    [ExtensionAttribute]
public static KeyValuePair`2<string, DbExpression> As(DbExpression value, string alias);
    [ExtensionAttribute]
public static KeyValuePair`2<string, DbAggregate> As(DbAggregate value, string alias);
    [ExtensionAttribute]
public static DbExpressionBinding Bind(DbExpression input);
    [ExtensionAttribute]
public static DbExpressionBinding BindAs(DbExpression input, string varName);
    [ExtensionAttribute]
public static DbGroupExpressionBinding GroupBind(DbExpression input);
    [ExtensionAttribute]
public static DbGroupExpressionBinding GroupBindAs(DbExpression input, string varName, string groupVarName);
    [ExtensionAttribute]
public static DbFunctionAggregate Aggregate(EdmFunction function, DbExpression argument);
    [ExtensionAttribute]
public static DbFunctionAggregate AggregateDistinct(EdmFunction function, DbExpression argument);
    private static DbFunctionAggregate CreateFunctionAggregate(EdmFunction function, DbExpression argument, bool isDistinct);
    [ExtensionAttribute]
public static DbFunctionAggregate Aggregate(EdmFunction function, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbFunctionAggregate AggregateDistinct(EdmFunction function, IEnumerable`1<DbExpression> arguments);
    private static DbFunctionAggregate CreateFunctionAggregate(EdmFunction function, IEnumerable`1<DbExpression> arguments, bool isDistinct);
    public static DbGroupAggregate GroupAggregate(DbExpression argument);
    public static DbLambda Lambda(DbExpression body, IEnumerable`1<DbVariableReferenceExpression> variables);
    public static DbLambda Lambda(DbExpression body, DbVariableReferenceExpression[] variables);
    private static DbLambda CreateLambda(DbExpression body, IEnumerable`1<DbVariableReferenceExpression> variables);
    [ExtensionAttribute]
public static DbSortClause ToSortClause(DbExpression key);
    [ExtensionAttribute]
public static DbSortClause ToSortClauseDescending(DbExpression key);
    [ExtensionAttribute]
public static DbSortClause ToSortClause(DbExpression key, string collation);
    [ExtensionAttribute]
public static DbSortClause ToSortClauseDescending(DbExpression key, string collation);
    [ExtensionAttribute]
public static DbQuantifierExpression All(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbQuantifierExpression Any(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbApplyExpression CrossApply(DbExpressionBinding input, DbExpressionBinding apply);
    [ExtensionAttribute]
public static DbApplyExpression OuterApply(DbExpressionBinding input, DbExpressionBinding apply);
    private static void ValidateApply(DbExpressionBinding input, DbExpressionBinding apply);
    private static TypeUsage CreateApplyResultType(DbExpressionBinding input, DbExpressionBinding apply);
    public static DbCrossJoinExpression CrossJoin(IEnumerable`1<DbExpressionBinding> inputs);
    [ExtensionAttribute]
public static DbJoinExpression InnerJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression LeftOuterJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression FullOuterJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbFilterExpression Filter(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbGroupByExpression GroupBy(DbGroupExpressionBinding input, IEnumerable`1<KeyValuePair`2<string, DbExpression>> keys, IEnumerable`1<KeyValuePair`2<string, DbAggregate>> aggregates);
    [ExtensionAttribute]
public static DbProjectExpression Project(DbExpressionBinding input, DbExpression projection);
    [ExtensionAttribute]
public static DbSkipExpression Skip(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder, DbExpression count);
    [ExtensionAttribute]
public static DbSortExpression Sort(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder);
    [ExtensionAttribute]
public static DbNullExpression Null(TypeUsage nullType);
    public static DbConstantExpression get_True();
    public static DbConstantExpression get_False();
    public static DbConstantExpression Constant(object value);
    [ExtensionAttribute]
public static DbConstantExpression Constant(TypeUsage constantType, object value);
    [ExtensionAttribute]
public static DbParameterReferenceExpression Parameter(TypeUsage type, string name);
    [ExtensionAttribute]
public static DbVariableReferenceExpression Variable(TypeUsage type, string name);
    [ExtensionAttribute]
public static DbScanExpression Scan(EntitySetBase targetSet);
    [ExtensionAttribute]
public static DbAndExpression And(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbOrExpression Or(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbInExpression In(DbExpression expression, IList`1<DbConstantExpression> list);
    internal static DbInExpression CreateInExpression(DbExpression item, IList`1<DbExpression> list);
    [ExtensionAttribute]
public static DbNotExpression Not(DbExpression argument);
    private static DbArithmeticExpression CreateArithmetic(DbExpressionKind kind, DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Divide(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Minus(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Modulo(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Multiply(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Plus(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression UnaryMinus(DbExpression argument);
    [ExtensionAttribute]
public static DbArithmeticExpression Negate(DbExpression argument);
    private static DbComparisonExpression CreateComparison(DbExpressionKind kind, DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression Equal(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression NotEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression GreaterThan(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression LessThan(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression GreaterThanOrEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression LessThanOrEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbIsNullExpression IsNull(DbExpression argument);
    private static void ValidateIsNull(DbExpression argument);
    [ExtensionAttribute]
public static DbLikeExpression Like(DbExpression argument, DbExpression pattern);
    [ExtensionAttribute]
public static DbLikeExpression Like(DbExpression argument, DbExpression pattern, DbExpression escape);
    private static void ValidateLike(DbExpression argument, DbExpression pattern, DbExpression escape);
    private static void ValidateLike(DbExpression argument, DbExpression pattern);
    [ExtensionAttribute]
public static DbCastExpression CastTo(DbExpression argument, TypeUsage toType);
    [ExtensionAttribute]
public static DbTreatExpression TreatAs(DbExpression argument, TypeUsage treatType);
    [ExtensionAttribute]
public static DbOfTypeExpression OfType(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbOfTypeExpression OfTypeOnly(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbIsOfExpression IsOf(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbIsOfExpression IsOfOnly(DbExpression argument, TypeUsage type);
    private static void ValidateOfType(DbExpression argument, TypeUsage type);
    private static void ValidateIsOf(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbDerefExpression Deref(DbExpression argument);
    [ExtensionAttribute]
public static DbEntityRefExpression GetEntityRef(DbExpression argument);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, IEnumerable`1<DbExpression> keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, DbExpression[] keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, EntityType entityType, IEnumerable`1<DbExpression> keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, EntityType entityType, DbExpression[] keyValues);
    private static DbRefExpression CreateRefExpression(EntitySet entitySet, IEnumerable`1<DbExpression> keyValues);
    private static DbRefExpression CreateRefExpression(EntitySet entitySet, EntityType entityType, IEnumerable`1<DbExpression> keyValues);
    [ExtensionAttribute]
public static DbRefExpression RefFromKey(EntitySet entitySet, DbExpression keyRow);
    [ExtensionAttribute]
public static DbRefExpression RefFromKey(EntitySet entitySet, DbExpression keyRow, EntityType entityType);
    [ExtensionAttribute]
public static DbRefKeyExpression GetRefKey(DbExpression argument);
    [ExtensionAttribute]
public static DbRelationshipNavigationExpression Navigate(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    [ExtensionAttribute]
public static DbRelationshipNavigationExpression Navigate(RelationshipType type, string fromEndName, string toEndName, DbExpression navigateFrom);
    [ExtensionAttribute]
public static DbDistinctExpression Distinct(DbExpression argument);
    [ExtensionAttribute]
public static DbElementExpression Element(DbExpression argument);
    [ExtensionAttribute]
public static DbIsEmptyExpression IsEmpty(DbExpression argument);
    [ExtensionAttribute]
public static DbExceptExpression Except(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbIntersectExpression Intersect(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbUnionAllExpression UnionAll(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbLimitExpression Limit(DbExpression argument, DbExpression count);
    public static DbCaseExpression Case(IEnumerable`1<DbExpression> whenExpressions, IEnumerable`1<DbExpression> thenExpressions, DbExpression elseExpression);
    [ExtensionAttribute]
public static DbFunctionExpression Invoke(EdmFunction function, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbFunctionExpression Invoke(EdmFunction function, DbExpression[] arguments);
    private static DbFunctionExpression InvokeFunction(EdmFunction function, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbLambdaExpression Invoke(DbLambda lambda, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbLambdaExpression Invoke(DbLambda lambda, DbExpression[] arguments);
    private static DbLambdaExpression InvokeLambda(DbLambda lambda, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbNewInstanceExpression New(TypeUsage instanceType, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbNewInstanceExpression New(TypeUsage instanceType, DbExpression[] arguments);
    private static DbNewInstanceExpression NewInstance(TypeUsage instanceType, IEnumerable`1<DbExpression> arguments);
    public static DbNewInstanceExpression NewCollection(IEnumerable`1<DbExpression> elements);
    public static DbNewInstanceExpression NewCollection(DbExpression[] elements);
    private static DbNewInstanceExpression CreateNewCollection(IEnumerable`1<DbExpression> elements);
    [ExtensionAttribute]
public static DbNewInstanceExpression NewEmptyCollection(TypeUsage collectionType);
    public static DbNewInstanceExpression NewRow(IEnumerable`1<KeyValuePair`2<string, DbExpression>> columnValues);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, EdmProperty propertyMetadata);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, NavigationProperty navigationProperty);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, RelationshipEndMember relationshipEnd);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, string propertyName);
    private static DbPropertyExpression PropertyFromMember(DbExpression instance, EdmMember property, string propertyArgumentName);
    private static DbPropertyExpression PropertyByName(DbExpression instance, string propertyName, bool ignoreCase);
    public static DbSetClause SetClause(DbExpression property, DbExpression value);
    private static string ExtractAlias(MethodInfo method);
    internal static String[] ExtractAliases(MethodInfo method);
    private static DbExpressionBinding ConvertToBinding(DbExpression source, Func`2<DbExpression, TResult> argument, TResult& argumentResult);
    private static DbExpressionBinding[] ConvertToBinding(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> argument, DbExpression& argumentExp);
    internal static List`1<KeyValuePair`2<string, TRequired>> TryGetAnonymousTypeValues(object instance);
    private static bool TryResolveToConstant(Type type, object value, DbExpression& constantOrNullExpression);
    private static DbExpression ResolveToExpression(TArgument argument);
    private static DbApplyExpression CreateApply(DbExpression source, Func`2<DbExpression, KeyValuePair`2<string, DbExpression>> apply, Func`3<DbExpressionBinding, DbExpressionBinding, DbApplyExpression> resultBuilder);
    [ExtensionAttribute]
public static DbQuantifierExpression All(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbExpression Any(DbExpression source);
    [ExtensionAttribute]
public static DbExpression Exists(DbExpression argument);
    [ExtensionAttribute]
public static DbQuantifierExpression Any(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbApplyExpression CrossApply(DbExpression source, Func`2<DbExpression, KeyValuePair`2<string, DbExpression>> apply);
    [ExtensionAttribute]
public static DbApplyExpression OuterApply(DbExpression source, Func`2<DbExpression, KeyValuePair`2<string, DbExpression>> apply);
    [ExtensionAttribute]
public static DbJoinExpression FullOuterJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression InnerJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression LeftOuterJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression Join(DbExpression outer, DbExpression inner, Func`2<DbExpression, DbExpression> outerKey, Func`2<DbExpression, DbExpression> innerKey);
    [ExtensionAttribute]
public static DbProjectExpression Join(DbExpression outer, DbExpression inner, Func`2<DbExpression, DbExpression> outerKey, Func`2<DbExpression, DbExpression> innerKey, Func`3<DbExpression, DbExpression, TSelector> selector);
    [ExtensionAttribute]
public static DbSortExpression OrderBy(DbExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression OrderBy(DbExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbSortExpression OrderByDescending(DbExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression OrderByDescending(DbExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbProjectExpression Select(DbExpression source, Func`2<DbExpression, TProjection> projection);
    [ExtensionAttribute]
public static DbProjectExpression SelectMany(DbExpression source, Func`2<DbExpression, DbExpression> apply);
    [ExtensionAttribute]
public static DbProjectExpression SelectMany(DbExpression source, Func`2<DbExpression, DbExpression> apply, Func`3<DbExpression, DbExpression, TSelector> selector);
    [ExtensionAttribute]
public static DbSkipExpression Skip(DbSortExpression argument, DbExpression count);
    [ExtensionAttribute]
public static DbLimitExpression Take(DbExpression argument, DbExpression count);
    private static DbSortExpression CreateThenBy(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey, bool ascending, string collation, bool useCollation);
    [ExtensionAttribute]
public static DbSortExpression ThenBy(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression ThenBy(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbSortExpression ThenByDescending(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression ThenByDescending(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbFilterExpression Where(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbExpression Union(DbExpression left, DbExpression right);
    internal static AliasGenerator get_AliasGenerator();
    internal static DbNullExpression CreatePrimitiveNullExpression(PrimitiveTypeKind primitiveType);
    internal static DbApplyExpression CreateApplyExpressionByKind(DbExpressionKind applyKind, DbExpressionBinding input, DbExpressionBinding apply);
    internal static DbExpression CreateJoinExpressionByKind(DbExpressionKind joinKind, DbExpression joinCondition, DbExpressionBinding input1, DbExpressionBinding input2);
    internal static DbElementExpression CreateElementExpressionUnwrapSingleProperty(DbExpression argument);
    internal static DbRelatedEntityRef CreateRelatedEntityRef(RelationshipEndMember sourceEnd, RelationshipEndMember targetEnd, DbExpression targetEntity);
    internal static DbNewInstanceExpression CreateNewEntityWithRelationshipsExpression(EntityType entityType, IList`1<DbExpression> attributeValues, IList`1<DbRelatedEntityRef> relationships);
    [ExtensionAttribute]
internal static DbRelationshipNavigationExpression NavigateAllowingAllRelationshipsInSameTypeHierarchy(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    internal static DbPropertyExpression CreatePropertyExpressionFromMember(DbExpression instance, EdmMember member);
    private static TypeUsage CreateCollectionResultType(EdmType type);
    private static TypeUsage CreateCollectionResultType(TypeUsage elementType);
    private static bool IsConstantNegativeInteger(DbExpression expression);
}
[ExtensionAttribute]
public static class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions : object {
    private static EdmFunction ResolveCanonicalFunction(string functionName, TypeUsage[] argumentTypes);
    internal static DbFunctionExpression InvokeCanonicalFunction(string functionName, DbExpression[] arguments);
    [ExtensionAttribute]
public static DbFunctionExpression Average(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Count(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression LongCount(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Max(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Min(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Sum(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression StDev(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression StDevP(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Var(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression VarP(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Concat(DbExpression string1, DbExpression string2);
    [ExtensionAttribute]
public static DbExpression Contains(DbExpression searchedString, DbExpression searchedForString);
    [ExtensionAttribute]
public static DbFunctionExpression EndsWith(DbExpression stringArgument, DbExpression suffix);
    [ExtensionAttribute]
public static DbFunctionExpression IndexOf(DbExpression searchString, DbExpression stringToFind);
    [ExtensionAttribute]
public static DbFunctionExpression Left(DbExpression stringArgument, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression Length(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Replace(DbExpression stringArgument, DbExpression toReplace, DbExpression replacement);
    [ExtensionAttribute]
public static DbFunctionExpression Reverse(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Right(DbExpression stringArgument, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression StartsWith(DbExpression stringArgument, DbExpression prefix);
    [ExtensionAttribute]
public static DbFunctionExpression Substring(DbExpression stringArgument, DbExpression start, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression ToLower(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression ToUpper(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Trim(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression TrimEnd(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression TrimStart(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Year(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Month(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Day(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression DayOfYear(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Hour(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Minute(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Second(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Millisecond(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression GetTotalOffsetMinutes(DbExpression dateTimeOffsetArgument);
    [ExtensionAttribute]
public static DbFunctionExpression LocalDateTime(DbExpression dateTimeOffsetArgument);
    [ExtensionAttribute]
public static DbFunctionExpression UtcDateTime(DbExpression dateTimeOffsetArgument);
    public static DbFunctionExpression CurrentDateTime();
    public static DbFunctionExpression CurrentDateTimeOffset();
    public static DbFunctionExpression CurrentUtcDateTime();
    [ExtensionAttribute]
public static DbFunctionExpression TruncateTime(DbExpression dateValue);
    public static DbFunctionExpression CreateDateTime(DbExpression year, DbExpression month, DbExpression day, DbExpression hour, DbExpression minute, DbExpression second);
    public static DbFunctionExpression CreateDateTimeOffset(DbExpression year, DbExpression month, DbExpression day, DbExpression hour, DbExpression minute, DbExpression second, DbExpression timeZoneOffset);
    public static DbFunctionExpression CreateTime(DbExpression hour, DbExpression minute, DbExpression second);
    [ExtensionAttribute]
public static DbFunctionExpression AddYears(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMonths(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddDays(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddHours(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMinutes(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddSeconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMilliseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMicroseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddNanoseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression DiffYears(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMonths(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffDays(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffHours(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMinutes(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffSeconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMilliseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMicroseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffNanoseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression Round(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Round(DbExpression value, DbExpression digits);
    [ExtensionAttribute]
public static DbFunctionExpression Floor(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Ceiling(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Abs(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Truncate(DbExpression value, DbExpression digits);
    [ExtensionAttribute]
public static DbFunctionExpression Power(DbExpression baseArgument, DbExpression exponent);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseAnd(DbExpression value1, DbExpression value2);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseOr(DbExpression value1, DbExpression value2);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseNot(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseXor(DbExpression value1, DbExpression value2);
    public static DbFunctionExpression NewGuid();
}
[ExtensionAttribute]
public static class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Hierarchy.HierarchyIdEdmFunctions : object {
    public static DbFunctionExpression HierarchyIdParse(DbExpression input);
    public static DbFunctionExpression HierarchyIdGetRoot();
    [ExtensionAttribute]
public static DbFunctionExpression GetAncestor(DbExpression hierarchyIdValue, DbExpression n);
    [ExtensionAttribute]
public static DbFunctionExpression GetDescendant(DbExpression hierarchyIdValue, DbExpression child1, DbExpression child2);
    [ExtensionAttribute]
public static DbFunctionExpression GetLevel(DbExpression hierarchyIdValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsDescendantOf(DbExpression hierarchyIdValue, DbExpression parent);
    [ExtensionAttribute]
public static DbFunctionExpression GetReparentedValue(DbExpression hierarchyIdValue, DbExpression oldRoot, DbExpression newRoot);
}
internal static class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Internal.ArgumentValidation : object {
    internal static ReadOnlyCollection`1<TElement> NewReadOnlyCollection(IList`1<TElement> list);
    internal static void RequirePolymorphicType(TypeUsage type);
    internal static void RequireCompatibleType(DbExpression expression, TypeUsage requiredResultType, string argumentName);
    private static void RequireCompatibleType(DbExpression expression, TypeUsage requiredResultType, string argumentName, int argumentIndex);
    internal static void RequireCompatibleType(DbExpression expression, PrimitiveTypeKind requiredResultType, string argumentName);
    private static void RequireCompatibleType(DbExpression expression, PrimitiveTypeKind requiredResultType, string argumentName, int index);
    private static void RequireCompatibleType(DbExpression from, RelationshipEndMember end, bool allowAllRelationshipsInSameTypeHierarchy);
    internal static void RequireCollectionArgument(DbExpression argument);
    internal static TypeUsage RequireCollectionArguments(DbExpression left, DbExpression right);
    internal static TypeUsage RequireComparableCollectionArguments(DbExpression left, DbExpression right);
    private static EnumerableValidator`3<TElementIn, TElementOut, TResult> CreateValidator(IEnumerable`1<TElementIn> argument, string argumentName, Func`3<TElementIn, int, TElementOut> convertElement, Func`2<List`1<TElementOut>, TResult> createResult);
    internal static DbExpressionList CreateExpressionList(IEnumerable`1<DbExpression> arguments, string argumentName, Action`2<DbExpression, int> validationCallback);
    private static DbExpressionList CreateExpressionList(IEnumerable`1<DbExpression> arguments, string argumentName, bool allowEmpty, Action`2<DbExpression, int> validationCallback);
    private static DbExpressionList CreateExpressionList(IEnumerable`1<DbExpression> arguments, string argumentName, int expectedElementCount, Action`2<DbExpression, int> validationCallback);
    private static FunctionParameter[] GetExpectedParameters(EdmFunction function);
    internal static DbExpressionList ValidateFunctionAggregate(EdmFunction function, IEnumerable`1<DbExpression> args);
    internal static void ValidateSortClause(DbExpression key);
    internal static void ValidateSortClause(DbExpression key, string collation);
    internal static ReadOnlyCollection`1<DbVariableReferenceExpression> ValidateLambda(IEnumerable`1<DbVariableReferenceExpression> variables);
    internal static TypeUsage ValidateQuantifier(DbExpression predicate);
    internal static TypeUsage ValidateApply(DbExpressionBinding input, DbExpressionBinding apply);
    internal static ReadOnlyCollection`1<DbExpressionBinding> ValidateCrossJoin(IEnumerable`1<DbExpressionBinding> inputs, TypeUsage& resultType);
    internal static TypeUsage ValidateJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    internal static TypeUsage ValidateFilter(DbExpressionBinding input, DbExpression predicate);
    internal static TypeUsage ValidateGroupBy(IEnumerable`1<KeyValuePair`2<string, DbExpression>> keys, IEnumerable`1<KeyValuePair`2<string, DbAggregate>> aggregates, DbExpressionList& validKeys, ReadOnlyCollection`1& validAggregates);
    internal static ReadOnlyCollection`1<DbSortClause> ValidateSortArguments(IEnumerable`1<DbSortClause> sortOrder);
    internal static ReadOnlyCollection`1<DbSortClause> ValidateSort(IEnumerable`1<DbSortClause> sortOrder);
    internal static TypeUsage ValidateConstant(Type type);
    internal static TypeUsage ValidateConstant(object value);
    internal static void ValidateConstant(TypeUsage constantType, object value);
    internal static TypeUsage ValidateCreateRef(EntitySet entitySet, EntityType entityType, IEnumerable`1<DbExpression> keyValues, DbExpression& keyConstructor);
    internal static TypeUsage ValidateRefFromKey(EntitySet entitySet, DbExpression keyValues, EntityType entityType);
    internal static TypeUsage ValidateNavigate(DbExpression navigateFrom, RelationshipType type, string fromEndName, string toEndName, RelationshipEndMember& fromEnd, RelationshipEndMember& toEnd);
    internal static TypeUsage ValidateNavigate(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd, RelationshipType& relType, bool allowAllRelationshipsInSameTypeHierarchy);
    internal static TypeUsage ValidateElement(DbExpression argument);
    internal static TypeUsage ValidateCase(IEnumerable`1<DbExpression> whenExpressions, IEnumerable`1<DbExpression> thenExpressions, DbExpression elseExpression, DbExpressionList& validWhens, DbExpressionList& validThens);
    internal static TypeUsage ValidateFunction(EdmFunction function, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArgs);
    internal static TypeUsage ValidateInvoke(DbLambda lambda, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArguments);
    internal static TypeUsage ValidateNewEmptyCollection(TypeUsage collectionType, DbExpressionList& validElements);
    internal static TypeUsage ValidateNewRow(IEnumerable`1<KeyValuePair`2<string, DbExpression>> columnValues, DbExpressionList& validElements);
    internal static TypeUsage ValidateNew(TypeUsage instanceType, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArguments);
    private static List`1<TypeUsage> GetStructuralMemberTypes(TypeUsage instanceType);
    internal static TypeUsage ValidateNewEntityWithRelationships(EntityType entityType, IEnumerable`1<DbExpression> attributeValues, IList`1<DbRelatedEntityRef> relationships, DbExpressionList& validArguments, ReadOnlyCollection`1& validRelatedRefs);
    internal static TypeUsage ValidateProperty(DbExpression instance, string propertyName, bool ignoreCase, EdmMember& foundMember);
    private static void CheckNamed(KeyValuePair`2<string, T> element, string argumentName, int index);
    private static void CheckReadOnly(GlobalItem item, string varName);
    private static void CheckReadOnly(TypeUsage item, string varName);
    private static void CheckReadOnly(EntitySetBase item, string varName);
    private static void CheckType(EdmType type);
    private static void CheckType(EdmType type, string argumentName);
    internal static void CheckType(TypeUsage type);
    internal static void CheckType(TypeUsage type, string varName);
    internal static void CheckMember(EdmMember memberMeta, string varName);
    private static void CheckParameter(FunctionParameter paramMeta, string varName);
    private static void CheckFunction(EdmFunction function);
    internal static void CheckEntitySet(EntitySetBase entitySet, string varName);
    private static bool CheckDataSpace(TypeUsage type);
    private static bool CheckDataSpace(GlobalItem item);
    internal static TypeUsage CreateCollectionOfRowResultType(List`1<KeyValuePair`2<string, TypeUsage>> columns);
    private static TypeUsage CreateResultType(EdmType resultType);
    private static TypeUsage CreateResultType(RelationshipEndMember end);
    internal static TypeUsage CreateReferenceResultType(EntityTypeBase referencedEntityType);
    private static bool TryGetPrimitiveTypeKind(Type clrType, PrimitiveTypeKind& primitiveTypeKind);
    private static bool ClrEdmEnumTypesMatch(EnumType edmEnumType, Type clrEnumType);
}
internal class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Internal.EnumerableValidator`3 : object {
    private string argumentName;
    private IEnumerable`1<TElementIn> target;
    private int expectedElementCount;
    [CompilerGeneratedAttribute]
private bool <AllowEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<TElementIn, int, TElementOut> <ConvertElement>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<List`1<TElementOut>, TResult> <CreateResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<TElementIn, int, string> <GetName>k__BackingField;
    public bool AllowEmpty { get; public set; }
    public int ExpectedElementCount { get; public set; }
    public Func`3<TElementIn, int, TElementOut> ConvertElement { get; public set; }
    public Func`2<List`1<TElementOut>, TResult> CreateResult { get; public set; }
    public Func`3<TElementIn, int, string> GetName { get; public set; }
    internal EnumerableValidator`3(IEnumerable`1<TElementIn> argument, string argumentName);
    [CompilerGeneratedAttribute]
public bool get_AllowEmpty();
    [CompilerGeneratedAttribute]
public void set_AllowEmpty(bool value);
    public int get_ExpectedElementCount();
    public void set_ExpectedElementCount(int value);
    [CompilerGeneratedAttribute]
public Func`3<TElementIn, int, TElementOut> get_ConvertElement();
    [CompilerGeneratedAttribute]
public void set_ConvertElement(Func`3<TElementIn, int, TElementOut> value);
    [CompilerGeneratedAttribute]
public Func`2<List`1<TElementOut>, TResult> get_CreateResult();
    [CompilerGeneratedAttribute]
public void set_CreateResult(Func`2<List`1<TElementOut>, TResult> value);
    [CompilerGeneratedAttribute]
public Func`3<TElementIn, int, string> get_GetName();
    [CompilerGeneratedAttribute]
public void set_GetName(Func`3<TElementIn, int, string> value);
    internal TResult Validate();
    private static TResult Validate(IEnumerable`1<TElementIn> argument, string argumentName, int expectedElementCount, bool allowEmpty, Func`3<TElementIn, int, TElementOut> map, Func`2<List`1<TElementOut>, TResult> collect, Func`3<TElementIn, int, string> deriveName);
}
public class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row : object {
    private ReadOnlyCollection`1<KeyValuePair`2<string, DbExpression>> arguments;
    public Row(KeyValuePair`2<string, DbExpression> columnValue, KeyValuePair`2[] columnValues);
    public DbNewInstanceExpression ToExpression();
    public static DbExpression op_Implicit(Row row);
}
[ExtensionAttribute]
public static class System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions : object {
    public static DbFunctionExpression GeometryFromText(DbExpression wellKnownText);
    public static DbFunctionExpression GeometryFromText(DbExpression wellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPointFromText(DbExpression pointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryLineFromText(DbExpression lineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPolygonFromText(DbExpression polygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPointFromText(DbExpression multiPointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiLineFromText(DbExpression multiLineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPolygonFromText(DbExpression multiPolygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryCollectionFromText(DbExpression geometryCollectionWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryFromBinary(DbExpression wellKnownBinaryValue);
    public static DbFunctionExpression GeometryFromBinary(DbExpression wellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPointFromBinary(DbExpression pointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryLineFromBinary(DbExpression lineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPolygonFromBinary(DbExpression polygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPointFromBinary(DbExpression multiPointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiLineFromBinary(DbExpression multiLineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPolygonFromBinary(DbExpression multiPolygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryCollectionFromBinary(DbExpression geometryCollectionWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryFromGml(DbExpression geometryMarkup);
    public static DbFunctionExpression GeometryFromGml(DbExpression geometryMarkup, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromText(DbExpression wellKnownText);
    public static DbFunctionExpression GeographyFromText(DbExpression wellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPointFromText(DbExpression pointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyLineFromText(DbExpression lineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPolygonFromText(DbExpression polygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPointFromText(DbExpression multiPointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiLineFromText(DbExpression multiLineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPolygonFromText(DbExpression multiPolygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyCollectionFromText(DbExpression geographyCollectionWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromBinary(DbExpression wellKnownBinaryValue);
    public static DbFunctionExpression GeographyFromBinary(DbExpression wellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPointFromBinary(DbExpression pointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyLineFromBinary(DbExpression lineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPolygonFromBinary(DbExpression polygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPointFromBinary(DbExpression multiPointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiLineFromBinary(DbExpression multiLineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPolygonFromBinary(DbExpression multiPolygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyCollectionFromBinary(DbExpression geographyCollectionWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromGml(DbExpression geographyMarkup);
    public static DbFunctionExpression GeographyFromGml(DbExpression geographyMarkup, DbExpression coordinateSystemId);
    [ExtensionAttribute]
public static DbFunctionExpression CoordinateSystemId(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialTypeName(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDimension(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialEnvelope(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsBinary(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsGml(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsText(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsEmptySpatial(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsSimpleGeometry(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialBoundary(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsValidGeometry(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialEquals(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDisjoint(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialIntersects(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialTouches(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialCrosses(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialWithin(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialContains(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialOverlaps(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialRelate(DbExpression geometryValue1, DbExpression geometryValue2, DbExpression intersectionPatternMatrix);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialBuffer(DbExpression spatialValue, DbExpression distance);
    [ExtensionAttribute]
public static DbFunctionExpression Distance(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialConvexHull(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialIntersection(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialUnion(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDifference(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialSymmetricDifference(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialElementCount(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialElementAt(DbExpression spatialValue, DbExpression indexValue);
    [ExtensionAttribute]
public static DbFunctionExpression XCoordinate(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression YCoordinate(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression Elevation(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Measure(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Latitude(DbExpression geographyValue);
    [ExtensionAttribute]
public static DbFunctionExpression Longitude(DbExpression geographyValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialLength(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression StartPoint(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression EndPoint(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsClosedSpatial(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsRing(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointCount(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointAt(DbExpression spatialValue, DbExpression indexValue);
    [ExtensionAttribute]
public static DbFunctionExpression Area(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Centroid(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointOnSurface(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression ExteriorRing(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression InteriorRingCount(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression InteriorRingAt(DbExpression geometryValue, DbExpression indexValue);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.DbExpressionList : ReadOnlyCollection`1<DbExpression> {
    internal DbExpressionList(IList`1<DbExpression> elements);
}
internal abstract class System.Data.Entity.Core.Common.CommandTrees.Internal.DbExpressionRule : object {
    internal ProcessedAction OnExpressionProcessed { get; }
    internal abstract virtual bool ShouldProcess(DbExpression expression);
    internal abstract virtual bool TryProcess(DbExpression expression, DbExpression& result);
    internal abstract virtual ProcessedAction get_OnExpressionProcessed();
}
internal abstract class System.Data.Entity.Core.Common.CommandTrees.Internal.DbExpressionRuleProcessingVisitor : DefaultExpressionVisitor {
    private bool _stopped;
    protected abstract virtual IEnumerable`1<DbExpressionRule> GetRules();
    private static Tuple`2<DbExpression, ProcessedAction> ProcessRules(DbExpression expression, List`1<DbExpressionRule> rules);
    private DbExpression ApplyRules(DbExpression expression);
    protected virtual DbExpression VisitExpression(DbExpression expression);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.DbExpressionValidator : DbExpressionRebinder {
    private DataSpace requiredSpace;
    private DataSpace[] allowedMetadataSpaces;
    private DataSpace[] allowedFunctionSpaces;
    private Dictionary`2<string, DbParameterReferenceExpression> paramMappings;
    private Stack`1<Dictionary`2<string, TypeUsage>> variableScopes;
    private string expressionArgumentName;
    internal Dictionary`2<string, DbParameterReferenceExpression> Parameters { get; }
    internal DbExpressionValidator(MetadataWorkspace metadata, DataSpace expectedDataSpace);
    internal Dictionary`2<string, DbParameterReferenceExpression> get_Parameters();
    internal void ValidateExpression(DbExpression expression, string argumentName);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction function);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    protected virtual void OnEnterScope(IEnumerable`1<DbVariableReferenceExpression> scopeVariables);
    protected virtual void OnExitScope();
    public virtual DbExpression Visit(DbVariableReferenceExpression expression);
    public virtual DbExpression Visit(DbParameterReferenceExpression expression);
    private TMetadata ValidateMetadata(TMetadata metadata, Func`2<TMetadata, TMetadata> map, Func`2<TMetadata, DataSpace> getDataSpace, DataSpace[] allowedSpaces);
    private void ThrowInvalidMetadata();
    private void ThrowInvalidSpace();
    private void ThrowInvalid(string message);
}
internal abstract class System.Data.Entity.Core.Common.CommandTrees.Internal.ExpressionDumper : DbExpressionVisitor {
    internal void Begin(string name);
    internal abstract virtual void Begin(string name, Dictionary`2<string, object> attrs);
    internal abstract virtual void End(string name);
    internal void Dump(DbExpression target);
    internal void Dump(DbExpression e, string name);
    internal void Dump(DbExpressionBinding binding, string name);
    internal void Dump(DbExpressionBinding binding);
    internal void Dump(DbGroupExpressionBinding binding, string name);
    internal void Dump(DbGroupExpressionBinding binding);
    internal void Dump(IEnumerable`1<DbExpression> exprs, string pluralName, string singularName);
    internal void Dump(IEnumerable`1<FunctionParameter> paramList);
    internal void Dump(TypeUsage type, string name);
    internal void Dump(TypeUsage type);
    internal void Dump(EdmType type, string name);
    internal void Dump(EdmType type);
    internal void Dump(RelationshipType type, string name);
    internal void Dump(RelationshipType type);
    internal void Dump(EdmFunction function);
    internal void Dump(EdmProperty prop);
    internal void Dump(RelationshipEndMember end, string name);
    internal void Dump(NavigationProperty navProp, string name);
    internal void Dump(DbLambda lambda);
    private void Begin(DbExpression expr);
    private void Begin(DbExpression expr, Dictionary`2<string, object> attrs);
    private void Begin(DbExpression expr, string attributeName, object attributeValue);
    private void Begin(string expr, string attributeName, object attributeValue);
    private void Begin(string expr, string attributeName1, object attributeValue1, string attributeName2, object attributeValue2);
    private void Begin(string expr, string attributeName1, object attributeValue1, string attributeName2, object attributeValue2, string attributeName3, object attributeValue3);
    private void End(DbExpression expr);
    private void BeginUnary(DbUnaryExpression e);
    private void BeginBinary(DbBinaryExpression e);
    public virtual void Visit(DbExpression e);
    public virtual void Visit(DbConstantExpression e);
    public virtual void Visit(DbNullExpression e);
    public virtual void Visit(DbVariableReferenceExpression e);
    public virtual void Visit(DbParameterReferenceExpression e);
    public virtual void Visit(DbFunctionExpression e);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression e);
    public virtual void Visit(DbComparisonExpression e);
    public virtual void Visit(DbLikeExpression e);
    public virtual void Visit(DbLimitExpression e);
    public virtual void Visit(DbIsNullExpression e);
    public virtual void Visit(DbArithmeticExpression e);
    public virtual void Visit(DbAndExpression e);
    public virtual void Visit(DbOrExpression e);
    public virtual void Visit(DbInExpression e);
    public virtual void Visit(DbNotExpression e);
    public virtual void Visit(DbDistinctExpression e);
    public virtual void Visit(DbElementExpression e);
    public virtual void Visit(DbIsEmptyExpression e);
    public virtual void Visit(DbUnionAllExpression e);
    public virtual void Visit(DbIntersectExpression e);
    public virtual void Visit(DbExceptExpression e);
    public virtual void Visit(DbTreatExpression e);
    public virtual void Visit(DbIsOfExpression e);
    public virtual void Visit(DbCastExpression e);
    public virtual void Visit(DbCaseExpression e);
    public virtual void Visit(DbOfTypeExpression e);
    public virtual void Visit(DbNewInstanceExpression e);
    public virtual void Visit(DbRelationshipNavigationExpression e);
    public virtual void Visit(DbRefExpression e);
    public virtual void Visit(DbDerefExpression e);
    public virtual void Visit(DbRefKeyExpression e);
    public virtual void Visit(DbEntityRefExpression e);
    public virtual void Visit(DbScanExpression e);
    public virtual void Visit(DbFilterExpression e);
    public virtual void Visit(DbProjectExpression e);
    public virtual void Visit(DbCrossJoinExpression e);
    public virtual void Visit(DbJoinExpression e);
    public virtual void Visit(DbApplyExpression e);
    public virtual void Visit(DbGroupByExpression e);
    protected virtual void Dump(IList`1<DbSortClause> sortOrder);
    public virtual void Visit(DbSkipExpression e);
    public virtual void Visit(DbSortExpression e);
    public virtual void Visit(DbQuantifierExpression e);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.ExpressionKeyGen : DbExpressionVisitor {
    private StringBuilder _key;
    private static String[] _exprKindNames;
    internal string Key { get; }
    private static ExpressionKeyGen();
    internal static bool TryGenerateKey(DbExpression tree, String& key);
    private static String[] InitializeExprKindNames();
    internal string get_Key();
    private void VisitVariableName(string varName);
    private void VisitBinding(DbExpressionBinding binding);
    private void VisitGroupBinding(DbGroupExpressionBinding groupBinding);
    private void VisitFunction(EdmFunction func, IList`1<DbExpression> args);
    private void VisitExprKind(DbExpressionKind kind);
    private void VisitUnary(DbUnaryExpression expr);
    private void VisitBinary(DbBinaryExpression expr);
    private void VisitCastOrTreat(DbUnaryExpression e);
    public virtual void Visit(DbExpression e);
    public virtual void Visit(DbConstantExpression e);
    public virtual void Visit(DbNullExpression e);
    public virtual void Visit(DbVariableReferenceExpression e);
    public virtual void Visit(DbParameterReferenceExpression e);
    public virtual void Visit(DbFunctionExpression e);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression e);
    public virtual void Visit(DbComparisonExpression e);
    public virtual void Visit(DbLikeExpression e);
    public virtual void Visit(DbLimitExpression e);
    public virtual void Visit(DbIsNullExpression e);
    public virtual void Visit(DbArithmeticExpression e);
    public virtual void Visit(DbAndExpression e);
    public virtual void Visit(DbOrExpression e);
    public virtual void Visit(DbInExpression e);
    public virtual void Visit(DbNotExpression e);
    public virtual void Visit(DbDistinctExpression e);
    public virtual void Visit(DbElementExpression e);
    public virtual void Visit(DbIsEmptyExpression e);
    public virtual void Visit(DbUnionAllExpression e);
    public virtual void Visit(DbIntersectExpression e);
    public virtual void Visit(DbExceptExpression e);
    public virtual void Visit(DbTreatExpression e);
    public virtual void Visit(DbCastExpression e);
    public virtual void Visit(DbIsOfExpression e);
    public virtual void Visit(DbOfTypeExpression e);
    public virtual void Visit(DbCaseExpression e);
    public virtual void Visit(DbNewInstanceExpression e);
    public virtual void Visit(DbRefExpression e);
    public virtual void Visit(DbRelationshipNavigationExpression e);
    public virtual void Visit(DbDerefExpression e);
    public virtual void Visit(DbRefKeyExpression e);
    public virtual void Visit(DbEntityRefExpression e);
    public virtual void Visit(DbScanExpression e);
    public virtual void Visit(DbFilterExpression e);
    public virtual void Visit(DbProjectExpression e);
    public virtual void Visit(DbCrossJoinExpression e);
    public virtual void Visit(DbJoinExpression e);
    public virtual void Visit(DbApplyExpression e);
    public virtual void Visit(DbGroupByExpression e);
    private void VisitSortOrder(IList`1<DbSortClause> sortOrder);
    public virtual void Visit(DbSkipExpression e);
    public virtual void Visit(DbSortExpression e);
    public virtual void Visit(DbQuantifierExpression e);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.ExpressionPrinter : TreePrinter {
    private PrinterVisitor _visitor;
    internal string Print(DbDeleteCommandTree tree);
    internal string Print(DbFunctionCommandTree tree);
    internal string Print(DbInsertCommandTree tree);
    internal string Print(DbUpdateCommandTree tree);
    internal string Print(DbQueryCommandTree tree);
    private static TreeNode CreateParametersNode(DbCommandTree tree);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.ParameterRetriever : BasicCommandTreeVisitor {
    private Dictionary`2<string, DbParameterReferenceExpression> paramMappings;
    internal static ReadOnlyCollection`1<DbParameterReferenceExpression> GetParameters(DbCommandTree tree);
    public virtual void Visit(DbParameterReferenceExpression expression);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.PatternMatchRule : DbExpressionRule {
    private Func`2<DbExpression, bool> isMatch;
    private Func`2<DbExpression, DbExpression> process;
    private ProcessedAction processed;
    internal ProcessedAction OnExpressionProcessed { get; }
    private PatternMatchRule(Func`2<DbExpression, bool> matchFunc, Func`2<DbExpression, DbExpression> processor, ProcessedAction onProcessed);
    internal virtual bool ShouldProcess(DbExpression expression);
    internal virtual bool TryProcess(DbExpression expression, DbExpression& result);
    internal virtual ProcessedAction get_OnExpressionProcessed();
    internal static PatternMatchRule Create(Func`2<DbExpression, bool> matchFunc, Func`2<DbExpression, DbExpression> processor);
    internal static PatternMatchRule Create(Func`2<DbExpression, bool> matchFunc, Func`2<DbExpression, DbExpression> processor, ProcessedAction onProcessed);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.PatternMatchRuleProcessor : DbExpressionRuleProcessingVisitor {
    private ReadOnlyCollection`1<PatternMatchRule> ruleSet;
    private PatternMatchRuleProcessor(ReadOnlyCollection`1<PatternMatchRule> rules);
    private DbExpression Process(DbExpression expression);
    protected virtual IEnumerable`1<DbExpressionRule> GetRules();
    internal static Func`2<DbExpression, DbExpression> Create(PatternMatchRule[] rules);
}
internal static class System.Data.Entity.Core.Common.CommandTrees.Internal.Patterns : object {
    internal static Func`2<DbExpression, bool> AnyExpression { get; }
    internal static Func`2<IEnumerable`1<DbExpression>, bool> AnyExpressions { get; }
    internal static Func`2<DbExpression, bool> MatchComplexType { get; }
    internal static Func`2<DbExpression, bool> MatchEntityType { get; }
    internal static Func`2<DbExpression, bool> MatchRowType { get; }
    internal static Func`2<DbExpression, bool> And(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2);
    internal static Func`2<DbExpression, bool> And(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2, Func`2<DbExpression, bool> pattern3);
    internal static Func`2<DbExpression, bool> Or(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2);
    internal static Func`2<DbExpression, bool> Or(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2, Func`2<DbExpression, bool> pattern3);
    internal static Func`2<DbExpression, bool> get_AnyExpression();
    internal static Func`2<IEnumerable`1<DbExpression>, bool> get_AnyExpressions();
    internal static Func`2<DbExpression, bool> get_MatchComplexType();
    internal static Func`2<DbExpression, bool> get_MatchEntityType();
    internal static Func`2<DbExpression, bool> get_MatchRowType();
    internal static Func`2<DbExpression, bool> MatchKind(DbExpressionKind kindToMatch);
    internal static Func`2<IEnumerable`1<DbExpression>, bool> MatchForAll(Func`2<DbExpression, bool> elementPattern);
    internal static Func`2<DbExpression, bool> MatchBinary();
    internal static Func`2<DbExpression, bool> MatchFilter(Func`2<DbExpression, bool> inputPattern, Func`2<DbExpression, bool> predicatePattern);
    internal static Func`2<DbExpression, bool> MatchProject(Func`2<DbExpression, bool> inputPattern, Func`2<DbExpression, bool> projectionPattern);
    internal static Func`2<DbExpression, bool> MatchCase(Func`2<IEnumerable`1<DbExpression>, bool> whenPattern, Func`2<IEnumerable`1<DbExpression>, bool> thenPattern, Func`2<DbExpression, bool> elsePattern);
    internal static Func`2<DbExpression, bool> MatchNewInstance();
    internal static Func`2<DbExpression, bool> MatchNewInstance(Func`2<IEnumerable`1<DbExpression>, bool> argumentsPattern);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.ViewSimplifier : object {
    private EntitySetBase extent;
    private static Func`2<DbExpression, bool> _patternEntityConstructor;
    private bool doNotProcess;
    private static Func`2<DbExpression, bool> _patternNestedTphDiscriminator;
    private static Func`2<DbExpression, bool> _patternCase;
    private static Func`2<DbExpression, bool> _patternCollapseNestedProjection;
    private ViewSimplifier(EntitySetBase viewTarget);
    private static ViewSimplifier();
    internal static DbQueryCommandTree SimplifyView(EntitySetBase extent, DbQueryCommandTree view);
    private DbQueryCommandTree Simplify(DbQueryCommandTree view);
    private DbExpression AddFkRelatedEntityRefs(DbExpression viewConstructor);
    private static DbRelatedEntityRef RelatedEntityRefFromAssociationSetEnd(EntityType constructedEntityType, DbNewInstanceExpression entityConstructor, AssociationSetEnd principalSetEnd, ReferentialConstraint fkConstraint);
    private static DbExpression SimplifyNestedTphDiscriminator(DbExpression expression);
    private static DbExpression SimplifyCaseStatement(DbExpression expression);
    private static bool TrySimplifyPredicate(DbExpression predicate, DbExpression& simplified);
    private static DbExpression CollapseNestedProjection(DbExpression expression);
    internal static IEnumerable`1<DbExpression> FlattenOr(DbExpression expression);
    internal static bool TryMatchDiscriminatorPredicate(DbFilterExpression filter, Action`2<DbComparisonExpression, object> onMatchedComparison);
    internal static bool TryMatchPropertyEqualsValue(DbExpression expression, string propertyVariable, DbPropertyExpression& property, Object& value);
    private static bool TryMatchConstant(DbExpression expression, Object& value);
}
internal class System.Data.Entity.Core.Common.CommandTrees.Internal.XmlExpressionDumper : ExpressionDumper {
    private XmlWriter _writer;
    internal static Encoding DefaultEncoding { get; }
    internal XmlExpressionDumper(Stream stream);
    internal XmlExpressionDumper(Stream stream, Encoding encoding);
    internal static Encoding get_DefaultEncoding();
    internal void Close();
    internal virtual void Begin(string name, Dictionary`2<string, object> attrs);
    internal virtual void End(string name);
}
public class System.Data.Entity.Core.Common.DataRecordInfo : object {
    private ReadOnlyCollection`1<FieldMetadata> _fieldMetadata;
    private TypeUsage _metadata;
    public ReadOnlyCollection`1<FieldMetadata> FieldMetadata { get; }
    public TypeUsage RecordType { get; }
    public DataRecordInfo(TypeUsage metadata, IEnumerable`1<EdmMember> memberInfo);
    internal DataRecordInfo(TypeUsage metadata);
    internal DataRecordInfo(DataRecordInfo recordInfo);
    public ReadOnlyCollection`1<FieldMetadata> get_FieldMetadata();
    public virtual TypeUsage get_RecordType();
}
public class System.Data.Entity.Core.Common.DbCommandDefinition : object {
    private DbCommand _prototype;
    private Func`2<DbCommand, DbCommand> _cloneMethod;
    protected internal DbCommandDefinition(DbCommand prototype, Func`2<DbCommand, DbCommand> cloneMethod);
    public virtual DbCommand CreateCommand();
    internal static void PopulateParameterFromTypeUsage(DbParameter parameter, TypeUsage type, bool isOutParam);
    internal static bool TryGetDbTypeFromPrimitiveType(PrimitiveType type, DbType& dbType);
    private static void PopulateBinaryParameter(DbParameter parameter, TypeUsage type, DbType dbType, bool isOutParam);
    private static void PopulateDecimalParameter(DbParameter parameter, TypeUsage type, DbType dbType);
    private static void PopulateDateTimeParameter(DbParameter parameter, TypeUsage type, DbType dbType);
    private static void PopulateStringParameter(DbParameter parameter, TypeUsage type, bool isOutParam);
    private static void SetParameterSize(DbParameter parameter, TypeUsage type, bool isOutParam);
}
public abstract class System.Data.Entity.Core.Common.DbProviderManifest : object {
    public static string StoreSchemaDefinition;
    public static string StoreSchemaMapping;
    public static string ConceptualSchemaDefinition;
    public static string StoreSchemaDefinitionVersion3;
    public static string StoreSchemaMappingVersion3;
    public static string ConceptualSchemaDefinitionVersion3;
    public static string MaxLengthFacetName;
    public static string UnicodeFacetName;
    public static string FixedLengthFacetName;
    public static string PrecisionFacetName;
    public static string ScaleFacetName;
    public static string NullableFacetName;
    public static string DefaultValueFacetName;
    public static string CollationFacetName;
    public static string SridFacetName;
    public static string IsStrictFacetName;
    public string NamespaceName { get; }
    public abstract virtual string get_NamespaceName();
    public abstract virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public abstract virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public abstract virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType edmType);
    public abstract virtual TypeUsage GetEdmType(TypeUsage storeType);
    public abstract virtual TypeUsage GetStoreType(TypeUsage edmType);
    protected abstract virtual XmlReader GetDbInformation(string informationType);
    public XmlReader GetInformation(string informationType);
    public virtual bool SupportsEscapingLikeArgument(Char& escapeCharacter);
    public virtual bool SupportsParameterOptimizationInSchemaQueries();
    public virtual string EscapeLikeArgument(string argument);
    public virtual bool SupportsInExpression();
    public virtual bool SupportsIntersectAndUnionAllFlattening();
}
public abstract class System.Data.Entity.Core.Common.DbProviderServices : object {
    private Lazy`1<IDbDependencyResolver> _resolver;
    private Lazy`1<DbCommandTreeDispatcher> _treeDispatcher;
    private static ConcurrentDictionary`2<DbProviderInfo, DbSpatialServices> _spatialServices;
    private static ConcurrentDictionary`2<ExecutionStrategyKey, Func`1<IDbExecutionStrategy>> _executionStrategyFactories;
    private ResolverChain _resolvers;
    internal DbProviderServices(Func`1<IDbDependencyResolver> resolver);
    internal DbProviderServices(Func`1<IDbDependencyResolver> resolver, Lazy`1<DbCommandTreeDispatcher> treeDispatcher);
    private static DbProviderServices();
    public virtual void RegisterInfoMessageHandler(DbConnection connection, Action`1<string> handler);
    public DbCommandDefinition CreateCommandDefinition(DbCommandTree commandTree);
    internal DbCommandDefinition CreateCommandDefinition(DbCommandTree commandTree, DbInterceptionContext interceptionContext);
    internal virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree, DbInterceptionContext interceptionContext);
    public DbCommandDefinition CreateCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    protected abstract virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    internal virtual void ValidateDataSpace(DbCommandTree commandTree);
    internal virtual DbCommand CreateCommand(DbCommandTree commandTree, DbInterceptionContext interceptionContext);
    public virtual DbCommandDefinition CreateCommandDefinition(DbCommand prototype);
    protected virtual DbCommand CloneDbCommand(DbCommand fromDbCommand);
    public virtual DbConnection CloneDbConnection(DbConnection connection);
    public virtual DbConnection CloneDbConnection(DbConnection connection, DbProviderFactory factory);
    public string GetProviderManifestToken(DbConnection connection);
    protected abstract virtual string GetDbProviderManifestToken(DbConnection connection);
    public DbProviderManifest GetProviderManifest(string manifestToken);
    protected abstract virtual DbProviderManifest GetDbProviderManifest(string manifestToken);
    public static IDbExecutionStrategy GetExecutionStrategy(DbConnection connection);
    internal static IDbExecutionStrategy GetExecutionStrategy(DbConnection connection, MetadataWorkspace metadataWorkspace);
    protected static IDbExecutionStrategy GetExecutionStrategy(DbConnection connection, string providerInvariantName);
    private static IDbExecutionStrategy GetExecutionStrategy(DbConnection connection, DbProviderFactory providerFactory, string providerInvariantName);
    public DbSpatialDataReader GetSpatialDataReader(DbDataReader fromReader, string manifestToken);
    [ObsoleteAttribute("Use GetSpatialServices(DbProviderInfo) or DbConfiguration to ensure the configured spatial services are used. See http://go.microsoft.com/fwlink/?LinkId=260882 for more information.")]
public DbSpatialServices GetSpatialServices(string manifestToken);
    internal static DbSpatialServices GetSpatialServices(IDbDependencyResolver resolver, EntityConnection connection);
    public DbSpatialServices GetSpatialServices(DbProviderInfo key);
    private static DbSpatialServices GetSpatialServices(IDbDependencyResolver resolver, DbProviderInfo key, Func`1<DbProviderServices> providerServices);
    protected virtual DbSpatialDataReader GetDbSpatialDataReader(DbDataReader fromReader, string manifestToken);
    [ObsoleteAttribute("Return DbSpatialServices from the GetService method. See http://go.microsoft.com/fwlink/?LinkId=260882 for more information.")]
protected virtual DbSpatialServices DbGetSpatialServices(string manifestToken);
    public void SetParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    protected virtual void SetDbParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    public static DbProviderServices GetProviderServices(DbConnection connection);
    public static DbProviderFactory GetProviderFactory(DbConnection connection);
    public static XmlReader GetConceptualSchemaDefinition(string csdlName);
    internal static XmlReader GetXmlResource(string resourceName);
    public string CreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    protected virtual string DbCreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    public void CreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual void DbCreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    public bool DatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    public bool DatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, Lazy`1<StoreItemCollection> storeItemCollection);
    protected virtual bool DbDatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual bool DbDatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, Lazy`1<StoreItemCollection> storeItemCollection);
    public void DeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual void DbDeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    public static string ExpandDataDirectory(string path);
    protected void AddDependencyResolver(IDbDependencyResolver resolver);
    public virtual object GetService(Type type, object key);
    public virtual IEnumerable`1<object> GetServices(Type type, object key);
    [CompilerGeneratedAttribute]
private DbProviderServices <GetSpatialServices>b__31_0();
}
public abstract class System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest : DbProviderManifest {
    private string _namespaceName;
    private ReadOnlyCollection`1<PrimitiveType> _primitiveTypes;
    private Dictionary`2<PrimitiveType, ReadOnlyCollection`1<FacetDescription>> _facetDescriptions;
    private ReadOnlyCollection`1<EdmFunction> _functions;
    private Dictionary`2<string, PrimitiveType> _storeTypeNameToEdmPrimitiveType;
    private Dictionary`2<string, PrimitiveType> _storeTypeNameToStorePrimitiveType;
    public string NamespaceName { get; }
    protected Dictionary`2<string, PrimitiveType> StoreTypeNameToEdmPrimitiveType { get; }
    protected Dictionary`2<string, PrimitiveType> StoreTypeNameToStorePrimitiveType { get; }
    protected DbXmlEnabledProviderManifest(XmlReader reader);
    public virtual string get_NamespaceName();
    protected Dictionary`2<string, PrimitiveType> get_StoreTypeNameToEdmPrimitiveType();
    protected Dictionary`2<string, PrimitiveType> get_StoreTypeNameToStorePrimitiveType();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType edmType);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    private void Load(XmlReader reader);
    private static ReadOnlyCollection`1<T> GetReadOnlyCollection(PrimitiveType type, Dictionary`2<PrimitiveType, ReadOnlyCollection`1<T>> typeDictionary, ReadOnlyCollection`1<T> useIfEmpty);
    private static bool EnumerableToReadOnlyCollection(IEnumerable`1<BaseType> enumerable, ReadOnlyCollection`1& collection);
}
public class System.Data.Entity.Core.Common.EntityRecordInfo : DataRecordInfo {
    private EntityKey _entityKey;
    public EntityKey EntityKey { get; }
    public EntityRecordInfo(EntityType metadata, IEnumerable`1<EdmMember> memberInfo, EntityKey entityKey, EntitySet entitySet);
    internal EntityRecordInfo(EntityType metadata, EntityKey entityKey, EntitySet entitySet);
    internal EntityRecordInfo(DataRecordInfo info, EntityKey entityKey, EntitySet entitySet);
    public EntityKey get_EntityKey();
    private void ValidateEntityType(EntitySetBase entitySet);
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.AliasedExpr : Node {
    private Node _expr;
    private Identifier _alias;
    internal Node Expr { get; }
    internal Identifier Alias { get; }
    internal AliasedExpr(Node expr, Identifier alias);
    internal AliasedExpr(Node expr);
    internal Node get_Expr();
    internal Identifier get_Alias();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.ApplyClauseItem : Node {
    private FromClauseItem _applyLeft;
    private FromClauseItem _applyRight;
    private ApplyKind _applyKind;
    internal FromClauseItem LeftExpr { get; }
    internal FromClauseItem RightExpr { get; }
    internal ApplyKind ApplyKind { get; }
    internal ApplyClauseItem(FromClauseItem applyLeft, FromClauseItem applyRight, ApplyKind applyKind);
    internal FromClauseItem get_LeftExpr();
    internal FromClauseItem get_RightExpr();
    internal ApplyKind get_ApplyKind();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.ApplyKind : Enum {
    public int value__;
    public static ApplyKind Cross;
    public static ApplyKind Outer;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.BuiltInExpr : Node {
    internal BuiltInKind Kind;
    internal string Name;
    internal int ArgCount;
    internal Node Arg1;
    internal Node Arg2;
    internal Node Arg3;
    internal Node Arg4;
    private BuiltInExpr(BuiltInKind kind, string name);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2, Node arg3);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2, Node arg3, Node arg4);
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.BuiltInKind : Enum {
    public int value__;
    public static BuiltInKind And;
    public static BuiltInKind Or;
    public static BuiltInKind Not;
    public static BuiltInKind Cast;
    public static BuiltInKind OfType;
    public static BuiltInKind Treat;
    public static BuiltInKind IsOf;
    public static BuiltInKind Union;
    public static BuiltInKind UnionAll;
    public static BuiltInKind Intersect;
    public static BuiltInKind Overlaps;
    public static BuiltInKind AnyElement;
    public static BuiltInKind Element;
    public static BuiltInKind Except;
    public static BuiltInKind Exists;
    public static BuiltInKind Flatten;
    public static BuiltInKind In;
    public static BuiltInKind NotIn;
    public static BuiltInKind Distinct;
    public static BuiltInKind IsNull;
    public static BuiltInKind IsNotNull;
    public static BuiltInKind Like;
    public static BuiltInKind Equal;
    public static BuiltInKind NotEqual;
    public static BuiltInKind LessEqual;
    public static BuiltInKind LessThan;
    public static BuiltInKind GreaterThan;
    public static BuiltInKind GreaterEqual;
    public static BuiltInKind Plus;
    public static BuiltInKind Minus;
    public static BuiltInKind Multiply;
    public static BuiltInKind Divide;
    public static BuiltInKind Modulus;
    public static BuiltInKind UnaryMinus;
    public static BuiltInKind UnaryPlus;
    public static BuiltInKind Between;
    public static BuiltInKind NotBetween;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.CaseExpr : Node {
    private NodeList`1<WhenThenExpr> _whenThenExpr;
    private Node _elseExpr;
    internal NodeList`1<WhenThenExpr> WhenThenExprList { get; }
    internal Node ElseExpr { get; }
    internal CaseExpr(NodeList`1<WhenThenExpr> whenThenExpr);
    internal CaseExpr(NodeList`1<WhenThenExpr> whenThenExpr, Node elseExpr);
    internal NodeList`1<WhenThenExpr> get_WhenThenExprList();
    internal Node get_ElseExpr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.CollectionTypeDefinition : Node {
    private Node _elementTypeDef;
    internal Node ElementTypeDef { get; }
    internal CollectionTypeDefinition(Node elementTypeDef);
    internal Node get_ElementTypeDef();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.Command : Node {
    private NodeList`1<NamespaceImport> _namespaceImportList;
    private Statement _statement;
    internal NodeList`1<NamespaceImport> NamespaceImportList { get; }
    internal Statement Statement { get; }
    internal Command(NodeList`1<NamespaceImport> nsImportList, Statement statement);
    internal NodeList`1<NamespaceImport> get_NamespaceImportList();
    internal Statement get_Statement();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.CreateRefExpr : Node {
    private Node _entitySet;
    private Node _keys;
    private Node _typeIdentifier;
    internal Node EntitySet { get; }
    internal Node Keys { get; }
    internal Node TypeIdentifier { get; }
    internal CreateRefExpr(Node entitySet, Node keys);
    internal CreateRefExpr(Node entitySet, Node keys, Node typeIdentifier);
    internal Node get_EntitySet();
    internal Node get_Keys();
    internal Node get_TypeIdentifier();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.DerefExpr : Node {
    private Node _argExpr;
    internal Node ArgExpr { get; }
    internal DerefExpr(Node derefArgExpr);
    internal Node get_ArgExpr();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.DistinctKind : Enum {
    public int value__;
    public static DistinctKind None;
    public static DistinctKind All;
    public static DistinctKind Distinct;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.DotExpr : Node {
    private Node _leftExpr;
    private Identifier _identifier;
    private Nullable`1<bool> _isMultipartIdentifierComputed;
    private String[] _names;
    internal Node Left { get; }
    internal Identifier Identifier { get; }
    internal DotExpr(Node leftExpr, Identifier id);
    internal Node get_Left();
    internal Identifier get_Identifier();
    internal bool IsMultipartIdentifier(String[]& names);
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.FromClause : Node {
    private NodeList`1<FromClauseItem> _fromClauseItems;
    internal NodeList`1<FromClauseItem> FromClauseItems { get; }
    internal FromClause(NodeList`1<FromClauseItem> fromClauseItems);
    internal NodeList`1<FromClauseItem> get_FromClauseItems();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.FromClauseItem : Node {
    private Node _fromClauseItemExpr;
    private FromClauseItemKind _fromClauseItemKind;
    internal Node FromExpr { get; }
    internal FromClauseItemKind FromClauseItemKind { get; }
    internal FromClauseItem(AliasedExpr aliasExpr);
    internal FromClauseItem(JoinClauseItem joinClauseItem);
    internal FromClauseItem(ApplyClauseItem applyClauseItem);
    internal Node get_FromExpr();
    internal FromClauseItemKind get_FromClauseItemKind();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.FromClauseItemKind : Enum {
    public int value__;
    public static FromClauseItemKind AliasedFromClause;
    public static FromClauseItemKind JoinFromClause;
    public static FromClauseItemKind ApplyFromClause;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.FunctionDefinition : Node {
    private Identifier _name;
    private NodeList`1<PropDefinition> _paramDefList;
    private Node _body;
    private int _startPosition;
    private int _endPosition;
    internal string Name { get; }
    internal NodeList`1<PropDefinition> Parameters { get; }
    internal Node Body { get; }
    internal int StartPosition { get; }
    internal int EndPosition { get; }
    internal FunctionDefinition(Identifier name, NodeList`1<PropDefinition> argDefList, Node body, int startPosition, int endPosition);
    internal string get_Name();
    internal NodeList`1<PropDefinition> get_Parameters();
    internal Node get_Body();
    internal int get_StartPosition();
    internal int get_EndPosition();
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.AST.GroupAggregateExpr : Node {
    internal DistinctKind DistinctKind;
    internal GroupAggregateInfo AggregateInfo;
    internal GroupAggregateExpr(DistinctKind distinctKind);
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.GroupByClause : Node {
    private NodeList`1<AliasedExpr> _groupItems;
    internal NodeList`1<AliasedExpr> GroupItems { get; }
    internal GroupByClause(NodeList`1<AliasedExpr> groupItems);
    internal NodeList`1<AliasedExpr> get_GroupItems();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.GroupPartitionExpr : GroupAggregateExpr {
    private Node _argExpr;
    internal Node ArgExpr { get; }
    internal GroupPartitionExpr(DistinctKind distinctKind, Node refArgExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.HavingClause : Node {
    private Node _havingExpr;
    private UInt32 _methodCallCount;
    internal Node HavingPredicate { get; }
    internal bool HasMethodCall { get; }
    internal HavingClause(Node havingExpr, UInt32 methodCallCounter);
    internal Node get_HavingPredicate();
    internal bool get_HasMethodCall();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.Identifier : Node {
    private string _name;
    private bool _isEscaped;
    internal string Name { get; }
    internal bool IsEscaped { get; }
    internal Identifier(string name, bool isEscaped, string query, int inputPos);
    internal string get_Name();
    internal bool get_IsEscaped();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.JoinClauseItem : Node {
    private FromClauseItem _joinLeft;
    private FromClauseItem _joinRight;
    private Node _onExpr;
    [CompilerGeneratedAttribute]
private JoinKind <JoinKind>k__BackingField;
    internal FromClauseItem LeftExpr { get; }
    internal FromClauseItem RightExpr { get; }
    internal JoinKind JoinKind { get; internal set; }
    internal Node OnExpr { get; }
    internal JoinClauseItem(FromClauseItem joinLeft, FromClauseItem joinRight, JoinKind joinKind);
    internal JoinClauseItem(FromClauseItem joinLeft, FromClauseItem joinRight, JoinKind joinKind, Node onExpr);
    internal FromClauseItem get_LeftExpr();
    internal FromClauseItem get_RightExpr();
    [CompilerGeneratedAttribute]
internal JoinKind get_JoinKind();
    [CompilerGeneratedAttribute]
internal void set_JoinKind(JoinKind value);
    internal Node get_OnExpr();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.JoinKind : Enum {
    public int value__;
    public static JoinKind Cross;
    public static JoinKind Inner;
    public static JoinKind LeftOuter;
    public static JoinKind FullOuter;
    public static JoinKind RightOuter;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.KeyExpr : Node {
    private Node _argExpr;
    internal Node ArgExpr { get; }
    internal KeyExpr(Node argExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.Literal : Node {
    private LiteralKind _literalKind;
    private string _originalValue;
    private bool _wasValueComputed;
    private object _computedValue;
    private Type _type;
    private static Byte[] _emptyByteArray;
    private static Char[] _numberSuffixes;
    private static Char[] _floatTokens;
    private static Char[] _datetimeSeparators;
    private static Char[] _datetimeOffsetSeparators;
    internal bool IsNumber { get; }
    internal bool IsSignedNumber { get; }
    internal bool IsString { get; }
    internal bool IsUnicodeString { get; }
    internal bool IsNullLiteral { get; }
    internal string OriginalValue { get; }
    internal object Value { get; }
    internal Type Type { get; }
    internal Literal(string originalValue, LiteralKind kind, string query, int inputPos);
    private Literal(bool boolLiteral);
    private static Literal();
    internal static Literal NewBooleanLiteral(bool value);
    internal bool get_IsNumber();
    internal bool get_IsSignedNumber();
    internal bool get_IsString();
    internal bool get_IsUnicodeString();
    internal bool get_IsNullLiteral();
    internal string get_OriginalValue();
    internal void PrefixSign(string sign);
    internal object get_Value();
    internal Type get_Type();
    private void ComputeValue();
    private static object ConvertNumericLiteral(ErrorContext errCtx, string numericString);
    private static object DefaultNumericConversion(string numericString, ErrorContext errCtx);
    private static bool ConvertBooleanLiteralValue(ErrorContext errCtx, string booleanLiteralValue);
    private static string GetStringLiteralValue(string stringLiteralValue, bool isUnicode);
    private static Byte[] ConvertBinaryLiteralValue(string binaryLiteralValue);
    private static int HexDigitToBinaryValue(char hexChar);
    private static DateTime ConvertDateTimeLiteralValue(string datetimeLiteralValue);
    private static DateTimeOffset ConvertDateTimeOffsetLiteralValue(ErrorContext errCtx, string datetimeLiteralValue);
    private static TimeSpan ConvertTimeLiteralValue(string datetimeLiteralValue);
    private static void GetTimeParts(string datetimeLiteralValue, String[] datetimeParts, int timePartStartIndex, Int32& hour, Int32& minute, Int32& second, Int32& ticks);
    private static void GetDateParts(string datetimeLiteralValue, String[] datetimeParts, Int32& year, Int32& month, Int32& day);
    private static Guid ConvertGuidLiteralValue(string guidLiteralValue);
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.LiteralKind : Enum {
    public int value__;
    public static LiteralKind Number;
    public static LiteralKind String;
    public static LiteralKind UnicodeString;
    public static LiteralKind Boolean;
    public static LiteralKind Binary;
    public static LiteralKind DateTime;
    public static LiteralKind Time;
    public static LiteralKind DateTimeOffset;
    public static LiteralKind Guid;
    public static LiteralKind Null;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.MethodExpr : GroupAggregateExpr {
    private Node _expr;
    private NodeList`1<Node> _args;
    private NodeList`1<RelshipNavigationExpr> _relationships;
    internal Node Expr { get; }
    internal NodeList`1<Node> Args { get; }
    internal bool HasRelationships { get; }
    internal NodeList`1<RelshipNavigationExpr> Relationships { get; }
    internal MethodExpr(Node expr, DistinctKind distinctKind, NodeList`1<Node> args);
    internal MethodExpr(Node expr, DistinctKind distinctKind, NodeList`1<Node> args, NodeList`1<RelshipNavigationExpr> relationships);
    internal Node get_Expr();
    internal NodeList`1<Node> get_Args();
    internal bool get_HasRelationships();
    internal NodeList`1<RelshipNavigationExpr> get_Relationships();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.MultisetConstructorExpr : Node {
    private NodeList`1<Node> _exprList;
    internal NodeList`1<Node> ExprList { get; }
    internal MultisetConstructorExpr(NodeList`1<Node> exprList);
    internal NodeList`1<Node> get_ExprList();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.NamespaceImport : Node {
    private Identifier _namespaceAlias;
    private Node _namespaceName;
    internal Identifier Alias { get; }
    internal Node NamespaceName { get; }
    internal NamespaceImport(Identifier identifier);
    internal NamespaceImport(DotExpr dorExpr);
    internal NamespaceImport(BuiltInExpr bltInExpr);
    internal Identifier get_Alias();
    internal Node get_NamespaceName();
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.AST.Node : object {
    private ErrorContext _errCtx;
    internal ErrorContext ErrCtx { get; internal set; }
    internal Node(string commandText, int inputPosition);
    internal ErrorContext get_ErrCtx();
    internal void set_ErrCtx(ErrorContext value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Common.EntitySql.AST.NodeList`1 : Node {
    private List`1<T> _list;
    internal int Count { get; }
    internal T Item { get; }
    internal NodeList`1(T item);
    internal NodeList`1<T> Add(T item);
    internal int get_Count();
    internal T get_Item(int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.OrderByClause : Node {
    private NodeList`1<OrderByClauseItem> _orderByClauseItem;
    private Node _skipExpr;
    private Node _limitExpr;
    private UInt32 _methodCallCount;
    internal NodeList`1<OrderByClauseItem> OrderByClauseItem { get; }
    internal Node SkipSubClause { get; }
    internal Node LimitSubClause { get; }
    internal bool HasMethodCall { get; }
    internal OrderByClause(NodeList`1<OrderByClauseItem> orderByClauseItem, Node skipExpr, Node limitExpr, UInt32 methodCallCount);
    internal NodeList`1<OrderByClauseItem> get_OrderByClauseItem();
    internal Node get_SkipSubClause();
    internal Node get_LimitSubClause();
    internal bool get_HasMethodCall();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.OrderByClauseItem : Node {
    private Node _orderExpr;
    private OrderKind _orderKind;
    private Identifier _optCollationIdentifier;
    internal Node OrderExpr { get; }
    internal OrderKind OrderKind { get; }
    internal Identifier Collation { get; }
    internal OrderByClauseItem(Node orderExpr, OrderKind orderKind);
    internal OrderByClauseItem(Node orderExpr, OrderKind orderKind, Identifier optCollationIdentifier);
    internal Node get_OrderExpr();
    internal OrderKind get_OrderKind();
    internal Identifier get_Collation();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.OrderKind : Enum {
    public int value__;
    public static OrderKind None;
    public static OrderKind Asc;
    public static OrderKind Desc;
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.ParenExpr : Node {
    private Node _expr;
    internal Node Expr { get; }
    internal ParenExpr(Node expr);
    internal Node get_Expr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.PropDefinition : Node {
    private Identifier _name;
    private Node _typeDefExpr;
    internal Identifier Name { get; }
    internal Node Type { get; }
    internal PropDefinition(Identifier name, Node typeDefExpr);
    internal Identifier get_Name();
    internal Node get_Type();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.QueryExpr : Node {
    private SelectClause _selectClause;
    private FromClause _fromClause;
    private Node _whereClause;
    private GroupByClause _groupByClause;
    private HavingClause _havingClause;
    private OrderByClause _orderByClause;
    internal SelectClause SelectClause { get; }
    internal FromClause FromClause { get; }
    internal Node WhereClause { get; }
    internal GroupByClause GroupByClause { get; }
    internal HavingClause HavingClause { get; }
    internal OrderByClause OrderByClause { get; }
    internal bool HasMethodCall { get; }
    internal QueryExpr(SelectClause selectClause, FromClause fromClause, Node whereClause, GroupByClause groupByClause, HavingClause havingClause, OrderByClause orderByClause);
    internal SelectClause get_SelectClause();
    internal FromClause get_FromClause();
    internal Node get_WhereClause();
    internal GroupByClause get_GroupByClause();
    internal HavingClause get_HavingClause();
    internal OrderByClause get_OrderByClause();
    internal bool get_HasMethodCall();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.QueryParameter : Node {
    private string _name;
    internal string Name { get; }
    internal QueryParameter(string parameterName, string query, int inputPos);
    internal string get_Name();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.QueryStatement : Statement {
    private NodeList`1<FunctionDefinition> _functionDefList;
    private Node _expr;
    internal NodeList`1<FunctionDefinition> FunctionDefList { get; }
    internal Node Expr { get; }
    internal QueryStatement(NodeList`1<FunctionDefinition> functionDefList, Node expr);
    internal NodeList`1<FunctionDefinition> get_FunctionDefList();
    internal Node get_Expr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.RefExpr : Node {
    private Node _argExpr;
    internal Node ArgExpr { get; }
    internal RefExpr(Node refArgExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.RefTypeDefinition : Node {
    private Node _refTypeIdentifier;
    internal Node RefTypeIdentifier { get; }
    internal RefTypeDefinition(Node refTypeIdentifier);
    internal Node get_RefTypeIdentifier();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.RelshipNavigationExpr : Node {
    private Node _refExpr;
    private Node _relshipTypeName;
    private Identifier _toEndIdentifier;
    private Identifier _fromEndIdentifier;
    internal Node RefExpr { get; }
    internal Node TypeName { get; }
    internal Identifier ToEndIdentifier { get; }
    internal Identifier FromEndIdentifier { get; }
    internal RelshipNavigationExpr(Node refExpr, Node relshipTypeName, Identifier toEndIdentifier, Identifier fromEndIdentifier);
    internal Node get_RefExpr();
    internal Node get_TypeName();
    internal Identifier get_ToEndIdentifier();
    internal Identifier get_FromEndIdentifier();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.RowConstructorExpr : Node {
    private NodeList`1<AliasedExpr> _exprList;
    internal NodeList`1<AliasedExpr> AliasedExprList { get; }
    internal RowConstructorExpr(NodeList`1<AliasedExpr> exprList);
    internal NodeList`1<AliasedExpr> get_AliasedExprList();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.RowTypeDefinition : Node {
    private NodeList`1<PropDefinition> _propDefList;
    internal NodeList`1<PropDefinition> Properties { get; }
    internal RowTypeDefinition(NodeList`1<PropDefinition> propDefList);
    internal NodeList`1<PropDefinition> get_Properties();
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.SelectClause : Node {
    private NodeList`1<AliasedExpr> _selectClauseItems;
    private SelectKind _selectKind;
    private DistinctKind _distinctKind;
    private Node _topExpr;
    private UInt32 _methodCallCount;
    internal NodeList`1<AliasedExpr> Items { get; }
    internal SelectKind SelectKind { get; }
    internal DistinctKind DistinctKind { get; }
    internal Node TopExpr { get; }
    internal bool HasMethodCall { get; }
    internal SelectClause(NodeList`1<AliasedExpr> items, SelectKind selectKind, DistinctKind distinctKind, Node topExpr, UInt32 methodCallCount);
    internal NodeList`1<AliasedExpr> get_Items();
    internal SelectKind get_SelectKind();
    internal DistinctKind get_DistinctKind();
    internal Node get_TopExpr();
    internal bool get_HasMethodCall();
}
internal enum System.Data.Entity.Core.Common.EntitySql.AST.SelectKind : Enum {
    public int value__;
    public static SelectKind Value;
    public static SelectKind Row;
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.AST.Statement : Node {
}
internal class System.Data.Entity.Core.Common.EntitySql.AST.WhenThenExpr : Node {
    private Node _whenExpr;
    private Node _thenExpr;
    internal Node WhenExpr { get; }
    internal Node ThenExpr { get; }
    internal WhenThenExpr(Node whenExpr, Node thenExpr);
    internal Node get_WhenExpr();
    internal Node get_ThenExpr();
}
internal static class System.Data.Entity.Core.Common.EntitySql.CqlErrorHelper : object {
    internal static void ReportFunctionOverloadError(MethodExpr functionExpr, EdmFunction functionType, List`1<TypeUsage> argTypes);
    internal static void ReportAliasAlreadyUsedError(string aliasName, ErrorContext errCtx, string contextMessage);
    internal static void ReportIncompatibleCommonType(ErrorContext errCtx, TypeUsage leftType, TypeUsage rightType);
    private static void ReportIncompatibleCommonType(ErrorContext errCtx, TypeUsage rootLeftType, TypeUsage rootRightType, TypeUsage leftType, TypeUsage rightType);
    private static string GetReadableTypeName(TypeUsage type);
    private static string GetReadableTypeName(EdmType type);
    private static string GetReadableTypeKind(TypeUsage type);
    private static string GetReadableTypeKind(EdmType type);
}
internal class System.Data.Entity.Core.Common.EntitySql.CqlLexer : object {
    private static int YY_BUFFER_SIZE;
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private AcceptMethod[] accept_dispatch;
    private static int YY_BOL;
    private static int YY_EOF;
    private TextReader yy_reader;
    private int yy_buffer_index;
    private int yy_buffer_read;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private Char[] yy_buffer;
    private int yychar;
    private int yyline;
    private bool yy_at_bol;
    private int yy_lexical_state;
    private static int YYINITIAL;
    private static Int32[] yy_state_dtrans;
    private bool yy_last_was_cr;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    private static StringComparer _stringComparer;
    private static Dictionary`2<string, short> _keywords;
    private static HashSet`1<string> _invalidAliasNames;
    private static HashSet`1<string> _invalidInlineFunctionNames;
    private static Dictionary`2<string, short> _operators;
    private static Dictionary`2<string, short> _punctuators;
    private static HashSet`1<string> _canonicalFunctionNames;
    private static Regex _reDateTimeValue;
    private static Regex _reTimeValue;
    private static Regex _reDateTimeOffsetValue;
    private static string _datetimeValueRegularExpression;
    private static string _timeValueRegularExpression;
    private static string _datetimeOffsetValueRegularExpression;
    private int _iPos;
    private int _lineNumber;
    private ParserOptions _parserOptions;
    private string _query;
    private bool _symbolAsIdentifierState;
    private bool _symbolAsAliasIdentifierState;
    private bool _symbolAsInlineFunctionNameState;
    private static Char[] _newLineCharacters;
    internal string YYText { get; }
    internal int IPos { get; }
    private static Dictionary`2<string, short> InternalKeywordDictionary { get; }
    private static HashSet`1<string> InternalInvalidAliasNames { get; }
    private static HashSet`1<string> InternalInvalidInlineFunctionNames { get; }
    private static Dictionary`2<string, short> InternalOperatorDictionary { get; }
    private static Dictionary`2<string, short> InternalPunctuatorDictionary { get; }
    private static HashSet`1<string> InternalCanonicalFunctionNames { get; }
    internal CqlLexer(TextReader reader);
    internal CqlLexer(FileStream instream);
    internal CqlLexer(string query, ParserOptions parserOptions);
    private static CqlLexer();
    private Token Accept_2();
    private Token Accept_3();
    private Token Accept_4();
    private Token Accept_5();
    private Token Accept_6();
    private Token Accept_7();
    private Token Accept_8();
    private Token Accept_9();
    private Token Accept_10();
    private Token Accept_11();
    private Token Accept_12();
    private Token Accept_13();
    private Token Accept_14();
    private Token Accept_15();
    private Token Accept_16();
    private Token Accept_17();
    private Token Accept_18();
    private Token Accept_20();
    private Token Accept_21();
    private Token Accept_22();
    private Token Accept_23();
    private Token Accept_25();
    private Token Accept_26();
    private Token Accept_27();
    private Token Accept_28();
    private Token Accept_30();
    private Token Accept_31();
    private Token Accept_32();
    private Token Accept_34();
    private Token Accept_35();
    private Token Accept_37();
    private Token Accept_53();
    private Token Accept_54();
    private Token Accept_55();
    private Token Accept_56();
    private Token Accept_57();
    private Token Accept_58();
    private Token Accept_59();
    private Token Accept_60();
    private Token Accept_61();
    private Token Accept_62();
    private Token Accept_63();
    private Token Accept_64();
    private Token Accept_65();
    private Token Accept_66();
    private Token Accept_67();
    private Token Accept_68();
    private Token Accept_69();
    private Token Accept_70();
    private Token Accept_71();
    private Token Accept_72();
    private Token Accept_73();
    private Token Accept_74();
    private Token Accept_75();
    private Token Accept_76();
    private Token Accept_77();
    private Token Accept_78();
    private Token Accept_79();
    private Token Accept_80();
    private Token Accept_81();
    private Token Accept_82();
    private Token Accept_83();
    private Token Accept_84();
    private void yybegin(int state);
    private char yy_advance();
    private void yy_move_end();
    private void yy_mark_start();
    private void yy_mark_end();
    private void yy_to_mark();
    internal string yytext();
    internal int yy_char();
    private int yylength();
    private Char[] yy_double(Char[] buf);
    private void yy_error(int code, bool fatal);
    internal Token yylex();
    internal static Token NewToken(short tokenId, Node tokenvalue);
    internal static Token NewToken(short tokenId, TerminalToken termToken);
    internal string get_YYText();
    internal int get_IPos();
    internal int AdvanceIPos();
    internal static bool IsReservedKeyword(string term);
    internal Token MapIdentifierOrKeyword(string symbol);
    private bool IsEscapedIdentifier(string symbol, Token& identifierToken);
    private bool IsKeyword(string symbol, Token& terminalToken);
    private bool IsCanonicalFunctionCall(string symbol, char lookAheadChar);
    private Token MapUnescapedIdentifier(string symbol);
    private char GetLookAheadChar();
    private bool IsInSymbolAsIdentifierState(char lookAheadChar);
    private void ResetSymbolAsIdentifierState(bool significant);
    internal Token MapOperator(string oper);
    internal Token MapPunctuator(string punct);
    internal Token MapDoubleQuotedString(string symbol);
    internal Token NewLiteralToken(string literal, LiteralKind literalKind);
    internal Token NewParameterToken(string param);
    internal Token HandleEscapedIdentifiers();
    internal static bool IsLetterOrDigitOrUnderscore(string symbol, Boolean& isIdentifierASCII);
    private static bool IsLetter(char c);
    private static bool IsDigit(char c);
    private static bool isHexDigit(char c);
    internal static bool IsNewLine(char c);
    private static string GetLiteralSingleQuotePayload(string literal);
    private static bool IsValidGuidValue(string guidValue);
    private static bool IsValidBinaryValue(string binaryValue);
    private static bool IsValidDateTimeValue(string datetimeValue);
    private static bool IsValidTimeValue(string timeValue);
    private static bool IsValidDateTimeOffsetValue(string datetimeOffsetValue);
    private static Dictionary`2<string, short> get_InternalKeywordDictionary();
    private static HashSet`1<string> get_InternalInvalidAliasNames();
    private static HashSet`1<string> get_InternalInvalidInlineFunctionNames();
    private static Dictionary`2<string, short> get_InternalOperatorDictionary();
    private static Dictionary`2<string, short> get_InternalPunctuatorDictionary();
    private static HashSet`1<string> get_InternalCanonicalFunctionNames();
}
internal class System.Data.Entity.Core.Common.EntitySql.CqlParser : object {
    private bool yydebug;
    private static int YYMAJOR;
    private static int YYMINOR;
    private int yynerrs;
    private int yyerrflag;
    private int yychar;
    private static int YYSTACKSIZE;
    private Int32[] statestk;
    private int stateptr;
    private object yyval;
    private object yylval;
    private Object[] valstk;
    private int valptr;
    public static short IDENTIFIER;
    public static short ESCAPED_IDENTIFIER;
    public static short PARAMETER;
    public static short LITERAL;
    public static short ALL;
    public static short AND;
    public static short ANYELEMENT;
    public static short APPLY;
    public static short AS;
    public static short ASC;
    public static short BETWEEN;
    public static short BY;
    public static short CASE;
    public static short CAST;
    public static short COLLATE;
    public static short COLLECTION;
    public static short CROSS;
    public static short CREATEREF;
    public static short DEREF;
    public static short DESC;
    public static short DISTINCT;
    public static short ELEMENT;
    public static short ELSE;
    public static short END;
    public static short EXCEPT;
    public static short EXISTS;
    public static short ESCAPE;
    public static short FLATTEN;
    public static short FROM;
    public static short FULL;
    public static short FUNCTION;
    public static short GROUP;
    public static short GROUPPARTITION;
    public static short HAVING;
    public static short IN;
    public static short INNER;
    public static short INTERSECT;
    public static short IS;
    public static short JOIN;
    public static short KEY;
    public static short LEFT;
    public static short LIKE;
    public static short LIMIT;
    public static short MULTISET;
    public static short NAVIGATE;
    public static short NOT;
    public static short NULL;
    public static short OF;
    public static short OFTYPE;
    public static short ON;
    public static short OR;
    public static short ORDER;
    public static short OUTER;
    public static short OVERLAPS;
    public static short ONLY;
    public static short QMARK;
    public static short REF;
    public static short RELATIONSHIP;
    public static short RIGHT;
    public static short ROW;
    public static short SELECT;
    public static short SET;
    public static short SKIP;
    public static short THEN;
    public static short TOP;
    public static short TREAT;
    public static short UNION;
    public static short USING;
    public static short VALUE;
    public static short WHEN;
    public static short WHERE;
    public static short WITH;
    public static short COMMA;
    public static short COLON;
    public static short SCOLON;
    public static short DOT;
    public static short EQUAL;
    public static short L_PAREN;
    public static short R_PAREN;
    public static short L_BRACE;
    public static short R_BRACE;
    public static short L_CURLY;
    public static short R_CURLY;
    public static short PLUS;
    public static short MINUS;
    public static short STAR;
    public static short FSLASH;
    public static short PERCENT;
    public static short OP_EQ;
    public static short OP_NEQ;
    public static short OP_LT;
    public static short OP_LE;
    public static short OP_GT;
    public static short OP_GE;
    public static short UNARYPLUS;
    public static short UNARYMINUS;
    public static short YYERRCODE;
    private static Int16[] yylhs;
    private static Int16[] yylen;
    private static Int16[] yydefred;
    private static Int16[] yydgoto;
    private static Int16[] yysindex;
    private static Int16[] yyrindex;
    private static Int16[] yygindex;
    private static int YYTABLESIZE;
    private static Int16[] yytable;
    private static Int16[] yycheck;
    private static short YYFINAL;
    private static short YYMAXTOKEN;
    private static String[] yyname;
    private static String[] yyrule;
    private Node _parsedTree;
    private CqlLexer _lexer;
    private string _query;
    private ParserOptions _parserOptions;
    private static string _internalYaccSyntaxErrorMessage;
    private UInt32 _methodExprCounter;
    private Stack`1<UInt32> _methodExprCounterStack;
    internal string Query { get; }
    internal ParserOptions ParserOptions { get; }
    internal CqlParser(ParserOptions parserOptions, bool debug);
    private static CqlParser();
    private void debug(string msg);
    private void state_push(int state);
    private int state_pop();
    private void state_drop(int cnt);
    private int state_peek(int relative);
    private bool init_stacks();
    private void dump_stacks(int count);
    private void val_init();
    private void val_push(object val);
    private object val_pop();
    private void val_drop(int cnt);
    private object val_peek(int relative);
    private void yylexdebug(int state, int ch);
    private int yyparse();
    internal Node Parse(string query);
    internal string get_Query();
    internal ParserOptions get_ParserOptions();
    private void internalParseEntryPoint();
    private static Node AstNode(object o);
    private static int AstNodePos(object o);
    private static TerminalToken Terminal(object o);
    private static int TerminalPos(object o);
    private static NodeList`1<T> ToNodeList(object o);
    private short yylex();
    private void yyerror_stackoverflow();
    private void yyerror(string s);
    private void SetErrCtx(Node astExpr, TerminalToken tokenValue, string info);
    private void SetErrCtx(Node astExpr, int inputPos, string info);
    private void StartMethodExprCounting();
    private void IncrementMethodExprCount();
    private UInt32 EndMethodExprCounting();
}
internal static class System.Data.Entity.Core.Common.EntitySql.CqlQuery : object {
    internal static ParseResult Compile(string commandText, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters);
    internal static DbLambda CompileQueryCommandLambda(string queryCommandText, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables);
    private static Node Parse(string commandText, ParserOptions parserOptions);
    private static TResult CompileCommon(string commandText, ParserOptions parserOptions, Func`3<Node, ParserOptions, TResult> compilationFunction);
    private static ParseResult AnalyzeCommandSemantics(Node astExpr, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters);
    private static DbLambda AnalyzeQueryExpressionSemantics(Node astQueryCommand, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables);
    private static TResult AnalyzeSemanticsCommon(Node astExpr, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables, Func`3<SemanticAnalyzer, Node, TResult> analysisFunction);
}
internal class System.Data.Entity.Core.Common.EntitySql.Disposer : object {
    private Action _action;
    internal Disposer(Action action);
    public sealed virtual void Dispose();
}
internal class System.Data.Entity.Core.Common.EntitySql.EntityContainerExpression : ExpressionResolution {
    internal EntityContainer EntityContainer;
    internal string ExpressionClassName { get; }
    internal static string EntityContainerClassName { get; }
    internal EntityContainerExpression(EntityContainer entityContainer);
    internal virtual string get_ExpressionClassName();
    internal static string get_EntityContainerClassName();
}
public class System.Data.Entity.Core.Common.EntitySql.EntitySqlParser : object {
    private Perspective _perspective;
    internal EntitySqlParser(Perspective perspective);
    public ParseResult Parse(string query, DbParameterReferenceExpression[] parameters);
    public DbLambda ParseLambda(string query, DbVariableReferenceExpression[] variables);
}
internal class System.Data.Entity.Core.Common.EntitySql.ErrorContext : object {
    internal int InputPosition;
    internal string ErrorContextInfo;
    internal bool UseContextInfoAsResourceIdentifier;
    internal string CommandText;
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.ExpressionResolution : object {
    internal ExpressionResolutionClass ExpressionClass;
    internal string ExpressionClassName { get; }
    protected ExpressionResolution(ExpressionResolutionClass class);
    internal abstract virtual string get_ExpressionClassName();
}
internal enum System.Data.Entity.Core.Common.EntitySql.ExpressionResolutionClass : Enum {
    public int value__;
    public static ExpressionResolutionClass Value;
    public static ExpressionResolutionClass EntityContainer;
    public static ExpressionResolutionClass MetadataMember;
}
internal class System.Data.Entity.Core.Common.EntitySql.FreeVariableScopeEntry : ScopeEntry {
    private DbVariableReferenceExpression _varRef;
    internal FreeVariableScopeEntry(DbVariableReferenceExpression varRef);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Entity.Core.Common.EntitySql.FunctionAggregateInfo : GroupAggregateInfo {
    internal DbAggregate AggregateDefinition;
    internal FunctionAggregateInfo(MethodExpr methodExpr, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    internal void AttachToAstNode(string aggregateName, DbAggregate aggregateDefinition);
}
public class System.Data.Entity.Core.Common.EntitySql.FunctionDefinition : object {
    private string _name;
    private DbLambda _lambda;
    private int _startPosition;
    private int _endPosition;
    public string Name { get; }
    public DbLambda Lambda { get; }
    public int StartPosition { get; }
    public int EndPosition { get; }
    internal FunctionDefinition(string name, DbLambda lambda, int startPosition, int endPosition);
    public string get_Name();
    public DbLambda get_Lambda();
    public int get_StartPosition();
    public int get_EndPosition();
}
internal static class System.Data.Entity.Core.Common.EntitySql.FunctionOverloadResolver : object {
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TypeUsage, IEnumerable`1<TypeUsage>> flattenArgumentType, Func`3<TypeUsage, TypeUsage, IEnumerable`1<TypeUsage>> flattenParameterType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static TFunctionMetadata ResolveFunctionOverloads(IList`1<TFunctionMetadata> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TFunctionMetadata, IList`1<TFunctionParameterMetadata>> getSignatureParams, Func`2<TFunctionParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TFunctionParameterMetadata, ParameterMode> getParameterMode, Func`2<TypeUsage, IEnumerable`1<TypeUsage>> flattenArgumentType, Func`3<TypeUsage, TypeUsage, IEnumerable`1<TypeUsage>> flattenParameterType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    private static bool TryRankFunctionParameters(IList`1<TypeUsage> argumentList, IList`1<TypeUsage> flatArgumentList, IList`1<TFunctionParameterMetadata> overloadParamList, Func`2<TFunctionParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TFunctionParameterMetadata, ParameterMode> getParameterMode, Func`3<TypeUsage, TypeUsage, IEnumerable`1<TypeUsage>> flattenParameterType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual, bool isGroupAggregateFunction, Int32& totalRank, Int32[]& parameterRanks);
    private static int GetPromotionRank(TypeUsage fromType, TypeUsage toType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual);
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.GroupAggregateInfo : object {
    private ScopeRegion _innermostReferencedScopeRegion;
    private List`1<GroupAggregateInfo> _containedAggregates;
    internal GroupAggregateKind AggregateKind;
    internal GroupAggregateExpr AstNode;
    internal ErrorContext ErrCtx;
    internal ScopeRegion DefiningScopeRegion;
    private ScopeRegion _evaluatingScopeRegion;
    private GroupAggregateInfo _containingAggregate;
    internal string AggregateName;
    internal DbNullExpression AggregateStubExpression;
    internal ScopeRegion InnermostReferencedScopeRegion { get; internal set; }
    internal ScopeRegion EvaluatingScopeRegion { get; }
    internal GroupAggregateInfo ContainingAggregate { get; }
    protected GroupAggregateInfo(GroupAggregateKind aggregateKind, GroupAggregateExpr astNode, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    protected void AttachToAstNode(string aggregateName, TypeUsage resultType);
    internal void DetachFromAstNode();
    internal void UpdateScopeIndex(int referencedScopeIndex, SemanticResolver sr);
    internal ScopeRegion get_InnermostReferencedScopeRegion();
    internal void set_InnermostReferencedScopeRegion(ScopeRegion value);
    internal void ValidateAndComputeEvaluatingScopeRegion(SemanticResolver sr);
    private void ValidateContainedAggregates(int outerBoundaryScopeRegionIndex, int innerBoundaryScopeRegionIndex);
    internal void SetContainingAggregate(GroupAggregateInfo containingAggregate);
    private void AddContainedAggregate(GroupAggregateInfo containedAggregate);
    private void RemoveContainedAggregate(GroupAggregateInfo containedAggregate);
    internal ScopeRegion get_EvaluatingScopeRegion();
    internal GroupAggregateInfo get_ContainingAggregate();
}
internal enum System.Data.Entity.Core.Common.EntitySql.GroupAggregateKind : Enum {
    public int value__;
    public static GroupAggregateKind None;
    public static GroupAggregateKind Function;
    public static GroupAggregateKind Partition;
    public static GroupAggregateKind GroupKey;
}
internal class System.Data.Entity.Core.Common.EntitySql.GroupKeyAggregateInfo : GroupAggregateInfo {
    internal GroupKeyAggregateInfo(GroupAggregateKind aggregateKind, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
}
internal class System.Data.Entity.Core.Common.EntitySql.GroupKeyDefinitionScopeEntry : ScopeEntry {
    private DbExpression _varBasedExpression;
    private DbExpression _groupVarBasedExpression;
    private DbExpression _groupAggBasedExpression;
    private String[] _alternativeName;
    private DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.GroupVarBasedExpression { get; }
    private DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.GroupAggBasedExpression { get; }
    private String[] System.Data.Entity.Core.Common.EntitySql.IGetAlternativeName.AlternativeName { get; }
    internal GroupKeyDefinitionScopeEntry(DbExpression varBasedExpression, DbExpression groupVarBasedExpression, DbExpression groupAggBasedExpression, String[] alternativeName);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
    private sealed virtual override DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupVarBasedExpression();
    private sealed virtual override DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupAggBasedExpression();
    private sealed virtual override String[] System.Data.Entity.Core.Common.EntitySql.IGetAlternativeName.get_AlternativeName();
}
internal class System.Data.Entity.Core.Common.EntitySql.GroupPartitionInfo : GroupAggregateInfo {
    internal DbExpression AggregateDefinition;
    internal GroupPartitionInfo(GroupPartitionExpr groupPartitionExpr, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    internal void AttachToAstNode(string aggregateName, DbExpression aggregateDefinition);
}
internal interface System.Data.Entity.Core.Common.EntitySql.IGetAlternativeName {
    public String[] AlternativeName { get; }
    public abstract virtual String[] get_AlternativeName();
}
internal interface System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo {
    public DbExpression GroupVarBasedExpression { get; }
    public DbExpression GroupAggBasedExpression { get; }
    public abstract virtual DbExpression get_GroupVarBasedExpression();
    public abstract virtual DbExpression get_GroupAggBasedExpression();
}
internal class System.Data.Entity.Core.Common.EntitySql.InlineFunctionGroup : MetadataMember {
    internal IList`1<InlineFunctionInfo> FunctionMetadata;
    internal string MetadataMemberClassName { get; }
    internal static string InlineFunctionGroupClassName { get; }
    internal InlineFunctionGroup(string name, IList`1<InlineFunctionInfo> functionMetadata);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_InlineFunctionGroupClassName();
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.InlineFunctionInfo : object {
    internal FunctionDefinition FunctionDefAst;
    internal List`1<DbVariableReferenceExpression> Parameters;
    internal InlineFunctionInfo(FunctionDefinition functionDef, List`1<DbVariableReferenceExpression> parameters);
    internal abstract virtual DbLambda GetLambda(SemanticResolver sr);
}
internal class System.Data.Entity.Core.Common.EntitySql.InvalidGroupInputRefScopeEntry : ScopeEntry {
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Entity.Core.Common.EntitySql.MetadataEnumMember : MetadataMember {
    internal TypeUsage EnumType;
    internal EnumMember EnumMember;
    internal string MetadataMemberClassName { get; }
    internal static string EnumMemberClassName { get; }
    internal MetadataEnumMember(string name, TypeUsage enumType, EnumMember enumMember);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_EnumMemberClassName();
}
internal class System.Data.Entity.Core.Common.EntitySql.MetadataFunctionGroup : MetadataMember {
    internal IList`1<EdmFunction> FunctionMetadata;
    internal string MetadataMemberClassName { get; }
    internal static string FunctionGroupClassName { get; }
    internal MetadataFunctionGroup(string name, IList`1<EdmFunction> functionMetadata);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_FunctionGroupClassName();
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.MetadataMember : ExpressionResolution {
    internal MetadataMemberClass MetadataMemberClass;
    internal string Name;
    internal string ExpressionClassName { get; }
    internal static string MetadataMemberExpressionClassName { get; }
    internal string MetadataMemberClassName { get; }
    protected MetadataMember(MetadataMemberClass class, string name);
    internal virtual string get_ExpressionClassName();
    internal static string get_MetadataMemberExpressionClassName();
    internal abstract virtual string get_MetadataMemberClassName();
    internal static IEqualityComparer`1<MetadataMember> CreateMetadataMemberNameEqualityComparer(StringComparer stringComparer);
}
internal enum System.Data.Entity.Core.Common.EntitySql.MetadataMemberClass : Enum {
    public int value__;
    public static MetadataMemberClass Type;
    public static MetadataMemberClass FunctionGroup;
    public static MetadataMemberClass InlineFunctionGroup;
    public static MetadataMemberClass Namespace;
    public static MetadataMemberClass EnumMember;
}
internal class System.Data.Entity.Core.Common.EntitySql.MetadataNamespace : MetadataMember {
    internal string MetadataMemberClassName { get; }
    internal static string NamespaceClassName { get; }
    internal MetadataNamespace(string name);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_NamespaceClassName();
}
internal class System.Data.Entity.Core.Common.EntitySql.MetadataType : MetadataMember {
    internal TypeUsage TypeUsage;
    internal string MetadataMemberClassName { get; }
    internal static string TypeClassName { get; }
    internal MetadataType(string name, TypeUsage typeUsage);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_TypeClassName();
}
internal class System.Data.Entity.Core.Common.EntitySql.Pair`2 : object {
    internal L Left;
    internal R Right;
    internal Pair`2(L left, R right);
    internal KeyValuePair`2<L, R> GetKVP();
}
public class System.Data.Entity.Core.Common.EntitySql.ParseResult : object {
    private DbCommandTree _commandTree;
    private ReadOnlyCollection`1<FunctionDefinition> _functionDefs;
    public DbCommandTree CommandTree { get; }
    public ReadOnlyCollection`1<FunctionDefinition> FunctionDefinitions { get; }
    internal ParseResult(DbCommandTree commandTree, List`1<FunctionDefinition> functionDefs);
    public DbCommandTree get_CommandTree();
    public ReadOnlyCollection`1<FunctionDefinition> get_FunctionDefinitions();
}
internal class System.Data.Entity.Core.Common.EntitySql.ParserOptions : object {
    internal CompilationMode ParserCompilationMode;
    internal StringComparer NameComparer { get; }
    internal bool NameComparisonCaseInsensitive { get; }
    internal StringComparer get_NameComparer();
    internal bool get_NameComparisonCaseInsensitive();
}
internal class System.Data.Entity.Core.Common.EntitySql.ProjectionItemDefinitionScopeEntry : ScopeEntry {
    private DbExpression _expression;
    internal ProjectionItemDefinitionScopeEntry(DbExpression expression);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Entity.Core.Common.EntitySql.Scope : object {
    private Dictionary`2<string, ScopeEntry> _scopeEntries;
    internal Scope(IEqualityComparer`1<string> keyComparer);
    internal Scope Add(string key, ScopeEntry value);
    internal void Remove(string key);
    internal void Replace(string key, ScopeEntry value);
    internal bool Contains(string key);
    internal bool TryLookup(string key, ScopeEntry& value);
    public Enumerator<string, ScopeEntry> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, ScopeEntry>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Entity.Core.Common.EntitySql.ScopeEntry>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class System.Data.Entity.Core.Common.EntitySql.ScopeEntry : object {
    private ScopeEntryKind _scopeEntryKind;
    internal ScopeEntryKind EntryKind { get; }
    internal ScopeEntry(ScopeEntryKind scopeEntryKind);
    internal ScopeEntryKind get_EntryKind();
    internal abstract virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal enum System.Data.Entity.Core.Common.EntitySql.ScopeEntryKind : Enum {
    public int value__;
    public static ScopeEntryKind SourceVar;
    public static ScopeEntryKind GroupKeyDefinition;
    public static ScopeEntryKind ProjectionItemDefinition;
    public static ScopeEntryKind FreeVar;
    public static ScopeEntryKind InvalidGroupInputRef;
}
internal class System.Data.Entity.Core.Common.EntitySql.ScopeManager : object {
    private IEqualityComparer`1<string> _keyComparer;
    private List`1<Scope> _scopes;
    internal int CurrentScopeIndex { get; }
    internal Scope CurrentScope { get; }
    internal ScopeManager(IEqualityComparer`1<string> keyComparer);
    internal void EnterScope();
    internal void LeaveScope();
    internal int get_CurrentScopeIndex();
    internal Scope get_CurrentScope();
    internal Scope GetScopeByIndex(int scopeIndex);
    internal void RollbackToScope(int scopeIndex);
    internal bool IsInCurrentScope(string key);
}
internal class System.Data.Entity.Core.Common.EntitySql.ScopeRegion : object {
    private ScopeManager _scopeManager;
    private int _firstScopeIndex;
    private int _scopeRegionIndex;
    private DbExpressionBinding _groupAggregateBinding;
    private List`1<GroupAggregateInfo> _groupAggregateInfos;
    private HashSet`1<string> _groupAggregateNames;
    [CompilerGeneratedAttribute]
private bool <WasResolutionCorrelated>k__BackingField;
    internal int FirstScopeIndex { get; }
    internal int ScopeRegionIndex { get; }
    internal bool IsAggregating { get; }
    internal DbExpressionBinding GroupAggregateBinding { get; }
    internal List`1<GroupAggregateInfo> GroupAggregateInfos { get; }
    internal bool WasResolutionCorrelated { get; internal set; }
    internal ScopeRegion(ScopeManager scopeManager, int firstScopeIndex, int scopeRegionIndex);
    internal int get_FirstScopeIndex();
    internal int get_ScopeRegionIndex();
    internal bool ContainsScope(int scopeIndex);
    internal void EnterGroupOperation(DbExpressionBinding groupAggregateBinding);
    internal void RollbackGroupOperation();
    internal bool get_IsAggregating();
    internal DbExpressionBinding get_GroupAggregateBinding();
    internal List`1<GroupAggregateInfo> get_GroupAggregateInfos();
    internal void RegisterGroupAggregateName(string groupAggregateName);
    internal bool ContainsGroupAggregate(string groupAggregateName);
    [CompilerGeneratedAttribute]
internal bool get_WasResolutionCorrelated();
    [CompilerGeneratedAttribute]
internal void set_WasResolutionCorrelated(bool value);
    internal void ApplyToScopeEntries(Action`1<ScopeEntry> action);
    internal void ApplyToScopeEntries(Func`2<ScopeEntry, ScopeEntry> action);
    internal void RollbackAllScopes();
}
internal class System.Data.Entity.Core.Common.EntitySql.SemanticAnalyzer : object {
    private SemanticResolver _sr;
    private static DbExpressionKind[] _joinMap;
    private static DbExpressionKind[] _applyMap;
    private static Dictionary`2<Type, AstExprConverter> _astExprConverters;
    private static Dictionary`2<BuiltInKind, BuiltInExprConverter> _builtInExprConverter;
    internal SemanticAnalyzer(SemanticResolver sr);
    private static SemanticAnalyzer();
    internal ParseResult AnalyzeCommand(Node astExpr);
    internal DbLambda AnalyzeQueryCommand(Node astExpr);
    private static Command ValidateQueryCommandAst(Node astExpr);
    private static void ConvertAndRegisterNamespaceImports(NodeList`1<NamespaceImport> nsImportList, ErrorContext cmdErrCtx, SemanticResolver sr);
    private static ParseResult ConvertStatement(Statement astStatement, SemanticResolver sr);
    private static ParseResult ConvertQueryStatementToDbCommandTree(Statement astStatement, SemanticResolver sr);
    private static DbExpression ConvertQueryStatementToDbExpression(Statement astStatement, SemanticResolver sr, List`1& functionDefs);
    private static void ValidateQueryResultType(TypeUsage resultType, ErrorContext errCtx);
    private static List`1<FunctionDefinition> ConvertInlineFunctionDefinitions(NodeList`1<FunctionDefinition> functionDefList, SemanticResolver sr);
    private static List`1<DbVariableReferenceExpression> ConvertInlineFunctionParameterDefs(NodeList`1<PropDefinition> parameterDefs, SemanticResolver sr);
    private static DbLambda ConvertInlineFunctionDefinition(InlineFunctionInfo functionInfo, SemanticResolver sr);
    private static ExpressionResolution Convert(Node astExpr, SemanticResolver sr);
    private static DbExpression ConvertValueExpression(Node astExpr, SemanticResolver sr);
    private static DbExpression ConvertValueExpressionAllowUntypedNulls(Node astExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertValueExpressionsWithUntypedNulls(Node leftAst, Node rightAst, ErrorContext errCtx, Func`1<string> formatMessage, SemanticResolver sr);
    private static ExpressionResolution ConvertLiteral(Node expr, SemanticResolver sr);
    private static TypeUsage GetLiteralTypeUsage(Literal literal);
    private static ExpressionResolution ConvertIdentifier(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertIdentifier(Identifier identifier, bool leftHandSideOfMemberAccess, SemanticResolver sr);
    private static ExpressionResolution ConvertDotExpr(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertParenExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertGroupPartitionExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertMethodExpr(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertMethodExpr(MethodExpr methodExpr, bool includeInlineFunctions, SemanticResolver sr);
    private static IDisposable ConvertMethodExpr_TryEnterIgnoreEntityContainerNameResolution(DotExpr leftExpr, SemanticResolver sr);
    private static IDisposable ConvertMethodExpr_TryEnterV1ViewGenBackwardCompatibilityResolution(DotExpr leftExpr, SemanticResolver sr);
    private static bool TryConvertInlineFunctionCall(InlineFunctionGroup inlineFunctionGroup, MethodExpr methodExpr, SemanticResolver sr, ValueExpression& inlineFunctionCall);
    private static ValueExpression ConvertTypeConstructorCall(MetadataType metadataType, MethodExpr methodExpr, SemanticResolver sr);
    private static ValueExpression ConvertModelFunctionCall(MetadataFunctionGroup metadataFunctionGroup, MethodExpr methodExpr, SemanticResolver sr);
    private static DbExpression ConvertAggregateFunctionInGroupScope(MethodExpr methodExpr, MetadataFunctionGroup metadataFunctionGroup, SemanticResolver sr);
    private static bool TryConvertAsResolvedGroupAggregate(GroupAggregateExpr groupAggregateExpr, SemanticResolver sr, DbExpression& converted);
    private static bool TryConvertAsCollectionFunction(MethodExpr methodExpr, MetadataFunctionGroup metadataFunctionGroup, SemanticResolver sr, List`1& argTypes, DbExpression& converted);
    private static bool TryConvertAsFunctionAggregate(MethodExpr methodExpr, MetadataFunctionGroup metadataFunctionGroup, List`1<TypeUsage> argTypes, SemanticResolver sr, DbExpression& converted);
    private static DbExpression CreateConstructorCallExpression(MethodExpr methodExpr, TypeUsage type, List`1<DbExpression> args, List`1<DbRelatedEntityRef> relshipExprList, SemanticResolver sr);
    private static DbFunctionExpression CreateModelFunctionCallExpression(MethodExpr methodExpr, MetadataFunctionGroup metadataFunctionGroup, SemanticResolver sr);
    private static List`1<DbExpression> ConvertFunctionArguments(NodeList`1<Node> astExprList, SemanticResolver sr, List`1& argTypes);
    private static void ConvertUntypedNullsInArguments(List`1<DbExpression> args, IList`1<TParameterMetadata> parametersMetadata, Func`2<TParameterMetadata, TypeUsage> getParameterTypeUsage);
    private static ExpressionResolution ConvertParameter(Node expr, SemanticResolver sr);
    private static DbRelatedEntityRef ConvertRelatedEntityRef(RelshipNavigationExpr relshipExpr, EntityType driverEntityType, SemanticResolver sr);
    private static ExpressionResolution ConvertRelshipNavigationExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertRefExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertDeRefExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertCreateRefExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertKeyExpr(Node astExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertBuiltIn(Node astExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertArithmeticArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertPlusOperands(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertLogicalArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertEqualCompArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertOrderCompArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertSetArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static Pair`2<DbExpression, DbExpression> ConvertInExprArgs(BuiltInExpr astBuiltInExpr, SemanticResolver sr);
    private static void ValidateTypeForNullExpression(TypeUsage type, ErrorContext errCtx);
    private static TypeUsage ConvertTypeName(Node typeName, SemanticResolver sr);
    private static TypeUsage ConvertTypeSpecArgs(TypeUsage parameterizedType, NodeList`1<Node> typeSpecArgs, ErrorContext errCtx);
    private static void ConvertTypeFacetValue(PrimitiveType type, Literal value, string facetName, Byte& byteValue);
    private static TypeUsage ConvertTypeDefinition(Node typeDefinitionExpr, SemanticResolver sr);
    private static ExpressionResolution ConvertRowConstructor(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertMultisetConstructor(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertCaseExpr(Node expr, SemanticResolver sr);
    private static ExpressionResolution ConvertQueryExpr(Node expr, SemanticResolver sr);
    private static DbExpression ProcessSelectClause(DbExpressionBinding source, QueryExpr queryExpr, bool queryProjectionProcessed, SemanticResolver sr);
    private static List`1<KeyValuePair`2<string, DbExpression>> ConvertSelectClauseItems(QueryExpr queryExpr, SemanticResolver sr);
    private static DbExpression CreateProjectExpression(DbExpressionBinding source, SelectClause selectClause, List`1<KeyValuePair`2<string, DbExpression>> projectionItems);
    private static void ValidateDistinctProjection(TypeUsage projectExpressionResultType, SelectClause selectClause);
    private static void ValidateDistinctProjection(TypeUsage projectExpressionResultType, ErrorContext defaultErrCtx, List`1<ErrorContext> projectionItemErrCtxs);
    private static void ValidateExpressionIsCommandParamOrNonNegativeIntegerConstant(DbExpression expr, ErrorContext errCtx, string exprName);
    private static DbExpressionBinding ProcessFromClause(FromClause fromClause, SemanticResolver sr);
    private static DbExpressionBinding ProcessFromClauseItem(FromClauseItem fromClauseItem, SemanticResolver sr, List`1& scopeEntries);
    private static DbExpressionBinding ProcessAliasedFromClauseItem(AliasedExpr aliasedExpr, SemanticResolver sr, List`1& scopeEntries);
    private static DbExpressionBinding ProcessJoinClauseItem(JoinClauseItem joinClause, SemanticResolver sr, List`1& scopeEntries);
    private static DbExpressionKind MapJoinKind(JoinKind joinKind);
    private static DbExpressionBinding ProcessApplyClauseItem(ApplyClauseItem applyClause, SemanticResolver sr, List`1& scopeEntries);
    private static DbExpressionKind MapApplyKind(ApplyKind applyKind);
    private static DbExpressionBinding ProcessWhereClause(DbExpressionBinding source, Node whereClause, SemanticResolver sr);
    private static DbExpressionBinding ProcessHavingClause(DbExpressionBinding source, HavingClause havingClause, SemanticResolver sr);
    private static DbExpressionBinding ProcessWhereHavingClausePredicate(DbExpressionBinding source, Node predicate, ErrorContext errCtx, string bindingNameTemplate, SemanticResolver sr);
    private static DbExpressionBinding ProcessGroupByClause(DbExpressionBinding source, QueryExpr queryExpr, SemanticResolver sr);
    private static List`1<KeyValuePair`2<string, DbExpression>> ProcessGroupPartitionDefinitions(List`1<GroupAggregateInfo> groupAggregateInfos, DbVariableReferenceExpression groupAggregateVarRef, DbExpressionBinding groupBinding);
    private static bool IsTrivialInputProjection(DbVariableReferenceExpression lambdaVariable, DbExpression lambdaBody);
    private static DbExpressionBinding ProcessOrderByClause(DbExpressionBinding source, QueryExpr queryExpr, Boolean& queryProjectionProcessed, SemanticResolver sr);
    private static DbExpression ConvertSimpleInExpression(DbExpression left, DbExpression right);
    private static bool IsStringType(TypeUsage type);
    private static bool IsBooleanType(TypeUsage type);
    private static bool IsSubOrSuperType(TypeUsage type1, TypeUsage type2);
    private static Dictionary`2<Type, AstExprConverter> CreateAstExprConverters();
    private static Dictionary`2<BuiltInKind, BuiltInExprConverter> CreateBuiltInExprConverter();
    private static DbExpression ConvertBetweenExpr(BuiltInExpr bltInExpr, SemanticResolver sr);
}
internal class System.Data.Entity.Core.Common.EntitySql.SemanticResolver : object {
    private ParserOptions _parserOptions;
    private Dictionary`2<string, DbParameterReferenceExpression> _parameters;
    private Dictionary`2<string, DbVariableReferenceExpression> _variables;
    private TypeResolver _typeResolver;
    private ScopeManager _scopeManager;
    private List`1<ScopeRegion> _scopeRegions;
    private bool _ignoreEntityContainerNameResolution;
    private GroupAggregateInfo _currentGroupAggregateInfo;
    private UInt32 _namegenCounter;
    internal Dictionary`2<string, DbParameterReferenceExpression> Parameters { get; }
    internal Dictionary`2<string, DbVariableReferenceExpression> Variables { get; }
    internal TypeResolver TypeResolver { get; }
    internal ParserOptions ParserOptions { get; }
    internal StringComparer NameComparer { get; }
    internal IEnumerable`1<ScopeRegion> ScopeRegions { get; }
    internal ScopeRegion CurrentScopeRegion { get; }
    internal Scope CurrentScope { get; }
    internal int CurrentScopeIndex { get; }
    internal GroupAggregateInfo CurrentGroupAggregateInfo { get; }
    private SemanticResolver(ParserOptions parserOptions, Dictionary`2<string, DbParameterReferenceExpression> parameters, Dictionary`2<string, DbVariableReferenceExpression> variables, TypeResolver typeResolver);
    internal static SemanticResolver Create(Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables);
    internal SemanticResolver CloneForInlineFunctionConversion();
    private static Dictionary`2<string, DbParameterReferenceExpression> ProcessParameters(IEnumerable`1<DbParameterReferenceExpression> paramDefs, ParserOptions parserOptions);
    private static Dictionary`2<string, DbVariableReferenceExpression> ProcessVariables(IEnumerable`1<DbVariableReferenceExpression> varDefs, ParserOptions parserOptions);
    internal Dictionary`2<string, DbParameterReferenceExpression> get_Parameters();
    internal Dictionary`2<string, DbVariableReferenceExpression> get_Variables();
    internal TypeResolver get_TypeResolver();
    internal ParserOptions get_ParserOptions();
    internal StringComparer get_NameComparer();
    internal IEnumerable`1<ScopeRegion> get_ScopeRegions();
    internal ScopeRegion get_CurrentScopeRegion();
    internal Scope get_CurrentScope();
    internal int get_CurrentScopeIndex();
    internal GroupAggregateInfo get_CurrentGroupAggregateInfo();
    private DbExpression GetExpressionFromScopeEntry(ScopeEntry scopeEntry, int scopeIndex, string varName, ErrorContext errCtx);
    internal IDisposable EnterIgnoreEntityContainerNameResolution();
    internal ExpressionResolution ResolveSimpleName(string name, bool leftHandSideOfMemberAccess, ErrorContext errCtx);
    internal MetadataMember ResolveSimpleFunctionName(string name, ErrorContext errCtx);
    private bool TryScopeLookup(string key, ScopeEntry& scopeEntry, Int32& scopeIndex);
    internal MetadataMember ResolveMetadataMemberName(String[] name, ErrorContext errCtx);
    internal ValueExpression ResolvePropertyAccess(DbExpression valueExpr, string name, ErrorContext errCtx);
    private bool TryResolveAsPropertyAccess(DbExpression valueExpr, string name, DbExpression& propertyExpr);
    private bool TryResolveAsRefPropertyAccess(DbExpression valueExpr, string name, ErrorContext errCtx, DbExpression& propertyExpr);
    internal ExpressionResolution ResolveEntityContainerMemberAccess(EntityContainer entityContainer, string name, ErrorContext errCtx);
    private bool TryResolveEntityContainerMemberAccess(EntityContainer entityContainer, string name, ExpressionResolution& resolution);
    internal MetadataMember ResolveMetadataMemberAccess(MetadataMember metadataMember, string name, ErrorContext errCtx);
    internal bool TryResolveInternalAggregateName(string name, ErrorContext errCtx, DbExpression& dbExpression);
    internal bool TryResolveDotExprAsGroupKeyAlternativeName(DotExpr dotExpr, ValueExpression& groupKeyResolution);
    internal string GenerateInternalName(string hint);
    private string CreateNewAlias(DbExpression expr);
    internal string InferAliasName(AliasedExpr aliasedExpr, DbExpression convertedExpression);
    internal IDisposable EnterScopeRegion();
    internal void RollbackToScope(int scopeIndex);
    internal void EnterScope();
    internal void LeaveScope();
    internal bool IsInAnyGroupScope();
    internal ScopeRegion GetDefiningScopeRegion(int scopeIndex);
    private void SetScopeRegionCorrelationFlag(int scopeIndex);
    internal IDisposable EnterFunctionAggregate(MethodExpr methodExpr, ErrorContext errCtx, FunctionAggregateInfo& aggregateInfo);
    internal IDisposable EnterGroupPartition(GroupPartitionExpr groupPartitionExpr, ErrorContext errCtx, GroupPartitionInfo& aggregateInfo);
    internal IDisposable EnterGroupKeyDefinition(GroupAggregateKind aggregateKind, ErrorContext errCtx, GroupKeyAggregateInfo& aggregateInfo);
    private IDisposable EnterGroupAggregate(GroupAggregateInfo aggregateInfo);
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static TFunctionMetadata ResolveFunctionOverloads(IList`1<TFunctionMetadata> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TFunctionMetadata, IList`1<TFunctionParameterMetadata>> getSignatureParams, Func`2<TFunctionParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TFunctionParameterMetadata, ParameterMode> getParameterMode, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    private static IEnumerable`1<TypeUsage> UntypedNullAwareFlattenArgumentType(TypeUsage argType);
    private static IEnumerable`1<TypeUsage> UntypedNullAwareFlattenParameterType(TypeUsage paramType, TypeUsage argType);
    private static bool UntypedNullAwareIsPromotableTo(TypeUsage fromType, TypeUsage toType);
    private static bool UntypedNullAwareIsStructurallyEqual(TypeUsage fromType, TypeUsage toType);
    [CompilerGeneratedAttribute]
private void <EnterIgnoreEntityContainerNameResolution>b__35_0();
    [CompilerGeneratedAttribute]
private void <EnterScopeRegion>b__51_0();
}
internal class System.Data.Entity.Core.Common.EntitySql.SourceScopeEntry : ScopeEntry {
    private String[] _alternativeName;
    private List`1<string> _propRefs;
    private DbExpression _varBasedExpression;
    private DbExpression _groupVarBasedExpression;
    private DbExpression _groupAggBasedExpression;
    [CompilerGeneratedAttribute]
private bool <IsJoinClauseLeftExpr>k__BackingField;
    private DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.GroupVarBasedExpression { get; }
    private DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.GroupAggBasedExpression { get; }
    internal bool IsJoinClauseLeftExpr { get; internal set; }
    private String[] System.Data.Entity.Core.Common.EntitySql.IGetAlternativeName.AlternativeName { get; }
    internal SourceScopeEntry(DbVariableReferenceExpression varRef);
    internal SourceScopeEntry(DbVariableReferenceExpression varRef, String[] alternativeName);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
    private sealed virtual override DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupVarBasedExpression();
    private sealed virtual override DbExpression System.Data.Entity.Core.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupAggBasedExpression();
    [CompilerGeneratedAttribute]
internal bool get_IsJoinClauseLeftExpr();
    [CompilerGeneratedAttribute]
internal void set_IsJoinClauseLeftExpr(bool value);
    private sealed virtual override String[] System.Data.Entity.Core.Common.EntitySql.IGetAlternativeName.get_AlternativeName();
    internal SourceScopeEntry AddParentVar(DbVariableReferenceExpression parentVarRef);
    internal void ReplaceParentVar(DbVariableReferenceExpression parentVarRef);
    internal void AdjustToGroupVar(DbVariableReferenceExpression parentVarRef, DbVariableReferenceExpression parentGroupVarRef, DbVariableReferenceExpression groupAggRef);
    internal void RollbackAdjustmentToGroupVar(DbVariableReferenceExpression pregroupParentVarRef);
}
internal class System.Data.Entity.Core.Common.EntitySql.TypeResolver : object {
    private Perspective _perspective;
    private ParserOptions _parserOptions;
    private Dictionary`2<string, MetadataNamespace> _aliasedNamespaces;
    private HashSet`1<MetadataNamespace> _namespaces;
    private Dictionary`2<string, List`1<InlineFunctionInfo>> _functionDefinitions;
    private bool _includeInlineFunctions;
    private bool _resolveLeftMostUnqualifiedNameAsNamespaceOnly;
    internal Perspective Perspective { get; }
    internal ICollection`1<MetadataNamespace> NamespaceImports { get; }
    internal static TypeUsage StringType { get; }
    internal static TypeUsage BooleanType { get; }
    internal static TypeUsage Int64Type { get; }
    internal TypeResolver(Perspective perspective, ParserOptions parserOptions);
    internal Perspective get_Perspective();
    internal ICollection`1<MetadataNamespace> get_NamespaceImports();
    internal static TypeUsage get_StringType();
    internal static TypeUsage get_BooleanType();
    internal static TypeUsage get_Int64Type();
    internal void AddAliasedNamespaceImport(string alias, MetadataNamespace namespace, ErrorContext errCtx);
    internal void AddNamespaceImport(MetadataNamespace namespace, ErrorContext errCtx);
    internal void DeclareInlineFunction(string name, InlineFunctionInfo functionInfo);
    internal IDisposable EnterFunctionNameResolution(bool includeInlineFunctions);
    internal IDisposable EnterBackwardCompatibilityResolution();
    internal MetadataMember ResolveMetadataMemberName(String[] name, ErrorContext errCtx);
    internal MetadataMember ResolveMetadataMemberAccess(MetadataMember qualifier, string name, ErrorContext errCtx);
    internal MetadataMember ResolveUnqualifiedName(string name, bool partOfQualifiedName, ErrorContext errCtx);
    private MetadataMember ResolveFullyQualifiedName(String[] name, int length, ErrorContext errCtx);
    private static Exception AmbiguousMetadataMemberName(ErrorContext errCtx, string name, MetadataNamespace ns1, MetadataNamespace ns2);
    private bool TryGetTypeFromMetadata(string typeFullName, MetadataType& type);
    internal bool TryGetFunctionFromMetadata(string namespaceName, string functionName, MetadataFunctionGroup& functionGroup);
    private bool TryGetInlineFunction(string functionName, InlineFunctionGroup& inlineFunctionGroup);
    internal static string GetFullName(String[] names);
    [CompilerGeneratedAttribute]
private void <EnterBackwardCompatibilityResolution>b__23_0();
}
internal class System.Data.Entity.Core.Common.EntitySql.ValueExpression : ExpressionResolution {
    internal DbExpression Value;
    internal string ExpressionClassName { get; }
    internal static string ValueClassName { get; }
    internal ValueExpression(DbExpression value);
    internal virtual string get_ExpressionClassName();
    internal static string get_ValueClassName();
}
public class System.Data.Entity.Core.Common.FieldMetadata : ValueType {
    private EdmMember _fieldType;
    private int _ordinal;
    public EdmMember FieldType { get; }
    public int Ordinal { get; }
    public FieldMetadata(int ordinal, EdmMember fieldType);
    public EdmMember get_FieldType();
    public int get_Ordinal();
}
internal static class System.Data.Entity.Core.Common.Internal.DbTypeMap : object {
    internal static TypeUsage AnsiString;
    internal static TypeUsage AnsiStringFixedLength;
    internal static TypeUsage String;
    internal static TypeUsage StringFixedLength;
    internal static TypeUsage Xml;
    internal static TypeUsage Binary;
    internal static TypeUsage Boolean;
    internal static TypeUsage Byte;
    internal static TypeUsage DateTime;
    internal static TypeUsage Date;
    internal static TypeUsage DateTime2;
    internal static TypeUsage Time;
    internal static TypeUsage DateTimeOffset;
    internal static TypeUsage Decimal;
    internal static TypeUsage Currency;
    internal static TypeUsage Double;
    internal static TypeUsage Guid;
    internal static TypeUsage Int16;
    internal static TypeUsage Int32;
    internal static TypeUsage Int64;
    internal static TypeUsage Single;
    internal static TypeUsage SByte;
    private static DbTypeMap();
    internal static bool TryGetModelTypeUsage(DbType dbType, TypeUsage& modelType);
    private static TypeUsage CreateType(PrimitiveTypeKind type);
    private static TypeUsage CreateType(PrimitiveTypeKind type, FacetValues facets);
}
internal static class System.Data.Entity.Core.Common.Internal.Materialization.CodeGenEmitter : object {
    internal static MethodInfo CodeGenEmitter_BinaryEquals;
    internal static MethodInfo CodeGenEmitter_CheckedConvert;
    internal static MethodInfo CodeGenEmitter_Compile;
    internal static MethodInfo DbDataReader_GetValue;
    internal static MethodInfo DbDataReader_GetString;
    internal static MethodInfo DbDataReader_GetInt16;
    internal static MethodInfo DbDataReader_GetInt32;
    internal static MethodInfo DbDataReader_GetInt64;
    internal static MethodInfo DbDataReader_GetBoolean;
    internal static MethodInfo DbDataReader_GetDecimal;
    internal static MethodInfo DbDataReader_GetFloat;
    internal static MethodInfo DbDataReader_GetDouble;
    internal static MethodInfo DbDataReader_GetDateTime;
    internal static MethodInfo DbDataReader_GetGuid;
    internal static MethodInfo DbDataReader_GetByte;
    internal static MethodInfo DbDataReader_IsDBNull;
    internal static ConstructorInfo EntityKey_ctor_SingleKey;
    internal static ConstructorInfo EntityKey_ctor_CompositeKey;
    internal static MethodInfo EntityWrapperFactory_GetEntityWithChangeTrackerStrategyFunc;
    internal static MethodInfo EntityWrapperFactory_GetEntityWithKeyStrategyStrategyFunc;
    internal static MethodInfo EntityProxyTypeInfo_SetEntityWrapper;
    internal static MethodInfo EntityWrapperFactory_GetNullPropertyAccessorStrategyFunc;
    internal static MethodInfo EntityWrapperFactory_GetPocoEntityKeyStrategyFunc;
    internal static MethodInfo EntityWrapperFactory_GetPocoPropertyAccessorStrategyFunc;
    internal static MethodInfo EntityWrapperFactory_GetSnapshotChangeTrackingStrategyFunc;
    internal static PropertyInfo EntityWrapperFactory_NullWrapper;
    internal static PropertyInfo IEntityWrapper_Entity;
    internal static MethodInfo IEqualityComparerOfString_Equals;
    internal static ConstructorInfo MaterializedDataRecord_ctor;
    internal static MethodInfo RecordState_GatherData;
    internal static MethodInfo RecordState_SetNullRecord;
    internal static MethodInfo Shaper_Discriminate;
    internal static MethodInfo Shaper_GetPropertyValueWithErrorHandling;
    internal static MethodInfo Shaper_GetColumnValueWithErrorHandling;
    internal static MethodInfo Shaper_GetHierarchyIdColumnValue;
    internal static MethodInfo Shaper_GetGeographyColumnValue;
    internal static MethodInfo Shaper_GetGeometryColumnValue;
    internal static MethodInfo Shaper_GetSpatialColumnValueWithErrorHandling;
    internal static MethodInfo Shaper_GetSpatialPropertyValueWithErrorHandling;
    internal static MethodInfo Shaper_HandleEntity;
    internal static MethodInfo Shaper_HandleEntityAppendOnly;
    internal static MethodInfo Shaper_HandleEntityNoTracking;
    internal static MethodInfo Shaper_HandleFullSpanCollection;
    internal static MethodInfo Shaper_HandleFullSpanElement;
    internal static MethodInfo Shaper_HandleIEntityWithKey;
    internal static MethodInfo Shaper_HandleRelationshipSpan;
    internal static MethodInfo Shaper_SetColumnValue;
    internal static MethodInfo Shaper_SetEntityRecordInfo;
    internal static MethodInfo Shaper_SetState;
    internal static MethodInfo Shaper_SetStatePassthrough;
    internal static Expression DBNull_Value;
    internal static ParameterExpression Shaper_Parameter;
    internal static Expression Shaper_Reader;
    internal static Expression Shaper_Workspace;
    internal static Expression Shaper_State;
    internal static Expression Shaper_Context;
    internal static Expression Shaper_Context_Options;
    internal static Expression Shaper_ProxyCreationEnabled;
    private static CodeGenEmitter();
    internal static bool BinaryEquals(Byte[] left, Byte[] right);
    internal static Func`2<Shaper, TResult> Compile(Expression body);
    internal static Expression`1<Func`2<Shaper, TResult>> BuildShaperLambda(Expression body);
    internal static object Compile(Type resultType, Expression body);
    internal static Expression Emit_AndAlso(IEnumerable`1<Expression> operands);
    internal static Expression Emit_BitwiseOr(IEnumerable`1<Expression> operands);
    internal static Expression Emit_NullConstant(Type type);
    internal static Expression Emit_WrappedNullConstant();
    internal static Expression Emit_EnsureType(Expression input, Type type);
    internal static Expression Emit_EnsureTypeAndWrap(Expression input, Expression keyReader, Expression entitySetReader, Type requestedType, Type identityType, Type actualType, MergeOption mergeOption, bool isProxy);
    internal static Expression CreateEntityWrapper(Expression input, Expression keyReader, Expression entitySetReader, Type actualType, Type identityType, MergeOption mergeOption, bool isProxy);
    internal static Expression Emit_UnwrapAndEnsureType(Expression input, Type type);
    internal static TTarget CheckedConvert(TSource value);
    internal static Expression Emit_Equal(Expression left, Expression right);
    internal static Expression Emit_EntityKey_HasValue(SimpleColumnMap[] keyColumns);
    internal static Expression Emit_Reader_GetValue(int ordinal, Type type);
    internal static Expression Emit_Reader_IsDBNull(int ordinal);
    internal static Expression Emit_Reader_IsDBNull(ColumnMap columnMap);
    internal static Expression Emit_Conditional_NotDBNull(Expression result, int ordinal, Type columnType);
    internal static MethodInfo GetReaderMethod(Type type, Boolean& isNullable);
    internal static Expression Emit_Shaper_GetPropertyValueWithErrorHandling(Type propertyType, int ordinal, string propertyName, string typeName, TypeUsage columnType);
    internal static Expression Emit_Shaper_GetColumnValueWithErrorHandling(Type resultType, int ordinal, TypeUsage columnType);
    internal static Expression Emit_Shaper_GetHierarchyIdColumnValue(int ordinal);
    internal static Expression Emit_Shaper_GetGeographyColumnValue(int ordinal);
    internal static Expression Emit_Shaper_GetGeometryColumnValue(int ordinal);
    internal static Expression Emit_Shaper_GetState(int stateSlotNumber, Type type);
    internal static Expression Emit_Shaper_SetState(int stateSlotNumber, Expression value);
    internal static Expression Emit_Shaper_SetStatePassthrough(int stateSlotNumber, Expression value);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.CollectionTranslatorResult : TranslatorResult {
    internal Expression ExpressionToGetCoordinator;
    internal CollectionTranslatorResult(Expression returnedExpression, Type requestedType, Expression expressionToGetCoordinator);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.ColumnMapKeyBuilder : ColumnMapVisitor`1<int> {
    private StringBuilder _builder;
    private SpanIndex _spanIndex;
    private ColumnMapKeyBuilder(SpanIndex spanIndex);
    internal static string GetColumnMapKey(ColumnMap columnMap, SpanIndex spanIndex);
    internal void Append(string value);
    internal void Append(string prefix, Type type);
    internal void Append(string prefix, TypeUsage type);
    internal void Append(string prefix, EdmType type);
    private void Append(string prefix, string value);
    private void Append(string prefix, ColumnMap columnMap);
    private void Append(string prefix, IEnumerable`1<ColumnMap> elements);
    private void Append(string prefix, EntityIdentity entityIdentity);
    private void Append(string prefix, EntitySet entitySet);
    private void AppendValue(string prefix, object value);
    internal virtual void Visit(ComplexTypeColumnMap columnMap, int dummy);
    internal virtual void Visit(DiscriminatedCollectionColumnMap columnMap, int dummy);
    internal virtual void Visit(EntityColumnMap columnMap, int dummy);
    internal virtual void Visit(SimplePolymorphicColumnMap columnMap, int dummy);
    internal virtual void Visit(RecordColumnMap columnMap, int dummy);
    internal virtual void Visit(RefColumnMap columnMap, int dummy);
    internal virtual void Visit(ScalarColumnMap columnMap, int dummy);
    internal virtual void Visit(SimpleCollectionColumnMap columnMap, int dummy);
    internal virtual void Visit(VarRefColumnMap columnMap, int dummy);
    internal virtual void Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, int dummy);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.CompensatingCollection`1 : object {
    private IEnumerable`1<TElement> _source;
    private Expression _expression;
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public CompensatingCollection`1(IEnumerable`1<TElement> source);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, K> keySelector, IComparer`1<K> comparer, bool descending);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
}
internal abstract class System.Data.Entity.Core.Common.Internal.Materialization.Coordinator : object {
    internal CoordinatorFactory CoordinatorFactory;
    internal Coordinator Parent;
    [CompilerGeneratedAttribute]
private Coordinator <Child>k__BackingField;
    internal Coordinator Next;
    [CompilerGeneratedAttribute]
private bool <IsEntered>k__BackingField;
    public Coordinator Child { get; protected set; }
    public bool IsEntered { get; protected set; }
    internal bool IsRoot { get; }
    protected Coordinator(CoordinatorFactory coordinatorFactory, Coordinator parent, Coordinator next);
    [CompilerGeneratedAttribute]
public Coordinator get_Child();
    [CompilerGeneratedAttribute]
protected void set_Child(Coordinator value);
    [CompilerGeneratedAttribute]
public bool get_IsEntered();
    [CompilerGeneratedAttribute]
protected void set_IsEntered(bool value);
    internal bool get_IsRoot();
    internal void Initialize(Shaper shaper);
    internal int MaxDistanceToLeaf();
    internal abstract virtual void ResetCollection(Shaper shaper);
    internal bool HasNextElement(Shaper shaper);
    internal abstract virtual void ReadNextElement(Shaper shaper);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.Coordinator`1 : Coordinator {
    internal CoordinatorFactory`1<T> TypedCoordinatorFactory;
    private T _current;
    private ICollection`1<T> _elements;
    private List`1<IEntityWrapper> _wrappedElements;
    private Action`2<Shaper, List`1<IEntityWrapper>> _handleClose;
    private bool IsUsingElementCollection;
    internal T Current { get; }
    internal Coordinator`1(CoordinatorFactory`1<T> coordinatorFactory, Coordinator parent, Coordinator next);
    internal virtual T get_Current();
    internal virtual void ResetCollection(Shaper shaper);
    internal virtual void ReadNextElement(Shaper shaper);
    internal void RegisterCloseHandler(Action`2<Shaper, List`1<IEntityWrapper>> closeHandler);
    internal void SetCurrentToDefault();
    private IEnumerable`1<T> GetElements();
}
internal abstract class System.Data.Entity.Core.Common.Internal.Materialization.CoordinatorFactory : object {
    private static Func`2<Shaper, bool> _alwaysTrue;
    private static Func`2<Shaper, bool> _alwaysFalse;
    internal int Depth;
    internal int StateSlot;
    internal Func`2<Shaper, bool> HasData;
    internal Func`2<Shaper, bool> SetKeys;
    internal Func`2<Shaper, bool> CheckKeys;
    internal ReadOnlyCollection`1<CoordinatorFactory> NestedCoordinators;
    internal bool IsLeafResult;
    internal bool IsSimple;
    internal ReadOnlyCollection`1<RecordStateFactory> RecordStateFactories;
    protected CoordinatorFactory(int depth, int stateSlot, Func`2<Shaper, bool> hasData, Func`2<Shaper, bool> setKeys, Func`2<Shaper, bool> checkKeys, CoordinatorFactory[] nestedCoordinators, RecordStateFactory[] recordStateFactories);
    private static CoordinatorFactory();
    internal abstract virtual Coordinator CreateCoordinator(Coordinator parent, Coordinator next);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.CoordinatorFactory`1 : CoordinatorFactory {
    internal Func`2<Shaper, IEntityWrapper> WrappedElement;
    internal Func`2<Shaper, TElement> Element;
    internal Func`2<Shaper, TElement> ElementWithErrorHandling;
    internal Func`2<Shaper, ICollection`1<TElement>> InitializeCollection;
    private string Description;
    internal CoordinatorFactory`1(int depth, int stateSlot, Expression`1<Func`2<Shaper, bool>> hasData, Expression`1<Func`2<Shaper, bool>> setKeys, Expression`1<Func`2<Shaper, bool>> checkKeys, CoordinatorFactory[] nestedCoordinators, Expression`1<Func`2<Shaper, TElement>> element, Expression`1<Func`2<Shaper, IEntityWrapper>> wrappedElement, Expression`1<Func`2<Shaper, TElement>> elementWithErrorHandling, Expression`1<Func`2<Shaper, ICollection`1<TElement>>> initializeCollection, RecordStateFactory[] recordStateFactories);
    public CoordinatorFactory`1(int depth, int stateSlot, Expression hasData, Expression setKeys, Expression checkKeys, CoordinatorFactory[] nestedCoordinators, Expression element, Expression elementWithErrorHandling, Expression initializeCollection, RecordStateFactory[] recordStateFactories);
    private static Func`2<Shaper, bool> CompilePredicate(Expression`1<Func`2<Shaper, bool>> predicate);
    private static string DescribeExpression(Expression expression);
    internal virtual Coordinator CreateCoordinator(Coordinator parent, Coordinator next);
    internal RecordState GetDefaultRecordState(Shaper`1<RecordState> shaper);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.CoordinatorScratchpad : object {
    private Type _elementType;
    private CoordinatorScratchpad _parent;
    private List`1<CoordinatorScratchpad> _nestedCoordinatorScratchpads;
    private Dictionary`2<Expression, Expression> _expressionWithErrorHandlingMap;
    private HashSet`1<LambdaExpression> _inlineDelegates;
    [CompilerGeneratedAttribute]
private Expression <SetKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <CheckKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <HasData>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InitializeCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StateSlotNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    private List`1<RecordStateScratchpad> _recordStateScratchpads;
    internal CoordinatorScratchpad Parent { get; }
    internal Expression SetKeys { get; internal set; }
    internal Expression CheckKeys { get; internal set; }
    internal Expression HasData { get; internal set; }
    internal Expression Element { get; internal set; }
    internal Expression InitializeCollection { get; internal set; }
    internal int StateSlotNumber { get; internal set; }
    internal int Depth { get; internal set; }
    internal CoordinatorScratchpad(Type elementType);
    internal CoordinatorScratchpad get_Parent();
    [CompilerGeneratedAttribute]
internal Expression get_SetKeys();
    [CompilerGeneratedAttribute]
internal void set_SetKeys(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_CheckKeys();
    [CompilerGeneratedAttribute]
internal void set_CheckKeys(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_HasData();
    [CompilerGeneratedAttribute]
internal void set_HasData(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_InitializeCollection();
    [CompilerGeneratedAttribute]
internal void set_InitializeCollection(Expression value);
    [CompilerGeneratedAttribute]
internal int get_StateSlotNumber();
    [CompilerGeneratedAttribute]
internal void set_StateSlotNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_Depth();
    [CompilerGeneratedAttribute]
internal void set_Depth(int value);
    internal void AddExpressionWithErrorHandling(Expression expression, Expression expressionWithErrorHandling);
    internal void AddInlineDelegate(LambdaExpression expression);
    internal void AddNestedCoordinator(CoordinatorScratchpad nested);
    internal CoordinatorFactory Compile();
    internal RecordStateScratchpad CreateRecordStateScratchpad();
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.RecordState : object {
    private RecordStateFactory RecordStateFactory;
    internal CoordinatorFactory CoordinatorFactory;
    private bool _pendingIsNull;
    private bool _currentIsNull;
    private EntityRecordInfo _currentEntityRecordInfo;
    private EntityRecordInfo _pendingEntityRecordInfo;
    internal Object[] CurrentColumnValues;
    internal Object[] PendingColumnValues;
    internal int ColumnCount { get; }
    internal DataRecordInfo DataRecordInfo { get; }
    internal bool IsNull { get; }
    internal RecordState(RecordStateFactory recordStateFactory, CoordinatorFactory coordinatorFactory);
    internal void AcceptPendingValues();
    internal int get_ColumnCount();
    internal DataRecordInfo get_DataRecordInfo();
    internal bool get_IsNull();
    internal long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal string GetName(int ordinal);
    internal int GetOrdinal(string name);
    internal TypeUsage GetTypeUsage(int ordinal);
    internal bool IsNestedObject(int ordinal);
    internal void ResetToDefaultState();
    internal RecordState GatherData(Shaper shaper);
    internal bool SetColumnValue(int ordinal, object value);
    internal bool SetEntityRecordInfo(EntityKey entityKey, EntitySet entitySet);
    internal RecordState SetNullRecord();
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.RecordStateFactory : object {
    internal int StateSlotNumber;
    internal int ColumnCount;
    internal DataRecordInfo DataRecordInfo;
    internal Func`2<Shaper, bool> GatherData;
    internal ReadOnlyCollection`1<RecordStateFactory> NestedRecordStateFactories;
    internal ReadOnlyCollection`1<string> ColumnNames;
    internal ReadOnlyCollection`1<TypeUsage> TypeUsages;
    internal ReadOnlyCollection`1<bool> IsColumnNested;
    internal bool HasNestedColumns;
    internal FieldNameLookup FieldNameLookup;
    private string Description;
    public RecordStateFactory(int stateSlotNumber, int columnCount, RecordStateFactory[] nestedRecordStateFactories, DataRecordInfo dataRecordInfo, Expression`1<Func`2<Shaper, bool>> gatherData, String[] propertyNames, TypeUsage[] typeUsages, Boolean[] isColumnNested);
    public RecordStateFactory(int stateSlotNumber, int columnCount, RecordStateFactory[] nestedRecordStateFactories, DataRecordInfo dataRecordInfo, Expression gatherData, String[] propertyNames, TypeUsage[] typeUsages);
    internal RecordState Create(CoordinatorFactory coordinatorFactory);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.RecordStateScratchpad : object {
    [CompilerGeneratedAttribute]
private int <StateSlotNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRecordInfo <DataRecordInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <GatherData>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeUsage[] <TypeUsages>k__BackingField;
    private List`1<RecordStateScratchpad> _nestedRecordStateScratchpads;
    internal int StateSlotNumber { get; internal set; }
    internal int ColumnCount { get; internal set; }
    internal DataRecordInfo DataRecordInfo { get; internal set; }
    internal Expression GatherData { get; internal set; }
    internal String[] PropertyNames { get; internal set; }
    internal TypeUsage[] TypeUsages { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_StateSlotNumber();
    [CompilerGeneratedAttribute]
internal void set_StateSlotNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_ColumnCount();
    [CompilerGeneratedAttribute]
internal void set_ColumnCount(int value);
    [CompilerGeneratedAttribute]
internal DataRecordInfo get_DataRecordInfo();
    [CompilerGeneratedAttribute]
internal void set_DataRecordInfo(DataRecordInfo value);
    [CompilerGeneratedAttribute]
internal Expression get_GatherData();
    [CompilerGeneratedAttribute]
internal void set_GatherData(Expression value);
    [CompilerGeneratedAttribute]
internal String[] get_PropertyNames();
    [CompilerGeneratedAttribute]
internal void set_PropertyNames(String[] value);
    [CompilerGeneratedAttribute]
internal TypeUsage[] get_TypeUsages();
    [CompilerGeneratedAttribute]
internal void set_TypeUsages(TypeUsage[] value);
    internal RecordStateFactory Compile();
}
internal abstract class System.Data.Entity.Core.Common.Internal.Materialization.Shaper : object {
    private IList`1<IEntityWrapper> _materializedEntities;
    public DbDataReader Reader;
    public Object[] State;
    public ObjectContext Context;
    public MetadataWorkspace Workspace;
    public MergeOption MergeOption;
    protected bool Streaming;
    private Lazy`1<DbSpatialDataReader> _spatialReader;
    internal Shaper(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, int stateCount, bool streaming);
    public TElement Discriminate(Object[] discriminatorValues, Func`2<Object[], EntityType> discriminate, KeyValuePair`2[] elementDelegates);
    public IEntityWrapper HandleEntityNoTracking(IEntityWrapper wrappedEntity);
    public IEntityWrapper HandleEntity(IEntityWrapper wrappedEntity, EntityKey entityKey, EntitySet entitySet);
    public IEntityWrapper HandleEntityAppendOnly(Func`2<Shaper, IEntityWrapper> constructEntityDelegate, EntityKey entityKey, EntitySet entitySet);
    public IEntityWrapper HandleFullSpanCollection(IEntityWrapper wrappedEntity, Coordinator`1<TTargetEntity> coordinator, AssociationEndMember targetMember);
    public IEntityWrapper HandleFullSpanElement(IEntityWrapper wrappedSource, IEntityWrapper wrappedSpannedEntity, AssociationEndMember targetMember);
    public IEntityWrapper HandleRelationshipSpan(IEntityWrapper wrappedEntity, EntityKey targetKey, AssociationEndMember targetMember);
    private bool TryGetRelatedEnd(IEntityWrapper wrappedEntity, AssociationType associationType, string sourceEndName, string targetEndName, RelatedEnd& relatedEnd);
    private void SetIsLoadedForSpan(RelatedEnd relatedEnd, bool forceToTrue);
    public IEntityWrapper HandleIEntityWithKey(IEntityWrapper wrappedEntity, EntitySet entitySet);
    public bool SetColumnValue(int recordStateSlotNumber, int ordinal, object value);
    public bool SetEntityRecordInfo(int recordStateSlotNumber, EntityKey entityKey, EntitySet entitySet);
    public bool SetState(int ordinal, T value);
    public T SetStatePassthrough(int ordinal, T value);
    public TProperty GetPropertyValueWithErrorHandling(int ordinal, string propertyName, string typeName);
    public TColumn GetColumnValueWithErrorHandling(int ordinal);
    public HierarchyId GetHierarchyIdColumnValue(int ordinal);
    protected virtual DbSpatialDataReader CreateSpatialDataReader();
    public DbGeography GetGeographyColumnValue(int ordinal);
    public DbGeometry GetGeometryColumnValue(int ordinal);
    public TColumn GetSpatialColumnValueWithErrorHandling(int ordinal, PrimitiveTypeKind spatialTypeKind);
    public TProperty GetSpatialPropertyValueWithErrorHandling(int ordinal, string propertyName, string typeName, PrimitiveTypeKind spatialTypeKind);
    private void CheckClearedEntryOnSpan(object targetValue, IEntityWrapper wrappedSource, EntityKey sourceKey, AssociationEndMember targetMember);
    private void CheckClearedEntryOnSpan(EntityKey sourceKey, AssociationEndMember targetMember);
    private void FullSpanAction(IEntityWrapper wrappedSource, IList`1<TTargetEntity> spannedEntities, AssociationEndMember targetMember);
    private void UpdateEntry(IEntityWrapper wrappedEntity, EntityEntry existingEntry);
    public void RaiseMaterializedEvents();
    public void InitializeForOnMaterialize();
    protected void RegisterMaterializedEntityForEvent(IEntityWrapper wrappedEntity);
    [CompilerGeneratedAttribute]
private TColumn <GetSpatialColumnValueWithErrorHandling>b__29_0(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialColumnValueWithErrorHandling>b__29_1(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TColumn <GetSpatialColumnValueWithErrorHandling>b__29_2(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialColumnValueWithErrorHandling>b__29_3(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TColumn <GetSpatialColumnValueWithErrorHandling>b__29_4(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialColumnValueWithErrorHandling>b__29_5(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TColumn <GetSpatialColumnValueWithErrorHandling>b__29_6(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialColumnValueWithErrorHandling>b__29_7(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TProperty <GetSpatialPropertyValueWithErrorHandling>b__30_0(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialPropertyValueWithErrorHandling>b__30_1(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TProperty <GetSpatialPropertyValueWithErrorHandling>b__30_2(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialPropertyValueWithErrorHandling>b__30_3(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TProperty <GetSpatialPropertyValueWithErrorHandling>b__30_4(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialPropertyValueWithErrorHandling>b__30_5(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private TProperty <GetSpatialPropertyValueWithErrorHandling>b__30_6(DbDataReader reader, int column);
    [CompilerGeneratedAttribute]
private object <GetSpatialPropertyValueWithErrorHandling>b__30_7(DbDataReader reader, int column);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.Shaper`1 : Shaper {
    private bool _isObjectQuery;
    private bool _isActive;
    private IDbEnumerator`1<T> _rootEnumerator;
    private bool _readerOwned;
    [CompilerGeneratedAttribute]
private EventHandler OnDone;
    [CompilerGeneratedAttribute]
private bool <DataWaiting>k__BackingField;
    internal Coordinator`1<T> RootCoordinator;
    internal bool DataWaiting { get; internal set; }
    internal IDbEnumerator`1<T> RootEnumerator { get; }
    internal Shaper`1(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, int stateCount, CoordinatorFactory`1<T> rootCoordinatorFactory, bool readerOwned, bool streaming);
    [CompilerGeneratedAttribute]
internal void add_OnDone(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_OnDone(EventHandler value);
    [CompilerGeneratedAttribute]
internal bool get_DataWaiting();
    [CompilerGeneratedAttribute]
internal void set_DataWaiting(bool value);
    internal IDbEnumerator`1<T> get_RootEnumerator();
    private void InitializeRecordStates(CoordinatorFactory coordinatorFactory);
    public virtual IDbEnumerator`1<T> GetEnumerator();
    private void Finally();
    private bool StoreRead();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Common.Internal.Materialization.Shaper`1/<StoreReadAsync>d__19")]
private Task`1<bool> StoreReadAsync(CancellationToken cancellationToken);
    private void HandleReaderException(Exception e);
    private void StartMaterializingElement();
    private void StopMaterializingElement();
}
internal abstract class System.Data.Entity.Core.Common.Internal.Materialization.ShaperFactory : object {
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.ShaperFactory`1 : ShaperFactory {
    private int _stateCount;
    private CoordinatorFactory`1<T> _rootCoordinatorFactory;
    private MergeOption _mergeOption;
    [CompilerGeneratedAttribute]
private Type[] <ColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <NullableColumns>k__BackingField;
    public Type[] ColumnTypes { get; private set; }
    public Boolean[] NullableColumns { get; private set; }
    internal ShaperFactory`1(int stateCount, CoordinatorFactory`1<T> rootCoordinatorFactory, Type[] columnTypes, Boolean[] nullableColumns, MergeOption mergeOption);
    [CompilerGeneratedAttribute]
public Type[] get_ColumnTypes();
    [CompilerGeneratedAttribute]
private void set_ColumnTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Boolean[] get_NullableColumns();
    [CompilerGeneratedAttribute]
private void set_NullableColumns(Boolean[] value);
    internal Shaper`1<T> Create(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, bool readerOwned, bool streaming);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.Translator : object {
    public static MethodInfo GenericTranslateColumnMap;
    private static Translator();
    internal virtual ShaperFactory`1<T> TranslateColumnMap(ColumnMap columnMap, MetadataWorkspace workspace, SpanIndex spanIndex, MergeOption mergeOption, bool streaming, bool valueLayer);
    internal static ShaperFactory TranslateColumnMap(Translator translator, Type elementType, ColumnMap columnMap, MetadataWorkspace workspace, SpanIndex spanIndex, MergeOption mergeOption, bool streaming, bool valueLayer);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.TranslatorArg : ValueType {
    internal Type RequestedType;
    internal TranslatorArg(Type requestedType);
}
internal class System.Data.Entity.Core.Common.Internal.Materialization.TranslatorResult : object {
    private Expression ReturnedExpression;
    private Type RequestedType;
    internal Expression Expression { get; }
    internal Expression UnconvertedExpression { get; }
    internal Expression UnwrappedExpression { get; }
    internal TranslatorResult(Expression returnedExpression, Type requestedType);
    internal Expression get_Expression();
    internal Expression get_UnconvertedExpression();
    internal Expression get_UnwrappedExpression();
}
internal static class System.Data.Entity.Core.Common.Internal.MultipartIdentifier : object {
    private static int MaxParts;
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    private static void IncrementStringCount(List`1<string> ary, Int32& position);
    private static bool IsWhitespace(char ch);
    internal static List`1<string> ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator);
}
internal class System.Data.Entity.Core.Common.QueryCache.CompiledQueryCacheEntry : QueryCacheEntry {
    public Nullable`1<MergeOption> PropagatedMergeOption;
    private ConcurrentDictionary`2<string, ObjectQueryExecutionPlan> _plans;
    internal CompiledQueryCacheEntry(QueryCacheKey queryCacheKey, Nullable`1<MergeOption> mergeOption);
    internal ObjectQueryExecutionPlan GetExecutionPlan(MergeOption mergeOption, bool useCSharpNullComparisonBehavior);
    internal ObjectQueryExecutionPlan SetExecutionPlan(ObjectQueryExecutionPlan newPlan, bool useCSharpNullComparisonBehavior);
    internal bool TryGetResultType(TypeUsage& resultType);
    internal virtual object GetTarget();
    private static string GenerateLocalCacheKey(MergeOption mergeOption, bool useCSharpNullComparisonBehavior);
}
internal class System.Data.Entity.Core.Common.QueryCache.CompiledQueryCacheKey : QueryCacheKey {
    private Guid _cacheIdentity;
    internal CompiledQueryCacheKey(Guid cacheIdentity);
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.QueryCache.EntityClientCacheKey : QueryCacheKey {
    private CommandType _commandType;
    private string _eSqlStatement;
    private string _parametersToken;
    private int _parameterCount;
    private int _hashCode;
    internal EntityClientCacheKey(EntityCommand entityCommand);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    private static string GetTypeUsageToken(TypeUsage type);
    private static string GetParametersToken(EntityCommand entityCommand);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.QueryCache.EntitySqlQueryCacheKey : QueryCacheKey {
    private int _hashCode;
    private string _defaultContainer;
    private string _eSqlStatement;
    private string _parametersToken;
    private int _parameterCount;
    private string _includePathsToken;
    private MergeOption _mergeOption;
    private Type _resultType;
    private bool _streaming;
    internal EntitySqlQueryCacheKey(string defaultContainerName, string eSqlStatement, int parameterCount, string parametersToken, string includePathsToken, MergeOption mergeOption, bool streaming, Type resultType);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.QueryCache.LinqQueryCacheKey : QueryCacheKey {
    private int _hashCode;
    private string _expressionKey;
    private string _parametersToken;
    private int _parameterCount;
    private string _includePathsToken;
    private MergeOption _mergeOption;
    private Type _resultType;
    private bool _streaming;
    private bool _useCSharpNullComparisonBehavior;
    internal LinqQueryCacheKey(string expressionKey, int parameterCount, string parametersToken, string includePathsToken, MergeOption mergeOption, bool streaming, bool useCSharpNullComparisonBehavior, Type resultType);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.QueryCache.QueryCacheEntry : object {
    private QueryCacheKey _queryCacheKey;
    protected object _target;
    internal QueryCacheKey QueryCacheKey { get; }
    internal QueryCacheEntry(QueryCacheKey queryCacheKey, object target);
    internal virtual object GetTarget();
    internal QueryCacheKey get_QueryCacheKey();
}
internal abstract class System.Data.Entity.Core.Common.QueryCache.QueryCacheKey : object {
    protected static int EstimatedParameterStringSize;
    private UInt32 _hitCount;
    protected static StringComparison _stringComparison;
    [CompilerGeneratedAttribute]
private int <AgingIndex>k__BackingField;
    internal UInt32 HitCount { get; internal set; }
    internal int AgingIndex { get; internal set; }
    private static QueryCacheKey();
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    internal UInt32 get_HitCount();
    internal void set_HitCount(UInt32 value);
    [CompilerGeneratedAttribute]
internal int get_AgingIndex();
    [CompilerGeneratedAttribute]
internal void set_AgingIndex(int value);
    internal void UpdateHit();
    protected virtual bool Equals(string s, string t);
}
internal class System.Data.Entity.Core.Common.QueryCache.QueryCacheManager : object {
    private object _cacheDataLock;
    private Dictionary`2<QueryCacheKey, QueryCacheEntry> _cacheData;
    private int _maxNumberOfEntries;
    private int _sweepingTriggerHighMark;
    private EvictionTimer _evictionTimer;
    private static Int32[] _agingFactor;
    private static int _agingMaxIndex;
    private QueryCacheManager(int maximumSize, float loadFactor, int recycleMillis);
    private static QueryCacheManager();
    internal static QueryCacheManager Create();
    internal bool TryLookupAndAdd(QueryCacheEntry inQueryCacheEntry, QueryCacheEntry& outQueryCacheEntry);
    internal bool TryCacheLookup(TK key, TE& value);
    internal void Clear();
    private bool TryInternalCacheLookup(QueryCacheKey queryCacheKey, QueryCacheEntry& queryCacheEntry);
    private static void CacheRecyclerHandler(object state);
    private void SweepCache();
    public sealed virtual void Dispose();
}
internal class System.Data.Entity.Core.Common.QueryCache.ShaperFactoryQueryCacheKey`1 : QueryCacheKey {
    private string _columnMapKey;
    private MergeOption _mergeOption;
    private bool _isValueLayer;
    private bool _streaming;
    internal ShaperFactoryQueryCacheKey`1(string columnMapKey, MergeOption mergeOption, bool streaming, bool isValueLayer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Entity.Core.Common.TypeHelpers : object {
    internal static ReadOnlyMetadataCollection`1<EdmMember> EmptyArrayEdmMember;
    internal static FilteredReadOnlyMetadataCollection`2<EdmProperty, EdmMember> EmptyArrayEdmProperty;
    private static TypeHelpers();
    [ConditionalAttribute("DEBUG")]
internal static void AssertEdmType(TypeUsage typeUsage);
    [ConditionalAttribute("DEBUG")]
internal static void AssertEdmType(DbCommandTree commandTree);
    internal static bool IsValidSortOpKeyType(TypeUsage typeUsage);
    internal static bool IsValidGroupKeyType(TypeUsage typeUsage);
    internal static bool IsValidDistinctOpType(TypeUsage typeUsage);
    internal static bool IsSetComparableOpType(TypeUsage typeUsage);
    internal static bool IsValidIsNullOpType(TypeUsage typeUsage);
    internal static bool IsValidInOpType(TypeUsage typeUsage);
    internal static TypeUsage GetCommonTypeUsage(TypeUsage typeUsage1, TypeUsage typeUsage2);
    internal static TypeUsage GetCommonTypeUsage(IEnumerable`1<TypeUsage> types);
    internal static bool TryGetClosestPromotableType(TypeUsage fromType, TypeUsage& promotableType);
    internal static bool TryGetBooleanFacetValue(TypeUsage type, string facetName, Boolean& boolValue);
    internal static bool TryGetByteFacetValue(TypeUsage type, string facetName, Byte& byteValue);
    internal static bool TryGetIntFacetValue(TypeUsage type, string facetName, Int32& intValue);
    internal static bool TryGetIsFixedLength(TypeUsage type, Boolean& isFixedLength);
    internal static bool TryGetIsUnicode(TypeUsage type, Boolean& isUnicode);
    internal static bool IsFacetValueConstant(TypeUsage type, string facetName);
    internal static bool TryGetMaxLength(TypeUsage type, Int32& maxLength);
    internal static bool TryGetPrecision(TypeUsage type, Byte& precision);
    internal static bool TryGetScale(TypeUsage type, Byte& scale);
    internal static bool TryGetPrimitiveTypeKind(TypeUsage type, PrimitiveTypeKind& typeKind);
    internal static CollectionType CreateCollectionType(TypeUsage elementType);
    internal static TypeUsage CreateCollectionTypeUsage(TypeUsage elementType);
    internal static RowType CreateRowType(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns);
    internal static RowType CreateRowType(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns, InitializerMetadata initializerMetadata);
    internal static TypeUsage CreateRowTypeUsage(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns);
    internal static RefType CreateReferenceType(EntityTypeBase entityType);
    internal static TypeUsage CreateReferenceTypeUsage(EntityType entityType);
    internal static RowType CreateKeyRowType(EntityTypeBase entityType);
    internal static TypeUsage GetPrimitiveTypeUsageForScalar(TypeUsage scalarType);
    internal static TypeUsage CreateEnumUnderlyingTypeUsage(TypeUsage enumTypeUsage);
    internal static TypeUsage CreateSpatialUnionTypeUsage(TypeUsage spatialTypeUsage);
    internal static IBaseList`1<EdmMember> GetAllStructuralMembers(TypeUsage type);
    internal static IBaseList`1<EdmMember> GetAllStructuralMembers(EdmType edmType);
    internal static IEnumerable GetDeclaredStructuralMembers(TypeUsage type);
    internal static IEnumerable GetDeclaredStructuralMembers(EdmType edmType);
    internal static ReadOnlyMetadataCollection`1<EdmProperty> GetProperties(TypeUsage typeUsage);
    internal static ReadOnlyMetadataCollection`1<EdmProperty> GetProperties(EdmType edmType);
    internal static TypeUsage GetElementTypeUsage(TypeUsage type);
    internal static RowType GetTvfReturnType(EdmFunction tvf);
    internal static bool TryGetCollectionElementType(TypeUsage type, TypeUsage& elementType);
    internal static bool TryGetRefEntityType(TypeUsage type, EntityType& referencedEntityType);
    internal static TEdmType GetEdmType(TypeUsage typeUsage);
    internal static bool TryGetEdmType(TypeUsage typeUsage, TEdmType& type);
    internal static TypeUsage GetReadOnlyType(TypeUsage type);
    internal static string GetFullName(string qualifier, string name);
    internal static DbType ConvertClrTypeToDbType(Type clrType);
    internal static bool IsIntegerConstant(TypeUsage valueType, object value, long expectedValue);
    internal static TypeUsage GetLiteralTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    internal static TypeUsage GetLiteralTypeUsage(PrimitiveTypeKind primitiveTypeKind, bool isUnicode);
    internal static bool IsCanonicalFunction(EdmFunction function);
}
internal class System.Data.Entity.Core.Common.Utils.AliasGenerator : object {
    private static int MaxPrefixCount;
    private static int CacheSize;
    private static String[] _counterNames;
    private static Dictionary`2<string, String[]> _prefixCounter;
    private int _counter;
    private string _prefix;
    private String[] _cache;
    internal AliasGenerator(string prefix);
    internal AliasGenerator(string prefix, int cacheSize);
    private static AliasGenerator();
    internal string Next();
    internal string GetName(int index);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.AndExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal AndExpr`1(BoolExpr`1[] children);
    internal AndExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.BasicVisitor`1 : Visitor`2<T_Identifier, BoolExpr`1<T_Identifier>> {
    internal virtual BoolExpr`1<T_Identifier> VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitOr(OrExpr`1<T_Identifier> expression);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.Boolean.BasicVisitor`1/<AcceptChildren>d__6")]
private IEnumerable`1<BoolExpr`1<T_Identifier>> AcceptChildren(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.BooleanExpressionTermRewriter`2 : Visitor`2<T_From, BoolExpr`1<T_To>> {
    private Func`2<TermExpr`1<T_From>, BoolExpr`1<T_To>> _translator;
    internal BooleanExpressionTermRewriter`2(Func`2<TermExpr`1<T_From>, BoolExpr`1<T_To>> translator);
    internal virtual BoolExpr`1<T_To> VisitFalse(FalseExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitTrue(TrueExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitNot(NotExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitTerm(TermExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitAnd(AndExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitOr(OrExpr`1<T_From> expression);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.Boolean.BooleanExpressionTermRewriter`2/<VisitChildren>d__8")]
private IEnumerable`1<BoolExpr`1<T_To>> VisitChildren(TreeExpr`1<T_From> expression);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.BoolExpr`1 : object {
    internal ExprType ExprType { get; }
    internal abstract virtual ExprType get_ExprType();
    internal abstract virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal BoolExpr`1<T_Identifier> Simplify();
    internal BoolExpr`1<T_Identifier> ExpensiveSimplify(Converter`1& converter);
    private static BoolExpr`1<T_Identifier> ChooseCandidate(BoolExpr`1[] candidates);
    internal List`1<TermExpr`1<T_Identifier>> GetTerms();
    internal int CountTerms();
    public static BoolExpr`1<T_Identifier> op_Implicit(T_Identifier value);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    public virtual string ToString();
    public sealed virtual bool Equals(BoolExpr`1<T_Identifier> other);
    protected abstract virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.Clause`1 : NormalFormNode`1<T_Identifier> {
    private Set`1<Literal`1<T_Identifier>> _literals;
    private int _hashCode;
    internal Set`1<Literal`1<T_Identifier>> Literals { get; }
    protected Clause`1(Set`1<Literal`1<T_Identifier>> literals, ExprType treeType);
    internal Set`1<Literal`1<T_Identifier>> get_Literals();
    private static BoolExpr`1<T_Identifier> ConvertLiteralsToExpr(Set`1<Literal`1<T_Identifier>> literals, ExprType treeType);
    private static BoolExpr`1<T_Identifier> ConvertLiteralToExpression(Literal`1<T_Identifier> literal);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.CnfClause`1 : Clause`1<T_Identifier> {
    internal CnfClause`1(Set`1<Literal`1<T_Identifier>> literals);
    public sealed virtual bool Equals(CnfClause`1<T_Identifier> other);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.CnfSentence`1 : Sentence`2<T_Identifier, CnfClause`1<T_Identifier>> {
    internal CnfSentence`1(Set`1<CnfClause`1<T_Identifier>> clauses);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.ConversionContext`1 : object {
    internal Solver Solver;
    internal abstract virtual Vertex TranslateTermToVertex(TermExpr`1<T_Identifier> term);
    internal abstract virtual IEnumerable`1<LiteralVertexPair`1<T_Identifier>> GetSuccessors(Vertex vertex);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Converter`1 : object {
    private Vertex _vertex;
    private ConversionContext`1<T_Identifier> _context;
    private DnfSentence`1<T_Identifier> _dnf;
    private CnfSentence`1<T_Identifier> _cnf;
    internal Vertex Vertex { get; }
    internal DnfSentence`1<T_Identifier> Dnf { get; }
    internal CnfSentence`1<T_Identifier> Cnf { get; }
    internal Converter`1(BoolExpr`1<T_Identifier> expr, ConversionContext`1<T_Identifier> context);
    internal Vertex get_Vertex();
    internal DnfSentence`1<T_Identifier> get_Dnf();
    internal CnfSentence`1<T_Identifier> get_Cnf();
    private void InitializeNormalForms();
    private void FindAllPaths(Vertex vertex, Set`1<CnfClause`1<T_Identifier>> cnfClauses, Set`1<DnfClause`1<T_Identifier>> dnfClauses, Set`1<Literal`1<T_Identifier>> path);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.DnfClause`1 : Clause`1<T_Identifier> {
    internal DnfClause`1(Set`1<Literal`1<T_Identifier>> literals);
    public sealed virtual bool Equals(DnfClause`1<T_Identifier> other);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.DnfSentence`1 : Sentence`2<T_Identifier, DnfClause`1<T_Identifier>> {
    internal DnfSentence`1(Set`1<DnfClause`1<T_Identifier>> clauses);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.DomainConstraint`2 : object {
    private DomainVariable`2<T_Variable, T_Element> _variable;
    private Set`1<T_Element> _range;
    private int _hashCode;
    internal DomainVariable`2<T_Variable, T_Element> Variable { get; }
    internal Set`1<T_Element> Range { get; }
    internal DomainConstraint`2(DomainVariable`2<T_Variable, T_Element> variable, Set`1<T_Element> range);
    internal DomainConstraint`2(DomainVariable`2<T_Variable, T_Element> variable, T_Element element);
    internal DomainVariable`2<T_Variable, T_Element> get_Variable();
    internal Set`1<T_Element> get_Range();
    internal DomainConstraint`2<T_Variable, T_Element> InvertDomainConstraint();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.DomainConstraintConversionContext`2 : ConversionContext`1<DomainConstraint`2<T_Variable, T_Element>> {
    private Dictionary`2<DomainVariable`2<T_Variable, T_Element>, int> _domainVariableToRobddVariableMap;
    private Dictionary`2<int, DomainVariable`2<T_Variable, T_Element>> _inverseMap;
    internal virtual Vertex TranslateTermToVertex(TermExpr`1<DomainConstraint`2<T_Variable, T_Element>> term);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.Boolean.DomainConstraintConversionContext`2/<GetSuccessors>d__3")]
internal virtual IEnumerable`1<LiteralVertexPair`1<DomainConstraint`2<T_Variable, T_Element>>> GetSuccessors(Vertex vertex);
    private void InitializeInverseMap();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.DomainVariable`2 : object {
    private T_Variable _identifier;
    private Set`1<T_Element> _domain;
    private int _hashCode;
    private IEqualityComparer`1<T_Variable> _identifierComparer;
    internal T_Variable Identifier { get; }
    internal Set`1<T_Element> Domain { get; }
    internal DomainVariable`2(T_Variable identifier, Set`1<T_Element> domain, IEqualityComparer`1<T_Variable> identifierComparer);
    internal DomainVariable`2(T_Variable identifier, Set`1<T_Element> domain);
    internal T_Variable get_Identifier();
    internal Set`1<T_Element> get_Domain();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal enum System.Data.Entity.Core.Common.Utils.Boolean.ExprType : Enum {
    public int value__;
    public static ExprType And;
    public static ExprType Not;
    public static ExprType Or;
    public static ExprType Term;
    public static ExprType True;
    public static ExprType False;
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.FalseExpr`1 : BoolExpr`1<T_Identifier> {
    private static FalseExpr`1<T_Identifier> _value;
    internal static FalseExpr`1<T_Identifier> Value { get; }
    internal ExprType ExprType { get; }
    private static FalseExpr`1();
    internal static FalseExpr`1<T_Identifier> get_Value();
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.GenericConversionContext`1 : ConversionContext`1<T_Identifier> {
    private Dictionary`2<TermExpr`1<T_Identifier>, int> _variableMap;
    private Dictionary`2<int, TermExpr`1<T_Identifier>> _inverseVariableMap;
    internal virtual Vertex TranslateTermToVertex(TermExpr`1<T_Identifier> term);
    internal virtual IEnumerable`1<LiteralVertexPair`1<T_Identifier>> GetSuccessors(Vertex vertex);
    private void InitializeInverseVariableMap();
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.IdentifierService`1 : object {
    internal static IdentifierService`1<T_Identifier> Instance;
    private static IdentifierService`1();
    private static IdentifierService`1<T_Identifier> GetIdentifierService();
    internal abstract virtual Literal`1<T_Identifier> NegateLiteral(Literal`1<T_Identifier> literal);
    internal abstract virtual ConversionContext`1<T_Identifier> CreateConversionContext();
    internal abstract virtual BoolExpr`1<T_Identifier> LocalSimplify(BoolExpr`1<T_Identifier> expression);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.KnowledgeBase`1 : object {
    private List`1<BoolExpr`1<T_Identifier>> _facts;
    private Vertex _knowledge;
    private ConversionContext`1<T_Identifier> _context;
    protected IEnumerable`1<BoolExpr`1<T_Identifier>> Facts { get; }
    protected IEnumerable`1<BoolExpr`1<T_Identifier>> get_Facts();
    internal void AddKnowledgeBase(KnowledgeBase`1<T_Identifier> kb);
    internal virtual void AddFact(BoolExpr`1<T_Identifier> fact);
    internal void AddImplication(BoolExpr`1<T_Identifier> condition, BoolExpr`1<T_Identifier> implies);
    internal void AddEquivalence(BoolExpr`1<T_Identifier> left, BoolExpr`1<T_Identifier> right);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.LeafVisitor`1 : Visitor`2<T_Identifier, bool> {
    private List`1<TermExpr`1<T_Identifier>> _terms;
    internal static List`1<TermExpr`1<T_Identifier>> GetTerms(BoolExpr`1<T_Identifier> expression);
    internal static IEnumerable`1<T_Identifier> GetLeaves(BoolExpr`1<T_Identifier> expression);
    internal virtual bool VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual bool VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual bool VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual bool VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual bool VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual bool VisitOr(OrExpr`1<T_Identifier> expression);
    private bool VisitTree(TreeExpr`1<T_Identifier> expression);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Literal`1 : NormalFormNode`1<T_Identifier> {
    private TermExpr`1<T_Identifier> _term;
    private bool _isTermPositive;
    internal TermExpr`1<T_Identifier> Term { get; }
    internal bool IsTermPositive { get; }
    internal Literal`1(TermExpr`1<T_Identifier> term, bool isTermPositive);
    internal TermExpr`1<T_Identifier> get_Term();
    internal bool get_IsTermPositive();
    internal Literal`1<T_Identifier> MakeNegated();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Literal`1<T_Identifier> other);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.LiteralVertexPair`1 : object {
    internal Vertex Vertex;
    internal Literal`1<T_Identifier> Literal;
    internal LiteralVertexPair`1(Vertex vertex, Literal`1<T_Identifier> literal);
}
internal static class System.Data.Entity.Core.Common.Utils.Boolean.NegationPusher : object {
    internal static BoolExpr`1<DomainConstraint`2<T_Variable, T_Element>> EliminateNot(BoolExpr`1<DomainConstraint`2<T_Variable, T_Element>> expression);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.NormalFormNode`1 : object {
    private BoolExpr`1<T_Identifier> _expr;
    internal BoolExpr`1<T_Identifier> Expr { get; }
    protected NormalFormNode`1(BoolExpr`1<T_Identifier> expr);
    internal BoolExpr`1<T_Identifier> get_Expr();
    protected static BoolExpr`1<T_Identifier> ExprSelector(T_NormalFormNode node);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.NotExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal BoolExpr`1<T_Identifier> Child { get; }
    internal NotExpr`1(BoolExpr`1<T_Identifier> child);
    internal virtual ExprType get_ExprType();
    internal BoolExpr`1<T_Identifier> get_Child();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    public virtual string ToString();
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.OrExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal OrExpr`1(BoolExpr`1[] children);
    internal OrExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.Sentence`2 : NormalFormNode`1<T_Identifier> {
    private Set`1<T_Clause> _clauses;
    protected Sentence`2(Set`1<T_Clause> clauses, ExprType treeType);
    private static BoolExpr`1<T_Identifier> ConvertClausesToExpr(Set`1<T_Clause> clauses, ExprType treeType);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Simplifier`1 : BasicVisitor`1<T_Identifier> {
    internal static Simplifier`1<T_Identifier> Instance;
    private static Simplifier`1();
    internal virtual BoolExpr`1<T_Identifier> VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitOr(OrExpr`1<T_Identifier> expression);
    private BoolExpr`1<T_Identifier> SimplifyTree(TreeExpr`1<T_Identifier> tree);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Solver : object {
    private Dictionary`2<Triple`3<Vertex, Vertex, Vertex>, Vertex> _computedIfThenElseValues;
    private Dictionary`2<Vertex, Vertex> _knownVertices;
    private int _variableCount;
    internal static Vertex[] BooleanVariableChildren;
    private static Solver();
    internal int CreateVariable();
    internal Vertex Not(Vertex vertex);
    internal Vertex And(IEnumerable`1<Vertex> children);
    internal Vertex And(Vertex left, Vertex right);
    internal Vertex Or(IEnumerable`1<Vertex> children);
    internal Vertex CreateLeafVertex(int variable, Vertex[] children);
    private Vertex GetUniqueVertex(int variable, Vertex[] children);
    private Vertex IfThenElse(Vertex condition, Vertex then, Vertex else);
    private static int DetermineTopVariable(Vertex condition, Vertex then, Vertex else, Int32& topVariableDomainCount);
    private static Vertex EvaluateFor(Vertex vertex, int variable, int variableAssignment);
    [ConditionalAttribute("DEBUG")]
private void AssertVerticesValid(IEnumerable`1<Vertex> vertices);
    [ConditionalAttribute("DEBUG")]
private void AssertVertexValid(Vertex vertex);
    [CompilerGeneratedAttribute]
private Vertex <And>b__6_1(Vertex left, Vertex right);
    [CompilerGeneratedAttribute]
private Vertex <Or>b__8_1(Vertex left, Vertex right);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.TermCounter`1 : Visitor`2<T_Identifier, int> {
    private static TermCounter`1<T_Identifier> _instance;
    private static TermCounter`1();
    internal static int CountTerms(BoolExpr`1<T_Identifier> expression);
    internal virtual int VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual int VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual int VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual int VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual int VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual int VisitOr(OrExpr`1<T_Identifier> expression);
    private int VisitTree(TreeExpr`1<T_Identifier> expression);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.TermExpr`1 : BoolExpr`1<T_Identifier> {
    private T_Identifier _identifier;
    private IEqualityComparer`1<T_Identifier> _comparer;
    internal T_Identifier Identifier { get; }
    internal ExprType ExprType { get; }
    internal TermExpr`1(IEqualityComparer`1<T_Identifier> comparer, T_Identifier identifier);
    internal TermExpr`1(T_Identifier identifier);
    internal T_Identifier get_Identifier();
    internal virtual ExprType get_ExprType();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TermExpr`1<T_Identifier> other);
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.ToDecisionDiagramConverter`1 : Visitor`2<T_Identifier, Vertex> {
    private ConversionContext`1<T_Identifier> _context;
    private ToDecisionDiagramConverter`1(ConversionContext`1<T_Identifier> context);
    internal static Vertex TranslateToRobdd(BoolExpr`1<T_Identifier> expr, ConversionContext`1<T_Identifier> context);
    internal virtual Vertex VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitOr(OrExpr`1<T_Identifier> expression);
    [CompilerGeneratedAttribute]
private Vertex <VisitAnd>b__7_0(BoolExpr`1<T_Identifier> child);
    [CompilerGeneratedAttribute]
private Vertex <VisitOr>b__8_0(BoolExpr`1<T_Identifier> child);
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.TreeExpr`1 : BoolExpr`1<T_Identifier> {
    private Set`1<BoolExpr`1<T_Identifier>> _children;
    private int _hashCode;
    internal Set`1<BoolExpr`1<T_Identifier>> Children { get; }
    protected TreeExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal Set`1<BoolExpr`1<T_Identifier>> get_Children();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Triple`3 : ValueType {
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    internal Triple`3(T1 value1, T2 value2, T3 value3);
    public sealed virtual bool Equals(Triple`3<T1, T2, T3> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.TrueExpr`1 : BoolExpr`1<T_Identifier> {
    private static TrueExpr`1<T_Identifier> _value;
    internal static TrueExpr`1<T_Identifier> Value { get; }
    internal ExprType ExprType { get; }
    private static TrueExpr`1();
    internal static TrueExpr`1<T_Identifier> get_Value();
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Entity.Core.Common.Utils.Boolean.Vertex : object {
    internal static Vertex One;
    internal static Vertex Zero;
    internal int Variable;
    internal Vertex[] Children;
    internal Vertex(int variable, Vertex[] children);
    private static Vertex();
    [ConditionalAttribute("DEBUG")]
private static void AssertConstructorArgumentsValid(int variable, Vertex[] children);
    internal bool IsOne();
    internal bool IsZero();
    internal bool IsSink();
    public sealed virtual bool Equals(Vertex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal abstract class System.Data.Entity.Core.Common.Utils.Boolean.Visitor`2 : object {
    internal abstract virtual T_Return VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitTerm(TermExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitNot(NotExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitAnd(AndExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Entity.Core.Common.Utils.ByValueComparer : object {
    internal static IComparer Default;
    private IComparer nonByValueComparer;
    private ByValueComparer(IComparer comparer);
    private static ByValueComparer();
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class System.Data.Entity.Core.Common.Utils.ByValueEqualityComparer : object {
    internal static ByValueEqualityComparer Default;
    private static ByValueEqualityComparer();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    internal static int ComputeBinaryHashCode(Byte[] bytes);
    internal static bool CompareBinaryValues(Byte[] first, Byte[] second);
}
internal static class System.Data.Entity.Core.Common.Utils.CommandHelper : object {
    internal static void ConsumeReader(DbDataReader reader);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Common.Utils.CommandHelper/<ConsumeReaderAsync>d__1")]
internal static Task ConsumeReaderAsync(DbDataReader reader, CancellationToken cancellationToken);
    internal static void ParseFunctionImportCommandText(string commandText, string defaultContainerName, String& containerName, String& functionImportName);
    internal static void SetStoreProviderCommandState(EntityCommand entityCommand, EntityTransaction entityTransaction, DbCommand storeProviderCommand);
    internal static void SetEntityParameterValues(EntityCommand entityCommand, DbCommand storeProviderCommand, EntityConnection connection);
    private static object GetSpatialValueFromProviderValue(object spatialValue, PrimitiveType parameterType, EntityConnection connection);
    internal static EdmFunction FindFunctionImport(MetadataWorkspace workspace, string containerName, string functionImportName);
}
internal class System.Data.Entity.Core.Common.Utils.DisposableCollectionWrapper`1 : object {
    private IEnumerable`1<T> _enumerable;
    internal DisposableCollectionWrapper`1(IEnumerable`1<T> enumerable);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Data.Entity.Core.Common.Utils.Helpers : object {
    internal static void FormatTraceLine(string format, Object[] args);
    internal static void StringTrace(string arg);
    internal static void StringTraceLine(string arg);
    internal static bool IsSetEqual(IEnumerable`1<Type> list1, IEnumerable`1<Type> list2, IEqualityComparer`1<Type> comparer);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.Helpers/<AsSuperTypeList>d__4`2")]
internal static IEnumerable`1<SuperType> AsSuperTypeList(IEnumerable`1<SubType> values);
    internal static TElement[] Prepend(TElement[] args, TElement arg);
    internal static TNode BuildBalancedTreeInPlace(IList`1<TNode> nodes, Func`3<TNode, TNode, TNode> combinator);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.Helpers/<GetLeafNodes>d__7`1")]
internal static IEnumerable`1<TNode> GetLeafNodes(TNode root, Func`2<TNode, bool> isLeaf, Func`2<TNode, IEnumerable`1<TNode>> getImmediateSubNodes);
}
internal abstract class System.Data.Entity.Core.Common.Utils.InternalBase : object {
    internal abstract virtual void ToCompactString(StringBuilder builder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
    internal virtual string ToFullString();
}
internal class System.Data.Entity.Core.Common.Utils.KeyToListMap`2 : InternalBase {
    private Dictionary`2<TKey, List`1<TValue>> m_map;
    internal IEnumerable`1<TKey> Keys { get; }
    internal IEnumerable`1<TValue> AllValues { get; }
    internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> KeyValuePairs { get; }
    internal KeyToListMap`2(IEqualityComparer`1<TKey> comparer);
    internal IEnumerable`1<TKey> get_Keys();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.KeyToListMap`2/<get_AllValues>d__5")]
internal IEnumerable`1<TValue> get_AllValues();
    internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> get_KeyValuePairs();
    internal bool ContainsKey(TKey key);
    internal void Add(TKey key, TValue value);
    internal void AddRange(TKey key, IEnumerable`1<TValue> values);
    internal bool RemoveKey(TKey key);
    internal ReadOnlyCollection`1<TValue> ListForKey(TKey key);
    internal bool TryGetListForKey(TKey key, ReadOnlyCollection`1& valueCollection);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.KeyToListMap`2/<EnumerateValues>d__14")]
internal IEnumerable`1<TValue> EnumerateValues(TKey key);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Common.Utils.Memoizer`2 : object {
    private Func`2<TArg, TResult> _function;
    private Dictionary`2<TArg, Result<TArg, TResult>> _resultCache;
    private ReaderWriterLockSlim _lock;
    internal Memoizer`2(Func`2<TArg, TResult> function, IEqualityComparer`1<TArg> argComparer);
    internal TResult Evaluate(TArg arg);
    internal bool TryGetValue(TArg arg, TResult& value);
    private bool TryGetResult(TArg arg, Result& result);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Core.Common.Utils.MetadataHelper : object {
    internal static bool TryGetFunctionImportReturnType(EdmFunction functionImport, int resultSetIndex, T& returnType);
    private static bool TryGetWrappedReturnEdmTypeFromFunctionImport(EdmFunction functionImport, int resultSetIndex, T& resultType);
    internal static bool TryGetFunctionImportReturnCollectionType(EdmFunction functionImport, int resultSetIndex, CollectionType& collectionType);
    internal static FunctionParameter GetReturnParameter(EdmFunction functionImport, int resultSetIndex);
    internal static EdmFunction GetFunctionImport(string functionName, string defaultContainerName, MetadataWorkspace workspace, String& containerName, String& functionImportName);
    internal static EdmType GetAndCheckFunctionImportReturnType(EdmFunction functionImport, int resultSetIndex, MetadataWorkspace workspace);
    internal static void CheckFunctionImportReturnType(EdmType expectedEdmType, MetadataWorkspace workspace);
    internal static ParameterDirection ParameterModeToParameterDirection(ParameterMode mode);
    internal static bool DoesMemberExist(StructuralType type, EdmMember member);
    internal static bool IsNonRefSimpleMember(EdmMember member);
    internal static bool HasDiscreteDomain(EdmType edmType);
    internal static EntityType GetEntityTypeForEnd(AssociationEndMember end);
    internal static EntitySet GetEntitySetAtEnd(AssociationSet associationSet, AssociationEndMember endMember);
    internal static AssociationEndMember GetOtherAssociationEnd(AssociationEndMember endMember);
    internal static bool IsEveryOtherEndAtLeastOne(AssociationSet associationSet, AssociationEndMember member);
    internal static bool IsAssociationValidForEntityType(AssociationSetEnd toEnd, EntityType type);
    internal static AssociationSetEnd GetOppositeEnd(AssociationSetEnd end);
    internal static bool IsComposable(EdmFunction function);
    internal static bool IsMemberNullable(EdmMember member);
    internal static IEnumerable`1<EntitySet> GetInfluencingEntitySetsForTable(EntitySet table, MetadataWorkspace workspace);
    internal static IEnumerable`1<EdmType> GetTypeAndSubtypesOf(EdmType type, MetadataWorkspace workspace, bool includeAbstractTypes);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.MetadataHelper/<GetTypeAndSubtypesOf>d__21")]
internal static IEnumerable`1<EdmType> GetTypeAndSubtypesOf(EdmType type, ItemCollection itemCollection, bool includeAbstractTypes);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.MetadataHelper/<GetTypeAndSubtypesOf>d__22`1")]
private static IEnumerable`1<EdmType> GetTypeAndSubtypesOf(EdmType type, ItemCollection itemCollection, bool includeAbstractTypes);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.MetadataHelper/<GetTypeAndParentTypesOf>d__23")]
internal static IEnumerable`1<EdmType> GetTypeAndParentTypesOf(EdmType type, bool includeAbstractTypes);
    internal static Dictionary`2<EntityType, Set`1<EntityType>> BuildUndirectedGraphOfTypes(EdmItemCollection edmItemCollection);
    internal static bool IsParentOf(EntityType a, EntityType b);
    private static void AddDirectedEdgeBetweenEntityTypes(Dictionary`2<EntityType, Set`1<EntityType>> graph, EntityType a, EntityType b);
    internal static bool DoesEndKeySubsumeAssociationSetKey(AssociationSet assocSet, AssociationEndMember thisEnd, HashSet`1<Pair`2<EdmMember, EntityType>> associationkeys);
    internal static bool DoesEndFormKey(AssociationSet associationSet, AssociationEndMember end);
    internal static bool IsExtentAtSomeRelationshipEnd(AssociationSet relationshipSet, EntitySetBase extent);
    internal static AssociationEndMember GetSomeEndForEntitySet(AssociationSet associationSet, EntitySetBase entitySet);
    internal static List`1<AssociationSet> GetAssociationsForEntitySets(EntitySet entitySet1, EntitySet entitySet2);
    internal static List`1<AssociationSet> GetAssociationsForEntitySet(EntitySetBase entitySet);
    internal static bool IsSuperTypeOf(EdmType superType, EdmType subType);
    internal static bool IsPartOfEntityTypeKey(EdmMember member);
    internal static TypeUsage GetElementType(TypeUsage typeUsage);
    internal static int GetLowerBoundOfMultiplicity(RelationshipMultiplicity multiplicity);
    internal static Nullable`1<int> GetUpperBoundOfMultiplicity(RelationshipMultiplicity multiplicity);
    internal static Set`1<EdmMember> GetConcurrencyMembersForTypeHierarchy(EntityTypeBase superType, EdmItemCollection edmItemCollection);
    internal static ConcurrencyMode GetConcurrencyMode(EdmMember member);
    internal static ConcurrencyMode GetConcurrencyMode(TypeUsage typeUsage);
    internal static StoreGeneratedPattern GetStoreGeneratedPattern(EdmMember member);
    internal static bool CheckIfAllErrorsAreWarnings(IList`1<EdmSchemaError> schemaErrors);
    internal static HashAlgorithm CreateMetadataHashAlgorithm(double schemaVersion);
    internal static SHA256 CreateSHA256HashAlgorithm();
    internal static TypeUsage ConvertStoreTypeUsageToEdmTypeUsage(TypeUsage storeTypeUsage);
    [ExtensionAttribute]
internal static byte GetPrecision(TypeUsage type);
    [ExtensionAttribute]
internal static byte GetScale(TypeUsage type);
    [ExtensionAttribute]
internal static int GetMaxLength(TypeUsage type);
    [ExtensionAttribute]
internal static T GetFacetValue(TypeUsage type, string facetName);
    internal static NavigationPropertyAccessor GetNavigationPropertyAccessor(EntityType sourceEntityType, AssociationEndMember sourceMember, AssociationEndMember targetMember);
    internal static NavigationPropertyAccessor GetNavigationPropertyAccessor(EntityType entityType, string relationshipType, string fromName, string toName);
}
internal class System.Data.Entity.Core.Common.Utils.ModifiableIteratorCollection`1 : InternalBase {
    private List`1<TElement> m_elements;
    private int m_currentIteratorIndex;
    internal bool IsEmpty { get; }
    internal ModifiableIteratorCollection`1(IEnumerable`1<TElement> elements);
    internal bool get_IsEmpty();
    internal TElement RemoveOneElement();
    internal void ResetIterator();
    internal void RemoveCurrentOfIterator();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Common.Utils.ModifiableIteratorCollection`1/<Elements>d__8")]
internal IEnumerable`1<TElement> Elements();
    internal virtual void ToCompactString(StringBuilder builder);
    private TElement Remove(int index);
}
internal class System.Data.Entity.Core.Common.Utils.Pair`2 : InternalBase {
    private TFirst first;
    private TSecond second;
    internal TFirst First { get; }
    internal TSecond Second { get; }
    internal Pair`2(TFirst first, TSecond second);
    internal TFirst get_First();
    internal TSecond get_Second();
    public virtual int GetHashCode();
    public bool Equals(Pair`2<TFirst, TSecond> other);
    public virtual bool Equals(object other);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Common.Utils.Set`1 : InternalBase {
    internal static Set`1<TElement> Empty;
    private HashSet`1<TElement> _values;
    private bool _isReadOnly;
    internal int Count { get; }
    internal IEqualityComparer`1<TElement> Comparer { get; }
    internal Set`1(Set`1<TElement> other);
    internal Set`1(IEnumerable`1<TElement> elements);
    internal Set`1(IEqualityComparer`1<TElement> comparer);
    internal Set`1(IEnumerable`1<TElement> elements, IEqualityComparer`1<TElement> comparer);
    private static Set`1();
    internal int get_Count();
    internal IEqualityComparer`1<TElement> get_Comparer();
    internal bool Contains(TElement element);
    internal void Add(TElement element);
    internal void AddRange(IEnumerable`1<TElement> elements);
    internal void Remove(TElement element);
    internal void Clear();
    internal TElement[] ToArray();
    internal bool SetEquals(Set`1<TElement> other);
    internal bool IsSubsetOf(Set`1<TElement> other);
    internal bool Overlaps(Set`1<TElement> other);
    internal void Subtract(IEnumerable`1<TElement> other);
    internal Set`1<TElement> Difference(IEnumerable`1<TElement> other);
    internal void Unite(IEnumerable`1<TElement> other);
    internal Set`1<TElement> Union(IEnumerable`1<TElement> other);
    internal void Intersect(Set`1<TElement> other);
    internal Set`1<TElement> AsReadOnly();
    internal Set`1<TElement> MakeReadOnly();
    internal int GetElementsHashCode();
    public Enumerator<TElement> GetEnumerator();
    [ConditionalAttribute("DEBUG")]
private void AssertReadWrite();
    [ConditionalAttribute("DEBUG")]
private void AssertSetCompatible(Set`1<TElement> other);
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal static class System.Data.Entity.Core.Common.Utils.StringUtil : object {
    private static string s_defaultDelimiter;
    internal static string BuildDelimitedList(IEnumerable`1<T> values, ToStringConverter`1<T> converter, string delimiter);
    internal static string ToCommaSeparatedString(IEnumerable list);
    internal static string ToSeparatedString(IEnumerable list, string separator, string nullValue);
    internal static string ToCommaSeparatedStringSorted(IEnumerable list);
    internal static string ToSeparatedStringSorted(IEnumerable list, string separator, string nullValue);
    internal static string MembersToCommaSeparatedString(IEnumerable members);
    internal static void ToCommaSeparatedString(StringBuilder builder, IEnumerable list);
    internal static void ToCommaSeparatedStringSorted(StringBuilder builder, IEnumerable list);
    internal static void ToSeparatedString(StringBuilder builder, IEnumerable list, string separator);
    internal static void ToSeparatedStringSorted(StringBuilder builder, IEnumerable list, string separator);
    internal static void ToSeparatedString(StringBuilder stringBuilder, IEnumerable list, string separator, string nullValue);
    private static void ToSeparatedStringPrivate(StringBuilder stringBuilder, IEnumerable list, string separator, string nullValue, bool toSort);
    internal static string FormatInvariant(string format, Object[] args);
    internal static StringBuilder FormatStringBuilder(StringBuilder builder, string format, Object[] args);
    internal static StringBuilder IndentNewLine(StringBuilder builder, int indent);
    internal static string FormatIndex(string arrayVarName, int index);
    private static string InvariantConvertToString(T value);
}
internal class System.Data.Entity.Core.Common.Utils.TrailingSpaceComparer : object {
    internal static TrailingSpaceComparer Instance;
    private static IEqualityComparer`1<object> _template;
    private static TrailingSpaceComparer();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
internal class System.Data.Entity.Core.Common.Utils.TrailingSpaceStringComparer : object {
    internal static TrailingSpaceStringComparer Instance;
    private static TrailingSpaceStringComparer();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
    internal static string NormalizeString(string value);
}
internal class System.Data.Entity.Core.Common.Utils.TreeNode : object {
    private StringBuilder _text;
    private List`1<TreeNode> _children;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    internal StringBuilder Text { get; }
    internal IList`1<TreeNode> Children { get; }
    internal int Position { get; internal set; }
    internal TreeNode(string text, TreeNode[] children);
    internal TreeNode(string text, List`1<TreeNode> children);
    internal StringBuilder get_Text();
    internal IList`1<TreeNode> get_Children();
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(int value);
}
internal abstract class System.Data.Entity.Core.Common.Utils.TreePrinter : object {
    private List`1<TreeNode> _scopes;
    private bool _showLines;
    private char _horizontals;
    private char _verticals;
    internal virtual string Print(TreeNode node);
    internal virtual void PreProcess(TreeNode node);
    internal virtual void AfterAppend(TreeNode node, StringBuilder text);
    internal virtual void BeforeAppend(TreeNode node, StringBuilder text);
    internal virtual void PrintNode(StringBuilder text, TreeNode node);
    internal virtual void PrintChildren(StringBuilder text, TreeNode node);
    private void IndentLine(StringBuilder text);
}
public class System.Data.Entity.Core.EntityClient.EntityCommand : DbCommand {
    private bool _designTimeVisible;
    private string _esqlCommandText;
    private EntityConnection _connection;
    private DbCommandTree _preparedCommandTree;
    private EntityParameterCollection _parameters;
    private Nullable`1<int> _commandTimeout;
    private CommandType _commandType;
    private EntityTransaction _transaction;
    private UpdateRowSource _updatedRowSource;
    private EntityCommandDefinition _commandDefinition;
    private bool _isCommandDefinitionBased;
    private DbCommandTree _commandTreeSetByUser;
    private DbDataReader _dataReader;
    private bool _enableQueryPlanCaching;
    private DbCommand _storeProviderCommand;
    private EntityDataReaderFactory _entityDataReaderFactory;
    private IDbDependencyResolver _dependencyResolver;
    private DbInterceptionContext _interceptionContext;
    [CompilerGeneratedAttribute]
private EventHandler OnDataReaderClosing;
    internal DbInterceptionContext InterceptionContext { get; }
    public EntityConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    public string CommandText { get; public set; }
    public DbCommandTree CommandTree { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public EntityParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    public EntityTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public bool EnablePlanCaching { get; public set; }
    internal EntityCommand(DbInterceptionContext interceptionContext);
    internal EntityCommand(DbInterceptionContext interceptionContext, EntityDataReaderFactory factory);
    public EntityCommand(string statement);
    internal EntityCommand(string statement, DbInterceptionContext context, EntityDataReaderFactory factory);
    public EntityCommand(string statement, EntityConnection connection, IDbDependencyResolver resolver);
    public EntityCommand(string statement, EntityConnection connection);
    internal EntityCommand(string statement, EntityConnection connection, EntityDataReaderFactory factory);
    public EntityCommand(string statement, EntityConnection connection, EntityTransaction transaction);
    internal EntityCommand(string statement, EntityConnection connection, EntityTransaction transaction, EntityDataReaderFactory factory);
    internal EntityCommand(EntityCommandDefinition commandDefinition, DbInterceptionContext context, EntityDataReaderFactory factory);
    internal EntityCommand(EntityConnection connection, EntityCommandDefinition entityCommandDefinition, DbInterceptionContext context, EntityDataReaderFactory factory);
    internal virtual DbInterceptionContext get_InterceptionContext();
    public virtual EntityConnection get_Connection();
    public virtual void set_Connection(EntityConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual DbCommandTree get_CommandTree();
    public virtual void set_CommandTree(DbCommandTree value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual EntityParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual EntityTransaction get_Transaction();
    public virtual void set_Transaction(EntityTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual bool get_EnablePlanCaching();
    public virtual void set_EnablePlanCaching(bool value);
    public virtual void Cancel();
    public virtual EntityParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    public virtual EntityDataReader ExecuteReader();
    public virtual EntityDataReader ExecuteReader(CommandBehavior behavior);
    public virtual Task`1<EntityDataReader> ExecuteReaderAsync();
    public virtual Task`1<EntityDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public virtual Task`1<EntityDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.EntityCommand/<ExecuteReaderAsync>d__77")]
public virtual Task`1<EntityDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.EntityCommand/<ExecuteDbDataReaderAsync>d__79")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.EntityCommand/<ExecuteNonQueryAsync>d__81")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    internal virtual void Unprepare();
    public virtual void Prepare();
    private void InnerPrepare();
    private DbCommandTree MakeCommandTree();
    private EdmFunction DetermineFunctionImport();
    internal virtual EntityCommandDefinition GetCommandDefinition();
    internal virtual EntityTransaction ValidateAndGetEntityTransaction();
    [BrowsableAttribute("False")]
public virtual string ToTraceString();
    private bool TryGetEntityCommandDefinitionFromQueryCache(EntityCommandDefinition& entityCommandDefinition);
    private EntityCommandDefinition CreateCommandDefinition();
    private void CheckConnectionPresent();
    private void CheckIfReadyToPrepare();
    private void ThrowIfDataReaderIsOpen();
    internal virtual Dictionary`2<string, TypeUsage> GetParameterTypeUsage();
    internal virtual void NotifyDataReaderClosing();
    internal virtual void SetStoreProviderCommand(DbCommand storeProviderCommand);
    internal virtual bool IsNotNullOnDataReaderClosingEvent();
    internal virtual void InvokeOnDataReaderClosingEvent(EntityCommand sender, EventArgs e);
    [CompilerGeneratedAttribute]
internal void add_OnDataReaderClosing(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_OnDataReaderClosing(EventHandler value);
}
public class System.Data.Entity.Core.EntityClient.EntityConnection : DbConnection {
    private static string EntityClientProviderName;
    private static string ProviderInvariantName;
    private static string ProviderConnectionString;
    private static string ReaderPrefix;
    private object _connectionStringLock;
    private static DbConnectionOptions _emptyConnectionOptions;
    private DbConnectionOptions _userConnectionOptions;
    private DbConnectionOptions _effectiveConnectionOptions;
    private ConnectionState _entityClientConnectionState;
    private DbProviderFactory _providerFactory;
    private DbConnection _storeConnection;
    private bool _entityConnectionOwnsStoreConnection;
    private MetadataWorkspace _metadataWorkspace;
    private EntityTransaction _currentTransaction;
    private Transaction _enlistedTransaction;
    private bool _initialized;
    private Nullable`1<ConnectionState> _fakeConnectionState;
    private List`1<ObjectContext> _associatedContexts;
    public string ConnectionString { get; public set; }
    internal IEnumerable`1<ObjectContext> AssociatedContexts { get; }
    internal DbInterceptionContext InterceptionContext { get; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    internal DbProviderFactory StoreProviderFactory { get; }
    public DbConnection StoreConnection { get; }
    public EntityTransaction CurrentTransaction { get; }
    internal bool EnlistedInUserTransaction { get; }
    public EntityConnection(string connectionString);
    public EntityConnection(MetadataWorkspace workspace, DbConnection connection);
    public EntityConnection(MetadataWorkspace workspace, DbConnection connection, bool entityConnectionOwnsStoreConnection);
    internal EntityConnection(MetadataWorkspace workspace, DbConnection connection, bool skipInitialization, bool entityConnectionOwnsStoreConnection);
    private static EntityConnection();
    private void SubscribeToStoreConnectionStateChangeEvents();
    private void UnsubscribeFromStoreConnectionStateChangeEvents();
    internal virtual void StoreConnectionStateChangeHandler(object sender, StateChangeEventArgs stateChange);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    internal IEnumerable`1<ObjectContext> get_AssociatedContexts();
    internal virtual void AssociateContext(ObjectContext context);
    internal DbInterceptionContext get_InterceptionContext();
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual ConnectionState get_State();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    protected virtual DbProviderFactory get_DbProviderFactory();
    internal virtual DbProviderFactory get_StoreProviderFactory();
    public virtual DbConnection get_StoreConnection();
    public virtual MetadataWorkspace GetMetadataWorkspace();
    public virtual EntityTransaction get_CurrentTransaction();
    internal virtual bool get_EnlistedInUserTransaction();
    public virtual void Open();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.EntityConnection/<OpenAsync>d__56")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual EntityCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public virtual void Close();
    public virtual void ChangeDatabase(string databaseName);
    public virtual EntityTransaction BeginTransaction();
    public virtual EntityTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    internal virtual EntityTransaction UseStoreTransaction(DbTransaction storeTransaction);
    public virtual void EnlistTransaction(Transaction transaction);
    protected virtual void Dispose(bool disposing);
    internal virtual void ClearCurrentTransaction();
    private void ChangeConnectionString(string newConnectionString);
    private static string ValidateValueForTheKeyword(DbConnectionOptions effectiveConnectionOptions, string keywordName);
    private void ClearTransactions();
    private void ClearEnlistedTransaction();
    private void EnlistedTransactionCompleted(object sender, TransactionEventArgs e);
    private void StoreCloseHelper();
    private static DbConnection GetStoreConnection(DbProviderFactory factory);
    [CompilerGeneratedAttribute]
private void <Open>b__55_0();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder : DbConnectionStringBuilder {
    internal static string NameParameterName;
    internal static string MetadataParameterName;
    internal static string ProviderParameterName;
    internal static string ProviderConnectionStringParameterName;
    internal static String[] ValidKeywords;
    private string _namedConnectionName;
    private string _providerName;
    private string _metadataLocations;
    private string _storeProviderConnectionString;
    [DisplayNameAttribute("Name")]
[EntityResCategoryAttribute("EntityDataCategory_NamedConnectionString")]
[EntityResDescriptionAttribute("EntityConnectionString_Name")]
[RefreshPropertiesAttribute("1")]
public string Name { get; public set; }
    [DisplayNameAttribute("Provider")]
[EntityResCategoryAttribute("EntityDataCategory_Source")]
[EntityResDescriptionAttribute("EntityConnectionString_Provider")]
[RefreshPropertiesAttribute("1")]
public string Provider { get; public set; }
    [DisplayNameAttribute("Metadata")]
[EntityResCategoryAttribute("EntityDataCategory_Context")]
[EntityResDescriptionAttribute("EntityConnectionString_Metadata")]
[RefreshPropertiesAttribute("1")]
public string Metadata { get; public set; }
    [DisplayNameAttribute("Provider Connection String")]
[EntityResCategoryAttribute("EntityDataCategory_Source")]
[EntityResDescriptionAttribute("EntityConnectionString_ProviderConnectionString")]
[RefreshPropertiesAttribute("1")]
public string ProviderConnectionString { get; public set; }
    public bool IsFixedSize { get; }
    public ICollection Keys { get; }
    public object Item { get; public set; }
    public EntityConnectionStringBuilder(string connectionString);
    private static EntityConnectionStringBuilder();
    public string get_Name();
    public void set_Name(string value);
    public string get_Provider();
    public void set_Provider(string value);
    public string get_Metadata();
    public void set_Metadata(string value);
    public string get_ProviderConnectionString();
    public void set_ProviderConnectionString(string value);
    public virtual bool get_IsFixedSize();
    public virtual ICollection get_Keys();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    public virtual bool Remove(string keyword);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Core.EntityClient.EntityDataReader : DbDataReader {
    private EntityCommand _command;
    private CommandBehavior _behavior;
    private DbDataReader _storeDataReader;
    private IExtendedDataRecord _storeExtendedDataRecord;
    private bool _disposed;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal EntityDataReader(EntityCommand command, DbDataReader storeDataReader, CommandBehavior behavior);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_VisibleFieldCount();
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.EntityDataReader/<NextResultAsync>d__54")]
public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public sealed virtual DbDataRecord GetDataRecord(int i);
    public sealed virtual DbDataReader GetDataReader(int i);
}
public class System.Data.Entity.Core.EntityClient.EntityParameter : DbParameter {
    private string _parameterName;
    private Nullable`1<DbType> _dbType;
    private EdmType _edmType;
    private Nullable`1<byte> _precision;
    private Nullable`1<byte> _scale;
    private bool _isDirty;
    private object _value;
    private object _parent;
    private ParameterDirection _direction;
    private Nullable`1<int> _size;
    private string _sourceColumn;
    private DataRowVersion _sourceVersion;
    private bool _sourceColumnNullMapping;
    private Nullable`1<bool> _isNullable;
    public string ParameterName { get; public set; }
    public DbType DbType { get; public set; }
    public EdmType EdmType { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public object Value { get; public set; }
    internal bool IsDirty { get; }
    internal bool IsDbTypeSpecified { get; }
    internal bool IsDirectionSpecified { get; }
    internal bool IsIsNullableSpecified { get; }
    internal bool IsPrecisionSpecified { get; }
    internal bool IsScaleSpecified { get; }
    internal bool IsSizeSpecified { get; }
    [RefreshPropertiesAttribute("1")]
[EntityResCategoryAttribute("DataCategory_Data")]
[EntityResDescriptionAttribute("DbParameter_Direction")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    [EntityResCategoryAttribute("DataCategory_Data")]
[EntityResDescriptionAttribute("DbParameter_Size")]
public int Size { get; public set; }
    [EntityResCategoryAttribute("DataCategory_Update")]
[EntityResDescriptionAttribute("DbParameter_SourceColumn")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [EntityResCategoryAttribute("DataCategory_Update")]
[EntityResDescriptionAttribute("DbParameter_SourceVersion")]
public DataRowVersion SourceVersion { get; public set; }
    private bool IsTypeConsistent { get; }
    public EntityParameter(string parameterName, DbType dbType);
    public EntityParameter(string parameterName, DbType dbType, int size);
    public EntityParameter(string parameterName, DbType dbType, int size, string sourceColumn);
    public EntityParameter(string parameterName, DbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    private EntityParameter(EntityParameter source);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    private void SetParameterNameWithValidation(string parameterName, string argumentName);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual EdmType get_EdmType();
    public virtual void set_EdmType(EdmType value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal virtual bool get_IsDirty();
    internal virtual bool get_IsDbTypeSpecified();
    internal virtual bool get_IsDirectionSpecified();
    internal virtual bool get_IsIsNullableSpecified();
    internal virtual bool get_IsPrecisionSpecified();
    internal virtual bool get_IsScaleSpecified();
    internal virtual bool get_IsSizeSpecified();
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual void ResetDbType();
    private void PropertyChanging();
    private static int ValueSize(object value);
    internal virtual EntityParameter Clone();
    private void CloneHelper(EntityParameter destination);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual void ResetIsDirty();
    private bool get_IsTypeConsistent();
    private static DbType GetDbTypeFromEdm(EdmType edmType);
    private void ResetSize();
    private bool ShouldSerializeSize();
    internal virtual void CopyTo(DbParameter destination);
    internal virtual object CompareExchangeParent(object value, object comparand);
    internal virtual void ResetParent();
    public virtual string ToString();
    private static int ValueSizeCore(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Core.EntityClient.EntityParameterCollection : DbParameterCollection {
    private List`1<EntityParameter> _items;
    private static Type _itemType;
    private bool _isDirty;
    public int Count { get; }
    private List`1<EntityParameter> InnerList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public EntityParameter Item { get; public set; }
    public EntityParameter Item { get; public set; }
    internal bool IsDirty { get; }
    private static EntityParameterCollection();
    public virtual int get_Count();
    private List`1<EntityParameter> get_InnerList();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(IEnumerable items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private static void ValidateType(object value);
    public EntityParameter get_Item(int index);
    public void set_Item(int index, EntityParameter value);
    public EntityParameter get_Item(string parameterName);
    public void set_Item(string parameterName, EntityParameter value);
    internal bool get_IsDirty();
    public EntityParameter Add(EntityParameter value);
    public EntityParameter AddWithValue(string parameterName, object value);
    public EntityParameter Add(string parameterName, DbType dbType);
    public EntityParameter Add(string parameterName, DbType dbType, int size);
    public void AddRange(EntityParameter[] values);
    public virtual bool Contains(string parameterName);
    public void CopyTo(EntityParameter[] array, int index);
    public int IndexOf(EntityParameter value);
    public void Insert(int index, EntityParameter value);
    private void OnChange();
    public void Remove(EntityParameter value);
    internal void ResetIsDirty();
}
public class System.Data.Entity.Core.EntityClient.EntityProviderFactory : DbProviderFactory {
    public static EntityProviderFactory Instance;
    private static EntityProviderFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class System.Data.Entity.Core.EntityClient.EntityTransaction : DbTransaction {
    private EntityConnection _connection;
    private DbTransaction _storeTransaction;
    public EntityConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public DbTransaction StoreTransaction { get; }
    private DbInterceptionContext InterceptionContext { get; }
    internal EntityTransaction(EntityConnection connection, DbTransaction storeTransaction);
    public virtual EntityConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual DbTransaction get_StoreTransaction();
    private DbInterceptionContext get_InterceptionContext();
    public virtual void Commit();
    public virtual void Rollback();
    protected virtual void Dispose(bool disposing);
    private void ClearCurrentTransaction();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.EntityClient.Internal.DbConnectionOptions : object {
    internal static string DataDirectory;
    private string _usersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    internal NameValuePair KeyChain;
    internal string UsersConnectionString { get; }
    internal bool IsEmpty { get; }
    internal Dictionary`2<string, string> Parsetable { get; }
    internal string Item { get; }
    internal DbConnectionOptions(string connectionString, IList`1<string> validKeywords);
    internal string get_UsersConnectionString();
    internal bool get_IsEmpty();
    internal Dictionary`2<string, string> get_Parsetable();
    internal virtual string get_Item(string keyword);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    private static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, String& keyname, String& keyvalue);
    private static NameValuePair ParseInternal(IDictionary`2<string, string> parsetable, string connectionString, IList`1<string> validKeywords);
}
internal class System.Data.Entity.Core.EntityClient.Internal.EntityAdapter : object {
    private bool _acceptChangesDuringUpdate;
    private EntityConnection _connection;
    private ObjectContext _context;
    private Func`2<EntityAdapter, UpdateTranslator> _updateTranslatorFactory;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    public ObjectContext Context { get; }
    private DbConnection System.Data.Entity.Core.EntityClient.Internal.IEntityAdapter.Connection { get; private set; }
    public EntityConnection Connection { get; public set; }
    public bool AcceptChangesDuringUpdate { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public EntityAdapter(ObjectContext context);
    protected EntityAdapter(ObjectContext context, Func`2<EntityAdapter, UpdateTranslator> updateTranslatorFactory);
    public ObjectContext get_Context();
    private sealed virtual override DbConnection System.Data.Entity.Core.EntityClient.Internal.IEntityAdapter.get_Connection();
    private sealed virtual override void System.Data.Entity.Core.EntityClient.Internal.IEntityAdapter.set_Connection(DbConnection value);
    public EntityConnection get_Connection();
    public void set_Connection(EntityConnection value);
    public sealed virtual bool get_AcceptChangesDuringUpdate();
    public sealed virtual void set_AcceptChangesDuringUpdate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CommandTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CommandTimeout(Nullable`1<int> value);
    public sealed virtual int Update();
    public sealed virtual Task`1<int> UpdateAsync(CancellationToken cancellationToken);
    private T Update(T noChangesResult, Func`2<UpdateTranslator, T> updateFunction);
    private static bool IsStateManagerDirty(ObjectStateManager entityCache);
}
internal class System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition : DbCommandDefinition {
    private List`1<DbCommandDefinition> _mappedCommandDefinitions;
    private IColumnMapGenerator[] _columnMapGenerators;
    private ReadOnlyCollection`1<EntityParameter> _parameters;
    private Set`1<EntitySet> _entitySets;
    private BridgeDataReaderFactory _bridgeDataReaderFactory;
    private ColumnMapFactory _columnMapFactory;
    private DbProviderServices _storeProviderServices;
    internal IEnumerable`1<EntityParameter> Parameters { get; }
    internal Set`1<EntitySet> EntitySets { get; }
    internal EntityCommandDefinition(DbProviderFactory storeProviderFactory, DbCommandTree commandTree, DbInterceptionContext interceptionContext, IDbDependencyResolver resolver, BridgeDataReaderFactory bridgeDataReaderFactory, ColumnMapFactory columnMapFactory);
    protected EntityCommandDefinition(BridgeDataReaderFactory factory, ColumnMapFactory columnMapFactory, List`1<DbCommandDefinition> mappedCommandDefinitions);
    private TypeUsage DetermineStoreResultType(FunctionImportMappingNonComposable mapping, int resultSetIndex, IColumnMapGenerator& columnMapGenerator);
    private static void ValidateEdmResultType(EdmType resultType, EdmFunction functionImport);
    private static FunctionImportMappingNonComposable GetTargetFunctionMapping(DbFunctionCommandTree functionCommandTree);
    internal virtual IEnumerable`1<EntityParameter> get_Parameters();
    internal virtual Set`1<EntitySet> get_EntitySets();
    public virtual DbCommand CreateCommand();
    internal ColumnMap CreateColumnMap(DbDataReader storeDataReader);
    internal virtual ColumnMap CreateColumnMap(DbDataReader storeDataReader, int resultSetIndex);
    private static EntityParameter CreateEntityParameterFromQueryParameter(KeyValuePair`2<string, TypeUsage> queryParameter);
    internal static void PopulateParameterFromTypeUsage(EntityParameter parameter, TypeUsage type, bool isOutParam);
    internal virtual DbDataReader Execute(EntityCommand entityCommand, CommandBehavior behavior);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition/<ExecuteAsync>d__23")]
internal virtual Task`1<DbDataReader> ExecuteAsync(EntityCommand entityCommand, CommandBehavior behavior, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition/<GetNextResultColumnMaps>d__24")]
private IEnumerable`1<ColumnMap> GetNextResultColumnMaps(DbDataReader storeDataReader);
    internal virtual DbDataReader ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition/<ExecuteStoreCommandsAsync>d__26")]
internal virtual Task`1<DbDataReader> ExecuteStoreCommandsAsync(EntityCommand entityCommand, CommandBehavior behavior, CancellationToken cancellationToken);
    private DbCommand PrepareEntityCommandBeforeExecution(EntityCommand entityCommand);
    private static void SyncParameterProperties(EntityParameter entityParameter, DbParameter storeParameter, DbProviderServices storeProviderServices);
    internal virtual string ToTraceString();
}
internal class System.Data.Entity.Core.EntityClient.Internal.EntityProviderServices : DbProviderServices {
    internal static EntityProviderServices Instance;
    private static EntityProviderServices();
    protected virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    internal static EntityCommandDefinition CreateCommandDefinition(DbProviderFactory storeProviderFactory, DbCommandTree commandTree, DbInterceptionContext interceptionContext, IDbDependencyResolver resolver);
    internal virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree, DbInterceptionContext interceptionContext);
    internal virtual void ValidateDataSpace(DbCommandTree commandTree);
    public virtual DbCommandDefinition CreateCommandDefinition(DbCommand prototype);
    protected virtual string GetDbProviderManifestToken(DbConnection connection);
    protected virtual DbProviderManifest GetDbProviderManifest(string manifestToken);
}
internal interface System.Data.Entity.Core.EntityClient.Internal.IEntityAdapter {
    public DbConnection Connection { get; public set; }
    public bool AcceptChangesDuringUpdate { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public abstract virtual DbConnection get_Connection();
    public abstract virtual void set_Connection(DbConnection value);
    public abstract virtual bool get_AcceptChangesDuringUpdate();
    public abstract virtual void set_AcceptChangesDuringUpdate(bool value);
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    public abstract virtual int Update();
    public abstract virtual Task`1<int> UpdateAsync(CancellationToken cancellationToken);
}
internal class System.Data.Entity.Core.EntityClient.NameValuePair : object {
    private NameValuePair _next;
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
public class System.Data.Entity.Core.EntityCommandCompilationException : EntityException {
    private static int HResultCommandCompilation;
    public EntityCommandCompilationException(string message);
    public EntityCommandCompilationException(string message, Exception innerException);
    private EntityCommandCompilationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Data.Entity.Core.EntityCommandExecutionException : EntityException {
    private static int HResultCommandExecution;
    public EntityCommandExecutionException(string message);
    public EntityCommandExecutionException(string message, Exception innerException);
    private EntityCommandExecutionException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Data.Entity.Core.EntityException : DataException {
    public EntityException(string message);
    public EntityException(string message, Exception innerException);
    protected EntityException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{ConcatKeyValue()}")]
[DataContractAttribute]
public class System.Data.Entity.Core.EntityKey : object {
    private string _entitySetName;
    private string _entityContainerName;
    private object _singletonKeyValue;
    private Object[] _compositeKeyValues;
    private String[] _keyNames;
    private bool _isLocked;
    private bool _containsByteArray;
    private EntityKeyMember[] _deserializedMembers;
    private int _hashCode;
    private static EntityKey _noEntitySetKey;
    private static EntityKey _entityNotValidKey;
    private static ConcurrentDictionary`2<string, string> NameLookup;
    public static EntityKey NoEntitySetKey { get; }
    public static EntityKey EntityNotValidKey { get; }
    [DataMemberAttribute]
public string EntitySetName { get; public set; }
    [DataMemberAttribute]
public string EntityContainerName { get; public set; }
    [DataMemberAttribute]
public EntityKeyMember[] EntityKeyValues { get; public set; }
    public bool IsTemporary { get; }
    private object SingletonKeyValue { get; }
    private Object[] CompositeKeyValues { get; }
    private bool RequiresDeserialization { get; }
    public EntityKey(string qualifiedEntitySetName, IEnumerable`1<KeyValuePair`2<string, object>> entityKeyValues);
    public EntityKey(string qualifiedEntitySetName, IEnumerable`1<EntityKeyMember> entityKeyValues);
    public EntityKey(string qualifiedEntitySetName, string keyName, object keyValue);
    internal EntityKey(EntitySet entitySet, IExtendedDataRecord record);
    internal EntityKey(string qualifiedEntitySetName);
    internal EntityKey(EntitySetBase entitySet);
    internal EntityKey(EntitySetBase entitySet, object singletonKeyValue);
    internal EntityKey(EntitySetBase entitySet, Object[] compositeKeyValues);
    private static EntityKey();
    public static EntityKey get_NoEntitySetKey();
    public static EntityKey get_EntityNotValidKey();
    public string get_EntitySetName();
    public void set_EntitySetName(string value);
    public string get_EntityContainerName();
    public void set_EntityContainerName(string value);
    public EntityKeyMember[] get_EntityKeyValues();
    public void set_EntityKeyValues(EntityKeyMember[] value);
    public bool get_IsTemporary();
    private object get_SingletonKeyValue();
    private Object[] get_CompositeKeyValues();
    public EntitySet GetEntitySet(MetadataWorkspace metadataWorkspace);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityKey other);
    public virtual int GetHashCode();
    private int AddHashValue(int hashCode, object keyValue);
    public static bool op_Equality(EntityKey key1, EntityKey key2);
    public static bool op_Inequality(EntityKey key1, EntityKey key2);
    internal static bool InternalEquals(EntityKey key1, EntityKey key2, bool compareEntitySets);
    internal static bool CompositeValuesWithBinaryEqual(EntityKey key1, EntityKey key2);
    private static bool ValuesWithBinaryEqual(string keyName, object keyValue, EntityKey key2);
    private static bool CompositeValuesEqual(EntityKey key1, EntityKey key2);
    private static bool ValuesEqual(string keyName, object keyValue, EntityKey key2);
    internal KeyValuePair`2[] GetKeyValueExpressions(EntitySet entitySet);
    internal string ConcatKeyValue();
    internal object FindValueByName(string keyName);
    internal void InitializeEntitySetName(string qualifiedEntitySetName);
    private static void ValidateName(string name);
    internal bool InitializeKeyValues(IEnumerable`1<KeyValuePair`2<string, object>> entityKeyValues, bool allowNullKeys, bool tokenizeStrings);
    private void InitializeKeyValue(KeyValuePair`2<string, object> keyValuePair, int i, bool tokenizeStrings);
    private void InitializeKeyValues(EntitySet entitySet, IExtendedDataRecord record);
    internal void ValidateEntityKey(MetadataWorkspace workspace, EntitySet entitySet);
    internal void ValidateEntityKey(MetadataWorkspace workspace, EntitySet entitySet, bool isArgumentException, string argumentName);
    private static void ValidateTypeOfKeyValue(MetadataWorkspace workspace, EdmMember keyMember, object keyValue, bool isArgumentException, string argumentName);
    [ConditionalAttribute("DEBUG")]
private void AssertCorrectState(EntitySetBase entitySetBase, bool isTemporary);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[OnDeserializingAttribute]
public void OnDeserializing(StreamingContext context);
    [OnDeserializedAttribute]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void OnDeserialized(StreamingContext context);
    internal static string LookupSingletonName(string name);
    private void ValidateWritable(object instance);
    private bool get_RequiresDeserialization();
    private void DeserializeMembers();
}
[DataContractAttribute]
public class System.Data.Entity.Core.EntityKeyMember : object {
    private string _keyName;
    private object _keyValue;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public object Value { get; public set; }
    public EntityKeyMember(string keyName, object keyValue);
    public string get_Key();
    public void set_Key(string value);
    public object get_Value();
    public void set_Value(object value);
    public virtual string ToString();
    private static void ValidateWritable(object instance);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Entity.Core.EntityResCategoryAttribute : CategoryAttribute {
    public EntityResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Entity.Core.EntityResDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    public EntityResDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.Data.Entity.Core.EntitySqlException : EntityException {
    private static int HResultInvalidQuery;
    private string _errorDescription;
    private string _errorContext;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public string ErrorDescription { get; }
    public string ErrorContext { get; }
    public int Line { get; }
    public int Column { get; }
    public EntitySqlException(string message);
    public EntitySqlException(string message, Exception innerException);
    private EntitySqlException(SerializationInfo info, StreamingContext context);
    private EntitySqlException(string message, string errorDescription, string errorContext, int line, int column, Exception innerException);
    internal static EntitySqlException Create(ErrorContext errCtx, string errorMessage, Exception innerException);
    internal static EntitySqlException Create(string commandText, string errorDescription, int errorPosition, string errorContextInfo, bool loadErrorContextInfoFromResource, Exception innerException);
    public string get_ErrorDescription();
    public string get_ErrorContext();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    internal static string GetGenericErrorMessage(string commandText, int position);
    internal static string FormatErrorContext(string commandText, int errorPosition, string errorContextInfo, bool loadErrorContextInfoFromResource, Int32& lineNumber, Int32& columnNumber);
    private static string FormatQueryError(string errorMessage, string errorContext);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Core.EntityUtil : object {
    internal static int AssemblyQualifiedNameIndex;
    internal static int InvariantNameIndex;
    internal static string Parameter;
    internal static CompareOptions StringCompareOptions;
    internal static Dictionary`2<string, string> COMPILER_VERSION;
    private static EntityUtil();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.EntityUtil/<Zip>d__4`2")]
[ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<T1, T2>> Zip(IEnumerable`1<T1> first, IEnumerable`1<T2> second);
    internal static bool IsAnICollection(Type type);
    internal static Type GetCollectionElementType(Type propertyType);
    internal static Type DetermineCollectionType(Type requestedType);
    internal static Type GetEntityIdentityType(Type entityType);
    internal static string QuoteIdentifier(string identifier);
    internal static MetadataException InvalidSchemaEncountered(string errors);
    internal static Exception InternalError(InternalErrorCode internalError, int location, object additionalInfo);
    internal static void CheckValidStateForChangeEntityState(EntityState state);
    internal static void CheckValidStateForChangeRelationshipState(EntityState state, string paramName);
    internal static void ThrowPropertyIsNotNullable(string propertyName);
    internal static void ThrowSetInvalidValue(object value, Type destinationType, string className, string propertyName);
    internal static InvalidOperationException ValueInvalidCast(Type valueType, Type destinationType);
    internal static void CheckArgumentMergeOption(MergeOption mergeOption);
    internal static void CheckArgumentRefreshMode(RefreshMode refreshMode);
    internal static InvalidOperationException ExecuteFunctionCalledWithNonReaderFunction(EdmFunction functionImport);
    internal static void ValidateEntitySetInKey(EntityKey key, EntitySet entitySet);
    internal static void ValidateEntitySetInKey(EntityKey key, EntitySet entitySet, string argument);
    internal static void ValidateNecessaryModificationFunctionMapping(ModificationFunctionMapping mapping, string currentState, IEntityStateEntry stateEntry, string type, string typeName);
    internal static UpdateException Update(string message, Exception innerException, IEntityStateEntry[] stateEntries);
    internal static UpdateException UpdateRelationshipCardinalityConstraintViolation(string relationshipSetName, int minimumCount, Nullable`1<int> maximumCount, string entitySetName, int actualCount, string otherEndPluralName, IEntityStateEntry stateEntry);
    private static string ConvertCardinalityToString(Nullable`1<int> cardinality);
    internal static T CheckArgumentOutOfRange(T[] values, int index, string parameterName);
    internal static IEnumerable`1<T> CheckArgumentContainsNull(IEnumerable`1& enumerableArgument, string argumentName);
    internal static IEnumerable`1<T> CheckArgumentEmpty(IEnumerable`1& enumerableArgument, Func`2<string, string> errorMessage, string argumentName);
    private static void GetCheapestSafeCountOfEnumerable(IEnumerable`1& enumerable, Int32& count);
    private static ICollection`1<T> GetCheapestSafeEnumerableAsCollection(IEnumerable`1& enumerable);
    internal static bool IsNull(object value);
    internal static int SrcCompare(string strA, string strB);
    internal static int DstCompare(string strA, string strB);
}
internal class System.Data.Entity.Core.FieldNameLookup : object {
    private Dictionary`2<string, int> _fieldNameLookup;
    private String[] _fieldNames;
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames);
    public FieldNameLookup(IDataRecord reader);
    public int GetOrdinal(string fieldName);
    private int IndexOf(string fieldName);
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal interface System.Data.Entity.Core.IEntityStateEntry {
    public IEntityStateManager StateManager { get; }
    public EntityKey EntityKey { get; }
    public EntitySetBase EntitySet { get; }
    public bool IsRelationship { get; }
    public bool IsKeyEntry { get; }
    public EntityState State { get; }
    public DbDataRecord OriginalValues { get; }
    public CurrentValueRecord CurrentValues { get; }
    public BitArray ModifiedProperties { get; }
    public abstract virtual IEntityStateManager get_StateManager();
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual EntitySetBase get_EntitySet();
    public abstract virtual bool get_IsRelationship();
    public abstract virtual bool get_IsKeyEntry();
    public abstract virtual EntityState get_State();
    public abstract virtual DbDataRecord get_OriginalValues();
    public abstract virtual CurrentValueRecord get_CurrentValues();
    public abstract virtual BitArray get_ModifiedProperties();
    public abstract virtual void AcceptChanges();
    public abstract virtual void Delete();
    public abstract virtual void SetModified();
    public abstract virtual void SetModifiedProperty(string propertyName);
    public abstract virtual IEnumerable`1<string> GetModifiedProperties();
}
internal interface System.Data.Entity.Core.IEntityStateManager {
    public abstract virtual IEnumerable`1<IEntityStateEntry> GetEntityStateEntries(EntityState state);
    public abstract virtual IEnumerable`1<IEntityStateEntry> FindRelationshipsByKey(EntityKey key);
    public abstract virtual IEntityStateEntry GetEntityStateEntry(EntityKey key);
    public abstract virtual bool TryGetEntityStateEntry(EntityKey key, IEntityStateEntry& stateEntry);
    public abstract virtual bool TryGetReferenceKey(EntityKey dependentKey, AssociationEndMember principalRole, EntityKey& principalKey);
}
public interface System.Data.Entity.Core.IExtendedDataRecord {
    public DataRecordInfo DataRecordInfo { get; }
    public abstract virtual DataRecordInfo get_DataRecordInfo();
    public abstract virtual DbDataRecord GetDataRecord(int i);
    public abstract virtual DbDataReader GetDataReader(int i);
}
internal class System.Data.Entity.Core.InternalMappingException : EntityException {
    private ErrorLog m_errorLog;
    internal ErrorLog ErrorLog { get; }
    internal InternalMappingException(string message);
    internal InternalMappingException(string message, Exception innerException);
    protected InternalMappingException(SerializationInfo info, StreamingContext context);
    internal InternalMappingException(string message, ErrorLog errorLog);
    internal InternalMappingException(string message, Record record);
    internal ErrorLog get_ErrorLog();
}
public class System.Data.Entity.Core.InvalidCommandTreeException : DataException {
    public InvalidCommandTreeException(string message);
    public InvalidCommandTreeException(string message, Exception innerException);
    private InvalidCommandTreeException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Core.Mapping.AssociationSetMapping : EntitySetBaseMapping {
    private AssociationSet _associationSet;
    private AssociationTypeMapping _associationTypeMapping;
    private AssociationSetModificationFunctionMapping _modificationFunctionMapping;
    public AssociationSet AssociationSet { get; }
    internal EntitySetBase Set { get; }
    public AssociationTypeMapping AssociationTypeMapping { get; internal set; }
    internal IEnumerable`1<TypeMapping> TypeMappings { get; }
    public AssociationSetModificationFunctionMapping ModificationFunctionMapping { get; public set; }
    public EntitySet StoreEntitySet { get; internal set; }
    internal EntityType Table { get; }
    public EndPropertyMapping SourceEndMapping { get; public set; }
    public EndPropertyMapping TargetEndMapping { get; public set; }
    public ReadOnlyCollection`1<ConditionPropertyMapping> Conditions { get; }
    private MappingFragment SingleFragment { get; }
    public AssociationSetMapping(AssociationSet associationSet, EntitySet storeEntitySet, EntityContainerMapping containerMapping);
    internal AssociationSetMapping(AssociationSet associationSet, EntitySet storeEntitySet);
    internal AssociationSetMapping(AssociationSet associationSet, EntityContainerMapping containerMapping);
    public AssociationSet get_AssociationSet();
    internal virtual EntitySetBase get_Set();
    public AssociationTypeMapping get_AssociationTypeMapping();
    internal void set_AssociationTypeMapping(AssociationTypeMapping value);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.AssociationSetMapping/<get_TypeMappings>d__14")]
internal virtual IEnumerable`1<TypeMapping> get_TypeMappings();
    public AssociationSetModificationFunctionMapping get_ModificationFunctionMapping();
    public void set_ModificationFunctionMapping(AssociationSetModificationFunctionMapping value);
    public EntitySet get_StoreEntitySet();
    internal void set_StoreEntitySet(EntitySet value);
    internal EntityType get_Table();
    public EndPropertyMapping get_SourceEndMapping();
    public void set_SourceEndMapping(EndPropertyMapping value);
    public EndPropertyMapping get_TargetEndMapping();
    public void set_TargetEndMapping(EndPropertyMapping value);
    public ReadOnlyCollection`1<ConditionPropertyMapping> get_Conditions();
    private MappingFragment get_SingleFragment();
    public void AddCondition(ConditionPropertyMapping condition);
    public void RemoveCondition(ConditionPropertyMapping condition);
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping : MappingItem {
    private AssociationSet _associationSet;
    private ModificationFunctionMapping _deleteFunctionMapping;
    private ModificationFunctionMapping _insertFunctionMapping;
    public AssociationSet AssociationSet { get; }
    public ModificationFunctionMapping DeleteFunctionMapping { get; }
    public ModificationFunctionMapping InsertFunctionMapping { get; }
    public AssociationSetModificationFunctionMapping(AssociationSet associationSet, ModificationFunctionMapping deleteFunctionMapping, ModificationFunctionMapping insertFunctionMapping);
    public AssociationSet get_AssociationSet();
    public ModificationFunctionMapping get_DeleteFunctionMapping();
    public ModificationFunctionMapping get_InsertFunctionMapping();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Mapping.AssociationTypeMapping : TypeMapping {
    private AssociationSetMapping _associationSetMapping;
    private MappingFragment _mappingFragment;
    private AssociationType m_relation;
    public AssociationSetMapping AssociationSetMapping { get; }
    internal EntitySetBaseMapping SetMapping { get; }
    public AssociationType AssociationType { get; }
    public MappingFragment MappingFragment { get; internal set; }
    internal ReadOnlyCollection`1<MappingFragment> MappingFragments { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> Types { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> IsOfTypes { get; }
    public AssociationTypeMapping(AssociationSetMapping associationSetMapping);
    internal AssociationTypeMapping(AssociationType relation, AssociationSetMapping associationSetMapping);
    public AssociationSetMapping get_AssociationSetMapping();
    internal virtual EntitySetBaseMapping get_SetMapping();
    public AssociationType get_AssociationType();
    public MappingFragment get_MappingFragment();
    internal void set_MappingFragment(MappingFragment value);
    internal virtual ReadOnlyCollection`1<MappingFragment> get_MappingFragments();
    internal virtual ReadOnlyCollection`1<EntityTypeBase> get_Types();
    internal virtual ReadOnlyCollection`1<EntityTypeBase> get_IsOfTypes();
    internal virtual void SetReadOnly();
}
internal abstract class System.Data.Entity.Core.Mapping.BaseMetadataMappingVisitor : object {
    private bool _sortSequence;
    protected BaseMetadataMappingVisitor(bool sortSequence);
    protected virtual void Visit(EntityContainerMapping entityContainerMapping);
    protected virtual void Visit(EntitySetBase entitySetBase);
    protected virtual void Visit(EntitySetBaseMapping setMapping);
    protected virtual void Visit(EntityContainer entityContainer);
    protected virtual void Visit(EntitySet entitySet);
    protected virtual void Visit(AssociationSet associationSet);
    protected virtual void Visit(EntityType entityType);
    protected virtual void Visit(AssociationType associationType);
    protected virtual void Visit(AssociationSetEnd associationSetEnd);
    protected virtual void Visit(EdmProperty edmProperty);
    protected virtual void Visit(NavigationProperty navigationProperty);
    protected virtual void Visit(EdmMember edmMember);
    protected virtual void Visit(AssociationEndMember associationEndMember);
    protected virtual void Visit(ReferentialConstraint referentialConstraint);
    protected virtual void Visit(RelationshipEndMember relationshipEndMember);
    protected virtual void Visit(TypeUsage typeUsage);
    protected virtual void Visit(RelationshipType relationshipType);
    protected virtual void Visit(EdmType edmType);
    protected virtual void Visit(Facet facet);
    protected virtual void Visit(EdmFunction edmFunction);
    protected virtual void Visit(PrimitiveType primitiveType);
    protected virtual void Visit(ComplexType complexType);
    protected virtual void Visit(RefType refType);
    protected virtual void Visit(EnumType enumType);
    protected virtual void Visit(EnumMember enumMember);
    protected virtual void Visit(CollectionType collectionType);
    protected virtual void Visit(EntityTypeBase entityTypeBase);
    protected virtual void Visit(FunctionParameter functionParameter);
    protected virtual void Visit(DbProviderManifest providerManifest);
    protected virtual void Visit(TypeMapping typeMapping);
    protected virtual void Visit(MappingFragment mappingFragment);
    protected virtual void Visit(PropertyMapping propertyMapping);
    protected virtual void Visit(ComplexPropertyMapping complexPropertyMapping);
    protected virtual void Visit(ConditionPropertyMapping conditionPropertyMapping);
    protected virtual void Visit(ScalarPropertyMapping scalarPropertyMapping);
    protected virtual void Visit(ComplexTypeMapping complexTypeMapping);
    protected IEnumerable`1<T> GetSequence(IEnumerable`1<T> sequence, Func`2<T, string> keySelector);
}
internal class System.Data.Entity.Core.Mapping.ColumnMappingBuilder : object {
    private EdmProperty _columnProperty;
    private IList`1<EdmProperty> _propertyPath;
    private ScalarPropertyMapping _scalarPropertyMapping;
    public IList`1<EdmProperty> PropertyPath { get; }
    public EdmProperty ColumnProperty { get; internal set; }
    public ColumnMappingBuilder(EdmProperty columnProperty, IList`1<EdmProperty> propertyPath);
    public IList`1<EdmProperty> get_PropertyPath();
    public EdmProperty get_ColumnProperty();
    internal void set_ColumnProperty(EdmProperty value);
    internal void SetTarget(ScalarPropertyMapping scalarPropertyMapping);
}
public class System.Data.Entity.Core.Mapping.ComplexPropertyMapping : PropertyMapping {
    private List`1<ComplexTypeMapping> _typeMappings;
    public ReadOnlyCollection`1<ComplexTypeMapping> TypeMappings { get; }
    public ComplexPropertyMapping(EdmProperty property);
    public ReadOnlyCollection`1<ComplexTypeMapping> get_TypeMappings();
    public void AddTypeMapping(ComplexTypeMapping typeMapping);
    public void RemoveTypeMapping(ComplexTypeMapping typeMapping);
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Mapping.ComplexTypeMapping : StructuralTypeMapping {
    private Dictionary`2<string, PropertyMapping> m_properties;
    private Dictionary`2<EdmProperty, ConditionPropertyMapping> m_conditionProperties;
    private Dictionary`2<string, ComplexType> m_types;
    private Dictionary`2<string, ComplexType> m_isOfTypes;
    public ComplexType ComplexType { get; }
    internal ReadOnlyCollection`1<ComplexType> Types { get; }
    internal ReadOnlyCollection`1<ComplexType> IsOfTypes { get; }
    public ReadOnlyCollection`1<PropertyMapping> PropertyMappings { get; }
    public ReadOnlyCollection`1<ConditionPropertyMapping> Conditions { get; }
    internal ReadOnlyCollection`1<PropertyMapping> AllProperties { get; }
    public ComplexTypeMapping(ComplexType complexType);
    internal ComplexTypeMapping(bool isPartial);
    public ComplexType get_ComplexType();
    internal ReadOnlyCollection`1<ComplexType> get_Types();
    internal ReadOnlyCollection`1<ComplexType> get_IsOfTypes();
    public virtual ReadOnlyCollection`1<PropertyMapping> get_PropertyMappings();
    public virtual ReadOnlyCollection`1<ConditionPropertyMapping> get_Conditions();
    internal ReadOnlyCollection`1<PropertyMapping> get_AllProperties();
    internal void AddType(ComplexType type);
    internal void AddIsOfType(ComplexType type);
    public virtual void AddPropertyMapping(PropertyMapping propertyMapping);
    public virtual void RemovePropertyMapping(PropertyMapping propertyMapping);
    public virtual void AddCondition(ConditionPropertyMapping condition);
    public virtual void RemoveCondition(ConditionPropertyMapping condition);
    internal virtual void SetReadOnly();
    internal void AddConditionProperty(ConditionPropertyMapping conditionPropertyMap, Action`1<EdmMember> duplicateMemberConditionError);
    internal ComplexType GetOwnerType(string memberName);
}
internal class System.Data.Entity.Core.Mapping.CompressingHashBuilder : StringHashBuilder {
    private static int HashCharacterCompressionThreshold;
    private static int SpacesPerIndent;
    private int _indent;
    private static Dictionary`2<Type, string> _legacyTypeNames;
    internal CompressingHashBuilder(HashAlgorithm hashAlgorithm);
    private static CompressingHashBuilder();
    internal virtual void Append(string content);
    internal virtual void AppendLine(string content);
    private static Dictionary`2<Type, string> InitializeLegacyTypeNames();
    internal void AppendObjectStartDump(object o, int objectIndex);
    internal void AppendObjectEndDump();
    private void CompressHash();
}
public class System.Data.Entity.Core.Mapping.ConditionPropertyMapping : PropertyMapping {
    private EdmProperty _column;
    private object _value;
    private Nullable`1<bool> _isNull;
    internal object Value { get; }
    internal Nullable`1<bool> IsNull { get; }
    public EdmProperty Property { get; internal set; }
    public EdmProperty Column { get; internal set; }
    internal ConditionPropertyMapping(EdmProperty propertyOrColumn, object value, Nullable`1<bool> isNull);
    internal ConditionPropertyMapping(EdmProperty property, EdmProperty column, object value, Nullable`1<bool> isNull);
    internal object get_Value();
    internal Nullable`1<bool> get_IsNull();
    public virtual EdmProperty get_Property();
    internal virtual void set_Property(EdmProperty value);
    public EdmProperty get_Column();
    internal void set_Column(EdmProperty value);
}
internal class System.Data.Entity.Core.Mapping.DefaultObjectMappingItemCollection : MappingItemCollection {
    private ObjectItemCollection _objectCollection;
    private EdmItemCollection _edmCollection;
    private Dictionary`2<string, int> _clrTypeIndexes;
    private Dictionary`2<string, int> _edmTypeIndexes;
    private object _lock;
    public ObjectItemCollection ObjectItemCollection { get; }
    public EdmItemCollection EdmItemCollection { get; }
    public DefaultObjectMappingItemCollection(EdmItemCollection edmCollection, ObjectItemCollection objectCollection);
    public ObjectItemCollection get_ObjectItemCollection();
    public EdmItemCollection get_EdmItemCollection();
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, MappingBase& map);
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, MappingBase& map);
    internal virtual MappingBase GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, MappingBase& map);
    private MappingBase GetDefaultMapping(EdmType cdmType, EdmType clrType);
    private MappingBase GetOCMapForTransientType(EdmType edmType, DataSpace typeSpace);
    private EdmType ConvertCSpaceToOSpaceType(EdmType cdmType);
    private EdmType ConvertOSpaceToCSpaceType(EdmType clrType);
    private void AddInternalMappings(IEnumerable`1<ObjectTypeMapping> typeMappings);
    private ObjectTypeMapping AddInternalMapping(ObjectTypeMapping objectMap, Dictionary`2<string, int> clrTypeIndexes, Dictionary`2<string, int> edmTypeIndexes);
    internal static ObjectTypeMapping LoadObjectMapping(EdmType cdmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection);
    private static ObjectTypeMapping LoadObjectMapping(EdmType edmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection, Dictionary`2<string, ObjectTypeMapping> typeMappings);
    private static EdmMember GetObjectMember(EdmMember edmMember, StructuralType objectType);
    private static void ValidateMembersMatch(EdmMember edmMember, EdmMember objectMember);
    private static ObjectPropertyMapping LoadScalarPropertyMapping(EdmProperty edmProperty, EdmProperty objectProperty);
    private static void LoadEntityTypeOrComplexTypeMapping(ObjectTypeMapping objectMapping, EdmType edmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection, Dictionary`2<string, ObjectTypeMapping> typeMappings);
    private static void ValidateAllMembersAreMapped(StructuralType cdmStructuralType, StructuralType objectStructuralType);
    private static void ValidateEnumTypeMapping(EnumType edmEnumType, EnumType objectEnumType);
    private static void LoadAssociationTypeMapping(ObjectTypeMapping objectMapping, EdmType edmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection, Dictionary`2<string, ObjectTypeMapping> typeMappings);
    private static ObjectComplexPropertyMapping LoadComplexMemberMapping(EdmProperty containingEdmMember, EdmProperty containingClrMember, DefaultObjectMappingItemCollection ocItemCollection, Dictionary`2<string, ObjectTypeMapping> typeMappings);
    private static ObjectTypeMapping LoadTypeMapping(EdmType edmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection, Dictionary`2<string, ObjectTypeMapping> typeMappings);
    private bool ContainsMap(GlobalItem cspaceItem, ObjectTypeMapping& map);
}
public class System.Data.Entity.Core.Mapping.EndPropertyMapping : PropertyMapping {
    private AssociationEndMember _associationEnd;
    private List`1<ScalarPropertyMapping> _properties;
    public AssociationEndMember AssociationEnd { get; internal set; }
    public ReadOnlyCollection`1<ScalarPropertyMapping> PropertyMappings { get; }
    internal IEnumerable`1<EdmMember> StoreProperties { get; }
    public EndPropertyMapping(AssociationEndMember associationEnd);
    public AssociationEndMember get_AssociationEnd();
    internal void set_AssociationEnd(AssociationEndMember value);
    public ReadOnlyCollection`1<ScalarPropertyMapping> get_PropertyMappings();
    internal IEnumerable`1<EdmMember> get_StoreProperties();
    public void AddPropertyMapping(ScalarPropertyMapping propertyMapping);
    public void RemovePropertyMapping(ScalarPropertyMapping propertyMapping);
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Mapping.EntityContainerMapping : MappingBase {
    private string identity;
    private bool m_validate;
    private bool m_generateUpdateViews;
    private EntityContainer m_entityContainer;
    private EntityContainer m_storageEntityContainer;
    private Dictionary`2<string, EntitySetBaseMapping> m_entitySetMappings;
    private Dictionary`2<string, EntitySetBaseMapping> m_associationSetMappings;
    private Dictionary`2<EdmFunction, FunctionImportMapping> m_functionImportMappings;
    private StorageMappingItemCollection m_storageMappingItemCollection;
    private Memoizer`2<InputForComputingCellGroups, OutputFromComputeCellGroups> m_memoizedCellGroupEvaluator;
    [CompilerGeneratedAttribute]
private string <SourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLinePosition>k__BackingField;
    public StorageMappingItemCollection MappingItemCollection { get; }
    internal StorageMappingItemCollection StorageMappingItemCollection { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal MetadataItem EdmItem { get; }
    internal string Identity { get; }
    internal bool IsEmpty { get; }
    internal bool HasViews { get; }
    internal string SourceLocation { get; internal set; }
    public EntityContainer ConceptualEntityContainer { get; }
    internal EntityContainer EdmEntityContainer { get; }
    public EntityContainer StoreEntityContainer { get; }
    internal EntityContainer StorageEntityContainer { get; }
    internal ReadOnlyCollection`1<EntitySetBaseMapping> EntitySetMaps { get; }
    public IEnumerable`1<EntitySetMapping> EntitySetMappings { get; }
    public IEnumerable`1<AssociationSetMapping> AssociationSetMappings { get; }
    public IEnumerable`1<FunctionImportMapping> FunctionImportMappings { get; }
    internal ReadOnlyCollection`1<EntitySetBaseMapping> RelationshipSetMaps { get; }
    internal IEnumerable`1<EntitySetBaseMapping> AllSetMaps { get; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal bool Validate { get; }
    public bool GenerateUpdateViews { get; }
    public EntityContainerMapping(EntityContainer conceptualEntityContainer, EntityContainer storeEntityContainer, StorageMappingItemCollection mappingItemCollection, bool generateUpdateViews);
    internal EntityContainerMapping(EntityContainer entityContainer, EntityContainer storageEntityContainer, StorageMappingItemCollection storageMappingItemCollection, bool validate, bool generateUpdateViews);
    internal EntityContainerMapping(EntityContainer entityContainer);
    public StorageMappingItemCollection get_MappingItemCollection();
    internal StorageMappingItemCollection get_StorageMappingItemCollection();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual MetadataItem get_EdmItem();
    internal virtual string get_Identity();
    internal bool get_IsEmpty();
    internal bool get_HasViews();
    [CompilerGeneratedAttribute]
internal string get_SourceLocation();
    [CompilerGeneratedAttribute]
internal void set_SourceLocation(string value);
    public EntityContainer get_ConceptualEntityContainer();
    internal EntityContainer get_EdmEntityContainer();
    public EntityContainer get_StoreEntityContainer();
    internal EntityContainer get_StorageEntityContainer();
    internal ReadOnlyCollection`1<EntitySetBaseMapping> get_EntitySetMaps();
    public virtual IEnumerable`1<EntitySetMapping> get_EntitySetMappings();
    public virtual IEnumerable`1<AssociationSetMapping> get_AssociationSetMappings();
    public IEnumerable`1<FunctionImportMapping> get_FunctionImportMappings();
    internal ReadOnlyCollection`1<EntitySetBaseMapping> get_RelationshipSetMaps();
    internal IEnumerable`1<EntitySetBaseMapping> get_AllSetMaps();
    [CompilerGeneratedAttribute]
internal int get_StartLineNumber();
    [CompilerGeneratedAttribute]
internal void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_StartLinePosition();
    [CompilerGeneratedAttribute]
internal void set_StartLinePosition(int value);
    internal bool get_Validate();
    public bool get_GenerateUpdateViews();
    internal EntitySetBaseMapping GetEntitySetMapping(string setName);
    internal EntitySetBaseMapping GetAssociationSetMapping(string setName);
    internal IEnumerable`1<AssociationSetMapping> GetRelationshipSetMappingsFor(EntitySetBase edmEntitySet, EntitySetBase storeEntitySet);
    internal EntitySetBaseMapping GetSetMapping(string setName);
    public void AddSetMapping(EntitySetMapping setMapping);
    public void RemoveSetMapping(EntitySetMapping setMapping);
    public void AddSetMapping(AssociationSetMapping setMapping);
    public void RemoveSetMapping(AssociationSetMapping setMapping);
    internal bool ContainsAssociationSetMapping(AssociationSet associationSet);
    public void AddFunctionImportMapping(FunctionImportMapping functionImportMapping);
    public void RemoveFunctionImportMapping(FunctionImportMapping functionImportMapping);
    internal virtual void SetReadOnly();
    internal bool HasQueryViewForSetMap(string setName);
    internal bool HasMappingFragments();
    internal virtual bool TryGetFunctionImportMapping(EdmFunction functionImport, FunctionImportMapping& mapping);
    internal OutputFromComputeCellGroups GetCellgroups(InputForComputingCellGroups args);
    private OutputFromComputeCellGroups ComputeCellGroups(InputForComputingCellGroups args);
}
public abstract class System.Data.Entity.Core.Mapping.EntitySetBaseMapping : MappingItem {
    private EntityContainerMapping _containerMapping;
    private string _queryView;
    private Dictionary`2<Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>>, string> _typeSpecificQueryViews;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasModificationFunctionMapping>k__BackingField;
    public EntityContainerMapping ContainerMapping { get; }
    internal EntityContainerMapping EntityContainerMapping { get; }
    public string QueryView { get; public set; }
    internal EntitySetBase Set { get; }
    internal IEnumerable`1<TypeMapping> TypeMappings { get; }
    internal bool HasNoContent { get; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal bool HasModificationFunctionMapping { get; internal set; }
    internal EntitySetBaseMapping(EntityContainerMapping containerMapping);
    public EntityContainerMapping get_ContainerMapping();
    internal EntityContainerMapping get_EntityContainerMapping();
    public string get_QueryView();
    public void set_QueryView(string value);
    internal abstract virtual EntitySetBase get_Set();
    internal abstract virtual IEnumerable`1<TypeMapping> get_TypeMappings();
    internal virtual bool get_HasNoContent();
    [CompilerGeneratedAttribute]
internal int get_StartLineNumber();
    [CompilerGeneratedAttribute]
internal void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_StartLinePosition();
    [CompilerGeneratedAttribute]
internal void set_StartLinePosition(int value);
    [CompilerGeneratedAttribute]
internal bool get_HasModificationFunctionMapping();
    [CompilerGeneratedAttribute]
internal void set_HasModificationFunctionMapping(bool value);
    internal bool ContainsTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key);
    internal void AddTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key, string viewString);
    internal ReadOnlyCollection`1<Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>>> GetTypeSpecificQVKeys();
    internal string GetTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key);
}
public class System.Data.Entity.Core.Mapping.EntitySetMapping : EntitySetBaseMapping {
    private EntitySet _entitySet;
    private List`1<EntityTypeMapping> _entityTypeMappings;
    private List`1<EntityTypeModificationFunctionMapping> _modificationFunctionMappings;
    private Lazy`1<List`1<AssociationSetEnd>> _implicitlyMappedAssociationSetEnds;
    public EntitySet EntitySet { get; }
    internal EntitySetBase Set { get; }
    public ReadOnlyCollection`1<EntityTypeMapping> EntityTypeMappings { get; }
    internal IEnumerable`1<TypeMapping> TypeMappings { get; }
    public ReadOnlyCollection`1<EntityTypeModificationFunctionMapping> ModificationFunctionMappings { get; }
    internal IEnumerable`1<AssociationSetEnd> ImplicitlyMappedAssociationSetEnds { get; }
    internal bool HasNoContent { get; }
    public EntitySetMapping(EntitySet entitySet, EntityContainerMapping containerMapping);
    public EntitySet get_EntitySet();
    internal virtual EntitySetBase get_Set();
    public ReadOnlyCollection`1<EntityTypeMapping> get_EntityTypeMappings();
    internal virtual IEnumerable`1<TypeMapping> get_TypeMappings();
    public ReadOnlyCollection`1<EntityTypeModificationFunctionMapping> get_ModificationFunctionMappings();
    internal IEnumerable`1<AssociationSetEnd> get_ImplicitlyMappedAssociationSetEnds();
    internal virtual bool get_HasNoContent();
    public void AddTypeMapping(EntityTypeMapping typeMapping);
    public void RemoveTypeMapping(EntityTypeMapping typeMapping);
    internal void ClearModificationFunctionMappings();
    public void AddModificationFunctionMapping(EntityTypeModificationFunctionMapping modificationFunctionMapping);
    public void RemoveModificationFunctionMapping(EntityTypeModificationFunctionMapping modificationFunctionMapping);
    internal virtual void SetReadOnly();
    [ConditionalAttribute("DEBUG")]
private void AssertModificationFunctionMappingInvariants(EntityTypeModificationFunctionMapping modificationFunctionMapping);
    private List`1<AssociationSetEnd> InitializeImplicitlyMappedAssociationSetEnds();
}
public class System.Data.Entity.Core.Mapping.EntityTypeMapping : TypeMapping {
    private EntitySetMapping _entitySetMapping;
    private List`1<MappingFragment> _fragments;
    private Dictionary`2<string, EntityType> m_entityTypes;
    private Dictionary`2<string, EntityType> m_isOfEntityTypes;
    private EntityType _entityType;
    public EntitySetMapping EntitySetMapping { get; }
    internal EntitySetBaseMapping SetMapping { get; }
    public EntityType EntityType { get; }
    public bool IsHierarchyMapping { get; }
    public ReadOnlyCollection`1<MappingFragment> Fragments { get; }
    internal ReadOnlyCollection`1<MappingFragment> MappingFragments { get; }
    public ReadOnlyCollection`1<EntityTypeBase> EntityTypes { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> Types { get; }
    public ReadOnlyCollection`1<EntityTypeBase> IsOfEntityTypes { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> IsOfTypes { get; }
    public EntityTypeMapping(EntitySetMapping entitySetMapping);
    public EntitySetMapping get_EntitySetMapping();
    internal virtual EntitySetBaseMapping get_SetMapping();
    public EntityType get_EntityType();
    public bool get_IsHierarchyMapping();
    public ReadOnlyCollection`1<MappingFragment> get_Fragments();
    internal virtual ReadOnlyCollection`1<MappingFragment> get_MappingFragments();
    public ReadOnlyCollection`1<EntityTypeBase> get_EntityTypes();
    internal virtual ReadOnlyCollection`1<EntityTypeBase> get_Types();
    public ReadOnlyCollection`1<EntityTypeBase> get_IsOfEntityTypes();
    internal virtual ReadOnlyCollection`1<EntityTypeBase> get_IsOfTypes();
    public void AddType(EntityType type);
    public void RemoveType(EntityType type);
    public void AddIsOfType(EntityType type);
    public void RemoveIsOfType(EntityType type);
    public void AddFragment(MappingFragment fragment);
    public void RemoveFragment(MappingFragment fragment);
    internal virtual void SetReadOnly();
    internal EntityType GetContainerType(string memberName);
}
public class System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping : MappingItem {
    private EntityType _entityType;
    private ModificationFunctionMapping _deleteFunctionMapping;
    private ModificationFunctionMapping _insertFunctionMapping;
    private ModificationFunctionMapping _updateFunctionMapping;
    public EntityType EntityType { get; }
    public ModificationFunctionMapping DeleteFunctionMapping { get; }
    public ModificationFunctionMapping InsertFunctionMapping { get; }
    public ModificationFunctionMapping UpdateFunctionMapping { get; }
    internal IEnumerable`1<ModificationFunctionParameterBinding> PrimaryParameterBindings { get; }
    public EntityTypeModificationFunctionMapping(EntityType entityType, ModificationFunctionMapping deleteFunctionMapping, ModificationFunctionMapping insertFunctionMapping, ModificationFunctionMapping updateFunctionMapping);
    public EntityType get_EntityType();
    public ModificationFunctionMapping get_DeleteFunctionMapping();
    public ModificationFunctionMapping get_InsertFunctionMapping();
    public ModificationFunctionMapping get_UpdateFunctionMapping();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal IEnumerable`1<ModificationFunctionParameterBinding> get_PrimaryParameterBindings();
}
[ObsoleteAttribute("The mechanism to provide pre-generated views has changed. Implement a class that derives from System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache and has a parameterless constructor, then associate it with a type that derives from DbContext or ObjectContext by using System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.", "True")]
public abstract class System.Data.Entity.Core.Mapping.EntityViewContainer : object {
    [CompilerGeneratedAttribute]
private string <EdmEntityContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreEntityContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashOverMappingClosure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashOverAllExtentViews>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewCount>k__BackingField;
    internal IEnumerable`1<KeyValuePair`2<string, string>> ExtentViews { get; }
    public string EdmEntityContainerName { get; public set; }
    public string StoreEntityContainerName { get; public set; }
    public string HashOverMappingClosure { get; public set; }
    public string HashOverAllExtentViews { get; public set; }
    public int ViewCount { get; protected set; }
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.EntityViewContainer/<get_ExtentViews>d__1")]
internal IEnumerable`1<KeyValuePair`2<string, string>> get_ExtentViews();
    protected abstract virtual KeyValuePair`2<string, string> GetViewAt(int index);
    [CompilerGeneratedAttribute]
public string get_EdmEntityContainerName();
    [CompilerGeneratedAttribute]
public void set_EdmEntityContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_StoreEntityContainerName();
    [CompilerGeneratedAttribute]
public void set_StoreEntityContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_HashOverMappingClosure();
    [CompilerGeneratedAttribute]
public void set_HashOverMappingClosure(string value);
    [CompilerGeneratedAttribute]
public string get_HashOverAllExtentViews();
    [CompilerGeneratedAttribute]
public void set_HashOverAllExtentViews(string value);
    [CompilerGeneratedAttribute]
public int get_ViewCount();
    [CompilerGeneratedAttribute]
protected void set_ViewCount(int value);
}
[ObsoleteAttribute("The mechanism to provide pre-generated views has changed. Implement a class that derives from System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache and has a parameterless constructor, then associate it with a type that derives from DbContext or ObjectContext by using System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.", "True")]
[AttributeUsageAttribute("1")]
public class System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute : Attribute {
    private Type m_viewGenType;
    public Type ViewGenerationType { get; }
    public EntityViewGenerationAttribute(Type viewGenerationType);
    public Type get_ViewGenerationType();
}
public class System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping : FunctionImportStructuralTypeMapping {
    private ComplexType _returnType;
    public ComplexType ReturnType { get; }
    public FunctionImportComplexTypeMapping(ComplexType returnType, Collection`1<FunctionImportReturnTypePropertyMapping> properties);
    internal FunctionImportComplexTypeMapping(ComplexType returnType, Collection`1<FunctionImportReturnTypePropertyMapping> properties, LineInfo lineInfo);
    public ComplexType get_ReturnType();
}
public class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping : FunctionImportStructuralTypeMapping {
    private ReadOnlyCollection`1<EntityType> _entityTypes;
    private ReadOnlyCollection`1<EntityType> _isOfTypeEntityTypes;
    private ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> _conditions;
    public ReadOnlyCollection`1<EntityType> EntityTypes { get; }
    public ReadOnlyCollection`1<EntityType> IsOfTypeEntityTypes { get; }
    public ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> Conditions { get; }
    public FunctionImportEntityTypeMapping(IEnumerable`1<EntityType> isOfTypeEntityTypes, IEnumerable`1<EntityType> entityTypes, Collection`1<FunctionImportReturnTypePropertyMapping> properties, IEnumerable`1<FunctionImportEntityTypeMappingCondition> conditions);
    internal FunctionImportEntityTypeMapping(IEnumerable`1<EntityType> isOfTypeEntityTypes, IEnumerable`1<EntityType> entityTypes, IEnumerable`1<FunctionImportEntityTypeMappingCondition> conditions, Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameList, LineInfo lineInfo);
    public ReadOnlyCollection`1<EntityType> get_EntityTypes();
    public ReadOnlyCollection`1<EntityType> get_IsOfTypeEntityTypes();
    public ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> get_Conditions();
    internal virtual void SetReadOnly();
    internal IEnumerable`1<EntityType> GetMappedEntityTypes(ItemCollection itemCollection);
    internal IEnumerable`1<string> GetDiscriminatorColumns();
}
public abstract class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition : MappingItem {
    private string _columnName;
    internal LineInfo LineInfo;
    public string ColumnName { get; }
    internal ValueCondition ConditionValue { get; }
    internal FunctionImportEntityTypeMappingCondition(string columnName, LineInfo lineInfo);
    public string get_ColumnName();
    internal abstract virtual ValueCondition get_ConditionValue();
    internal abstract virtual bool ColumnValueMatchesCondition(object columnValue);
    public virtual string ToString();
}
public class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull : FunctionImportEntityTypeMappingCondition {
    private bool _isNull;
    public bool IsNull { get; }
    internal ValueCondition ConditionValue { get; }
    public FunctionImportEntityTypeMappingConditionIsNull(string columnName, bool isNull);
    internal FunctionImportEntityTypeMappingConditionIsNull(string columnName, bool isNull, LineInfo lineInfo);
    public bool get_IsNull();
    internal virtual ValueCondition get_ConditionValue();
    internal virtual bool ColumnValueMatchesCondition(object columnValue);
}
public class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue : FunctionImportEntityTypeMappingCondition {
    private object _value;
    private XPathNavigator _xPathValue;
    private Memoizer`2<Type, object> _convertedValues;
    public object Value { get; }
    internal ValueCondition ConditionValue { get; }
    public FunctionImportEntityTypeMappingConditionValue(string columnName, object value);
    internal FunctionImportEntityTypeMappingConditionValue(string columnName, XPathNavigator columnValue, LineInfo lineInfo);
    public object get_Value();
    internal virtual ValueCondition get_ConditionValue();
    internal virtual bool ColumnValueMatchesCondition(object columnValue);
    private object GetConditionValue(Type columnValueType);
    internal object GetConditionValue(Type columnValueType, Action handleTypeNotComparable, Action handleInvalidConditionValue);
}
public abstract class System.Data.Entity.Core.Mapping.FunctionImportMapping : MappingItem {
    private EdmFunction _functionImport;
    private EdmFunction _targetFunction;
    public EdmFunction FunctionImport { get; }
    public EdmFunction TargetFunction { get; }
    internal FunctionImportMapping(EdmFunction functionImport, EdmFunction targetFunction);
    public EdmFunction get_FunctionImport();
    public EdmFunction get_TargetFunction();
}
public class System.Data.Entity.Core.Mapping.FunctionImportMappingComposable : FunctionImportMapping {
    private FunctionImportResultMapping _resultMapping;
    private EntityContainerMapping _containerMapping;
    private DbParameterReferenceExpression[] m_commandParameters;
    private List`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> m_structuralTypeMappings;
    private EdmProperty[] m_targetFunctionKeys;
    private Node m_internalTreeNode;
    public FunctionImportResultMapping ResultMapping { get; }
    internal ReadOnlyCollection`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> StructuralTypeMappings { get; }
    internal EdmProperty[] TvfKeys { get; }
    public FunctionImportMappingComposable(EdmFunction functionImport, EdmFunction targetFunction, FunctionImportResultMapping resultMapping, EntityContainerMapping containerMapping);
    internal FunctionImportMappingComposable(EdmFunction functionImport, EdmFunction targetFunction, List`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> structuralTypeMappings);
    internal FunctionImportMappingComposable(EdmFunction functionImport, EdmFunction targetFunction, List`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> structuralTypeMappings, EdmProperty[] targetFunctionKeys, EntityContainerMapping containerMapping);
    public FunctionImportResultMapping get_ResultMapping();
    internal virtual void SetReadOnly();
    internal ReadOnlyCollection`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> get_StructuralTypeMappings();
    internal EdmProperty[] get_TvfKeys();
    internal Node GetInternalTree(Command targetIqtCommand, IList`1<Node> targetIqtArguments);
    internal DbQueryCommandTree GenerateFunctionView(DiscriminatorMap& discriminatorMap);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.FunctionImportMappingComposable/<GetParametersForTargetFunctionCall>d__19")]
private IEnumerable`1<DbExpression> GetParametersForTargetFunctionCall();
    private DbExpression GenerateStructuralTypeResultMappingView(DbExpression storeFunctionInvoke, DiscriminatorMap& discriminatorMap);
    private static DbExpression GenerateStructuralTypeMappingView(StructuralType structuralType, List`1<PropertyMapping> propertyMappings, DbExpression row);
    private static DbExpression GenerateStructuralTypeConditionsPredicate(List`1<ConditionPropertyMapping> conditions, DbExpression row);
    private static DbExpression GeneratePredicate(ConditionPropertyMapping condition, DbExpression row);
    private static DbExpression GeneratePropertyMappingView(PropertyMapping mapping, DbExpression row);
    private static DbExpression GenerateScalarPropertyMappingView(EdmProperty edmProperty, EdmProperty columnProperty, DbExpression row);
    private static DbExpression GenerateColumnRef(DbExpression row, EdmProperty column);
    private DbExpression GenerateScalarResultMappingView(DbExpression storeFunctionInvoke);
}
internal class System.Data.Entity.Core.Mapping.FunctionImportMappingComposableHelper : object {
    private EntityContainerMapping _entityContainerMapping;
    private string m_sourceLocation;
    private List`1<EdmSchemaError> m_parsingErrors;
    internal FunctionImportMappingComposableHelper(EntityContainerMapping entityContainerMapping, string sourceLocation, List`1<EdmSchemaError> parsingErrors);
    internal bool TryCreateFunctionImportMappingComposableWithStructuralResult(EdmFunction functionImport, EdmFunction cTypeTargetFunction, List`1<FunctionImportStructuralTypeMapping> typeMappings, RowType cTypeTvfElementType, RowType sTypeTvfElementType, IXmlLineInfo lineInfo, FunctionImportMappingComposable& mapping);
    internal bool TryCreateFunctionImportMappingComposableWithScalarResult(EdmFunction functionImport, EdmFunction cTypeTargetFunction, EdmFunction sTypeTargetFunction, EdmType scalarResultType, RowType cTypeTvfElementType, IXmlLineInfo lineInfo, FunctionImportMappingComposable& mapping);
    private bool TryConvertToEntityTypeConditionsAndPropertyMappings(EdmFunction functionImport, FunctionImportStructuralTypeMappingKB functionImportKB, int typeID, RowType cTypeTvfElementType, RowType sTypeTvfElementType, IXmlLineInfo navLineInfo, List`1& typeConditions, List`1& propertyMappings);
    private bool TryConvertToPropertyMappings(StructuralType structuralType, RowType cTypeTvfElementType, RowType sTypeTvfElementType, EdmFunction functionImport, FunctionImportStructuralTypeMappingKB functionImportKB, IXmlLineInfo navLineInfo, List`1& propertyMappings);
    private static bool TryInferTVFKeys(List`1<Tuple`3<StructuralType, List`1<ConditionPropertyMapping>, List`1<PropertyMapping>>> structuralTypeMappings, EdmProperty[]& keys);
    private static bool TryInferTVFKeysForEntityType(EntityType entityType, List`1<PropertyMapping> propertyMappings, EdmProperty[]& keys);
    private static bool ValidateFunctionImportMappingResultTypeCompatibility(TypeUsage cSpaceMemberType, TypeUsage sSpaceMemberType);
    private static TypeUsage ResolveTypeUsageForEnums(TypeUsage typeUsage);
    private static void AddToSchemaErrors(string message, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    private static void AddToSchemaErrorsWithMemberInfo(Func`2<object, string> messageFormat, string errorMember, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    private static void AddToSchemaErrorWithMemberAndStructure(Func`3<object, object, string> messageFormat, string errorMember, string errorStructure, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    private static string GetInvalidMemberMappingErrorMessage(EdmMember cSpaceMember, EdmMember sSpaceMember);
}
public class System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable : FunctionImportMapping {
    private ReadOnlyCollection`1<FunctionImportResultMapping> _resultMappings;
    private bool noExplicitResultMappings;
    private ReadOnlyCollection`1<FunctionImportStructuralTypeMappingKB> _internalResultMappings;
    internal ReadOnlyCollection`1<FunctionImportStructuralTypeMappingKB> InternalResultMappings { get; }
    public ReadOnlyCollection`1<FunctionImportResultMapping> ResultMappings { get; }
    public FunctionImportMappingNonComposable(EdmFunction functionImport, EdmFunction targetFunction, IEnumerable`1<FunctionImportResultMapping> resultMappings, EntityContainerMapping containerMapping);
    internal FunctionImportMappingNonComposable(EdmFunction functionImport, EdmFunction targetFunction, List`1<List`1<FunctionImportStructuralTypeMapping>> structuralTypeMappingsList, ItemCollection itemCollection);
    internal ReadOnlyCollection`1<FunctionImportStructuralTypeMappingKB> get_InternalResultMappings();
    public ReadOnlyCollection`1<FunctionImportResultMapping> get_ResultMappings();
    internal virtual void SetReadOnly();
    internal FunctionImportStructuralTypeMappingKB GetResultMapping(int resultSetIndex);
    internal IList`1<string> GetDiscriminatorColumns(int resultSetIndex);
    internal EntityType Discriminate(Object[] discriminatorValues, int resultSetIndex);
    internal TypeUsage GetExpectedTargetResultType(int resultSetIndex);
}
internal class System.Data.Entity.Core.Mapping.FunctionImportNormalizedEntityTypeMapping : object {
    internal ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> ColumnConditions;
    internal BitArray ImpliedEntityTypes;
    internal BitArray ComplementImpliedEntityTypes;
    internal FunctionImportNormalizedEntityTypeMapping(FunctionImportStructuralTypeMappingKB parent, List`1<FunctionImportEntityTypeMappingCondition> columnConditions, BitArray impliedEntityTypes);
    public virtual string ToString();
}
public class System.Data.Entity.Core.Mapping.FunctionImportResultMapping : MappingItem {
    private List`1<FunctionImportStructuralTypeMapping> _typeMappings;
    public ReadOnlyCollection`1<FunctionImportStructuralTypeMapping> TypeMappings { get; }
    internal List`1<FunctionImportStructuralTypeMapping> SourceList { get; }
    public ReadOnlyCollection`1<FunctionImportStructuralTypeMapping> get_TypeMappings();
    public void AddTypeMapping(FunctionImportStructuralTypeMapping typeMapping);
    public void RemoveTypeMapping(FunctionImportStructuralTypeMapping typeMapping);
    internal virtual void SetReadOnly();
    internal List`1<FunctionImportStructuralTypeMapping> get_SourceList();
}
internal class System.Data.Entity.Core.Mapping.FunctionImportReturnTypeEntityTypeColumnsRenameBuilder : object {
    internal Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> ColumnRenameMapping;
    internal FunctionImportReturnTypeEntityTypeColumnsRenameBuilder(Dictionary`2<EntityType, Collection`1<FunctionImportReturnTypePropertyMapping>> isOfTypeEntityTypeColumnsRenameMapping, Dictionary`2<EntityType, Collection`1<FunctionImportReturnTypePropertyMapping>> entityTypeColumnsRenameMapping);
    private void SetStructuralTypeColumnsRename(EntityType entityType, Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameMapping, bool isTypeOf);
}
public abstract class System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping : MappingItem {
    internal LineInfo LineInfo;
    internal string CMember { get; }
    internal string SColumn { get; }
    internal FunctionImportReturnTypePropertyMapping(LineInfo lineInfo);
    internal abstract virtual string get_CMember();
    internal abstract virtual string get_SColumn();
}
public class System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping : FunctionImportReturnTypePropertyMapping {
    private string _propertyName;
    private string _columnName;
    public string PropertyName { get; }
    internal string CMember { get; }
    public string ColumnName { get; }
    internal string SColumn { get; }
    public FunctionImportReturnTypeScalarPropertyMapping(string propertyName, string columnName);
    internal FunctionImportReturnTypeScalarPropertyMapping(string propertyName, string columnName, LineInfo lineInfo);
    public string get_PropertyName();
    internal virtual string get_CMember();
    public string get_ColumnName();
    internal virtual string get_SColumn();
}
internal class System.Data.Entity.Core.Mapping.FunctionImportReturnTypeStructuralTypeColumn : object {
    internal StructuralType Type;
    internal bool IsTypeOf;
    internal string ColumnName;
    internal LineInfo LineInfo;
    internal FunctionImportReturnTypeStructuralTypeColumn(string columnName, StructuralType type, bool isTypeOf, LineInfo lineInfo);
}
internal class System.Data.Entity.Core.Mapping.FunctionImportReturnTypeStructuralTypeColumnRenameMapping : object {
    private Collection`1<FunctionImportReturnTypeStructuralTypeColumn> _columnListForType;
    private Collection`1<FunctionImportReturnTypeStructuralTypeColumn> _columnListForIsTypeOfType;
    private string _defaultMemberName;
    private Memoizer`2<StructuralType, FunctionImportReturnTypeStructuralTypeColumn> _renameCache;
    internal FunctionImportReturnTypeStructuralTypeColumnRenameMapping(string defaultMemberName);
    internal string GetRename(EdmType type);
    internal string GetRename(EdmType type, IXmlLineInfo& lineInfo);
    private FunctionImportReturnTypeStructuralTypeColumn GetRename(StructuralType typeForRename);
    private static FunctionImportReturnTypeStructuralTypeColumn GetLowestParentInHierarchy(IEnumerable`1<FunctionImportReturnTypeStructuralTypeColumn> nodesInHierarchy);
    internal void AddRename(FunctionImportReturnTypeStructuralTypeColumn renamedColumn);
}
public abstract class System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping : MappingItem {
    internal LineInfo LineInfo;
    internal Collection`1<FunctionImportReturnTypePropertyMapping> ColumnsRenameList;
    public ReadOnlyCollection`1<FunctionImportReturnTypePropertyMapping> PropertyMappings { get; }
    internal FunctionImportStructuralTypeMapping(Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameList, LineInfo lineInfo);
    public ReadOnlyCollection`1<FunctionImportReturnTypePropertyMapping> get_PropertyMappings();
    internal virtual void SetReadOnly();
}
internal class System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMappingKB : object {
    private ItemCollection m_itemCollection;
    private KeyToListMap`2<EntityType, LineInfo> m_entityTypeLineInfos;
    private KeyToListMap`2<EntityType, LineInfo> m_isTypeOfLineInfos;
    internal ReadOnlyCollection`1<EntityType> MappedEntityTypes;
    internal ReadOnlyCollection`1<string> DiscriminatorColumns;
    internal ReadOnlyCollection`1<FunctionImportNormalizedEntityTypeMapping> NormalizedEntityTypeMappings;
    internal Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> ReturnTypeColumnsRenameMapping;
    internal FunctionImportStructuralTypeMappingKB(IEnumerable`1<FunctionImportStructuralTypeMapping> structuralTypeMappings, ItemCollection itemCollection);
    internal bool ValidateTypeConditions(bool validateAmbiguity, IList`1<EdmSchemaError> errors, string sourceLocation);
    private void GetUnreachableTypes(bool validateAmbiguity, KeyToListMap`2& unreachableEntityTypes, KeyToListMap`2& unreachableIsTypeOfs);
    private DomainVariable`2[] ConstructDomainVariables();
    private Vertex[] ConvertMappingConditionsToVertices(ConversionContext`1<DomainConstraint`2<string, ValueCondition>> converter, DomainVariable`2[] variables);
    private Set`1<EntityType> FindReachableTypes(DomainConstraintConversionContext`2<string, ValueCondition> converter, Vertex[] mappingConditions);
    private Set`1<EntityType> FindUnambiguouslyReachableTypes(DomainConstraintConversionContext`2<string, ValueCondition> converter, Vertex[] mappingConditions);
    private void CollectUnreachableTypes(Set`1<EntityType> reachableTypes, KeyToListMap`2& entityTypes, KeyToListMap`2& isTypeOfEntityTypes);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntityType> <.ctor>b__0_0(FunctionImportEntityTypeMapping mapping);
}
internal class System.Data.Entity.Core.Mapping.InputForComputingCellGroups : ValueType {
    internal EntityContainerMapping ContainerMapping;
    internal ConfigViewGenerator Config;
    internal InputForComputingCellGroups(EntityContainerMapping containerMapping, ConfigViewGenerator config);
    public sealed virtual bool Equals(InputForComputingCellGroups other);
    public sealed virtual bool Equals(InputForComputingCellGroups one, InputForComputingCellGroups two);
    public sealed virtual int GetHashCode(InputForComputingCellGroups value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(InputForComputingCellGroups input1, InputForComputingCellGroups input2);
    public static bool op_Inequality(InputForComputingCellGroups input1, InputForComputingCellGroups input2);
}
public class System.Data.Entity.Core.Mapping.IsNullConditionMapping : ConditionPropertyMapping {
    public bool IsNull { get; }
    public IsNullConditionMapping(EdmProperty propertyOrColumn, bool isNull);
    public bool get_IsNull();
}
internal class System.Data.Entity.Core.Mapping.LineInfo : object {
    private bool m_hasLineInfo;
    private int m_lineNumber;
    private int m_linePosition;
    internal static LineInfo Empty;
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal LineInfo(XPathNavigator nav);
    internal LineInfo(IXmlLineInfo lineInfo);
    private static LineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public sealed virtual bool HasLineInfo();
}
public abstract class System.Data.Entity.Core.Mapping.MappingBase : GlobalItem {
    internal MetadataItem EdmItem { get; }
    internal MappingBase(MetadataFlags flags);
    internal abstract virtual MetadataItem get_EdmItem();
}
internal enum System.Data.Entity.Core.Mapping.MappingErrorCode : Enum {
    public int value__;
    public static MappingErrorCode Value;
    public static MappingErrorCode InvalidContent;
    public static MappingErrorCode InvalidEntityContainer;
    public static MappingErrorCode InvalidEntitySet;
    public static MappingErrorCode InvalidEntityType;
    public static MappingErrorCode InvalidAssociationSet;
    public static MappingErrorCode InvalidAssociationType;
    public static MappingErrorCode InvalidTable;
    public static MappingErrorCode InvalidComplexType;
    public static MappingErrorCode InvalidEdmMember;
    public static MappingErrorCode InvalidStorageMember;
    public static MappingErrorCode TableMappingFragmentExpected;
    public static MappingErrorCode SetMappingExpected;
    public static MappingErrorCode DuplicateSetMapping;
    public static MappingErrorCode DuplicateTypeMapping;
    public static MappingErrorCode ConditionError;
    public static MappingErrorCode RootMappingElementMissing;
    public static MappingErrorCode IncompatibleMemberMapping;
    public static MappingErrorCode InvalidEnumValue;
    public static MappingErrorCode XmlSchemaParsingError;
    public static MappingErrorCode XmlSchemaValidationError;
    public static MappingErrorCode AmbiguousModificationFunctionMappingForAssociationSet;
    public static MappingErrorCode MissingSetClosureInModificationFunctionMapping;
    public static MappingErrorCode MissingModificationFunctionMappingForEntityType;
    public static MappingErrorCode InvalidTableNameAttributeWithModificationFunctionMapping;
    public static MappingErrorCode InvalidModificationFunctionMappingForMultipleTypes;
    public static MappingErrorCode AmbiguousResultBindingInModificationFunctionMapping;
    public static MappingErrorCode InvalidAssociationSetRoleInModificationFunctionMapping;
    public static MappingErrorCode InvalidAssociationSetCardinalityInModificationFunctionMapping;
    public static MappingErrorCode RedundantEntityTypeMappingInModificationFunctionMapping;
    public static MappingErrorCode MissingVersionInModificationFunctionMapping;
    public static MappingErrorCode InvalidVersionInModificationFunctionMapping;
    public static MappingErrorCode InvalidParameterInModificationFunctionMapping;
    public static MappingErrorCode ParameterBoundTwiceInModificationFunctionMapping;
    public static MappingErrorCode CSpaceMemberMappedToMultipleSSpaceMemberWithDifferentTypes;
    public static MappingErrorCode NoEquivalentStorePrimitiveTypeFound;
    public static MappingErrorCode NoEquivalentStorePrimitiveTypeWithFacetsFound;
    public static MappingErrorCode InvalidModificationFunctionMappingPropertyParameterTypeMismatch;
    public static MappingErrorCode InvalidModificationFunctionMappingMultipleEndsOfAssociationMapped;
    public static MappingErrorCode InvalidModificationFunctionMappingUnknownFunction;
    public static MappingErrorCode InvalidModificationFunctionMappingAmbiguousFunction;
    public static MappingErrorCode InvalidModificationFunctionMappingNotValidFunction;
    public static MappingErrorCode InvalidModificationFunctionMappingNotValidFunctionParameter;
    public static MappingErrorCode InvalidModificationFunctionMappingAssociationSetNotMappedForOperation;
    public static MappingErrorCode InvalidModificationFunctionMappingAssociationEndMappingInvalidForEntityType;
    public static MappingErrorCode MappingFunctionImportStoreFunctionDoesNotExist;
    public static MappingErrorCode MappingFunctionImportStoreFunctionAmbiguous;
    public static MappingErrorCode MappingFunctionImportFunctionImportDoesNotExist;
    public static MappingErrorCode MappingFunctionImportFunctionImportMappedMultipleTimes;
    public static MappingErrorCode MappingFunctionImportTargetFunctionMustBeNonComposable;
    public static MappingErrorCode MappingFunctionImportTargetParameterHasNoCorrespondingImportParameter;
    public static MappingErrorCode MappingFunctionImportImportParameterHasNoCorrespondingTargetParameter;
    public static MappingErrorCode MappingFunctionImportIncompatibleParameterMode;
    public static MappingErrorCode MappingFunctionImportIncompatibleParameterType;
    public static MappingErrorCode MappingFunctionImportRowsAffectedParameterDoesNotExist;
    public static MappingErrorCode MappingFunctionImportRowsAffectedParameterHasWrongType;
    public static MappingErrorCode MappingFunctionImportRowsAffectedParameterHasWrongMode;
    public static MappingErrorCode EmptyContainerMapping;
    public static MappingErrorCode EmptySetMapping;
    public static MappingErrorCode TableNameAttributeWithQueryView;
    public static MappingErrorCode EmptyQueryView;
    public static MappingErrorCode PropertyMapsWithQueryView;
    public static MappingErrorCode MissingSetClosureInQueryViews;
    public static MappingErrorCode InvalidQueryView;
    public static MappingErrorCode InvalidQueryViewResultType;
    public static MappingErrorCode ItemWithSameNameExistsBothInCSpaceAndSSpace;
    public static MappingErrorCode MappingUnsupportedExpressionKindQueryView;
    public static MappingErrorCode MappingUnsupportedScanTargetQueryView;
    public static MappingErrorCode MappingUnsupportedPropertyKindQueryView;
    public static MappingErrorCode MappingUnsupportedInitializationQueryView;
    public static MappingErrorCode MappingFunctionImportEntityTypeMappingForFunctionNotReturningEntitySet;
    public static MappingErrorCode MappingFunctionImportAmbiguousTypeConditions;
    public static MappingErrorCode MappingOfAbstractType;
    public static MappingErrorCode StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping;
    public static MappingErrorCode TypeNameForFirstQueryView;
    public static MappingErrorCode NoTypeNameForTypeSpecificQueryView;
    public static MappingErrorCode QueryViewExistsForEntitySetAndType;
    public static MappingErrorCode TypeNameContainsMultipleTypesForQueryView;
    public static MappingErrorCode IsTypeOfQueryViewForBaseType;
    public static MappingErrorCode InvalidTypeInScalarProperty;
    public static MappingErrorCode AlreadyMappedStorageEntityContainer;
    public static MappingErrorCode UnsupportedQueryViewInEntityContainerMapping;
    public static MappingErrorCode MappingAllQueryViewAtCompileTime;
    public static MappingErrorCode MappingNoViewsCanBeGenerated;
    public static MappingErrorCode MappingStoreProviderReturnsNullEdmType;
    public static MappingErrorCode DuplicateMemberMapping;
    public static MappingErrorCode MappingFunctionImportUnexpectedEntityTypeMapping;
    public static MappingErrorCode MappingFunctionImportUnexpectedComplexTypeMapping;
    public static MappingErrorCode DistinctFragmentInReadWriteContainer;
    public static MappingErrorCode EntitySetMismatchOnAssociationSetEnd;
    public static MappingErrorCode InvalidModificationFunctionMappingAssociationEndForeignKey;
    public static MappingErrorCode CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    public static MappingErrorCode MappingDifferentMappingEdmStoreVersion;
    public static MappingErrorCode MappingDifferentEdmStoreVersion;
    public static MappingErrorCode UnmappedFunctionImport;
    public static MappingErrorCode MappingFunctionImportReturnTypePropertyNotMapped;
    public static MappingErrorCode InvalidType;
    public static MappingErrorCode MappingFunctionImportTVFExpected;
    public static MappingErrorCode MappingFunctionImportScalarMappingTypeMismatch;
    public static MappingErrorCode MappingFunctionImportScalarMappingToMulticolumnTVF;
    public static MappingErrorCode MappingFunctionImportTargetFunctionMustBeComposable;
    public static MappingErrorCode UnsupportedFunctionCallInQueryView;
    public static MappingErrorCode FunctionResultMappingCountMismatch;
    public static MappingErrorCode MappingFunctionImportCannotInferTargetFunctionKeys;
}
public class System.Data.Entity.Core.Mapping.MappingFragment : StructuralTypeMapping {
    private List`1<ColumnMappingBuilder> _columnMappings;
    private EntitySet m_tableExtent;
    private TypeMapping m_typeMapping;
    private Dictionary`2<EdmProperty, ConditionPropertyMapping> m_conditionProperties;
    private List`1<PropertyMapping> m_properties;
    private bool m_isSQueryDistinct;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLinePosition>k__BackingField;
    internal IEnumerable`1<ColumnMappingBuilder> ColumnMappings { get; }
    public EntitySet StoreEntitySet { get; internal set; }
    internal EntitySet TableSet { get; internal set; }
    internal EntityType Table { get; }
    public TypeMapping TypeMapping { get; }
    public bool MakeColumnsDistinct { get; }
    internal bool IsSQueryDistinct { get; }
    internal ReadOnlyCollection`1<PropertyMapping> AllProperties { get; }
    public ReadOnlyCollection`1<PropertyMapping> PropertyMappings { get; }
    public ReadOnlyCollection`1<ConditionPropertyMapping> Conditions { get; }
    internal IEnumerable`1<ColumnMappingBuilder> FlattenedProperties { get; }
    internal IEnumerable`1<ConditionPropertyMapping> ColumnConditions { get; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal string SourceLocation { get; }
    public MappingFragment(EntitySet storeEntitySet, TypeMapping typeMapping, bool makeColumnsDistinct);
    internal IEnumerable`1<ColumnMappingBuilder> get_ColumnMappings();
    internal void AddColumnMapping(ColumnMappingBuilder columnMappingBuilder);
    internal void RemoveColumnMapping(ColumnMappingBuilder columnMappingBuilder);
    private static void RemoveColumnMapping(StructuralTypeMapping structuralTypeMapping, IEnumerable`1<EdmProperty> propertyPath);
    public EntitySet get_StoreEntitySet();
    internal void set_StoreEntitySet(EntitySet value);
    internal EntitySet get_TableSet();
    internal void set_TableSet(EntitySet value);
    internal EntityType get_Table();
    public TypeMapping get_TypeMapping();
    public bool get_MakeColumnsDistinct();
    internal bool get_IsSQueryDistinct();
    internal ReadOnlyCollection`1<PropertyMapping> get_AllProperties();
    public virtual ReadOnlyCollection`1<PropertyMapping> get_PropertyMappings();
    public virtual ReadOnlyCollection`1<ConditionPropertyMapping> get_Conditions();
    internal IEnumerable`1<ColumnMappingBuilder> get_FlattenedProperties();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.MappingFragment/<GetFlattenedProperties>d__34")]
private static IEnumerable`1<ColumnMappingBuilder> GetFlattenedProperties(IEnumerable`1<PropertyMapping> propertyMappings, List`1<EdmProperty> propertyPath);
    internal IEnumerable`1<ConditionPropertyMapping> get_ColumnConditions();
    [CompilerGeneratedAttribute]
internal int get_StartLineNumber();
    [CompilerGeneratedAttribute]
internal void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_StartLinePosition();
    [CompilerGeneratedAttribute]
internal void set_StartLinePosition(int value);
    internal string get_SourceLocation();
    public virtual void AddPropertyMapping(PropertyMapping propertyMapping);
    public virtual void RemovePropertyMapping(PropertyMapping propertyMapping);
    public virtual void AddCondition(ConditionPropertyMapping condition);
    public virtual void RemoveCondition(ConditionPropertyMapping condition);
    internal void ClearConditions();
    internal virtual void SetReadOnly();
    internal void RemoveConditionProperty(ConditionPropertyMapping condition);
    internal void AddConditionProperty(ConditionPropertyMapping conditionPropertyMap);
    internal void AddConditionProperty(ConditionPropertyMapping conditionPropertyMap, Action`1<EdmMember> duplicateMemberConditionError);
}
public abstract class System.Data.Entity.Core.Mapping.MappingItem : object {
    private bool _readOnly;
    private List`1<MetadataProperty> _annotations;
    internal bool IsReadOnly { get; }
    internal IList`1<MetadataProperty> Annotations { get; }
    internal bool get_IsReadOnly();
    internal IList`1<MetadataProperty> get_Annotations();
    internal virtual void SetReadOnly();
    internal void ThrowIfReadOnly();
    internal static void SetReadOnly(MappingItem item);
    internal static void SetReadOnly(IEnumerable`1<MappingItem> items);
}
public abstract class System.Data.Entity.Core.Mapping.MappingItemCollection : ItemCollection {
    internal MappingItemCollection(DataSpace dataSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, MappingBase& map);
    internal virtual MappingBase GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, MappingBase& map);
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, MappingBase& map);
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace);
}
internal class System.Data.Entity.Core.Mapping.MappingItemLoader : object {
    private Dictionary`2<string, string> m_alias;
    private StorageMappingItemCollection m_storageMappingItemCollection;
    private string m_sourceLocation;
    private List`1<EdmSchemaError> m_parsingErrors;
    private Dictionary`2<EdmMember, KeyValuePair`2<TypeUsage, TypeUsage>> m_scalarMemberMappings;
    private bool m_hasQueryViews;
    private string m_currentNamespaceUri;
    private EntityContainerMapping m_containerMapping;
    private double m_version;
    private static XmlSchemaSet s_mappingXmlSchema;
    internal double MappingVersion { get; }
    internal IList`1<EdmSchemaError> ParsingErrors { get; }
    internal bool HasQueryViews { get; }
    internal EntityContainerMapping ContainerMapping { get; }
    private EdmItemCollection EdmItemCollection { get; }
    private StoreItemCollection StoreItemCollection { get; }
    internal MappingItemLoader(XmlReader reader, StorageMappingItemCollection storageMappingItemCollection, string fileName, Dictionary`2<EdmMember, KeyValuePair`2<TypeUsage, TypeUsage>> scalarMemberMappings);
    internal double get_MappingVersion();
    internal IList`1<EdmSchemaError> get_ParsingErrors();
    internal bool get_HasQueryViews();
    internal EntityContainerMapping get_ContainerMapping();
    private EdmItemCollection get_EdmItemCollection();
    private StoreItemCollection get_StoreItemCollection();
    private EntityContainerMapping LoadMappingItems(XmlReader innerReader);
    private EntityContainerMapping LoadMappingItems(XPathNavigator nav);
    private bool MoveToRootElement(XPathNavigator nav);
    private EntityContainerMapping LoadMappingChildNodes(XPathNavigator nav);
    private EntityContainerMapping LoadEntityContainerMapping(XPathNavigator nav);
    private void LoadEntityContainerMappingChildNodes(XPathNavigator nav, EntityContainerMapping entityContainerMapping, EntityContainer storageEntityContainerType);
    private void ValidateModificationFunctionMappingConsistentForAssociations(XPathNavigator nav, EntityContainerMapping entityContainerMapping);
    private void ValidateModificationFunctionMappingConsistentForAssociations(XPathNavigator nav, EntitySetMapping entitySetMapping, EntityTypeModificationFunctionMapping entityTypeMapping, ModificationFunctionMapping functionMapping, Set`1<AssociationSetEnd> expectedEnds, string elementName);
    private void ValidateFunctionAssociationFunctionMappingUnique(XPathNavigator nav, EntityContainerMapping entityContainerMapping);
    private static void IncrementCount(Dictionary`2<T, int> counts, T key);
    private void ValidateEntitySetFunctionMappingClosure(XPathNavigator nav, EntityContainerMapping entityContainerMapping);
    private static void ValidateClosureAmongSets(EntityContainerMapping entityContainerMapping, Set`1<EntitySetBase> sets, Set`1<EntitySetBase> additionalSetsInClosure);
    private void ValidateQueryViewsClosure(XPathNavigator nav, EntityContainerMapping entityContainerMapping);
    private void LoadEntitySetMapping(XPathNavigator nav, EntityContainerMapping entityContainerMapping, EntityContainer storageEntityContainerType);
    private void ValidateAllEntityTypesHaveFunctionMapping(XPathNavigator nav, EntitySetMapping setMapping);
    private bool TryParseEntityTypeAttribute(XPathNavigator nav, EntityType rootEntityType, Func`2<EntityType, string> typeNotAssignableMessage, Set`1& isOfTypeEntityTypes, Set`1& entityTypes);
    private void LoadEntityTypeMapping(XPathNavigator nav, EntitySetMapping entitySetMapping, string tableName, EntityContainer storageEntityContainerType, bool distinctFlagAboveType, bool generateUpdateViews);
    private void LoadEntityTypeModificationFunctionMapping(XPathNavigator nav, EntitySetMapping entitySetMapping, EntityTypeMapping entityTypeMapping);
    private bool LoadQueryView(XPathNavigator nav, EntitySetBaseMapping setMapping);
    private void LoadAssociationSetMapping(XPathNavigator nav, EntityContainerMapping entityContainerMapping, EntityContainer storageEntityContainerType);
    private void LoadFunctionImportMapping(XPathNavigator nav, EntityContainerMapping entityContainerMapping);
    private bool TryGetFunctionImportStoreFunction(XPathNavigator nav, EdmFunction& targetFunction);
    private bool TryGetFunctionImportModelFunction(XPathNavigator nav, EntityContainerMapping entityContainerMapping, EdmFunction& functionImport);
    private void ValidateFunctionImportMappingParameters(XPathNavigator nav, EdmFunction targetFunction, EdmFunction functionImport);
    private List`1<FunctionImportStructuralTypeMapping> GetFunctionImportMappingResultMapping(XPathNavigator nav, IXmlLineInfo functionImportMappingLineInfo, EdmFunction functionImport, int resultSetIndex);
    private bool TryLoadFunctionImportComplexTypeMapping(XPathNavigator nav, ComplexType resultComplexType, EdmFunction functionImport, FunctionImportComplexTypeMapping& typeMapping);
    private bool TryParseComplexTypeAttribute(XPathNavigator nav, ComplexType resultComplexType, EdmFunction functionImport, ComplexType& complexType);
    private bool TryLoadFunctionImportEntityTypeMapping(XPathNavigator nav, EntityType resultEntityType, Func`2<EntityType, string> registerEntityTypeMismatchError, FunctionImportEntityTypeMapping& typeMapping);
    private bool LoadFunctionImportStructuralType(XPathNavigator nav, IEnumerable`1<StructuralType> currentTypes, Collection`1<FunctionImportReturnTypePropertyMapping> columnRenameMappings, List`1<FunctionImportEntityTypeMappingCondition> conditions);
    private void LoadFunctionImportStructuralTypeMappingScalarProperty(XPathNavigator nav, Collection`1<FunctionImportReturnTypePropertyMapping> columnRenameMappings, IEnumerable`1<StructuralType> currentTypes);
    private void LoadFunctionImportEntityTypeMappingCondition(XPathNavigator nav, List`1<FunctionImportEntityTypeMappingCondition> conditions);
    private void LoadAssociationTypeMapping(XPathNavigator nav, AssociationSetMapping associationSetMapping, string associationTypeName, string tableName, EntityContainer storageEntityContainerType);
    private void LoadAssociationTypeModificationFunctionMapping(XPathNavigator nav, AssociationSetMapping associationSetMapping);
    private MappingFragment LoadMappingFragment(XPathNavigator nav, EntityTypeMapping typeMapping, string tableName, EntityContainer storageEntityContainerType, bool distinctFlag);
    private MappingFragment LoadAssociationMappingFragment(XPathNavigator nav, AssociationSetMapping setMapping, AssociationTypeMapping typeMapping, string tableName, EntityContainer storageEntityContainerType);
    private ScalarPropertyMapping LoadScalarPropertyMapping(XPathNavigator nav, EdmType containerType, ReadOnlyMetadataCollection`1<EdmProperty> tableProperties);
    private ComplexPropertyMapping LoadComplexPropertyMapping(XPathNavigator nav, EdmType containerType, ReadOnlyMetadataCollection`1<EdmProperty> tableProperties);
    private ComplexTypeMapping LoadComplexTypeMapping(XPathNavigator nav, EdmType type, ReadOnlyMetadataCollection`1<EdmProperty> tableType);
    private EndPropertyMapping LoadEndPropertyMapping(XPathNavigator nav, AssociationEndMember end, EntityType tableType);
    private ConditionPropertyMapping LoadConditionPropertyMapping(XPathNavigator nav, EdmType containerType, ReadOnlyMetadataCollection`1<EdmProperty> tableProperties);
    internal static bool IsTypeSupportedForCondition(PrimitiveTypeKind primitiveTypeKind);
    private static XmlSchemaSet GetOrCreateSchemaSet();
    private static void AddResourceXsdToSchemaSet(XmlSchemaSet set, string resourceName);
    internal static void AddToSchemaErrors(string message, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    internal static EdmSchemaError AddToSchemaErrorsWithMemberInfo(Func`2<object, string> messageFormat, string errorMember, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    internal static void AddToSchemaErrorWithMemberAndStructure(Func`3<object, object, string> messageFormat, string errorMember, string errorStructure, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    private static void AddToSchemaErrorWithMessage(string errorMessage, MappingErrorCode errorCode, string location, IXmlLineInfo lineInfo, IList`1<EdmSchemaError> parsingErrors);
    private string GetAliasResolvedAttributeValue(XPathNavigator nav, string attributeName);
    private static bool GetBoolAttributeValue(XPathNavigator nav, string attributeName, bool defaultValue);
    private static string GetAttributeValue(XPathNavigator nav, string attributeName);
    private static bool TryGetTypedAttributeValue(XPathNavigator nav, string attributeName, Type clrType, string sourceLocation, IList`1<EdmSchemaError> parsingErrors, Object& value);
    private static EnumMember GetEnumAttributeValue(XPathNavigator nav, string attributeName, EnumType enumType, string sourceLocation, IList`1<EdmSchemaError> parsingErrors);
    private string GetAliasResolvedValue(string aliasedString);
    private XmlReader GetSchemaValidatingReader(XmlReader innerReader);
    private XmlReaderSettings GetXmlReaderSettings();
    private void XsdValidationCallBack(object sender, ValidationEventArgs args);
    private void ValidateAndUpdateScalarMemberMapping(EdmProperty member, EdmProperty columnMember, IXmlLineInfo lineInfo);
    internal static string GetInvalidMemberMappingErrorMessage(EdmMember cSpaceMember, EdmMember sSpaceMember);
    private static string GetFacetsForDisplay(TypeUsage typeUsage);
    internal static TypeUsage ResolveTypeUsageForEnums(TypeUsage typeUsage);
}
internal enum System.Data.Entity.Core.Mapping.MemberMappingKind : Enum {
    public int value__;
    public static MemberMappingKind ScalarPropertyMapping;
    public static MemberMappingKind NavigationPropertyMapping;
    public static MemberMappingKind AssociationEndMapping;
    public static MemberMappingKind ComplexPropertyMapping;
}
internal class System.Data.Entity.Core.Mapping.MetadataMappingHasherVisitor : BaseMetadataMappingVisitor {
    private CompressingHashBuilder m_hashSourceBuilder;
    private Dictionary`2<object, int> m_itemsAlreadySeen;
    private int m_instanceNumber;
    private EdmItemCollection m_EdmItemCollection;
    private double m_MappingVersion;
    internal string HashValue { get; }
    private MetadataMappingHasherVisitor(double mappingVersion, bool sortSequence);
    protected virtual void Visit(EntityContainerMapping entityContainerMapping);
    protected virtual void Visit(EntityContainer entityContainer);
    protected virtual void Visit(EntitySetBaseMapping setMapping);
    protected virtual void Visit(TypeMapping typeMapping);
    protected virtual void Visit(MappingFragment mappingFragment);
    protected virtual void Visit(PropertyMapping propertyMapping);
    protected virtual void Visit(ComplexPropertyMapping complexPropertyMapping);
    protected virtual void Visit(ComplexTypeMapping complexTypeMapping);
    protected virtual void Visit(ConditionPropertyMapping conditionPropertyMapping);
    protected virtual void Visit(ScalarPropertyMapping scalarPropertyMapping);
    protected virtual void Visit(EntitySetBase entitySetBase);
    protected virtual void Visit(EntitySet entitySet);
    protected virtual void Visit(AssociationSet associationSet);
    protected virtual void Visit(EntityType entityType);
    protected virtual void Visit(AssociationSetEnd associationSetEnd);
    protected virtual void Visit(AssociationType associationType);
    protected virtual void Visit(EdmProperty edmProperty);
    protected virtual void Visit(NavigationProperty navigationProperty);
    protected virtual void Visit(EdmMember edmMember);
    protected virtual void Visit(AssociationEndMember associationEndMember);
    protected virtual void Visit(ReferentialConstraint referentialConstraint);
    protected virtual void Visit(RelationshipEndMember relationshipEndMember);
    protected virtual void Visit(TypeUsage typeUsage);
    protected virtual void Visit(RelationshipType relationshipType);
    protected virtual void Visit(EdmType edmType);
    protected virtual void Visit(EnumType enumType);
    protected virtual void Visit(EnumMember enumMember);
    protected virtual void Visit(CollectionType collectionType);
    protected virtual void Visit(RefType refType);
    protected virtual void Visit(EntityTypeBase entityTypeBase);
    protected virtual void Visit(Facet facet);
    protected virtual void Visit(EdmFunction edmFunction);
    protected virtual void Visit(ComplexType complexType);
    protected virtual void Visit(PrimitiveType primitiveType);
    protected virtual void Visit(FunctionParameter functionParameter);
    protected virtual void Visit(DbProviderManifest providerManifest);
    internal string get_HashValue();
    private void Clean();
    private bool TryAddSeenItem(object o, Int32& indexSeen);
    private bool AddObjectToSeenListAndHashBuilder(object o, Int32& instanceIndex);
    private void AddSeenObjectToHashBuilder(int instanceIndex);
    private void AddObjectStartDumpToHashBuilder(object o, int objectIndex);
    private void AddObjectEndDumpToHashBuilder();
    private void AddObjectContentToHashBuilder(object content);
    private void AddV2ObjectContentToHashBuilder(object content, double version);
    internal static string GetMappingClosureHash(double mappingVersion, EntityContainerMapping entityContainerMapping, bool sortSequence);
}
public class System.Data.Entity.Core.Mapping.ModificationFunctionMapping : MappingItem {
    private FunctionParameter _rowsAffectedParameter;
    private EdmFunction _function;
    private ReadOnlyCollection`1<ModificationFunctionParameterBinding> _parameterBindings;
    private ReadOnlyCollection`1<AssociationSetEnd> _collocatedAssociationSetEnds;
    private ReadOnlyCollection`1<ModificationFunctionResultBinding> _resultBindings;
    public FunctionParameter RowsAffectedParameter { get; internal set; }
    internal string RowsAffectedParameterName { get; }
    public EdmFunction Function { get; }
    public ReadOnlyCollection`1<ModificationFunctionParameterBinding> ParameterBindings { get; }
    internal ReadOnlyCollection`1<AssociationSetEnd> CollocatedAssociationSetEnds { get; }
    public ReadOnlyCollection`1<ModificationFunctionResultBinding> ResultBindings { get; }
    public ModificationFunctionMapping(EntitySetBase entitySet, EntityTypeBase entityType, EdmFunction function, IEnumerable`1<ModificationFunctionParameterBinding> parameterBindings, FunctionParameter rowsAffectedParameter, IEnumerable`1<ModificationFunctionResultBinding> resultBindings);
    public FunctionParameter get_RowsAffectedParameter();
    internal void set_RowsAffectedParameter(FunctionParameter value);
    internal string get_RowsAffectedParameterName();
    public EdmFunction get_Function();
    public ReadOnlyCollection`1<ModificationFunctionParameterBinding> get_ParameterBindings();
    internal ReadOnlyCollection`1<AssociationSetEnd> get_CollocatedAssociationSetEnds();
    public ReadOnlyCollection`1<ModificationFunctionResultBinding> get_ResultBindings();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    private static IEnumerable`1<AssociationSetEnd> GetReferencedAssociationSetEnds(EntitySet entitySet, EntityType entityType, IEnumerable`1<ModificationFunctionParameterBinding> parameterBindings);
}
public class System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath : MappingItem {
    private ReadOnlyCollection`1<EdmMember> _members;
    private AssociationSetEnd _associationSetEnd;
    public ReadOnlyCollection`1<EdmMember> Members { get; }
    public AssociationSetEnd AssociationSetEnd { get; }
    public ModificationFunctionMemberPath(IEnumerable`1<EdmMember> members, AssociationSet associationSet);
    public ReadOnlyCollection`1<EdmMember> get_Members();
    public AssociationSetEnd get_AssociationSetEnd();
    public virtual string ToString();
}
public class System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding : MappingItem {
    private FunctionParameter _parameter;
    private ModificationFunctionMemberPath _memberPath;
    private bool _isCurrent;
    public FunctionParameter Parameter { get; }
    public ModificationFunctionMemberPath MemberPath { get; }
    public bool IsCurrent { get; }
    public ModificationFunctionParameterBinding(FunctionParameter parameter, ModificationFunctionMemberPath memberPath, bool isCurrent);
    public FunctionParameter get_Parameter();
    public ModificationFunctionMemberPath get_MemberPath();
    public bool get_IsCurrent();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding : MappingItem {
    private string _columnName;
    private EdmProperty _property;
    public string ColumnName { get; internal set; }
    public EdmProperty Property { get; }
    public ModificationFunctionResultBinding(string columnName, EdmProperty property);
    public string get_ColumnName();
    internal void set_ColumnName(string value);
    public EdmProperty get_Property();
    public virtual string ToString();
}
internal static class System.Data.Entity.Core.Mapping.MslConstructs : object {
    internal static string NamespaceUriV1;
    internal static string NamespaceUriV2;
    internal static string NamespaceUriV3;
    internal static double MappingVersionV1;
    internal static double MappingVersionV2;
    internal static double MappingVersionV3;
    internal static string MappingElement;
    internal static string GenerateUpdateViews;
    internal static string MappingSpaceAttribute;
    internal static string EntityContainerMappingElement;
    internal static string CdmEntityContainerAttribute;
    internal static string StorageEntityContainerAttribute;
    internal static string AliasElement;
    internal static string AliasKeyAttribute;
    internal static string AliasValueAttribute;
    internal static string EntitySetMappingElement;
    internal static string EntitySetMappingNameAttribute;
    internal static string EntitySetMappingTypeNameAttribute;
    internal static string EntitySetMappingStoreEntitySetAttribute;
    internal static string EntityTypeMappingElement;
    internal static string QueryViewElement;
    internal static string EntityTypeMappingTypeNameAttribute;
    internal static string EntityTypeMappingStoreEntitySetAttribute;
    internal static string AssociationSetMappingElement;
    internal static string AssociationSetMappingNameAttribute;
    internal static string AssociationSetMappingTypeNameAttribute;
    internal static string AssociationSetMappingStoreEntitySetAttribute;
    internal static string EndPropertyMappingElement;
    internal static string EndPropertyMappingNameAttribute;
    internal static string CompositionSetMappingNameAttribute;
    internal static string CompositionSetMappingTypeNameAttribute;
    internal static string CompositionSetMappingStoreEntitySetAttribute;
    internal static string FunctionImportMappingElement;
    internal static string FunctionImportMappingFunctionNameAttribute;
    internal static string FunctionImportMappingFunctionImportNameAttribute;
    internal static string CompositionSetParentEndName;
    internal static string CompositionSetChildEndName;
    internal static string MappingFragmentElement;
    internal static string MappingFragmentStoreEntitySetAttribute;
    internal static string MappingFragmentMakeColumnsDistinctAttribute;
    internal static string ScalarPropertyElement;
    internal static string ScalarPropertyNameAttribute;
    internal static string ScalarPropertyColumnNameAttribute;
    internal static string ScalarPropertyValueAttribute;
    internal static string ComplexPropertyElement;
    internal static string AssociationEndElement;
    internal static string ComplexPropertyNameAttribute;
    internal static string ComplexPropertyTypeNameAttribute;
    internal static string ComplexPropertyIsPartialAttribute;
    internal static string ComplexTypeMappingElement;
    internal static string ComplexTypeMappingTypeNameAttribute;
    internal static string ConditionElement;
    internal static string ConditionNameAttribute;
    internal static string ConditionValueAttribute;
    internal static string ConditionColumnNameAttribute;
    internal static string ConditionIsNullAttribute;
    internal static string CollectionPropertyNameAttribute;
    internal static string CollectionPropertyIsPartialAttribute;
    internal static string ResourceXsdNameV1;
    internal static string ResourceXsdNameV2;
    internal static string ResourceXsdNameV3;
    internal static string IsTypeOf;
    internal static string IsTypeOfTerminal;
    internal static string IsTypeOfOnly;
    internal static string IsTypeOfOnlyTerminal;
    internal static string ModificationFunctionMappingElement;
    internal static string DeleteFunctionElement;
    internal static string InsertFunctionElement;
    internal static string UpdateFunctionElement;
    internal static string FunctionNameAttribute;
    internal static string RowsAffectedParameterAttribute;
    internal static string ParameterNameAttribute;
    internal static string ParameterVersionAttribute;
    internal static string ParameterVersionAttributeCurrentValue;
    internal static string ParameterVersionAttributeOriginalValue;
    internal static string AssociationSetAttribute;
    internal static string FromAttribute;
    internal static string ToAttribute;
    internal static string ResultBindingElement;
    internal static string ResultBindingPropertyNameAttribute;
    internal static string ResultBindingColumnNameAttribute;
    internal static char TypeNameSeperator;
    internal static char IdentitySeperator;
    internal static string EntityViewGenerationTypeName;
    internal static string FunctionImportMappingResultMapping;
    public static string GetMslNamespace(double version);
}
internal class System.Data.Entity.Core.Mapping.ObjectAssociationEndMapping : ObjectMemberMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectAssociationEndMapping(AssociationEndMember edmAssociationEnd, AssociationEndMember clrAssociationEnd);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Entity.Core.Mapping.ObjectComplexPropertyMapping : ObjectPropertyMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectComplexPropertyMapping(EdmProperty edmProperty, EdmProperty clrProperty);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal abstract class System.Data.Entity.Core.Mapping.ObjectMemberMapping : object {
    private EdmMember m_edmMember;
    private EdmMember m_clrMember;
    internal EdmMember EdmMember { get; }
    internal EdmMember ClrMember { get; }
    internal MemberMappingKind MemberMappingKind { get; }
    protected ObjectMemberMapping(EdmMember edmMember, EdmMember clrMember);
    internal EdmMember get_EdmMember();
    internal EdmMember get_ClrMember();
    internal abstract virtual MemberMappingKind get_MemberMappingKind();
}
internal static class System.Data.Entity.Core.Mapping.ObjectMslConstructs : object {
    internal static string MappingElement;
    internal static string AliasElement;
    internal static string AliasKeyAttribute;
    internal static string AliasValueAttribute;
    internal static char IdentitySeperator;
}
internal class System.Data.Entity.Core.Mapping.ObjectNavigationPropertyMapping : ObjectMemberMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectNavigationPropertyMapping(NavigationProperty edmNavigationProperty, NavigationProperty clrNavigationProperty);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Entity.Core.Mapping.ObjectPropertyMapping : ObjectMemberMapping {
    internal EdmProperty ClrProperty { get; }
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectPropertyMapping(EdmProperty edmProperty, EdmProperty clrProperty);
    internal EdmProperty get_ClrProperty();
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Entity.Core.Mapping.ObjectTypeMapping : MappingBase {
    private EdmType m_clrType;
    private EdmType m_cdmType;
    private string identity;
    private Dictionary`2<string, ObjectMemberMapping> m_memberMapping;
    private static Dictionary`2<string, ObjectMemberMapping> EmptyMemberMapping;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal EdmType ClrType { get; }
    internal MetadataItem EdmItem { get; }
    internal EdmType EdmType { get; }
    internal string Identity { get; }
    internal ObjectTypeMapping(EdmType clrType, EdmType cdmType);
    private static ObjectTypeMapping();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal EdmType get_ClrType();
    internal virtual MetadataItem get_EdmItem();
    internal EdmType get_EdmType();
    internal virtual string get_Identity();
    internal ObjectPropertyMapping GetPropertyMap(string propertyName);
    internal void AddMemberMap(ObjectMemberMapping memberMapping);
    internal ObjectMemberMapping GetMemberMapForClrMember(string clrMemberName, bool ignoreCase);
    private ObjectMemberMapping GetMemberMap(string propertyName, bool ignoreCase);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Mapping.OutputFromComputeCellGroups : ValueType {
    internal List`1<Cell> Cells;
    internal CqlIdentifiers Identifiers;
    internal List`1<Set`1<Cell>> CellGroups;
    internal List`1<ForeignConstraint> ForeignKeyConstraints;
    internal bool Success;
}
public abstract class System.Data.Entity.Core.Mapping.PropertyMapping : MappingItem {
    private EdmProperty _property;
    public EdmProperty Property { get; internal set; }
    internal PropertyMapping(EdmProperty property);
    public virtual EdmProperty get_Property();
    internal virtual void set_Property(EdmProperty value);
}
public class System.Data.Entity.Core.Mapping.ScalarPropertyMapping : PropertyMapping {
    private EdmProperty _column;
    public EdmProperty Column { get; internal set; }
    public ScalarPropertyMapping(EdmProperty property, EdmProperty column);
    public EdmProperty get_Column();
    internal void set_Column(EdmProperty value);
}
public class System.Data.Entity.Core.Mapping.StorageMappingItemCollection : MappingItemCollection {
    private EdmItemCollection _edmCollection;
    private StoreItemCollection _storeItemCollection;
    private ViewDictionary m_viewDictionary;
    private double m_mappingVersion;
    private MetadataWorkspace _workspace;
    private Dictionary`2<EdmMember, KeyValuePair`2<TypeUsage, TypeUsage>> m_memberMappings;
    private ViewLoader _viewLoader;
    private ConcurrentDictionary`2<Tuple`3<EntitySetBase, EntityTypeBase, InterestingMembersKind>, ReadOnlyCollection`1<EdmMember>> _cachedInterestingMembers;
    private DbMappingViewCacheFactory _mappingViewCacheFactory;
    public DbMappingViewCacheFactory MappingViewCacheFactory { get; public set; }
    internal MetadataWorkspace Workspace { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    public double MappingVersion { get; }
    internal StoreItemCollection StoreItemCollection { get; }
    public StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, String[] filePaths);
    public StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders);
    private StorageMappingItemCollection(EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, IEnumerable`1<XmlReader> xmlReaders, IList`1<string> filePaths, IList`1& errors);
    internal StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders, IList`1<string> filePaths);
    private IList`1<EdmSchemaError> Init(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders, IList`1<string> filePaths, bool throwOnError);
    public DbMappingViewCacheFactory get_MappingViewCacheFactory();
    public void set_MappingViewCacheFactory(DbMappingViewCacheFactory value);
    internal MetadataWorkspace get_Workspace();
    internal EdmItemCollection get_EdmItemCollection();
    public double get_MappingVersion();
    internal StoreItemCollection get_StoreItemCollection();
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, MappingBase& map);
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, MappingBase& map);
    internal virtual MappingBase GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, MappingBase& map);
    internal ReadOnlyCollection`1<EdmMember> GetInterestingMembers(EntitySetBase entitySet, EntityTypeBase entityType, InterestingMembersKind interestingMembersKind);
    private ReadOnlyCollection`1<EdmMember> FindInterestingMembers(EntitySetBase entitySet, EntityTypeBase entityType, InterestingMembersKind interestingMembersKind);
    private static void FindInterestingAssociationMappingMembers(AssociationTypeMapping associationTypeMapping, List`1<EdmMember> interestingMembers);
    private static void FindInterestingEntityMappingMembers(EntityTypeMapping entityTypeMapping, InterestingMembersKind interestingMembersKind, List`1<EdmMember> interestingMembers);
    private static bool HasFixedConcurrencyModeInAnyChildProperty(ComplexPropertyMapping complexMapping);
    private static void FindForeignKeyProperties(EntitySetBase entitySetBase, EntityTypeBase entityType, List`1<EdmMember> interestingMembers);
    private static void FindInterestingFunctionMappingMembers(EntityTypeModificationFunctionMapping functionMappings, InterestingMembersKind interestingMembersKind, List`1& interestingMembers);
    internal GeneratedView GetGeneratedView(EntitySetBase extent, MetadataWorkspace workspace);
    private void AddInternal(MappingBase storageMap);
    internal bool ContainsStorageEntityContainer(string storageEntityContainerName);
    private List`1<EdmSchemaError> LoadItems(IEnumerable`1<XmlReader> xmlReaders, IList`1<string> mappingSchemaUris, Dictionary`2<EntitySetBase, GeneratedView> userDefinedQueryViewsDict, Dictionary`2<Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>>, GeneratedView> userDefinedQueryViewsOfTypeDict, double expectedVersion);
    private static void CompileUserDefinedQueryViews(EntityContainerMapping entityContainerMapping, Dictionary`2<EntitySetBase, GeneratedView> userDefinedQueryViewsDict, Dictionary`2<Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>>, GeneratedView> userDefinedQueryViewsOfTypeDict, IList`1<EdmSchemaError> errors);
    private void CheckIsSameVersion(double expectedVersion, double currentLoaderVersion, IList`1<EdmSchemaError> errors);
    internal ViewLoader GetUpdateViewLoader();
    internal bool TryGetGeneratedViewOfType(EntitySetBase entity, EntityTypeBase type, bool includeSubtypes, GeneratedView& generatedView);
    private static void CheckForDuplicateItems(EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, List`1<EdmSchemaError> errorCollection);
    public string ComputeMappingHashValue(string conceptualModelContainerName, string storeModelContainerName);
    public string ComputeMappingHashValue();
    public Dictionary`2<EntitySetBase, DbMappingView> GenerateViews(string conceptualModelContainerName, string storeModelContainerName, IList`1<EdmSchemaError> errors);
    public Dictionary`2<EntitySetBase, DbMappingView> GenerateViews(IList`1<EdmSchemaError> errors);
    internal static Dictionary`2<EntitySetBase, DbMappingView> GenerateViews(EntityContainerMapping containerMapping, IList`1<EdmSchemaError> errors);
    public static StorageMappingItemCollection Create(EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, IEnumerable`1<XmlReader> xmlReaders, IList`1<string> filePaths, IList`1& errors);
    [CompilerGeneratedAttribute]
private EdmItemCollection <get_Workspace>b__23_0();
    [CompilerGeneratedAttribute]
private StoreItemCollection <get_Workspace>b__23_1();
    [CompilerGeneratedAttribute]
private StorageMappingItemCollection <get_Workspace>b__23_2();
}
internal class System.Data.Entity.Core.Mapping.StringHashBuilder : object {
    private HashAlgorithm _hashAlgorithm;
    private static string NewLine;
    private List`1<string> _strings;
    private int _totalLength;
    private Byte[] _cachedBuffer;
    internal int CharCount { get; }
    internal StringHashBuilder(HashAlgorithm hashAlgorithm);
    internal StringHashBuilder(HashAlgorithm hashAlgorithm, int startingBufferSize);
    internal int get_CharCount();
    internal virtual void Append(string s);
    internal virtual void AppendLine(string s);
    private void InternalAppend(string s);
    internal string ComputeHash();
    internal void Clear();
    public virtual string ToString();
    private int GetByteCount();
    private static string ConvertHashToString(Byte[] hash);
    public static string ComputeHash(HashAlgorithm hashAlgorithm, string source);
}
public abstract class System.Data.Entity.Core.Mapping.StructuralTypeMapping : MappingItem {
    public ReadOnlyCollection`1<PropertyMapping> PropertyMappings { get; }
    public ReadOnlyCollection`1<ConditionPropertyMapping> Conditions { get; }
    public abstract virtual ReadOnlyCollection`1<PropertyMapping> get_PropertyMappings();
    public abstract virtual ReadOnlyCollection`1<ConditionPropertyMapping> get_Conditions();
    public abstract virtual void AddPropertyMapping(PropertyMapping propertyMapping);
    public abstract virtual void RemovePropertyMapping(PropertyMapping propertyMapping);
    public abstract virtual void AddCondition(ConditionPropertyMapping condition);
    public abstract virtual void RemoveCondition(ConditionPropertyMapping condition);
}
public abstract class System.Data.Entity.Core.Mapping.TypeMapping : MappingItem {
    internal EntitySetBaseMapping SetMapping { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> Types { get; }
    internal ReadOnlyCollection`1<EntityTypeBase> IsOfTypes { get; }
    internal ReadOnlyCollection`1<MappingFragment> MappingFragments { get; }
    internal abstract virtual EntitySetBaseMapping get_SetMapping();
    internal abstract virtual ReadOnlyCollection`1<EntityTypeBase> get_Types();
    internal abstract virtual ReadOnlyCollection`1<EntityTypeBase> get_IsOfTypes();
    internal abstract virtual ReadOnlyCollection`1<MappingFragment> get_MappingFragments();
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.AssociationSetMetadata : object {
    internal Set`1<AssociationEndMember> RequiredEnds;
    internal Set`1<AssociationEndMember> OptionalEnds;
    internal Set`1<AssociationEndMember> IncludedValueEnds;
    internal bool HasEnds { get; }
    internal AssociationSetMetadata(Set`1<EntitySet> affectedTables, AssociationSet associationSet, MetadataWorkspace workspace);
    internal AssociationSetMetadata(IEnumerable`1<AssociationEndMember> requiredEnds);
    internal bool get_HasEnds();
    private static void AddEnd(Set`1& set, AssociationEndMember element);
    private static void FixSet(Set`1& set);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.ChangeNode : object {
    private TypeUsage m_elementType;
    private List`1<PropagatorResult> m_inserted;
    private List`1<PropagatorResult> m_deleted;
    [CompilerGeneratedAttribute]
private PropagatorResult <Placeholder>k__BackingField;
    internal TypeUsage ElementType { get; }
    internal List`1<PropagatorResult> Inserted { get; }
    internal List`1<PropagatorResult> Deleted { get; }
    internal PropagatorResult Placeholder { get; internal set; }
    internal ChangeNode(TypeUsage elementType);
    internal TypeUsage get_ElementType();
    internal List`1<PropagatorResult> get_Inserted();
    internal List`1<PropagatorResult> get_Deleted();
    [CompilerGeneratedAttribute]
internal PropagatorResult get_Placeholder();
    [CompilerGeneratedAttribute]
internal void set_Placeholder(PropagatorResult value);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.CompositeKey : object {
    internal PropagatorResult[] KeyComponents;
    internal CompositeKey(PropagatorResult[] constants);
    internal static IEqualityComparer`1<CompositeKey> CreateComparer(KeyManager keyManager);
    internal CompositeKey Merge(KeyManager keyManager, CompositeKey other);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.DynamicUpdateCommand : UpdateCommand {
    private ModificationOperator _operator;
    private TableChangeProcessor _processor;
    private List`1<KeyValuePair`2<int, DbSetClause>> _inputIdentifiers;
    private Dictionary`2<int, string> _outputIdentifiers;
    private DbModificationCommandTree _modificationCommandTree;
    internal ModificationOperator Operator { get; }
    internal EntitySet Table { get; }
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal UpdateCommandKind Kind { get; }
    internal DynamicUpdateCommand(TableChangeProcessor processor, UpdateTranslator translator, ModificationOperator modificationOperator, PropagatorResult originalValues, PropagatorResult currentValues, DbModificationCommandTree tree, Dictionary`2<int, string> outputIdentifiers);
    private static bool TryGetSetterExpression(DbModificationCommandTree tree, EdmMember member, ModificationOperator op, DbSetClause& setter);
    internal virtual long Execute(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.DynamicUpdateCommand/<ExecuteAsync>d__8")]
internal virtual Task`1<long> ExecuteAsync(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues, CancellationToken cancellationToken);
    protected virtual DbCommand CreateCommand(Dictionary`2<int, object> identifierValues);
    private static DbModificationCommandTree RebuildCommandTree(DbModificationCommandTree originalTree, Dictionary`2<DbSetClause, DbSetClause> clauseMappings);
    private static List`1<DbModificationClause> ReplaceClauses(IList`1<DbModificationClause> originalClauses, Dictionary`2<DbSetClause, DbSetClause> mappings);
    internal ModificationOperator get_Operator();
    internal virtual EntitySet get_Table();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.DynamicUpdateCommand/<get_InputIdentifiers>d__17")]
internal virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal virtual UpdateCommandKind get_Kind();
    internal virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal virtual int CompareToType(UpdateCommand otherCommand);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.ExtractedStateEntry : ValueType {
    internal EntityState State;
    internal PropagatorResult Original;
    internal PropagatorResult Current;
    internal IEntityStateEntry Source;
    internal ExtractedStateEntry(EntityState state, PropagatorResult original, PropagatorResult current, IEntityStateEntry source);
    internal ExtractedStateEntry(UpdateTranslator translator, IEntityStateEntry stateEntry);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.ExtractorMetadata : object {
    private MemberInformation[] m_memberMap;
    private StructuralType m_type;
    private UpdateTranslator m_translator;
    internal ExtractorMetadata(EntitySetBase entitySetBase, StructuralType type, UpdateTranslator translator);
    internal PropagatorResult RetrieveMember(IEntityStateEntry stateEntry, IExtendedDataRecord record, bool useCurrentValues, EntityKey key, int ordinal, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
    private PropagatorResult CreateEntityKeyResult(IEntityStateEntry stateEntry, EntityKey entityKey);
    private PropagatorResult CreateSimpleResult(IEntityStateEntry stateEntry, IExtendedDataRecord record, MemberInformation memberInformation, int identifier, bool isModified, int recordOrdinal, object value);
    internal static PropagatorResult ExtractResultFromRecord(IEntityStateEntry stateEntry, bool isModified, IExtendedDataRecord record, bool useCurrentValues, UpdateTranslator translator, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.FunctionUpdateCommand : UpdateCommand {
    private ReadOnlyCollection`1<IEntityStateEntry> _stateEntries;
    private DbCommand _dbCommand;
    private List`1<KeyValuePair`2<int, DbParameter>> _inputIdentifiers;
    private Dictionary`2<int, string> _outputIdentifiers;
    private DbParameter _rowsAffectedParameter;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, PropagatorResult>> <ResultColumns>k__BackingField;
    protected List`1<KeyValuePair`2<string, PropagatorResult>> ResultColumns { get; protected set; }
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal UpdateCommandKind Kind { get; }
    internal FunctionUpdateCommand(ModificationFunctionMapping functionMapping, UpdateTranslator translator, ReadOnlyCollection`1<IEntityStateEntry> stateEntries, ExtractedStateEntry stateEntry);
    protected FunctionUpdateCommand(UpdateTranslator translator, ReadOnlyCollection`1<IEntityStateEntry> stateEntries, ExtractedStateEntry stateEntry, DbCommand dbCommand);
    [CompilerGeneratedAttribute]
protected virtual List`1<KeyValuePair`2<string, PropagatorResult>> get_ResultColumns();
    [CompilerGeneratedAttribute]
protected virtual void set_ResultColumns(List`1<KeyValuePair`2<string, PropagatorResult>> value);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.FunctionUpdateCommand/<get_InputIdentifiers>d__12")]
internal virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal virtual UpdateCommandKind get_Kind();
    internal virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal void SetParameterValue(PropagatorResult result, ModificationFunctionParameterBinding parameterBinding, UpdateTranslator translator);
    internal void RegisterRowsAffectedParameter(FunctionParameter rowsAffectedParameter);
    internal void AddResultColumn(UpdateTranslator translator, string columnName, PropagatorResult result);
    private void AddOutputIdentifier(string columnName, int identifier);
    internal virtual void SetInputIdentifiers(Dictionary`2<int, object> identifierValues);
    internal virtual long Execute(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.FunctionUpdateCommand/<ExecuteAsync>d__24")]
internal virtual Task`1<long> ExecuteAsync(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues, CancellationToken cancellationToken);
    protected virtual long GetRowsAffected(long rowsAffected, UpdateTranslator translator);
    private int GetColumnOrdinal(UpdateTranslator translator, DbDataReader reader, string columnName);
    private static ModificationOperator GetModificationOperator(EntityState state);
    internal virtual int CompareToType(UpdateCommand otherCommand);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.Graph`1 : object {
    private Dictionary`2<TVertex, HashSet`1<TVertex>> m_successorMap;
    private Dictionary`2<TVertex, int> m_predecessorCounts;
    private HashSet`1<TVertex> m_vertices;
    private IEqualityComparer`1<TVertex> m_comparer;
    internal IEnumerable`1<TVertex> Vertices { get; }
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> Edges { get; }
    internal Graph`1(IEqualityComparer`1<TVertex> comparer);
    internal IEnumerable`1<TVertex> get_Vertices();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.Graph`1/<get_Edges>d__8")]
internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> get_Edges();
    internal void AddVertex(TVertex vertex);
    internal void AddEdge(TVertex from, TVertex to);
    internal bool TryTopologicalSort(IEnumerable`1& orderedVertices, IEnumerable`1& remainder);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.KeyManager : object {
    private Dictionary`2<Tuple`3<EntityKey, string, bool>, int> _foreignKeyIdentifiers;
    private Dictionary`2<EntityKey, EntityKey> _valueKeyToTempKey;
    private Dictionary`2<EntityKey, int> _keyIdentifiers;
    private List`1<IdentifierInfo> _identifiers;
    private static byte White;
    private static byte Black;
    private static byte Gray;
    internal int GetCliqueIdentifier(int identifier);
    internal void AddReferentialConstraint(IEntityStateEntry dependentStateEntry, int dependentIdentifier, int principalIdentifier);
    internal void RegisterIdentifierOwner(PropagatorResult owner);
    internal bool TryGetIdentifierOwner(int identifier, PropagatorResult& owner);
    internal int GetKeyIdentifierForMemberOffset(EntityKey entityKey, int memberOffset, int keyMemberCount);
    internal int GetKeyIdentifierForMember(EntityKey entityKey, string member, bool currentValues);
    internal IEnumerable`1<IEntityStateEntry> GetDependentStateEntries(int identifier);
    internal object GetPrincipalValue(PropagatorResult result);
    internal IEnumerable`1<int> GetPrincipals(int identifier);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.KeyManager/<GetDirectReferences>d__16")]
internal IEnumerable`1<int> GetDirectReferences(int identifier);
    internal IEnumerable`1<int> GetDependents(int identifier);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.KeyManager/<WalkGraph>d__18")]
private IEnumerable`1<int> WalkGraph(int identifier, Func`2<IdentifierInfo, LinkedList`1<int>> successorFunction, bool leavesOnly);
    internal bool HasPrincipals(int identifier);
    internal void ValidateReferentialIntegrityGraphAcyclic();
    internal void RegisterKeyValueForAddedEntity(IEntityStateEntry addedEntry);
    internal bool TryGetTempKey(EntityKey valueKey, EntityKey& tempKey);
    private void ValidateReferentialIntegrityGraphAcyclic(int node, Byte[] color, LinkedList`1<int> parent);
    internal void AssociateNodes(int firstId, int secondId);
}
internal abstract class System.Data.Entity.Core.Mapping.Update.Internal.ModificationFunctionMappingTranslator : object {
    internal abstract virtual FunctionUpdateCommand Translate(UpdateTranslator translator, ExtractedStateEntry stateEntry);
    internal static ModificationFunctionMappingTranslator CreateEntitySetTranslator(EntitySetMapping setMapping);
    internal static ModificationFunctionMappingTranslator CreateAssociationSetTranslator(AssociationSetMapping setMapping);
}
internal enum System.Data.Entity.Core.Mapping.Update.Internal.ModificationOperator : Enum {
    public byte value__;
    public static ModificationOperator Update;
    public static ModificationOperator Delete;
    public static ModificationOperator Insert;
}
internal enum System.Data.Entity.Core.Mapping.Update.Internal.ModifiedPropertiesBehavior : Enum {
    public int value__;
    public static ModifiedPropertiesBehavior AllModified;
    public static ModifiedPropertiesBehavior NoneModified;
    public static ModifiedPropertiesBehavior SomeModified;
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.Propagator : UpdateExpressionVisitor`1<ChangeNode> {
    private UpdateTranslator m_updateTranslator;
    private EntitySet m_table;
    private static string _visitorName;
    internal UpdateTranslator UpdateTranslator { get; }
    protected string VisitorName { get; }
    private Propagator(UpdateTranslator parent, EntitySet table);
    private static Propagator();
    internal UpdateTranslator get_UpdateTranslator();
    protected virtual string get_VisitorName();
    internal static ChangeNode Propagate(UpdateTranslator parent, EntitySet table, DbQueryCommandTree umView);
    private static ChangeNode BuildChangeNode(DbExpression node);
    public virtual ChangeNode Visit(DbCrossJoinExpression node);
    public virtual ChangeNode Visit(DbJoinExpression node);
    public virtual ChangeNode Visit(DbUnionAllExpression node);
    public virtual ChangeNode Visit(DbProjectExpression node);
    private static PropagatorResult Project(DbProjectExpression node, PropagatorResult row, TypeUsage resultType);
    public virtual ChangeNode Visit(DbFilterExpression node);
    public virtual ChangeNode Visit(DbScanExpression node);
}
[FlagsAttribute]
internal enum System.Data.Entity.Core.Mapping.Update.Internal.PropagatorFlags : Enum {
    public byte value__;
    public static PropagatorFlags NoFlags;
    public static PropagatorFlags Preserve;
    public static PropagatorFlags ConcurrencyValue;
    public static PropagatorFlags Unknown;
    public static PropagatorFlags Key;
    public static PropagatorFlags ForeignKey;
}
internal abstract class System.Data.Entity.Core.Mapping.Update.Internal.PropagatorResult : object {
    internal static int NullIdentifier;
    internal static int NullOrdinal;
    internal bool IsNull { get; }
    internal bool IsSimple { get; }
    internal PropagatorFlags PropagatorFlags { get; }
    internal IEntityStateEntry StateEntry { get; }
    internal CurrentValueRecord Record { get; }
    internal StructuralType StructuralType { get; }
    internal int RecordOrdinal { get; }
    internal int Identifier { get; }
    internal PropagatorResult Next { get; }
    internal abstract virtual bool get_IsNull();
    internal abstract virtual bool get_IsSimple();
    internal virtual PropagatorFlags get_PropagatorFlags();
    internal virtual IEntityStateEntry get_StateEntry();
    internal virtual CurrentValueRecord get_Record();
    internal virtual StructuralType get_StructuralType();
    internal virtual int get_RecordOrdinal();
    internal virtual int get_Identifier();
    internal virtual PropagatorResult get_Next();
    internal virtual object GetSimpleValue();
    internal virtual PropagatorResult GetMemberValue(int ordinal);
    internal PropagatorResult GetMemberValue(EdmMember member);
    internal virtual PropagatorResult[] GetMemberValues();
    internal abstract virtual PropagatorResult ReplicateResultWithNewFlags(PropagatorFlags flags);
    internal virtual PropagatorResult ReplicateResultWithNewValue(object value);
    internal abstract virtual PropagatorResult Replace(Func`2<PropagatorResult, PropagatorResult> map);
    internal virtual PropagatorResult Merge(KeyManager keyManager, PropagatorResult other);
    internal virtual void SetServerGenValue(object value);
    internal object AlignReturnValue(object value, EdmMember member);
    internal static PropagatorResult CreateSimpleValue(PropagatorFlags flags, object value);
    internal static PropagatorResult CreateServerGenSimpleValue(PropagatorFlags flags, object value, CurrentValueRecord record, int recordOrdinal);
    internal static PropagatorResult CreateKeyValue(PropagatorFlags flags, object value, IEntityStateEntry stateEntry, int identifier);
    internal static PropagatorResult CreateServerGenKeyValue(PropagatorFlags flags, object value, IEntityStateEntry stateEntry, int identifier, int recordOrdinal);
    internal static PropagatorResult CreateStructuralValue(PropagatorResult[] values, StructuralType structuralType, bool isModified);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.RecordConverter : object {
    private UpdateTranslator m_updateTranslator;
    internal RecordConverter(UpdateTranslator updateTranslator);
    internal PropagatorResult ConvertOriginalValuesToPropagatorResult(IEntityStateEntry stateEntry, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
    internal PropagatorResult ConvertCurrentValuesToPropagatorResult(IEntityStateEntry stateEntry, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
    private PropagatorResult ConvertStateEntryToPropagatorResult(IEntityStateEntry stateEntry, bool useCurrentValues, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.SourceInterpreter : object {
    private List`1<IEntityStateEntry> m_stateEntries;
    private UpdateTranslator m_translator;
    private EntitySet m_sourceTable;
    private SourceInterpreter(UpdateTranslator translator, EntitySet sourceTable);
    internal static ReadOnlyCollection`1<IEntityStateEntry> GetAllStateEntries(PropagatorResult source, UpdateTranslator translator, EntitySet sourceTable);
    private void RetrieveResultMarkup(PropagatorResult source);
    private bool ExtentInScope(EntitySetBase extent);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.TableChangeProcessor : object {
    private EntitySet m_table;
    private Int32[] m_keyOrdinals;
    internal EntitySet Table { get; }
    internal Int32[] KeyOrdinals { get; }
    internal TableChangeProcessor(EntitySet table);
    internal EntitySet get_Table();
    internal Int32[] get_KeyOrdinals();
    internal bool IsKeyProperty(int propertyOrdinal);
    private static Int32[] InitializeKeyOrdinals(EntitySet table);
    internal List`1<UpdateCommand> CompileCommands(ChangeNode changeNode, UpdateCompiler compiler);
    private Dictionary`2<CompositeKey, PropagatorResult> ProcessKeys(UpdateCompiler compiler, List`1<PropagatorResult> changes, Set`1<CompositeKey> keys);
    private void DiagnoseKeyCollision(UpdateCompiler compiler, PropagatorResult change, CompositeKey key, PropagatorResult other);
    private PropagatorResult[] GetKeyConstants(PropagatorResult row);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.UndirectedGraph`1 : InternalBase {
    private Graph`1<TVertex> m_graph;
    private IEqualityComparer`1<TVertex> m_comparer;
    internal IEnumerable`1<TVertex> Vertices { get; }
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> Edges { get; }
    internal UndirectedGraph`1(IEqualityComparer`1<TVertex> comparer);
    internal IEnumerable`1<TVertex> get_Vertices();
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> get_Edges();
    internal void AddVertex(TVertex vertex);
    internal void AddEdge(TVertex first, TVertex second);
    internal KeyToListMap`2<int, TVertex> GenerateConnectedComponents();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Entity.Core.Mapping.Update.Internal.UpdateCommand : object {
    private static int OrderingIdentifierCounter;
    private int _orderingIdentifier;
    [CompilerGeneratedAttribute]
private PropagatorResult <OriginalValues>k__BackingField;
    [CompilerGeneratedAttribute]
private PropagatorResult <CurrentValues>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateTranslator <Translator>k__BackingField;
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal EntitySet Table { get; }
    internal UpdateCommandKind Kind { get; }
    internal PropagatorResult OriginalValues { get; private set; }
    internal PropagatorResult CurrentValues { get; private set; }
    protected UpdateTranslator Translator { get; private set; }
    protected UpdateCommand(UpdateTranslator translator, PropagatorResult originalValues, PropagatorResult currentValues);
    internal abstract virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal abstract virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual EntitySet get_Table();
    internal abstract virtual UpdateCommandKind get_Kind();
    [CompilerGeneratedAttribute]
internal PropagatorResult get_OriginalValues();
    [CompilerGeneratedAttribute]
private void set_OriginalValues(PropagatorResult value);
    [CompilerGeneratedAttribute]
internal PropagatorResult get_CurrentValues();
    [CompilerGeneratedAttribute]
private void set_CurrentValues(PropagatorResult value);
    [CompilerGeneratedAttribute]
protected UpdateTranslator get_Translator();
    [CompilerGeneratedAttribute]
private void set_Translator(UpdateTranslator value);
    internal abstract virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal void GetRequiredAndProducedEntities(UpdateTranslator translator, KeyToListMap`2<EntityKey, UpdateCommand> addedEntities, KeyToListMap`2<EntityKey, UpdateCommand> deletedEntities, KeyToListMap`2<EntityKey, UpdateCommand> addedRelationships, KeyToListMap`2<EntityKey, UpdateCommand> deletedRelationships);
    private void AddReferencedEntities(UpdateTranslator translator, PropagatorResult result, KeyToListMap`2<EntityKey, UpdateCommand> referencedEntities);
    internal abstract virtual long Execute(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    internal abstract virtual Task`1<long> ExecuteAsync(Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues, CancellationToken cancellationToken);
    internal abstract virtual int CompareToType(UpdateCommand other);
    public sealed virtual int CompareTo(UpdateCommand other);
    public sealed virtual bool Equals(UpdateCommand other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum System.Data.Entity.Core.Mapping.Update.Internal.UpdateCommandKind : Enum {
    public int value__;
    public static UpdateCommandKind Dynamic;
    public static UpdateCommandKind Function;
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.UpdateCommandOrderer : Graph`1<UpdateCommand> {
    private ForeignKeyValueComparer _keyComparer;
    private KeyToListMap`2<EntitySetBase, ReferentialConstraint> _sourceMap;
    private KeyToListMap`2<EntitySetBase, ReferentialConstraint> _targetMap;
    private bool _hasFunctionCommands;
    private UpdateTranslator _translator;
    internal UpdateCommandOrderer(IEnumerable`1<UpdateCommand> commands, UpdateTranslator translator);
    private static void InitializeForeignKeyMaps(HashSet`1<EntityContainer> containers, HashSet`1<EntitySet> tables, KeyToListMap`2& sourceMap, KeyToListMap`2& targetMap);
    private void AddServerGenDependencies();
    private void AddForeignKeyDependencies();
    private void AddForeignKeyEdges(KeyToListMap`2<ForeignKeyValue, UpdateCommand> predecessors);
    private KeyToListMap`2<ForeignKeyValue, UpdateCommand> DetermineForeignKeyPredecessors();
    private void AddModelDependencies();
    private void AddModelDependencies(KeyToListMap`2<EntityKey, UpdateCommand> producedMap, KeyToListMap`2<EntityKey, UpdateCommand> requiredMap);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.UpdateCompiler : object {
    internal UpdateTranslator m_translator;
    private static string s_targetVarName;
    internal UpdateCompiler(UpdateTranslator translator);
    internal UpdateCommand BuildDeleteCommand(PropagatorResult oldRow, TableChangeProcessor processor);
    internal UpdateCommand BuildUpdateCommand(PropagatorResult oldRow, PropagatorResult newRow, TableChangeProcessor processor);
    internal UpdateCommand BuildInsertCommand(PropagatorResult newRow, TableChangeProcessor processor);
    private IEnumerable`1<DbModificationClause> BuildSetClauses(DbExpressionBinding target, PropagatorResult row, PropagatorResult originalRow, TableChangeProcessor processor, bool insertMode, Dictionary`2& outputIdentifiers, DbExpression& returning, Boolean& rowMustBeTouched);
    private DbExpression BuildPredicate(DbExpressionBinding target, PropagatorResult referenceRow, PropagatorResult current, TableChangeProcessor processor, Boolean& rowMustBeTouched);
    private DbExpression GenerateEqualityExpression(DbExpressionBinding target, EdmProperty property, PropagatorResult value);
    private static DbExpression GeneratePropertyExpression(DbExpressionBinding target, EdmProperty property);
    private DbExpression GenerateValueExpression(EdmProperty property, PropagatorResult value);
    private static bool HasFlag(PropagatorResult input, PropagatorFlags flags);
    private static DbExpressionBinding GetTarget(TableChangeProcessor processor);
}
internal abstract class System.Data.Entity.Core.Mapping.Update.Internal.UpdateExpressionVisitor`1 : DbExpressionVisitor`1<TReturn> {
    protected string VisitorName { get; }
    protected abstract virtual string get_VisitorName();
    protected NotSupportedException ConstructNotSupportedException(DbExpression node);
    public virtual TReturn Visit(DbExpression expression);
    public virtual TReturn Visit(DbAndExpression expression);
    public virtual TReturn Visit(DbApplyExpression expression);
    public virtual TReturn Visit(DbArithmeticExpression expression);
    public virtual TReturn Visit(DbCaseExpression expression);
    public virtual TReturn Visit(DbCastExpression expression);
    public virtual TReturn Visit(DbComparisonExpression expression);
    public virtual TReturn Visit(DbConstantExpression expression);
    public virtual TReturn Visit(DbCrossJoinExpression expression);
    public virtual TReturn Visit(DbDerefExpression expression);
    public virtual TReturn Visit(DbDistinctExpression expression);
    public virtual TReturn Visit(DbElementExpression expression);
    public virtual TReturn Visit(DbExceptExpression expression);
    public virtual TReturn Visit(DbFilterExpression expression);
    public virtual TReturn Visit(DbFunctionExpression expression);
    public virtual TReturn Visit(DbLambdaExpression expression);
    public virtual TReturn Visit(DbEntityRefExpression expression);
    public virtual TReturn Visit(DbRefKeyExpression expression);
    public virtual TReturn Visit(DbGroupByExpression expression);
    public virtual TReturn Visit(DbIntersectExpression expression);
    public virtual TReturn Visit(DbIsEmptyExpression expression);
    public virtual TReturn Visit(DbIsNullExpression expression);
    public virtual TReturn Visit(DbIsOfExpression expression);
    public virtual TReturn Visit(DbJoinExpression expression);
    public virtual TReturn Visit(DbLikeExpression expression);
    public virtual TReturn Visit(DbLimitExpression expression);
    public virtual TReturn Visit(DbNewInstanceExpression expression);
    public virtual TReturn Visit(DbNotExpression expression);
    public virtual TReturn Visit(DbNullExpression expression);
    public virtual TReturn Visit(DbOfTypeExpression expression);
    public virtual TReturn Visit(DbOrExpression expression);
    public virtual TReturn Visit(DbInExpression expression);
    public virtual TReturn Visit(DbParameterReferenceExpression expression);
    public virtual TReturn Visit(DbProjectExpression expression);
    public virtual TReturn Visit(DbPropertyExpression expression);
    public virtual TReturn Visit(DbQuantifierExpression expression);
    public virtual TReturn Visit(DbRefExpression expression);
    public virtual TReturn Visit(DbRelationshipNavigationExpression expression);
    public virtual TReturn Visit(DbSkipExpression expression);
    public virtual TReturn Visit(DbSortExpression expression);
    public virtual TReturn Visit(DbTreatExpression expression);
    public virtual TReturn Visit(DbUnionAllExpression expression);
    public virtual TReturn Visit(DbVariableReferenceExpression expression);
    public virtual TReturn Visit(DbScanExpression expression);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator : object {
    private EntityAdapter _adapter;
    private Dictionary`2<EntitySetBase, ChangeNode> _changes;
    private Dictionary`2<EntitySetBase, List`1<ExtractedStateEntry>> _functionChanges;
    private List`1<IEntityStateEntry> _stateEntries;
    private Set`1<EntityKey> _knownEntityKeys;
    private Dictionary`2<EntityKey, AssociationSet> _requiredEntities;
    private Set`1<EntityKey> _optionalEntities;
    private Set`1<EntityKey> _includedValueEntities;
    private IEntityStateManager _stateManager;
    private DbInterceptionContext _interceptionContext;
    private RecordConverter _recordConverter;
    private RelationshipConstraintValidator _constraintValidator;
    private DbProviderServices _providerServices;
    private Dictionary`2<ModificationFunctionMapping, DbCommandDefinition> _modificationFunctionCommandDefinitions;
    private Dictionary`2<Tuple`2<EntitySetBase, StructuralType>, ExtractorMetadata> _extractorMetadata;
    [CompilerGeneratedAttribute]
private KeyManager <KeyManager>k__BackingField;
    internal IEqualityComparer`1<CompositeKey> KeyComparer;
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal KeyManager KeyManager { get; private set; }
    internal ViewLoader ViewLoader { get; }
    internal RecordConverter RecordConverter { get; }
    internal EntityConnection Connection { get; }
    internal Nullable`1<int> CommandTimeout { get; }
    public DbInterceptionContext InterceptionContext { get; }
    public UpdateTranslator(EntityAdapter adapter);
    internal MetadataWorkspace get_MetadataWorkspace();
    [CompilerGeneratedAttribute]
internal virtual KeyManager get_KeyManager();
    [CompilerGeneratedAttribute]
private void set_KeyManager(KeyManager value);
    internal ViewLoader get_ViewLoader();
    internal RecordConverter get_RecordConverter();
    internal virtual EntityConnection get_Connection();
    internal virtual Nullable`1<int> get_CommandTimeout();
    public virtual DbInterceptionContext get_InterceptionContext();
    internal void RegisterReferentialConstraints(IEntityStateEntry stateEntry);
    private void RegisterEntityReferentialConstraints(IEntityStateEntry stateEntry, bool currentValues);
    private static int GetKeyMemberOffset(RelationshipEndMember role, EdmProperty property, Int32& keyMemberCount);
    internal IEnumerable`1<IEntityStateEntry> GetRelationships(EntityKey entityKey);
    internal virtual int Update();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator/<UpdateAsync>d__39")]
internal virtual Task`1<int> UpdateAsync(CancellationToken cancellationToken);
    protected virtual IEnumerable`1<UpdateCommand> ProduceCommands();
    private void ValidateRowsAffected(long rowsAffected, UpdateCommand source);
    private IEnumerable`1<IEntityStateEntry> DetermineStateEntriesFromSource(UpdateCommand source);
    private void BackPropagateServerGen(List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    private int AcceptChanges();
    private IEnumerable`1<EntitySetBase> GetDynamicModifiedExtents();
    private IEnumerable`1<EntitySetBase> GetFunctionModifiedExtents();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator/<ProduceDynamicCommands>d__47")]
private IEnumerable`1<UpdateCommand> ProduceDynamicCommands();
    internal DbCommandDefinition GenerateCommandDefinition(ModificationFunctionMapping functionMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator/<ProduceFunctionCommands>d__49")]
private IEnumerable`1<UpdateCommand> ProduceFunctionCommands();
    internal ExtractorMetadata GetExtractorMetadata(EntitySetBase entitySetBase, StructuralType type);
    private UpdateException DependencyOrderingError(IEnumerable`1<UpdateCommand> remainder);
    internal DbCommand CreateCommand(DbModificationCommandTree commandTree);
    internal void SetParameterValue(DbParameter parameter, TypeUsage typeUsage, object value);
    private void PullModifiedEntriesFromStateManager();
    private void PullUnchangedEntriesFromStateManager();
    private void ValidateAndRegisterStateEntry(IEntityStateEntry stateEntry);
    private void AddValidAncillaryKey(EntityKey key, Set`1<EntityKey> keySet);
    private void ValidateRecord(EntitySetBase extent, IExtendedDataRecord record);
    private static void VerifyExtent(MetadataWorkspace workspace, EntitySetBase extent);
    private void LoadStateEntry(IEntityStateEntry stateEntry);
    internal ChangeNode GetExtentModifications(EntitySetBase extent);
    internal List`1<ExtractedStateEntry> GetExtentFunctionModifications(EntitySetBase extent);
}
internal class System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader : object {
    private StorageMappingItemCollection m_mappingCollection;
    private Dictionary`2<AssociationSet, AssociationSetMetadata> m_associationSetMetadata;
    private Dictionary`2<EntitySetBase, Set`1<EntitySet>> m_affectedTables;
    private Set`1<EdmMember> m_serverGenProperties;
    private Set`1<EdmMember> m_isNullConditionProperties;
    private Dictionary`2<EntitySetBase, ModificationFunctionMappingTranslator> m_functionMappingTranslators;
    private ReaderWriterLockSlim m_readerWriterLock;
    internal ViewLoader(StorageMappingItemCollection mappingCollection);
    internal ModificationFunctionMappingTranslator GetFunctionMappingTranslator(EntitySetBase extent, MetadataWorkspace workspace);
    internal Set`1<EntitySet> GetAffectedTables(EntitySetBase extent, MetadataWorkspace workspace);
    internal AssociationSetMetadata GetAssociationSetMetadata(AssociationSet associationSet, MetadataWorkspace workspace);
    internal bool IsServerGen(EntitySetBase entitySetBase, MetadataWorkspace workspace, EdmMember member);
    internal bool IsNullConditionMember(EntitySetBase entitySetBase, MetadataWorkspace workspace, EdmMember member);
    private T_Value SyncGetValue(EntitySetBase entitySetBase, MetadataWorkspace workspace, Dictionary`2<T_Key, T_Value> dictionary, T_Key key);
    private bool SyncContains(EntitySetBase entitySetBase, MetadataWorkspace workspace, Set`1<T_Element> set, T_Element element);
    private TResult SyncInitializeEntitySet(EntitySetBase entitySetBase, MetadataWorkspace workspace, Func`2<TArg, TResult> evaluate, TArg arg);
    private void InitializeEntitySet(EntitySetBase entitySetBase, MetadataWorkspace workspace);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<GetMembersWithResultBinding>d__17")]
private static IEnumerable`1<EdmMember> GetMembersWithResultBinding(EntitySetMapping entitySetMapping);
    private void InitializeFunctionMappingTranslators(EntitySetBase entitySetBase, EntityContainerMapping mapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<FindServerGenMembers>d__19")]
private static IEnumerable`1<EdmMember> FindServerGenMembers(MappingFragment mappingFragment);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<FindIsNullConditionColumns>d__20")]
private static IEnumerable`1<EdmMember> FindIsNullConditionColumns(MappingFragment mappingFragment);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<FindPropertiesMappedToColumns>d__21")]
private static IEnumerable`1<EdmMember> FindPropertiesMappedToColumns(Set`1<EdmMember> columns, MappingFragment mappingFragment);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<GetMappingFragments>d__22")]
private static IEnumerable`1<MappingFragment> GetMappingFragments(EntitySetBaseMapping setMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.Update.Internal.ViewLoader/<FlattenPropertyMappings>d__23")]
private static IEnumerable`1<PropertyMapping> FlattenPropertyMappings(ReadOnlyCollection`1<PropertyMapping> propertyMappings);
}
internal class System.Data.Entity.Core.Mapping.ValueCondition : object {
    internal string Description;
    internal bool IsSentinel;
    internal static string IsNullDescription;
    internal static string IsNotNullDescription;
    internal static string IsOtherDescription;
    internal static ValueCondition IsNull;
    internal static ValueCondition IsNotNull;
    internal static ValueCondition IsOther;
    internal bool IsNotNullCondition { get; }
    private ValueCondition(string description, bool isSentinel);
    internal ValueCondition(string description);
    private static ValueCondition();
    internal bool get_IsNotNullCondition();
    public sealed virtual bool Equals(ValueCondition other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Data.Entity.Core.Mapping.ValueConditionMapping : ConditionPropertyMapping {
    public object Value { get; }
    public ValueConditionMapping(EdmProperty propertyOrColumn, object value);
    public object get_Value();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.BasicViewGenerator : InternalBase {
    private MemberProjectionIndex m_projectedSlotMap;
    private List`1<LeftCellWrapper> m_usedCells;
    private FragmentQuery m_activeDomain;
    private ViewgenContext m_viewgenContext;
    private ErrorLog m_errorLog;
    private ConfigViewGenerator m_config;
    private MemberDomainMap m_domainMap;
    private FragmentQueryProcessor LeftQP { get; }
    internal BasicViewGenerator(MemberProjectionIndex projectedSlotMap, List`1<LeftCellWrapper> usedCells, FragmentQuery activeDomain, ViewgenContext context, MemberDomainMap domainMap, ErrorLog errorLog, ConfigViewGenerator config);
    private FragmentQueryProcessor get_LeftQP();
    internal CellTreeNode CreateViewExpression();
    internal CellTreeNode GroupByRightExtent(CellTreeNode rootNode);
    private CellTreeNode IsolateUnions(CellTreeNode rootNode);
    private CellTreeNode ConvertUnionsToNormalizedLOJs(CellTreeNode rootNode);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.BasicViewGenerator/<GetFKOverPKDependents>d__14")]
private static IEnumerable`1<EntitySet> GetFKOverPKDependents(EntitySet principal);
    private static EntitySet GetLeafNodeTable(LeafCellTreeNode leaf);
    private static bool CheckLOJCycle(EntitySet child, EntitySet parent, Dictionary`2<EntitySet, EntitySet> nestedExtents);
    internal CellTreeNode IsolateByOperator(CellTreeNode rootNode, CellTreeOpType opTypeToIsolate);
    private bool TryAddChildToGroup(CellTreeOpType opTypeToIsolate, CellTreeNode childNode, OpCellTreeNode groupNode);
    private bool IsDisjoint(CellTreeNode n1, CellTreeNode n2);
    private bool IsContainedIn(CellTreeNode n1, CellTreeNode n2);
    private bool IsEquivalentTo(CellTreeNode n1, CellTreeNode n2);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CellCreator : InternalBase {
    private EntityContainerMapping m_containerMapping;
    private int m_currentCellNumber;
    private CqlIdentifiers m_identifiers;
    internal CqlIdentifiers Identifiers { get; }
    internal CellCreator(EntityContainerMapping containerMapping);
    internal CqlIdentifiers get_Identifiers();
    internal List`1<Cell> GenerateCells();
    private void ExpandCells(List`1<Cell> cells);
    private bool TryCreateAdditionalCellWithCondition(Cell originalCell, MemberPath memberToExpand, bool conditionValue, ViewTarget viewTarget, Cell& result);
    private void ExtractCells(List`1<Cell> cells);
    private void ExtractCellsFromTableFragment(EntitySetBase extent, MappingFragment fragmentMap, Set`1<EdmType> allTypes, List`1<Cell> cells);
    private void ExtractProperties(IEnumerable`1<PropertyMapping> properties, MemberPath cNode, List`1<ProjectedSlot> cSlots, BoolExpression& cQueryWhereClause, MemberPath sRootExtent, List`1<ProjectedSlot> sSlots, BoolExpression& sQueryWhereClause);
    private static BoolExpression GetConditionExpression(MemberPath member, ConditionPropertyMapping conditionMap);
    private static bool IsBooleanMember(MemberPath path);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CellGroupValidator : object {
    private IEnumerable`1<Cell> m_cells;
    private ConfigViewGenerator m_config;
    private ErrorLog m_errorLog;
    private SchemaConstraints`1<ViewKeyConstraint> m_cViewConstraints;
    private SchemaConstraints`1<ViewKeyConstraint> m_sViewConstraints;
    internal CellGroupValidator(IEnumerable`1<Cell> cells, ConfigViewGenerator config);
    internal ErrorLog Validate();
    private void ConstructCellRelationsWithConstraints(SchemaConstraints`1<BasicKeyConstraint> cConstraints, SchemaConstraints`1<BasicKeyConstraint> sConstraints);
    private static void PopulateBaseConstraints(BasicCellRelation baseRelation, SchemaConstraints`1<BasicKeyConstraint> constraints);
    private static SchemaConstraints`1<ViewKeyConstraint> PropagateConstraints(SchemaConstraints`1<BasicKeyConstraint> baseConstraints);
    private void CheckImplication(SchemaConstraints`1<ViewKeyConstraint> cViewConstraints, SchemaConstraints`1<ViewKeyConstraint> sViewConstraints);
    private void CheckImplicationKeyConstraints(SchemaConstraints`1<ViewKeyConstraint> leftViewConstraints, SchemaConstraints`1<ViewKeyConstraint> rightViewConstraints);
    private bool CheckCellsWithDistinctFlag();
    private bool PerformSingleCellChecks();
    [ConditionalAttribute("DEBUG")]
private static void CheckConstraintSanity(SchemaConstraints`1<BasicKeyConstraint> cConstraints, SchemaConstraints`1<BasicKeyConstraint> sConstraints, SchemaConstraints`1<ViewKeyConstraint> cViewConstraints, SchemaConstraints`1<ViewKeyConstraint> sViewConstraints);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CellPartitioner : InternalBase {
    private IEnumerable`1<Cell> m_cells;
    private IEnumerable`1<ForeignConstraint> m_foreignKeyConstraints;
    internal CellPartitioner(IEnumerable`1<Cell> cells, IEnumerable`1<ForeignConstraint> foreignKeyConstraints);
    internal List`1<Set`1<Cell>> GroupRelatedCells();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CellTreeSimplifier : InternalBase {
    private ViewgenContext m_viewgenContext;
    private CellTreeSimplifier(ViewgenContext context);
    internal static CellTreeNode MergeNodes(CellTreeNode rootNode);
    private CellTreeNode SimplifyTreeByMergingNodes(CellTreeNode rootNode);
    private CellTreeNode RestructureTreeForMerges(CellTreeNode rootNode);
    private static Set`1<LeafCellTreeNode> GetCommonGrandChildren(List`1<CellTreeNode> nodes);
    private static List`1<CellTreeNode> GroupLeafChildrenByExtent(List`1<CellTreeNode> nodes);
    private static List`1<CellTreeNode> GroupNonAssociativeLeafChildren(List`1<CellTreeNode> nodes);
    private bool TryMergeCellQueries(CellTreeOpType opType, CellTreeNode& node1, CellTreeNode node2);
    internal static bool TryMergeTwoCellQueries(CellQuery query1, CellQuery query2, CellTreeOpType opType, CellQuery& mergedQuery);
    private static SelectDistinct MergeDupl(SelectDistinct d1, SelectDistinct d2);
    private static List`1<BoolExpression> MergeBoolExpressions(CellQuery query1, CellQuery query2, BoolExpression conjunct1, BoolExpression conjunct2, CellTreeOpType opType);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.ConfigViewGenerator : InternalBase {
    private ViewGenTraceLevel m_traceLevel;
    private TimeSpan[] m_breakdownTimes;
    private Stopwatch m_watch;
    private Stopwatch m_singleWatch;
    private PerfType m_singlePerfOp;
    private bool m_enableValidation;
    private bool m_generateUpdateViews;
    [CompilerGeneratedAttribute]
private bool <GenerateEsql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateViewsForEachType>k__BackingField;
    internal bool GenerateEsql { get; internal set; }
    internal TimeSpan[] BreakdownTimes { get; }
    internal ViewGenTraceLevel TraceLevel { get; internal set; }
    internal bool IsValidationEnabled { get; internal set; }
    internal bool GenerateUpdateViews { get; internal set; }
    internal bool GenerateViewsForEachType { get; internal set; }
    internal bool IsViewTracing { get; }
    internal bool IsNormalTracing { get; }
    internal bool IsVerboseTracing { get; }
    [CompilerGeneratedAttribute]
internal bool get_GenerateEsql();
    [CompilerGeneratedAttribute]
internal void set_GenerateEsql(bool value);
    internal TimeSpan[] get_BreakdownTimes();
    internal ViewGenTraceLevel get_TraceLevel();
    internal void set_TraceLevel(ViewGenTraceLevel value);
    internal bool get_IsValidationEnabled();
    internal void set_IsValidationEnabled(bool value);
    internal bool get_GenerateUpdateViews();
    internal void set_GenerateUpdateViews(bool value);
    [CompilerGeneratedAttribute]
internal bool get_GenerateViewsForEachType();
    [CompilerGeneratedAttribute]
internal void set_GenerateViewsForEachType(bool value);
    internal bool get_IsViewTracing();
    internal bool get_IsNormalTracing();
    internal bool get_IsVerboseTracing();
    private void StartWatch();
    internal void StartSingleWatch(PerfType perfType);
    internal void StopSingleWatch(PerfType perfType);
    internal void SetTimeForFinishedActivity(PerfType perfType);
    internal bool IsTraceAllowed(ViewGenTraceLevel traceLevel);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.BooleanProjectedSlot : ProjectedSlot {
    private BoolExpression m_expr;
    private CellIdBoolean m_originalCell;
    internal BooleanProjectedSlot(BoolExpression expr, CqlIdentifiers identifiers, int originalCellNum);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.CaseCqlBlock : CqlBlock {
    private SlotInfo m_caseSlotInfo;
    internal CaseCqlBlock(SlotInfo[] slots, int caseSlot, CqlBlock child, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.CqlBlock : InternalBase {
    private ReadOnlyCollection`1<SlotInfo> m_slots;
    private ReadOnlyCollection`1<CqlBlock> m_children;
    private BoolExpression m_whereClause;
    private string m_blockAlias;
    private JoinTreeContext m_joinTreeContext;
    internal ReadOnlyCollection`1<SlotInfo> Slots { get; internal set; }
    protected ReadOnlyCollection`1<CqlBlock> Children { get; }
    protected BoolExpression WhereClause { get; }
    internal string CqlAlias { get; }
    protected CqlBlock(SlotInfo[] slotInfos, List`1<CqlBlock> children, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    internal ReadOnlyCollection`1<SlotInfo> get_Slots();
    internal void set_Slots(ReadOnlyCollection`1<SlotInfo> value);
    protected ReadOnlyCollection`1<CqlBlock> get_Children();
    protected BoolExpression get_WhereClause();
    internal string get_CqlAlias();
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal abstract virtual DbExpression AsCqt(bool isTopLevel);
    internal QualifiedSlot QualifySlotWithBlockAlias(int slotNum);
    internal ProjectedSlot SlotValue(int slotNum);
    internal MemberPath MemberPath(int slotNum);
    internal bool IsProjected(int slotNum);
    protected void GenerateProjectionEsql(StringBuilder builder, string blockAlias, bool addNewLineAfterEachSlot, int indentLevel, bool isTopLevel);
    protected DbExpression GenerateProjectionCqt(DbExpression row, bool isTopLevel);
    internal void SetJoinTreeContext(IList`1<string> parentQualifiers, string leafQualifier);
    internal DbExpression GetInput(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal static class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.CqlWriter : object {
    private static Regex _wordIdentifierRegex;
    private static CqlWriter();
    internal static string GetQualifiedName(string blockName, string field);
    internal static void AppendEscapedTypeName(StringBuilder builder, EdmType type);
    internal static void AppendEscapedQualifiedName(StringBuilder builder, string name1, string name2);
    internal static void AppendEscapedName(StringBuilder builder, string name);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.ExtentCqlBlock : CqlBlock {
    private EntitySetBase m_extent;
    private string m_nodeTableAlias;
    private SelectDistinct m_selectDistinct;
    private static List`1<CqlBlock> _emptyChildren;
    internal ExtentCqlBlock(EntitySetBase extent, SelectDistinct selectDistinct, SlotInfo[] slots, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    private static ExtentCqlBlock();
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.JoinCqlBlock : CqlBlock {
    private CellTreeOpType m_opType;
    private List`1<OnClause> m_onClauses;
    internal JoinCqlBlock(CellTreeOpType opType, SlotInfo[] slotInfos, List`1<CqlBlock> children, List`1<OnClause> onClauses, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
    [CompilerGeneratedAttribute]
private DbExpression <AsCqt>b__4_0(DbExpression row);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.QualifiedSlot : ProjectedSlot {
    private CqlBlock m_block;
    private ProjectedSlot m_slot;
    internal QualifiedSlot(CqlBlock block, ProjectedSlot slot);
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal ProjectedSlot GetOriginalSlot();
    internal string GetQualifiedCqlName(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.SlotInfo : InternalBase {
    private bool m_isRequiredByParent;
    private bool m_isProjected;
    private ProjectedSlot m_slotValue;
    private MemberPath m_outputMember;
    private bool m_enforceNotNull;
    internal bool IsRequiredByParent { get; }
    internal bool IsProjected { get; }
    internal MemberPath OutputMember { get; }
    internal ProjectedSlot SlotValue { get; }
    internal string CqlFieldAlias { get; }
    internal bool IsEnforcedNotNull { get; }
    internal SlotInfo(bool isRequiredByParent, bool isProjected, ProjectedSlot slotValue, MemberPath outputMember);
    internal SlotInfo(bool isRequiredByParent, bool isProjected, ProjectedSlot slotValue, MemberPath outputMember, bool enforceNotNull);
    internal bool get_IsRequiredByParent();
    internal bool get_IsProjected();
    internal MemberPath get_OutputMember();
    internal ProjectedSlot get_SlotValue();
    internal string get_CqlFieldAlias();
    internal bool get_IsEnforcedNotNull();
    internal void ResetIsRequiredByParent();
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, int indentLevel);
    internal DbExpression AsCqt(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGeneration.UnionCqlBlock : CqlBlock {
    internal UnionCqlBlock(SlotInfo[] slotInfos, List`1<CqlBlock> children, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.CqlGenerator : InternalBase {
    private CellTreeNode m_view;
    private Dictionary`2<MemberPath, CaseStatement> m_caseStatements;
    private MemberProjectionIndex m_projectedSlotMap;
    private int m_numBools;
    private int m_currentBlockNum;
    private BoolExpression m_topLevelWhereClause;
    private CqlIdentifiers m_identifiers;
    private StorageMappingItemCollection m_mappingItemCollection;
    private int TotalSlots { get; }
    internal CqlGenerator(CellTreeNode view, Dictionary`2<MemberPath, CaseStatement> caseStatements, CqlIdentifiers identifiers, MemberProjectionIndex projectedSlotMap, int numCellsInView, BoolExpression topLevelWhereClause, StorageMappingItemCollection mappingItemCollection);
    private int get_TotalSlots();
    internal string GenerateEsql();
    internal DbQueryCommandTree GenerateCqt();
    private CqlBlock GenerateCqlBlockTree();
    private Boolean[] GetRequiredSlots();
    private CqlBlock ConstructCaseBlocks(CqlBlock viewBlock, IEnumerable`1<WithRelationship> withRelationships);
    private CqlBlock ConstructCaseBlocks(CqlBlock viewBlock, int startSlotNum, Boolean[] parentRequiredSlots, IEnumerable`1<WithRelationship> withRelationships);
    private SlotInfo[] CreateSlotInfosForCaseStatement(Boolean[] parentRequiredSlots, int foundSlot, CqlBlock childBlock, CaseStatement thisCaseStatement, IEnumerable`1<WithRelationship> withRelationships);
    private int FindNextCaseStatementSlot(int startSlotNum, Boolean[] parentRequiredSlots, int numMembers);
    private void GetRequiredSlotsForCaseMember(MemberPath caseMemberPath, Boolean[] requiredSlots);
    private MemberPath GetOutputMemberPath(int slotNum);
    private int GetSlotIndex(MemberPath member, EdmMember child);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.DiscriminatorMap : object {
    internal DbPropertyExpression Discriminator;
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> TypeMap;
    internal ReadOnlyCollection`1<KeyValuePair`2<EdmProperty, DbExpression>> PropertyMap;
    internal ReadOnlyCollection`1<KeyValuePair`2<RelProperty, DbExpression>> RelPropertyMap;
    internal EntitySet EntitySet;
    private DiscriminatorMap(DbPropertyExpression discriminator, List`1<KeyValuePair`2<object, EntityType>> typeMap, Dictionary`2<EdmProperty, DbExpression> propertyMap, Dictionary`2<RelProperty, DbExpression> relPropertyMap, EntitySet entitySet);
    internal static bool TryCreateDiscriminatorMap(EntitySet entitySet, DbExpression queryView, DiscriminatorMap& discriminatorMap);
    private static bool CheckForMissingRelProperties(Dictionary`2<RelProperty, DbExpression> relPropertyMap, Dictionary`2<EntityType, List`1<RelProperty>> typeToRelPropertyMap);
    private static bool TryMatchEntityTypeConstructor(DbExpression then, Dictionary`2<EdmProperty, DbExpression> propertyMap, Dictionary`2<RelProperty, DbExpression> relPropertyMap, Dictionary`2<EntityType, List`1<RelProperty>> typeToRelPropertyMap, EntityType& entityType);
    private static bool ExpressionsCompatible(DbExpression x, DbExpression y);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.GeneratedView : InternalBase {
    private EntitySetBase m_extent;
    private EdmType m_type;
    private DbQueryCommandTree m_commandTree;
    private string m_eSQL;
    private Node m_internalTreeNode;
    private DiscriminatorMap m_discriminatorMap;
    private StorageMappingItemCollection m_mappingItemCollection;
    private ConfigViewGenerator m_config;
    internal string eSQL { get; }
    private GeneratedView(EntitySetBase extent, EdmType type, DbQueryCommandTree commandTree, string eSQL, DiscriminatorMap discriminatorMap, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config);
    internal static GeneratedView CreateGeneratedView(EntitySetBase extent, EdmType type, DbQueryCommandTree commandTree, string eSQL, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config);
    internal static GeneratedView CreateGeneratedViewForFKAssociationSet(EntitySetBase extent, EdmType type, DbQueryCommandTree commandTree, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config);
    internal static bool TryParseUserSpecifiedView(EntitySetBaseMapping setMapping, EntityTypeBase type, string eSQL, bool includeSubtypes, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config, IList`1<EdmSchemaError> errors, GeneratedView& generatedView);
    internal string get_eSQL();
    internal DbQueryCommandTree GetCommandTree();
    internal Node GetInternalTree(Command targetIqtCommand);
    private static bool TryParseView(string eSQL, bool isUserSpecified, EntitySetBase extent, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config, DbQueryCommandTree& commandTree, DiscriminatorMap& discriminatorMap, Exception& parserException);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.PerfType : Enum {
    public int value__;
    public static PerfType InitialSetup;
    public static PerfType CellCreation;
    public static PerfType KeyConstraint;
    public static PerfType ViewgenContext;
    public static PerfType UpdateViews;
    public static PerfType DisjointConstraint;
    public static PerfType PartitionConstraint;
    public static PerfType DomainConstraint;
    public static PerfType ForeignConstraint;
    public static PerfType QueryViews;
    public static PerfType BoolResolution;
    public static PerfType Unsatisfiability;
    public static PerfType ViewParsing;
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.DefaultTileProcessor`1 : TileProcessor`1<Tile`1<T_Query>> {
    private TileQueryProcessor`1<T_Query> _tileQueryProcessor;
    internal TileQueryProcessor`1<T_Query> QueryProcessor { get; }
    internal DefaultTileProcessor`1(TileQueryProcessor`1<T_Query> tileQueryProcessor);
    internal TileQueryProcessor`1<T_Query> get_QueryProcessor();
    internal virtual bool IsEmpty(Tile`1<T_Query> tile);
    internal virtual Tile`1<T_Query> Union(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> Join(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> AntiSemiJoin(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> GetArg1(Tile`1<T_Query> tile);
    internal virtual Tile`1<T_Query> GetArg2(Tile`1<T_Query> tile);
    internal virtual TileOpKind GetOpKind(Tile`1<T_Query> tile);
    internal bool IsContainedIn(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal bool IsEquivalentTo(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.FragmentQuery : object {
    private BoolExpression m_fromVariable;
    private string m_label;
    private HashSet`1<MemberPath> m_attributes;
    private BoolExpression m_condition;
    public HashSet`1<MemberPath> Attributes { get; }
    public BoolExpression Condition { get; }
    public BoolExpression FromVariable { get; }
    public string Description { get; }
    internal FragmentQuery(string label, BoolExpression fromVariable, IEnumerable`1<MemberPath> attrs, BoolExpression condition);
    public HashSet`1<MemberPath> get_Attributes();
    public BoolExpression get_Condition();
    public static FragmentQuery Create(BoolExpression fromVariable, CellQuery cellQuery);
    public static FragmentQuery Create(string label, RoleBoolean roleBoolean, CellQuery cellQuery);
    public static FragmentQuery Create(IEnumerable`1<MemberPath> attrs, BoolExpression whereClause);
    public static FragmentQuery Create(BoolExpression whereClause);
    public BoolExpression get_FromVariable();
    public sealed virtual string get_Description();
    public virtual string ToString();
    internal static BoolExpression CreateMemberCondition(MemberPath path, Constant domainValue, MemberDomainMap domainMap);
    internal static IEqualityComparer`1<FragmentQuery> GetEqualityComparer(FragmentQueryProcessor qp);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.FragmentQueryKB : KnowledgeBase`1<DomainConstraint`2<BoolLiteral, Constant>> {
    private BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> _kbExpression;
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> KbExpression { get; }
    internal virtual void AddFact(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> fact);
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> get_KbExpression();
    internal void CreateVariableConstraints(EntitySetBase extent, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
    internal void CreateAssociationConstraints(EntitySetBase extent, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
    internal void CreateEquivalenceConstraintForOneToOneForeignKeyAssociation(AssociationSet assocSet, MemberDomainMap domainMap);
    private void CreateVariableConstraintsRecursion(EdmType edmType, MemberPath currentPath, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
    private static BoolExpression CreateIsOfTypeCondition(MemberPath currentPath, IEnumerable`1<EdmType> derivedTypes, MemberDomainMap domainMap);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.FragmentQueryKBChaseSupport : FragmentQueryKB {
    private Dictionary`2<TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>>, BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> _implications;
    private AtomicConditionRuleChase _chase;
    private Set`1<BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> _residualFacts;
    private int _kbSize;
    private int _residueSize;
    internal Dictionary`2<TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>>, BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> Implications { get; }
    private IEnumerable`1<BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> ResidueInternal { get; }
    private int ResidueSize { get; }
    internal Dictionary`2<TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>>, BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> get_Implications();
    internal virtual void AddFact(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> fact);
    private void CacheFact(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> fact);
    private IEnumerable`1<BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> get_ResidueInternal();
    private int get_ResidueSize();
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> Chase(TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expression);
    internal bool IsSatisfiable(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expression);
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> Chase(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expression);
    private void CacheImplication(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> condition, BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> implies);
    private void CacheNormalizedImplication(TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> condition, BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> implies);
    private void CacheResidualFact(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> fact);
    private void PrepareResidue();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.FragmentQueryProcessor : TileQueryProcessor`1<FragmentQuery> {
    private FragmentQueryKBChaseSupport _kb;
    internal FragmentQueryKB KnowledgeBase { get; }
    public FragmentQueryProcessor(FragmentQueryKBChaseSupport kb);
    internal static FragmentQueryProcessor Merge(FragmentQueryProcessor qp1, FragmentQueryProcessor qp2);
    internal FragmentQueryKB get_KnowledgeBase();
    internal virtual FragmentQuery Union(FragmentQuery q1, FragmentQuery q2);
    internal bool IsDisjointFrom(FragmentQuery q1, FragmentQuery q2);
    internal bool IsContainedIn(FragmentQuery q1, FragmentQuery q2);
    internal bool IsEquivalentTo(FragmentQuery q1, FragmentQuery q2);
    internal virtual FragmentQuery Intersect(FragmentQuery q1, FragmentQuery q2);
    internal virtual FragmentQuery Difference(FragmentQuery qA, FragmentQuery qB);
    internal virtual bool IsSatisfiable(FragmentQuery query);
    private bool IsSatisfiable(BoolExpression condition);
    internal virtual FragmentQuery CreateDerivedViewBySelectingConstantAttributes(FragmentQuery view);
    public virtual string ToString();
}
internal interface System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.ITileQuery {
    public string Description { get; }
    public abstract virtual string get_Description();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.QueryRewriter : object {
    private MemberPath _extentPath;
    private MemberDomainMap _domainMap;
    private ConfigViewGenerator _config;
    private CqlIdentifiers _identifiers;
    private ViewgenContext _context;
    private RewritingProcessor`1<Tile`1<FragmentQuery>> _qp;
    private List`1<MemberPath> _keyAttributes;
    private List`1<FragmentQuery> _fragmentQueries;
    private List`1<Tile`1<FragmentQuery>> _views;
    private FragmentQuery _domainQuery;
    private EdmType _generatedType;
    private HashSet`1<FragmentQuery> _usedViews;
    private List`1<LeftCellWrapper> _usedCells;
    private BoolExpression _topLevelWhereClause;
    private CellTreeNode _basicView;
    private Dictionary`2<MemberPath, CaseStatement> _caseStatements;
    private ErrorLog _errorLog;
    private ViewGenMode _typesGenerationMode;
    private static Tile`1<FragmentQuery> _trueViewSurrogate;
    internal ViewgenContext ViewgenContext { get; }
    internal Dictionary`2<MemberPath, CaseStatement> CaseStatements { get; }
    internal BoolExpression TopLevelWhereClause { get; }
    internal CellTreeNode BasicView { get; }
    internal List`1<LeftCellWrapper> UsedCells { get; }
    private IEnumerable`1<FragmentQuery> FragmentQueries { get; }
    internal QueryRewriter(EdmType generatedType, ViewgenContext context, ViewGenMode typesGenerationMode);
    private static QueryRewriter();
    internal void GenerateViewComponents();
    internal ViewgenContext get_ViewgenContext();
    internal Dictionary`2<MemberPath, CaseStatement> get_CaseStatements();
    internal BoolExpression get_TopLevelWhereClause();
    internal CellTreeNode get_BasicView();
    internal List`1<LeftCellWrapper> get_UsedCells();
    private IEnumerable`1<FragmentQuery> get_FragmentQueries();
    private IEnumerable`1<Constant> GetDomain(MemberPath currentPath);
    private void AdjustMemberDomainsForUpdateViews();
    private void RemoveUnusedValueFromStoreDomain(Constant domainValue, MemberPath currentPath);
    internal FragmentQuery GetDomainQuery(IEnumerable`1<FragmentQuery> fragmentQueries, EdmType generatedType);
    private bool AddRewritingToCaseStatement(Tile`1<FragmentQuery> rewriting, CaseStatement caseStatement, MemberPath currentPath, Constant domainValue);
    private void EnsureConfigurationIsFullyMapped(MemberPath currentPath, BoolExpression currentWhereClause, HashSet`1<FragmentQuery> outputUsedViews, ErrorLog errorLog);
    private static List`1<string> GetTypeBasedMemberPathList(IEnumerable`1<MemberPath> nonConditionalScalarAttributes);
    private void AddUnrecoverableAttributesError(IEnumerable`1<MemberPath> attributes, BoolExpression domainAddedWhereClause, ErrorLog errorLog);
    private void GenerateCaseStatements(IEnumerable`1<MemberPath> members, HashSet`1<FragmentQuery> outputUsedViews);
    private void AddElseDefaultToCaseStatement(MemberPath currentPath, CaseStatement caseStatement, List`1<Constant> domain, CellTreeNode rightDomainQuery, Tile`1<FragmentQuery> unionCaseRewriting);
    private BoolExpression GetTopLevelWhereClause(HashSet`1<FragmentQuery> outputUsedViews);
    internal void EnsureExtentIsFullyMapped(HashSet`1<FragmentQuery> outputUsedViews);
    private List`1<LeftCellWrapper> RemapFromVariables();
    internal void AddTrivialCaseStatementsForConditionMembers();
    private bool FindRewritingAndUsedViews(IEnumerable`1<MemberPath> attributes, BoolExpression whereClause, HashSet`1<FragmentQuery> outputUsedViews, Tile`1& rewriting);
    private bool FindRewritingAndUsedViews(IEnumerable`1<MemberPath> attributes, BoolExpression whereClause, HashSet`1<FragmentQuery> outputUsedViews, Tile`1& rewriting, IEnumerable`1& notCoveredAttributes);
    private bool FindRewriting(IEnumerable`1<MemberPath> attributes, BoolExpression whereClause, Tile`1& rewriting, IEnumerable`1& notCoveredAttributes);
    private bool RewriteQuery(Tile`1<FragmentQuery> toFill, Tile`1<FragmentQuery> toAvoid, Tile`1& rewriting, IEnumerable`1& notCoveredAttributes, bool isRelaxed);
    private bool RewriteQueryCached(Tile`1<FragmentQuery> toFill, Tile`1<FragmentQuery> toAvoid, IEnumerable`1<Tile`1<FragmentQuery>> views, Tile`1& rewriting);
    private bool CoverAttributes(Tile`1& rewriting, Dictionary`2<MemberPath, FragmentQuery> attributeConditions);
    private bool CoverAttribute(MemberPath projectedAttribute, FragmentQuery view, Dictionary`2<MemberPath, FragmentQuery> attributeConditions);
    private IEnumerable`1<Tile`1<FragmentQuery>> GetRelevantViews(FragmentQuery query);
    private HashSet`1<FragmentQuery> GetUsedViewsAndRemoveTrueSurrogate(Tile`1& rewriting);
    private BoolExpression CreateMemberCondition(MemberPath path, Constant domainValue);
    private FragmentQuery CreateMemberConditionQuery(MemberPath currentPath, Constant domainValue);
    internal static FragmentQuery CreateMemberConditionQuery(MemberPath currentPath, Constant domainValue, IEnumerable`1<MemberPath> keyAttributes, MemberDomainMap domainMap);
    private static TileNamed`1<FragmentQuery> CreateTile(FragmentQuery query);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.QueryRewriter/<GetTypeConstants>d__60")]
private static IEnumerable`1<Constant> GetTypeConstants(IEnumerable`1<EdmType> types);
    private static IEnumerable`1<MemberPath> GetNonConditionalScalarMembers(EdmType edmType, MemberPath currentPath, MemberDomainMap domainMap);
    private static IEnumerable`1<MemberPath> GetConditionalComplexMembers(EdmType edmType, MemberPath currentPath, MemberDomainMap domainMap);
    private static IEnumerable`1<MemberPath> GetNonConditionalComplexMembers(EdmType edmType, MemberPath currentPath, MemberDomainMap domainMap);
    private static IEnumerable`1<MemberPath> GetConditionalScalarMembers(EdmType edmType, MemberPath currentPath, MemberDomainMap domainMap);
    private static IEnumerable`1<MemberPath> NonKeys(IEnumerable`1<MemberPath> attributes);
    internal static CellTreeNode TileToCellTree(Tile`1<FragmentQuery> tile, ViewgenContext context);
    private static BoolExpression TileToBoolExpr(Tile`1<FragmentQuery> tile);
    private static bool IsDefaultValue(Constant domainValue, MemberPath path);
    private static Set`1<MemberPath> GetVariables(FragmentQuery query);
    private bool IsTrue(FragmentQuery query);
    [ConditionalAttribute("DEBUG")]
private void PrintStatistics(RewritingProcessor`1<Tile`1<FragmentQuery>> qp);
    [ConditionalAttribute("DEBUG")]
internal void TraceVerbose(string msg, Object[] parameters);
    [CompilerGeneratedAttribute]
private bool <GenerateCaseStatements>b__41_0(LeftCellWrapper w);
    [CompilerGeneratedAttribute]
private LeafCellTreeNode <GenerateCaseStatements>b__41_1(LeftCellWrapper wrapper);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingPass`1 : object {
    private T_Tile m_toFill;
    private T_Tile m_toAvoid;
    private List`1<T_Tile> m_views;
    private RewritingProcessor`1<T_Tile> m_qp;
    private Dictionary`2<T_Tile, TileOpKind> m_usedViews;
    private IEnumerable`1<T_Tile> AvailableViews { get; }
    public RewritingPass`1(T_Tile toFill, T_Tile toAvoid, List`1<T_Tile> views, RewritingProcessor`1<T_Tile> qp);
    public static bool RewriteQuery(T_Tile toFill, T_Tile toAvoid, T_Tile& rewriting, List`1<T_Tile> views, RewritingProcessor`1<T_Tile> qp);
    private static bool RewriteQueryInternal(T_Tile toFill, T_Tile toAvoid, T_Tile& rewriting, List`1<T_Tile> views, RewritingProcessor`1<T_Tile> qp);
    private bool RewriteQuery(T_Tile& rewriting);
    private bool TryJoin(T_Tile view, T_Tile& rewriting);
    private bool TryAntiSemiJoin(T_Tile view, T_Tile& rewriting);
    private bool FindRewritingByIncludedAndDisjoint(T_Tile& rewritingSoFar);
    private bool FindContributingView(T_Tile& rewriting);
    private IEnumerable`1<T_Tile> get_AvailableViews();
    [CompilerGeneratedAttribute]
private bool <get_AvailableViews>b__14_0(T_Tile view);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1 : TileProcessor`1<T_Tile> {
    public static double PermuteFraction;
    public static int MinPermutations;
    public static int MaxPermutations;
    private int m_numSATChecks;
    private int m_numIntersection;
    private int m_numDifference;
    private int m_numUnion;
    private int m_numErrors;
    private TileProcessor`1<T_Tile> m_tileProcessor;
    private static Random rnd;
    internal TileProcessor`1<T_Tile> TileProcessor { get; }
    public RewritingProcessor`1(TileProcessor`1<T_Tile> tileProcessor);
    private static RewritingProcessor`1();
    internal TileProcessor`1<T_Tile> get_TileProcessor();
    public void GetStatistics(Int32& numSATChecks, Int32& numIntersection, Int32& numUnion, Int32& numDifference, Int32& numErrors);
    internal virtual T_Tile GetArg1(T_Tile tile);
    internal virtual T_Tile GetArg2(T_Tile tile);
    internal virtual TileOpKind GetOpKind(T_Tile tile);
    internal virtual bool IsEmpty(T_Tile a);
    public bool IsDisjointFrom(T_Tile a, T_Tile b);
    internal bool IsContainedIn(T_Tile a, T_Tile b);
    internal bool IsEquivalentTo(T_Tile a, T_Tile b);
    internal virtual T_Tile Union(T_Tile a, T_Tile b);
    internal virtual T_Tile Join(T_Tile a, T_Tile b);
    internal virtual T_Tile AntiSemiJoin(T_Tile a, T_Tile b);
    public void AddError();
    public int CountOperators(T_Tile query);
    public int CountViews(T_Tile query);
    public void GatherViews(T_Tile rewriting, HashSet`1<T_Tile> views);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1/<AllButOne>d__27`1")]
public static IEnumerable`1<T> AllButOne(IEnumerable`1<T> list, int toSkipPosition);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1/<Concat>d__28`1")]
public static IEnumerable`1<T> Concat(T value, IEnumerable`1<T> rest);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1/<Permute>d__29`1")]
public static IEnumerable`1<IEnumerable`1<T>> Permute(IEnumerable`1<T> list);
    public static List`1<T> RandomPermutation(IEnumerable`1<T> input);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1/<Reverse>d__32`1")]
public static IEnumerable`1<T> Reverse(IEnumerable`1<T> input, HashSet`1<T> filter);
    public bool RewriteQuery(T_Tile toFill, T_Tile toAvoid, IEnumerable`1<T_Tile> views, T_Tile& rewriting);
    public bool RewriteQueryOnce(T_Tile toFill, T_Tile toAvoid, IEnumerable`1<T_Tile> views, T_Tile& rewriting);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.RewritingSimplifier`1 : object {
    private T_Tile m_originalRewriting;
    private T_Tile m_toAvoid;
    private RewritingProcessor`1<T_Tile> m_qp;
    private Dictionary`2<T_Tile, TileOpKind> m_usedViews;
    private RewritingSimplifier`1(T_Tile originalRewriting, T_Tile toAvoid, Dictionary`2<T_Tile, TileOpKind> usedViews, RewritingProcessor`1<T_Tile> qp);
    private RewritingSimplifier`1(T_Tile rewriting, T_Tile toFill, T_Tile toAvoid, RewritingProcessor`1<T_Tile> qp);
    internal static bool TrySimplifyUnionRewriting(T_Tile& rewriting, T_Tile toFill, T_Tile toAvoid, RewritingProcessor`1<T_Tile> qp);
    internal static bool TrySimplifyJoinRewriting(T_Tile& rewriting, T_Tile toAvoid, Dictionary`2<T_Tile, TileOpKind> usedViews, RewritingProcessor`1<T_Tile> qp);
    private void GatherUnionedSubqueriesInUsedViews(T_Tile query);
    private bool SimplifyRewriting(T_Tile& simplifiedRewriting);
    private bool SimplifyRewritingOnce(T_Tile& simplifiedRewriting);
    private bool SimplifyRewritingOnce(T_Tile newRewriting, HashSet`1<T_Tile> remainingViews, T_Tile& simplifiedRewriting);
    private T_Tile GetRewritingHalf(T_Tile halfRewriting, T_Tile remainingView, TileOpKind viewKind);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.Tile`1 : object {
    private T_Query m_query;
    private TileOpKind m_opKind;
    public T_Query Query { get; }
    public string Description { get; }
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public TileOpKind OpKind { get; }
    protected Tile`1(TileOpKind opKind, T_Query query);
    public T_Query get_Query();
    public abstract virtual string get_Description();
    public IEnumerable`1<T_Query> GetNamedQueries();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.Tile`1/<GetNamedQueries>d__8")]
private static IEnumerable`1<T_Query> GetNamedQueries(Tile`1<T_Query> rewriting);
    public virtual string ToString();
    public abstract virtual Tile`1<T_Query> get_Arg1();
    public abstract virtual Tile`1<T_Query> get_Arg2();
    public TileOpKind get_OpKind();
    internal abstract virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.TileBinaryOperator`1 : Tile`1<T_Query> {
    private Tile`1<T_Query> m_arg1;
    private Tile`1<T_Query> m_arg2;
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public string Description { get; }
    public TileBinaryOperator`1(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2, TileOpKind opKind, T_Query query);
    public virtual Tile`1<T_Query> get_Arg1();
    public virtual Tile`1<T_Query> get_Arg2();
    public virtual string get_Description();
    internal virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.TileNamed`1 : Tile`1<T_Query> {
    public T_Query NamedQuery { get; }
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public string Description { get; }
    public TileNamed`1(T_Query namedQuery);
    public T_Query get_NamedQuery();
    public virtual Tile`1<T_Query> get_Arg1();
    public virtual Tile`1<T_Query> get_Arg2();
    public virtual string get_Description();
    public virtual string ToString();
    internal virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.TileOpKind : Enum {
    public int value__;
    public static TileOpKind Union;
    public static TileOpKind Join;
    public static TileOpKind AntiSemiJoin;
    public static TileOpKind Named;
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.TileProcessor`1 : object {
    internal abstract virtual bool IsEmpty(T_Tile tile);
    internal abstract virtual T_Tile Union(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile Join(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile AntiSemiJoin(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile GetArg1(T_Tile tile);
    internal abstract virtual T_Tile GetArg2(T_Tile tile);
    internal abstract virtual TileOpKind GetOpKind(T_Tile tile);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.QueryRewriting.TileQueryProcessor`1 : object {
    internal abstract virtual T_Query Intersect(T_Query arg1, T_Query arg2);
    internal abstract virtual T_Query Difference(T_Query arg1, T_Query arg2);
    internal abstract virtual T_Query Union(T_Query arg1, T_Query arg2);
    internal abstract virtual bool IsSatisfiable(T_Query query);
    internal abstract virtual T_Query CreateDerivedViewBySelectingConstantAttributes(T_Query query);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.BoolExpression : InternalBase {
    private BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> m_tree;
    private MemberDomainMap m_memberDomainMap;
    private Converter`1<DomainConstraint`2<BoolLiteral, Constant>> m_converter;
    internal static IEqualityComparer`1<BoolExpression> EqualityComparer;
    internal static BoolExpression True;
    internal static BoolExpression False;
    private static CopyVisitor _copyVisitorInstance;
    internal IEnumerable`1<BoolExpression> Atoms { get; }
    internal BoolLiteral AsLiteral { get; }
    internal bool IsTrue { get; }
    internal bool IsFalse { get; }
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> Tree { get; }
    internal IEnumerable`1<DomainConstraint`2<BoolLiteral, Constant>> VariableConstraints { get; }
    internal IEnumerable`1<DomainVariable`2<BoolLiteral, Constant>> Variables { get; }
    internal IEnumerable`1<MemberRestriction> MemberRestrictions { get; }
    internal bool RepresentsAllTypeConditions { get; }
    private BoolExpression(bool isTrue);
    private BoolExpression(ExprType opType, IEnumerable`1<BoolExpression> children);
    internal BoolExpression(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expr, MemberDomainMap memberDomainMap);
    private static BoolExpression();
    internal static BoolExpression CreateLiteral(BoolLiteral literal, MemberDomainMap memberDomainMap);
    internal BoolExpression Create(BoolLiteral literal);
    internal static BoolExpression CreateNot(BoolExpression expression);
    internal static BoolExpression CreateAnd(BoolExpression[] children);
    internal static BoolExpression CreateOr(BoolExpression[] children);
    internal static BoolExpression CreateAndNot(BoolExpression e1, BoolExpression e2);
    internal BoolExpression Create(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expression);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.BoolExpression/<get_Atoms>d__17")]
internal IEnumerable`1<BoolExpression> get_Atoms();
    internal BoolLiteral get_AsLiteral();
    internal static BoolLiteral GetBoolLiteral(TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> term);
    internal bool get_IsTrue();
    internal bool get_IsFalse();
    internal bool IsAlwaysTrue();
    internal bool IsSatisfiable();
    internal bool IsUnsatisfiable();
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> get_Tree();
    internal IEnumerable`1<DomainConstraint`2<BoolLiteral, Constant>> get_VariableConstraints();
    internal IEnumerable`1<DomainVariable`2<BoolLiteral, Constant>> get_Variables();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.BoolExpression/<get_MemberRestrictions>d__35")]
internal IEnumerable`1<MemberRestriction> get_MemberRestrictions();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.BoolExpression/<ToBoolExprList>d__36")]
private static IEnumerable`1<BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>>> ToBoolExprList(IEnumerable`1<BoolExpression> nodes);
    internal bool get_RepresentsAllTypeConditions();
    internal BoolExpression RemapLiterals(Dictionary`2<BoolLiteral, BoolLiteral> remap);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias);
    internal DbExpression AsCqt(DbExpression row);
    internal StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool writeRoundtrippingMessage);
    internal virtual void ToCompactString(StringBuilder builder);
    internal BoolExpression RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal static List`1<BoolExpression> AddConjunctionToBools(List`1<BoolExpression> bools, BoolExpression conjunct);
    private void InitializeConverter();
    internal BoolExpression MakeCopy();
    internal void ExpensiveSimplify();
    internal void FixDomainMap(MemberDomainMap domainMap);
    private bool IsFinal();
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.BoolLiteral : InternalBase {
    internal static IEqualityComparer`1<BoolLiteral> EqualityComparer;
    internal static IEqualityComparer`1<BoolLiteral> EqualityIdentifierComparer;
    private static BoolLiteral();
    internal static TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> MakeTermExpression(BoolLiteral literal, IEnumerable`1<Constant> domain, IEnumerable`1<Constant> range);
    internal static TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> MakeTermExpression(BoolLiteral literal, Set`1<Constant> domain, Set`1<Constant> range);
    internal abstract virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal abstract virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal abstract virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal abstract virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal abstract virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal abstract virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal abstract virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    protected virtual bool IsIdentifierEqualTo(BoolLiteral right);
    protected abstract virtual bool IsEqualTo(BoolLiteral right);
    protected virtual int GetIdentifierHash();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CaseStatement : InternalBase {
    private MemberPath m_memberPath;
    private List`1<WhenThen> m_clauses;
    private ProjectedSlot m_elseValue;
    private bool m_simplified;
    internal MemberPath MemberPath { get; }
    internal List`1<WhenThen> Clauses { get; }
    internal ProjectedSlot ElseValue { get; }
    internal bool DependsOnMemberValue { get; }
    internal IEnumerable`1<EdmType> InstantiatedTypes { get; }
    internal CaseStatement(MemberPath memberPath);
    internal MemberPath get_MemberPath();
    internal List`1<WhenThen> get_Clauses();
    internal ProjectedSlot get_ElseValue();
    internal CaseStatement DeepQualify(CqlBlock block);
    internal void AddWhenThen(BoolExpression condition, ProjectedSlot value);
    internal bool get_DependsOnMemberValue();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CaseStatement/<get_InstantiatedTypes>d__16")]
internal IEnumerable`1<EdmType> get_InstantiatedTypes();
    private static bool TryGetInstantiatedType(ProjectedSlot slot, EdmType& type);
    internal void Simplify();
    internal StringBuilder AsEsql(StringBuilder builder, IEnumerable`1<WithRelationship> withRelationships, string blockAlias, int indentLevel);
    internal DbExpression AsCqt(DbExpression row, IEnumerable`1<WithRelationship> withRelationships);
    private static StringBuilder CaseSlotValueAsEsql(StringBuilder builder, ProjectedSlot slot, MemberPath outputMember, string blockAlias, IEnumerable`1<WithRelationship> withRelationships, int indentLevel);
    private static void WithRelationshipsClauseAsEsql(StringBuilder builder, IEnumerable`1<WithRelationship> withRelationships, string blockAlias, int indentLevel, ProjectedSlot slot);
    private static DbExpression CaseSlotValueAsCqt(DbExpression row, ProjectedSlot slot, MemberPath outputMember, IEnumerable`1<WithRelationship> withRelationships);
    private static DbExpression WithRelationshipsClauseAsCqt(DbExpression row, DbExpression slotValueExpr, IEnumerable`1<WithRelationship> withRelationships, ProjectedSlot slot);
    private static void WithRelationshipsClauseAsCql(Action`1<WithRelationship> emitWithRelationship, IEnumerable`1<WithRelationship> withRelationships, ProjectedSlot slot);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CaseStatementProjectedSlot : ProjectedSlot {
    private CaseStatement m_caseStatement;
    private IEnumerable`1<WithRelationship> m_withRelationships;
    internal CaseStatementProjectedSlot(CaseStatement statement, IEnumerable`1<WithRelationship> withRelationships);
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.Cell : InternalBase {
    private CellQuery m_cQuery;
    private CellQuery m_sQuery;
    private int m_cellNumber;
    private CellLabel m_label;
    private ViewCellRelation m_viewCellRelation;
    internal CellQuery CQuery { get; }
    internal CellQuery SQuery { get; }
    internal CellLabel CellLabel { get; }
    internal int CellNumber { get; }
    internal string CellNumberAsString { get; }
    private Cell(CellQuery cQuery, CellQuery sQuery, CellLabel label, int cellNumber);
    internal Cell(Cell source);
    internal CellQuery get_CQuery();
    internal CellQuery get_SQuery();
    internal CellLabel get_CellLabel();
    internal int get_CellNumber();
    internal string get_CellNumberAsString();
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal Set`1<EdmProperty> GetCSlotsForTableColumns(IEnumerable`1<MemberPath> columns);
    internal CellQuery GetLeftQuery(ViewTarget side);
    internal CellQuery GetRightQuery(ViewTarget side);
    internal ViewCellRelation CreateViewCellRelation(int cellNumber);
    private void GenerateCellRelations(int cellNumber);
    internal virtual void ToCompactString(StringBuilder builder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
    internal static void CellsToBuilder(StringBuilder builder, IEnumerable`1<Cell> cells);
    internal static Cell CreateCS(CellQuery cQuery, CellQuery sQuery, CellLabel label, int cellNumber);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellIdBoolean : TrueFalseLiteral {
    private int m_index;
    private string m_slotName;
    internal string SlotName { get; }
    internal CellIdBoolean(CqlIdentifiers identifiers, int index);
    internal string get_SlotName();
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellLabel : object {
    private int m_startLineNumber;
    private int m_startLinePosition;
    private string m_sourceLocation;
    internal int StartLineNumber { get; }
    internal int StartLinePosition { get; }
    internal string SourceLocation { get; }
    internal CellLabel(CellLabel source);
    internal CellLabel(MappingFragment fragmentInfo);
    internal CellLabel(int startLineNumber, int startLinePosition, string sourceLocation);
    internal int get_StartLineNumber();
    internal int get_StartLinePosition();
    internal string get_SourceLocation();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellQuery : InternalBase {
    private List`1<BoolExpression> m_boolExprs;
    private ProjectedSlot[] m_projectedSlots;
    private BoolExpression m_whereClause;
    private BoolExpression m_originalWhereClause;
    private SelectDistinct m_selectDistinct;
    private MemberPath m_extentMemberPath;
    private BasicCellRelation m_basicCellRelation;
    internal SelectDistinct SelectDistinctFlag { get; }
    internal EntitySetBase Extent { get; }
    internal int NumProjectedSlots { get; }
    internal ProjectedSlot[] ProjectedSlots { get; }
    internal List`1<BoolExpression> BoolVars { get; }
    internal int NumBoolVars { get; }
    internal BoolExpression WhereClause { get; }
    internal MemberPath SourceExtentMemberPath { get; }
    internal BasicCellRelation BasicCellRelation { get; }
    internal IEnumerable`1<MemberRestriction> Conditions { get; }
    internal CellQuery(List`1<ProjectedSlot> slots, BoolExpression whereClause, MemberPath rootMember, SelectDistinct eliminateDuplicates);
    internal CellQuery(ProjectedSlot[] projectedSlots, BoolExpression whereClause, List`1<BoolExpression> boolExprs, SelectDistinct elimDupl, MemberPath rootMember);
    internal CellQuery(CellQuery source);
    private CellQuery(CellQuery existing, ProjectedSlot[] newSlots);
    internal SelectDistinct get_SelectDistinctFlag();
    internal EntitySetBase get_Extent();
    internal int get_NumProjectedSlots();
    internal ProjectedSlot[] get_ProjectedSlots();
    internal List`1<BoolExpression> get_BoolVars();
    internal int get_NumBoolVars();
    internal BoolExpression get_WhereClause();
    internal MemberPath get_SourceExtentMemberPath();
    internal BasicCellRelation get_BasicCellRelation();
    internal IEnumerable`1<MemberRestriction> get_Conditions();
    internal ProjectedSlot ProjectedSlotAt(int slotNum);
    internal Record CheckForDuplicateFields(CellQuery cQuery, Cell sourceCell);
    private bool AreSlotsEquivalentViaRefConstraints(ReadOnlyCollection`1<int> cSideSlotIndexes);
    internal Record CheckForProjectedNotNullSlots(Cell sourceCell, IEnumerable`1<Cell> associationSets);
    internal void FixMissingSlotAsDefaultConstant(int slotNumber, ConstantProjectedSlot slot);
    internal void CreateFieldAlignedCellQueries(CellQuery otherQuery, MemberProjectionIndex projectedSlotMap, CellQuery& newMainQuery, CellQuery& newOtherQuery);
    internal Set`1<MemberPath> GetNonNullSlots();
    internal Record VerifyKeysPresent(Cell ownerCell, Func`3<object, object, string> formatEntitySetMessage, Func`4<object, object, object, string> formatAssociationSetMessage, ViewGenErrorCode errorCode);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellQuery/<GetProjectedMembers>d__40")]
internal IEnumerable`1<MemberPath> GetProjectedMembers();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellQuery/<GetMemberProjectedSlots>d__41")]
private IEnumerable`1<MemberProjectedSlot> GetMemberProjectedSlots();
    internal List`1<MemberProjectedSlot> GetAllQuerySlots();
    internal int GetProjectedPosition(MemberProjectedSlot slot);
    internal List`1<int> GetProjectedPositions(MemberPath member);
    internal List`1<int> GetProjectedPositions(IEnumerable`1<MemberPath> paths);
    internal List`1<int> GetAssociationEndSlots(AssociationEndMember endMember);
    internal List`1<int> GetProjectedPositions(IEnumerable`1<MemberPath> paths, List`1<int> slotsToSearchFrom);
    internal void UpdateWhereClause(MemberDomainMap domainMap);
    internal BoolExpression GetBoolVar(int varNum);
    internal void InitializeBoolExpressions(int numBoolVars, int cellNum);
    internal IEnumerable`1<MemberRestriction> GetConjunctsFromWhereClause();
    internal IEnumerable`1<MemberRestriction> GetConjunctsFromOriginalWhereClause();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellQuery/<GetConjunctsFromWhereClause>d__53")]
private static IEnumerable`1<MemberRestriction> GetConjunctsFromWhereClause(BoolExpression whereClause);
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal void CreateBasicCellRelation(ViewCellRelation viewCellRelation);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellTreeNode : InternalBase {
    private ViewgenContext m_viewgenContext;
    internal CellTreeOpType OpType { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal bool IsEmptyRightFragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal MemberProjectionIndex ProjectedSlotMap { get; }
    internal ViewgenContext ViewgenContext { get; }
    protected IEnumerable`1<int> KeySlots { get; }
    protected CellTreeNode(ViewgenContext context);
    internal CellTreeNode MakeCopy();
    internal abstract virtual CellTreeOpType get_OpType();
    internal abstract virtual MemberDomainMap get_RightDomainMap();
    internal abstract virtual FragmentQuery get_LeftFragmentQuery();
    internal abstract virtual FragmentQuery get_RightFragmentQuery();
    internal bool get_IsEmptyRightFragmentQuery();
    internal abstract virtual Set`1<MemberPath> get_Attributes();
    internal abstract virtual List`1<CellTreeNode> get_Children();
    internal abstract virtual int get_NumProjectedSlots();
    internal abstract virtual int get_NumBoolSlots();
    internal MemberProjectionIndex get_ProjectedSlotMap();
    internal ViewgenContext get_ViewgenContext();
    internal abstract virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    internal abstract virtual bool IsProjectedSlot(int slot);
    internal abstract virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal abstract virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal CellTreeNode Flatten();
    internal List`1<LeftCellWrapper> GetLeaves();
    internal IEnumerable`1<LeafCellTreeNode> GetLeafNodes();
    internal CellTreeNode AssociativeFlatten();
    internal static bool IsAssociativeOp(CellTreeOpType opType);
    internal Boolean[] GetProjectedSlots();
    protected MemberPath GetMemberPath(int slotNum);
    protected int BoolIndexToSlot(int boolIndex);
    protected int SlotToBoolIndex(int slotNum);
    protected bool IsKeySlot(int slotNum);
    protected bool IsBoolSlot(int slotNum);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellTreeNode/<get_KeySlots>d__41")]
protected IEnumerable`1<int> get_KeySlots();
    internal virtual void ToFullString(StringBuilder builder);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CellTreeOpType : Enum {
    public int value__;
    public static CellTreeOpType Leaf;
    public static CellTreeOpType Union;
    public static CellTreeOpType FOJ;
    public static CellTreeOpType LOJ;
    public static CellTreeOpType IJ;
    public static CellTreeOpType LASJ;
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.Constant : InternalBase {
    internal static IEqualityComparer`1<Constant> EqualityComparer;
    internal static Constant Null;
    internal static Constant NotNull;
    internal static Constant Undefined;
    internal static Constant AllOtherConstants;
    private static Constant();
    internal abstract virtual bool IsNull();
    internal abstract virtual bool IsNotNull();
    internal abstract virtual bool IsUndefined();
    internal abstract virtual bool HasNotNull();
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal abstract virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected abstract virtual bool IsEqualTo(Constant right);
    internal abstract virtual string ToUserString();
    internal static void ConstantsToUserString(StringBuilder builder, Set`1<Constant> constants);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ConstantProjectedSlot : ProjectedSlot {
    private Constant m_constant;
    internal Constant CellConstant { get; }
    internal ConstantProjectedSlot(Constant value);
    internal Constant get_CellConstant();
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.CqlIdentifiers : InternalBase {
    private Set`1<string> m_identifiers;
    internal string GetFromVariable(int num);
    internal string GetBlockAlias(int num);
    internal string GetBlockAlias();
    internal void AddIdentifier(string identifier);
    private string GetNonConflictingName(string prefix, int number);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.Domain : InternalBase {
    private Set`1<Constant> m_domain;
    private Set`1<Constant> m_possibleValues;
    internal IEnumerable`1<Constant> AllPossibleValues { get; }
    private Set`1<Constant> AllPossibleValuesInternal { get; }
    internal int Count { get; }
    internal IEnumerable`1<Constant> Values { get; }
    internal Domain(Constant value, IEnumerable`1<Constant> possibleDiscreteValues);
    internal Domain(IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleDiscreteValues);
    internal Domain(Domain domain);
    internal IEnumerable`1<Constant> get_AllPossibleValues();
    private Set`1<Constant> get_AllPossibleValuesInternal();
    internal int get_Count();
    internal IEnumerable`1<Constant> get_Values();
    internal static Set`1<Constant> DeriveDomainFromMemberPath(MemberPath memberPath, EdmItemCollection edmItemCollection, bool leaveDomainUnbounded);
    private static Set`1<Constant> DeriveDomainFromType(EdmType type, EdmItemCollection edmItemCollection, bool leaveDomainUnbounded);
    internal static bool TryGetDefaultValueForMemberPath(MemberPath memberPath, Constant& defaultConstant);
    internal static Constant GetDefaultValueForMemberPath(MemberPath memberPath, IEnumerable`1<LeftCellWrapper> wrappersForErrorReporting, ConfigViewGenerator config);
    internal int GetHash();
    internal bool IsEqualTo(Domain second);
    internal bool ContainsNotNull();
    internal bool Contains(Constant constant);
    internal static Set`1<Constant> ExpandNegationsInDomain(IEnumerable`1<Constant> domain, IEnumerable`1<Constant> otherPossibleValues);
    internal static Set`1<Constant> ExpandNegationsInDomain(IEnumerable`1<Constant> domain);
    private static Set`1<Constant> DeterminePossibleValues(IEnumerable`1<Constant> domain);
    internal static Dictionary`2<MemberPath, Set`1<Constant>> ComputeConstantDomainSetsForSlotsInQueryViews(IEnumerable`1<Cell> cells, EdmItemCollection edmItemCollection, bool isValidationEnabled);
    private static bool GetRestrictedOrUnrestrictedDomain(MemberProjectedSlot slot, CellQuery cellQuery, EdmItemCollection edmItemCollection, Set`1& domain);
    internal static Dictionary`2<MemberPath, Set`1<Constant>> ComputeConstantDomainSetsForSlotsInUpdateViews(IEnumerable`1<Cell> cells, EdmItemCollection edmItemCollection);
    private static bool TryGetDomainRestrictedByWhereClause(IEnumerable`1<Constant> domain, MemberProjectedSlot slot, CellQuery cellQuery, Set`1& result);
    private Domain Intersect(Domain second);
    private static NegatedConstant GetNegatedConstant(IEnumerable`1<Constant> constants);
    private static Set`1<Constant> DeterminePossibleValues(IEnumerable`1<Constant> domain1, IEnumerable`1<Constant> domain2);
    [ConditionalAttribute("DEBUG")]
private static void CheckTwoDomainInvariants(Domain domain1, Domain domain2);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.Domain/<CreateList>d__32")]
private static IEnumerable`1<Constant> CreateList(object value1, object value2);
    internal void AssertInvariant();
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ErrorLog : InternalBase {
    private List`1<Record> m_log;
    internal int Count { get; }
    internal IEnumerable`1<EdmSchemaError> Errors { get; }
    internal int get_Count();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ErrorLog/<get_Errors>d__5")]
internal IEnumerable`1<EdmSchemaError> get_Errors();
    internal void AddEntry(Record record);
    internal void Merge(ErrorLog log);
    internal void PrintTrace();
    internal virtual void ToCompactString(StringBuilder builder);
    internal string ToUserString();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ExtentKey : InternalBase {
    private List`1<MemberPath> m_keyFields;
    internal IEnumerable`1<MemberPath> KeyFields { get; }
    internal ExtentKey(IEnumerable`1<MemberPath> keyFields);
    internal IEnumerable`1<MemberPath> get_KeyFields();
    internal static List`1<ExtentKey> GetKeysForEntityType(MemberPath prefix, EntityType entityType);
    internal static ExtentKey GetPrimaryKeyForEntityType(MemberPath prefix, EntityType entityType);
    internal static ExtentKey GetKeyForRelationType(MemberPath prefix, AssociationType relationType);
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.LeafCellTreeNode : CellTreeNode {
    internal static IEqualityComparer`1<LeafCellTreeNode> EqualityComparer;
    private LeftCellWrapper m_cellWrapper;
    private FragmentQuery m_rightFragmentQuery;
    internal LeftCellWrapper LeftCellWrapper { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal CellTreeOpType OpType { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal LeafCellTreeNode(ViewgenContext context, LeftCellWrapper cellWrapper);
    internal LeafCellTreeNode(ViewgenContext context, LeftCellWrapper cellWrapper, FragmentQuery rightFragmentQuery);
    private static LeafCellTreeNode();
    internal LeftCellWrapper get_LeftCellWrapper();
    internal virtual MemberDomainMap get_RightDomainMap();
    internal virtual FragmentQuery get_LeftFragmentQuery();
    internal virtual FragmentQuery get_RightFragmentQuery();
    internal virtual Set`1<MemberPath> get_Attributes();
    internal virtual List`1<CellTreeNode> get_Children();
    internal virtual CellTreeOpType get_OpType();
    internal virtual int get_NumProjectedSlots();
    internal virtual int get_NumBoolSlots();
    internal virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual bool IsProjectedSlot(int slot);
    internal virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    private static bool TryGetWithRelationship(AssociationSetMapping collocatedAssociationSetMap, EntitySetBase thisExtent, MemberPath sRootNode, List`1& foreignKeySlots, WithRelationship& withRelationship);
    private static EndPropertyMapping GetForeignKeyEndMapFromAssociationMap(AssociationSetMapping collocatedAssociationSetMap);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.LeftCellWrapper : InternalBase {
    internal static IEqualityComparer`1<LeftCellWrapper> BoolEqualityComparer;
    private Set`1<MemberPath> m_attributes;
    private MemberMaps m_memberMaps;
    private CellQuery m_leftCellQuery;
    private CellQuery m_rightCellQuery;
    private HashSet`1<Cell> m_mergedCells;
    private ViewTarget m_viewTarget;
    private FragmentQuery m_leftFragmentQuery;
    internal static IComparer`1<LeftCellWrapper> Comparer;
    internal static IComparer`1<LeftCellWrapper> OriginalCellIdComparer;
    internal FragmentQuery FragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal string OriginalCellNumberString { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal IEnumerable`1<Cell> Cells { get; }
    internal Cell OnlyInputCell { get; }
    internal CellQuery RightCellQuery { get; }
    internal CellQuery LeftCellQuery { get; }
    internal EntitySetBase LeftExtent { get; }
    internal EntitySetBase RightExtent { get; }
    internal LeftCellWrapper(ViewTarget viewTarget, Set`1<MemberPath> attrs, FragmentQuery fragmentQuery, CellQuery leftCellQuery, CellQuery rightCellQuery, MemberMaps memberMaps, IEnumerable`1<Cell> inputCells);
    internal LeftCellWrapper(ViewTarget viewTarget, Set`1<MemberPath> attrs, FragmentQuery fragmentQuery, CellQuery leftCellQuery, CellQuery rightCellQuery, MemberMaps memberMaps, Cell inputCell);
    private static LeftCellWrapper();
    internal FragmentQuery get_FragmentQuery();
    internal Set`1<MemberPath> get_Attributes();
    internal string get_OriginalCellNumberString();
    internal MemberDomainMap get_RightDomainMap();
    [ConditionalAttribute("DEBUG")]
internal void AssertHasUniqueCell();
    internal IEnumerable`1<Cell> get_Cells();
    internal Cell get_OnlyInputCell();
    internal CellQuery get_RightCellQuery();
    internal CellQuery get_LeftCellQuery();
    internal EntitySetBase get_LeftExtent();
    internal EntitySetBase get_RightExtent();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.LeftCellWrapper/<GetInputCellsForWrappers>d__33")]
internal static IEnumerable`1<Cell> GetInputCellsForWrappers(IEnumerable`1<LeftCellWrapper> wrappers);
    internal RoleBoolean CreateRoleBoolean();
    internal static string GetExtentListAsUserString(IEnumerable`1<LeftCellWrapper> wrappers);
    internal virtual void ToFullString(StringBuilder builder);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
    internal static void WrappersToStringBuilder(StringBuilder builder, List`1<LeftCellWrapper> wrappers, string header);
    private Set`1<AssociationEndMember> GetEndsForTablePrimaryKey();
    internal MemberProjectedSlot GetLeftSideMappedSlotForRightSideMember(MemberPath member);
    internal MemberProjectedSlot GetRightSideMappedSlotForLeftSideMember(MemberPath member);
    internal MemberProjectedSlot GetCSideMappedSlotForSMember(MemberPath member);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberDomainMap : InternalBase {
    private Dictionary`2<MemberPath, Set`1<Constant>> m_conditionDomainMap;
    private Dictionary`2<MemberPath, Set`1<Constant>> m_nonConditionDomainMap;
    private Set`1<MemberPath> m_projectedConditionMembers;
    private EdmItemCollection m_edmItemCollection;
    private MemberDomainMap(Dictionary`2<MemberPath, Set`1<Constant>> domainMap, Dictionary`2<MemberPath, Set`1<Constant>> nonConditionDomainMap, EdmItemCollection edmItemCollection);
    internal MemberDomainMap(ViewTarget viewTarget, bool isValidationEnabled, IEnumerable`1<Cell> extentCells, EdmItemCollection edmItemCollection, ConfigViewGenerator config, Dictionary`2<EntityType, Set`1<EntityType>> inheritanceGraph);
    internal bool IsProjectedConditionMember(MemberPath memberPath);
    internal MemberDomainMap GetOpenDomain();
    internal MemberDomainMap MakeCopy();
    internal void ExpandDomainsToIncludeAllPossibleValues();
    private void ExpandDomainsIfNeeded(Dictionary`2<MemberPath, Set`1<Constant>> domainMapForMembers);
    internal void ReduceEnumerableDomainToEnumeratedValues(ConfigViewGenerator config);
    private static void ReduceEnumerableDomainToEnumeratedValues(Dictionary`2<MemberPath, Set`1<Constant>> domainMap, ConfigViewGenerator config, EdmItemCollection edmItemCollection);
    internal static void PropagateUpdateDomainToQueryDomain(IEnumerable`1<Cell> cells, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap);
    private static void ExpandNegationsInDomainMap(Dictionary`2<MemberPath, Set`1<Constant>> domainMap);
    internal bool IsConditionMember(MemberPath path);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberDomainMap/<ConditionMembers>d__16")]
internal IEnumerable`1<MemberPath> ConditionMembers(EntitySetBase extent);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberDomainMap/<NonConditionMembers>d__17")]
internal IEnumerable`1<MemberPath> NonConditionMembers(EntitySetBase extent);
    internal void AddSentinel(MemberPath path);
    internal void RemoveSentinel(MemberPath path);
    internal IEnumerable`1<Constant> GetDomain(MemberPath path);
    private Set`1<Constant> GetDomainInternal(MemberPath path);
    internal void UpdateConditionMemberDomain(MemberPath path, IEnumerable`1<Constant> domainValues);
    private void AddToDomainMap(MemberPath member, IEnumerable`1<Constant> domainValues);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberMaps : object {
    private MemberProjectionIndex m_projectedSlotMap;
    private MemberDomainMap m_queryDomainMap;
    private MemberDomainMap m_updateDomainMap;
    private ViewTarget m_viewTarget;
    internal MemberProjectionIndex ProjectedSlotMap { get; }
    internal MemberDomainMap QueryDomainMap { get; }
    internal MemberDomainMap UpdateDomainMap { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal MemberDomainMap LeftDomainMap { get; }
    internal MemberMaps(ViewTarget viewTarget, MemberProjectionIndex projectedSlotMap, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap);
    internal MemberProjectionIndex get_ProjectedSlotMap();
    internal MemberDomainMap get_QueryDomainMap();
    internal MemberDomainMap get_UpdateDomainMap();
    internal MemberDomainMap get_RightDomainMap();
    internal MemberDomainMap get_LeftDomainMap();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberPath : InternalBase {
    private EntitySetBase m_extent;
    private List`1<EdmMember> m_path;
    internal static IEqualityComparer`1<MemberPath> EqualityComparer;
    internal EdmMember RootEdmMember { get; }
    internal EdmMember LeafEdmMember { get; }
    internal string LeafName { get; }
    internal bool IsComputed { get; }
    internal object DefaultValue { get; }
    internal bool IsPartOfKey { get; }
    internal bool IsNullable { get; }
    internal EntitySet EntitySet { get; }
    internal EntitySetBase Extent { get; }
    internal EdmType EdmType { get; }
    internal string CqlFieldAlias { get; }
    internal MemberPath(EntitySetBase extent, IEnumerable`1<EdmMember> path);
    internal MemberPath(EntitySetBase extent);
    internal MemberPath(EntitySetBase extent, EdmMember member);
    internal MemberPath(MemberPath prefix, EdmMember last);
    private static MemberPath();
    internal EdmMember get_RootEdmMember();
    internal EdmMember get_LeafEdmMember();
    internal string get_LeafName();
    internal bool get_IsComputed();
    internal object get_DefaultValue();
    internal bool get_IsPartOfKey();
    internal bool get_IsNullable();
    internal EntitySet get_EntitySet();
    internal EntitySetBase get_Extent();
    internal EdmType get_EdmType();
    internal string get_CqlFieldAlias();
    internal bool IsAlwaysDefined(Dictionary`2<EntityType, Set`1<EntityType>> inheritanceGraph);
    private static bool RecurseToFindMemberAbsentInConcreteType(EntityType current, EntityType avoidEdge, EdmMember member, EntityType entitySetType, Dictionary`2<EntityType, Set`1<EntityType>> inheritanceGraph);
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal static bool AreAllMembersNullable(IEnumerable`1<MemberPath> members);
    internal static string PropertiesToUserString(IEnumerable`1<MemberPath> members, bool fullPath);
    internal StringBuilder AsEsql(StringBuilder inputBuilder, string blockAlias);
    internal DbExpression AsCqt(DbExpression row);
    internal void AsCql(Action`1<string> accessMember, Action getKey, Action`1<StructuralType> treatAs);
    public sealed virtual bool Equals(MemberPath right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool IsScalarType();
    internal static IEnumerable`1<MemberPath> GetKeyMembers(EntitySetBase extent, MemberDomainMap domainMap);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberPath/<GetMembers>d__42")]
internal IEnumerable`1<MemberPath> GetMembers(EdmType edmType, Nullable`1<bool> isScalar, Nullable`1<bool> isConditional, Nullable`1<bool> isPartOfKey, MemberDomainMap domainMap);
    internal bool IsEquivalentViaRefConstraint(MemberPath path1);
    private static bool AreAssociationEndPathsEquivalentViaRefConstraint(MemberPath assocPath0, MemberPath assocPath1, AssociationSet assocSet);
    private MemberPath GetCorrespondingAssociationPath(AssociationSet assocSet);
    internal EntitySet GetScopeOfRelationEnd();
    internal string PathToString(Nullable`1<bool> forAlias);
    internal virtual void ToCompactString(StringBuilder builder);
    internal void ToCompactString(StringBuilder builder, string instanceToken);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberProjectedSlot : ProjectedSlot {
    private MemberPath m_memberPath;
    internal MemberPath MemberPath { get; }
    internal MemberProjectedSlot(MemberPath node);
    internal MemberPath get_MemberPath();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    private bool NeedToCastCqlValue(MemberPath outputMember, TypeUsage& outputMemberTypeUsage);
    internal virtual void ToCompactString(StringBuilder builder);
    internal string ToUserString();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal MemberProjectedSlot RemapSlot(Dictionary`2<MemberPath, MemberPath> remap);
    internal static List`1<MemberProjectedSlot> GetKeySlots(IEnumerable`1<MemberProjectedSlot> slots, MemberPath prefix);
    internal static List`1<MemberProjectedSlot> GetSlots(IEnumerable`1<MemberProjectedSlot> slots, IEnumerable`1<MemberPath> members);
    internal static MemberProjectedSlot GetSlotForMember(IEnumerable`1<ProjectedSlot> slots, MemberPath member);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberProjectionIndex : InternalBase {
    private Dictionary`2<MemberPath, int> m_indexMap;
    private List`1<MemberPath> m_members;
    internal int Count { get; }
    internal MemberPath Item { get; }
    internal IEnumerable`1<int> KeySlots { get; }
    internal IEnumerable`1<MemberPath> Members { get; }
    internal static MemberProjectionIndex Create(EntitySetBase extent, EdmItemCollection edmItemCollection);
    internal int get_Count();
    internal MemberPath get_Item(int index);
    internal IEnumerable`1<int> get_KeySlots();
    internal IEnumerable`1<MemberPath> get_Members();
    internal int IndexOf(MemberPath member);
    internal int CreateIndex(MemberPath member);
    internal MemberPath GetMemberPath(int slotNum, int numBoolSlots);
    internal int BoolIndexToSlot(int boolIndex, int numBoolSlots);
    internal int SlotToBoolIndex(int slotNum, int numBoolSlots);
    internal bool IsKeySlot(int slotNum, int numBoolSlots);
    internal bool IsBoolSlot(int slotNum, int numBoolSlots);
    internal virtual void ToCompactString(StringBuilder builder);
    private static void GatherPartialSignature(MemberProjectionIndex index, EdmItemCollection edmItemCollection, MemberPath member, bool needKeysOnly);
    private static void GatherSignatureFromTypeStructuralMembers(MemberProjectionIndex index, EdmItemCollection edmItemCollection, MemberPath member, StructuralType possibleType, bool needKeysOnly);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.MemberRestriction : BoolLiteral {
    private MemberProjectedSlot m_restrictedMemberSlot;
    private Domain m_domain;
    private bool m_isComplete;
    internal bool IsComplete { get; }
    internal MemberProjectedSlot RestrictedMemberSlot { get; }
    internal Domain Domain { get; }
    protected MemberRestriction(MemberProjectedSlot slot, Constant value);
    protected MemberRestriction(MemberProjectedSlot slot, IEnumerable`1<Constant> values);
    protected MemberRestriction(MemberProjectedSlot slot, Domain domain);
    protected MemberRestriction(MemberProjectedSlot slot, IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleValues);
    internal bool get_IsComplete();
    internal MemberProjectedSlot get_RestrictedMemberSlot();
    internal Domain get_Domain();
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal abstract virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    protected virtual bool IsIdentifierEqualTo(BoolLiteral right);
    protected virtual int GetIdentifierHash();
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.NegatedConstant : Constant {
    private Set`1<Constant> m_negatedDomain;
    internal IEnumerable`1<Constant> Elements { get; }
    internal NegatedConstant(IEnumerable`1<Constant> values);
    internal IEnumerable`1<Constant> get_Elements();
    internal bool Contains(Constant constant);
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    public virtual int GetHashCode();
    protected virtual bool IsEqualTo(Constant right);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    internal DbExpression AsCqt(DbExpression row, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    internal StringBuilder AsUserString(StringBuilder builder, string blockAlias, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    private void AsCql(Action trueLiteral, Action varIsNotNull, Action`1<Constant> varNotEqualsTo, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    private StringBuilder ToStringHelper(StringBuilder builder, string blockAlias, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull, bool userString);
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.OpCellTreeNode : CellTreeNode {
    private Set`1<MemberPath> m_attrs;
    private List`1<CellTreeNode> m_children;
    private CellTreeOpType m_opType;
    private FragmentQuery m_leftFragmentQuery;
    private FragmentQuery m_rightFragmentQuery;
    internal CellTreeOpType OpType { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType);
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType, CellTreeNode[] children);
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType, IEnumerable`1<CellTreeNode> children);
    internal virtual CellTreeOpType get_OpType();
    internal virtual FragmentQuery get_LeftFragmentQuery();
    internal virtual FragmentQuery get_RightFragmentQuery();
    internal virtual MemberDomainMap get_RightDomainMap();
    internal virtual Set`1<MemberPath> get_Attributes();
    internal virtual List`1<CellTreeNode> get_Children();
    internal virtual int get_NumProjectedSlots();
    internal virtual int get_NumBoolSlots();
    internal virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal void Add(CellTreeNode child);
    internal void AddFirst(CellTreeNode child);
    private void Insert(int index, CellTreeNode child);
    internal virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    internal virtual bool IsProjectedSlot(int slot);
    private CqlBlock UnionToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    private static void AndWith(Boolean[] boolArray, Boolean[] another);
    private CqlBlock JoinToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    private SlotInfo GetJoinSlotInfo(CellTreeOpType opType, bool isRequiredSlot, List`1<CqlBlock> children, int slotNum, CqlIdentifiers identifiers);
    private static int GetInnerJoinChildForSlot(List`1<CqlBlock> children, int slotNum);
    private void AddCaseForOuterJoins(CaseStatement caseForOuterJoins, CqlBlock child, int slotNum, CqlIdentifiers identifiers);
    private static FragmentQuery GenerateFragmentQuery(IEnumerable`1<CellTreeNode> children, bool isLeft, ViewgenContext context, CellTreeOpType OpType);
    internal static string OpToEsql(CellTreeOpType opType);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ProjectedSlot : InternalBase {
    internal static IEqualityComparer`1<ProjectedSlot> EqualityComparer;
    private static ProjectedSlot();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    public sealed virtual bool Equals(ProjectedSlot right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal abstract virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal static bool TryMergeRemapSlots(ProjectedSlot[] slots1, ProjectedSlot[] slots2, ProjectedSlot[]& result);
    private static bool TryMergeSlots(ProjectedSlot[] slots1, ProjectedSlot[] slots2, ProjectedSlot[]& slots);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.QualifiedCellIdBoolean : CellIdBoolean {
    private CqlBlock m_block;
    internal QualifiedCellIdBoolean(CqlBlock block, CqlIdentifiers identifiers, int originalCellNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.RoleBoolean : TrueFalseLiteral {
    private MetadataItem m_metadataItem;
    internal RoleBoolean(EntitySetBase extent);
    internal RoleBoolean(AssociationSetEnd end);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ScalarConstant : Constant {
    private object m_scalar;
    internal object Value { get; }
    internal ScalarConstant(object value);
    internal object get_Value();
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    private StringBuilder AppendEscapedScalar(StringBuilder builder);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    protected virtual bool IsEqualTo(Constant right);
    public virtual int GetHashCode();
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ScalarRestriction : MemberRestriction {
    internal ScalarRestriction(MemberPath member, Constant value);
    internal ScalarRestriction(MemberPath member, IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleValues);
    internal ScalarRestriction(MemberProjectedSlot slot, Domain domain);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    private StringBuilder ToStringHelper(StringBuilder inputBuilder, string blockAlias, bool skipIsNotNull, bool userString);
    private void AsCql(Action`2<NegatedConstant, IEnumerable`1<Constant>> negatedConstantAsCql, Action`1<Set`1<Constant>> varInDomain, Action varIsNotNull, Action varIsNull, bool skipIsNotNull);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.TrueFalseLiteral : BoolLiteral {
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.TypeConstant : Constant {
    private EdmType m_edmType;
    internal EdmType EdmType { get; }
    internal TypeConstant(EdmType type);
    internal EdmType get_EdmType();
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    protected virtual bool IsEqualTo(Constant right);
    public virtual int GetHashCode();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    private void AsCql(Action`2<EntitySet, IList`1<MemberPath>> createRef, Action`1<IList`1<MemberPath>> createType, MemberPath outputMember);
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.TypeRestriction : MemberRestriction {
    internal TypeRestriction(MemberPath member, IEnumerable`1<EdmType> values);
    internal TypeRestriction(MemberPath member, Constant value);
    internal TypeRestriction(MemberProjectedSlot slot, Domain domain);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Mapping.ViewGeneration.Structures.TypeRestriction/<CreateTypeConstants>d__9")]
private static IEnumerable`1<Constant> CreateTypeConstants(IEnumerable`1<EdmType> types);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.Structures.ViewTarget : Enum {
    public int value__;
    public static ViewTarget QueryView;
    public static ViewTarget UpdateView;
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Structures.WithRelationship : InternalBase {
    private AssociationSet m_associationSet;
    private RelationshipEndMember m_fromEnd;
    private EntityType m_fromEndEntityType;
    private RelationshipEndMember m_toEnd;
    private EntityType m_toEndEntityType;
    private EntitySet m_toEndEntitySet;
    private IEnumerable`1<MemberPath> m_toEndEntityKeyMemberPaths;
    internal EntityType FromEndEntityType { get; }
    internal WithRelationship(AssociationSet associationSet, AssociationEndMember fromEnd, EntityType fromEndEntityType, AssociationEndMember toEnd, EntityType toEndEntityType, IEnumerable`1<MemberPath> toEndEntityKeyMemberPaths);
    internal EntityType get_FromEndEntityType();
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, int indentLevel);
    internal DbRelatedEntityRef AsCqt(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal static class System.Data.Entity.Core.Mapping.ViewGeneration.Utils.ExceptionHelpers : object {
    internal static void ThrowMappingException(Record errorRecord, ConfigViewGenerator config);
    internal static void ThrowMappingException(ErrorLog errorLog, ConfigViewGenerator config);
}
internal static class System.Data.Entity.Core.Mapping.ViewGeneration.Utils.ExternalCalls : object {
    internal static bool IsReservedKeyword(string name);
    internal static DbCommandTree CompileView(string viewDef, StorageMappingItemCollection mappingItemCollection, CompilationMode compilationMode);
    internal static DbExpression CompileFunctionView(string viewDef, StorageMappingItemCollection mappingItemCollection, CompilationMode compilationMode, IEnumerable`1<DbParameterReferenceExpression> parameters);
    internal static DbLambda CompileFunctionDefinition(string functionDefinition, IList`1<FunctionParameter> functionParameters, EdmItemCollection edmItemCollection);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.Utils.ViewGenErrorCode : Enum {
    public int value__;
    public static ViewGenErrorCode Value;
    public static ViewGenErrorCode InvalidCondition;
    public static ViewGenErrorCode KeyConstraintViolation;
    public static ViewGenErrorCode KeyConstraintUpdateViolation;
    public static ViewGenErrorCode AttributesUnrecoverable;
    public static ViewGenErrorCode AmbiguousMultiConstants;
    public static ViewGenErrorCode NonKeyProjectedWithOverlappingPartitions;
    public static ViewGenErrorCode ConcurrencyDerivedClass;
    public static ViewGenErrorCode ConcurrencyTokenHasCondition;
    public static ViewGenErrorCode DomainConstraintViolation;
    public static ViewGenErrorCode ForeignKeyMissingTableMapping;
    public static ViewGenErrorCode ForeignKeyNotGuaranteedInCSpace;
    public static ViewGenErrorCode ForeignKeyMissingRelationshipMapping;
    public static ViewGenErrorCode ForeignKeyUpperBoundMustBeOne;
    public static ViewGenErrorCode ForeignKeyLowerBoundMustBeOne;
    public static ViewGenErrorCode ForeignKeyParentTableNotMappedToEnd;
    public static ViewGenErrorCode ForeignKeyColumnOrderIncorrect;
    public static ViewGenErrorCode DisjointConstraintViolation;
    public static ViewGenErrorCode DuplicateCPropertiesMapped;
    public static ViewGenErrorCode NotNullNoProjectedSlot;
    public static ViewGenErrorCode NoDefaultValue;
    public static ViewGenErrorCode KeyNotMappedForCSideExtent;
    public static ViewGenErrorCode KeyNotMappedForTable;
    public static ViewGenErrorCode PartitionConstraintViolation;
    public static ViewGenErrorCode MissingExtentMapping;
    public static ViewGenErrorCode ImpossibleCondition;
    public static ViewGenErrorCode NullableMappingForNonNullableColumn;
    public static ViewGenErrorCode ErrorPatternConditionError;
    public static ViewGenErrorCode ErrorPatternSplittingError;
    public static ViewGenErrorCode ErrorPatternInvalidPartitionError;
    public static ViewGenErrorCode ErrorPatternMissingMappingError;
    public static ViewGenErrorCode NoJoinKeyOrFKProvidedInMapping;
    public static ViewGenErrorCode MultipleFragmentsBetweenCandSExtentWithDistinct;
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.BasicCellRelation : CellRelation {
    private CellQuery m_cellQuery;
    private List`1<MemberProjectedSlot> m_slots;
    private ViewCellRelation m_viewCellRelation;
    internal ViewCellRelation ViewCellRelation { get; }
    internal BasicCellRelation(CellQuery cellQuery, ViewCellRelation viewCellRelation, IEnumerable`1<MemberProjectedSlot> slots);
    internal ViewCellRelation get_ViewCellRelation();
    internal void PopulateKeyConstraints(SchemaConstraints`1<BasicKeyConstraint> constraints);
    private void PopulateKeyConstraintsForEntitySet(SchemaConstraints`1<BasicKeyConstraint> constraints);
    private void PopulateKeyConstraintsForRelationshipSet(SchemaConstraints`1<BasicKeyConstraint> constraints);
    private void AddKeyConstraints(IEnumerable`1<ExtentKey> keys, SchemaConstraints`1<BasicKeyConstraint> constraints);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.BasicKeyConstraint : KeyConstraint`2<BasicCellRelation, MemberProjectedSlot> {
    internal BasicKeyConstraint(BasicCellRelation relation, IEnumerable`1<MemberProjectedSlot> keySlots);
    internal ViewKeyConstraint Propagate();
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.CellRelation : InternalBase {
    internal int m_cellNumber;
    internal int CellNumber { get; }
    protected CellRelation(int cellNumber);
    internal int get_CellNumber();
    protected abstract virtual int GetHash();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ConditionComparer : object {
    public sealed virtual bool Equals(Dictionary`2<MemberPath, Set`1<Constant>> one, Dictionary`2<MemberPath, Set`1<Constant>> two);
    public sealed virtual int GetHashCode(Dictionary`2<MemberPath, Set`1<Constant>> obj);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ConstraintBase : InternalBase {
    internal abstract virtual Record GetErrorRecord();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ErrorPatternMatcher : object {
    private ViewgenContext m_viewgenContext;
    private MemberDomainMap m_domainMap;
    private ErrorLog m_errorLog;
    private int m_originalErrorCount;
    private static int NUM_PARTITION_ERR_TO_FIND;
    private ErrorPatternMatcher(ViewgenContext context, MemberDomainMap domainMap, ErrorLog errorLog);
    public static bool FindMappingErrors(ViewgenContext context, MemberDomainMap domainMap, ErrorLog errorLog);
    private void MatchMissingMappingErrors();
    private static bool HasNotNullCondition(CellQuery cellQuery, MemberPath member);
    private static bool IsMemberPartOfNotNullCondition(IEnumerable`1<LeftCellWrapper> wrappers, MemberPath leftMember, ViewTarget viewTarget);
    private void MatchConditionErrors();
    private static MemberPath GetRightMemberPath(MemberPath conditionMember, LeftCellWrapper leftCellWrapper);
    private void MatchSplitErrors();
    private void MatchPartitionErrors();
    private static void GetTypesAndConditionForWrapper(LeftCellWrapper wrapper, Boolean& hasCondition, List`1& edmTypes);
    private static bool CheckForStoreConditions(LeftCellWrapper wrapper);
    private void CheckThatConditionMemberIsNotMapped(MemberPath conditionMember, List`1<LeftCellWrapper> mappingFragments, Set`1<MemberPath> mappedConditionMembers);
    private bool FoundTooManyErrors();
    private static string BuildCommaSeparatedErrorString(IEnumerable`1<T> members);
    private bool CSideHasDifferentEntitySets(LeftCellWrapper a, LeftCellWrapper b);
    private bool CompareC(ComparisonOP op, ViewgenContext context, LeftCellWrapper leftWrapper1, LeftCellWrapper leftWrapper2, FragmentQuery rightQuery1, FragmentQuery rightQuery2);
    private bool CompareS(ComparisonOP op, ViewgenContext context, LeftCellWrapper leftWrapper1, LeftCellWrapper leftWrapper2, FragmentQuery rightQuery1, FragmentQuery rightQuery2);
    private bool Compare(bool lookingForC, ComparisonOP op, ViewgenContext context, LeftCellWrapper leftWrapper1, LeftCellWrapper leftWrapper2, FragmentQuery rightQuery1, FragmentQuery rightQuery2);
    private bool RightSideEqual(LeftCellWrapper wrapper1, LeftCellWrapper wrapper2);
    private FragmentQuery CreateRightFragmentQuery(LeftCellWrapper wrapper);
    private static IEnumerable`1<Cell> ToIEnum(Cell one, Cell two);
    private bool IsQueryView();
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ForeignConstraint : InternalBase {
    private AssociationSet m_fKeySet;
    private EntitySet m_parentTable;
    private EntitySet m_childTable;
    private List`1<MemberPath> m_parentColumns;
    private List`1<MemberPath> m_childColumns;
    internal EntitySet ParentTable { get; }
    internal EntitySet ChildTable { get; }
    internal IEnumerable`1<MemberPath> ChildColumns { get; }
    internal IEnumerable`1<MemberPath> ParentColumns { get; }
    internal ForeignConstraint(AssociationSet i_fkeySet, EntitySet i_parentTable, EntitySet i_childTable, ReadOnlyMetadataCollection`1<EdmProperty> i_parentColumns, ReadOnlyMetadataCollection`1<EdmProperty> i_childColumns);
    internal EntitySet get_ParentTable();
    internal EntitySet get_ChildTable();
    internal IEnumerable`1<MemberPath> get_ChildColumns();
    internal IEnumerable`1<MemberPath> get_ParentColumns();
    internal static List`1<ForeignConstraint> GetForeignConstraints(EntityContainer container);
    internal void CheckConstraint(Set`1<Cell> cells, QueryRewriter childRewriter, QueryRewriter parentRewriter, ErrorLog errorLog, ConfigViewGenerator config);
    private void GuaranteeForeignKeyConstraintInCSpace(QueryRewriter childRewriter, QueryRewriter parentRewriter, ErrorLog errorLog);
    private void GuaranteeMappedRelationshipForForeignKey(QueryRewriter childRewriter, QueryRewriter parentRewriter, IEnumerable`1<Cell> cells, ErrorLog errorLog, ConfigViewGenerator config);
    private bool CheckIfConstraintMappedToForeignKeyAssociation(QueryRewriter childRewriter, Set`1<Cell> cells);
    private static Set`1<int> GetPropertyIndexes(IEnumerable`1<EdmProperty> properties1, ReadOnlyMetadataCollection`1<EdmProperty> properties2);
    private static bool CheckConstraintWhenOnlyParentMapped(AssociationSet assocSet, AssociationEndMember endMember, QueryRewriter childRewriter, QueryRewriter parentRewriter);
    private bool CheckConstraintWhenParentChildMapped(Cell cell, ErrorLog errorLog, AssociationEndMember parentEnd, ConfigViewGenerator config);
    private bool CheckParentColumnsForForeignKey(Cell cell, IEnumerable`1<Cell> cells, AssociationEndMember parentEnd, List`1& errorList);
    private static IList`1<EntitySet> FindEntitySetForColumnsMappedToEntityKeys(IEnumerable`1<Cell> cells, IEnumerable`1<MemberPath> tableColumns);
    private static AssociationEndMember GetRelationEndForColumns(Cell cell, IEnumerable`1<MemberPath> columns);
    private static List`1<LeftCellWrapper> GetWrappersFromContext(ViewgenContext context, EntitySetBase extent);
    private bool CheckForeignKeyColumnOrder(Set`1<Cell> cells, ErrorLog errorLog);
    private static List`1<List`1<int>> GetSlotNumsForColumns(Cell cell, IEnumerable`1<MemberPath> columns);
    private bool IsForeignKeySuperSetOfPrimaryKeyInChildTable();
    private bool IsConstraintRelevantForCells(IEnumerable`1<Cell> cells);
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.KeyConstraint`2 : InternalBase {
    private TCellRelation m_relation;
    private Set`1<TSlot> m_keySlots;
    protected TCellRelation CellRelation { get; }
    protected Set`1<TSlot> KeySlots { get; }
    internal KeyConstraint`2(TCellRelation relation, IEnumerable`1<TSlot> keySlots, IEqualityComparer`1<TSlot> comparer);
    protected TCellRelation get_CellRelation();
    protected Set`1<TSlot> get_KeySlots();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.LCWComparer : MulticastDelegate {
    public LCWComparer(object object, IntPtr method);
    public virtual bool Invoke(FragmentQuery query1, FragmentQuery query2);
    public virtual IAsyncResult BeginInvoke(FragmentQuery query1, FragmentQuery query2, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.RewritingValidator : object {
    private ViewgenContext _viewgenContext;
    private MemberDomainMap _domainMap;
    private CellTreeNode _basicView;
    private IEnumerable`1<MemberPath> _keyAttributes;
    private ErrorLog _errorLog;
    internal RewritingValidator(ViewgenContext context, CellTreeNode basicView);
    internal void Validate();
    private bool CheckEquivalence(FragmentQuery cQuery, FragmentQuery sQuery, BoolExpression inExtentCondition, BoolExpression& unsatisfiedConstraint);
    private void ReportConstraintViolation(string message, BoolExpression extraConstraint, ViewGenErrorCode errorCode, IEnumerable`1<LeftCellWrapper> relevantWrappers);
    private Dictionary`2<MemberValueBinding, CellTreeNode> CreateMemberValueTrees(bool complementElse);
    private void CheckConstraintsOnProjectedConditionMembers(Dictionary`2<MemberValueBinding, CellTreeNode> memberValueTrees, LeftCellWrapper wrapper, CellTreeNode sQueryTree, BoolExpression inExtentCondition);
    internal static BoolExpression PropagateCellConstantsToWhereClause(LeftCellWrapper wrapper, BoolExpression expression, Constant constant, MemberPath member, MemberMaps memberMaps);
    private static FragmentQuery AddNullConditionOnCSideFragment(LeftCellWrapper wrapper, MemberPath member, MemberMaps memberMaps);
    private void CheckConstraintsOnNonNullableMembers(LeftCellWrapper wrapper);
    internal static void EntityConfigurationToUserString(BoolExpression condition, StringBuilder builder);
    internal static void EntityConfigurationToUserString(BoolExpression condition, StringBuilder builder, bool writeRoundTrippingMessage);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.SchemaConstraints`1 : InternalBase {
    private List`1<TKeyConstraint> m_keyConstraints;
    internal IEnumerable`1<TKeyConstraint> KeyConstraints { get; }
    internal IEnumerable`1<TKeyConstraint> get_KeyConstraints();
    internal void Add(TKeyConstraint constraint);
    private static void ConstraintsToBuilder(IEnumerable`1<Constraint> constraints, StringBuilder builder);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ViewCellRelation : CellRelation {
    private Cell m_cell;
    private List`1<ViewCellSlot> m_slots;
    internal Cell Cell { get; }
    internal ViewCellRelation(Cell cell, List`1<ViewCellSlot> slots, int cellNumber);
    internal Cell get_Cell();
    internal ViewCellSlot LookupViewSlot(MemberProjectedSlot slot);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ViewCellSlot : ProjectedSlot {
    private int m_slotNum;
    private MemberProjectedSlot m_cSlot;
    private MemberProjectedSlot m_sSlot;
    internal MemberProjectedSlot CSlot { get; }
    internal MemberProjectedSlot SSlot { get; }
    internal ViewCellSlot(int slotNum, MemberProjectedSlot cSlot, MemberProjectedSlot sSlot);
    internal MemberProjectedSlot get_CSlot();
    internal MemberProjectedSlot get_SSlot();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal static string SlotsToUserString(IEnumerable`1<ViewCellSlot> slots, bool isFromCside);
    internal static string SlotToUserString(ViewCellSlot slot, bool isFromCside);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.Validation.ViewKeyConstraint : KeyConstraint`2<ViewCellRelation, ViewCellSlot> {
    internal Cell Cell { get; }
    internal ViewKeyConstraint(ViewCellRelation relation, IEnumerable`1<ViewCellSlot> keySlots);
    internal Cell get_Cell();
    internal bool Implies(ViewKeyConstraint second);
    internal static Record GetErrorRecord(ViewKeyConstraint rightKeyConstraint);
    internal static Record GetErrorRecord(IEnumerable`1<ViewKeyConstraint> rightKeyConstraints);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.ViewgenContext : InternalBase {
    private ConfigViewGenerator m_config;
    private ViewTarget m_viewTarget;
    private EntitySetBase m_extent;
    private MemberMaps m_memberMaps;
    private EdmItemCollection m_edmItemCollection;
    private EntityContainerMapping m_entityContainerMapping;
    private List`1<LeftCellWrapper> m_cellWrappers;
    private FragmentQueryProcessor m_leftFragmentQP;
    private FragmentQueryProcessor m_rightFragmentQP;
    private CqlIdentifiers m_identifiers;
    private Dictionary`2<FragmentQuery, Tile`1<FragmentQuery>> m_rewritingCache;
    internal ViewTarget ViewTarget { get; }
    internal MemberMaps MemberMaps { get; }
    internal EntitySetBase Extent { get; }
    internal ConfigViewGenerator Config { get; }
    internal CqlIdentifiers CqlIdentifiers { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    internal FragmentQueryProcessor LeftFragmentQP { get; }
    internal FragmentQueryProcessor RightFragmentQP { get; }
    internal List`1<LeftCellWrapper> AllWrappersForExtent { get; }
    internal EntityContainerMapping EntityContainerMapping { get; }
    internal ViewgenContext(ViewTarget viewTarget, EntitySetBase extent, IList`1<Cell> extentCells, CqlIdentifiers identifiers, ConfigViewGenerator config, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap, EntityContainerMapping entityContainerMapping);
    private void CreateConstraintsForForeignKeyAssociationsAffectingThisWrapper(FragmentQueryKB rightKB, MemberDomainMap rightDomainMap);
    internal ViewTarget get_ViewTarget();
    internal MemberMaps get_MemberMaps();
    internal EntitySetBase get_Extent();
    internal ConfigViewGenerator get_Config();
    internal CqlIdentifiers get_CqlIdentifiers();
    internal EdmItemCollection get_EdmItemCollection();
    internal FragmentQueryProcessor get_LeftFragmentQP();
    internal FragmentQueryProcessor get_RightFragmentQP();
    internal List`1<LeftCellWrapper> get_AllWrappersForExtent();
    internal EntityContainerMapping get_EntityContainerMapping();
    internal bool TryGetCachedRewriting(FragmentQuery query, Tile`1& rewriting);
    internal void SetCachedRewriting(FragmentQuery query, Tile`1<FragmentQuery> rewriting);
    private void CheckConcurrencyControlTokens();
    private bool CreateLeftCellWrappers(IList`1<Cell> extentCells, ViewTarget viewTarget);
    private static List`1<Cell> AlignFields(IEnumerable`1<Cell> cells, MemberProjectionIndex projectedSlotMap, ViewTarget viewTarget);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.ViewGenerator : InternalBase {
    private Set`1<Cell> m_cellGroup;
    private ConfigViewGenerator m_config;
    private MemberDomainMap m_queryDomainMap;
    private MemberDomainMap m_updateDomainMap;
    private Dictionary`2<EntitySetBase, QueryRewriter> m_queryRewriterCache;
    private List`1<ForeignConstraint> m_foreignKeyConstraints;
    private EntityContainerMapping m_entityContainerMapping;
    internal ViewGenerator(Set`1<Cell> cellGroup, ConfigViewGenerator config, List`1<ForeignConstraint> foreignKeyConstraints, EntityContainerMapping entityContainerMapping);
    private void SetConfiguration(EntityContainerMapping entityContainerMapping);
    internal ErrorLog GenerateAllBidirectionalViews(KeyToListMap`2<EntitySetBase, GeneratedView> views, CqlIdentifiers identifiers);
    internal ErrorLog GenerateQueryViewForSingleExtent(KeyToListMap`2<EntitySetBase, GeneratedView> views, CqlIdentifiers identifiers, EntitySetBase entity, EntityTypeBase type, ViewGenMode mode);
    private static void UpdateWhereClauseForEachCell(IEnumerable`1<Cell> extentCells, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap, ConfigViewGenerator config);
    private ErrorLog GenerateQueryViewForExtentAndType(CqlIdentifiers identifiers, KeyToListMap`2<EntitySetBase, GeneratedView> views, EntitySetBase entity, EntityTypeBase type, ViewGenMode mode);
    private ErrorLog GenerateDirectionalViews(ViewTarget viewTarget, CqlIdentifiers identifiers, KeyToListMap`2<EntitySetBase, GeneratedView> views);
    private QueryRewriter GenerateDirectionalViewsForExtent(ViewTarget viewTarget, EntitySetBase extent, CqlIdentifiers identifiers, KeyToListMap`2<EntitySetBase, GeneratedView> views);
    private ViewgenContext CreateViewgenContext(EntitySetBase extent, ViewTarget viewTarget, CqlIdentifiers identifiers);
    private QueryRewriter GenerateViewsForExtentAndType(EdmType generatedType, ViewgenContext context, CqlIdentifiers identifiers, KeyToListMap`2<EntitySetBase, GeneratedView> views, ViewGenMode mode);
    private static CellTreeNode GenerateSimplifiedView(CellTreeNode basicView, List`1<LeftCellWrapper> usedCells);
    private void CheckForeignKeyConstraints(ErrorLog errorLog);
    private static KeyToListMap`2<EntitySetBase, Cell> GroupCellsByExtent(IEnumerable`1<Cell> cells, ViewTarget viewTarget);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Entity.Core.Mapping.ViewGeneration.ViewgenGatekeeper : InternalBase {
    internal static ViewGenResults GenerateViewsFromMapping(EntityContainerMapping containerMapping, ConfigViewGenerator config);
    internal static ViewGenResults GenerateTypeSpecificQueryView(EntityContainerMapping containerMapping, ConfigViewGenerator config, EntitySetBase entity, EntityTypeBase type, bool includeSubtypes, Boolean& success);
    private static ViewGenResults GenerateViewsFromCells(List`1<Cell> cells, ConfigViewGenerator config, CqlIdentifiers identifiers, EntityContainerMapping containerMapping);
    private static ErrorLog EnsureAllCSpaceContainerSetsAreMapped(IEnumerable`1<Cell> cells, EntityContainerMapping containerMapping);
    private static bool DoesCellGroupContainEntitySet(Set`1<Cell> group, EntitySetBase entity);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.ViewGenMode : Enum {
    public int value__;
    public static ViewGenMode GenerateAllViews;
    public static ViewGenMode OfTypeViews;
    public static ViewGenMode OfTypeOnlyViews;
}
internal class System.Data.Entity.Core.Mapping.ViewGeneration.ViewGenResults : InternalBase {
    private KeyToListMap`2<EntitySetBase, GeneratedView> m_views;
    private ErrorLog m_errorLog;
    internal KeyToListMap`2<EntitySetBase, GeneratedView> Views { get; }
    internal IEnumerable`1<EdmSchemaError> Errors { get; }
    internal bool HasErrors { get; }
    internal KeyToListMap`2<EntitySetBase, GeneratedView> get_Views();
    internal IEnumerable`1<EdmSchemaError> get_Errors();
    internal bool get_HasErrors();
    internal void AddErrors(ErrorLog errorLog);
    internal string ErrorsToString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Entity.Core.Mapping.ViewGeneration.ViewGenTraceLevel : Enum {
    public int value__;
    public static ViewGenTraceLevel None;
    public static ViewGenTraceLevel ViewsOnly;
    public static ViewGenTraceLevel Normal;
    public static ViewGenTraceLevel Verbose;
}
internal static class System.Data.Entity.Core.Mapping.ViewValidator : object {
    internal static IEnumerable`1<EdmSchemaError> ValidateQueryView(DbQueryCommandTree view, EntitySetBaseMapping setMapping, EntityTypeBase elementType, bool includeSubtypes);
}
public class System.Data.Entity.Core.MappingException : EntityException {
    public MappingException(string message);
    public MappingException(string message, Exception innerException);
    private MappingException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Entity.Core.Metadata.Edm.AspProxy : object {
    private static string BUILD_MANAGER_TYPE_NAME;
    private static string AspNetAssemblyName;
    private static Byte[] _systemWebPublicKeyToken;
    private Assembly _webAssembly;
    private bool _triedLoadingWebAssembly;
    private static AspProxy();
    internal bool IsAspNetEnvironment();
    public bool TryInitializeWebAssembly();
    public static bool IsSystemWebLoaded();
    private void InitializeWebAssembly();
    internal string MapWebPath(string path);
    internal string InternalMapWebPath(string path);
    internal bool HasBuildManagerType();
    private bool TryGetBuildManagerType(Type& buildManager);
    internal IEnumerable`1<Assembly> GetBuildManagerReferencedAssemblies();
    internal MethodInfo GetReferencedAssembliesMethod();
}
internal static class System.Data.Entity.Core.Metadata.Edm.AssemblyCache : object {
    private static Dictionary`2<Assembly, ImmutableAssemblyCacheEntry> _globalAssemblyCache;
    private static object _assemblyCacheLock;
    private static AssemblyCache();
    internal static LockedAssemblyCache AcquireLockedAssemblyCache();
    internal static void LoadAssembly(Assembly assembly, bool loadReferencedAssemblies, KnownAssembliesSet knownAssemblies, Dictionary`2& typesInLoading, List`1& errors);
    internal static void LoadAssembly(Assembly assembly, bool loadReferencedAssemblies, KnownAssembliesSet knownAssemblies, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage, Object& loaderCookie, Dictionary`2& typesInLoading, List`1& errors);
    private static void LoadAssembly(Assembly assembly, bool loadReferencedAssemblies, ObjectItemLoadingSessionData loadingData);
    private static void UpdateCache(EdmItemCollection edmItemCollection, Dictionary`2<Assembly, MutableAssemblyCacheEntry> assemblies);
    private static void UpdateCache(LockedAssemblyCache lockedAssemblyCache, Dictionary`2<Assembly, MutableAssemblyCacheEntry> assemblies);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.AssemblyCacheEntry : object {
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal abstract virtual IList`1<EdmType> get_TypesInAssembly();
    internal abstract virtual IList`1<Assembly> get_ClosureAssemblies();
    internal bool TryGetEdmType(string typeName, EdmType& edmType);
    internal bool ContainsType(string typeName);
}
public class System.Data.Entity.Core.Metadata.Edm.AssociationEndMember : RelationshipEndMember {
    private Func`3<RelationshipManager, RelatedEnd, RelatedEnd> _getRelatedEndMethod;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal Func`3<RelationshipManager, RelatedEnd, RelatedEnd> GetRelatedEnd { get; internal set; }
    internal AssociationEndMember(string name, RefType endRefType, RelationshipMultiplicity multiplicity);
    internal AssociationEndMember(string name, EntityType entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal Func`3<RelationshipManager, RelatedEnd, RelatedEnd> get_GetRelatedEnd();
    internal void set_GetRelatedEnd(Func`3<RelationshipManager, RelatedEnd, RelatedEnd> value);
    public static AssociationEndMember Create(string name, RefType endRefType, RelationshipMultiplicity multiplicity, OperationAction deleteAction, IEnumerable`1<MetadataProperty> metadataProperties);
}
public class System.Data.Entity.Core.Metadata.Edm.AssociationSet : RelationshipSet {
    private ReadOnlyMetadataCollection`1<AssociationSetEnd> _associationSetEnds;
    public AssociationType ElementType { get; }
    [MetadataPropertyAttribute("1", "True")]
public ReadOnlyMetadataCollection`1<AssociationSetEnd> AssociationSetEnds { get; }
    internal EntitySet SourceSet { get; internal set; }
    internal EntitySet TargetSet { get; internal set; }
    internal AssociationEndMember SourceEnd { get; }
    internal AssociationEndMember TargetEnd { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal AssociationSet(string name, AssociationType associationType);
    public AssociationType get_ElementType();
    public ReadOnlyMetadataCollection`1<AssociationSetEnd> get_AssociationSetEnds();
    internal EntitySet get_SourceSet();
    internal void set_SourceSet(EntitySet value);
    internal EntitySet get_TargetSet();
    internal void set_TargetSet(EntitySet value);
    internal AssociationEndMember get_SourceEnd();
    internal AssociationEndMember get_TargetEnd();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual void SetReadOnly();
    internal void AddAssociationSetEnd(AssociationSetEnd associationSetEnd);
    public static AssociationSet Create(string name, AssociationType type, EntitySet sourceSet, EntitySet targetSet, IEnumerable`1<MetadataProperty> metadataProperties);
    private static bool CheckEntitySetAgainstEndMember(EntitySet entitySet, AssociationEndMember endMember);
}
public class System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd : MetadataItem {
    private EntitySet _entitySet;
    private AssociationSet _parentSet;
    private AssociationEndMember _endMember;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("2", "False")]
public AssociationSet ParentAssociationSet { get; }
    [MetadataPropertyAttribute("0", "False")]
public AssociationEndMember CorrespondingAssociationEndMember { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("12", "False")]
[ObsoleteAttribute("This property is going away, please use the Name property instead")]
public string Role { get; }
    [MetadataPropertyAttribute("13", "False")]
public EntitySet EntitySet { get; }
    internal string Identity { get; }
    internal AssociationSetEnd(EntitySet entitySet, AssociationSet parentSet, AssociationEndMember endMember);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public AssociationSet get_ParentAssociationSet();
    public AssociationEndMember get_CorrespondingAssociationEndMember();
    public string get_Name();
    public string get_Role();
    public EntitySet get_EntitySet();
    internal virtual string get_Identity();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public class System.Data.Entity.Core.Metadata.Edm.AssociationType : RelationshipType {
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Index;
    private ReadOnlyMetadataCollection`1<ReferentialConstraint> _referentialConstraints;
    private FilteredReadOnlyMetadataCollection`2<AssociationEndMember, EdmMember> _associationEndMembers;
    private bool _isForeignKey;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<AssociationEndMember> AssociationEndMembers { get; }
    public ReferentialConstraint Constraint { get; public set; }
    internal AssociationEndMember SourceEnd { get; internal set; }
    internal AssociationEndMember TargetEnd { get; internal set; }
    [MetadataPropertyAttribute("30", "True")]
public ReadOnlyMetadataCollection`1<ReferentialConstraint> ReferentialConstraints { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsForeignKey { get; }
    internal AssociationType(string name, string namespaceName, bool foreignKey, DataSpace dataSpace);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<AssociationEndMember> get_AssociationEndMembers();
    public ReferentialConstraint get_Constraint();
    public void set_Constraint(ReferentialConstraint value);
    internal AssociationEndMember get_SourceEnd();
    internal void set_SourceEnd(AssociationEndMember value);
    internal AssociationEndMember get_TargetEnd();
    internal void set_TargetEnd(AssociationEndMember value);
    private void SetKeyMember(int index, AssociationEndMember member);
    public ReadOnlyMetadataCollection`1<ReferentialConstraint> get_ReferentialConstraints();
    public bool get_IsForeignKey();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    internal virtual void SetReadOnly();
    internal void AddReferentialConstraint(ReferentialConstraint referentialConstraint);
    public static AssociationType Create(string name, string namespaceName, bool foreignKey, DataSpace dataSpace, AssociationEndMember sourceEnd, AssociationEndMember targetEnd, ReferentialConstraint constraint, IEnumerable`1<MetadataProperty> metadataProperties);
}
public enum System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind : Enum {
    public int value__;
    public static BuiltInTypeKind AssociationEndMember;
    public static BuiltInTypeKind AssociationSetEnd;
    public static BuiltInTypeKind AssociationSet;
    public static BuiltInTypeKind AssociationType;
    public static BuiltInTypeKind EntitySetBase;
    public static BuiltInTypeKind EntityTypeBase;
    public static BuiltInTypeKind CollectionType;
    public static BuiltInTypeKind CollectionKind;
    public static BuiltInTypeKind ComplexType;
    public static BuiltInTypeKind Documentation;
    public static BuiltInTypeKind OperationAction;
    public static BuiltInTypeKind EdmType;
    public static BuiltInTypeKind EntityContainer;
    public static BuiltInTypeKind EntitySet;
    public static BuiltInTypeKind EntityType;
    public static BuiltInTypeKind EnumType;
    public static BuiltInTypeKind EnumMember;
    public static BuiltInTypeKind Facet;
    public static BuiltInTypeKind EdmFunction;
    public static BuiltInTypeKind FunctionParameter;
    public static BuiltInTypeKind GlobalItem;
    public static BuiltInTypeKind MetadataProperty;
    public static BuiltInTypeKind NavigationProperty;
    public static BuiltInTypeKind MetadataItem;
    public static BuiltInTypeKind EdmMember;
    public static BuiltInTypeKind ParameterMode;
    public static BuiltInTypeKind PrimitiveType;
    public static BuiltInTypeKind PrimitiveTypeKind;
    public static BuiltInTypeKind EdmProperty;
    public static BuiltInTypeKind ProviderManifest;
    public static BuiltInTypeKind ReferentialConstraint;
    public static BuiltInTypeKind RefType;
    public static BuiltInTypeKind RelationshipEndMember;
    public static BuiltInTypeKind RelationshipMultiplicity;
    public static BuiltInTypeKind RelationshipSet;
    public static BuiltInTypeKind RelationshipType;
    public static BuiltInTypeKind RowType;
    public static BuiltInTypeKind SimpleType;
    public static BuiltInTypeKind StructuralType;
    public static BuiltInTypeKind TypeUsage;
}
internal class System.Data.Entity.Core.Metadata.Edm.CacheForPrimitiveTypes : object {
    private List`1[] _primitiveTypeMap;
    internal void Add(PrimitiveType type);
    internal bool TryGetType(PrimitiveTypeKind primitiveTypeKind, IEnumerable`1<Facet> facets, PrimitiveType& type);
    private static Facet[] CreateInitialFacets(FacetDescription[] facetDescriptions);
    internal ReadOnlyCollection`1<PrimitiveType> GetTypes();
}
internal class System.Data.Entity.Core.Metadata.Edm.ClrComplexType : ComplexType {
    private Type _type;
    private Func`1<object> _constructor;
    private string _cspaceTypeName;
    internal Func`1<object> Constructor { get; internal set; }
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal ClrComplexType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal static ClrComplexType CreateReadonlyClrComplexType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal Func`1<object> get_Constructor();
    internal void set_Constructor(Func`1<object> value);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
}
internal class System.Data.Entity.Core.Metadata.Edm.ClrEntityType : EntityType {
    private Type _type;
    private Func`1<object> _constructor;
    private string _cspaceTypeName;
    private string _cspaceNamespaceName;
    private string _hash;
    internal Func`1<object> Constructor { get; internal set; }
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal string CSpaceNamespaceName { get; }
    internal string HashedDescription { get; }
    internal ClrEntityType(Type type, string cspaceNamespaceName, string cspaceTypeName);
    internal Func`1<object> get_Constructor();
    internal void set_Constructor(Func`1<object> value);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
    internal string get_CSpaceNamespaceName();
    internal string get_HashedDescription();
    private string BuildEntityTypeHash();
    private string BuildEntityTypeDescription();
}
internal class System.Data.Entity.Core.Metadata.Edm.ClrEnumType : EnumType {
    private Type _type;
    private string _cspaceTypeName;
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal ClrEnumType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
}
internal class System.Data.Entity.Core.Metadata.Edm.ClrPerspective : Perspective {
    private EntityContainer _defaultContainer;
    internal ClrPerspective(MetadataWorkspace metadataWorkspace);
    internal bool TryGetType(Type clrType, TypeUsage& outTypeUsage);
    internal virtual bool TryGetMember(StructuralType type, string memberName, bool ignoreCase, EdmMember& outMember);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
    internal virtual EntityContainer GetDefaultContainer();
    internal void SetDefaultContainer(string defaultContainerName);
    private static TypeUsage GetMappedTypeUsage(MappingBase map);
}
internal class System.Data.Entity.Core.Metadata.Edm.CodeFirstOSpaceLoader : object {
    private CodeFirstOSpaceTypeFactory _typeFactory;
    public CodeFirstOSpaceLoader(CodeFirstOSpaceTypeFactory typeFactory);
    public void LoadTypes(EdmItemCollection edmItemCollection, ObjectItemCollection objectItemCollection);
}
internal class System.Data.Entity.Core.Metadata.Edm.CodeFirstOSpaceTypeFactory : OSpaceTypeFactory {
    private List`1<Action> _referenceResolutions;
    private Dictionary`2<EdmType, EdmType> _cspaceToOspace;
    private Dictionary`2<string, EdmType> _loadedTypes;
    public List`1<Action> ReferenceResolutions { get; }
    public Dictionary`2<EdmType, EdmType> CspaceToOspace { get; }
    public Dictionary`2<string, EdmType> LoadedTypes { get; }
    public virtual List`1<Action> get_ReferenceResolutions();
    public virtual void LogLoadMessage(string message, EdmType relatedType);
    public virtual void LogError(string errorMessage, EdmType relatedType);
    public virtual void TrackClosure(Type type);
    public virtual Dictionary`2<EdmType, EdmType> get_CspaceToOspace();
    public virtual Dictionary`2<string, EdmType> get_LoadedTypes();
    public virtual void AddToTypesInAssembly(EdmType type);
}
public enum System.Data.Entity.Core.Metadata.Edm.CollectionKind : Enum {
    public int value__;
    public static CollectionKind None;
    public static CollectionKind Bag;
    public static CollectionKind List;
}
public class System.Data.Entity.Core.Metadata.Edm.CollectionType : EdmType {
    private TypeUsage _typeUsage;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    internal CollectionType(EdmType elementType);
    internal CollectionType(TypeUsage elementType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual TypeUsage get_TypeUsage();
    private static string GetIdentity(TypeUsage typeUsage);
    internal virtual bool EdmEquals(MetadataItem item);
}
public class System.Data.Entity.Core.Metadata.Edm.ComplexType : StructuralType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    internal ComplexType(string name, string namespaceName, DataSpace dataSpace);
    internal ComplexType(string name);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    public static ComplexType Create(string name, string namespaceName, DataSpace dataSpace, IEnumerable`1<EdmMember> members, IEnumerable`1<MetadataProperty> metadataProperties);
}
public enum System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode : Enum {
    public int value__;
    public static ConcurrencyMode None;
    public static ConcurrencyMode Fixed;
}
internal static class System.Data.Entity.Core.Metadata.Edm.Converter : object {
    internal static FacetDescription ConcurrencyModeFacet;
    internal static FacetDescription StoreGeneratedPatternFacet;
    internal static FacetDescription CollationFacet;
    private static Converter();
    internal static IEnumerable`1<GlobalItem> ConvertSchema(Schema somSchema, DbProviderManifest providerManifest, ItemCollection itemCollection);
    internal static IEnumerable`1<GlobalItem> ConvertSchema(IList`1<Schema> somSchemas, DbProviderManifest providerManifest, ItemCollection itemCollection);
    private static void ConvertSchema(Schema somSchema, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal static MetadataItem LoadSchemaElement(SchemaType element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EntityContainer ConvertToEntityContainer(EntityContainer element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EntityType ConvertToEntityType(SchemaEntityType element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static void LoadEntityTypePhase2(SchemaEntityType element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static ComplexType ConvertToComplexType(SchemaComplexType element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static AssociationType ConvertToAssociationType(Relationship element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static AssociationEndMember InitializeAssociationEndMember(AssociationType associationType, IRelationshipEnd end, EntityType endMemberType);
    private static EdmProperty[] GetProperties(EntityTypeBase entityType, IList`1<PropertyRefElement> properties);
    private static void AddOtherContent(SchemaElement element, MetadataItem item);
    private static EntitySet ConvertToEntitySet(EntityContainerEntitySet set, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EntitySet GetEntitySet(EntityContainerEntitySet set, EntityContainer container);
    private static AssociationSet ConvertToAssociationSet(EntityContainerRelationshipSet relationshipSet, DbProviderManifest providerManifest, ConversionCache convertedItemCache, EntityContainer container, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EdmProperty ConvertToProperty(StructuredProperty somProperty, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static NavigationProperty ConvertToNavigationProperty(EntityType declaringEntityType, NavigationProperty somNavigationProperty, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EdmFunction ConvertToFunction(Function somFunction, DbProviderManifest providerManifest, ConversionCache convertedItemCache, EntityContainer functionImportEntityContainer, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static EnumType ConvertToEnumType(SchemaEnumType somEnumType, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static Documentation ConvertToDocumentation(DocumentationElement element);
    private static TypeUsage GetFunctionTypeUsage(bool isModelFunction, Function somFunction, FacetEnabledSchemaElement somParameter, DbProviderManifest providerManifest, bool areConvertingForProviderManifest, SchemaType type, CollectionKind collectionKind, bool isRefType, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private static ParameterMode GetParameterMode(ParameterDirection parameterDirection);
    private static void ApplyTypePropertyFacets(TypeUsage sourceType, TypeUsage& targetType);
    private static void PopulateGeneralFacets(StructuredProperty somProperty, TypeUsage& propertyTypeUsage);
    private static DataSpace GetDataSpace(DbProviderManifest providerManifest);
    private static PrimitiveType GetPrimitiveType(ScalarType scalarType, DbProviderManifest providerManifest);
    private static void UpdateSentinelValuesInFacets(TypeUsage& typeUsage);
}
public class System.Data.Entity.Core.Metadata.Edm.CsdlSerializer : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<DataModelErrorEventArgs> OnError;
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    public bool Serialize(EdmModel model, XmlWriter xmlWriter, string modelNamespace);
}
internal class System.Data.Entity.Core.Metadata.Edm.CustomAssemblyResolver : MetadataArtifactAssemblyResolver {
    private Func`2<AssemblyName, Assembly> _referenceResolver;
    private Func`1<IEnumerable`1<Assembly>> _wildcardAssemblyEnumerator;
    internal CustomAssemblyResolver(Func`1<IEnumerable`1<Assembly>> wildcardAssemblyEnumerator, Func`2<AssemblyName, Assembly> referenceResolver);
    internal virtual bool TryResolveAssemblyReference(AssemblyName referenceName, Assembly& assembly);
    internal virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
}
public class System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    private MetadataItem _item;
    public string PropertyName { get; internal set; }
    public string ErrorMessage { get; internal set; }
    public MetadataItem Item { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
internal void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal void set_ErrorMessage(string value);
    public MetadataItem get_Item();
    public void set_Item(MetadataItem value);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.DataModelValidationRule : object {
    internal Type ValidatedType { get; }
    internal abstract virtual Type get_ValidatedType();
    internal abstract virtual void Evaluate(EdmModelValidationContext context, MetadataItem item);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.DataModelValidationRule`1 : DataModelValidationRule {
    protected Action`2<EdmModelValidationContext, TItem> _validate;
    internal Type ValidatedType { get; }
    internal DataModelValidationRule`1(Action`2<EdmModelValidationContext, TItem> validate);
    internal virtual Type get_ValidatedType();
    internal virtual void Evaluate(EdmModelValidationContext context, MetadataItem item);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.DataModelValidationRuleSet : object {
    private List`1<DataModelValidationRule> _rules;
    protected void AddRule(DataModelValidationRule rule);
    protected void RemoveRule(DataModelValidationRule rule);
    internal IEnumerable`1<DataModelValidationRule> GetRules(MetadataItem itemToValidate);
}
internal class System.Data.Entity.Core.Metadata.Edm.DataModelValidator : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<DataModelErrorEventArgs> OnError;
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    public void Validate(EdmModel model, bool validateSyntax);
}
public enum System.Data.Entity.Core.Metadata.Edm.DataSpace : Enum {
    public int value__;
    public static DataSpace OSpace;
    public static DataSpace CSpace;
    public static DataSpace SSpace;
    public static DataSpace OCSpace;
    public static DataSpace CSSpace;
}
internal class System.Data.Entity.Core.Metadata.Edm.DbDatabaseMapping : object {
    private List`1<EntityContainerMapping> _entityContainerMappings;
    [CompilerGeneratedAttribute]
private EdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmModel <Database>k__BackingField;
    public EdmModel Model { get; public set; }
    public EdmModel Database { get; public set; }
    public DbProviderInfo ProviderInfo { get; }
    public DbProviderManifest ProviderManifest { get; }
    internal IList`1<EntityContainerMapping> EntityContainerMappings { get; }
    [CompilerGeneratedAttribute]
public EdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(EdmModel value);
    [CompilerGeneratedAttribute]
public EdmModel get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(EdmModel value);
    public DbProviderInfo get_ProviderInfo();
    public DbProviderManifest get_ProviderManifest();
    internal IList`1<EntityContainerMapping> get_EntityContainerMappings();
    internal void AddEntityContainerMapping(EntityContainerMapping entityContainerMapping);
}
[ExtensionAttribute]
[ObsoleteAttribute("ConceptualModel and StoreModel are now available as properties directly on DbModel.")]
public static class System.Data.Entity.Core.Metadata.Edm.DbModelExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("ConceptualModel is now available as a property directly on DbModel.")]
public static EdmModel GetConceptualModel(IEdmModelAdapter model);
    [ExtensionAttribute]
[ObsoleteAttribute("StoreModel is now available as a property directly on DbModel.")]
public static EdmModel GetStoreModel(IEdmModelAdapter model);
}
internal class System.Data.Entity.Core.Metadata.Edm.DefaultAssemblyResolver : MetadataArtifactAssemblyResolver {
    internal virtual bool TryResolveAssemblyReference(AssemblyName referenceName, Assembly& assembly);
    internal virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
    internal virtual Assembly ResolveAssembly(AssemblyName referenceName);
    private static bool TryFindWildcardAssemblyMatch(AssemblyName referenceName, Assembly& assembly);
    private static IEnumerable`1<Assembly> GetAlreadyLoadedNonSystemAssemblies();
    private static IEnumerable`1<Assembly> GetAllDiscoverableAssemblies();
}
public class System.Data.Entity.Core.Metadata.Edm.Documentation : MetadataItem {
    private string _summary;
    private string _longDescription;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string Summary { get; internal set; }
    public string LongDescription { get; internal set; }
    internal string Identity { get; }
    public bool IsEmpty { get; }
    public Documentation(string summary, string longDescription);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public string get_Summary();
    internal void set_Summary(string value);
    public string get_LongDescription();
    internal void set_LongDescription(string value);
    internal virtual string get_Identity();
    public bool get_IsEmpty();
    public virtual string ToString();
}
internal static class System.Data.Entity.Core.Metadata.Edm.EdmConstants : object {
    internal static string EdmNamespace;
    internal static string ClrPrimitiveTypeNamespace;
    internal static string TransientNamespace;
    internal static int NumPrimitiveTypes;
    internal static int NumBuiltInTypes;
    internal static int MaxLength;
    internal static string AssociationEnd;
    internal static string AssociationSetType;
    internal static string AssociationSetEndType;
    internal static string AssociationType;
    internal static string BaseEntitySetType;
    internal static string CollectionType;
    internal static string ComplexType;
    internal static string DeleteAction;
    internal static string DeleteBehavior;
    internal static string Documentation;
    internal static string EdmType;
    internal static string ElementType;
    internal static string EntityContainerType;
    internal static string EntitySetType;
    internal static string EntityType;
    internal static string EnumerationMember;
    internal static string EnumerationType;
    internal static string Facet;
    internal static string Function;
    internal static string FunctionParameter;
    internal static string GlobalItem;
    internal static string ItemAttribute;
    internal static string ItemType;
    internal static string Member;
    internal static string NavigationProperty;
    internal static string OperationBehavior;
    internal static string OperationBehaviors;
    internal static string ParameterMode;
    internal static string PrimitiveType;
    internal static string PrimitiveTypeKind;
    internal static string Property;
    internal static string ProviderManifest;
    internal static string ReferentialConstraint;
    internal static string RefType;
    internal static string RelationshipEnd;
    internal static string RelationshipMultiplicity;
    internal static string RelationshipSet;
    internal static string RelationshipType;
    internal static string ReturnParameter;
    internal static string Role;
    internal static string RowType;
    internal static string SimpleType;
    internal static string StructuralType;
    internal static string TypeUsage;
    internal static string Utc;
    internal static string Unspecified;
    internal static string Local;
    internal static string One;
    internal static string ZeroToOne;
    internal static string Many;
    internal static string In;
    internal static string Out;
    internal static string InOut;
    internal static string None;
    internal static string Cascade;
    internal static string NoneCollectionKind;
    internal static string ListCollectionKind;
    internal static string BagCollectionKind;
    internal static string MaxMaxLength;
    internal static string VariableSrid;
    internal static string AssociationSetEnds;
    internal static string Child;
    internal static string DefaultValue;
    internal static string Ends;
    internal static string EntitySet;
    internal static string AssociationSet;
    internal static string EntitySets;
    internal static string Facets;
    internal static string FromProperties;
    internal static string FromRole;
    internal static string IsParent;
    internal static string KeyMembers;
    internal static string Members;
    internal static string Mode;
    internal static string Nullable;
    internal static string Parameters;
    internal static string Parent;
    internal static string Properties;
    internal static string ToProperties;
    internal static string ToRole;
    internal static string ReferentialConstraints;
    internal static string RelationshipTypeName;
    internal static string ReturnType;
    internal static string ToEndMemberName;
    internal static string CollectionKind;
    internal static string Binary;
    internal static string Boolean;
    internal static string Byte;
    internal static string DateTime;
    internal static string Decimal;
    internal static string Double;
    internal static string Geometry;
    internal static string GeometryPoint;
    internal static string GeometryLineString;
    internal static string GeometryPolygon;
    internal static string GeometryMultiPoint;
    internal static string GeometryMultiLineString;
    internal static string GeometryMultiPolygon;
    internal static string GeometryCollection;
    internal static string Geography;
    internal static string GeographyPoint;
    internal static string GeographyLineString;
    internal static string GeographyPolygon;
    internal static string GeographyMultiPoint;
    internal static string GeographyMultiLineString;
    internal static string GeographyMultiPolygon;
    internal static string GeographyCollection;
    internal static string Guid;
    internal static string HierarchyId;
    internal static string Single;
    internal static string SByte;
    internal static string Int16;
    internal static string Int32;
    internal static string Int64;
    internal static string Money;
    internal static string Null;
    internal static string String;
    internal static string DateTimeOffset;
    internal static string Time;
    internal static string UInt16;
    internal static string UInt32;
    internal static string UInt64;
    internal static string Xml;
    internal static string Name;
    internal static string Namespace;
    internal static string Abstract;
    internal static string BaseType;
    internal static string Sealed;
    internal static string ItemAttributes;
    internal static string Type;
    internal static string Schema;
    internal static string Table;
    internal static string FacetType;
    internal static string Value;
    internal static string EnumMembers;
    internal static string BuiltInAttribute;
    internal static string StoreFunctionNamespace;
    internal static string ParameterTypeSemanticsAttribute;
    internal static string ParameterTypeSemantics;
    internal static string NiladicFunctionAttribute;
    internal static string IsComposableFunctionAttribute;
    internal static string CommandTextFunctionAttribute;
    internal static string StoreFunctionNameAttribute;
    internal static string WebHomeSymbol;
    internal static string Summary;
    internal static string LongDescription;
    internal static Unbounded UnboundedValue;
    internal static Variable VariableValue;
    private static EdmConstants();
}
public abstract class System.Data.Entity.Core.Metadata.Edm.EdmError : object {
    private string _message;
    public string Message { get; }
    internal EdmError(string message);
    public string get_Message();
}
public class System.Data.Entity.Core.Metadata.Edm.EdmFunction : EdmType {
    private ReadOnlyMetadataCollection`1<FunctionParameter> _returnParameters;
    private ReadOnlyMetadataCollection`1<FunctionParameter> _parameters;
    private FunctionAttributes _functionAttributes;
    private string _storeFunctionNameAttribute;
    private ParameterTypeSemantics _parameterTypeSemantics;
    private string _commandTextAttribute;
    private string _schemaName;
    private ReadOnlyCollection`1<EntitySet> _entitySets;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string FullName { get; }
    public ReadOnlyMetadataCollection`1<FunctionParameter> Parameters { get; }
    internal bool HasUserDefinedBody { get; }
    [MetadataPropertyAttribute("13", "False")]
internal EntitySet EntitySet { get; }
    [MetadataPropertyAttribute("13", "True")]
internal ReadOnlyCollection`1<EntitySet> EntitySets { get; }
    [MetadataPropertyAttribute("19", "False")]
public FunctionParameter ReturnParameter { get; }
    [MetadataPropertyAttribute("19", "True")]
public ReadOnlyMetadataCollection`1<FunctionParameter> ReturnParameters { get; }
    [MetadataPropertyAttribute("12", "False")]
public string StoreFunctionNameAttribute { get; public set; }
    internal string FunctionName { get; }
    [MetadataPropertyAttribute("System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics", "False")]
public ParameterTypeSemantics ParameterTypeSemanticsAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool AggregateAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool BuiltInAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsFromProviderManifest { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool NiladicFunctionAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsComposableAttribute { get; }
    [MetadataPropertyAttribute("12", "False")]
public string CommandTextAttribute { get; }
    internal bool IsCachedStoreFunction { get; }
    internal bool IsModelDefinedFunction { get; }
    internal bool IsFunctionImport { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Schema { get; public set; }
    internal EdmFunction(string name, string namespaceName, DataSpace dataSpace);
    internal EdmFunction(string name, string namespaceName, DataSpace dataSpace, EdmFunctionPayload payload);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual string get_FullName();
    public ReadOnlyMetadataCollection`1<FunctionParameter> get_Parameters();
    public void AddParameter(FunctionParameter functionParameter);
    internal bool get_HasUserDefinedBody();
    internal EntitySet get_EntitySet();
    internal ReadOnlyCollection`1<EntitySet> get_EntitySets();
    public FunctionParameter get_ReturnParameter();
    public ReadOnlyMetadataCollection`1<FunctionParameter> get_ReturnParameters();
    public string get_StoreFunctionNameAttribute();
    public void set_StoreFunctionNameAttribute(string value);
    internal string get_FunctionName();
    public ParameterTypeSemantics get_ParameterTypeSemanticsAttribute();
    public bool get_AggregateAttribute();
    public virtual bool get_BuiltInAttribute();
    public bool get_IsFromProviderManifest();
    public bool get_NiladicFunctionAttribute();
    public bool get_IsComposableAttribute();
    public string get_CommandTextAttribute();
    internal bool get_IsCachedStoreFunction();
    internal bool get_IsModelDefinedFunction();
    internal bool get_IsFunctionImport();
    public string get_Schema();
    public void set_Schema(string value);
    internal virtual void SetReadOnly();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal static string BuildIdentity(string functionName, IEnumerable`1<TypeUsage> functionParameters);
    internal static void BuildIdentity(StringBuilder builder, string functionName, IEnumerable`1<TParameterMetadata> functionParameters, Func`2<TParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TParameterMetadata, ParameterMode> getParameterMode);
    private bool GetFunctionAttribute(FunctionAttributes attribute);
    private static void SetFunctionAttribute(FunctionAttributes& field, FunctionAttributes attribute, bool isSet);
    public static EdmFunction Create(string name, string namespaceName, DataSpace dataSpace, EdmFunctionPayload payload, IEnumerable`1<MetadataProperty> metadataProperties);
    [CompilerGeneratedAttribute]
private FunctionParameter <.ctor>b__1_0(FunctionParameter returnParameter);
}
public class System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreFunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EntitySet> <EntitySets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAggregate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsBuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNiladic>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsComposable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFromProviderManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCachedStoreFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFunctionImport>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FunctionParameter> <ReturnParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParameterTypeSemantics> <ParameterTypeSemantics>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FunctionParameter> <Parameters>k__BackingField;
    public string Schema { get; public set; }
    public string StoreFunctionName { get; public set; }
    public string CommandText { get; public set; }
    public IList`1<EntitySet> EntitySets { get; public set; }
    public Nullable`1<bool> IsAggregate { get; public set; }
    public Nullable`1<bool> IsBuiltIn { get; public set; }
    public Nullable`1<bool> IsNiladic { get; public set; }
    public Nullable`1<bool> IsComposable { get; public set; }
    public Nullable`1<bool> IsFromProviderManifest { get; public set; }
    public Nullable`1<bool> IsCachedStoreFunction { get; public set; }
    public Nullable`1<bool> IsFunctionImport { get; public set; }
    public IList`1<FunctionParameter> ReturnParameters { get; public set; }
    public Nullable`1<ParameterTypeSemantics> ParameterTypeSemantics { get; public set; }
    public IList`1<FunctionParameter> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_StoreFunctionName();
    [CompilerGeneratedAttribute]
public void set_StoreFunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public IList`1<EntitySet> get_EntitySets();
    [CompilerGeneratedAttribute]
public void set_EntitySets(IList`1<EntitySet> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAggregate();
    [CompilerGeneratedAttribute]
public void set_IsAggregate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsBuiltIn();
    [CompilerGeneratedAttribute]
public void set_IsBuiltIn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsNiladic();
    [CompilerGeneratedAttribute]
public void set_IsNiladic(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsComposable();
    [CompilerGeneratedAttribute]
public void set_IsComposable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFromProviderManifest();
    [CompilerGeneratedAttribute]
public void set_IsFromProviderManifest(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsCachedStoreFunction();
    [CompilerGeneratedAttribute]
public void set_IsCachedStoreFunction(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFunctionImport();
    [CompilerGeneratedAttribute]
public void set_IsFunctionImport(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IList`1<FunctionParameter> get_ReturnParameters();
    [CompilerGeneratedAttribute]
public void set_ReturnParameters(IList`1<FunctionParameter> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ParameterTypeSemantics> get_ParameterTypeSemantics();
    [CompilerGeneratedAttribute]
public void set_ParameterTypeSemantics(Nullable`1<ParameterTypeSemantics> value);
    [CompilerGeneratedAttribute]
public IList`1<FunctionParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<FunctionParameter> value);
}
public class System.Data.Entity.Core.Metadata.Edm.EdmItemCollection : ItemCollection {
    private CacheForPrimitiveTypes _primitiveTypeMaps;
    private double _edmVersion;
    private Memoizer`2<InitializerMetadata, InitializerMetadata> _getCanonicalInitializerMetadataMemoizer;
    private Memoizer`2<EdmFunction, DbLambda> _getGeneratedFunctionDefinitionsMemoizer;
    private OcAssemblyCache _conventionalOcCache;
    public double EdmVersion { get; internal set; }
    internal OcAssemblyCache ConventionalOcCache { get; }
    internal EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths, bool skipInitialization);
    public EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders);
    public EdmItemCollection(EdmModel model);
    public EdmItemCollection(String[] filePaths);
    private EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IList`1& errors);
    private void Init();
    private IList`1<EdmSchemaError> Init(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths, bool throwOnError);
    public double get_EdmVersion();
    internal void set_EdmVersion(double value);
    internal OcAssemblyCache get_ConventionalOcCache();
    internal InitializerMetadata GetCanonicalInitializerMetadata(InitializerMetadata metadata);
    internal static bool IsSystemNamespace(DbProviderManifest manifest, string namespaceName);
    internal static IList`1<EdmSchemaError> LoadItems(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModelOption, DbProviderManifest providerManifest, ItemCollection itemCollection, bool throwOnError);
    internal static List`1<EdmSchemaError> LoadItems(DbProviderManifest manifest, IList`1<Schema> somSchemas, ItemCollection itemCollection);
    internal static IEnumerable`1<GlobalItem> LoadSomSchema(IList`1<Schema> somSchemas, DbProviderManifest providerManifest, ItemCollection itemCollection);
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes();
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes(double edmVersion);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    private void LoadEdmPrimitiveTypesAndFunctions();
    internal DbLambda GetGeneratedFunctionDefinition(EdmFunction function);
    internal DbLambda GenerateFunctionDefinition(EdmFunction function);
    public static EdmItemCollection Create(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IList`1& errors);
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmItemError : EdmError {
    public EdmItemError(string message);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.EdmMember : MetadataItem {
    private StructuralType _declaringType;
    private TypeUsage _typeUsage;
    private string _name;
    private string _identity;
    private string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.Identity { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; public set; }
    public StructuralType DeclaringType { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; protected set; }
    public bool IsStoreGeneratedComputed { get; }
    public bool IsStoreGeneratedIdentity { get; }
    internal bool IsPrimaryKeyColumn { get; }
    internal EdmMember(string name, TypeUsage memberTypeUsage);
    private sealed virtual override string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.get_Identity();
    internal virtual string get_Identity();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual StructuralType get_DeclaringType();
    public virtual TypeUsage get_TypeUsage();
    protected virtual void set_TypeUsage(TypeUsage value);
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal void ChangeDeclaringTypeWithoutCollectionFixup(StructuralType newDeclaringType);
    public bool get_IsStoreGeneratedComputed();
    public bool get_IsStoreGeneratedIdentity();
    internal virtual bool get_IsPrimaryKeyColumn();
    [CompilerGeneratedAttribute]
private bool <set_Name>b__12_0(EdmMember c);
}
public class System.Data.Entity.Core.Metadata.Edm.EdmModel : MetadataItem {
    private List`1<AssociationType> _associationTypes;
    private List`1<ComplexType> _complexTypes;
    private List`1<EntityType> _entityTypes;
    private List`1<EnumType> _enumTypes;
    private List`1<EdmFunction> _functions;
    private EntityContainer _container;
    private double _schemaVersion;
    private DbProviderInfo _providerInfo;
    private DbProviderManifest _providerManifest;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    public DataSpace DataSpace { get; }
    public IEnumerable`1<AssociationType> AssociationTypes { get; }
    public IEnumerable`1<ComplexType> ComplexTypes { get; }
    public IEnumerable`1<EntityType> EntityTypes { get; }
    public IEnumerable`1<EnumType> EnumTypes { get; }
    public IEnumerable`1<EdmFunction> Functions { get; }
    public EntityContainer Container { get; }
    internal double SchemaVersion { get; internal set; }
    internal DbProviderInfo ProviderInfo { get; private set; }
    internal DbProviderManifest ProviderManifest { get; private set; }
    internal IEnumerable`1<string> NamespaceNames { get; }
    internal IEnumerable`1<EdmType> NamespaceItems { get; }
    public IEnumerable`1<GlobalItem> GlobalItems { get; }
    internal IEnumerable`1<EntityContainer> Containers { get; }
    private EdmModel(EntityContainer entityContainer, double version);
    internal EdmModel(DataSpace dataSpace, double schemaVersion);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public DataSpace get_DataSpace();
    public IEnumerable`1<AssociationType> get_AssociationTypes();
    public IEnumerable`1<ComplexType> get_ComplexTypes();
    public IEnumerable`1<EntityType> get_EntityTypes();
    public IEnumerable`1<EnumType> get_EnumTypes();
    public IEnumerable`1<EdmFunction> get_Functions();
    public EntityContainer get_Container();
    internal double get_SchemaVersion();
    internal void set_SchemaVersion(double value);
    internal DbProviderInfo get_ProviderInfo();
    private void set_ProviderInfo(DbProviderInfo value);
    internal DbProviderManifest get_ProviderManifest();
    private void set_ProviderManifest(DbProviderManifest value);
    internal virtual IEnumerable`1<string> get_NamespaceNames();
    internal IEnumerable`1<EdmType> get_NamespaceItems();
    public IEnumerable`1<GlobalItem> get_GlobalItems();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.EdmModel/<get_Containers>d__45")]
internal virtual IEnumerable`1<EntityContainer> get_Containers();
    public void AddItem(AssociationType item);
    public void AddItem(ComplexType item);
    public void AddItem(EntityType item);
    public void AddItem(EnumType item);
    public void AddItem(EdmFunction item);
    public void RemoveItem(AssociationType item);
    public void RemoveItem(ComplexType item);
    public void RemoveItem(EntityType item);
    public void RemoveItem(EnumType item);
    public void RemoveItem(EdmFunction item);
    internal virtual void Validate();
    private void ValidateSpace(EdmType item);
    internal static EdmModel CreateStoreModel(DbProviderInfo providerInfo, DbProviderManifest providerManifest, double schemaVersion);
    internal static EdmModel CreateStoreModel(EntityContainer entityContainer, DbProviderInfo providerInfo, DbProviderManifest providerManifest, double schemaVersion);
    internal static EdmModel CreateConceptualModel(double schemaVersion);
    internal static EdmModel CreateConceptualModel(EntityContainer entityContainer, double schemaVersion);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.EdmModelRuleSet : DataModelValidationRuleSet {
    private EdmModelRuleSet(bool validateSyntax);
    public static EdmModelRuleSet CreateEdmModelRuleSet(double version, bool validateSyntax);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Core.Metadata.Edm.EdmModelSemanticValidationRules : object {
    internal static EdmModelValidationRule`1<EdmFunction> EdmFunction_ComposableFunctionImportsNotAllowed_V1_V2;
    internal static EdmModelValidationRule`1<EdmFunction> EdmFunction_DuplicateParameterName;
    internal static EdmModelValidationRule`1<EdmType> EdmType_SystemNamespaceEncountered;
    internal static EdmModelValidationRule`1<EntityContainer> EdmEntityContainer_SimilarRelationshipEnd;
    internal static EdmModelValidationRule`1<EntityContainer> EdmEntityContainer_InvalidEntitySetNameReference;
    internal static EdmModelValidationRule`1<EntityContainer> EdmEntityContainer_ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    internal static EdmModelValidationRule`1<EntityContainer> EdmEntityContainer_DuplicateEntityContainerMemberName;
    internal static EdmModelValidationRule`1<EntityContainer> EdmEntityContainer_DuplicateEntitySetTable;
    internal static EdmModelValidationRule`1<EntitySet> EdmEntitySet_EntitySetTypeHasNoKeys;
    internal static EdmModelValidationRule`1<AssociationSet> EdmAssociationSet_DuplicateEndName;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_DuplicatePropertyNameSpecifiedInEntityKey;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_InvalidKeyNullablePart;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_EntityKeyMustBeScalar;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_InvalidKeyKeyDefinedInBaseClass;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_KeyMissingOnEntityType;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_InvalidMemberNameMatchesTypeName;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_PropertyNameAlreadyDefinedDuplicate;
    internal static EdmModelValidationRule`1<EntityType> EdmEntityType_CycleInTypeHierarchy;
    internal static EdmModelValidationRule`1<NavigationProperty> EdmNavigationProperty_BadNavigationPropertyUndefinedRole;
    internal static EdmModelValidationRule`1<NavigationProperty> EdmNavigationProperty_BadNavigationPropertyRolesCannotBeTheSame;
    internal static EdmModelValidationRule`1<NavigationProperty> EdmNavigationProperty_BadNavigationPropertyBadFromRoleType;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_InvalidOperationMultipleEndsInAssociation;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_EndWithManyMultiplicityCannotHaveOperationsSpecified;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_EndNameAlreadyDefinedDuplicate;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_SameRoleReferredInReferentialConstraint;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_ValidateReferentialConstraint;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_InvalidPropertyInRelationshipConstraint;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_InvalidIsAbstract;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_InvalidIsPolymorphic;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_InvalidMemberNameMatchesTypeName;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_PropertyNameAlreadyDefinedDuplicate;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_PropertyNameAlreadyDefinedDuplicate_V1_1;
    internal static EdmModelValidationRule`1<ComplexType> EdmComplexType_CycleInTypeHierarchy_V1_1;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_InvalidCollectionKind;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_InvalidCollectionKind_V1_1;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_NullableComplexType;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_InvalidPropertyType;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_InvalidPropertyType_V1_1;
    internal static EdmModelValidationRule`1<EdmProperty> EdmProperty_InvalidPropertyType_V3;
    internal static EdmModelValidationRule`1<EdmModel> EdmNamespace_TypeNameAlreadyDefinedDuplicate;
    private static EdmModelSemanticValidationRules();
    private static string GetQualifiedName(INamedDataModelItem item, string qualifiedPrefix);
    private static bool AreRelationshipEndsEqual(KeyValuePair`2<AssociationSet, EntitySet> left, KeyValuePair`2<AssociationSet, EntitySet> right);
    private static bool IsReferentialConstraintReadyForValidation(AssociationType association);
    private static void IsKeyProperty(List`1<EdmProperty> roleProperties, RelationshipEndMember roleElement, Boolean& isKeyProperty, Boolean& areAllPropertiesNullable, Boolean& isAnyPropertyNullable, Boolean& isSubsetOfKeyProperties);
    private static void AddMemberNameToHashSet(INamedDataModelItem item, HashSet`1<string> memberNameList, EdmModelValidationContext context, Func`2<string, string> getErrorString);
    private static bool CheckForInheritanceCycle(T type, Func`2<T, T> getBaseType);
    private static bool IsPrimitiveTypesEqual(EdmProperty primitiveType1, EdmProperty primitiveType2);
    private static bool IsEdmSystemNamespace(string namespaceName);
    private static bool IsTypeDefinesNewConcurrencyProperties(EntityType entityType);
    private static bool TypeIsSubTypeOf(EntityType entityType, Dictionary`2<EntityType, EntitySet> baseEntitySetTypes, EntitySet& set);
    [ExtensionAttribute]
private static bool IsTypeHierarchyRoot(EntityType entityType);
    [ExtensionAttribute]
private static bool IsForeignKey(AssociationType association, double version);
}
internal static class System.Data.Entity.Core.Metadata.Edm.EdmModelSyntacticValidationRules : object {
    internal static EdmModelValidationRule`1<INamedDataModelItem> EdmModel_NameMustNotBeEmptyOrWhiteSpace;
    internal static EdmModelValidationRule`1<INamedDataModelItem> EdmModel_NameIsTooLong;
    internal static EdmModelValidationRule`1<INamedDataModelItem> EdmModel_NameIsNotAllowed;
    internal static EdmModelValidationRule`1<AssociationType> EdmAssociationType_AssociationEndMustNotBeNull;
    internal static EdmModelValidationRule`1<ReferentialConstraint> EdmAssociationConstraint_DependentEndMustNotBeNull;
    internal static EdmModelValidationRule`1<ReferentialConstraint> EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty;
    internal static EdmModelValidationRule`1<NavigationProperty> EdmNavigationProperty_AssociationMustNotBeNull;
    internal static EdmModelValidationRule`1<NavigationProperty> EdmNavigationProperty_ResultEndMustNotBeNull;
    internal static EdmModelValidationRule`1<AssociationEndMember> EdmAssociationEnd_EntityTypeMustNotBeNull;
    internal static EdmModelValidationRule`1<EntitySet> EdmEntitySet_ElementTypeMustNotBeNull;
    internal static EdmModelValidationRule`1<AssociationSet> EdmAssociationSet_ElementTypeMustNotBeNull;
    internal static EdmModelValidationRule`1<AssociationSet> EdmAssociationSet_SourceSetMustNotBeNull;
    internal static EdmModelValidationRule`1<AssociationSet> EdmAssociationSet_TargetSetMustNotBeNull;
    internal static EdmModelValidationRule`1<TypeUsage> EdmTypeReference_TypeNotValid;
    private static EdmModelSyntacticValidationRules();
    private static bool IsEdmTypeUsageValid(TypeUsage typeUsage);
    private static bool IsEdmTypeUsageValid(TypeUsage typeUsage, HashSet`1<TypeUsage> visitedValidTypeUsages);
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmModelValidationContext : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<DataModelErrorEventArgs> OnError;
    private EdmModel _model;
    private bool _validateSyntax;
    public bool ValidateSyntax { get; }
    public EdmModel Model { get; }
    public bool IsCSpace { get; }
    public EdmModelValidationContext(EdmModel model, bool validateSyntax);
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    public bool get_ValidateSyntax();
    public EdmModel get_Model();
    public bool get_IsCSpace();
    public void AddError(MetadataItem item, string propertyName, string errorMessage);
    private void RaiseDataModelValidationEvent(DataModelErrorEventArgs error);
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmModelValidationRule`1 : DataModelValidationRule`1<TItem> {
    internal EdmModelValidationRule`1(Action`2<EdmModelValidationContext, TItem> validate);
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmModelValidationVisitor : EdmModelVisitor {
    private EdmModelValidationContext _context;
    private EdmModelRuleSet _ruleSet;
    private HashSet`1<MetadataItem> _visitedItems;
    internal EdmModelValidationVisitor(EdmModelValidationContext context, EdmModelRuleSet ruleSet);
    protected internal virtual void VisitMetadataItem(MetadataItem item);
    private void EvaluateItem(MetadataItem item);
    internal void Visit(EdmModel model);
}
public class System.Data.Entity.Core.Metadata.Edm.EdmProperty : EdmMember {
    private PropertyInfo _propertyInfo;
    private Type _entityDeclaringType;
    private Func`2<object, object> _memberGetter;
    private Action`2<object, object> _memberSetter;
    internal PropertyInfo PropertyInfo { get; }
    internal Type EntityDeclaringType { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public bool Nullable { get; public set; }
    public string TypeName { get; }
    public object DefaultValue { get; internal set; }
    internal Func`2<object, object> ValueGetter { get; internal set; }
    internal Action`2<object, object> ValueSetter { get; internal set; }
    internal bool IsKeyMember { get; }
    public bool IsCollectionType { get; }
    public bool IsComplexType { get; }
    public bool IsPrimitiveType { get; }
    public bool IsEnumType { get; }
    public bool IsUnderlyingPrimitiveType { get; }
    public ComplexType ComplexType { get; }
    public PrimitiveType PrimitiveType { get; internal set; }
    public EnumType EnumType { get; }
    public PrimitiveType UnderlyingPrimitiveType { get; }
    public ConcurrencyMode ConcurrencyMode { get; public set; }
    public StoreGeneratedPattern StoreGeneratedPattern { get; public set; }
    public CollectionKind CollectionKind { get; public set; }
    public bool IsMaxLengthConstant { get; }
    public Nullable`1<int> MaxLength { get; public set; }
    public bool IsMaxLength { get; public set; }
    public bool IsFixedLengthConstant { get; }
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public bool IsUnicodeConstant { get; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public bool IsPrecisionConstant { get; }
    public Nullable`1<byte> Precision { get; public set; }
    public bool IsScaleConstant { get; }
    public Nullable`1<byte> Scale { get; public set; }
    internal EdmProperty(string name, TypeUsage typeUsage);
    internal EdmProperty(string name, TypeUsage typeUsage, PropertyInfo propertyInfo, Type entityDeclaringType);
    internal EdmProperty(string name);
    public static EdmProperty CreatePrimitive(string name, PrimitiveType primitiveType);
    public static EdmProperty CreateEnum(string name, EnumType enumType);
    public static EdmProperty CreateComplex(string name, ComplexType complexType);
    public static EdmProperty Create(string name, TypeUsage typeUsage);
    private static EdmProperty CreateProperty(string name, EdmType edmType);
    internal PropertyInfo get_PropertyInfo();
    internal Type get_EntityDeclaringType();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public string get_TypeName();
    public object get_DefaultValue();
    internal void set_DefaultValue(object value);
    internal Func`2<object, object> get_ValueGetter();
    internal void set_ValueGetter(Func`2<object, object> value);
    internal Action`2<object, object> get_ValueSetter();
    internal void set_ValueSetter(Action`2<object, object> value);
    internal bool get_IsKeyMember();
    public bool get_IsCollectionType();
    public bool get_IsComplexType();
    public bool get_IsPrimitiveType();
    public bool get_IsEnumType();
    public bool get_IsUnderlyingPrimitiveType();
    public ComplexType get_ComplexType();
    public PrimitiveType get_PrimitiveType();
    internal void set_PrimitiveType(PrimitiveType value);
    public EnumType get_EnumType();
    public PrimitiveType get_UnderlyingPrimitiveType();
    public ConcurrencyMode get_ConcurrencyMode();
    public void set_ConcurrencyMode(ConcurrencyMode value);
    public StoreGeneratedPattern get_StoreGeneratedPattern();
    public void set_StoreGeneratedPattern(StoreGeneratedPattern value);
    public CollectionKind get_CollectionKind();
    public void set_CollectionKind(CollectionKind value);
    public bool get_IsMaxLengthConstant();
    public Nullable`1<int> get_MaxLength();
    public void set_MaxLength(Nullable`1<int> value);
    public bool get_IsMaxLength();
    public void set_IsMaxLength(bool value);
    public bool get_IsFixedLengthConstant();
    public Nullable`1<bool> get_IsFixedLength();
    public void set_IsFixedLength(Nullable`1<bool> value);
    public bool get_IsUnicodeConstant();
    public Nullable`1<bool> get_IsUnicode();
    public void set_IsUnicode(Nullable`1<bool> value);
    public bool get_IsPrecisionConstant();
    public Nullable`1<byte> get_Precision();
    public void set_Precision(Nullable`1<byte> value);
    public bool get_IsScaleConstant();
    public Nullable`1<byte> get_Scale();
    public void set_Scale(Nullable`1<byte> value);
    public void SetMetadataProperties(IEnumerable`1<MetadataProperty> metadataProperties);
}
public class System.Data.Entity.Core.Metadata.Edm.EdmSchemaError : EdmError {
    private int _errorCode;
    private EdmSchemaErrorSeverity _severity;
    private string _schemaLocation;
    private int _line;
    private int _column;
    private string _stackTrace;
    public int ErrorCode { get; }
    public EdmSchemaErrorSeverity Severity { get; public set; }
    public int Line { get; }
    public int Column { get; }
    public string SchemaLocation { get; }
    public string SchemaName { get; }
    public string StackTrace { get; }
    public EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, Exception exception);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, string schemaLocation, int line, int column);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, string schemaLocation, int line, int column, Exception exception);
    private void Initialize(int errorCode, EdmSchemaErrorSeverity severity, string schemaLocation, int line, int column, Exception exception);
    public virtual string ToString();
    public int get_ErrorCode();
    public EdmSchemaErrorSeverity get_Severity();
    public void set_Severity(EdmSchemaErrorSeverity value);
    public int get_Line();
    public int get_Column();
    public string get_SchemaLocation();
    public string get_SchemaName();
    public string get_StackTrace();
    private static string GetNameFromSchemaLocation(string schemaLocation);
}
public enum System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity : Enum {
    public int value__;
    public static EdmSchemaErrorSeverity Warning;
    public static EdmSchemaErrorSeverity Error;
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmSerializationVisitor : EdmModelVisitor {
    private EdmXmlSchemaWriter _schemaWriter;
    public EdmSerializationVisitor(XmlWriter xmlWriter, double edmVersion, bool serializeDefaultNullability);
    public EdmSerializationVisitor(EdmXmlSchemaWriter schemaWriter);
    public void Visit(EdmModel edmModel, string modelNamespace);
    public void Visit(EdmModel edmModel, string provider, string providerManifestToken);
    public void Visit(EdmModel edmModel, string namespaceName, string provider, string providerManifestToken);
    protected virtual void VisitEdmEntityContainer(EntityContainer item);
    protected internal virtual void VisitEdmFunction(EdmFunction item);
    protected internal virtual void VisitFunctionParameter(FunctionParameter functionParameter);
    protected internal virtual void VisitFunctionReturnParameter(FunctionParameter returnParameter);
    protected internal virtual void VisitCollectionType(CollectionType collectionType);
    protected virtual void VisitEdmAssociationSet(AssociationSet item);
    protected internal virtual void VisitEdmEntitySet(EntitySet item);
    protected internal virtual void VisitFunctionImport(EdmFunction functionImport);
    protected internal virtual void VisitFunctionImportParameter(FunctionParameter parameter);
    private void VisitFunctionImportReturnParameters(EdmFunction functionImport);
    protected internal virtual void VisitRowType(RowType rowType);
    protected internal virtual void VisitEdmEntityType(EntityType item);
    protected virtual void VisitEdmEnumType(EnumType item);
    protected virtual void VisitEdmEnumTypeMember(EnumMember item);
    protected virtual void VisitKeyProperties(EntityType entityType, IList`1<EdmProperty> properties);
    protected internal virtual void VisitEdmProperty(EdmProperty item);
    protected virtual void VisitEdmNavigationProperty(NavigationProperty item);
    protected virtual void VisitComplexType(ComplexType item);
    protected internal virtual void VisitEdmAssociationType(AssociationType item);
    protected virtual void VisitEdmAssociationEnd(RelationshipEndMember item);
    protected virtual void VisitEdmAssociationConstraint(ReferentialConstraint item);
    private void InternalVisitEdmEntityType(EntityType item);
    private void InternalVisitEdmAssociationType(AssociationType item);
    private static void AppendSchemaErrors(StringBuilder builder, MetadataItem item);
    private void AppendMetadataItem(StringBuilder builder, T item, Action`2<EdmSerializationVisitor, T> visitAction);
    private void WriteComment(string comment);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.EdmType : GlobalItem {
    private CollectionType _collectionType;
    private string _name;
    private string _namespace;
    private EdmType _baseType;
    [CompilerGeneratedAttribute]
private string <CacheIdentity>k__BackingField;
    internal string CacheIdentity { get; private set; }
    private string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.Identity { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
public string NamespaceName { get; internal set; }
    [MetadataPropertyAttribute("1", "False")]
public bool Abstract { get; internal set; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType BaseType { get; internal set; }
    public string FullName { get; }
    internal Type ClrType { get; }
    internal EdmType(string name, string namespaceName, DataSpace dataSpace);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.EdmType/<SafeTraverseHierarchy>d__0`1")]
internal static IEnumerable`1<T> SafeTraverseHierarchy(T startFrom);
    [CompilerGeneratedAttribute]
internal string get_CacheIdentity();
    [CompilerGeneratedAttribute]
private void set_CacheIdentity(string value);
    private sealed virtual override string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.get_Identity();
    internal virtual string get_Identity();
    public virtual string get_Name();
    internal virtual void set_Name(string value);
    public virtual string get_NamespaceName();
    internal virtual void set_NamespaceName(string value);
    public bool get_Abstract();
    internal void set_Abstract(bool value);
    public virtual EdmType get_BaseType();
    internal virtual void set_BaseType(EdmType value);
    private void CheckBaseType(EdmType baseType);
    public virtual string get_FullName();
    internal virtual Type get_ClrType();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal static string CreateEdmTypeIdentity(string namespaceName, string name);
    internal static void Initialize(EdmType type, string name, string namespaceName, DataSpace dataSpace, bool isAbstract, EdmType baseType);
    public virtual string ToString();
    public CollectionType GetCollectionType();
    internal virtual bool IsSubtypeOf(EdmType otherType);
    internal virtual bool IsBaseTypeOf(EdmType otherType);
    internal virtual bool IsAssignableFrom(EdmType otherType);
    internal virtual void SetReadOnly();
    internal virtual IEnumerable`1<FacetDescription> GetAssociatedFacetDescriptions();
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmValidator : object {
    [CompilerGeneratedAttribute]
private bool <SkipReadOnlyItems>k__BackingField;
    internal bool SkipReadOnlyItems { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_SkipReadOnlyItems();
    [CompilerGeneratedAttribute]
internal void set_SkipReadOnlyItems(bool value);
    public void Validate(IEnumerable`1<T> items, List`1<EdmItemError> ospaceErrors);
    protected virtual void OnValidationError(ValidationErrorEventArgs e);
    private void AddError(List`1<EdmItemError> errors, EdmItemError newError);
    protected virtual IEnumerable`1<EdmItemError> CustomValidate(MetadataItem item);
    private void InternalValidate(MetadataItem item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateCollectionType(CollectionType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateComplexType(ComplexType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateEdmType(EdmType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateEntityType(EntityType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateFacet(Facet item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateItem(MetadataItem item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateEdmMember(EdmMember item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateMetadataProperty(MetadataProperty item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateNavigationProperty(NavigationProperty item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidatePrimitiveType(PrimitiveType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateEdmProperty(EdmProperty item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateRefType(RefType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateSimpleType(SimpleType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateStructuralType(StructuralType item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
    private void ValidateTypeUsage(TypeUsage item, List`1<EdmItemError> errors, HashSet`1<MetadataItem> validatedItems);
}
internal class System.Data.Entity.Core.Metadata.Edm.EdmXmlSchemaWriter : XmlSchemaWriter {
    private bool _serializeDefaultNullability;
    private IDbDependencyResolver _resolver;
    private static string AnnotationNamespacePrefix;
    private static string CustomAnnotationNamespacePrefix;
    private static string StoreSchemaGenNamespacePrefix;
    private static string DataServicesPrefix;
    private static string DataServicesNamespace;
    private static string DataServicesMimeTypeAttribute;
    private static string DataServicesHasStreamAttribute;
    private static string DataServicesEntityPropertyMappingAttribute;
    private static String[] _syndicationItemToTargetPath;
    private static String[] _syndicationTextContentKindToString;
    internal EdmXmlSchemaWriter(XmlWriter xmlWriter, double edmVersion, bool serializeDefaultNullability, IDbDependencyResolver resolver);
    private static EdmXmlSchemaWriter();
    private static string SyndicationItemPropertyToString(object value);
    private static string SyndicationTextContentKindToString(object value);
    internal virtual void WriteSchemaElementHeader(string schemaNamespace);
    internal virtual void WriteSchemaElementHeader(string schemaNamespace, string provider, string providerManifestToken, bool writeStoreSchemaGenNamespace);
    private void WritePolymorphicTypeAttributes(EdmType edmType);
    public virtual void WriteFunctionElementHeader(EdmFunction function);
    public virtual void WriteFunctionParameterHeader(FunctionParameter functionParameter);
    internal virtual void WriteFunctionReturnTypeElementHeader();
    internal void WriteEntityTypeElementHeader(EntityType entityType);
    internal void WriteEnumTypeElementHeader(EnumType enumType);
    internal void WriteEnumTypeMemberElementHeader(EnumMember enumTypeMember);
    private static void AddAttributeAnnotation(EdmProperty property, Attribute a);
    internal void WriteComplexTypeElementHeader(ComplexType complexType);
    internal virtual void WriteCollectionTypeElementHeader();
    internal virtual void WriteRowTypeElementHeader();
    internal void WriteAssociationTypeElementHeader(AssociationType associationType);
    internal void WriteAssociationEndElementHeader(RelationshipEndMember associationEnd);
    internal void WriteOperationActionElement(string elementName, OperationAction operationAction);
    internal void WriteReferentialConstraintElementHeader();
    internal void WriteDeclaredKeyPropertiesElementHeader();
    internal void WriteDeclaredKeyPropertyRefElement(EdmProperty property);
    internal void WritePropertyElementHeader(EdmProperty property);
    private static string GetTypeReferenceName(EdmProperty property);
    internal void WriteNavigationPropertyElementHeader(NavigationProperty member);
    internal void WriteReferentialConstraintRoleElement(string roleName, RelationshipEndMember edmAssociationEnd, IEnumerable`1<EdmProperty> properties);
    internal virtual void WriteEntityContainerElementHeader(EntityContainer container);
    internal void WriteAssociationSetElementHeader(AssociationSet associationSet);
    internal void WriteAssociationSetEndElement(EntitySet end, string roleName);
    internal virtual void WriteEntitySetElementHeader(EntitySet entitySet);
    internal virtual void WriteFunctionImportElementHeader(EdmFunction functionImport);
    internal virtual void WriteFunctionImportReturnTypeAttributes(FunctionParameter returnParameter, EntitySet entitySet, bool inline);
    internal virtual void WriteFunctionImportParameterElementHeader(FunctionParameter parameter);
    internal void WriteDefiningQuery(EntitySet entitySet);
    internal EdmXmlSchemaWriter Replicate(XmlWriter xmlWriter);
    internal void WriteExtendedProperties(MetadataItem item);
    private static bool TrySplitExtendedMetadataPropertyName(string name, String& xmlNamespaceUri, String& attributeName);
    private static string GetTypeName(EdmType type);
}
public class System.Data.Entity.Core.Metadata.Edm.EntityContainer : GlobalItem {
    private string _name;
    private ReadOnlyMetadataCollection`1<EntitySetBase> _baseEntitySets;
    private ReadOnlyMetadataCollection`1<EdmFunction> _functionImports;
    private object _baseEntitySetsLock;
    private ReadOnlyMetadataCollection`1<AssociationSet> _associationSetsCache;
    private ReadOnlyMetadataCollection`1<EntitySet> _entitySetsCache;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; public set; }
    [MetadataPropertyAttribute("4", "True")]
public ReadOnlyMetadataCollection`1<EntitySetBase> BaseEntitySets { get; }
    public ReadOnlyMetadataCollection`1<AssociationSet> AssociationSets { get; }
    public ReadOnlyMetadataCollection`1<EntitySet> EntitySets { get; }
    [MetadataPropertyAttribute("18", "True")]
public ReadOnlyMetadataCollection`1<EdmFunction> FunctionImports { get; }
    public EntityContainer(string name, DataSpace dataSpace);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ReadOnlyMetadataCollection`1<EntitySetBase> get_BaseEntitySets();
    public ReadOnlyMetadataCollection`1<AssociationSet> get_AssociationSets();
    private void ResetAssociationSetsCache(object sender, EventArgs e);
    public ReadOnlyMetadataCollection`1<EntitySet> get_EntitySets();
    private void ResetEntitySetsCache(object sender, EventArgs e);
    public ReadOnlyMetadataCollection`1<EdmFunction> get_FunctionImports();
    internal virtual void SetReadOnly();
    public EntitySet GetEntitySetByName(string name, bool ignoreCase);
    public bool TryGetEntitySetByName(string name, bool ignoreCase, EntitySet& entitySet);
    public RelationshipSet GetRelationshipSetByName(string name, bool ignoreCase);
    public bool TryGetRelationshipSetByName(string name, bool ignoreCase, RelationshipSet& relationshipSet);
    public virtual string ToString();
    public void AddEntitySetBase(EntitySetBase entitySetBase);
    public void RemoveEntitySetBase(EntitySetBase entitySetBase);
    public void AddFunctionImport(EdmFunction function);
    public static EntityContainer Create(string name, DataSpace dataSpace, IEnumerable`1<EntitySetBase> entitySets, IEnumerable`1<EdmFunction> functionImports, IEnumerable`1<MetadataProperty> metadataProperties);
    internal virtual void NotifyItemIdentityChanged(EntitySetBase item, string initialIdentity);
}
public class System.Data.Entity.Core.Metadata.Edm.EntitySet : EntitySetBase {
    private ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> _foreignKeyDependents;
    private ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> _foreignKeyPrincipals;
    private ReadOnlyCollection`1<AssociationSet> _associationSets;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _hasForeignKeyRelationships;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _hasIndependentRelationships;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public EntityType ElementType { get; }
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyDependents { get; }
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyPrincipals { get; }
    internal ReadOnlyCollection`1<AssociationSet> AssociationSets { get; }
    internal bool HasForeignKeyRelationships { get; }
    internal bool HasIndependentRelationships { get; }
    internal EntitySet(string name, string schema, string table, string definingQuery, EntityType entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual EntityType get_ElementType();
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyDependents();
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyPrincipals();
    internal ReadOnlyCollection`1<AssociationSet> get_AssociationSets();
    internal bool get_HasForeignKeyRelationships();
    internal bool get_HasIndependentRelationships();
    private void InitializeForeignKeyLists();
    public static EntitySet Create(string name, string schema, string table, string definingQuery, EntityType entityType, IEnumerable`1<MetadataProperty> metadataProperties);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.EntitySetBase : MetadataItem {
    private EntityContainer _entityContainer;
    private string _name;
    private EntityTypeBase _elementType;
    private string _table;
    private string _schema;
    private string _definingQuery;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    private string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.Identity { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string DefiningQuery { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; public set; }
    public EntityContainer EntityContainer { get; }
    [MetadataPropertyAttribute("5", "False")]
public EntityTypeBase ElementType { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
public string Table { get; public set; }
    [MetadataPropertyAttribute("12", "False")]
public string Schema { get; public set; }
    internal EntitySetBase(string name, string schema, string table, string definingQuery, EntityTypeBase entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    private sealed virtual override string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.get_Identity();
    internal virtual string get_Identity();
    public string get_DefiningQuery();
    internal void set_DefiningQuery(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual EntityContainer get_EntityContainer();
    public EntityTypeBase get_ElementType();
    internal void set_ElementType(EntityTypeBase value);
    public string get_Table();
    public void set_Table(string value);
    public string get_Schema();
    public void set_Schema(string value);
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal void ChangeEntityContainerWithoutCollectionFixup(EntityContainer newEntityContainer);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Metadata.Edm.EntitySetBaseCollection : MetadataCollection`1<EntitySetBase> {
    private EntityContainer _entityContainer;
    public EntitySetBase Item { get; public set; }
    public EntitySetBase Item { get; public set; }
    internal EntitySetBaseCollection(EntityContainer entityContainer);
    internal EntitySetBaseCollection(EntityContainer entityContainer, IEnumerable`1<EntitySetBase> items);
    public virtual EntitySetBase get_Item(int index);
    public virtual void set_Item(int index, EntitySetBase value);
    public virtual EntitySetBase get_Item(string identity);
    public virtual void set_Item(string identity, EntitySetBase value);
    public virtual void Add(EntitySetBase item);
    private static void ThrowIfItHasEntityContainer(EntitySetBase entitySet, string argumentName);
}
public class System.Data.Entity.Core.Metadata.Edm.EntityType : EntityTypeBase {
    private ReadOnlyMetadataCollection`1<EdmProperty> _properties;
    private RefType _referenceType;
    private RowType _keyRow;
    private List`1<ForeignKeyBuilder> _foreignKeyBuilders;
    private object _navigationPropertiesCacheLock;
    private ReadOnlyMetadataCollection`1<NavigationProperty> _navigationPropertiesCache;
    internal IEnumerable`1<ForeignKeyBuilder> ForeignKeyBuilders { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<NavigationProperty> DeclaredNavigationProperties { get; }
    public ReadOnlyMetadataCollection`1<NavigationProperty> NavigationProperties { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> DeclaredProperties { get; }
    public ReadOnlyMetadataCollection`1<EdmMember> DeclaredMembers { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    internal EntityType(string name, string namespaceName, DataSpace dataSpace);
    internal EntityType(string name, string namespaceName, DataSpace dataSpace, IEnumerable`1<string> keyMemberNames, IEnumerable`1<EdmMember> members);
    internal IEnumerable`1<ForeignKeyBuilder> get_ForeignKeyBuilders();
    internal void RemoveForeignKey(ForeignKeyBuilder foreignKeyBuilder);
    internal void AddForeignKey(ForeignKeyBuilder foreignKeyBuilder);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    public ReadOnlyMetadataCollection`1<NavigationProperty> get_DeclaredNavigationProperties();
    public ReadOnlyMetadataCollection`1<NavigationProperty> get_NavigationProperties();
    private void ResetNavigationProperties(object sender, EventArgs e);
    public ReadOnlyMetadataCollection`1<EdmProperty> get_DeclaredProperties();
    public ReadOnlyMetadataCollection`1<EdmMember> get_DeclaredMembers();
    public virtual ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    public RefType GetReferenceType();
    internal RowType GetKeyRowType();
    internal bool TryGetNavigationProperty(string relationshipType, string fromName, string toName, NavigationProperty& navigationProperty);
    public static EntityType Create(string name, string namespaceName, DataSpace dataSpace, IEnumerable`1<string> keyMemberNames, IEnumerable`1<EdmMember> members, IEnumerable`1<MetadataProperty> metadataProperties);
    public static EntityType Create(string name, string namespaceName, DataSpace dataSpace, EntityType baseType, IEnumerable`1<string> keyMemberNames, IEnumerable`1<EdmMember> members, IEnumerable`1<MetadataProperty> metadataProperties);
    public void AddNavigationProperty(NavigationProperty property);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.EntityTypeBase : StructuralType {
    private ReadOnlyMetadataCollection`1<EdmMember> _keyMembers;
    private object _keyPropertiesSync;
    private ReadOnlyMetadataCollection`1<EdmProperty> _keyProperties;
    private String[] _keyMemberNames;
    [MetadataPropertyAttribute("24", "True")]
public ReadOnlyMetadataCollection`1<EdmMember> KeyMembers { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> KeyProperties { get; }
    internal String[] KeyMemberNames { get; }
    internal EntityTypeBase(string name, string namespaceName, DataSpace dataSpace);
    public virtual ReadOnlyMetadataCollection`1<EdmMember> get_KeyMembers();
    public virtual ReadOnlyMetadataCollection`1<EdmProperty> get_KeyProperties();
    internal void ResetKeyPropertiesCache();
    private void KeyMembersSourceAccessedEventHandler(object sender, EventArgs e);
    internal virtual String[] get_KeyMemberNames();
    public void AddKeyMember(EdmMember member);
    internal virtual void SetReadOnly();
    internal static void CheckAndAddMembers(IEnumerable`1<EdmMember> members, EntityType entityType);
    internal void CheckAndAddKeyMembers(IEnumerable`1<string> keyMembers);
    public virtual void RemoveMember(EdmMember member);
    internal virtual void NotifyItemIdentityChanged(EdmMember item, string initialIdentity);
}
public class System.Data.Entity.Core.Metadata.Edm.EnumMember : MetadataItem {
    private string _name;
    private object _value;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("26", "False")]
public object Value { get; }
    internal string Identity { get; }
    internal EnumMember(string name, object value);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public string get_Name();
    public object get_Value();
    internal virtual string get_Identity();
    public virtual string ToString();
    [CLSCompliantAttribute("False")]
public static EnumMember Create(string name, sbyte value, IEnumerable`1<MetadataProperty> metadataProperties);
    public static EnumMember Create(string name, byte value, IEnumerable`1<MetadataProperty> metadataProperties);
    public static EnumMember Create(string name, short value, IEnumerable`1<MetadataProperty> metadataProperties);
    public static EnumMember Create(string name, int value, IEnumerable`1<MetadataProperty> metadataProperties);
    public static EnumMember Create(string name, long value, IEnumerable`1<MetadataProperty> metadataProperties);
    private static EnumMember CreateInternal(string name, object value, IEnumerable`1<MetadataProperty> metadataProperties);
}
public class System.Data.Entity.Core.Metadata.Edm.EnumType : SimpleType {
    private ReadOnlyMetadataCollection`1<EnumMember> _members;
    private PrimitiveType _underlyingType;
    private bool _isFlags;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("16", "True")]
public ReadOnlyMetadataCollection`1<EnumMember> Members { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsFlags { get; internal set; }
    [MetadataPropertyAttribute("26", "False")]
public PrimitiveType UnderlyingType { get; internal set; }
    internal EnumType(string name, string namespaceName, PrimitiveType underlyingType, bool isFlags, DataSpace dataSpace);
    internal EnumType(Type clrType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<EnumMember> get_Members();
    public bool get_IsFlags();
    internal void set_IsFlags(bool value);
    public PrimitiveType get_UnderlyingType();
    internal void set_UnderlyingType(PrimitiveType value);
    internal virtual void SetReadOnly();
    internal void AddMember(EnumMember enumMember);
    public static EnumType Create(string name, string namespaceName, PrimitiveType underlyingType, bool isFlags, IEnumerable`1<EnumMember> members, IEnumerable`1<MetadataProperty> metadataProperties);
}
internal class System.Data.Entity.Core.Metadata.Edm.ExpensiveOSpaceLoader : object {
    public virtual Dictionary`2<string, EdmType> LoadTypesExpensiveWay(Assembly assembly);
    public virtual AssociationType GetRelationshipTypeExpensiveWay(Type entityClrType, string relationshipName);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.ExpensiveOSpaceLoader/<GetAllRelationshipTypesExpensiveWay>d__2")]
public virtual IEnumerable`1<AssociationType> GetAllRelationshipTypesExpensiveWay(Assembly assembly);
}
[DebuggerDisplayAttribute("{Name,nq}={Value}")]
public class System.Data.Entity.Core.Metadata.Edm.Facet : MetadataItem {
    private FacetDescription _facetDescription;
    private object _value;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public FacetDescription Description { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType FacetType { get; }
    [MetadataPropertyAttribute("System.Object", "False")]
public object Value { get; }
    internal string Identity { get; }
    public bool IsUnbounded { get; }
    private Facet(FacetDescription facetDescription, object value);
    internal static Facet Create(FacetDescription facetDescription, object value);
    internal static Facet Create(FacetDescription facetDescription, object value, bool bypassKnownValues);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public FacetDescription get_Description();
    public virtual string get_Name();
    public EdmType get_FacetType();
    public virtual object get_Value();
    internal virtual string get_Identity();
    public bool get_IsUnbounded();
    public virtual string ToString();
}
public class System.Data.Entity.Core.Metadata.Edm.FacetDescription : object {
    private string _facetName;
    private EdmType _facetType;
    private Nullable`1<int> _minValue;
    private Nullable`1<int> _maxValue;
    private object _defaultValue;
    private bool _isConstant;
    private Facet _defaultValueFacet;
    private Facet _nullValueFacet;
    private Facet[] _valueCache;
    private static object _notInitializedSentinel;
    public string FacetName { get; }
    public EdmType FacetType { get; }
    public Nullable`1<int> MinValue { get; }
    public Nullable`1<int> MaxValue { get; }
    public object DefaultValue { get; }
    public bool IsConstant { get; }
    public bool IsRequired { get; }
    internal Facet DefaultValueFacet { get; }
    internal Facet NullValueFacet { get; }
    internal FacetDescription(string facetName, EdmType facetType, Nullable`1<int> minValue, Nullable`1<int> maxValue, object defaultValue, bool isConstant, string declaringTypeName);
    internal FacetDescription(string facetName, EdmType facetType, Nullable`1<int> minValue, Nullable`1<int> maxValue, object defaultValue);
    private static FacetDescription();
    public virtual string get_FacetName();
    public EdmType get_FacetType();
    public Nullable`1<int> get_MinValue();
    public Nullable`1<int> get_MaxValue();
    public object get_DefaultValue();
    public virtual bool get_IsConstant();
    public bool get_IsRequired();
    internal Facet get_DefaultValueFacet();
    internal Facet get_NullValueFacet();
    public virtual string ToString();
    internal Facet GetBooleanFacet(bool value);
    internal static bool IsNumericType(EdmType facetType);
    private static void UpdateMinMaxValueForConstant(string facetName, EdmType facetType, Nullable`1& minValue, Nullable`1& maxValue, object defaultValue);
    private void Validate(string declaringTypeName);
}
internal class System.Data.Entity.Core.Metadata.Edm.FacetValueContainer`1 : ValueType {
    private T _value;
    private bool _hasValue;
    private bool _isUnbounded;
    unknown T Value {internal set; }
    internal bool HasValue { get; }
    internal void set_Value(T value);
    private void SetUnbounded();
    public static FacetValueContainer`1<T> op_Implicit(Unbounded unbounded);
    public static FacetValueContainer`1<T> op_Implicit(T value);
    internal object GetValueAsObject();
    internal bool get_HasValue();
}
internal class System.Data.Entity.Core.Metadata.Edm.FacetValues : object {
    private FacetValueContainer`1<Nullable`1<bool>> _nullable;
    private FacetValueContainer`1<Nullable`1<int>> _maxLength;
    private FacetValueContainer`1<Nullable`1<bool>> _unicode;
    private FacetValueContainer`1<Nullable`1<bool>> _fixedLength;
    private FacetValueContainer`1<Nullable`1<byte>> _precision;
    private FacetValueContainer`1<Nullable`1<byte>> _scale;
    private object _defaultValue;
    private FacetValueContainer`1<string> _collation;
    private FacetValueContainer`1<Nullable`1<int>> _srid;
    private FacetValueContainer`1<Nullable`1<bool>> _isStrict;
    private FacetValueContainer`1<Nullable`1<StoreGeneratedPattern>> _storeGeneratedPattern;
    private FacetValueContainer`1<Nullable`1<ConcurrencyMode>> _concurrencyMode;
    private FacetValueContainer`1<Nullable`1<CollectionKind>> _collectionKind;
    unknown FacetValueContainer`1<Nullable`1<bool>> Nullable {internal set; }
    unknown FacetValueContainer`1<Nullable`1<int>> MaxLength {internal set; }
    unknown FacetValueContainer`1<Nullable`1<bool>> Unicode {internal set; }
    unknown FacetValueContainer`1<Nullable`1<bool>> FixedLength {internal set; }
    unknown FacetValueContainer`1<Nullable`1<byte>> Precision {internal set; }
    unknown FacetValueContainer`1<Nullable`1<byte>> Scale {internal set; }
    unknown object DefaultValue {internal set; }
    unknown FacetValueContainer`1<string> Collation {internal set; }
    unknown FacetValueContainer`1<Nullable`1<int>> Srid {internal set; }
    unknown FacetValueContainer`1<Nullable`1<bool>> IsStrict {internal set; }
    unknown FacetValueContainer`1<Nullable`1<StoreGeneratedPattern>> StoreGeneratedPattern {internal set; }
    unknown FacetValueContainer`1<Nullable`1<ConcurrencyMode>> ConcurrencyMode {internal set; }
    unknown FacetValueContainer`1<Nullable`1<CollectionKind>> CollectionKind {internal set; }
    internal static FacetValues NullFacetValues { get; }
    internal void set_Nullable(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_MaxLength(FacetValueContainer`1<Nullable`1<int>> value);
    internal void set_Unicode(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_FixedLength(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_Precision(FacetValueContainer`1<Nullable`1<byte>> value);
    internal void set_Scale(FacetValueContainer`1<Nullable`1<byte>> value);
    internal void set_DefaultValue(object value);
    internal void set_Collation(FacetValueContainer`1<string> value);
    internal void set_Srid(FacetValueContainer`1<Nullable`1<int>> value);
    internal void set_IsStrict(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_StoreGeneratedPattern(FacetValueContainer`1<Nullable`1<StoreGeneratedPattern>> value);
    internal void set_ConcurrencyMode(FacetValueContainer`1<Nullable`1<ConcurrencyMode>> value);
    internal void set_CollectionKind(FacetValueContainer`1<Nullable`1<CollectionKind>> value);
    internal bool TryGetFacet(FacetDescription description, Facet& facet);
    public static FacetValues Create(IEnumerable`1<Facet> facets);
    internal static FacetValues get_NullFacetValues();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Metadata.Edm.FilteredReadOnlyMetadataCollection`2 : ReadOnlyMetadataCollection`1<TDerived> {
    private ReadOnlyMetadataCollection`1<TBase> _source;
    private Predicate`1<TBase> _predicate;
    public TDerived Item { get; }
    private TBase System.Data.Entity.Core.Metadata.Edm.IBaseList<TBase>.Item { get; }
    private TBase System.Data.Entity.Core.Metadata.Edm.IBaseList<TBase>.Item { get; }
    internal FilteredReadOnlyMetadataCollection`2(ReadOnlyMetadataCollection`1<TBase> collection, Predicate`1<TBase> predicate);
    public virtual TDerived get_Item(string identity);
    public virtual TDerived GetValue(string identity, bool ignoreCase);
    public virtual bool Contains(string identity);
    public virtual bool TryGetValue(string identity, bool ignoreCase, TDerived& item);
    internal static List`1<TDerived> FilterCollection(ReadOnlyMetadataCollection`1<TBase> collection, Predicate`1<TBase> predicate);
    public virtual int IndexOf(TDerived value);
    private sealed virtual override TBase System.Data.Entity.Core.Metadata.Edm.IBaseList<TBase>.get_Item(string identity);
    private sealed virtual override TBase System.Data.Entity.Core.Metadata.Edm.IBaseList<TBase>.get_Item(int index);
    private sealed virtual override int System.Data.Entity.Core.Metadata.Edm.IBaseList<TBase>.IndexOf(TBase item);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
}
internal class System.Data.Entity.Core.Metadata.Edm.ForeignKeyBuilder : MetadataItem {
    private static string SelfRefSuffix;
    private EdmModel _database;
    private AssociationType _associationType;
    private AssociationSet _associationSet;
    public string Name { get; public set; }
    public EntityType PrincipalTable { get; public set; }
    public IEnumerable`1<EdmProperty> DependentColumns { get; public set; }
    public OperationAction DeleteAction { get; public set; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    private string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.Identity { get; }
    internal string Identity { get; }
    public ForeignKeyBuilder(EdmModel database, string name);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public virtual EntityType get_PrincipalTable();
    public virtual void set_PrincipalTable(EntityType value);
    public virtual void SetOwner(EntityType owner);
    public virtual IEnumerable`1<EdmProperty> get_DependentColumns();
    public virtual void set_DependentColumns(IEnumerable`1<EdmProperty> value);
    public OperationAction get_DeleteAction();
    public void set_DeleteAction(OperationAction value);
    private void SetMultiplicities();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    private sealed virtual override string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.get_Identity();
    internal virtual string get_Identity();
}
public class System.Data.Entity.Core.Metadata.Edm.FunctionParameter : MetadataItem {
    internal static Func`2<FunctionParameter, SafeLink`1<EdmFunction>> DeclaringFunctionLinker;
    private SafeLink`1<EdmFunction> _declaringFunction;
    private TypeUsage _typeUsage;
    private string _name;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("25", "False")]
public ParameterMode Mode { get; }
    private string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.Identity { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; public set; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    public string TypeName { get; }
    public bool IsMaxLengthConstant { get; }
    public Nullable`1<int> MaxLength { get; }
    public bool IsMaxLength { get; }
    public bool IsPrecisionConstant { get; }
    public Nullable`1<byte> Precision { get; }
    public bool IsScaleConstant { get; }
    public Nullable`1<byte> Scale { get; }
    public EdmFunction DeclaringFunction { get; }
    internal FunctionParameter(string name, TypeUsage typeUsage, ParameterMode parameterMode);
    private static FunctionParameter();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ParameterMode get_Mode();
    private sealed virtual override string System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem.get_Identity();
    internal virtual string get_Identity();
    public sealed virtual string get_Name();
    public void set_Name(string value);
    private void SetName(string name);
    public TypeUsage get_TypeUsage();
    public string get_TypeName();
    public bool get_IsMaxLengthConstant();
    public Nullable`1<int> get_MaxLength();
    public bool get_IsMaxLength();
    public bool get_IsPrecisionConstant();
    public Nullable`1<byte> get_Precision();
    public bool get_IsScaleConstant();
    public Nullable`1<byte> get_Scale();
    public EdmFunction get_DeclaringFunction();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    public static FunctionParameter Create(string name, EdmType edmType, ParameterMode parameterMode);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.GlobalItem : MetadataItem {
    [MetadataPropertyAttribute("System.Data.Entity.Core.Metadata.Edm.DataSpace", "False")]
internal DataSpace DataSpace { get; internal set; }
    internal GlobalItem(MetadataFlags flags);
    internal virtual DataSpace get_DataSpace();
    internal virtual void set_DataSpace(DataSpace value);
}
internal static class System.Data.Entity.Core.Metadata.Edm.Helper : object {
    internal static EdmMember[] EmptyArrayEdmProperty;
    private static Dictionary`2<PrimitiveTypeKind, Int64[]> _enumUnderlyingTypeRanges;
    internal static ReadOnlyCollection`1<KeyValuePair`2<string, object>> EmptyKeyValueStringObjectList;
    internal static ReadOnlyCollection`1<string> EmptyStringList;
    internal static ReadOnlyCollection`1<FacetDescription> EmptyFacetDescriptionEnumerable;
    internal static ReadOnlyCollection`1<EdmFunction> EmptyEdmFunctionReadOnlyCollection;
    internal static ReadOnlyCollection`1<PrimitiveType> EmptyPrimitiveTypeReadOnlyCollection;
    internal static KeyValuePair`2[] EmptyKeyValueStringObjectArray;
    internal static char PeriodSymbol;
    internal static char CommaSymbol;
    private static Helper();
    internal static string GetAttributeValue(XPathNavigator nav, string attributeName);
    internal static object GetTypedAttributeValue(XPathNavigator nav, string attributeName, Type clrType);
    internal static FacetDescription GetFacet(IEnumerable`1<FacetDescription> facetCollection, string facetName);
    internal static bool IsAssignableFrom(EdmType firstType, EdmType secondType);
    internal static bool IsSubtypeOf(EdmType firstType, EdmType secondType);
    internal static IList GetAllStructuralMembers(EdmType edmType);
    internal static AssociationEndMember GetEndThatShouldBeMappedToKey(AssociationType associationType);
    internal static string GetCommaDelimitedString(IEnumerable`1<string> stringList);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.Helper/<Concat>d__9`1")]
internal static IEnumerable`1<T> Concat(IEnumerable`1[] sources);
    internal static void DisposeXmlReaders(IEnumerable`1<XmlReader> xmlReaders);
    internal static bool IsStructuralType(EdmType type);
    internal static bool IsCollectionType(GlobalItem item);
    internal static bool IsEntityType(EdmType type);
    internal static bool IsComplexType(EdmType type);
    internal static bool IsPrimitiveType(EdmType type);
    internal static bool IsRefType(GlobalItem item);
    internal static bool IsRowType(GlobalItem item);
    internal static bool IsAssociationType(EdmType type);
    internal static bool IsRelationshipType(EdmType type);
    internal static bool IsEdmProperty(EdmMember member);
    internal static bool IsRelationshipEndMember(EdmMember member);
    internal static bool IsAssociationEndMember(EdmMember member);
    internal static bool IsNavigationProperty(EdmMember member);
    internal static bool IsEntityTypeBase(EdmType edmType);
    internal static bool IsTransientType(EdmType edmType);
    internal static bool IsAssociationSet(EntitySetBase entitySetBase);
    internal static bool IsEntitySet(EntitySetBase entitySetBase);
    internal static bool IsRelationshipSet(EntitySetBase entitySetBase);
    internal static bool IsEntityContainer(GlobalItem item);
    internal static bool IsEdmFunction(GlobalItem item);
    internal static string GetFileNameFromUri(Uri uri);
    internal static bool IsEnumType(EdmType edmType);
    internal static bool IsUnboundedFacetValue(Facet facet);
    internal static bool IsVariableFacetValue(Facet facet);
    internal static bool IsScalarType(EdmType edmType);
    internal static bool IsHierarchyIdType(PrimitiveType type);
    internal static bool IsSpatialType(PrimitiveType type);
    internal static bool IsSpatialType(EdmType type, Boolean& isGeographic);
    internal static bool IsGeographicType(PrimitiveType type);
    internal static bool AreSameSpatialUnionType(PrimitiveType firstType, PrimitiveType secondType);
    internal static bool IsGeographicTypeKind(PrimitiveTypeKind kind);
    internal static bool IsGeometricType(PrimitiveType type);
    internal static bool IsGeometricTypeKind(PrimitiveTypeKind kind);
    internal static bool IsStrongSpatialTypeKind(PrimitiveTypeKind kind);
    private static bool IsStrongGeometricTypeKind(PrimitiveTypeKind kind);
    private static bool IsStrongGeographicTypeKind(PrimitiveTypeKind kind);
    internal static bool IsHierarchyIdType(TypeUsage type);
    internal static bool IsSpatialType(TypeUsage type);
    internal static bool IsSpatialType(TypeUsage type, PrimitiveTypeKind& spatialType);
    internal static string ToString(ParameterDirection value);
    internal static string ToString(ParameterMode value);
    internal static bool IsSupportedEnumUnderlyingType(PrimitiveTypeKind typeKind);
    internal static bool IsEnumMemberValueInRange(PrimitiveTypeKind underlyingTypeKind, long value);
    internal static PrimitiveType AsPrimitive(EdmType type);
    internal static PrimitiveType GetUnderlyingEdmTypeForEnumType(EdmType type);
    internal static PrimitiveType GetSpatialNormalizedPrimitiveType(EdmType type);
    internal static string CombineErrorMessage(IEnumerable`1<EdmSchemaError> errors);
    internal static string CombineErrorMessage(IEnumerable`1<EdmItemError> errors);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.Helper/<PairEnumerations>d__68`2")]
internal static IEnumerable`1<KeyValuePair`2<T, S>> PairEnumerations(IBaseList`1<T> left, IEnumerable`1<S> right);
    internal static TypeUsage GetModelTypeUsage(TypeUsage typeUsage);
    internal static TypeUsage GetModelTypeUsage(EdmMember member);
    internal static TypeUsage ValidateAndConvertTypeUsage(EdmProperty edmProperty, EdmProperty columnProperty);
    internal static TypeUsage ValidateAndConvertTypeUsage(TypeUsage cspaceType, TypeUsage sspaceType);
    private static bool ValidateScalarTypesAreCompatible(TypeUsage cspaceType, TypeUsage storeType);
}
[DefaultMemberAttribute("Item")]
internal interface System.Data.Entity.Core.Metadata.Edm.IBaseList`1 {
    public T Item { get; }
    public T Item { get; }
    public abstract virtual T get_Item(string identity);
    public abstract virtual T get_Item(int index);
    public abstract virtual int IndexOf(T item);
}
[ObsoleteAttribute("ConceptualModel and StoreModel are now available as properties directly on DbModel.")]
public interface System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter {
    [ObsoleteAttribute("ConceptualModel is now available as a property directly on DbModel.")]
public EdmModel ConceptualModel { get; }
    [ObsoleteAttribute("StoreModel is now available as a property directly on DbModel.")]
public EdmModel StoreModel { get; }
    public abstract virtual EdmModel get_ConceptualModel();
    public abstract virtual EdmModel get_StoreModel();
}
internal class System.Data.Entity.Core.Metadata.Edm.ImmutableAssemblyCacheEntry : AssemblyCacheEntry {
    private ReadOnlyCollection`1<EdmType> _typesInAssembly;
    private ReadOnlyCollection`1<Assembly> _closureAssemblies;
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal ImmutableAssemblyCacheEntry(MutableAssemblyCacheEntry mutableEntry);
    internal virtual IList`1<EdmType> get_TypesInAssembly();
    internal virtual IList`1<Assembly> get_ClosureAssemblies();
}
internal interface System.Data.Entity.Core.Metadata.Edm.INamedDataModelItem {
    public string Name { get; }
    public string Identity { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Identity();
}
public abstract class System.Data.Entity.Core.Metadata.Edm.ItemCollection : ReadOnlyMetadataCollection`1<GlobalItem> {
    private DataSpace _space;
    private Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> _functionLookUpTable;
    private Memoizer`2<Type, ICollection> _itemsCache;
    private int _itemCount;
    public DataSpace DataSpace { get; }
    internal Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> FunctionLookUpTable { get; }
    internal ItemCollection(DataSpace dataspace);
    public DataSpace get_DataSpace();
    internal Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> get_FunctionLookUpTable();
    internal void AddInternal(GlobalItem item);
    internal void AddRange(List`1<GlobalItem> items);
    public T GetItem(string identity);
    public bool TryGetItem(string identity, T& item);
    public bool TryGetItem(string identity, bool ignoreCase, T& item);
    public T GetItem(string identity, bool ignoreCase);
    public virtual ReadOnlyCollection`1<T> GetItems();
    internal ICollection InternalGetItems(Type type);
    private static ReadOnlyCollection`1<TItem> GenericGetItems(ItemCollection collection);
    public EdmType GetType(string name, string namespaceName);
    public bool TryGetType(string name, string namespaceName, EdmType& type);
    public EdmType GetType(string name, string namespaceName, bool ignoreCase);
    public bool TryGetType(string name, string namespaceName, bool ignoreCase, EdmType& type);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string functionName);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string functionName, bool ignoreCase);
    protected static ReadOnlyCollection`1<EdmFunction> GetFunctions(Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> functionCollection, string functionName, bool ignoreCase);
    internal static ReadOnlyCollection`1<EdmFunction> GetCaseSensitiveFunctions(ReadOnlyCollection`1<EdmFunction> functionOverloads, string functionName);
    internal bool TryGetFunction(string functionName, TypeUsage[] parameterTypes, bool ignoreCase, EdmFunction& function);
    public EntityContainer GetEntityContainer(string name);
    public bool TryGetEntityContainer(string name, EntityContainer& entityContainer);
    public EntityContainer GetEntityContainer(string name, bool ignoreCase);
    public bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    internal virtual bool MetadataEquals(ItemCollection other);
    private static Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> PopulateFunctionLookUpTable(ItemCollection itemCollection);
}
internal class System.Data.Entity.Core.Metadata.Edm.KnownAssembliesSet : object {
    private Dictionary`2<Assembly, KnownAssemblyEntry> _assemblies;
    internal IEnumerable`1<Assembly> Assemblies { get; }
    internal KnownAssembliesSet(KnownAssembliesSet set);
    internal virtual bool TryGetKnownAssembly(Assembly assembly, object loaderCookie, EdmItemCollection itemCollection, KnownAssemblyEntry& entry);
    internal IEnumerable`1<Assembly> get_Assemblies();
    public IEnumerable`1<KnownAssemblyEntry> GetEntries(object loaderCookie, EdmItemCollection itemCollection);
    internal bool Contains(Assembly assembly, object loaderCookie, EdmItemCollection itemCollection);
    internal void Add(Assembly assembly, KnownAssemblyEntry knownAssemblyEntry);
}
internal class System.Data.Entity.Core.Metadata.Edm.KnownAssemblyEntry : object {
    private AssemblyCacheEntry _cacheEntry;
    [CompilerGeneratedAttribute]
private bool <ReferencedAssembliesAreLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SeenWithEdmItemCollection>k__BackingField;
    internal AssemblyCacheEntry CacheEntry { get; }
    public bool ReferencedAssembliesAreLoaded { get; public set; }
    public bool SeenWithEdmItemCollection { get; public set; }
    internal KnownAssemblyEntry(AssemblyCacheEntry cacheEntry, bool seenWithEdmItemCollection);
    internal AssemblyCacheEntry get_CacheEntry();
    [CompilerGeneratedAttribute]
public bool get_ReferencedAssembliesAreLoaded();
    [CompilerGeneratedAttribute]
public void set_ReferencedAssembliesAreLoaded(bool value);
    [CompilerGeneratedAttribute]
public bool get_SeenWithEdmItemCollection();
    [CompilerGeneratedAttribute]
public void set_SeenWithEdmItemCollection(bool value);
    public bool HaveSeenInCompatibleContext(object loaderCookie, EdmItemCollection itemCollection);
}
internal class System.Data.Entity.Core.Metadata.Edm.LoadMessageLogger : object {
    private Action`1<string> _logLoadMessage;
    private Dictionary`2<EdmType, StringBuilder> _messages;
    internal LoadMessageLogger(Action`1<string> logLoadMessage);
    internal virtual void LogLoadMessage(string message, EdmType relatedType);
    internal virtual string CreateErrorMessageWithTypeSpecificLoadLogs(string errorMessage, EdmType relatedType);
    private string GetTypeRelatedLogMessage(EdmType relatedType);
    private void LogMessagesWithTypeInfo(string message, EdmType relatedType);
}
internal class System.Data.Entity.Core.Metadata.Edm.LockedAssemblyCache : object {
    private object _lockObject;
    private Dictionary`2<Assembly, ImmutableAssemblyCacheEntry> _globalAssemblyCache;
    internal LockedAssemblyCache(object lockObject, Dictionary`2<Assembly, ImmutableAssemblyCacheEntry> globalAssemblyCache);
    public sealed virtual void Dispose();
    [ConditionalAttribute("DEBUG")]
private void AssertLockedByThisThread();
    internal bool TryGetValue(Assembly assembly, ImmutableAssemblyCacheEntry& cacheEntry);
    internal void Add(Assembly assembly, ImmutableAssemblyCacheEntry assemblyCacheEntry);
    internal void Clear();
}
internal static class System.Data.Entity.Core.Metadata.Edm.MappingMetadataHelper : object {
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.MappingMetadataHelper/<GetMappingsForEntitySetAndType>d__0")]
internal static IEnumerable`1<TypeMapping> GetMappingsForEntitySetAndType(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase entityType);
    internal static IEnumerable`1<TypeMapping> GetMappingsForEntitySetAndSuperTypes(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase childEntityType);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.MappingMetadataHelper/<GetIsTypeOfMappingsForEntitySetAndType>d__2")]
private static IEnumerable`1<TypeMapping> GetIsTypeOfMappingsForEntitySetAndType(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase entityType, EntityTypeBase childEntityType);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.MappingMetadataHelper/<GetModificationFunctionMappingsForEntitySetAndType>d__3")]
internal static IEnumerable`1<EntityTypeModificationFunctionMapping> GetModificationFunctionMappingsForEntitySetAndType(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase entityType);
    internal static EntityContainerMapping GetEntityContainerMap(StorageMappingItemCollection mappingCollection, EntityContainer entityContainer);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Metadata.Edm.MemberCollection : MetadataCollection`1<EdmMember> {
    private StructuralType _declaringType;
    public ReadOnlyCollection`1<EdmMember> AsReadOnly { get; }
    public int Count { get; }
    public EdmMember Item { get; public set; }
    public MemberCollection(StructuralType declaringType);
    public MemberCollection(StructuralType declaringType, IEnumerable`1<EdmMember> items);
    public virtual ReadOnlyCollection`1<EdmMember> get_AsReadOnly();
    public virtual int get_Count();
    public virtual EdmMember get_Item(int index);
    public virtual void set_Item(int index, EdmMember value);
    public virtual void Add(EdmMember member);
    public virtual bool ContainsIdentity(string identity);
    public virtual int IndexOf(EdmMember item);
    public virtual void CopyTo(EdmMember[] array, int arrayIndex);
    public virtual bool TryGetValue(string identity, bool ignoreCase, EdmMember& item);
    internal ReadOnlyMetadataCollection`1<T> GetDeclaredOnlyMembers();
    private int GetBaseTypeMemberCount();
    private int GetRelativeIndex(int index);
    private void ValidateMemberForAdd(EdmMember member, string argumentName);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactAssemblyResolver : object {
    internal abstract virtual bool TryResolveAssemblyReference(AssemblyName referenceName, Assembly& assembly);
    internal abstract virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoader : object {
    protected static string resPathPrefix;
    protected static string resPathSeparator;
    protected static string altPathSeparator;
    protected static string wildcard;
    public string Path { get; }
    public bool IsComposite { get; }
    private static MetadataArtifactLoader();
    public abstract virtual string get_Path();
    public static MetadataArtifactLoader Create(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry);
    internal static MetadataArtifactLoader Create(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    public static MetadataArtifactLoader Create(List`1<MetadataArtifactLoader> allCollections);
    public static MetadataArtifactLoader CreateCompositeFromFilePaths(IEnumerable`1<string> filePaths, string validExtension);
    internal static MetadataArtifactLoader CreateCompositeFromFilePaths(IEnumerable`1<string> filePaths, string validExtension, MetadataArtifactAssemblyResolver resolver);
    public static MetadataArtifactLoader CreateCompositeFromXmlReaders(IEnumerable`1<XmlReader> xmlReaders);
    internal static void CheckArtifactExtension(string path, string validExtension);
    public virtual List`1<string> GetOriginalPaths();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual bool get_IsComposite();
    public abstract virtual List`1<string> GetPaths();
    public abstract virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public List`1<XmlReader> GetReaders();
    public abstract virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public abstract virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    internal static bool PathStartsWithResPrefix(string path);
    protected static bool IsCSpaceArtifact(string resource);
    protected static bool IsSSpaceArtifact(string resource);
    protected static bool IsCSSpaceArtifact(string resource);
    private static string GetExtension(string resource);
    internal static bool IsValidArtifact(string resource);
    protected static bool IsArtifactOfDataSpace(string resource, DataSpace dataSpace);
    internal static string NormalizeFilePaths(string path);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderComposite : MetadataArtifactLoader {
    private ReadOnlyCollection`1<MetadataArtifactLoader> _children;
    public string Path { get; }
    public bool IsComposite { get; }
    public MetadataArtifactLoaderComposite(List`1<MetadataArtifactLoader> children);
    public virtual string get_Path();
    public virtual bool get_IsComposite();
    public virtual List`1<string> GetOriginalPaths();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    public sealed virtual IEnumerator`1<MetadataArtifactLoader> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderCompositeFile : MetadataArtifactLoader {
    private ReadOnlyCollection`1<MetadataArtifactLoaderFile> _csdlChildren;
    private ReadOnlyCollection`1<MetadataArtifactLoaderFile> _ssdlChildren;
    private ReadOnlyCollection`1<MetadataArtifactLoaderFile> _mslChildren;
    private string _path;
    private ICollection`1<string> _uriRegistry;
    public string Path { get; }
    public bool IsComposite { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> CsdlChildren { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> SsdlChildren { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> MslChildren { get; }
    public MetadataArtifactLoaderCompositeFile(string path, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public virtual bool get_IsComposite();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_CsdlChildren();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_SsdlChildren();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_MslChildren();
    private void LoadCollections();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    private bool TryGetListForSpace(DataSpace spaceToGet, IList`1& files);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    private static List`1<MetadataArtifactLoaderFile> GetArtifactsInDirectory(string directory, string extension, ICollection`1<string> uriRegistry);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderCompositeResource : MetadataArtifactLoader {
    private ReadOnlyCollection`1<MetadataArtifactLoaderResource> _children;
    private string _originalPath;
    public string Path { get; }
    public bool IsComposite { get; }
    internal MetadataArtifactLoaderCompositeResource(string originalPath, string assemblyName, string resourceName, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    public virtual string get_Path();
    public virtual bool get_IsComposite();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    private static List`1<MetadataArtifactLoaderResource> LoadResources(string assemblyName, string resourceName, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    private static bool AssemblyContainsResource(Assembly assembly, String& resourceName);
    private static void LoadResourcesFromAssembly(Assembly assembly, string resourceName, ICollection`1<string> uriRegistry, List`1<MetadataArtifactLoaderResource> loaders);
    private static void LoadAllResourcesFromAssembly(Assembly assembly, ICollection`1<string> uriRegistry, List`1<MetadataArtifactLoaderResource> loaders);
    private static void CreateAndAddSingleResourceLoader(Assembly assembly, string resourceName, ICollection`1<string> uriRegistry, List`1<MetadataArtifactLoaderResource> loaders);
    internal static string CreateResPath(Assembly assembly, string resourceName);
    internal static String[] GetManifestResourceNamesForAssembly(Assembly assembly);
    private static Assembly ResolveAssemblyName(string assemblyName, MetadataArtifactAssemblyResolver resolver);
    internal static MetadataArtifactLoader CreateResourceLoader(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    private static void ValidateExtension(ExtensionCheck extensionCheck, string validExtension, string resourceName);
    private static void ParseResourcePath(string path, String& assemblyName, String& resourceName);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderFile : MetadataArtifactLoader {
    private bool _alreadyLoaded;
    private string _path;
    public string Path { get; }
    public MetadataArtifactLoaderFile(string path, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    private XmlReader CreateXmlReader();
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderResource : MetadataArtifactLoader {
    private bool _alreadyLoaded;
    private Assembly _assembly;
    private string _resourceName;
    public string Path { get; }
    internal MetadataArtifactLoaderResource(Assembly assembly, string resourceName, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    private XmlReader CreateReader();
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    private Stream LoadResource();
    private bool TryCreateResourceStream(Stream& resourceStream);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoaderXmlReaderWrapper : MetadataArtifactLoader {
    private XmlReader _reader;
    private string _resourceUri;
    public string Path { get; }
    public MetadataArtifactLoaderXmlReaderWrapper(XmlReader xmlReader);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
}
internal static class System.Data.Entity.Core.Metadata.Edm.MetadataAssemblyHelper : object {
    private static string EcmaPublicKey;
    private static string MicrosoftPublicKey;
    private static Byte[] _ecmaPublicKeyToken;
    private static Byte[] _msPublicKeyToken;
    private static Memoizer`2<Assembly, bool> _filterAssemblyCacheByAssembly;
    private static MetadataAssemblyHelper();
    internal static Assembly SafeLoadReferencedAssembly(AssemblyName assemblyName);
    private static bool ComputeShouldFilterAssembly(Assembly assembly);
    internal static bool ShouldFilterAssembly(Assembly assembly);
    private static bool ShouldFilterAssembly(AssemblyName assemblyName);
    private static bool ArePublicKeyTokensEqual(Byte[] left, Byte[] right);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.MetadataAssemblyHelper/<GetNonSystemReferencedAssemblies>d__10")]
internal static IEnumerable`1<Assembly> GetNonSystemReferencedAssemblies(Assembly assembly);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataCache : object {
    private static string DataDirectory;
    private static string MetadataPathSeparator;
    private static string SemicolonSeparator;
    public static MetadataCache Instance;
    private Memoizer`2<string, List`1<MetadataArtifactLoader>> _artifactLoaderCache;
    private ConcurrentDictionary`2<string, MetadataWorkspace> _cachedWorkspaces;
    private static MetadataCache();
    private static List`1<MetadataArtifactLoader> SplitPaths(string paths);
    public MetadataWorkspace GetMetadataWorkspace(DbConnectionOptions effectiveConnectionOptions);
    public MetadataArtifactLoader GetArtifactLoader(DbConnectionOptions effectiveConnectionOptions);
    public MetadataWorkspace GetMetadataWorkspace(string cacheKey, MetadataArtifactLoader artifactLoader);
    public void Clear();
    private static StorageMappingItemCollection LoadStoreCollection(EdmItemCollection edmItemCollection, MetadataArtifactLoader loader);
    private static EdmItemCollection LoadEdmItemCollection(MetadataArtifactLoader loader);
    private static bool ShouldRecalculateMetadataArtifactLoader(IEnumerable`1<MetadataArtifactLoader> loaders);
    private static string CreateMetadataCacheKey(IList`1<string> paths, string providerName);
    private static void CreateMetadataCacheKeyWithCount(IList`1<string> paths, string providerName, bool buildResult, Int32& resultCount, String& result);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Metadata.Edm.MetadataCollection`1 : object {
    internal static int UseDictionaryCrossover;
    private bool _readOnly;
    private List`1<T> _metadataList;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _caseSensitiveDictionary;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _caseInsensitiveDictionary;
    public int Count { get; }
    public T Item { get; public set; }
    public T Item { get; public set; }
    public ReadOnlyCollection`1<T> AsReadOnly { get; }
    public bool IsReadOnly { get; }
    internal bool HasCaseSensitiveDictionary { get; }
    internal bool HasCaseInsensitiveDictionary { get; }
    internal MetadataCollection`1(IEnumerable`1<T> items);
    private MetadataCollection`1(List`1<T> items);
    internal static MetadataCollection`1<T> Wrap(List`1<T> items);
    public virtual int get_Count();
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
    internal void HandleIdentityChange(T item, string initialIdentity);
    private void HandleIdentityChange(T item, string initialIdentity, bool validate);
    public virtual T get_Item(string identity);
    public virtual void set_Item(string identity, T value);
    public virtual T GetValue(string identity, bool ignoreCase);
    public virtual bool TryGetValue(string identity, bool ignoreCase, T& item);
    public virtual void Add(T item);
    private void AddInternal(T item);
    internal void AddRange(IEnumerable`1<T> items);
    internal bool Remove(T item);
    public virtual ReadOnlyCollection`1<T> get_AsReadOnly();
    public virtual ReadOnlyMetadataCollection`1<T> AsReadOnlyMetadataCollection();
    public sealed virtual bool get_IsReadOnly();
    internal void ResetReadOnly();
    public MetadataCollection`1<T> SetReadOnly();
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public sealed virtual bool Contains(T item);
    public virtual bool ContainsIdentity(string identity);
    public virtual int IndexOf(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void InvalidateCache();
    internal bool get_HasCaseSensitiveDictionary();
    internal bool get_HasCaseInsensitiveDictionary();
    internal Dictionary`2<string, T> GetCaseSensitiveDictionary();
    private Dictionary`2<string, T> CreateCaseSensitiveDictionary();
    internal Dictionary`2<string, int> GetCaseInsensitiveDictionary();
    private Dictionary`2<string, int> CreateCaseInsensitiveDictionary();
    private bool ContainsIdentityCaseSensitive(string identity);
    private bool ListContainsIdentityCaseSensitive(string identity);
    private bool FindCaseSensitive(string identity, T& item);
    private bool ListFindCaseSensitive(string identity, T& item);
    private bool FindCaseInsensitive(string identity, T& item, bool throwOnMultipleMatches);
    private bool ListFindCaseInsensitive(string identity, T& item, bool throwOnMultipleMatches);
    private void RemoveFromCaseSensitiveDictionary(string identity);
    private void ThrowIfReadOnly();
}
public abstract class System.Data.Entity.Core.Metadata.Edm.MetadataItem : object {
    private int _flags;
    private MetadataPropertyCollection _itemAttributes;
    [CompilerGeneratedAttribute]
private Documentation <Documentation>k__BackingField;
    private static EdmType[] _builtInTypes;
    private static ReadOnlyCollection`1<FacetDescription> _generalFacetDescriptions;
    private static FacetDescription _nullableFacetDescription;
    private static FacetDescription _defaultValueFacetDescription;
    private static FacetDescription _collectionKindFacetDescription;
    internal IEnumerable`1<MetadataProperty> Annotations { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("21", "True")]
public ReadOnlyMetadataCollection`1<MetadataProperty> MetadataProperties { get; }
    internal MetadataCollection`1<MetadataProperty> RawMetadataProperties { get; }
    public Documentation Documentation { get; public set; }
    internal string Identity { get; }
    internal bool IsReadOnly { get; }
    internal static FacetDescription DefaultValueFacetDescription { get; }
    internal static FacetDescription CollectionKindFacetDescription { get; }
    internal static FacetDescription NullableFacetDescription { get; }
    internal static EdmProviderManifest EdmProviderManifest { get; }
    internal MetadataItem(MetadataFlags flags);
    private static MetadataItem();
    internal virtual IEnumerable`1<MetadataProperty> get_Annotations();
    public abstract virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual ReadOnlyMetadataCollection`1<MetadataProperty> get_MetadataProperties();
    internal MetadataPropertyCollection GetMetadataProperties();
    public void AddAnnotation(string name, object value);
    public bool RemoveAnnotation(string name);
    internal MetadataCollection`1<MetadataProperty> get_RawMetadataProperties();
    [CompilerGeneratedAttribute]
public Documentation get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(Documentation value);
    internal abstract virtual string get_Identity();
    internal virtual bool EdmEquals(MetadataItem item);
    internal bool get_IsReadOnly();
    internal virtual void SetReadOnly();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal void AddMetadataProperties(IEnumerable`1<MetadataProperty> metadataProperties);
    internal DataSpace GetDataSpace();
    internal void SetDataSpace(DataSpace space);
    private static MetadataFlags Convert(DataSpace space);
    internal ParameterMode GetParameterMode();
    internal void SetParameterMode(ParameterMode mode);
    private static MetadataFlags Convert(ParameterMode mode);
    internal bool GetFlag(MetadataFlags flag);
    internal void SetFlag(MetadataFlags flag, bool value);
    internal static FacetDescription get_DefaultValueFacetDescription();
    internal static FacetDescription get_CollectionKindFacetDescription();
    internal static FacetDescription get_NullableFacetDescription();
    internal static EdmProviderManifest get_EdmProviderManifest();
    public static EdmType GetBuiltInType(BuiltInTypeKind builtInTypeKind);
    public static ReadOnlyCollection`1<FacetDescription> GetGeneralFacetDescriptions();
    private static void InitializeBuiltInTypes(ComplexType builtInType, string name, bool isAbstract, ComplexType baseType);
    private static void AddBuiltInTypeProperties(BuiltInTypeKind builtInTypeKind, EdmProperty[] properties);
    private static void InitializeEnumType(BuiltInTypeKind builtInTypeKind, string name, String[] enumMemberNames);
}
internal static class System.Data.Entity.Core.Metadata.Edm.MetadataItemHelper : object {
    internal static string SchemaErrorsMetadataPropertyName;
    internal static string SchemaInvalidMetadataPropertyName;
    public static bool IsInvalid(MetadataItem instance);
    public static bool HasSchemaErrors(MetadataItem instance);
    public static IEnumerable`1<EdmSchemaError> GetSchemaErrors(MetadataItem instance);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataOptimization : object {
    private MetadataWorkspace _workspace;
    private IDictionary`2<Type, EntitySetTypePair> _entitySetMappingsCache;
    private object _entitySetMappingsUpdateLock;
    private AssociationType[] modreq(System.Runtime.CompilerServices.IsVolatile) _csAssociationTypes;
    private AssociationType[] modreq(System.Runtime.CompilerServices.IsVolatile) _osAssociationTypes;
    private Object[] modreq(System.Runtime.CompilerServices.IsVolatile) _csAssociationTypeToSets;
    internal IDictionary`2<Type, EntitySetTypePair> EntitySetMappingCache { get; }
    internal MetadataOptimization(MetadataWorkspace workspace);
    internal IDictionary`2<Type, EntitySetTypePair> get_EntitySetMappingCache();
    private void UpdateEntitySetMappings();
    internal bool TryUpdateEntitySetMappingsForType(Type entityType);
    internal AssociationType GetCSpaceAssociationType(AssociationType osAssociationType);
    internal AssociationSet FindCSpaceAssociationSet(AssociationType associationType, string endName, EntitySet endEntitySet);
    internal AssociationSet FindCSpaceAssociationSet(AssociationType associationType, string endName, string entitySetName, string entityContainerName, EntitySet& endEntitySet);
    internal AssociationType[] GetCSpaceAssociationTypes();
    private static AssociationType[] IndexCSpaceAssociationTypes(ItemCollection itemCollection);
    internal Object[] GetCSpaceAssociationTypeToSetsMap();
    private static Object[] MapCSpaceAssociationTypeToSets(ItemCollection itemCollection, int associationTypeCount);
    internal AssociationType GetOSpaceAssociationType(AssociationType cSpaceAssociationType, Func`1<AssociationType> initializer);
    internal AssociationType[] GetOSpaceAssociationTypes();
    private static void AddItemAtIndex(Object[] array, int index, T newItem);
}
public class System.Data.Entity.Core.Metadata.Edm.MetadataProperty : MetadataItem {
    private string _name;
    private PropertyKind _propertyKind;
    private object _value;
    private TypeUsage _typeUsage;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("System.Object", "False")]
public object Value { get; public set; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    public PropertyKind PropertyKind { get; }
    public bool IsAnnotation { get; }
    internal MetadataProperty(string name, TypeUsage typeUsage, object value);
    internal MetadataProperty(string name, EdmType edmType, bool isCollectionType, object value);
    private MetadataProperty(string name, object value);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public TypeUsage get_TypeUsage();
    internal virtual void SetReadOnly();
    public virtual PropertyKind get_PropertyKind();
    public bool get_IsAnnotation();
    public static MetadataProperty Create(string name, TypeUsage typeUsage, object value);
    public static MetadataProperty CreateAnnotation(string name, object value);
}
[AttributeUsageAttribute("128")]
internal class System.Data.Entity.Core.Metadata.Edm.MetadataPropertyAttribute : Attribute {
    private EdmType _type;
    private bool _isCollectionType;
    internal EdmType Type { get; }
    internal bool IsCollectionType { get; }
    internal MetadataPropertyAttribute(BuiltInTypeKind builtInTypeKind, bool isCollectionType);
    internal MetadataPropertyAttribute(PrimitiveTypeKind primitiveTypeKind, bool isCollectionType);
    internal MetadataPropertyAttribute(Type type, bool isCollection);
    private MetadataPropertyAttribute(EdmType type, bool isCollectionType);
    internal EdmType get_Type();
    internal bool get_IsCollectionType();
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataPropertyCollection : MetadataCollection`1<MetadataProperty> {
    private static Memoizer`2<Type, ItemTypeInformation> _itemTypeMemoizer;
    internal MetadataPropertyCollection(MetadataItem item);
    private static MetadataPropertyCollection();
    private static IEnumerable`1<MetadataProperty> GetSystemMetadataProperties(MetadataItem item);
    private static ItemTypeInformation GetItemTypeInformation(Type clrType);
}
internal class System.Data.Entity.Core.Metadata.Edm.MetadataPropertyValue : object {
    private PropertyInfo _propertyInfo;
    private MetadataItem _item;
    internal MetadataPropertyValue(PropertyInfo propertyInfo, MetadataItem item);
    internal object GetValue();
}
public class System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace : object {
    private Lazy`1<EdmItemCollection> _itemsCSpace;
    private Lazy`1<StoreItemCollection> _itemsSSpace;
    private Lazy`1<ObjectItemCollection> _itemsOSpace;
    private Lazy`1<StorageMappingItemCollection> _itemsCSSpace;
    private Lazy`1<DefaultObjectMappingItemCollection> _itemsOCSpace;
    private bool _foundAssemblyWithAttribute;
    private double _schemaVersion;
    private object _schemaVersionLock;
    private Guid _metadataWorkspaceId;
    internal MetadataOptimization MetadataOptimization;
    private static double _maximumEdmVersionSupported;
    private static IEnumerable`1<double> SupportedEdmVersions { get; }
    public static double MaximumEdmVersionSupported { get; }
    internal Guid MetadataWorkspaceId { get; }
    public MetadataWorkspace(Func`1<EdmItemCollection> cSpaceLoader, Func`1<StoreItemCollection> sSpaceLoader, Func`1<StorageMappingItemCollection> csMappingLoader, Func`1<ObjectItemCollection> oSpaceLoader);
    public MetadataWorkspace(Func`1<EdmItemCollection> cSpaceLoader, Func`1<StoreItemCollection> sSpaceLoader, Func`1<StorageMappingItemCollection> csMappingLoader);
    public MetadataWorkspace(IEnumerable`1<string> paths, IEnumerable`1<Assembly> assembliesToConsider);
    private static MetadataWorkspace();
    private void CreateMetadataWorkspaceWithResolver(IEnumerable`1<string> paths, Func`1<IEnumerable`1<Assembly>> wildcardAssemblies, Func`2<AssemblyName, Assembly> resolveReference);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace/<get_SupportedEdmVersions>d__16")]
private static IEnumerable`1<double> get_SupportedEdmVersions();
    public static double get_MaximumEdmVersionSupported();
    internal virtual Guid get_MetadataWorkspaceId();
    public virtual EntitySqlParser CreateEntitySqlParser();
    public virtual DbQueryCommandTree CreateQueryCommandTree(DbExpression query);
    public virtual ItemCollection GetItemCollection(DataSpace dataSpace);
    [ObsoleteAttribute("Construct MetadataWorkspace using constructor that accepts metadata loading delegates.")]
public virtual void RegisterItemCollection(ItemCollection collection);
    private T LoadAndCheckItemCollection(Func`1<T> itemCollectionLoader);
    private void CheckAndSetItemCollectionVersionInWorkSpace(ItemCollection itemCollectionToRegister);
    public virtual void LoadFromAssembly(Assembly assembly);
    public virtual void LoadFromAssembly(Assembly assembly, Action`1<string> logLoadMessage);
    private void ExplicitLoadFromAssembly(Assembly assembly, ObjectItemCollection collection, Action`1<string> logLoadMessage);
    private void ImplicitLoadFromAssembly(Assembly assembly, ObjectItemCollection collection);
    internal virtual void ImplicitLoadAssemblyForType(Type type, Assembly callingAssembly);
    internal virtual void ImplicitLoadFromEntityType(EntityType type, Assembly callingAssembly);
    public virtual T GetItem(string identity, DataSpace dataSpace);
    public virtual bool TryGetItem(string identity, DataSpace space, T& item);
    public virtual T GetItem(string identity, bool ignoreCase, DataSpace dataSpace);
    public virtual bool TryGetItem(string identity, bool ignoreCase, DataSpace dataSpace, T& item);
    public virtual ReadOnlyCollection`1<T> GetItems(DataSpace dataSpace);
    public virtual EdmType GetType(string name, string namespaceName, DataSpace dataSpace);
    public virtual bool TryGetType(string name, string namespaceName, DataSpace dataSpace, EdmType& type);
    public virtual EdmType GetType(string name, string namespaceName, bool ignoreCase, DataSpace dataSpace);
    public virtual bool TryGetType(string name, string namespaceName, bool ignoreCase, DataSpace dataSpace, EdmType& type);
    public virtual EntityContainer GetEntityContainer(string name, DataSpace dataSpace);
    public virtual bool TryGetEntityContainer(string name, DataSpace dataSpace, EntityContainer& entityContainer);
    public virtual EntityContainer GetEntityContainer(string name, bool ignoreCase, DataSpace dataSpace);
    public virtual bool TryGetEntityContainer(string name, bool ignoreCase, DataSpace dataSpace, EntityContainer& entityContainer);
    public virtual ReadOnlyCollection`1<EdmFunction> GetFunctions(string name, string namespaceName, DataSpace dataSpace);
    public virtual ReadOnlyCollection`1<EdmFunction> GetFunctions(string name, string namespaceName, DataSpace dataSpace, bool ignoreCase);
    internal virtual bool TryGetFunction(string name, string namespaceName, TypeUsage[] parameterTypes, bool ignoreCase, DataSpace dataSpace, EdmFunction& function);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes(DataSpace dataSpace);
    public virtual ReadOnlyCollection`1<GlobalItem> GetItems(DataSpace dataSpace);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind, DataSpace dataSpace);
    internal virtual bool TryGetMap(string typeIdentity, DataSpace typeSpace, bool ignoreCase, DataSpace mappingSpace, MappingBase& map);
    internal virtual MappingBase GetMap(string identity, DataSpace typeSpace, DataSpace dataSpace);
    internal virtual MappingBase GetMap(GlobalItem item, DataSpace dataSpace);
    internal virtual bool TryGetMap(GlobalItem item, DataSpace dataSpace, MappingBase& map);
    public virtual bool TryGetItemCollection(DataSpace dataSpace, ItemCollection& collection);
    internal virtual ItemCollection GetItemCollection(DataSpace dataSpace, bool required);
    public virtual StructuralType GetObjectSpaceType(StructuralType edmSpaceType);
    public virtual bool TryGetObjectSpaceType(StructuralType edmSpaceType, StructuralType& objectSpaceType);
    public virtual EnumType GetObjectSpaceType(EnumType edmSpaceType);
    public virtual bool TryGetObjectSpaceType(EnumType edmSpaceType, EnumType& objectSpaceType);
    private T GetObjectSpaceType(T edmSpaceType);
    private bool TryGetObjectSpaceType(T edmSpaceType, T& objectSpaceType);
    public virtual StructuralType GetEdmSpaceType(StructuralType objectSpaceType);
    public virtual bool TryGetEdmSpaceType(StructuralType objectSpaceType, StructuralType& edmSpaceType);
    public virtual EnumType GetEdmSpaceType(EnumType objectSpaceType);
    public virtual bool TryGetEdmSpaceType(EnumType objectSpaceType, EnumType& edmSpaceType);
    private T GetEdmSpaceType(T objectSpaceType);
    private bool TryGetEdmSpaceType(T objectSpaceType, T& edmSpaceType);
    internal virtual DbQueryCommandTree GetCqtView(EntitySetBase extent);
    internal virtual GeneratedView GetGeneratedView(EntitySetBase extent);
    internal virtual bool TryGetGeneratedViewOfType(EntitySetBase extent, EntityTypeBase type, bool includeSubtypes, GeneratedView& generatedView);
    internal virtual DbLambda GetGeneratedFunctionDefinition(EdmFunction function);
    internal virtual bool TryGetFunctionImportMapping(EdmFunction functionImport, FunctionImportMapping& targetFunctionMapping);
    internal virtual ViewLoader GetUpdateViewLoader();
    internal virtual TypeUsage GetOSpaceTypeUsage(TypeUsage edmSpaceTypeUsage);
    internal virtual bool IsItemCollectionAlreadyRegistered(DataSpace dataSpace);
    internal virtual bool IsMetadataWorkspaceCSCompatible(MetadataWorkspace other);
    public static void ClearCache();
    internal static TypeUsage GetCanonicalModelTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    internal static PrimitiveType GetModelPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    [ObsoleteAttribute("Use MetadataWorkspace.GetRelevantMembersForUpdate(EntitySetBase, EntityTypeBase, bool) instead")]
public virtual IEnumerable`1<EdmMember> GetRequiredOriginalValueMembers(EntitySetBase entitySet, EntityTypeBase entityType);
    public virtual ReadOnlyCollection`1<EdmMember> GetRelevantMembersForUpdate(EntitySetBase entitySet, EntityTypeBase entityType, bool partialUpdateSupported);
    private ReadOnlyCollection`1<EdmMember> GetInterestingMembers(EntitySetBase entitySet, EntityTypeBase entityType, InterestingMembersKind interestingMembersKind);
    internal virtual QueryCacheManager GetQueryCacheManager();
    internal bool TryDetermineCSpaceModelType(EdmType& modelEdmType);
    internal virtual bool TryDetermineCSpaceModelType(Type type, EdmType& modelEdmType);
}
internal class System.Data.Entity.Core.Metadata.Edm.ModelPerspective : Perspective {
    internal ModelPerspective(MetadataWorkspace metadataWorkspace);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
}
internal class System.Data.Entity.Core.Metadata.Edm.MslSerializer : object {
    public virtual bool Serialize(DbDatabaseMapping databaseMapping, XmlWriter xmlWriter);
}
internal class System.Data.Entity.Core.Metadata.Edm.MslXmlSchemaWriter : XmlSchemaWriter {
    private string _entityTypeNamespace;
    private string _dbSchemaName;
    internal MslXmlSchemaWriter(XmlWriter xmlWriter, double version);
    internal void WriteSchema(DbDatabaseMapping databaseMapping);
    private void WriteSchemaElementHeader();
    private void WriteDbModelElement(DbDatabaseMapping databaseMapping);
    internal void WriteEntityContainerMappingElement(EntityContainerMapping containerMapping);
    public void WriteEntitySetMappingElement(EntitySetMapping entitySetMapping);
    public void WriteAssociationSetMappingElement(AssociationSetMapping associationSetMapping);
    private void WriteAssociationEndMappingElement(EndPropertyMapping endMapping);
    private void WriteEntityTypeMappingElement(EntityTypeMapping entityTypeMapping);
    internal void WriteMappingFragmentElement(MappingFragment mappingFragment);
    public void WriteFunctionImportMappingElement(FunctionImportMappingComposable functionImportMapping);
    public void WriteFunctionImportMappingElement(FunctionImportMappingNonComposable functionImportMapping);
    private void WriteFunctionImportMappingStartElement(FunctionImportMapping functionImportMapping);
    private void WriteFunctionImportResultMappingElement(FunctionImportResultMapping resultMapping);
    private void WriteFunctionImportEntityTypeMappingElement(FunctionImportEntityTypeMapping entityTypeMapping);
    internal static string CreateFunctionImportEntityTypeMappingTypeName(FunctionImportEntityTypeMapping entityTypeMapping);
    private void WriteFunctionImportComplexTypeMappingElement(FunctionImportComplexTypeMapping complexTypeMapping);
    private void WriteFunctionImportPropertyMappingElements(IEnumerable`1<FunctionImportReturnTypeScalarPropertyMapping> propertyMappings);
    private void WriteFunctionImportConditionElement(FunctionImportEntityTypeMappingCondition condition);
    private void WriteFunctionImportEndElement();
    private void WriteModificationFunctionMapping(EntityTypeModificationFunctionMapping modificationFunctionMapping);
    private void WriteModificationFunctionMapping(AssociationSetModificationFunctionMapping modificationFunctionMapping);
    public void WriteFunctionMapping(string functionElement, ModificationFunctionMapping functionMapping, bool associationSetMapping);
    private void WriteAssociationSetMappingParameterBindings(IEnumerable`1<ModificationFunctionParameterBinding> parameterBindings);
    private void WritePropertyParameterBindings(IEnumerable`1<ModificationFunctionParameterBinding> parameterBindings, int level);
    private void WriteAssociationParameterBindings(IEnumerable`1<ModificationFunctionParameterBinding> parameterBindings);
    private void WriteResultBindings(IEnumerable`1<ModificationFunctionResultBinding> resultBindings);
    private void WriteScalarParameterElement(EdmMember member, ModificationFunctionParameterBinding parameterBinding);
    private void WritePropertyMapping(PropertyMapping propertyMapping);
    private void WritePropertyMapping(ScalarPropertyMapping scalarPropertyMapping);
    private void WritePropertyMapping(ComplexPropertyMapping complexPropertyMapping);
    private static string GetEntityTypeName(string fullyQualifiedEntityTypeName, bool isHierarchyMapping);
    private void WriteConditionElement(ConditionPropertyMapping condition);
    private void WriteIsNullConditionAttribute(bool isNullValue);
    private void WriteConditionValue(object conditionValue);
    private void WriteScalarPropertyElement(string propertyName, string columnName);
}
internal class System.Data.Entity.Core.Metadata.Edm.MutableAssemblyCacheEntry : AssemblyCacheEntry {
    private List`1<EdmType> _typesInAssembly;
    private List`1<Assembly> _closureAssemblies;
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal virtual IList`1<EdmType> get_TypesInAssembly();
    internal virtual IList`1<Assembly> get_ClosureAssemblies();
}
public class System.Data.Entity.Core.Metadata.Edm.NavigationProperty : EdmMember {
    internal static string RelationshipTypeNamePropertyName;
    internal static string ToEndMemberNamePropertyName;
    private NavigationPropertyAccessor _accessor;
    [CompilerGeneratedAttribute]
private RelationshipType <RelationshipType>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationshipEndMember <ToEndMember>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationshipEndMember <FromEndMember>k__BackingField;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("35", "False")]
public RelationshipType RelationshipType { get; internal set; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember ToEndMember { get; internal set; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember FromEndMember { get; internal set; }
    internal AssociationType Association { get; }
    internal AssociationEndMember ResultEnd { get; }
    internal NavigationPropertyAccessor Accessor { get; }
    internal NavigationProperty(string name, TypeUsage typeUsage);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    [CompilerGeneratedAttribute]
public RelationshipType get_RelationshipType();
    [CompilerGeneratedAttribute]
internal void set_RelationshipType(RelationshipType value);
    [CompilerGeneratedAttribute]
public RelationshipEndMember get_ToEndMember();
    [CompilerGeneratedAttribute]
internal void set_ToEndMember(RelationshipEndMember value);
    [CompilerGeneratedAttribute]
public RelationshipEndMember get_FromEndMember();
    [CompilerGeneratedAttribute]
internal void set_FromEndMember(RelationshipEndMember value);
    internal AssociationType get_Association();
    internal AssociationEndMember get_ResultEnd();
    internal NavigationPropertyAccessor get_Accessor();
    public IEnumerable`1<EdmProperty> GetDependentProperties();
    internal virtual void SetReadOnly();
    public static NavigationProperty Create(string name, TypeUsage typeUsage, RelationshipType relationshipType, RelationshipEndMember from, RelationshipEndMember to, IEnumerable`1<MetadataProperty> metadataProperties);
}
internal class System.Data.Entity.Core.Metadata.Edm.NavigationPropertyAccessor : object {
    private Func`2<object, object> _memberGetter;
    private Action`2<object, object> _memberSetter;
    private Action`2<object, object> _collectionAdd;
    private Func`3<object, object, bool> _collectionRemove;
    private Func`1<object> _collectionCreate;
    private string _propertyName;
    public bool HasProperty { get; }
    public string PropertyName { get; }
    public Func`2<object, object> ValueGetter { get; public set; }
    public Action`2<object, object> ValueSetter { get; public set; }
    public Action`2<object, object> CollectionAdd { get; public set; }
    public Func`3<object, object, bool> CollectionRemove { get; public set; }
    public Func`1<object> CollectionCreate { get; public set; }
    public static NavigationPropertyAccessor NoNavigationProperty { get; }
    public NavigationPropertyAccessor(string propertyName);
    public bool get_HasProperty();
    public string get_PropertyName();
    public Func`2<object, object> get_ValueGetter();
    public void set_ValueGetter(Func`2<object, object> value);
    public Action`2<object, object> get_ValueSetter();
    public void set_ValueSetter(Action`2<object, object> value);
    public Action`2<object, object> get_CollectionAdd();
    public void set_CollectionAdd(Action`2<object, object> value);
    public Func`3<object, object, bool> get_CollectionRemove();
    public void set_CollectionRemove(Func`3<object, object, bool> value);
    public Func`1<object> get_CollectionCreate();
    public void set_CollectionCreate(Func`1<object> value);
    public static NavigationPropertyAccessor get_NoNavigationProperty();
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.ObjectItemAssemblyLoader : object {
    private ObjectItemLoadingSessionData _sessionData;
    private Assembly _assembly;
    private AssemblyCacheEntry _cacheEntry;
    protected ObjectItemLoadingSessionData SessionData { get; }
    protected Assembly SourceAssembly { get; }
    protected AssemblyCacheEntry CacheEntry { get; }
    protected ObjectItemAssemblyLoader(Assembly assembly, AssemblyCacheEntry cacheEntry, ObjectItemLoadingSessionData sessionData);
    internal virtual void Load();
    protected abstract virtual void AddToAssembliesLoaded();
    protected abstract virtual void LoadTypesFromAssembly();
    protected virtual void LoadClosureAssemblies();
    internal virtual void OnLevel1SessionProcessing();
    internal virtual void OnLevel2SessionProcessing();
    internal static ObjectItemAssemblyLoader CreateLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    internal static bool IsAttributeLoader(object loaderCookie);
    internal static bool IsAttributeLoader(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> loaderFactory);
    internal static bool IsConventionLoader(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> loaderFactory);
    protected virtual void AddToKnownAssemblies();
    protected static void LoadAssemblies(IEnumerable`1<Assembly> assemblies, ObjectItemLoadingSessionData sessionData);
    protected static bool TryGetPrimitiveType(Type type, PrimitiveType& primitiveType);
    protected ObjectItemLoadingSessionData get_SessionData();
    protected Assembly get_SourceAssembly();
    protected AssemblyCacheEntry get_CacheEntry();
}
internal class System.Data.Entity.Core.Metadata.Edm.ObjectItemAttributeAssemblyLoader : ObjectItemAssemblyLoader {
    private List`1<Action> _unresolvedNavigationProperties;
    private List`1<Action> _referenceResolutions;
    private MutableAssemblyCacheEntry CacheEntry { get; }
    internal ObjectItemAttributeAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    private MutableAssemblyCacheEntry get_CacheEntry();
    internal virtual void OnLevel1SessionProcessing();
    internal virtual void OnLevel2SessionProcessing();
    internal virtual void Load();
    protected virtual void AddToAssembliesLoaded();
    private bool TryGetLoadedType(Type clrType, EdmType& edmType);
    private bool TryGetCachedEdmType(Type clrType, EdmType& edmType);
    protected virtual void LoadTypesFromAssembly();
    private void LoadRelationshipTypes();
    private void ResolveAssociationEnd(AssociationType associationType, string roleName, Type clrType, RelationshipMultiplicity multiplicity);
    private void LoadType(Type clrType);
    private void AddTypeResolver(Action resolver);
    private EdmType ResolveBaseType(Type type);
    private bool TryFindNullParametersInRelationshipAttribute(EdmRelationshipAttribute roleAttribute);
    private bool TryGetRelationshipEndEntityType(Type type, EntityType& entityType);
    private void LoadPropertiesFromType(StructuralType structuralType);
    internal void ResolveNavigationProperty(StructuralType declaringType, PropertyInfo propertyInfo);
    private EdmMember LoadScalarProperty(Type clrType, PropertyInfo property, Boolean& isEntityKeyProperty);
    private void ResolveEnumTypeProperty(StructuralType declaringType, PropertyInfo clrProperty);
    private void ResolveComplexTypeProperty(StructuralType type, PropertyInfo clrProperty);
    private void TrackClosure(Type type);
    internal static bool IsSchemaAttributePresent(Assembly assembly);
    internal static ObjectItemAssemblyLoader Create(Assembly assembly, ObjectItemLoadingSessionData sessionData);
}
internal class System.Data.Entity.Core.Metadata.Edm.ObjectItemCachedAssemblyLoader : ObjectItemAssemblyLoader {
    private ImmutableAssemblyCacheEntry CacheEntry { get; }
    internal ObjectItemCachedAssemblyLoader(Assembly assembly, ImmutableAssemblyCacheEntry cacheEntry, ObjectItemLoadingSessionData sessionData);
    private ImmutableAssemblyCacheEntry get_CacheEntry();
    protected virtual void AddToAssembliesLoaded();
    protected virtual void LoadTypesFromAssembly();
}
public class System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection : ItemCollection {
    private CacheForPrimitiveTypes _primitiveTypeMaps;
    private KnownAssembliesSet _knownAssemblies;
    private Dictionary`2<string, EdmType> _ocMapping;
    private object _loaderCookie;
    private object _loadAssemblyLock;
    [CompilerGeneratedAttribute]
private bool <OSpaceTypesLoaded>k__BackingField;
    internal bool OSpaceTypesLoaded { get; internal set; }
    internal object LoadAssemblyLock { get; }
    internal ObjectItemCollection(KnownAssembliesSet knownAssembliesSet);
    [CompilerGeneratedAttribute]
internal bool get_OSpaceTypesLoaded();
    [CompilerGeneratedAttribute]
internal void set_OSpaceTypesLoaded(bool value);
    internal object get_LoadAssemblyLock();
    internal void ImplicitLoadAllReferencedAssemblies(Assembly assembly, EdmItemCollection edmItemCollection);
    public void LoadFromAssembly(Assembly assembly);
    public void LoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage);
    public void LoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection);
    internal void ExplicitLoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage);
    internal bool ImplicitLoadAssemblyForType(Type type, EdmItemCollection edmItemCollection);
    internal AssociationType GetRelationshipType(string relationshipName);
    private bool LoadAssemblyFromCache(Assembly assembly, bool loadReferencedAssemblies, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage);
    internal virtual void AddLoadedTypes(Dictionary`2<string, EdmType> typesInLoading);
    public IEnumerable`1<PrimitiveType> GetPrimitiveTypes();
    public Type GetClrType(StructuralType objectSpaceType);
    public bool TryGetClrType(StructuralType objectSpaceType, Type& clrType);
    public Type GetClrType(EnumType objectSpaceType);
    public bool TryGetClrType(EnumType objectSpaceType, Type& clrType);
    private static Type GetClrType(EdmType objectSpaceType);
    private static bool TryGetClrType(EdmType objectSpaceType, Type& clrType);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind modelType);
    internal bool TryGetOSpaceType(EdmType cspaceType, EdmType& edmType);
    internal static string TryGetMappingCSpaceTypeIdentity(EdmType edmType);
    public virtual ReadOnlyCollection`1<T> GetItems();
}
internal class System.Data.Entity.Core.Metadata.Edm.ObjectItemConventionAssemblyLoader : ObjectItemAssemblyLoader {
    private List`1<Action> _referenceResolutions;
    private ConventionOSpaceTypeFactory _factory;
    public MutableAssemblyCacheEntry CacheEntry { get; }
    internal ObjectItemConventionAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    public virtual MutableAssemblyCacheEntry get_CacheEntry();
    protected virtual void LoadTypesFromAssembly();
    protected virtual void AddToAssembliesLoaded();
    private bool TryGetCSpaceTypeMatch(Type type, EdmType& cspaceType);
    internal virtual void OnLevel1SessionProcessing();
    internal virtual void TrackClosure(Type type);
    private void CreateRelationships();
    internal static bool SessionContainsConventionParameters(ObjectItemLoadingSessionData sessionData);
    internal static ObjectItemAssemblyLoader Create(Assembly assembly, ObjectItemLoadingSessionData sessionData);
}
internal class System.Data.Entity.Core.Metadata.Edm.ObjectItemLoadingSessionData : object {
    private Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> _loaderFactory;
    private Dictionary`2<string, EdmType> _typesInLoading;
    private LoadMessageLogger _loadMessageLogger;
    private List`1<EdmItemError> _errors;
    private Dictionary`2<Assembly, MutableAssemblyCacheEntry> _listOfAssembliesLoaded;
    private KnownAssembliesSet _knownAssemblies;
    private LockedAssemblyCache _lockedAssemblyCache;
    private HashSet`1<ObjectItemAssemblyLoader> _loadersThatNeedLevel1PostSessionProcessing;
    private HashSet`1<ObjectItemAssemblyLoader> _loadersThatNeedLevel2PostSessionProcessing;
    private EdmItemCollection _edmItemCollection;
    private Dictionary`2<string, KeyValuePair`2<EdmType, int>> _conventionCSpaceTypeNames;
    private Dictionary`2<EdmType, EdmType> _cspaceToOspace;
    private object _originalLoaderCookie;
    [CompilerGeneratedAttribute]
private bool <ConventionBasedRelationshipsAreLoaded>k__BackingField;
    internal Dictionary`2<string, EdmType> TypesInLoading { get; }
    internal Dictionary`2<Assembly, MutableAssemblyCacheEntry> AssembliesLoaded { get; }
    internal List`1<EdmItemError> EdmItemErrors { get; }
    internal KnownAssembliesSet KnownAssemblies { get; }
    internal LockedAssemblyCache LockedAssemblyCache { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    internal Dictionary`2<EdmType, EdmType> CspaceToOspace { get; }
    internal bool ConventionBasedRelationshipsAreLoaded { get; internal set; }
    internal LoadMessageLogger LoadMessageLogger { get; }
    internal Dictionary`2<string, KeyValuePair`2<EdmType, int>> ConventionCSpaceTypeNames { get; }
    internal Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> ObjectItemAssemblyLoaderFactory { get; internal set; }
    internal object LoaderCookie { get; }
    internal ObjectItemLoadingSessionData(KnownAssembliesSet knownAssemblies, LockedAssemblyCache lockedAssemblyCache, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage, object loaderCookie);
    internal virtual Dictionary`2<string, EdmType> get_TypesInLoading();
    internal Dictionary`2<Assembly, MutableAssemblyCacheEntry> get_AssembliesLoaded();
    internal virtual List`1<EdmItemError> get_EdmItemErrors();
    internal KnownAssembliesSet get_KnownAssemblies();
    internal LockedAssemblyCache get_LockedAssemblyCache();
    internal EdmItemCollection get_EdmItemCollection();
    internal virtual Dictionary`2<EdmType, EdmType> get_CspaceToOspace();
    [CompilerGeneratedAttribute]
internal bool get_ConventionBasedRelationshipsAreLoaded();
    [CompilerGeneratedAttribute]
internal void set_ConventionBasedRelationshipsAreLoaded(bool value);
    internal virtual LoadMessageLogger get_LoadMessageLogger();
    internal Dictionary`2<string, KeyValuePair`2<EdmType, int>> get_ConventionCSpaceTypeNames();
    internal Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> get_ObjectItemAssemblyLoaderFactory();
    internal void set_ObjectItemAssemblyLoaderFactory(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> value);
    internal object get_LoaderCookie();
    internal void RegisterForLevel1PostSessionProcessing(ObjectItemAssemblyLoader loader);
    internal void RegisterForLevel2PostSessionProcessing(ObjectItemAssemblyLoader loader);
    internal void CompleteSession();
}
internal class System.Data.Entity.Core.Metadata.Edm.ObjectItemNoOpAssemblyLoader : ObjectItemAssemblyLoader {
    internal ObjectItemNoOpAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    internal virtual void Load();
    protected virtual void AddToAssembliesLoaded();
    protected virtual void LoadTypesFromAssembly();
}
internal class System.Data.Entity.Core.Metadata.Edm.OcAssemblyCache : object {
    private Dictionary`2<Assembly, ImmutableAssemblyCacheEntry> _conventionalOcCache;
    internal bool TryGetConventionalOcCacheFromAssemblyCache(Assembly assemblyToLookup, ImmutableAssemblyCacheEntry& cacheEntry);
    internal void AddAssemblyToOcCacheFromAssemblyCache(Assembly assembly, ImmutableAssemblyCacheEntry cacheEntry);
}
public enum System.Data.Entity.Core.Metadata.Edm.OperationAction : Enum {
    public int value__;
    public static OperationAction None;
    public static OperationAction Cascade;
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.OSpaceTypeFactory : object {
    public List`1<Action> ReferenceResolutions { get; }
    public Dictionary`2<EdmType, EdmType> CspaceToOspace { get; }
    public Dictionary`2<string, EdmType> LoadedTypes { get; }
    public abstract virtual List`1<Action> get_ReferenceResolutions();
    public abstract virtual void LogLoadMessage(string message, EdmType relatedType);
    public abstract virtual void LogError(string errorMessage, EdmType relatedType);
    public abstract virtual void TrackClosure(Type type);
    public abstract virtual Dictionary`2<EdmType, EdmType> get_CspaceToOspace();
    public abstract virtual Dictionary`2<string, EdmType> get_LoadedTypes();
    public abstract virtual void AddToTypesInAssembly(EdmType type);
    public virtual EdmType TryCreateType(Type type, EdmType cspaceType);
    private bool TryCreateEnumType(Type enumType, EnumType cspaceEnumType, EdmType& newOSpaceType);
    private bool TryCreateStructuralType(Type type, StructuralType cspaceType, EdmType& newOSpaceType);
    internal static bool TypesMatchByConvention(Type type, EdmType cspaceType);
    private bool UnderlyingEnumTypesMatch(Type enumType, EnumType cspaceEnumType);
    private bool EnumMembersMatch(Type enumType, EnumType cspaceEnumType);
    private bool TryCreateMembers(Type type, StructuralType cspaceType, StructuralType ospaceType, List`1<Action> referenceResolutionListForCurrentType);
    private bool TryFindComplexProperties(Type type, StructuralType cspaceType, StructuralType ospaceType, IEnumerable`1<PropertyInfo> clrProperties, List`1<Action> referenceResolutionListForCurrentType);
    private bool TryFindNavigationProperties(Type type, StructuralType cspaceType, StructuralType ospaceType, IEnumerable`1<PropertyInfo> clrProperties, List`1<Action> referenceResolutionListForCurrentType);
    private EdmType ResolveBaseType(StructuralType baseCSpaceType, Type type);
    private bool TryFindAndCreatePrimitiveProperties(Type type, StructuralType cspaceType, StructuralType ospaceType, IEnumerable`1<PropertyInfo> clrProperties);
    protected static bool TryGetPrimitiveType(Type type, PrimitiveType& primitiveType);
    private bool TryFindAndCreateEnumProperties(Type type, StructuralType cspaceType, StructuralType ospaceType, IEnumerable`1<PropertyInfo> clrProperties, List`1<Action> referenceResolutionListForCurrentType);
    private static bool MemberMatchesByConvention(PropertyInfo clrProperty, EdmMember cspaceMember);
    private void CreateAndAddComplexType(Type type, StructuralType ospaceType, EdmProperty cspaceProperty, PropertyInfo clrProperty);
    private static bool NonPrimitiveMemberMatchesByConvention(PropertyInfo clrProperty, EdmMember cspaceMember);
    private void CreateAndAddNavigationProperty(StructuralType cspaceType, StructuralType ospaceType, NavigationProperty cspaceProperty);
    private void CreateAndAddEnumProperty(Type type, StructuralType ospaceType, EdmProperty cspaceProperty, PropertyInfo clrProperty);
    private static void AddScalarMember(Type type, PropertyInfo clrProperty, StructuralType ospaceType, EdmProperty cspaceProperty, EdmType propertyType);
    public virtual void CreateRelationships(EdmItemCollection edmItemCollection);
    private static StructuralType GetRelationshipEndType(RelationshipEndMember relationshipEndMember);
}
public enum System.Data.Entity.Core.Metadata.Edm.ParameterMode : Enum {
    public int value__;
    public static ParameterMode In;
    public static ParameterMode Out;
    public static ParameterMode InOut;
    public static ParameterMode ReturnValue;
}
public enum System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics : Enum {
    public int value__;
    public static ParameterTypeSemantics AllowImplicitConversion;
    public static ParameterTypeSemantics AllowImplicitPromotion;
    public static ParameterTypeSemantics ExactMatchOnly;
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.Perspective : object {
    private MetadataWorkspace _metadataWorkspace;
    private DataSpace _targetDataspace;
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal DataSpace TargetDataspace { get; }
    internal Perspective(MetadataWorkspace metadataWorkspace, DataSpace targetDataspace);
    internal virtual bool TryGetMember(StructuralType type, string memberName, bool ignoreCase, EdmMember& outMember);
    internal virtual bool TryGetEnumMember(EnumType type, string memberName, bool ignoreCase, EnumMember& outMember);
    internal virtual bool TryGetExtent(EntityContainer entityContainer, string extentName, bool ignoreCase, EntitySetBase& outSet);
    internal virtual bool TryGetFunctionImport(EntityContainer entityContainer, string functionImportName, bool ignoreCase, EdmFunction& functionImport);
    internal virtual EntityContainer GetDefaultContainer();
    internal virtual bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
    internal abstract virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
    internal bool TryGetFunctionByName(string namespaceName, string functionName, bool ignoreCase, IList`1& functionOverloads);
    internal MetadataWorkspace get_MetadataWorkspace();
    internal virtual bool TryGetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind, PrimitiveType& primitiveType);
    internal DataSpace get_TargetDataspace();
}
public class System.Data.Entity.Core.Metadata.Edm.PrimitiveType : SimpleType {
    private PrimitiveTypeKind _primitiveTypeKind;
    private DbProviderManifest _providerManifest;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal Type ClrType { get; }
    [MetadataPropertyAttribute("27", "False")]
public PrimitiveTypeKind PrimitiveTypeKind { get; internal set; }
    internal DbProviderManifest ProviderManifest { get; internal set; }
    public ReadOnlyCollection`1<FacetDescription> FacetDescriptions { get; }
    public Type ClrEquivalentType { get; }
    internal PrimitiveType(string name, string namespaceName, DataSpace dataSpace, PrimitiveType baseType, DbProviderManifest providerManifest);
    internal PrimitiveType(Type clrType, PrimitiveType baseType, DbProviderManifest providerManifest);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual Type get_ClrType();
    public virtual PrimitiveTypeKind get_PrimitiveTypeKind();
    internal virtual void set_PrimitiveTypeKind(PrimitiveTypeKind value);
    internal DbProviderManifest get_ProviderManifest();
    internal void set_ProviderManifest(DbProviderManifest value);
    public virtual ReadOnlyCollection`1<FacetDescription> get_FacetDescriptions();
    public Type get_ClrEquivalentType();
    internal virtual IEnumerable`1<FacetDescription> GetAssociatedFacetDescriptions();
    internal static void Initialize(PrimitiveType primitiveType, PrimitiveTypeKind primitiveTypeKind, DbProviderManifest providerManifest);
    public EdmType GetEdmPrimitiveType();
    public static ReadOnlyCollection`1<PrimitiveType> GetEdmPrimitiveTypes();
    public static PrimitiveType GetEdmPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
}
public enum System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind : Enum {
    public int value__;
    public static PrimitiveTypeKind Binary;
    public static PrimitiveTypeKind Boolean;
    public static PrimitiveTypeKind Byte;
    public static PrimitiveTypeKind DateTime;
    public static PrimitiveTypeKind Decimal;
    public static PrimitiveTypeKind Double;
    public static PrimitiveTypeKind Guid;
    public static PrimitiveTypeKind Single;
    public static PrimitiveTypeKind SByte;
    public static PrimitiveTypeKind Int16;
    public static PrimitiveTypeKind Int32;
    public static PrimitiveTypeKind Int64;
    public static PrimitiveTypeKind String;
    public static PrimitiveTypeKind Time;
    public static PrimitiveTypeKind DateTimeOffset;
    public static PrimitiveTypeKind Geometry;
    public static PrimitiveTypeKind Geography;
    public static PrimitiveTypeKind GeometryPoint;
    public static PrimitiveTypeKind GeometryLineString;
    public static PrimitiveTypeKind GeometryPolygon;
    public static PrimitiveTypeKind GeometryMultiPoint;
    public static PrimitiveTypeKind GeometryMultiLineString;
    public static PrimitiveTypeKind GeometryMultiPolygon;
    public static PrimitiveTypeKind GeometryCollection;
    public static PrimitiveTypeKind GeographyPoint;
    public static PrimitiveTypeKind GeographyLineString;
    public static PrimitiveTypeKind GeographyPolygon;
    public static PrimitiveTypeKind GeographyMultiPoint;
    public static PrimitiveTypeKind GeographyMultiLineString;
    public static PrimitiveTypeKind GeographyMultiPolygon;
    public static PrimitiveTypeKind GeographyCollection;
    public static PrimitiveTypeKind HierarchyId;
}
public enum System.Data.Entity.Core.Metadata.Edm.PropertyKind : Enum {
    public int value__;
    public static PropertyKind System;
    public static PropertyKind Extended;
}
internal class System.Data.Entity.Core.Metadata.Edm.Provider.ClrProviderManifest : DbProviderManifest {
    private static int s_PrimitiveTypeCount;
    private ReadOnlyCollection`1<PrimitiveType> _primitiveTypesArray;
    private ReadOnlyCollection`1<PrimitiveType> _primitiveTypes;
    private static ClrProviderManifest _instance;
    internal static ClrProviderManifest Instance { get; }
    public string NamespaceName { get; }
    private static ClrProviderManifest();
    internal static ClrProviderManifest get_Instance();
    public virtual string get_NamespaceName();
    internal bool TryGetPrimitiveType(Type clrType, PrimitiveType& primitiveType);
    internal static bool TryGetPrimitiveTypeKind(Type clrType, PrimitiveTypeKind& resolvedPrimitiveTypeKind);
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType type);
    private void InitializePrimitiveTypes();
    private PrimitiveType CreatePrimitiveType(Type clrType, PrimitiveTypeKind primitiveTypeKind);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    protected virtual XmlReader GetDbInformation(string informationType);
}
internal class System.Data.Entity.Core.Metadata.Edm.Provider.EdmProviderManifest : DbProviderManifest {
    internal static string ConcurrencyModeFacetName;
    internal static string StoreGeneratedPatternFacetName;
    private Dictionary`2<PrimitiveType, ReadOnlyCollection`1<FacetDescription>> _facetDescriptions;
    private ReadOnlyCollection`1<PrimitiveType> _primitiveTypes;
    private ReadOnlyCollection`1<EdmFunction> _functions;
    private static EdmProviderManifest _instance;
    private ReadOnlyCollection`1[] _promotionTypes;
    private static TypeUsage[] _canonicalModelTypes;
    internal static byte MaximumDecimalPrecision;
    internal static byte MaximumDateTimePrecision;
    internal static EdmProviderManifest Instance { get; }
    public string NamespaceName { get; }
    internal string Token { get; }
    private static EdmProviderManifest();
    internal static EdmProviderManifest get_Instance();
    public virtual string get_NamespaceName();
    internal virtual string get_Token();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType type);
    public PrimitiveType GetPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    private void InitializePrimitiveTypes();
    private void InitializePrimitiveType(PrimitiveType primitiveType, PrimitiveTypeKind primitiveTypeKind, string name, Type clrType);
    private void InitializeFacetDescriptions();
    internal static FacetDescription[] GetInitialFacetDescriptions(PrimitiveTypeKind primitiveTypeKind);
    private void InitializeCanonicalFunctions();
    internal ReadOnlyCollection`1<PrimitiveType> GetPromotionTypes(PrimitiveType primitiveType);
    private void InitializePromotableTypes();
    private void InitializeSpatialPromotionGroup(ReadOnlyCollection`1[] promotionTypes, PrimitiveTypeKind[] promotableKinds, PrimitiveTypeKind baseKind);
    internal TypeUsage GetCanonicalModelTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    private void InitializeCanonicalModelTypes();
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    internal TypeUsage ForgetScalarConstraints(TypeUsage type);
    protected virtual XmlReader GetDbInformation(string informationType);
}
internal class System.Data.Entity.Core.Metadata.Edm.Provider.EdmProviderManifestFunctionBuilder : object {
    private List`1<EdmFunction> functions;
    private TypeUsage[] primitiveTypes;
    internal EdmProviderManifestFunctionBuilder(ReadOnlyCollection`1<PrimitiveType> edmPrimitiveTypes);
    internal ReadOnlyCollection`1<EdmFunction> ToFunctionCollection();
    internal static void ForAllBasePrimitiveTypes(Action`1<PrimitiveTypeKind> forEachType);
    internal static void ForTypes(IEnumerable`1<PrimitiveTypeKind> typeKinds, Action`1<PrimitiveTypeKind> forEachType);
    internal void AddAggregate(string aggregateFunctionName, PrimitiveTypeKind collectionArgumentElementTypeKind);
    internal void AddAggregate(PrimitiveTypeKind returnTypeKind, string aggregateFunctionName, PrimitiveTypeKind collectionArgumentElementTypeKind);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argumentTypeKind, string argumentName);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name, PrimitiveTypeKind argument4TypeKind, string argument4Name, PrimitiveTypeKind argument5TypeKind, string argument5Name, PrimitiveTypeKind argument6TypeKind, string argument6Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name, PrimitiveTypeKind argument4TypeKind, string argument4Name, PrimitiveTypeKind argument5TypeKind, string argument5Name, PrimitiveTypeKind argument6TypeKind, string argument6Name, PrimitiveTypeKind argument7TypeKind, string argument7Name);
    private void AddFunction(PrimitiveTypeKind returnType, string functionName, KeyValuePair`2[] parameterDefinitions);
    private FunctionParameter CreateParameter(PrimitiveTypeKind primitiveParameterType, string parameterName);
    private FunctionParameter CreateAggregateParameter(PrimitiveTypeKind collectionParameterTypeElementTypeKind);
    private FunctionParameter CreateReturnParameter(PrimitiveTypeKind primitiveReturnType);
    [CompilerGeneratedAttribute]
private FunctionParameter <AddFunction>b__14_0(KeyValuePair`2<string, PrimitiveTypeKind> paramDef);
}
internal static class System.Data.Entity.Core.Metadata.Edm.Provider.EdmProviderManifestHierarchyIdFunctions : object {
    internal static void AddFunctions(EdmProviderManifestFunctionBuilder functions);
}
internal static class System.Data.Entity.Core.Metadata.Edm.Provider.EdmProviderManifestSpatialFunctions : object {
    internal static void AddFunctions(EdmProviderManifestFunctionBuilder functions);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1 : ReadOnlyCollection`1<T> {
    [CompilerGeneratedAttribute]
private EventHandler SourceAccessed;
    public bool IsReadOnly { get; }
    public T Item { get; }
    internal MetadataCollection`1<T> Source { get; }
    internal ReadOnlyMetadataCollection`1(MetadataCollection`1<T> collection);
    internal ReadOnlyMetadataCollection`1(List`1<T> list);
    public bool get_IsReadOnly();
    public virtual T get_Item(string identity);
    internal MetadataCollection`1<T> get_Source();
    [CompilerGeneratedAttribute]
internal void add_SourceAccessed(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SourceAccessed(EventHandler value);
    public virtual T GetValue(string identity, bool ignoreCase);
    public virtual bool Contains(string identity);
    public virtual bool TryGetValue(string identity, bool ignoreCase, T& item);
    public Enumerator<T> GetEnumerator();
    public virtual int IndexOf(T value);
}
public class System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint : MetadataItem {
    private RelationshipEndMember _fromRole;
    private RelationshipEndMember _toRole;
    private ReadOnlyMetadataCollection`1<EdmProperty> _fromProperties;
    private ReadOnlyMetadataCollection`1<EdmProperty> _toProperties;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember FromRole { get; public set; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember ToRole { get; public set; }
    internal AssociationEndMember PrincipalEnd { get; }
    internal AssociationEndMember DependentEnd { get; }
    [MetadataPropertyAttribute("28", "True")]
public ReadOnlyMetadataCollection`1<EdmProperty> FromProperties { get; }
    [MetadataPropertyAttribute("28", "True")]
public ReadOnlyMetadataCollection`1<EdmProperty> ToProperties { get; }
    public ReferentialConstraint(RelationshipEndMember fromRole, RelationshipEndMember toRole, IEnumerable`1<EdmProperty> fromProperties, IEnumerable`1<EdmProperty> toProperties);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public RelationshipEndMember get_FromRole();
    public void set_FromRole(RelationshipEndMember value);
    public RelationshipEndMember get_ToRole();
    public void set_ToRole(RelationshipEndMember value);
    internal AssociationEndMember get_PrincipalEnd();
    internal AssociationEndMember get_DependentEnd();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_FromProperties();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_ToProperties();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal string BuildConstraintExceptionMessage();
    [CompilerGeneratedAttribute]
private void <get_FromProperties>b__20_0(EdmMember p);
}
public class System.Data.Entity.Core.Metadata.Edm.RefType : EdmType {
    private EntityTypeBase _elementType;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("5", "False")]
public EntityTypeBase ElementType { get; }
    internal RefType(EntityType entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual EntityTypeBase get_ElementType();
    private static string GetIdentity(EntityTypeBase entityTypeBase);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember : EdmMember {
    private OperationAction _deleteBehavior;
    private RelationshipMultiplicity _relationshipMultiplicity;
    [MetadataPropertyAttribute("10", "True")]
public OperationAction DeleteBehavior { get; public set; }
    [MetadataPropertyAttribute("33", "False")]
public RelationshipMultiplicity RelationshipMultiplicity { get; public set; }
    internal RelationshipEndMember(string name, RefType endRefType, RelationshipMultiplicity multiplicity);
    public OperationAction get_DeleteBehavior();
    public void set_DeleteBehavior(OperationAction value);
    public RelationshipMultiplicity get_RelationshipMultiplicity();
    public void set_RelationshipMultiplicity(RelationshipMultiplicity value);
    public EntityType GetEntityType();
}
public enum System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity : Enum {
    public int value__;
    public static RelationshipMultiplicity ZeroOrOne;
    public static RelationshipMultiplicity One;
    public static RelationshipMultiplicity Many;
}
internal static class System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicityConverter : object {
    internal static string MultiplicityToString(RelationshipMultiplicity multiplicity);
    internal static bool TryParseMultiplicity(string value, RelationshipMultiplicity& multiplicity);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.RelationshipSet : EntitySetBase {
    public RelationshipType ElementType { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal RelationshipSet(string name, string schema, string table, string definingQuery, RelationshipType relationshipType);
    public RelationshipType get_ElementType();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
}
public abstract class System.Data.Entity.Core.Metadata.Edm.RelationshipType : EntityTypeBase {
    private ReadOnlyMetadataCollection`1<RelationshipEndMember> _relationshipEndMembers;
    public ReadOnlyMetadataCollection`1<RelationshipEndMember> RelationshipEndMembers { get; }
    internal RelationshipType(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyMetadataCollection`1<RelationshipEndMember> get_RelationshipEndMembers();
}
public class System.Data.Entity.Core.Metadata.Edm.RowType : StructuralType {
    private ReadOnlyMetadataCollection`1<EdmProperty> _properties;
    private InitializerMetadata _initializerMetadata;
    internal InitializerMetadata InitializerMetadata { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> DeclaredProperties { get; }
    internal RowType(IEnumerable`1<EdmProperty> properties);
    internal RowType(IEnumerable`1<EdmProperty> properties, InitializerMetadata initializerMetadata);
    internal InitializerMetadata get_InitializerMetadata();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_DeclaredProperties();
    private void AddProperty(EdmProperty property);
    internal virtual void ValidateMemberForAdd(EdmMember member);
    private static string GetRowTypeIdentityFromProperties(IEnumerable`1<EdmProperty> properties, InitializerMetadata initializerMetadata);
    private static IEnumerable`1<EdmProperty> CheckProperties(IEnumerable`1<EdmProperty> properties);
    internal virtual bool EdmEquals(MetadataItem item);
    public static RowType Create(IEnumerable`1<EdmProperty> properties, IEnumerable`1<MetadataProperty> metadataProperties);
}
internal class System.Data.Entity.Core.Metadata.Edm.SafeLink`1 : object {
    private TParent _value;
    public TParent Value { get; }
    public TParent get_Value();
    internal static IEnumerable`1<TChild> BindChildren(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, IEnumerable`1<TChild> children);
    internal static TChild BindChild(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, TChild child);
}
internal class System.Data.Entity.Core.Metadata.Edm.SafeLinkCollection`2 : ReadOnlyMetadataCollection`1<TChild> {
    public SafeLinkCollection`2(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, MetadataCollection`1<TChild> children);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.SimpleType : EdmType {
    internal SimpleType(string name, string namespaceName, DataSpace dataSpace);
}
public class System.Data.Entity.Core.Metadata.Edm.SsdlSerializer : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<DataModelErrorEventArgs> OnError;
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<DataModelErrorEventArgs> value);
    public virtual bool Serialize(EdmModel dbDatabase, string provider, string providerManifestToken, XmlWriter xmlWriter, bool serializeDefaultNullability);
    public virtual bool Serialize(EdmModel dbDatabase, string namespaceName, string provider, string providerManifestToken, XmlWriter xmlWriter, bool serializeDefaultNullability);
    private bool ValidateModel(EdmModel model);
    private static EdmSerializationVisitor CreateVisitor(XmlWriter xmlWriter, EdmModel dbDatabase, bool serializeDefaultNullability);
}
public enum System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern : Enum {
    public int value__;
    public static StoreGeneratedPattern None;
    public static StoreGeneratedPattern Identity;
    public static StoreGeneratedPattern Computed;
}
public class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection : ItemCollection {
    private double _schemaVersion;
    private CacheForPrimitiveTypes _primitiveTypeMaps;
    private Memoizer`2<EdmFunction, EdmFunction> _cachedCTypeFunction;
    private DbProviderManifest _providerManifest;
    private string _providerInvariantName;
    private string _providerManifestToken;
    private DbProviderFactory _providerFactory;
    private QueryCacheManager _queryCacheManager;
    internal QueryCacheManager QueryCacheManager { get; }
    public DbProviderFactory ProviderFactory { get; }
    public DbProviderManifest ProviderManifest { get; }
    public string ProviderManifestToken { get; }
    public string ProviderInvariantName { get; }
    public double StoreSchemaVersion { get; internal set; }
    internal StoreItemCollection(DbProviderFactory factory, DbProviderManifest manifest, string providerInvariantName, string providerManifestToken);
    private StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IDbDependencyResolver resolver, IList`1& errors);
    internal StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths);
    public StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders);
    public StoreItemCollection(EdmModel model);
    public StoreItemCollection(String[] filePaths);
    private IList`1<EdmSchemaError> Init(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths, bool throwOnError, IDbDependencyResolver resolver, DbProviderManifest& providerManifest, DbProviderFactory& providerFactory, String& providerInvariantName, String& providerManifestToken, Memoizer`2& cachedCTypeFunction);
    internal QueryCacheManager get_QueryCacheManager();
    public virtual DbProviderFactory get_ProviderFactory();
    public virtual DbProviderManifest get_ProviderManifest();
    public virtual string get_ProviderManifestToken();
    public virtual string get_ProviderInvariantName();
    public double get_StoreSchemaVersion();
    internal void set_StoreSchemaVersion(double value);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes();
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    private void LoadProviderManifest(DbProviderManifest storeManifest);
    internal ReadOnlyCollection`1<EdmFunction> GetCTypeFunctions(string functionName, bool ignoreCase);
    private ReadOnlyCollection`1<EdmFunction> ConvertToCTypeFunctions(ReadOnlyCollection`1<EdmFunction> functionOverloads);
    internal EdmFunction ConvertToCTypeFunction(EdmFunction sTypeFunction);
    internal static EdmFunction ConvertFunctionSignatureToCType(EdmFunction sTypeFunction);
    public static StoreItemCollection Create(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IDbDependencyResolver resolver, IList`1& errors);
}
public abstract class System.Data.Entity.Core.Metadata.Edm.StructuralType : EdmType {
    private MemberCollection _members;
    private ReadOnlyMetadataCollection`1<EdmMember> _readOnlyMembers;
    [MetadataPropertyAttribute("24", "True")]
public ReadOnlyMetadataCollection`1<EdmMember> Members { get; }
    internal StructuralType(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyMetadataCollection`1<EdmMember> get_Members();
    internal ReadOnlyMetadataCollection`1<T> GetDeclaredOnlyMembers();
    internal virtual void SetReadOnly();
    internal abstract virtual void ValidateMemberForAdd(EdmMember member);
    public void AddMember(EdmMember member);
    internal void AddMember(EdmMember member, bool forceAdd);
    public virtual void RemoveMember(EdmMember member);
    internal virtual bool HasMember(EdmMember member);
    internal virtual void NotifyItemIdentityChanged(EdmMember item, string initialIdentity);
}
internal class System.Data.Entity.Core.Metadata.Edm.TargetPerspective : Perspective {
    internal static DataSpace TargetPerspectiveDataSpace;
    private ModelPerspective _modelPerspective;
    internal TargetPerspective(MetadataWorkspace metadataWorkspace);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& usage);
    internal virtual bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
}
internal static class System.Data.Entity.Core.Metadata.Edm.TypeSemantics : object {
    private static ReadOnlyCollection`1[0...,0...] _commonTypeClosure;
    internal static bool IsEqual(TypeUsage type1, TypeUsage type2);
    internal static bool IsStructurallyEqual(TypeUsage fromType, TypeUsage toType);
    internal static bool IsStructurallyEqualOrPromotableTo(TypeUsage fromType, TypeUsage toType);
    internal static bool IsStructurallyEqualOrPromotableTo(EdmType fromType, EdmType toType);
    internal static bool IsSubTypeOf(TypeUsage subType, TypeUsage superType);
    internal static bool IsSubTypeOf(EdmType subEdmType, EdmType superEdmType);
    internal static bool IsPromotableTo(TypeUsage fromType, TypeUsage toType);
    internal static IEnumerable`1<TypeUsage> FlattenType(TypeUsage type);
    internal static bool IsCastAllowed(TypeUsage fromType, TypeUsage toType);
    internal static bool TryGetCommonType(TypeUsage type1, TypeUsage type2, TypeUsage& commonType);
    internal static TypeUsage GetCommonType(TypeUsage type1, TypeUsage type2);
    internal static bool IsAggregateFunction(EdmFunction function);
    internal static bool IsValidPolymorphicCast(TypeUsage fromType, TypeUsage toType);
    internal static bool IsValidPolymorphicCast(EdmType fromEdmType, EdmType toEdmType);
    internal static bool IsNominalType(TypeUsage type);
    internal static bool IsCollectionType(TypeUsage type);
    internal static bool IsComplexType(TypeUsage type);
    internal static bool IsEntityType(TypeUsage type);
    internal static bool IsRelationshipType(TypeUsage type);
    internal static bool IsEnumerationType(TypeUsage type);
    internal static bool IsScalarType(TypeUsage type);
    internal static bool IsScalarType(EdmType type);
    internal static bool IsNumericType(TypeUsage type);
    internal static bool IsIntegerNumericType(TypeUsage type);
    internal static bool IsFixedPointNumericType(TypeUsage type);
    internal static bool IsFloatPointNumericType(TypeUsage type);
    internal static bool IsUnsignedNumericType(TypeUsage type);
    internal static bool IsPolymorphicType(TypeUsage type);
    internal static bool IsBooleanType(TypeUsage type);
    internal static bool IsPrimitiveType(TypeUsage type);
    internal static bool IsPrimitiveType(TypeUsage type, PrimitiveTypeKind primitiveTypeKind);
    internal static bool IsRowType(TypeUsage type);
    internal static bool IsReferenceType(TypeUsage type);
    internal static bool IsSpatialType(TypeUsage type);
    internal static bool IsStrongSpatialType(TypeUsage type);
    internal static bool IsStructuralType(TypeUsage type);
    internal static bool IsPartOfKey(EdmMember edmMember);
    internal static bool IsNullable(TypeUsage type);
    internal static bool IsNullable(EdmMember edmMember);
    internal static bool IsEqualComparable(TypeUsage type);
    internal static bool IsEqualComparableTo(TypeUsage type1, TypeUsage type2);
    internal static bool IsOrderComparable(TypeUsage type);
    internal static bool IsOrderComparableTo(TypeUsage type1, TypeUsage type2);
    internal static TypeUsage ForgetConstraints(TypeUsage type);
    [ConditionalAttribute("DEBUG")]
internal static void AssertTypeInvariant(string message, Func`1<bool> assertPredicate);
    private static bool IsPrimitiveTypeSubTypeOf(TypeUsage fromType, TypeUsage toType);
    private static bool IsSubTypeOf(PrimitiveType subPrimitiveType, PrimitiveType superPrimitiveType);
    private static bool IsPromotableTo(RowType fromRowType, RowType toRowType);
    private static bool IsPrimitiveTypePromotableTo(TypeUsage fromType, TypeUsage toType);
    private static bool TryGetCommonType(EdmType edmType1, EdmType edmType2, EdmType& commonEdmType);
    private static bool TryGetCommonPrimitiveType(TypeUsage type1, TypeUsage type2, TypeUsage& commonType);
    private static bool TryGetCommonType(PrimitiveType primitiveType1, PrimitiveType primitiveType2, EdmType& commonType);
    private static bool TryGetCommonType(CollectionType collectionType1, CollectionType collectionType2, EdmType& commonType);
    private static bool TryGetCommonType(RefType refType1, RefType reftype2, EdmType& commonType);
    private static bool TryGetCommonType(RowType rowType1, RowType rowType2, EdmType& commonRowType);
    internal static bool TryGetCommonBaseType(EdmType type1, EdmType type2, EdmType& commonBaseType);
    private static bool HasCommonType(TypeUsage type1, TypeUsage type2);
    private static bool IsEqualComparable(EdmType edmType);
    private static bool IsOrderComparable(EdmType edmType);
    private static bool CompareTypes(TypeUsage fromType, TypeUsage toType, bool equivalenceOnly);
    private static void ComputeCommonTypeClosure();
    private static ReadOnlyCollection`1<PrimitiveType> Intersect(IList`1<PrimitiveType> types1, IList`1<PrimitiveType> types2);
    private static ReadOnlyCollection`1<PrimitiveType> GetPrimitiveCommonSuperTypes(PrimitiveType primitiveType1, PrimitiveType primitiveType2);
}
[DebuggerDisplayAttribute("EdmType={EdmType}, Facets.Count={Facets.Count}")]
public class System.Data.Entity.Core.Metadata.Edm.TypeUsage : MetadataItem {
    private TypeUsage _modelTypeUsage;
    private EdmType _edmType;
    private ReadOnlyMetadataCollection`1<Facet> _facets;
    private string _identity;
    private static String[] _identityFacets;
    internal static Unbounded DefaultMaxLengthFacetValue;
    internal static Unbounded DefaultPrecisionFacetValue;
    internal static Unbounded DefaultScaleFacetValue;
    internal static bool DefaultUnicodeFacetValue;
    internal static bool DefaultFixedLengthFacetValue;
    internal static Nullable`1<byte> DefaultDateTimePrecisionFacetValue;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType EdmType { get; }
    [MetadataPropertyAttribute("17", "True")]
public ReadOnlyMetadataCollection`1<Facet> Facets { get; }
    public TypeUsage ModelTypeUsage { get; }
    internal string Identity { get; }
    private TypeUsage(EdmType edmType);
    private TypeUsage(EdmType edmType, IEnumerable`1<Facet> facets);
    private static TypeUsage();
    internal static TypeUsage Create(EdmType edmType);
    internal static TypeUsage Create(EdmType edmType, FacetValues values);
    public static TypeUsage Create(EdmType edmType, IEnumerable`1<Facet> facets);
    internal TypeUsage ShallowCopy(FacetValues facetValues);
    internal TypeUsage ShallowCopy(Facet[] facetValues);
    private static IEnumerable`1<Facet> OverrideFacetValues(IEnumerable`1<Facet> facets, IEnumerable`1<Facet> facetValues);
    public static TypeUsage CreateDefaultTypeUsage(EdmType edmType);
    public static TypeUsage CreateStringTypeUsage(PrimitiveType primitiveType, bool isUnicode, bool isFixedLength, int maxLength);
    public static TypeUsage CreateStringTypeUsage(PrimitiveType primitiveType, bool isUnicode, bool isFixedLength);
    public static TypeUsage CreateBinaryTypeUsage(PrimitiveType primitiveType, bool isFixedLength, int maxLength);
    public static TypeUsage CreateBinaryTypeUsage(PrimitiveType primitiveType, bool isFixedLength);
    public static TypeUsage CreateDateTimeTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateDateTimeOffsetTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateTimeTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateDecimalTypeUsage(PrimitiveType primitiveType, byte precision, byte scale);
    public static TypeUsage CreateDecimalTypeUsage(PrimitiveType primitiveType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual EdmType get_EdmType();
    public virtual ReadOnlyMetadataCollection`1<Facet> get_Facets();
    public TypeUsage get_ModelTypeUsage();
    public bool IsSubtypeOf(TypeUsage typeUsage);
    private IEnumerable`1<Facet> GetFacets();
    internal virtual void SetReadOnly();
    internal virtual string get_Identity();
    private static IEnumerable`1<Facet> GetDefaultFacetDescriptionsAndOverrideFacetValues(EdmType type, FacetValues values);
    private static IEnumerable`1<Facet> OverrideFacetValues(IEnumerable`1<Facet> facets, FacetValues values);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Metadata.Edm.TypeUsage/<OverrideFacetValues>d__45`1")]
private static IEnumerable`1<Facet> OverrideFacetValues(IEnumerable`1<T> facetThings, Func`2<T, FacetDescription> getDescription, Func`2<T, Facet> getFacet, FacetValues values);
    internal virtual void BuildIdentity(StringBuilder builder);
    public virtual string ToString();
    internal virtual bool EdmEquals(MetadataItem item);
    private static void ValidateMaxLength(int maxLength);
}
internal static class System.Data.Entity.Core.Metadata.Edm.Util : object {
    internal static void ThrowIfReadOnly(MetadataItem item);
    [ConditionalAttribute("DEBUG")]
internal static void AssertItemHasIdentity(MetadataItem item, string argumentName);
    internal static ObjectTypeMapping GetObjectMapping(EdmType type, MetadataWorkspace workspace);
}
internal class System.Data.Entity.Core.Metadata.Edm.ValidationErrorEventArgs : EventArgs {
    private EdmItemError _validationError;
    public EdmItemError ValidationError { get; }
    public ValidationErrorEventArgs(EdmItemError validationError);
    public EdmItemError get_ValidationError();
}
internal enum System.Data.Entity.Core.Metadata.Edm.ValidationSeverity : Enum {
    public int value__;
    public static ValidationSeverity Warning;
    public static ValidationSeverity Error;
    public static ValidationSeverity Internal;
}
internal static class System.Data.Entity.Core.Metadata.Edm.XmlConstants : object {
    internal static string CustomAnnotationNamespace;
    internal static string CustomAnnotationPrefix;
    internal static string ClrTypeAnnotation;
    internal static string ClrTypeAnnotationWithPrefix;
    internal static string UseClrTypesAnnotationWithPrefix;
    internal static string IndexAnnotationWithPrefix;
    internal static string ModelNamespace_1;
    internal static string ModelNamespace_1_1;
    internal static string ModelNamespace_2;
    internal static string ModelNamespace_3;
    internal static string ProviderManifestNamespace;
    internal static string TargetNamespace_1;
    internal static string TargetNamespace_2;
    internal static string TargetNamespace_3;
    internal static string CodeGenerationSchemaNamespace;
    internal static string EntityStoreSchemaGeneratorNamespace;
    internal static string AnnotationNamespace;
    internal static string StoreGeneratedPatternAnnotation;
    internal static string Alias;
    internal static string Self;
    internal static string Provider;
    internal static string ProviderManifestToken;
    internal static string CSSpaceSchemaExtension;
    internal static string CSpaceSchemaExtension;
    internal static string SSpaceSchemaExtension;
    internal static double UndefinedVersion;
    internal static double EdmVersionForV1;
    internal static double EdmVersionForV1_1;
    internal static double EdmVersionForV2;
    internal static double EdmVersionForV3;
    internal static double SchemaVersionLatest;
    internal static double StoreVersionForV1;
    internal static double StoreVersionForV2;
    internal static double StoreVersionForV3;
    internal static string Association;
    internal static string AssociationSet;
    internal static string ComplexType;
    internal static string DefiningQuery;
    internal static string DefiningExpression;
    internal static string Documentation;
    internal static string DependentRole;
    internal static string End;
    internal static string EntityType;
    internal static string EntityContainer;
    internal static string FunctionImport;
    internal static string Key;
    internal static string NavigationProperty;
    internal static string OnDelete;
    internal static string PrincipalRole;
    internal static string Property;
    internal static string PropertyRef;
    internal static string ReferentialConstraint;
    internal static string Role;
    internal static string Schema;
    internal static string Summary;
    internal static string LongDescription;
    internal static string SampleValue;
    internal static string EnumType;
    internal static string Member;
    internal static string ValueTerm;
    internal static string Annotations;
    internal static string ValueAnnotation;
    internal static string TypeAnnotation;
    internal static string Using;
    internal static string TypeAccess;
    internal static string MethodAccess;
    internal static string SetterAccess;
    internal static string GetterAccess;
    internal static string Abstract;
    internal static string OpenType;
    internal static string Action;
    internal static string BaseType;
    internal static string EntitySet;
    internal static string EntitySetPath;
    internal static string Extends;
    internal static string FromRole;
    internal static string Multiplicity;
    internal static string Name;
    internal static string Namespace;
    internal static string Table;
    internal static string ToRole;
    internal static string Relationship;
    internal static string ElementType;
    internal static string StoreGeneratedPattern;
    internal static string IsFlags;
    internal static string IsBindable;
    internal static string IsSideEffecting;
    internal static string UnderlyingType;
    internal static string Value;
    internal static string ContainsTarget;
    internal static string Max;
    internal static string None;
    internal static string Identity;
    internal static string Computed;
    internal static string Fixed;
    internal static string CollectionKind_None;
    internal static string CollectionKind_List;
    internal static string CollectionKind_Bag;
    internal static string CollectionKind;
    internal static string In;
    internal static string Out;
    internal static string InOut;
    internal static string Variable;
    internal static string True;
    internal static string False;
    internal static string Function;
    internal static string ReturnType;
    internal static string Parameter;
    internal static string Mode;
    internal static string StoreFunctionName;
    internal static string ProviderManifestElement;
    internal static string TypesElement;
    internal static string FunctionsElement;
    internal static string TypeElement;
    internal static string FunctionElement;
    internal static string ScaleElement;
    internal static string PrecisionElement;
    internal static string MaxLengthElement;
    internal static string FacetDescriptionsElement;
    internal static string UnicodeElement;
    internal static string FixedLengthElement;
    internal static string ReturnTypeElement;
    internal static string SridElement;
    internal static string IsStrictElement;
    internal static string TypeAttribute;
    internal static string MinimumAttribute;
    internal static string MaximumAttribute;
    internal static string NamespaceAttribute;
    internal static string DefaultValueAttribute;
    internal static string ConstantAttribute;
    internal static string DestinationTypeAttribute;
    internal static string PrimitiveTypeKindAttribute;
    internal static string AggregateAttribute;
    internal static string BuiltInAttribute;
    internal static string NameAttribute;
    internal static string IgnoreFacetsAttribute;
    internal static string NiladicFunction;
    internal static string IsComposable;
    internal static string CommandText;
    internal static string ParameterTypeSemantics;
    internal static string CollectionType;
    internal static string ReferenceType;
    internal static string RowType;
    internal static string TypeRef;
    internal static string UseStrongSpatialTypes;
    internal static string XmlCommentStartString;
    internal static string XmlCommentEndString;
    public static string GetCsdlNamespace(double edmVersion);
    public static string GetSsdlNamespace(double edmVersion);
}
internal abstract class System.Data.Entity.Core.Metadata.Edm.XmlSchemaWriter : object {
    protected XmlWriter _xmlWriter;
    protected double _version;
    internal void WriteComment(string comment);
    internal virtual void WriteEndElement();
    protected static string GetQualifiedTypeName(string prefix, string typeName);
    internal static string GetLowerCaseStringFromBoolValue(bool value);
}
public class System.Data.Entity.Core.MetadataException : EntityException {
    private static int HResultMetadata;
    public MetadataException(string message);
    public MetadataException(string message, Exception innerException);
    private MetadataException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Core.ObjectNotFoundException : DataException {
    public ObjectNotFoundException(string message);
    public ObjectNotFoundException(string message, Exception innerException);
    private ObjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Core.Objects.CompiledQuery : object {
    private LambdaExpression _query;
    private Guid _cacheToken;
    private CompiledQuery(LambdaExpression query);
    public static Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> Compile(Expression`1<Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> query);
    public static Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> Compile(Expression`1<Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> query);
    public static Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> Compile(Expression`1<Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> query);
    public static Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> Compile(Expression`1<Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> query);
    public static Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> Compile(Expression`1<Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> query);
    public static Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> Compile(Expression`1<Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> query);
    public static Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> Compile(Expression`1<Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> query);
    public static Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> Compile(Expression`1<Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> query);
    public static Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Compile(Expression`1<Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> query);
    public static Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Compile(Expression`1<Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> query);
    public static Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile(Expression`1<Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query);
    public static Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult> Compile(Expression`1<Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult>> query);
    public static Func`5<TArg0, TArg1, TArg2, TArg3, TResult> Compile(Expression`1<Func`5<TArg0, TArg1, TArg2, TArg3, TResult>> query);
    public static Func`4<TArg0, TArg1, TArg2, TResult> Compile(Expression`1<Func`4<TArg0, TArg1, TArg2, TResult>> query);
    public static Func`3<TArg0, TArg1, TResult> Compile(Expression`1<Func`3<TArg0, TArg1, TResult>> query);
    public static Func`2<TArg0, TResult> Compile(Expression`1<Func`2<TArg0, TResult>> query);
    private TResult Invoke(TArg0 arg0);
    private TResult Invoke(TArg0 arg0, TArg1 arg1);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14);
    private TResult Invoke(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15);
    private TResult ExecuteQuery(ObjectContext context, Object[] parameterValues);
    private static Type GetElementType(Type resultType, Boolean& isSingleton);
}
public abstract class System.Data.Entity.Core.Objects.CurrentValueRecord : DbUpdatableDataRecord {
    internal CurrentValueRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal CurrentValueRecord(ObjectStateEntry cacheEntry);
}
[DataContractAttribute]
public abstract class System.Data.Entity.Core.Objects.DataClasses.ComplexObject : StructuralObject {
    private StructuralObject _parent;
    private string _parentPropertyName;
    internal bool IsChangeTracked { get; }
    internal void AttachToParent(StructuralObject parent, string parentPropertyName);
    internal void DetachFromParent();
    protected sealed virtual void ReportPropertyChanging(string property);
    protected sealed virtual void ReportPropertyChanged(string property);
    internal sealed virtual bool get_IsChangeTracked();
    internal sealed virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal sealed virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
}
[AttributeUsageAttribute("128")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute : EdmPropertyAttribute {
}
[AttributeUsageAttribute("4")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute : EdmTypeAttribute {
}
[AttributeUsageAttribute("4")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute : EdmTypeAttribute {
}
[AttributeUsageAttribute("16")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute : EdmTypeAttribute {
}
[ObsoleteAttribute("This attribute has been replaced by System.Data.Entity.DbFunctionAttribute.")]
[AttributeUsageAttribute("64")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute : DbFunctionAttribute {
    public EdmFunctionAttribute(string namespaceName, string functionName);
}
[AttributeUsageAttribute("128")]
public abstract class System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute : Attribute {
    private string _relationshipNamespaceName;
    private string _relationshipName;
    private string _role1Name;
    private string _role2Name;
    private RelationshipMultiplicity _role1Multiplicity;
    private RelationshipMultiplicity _role2Multiplicity;
    private Type _role1Type;
    private Type _role2Type;
    private bool _isForeignKey;
    public string RelationshipNamespaceName { get; }
    public string RelationshipName { get; }
    public string Role1Name { get; }
    public RelationshipMultiplicity Role1Multiplicity { get; }
    public Type Role1Type { get; }
    public string Role2Name { get; }
    public RelationshipMultiplicity Role2Multiplicity { get; }
    public Type Role2Type { get; }
    public bool IsForeignKey { get; }
    public EdmRelationshipAttribute(string relationshipNamespaceName, string relationshipName, string role1Name, RelationshipMultiplicity role1Multiplicity, Type role1Type, string role2Name, RelationshipMultiplicity role2Multiplicity, Type role2Type);
    public EdmRelationshipAttribute(string relationshipNamespaceName, string relationshipName, string role1Name, RelationshipMultiplicity role1Multiplicity, Type role1Type, string role2Name, RelationshipMultiplicity role2Multiplicity, Type role2Type, bool isForeignKey);
    public string get_RelationshipNamespaceName();
    public string get_RelationshipName();
    public string get_Role1Name();
    public RelationshipMultiplicity get_Role1Multiplicity();
    public Type get_Role1Type();
    public string get_Role2Name();
    public RelationshipMultiplicity get_Role2Multiplicity();
    public Type get_Role2Type();
    public bool get_IsForeignKey();
}
[AttributeUsageAttribute("128")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute : EdmPropertyAttribute {
    private string _relationshipNamespaceName;
    private string _relationshipName;
    private string _targetRoleName;
    public string RelationshipNamespaceName { get; }
    public string RelationshipName { get; }
    public string TargetRoleName { get; }
    public EdmRelationshipNavigationPropertyAttribute(string relationshipNamespaceName, string relationshipName, string targetRoleName);
    public string get_RelationshipNamespaceName();
    public string get_RelationshipName();
    public string get_TargetRoleName();
}
[AttributeUsageAttribute("128")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute : EdmPropertyAttribute {
    private bool _isNullable;
    [CompilerGeneratedAttribute]
private bool <EntityKeyProperty>k__BackingField;
    public bool IsNullable { get; public set; }
    public bool EntityKeyProperty { get; public set; }
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_EntityKeyProperty();
    [CompilerGeneratedAttribute]
public void set_EntityKeyProperty(bool value);
}
[AttributeUsageAttribute("5")]
public class System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute : Attribute {
    public EdmSchemaAttribute(string assemblyGuid);
}
public abstract class System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    public string Name { get; public set; }
    public string NamespaceName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
}
public class System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1 : RelatedEnd {
    private HashSet`1<TEntity> _relatedEntities;
    private CollectionChangeEventHandler _onAssociationChangedforObjectView;
    private Dictionary`2<TEntity, IEntityWrapper> _wrappedRelatedEntities;
    private Dictionary`2<TEntity, IEntityWrapper> WrappedRelatedEntities { get; }
    public int Count { get; }
    internal int CountInternal { get; }
    public bool IsReadOnly { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal EntityCollection`1(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal virtual void add_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal virtual void remove_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    private Dictionary`2<TEntity, IEntityWrapper> get_WrappedRelatedEntities();
    public sealed virtual int get_Count();
    internal int get_CountInternal();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    internal virtual void OnAssociationChanged(CollectionChangeAction collectionChangeAction, object entity);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public virtual void Load(MergeOption mergeOption);
    public virtual Task LoadAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    public void Attach(IEnumerable`1<TEntity> entities);
    public void Attach(TEntity entity);
    internal virtual void Load(List`1<IEntityWrapper> collection, MergeOption mergeOption);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1/<LoadAsync>d__25")]
internal virtual Task LoadAsync(List`1<IEntityWrapper> collection, MergeOption mergeOption, CancellationToken cancellationToken);
    public sealed virtual void Add(TEntity item);
    internal virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    public sealed virtual bool Remove(TEntity item);
    internal bool RemoveInternal(TEntity entity);
    internal virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    internal virtual void Exclude();
    internal virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal virtual void ClearWrappedValues();
    internal virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, HashSet`1<object> visited);
    internal virtual bool IsEmpty();
    internal virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnRelatedEndClear();
    internal virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    public sealed virtual IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal virtual IEnumerable GetInternalEnumerable();
    internal virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TEntity item);
    public sealed virtual void CopyTo(TEntity[] array, int arrayIndex);
    internal virtual void BulkDeleteAll(List`1<object> list);
    internal virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    [OnSerializingAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void OnCollectionDeserialized(StreamingContext context);
    public ObjectQuery`1<TEntity> CreateSourceQuery();
    internal virtual IEnumerable CreateSourceQueryInternal();
    internal virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
}
[DataContractAttribute]
public abstract class System.Data.Entity.Core.Objects.DataClasses.EntityObject : StructuralObject {
    private RelationshipManager _relationships;
    private EntityKey _entityKey;
    private IEntityChangeTracker _entityChangeTracker;
    private static DetachedEntityChangeTracker _detachedEntityChangeTracker;
    private IEntityChangeTracker EntityChangeTracker { get; private set; }
    [BrowsableAttribute("False")]
[XmlIgnoreAttribute]
public EntityState EntityState { get; }
    [BrowsableAttribute("False")]
[DataMemberAttribute]
public EntityKey EntityKey { get; public set; }
    private RelationshipManager System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager { get; }
    internal bool IsChangeTracked { get; }
    private static EntityObject();
    private IEntityChangeTracker get_EntityChangeTracker();
    private void set_EntityChangeTracker(IEntityChangeTracker value);
    public EntityState get_EntityState();
    public sealed virtual EntityKey get_EntityKey();
    public sealed virtual void set_EntityKey(EntityKey value);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(IEntityChangeTracker changeTracker);
    private sealed virtual override RelationshipManager System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.get_RelationshipManager();
    protected sealed virtual void ReportPropertyChanging(string property);
    protected sealed virtual void ReportPropertyChanged(string property);
    internal sealed virtual bool get_IsChangeTracked();
    internal sealed virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal sealed virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
}
[DataContractAttribute]
public abstract class System.Data.Entity.Core.Objects.DataClasses.EntityReference : RelatedEnd {
    private EntityKey _detachedEntityKey;
    private EntityKey _cachedForeignKey;
    [DataMemberAttribute]
public EntityKey EntityKey { get; public set; }
    internal EntityKey AttachedEntityKey { get; }
    internal EntityKey DetachedEntityKey { get; internal set; }
    internal EntityKey CachedForeignKey { get; }
    internal IEntityWrapper CachedValue { get; }
    internal IEntityWrapper ReferenceValue { get; internal set; }
    internal bool CanDeferredLoad { get; }
    internal EntityReference(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public EntityKey get_EntityKey();
    public void set_EntityKey(EntityKey value);
    internal void SetEntityKey(EntityKey value, bool forceFixup);
    internal bool AttemptToNullFKsOnRefOrKeySetToNull();
    internal EntityKey get_AttachedEntityKey();
    internal EntityKey get_DetachedEntityKey();
    internal void set_DetachedEntityKey(EntityKey value);
    internal EntityKey get_CachedForeignKey();
    internal void SetCachedForeignKey(EntityKey newForeignKey, EntityEntry source);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.EntityReference/<GetAllKeyValues>d__17")]
internal IEnumerable`1<EntityKey> GetAllKeyValues();
    internal abstract virtual IEntityWrapper get_CachedValue();
    internal abstract virtual IEntityWrapper get_ReferenceValue();
    internal abstract virtual void set_ReferenceValue(IEntityWrapper value);
    internal EntityKey ValidateOwnerWithRIConstraints(IEntityWrapper targetEntity, EntityKey targetEntityKey, bool checkBothEnds);
    internal void ValidateSettingRIConstraints(IEntityWrapper targetEntity, bool settingToNull, bool changingForeignKeyValue);
    internal virtual bool get_CanDeferredLoad();
    internal void UpdateForeignKeyValues(IEntityWrapper dependentEntity, IEntityWrapper principalEntity, Dictionary`2<int, object> changedFKs, bool forceChange);
    internal void UpdateForeignKeyValues(IEntityWrapper dependentEntity, EntityKey principalKey);
    internal object GetDependentEndOfReferentialConstraint(object relatedValue);
    internal bool NavigationPropertyIsNullOrMissing();
    internal virtual void AddEntityToObjectStateManager(IEntityWrapper wrappedEntity, bool doAttach);
    internal virtual void AddToNavigationPropertyIfCompatible(RelatedEnd otherRelatedEnd);
    internal virtual bool CachedForeignKeyIsConceptualNull();
    internal virtual bool UpdateDependentEndForeignKey(RelatedEnd targetRelatedEnd, bool forceForeignKeyChanges);
    internal virtual void ValidateDetachedEntityKey();
    internal virtual void VerifyDetachedKeyMatches(EntityKey entityKey);
    internal virtual void DetachAll(EntityState ownerEntityState);
    internal virtual bool CheckReferentialConstraintPrincipalProperty(EntityEntry ownerEntry, ReferentialConstraint constraint);
    internal virtual bool CheckReferentialConstraintDependentProperty(EntityEntry ownerEntry, ReferentialConstraint constraint);
    private EntityKey ExtractPrincipalKey(IEntityWrapper wrappedRelatedEntity);
    internal void NullAllForeignKeys();
}
[DataContractAttribute]
public class System.Data.Entity.Core.Objects.DataClasses.EntityReference`1 : EntityReference {
    private TEntity _cachedValue;
    private IEntityWrapper _wrappedCachedValue;
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public TEntity Value { get; public set; }
    internal IEntityWrapper CachedValue { get; }
    internal IEntityWrapper ReferenceValue { get; internal set; }
    internal EntityReference`1(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public TEntity get_Value();
    public void set_Value(TEntity value);
    internal virtual IEntityWrapper get_CachedValue();
    internal virtual IEntityWrapper get_ReferenceValue();
    internal virtual void set_ReferenceValue(IEntityWrapper value);
    public virtual void Load(MergeOption mergeOption);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.EntityReference`1/<LoadAsync>d__13")]
public virtual Task LoadAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    private void HandleRefreshedValue(MergeOption mergeOption, IList`1<TEntity> refreshedValue);
    internal virtual IEnumerable GetInternalEnumerable();
    internal virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    public void Attach(TEntity entity);
    internal virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    private void IncludeEntityKey(bool doAttach);
    internal virtual void Exclude();
    private void ExcludeEntityKey();
    internal virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal virtual void ClearWrappedValues();
    internal virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    internal virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, HashSet`1<object> visited);
    internal virtual bool IsEmpty();
    internal virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnRelatedEndClear();
    internal virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    public ObjectQuery`1<TEntity> CreateSourceQuery();
    internal virtual IEnumerable CreateSourceQueryInternal();
    internal void InitializeWithValue(RelatedEnd relatedEnd);
    internal virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    [OnDeserializedAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void OnRefDeserialized(StreamingContext context);
    [OnSerializingAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void OnSerializing(StreamingContext context);
    internal virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
}
public interface System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker {
    public EntityState EntityState { get; }
    public abstract virtual void EntityMemberChanging(string entityMemberName);
    public abstract virtual void EntityMemberChanged(string entityMemberName);
    public abstract virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    public abstract virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    public abstract virtual EntityState get_EntityState();
}
public interface System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker {
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
}
public interface System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey {
    public EntityKey EntityKey { get; public set; }
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
}
public interface System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships {
    public RelationshipManager RelationshipManager { get; }
    public abstract virtual RelationshipManager get_RelationshipManager();
}
public interface System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd {
    public bool IsLoaded { get; public set; }
    public string RelationshipName { get; }
    public string SourceRoleName { get; }
    public string TargetRoleName { get; }
    public RelationshipSet RelationshipSet { get; }
    public abstract virtual bool get_IsLoaded();
    public abstract virtual void set_IsLoaded(bool value);
    public abstract virtual string get_RelationshipName();
    public abstract virtual string get_SourceRoleName();
    public abstract virtual string get_TargetRoleName();
    public abstract virtual RelationshipSet get_RelationshipSet();
    public abstract virtual void Load();
    public abstract virtual Task LoadAsync(CancellationToken cancellationToken);
    public abstract virtual void Load(MergeOption mergeOption);
    public abstract virtual Task LoadAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    public abstract virtual void Add(IEntityWithRelationships entity);
    public abstract virtual void Add(object entity);
    public abstract virtual bool Remove(IEntityWithRelationships entity);
    public abstract virtual bool Remove(object entity);
    public abstract virtual void Attach(IEntityWithRelationships entity);
    public abstract virtual void Attach(object entity);
    public abstract virtual IEnumerable CreateSourceQuery();
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface System.Data.Entity.Core.Objects.DataClasses.IRelationshipFixer {
    public abstract virtual RelatedEnd CreateSourceEnd(RelationshipNavigation navigation, RelationshipManager relationshipManager);
}
[DataContractAttribute]
public abstract class System.Data.Entity.Core.Objects.DataClasses.RelatedEnd : object {
    private static string _entityKeyParamName;
    [ObsoleteAttribute]
private IEntityWithRelationships _owner;
    private RelationshipNavigation _navigation;
    private IRelationshipFixer _relationshipFixer;
    internal bool _isLoaded;
    private RelationshipSet _relationshipSet;
    private ObjectContext _context;
    private bool _usingNoTracking;
    private RelationshipType _relationMetadata;
    private RelationshipEndMember _fromEndMember;
    private RelationshipEndMember _toEndMember;
    private string _sourceQuery;
    private IEnumerable`1<EdmMember> _sourceQueryParamProperties;
    internal bool _suppressEvents;
    internal CollectionChangeEventHandler _onAssociationChanged;
    private IEntityWrapper _wrappedOwner;
    private EntityWrapperFactory _entityWrapperFactory;
    private NavigationProperty navigationPropertyCache;
    internal bool IsForeignKey { get; }
    internal RelationshipNavigation RelationshipNavigation { get; }
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public string RelationshipName { get; }
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public string SourceRoleName { get; }
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public string TargetRoleName { get; }
    internal IEntityWrapper WrappedOwner { get; }
    internal ObjectContext ObjectContext { get; }
    internal EntityWrapperFactory EntityWrapperFactory { get; }
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public RelationshipSet RelationshipSet { get; }
    internal RelationshipType RelationMetadata { get; }
    internal RelationshipEndMember ToEndMember { get; }
    internal bool UsingNoTracking { get; }
    internal MergeOption DefaultMergeOption { get; }
    internal RelationshipEndMember FromEndMember { get; }
    [SoapIgnoreAttribute]
[XmlIgnoreAttribute]
public bool IsLoaded { get; public set; }
    internal bool CanDeferredLoad { get; }
    internal NavigationProperty NavigationProperty { get; }
    internal NavigationPropertyAccessor TargetAccessor { get; }
    internal RelatedEnd(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public void add_AssociationChanged(CollectionChangeEventHandler value);
    public void remove_AssociationChanged(CollectionChangeEventHandler value);
    internal virtual void add_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal virtual void remove_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal bool get_IsForeignKey();
    internal RelationshipNavigation get_RelationshipNavigation();
    public sealed virtual string get_RelationshipName();
    public virtual string get_SourceRoleName();
    public virtual string get_TargetRoleName();
    private sealed virtual override IEnumerable System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery();
    internal virtual IEntityWrapper get_WrappedOwner();
    internal virtual ObjectContext get_ObjectContext();
    internal virtual EntityWrapperFactory get_EntityWrapperFactory();
    public virtual RelationshipSet get_RelationshipSet();
    internal virtual RelationshipType get_RelationMetadata();
    internal virtual RelationshipEndMember get_ToEndMember();
    internal bool get_UsingNoTracking();
    internal MergeOption get_DefaultMergeOption();
    internal virtual RelationshipEndMember get_FromEndMember();
    public sealed virtual bool get_IsLoaded();
    public sealed virtual void set_IsLoaded(bool value);
    internal ObjectQuery`1<TEntity> CreateSourceQuery(MergeOption mergeOption, Boolean& hasResults);
    private string GenerateQueryText();
    private bool AddQueryParameters(ObjectQuery`1<TEntity> query);
    private object GetCurrentValueFromEntity(EdmMember member);
    private static void AppendKeyParameterRow(StringBuilder sourceBuilder, IList`1<EdmMember> keyMembers);
    private static void AppendEntitySet(StringBuilder sourceBuilder, EntitySet targetEntitySet, EntityType targetEntityType, bool ofTypeRequired);
    internal virtual ObjectQuery`1<TEntity> ValidateLoad(MergeOption mergeOption, string relatedEndName, Boolean& hasResults);
    public sealed virtual void Load();
    public sealed virtual Task LoadAsync(CancellationToken cancellationToken);
    public abstract virtual void Load(MergeOption mergeOption);
    public abstract virtual Task LoadAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    internal void DeferredLoad();
    internal virtual bool get_CanDeferredLoad();
    internal virtual void Merge(IEnumerable`1<TEntity> collection, MergeOption mergeOption, bool setIsLoaded);
    internal virtual void Merge(List`1<IEntityWrapper> collection, MergeOption mergeOption, bool setIsLoaded);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships entity);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(object entity);
    internal void Attach(IEnumerable`1<IEntityWrapper> wrappedEntities, bool allowCollection);
    internal void ValidateOwnerForAttach();
    internal void ValidateEntityForAttach(IEntityWrapper wrappedEntity, int index, bool allowCollection);
    internal abstract virtual IEnumerable CreateSourceQueryInternal();
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships entity);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(object entity);
    internal void Add(IEntityWrapper wrappedEntity);
    private sealed virtual override bool System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships entity);
    private sealed virtual override bool System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(object entity);
    internal bool Remove(IEntityWrapper wrappedEntity, bool preserveForeignKey);
    internal abstract virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal abstract virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    internal void Add(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal void CheckRelationEntitySet(EntitySet set);
    internal void ValidateStateForAdd(IEntityWrapper wrappedEntity);
    internal void Add(IEntityWrapper wrappedTarget, bool applyConstraints, bool addRelationshipAsUnchanged, bool relationshipAlreadyExists, bool allowModifyingOtherEndOfRelationship, bool forceForeignKeyChanges);
    internal virtual void AddToNavigationPropertyIfCompatible(RelatedEnd otherRelatedEnd);
    internal virtual bool CachedForeignKeyIsConceptualNull();
    internal virtual bool UpdateDependentEndForeignKey(RelatedEnd targetRelatedEnd, bool forceForeignKeyChanges);
    internal virtual void VerifyDetachedKeyMatches(EntityKey entityKey);
    private void ValidateContextsAreCompatible(RelatedEnd targetRelatedEnd);
    private void SynchronizeContexts(RelatedEnd targetRelatedEnd, bool relationshipAlreadyExists, bool addRelationshipAsUnchanged);
    private void AddGraphToObjectStateManager(IEntityWrapper wrappedEntity, bool relationshipAlreadyExists, bool addRelationshipAsUnchanged, bool doAttach);
    private void UpdateSnapshotOfRelationships(IEntityWrapper wrappedEntity);
    internal void Remove(IEntityWrapper wrappedEntity, bool doFixup, bool deleteEntity, bool deleteOwner, bool applyReferentialConstraints, bool preserveForeignKey);
    internal bool IsDependentEndOfReferentialConstraint(bool checkIdentifying);
    internal bool IsPrincipalEndOfReferentialConstraint();
    internal static bool CheckIfAllPropertiesAreKeyProperties(String[] keyMemberNames, ReadOnlyMetadataCollection`1<EdmProperty> toProperties);
    internal void IncludeEntity(IEntityWrapper wrappedEntity, bool addRelationshipAsUnchanged, bool doAttach);
    internal void MarkForeignKeyPropertiesModified();
    internal abstract virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal abstract virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    internal void AddToNavigationProperty(IEntityWrapper wrapper);
    internal void RemoveFromNavigationProperty(IEntityWrapper wrapper);
    internal void ExcludeEntity(IEntityWrapper wrappedEntity);
    internal RelationshipEntry FindRelationshipEntryInObjectStateManager(IEntityWrapper wrappedEntity);
    internal void Clear(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal void CheckReferentialConstraintProperties(EntityEntry ownerEntry);
    internal virtual bool CheckReferentialConstraintPrincipalProperty(EntityEntry ownerEntry, ReferentialConstraint constraint);
    internal virtual bool CheckReferentialConstraintDependentProperty(EntityEntry ownerEntry, ReferentialConstraint constraint);
    internal static bool VerifyRIConstraintsWithRelatedEntry(ReferentialConstraint constraint, Func`2<string, object> getDependentPropertyValue, EntityKey principalKey);
    public sealed virtual IEnumerator GetEnumerator();
    internal void RemoveAll();
    internal virtual void DetachAll(EntityState ownerEntityState);
    internal void AddToCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal abstract virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal abstract virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
    internal bool RemoveFromCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal abstract virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal abstract virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal virtual bool VerifyEntityForAdd(IEntityWrapper wrappedEntity, bool relationshipAlreadyExists);
    internal abstract virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal abstract virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal abstract virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    internal abstract virtual void Exclude();
    internal abstract virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal abstract virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    internal abstract virtual IEnumerable GetInternalEnumerable();
    internal abstract virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    internal abstract virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> keyValues, HashSet`1<object> visited);
    internal abstract virtual bool IsEmpty();
    internal abstract virtual void OnRelatedEndClear();
    internal abstract virtual void ClearWrappedValues();
    internal abstract virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnAssociationChanged(CollectionChangeAction collectionChangeAction, object entity);
    internal virtual void AddEntityToObjectStateManager(IEntityWrapper wrappedEntity, bool doAttach);
    internal EntitySet GetTargetEntitySetFromRelationshipSet();
    private RelationshipEntry AddRelationshipToObjectStateManager(IEntityWrapper wrappedEntity, bool addRelationshipAsUnchanged, bool doAttach);
    private static void WalkObjectGraphToIncludeAllRelatedEntities(IEntityWrapper wrappedEntity, bool addRelationshipAsUnchanged, bool doAttach);
    internal static void RemoveEntityFromObjectStateManager(IEntityWrapper wrappedEntity);
    private static void RemoveRelationshipFromObjectStateManager(IEntityWrapper wrappedEntity, IEntityWrapper wrappedOwner, RelationshipSet relationshipSet, RelationshipNavigation navigation);
    private void FixupOtherEndOfRelationshipForRemove(IEntityWrapper wrappedEntity, bool preserveForeignKey);
    private static EntityEntry MarkEntityAsDeletedInObjectStateManager(IEntityWrapper wrappedEntity);
    private static RelationshipEntry MarkRelationshipAsDeletedInObjectStateManager(IEntityWrapper wrappedEntity, IEntityWrapper wrappedOwner, RelationshipSet relationshipSet, RelationshipNavigation navigation);
    private static void DetachRelationshipFromObjectStateManager(IEntityWrapper wrappedEntity, IEntityWrapper wrappedOwner, RelationshipSet relationshipSet, RelationshipNavigation navigation);
    private static void RemoveEntityFromRelatedEnds(IEntityWrapper wrappedEntity1, IEntityWrapper wrappedEntity2, RelationshipNavigation navigation);
    private static bool CheckCascadeDeleteFlag(RelationshipEndMember relationEndProperty);
    internal void AttachContext(ObjectContext context, MergeOption mergeOption);
    internal void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal virtual void ValidateDetachedEntityKey();
    internal void FindRelationshipSet(ObjectContext context, EntitySet entitySet, EdmType& relationshipType, RelationshipSet& relationshipSet);
    internal static void FindRelationshipSet(ObjectContext context, RelationshipNavigation navigation, EntitySet entitySet, EdmType& relationshipType, RelationshipSet& relationshipSet);
    internal void DetachContext();
    internal RelatedEnd GetOtherEndOfRelationship(IEntityWrapper wrappedEntity);
    internal virtual void CheckOwnerNull();
    internal void InitializeRelatedEnd(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal void SetWrappedOwner(IEntityWrapper wrappedOwner);
    internal static bool IsValidEntityKeyType(EntityKey entityKey);
    [OnDeserializedAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void OnDeserialized(StreamingContext context);
    internal NavigationProperty get_NavigationProperty();
    internal NavigationPropertyAccessor get_TargetAccessor();
    private void EnsureRelationshipNavigationAccessorsInitialized();
    internal bool DisableLazyLoading();
    internal void ResetLazyLoading(bool state);
}
internal class System.Data.Entity.Core.Objects.DataClasses.RelationshipFixer`2 : object {
    private RelationshipMultiplicity _sourceRoleMultiplicity;
    private RelationshipMultiplicity _targetRoleMultiplicity;
    internal RelationshipFixer`2(RelationshipMultiplicity sourceRoleMultiplicity, RelationshipMultiplicity targetRoleMultiplicity);
    private sealed virtual override RelatedEnd System.Data.Entity.Core.Objects.DataClasses.IRelationshipFixer.CreateSourceEnd(RelationshipNavigation navigation, RelationshipManager relationshipManager);
}
public enum System.Data.Entity.Core.Objects.DataClasses.RelationshipKind : Enum {
    public int value__;
    public static RelationshipKind Association;
}
public class System.Data.Entity.Core.Objects.DataClasses.RelationshipManager : object {
    private IEntityWithRelationships _owner;
    private List`1<RelatedEnd> _relationships;
    private bool _nodeVisited;
    private IEntityWrapper _wrappedOwner;
    private EntityWrapperFactory _entityWrapperFactory;
    private ExpensiveOSpaceLoader _expensiveLoader;
    internal IEnumerable`1<RelatedEnd> Relationships { get; }
    internal bool NodeVisited { get; internal set; }
    internal IEntityWrapper WrappedOwner { get; }
    internal EntityWrapperFactory EntityWrapperFactory { get; }
    internal bool HasRelationships { get; }
    internal RelationshipManager(ExpensiveOSpaceLoader expensiveLoader);
    internal void SetExpensiveLoader(ExpensiveOSpaceLoader loader);
    internal IEnumerable`1<RelatedEnd> get_Relationships();
    private void EnsureRelationshipsInitialized();
    internal bool get_NodeVisited();
    internal void set_NodeVisited(bool value);
    internal IEntityWrapper get_WrappedOwner();
    internal virtual EntityWrapperFactory get_EntityWrapperFactory();
    public static RelationshipManager Create(IEntityWithRelationships owner);
    internal static RelationshipManager Create();
    internal void SetWrappedOwner(IEntityWrapper wrappedOwner, object expectedOwner);
    internal EntityCollection`1<TTargetEntity> GetRelatedCollection(AssociationEndMember sourceMember, AssociationEndMember targetMember, NavigationPropertyAccessor sourceAccessor, NavigationPropertyAccessor targetAccessor, RelatedEnd existingRelatedEnd);
    private static void RemergeCollections(EntityCollection`1<TTargetEntity> previousCollection, EntityCollection`1<TTargetEntity> collection);
    internal EntityReference`1<TTargetEntity> GetRelatedReference(AssociationEndMember sourceMember, AssociationEndMember targetMember, NavigationPropertyAccessor sourceAccessor, NavigationPropertyAccessor targetAccessor, RelatedEnd existingRelatedEnd);
    internal RelatedEnd GetRelatedEnd(string navigationProperty, bool throwArgumentException);
    public IRelatedEnd GetRelatedEnd(string relationshipName, string targetRoleName);
    internal RelatedEnd GetRelatedEndInternal(string relationshipName, string targetRoleName);
    private RelatedEnd GetRelatedEndInternal(string relationshipName, string targetRoleName, RelatedEnd existingRelatedEnd, AssociationType relationship);
    internal RelatedEnd GetRelatedEndInternal(AssociationType csAssociationType, AssociationEndMember csTargetEnd);
    private static void GetAssociationEnds(AssociationType associationType, string targetRoleName, AssociationEndMember& sourceEnd, AssociationEndMember& targetEnd);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InitializeRelatedReference(string relationshipName, string targetRoleName, EntityReference`1<TTargetEntity> entityReference);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InitializeRelatedCollection(string relationshipName, string targetRoleName, EntityCollection`1<TTargetEntity> entityCollection);
    internal string PrependNamespaceToRelationshipName(string relationshipName);
    private static ObjectItemCollection GetObjectItemCollection(IEntityWrapper wrappedOwner);
    private bool TryGetOwnerEntityType(EntityType& entityType);
    private static bool TryGetObjectMappingItemCollection(IEntityWrapper wrappedOwner, DefaultObjectMappingItemCollection& collection);
    internal AssociationType GetRelationshipType(AssociationType csAssociationType);
    internal AssociationType GetRelationshipType(string relationshipName);
    internal static Exception UnableToGetMetadata(IEntityWrapper wrappedOwner, string relationshipName);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.RelationshipManager/<GetAllTargetEnds>d__40")]
private static IEnumerable`1<AssociationEndMember> GetAllTargetEnds(EntityType ownerEntityType, EntitySet ownerEntitySet);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.RelationshipManager/<GetAllTargetEnds>d__41")]
private IEnumerable`1<AssociationEndMember> GetAllTargetEnds(Type entityClrType);
    private bool VerifyRelationship(AssociationType relationship, string sourceEndName);
    private bool VerifyRelationship(AssociationType osAssociationType, AssociationType csAssociationType, string sourceEndName);
    private static bool VerifyRelationship(IEntityWrapper wrappedOwner, EntityKey ownerKey, AssociationType relationship, string sourceEndName);
    public EntityCollection`1<TTargetEntity> GetRelatedCollection(string relationshipName, string targetRoleName);
    public EntityReference`1<TTargetEntity> GetRelatedReference(string relationshipName, string targetRoleName);
    internal RelatedEnd GetRelatedEnd(RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal RelatedEnd CreateRelatedEnd(RelationshipNavigation navigation, RelationshipMultiplicity sourceRoleMultiplicity, RelationshipMultiplicity targetRoleMultiplicity, RelatedEnd existingRelatedEnd);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.DataClasses.RelationshipManager/<GetAllRelatedEnds>d__49")]
public IEnumerable`1<IRelatedEnd> GetAllRelatedEnds();
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[OnSerializingAttribute]
public void OnSerializing(StreamingContext context);
    internal bool get_HasRelationships();
    internal void AddRelatedEntitiesToObjectStateManager(bool doAttach);
    internal static void RemoveRelatedEntitiesFromObjectStateManager(IEntityWrapper wrappedEntity);
    internal void RemoveEntityFromRelationships();
    internal void NullAllFKsInDependentsForWhichThisIsThePrincipal();
    internal void DetachEntityFromRelationships(EntityState ownerEntityState);
    internal void RemoveEntity(string toRole, string relationshipName, IEntityWrapper wrappedEntity);
    internal void ClearRelatedEndWrappers();
    internal void RetrieveReferentialConstraintProperties(Dictionary`2& properties, HashSet`1<object> visited, bool includeOwnValues);
    private static bool CheckIfAllPropertiesWereRetrieved(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, List`1<string> propertiesToRetrieve);
    internal void CheckReferentialConstraintProperties(EntityEntry ownerEntry);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[OnDeserializedAttribute]
public void OnDeserialized(StreamingContext context);
    private bool TryGetCachedRelatedEnd(string relationshipName, string targetRoleName, RelatedEnd& relatedEnd);
    internal bool FindNamesOfReferentialConstraintProperties(List`1& propertiesToRetrieve, Boolean& propertiesToPropagateExist, bool skipFK);
    internal bool HasReferentialConstraintPropertiesToCheck();
    internal bool IsOwner(IEntityWrapper wrappedEntity);
    internal void AttachContextToRelatedEnds(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal void ResetContextOnRelatedEnds(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal void DetachContextFromRelatedEnds();
    [ConditionalAttribute("DEBUG")]
internal void VerifyIsNotRelated();
}
internal class System.Data.Entity.Core.Objects.DataClasses.RelationshipNavigation : object {
    private string _relationshipName;
    private string _from;
    private string _to;
    private RelationshipNavigation _reverse;
    private NavigationPropertyAccessor _fromAccessor;
    private NavigationPropertyAccessor _toAccessor;
    private AssociationType _associationType;
    internal AssociationType AssociationType { get; }
    internal string RelationshipName { get; }
    internal string From { get; }
    internal string To { get; }
    internal NavigationPropertyAccessor ToPropertyAccessor { get; }
    internal bool IsInitialized { get; }
    internal RelationshipNavigation Reverse { get; }
    internal RelationshipNavigation(string relationshipName, string from, string to, NavigationPropertyAccessor fromAccessor, NavigationPropertyAccessor toAccessor);
    internal RelationshipNavigation(AssociationType associationType, string from, string to, NavigationPropertyAccessor fromAccessor, NavigationPropertyAccessor toAccessor);
    internal AssociationType get_AssociationType();
    internal string get_RelationshipName();
    internal string get_From();
    internal string get_To();
    internal NavigationPropertyAccessor get_ToPropertyAccessor();
    internal bool get_IsInitialized();
    internal void InitializeAccessors(NavigationPropertyAccessor fromAccessor, NavigationPropertyAccessor toAccessor);
    internal RelationshipNavigation get_Reverse();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class System.Data.Entity.Core.Objects.DataClasses.StructuralObject : object {
    public static string EntityKeyPropertyName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    internal bool IsChangeTracked { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    protected virtual void OnPropertyChanged(string property);
    protected virtual void OnPropertyChanging(string property);
    protected static DateTime DefaultDateTimeValue();
    protected virtual void ReportPropertyChanging(string property);
    protected virtual void ReportPropertyChanged(string property);
    protected internal T GetValidValue(T currentValue, string property, bool isNullable, bool isInitialized);
    internal abstract virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal abstract virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal abstract virtual bool get_IsChangeTracked();
    protected internal static bool BinaryEquals(Byte[] first, Byte[] second);
    protected internal static Byte[] GetValidValue(Byte[] currentValue);
    protected internal static Byte[] SetValidValue(Byte[] value, bool isNullable, string propertyName);
    protected internal static Byte[] SetValidValue(Byte[] value, bool isNullable);
    protected internal static bool SetValidValue(bool value, string propertyName);
    protected internal static bool SetValidValue(bool value);
    protected internal static Nullable`1<bool> SetValidValue(Nullable`1<bool> value, string propertyName);
    protected internal static Nullable`1<bool> SetValidValue(Nullable`1<bool> value);
    protected internal static byte SetValidValue(byte value, string propertyName);
    protected internal static byte SetValidValue(byte value);
    protected internal static Nullable`1<byte> SetValidValue(Nullable`1<byte> value, string propertyName);
    protected internal static Nullable`1<byte> SetValidValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
protected internal static sbyte SetValidValue(sbyte value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static sbyte SetValidValue(sbyte value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<sbyte> SetValidValue(Nullable`1<sbyte> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<sbyte> SetValidValue(Nullable`1<sbyte> value);
    protected internal static DateTime SetValidValue(DateTime value, string propertyName);
    protected internal static DateTime SetValidValue(DateTime value);
    protected internal static Nullable`1<DateTime> SetValidValue(Nullable`1<DateTime> value, string propertyName);
    protected internal static Nullable`1<DateTime> SetValidValue(Nullable`1<DateTime> value);
    protected internal static TimeSpan SetValidValue(TimeSpan value, string propertyName);
    protected internal static TimeSpan SetValidValue(TimeSpan value);
    protected internal static Nullable`1<TimeSpan> SetValidValue(Nullable`1<TimeSpan> value, string propertyName);
    protected internal static Nullable`1<TimeSpan> SetValidValue(Nullable`1<TimeSpan> value);
    protected internal static DateTimeOffset SetValidValue(DateTimeOffset value, string propertyName);
    protected internal static DateTimeOffset SetValidValue(DateTimeOffset value);
    protected internal static Nullable`1<DateTimeOffset> SetValidValue(Nullable`1<DateTimeOffset> value, string propertyName);
    protected internal static Nullable`1<DateTimeOffset> SetValidValue(Nullable`1<DateTimeOffset> value);
    protected internal static decimal SetValidValue(decimal value, string propertyName);
    protected internal static decimal SetValidValue(decimal value);
    protected internal static Nullable`1<decimal> SetValidValue(Nullable`1<decimal> value, string propertyName);
    protected internal static Nullable`1<decimal> SetValidValue(Nullable`1<decimal> value);
    protected internal static double SetValidValue(double value, string propertyName);
    protected internal static double SetValidValue(double value);
    protected internal static Nullable`1<double> SetValidValue(Nullable`1<double> value, string propertyName);
    protected internal static Nullable`1<double> SetValidValue(Nullable`1<double> value);
    protected internal static float SetValidValue(float value, string propertyName);
    protected internal static float SetValidValue(float value);
    protected internal static Nullable`1<float> SetValidValue(Nullable`1<float> value, string propertyName);
    protected internal static Nullable`1<float> SetValidValue(Nullable`1<float> value);
    protected internal static Guid SetValidValue(Guid value, string propertyName);
    protected internal static Guid SetValidValue(Guid value);
    protected internal static Nullable`1<Guid> SetValidValue(Nullable`1<Guid> value, string propertyName);
    protected internal static Nullable`1<Guid> SetValidValue(Nullable`1<Guid> value);
    protected internal static short SetValidValue(short value, string propertyName);
    protected internal static short SetValidValue(short value);
    protected internal static Nullable`1<short> SetValidValue(Nullable`1<short> value, string propertyName);
    protected internal static Nullable`1<short> SetValidValue(Nullable`1<short> value);
    protected internal static int SetValidValue(int value, string propertyName);
    protected internal static int SetValidValue(int value);
    protected internal static Nullable`1<int> SetValidValue(Nullable`1<int> value, string propertyName);
    protected internal static Nullable`1<int> SetValidValue(Nullable`1<int> value);
    protected internal static long SetValidValue(long value, string propertyName);
    protected internal static long SetValidValue(long value);
    protected internal static Nullable`1<long> SetValidValue(Nullable`1<long> value, string propertyName);
    protected internal static Nullable`1<long> SetValidValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
protected internal static ushort SetValidValue(ushort value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static ushort SetValidValue(ushort value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ushort> SetValidValue(Nullable`1<ushort> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ushort> SetValidValue(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
protected internal static UInt32 SetValidValue(UInt32 value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static UInt32 SetValidValue(UInt32 value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<UInt32> SetValidValue(Nullable`1<UInt32> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<UInt32> SetValidValue(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
protected internal static ulong SetValidValue(ulong value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static ulong SetValidValue(ulong value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ulong> SetValidValue(Nullable`1<ulong> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ulong> SetValidValue(Nullable`1<ulong> value);
    protected internal static string SetValidValue(string value, bool isNullable, string propertyName);
    protected internal static string SetValidValue(string value, bool isNullable);
    protected internal static DbGeography SetValidValue(DbGeography value, bool isNullable, string propertyName);
    protected internal static DbGeography SetValidValue(DbGeography value, bool isNullable);
    protected internal static DbGeometry SetValidValue(DbGeometry value, bool isNullable, string propertyName);
    protected internal static DbGeometry SetValidValue(DbGeometry value, bool isNullable);
    protected internal T SetValidValue(T oldValue, T newValue, string property);
    protected internal static TComplex VerifyComplexObjectIsNotNull(TComplex complexObject, string propertyName);
}
internal class System.Data.Entity.Core.Objects.DataRecordObjectView : ObjectView`1<DbDataRecord> {
    private PropertyDescriptorCollection _propertyDescriptorsCache;
    private RowType _rowType;
    internal DataRecordObjectView(IObjectViewData`1<DbDataRecord> viewData, object eventDataSource, RowType rowType, Type propertyComponentType);
    private static PropertyInfo GetTypedIndexer(Type type);
    private static Type GetListItemType(Type type);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Entity.Core.Objects.DbUpdatableDataRecord : DbDataRecord {
    internal StateManagerTypeMetadata _metadata;
    internal ObjectStateEntry _cacheEntry;
    internal object _userObject;
    internal DataRecordInfo _recordInfo;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal DbUpdatableDataRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal DbUpdatableDataRecord(ObjectStateEntry cacheEntry);
    public virtual int get_FieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int i);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    protected abstract virtual object GetRecordValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public void SetBoolean(int ordinal, bool value);
    public void SetByte(int ordinal, byte value);
    public void SetChar(int ordinal, char value);
    public void SetDataRecord(int ordinal, IDataRecord value);
    public void SetDateTime(int ordinal, DateTime value);
    public void SetDecimal(int ordinal, decimal value);
    public void SetDouble(int ordinal, double value);
    public void SetFloat(int ordinal, float value);
    public void SetGuid(int ordinal, Guid value);
    public void SetInt16(int ordinal, short value);
    public void SetInt32(int ordinal, int value);
    public void SetInt64(int ordinal, long value);
    public void SetString(int ordinal, string value);
    public void SetValue(int ordinal, object value);
    public int SetValues(Object[] values);
    public void SetDBNull(int ordinal);
    public virtual DataRecordInfo get_DataRecordInfo();
    public sealed virtual DbDataRecord GetDataRecord(int i);
    public sealed virtual DbDataReader GetDataReader(int i);
    protected abstract virtual void SetRecordValue(int ordinal, object value);
}
internal static class System.Data.Entity.Core.Objects.DelegateFactory : object {
    private static MethodInfo _throwSetInvalidValue;
    private static DelegateFactory();
    internal static Func`1<object> GetConstructorDelegateForType(ClrComplexType clrType);
    internal static Func`1<object> GetConstructorDelegateForType(ClrEntityType clrType);
    internal static object GetValue(EdmProperty property, object target);
    internal static Func`2<object, object> GetGetterDelegateForProperty(EdmProperty property);
    internal static void SetValue(EdmProperty property, object target, object value);
    internal static Action`2<object, object> GetSetterDelegateForProperty(EdmProperty property);
    internal static RelatedEnd GetRelatedEnd(RelationshipManager sourceRelationshipManager, AssociationEndMember sourceMember, AssociationEndMember targetMember, RelatedEnd existingRelatedEnd);
    internal static Action`2<object, object> CreateNavigationPropertySetter(Type declaringType, PropertyInfo navigationProperty);
    internal static ConstructorInfo GetConstructorForType(Type type);
    internal static NewExpression GetNewExpressionForCollectionType(Type type);
    internal static Func`1<object> CreateConstructor(Type type);
    internal static Func`2<object, object> CreatePropertyGetter(Type entityDeclaringType, PropertyInfo propertyInfo);
    internal static Action`2<object, object> CreatePropertySetter(Type entityDeclaringType, PropertyInfo propertyInfo, bool allowNull);
    internal static PropertyInfo ValidateSetterProperty(PropertyInfo propertyInfo);
    private static Func`3<RelationshipManager, RelatedEnd, RelatedEnd> CreateGetRelatedEndMethod(AssociationEndMember sourceMember, AssociationEndMember targetMember);
    private static Func`3<RelationshipManager, RelatedEnd, RelatedEnd> CreateGetRelatedEndMethod(AssociationEndMember sourceMember, AssociationEndMember targetMember, NavigationPropertyAccessor sourceAccessor, NavigationPropertyAccessor targetAccessor);
}
internal class System.Data.Entity.Core.Objects.ELinq.Binding : object {
    internal Expression LinqExpression;
    internal DbExpression CqtExpression;
    internal Binding(Expression linqExpression, DbExpression cqtExpression);
}
internal class System.Data.Entity.Core.Objects.ELinq.BindingContext : object {
    private Stack`1<Binding> _scopes;
    internal void PushBindingScope(Binding binding);
    internal void PopBindingScope();
    internal bool TryGetBoundExpression(Expression linqExpression, DbExpression& cqtExpression);
}
internal class System.Data.Entity.Core.Objects.ELinq.CompiledELinqQueryState : ELinqQueryState {
    private Guid _cacheToken;
    private Object[] _parameterValues;
    private CompiledQueryCacheEntry _cacheEntry;
    private ObjectQueryExecutionPlanFactory _objectQueryExecutionPlanFactory;
    internal Expression Expression { get; }
    internal CompiledELinqQueryState(Type elementType, ObjectContext context, LambdaExpression lambda, Guid cacheToken, Object[] parameterValues, ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory);
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    protected virtual TypeUsage GetResultType();
    internal virtual Expression get_Expression();
    protected virtual ExpressionConverter CreateExpressionConverter();
}
internal class System.Data.Entity.Core.Objects.ELinq.ELinqQueryState : ObjectQueryState {
    private Expression _expression;
    private Func`1<bool> _recompileRequired;
    private IEnumerable`1<Tuple`2<ObjectParameter, QueryParameterExpression>> _linqParameters;
    private bool _useCSharpNullComparisonBehavior;
    private bool _disableFilterOverProjectionSimplificationForCustomFunctions;
    private ObjectQueryExecutionPlanFactory _objectQueryExecutionPlanFactory;
    internal Expression Expression { get; }
    internal ELinqQueryState(Type elementType, ObjectContext context, Expression expression, ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory);
    internal ELinqQueryState(Type elementType, ObjectQuery query, Expression expression, ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory);
    protected virtual TypeUsage GetResultType();
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    internal static MethodInfo GetIncludeMethod(ObjectQuery`1<TElementType> sourceQuery);
    internal virtual bool TryGetCommandText(String& commandText);
    internal virtual bool TryGetExpression(Expression& expression);
    internal virtual Expression get_Expression();
    protected virtual ExpressionConverter CreateExpressionConverter();
    private void ResetParameters();
}
internal class System.Data.Entity.Core.Objects.ELinq.ExpressionConverter : object {
    private Funcletizer _funcletizer;
    private Perspective _perspective;
    private Expression _expression;
    private BindingContext _bindingContext;
    private Func`1<bool> _recompileRequired;
    private List`1<Tuple`2<ObjectParameter, QueryParameterExpression>> _parameters;
    private Dictionary`2<DbExpression, Span> _spanMappings;
    private Nullable`1<MergeOption> _mergeOption;
    private Dictionary`2<Type, InitializerMetadata> _initializers;
    private Span _span;
    private HashSet`1<ObjectQuery> _inlineEntitySqlQueries;
    private int _ignoreInclude;
    private AliasGenerator _aliasGenerator;
    private OrderByLifter _orderByLifter;
    private static string s_visualBasicAssemblyFullName;
    private static Dictionary`2<ExpressionType, Translator> _translators;
    internal static string KeyColumnName;
    internal static string GroupColumnName;
    internal static string EntityCollectionOwnerColumnName;
    internal static string EntityCollectionElementsColumnName;
    internal static string EdmNamespaceName;
    private static string Concat;
    private static string IndexOf;
    private static string Length;
    private static string Right;
    private static string Substring;
    private static string ToUpper;
    private static string ToLower;
    private static string Trim;
    private static string LTrim;
    private static string RTrim;
    private static string Reverse;
    private static string BitwiseAnd;
    private static string BitwiseOr;
    private static string BitwiseNot;
    private static string BitwiseXor;
    private static string CurrentUtcDateTime;
    private static string CurrentDateTimeOffset;
    private static string CurrentDateTime;
    private static string Year;
    private static string Month;
    private static string Day;
    private static string Hour;
    private static string Minute;
    private static string Second;
    private static string Millisecond;
    private static string Like;
    private static string AsUnicode;
    private static string AsNonUnicode;
    private EdmItemCollection EdmItemCollection { get; }
    internal DbProviderManifest ProviderManifest { get; }
    internal Nullable`1<MergeOption> PropagatedMergeOption { get; }
    internal Span PropagatedSpan { get; }
    internal Func`1<bool> RecompileRequired { get; }
    internal int IgnoreInclude { get; internal set; }
    internal AliasGenerator AliasGenerator { get; }
    internal ExpressionConverter(Funcletizer funcletizer, Expression expression);
    private static ExpressionConverter();
    private static Dictionary`2<ExpressionType, Translator> InitializeTranslators();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.ELinq.ExpressionConverter/<GetTranslators>d__51")]
private static IEnumerable`1<Translator> GetTranslators();
    private EdmItemCollection get_EdmItemCollection();
    internal DbProviderManifest get_ProviderManifest();
    internal IEnumerable`1<Tuple`2<ObjectParameter, QueryParameterExpression>> GetParameters();
    internal Nullable`1<MergeOption> get_PropagatedMergeOption();
    internal Span get_PropagatedSpan();
    internal Func`1<bool> get_RecompileRequired();
    internal int get_IgnoreInclude();
    internal void set_IgnoreInclude(int value);
    internal AliasGenerator get_AliasGenerator();
    internal DbExpression Convert();
    internal static bool CanFuncletizePropertyInfo(PropertyInfo propertyInfo);
    internal bool CanIncludeSpanInfo();
    private void NotifyMergeOption(MergeOption mergeOption);
    internal void ValidateInitializerMetadata(InitializerMetadata metadata);
    private void AddParameter(QueryParameterExpression queryParameter);
    private bool IsQueryRoot(Expression Expression);
    private DbExpression AddSpanMapping(DbExpression expression, Span span);
    private bool TryGetSpan(DbExpression expression, Span& span);
    private void ApplySpanMapping(DbExpression from, DbExpression to);
    private void UnifySpanMappings(DbExpression left, DbExpression right, DbExpression to);
    private DbDistinctExpression Distinct(DbExpression argument);
    private DbExceptExpression Except(DbExpression left, DbExpression right);
    private DbExpression Filter(DbExpressionBinding input, DbExpression predicate);
    private DbIntersectExpression Intersect(DbExpression left, DbExpression right);
    private DbExpression Limit(DbExpression argument, DbExpression limit);
    private DbExpression OfType(DbExpression argument, TypeUsage ofType);
    private DbExpression Project(DbExpressionBinding input, DbExpression projection);
    private DbSortExpression Sort(DbExpressionBinding input, IList`1<DbSortClause> keys);
    private DbExpression Skip(DbExpressionBinding input, DbExpression skipCount);
    private DbUnionAllExpression UnionAll(DbExpression left, DbExpression right);
    private TypeUsage GetCastTargetType(TypeUsage fromType, Type toClrType, Type fromClrType, bool preserveCastForDateTime);
    private static TypeUsage ValidateAndAdjustCastTypes(TypeUsage toType, TypeUsage fromType, Type toClrType, Type fromClrType);
    private static bool CanOmitCast(TypeUsage fromType, TypeUsage toType, bool preserveCastForDateTime);
    private TypeUsage GetIsOrAsTargetType(ExpressionType operationType, Type toClrType, Type fromClrType);
    private DbExpression TranslateInlineQueryOfT(ObjectQuery inlineQuery);
    private DbExpression CreateCastExpression(DbExpression source, Type toClrType, Type fromClrType);
    private DbExpression TranslateLambda(LambdaExpression lambda, DbExpression input, DbExpressionBinding& binding);
    private DbExpression TranslateLambda(LambdaExpression lambda, DbExpression input, string bindingName, DbExpressionBinding& binding);
    private DbExpression TranslateLambda(LambdaExpression lambda, DbExpression input, DbGroupExpressionBinding& binding);
    private DbExpression TranslateLambda(LambdaExpression lambda, DbExpression input);
    private DbExpression NormalizeSetSource(DbExpression input);
    private LambdaExpression GetLambdaExpression(MethodCallExpression callExpression, int argumentOrdinal);
    private Expression GetLambdaExpression(Expression argument);
    private DbExpression TranslateSet(Expression linq);
    private DbExpression TranslateExpression(Expression linq);
    private DbExpression AlignTypes(DbExpression cqt, Type toClrType);
    private void CheckInitializerType(Type type);
    private static bool TypeUsageEquals(TypeUsage left, TypeUsage right);
    private TypeUsage GetValueLayerType(Type linqType);
    private bool TryGetValueLayerType(Type linqType, TypeUsage& type);
    private static void VerifyTypeSupportedForComparison(Type clrType, TypeUsage edmType, Stack`1<EdmMember> memberPath, bool isNullComparison);
    private static void VerifyRowTypeSupportedForComparison(Type clrType, RowType rowType, Stack`1<EdmMember> memberPath, bool isNullComparison);
    internal static string DescribeClrType(Type clrType);
    private static bool IsCSharpGeneratedClass(string typeName, string pattern);
    private static bool IsVBGeneratedClass(string typeName, string pattern);
    private static DbExpression CreateIsNullExpression(DbExpression operand, Type operandClrType);
    private DbExpression CreateEqualsExpression(DbExpression left, DbExpression right, EqualsPattern pattern, Type leftClrType, Type rightClrType);
    private DbExpression RecursivelyRewriteEqualsExpression(DbExpression left, DbExpression right, EqualsPattern pattern);
    private DbExpression ImplementEquality(DbExpression left, DbExpression right, EqualsPattern pattern);
    private DbExpression ImplementEqualityConstantAndUnknown(DbConstantExpression constant, DbExpression unknown, EqualsPattern pattern);
    private DbExpression ImplementEqualityUnknownArguments(DbExpression left, DbExpression right, EqualsPattern pattern);
    private DbExpression TranslateLike(MethodCallExpression call);
    private DbExpression TranslateFunctionIntoLike(MethodCallExpression call, bool insertPercentAtStart, bool insertPercentAtEnd, Func`5<ExpressionConverter, MethodCallExpression, DbExpression, DbExpression, DbExpression> defaultTranslator);
    private static Tuple`2<string, bool> PreparePattern(string patternValue, bool insertPercentAtStart, bool insertPercentAtEnd, DbProviderManifest providerManifest);
    private DbFunctionExpression TranslateIntoCanonicalFunction(string functionName, Expression Expression, Expression[] linqArguments);
    private DbFunctionExpression CreateCanonicalFunction(string functionName, Expression Expression, DbExpression[] translatedArguments);
    private EdmFunction FindCanonicalFunction(string functionName, IList`1<TypeUsage> argumentTypes, bool isGroupAggregateFunction, Expression Expression);
    private EdmFunction FindFunction(string namespaceName, string functionName, IList`1<TypeUsage> argumentTypes, bool isGroupAggregateFunction, Expression Expression);
    private static void ThrowUnresolvableFunction(Expression Expression);
    private static void ThrowUnresolvableFunctionOverload(Expression Expression, bool isAmbiguous);
    private static DbNewInstanceExpression CreateNewRowExpression(List`1<KeyValuePair`2<string, DbExpression>> columns, InitializerMetadata initializerMetadata);
}
internal class System.Data.Entity.Core.Objects.ELinq.Funcletizer : object {
    private ParameterExpression _rootContextParameter;
    private ObjectContext _rootContext;
    private ConstantExpression _rootContextExpression;
    private ReadOnlyCollection`1<ParameterExpression> _compiledQueryParameters;
    private Mode _mode;
    private HashSet`1<Expression> _linqExpressionStack;
    private static string s_parameterPrefix;
    private long _parameterNumber;
    internal ObjectContext RootContext { get; }
    internal ParameterExpression RootContextParameter { get; }
    internal ConstantExpression RootContextExpression { get; }
    internal bool IsCompiledQuery { get; }
    private Funcletizer(Mode mode, ObjectContext rootContext, ParameterExpression rootContextParameter, ReadOnlyCollection`1<ParameterExpression> compiledQueryParameters);
    internal static Funcletizer CreateCompiledQueryEvaluationFuncletizer(ObjectContext rootContext, ParameterExpression rootContextParameter, ReadOnlyCollection`1<ParameterExpression> compiledQueryParameters);
    internal static Funcletizer CreateCompiledQueryLockdownFuncletizer();
    internal static Funcletizer CreateQueryFuncletizer(ObjectContext rootContext);
    internal ObjectContext get_RootContext();
    internal ParameterExpression get_RootContextParameter();
    internal ConstantExpression get_RootContextExpression();
    internal bool get_IsCompiledQuery();
    internal Expression Funcletize(Expression expression, Func`1& recompileRequired);
    private Expression ReplaceRootContextParameter(Expression expression);
    private static Func`2<Expression, bool> Nominate(Expression expression, Func`2<Expression, bool> localCriterion);
    private bool IsImmutable(Expression expression);
    private bool IsClosureExpression(Expression expression);
    private bool IsCompiledQueryParameterVariable(Expression expression);
    private bool TryGetTypeUsageForTerminal(Expression expression, TypeUsage& typeUsage);
    internal string GenerateParameterName();
    [CompilerGeneratedAttribute]
private Expression <ReplaceRootContextParameter>b__21_0(Expression exp, Func`2<Expression, Expression> baseVisit);
}
internal abstract class System.Data.Entity.Core.Objects.ELinq.InitializerMetadata : object {
    internal Type ClrType;
    private static long s_identifier;
    internal string Identity;
    private static string _identifierPrefix;
    internal InitializerMetadataKind Kind { get; }
    private InitializerMetadata(Type clrType);
    private static InitializerMetadata();
    internal abstract virtual InitializerMetadataKind get_Kind();
    internal static bool TryGetInitializerMetadata(TypeUsage typeUsage, InitializerMetadata& initializerMetadata);
    internal static InitializerMetadata CreateGroupingInitializer(EdmItemCollection itemCollection, Type resultType);
    internal static InitializerMetadata CreateProjectionInitializer(EdmItemCollection itemCollection, MemberInitExpression initExpression);
    internal static InitializerMetadata CreateProjectionInitializer(EdmItemCollection itemCollection, NewExpression newExpression);
    internal static InitializerMetadata CreateEmptyProjectionInitializer(EdmItemCollection itemCollection, NewExpression newExpression);
    internal static InitializerMetadata CreateEntityCollectionInitializer(EdmItemCollection itemCollection, Type type, NavigationProperty navigationProperty);
    internal virtual void AppendColumnMapKey(ColumnMapKeyBuilder builder);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InitializerMetadata other);
    public virtual int GetHashCode();
    protected virtual bool IsStructurallyEquivalent(InitializerMetadata other);
    internal abstract virtual Expression Emit(List`1<TranslatorResult> propertyTranslatorResults);
    internal abstract virtual IEnumerable`1<Type> GetChildTypes();
    protected static List`1<Expression> GetPropertyReaders(List`1<TranslatorResult> propertyTranslatorResults);
}
internal enum System.Data.Entity.Core.Objects.ELinq.InitializerMetadataKind : Enum {
    public int value__;
    public static InitializerMetadataKind Grouping;
    public static InitializerMetadataKind ProjectionNew;
    public static InitializerMetadataKind ProjectionInitializer;
    public static InitializerMetadataKind EntityCollection;
}
internal class System.Data.Entity.Core.Objects.ELinq.LinqExpressionNormalizer : EntityExpressionVisitor {
    private static bool LiftToNull;
    private Dictionary`2<Expression, Pattern> _patterns;
    internal static MethodInfo RelationalOperatorPlaceholderMethod;
    private static LinqExpressionNormalizer();
    internal virtual Expression VisitBinary(BinaryExpression b);
    private static Expression UnwrapObjectConvert(Expression input);
    private static bool IsConstantZero(Expression expression);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
    private static MethodCallExpression NormalizePredicateArgument(MethodCallExpression callExpression);
    private static bool HasPredicateArgument(MethodCallExpression callExpression, Int32& argumentOrdinal);
    private static bool TryMatchCoalescePattern(Expression expression, Expression& normalized);
    private static bool RelationalOperatorPlaceholder(TLeft left, TRight right);
    private static BinaryExpression CreateRelationalOperator(ExpressionType op, Expression left, Expression right);
    private static bool TryCreateRelationalOperator(ExpressionType op, Expression left, Expression right, BinaryExpression& result);
    private Expression CreateCompareExpression(Expression left, Expression right);
}
internal class System.Data.Entity.Core.Objects.ELinq.ObjectQueryProvider : object {
    private ObjectContext _context;
    private ObjectQuery _query;
    internal ObjectQueryProvider(ObjectContext context);
    internal ObjectQueryProvider(ObjectQuery query);
    internal virtual ObjectQuery`1<TElement> CreateQuery(Expression expression);
    internal virtual ObjectQuery CreateQuery(Expression expression, Type ofType);
    private ObjectQueryState GetObjectQueryState(ObjectQuery query, Expression expression, Type ofType);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override Task`1<TResult> System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Task`1<object> System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    internal static TResult ExecuteSingle(IEnumerable`1<TResult> query, Expression queryRoot);
    private static Func`2<IEnumerable`1<TResult>, TResult> GetElementFunction(Expression queryRoot);
    internal static Task`1<TResult> ExecuteSingleAsync(IDbAsyncEnumerable`1<TResult> query, Expression queryRoot, CancellationToken cancellationToken);
    private static Func`3<IDbAsyncEnumerable`1<TResult>, CancellationToken, Task`1<TResult>> GetAsyncElementFunction(Expression queryRoot);
}
internal class System.Data.Entity.Core.Objects.ELinq.QueryParameterExpression : Expression {
    private DbParameterReferenceExpression _parameterReference;
    private Type _type;
    private Expression _funcletizedExpression;
    private IEnumerable`1<ParameterExpression> _compiledQueryParameters;
    private Delegate _cachedDelegate;
    internal DbParameterReferenceExpression ParameterReference { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    internal QueryParameterExpression(DbParameterReferenceExpression parameterReference, Expression funcletizedExpression, IEnumerable`1<ParameterExpression> compiledQueryParameters);
    internal object EvaluateParameter(Object[] arguments);
    internal QueryParameterExpression EscapeParameterForLike(Expression`1<Func`2<string, Tuple`2<string, bool>>> method);
    internal DbParameterReferenceExpression get_ParameterReference();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    private static bool TryEvaluatePath(Expression expression, ConstantExpression& constantExpression);
    private static bool TryGetFieldOrPropertyValue(MemberExpression me, object instance, Object& memberValue);
}
internal static class System.Data.Entity.Core.Objects.ELinq.ReflectionUtil : object {
    private static Dictionary`2<MethodInfo, SequenceMethod> _methodMap;
    private static Dictionary`2<SequenceMethod, MethodInfo> _inverseMap;
    internal static Dictionary`2<MethodInfo, SequenceMethod> MethodMap { get; }
    internal static Dictionary`2<SequenceMethod, MethodInfo> InverseMap { get; }
    private static ReflectionUtil();
    internal static Dictionary`2<MethodInfo, SequenceMethod> get_MethodMap();
    internal static Dictionary`2<SequenceMethod, MethodInfo> get_InverseMap();
    internal static bool TryIdentifySequenceMethod(MethodInfo method, SequenceMethod& sequenceMethod);
    internal static bool TryIdentifySequenceMethod(Expression expression, bool unwrapLambda, SequenceMethod& sequenceMethod);
    internal static bool TryLookupMethod(SequenceMethod sequenceMethod, MethodInfo& method);
    internal static string GetCanonicalMethodDescription(MethodInfo method);
    private static void AppendCanonicalTypeDescription(Type type, Dictionary`2<Type, int> genericArgumentOrdinals, StringBuilder description);
    private static IEnumerable`1<MethodInfo> GetAllLinqOperators();
}
internal enum System.Data.Entity.Core.Objects.ELinq.SequenceMethod : Enum {
    public int value__;
    public static SequenceMethod Where;
    public static SequenceMethod WhereOrdinal;
    public static SequenceMethod OfType;
    public static SequenceMethod Cast;
    public static SequenceMethod Select;
    public static SequenceMethod SelectOrdinal;
    public static SequenceMethod SelectMany;
    public static SequenceMethod SelectManyOrdinal;
    public static SequenceMethod SelectManyResultSelector;
    public static SequenceMethod SelectManyOrdinalResultSelector;
    public static SequenceMethod Join;
    public static SequenceMethod JoinComparer;
    public static SequenceMethod GroupJoin;
    public static SequenceMethod GroupJoinComparer;
    public static SequenceMethod OrderBy;
    public static SequenceMethod OrderByComparer;
    public static SequenceMethod OrderByDescending;
    public static SequenceMethod OrderByDescendingComparer;
    public static SequenceMethod ThenBy;
    public static SequenceMethod ThenByComparer;
    public static SequenceMethod ThenByDescending;
    public static SequenceMethod ThenByDescendingComparer;
    public static SequenceMethod Take;
    public static SequenceMethod TakeWhile;
    public static SequenceMethod TakeWhileOrdinal;
    public static SequenceMethod Skip;
    public static SequenceMethod SkipWhile;
    public static SequenceMethod SkipWhileOrdinal;
    public static SequenceMethod GroupBy;
    public static SequenceMethod GroupByComparer;
    public static SequenceMethod GroupByElementSelector;
    public static SequenceMethod GroupByElementSelectorComparer;
    public static SequenceMethod GroupByResultSelector;
    public static SequenceMethod GroupByResultSelectorComparer;
    public static SequenceMethod GroupByElementSelectorResultSelector;
    public static SequenceMethod GroupByElementSelectorResultSelectorComparer;
    public static SequenceMethod Distinct;
    public static SequenceMethod DistinctComparer;
    public static SequenceMethod Concat;
    public static SequenceMethod Union;
    public static SequenceMethod UnionComparer;
    public static SequenceMethod Intersect;
    public static SequenceMethod IntersectComparer;
    public static SequenceMethod Except;
    public static SequenceMethod ExceptComparer;
    public static SequenceMethod First;
    public static SequenceMethod FirstPredicate;
    public static SequenceMethod FirstOrDefault;
    public static SequenceMethod FirstOrDefaultPredicate;
    public static SequenceMethod Last;
    public static SequenceMethod LastPredicate;
    public static SequenceMethod LastOrDefault;
    public static SequenceMethod LastOrDefaultPredicate;
    public static SequenceMethod Single;
    public static SequenceMethod SinglePredicate;
    public static SequenceMethod SingleOrDefault;
    public static SequenceMethod SingleOrDefaultPredicate;
    public static SequenceMethod ElementAt;
    public static SequenceMethod ElementAtOrDefault;
    public static SequenceMethod DefaultIfEmpty;
    public static SequenceMethod DefaultIfEmptyValue;
    public static SequenceMethod Contains;
    public static SequenceMethod ContainsComparer;
    public static SequenceMethod Reverse;
    public static SequenceMethod Empty;
    public static SequenceMethod SequenceEqual;
    public static SequenceMethod SequenceEqualComparer;
    public static SequenceMethod Any;
    public static SequenceMethod AnyPredicate;
    public static SequenceMethod All;
    public static SequenceMethod Count;
    public static SequenceMethod CountPredicate;
    public static SequenceMethod LongCount;
    public static SequenceMethod LongCountPredicate;
    public static SequenceMethod Min;
    public static SequenceMethod MinSelector;
    public static SequenceMethod Max;
    public static SequenceMethod MaxSelector;
    public static SequenceMethod MinInt;
    public static SequenceMethod MinNullableInt;
    public static SequenceMethod MinLong;
    public static SequenceMethod MinNullableLong;
    public static SequenceMethod MinDouble;
    public static SequenceMethod MinNullableDouble;
    public static SequenceMethod MinDecimal;
    public static SequenceMethod MinNullableDecimal;
    public static SequenceMethod MinSingle;
    public static SequenceMethod MinNullableSingle;
    public static SequenceMethod MinIntSelector;
    public static SequenceMethod MinNullableIntSelector;
    public static SequenceMethod MinLongSelector;
    public static SequenceMethod MinNullableLongSelector;
    public static SequenceMethod MinDoubleSelector;
    public static SequenceMethod MinNullableDoubleSelector;
    public static SequenceMethod MinDecimalSelector;
    public static SequenceMethod MinNullableDecimalSelector;
    public static SequenceMethod MinSingleSelector;
    public static SequenceMethod MinNullableSingleSelector;
    public static SequenceMethod MaxInt;
    public static SequenceMethod MaxNullableInt;
    public static SequenceMethod MaxLong;
    public static SequenceMethod MaxNullableLong;
    public static SequenceMethod MaxDouble;
    public static SequenceMethod MaxNullableDouble;
    public static SequenceMethod MaxDecimal;
    public static SequenceMethod MaxNullableDecimal;
    public static SequenceMethod MaxSingle;
    public static SequenceMethod MaxNullableSingle;
    public static SequenceMethod MaxIntSelector;
    public static SequenceMethod MaxNullableIntSelector;
    public static SequenceMethod MaxLongSelector;
    public static SequenceMethod MaxNullableLongSelector;
    public static SequenceMethod MaxDoubleSelector;
    public static SequenceMethod MaxNullableDoubleSelector;
    public static SequenceMethod MaxDecimalSelector;
    public static SequenceMethod MaxNullableDecimalSelector;
    public static SequenceMethod MaxSingleSelector;
    public static SequenceMethod MaxNullableSingleSelector;
    public static SequenceMethod SumInt;
    public static SequenceMethod SumNullableInt;
    public static SequenceMethod SumLong;
    public static SequenceMethod SumNullableLong;
    public static SequenceMethod SumDouble;
    public static SequenceMethod SumNullableDouble;
    public static SequenceMethod SumDecimal;
    public static SequenceMethod SumNullableDecimal;
    public static SequenceMethod SumSingle;
    public static SequenceMethod SumNullableSingle;
    public static SequenceMethod SumIntSelector;
    public static SequenceMethod SumNullableIntSelector;
    public static SequenceMethod SumLongSelector;
    public static SequenceMethod SumNullableLongSelector;
    public static SequenceMethod SumDoubleSelector;
    public static SequenceMethod SumNullableDoubleSelector;
    public static SequenceMethod SumDecimalSelector;
    public static SequenceMethod SumNullableDecimalSelector;
    public static SequenceMethod SumSingleSelector;
    public static SequenceMethod SumNullableSingleSelector;
    public static SequenceMethod AverageInt;
    public static SequenceMethod AverageNullableInt;
    public static SequenceMethod AverageLong;
    public static SequenceMethod AverageNullableLong;
    public static SequenceMethod AverageDouble;
    public static SequenceMethod AverageNullableDouble;
    public static SequenceMethod AverageDecimal;
    public static SequenceMethod AverageNullableDecimal;
    public static SequenceMethod AverageSingle;
    public static SequenceMethod AverageNullableSingle;
    public static SequenceMethod AverageIntSelector;
    public static SequenceMethod AverageNullableIntSelector;
    public static SequenceMethod AverageLongSelector;
    public static SequenceMethod AverageNullableLongSelector;
    public static SequenceMethod AverageDoubleSelector;
    public static SequenceMethod AverageNullableDoubleSelector;
    public static SequenceMethod AverageDecimalSelector;
    public static SequenceMethod AverageNullableDecimalSelector;
    public static SequenceMethod AverageSingleSelector;
    public static SequenceMethod AverageNullableSingleSelector;
    public static SequenceMethod Aggregate;
    public static SequenceMethod AggregateSeed;
    public static SequenceMethod AggregateSeedSelector;
    public static SequenceMethod AsQueryable;
    public static SequenceMethod AsQueryableGeneric;
    public static SequenceMethod AsEnumerable;
    public static SequenceMethod ToList;
    public static SequenceMethod Zip;
    public static SequenceMethod NotSupported;
}
[ExtensionAttribute]
internal static class System.Data.Entity.Core.Objects.ELinq.TypeSystem : object {
    internal static MethodInfo GetDefaultMethod;
    private static TypeSystem();
    private static T GetDefault();
    internal static object GetDefaultValue(Type type);
    internal static bool IsSequenceType(Type seqType);
    internal static Type GetDelegateType(IEnumerable`1<Type> inputTypes, Type returnType);
    internal static Expression EnsureType(Expression expression, Type requiredType);
    internal static MemberInfo PropertyOrField(MemberInfo member, String& name, Type& type);
    private static Type FindIEnumerable(Type seqType);
    internal static Type GetElementType(Type seqType);
    internal static Type GetNonNullableType(Type type);
    [ExtensionAttribute]
internal static bool IsImplementationOfGenericInterfaceMethod(MethodInfo test, Type match, Type[]& genericTypeArguments);
    [ExtensionAttribute]
internal static bool IsImplementationOf(PropertyInfo propertyInfo, Type interfaceType);
}
internal class System.Data.Entity.Core.Objects.EntityEntry : ObjectStateEntry {
    private StateManagerTypeMetadata _cacheTypeMetadata;
    private EntityKey _entityKey;
    private IEntityWrapper _wrappedEntity;
    private BitArray _modifiedFields;
    private List`1<StateManagerValue> _originalValues;
    private Dictionary`2<object, Dictionary`2<int, object>> _originalComplexObjects;
    private bool _requiresComplexChangeTracking;
    private bool _requiresScalarChangeTracking;
    private bool _requiresAnyChangeTracking;
    private RelationshipEntry _headRelationshipEnds;
    private int _countRelationshipEnds;
    internal static int s_EntityRoot;
    public bool IsRelationship { get; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyDependents { get; }
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyPrincipals { get; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    internal BitArray ModifiedProperties { get; }
    internal bool IsKeyEntry { get; }
    internal IEntityWrapper WrappedEntity { get; }
    [DebuggerBrowsableAttribute("0")]
internal OriginalValueRecord EditableOriginalValues { get; }
    internal bool RequiresComplexChangeTracking { get; }
    internal bool RequiresScalarChangeTracking { get; }
    internal bool RequiresAnyChangeTracking { get; }
    internal EntityEntry(ObjectStateManager stateManager);
    internal EntityEntry(IEntityWrapper wrappedEntity, EntityKey entityKey, EntitySet entitySet, ObjectStateManager cache, StateManagerTypeMetadata typeMetadata, EntityState state);
    internal EntityEntry(EntityKey entityKey, EntitySet entitySet, ObjectStateManager cache, StateManagerTypeMetadata typeMetadata);
    private void SetChangeTrackingFlags();
    public virtual bool get_IsRelationship();
    public virtual object get_Entity();
    public virtual EntityKey get_EntityKey();
    internal virtual void set_EntityKey(EntityKey value);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.EntityEntry/<get_ForeignKeyDependents>d__24")]
internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyDependents();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.EntityEntry/<get_ForeignKeyPrincipals>d__26")]
internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyPrincipals();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.EntityEntry/<GetModifiedProperties>d__27")]
public virtual IEnumerable`1<string> GetModifiedProperties();
    public virtual void SetModifiedProperty(string propertyName);
    internal void SetModifiedPropertyInternal(int ordinal);
    private int ValidateAndGetOrdinalForProperty(string propertyName, string methodName);
    public virtual void RejectPropertyChanges(string propertyName);
    public virtual DbDataRecord get_OriginalValues();
    public virtual OriginalValueRecord GetUpdatableOriginalValues();
    private DbDataRecord InternalGetOriginalValues(bool readOnly);
    private void DetectChangesInComplexProperties();
    public virtual CurrentValueRecord get_CurrentValues();
    public virtual void Delete();
    public virtual void AcceptChanges();
    public virtual void SetModified();
    public virtual RelationshipManager get_RelationshipManager();
    internal virtual BitArray get_ModifiedProperties();
    public virtual void ChangeState(EntityState state);
    public virtual void ApplyCurrentValues(object currentEntity);
    public virtual void ApplyOriginalValues(object originalEntity);
    internal void AddRelationshipEnd(RelationshipEntry item);
    internal bool ContainsRelationshipEnd(RelationshipEntry item);
    internal void RemoveRelationshipEnd(RelationshipEntry item);
    internal void UpdateRelationshipEnds(EntityKey oldKey, EntityEntry promotedEntry);
    internal RelationshipEndEnumerable GetRelationshipEnds();
    internal virtual bool get_IsKeyEntry();
    internal virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void Reset();
    internal virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal virtual void RevertDelete();
    internal virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    private void CascadeAcceptChanges();
    internal virtual void SetModifiedAll();
    internal virtual void EntityMemberChanging(string entityMemberName);
    internal virtual void EntityMemberChanged(string entityMemberName);
    internal virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal IEntityWrapper get_WrappedEntity();
    private void EntityMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal void SetCurrentEntityValue(string memberName, object newValue);
    internal void SetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, object newValue);
    private void EntityMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal object GetOriginalEntityValue(string memberName);
    internal object GetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord);
    internal object GetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord, int parentEntityPropertyIndex);
    internal object GetOriginalEntityValue(StateManagerTypeMetadata metadata, StateManagerMemberMetadata memberMetadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord, int parentEntityPropertyIndex);
    internal object GetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord);
    internal object GetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord, int parentEntityPropertyIndex);
    internal int FindOriginalValueIndex(StateManagerMemberMetadata metadata, object instance);
    internal AssociationEndMember GetAssociationEndMember(RelationshipEntry relationshipEntry);
    internal EntityEntry GetOtherEndOfRelationship(RelationshipEntry relationshipEntry);
    internal void ExpandComplexTypeAndAddValues(StateManagerMemberMetadata memberMetadata, object oldComplexObject, object newComplexObject, bool useOldComplexObject);
    internal int GetAndValidateChangeMemberInfo(string entityMemberName, object complexObject, string complexObjectMemberName, StateManagerTypeMetadata& typeMetadata, String& changingMemberName, Object& changingObject);
    private void SetCachedChangingValues(string entityMemberName, object changingObject, string changingMember, EntityState changingState, object oldValue);
    internal OriginalValueRecord get_EditableOriginalValues();
    internal void DetachObjectStateManagerFromEntity();
    internal void TakeSnapshot(bool onlySnapshotComplexProperties);
    internal void TakeSnapshotOfForeignKeys();
    private void TakeSnapshotOfComplexType(StateManagerMemberMetadata member, object complexValue);
    private void AddComplexObjectSnapshot(object userObject, int ordinal, object complexObject);
    private void CheckForDuplicateComplexObjects(object complexObject);
    public virtual bool IsPropertyChanged(string propertyName);
    private bool DetectChangesInProperty(int ordinal, bool detectOnlyComplexProperties, bool detectOnly);
    internal void DetectChangesInProperties(bool detectOnlyComplexProperties);
    private bool DetectChangesInComplexType(StateManagerMemberMetadata topLevelMember, StateManagerMemberMetadata complexMember, object complexValue, object oldComplexValue, Boolean& changeDetected, bool detectOnly);
    private object GetComplexObjectSnapshot(object parentObject, int parentOrdinal);
    internal void UpdateComplexObjectSnapshot(StateManagerMemberMetadata member, object userObject, int ordinal, object currentValue);
    internal void FixupFKValuesFromNonAddedReferences();
    internal void TakeSnapshotOfRelationships();
    private void TakeSnapshotOfSingleRelationship(RelatedEnd relatedEnd, NavigationProperty n, object o);
    internal void DetectChangesInRelationshipsOfSingleEntity();
    private void AddRelationshipDetectedByGraph(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> relationships, object relatedObject, RelatedEnd relatedEndFrom, bool verifyForAdd);
    private void AddRelationshipDetectedByForeignKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> relationships, Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> principalRelationships, EntityKey relatedKey, EntityEntry relatedEntry, RelatedEnd relatedEndFrom);
    private static void AddDetectedRelationship(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<T>>> relationships, T relatedObject, RelatedEnd relatedEnd);
    internal void Detach();
    internal void Delete(bool doFixup);
    private void NullAllForeignKeys();
    private bool IsOneEndOfSomeRelationship();
    private void DetachRelationshipsEntries(RelationshipManager relationshipManager);
    private void FixupRelationships();
    internal void DeleteRelationshipsThatReferenceKeys(RelationshipSet relationshipSet, RelationshipEndMember endMember);
    private bool RetrieveAndCheckReferentialConstraintValuesInAcceptChanges();
    internal void RetrieveReferentialConstraintPropertiesFromKeyEntries(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties);
    internal static void AddOrIncreaseCounter(ReferentialConstraint constraint, Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, string propertyName, object propertyValue);
    private void CheckReferentialConstraintPropertiesInDependents();
    internal void PromoteKeyEntry(IEntityWrapper wrappedEntity, StateManagerTypeMetadata typeMetadata);
    internal void DegradeEntry();
    internal void AttachObjectStateManagerToEntity();
    internal void GetOtherKeyProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties);
    internal void AddOriginalValueAt(int index, StateManagerMemberMetadata memberMetadata, object userObject, object value);
    internal void CompareKeyProperties(object changed);
    internal object GetCurrentEntityValue(string memberName);
    internal void VerifyEntityValueIsEditable(StateManagerTypeMetadata typeMetadata, int ordinal, string memberName);
    internal void SetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, object newValue);
    private void TransitionRelationshipsForAdd();
    [ConditionalAttribute("DEBUG")]
private void VerifyIsNotRelated();
    internal void ChangeObjectState(EntityState requestedState);
    internal void UpdateOriginalValues(object entity);
    internal void UpdateRecordWithoutSetModified(object value, DbUpdatableDataRecord current);
    internal void UpdateRecordWithSetModified(object value, DbUpdatableDataRecord current);
    private void UpdateRecord(object value, DbUpdatableDataRecord current, UpdateRecordBehavior behavior, int propertyIndex);
    internal bool HasRecordValueChanged(DbDataRecord record, int propertyIndex, object newFieldValue);
    internal void ApplyCurrentValuesInternal(IEntityWrapper wrappedCurrentEntity);
    internal void UpdateCurrentValueRecord(object value);
    internal void ApplyOriginalValuesInternal(IEntityWrapper wrappedOriginalEntity);
    internal void RemoveFromForeignKeyIndex();
    internal void FixupReferencesByForeignKeys(bool replaceAddedRefs, EntitySetBase restrictTo);
    internal void FixupEntityReferenceByForeignKey(EntityReference reference);
    internal void FixupEntityReferenceToPrincipal(EntityReference relatedEnd, EntityKey foreignKey, bool setIsLoaded, bool replaceExistingRef);
    private static bool WillNotRefSteal(EntityReference refToPrincipal, IEntityWrapper wrappedPrincipal);
    internal bool TryGetReferenceKey(AssociationEndMember principalRole, EntityKey& principalKey);
    internal void FixupForeignKeysByReference();
    private void FixupForeignKeysByReference(List`1<EntityEntry> visited);
    private bool IsPropertyAForeignKey(string propertyName);
    private bool IsPropertyAForeignKey(string propertyName, List`1& relationships);
    internal void FindRelatedEntityKeysByForeignKeys(Dictionary`2& relatedEntities, bool useOriginalValues);
    internal IEnumerable`1<EntityReference> FindFKRelatedEnds();
    internal void DetectChangesInForeignKeys();
    internal bool get_RequiresComplexChangeTracking();
    internal bool get_RequiresScalarChangeTracking();
    internal bool get_RequiresAnyChangeTracking();
}
[ObsoleteAttribute("This class has been replaced by System.Data.Entity.DbFunctions.")]
public static class System.Data.Entity.Core.Objects.EntityFunctions : object {
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "Left")]
public static string Left(string stringArgument, Nullable`1<long> length);
    [DbFunctionAttribute("Edm", "Right")]
public static string Right(string stringArgument, Nullable`1<long> length);
    [DbFunctionAttribute("Edm", "Reverse")]
public static string Reverse(string stringArgument);
    [DbFunctionAttribute("Edm", "GetTotalOffsetMinutes")]
public static Nullable`1<int> GetTotalOffsetMinutes(Nullable`1<DateTimeOffset> dateTimeOffsetArgument);
    [DbFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTimeOffset> TruncateTime(Nullable`1<DateTimeOffset> dateValue);
    [DbFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTime> TruncateTime(Nullable`1<DateTime> dateValue);
    [DbFunctionAttribute("Edm", "CreateDateTime")]
public static Nullable`1<DateTime> CreateDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [DbFunctionAttribute("Edm", "CreateDateTimeOffset")]
public static Nullable`1<DateTimeOffset> CreateDateTimeOffset(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second, Nullable`1<int> timeZoneOffset);
    [DbFunctionAttribute("Edm", "CreateTime")]
public static Nullable`1<TimeSpan> CreateTime(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [DbFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTimeOffset> AddYears(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTime> AddYears(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTimeOffset> AddMonths(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTime> AddMonths(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTimeOffset> AddDays(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTime> AddDays(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTimeOffset> AddHours(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTime> AddHours(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<TimeSpan> AddHours(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTimeOffset> AddMinutes(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTime> AddMinutes(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<TimeSpan> AddMinutes(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTimeOffset> AddSeconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTime> AddSeconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<TimeSpan> AddSeconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTimeOffset> AddMilliseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTime> AddMilliseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<TimeSpan> AddMilliseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTimeOffset> AddMicroseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTime> AddMicroseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<TimeSpan> AddMicroseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTimeOffset> AddNanoseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTime> AddNanoseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<TimeSpan> AddNanoseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<double> Truncate(Nullable`1<double> value, Nullable`1<int> digits);
    [DbFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<decimal> Truncate(Nullable`1<decimal> value, Nullable`1<int> digits);
    public static bool Like(string searchString, string likeExpression);
    public static bool Like(string searchString, string likeExpression, string escapeCharacter);
    public static string AsUnicode(string value);
    public static string AsNonUnicode(string value);
}
internal class System.Data.Entity.Core.Objects.EntitySetQualifiedType : ValueType {
    internal static IEqualityComparer`1<EntitySetQualifiedType> EqualityComparer;
    internal Type ClrType;
    internal EntitySet EntitySet;
    internal EntitySetQualifiedType(Type type, EntitySet set);
    private static EntitySetQualifiedType();
    public sealed virtual bool Equals(EntitySetQualifiedType x, EntitySetQualifiedType y);
    public sealed virtual int GetHashCode(EntitySetQualifiedType obj);
}
internal class System.Data.Entity.Core.Objects.EntitySqlQueryState : ObjectQueryState {
    private string _queryText;
    private DbExpression _queryExpression;
    private bool _allowsLimit;
    private ObjectQueryExecutionPlanFactory _objectQueryExecutionPlanFactory;
    internal bool AllowsLimitSubclause { get; }
    internal EntitySqlQueryState(Type elementType, string commandText, bool allowsLimit, ObjectContext context, ObjectParameterCollection parameters, Span span);
    internal EntitySqlQueryState(Type elementType, string commandText, DbExpression expression, bool allowsLimit, ObjectContext context, ObjectParameterCollection parameters, Span span, ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory);
    internal bool get_AllowsLimitSubclause();
    internal virtual bool TryGetCommandText(String& commandText);
    internal virtual bool TryGetExpression(Expression& expression);
    protected virtual TypeUsage GetResultType();
    internal virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal DbExpression Parse();
}
public class System.Data.Entity.Core.Objects.ExecutionOptions : object {
    internal static ExecutionOptions Default;
    [CompilerGeneratedAttribute]
private MergeOption <MergeOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UserSpecifiedStreaming>k__BackingField;
    public MergeOption MergeOption { get; private set; }
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. This property no longer returns an accurate value.")]
public bool Streaming { get; }
    internal Nullable`1<bool> UserSpecifiedStreaming { get; private set; }
    public ExecutionOptions(MergeOption mergeOption);
    public ExecutionOptions(MergeOption mergeOption, bool streaming);
    internal ExecutionOptions(MergeOption mergeOption, Nullable`1<bool> streaming);
    private static ExecutionOptions();
    [CompilerGeneratedAttribute]
public MergeOption get_MergeOption();
    [CompilerGeneratedAttribute]
private void set_MergeOption(MergeOption value);
    public bool get_Streaming();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_UserSpecifiedStreaming();
    [CompilerGeneratedAttribute]
private void set_UserSpecifiedStreaming(Nullable`1<bool> value);
    public static bool op_Equality(ExecutionOptions left, ExecutionOptions right);
    public static bool op_Inequality(ExecutionOptions left, ExecutionOptions right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.Core.Objects.FieldDescriptor : PropertyDescriptor {
    private EdmProperty _property;
    private Type _fieldType;
    private Type _itemType;
    private bool _isReadOnly;
    internal EdmProperty EdmProperty { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    internal FieldDescriptor(string propertyName);
    internal FieldDescriptor(Type itemType, bool isReadOnly, EdmProperty property);
    private Type DetermineClrType(TypeUsage typeUsage);
    internal EdmProperty get_EdmProperty();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object item);
    public virtual object GetValue(object item);
    public virtual void ResetValue(object item);
    public virtual void SetValue(object item, object value);
    public virtual bool ShouldSerializeValue(object item);
    public virtual bool get_IsBrowsable();
}
internal class System.Data.Entity.Core.Objects.IntBox : object {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    internal int Value { get; internal set; }
    internal IntBox(int val);
    [CompilerGeneratedAttribute]
internal int get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(int value);
}
internal abstract class System.Data.Entity.Core.Objects.Internal.BaseEntityWrapper`1 : object {
    private RelationshipManager _relationshipManager;
    private Type _identityType;
    private WrapperFlags<TEntity> _flags;
    [CompilerGeneratedAttribute]
private ObjectContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityEntry <ObjectStateEntry>k__BackingField;
    public RelationshipManager RelationshipManager { get; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; private set; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public Type IdentityType { get; }
    public bool OverridesEqualsOrGetHashCode { get; }
    public EntityKey EntityKey { get; public set; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    protected BaseEntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, bool overridesEquals);
    protected BaseEntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, bool overridesEquals);
    public sealed virtual RelationshipManager get_RelationshipManager();
    [CompilerGeneratedAttribute]
public sealed virtual ObjectContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ObjectContext value);
    public sealed virtual MergeOption get_MergeOption();
    private void set_MergeOption(MergeOption value);
    public sealed virtual bool get_InitializingProxyRelatedEnds();
    public sealed virtual void set_InitializingProxyRelatedEnds(bool value);
    public sealed virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void DetachContext();
    [CompilerGeneratedAttribute]
public sealed virtual EntityEntry get_ObjectStateEntry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectStateEntry(EntityEntry value);
    public sealed virtual Type get_IdentityType();
    public sealed virtual bool get_OverridesEqualsOrGetHashCode();
    public abstract virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual bool get_OwnsRelationshipManager();
    public abstract virtual EntityKey GetEntityKeyFromEntity();
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object get_Entity();
    public abstract virtual TEntity get_TypedEntity();
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public abstract virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Entity.Core.Objects.Internal.BaseProxyImplementor : object {
    private List`1<PropertyInfo> _baseGetters;
    private List`1<PropertyInfo> _baseSetters;
    internal static MethodInfo StringEquals;
    private static ConstructorInfo _invalidOperationConstructor;
    public List`1<PropertyInfo> BaseGetters { get; }
    public List`1<PropertyInfo> BaseSetters { get; }
    private static BaseProxyImplementor();
    public List`1<PropertyInfo> get_BaseGetters();
    public List`1<PropertyInfo> get_BaseSetters();
    public void AddBasePropertyGetter(PropertyInfo baseProperty);
    public void AddBasePropertySetter(PropertyInfo baseProperty);
    public void Implement(TypeBuilder typeBuilder);
    private void ImplementBaseGetter(TypeBuilder typeBuilder);
    private void ImplementBaseSetter(TypeBuilder typeBuilder);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Objects.Internal.BufferedDataReader : DbDataReader {
    private DbDataReader _underlyingReader;
    private List`1<BufferedDataRecord> _bufferedDataRecords;
    private BufferedDataRecord _currentResultSet;
    private int _currentResultSetNumber;
    private int _recordsAffected;
    private bool _disposed;
    private bool _isClosed;
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public BufferedDataReader(DbDataReader reader);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    private void AssertReaderIsOpen();
    private void AssertReaderIsOpenWithData();
    [ConditionalAttribute("DEBUG")]
private void AssertFieldIsReady(int ordinal);
    internal void Initialize(string providerManifestToken, DbProviderServices providerServices, Type[] columnTypes, Boolean[] nullableColumns);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.BufferedDataReader/<InitializeAsync>d__26")]
internal Task InitializeAsync(string providerManifestToken, DbProviderServices providerServices, Type[] columnTypes, Boolean[] nullableColumns, CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
internal abstract class System.Data.Entity.Core.Objects.Internal.BufferedDataRecord : object {
    protected int _currentRowNumber;
    protected int _rowCount;
    private String[] _dataTypeNames;
    private Type[] _fieldTypes;
    private String[] _columnNames;
    private Lazy`1<FieldNameLookup> _fieldNameLookup;
    [CompilerGeneratedAttribute]
private bool <IsDataReady>k__BackingField;
    public bool IsDataReady { get; protected set; }
    public bool HasRows { get; }
    public int FieldCount { get; }
    protected virtual void ReadMetadata(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader);
    [CompilerGeneratedAttribute]
public bool get_IsDataReady();
    [CompilerGeneratedAttribute]
protected void set_IsDataReady(bool value);
    public bool get_HasRows();
    public int get_FieldCount();
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public abstract virtual T GetFieldValue(int ordinal);
    public abstract virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual object GetValue(int ordinal);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public abstract virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public string GetDataTypeName(int ordinal);
    public Type GetFieldType(int ordinal);
    public string GetName(int ordinal);
    public int GetOrdinal(string name);
    public abstract virtual bool Read();
    public abstract virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
internal class System.Data.Entity.Core.Objects.Internal.ComplexTypeMaterializer : object {
    private MetadataWorkspace _workspace;
    private static int MaxPlanCount;
    private Plan[] _lastPlans;
    private int _lastPlanIndex;
    internal ComplexTypeMaterializer(MetadataWorkspace workspace);
    internal object CreateComplex(IExtendedDataRecord record, DataRecordInfo recordInfo, object result);
    private void SetProperties(IExtendedDataRecord record, object result, PlanEdmProperty[] properties);
    private static object ConvertDBNull(object value);
    private object CreateComplexRecursive(object record, object existing);
    private object CreateComplexRecursive(IExtendedDataRecord record, object existing);
    private Plan GetPlan(DataRecordInfo recordInfo);
}
internal class System.Data.Entity.Core.Objects.Internal.DataContractImplementor : object {
    internal static ConstructorInfo DataContractAttributeConstructor;
    internal static PropertyInfo[] DataContractProperties;
    private Type _baseClrType;
    private DataContractAttribute _dataContract;
    internal DataContractImplementor(EntityType ospaceEntityType);
    private static DataContractImplementor();
    internal void Implement(TypeBuilder typeBuilder);
}
internal class System.Data.Entity.Core.Objects.Internal.EntityProxyFactory : object {
    internal static string ResetFKSetterFlagFieldName;
    internal static string CompareByteArraysFieldName;
    private static Dictionary`2<Tuple`2<Type, string>, EntityProxyTypeInfo> _proxyNameMap;
    private static Dictionary`2<Type, EntityProxyTypeInfo> _proxyTypeMap;
    private static Dictionary`2<Assembly, ModuleBuilder> _moduleBuilders;
    private static ReaderWriterLockSlim _typeMapLock;
    private static HashSet`1<Assembly> _proxyRuntimeAssemblies;
    internal static MethodInfo GetInterceptorDelegateMethod;
    private static EntityProxyFactory();
    private static ModuleBuilder GetDynamicModule(EntityType ospaceEntityType);
    private static void DiscardDynamicModule(EntityType ospaceEntityType);
    internal static bool TryGetProxyType(Type clrType, string entityTypeName, EntityProxyTypeInfo& proxyTypeInfo);
    internal static bool TryGetProxyType(Type proxyType, EntityProxyTypeInfo& proxyTypeInfo);
    internal static bool TryGetProxyWrapper(object instance, IEntityWrapper& wrapper);
    internal static EntityProxyTypeInfo GetProxyType(ClrEntityType ospaceEntityType, MetadataWorkspace workspace);
    internal static bool TryGetAssociationTypeFromProxyInfo(IEntityWrapper wrappedEntity, string relationshipName, AssociationType& associationType);
    internal static IEnumerable`1<AssociationType> TryGetAllAssociationTypesFromProxyInfo(IEntityWrapper wrappedEntity);
    internal static void TryCreateProxyTypes(IEnumerable`1<EntityType> ospaceEntityTypes, MetadataWorkspace workspace);
    private static EntityProxyTypeInfo TryCreateProxyType(EntityType ospaceEntityType, MetadataWorkspace workspace);
    internal static bool IsProxyType(Type type);
    internal static IEnumerable`1<Type> GetKnownProxyTypes();
    public virtual Func`2<object, object> CreateBaseGetter(Type declaringType, PropertyInfo propertyInfo);
    private static bool TryGetBasePropertyValue(Type proxyType, string propertyName, object entity, Object& value);
    public virtual Action`2<object, object> CreateBaseSetter(Type declaringType, PropertyInfo propertyInfo);
    private static bool TrySetBasePropertyValue(Type proxyType, string propertyName, object entity, object value);
    private static EntityProxyTypeInfo BuildType(ModuleBuilder moduleBuilder, ClrEntityType ospaceEntityType, MetadataWorkspace workspace);
    private static void AddAssemblyToResolveList(Assembly assembly);
    private static void InterceptMember(EdmMember member, Type proxyType, EntityProxyTypeInfo proxyTypeInfo);
    private static void AssignInterceptionDelegate(Delegate interceptorDelegate, FieldInfo interceptorField);
    private static void SetResetFKSetterFlagDelegate(Type proxyType, EntityProxyTypeInfo proxyTypeInfo);
    private static Action`1<object> GetResetFKSetterFlagDelegate(Func`2<object, object> getEntityWrapperDelegate);
    private static void ResetFKSetterFlag(object wrappedEntityAsObject);
    private static void SetCompareByteArraysDelegate(Type proxyType);
    private static bool CanProxyType(EntityType ospaceEntityType);
    private static bool CanProxyMethod(MethodInfo method);
    internal static bool CanProxyGetter(PropertyInfo clrProperty);
    internal static bool CanProxySetter(PropertyInfo clrProperty);
}
internal class System.Data.Entity.Core.Objects.Internal.EntityProxyMemberInfo : object {
    private EdmMember _member;
    private int _propertyIndex;
    internal EdmMember EdmMember { get; }
    internal int PropertyIndex { get; }
    internal EntityProxyMemberInfo(EdmMember member, int propertyIndex);
    internal EdmMember get_EdmMember();
    internal int get_PropertyIndex();
}
internal class System.Data.Entity.Core.Objects.Internal.EntityProxyTypeInfo : object {
    private Type _proxyType;
    private ClrEntityType _entityType;
    internal static string EntityWrapperFieldName;
    private static string InitializeEntityCollectionsName;
    private DynamicMethod _initializeCollections;
    private Func`3<object, string, object> _baseGetter;
    private HashSet`1<string> _propertiesWithBaseGetter;
    private Action`3<object, string, object> _baseSetter;
    private HashSet`1<string> _propertiesWithBaseSetter;
    private Func`2<object, object> Proxy_GetEntityWrapper;
    private Func`3<object, object, object> Proxy_SetEntityWrapper;
    private Func`1<object> _createObject;
    private Dictionary`2<string, AssociationType> _navigationPropertyAssociationTypes;
    internal Type ProxyType { get; }
    internal DynamicMethod InitializeEntityCollections { get; }
    public Func`3<object, string, object> BaseGetter { get; }
    public Action`3<object, string, object> BaseSetter { get; }
    internal Func`2<object, object> EntityWrapperDelegate { get; }
    internal EntityProxyTypeInfo(Type proxyType, ClrEntityType ospaceEntityType, DynamicMethod initializeCollections, List`1<PropertyInfo> baseGetters, List`1<PropertyInfo> baseSetters, MetadataWorkspace workspace);
    internal static IEnumerable`1<AssociationType> GetAllRelationshipsForType(MetadataWorkspace workspace, Type clrType);
    private static bool IsEndMemberForType(AssociationEndMember end, Type clrType);
    internal object CreateProxyObject();
    internal Type get_ProxyType();
    internal DynamicMethod get_InitializeEntityCollections();
    public Func`3<object, string, object> get_BaseGetter();
    public bool ContainsBaseGetter(string propertyName);
    public bool ContainsBaseSetter(string propertyName);
    public Action`3<object, string, object> get_BaseSetter();
    public bool TryGetNavigationPropertyAssociationType(string relationshipName, AssociationType& associationType);
    public IEnumerable`1<AssociationType> GetAllAssociationTypes();
    public void ValidateType(ClrEntityType ospaceEntityType);
    internal IEntityWrapper SetEntityWrapper(IEntityWrapper wrapper);
    internal IEntityWrapper GetEntityWrapper(object entity);
    internal Func`2<object, object> get_EntityWrapperDelegate();
}
internal static class System.Data.Entity.Core.Objects.Internal.EntitySqlQueryBuilder : object {
    private static string _setOpEpilog;
    private static string _setOpProlog;
    private static string _fromOp;
    private static string _asOp;
    private static string _distinctProlog;
    private static string _distinctEpilog;
    private static string _exceptOp;
    private static string _groupByOp;
    private static string _intersectOp;
    private static string _ofTypeProlog;
    private static string _ofTypeInfix;
    private static string _ofTypeInfix2;
    private static string _ofTypeEpilog;
    private static string _orderByOp;
    private static string _selectOp;
    private static string _selectValueOp;
    private static string _skipOp;
    private static string _limitOp;
    private static string _topOp;
    private static string _topInfix;
    private static string _unionOp;
    private static string _unionAllOp;
    private static string _whereOp;
    private static string GetCommandText(ObjectQueryState query);
    private static ObjectParameterCollection MergeParameters(ObjectContext context, ObjectParameterCollection sourceQueryParams, ObjectParameter[] builderMethodParams);
    private static ObjectParameterCollection MergeParameters(ObjectParameterCollection query1Params, ObjectParameterCollection query2Params);
    private static ObjectQueryState NewBuilderQuery(ObjectQueryState sourceQuery, Type elementType, StringBuilder queryText, Span newSpan, IEnumerable`1<ObjectParameter> enumerableParams);
    private static ObjectQueryState NewBuilderQuery(ObjectQueryState sourceQuery, Type elementType, StringBuilder queryText, bool allowsLimit, Span newSpan, IEnumerable`1<ObjectParameter> enumerableParams);
    private static ObjectQueryState BuildSetOp(ObjectQueryState leftQuery, ObjectQueryState rightQuery, Span newSpan, string setOp);
    private static ObjectQueryState BuildSelectOrSelectValue(ObjectQueryState query, string alias, string projection, ObjectParameter[] parameters, string projectOp, Type elementType);
    private static ObjectQueryState BuildOrderByOrWhere(ObjectQueryState query, string alias, string predicateOrKeys, ObjectParameter[] parameters, string op, string skipCount, bool allowsLimit);
    internal static ObjectQueryState Distinct(ObjectQueryState query);
    internal static ObjectQueryState Except(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState GroupBy(ObjectQueryState query, string alias, string keys, string projection, ObjectParameter[] parameters);
    internal static ObjectQueryState Intersect(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState OfType(ObjectQueryState query, EdmType newType, Type clrOfType);
    internal static ObjectQueryState OrderBy(ObjectQueryState query, string alias, string keys, ObjectParameter[] parameters);
    internal static ObjectQueryState Select(ObjectQueryState query, string alias, string projection, ObjectParameter[] parameters);
    internal static ObjectQueryState SelectValue(ObjectQueryState query, string alias, string projection, ObjectParameter[] parameters, Type projectedType);
    internal static ObjectQueryState Skip(ObjectQueryState query, string alias, string keys, string count, ObjectParameter[] parameters);
    internal static ObjectQueryState Top(ObjectQueryState query, string alias, string count, ObjectParameter[] parameters);
    internal static ObjectQueryState Union(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState UnionAll(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState Where(ObjectQueryState query, string alias, string predicate, ObjectParameter[] parameters);
}
internal class System.Data.Entity.Core.Objects.Internal.EntityWithChangeTrackerStrategy : object {
    private IEntityWithChangeTracker _entity;
    public EntityWithChangeTrackerStrategy(IEntityWithChangeTracker entity);
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal class System.Data.Entity.Core.Objects.Internal.EntityWithKeyStrategy : object {
    private IEntityWithKey _entity;
    public EntityWithKeyStrategy(IEntityWithKey entity);
    public sealed virtual EntityKey GetEntityKey();
    public sealed virtual void SetEntityKey(EntityKey key);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
}
internal abstract class System.Data.Entity.Core.Objects.Internal.EntityWrapper`1 : BaseEntityWrapper`1<TEntity> {
    private TEntity _entity;
    private IPropertyAccessorStrategy _propertyStrategy;
    private IChangeTrackingStrategy _changeTrackingStrategy;
    private IEntityKeyStrategy _keyStrategy;
    public EntityKey EntityKey { get; public set; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    protected EntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    protected EntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, EntityKey key, EntitySet set, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    public virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public virtual void TakeSnapshot(EntityEntry entry);
    public virtual EntityKey get_EntityKey();
    public virtual void set_EntityKey(EntityKey value);
    public virtual EntityKey GetEntityKeyFromEntity();
    public virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual object get_Entity();
    public virtual TEntity get_TypedEntity();
    public virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal class System.Data.Entity.Core.Objects.Internal.EntityWrapperFactory : object {
    private static Memoizer`2<Type, Func`2<object, IEntityWrapper>> _delegateCache;
    internal static MethodInfo CreateWrapperDelegateTypedLightweightMethod;
    internal static MethodInfo CreateWrapperDelegateTypedWithRelationshipsMethod;
    internal static MethodInfo CreateWrapperDelegateTypedWithoutRelationshipsMethod;
    private static EntityWrapperFactory();
    internal static IEntityWrapper CreateNewWrapper(object entity, EntityKey key);
    private static Func`2<object, IEntityWrapper> CreateWrapperDelegate(Type entityType);
    private static Func`2<object, IEntityWrapper> CreateWrapperDelegateTypedLightweight();
    private static Func`2<object, IEntityWrapper> CreateWrapperDelegateTypedWithRelationships();
    private static Func`2<object, IEntityWrapper> CreateWrapperDelegateTypedWithoutRelationships();
    private static void CreateStrategies(Func`2& createPropertyAccessorStrategy, Func`2& createChangeTrackingStrategy, Func`2& createKeyStrategy);
    internal IEntityWrapper WrapEntityUsingContext(object entity, ObjectContext context);
    internal IEntityWrapper WrapEntityUsingContextGettingEntry(object entity, ObjectContext context, EntityEntry& existingEntry);
    internal IEntityWrapper WrapEntityUsingStateManager(object entity, ObjectStateManager stateManager);
    internal virtual IEntityWrapper WrapEntityUsingStateManagerGettingEntry(object entity, ObjectStateManager stateManager, EntityEntry& existingEntry);
    internal virtual void UpdateNoTrackingWrapper(IEntityWrapper wrapper, ObjectContext context, EntitySet entitySet);
    internal static Func`2<object, IPropertyAccessorStrategy> GetPocoPropertyAccessorStrategyFunc();
    internal static Func`2<object, IPropertyAccessorStrategy> GetNullPropertyAccessorStrategyFunc();
    internal static Func`2<object, IChangeTrackingStrategy> GetEntityWithChangeTrackerStrategyFunc();
    internal static Func`2<object, IChangeTrackingStrategy> GetSnapshotChangeTrackingStrategyFunc();
    internal static Func`2<object, IEntityKeyStrategy> GetEntityWithKeyStrategyStrategyFunc();
    internal static Func`2<object, IEntityKeyStrategy> GetPocoEntityKeyStrategyFunc();
}
internal class System.Data.Entity.Core.Objects.Internal.EntityWrapperWithoutRelationships`1 : EntityWrapper`1<TEntity> {
    public bool OwnsRelationshipManager { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal EntityWrapperWithoutRelationships`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    internal EntityWrapperWithoutRelationships`1(TEntity entity, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    public virtual bool get_OwnsRelationshipManager();
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Entity.Core.Objects.Internal.EntityWrapperWithRelationships`1 : EntityWrapper`1<TEntity> {
    public bool OwnsRelationshipManager { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal EntityWrapperWithRelationships`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    internal EntityWrapperWithRelationships`1(TEntity entity, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy, bool overridesEquals);
    public virtual bool get_OwnsRelationshipManager();
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Entity.Core.Objects.Internal.ForeignKeyFactory : object {
    private static string s_NullPart;
    private static string s_NullForeignKey;
    public static bool IsConceptualNullKey(EntityKey key);
    public static bool IsConceptualNullKeyChanged(EntityKey conceptualNullKey, EntityKey realKey);
    public static EntityKey CreateConceptualNullKey(EntityKey originalKey);
    public static EntityKey CreateKeyFromForeignKeyValues(EntityEntry dependentEntry, RelatedEnd relatedEnd);
    public static EntityKey CreateKeyFromForeignKeyValues(EntityEntry dependentEntry, ReferentialConstraint constraint, EntitySet principalEntitySet, bool useOriginalValues);
}
internal interface System.Data.Entity.Core.Objects.Internal.IChangeTrackingStrategy {
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal interface System.Data.Entity.Core.Objects.Internal.IEntityKeyStrategy {
    public abstract virtual EntityKey GetEntityKey();
    public abstract virtual void SetEntityKey(EntityKey key);
    public abstract virtual EntityKey GetEntityKeyFromEntity();
}
internal interface System.Data.Entity.Core.Objects.Internal.IEntityWrapper {
    public RelationshipManager RelationshipManager { get; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public EntityKey EntityKey { get; public set; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; }
    public Type IdentityType { get; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public bool RequiresRelationshipChangeTracking { get; }
    public bool OverridesEqualsOrGetHashCode { get; }
    public abstract virtual RelationshipManager get_RelationshipManager();
    public abstract virtual bool get_OwnsRelationshipManager();
    public abstract virtual object get_Entity();
    public abstract virtual EntityEntry get_ObjectStateEntry();
    public abstract virtual void set_ObjectStateEntry(EntityEntry value);
    public abstract virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual EntityKey GetEntityKeyFromEntity();
    public abstract virtual ObjectContext get_Context();
    public abstract virtual void set_Context(ObjectContext value);
    public abstract virtual MergeOption get_MergeOption();
    public abstract virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public abstract virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public abstract virtual void DetachContext();
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public abstract virtual Type get_IdentityType();
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual bool get_InitializingProxyRelatedEnds();
    public abstract virtual void set_InitializingProxyRelatedEnds(bool value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public abstract virtual bool get_RequiresRelationshipChangeTracking();
    public abstract virtual bool get_OverridesEqualsOrGetHashCode();
}
internal class System.Data.Entity.Core.Objects.Internal.IPocoImplementor : object {
    private EntityType _ospaceEntityType;
    private FieldBuilder _changeTrackerField;
    private FieldBuilder _relationshipManagerField;
    private FieldBuilder _resetFKSetterFlagField;
    private FieldBuilder _compareByteArraysField;
    private MethodBuilder _entityMemberChanging;
    private MethodBuilder _entityMemberChanged;
    private MethodBuilder _getRelationshipManager;
    private List`1<KeyValuePair`2<NavigationProperty, PropertyInfo>> _referenceProperties;
    private List`1<KeyValuePair`2<NavigationProperty, PropertyInfo>> _collectionProperties;
    private bool _implementIEntityWithChangeTracker;
    private bool _implementIEntityWithRelationships;
    private HashSet`1<EdmMember> _scalarMembers;
    private HashSet`1<EdmMember> _relationshipMembers;
    internal static MethodInfo EntityMemberChangingMethod;
    internal static MethodInfo EntityMemberChangedMethod;
    internal static MethodInfo CreateRelationshipManagerMethod;
    internal static MethodInfo GetRelationshipManagerMethod;
    internal static MethodInfo GetRelatedReferenceMethod;
    internal static MethodInfo GetRelatedCollectionMethod;
    internal static MethodInfo GetRelatedEndMethod;
    internal static MethodInfo ObjectEqualsMethod;
    private static ConstructorInfo _invalidOperationConstructorMethod;
    internal static MethodInfo GetEntityMethod;
    internal static MethodInfo InvokeMethod;
    internal static MethodInfo FuncInvokeMethod;
    internal static MethodInfo SetChangeTrackerMethod;
    public Type[] Interfaces { get; }
    public IPocoImplementor(EntityType ospaceEntityType);
    private static IPocoImplementor();
    private void CheckType(EntityType ospaceEntityType);
    public void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
    public Type[] get_Interfaces();
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes);
    public DynamicMethod CreateInitializeCollectionMethod(Type proxyType);
    public bool CanProxyMember(EdmMember member);
    public bool EmitMember(TypeBuilder typeBuilder, EdmMember member, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, BaseProxyImplementor baseImplementor);
    private void EmitScalarSetter(TypeBuilder typeBuilder, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, bool isKeyMember);
    private void EmitReferenceProperty(TypeBuilder typeBuilder, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, NavigationProperty navProperty);
    private void EmitCollectionProperty(TypeBuilder typeBuilder, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, NavigationProperty navProperty);
    private void ImplementIEntityWithChangeTracker(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
    private void ImplementIEntityWithRelationships(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
}
internal interface System.Data.Entity.Core.Objects.Internal.IPropertyAccessorStrategy {
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object CollectionCreate(RelatedEnd relatedEnd);
}
internal class System.Data.Entity.Core.Objects.Internal.LazyLoadBehavior : object {
    internal static Func`3<TProxy, TItem, bool> GetInterceptorDelegate(EdmMember member, Func`2<object, object> getEntityWrapperDelegate);
    internal static bool IsLazyLoadCandidate(EntityType ospaceEntityType, EdmMember member);
    private static bool LoadProperty(TItem propertyValue, string relationshipName, string targetRoleName, bool mustBeNull, object wrapperObject);
}
internal class System.Data.Entity.Core.Objects.Internal.LazyLoadImplementor : object {
    private HashSet`1<EdmMember> _members;
    public IEnumerable`1<EdmMember> Members { get; }
    public LazyLoadImplementor(EntityType ospaceEntityType);
    public IEnumerable`1<EdmMember> get_Members();
    private void CheckType(EntityType ospaceEntityType);
    public bool CanProxyMember(EdmMember member);
    public virtual void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
    public bool EmitMember(TypeBuilder typeBuilder, EdmMember member, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, BaseProxyImplementor baseImplementor);
    internal static string GetInterceptorFieldName(string memberName);
}
internal class System.Data.Entity.Core.Objects.Internal.LightweightEntityWrapper`1 : BaseEntityWrapper`1<TEntity> {
    private TEntity _entity;
    public EntityKey EntityKey { get; public set; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal LightweightEntityWrapper`1(TEntity entity, bool overridesEquals);
    internal LightweightEntityWrapper`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, bool overridesEquals);
    public virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public virtual void TakeSnapshot(EntityEntry entry);
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual EntityKey get_EntityKey();
    public virtual void set_EntityKey(EntityKey value);
    public virtual bool get_OwnsRelationshipManager();
    public virtual EntityKey GetEntityKeyFromEntity();
    public virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public virtual object get_Entity();
    public virtual TEntity get_TypedEntity();
    public virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Entity.Core.Objects.Internal.NullEntityWrapper : object {
    private static IEntityWrapper _nullWrapper;
    internal static IEntityWrapper NullWrapper { get; }
    public RelationshipManager RelationshipManager { get; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public EntityKey EntityKey { get; public set; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; }
    public Type IdentityType { get; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public bool RequiresRelationshipChangeTracking { get; }
    public bool OverridesEqualsOrGetHashCode { get; }
    private static NullEntityWrapper();
    internal static IEntityWrapper get_NullWrapper();
    public sealed virtual RelationshipManager get_RelationshipManager();
    public sealed virtual bool get_OwnsRelationshipManager();
    public sealed virtual object get_Entity();
    public sealed virtual EntityEntry get_ObjectStateEntry();
    public sealed virtual void set_ObjectStateEntry(EntityEntry value);
    public sealed virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public sealed virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public sealed virtual EntityKey get_EntityKey();
    public sealed virtual void set_EntityKey(EntityKey value);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
    public sealed virtual ObjectContext get_Context();
    public sealed virtual void set_Context(ObjectContext value);
    public sealed virtual MergeOption get_MergeOption();
    public sealed virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void DetachContext();
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public sealed virtual Type get_IdentityType();
    public sealed virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public sealed virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public sealed virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public sealed virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual bool get_InitializingProxyRelatedEnds();
    public sealed virtual void set_InitializingProxyRelatedEnds(bool value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public sealed virtual bool get_RequiresRelationshipChangeTracking();
    public sealed virtual bool get_OverridesEqualsOrGetHashCode();
}
internal class System.Data.Entity.Core.Objects.Internal.ObjectFullSpanRewriter : ObjectSpanRewriter {
    private Stack`1<SpanPathInfo> _currentSpanPath;
    internal ObjectFullSpanRewriter(DbCommandTree tree, DbExpression toRewrite, Span span, AliasGenerator aliasGenerator);
    private void AddSpanPath(SpanPathInfo parentInfo, List`1<string> navPropNames);
    private void ConvertSpanPath(SpanPathInfo parentInfo, List`1<string> navPropNames, int pos);
    private static EntityType EntityTypeFromResultType(NavigationProperty navProp);
    private static bool TryGetEntityType(TypeUsage resultType, EntityType& entityType);
    private AssociationEndMember GetNavigationPropertyTargetEnd(NavigationProperty property);
    internal virtual SpanTrackingInfo CreateEntitySpanTrackingInfo(DbExpression expression, EntityType entityType);
}
internal class System.Data.Entity.Core.Objects.Internal.ObjectQueryExecutionPlan : object {
    internal DbCommandDefinition CommandDefinition;
    internal bool Streaming;
    internal ShaperFactory ResultShaperFactory;
    internal TypeUsage ResultType;
    internal MergeOption MergeOption;
    internal IEnumerable`1<Tuple`2<ObjectParameter, QueryParameterExpression>> CompiledQueryParameters;
    private EntitySet _singleEntitySet;
    public ObjectQueryExecutionPlan(DbCommandDefinition commandDefinition, ShaperFactory resultShaperFactory, TypeUsage resultType, MergeOption mergeOption, bool streaming, EntitySet singleEntitySet, IEnumerable`1<Tuple`2<ObjectParameter, QueryParameterExpression>> compiledQueryParameters);
    internal string ToTraceString();
    internal virtual ObjectResult`1<TResultType> Execute(ObjectContext context, ObjectParameterCollection parameterValues);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ObjectQueryExecutionPlan/<ExecuteAsync>d__10`1")]
internal virtual Task`1<ObjectResult`1<TResultType>> ExecuteAsync(ObjectContext context, ObjectParameterCollection parameterValues, CancellationToken cancellationToken);
    private EntityCommand PrepareEntityCommand(ObjectContext context, ObjectParameterCollection parameterValues);
}
internal class System.Data.Entity.Core.Objects.Internal.ObjectQueryExecutionPlanFactory : object {
    private Translator _translator;
    public ObjectQueryExecutionPlanFactory(Translator translator);
    public virtual ObjectQueryExecutionPlan Prepare(ObjectContext context, DbQueryCommandTree tree, Type elementType, MergeOption mergeOption, bool streaming, Span span, IEnumerable`1<Tuple`2<ObjectParameter, QueryParameterExpression>> compiledQueryParameters, AliasGenerator aliasGenerator);
    private static EntityCommandDefinition CreateCommandDefinition(ObjectContext context, DbQueryCommandTree tree);
}
internal abstract class System.Data.Entity.Core.Objects.Internal.ObjectQueryState : object {
    internal static MergeOption DefaultMergeOption;
    internal static MethodInfo CreateObjectQueryMethod;
    private ObjectContext _context;
    private Type _elementType;
    private ObjectParameterCollection _parameters;
    private Span _span;
    private Nullable`1<MergeOption> _userMergeOption;
    private bool _cachingEnabled;
    protected ObjectQueryExecutionPlan _cachedPlan;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UserSpecifiedStreamingBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbExecutionStrategy <ExecutionStrategy>k__BackingField;
    internal bool EffectiveStreamingBehavior { get; }
    internal Nullable`1<bool> UserSpecifiedStreamingBehavior { get; internal set; }
    internal bool DefaultStreamingBehavior { get; }
    internal IDbExecutionStrategy ExecutionStrategy { get; internal set; }
    internal Type ElementType { get; }
    internal ObjectContext ObjectContext { get; }
    internal ObjectParameterCollection Parameters { get; }
    internal Span Span { get; }
    internal MergeOption EffectiveMergeOption { get; }
    internal Nullable`1<MergeOption> UserSpecifiedMergeOption { get; internal set; }
    internal bool PlanCachingEnabled { get; internal set; }
    internal TypeUsage ResultType { get; }
    protected ObjectQueryState(Type elementType, ObjectContext context, ObjectParameterCollection parameters, Span span);
    protected ObjectQueryState(Type elementType, ObjectQuery query);
    private static ObjectQueryState();
    internal bool get_EffectiveStreamingBehavior();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_UserSpecifiedStreamingBehavior();
    [CompilerGeneratedAttribute]
internal void set_UserSpecifiedStreamingBehavior(Nullable`1<bool> value);
    internal bool get_DefaultStreamingBehavior();
    [CompilerGeneratedAttribute]
internal IDbExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
internal void set_ExecutionStrategy(IDbExecutionStrategy value);
    internal Type get_ElementType();
    internal ObjectContext get_ObjectContext();
    internal ObjectParameterCollection get_Parameters();
    internal ObjectParameterCollection EnsureParameters();
    internal Span get_Span();
    internal MergeOption get_EffectiveMergeOption();
    internal Nullable`1<MergeOption> get_UserSpecifiedMergeOption();
    internal void set_UserSpecifiedMergeOption(Nullable`1<MergeOption> value);
    internal bool get_PlanCachingEnabled();
    internal void set_PlanCachingEnabled(bool value);
    internal TypeUsage get_ResultType();
    internal void ApplySettingsTo(ObjectQueryState other);
    internal abstract virtual bool TryGetCommandText(String& commandText);
    internal abstract virtual bool TryGetExpression(Expression& expression);
    internal abstract virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal abstract virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    protected abstract virtual TypeUsage GetResultType();
    protected static MergeOption EnsureMergeOption(Nullable`1[] preferredMergeOptions);
    protected static Nullable`1<MergeOption> GetMergeOption(Nullable`1[] preferredMergeOptions);
    public ObjectQuery CreateQuery();
    public ObjectQuery`1<TResultType> CreateObjectQuery();
}
internal class System.Data.Entity.Core.Objects.Internal.ObjectSpanRewriter : object {
    private int _spanCount;
    private SpanIndex _spanIndex;
    private DbExpression _toRewrite;
    private bool _relationshipSpan;
    private DbCommandTree _tree;
    private Stack`1<NavigationInfo> _navSources;
    private AliasGenerator _aliasGenerator;
    internal MetadataWorkspace Metadata { get; }
    internal DbExpression Query { get; }
    internal bool RelationshipSpan { get; internal set; }
    internal SpanIndex SpanIndex { get; }
    internal ObjectSpanRewriter(DbCommandTree tree, DbExpression toRewrite, AliasGenerator aliasGenerator);
    internal static bool EntityTypeEquals(EntityTypeBase entityType1, EntityTypeBase entityType2);
    internal static bool TryRewrite(DbQueryCommandTree tree, Span span, MergeOption mergeOption, AliasGenerator aliasGenerator, DbExpression& newQuery, SpanIndex& spanInfo);
    internal MetadataWorkspace get_Metadata();
    internal DbExpression get_Query();
    internal bool get_RelationshipSpan();
    internal void set_RelationshipSpan(bool value);
    internal SpanIndex get_SpanIndex();
    internal DbExpression RewriteQuery();
    internal SpanTrackingInfo InitializeTrackingInfo(bool createAssociationEndTrackingInfo);
    internal virtual SpanTrackingInfo CreateEntitySpanTrackingInfo(DbExpression expression, EntityType entityType);
    protected DbExpression Rewrite(DbExpression expression);
    private void AddSpannedRowType(RowType spannedType, TypeUsage originalType);
    private void AddSpanMap(RowType rowType, Dictionary`2<int, AssociationEndMember> columnMap);
    private DbExpression RewriteEntity(DbExpression expression, EntityType entityType);
    private DbExpression RewriteElementExpression(DbElementExpression expression);
    private DbExpression RewriteLimitExpression(DbLimitExpression expression);
    private DbExpression RewriteRow(DbExpression expression, RowType rowType);
    private DbExpression RewriteCollection(DbExpression expression);
    private void EnterCollection();
    private void EnterNavigationCollection(NavigationInfo info);
    private void ExitCollection();
    private bool TryGetNavigationSource(AssociationEndMember wasSourceNowTargetEnd, DbExpression& source);
    private List`1<KeyValuePair`2<AssociationEndMember, AssociationEndMember>> GetRelationshipSpanEnds(EntityType entityType);
    private static bool IsValidRelationshipSpan(EntityType compareType, AssociationType associationType, AssociationEndMember fromEnd, AssociationEndMember toEnd);
}
internal class System.Data.Entity.Core.Objects.Internal.PocoEntityKeyStrategy : object {
    private EntityKey _key;
    public sealed virtual EntityKey GetEntityKey();
    public sealed virtual void SetEntityKey(EntityKey key);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
}
internal class System.Data.Entity.Core.Objects.Internal.PocoPropertyAccessorStrategy : object {
    internal static MethodInfo AddToCollectionGeneric;
    internal static MethodInfo RemoveFromCollectionGeneric;
    private object _entity;
    public PocoPropertyAccessorStrategy(object entity);
    private static PocoPropertyAccessorStrategy();
    public sealed virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public sealed virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    private static Type GetDeclaringType(RelatedEnd relatedEnd);
    private static Type GetNavigationPropertyType(Type entityType, string propertyName);
    public sealed virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    private static Action`2<object, object> CreateCollectionAddFunction(Type type, string propertyName);
    private static Action`2<object, object> AddToCollection();
    public sealed virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    private static Func`3<object, object, bool> CreateCollectionRemoveFunction(Type type, string propertyName);
    private static Func`3<object, object, bool> RemoveFromCollection();
    public sealed virtual object CollectionCreate(RelatedEnd relatedEnd);
    private static Func`1<object> CreateCollectionCreateDelegate(Type navigationPropertyType, string propName);
}
internal class System.Data.Entity.Core.Objects.Internal.SerializableImplementor : object {
    private Type _baseClrType;
    private bool _baseImplementsISerializable;
    private bool _canOverride;
    private MethodInfo _getObjectDataMethod;
    private ConstructorInfo _serializationConstructor;
    internal static MethodInfo GetTypeFromHandleMethod;
    internal static MethodInfo AddValueMethod;
    internal static MethodInfo GetValueMethod;
    internal bool TypeIsSuitable { get; }
    internal bool TypeImplementsISerializable { get; }
    internal SerializableImplementor(EntityType ospaceEntityType);
    private static SerializableImplementor();
    internal bool get_TypeIsSuitable();
    internal bool get_TypeImplementsISerializable();
    internal void Implement(TypeBuilder typeBuilder, IEnumerable`1<FieldBuilder> serializedFields);
}
internal class System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord : BufferedDataRecord {
    private int _rowCapacity;
    private BitArray _bools;
    private Boolean[] _tempBools;
    private int _boolCount;
    private Byte[] _bytes;
    private int _byteCount;
    private Char[] _chars;
    private int _charCount;
    private DateTime[] _dateTimes;
    private int _dateTimeCount;
    private Decimal[] _decimals;
    private int _decimalCount;
    private Double[] _doubles;
    private int _doubleCount;
    private Single[] _floats;
    private int _floatCount;
    private Guid[] _guids;
    private int _guidCount;
    private Int16[] _shorts;
    private int _shortCount;
    private Int32[] _ints;
    private int _intCount;
    private Int64[] _longs;
    private int _longCount;
    private Object[] _objects;
    private int _objectCount;
    private Int32[] _ordinalToIndexMap;
    private BitArray _nulls;
    private Boolean[] _tempNulls;
    private int _nullCount;
    private Int32[] _nullOrdinalToIndexMap;
    private TypeCase[] _columnTypeCases;
    internal static BufferedDataRecord Initialize(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader, Type[] columnTypes, Boolean[] nullableColumns);
    internal static Task`1<BufferedDataRecord> InitializeAsync(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader, Type[] columnTypes, Boolean[] nullableColumns, CancellationToken cancellationToken);
    private BufferedDataRecord Initialize(DbDataReader reader, DbSpatialDataReader spatialDataReader, Type[] columnTypes, Boolean[] nullableColumns);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<InitializeAsync>d__36")]
private Task`1<BufferedDataRecord> InitializeAsync(DbDataReader reader, DbSpatialDataReader spatialDataReader, Type[] columnTypes, Boolean[] nullableColumns, CancellationToken cancellationToken);
    private void InitializeFields(Type[] columnTypes, Boolean[] nullableColumns);
    private void DoubleBufferCapacity();
    private void ReadBool(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadBoolAsync>d__40")]
private Task ReadBoolAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadByte(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadByteAsync>d__42")]
private Task ReadByteAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadChar(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadCharAsync>d__44")]
private Task ReadCharAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadDateTime(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadDateTimeAsync>d__46")]
private Task ReadDateTimeAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadDecimal(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadDecimalAsync>d__48")]
private Task ReadDecimalAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadDouble(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadDoubleAsync>d__50")]
private Task ReadDoubleAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadFloat(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadFloatAsync>d__52")]
private Task ReadFloatAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadGuid(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadGuidAsync>d__54")]
private Task ReadGuidAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadShort(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadShortAsync>d__56")]
private Task ReadShortAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadInt(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadIntAsync>d__58")]
private Task ReadIntAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadLong(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadLongAsync>d__60")]
private Task ReadLongAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadObject(DbDataReader reader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadObjectAsync>d__62")]
private Task ReadObjectAsync(DbDataReader reader, int ordinal, CancellationToken cancellationToken);
    private void ReadGeography(DbSpatialDataReader spatialReader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadGeographyAsync>d__64")]
private Task ReadGeographyAsync(DbSpatialDataReader spatialReader, int ordinal, CancellationToken cancellationToken);
    private void ReadGeometry(DbSpatialDataReader spatialReader, int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapedBufferedDataRecord/<ReadGeometryAsync>d__66")]
private Task ReadGeometryAsync(DbSpatialDataReader spatialReader, int ordinal, CancellationToken cancellationToken);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
internal class System.Data.Entity.Core.Objects.Internal.ShapelessBufferedDataRecord : BufferedDataRecord {
    private Object[] _currentRow;
    private List`1<Object[]> _resultSet;
    private DbSpatialDataReader _spatialDataReader;
    private Boolean[] _geographyColumns;
    private Boolean[] _geometryColumns;
    internal static ShapelessBufferedDataRecord Initialize(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.Internal.ShapelessBufferedDataRecord/<InitializeAsync>d__7")]
internal static Task`1<ShapelessBufferedDataRecord> InitializeAsync(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader, CancellationToken cancellationToken);
    protected virtual void ReadMetadata(string providerManifestToken, DbProviderServices providerServices, DbDataReader reader);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
internal class System.Data.Entity.Core.Objects.Internal.SnapshotChangeTrackingStrategy : object {
    private static SnapshotChangeTrackingStrategy _instance;
    public static SnapshotChangeTrackingStrategy Instance { get; }
    private static SnapshotChangeTrackingStrategy();
    public static SnapshotChangeTrackingStrategy get_Instance();
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal class System.Data.Entity.Core.Objects.Internal.SpanIndex : object {
    private Dictionary`2<RowType, Dictionary`2<int, AssociationEndMember>> _spanMap;
    private Dictionary`2<RowType, TypeUsage> _rowMap;
    internal void AddSpannedRowType(RowType spannedRowType, TypeUsage originalRowType);
    internal TypeUsage GetSpannedRowType(RowType spannedRowType);
    internal bool HasSpanMap(RowType spanRowType);
    internal void AddSpanMap(RowType rowType, Dictionary`2<int, AssociationEndMember> columnMap);
    internal Dictionary`2<int, AssociationEndMember> GetSpanMap(RowType rowType);
}
internal class System.Data.Entity.Core.Objects.Internal.TransactionManager : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> <PromotedRelationships>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, EntityEntry> <PromotedKeyEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<EntityReference> <PopulatedEntityReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<EntityReference> <AlignedEntityReferences>k__BackingField;
    private Nullable`1<MergeOption> _originalMergeOption;
    [CompilerGeneratedAttribute]
private HashSet`1<IEntityWrapper> <ProcessedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, IEntityWrapper> <WrappedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackProcessedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAddTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttachTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> <AddedRelationshipsByGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> <DeletedRelationshipsByGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> <AddedRelationshipsByForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> <AddedRelationshipsByPrincipalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> <DeletedRelationshipsByForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> <ChangedForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDetectChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlignChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalPublicAPI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOriginalValuesGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForeignKeyUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRelatedEndAdd>k__BackingField;
    private int _graphUpdateCount;
    [CompilerGeneratedAttribute]
private object <EntityBeingReparented>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDetaching>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityReference <RelationshipBeingUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixupByReference>k__BackingField;
    internal Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> PromotedRelationships { get; private set; }
    internal Dictionary`2<object, EntityEntry> PromotedKeyEntries { get; private set; }
    internal HashSet`1<EntityReference> PopulatedEntityReferences { get; private set; }
    internal HashSet`1<EntityReference> AlignedEntityReferences { get; private set; }
    internal Nullable`1<MergeOption> OriginalMergeOption { get; internal set; }
    internal HashSet`1<IEntityWrapper> ProcessedEntities { get; private set; }
    internal Dictionary`2<object, IEntityWrapper> WrappedEntities { get; private set; }
    internal bool TrackProcessedEntities { get; private set; }
    internal bool IsAddTracking { get; private set; }
    internal bool IsAttachTracking { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> AddedRelationshipsByGraph { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> DeletedRelationshipsByGraph { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> AddedRelationshipsByForeignKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> AddedRelationshipsByPrincipalKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> DeletedRelationshipsByForeignKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> ChangedForeignKeys { get; private set; }
    internal bool IsDetectChanges { get; private set; }
    internal bool IsAlignChanges { get; private set; }
    internal bool IsLocalPublicAPI { get; private set; }
    internal bool IsOriginalValuesGetter { get; private set; }
    internal bool IsForeignKeyUpdate { get; private set; }
    internal bool IsRelatedEndAdd { get; private set; }
    internal bool IsGraphUpdate { get; }
    internal object EntityBeingReparented { get; internal set; }
    internal bool IsDetaching { get; private set; }
    internal EntityReference RelationshipBeingUpdated { get; private set; }
    internal bool IsFixupByReference { get; private set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> get_PromotedRelationships();
    [CompilerGeneratedAttribute]
private void set_PromotedRelationships(Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, EntityEntry> get_PromotedKeyEntries();
    [CompilerGeneratedAttribute]
private void set_PromotedKeyEntries(Dictionary`2<object, EntityEntry> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<EntityReference> get_PopulatedEntityReferences();
    [CompilerGeneratedAttribute]
private void set_PopulatedEntityReferences(HashSet`1<EntityReference> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<EntityReference> get_AlignedEntityReferences();
    [CompilerGeneratedAttribute]
private void set_AlignedEntityReferences(HashSet`1<EntityReference> value);
    internal Nullable`1<MergeOption> get_OriginalMergeOption();
    internal void set_OriginalMergeOption(Nullable`1<MergeOption> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<IEntityWrapper> get_ProcessedEntities();
    [CompilerGeneratedAttribute]
private void set_ProcessedEntities(HashSet`1<IEntityWrapper> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, IEntityWrapper> get_WrappedEntities();
    [CompilerGeneratedAttribute]
private void set_WrappedEntities(Dictionary`2<object, IEntityWrapper> value);
    [CompilerGeneratedAttribute]
internal bool get_TrackProcessedEntities();
    [CompilerGeneratedAttribute]
private void set_TrackProcessedEntities(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAddTracking();
    [CompilerGeneratedAttribute]
private void set_IsAddTracking(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAttachTracking();
    [CompilerGeneratedAttribute]
private void set_IsAttachTracking(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> get_AddedRelationshipsByGraph();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByGraph(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> get_DeletedRelationshipsByGraph();
    [CompilerGeneratedAttribute]
private void set_DeletedRelationshipsByGraph(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_AddedRelationshipsByForeignKey();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByForeignKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_AddedRelationshipsByPrincipalKey();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByPrincipalKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_DeletedRelationshipsByForeignKey();
    [CompilerGeneratedAttribute]
private void set_DeletedRelationshipsByForeignKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> get_ChangedForeignKeys();
    [CompilerGeneratedAttribute]
private void set_ChangedForeignKeys(Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> value);
    [CompilerGeneratedAttribute]
internal bool get_IsDetectChanges();
    [CompilerGeneratedAttribute]
private void set_IsDetectChanges(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAlignChanges();
    [CompilerGeneratedAttribute]
private void set_IsAlignChanges(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsLocalPublicAPI();
    [CompilerGeneratedAttribute]
private void set_IsLocalPublicAPI(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsOriginalValuesGetter();
    [CompilerGeneratedAttribute]
private void set_IsOriginalValuesGetter(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsForeignKeyUpdate();
    [CompilerGeneratedAttribute]
private void set_IsForeignKeyUpdate(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsRelatedEndAdd();
    [CompilerGeneratedAttribute]
private void set_IsRelatedEndAdd(bool value);
    internal bool get_IsGraphUpdate();
    [CompilerGeneratedAttribute]
internal object get_EntityBeingReparented();
    [CompilerGeneratedAttribute]
internal void set_EntityBeingReparented(object value);
    [CompilerGeneratedAttribute]
internal bool get_IsDetaching();
    [CompilerGeneratedAttribute]
private void set_IsDetaching(bool value);
    [CompilerGeneratedAttribute]
internal EntityReference get_RelationshipBeingUpdated();
    [CompilerGeneratedAttribute]
private void set_RelationshipBeingUpdated(EntityReference value);
    [CompilerGeneratedAttribute]
internal bool get_IsFixupByReference();
    [CompilerGeneratedAttribute]
private void set_IsFixupByReference(bool value);
    internal void BeginAddTracking();
    internal void EndAddTracking();
    internal void BeginAttachTracking();
    internal void EndAttachTracking();
    internal bool BeginDetectChanges();
    internal void EndDetectChanges();
    internal void BeginAlignChanges();
    internal void EndAlignChanges();
    internal void ResetProcessedEntities();
    internal void BeginLocalPublicAPI();
    internal void EndLocalPublicAPI();
    internal void BeginOriginalValuesGetter();
    internal void EndOriginalValuesGetter();
    internal void BeginForeignKeyUpdate(EntityReference relationship);
    internal void EndForeignKeyUpdate();
    internal void BeginRelatedEndAdd();
    internal void EndRelatedEndAdd();
    internal void BeginGraphUpdate();
    internal void EndGraphUpdate();
    internal void BeginDetaching();
    internal void EndDetaching();
    internal void BeginFixupKeysByReference();
    internal void EndFixupKeysByReference();
}
public interface System.Data.Entity.Core.Objects.IObjectSet`1 {
    public abstract virtual void AddObject(TEntity entity);
    public abstract virtual void Attach(TEntity entity);
    public abstract virtual void DeleteObject(TEntity entity);
    public abstract virtual void Detach(TEntity entity);
}
internal interface System.Data.Entity.Core.Objects.IObjectView {
    public abstract virtual void EntityPropertyChanged(object sender, PropertyChangedEventArgs e);
    public abstract virtual void CollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal interface System.Data.Entity.Core.Objects.IObjectViewData`1 {
    public IList`1<T> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    public abstract virtual IList`1<T> get_List();
    public abstract virtual bool get_AllowNew();
    public abstract virtual bool get_AllowEdit();
    public abstract virtual bool get_AllowRemove();
    public abstract virtual bool get_FiresEventOnAdd();
    public abstract virtual bool get_FiresEventOnRemove();
    public abstract virtual bool get_FiresEventOnClear();
    public abstract virtual void EnsureCanAddNew();
    public abstract virtual int Add(T item, bool isAddNew);
    public abstract virtual void CommitItemAt(int index);
    public abstract virtual void Clear();
    public abstract virtual bool Remove(T item, bool isCancelNew);
    public abstract virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Objects.MaterializedDataRecord : DbDataRecord {
    private FieldNameLookup _fieldNameLookup;
    private DataRecordInfo _recordInfo;
    private MetadataWorkspace _workspace;
    private TypeUsage _edmUsage;
    private Object[] _values;
    private PropertyDescriptorCollection _propertyDescriptors;
    private FilterCache _filterCache;
    private Dictionary`2<object, AttributeCollection> _attrCache;
    public DataRecordInfo DataRecordInfo { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal MaterializedDataRecord(MetadataWorkspace workspace, TypeUsage edmUsage, Object[] values);
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int i);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    private EdmMember GetMember(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private PropertyDescriptorCollection InitializePropertyDescriptors();
    internal static PropertyDescriptorCollection CreatePropertyDescriptorCollection(StructuralType structuralType, Type componentType, bool isReadOnly);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public enum System.Data.Entity.Core.Objects.MergeOption : Enum {
    public int value__;
    public static MergeOption AppendOnly;
    public static MergeOption OverwriteChanges;
    public static MergeOption PreserveChanges;
    public static MergeOption NoTracking;
}
internal class System.Data.Entity.Core.Objects.NextResultGenerator : object {
    private EntityCommand _entityCommand;
    private ReadOnlyCollection`1<EntitySet> _entitySets;
    private ObjectContext _context;
    private EdmType[] _edmTypes;
    private int _resultSetIndex;
    private bool _streaming;
    private MergeOption _mergeOption;
    internal NextResultGenerator(ObjectContext context, EntityCommand entityCommand, EdmType[] edmTypes, ReadOnlyCollection`1<EntitySet> entitySets, MergeOption mergeOption, bool streaming, int resultSetIndex);
    internal ObjectResult`1<TElement> GetNextResult(DbDataReader storeReader);
}
public class System.Data.Entity.Core.Objects.ObjectContext : object {
    private bool _disposed;
    private IEntityAdapter _adapter;
    private EntityConnection _connection;
    private MetadataWorkspace _workspace;
    private ObjectStateManager _objectStateManager;
    private ClrPerspective _perspective;
    private bool _contextOwnsConnection;
    private bool _openedConnection;
    private int _connectionRequestCount;
    private Nullable`1<int> _queryTimeout;
    private Transaction _lastTransaction;
    private bool _disallowSettingDefaultContainerName;
    private EventHandler _onSavingChanges;
    private ObjectMaterializedEventHandler _onObjectMaterialized;
    private ObjectQueryProvider _queryProvider;
    private EntityWrapperFactory _entityWrapperFactory;
    private ObjectQueryExecutionPlanFactory _objectQueryExecutionPlanFactory;
    private Translator _translator;
    private ColumnMapFactory _columnMapFactory;
    private ObjectContextOptions _options;
    private static string UseLegacyPreserveChangesBehavior;
    private ThrowingMonitor _asyncMonitor;
    private DbInterceptionContext _interceptionContext;
    private static ConcurrentDictionary`2<Type, bool> _contextTypesWithViewCacheInitialized;
    private TransactionHandler _transactionHandler;
    [CompilerGeneratedAttribute]
private bool <InMaterialization>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionColumnMap <ColumnMapBuilder>k__BackingField;
    public DbConnection Connection { get; }
    public string DefaultContainerName { get; public set; }
    public MetadataWorkspace MetadataWorkspace { get; }
    public ObjectStateManager ObjectStateManager { get; }
    unknown bool ContextOwnsConnection {internal set; }
    internal ClrPerspective Perspective { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    protected internal IQueryProvider QueryProvider { get; }
    internal bool InMaterialization { get; internal set; }
    internal ThrowingMonitor AsyncMonitor { get; }
    public ObjectContextOptions ContextOptions { get; }
    internal CollectionColumnMap ColumnMapBuilder { get; internal set; }
    internal EntityWrapperFactory EntityWrapperFactory { get; }
    private ObjectContext System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext { get; }
    public TransactionHandler TransactionHandler { get; }
    public DbInterceptionContext InterceptionContext { get; internal set; }
    internal bool OnMaterializedHasHandlers { get; }
    internal bool IsDisposed { get; }
    public ObjectContext(EntityConnection connection);
    public ObjectContext(EntityConnection connection, bool contextOwnsConnection);
    public ObjectContext(string connectionString);
    protected ObjectContext(string connectionString, string defaultContainerName);
    protected ObjectContext(EntityConnection connection, string defaultContainerName);
    internal ObjectContext(EntityConnection connection, bool isConnectionConstructor, ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory, Translator translator, ColumnMapFactory columnMapFactory);
    internal ObjectContext(ObjectQueryExecutionPlanFactory objectQueryExecutionPlanFactory, Translator translator, ColumnMapFactory columnMapFactory, IEntityAdapter adapter);
    private static ObjectContext();
    public virtual DbConnection get_Connection();
    public virtual string get_DefaultContainerName();
    public virtual void set_DefaultContainerName(string value);
    public virtual MetadataWorkspace get_MetadataWorkspace();
    public virtual ObjectStateManager get_ObjectStateManager();
    internal void set_ContextOwnsConnection(bool value);
    internal ClrPerspective get_Perspective();
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    protected internal virtual IQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
internal bool get_InMaterialization();
    [CompilerGeneratedAttribute]
internal void set_InMaterialization(bool value);
    internal ThrowingMonitor get_AsyncMonitor();
    public virtual ObjectContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
internal CollectionColumnMap get_ColumnMapBuilder();
    [CompilerGeneratedAttribute]
internal void set_ColumnMapBuilder(CollectionColumnMap value);
    internal virtual EntityWrapperFactory get_EntityWrapperFactory();
    private sealed virtual override ObjectContext System.Data.Entity.Infrastructure.IObjectContextAdapter.get_ObjectContext();
    public TransactionHandler get_TransactionHandler();
    public DbInterceptionContext get_InterceptionContext();
    internal void set_InterceptionContext(DbInterceptionContext value);
    public void add_SavingChanges(EventHandler value);
    public void remove_SavingChanges(EventHandler value);
    private void OnSavingChanges();
    public void add_ObjectMaterialized(ObjectMaterializedEventHandler value);
    public void remove_ObjectMaterialized(ObjectMaterializedEventHandler value);
    internal void OnObjectMaterialized(object entity);
    internal bool get_OnMaterializedHasHandlers();
    public virtual void AcceptAllChanges();
    private void VerifyRootForAdd(bool doAttach, string entitySetName, IEntityWrapper wrappedEntity, EntityEntry existingEntry, EntitySet& entitySet, Boolean& isNoOperation);
    public virtual void AddObject(string entitySetName, object entity);
    internal void AddSingleObject(EntitySet entitySet, IEntityWrapper wrappedEntity, string argumentName);
    public virtual void LoadProperty(object entity, string navigationProperty);
    public virtual void LoadProperty(object entity, string navigationProperty, MergeOption mergeOption);
    public virtual void LoadProperty(TEntity entity, Expression`1<Func`2<TEntity, object>> selector);
    public virtual void LoadProperty(TEntity entity, Expression`1<Func`2<TEntity, object>> selector, MergeOption mergeOption);
    private IEntityWrapper WrapEntityAndCheckContext(object entity, string refType);
    internal static string ParsePropertySelectorExpression(Expression`1<Func`2<TEntity, object>> selector, Boolean& removedConvert);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Use ApplyCurrentValues instead")]
public virtual void ApplyPropertyChanges(string entitySetName, object changed);
    public virtual TEntity ApplyCurrentValues(string entitySetName, TEntity currentEntity);
    public virtual TEntity ApplyOriginalValues(string entitySetName, TEntity originalEntity);
    public virtual void AttachTo(string entitySetName, object entity);
    public virtual void Attach(IEntityWithKey entity);
    internal void AttachSingleObject(IEntityWrapper wrappedEntity, EntitySet entitySet);
    private void VerifyContextForAddOrAttach(IEntityWrapper wrappedEntity);
    public virtual EntityKey CreateEntityKey(string entitySetName, object entity);
    internal EntitySet GetEntitySetFromName(string entitySetName);
    private void AddRefreshKey(object entityLike, Dictionary`2<EntityKey, EntityEntry> entities, Dictionary`2<EntitySet, List`1<EntityKey>> currentKeys);
    public virtual ObjectSet`1<TEntity> CreateObjectSet();
    public virtual ObjectSet`1<TEntity> CreateObjectSet(string entitySetName);
    private EntitySet GetEntitySetForType(Type entityCLRType, string exceptionParameterName);
    private EntitySet GetEntitySetFromContainer(EntityContainer container, Type entityCLRType, string exceptionParameterName);
    private EntitySet GetEntitySetForNameAndType(string entitySetName, Type entityCLRType, string exceptionParameterName);
    internal virtual void EnsureConnection(bool shouldMonitorTransactions);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<EnsureConnectionAsync>d__107")]
internal virtual Task EnsureConnectionAsync(bool shouldMonitorTransactions, CancellationToken cancellationToken);
    private void EnsureTransactionHandlerRegistered();
    private T EnsureContextIsEnlistedInCurrentTransaction(Transaction currentTransaction, Func`1<T> openConnection, T defaultValue);
    private void ConnectionStateChange(object sender, StateChangeEventArgs e);
    internal virtual void ReleaseConnection();
    public virtual ObjectQuery`1<T> CreateQuery(string queryString, ObjectParameter[] parameters);
    private static EntityConnection CreateEntityConnection(string connectionString);
    private MetadataWorkspace RetrieveMetadataWorkspaceFromConnection();
    public virtual void DeleteObject(object entity);
    internal void DeleteObject(object entity, EntitySet expectedEntitySet);
    public virtual void Detach(object entity);
    internal void Detach(object entity, EntitySet expectedEntitySet);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal bool get_IsDisposed();
    internal EntitySet GetEntitySet(string entitySetName, string entityContainerName);
    private static void GetEntitySetName(string qualifiedName, string parameterName, ObjectContext context, String& entityset, String& container);
    private void ValidateEntitySet(EntitySet entitySet, Type entityType);
    internal TypeUsage GetTypeUsage(Type entityCLRType);
    public virtual object GetObjectByKey(EntityKey key);
    public virtual void Refresh(RefreshMode refreshMode, IEnumerable collection);
    public virtual void Refresh(RefreshMode refreshMode, object entity);
    public Task RefreshAsync(RefreshMode refreshMode, IEnumerable collection);
    public virtual Task RefreshAsync(RefreshMode refreshMode, IEnumerable collection, CancellationToken cancellationToken);
    public Task RefreshAsync(RefreshMode refreshMode, object entity);
    public virtual Task RefreshAsync(RefreshMode refreshMode, object entity, CancellationToken cancellationToken);
    private void RefreshCheck(Dictionary`2<EntityKey, EntityEntry> entities, EntityKey key);
    private void RefreshEntities(RefreshMode refreshMode, IEnumerable collection);
    private int BatchRefreshEntitiesByKey(RefreshMode refreshMode, Dictionary`2<EntityKey, EntityEntry> trackedEntities, EntitySet targetSet, List`1<EntityKey> targetKeys, int startFrom);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<RefreshEntitiesAsync>d__138")]
private Task RefreshEntitiesAsync(RefreshMode refreshMode, IEnumerable collection, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<BatchRefreshEntitiesByKeyAsync>d__139")]
private Task`1<int> BatchRefreshEntitiesByKeyAsync(RefreshMode refreshMode, Dictionary`2<EntityKey, EntityEntry> trackedEntities, EntitySet targetSet, List`1<EntityKey> targetKeys, int startFrom, CancellationToken cancellationToken);
    internal virtual Tuple`2<ObjectQueryExecutionPlan, int> PrepareRefreshQuery(RefreshMode refreshMode, EntitySet targetSet, List`1<EntityKey> targetKeys, int startFrom);
    private void ProcessRefreshedEntities(Dictionary`2<EntityKey, EntityEntry> trackedEntities, ObjectResult`1<object> results);
    private static int RefreshEntitiesSize(IEnumerable collection);
    public virtual int SaveChanges();
    public virtual Task`1<int> SaveChangesAsync();
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Use SaveChanges(SaveOptions options) instead.")]
public virtual int SaveChanges(bool acceptChangesDuringSave);
    public virtual int SaveChanges(SaveOptions options);
    internal int SaveChangesInternal(SaveOptions options, bool executeInExistingTransaction);
    public virtual Task`1<int> SaveChangesAsync(SaveOptions options);
    public virtual Task`1<int> SaveChangesAsync(SaveOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<SaveChangesInternalAsync>d__151")]
internal Task`1<int> SaveChangesInternalAsync(SaveOptions options, bool executeInExistingTransaction, CancellationToken cancellationToken);
    private void PrepareToSaveChanges(SaveOptions options);
    private int SaveChangesToStore(SaveOptions options, IDbExecutionStrategy executionStrategy, bool startLocalTransaction);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<SaveChangesToStoreAsync>d__154")]
private Task`1<int> SaveChangesToStoreAsync(SaveOptions options, IDbExecutionStrategy executionStrategy, bool startLocalTransaction, CancellationToken cancellationToken);
    internal virtual T ExecuteInTransaction(Func`1<T> func, IDbExecutionStrategy executionStrategy, bool startLocalTransaction, bool releaseConnectionOnSuccess);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<ExecuteInTransactionAsync>d__156`1")]
internal virtual Task`1<T> ExecuteInTransactionAsync(Func`1<Task`1<T>> func, IDbExecutionStrategy executionStrategy, bool startLocalTransaction, bool releaseConnectionOnSuccess, CancellationToken cancellationToken);
    public virtual void DetectChanges();
    public virtual bool TryGetObjectByKey(EntityKey key, Object& value);
    public ObjectResult`1<TElement> ExecuteFunction(string functionName, ObjectParameter[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteFunction(string functionName, MergeOption mergeOption, ObjectParameter[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteFunction(string functionName, ExecutionOptions executionOptions, ObjectParameter[] parameters);
    public virtual int ExecuteFunction(string functionName, ObjectParameter[] parameters);
    private static int ExecuteFunctionCommand(EntityCommand entityCommand);
    private EntityCommand CreateEntityCommandForFunctionImport(string functionName, EdmFunction& functionImport, ObjectParameter[] parameters);
    private ObjectResult`1<TElement> CreateFunctionObjectResult(EntityCommand entityCommand, ReadOnlyCollection`1<EntitySet> entitySets, EdmType[] edmTypes, ExecutionOptions executionOptions);
    internal ObjectResult`1<TElement> MaterializedDataRecord(EntityCommand entityCommand, DbDataReader storeReader, int resultSetIndex, ReadOnlyCollection`1<EntitySet> entitySets, EdmType[] edmTypes, ShaperFactory`1<TElement> shaperFactory, MergeOption mergeOption, bool streaming);
    private void PopulateFunctionImportEntityCommandParameters(ObjectParameter[] parameters, EdmFunction functionImport, EntityCommand command);
    private static FunctionParameter FindParameterMetadata(EdmFunction functionImport, ObjectParameter[] parameters, int ordinal);
    public virtual void CreateProxyTypes(IEnumerable`1<Type> types);
    public static IEnumerable`1<Type> GetKnownProxyTypes();
    public static Type GetObjectType(Type type);
    public virtual T CreateObject();
    public virtual int ExecuteStoreCommand(string commandText, Object[] parameters);
    public virtual int ExecuteStoreCommand(TransactionalBehavior transactionalBehavior, string commandText, Object[] parameters);
    private int ExecuteStoreCommandInternal(string commandText, Object[] parameters);
    public Task`1<int> ExecuteStoreCommandAsync(string commandText, Object[] parameters);
    public Task`1<int> ExecuteStoreCommandAsync(TransactionalBehavior transactionalBehavior, string commandText, Object[] parameters);
    public virtual Task`1<int> ExecuteStoreCommandAsync(string commandText, CancellationToken cancellationToken, Object[] parameters);
    public virtual Task`1<int> ExecuteStoreCommandAsync(TransactionalBehavior transactionalBehavior, string commandText, CancellationToken cancellationToken, Object[] parameters);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<ExecuteStoreCommandInternalAsync>d__180")]
private Task`1<int> ExecuteStoreCommandInternalAsync(TransactionalBehavior transactionalBehavior, string commandText, CancellationToken cancellationToken, Object[] parameters);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<ExecuteStoreCommandInternalAsync>d__181")]
private Task`1<int> ExecuteStoreCommandInternalAsync(string commandText, CancellationToken cancellationToken, Object[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteStoreQuery(string commandText, Object[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteStoreQuery(string commandText, ExecutionOptions executionOptions, Object[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteStoreQuery(string commandText, string entitySetName, MergeOption mergeOption, Object[] parameters);
    public virtual ObjectResult`1<TElement> ExecuteStoreQuery(string commandText, string entitySetName, ExecutionOptions executionOptions, Object[] parameters);
    private ObjectResult`1<TElement> ExecuteStoreQueryReliably(string commandText, string entitySetName, ExecutionOptions executionOptions, Object[] parameters);
    private ObjectResult`1<TElement> ExecuteStoreQueryInternal(string commandText, string entitySetName, ExecutionOptions executionOptions, Object[] parameters);
    public Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, Object[] parameters);
    public virtual Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, CancellationToken cancellationToken, Object[] parameters);
    public virtual Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, ExecutionOptions executionOptions, Object[] parameters);
    public virtual Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, ExecutionOptions executionOptions, CancellationToken cancellationToken, Object[] parameters);
    public Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, string entitySetName, ExecutionOptions executionOptions, Object[] parameters);
    public virtual Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryAsync(string commandText, string entitySetName, ExecutionOptions executionOptions, CancellationToken cancellationToken, Object[] parameters);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<ExecuteStoreQueryReliablyAsync>d__194`1")]
private Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryReliablyAsync(string commandText, string entitySetName, ExecutionOptions executionOptions, CancellationToken cancellationToken, IDbExecutionStrategy executionStrategy, Object[] parameters);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectContext/<ExecuteStoreQueryInternalAsync>d__195`1")]
private Task`1<ObjectResult`1<TElement>> ExecuteStoreQueryInternalAsync(string commandText, string entitySetName, ExecutionOptions executionOptions, CancellationToken cancellationToken, Object[] parameters);
    public virtual ObjectResult`1<TElement> Translate(DbDataReader reader);
    public virtual ObjectResult`1<TEntity> Translate(DbDataReader reader, string entitySetName, MergeOption mergeOption);
    private ShaperFactory`1<TElement> InternalTranslate(DbDataReader reader, string entitySetName, MergeOption mergeOption, bool streaming, EntitySet& entitySet, TypeUsage& edmType);
    private ObjectResult`1<TElement> ShapeResult(DbDataReader reader, MergeOption mergeOption, bool readerOwned, bool streaming, ShaperFactory`1<TElement> shaperFactory, EntitySet entitySet, TypeUsage edmType, DbCommand command);
    private DbCommand CreateStoreCommand(string commandText, Object[] parameters);
    public virtual void CreateDatabase();
    public virtual void DeleteDatabase();
    public virtual bool DatabaseExists();
    private StoreItemCollection GetStoreItemCollection();
    public virtual string CreateDatabaseScript();
    internal void InitializeMappingViewCacheFactory(DbContext owner);
    [CompilerGeneratedAttribute]
private bool <EnsureConnection>b__106_0();
    [CompilerGeneratedAttribute]
private int <SaveChangesToStore>b__153_0();
}
public class System.Data.Entity.Core.Objects.ObjectContextOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnsureTransactionsForFunctionsAndCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LazyLoadingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProxyCreationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyPreserveChangesBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConsistentNullReferenceBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCSharpNullComparisonBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableFilterOverProjectionSimplificationForCustomFunctions>k__BackingField;
    public bool EnsureTransactionsForFunctionsAndCommands { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseLegacyPreserveChangesBehavior { get; public set; }
    public bool UseConsistentNullReferenceBehavior { get; public set; }
    public bool UseCSharpNullComparisonBehavior { get; public set; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnsureTransactionsForFunctionsAndCommands();
    [CompilerGeneratedAttribute]
public void set_EnsureTransactionsForFunctionsAndCommands(bool value);
    [CompilerGeneratedAttribute]
public bool get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public void set_LazyLoadingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProxyCreationEnabled();
    [CompilerGeneratedAttribute]
public void set_ProxyCreationEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLegacyPreserveChangesBehavior();
    [CompilerGeneratedAttribute]
public void set_UseLegacyPreserveChangesBehavior(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseConsistentNullReferenceBehavior();
    [CompilerGeneratedAttribute]
public void set_UseConsistentNullReferenceBehavior(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCSharpNullComparisonBehavior();
    [CompilerGeneratedAttribute]
public void set_UseCSharpNullComparisonBehavior(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    [CompilerGeneratedAttribute]
public void set_DisableFilterOverProjectionSimplificationForCustomFunctions(bool value);
}
public class System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs : EventArgs {
    private object _entity;
    public object Entity { get; }
    public ObjectMaterializedEventArgs(object entity);
    public object get_Entity();
}
public class System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler : MulticastDelegate {
    public ObjectMaterializedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectMaterializedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectMaterializedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.Entity.Core.Objects.ObjectParameter : object {
    private string _name;
    private Type _type;
    private Type _mappableType;
    private TypeUsage _effectiveType;
    private object _value;
    public string Name { get; }
    public Type ParameterType { get; }
    public object Value { get; public set; }
    internal TypeUsage TypeUsage { get; internal set; }
    internal Type MappableType { get; }
    public ObjectParameter(string name, Type type);
    public ObjectParameter(string name, object value);
    private ObjectParameter(ObjectParameter template);
    internal static bool ValidateParameterName(string name);
    public string get_Name();
    public Type get_ParameterType();
    public object get_Value();
    public void set_Value(object value);
    internal TypeUsage get_TypeUsage();
    internal void set_TypeUsage(TypeUsage value);
    internal Type get_MappableType();
    internal ObjectParameter ShallowCopy();
    internal bool ValidateParameterType(ClrPerspective perspective);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Core.Objects.ObjectParameterCollection : object {
    private bool _locked;
    private List`1<ObjectParameter> _parameters;
    private ClrPerspective _perspective;
    private string _cacheKey;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Data.Entity.Core.Objects.ObjectParameter>.IsReadOnly { get; }
    public ObjectParameter Item { get; }
    internal ObjectParameterCollection(ClrPerspective perspective);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Data.Entity.Core.Objects.ObjectParameter>.get_IsReadOnly();
    public ObjectParameter get_Item(string name);
    public sealed virtual void Add(ObjectParameter item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ObjectParameter item);
    public bool Contains(string name);
    public sealed virtual void CopyTo(ObjectParameter[] array, int arrayIndex);
    public sealed virtual bool Remove(ObjectParameter item);
    public virtual IEnumerator`1<ObjectParameter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal string GetCacheKey();
    internal void SetReadOnly(bool isReadOnly);
    internal static ObjectParameterCollection DeepCopy(ObjectParameterCollection copyParams);
    private int IndexOf(string name);
    private void CheckUnlocked();
}
public abstract class System.Data.Entity.Core.Objects.ObjectQuery : object {
    private ObjectQueryState _state;
    private TypeUsage _resultType;
    private ObjectQueryProvider _provider;
    internal ObjectQueryState QueryState { get; }
    internal ObjectQueryProvider ObjectQueryProvider { get; }
    internal IDbExecutionStrategy ExecutionStrategy { get; internal set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public string CommandText { get; }
    public ObjectContext Context { get; }
    public MergeOption MergeOption { get; public set; }
    public bool Streaming { get; public set; }
    public ObjectParameterCollection Parameters { get; }
    public bool EnablePlanCaching { get; public set; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    internal ObjectQuery(ObjectQueryState queryState);
    internal ObjectQueryState get_QueryState();
    internal virtual ObjectQueryProvider get_ObjectQueryProvider();
    internal IDbExecutionStrategy get_ExecutionStrategy();
    internal void set_ExecutionStrategy(IDbExecutionStrategy value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public string get_CommandText();
    public ObjectContext get_Context();
    public MergeOption get_MergeOption();
    public void set_MergeOption(MergeOption value);
    public bool get_Streaming();
    public void set_Streaming(bool value);
    public ObjectParameterCollection get_Parameters();
    public bool get_EnablePlanCaching();
    public void set_EnablePlanCaching(bool value);
    [BrowsableAttribute("False")]
public string ToTraceString();
    public TypeUsage GetResultType();
    public ObjectResult Execute(MergeOption mergeOption);
    public Task`1<ObjectResult> ExecuteAsync(MergeOption mergeOption);
    public Task`1<ObjectResult> ExecuteAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    internal abstract virtual Expression GetExpression();
    internal abstract virtual IEnumerator GetEnumeratorInternal();
    internal abstract virtual IDbAsyncEnumerator GetAsyncEnumeratorInternal();
    internal abstract virtual Task`1<ObjectResult> ExecuteInternalAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    internal abstract virtual IList GetIListSourceListInternal();
    internal abstract virtual ObjectResult ExecuteInternal(MergeOption mergeOption);
}
public class System.Data.Entity.Core.Objects.ObjectQuery`1 : ObjectQuery {
    internal static MethodInfo MergeAsMethod;
    internal static MethodInfo IncludeSpanMethod;
    private static string DefaultName;
    private string _name;
    public string Name { get; public set; }
    public ObjectQuery`1(string commandText, ObjectContext context);
    public ObjectQuery`1(string commandText, ObjectContext context, MergeOption mergeOption);
    internal ObjectQuery`1(EntitySetBase entitySet, ObjectContext context, MergeOption mergeOption);
    internal ObjectQuery`1(ObjectQueryState queryState);
    private static ObjectQuery`1();
    private static bool IsLinqQuery(ObjectQuery query);
    private static string BuildScanEntitySetEsql(EntitySetBase entitySet);
    public string get_Name();
    public void set_Name(string value);
    public ObjectResult`1<T> Execute(MergeOption mergeOption);
    public Task`1<ObjectResult`1<T>> ExecuteAsync(MergeOption mergeOption);
    public Task`1<ObjectResult`1<T>> ExecuteAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    public ObjectQuery`1<T> Include(string path);
    public ObjectQuery`1<T> Distinct();
    public ObjectQuery`1<T> Except(ObjectQuery`1<T> query);
    public ObjectQuery`1<DbDataRecord> GroupBy(string keys, string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Intersect(ObjectQuery`1<T> query);
    public ObjectQuery`1<TResultType> OfType();
    public ObjectQuery`1<T> OrderBy(string keys, ObjectParameter[] parameters);
    public ObjectQuery`1<DbDataRecord> Select(string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<TResultType> SelectValue(string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Skip(string keys, string count, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Top(string count, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Union(ObjectQuery`1<T> query);
    public ObjectQuery`1<T> UnionAll(ObjectQuery`1<T> query);
    public ObjectQuery`1<T> Where(string predicate, ObjectParameter[] parameters);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator`1<T> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator();
    internal virtual IEnumerator GetEnumeratorInternal();
    internal virtual IDbAsyncEnumerator GetAsyncEnumeratorInternal();
    internal virtual IList GetIListSourceListInternal();
    internal virtual ObjectResult ExecuteInternal(MergeOption mergeOption);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectQuery`1/<ExecuteInternalAsync>d__37")]
internal virtual Task`1<ObjectResult> ExecuteInternalAsync(MergeOption mergeOption, CancellationToken cancellationToken);
    internal virtual Expression GetExpression();
    internal ObjectQuery`1<T> MergeAs(MergeOption mergeOption);
    internal ObjectQuery`1<T> IncludeSpan(Span span);
    private ObjectResult`1<T> GetResults(Nullable`1<MergeOption> forMergeOption);
    private Task`1<ObjectResult`1<T>> GetResultsAsync(Nullable`1<MergeOption> forMergeOption, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectQuery`1/<GetResultsAsync>d__43")]
private Task`1<ObjectResult`1<T>> GetResultsAsync(Nullable`1<MergeOption> forMergeOption, IDbExecutionStrategy executionStrategy, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private ObjectResult`1<T> <System.Collections.Generic.IEnumerable<T>.GetEnumerator>b__31_0();
    [CompilerGeneratedAttribute]
private Task`1<ObjectResult`1<T>> <System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator>b__32_0(CancellationToken cancellationToken);
}
public abstract class System.Data.Entity.Core.Objects.ObjectResult : object {
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public Type ElementType { get; }
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public abstract virtual Type get_ElementType();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
    public virtual ObjectResult`1<TElement> GetNextResult();
    internal abstract virtual IDbAsyncEnumerator GetAsyncEnumeratorInternal();
    internal abstract virtual IEnumerator GetEnumeratorInternal();
    internal abstract virtual IList GetIListSourceListInternal();
    internal abstract virtual ObjectResult`1<TElement> GetNextResultInternal();
}
public class System.Data.Entity.Core.Objects.ObjectResult`1 : ObjectResult {
    private Shaper`1<T> _shaper;
    private DbDataReader _reader;
    private DbCommand _command;
    private EntitySet _singleEntitySet;
    private TypeUsage _resultItemType;
    private bool _readerOwned;
    private bool _shouldReleaseConnection;
    private IBindingList _cachedBindingList;
    private NextResultGenerator _nextResultGenerator;
    private Action`2<object, EventArgs> _onReaderDispose;
    public Type ElementType { get; }
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType);
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType, bool readerOwned, bool shouldReleaseConnection, DbCommand command);
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType, bool readerOwned, bool shouldReleaseConnection, NextResultGenerator nextResultGenerator, Action`2<object, EventArgs> onReaderDispose, DbCommand command);
    private void EnsureCanEnumerateResults();
    public virtual IEnumerator`1<T> GetEnumerator();
    internal virtual IDbEnumerator`1<T> GetDbEnumerator();
    private sealed virtual override IDbAsyncEnumerator`1<T> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator();
    protected virtual void Dispose(bool disposing);
    internal virtual IDbAsyncEnumerator GetAsyncEnumeratorInternal();
    internal virtual IEnumerator GetEnumeratorInternal();
    internal virtual IList GetIListSourceListInternal();
    internal virtual ObjectResult`1<TElement> GetNextResultInternal();
    public virtual Type get_ElementType();
}
public class System.Data.Entity.Core.Objects.ObjectSet`1 : ObjectQuery`1<TEntity> {
    private EntitySet _entitySet;
    public EntitySet EntitySet { get; }
    private string FullyQualifiedEntitySetName { get; }
    internal ObjectSet`1(EntitySet entitySet, ObjectContext context);
    public EntitySet get_EntitySet();
    public sealed virtual void AddObject(TEntity entity);
    public sealed virtual void Attach(TEntity entity);
    public sealed virtual void DeleteObject(TEntity entity);
    public sealed virtual void Detach(TEntity entity);
    public TEntity ApplyCurrentValues(TEntity currentEntity);
    public TEntity ApplyOriginalValues(TEntity originalEntity);
    public TEntity CreateObject();
    public T CreateObject();
    private string get_FullyQualifiedEntitySetName();
}
public abstract class System.Data.Entity.Core.Objects.ObjectStateEntry : object {
    internal ObjectStateManager _cache;
    internal EntitySetBase _entitySet;
    internal EntityState _state;
    public ObjectStateManager ObjectStateManager { get; }
    public EntitySetBase EntitySet { get; }
    public EntityState State { get; internal set; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    public bool IsRelationship { get; }
    internal BitArray ModifiedProperties { get; }
    private BitArray System.Data.Entity.Core.IEntityStateEntry.ModifiedProperties { get; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    private IEntityStateManager System.Data.Entity.Core.IEntityStateEntry.StateManager { get; }
    private bool System.Data.Entity.Core.IEntityStateEntry.IsKeyEntry { get; }
    private EntityState System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState { get; }
    internal bool IsKeyEntry { get; }
    internal ObjectStateEntry(ObjectStateManager cache, EntitySet entitySet, EntityState state);
    public ObjectStateManager get_ObjectStateManager();
    public sealed virtual EntitySetBase get_EntitySet();
    public sealed virtual EntityState get_State();
    internal void set_State(EntityState value);
    public abstract virtual object get_Entity();
    public abstract virtual EntityKey get_EntityKey();
    internal abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual bool get_IsRelationship();
    internal abstract virtual BitArray get_ModifiedProperties();
    private sealed virtual override BitArray System.Data.Entity.Core.IEntityStateEntry.get_ModifiedProperties();
    public abstract virtual DbDataRecord get_OriginalValues();
    public abstract virtual OriginalValueRecord GetUpdatableOriginalValues();
    public abstract virtual CurrentValueRecord get_CurrentValues();
    public abstract virtual void AcceptChanges();
    public abstract virtual void Delete();
    public abstract virtual IEnumerable`1<string> GetModifiedProperties();
    public abstract virtual void SetModified();
    public abstract virtual void SetModifiedProperty(string propertyName);
    public abstract virtual void RejectPropertyChanges(string propertyName);
    public abstract virtual bool IsPropertyChanged(string propertyName);
    public abstract virtual RelationshipManager get_RelationshipManager();
    public abstract virtual void ChangeState(EntityState state);
    public abstract virtual void ApplyCurrentValues(object currentEntity);
    public abstract virtual void ApplyOriginalValues(object originalEntity);
    private sealed virtual override IEntityStateManager System.Data.Entity.Core.IEntityStateEntry.get_StateManager();
    private sealed virtual override bool System.Data.Entity.Core.IEntityStateEntry.get_IsKeyEntry();
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(string entityMemberName);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(string entityMemberName);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    private sealed virtual override void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    private sealed virtual override EntityState System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.get_EntityState();
    internal abstract virtual bool get_IsKeyEntry();
    internal abstract virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    internal abstract virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal abstract virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal abstract virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal abstract virtual void RevertDelete();
    internal abstract virtual void SetModifiedAll();
    internal abstract virtual void EntityMemberChanging(string entityMemberName);
    internal abstract virtual void EntityMemberChanged(string entityMemberName);
    internal abstract virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal abstract virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal abstract virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void Reset();
    internal void ValidateState();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Objects.ObjectStateEntryDbDataRecord : DbDataRecord {
    private StateManagerTypeMetadata _metadata;
    private ObjectStateEntry _cacheEntry;
    private object _userObject;
    private DataRecordInfo _recordInfo;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal ObjectStateEntryDbDataRecord(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal ObjectStateEntryDbDataRecord(RelationshipEntry cacheEntry);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int i);
}
internal class System.Data.Entity.Core.Objects.ObjectStateEntryDbUpdatableDataRecord : CurrentValueRecord {
    internal ObjectStateEntryDbUpdatableDataRecord(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal ObjectStateEntryDbUpdatableDataRecord(RelationshipEntry cacheEntry);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
}
internal class System.Data.Entity.Core.Objects.ObjectStateEntryOriginalDbUpdatableDataRecord_Internal : OriginalValueRecord {
    internal ObjectStateEntryOriginalDbUpdatableDataRecord_Internal(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
}
internal class System.Data.Entity.Core.Objects.ObjectStateEntryOriginalDbUpdatableDataRecord_Public : ObjectStateEntryOriginalDbUpdatableDataRecord_Internal {
    private int _parentEntityPropertyIndex;
    internal ObjectStateEntryOriginalDbUpdatableDataRecord_Public(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject, int parentEntityPropertyIndex);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
    private int GetPropertyIndex(int ordinal);
}
public class System.Data.Entity.Core.Objects.ObjectStateManager : object {
    private static int InitialListSize;
    private Dictionary`2<EntityKey, EntityEntry> _addedEntityStore;
    private Dictionary`2<EntityKey, EntityEntry> _modifiedEntityStore;
    private Dictionary`2<EntityKey, EntityEntry> _deletedEntityStore;
    private Dictionary`2<EntityKey, EntityEntry> _unchangedEntityStore;
    private Dictionary`2<object, EntityEntry> _keylessEntityStore;
    private Dictionary`2<RelationshipWrapper, RelationshipEntry> _addedRelationshipStore;
    private Dictionary`2<RelationshipWrapper, RelationshipEntry> _deletedRelationshipStore;
    private Dictionary`2<RelationshipWrapper, RelationshipEntry> _unchangedRelationshipStore;
    private Dictionary`2<EdmType, StateManagerTypeMetadata> _metadataStore;
    private Dictionary`2<EntitySetQualifiedType, StateManagerTypeMetadata> _metadataMapping;
    private MetadataWorkspace _metadataWorkspace;
    private CollectionChangeEventHandler onObjectStateManagerChangedDelegate;
    private CollectionChangeEventHandler onEntityDeletedDelegate;
    private bool _inRelationshipFixup;
    private bool _isDisposed;
    private ComplexTypeMaterializer _complexTypeMaterializer;
    private Dictionary`2<EntityKey, HashSet`1<Tuple`2<EntityReference, EntityEntry>>> _danglingForeignKeys;
    private HashSet`1<EntityEntry> _entriesWithConceptualNulls;
    private EntityWrapperFactory _entityWrapperFactory;
    private bool _detectChangesNeeded;
    [CompilerGeneratedAttribute]
private object <ChangingObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangingEntityMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangingMember>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <ChangingState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveOriginalValues>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ChangingOldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EntityInvokingFKSetter>k__BackingField;
    internal object ChangingObject { get; internal set; }
    internal string ChangingEntityMember { get; internal set; }
    internal string ChangingMember { get; internal set; }
    internal EntityState ChangingState { get; internal set; }
    internal bool SaveOriginalValues { get; internal set; }
    internal object ChangingOldValue { get; internal set; }
    internal bool InRelationshipFixup { get; }
    internal ComplexTypeMaterializer ComplexTypeMaterializer { get; }
    internal TransactionManager TransactionManager { get; private set; }
    internal EntityWrapperFactory EntityWrapperFactory { get; }
    public MetadataWorkspace MetadataWorkspace { get; }
    internal bool IsDisposed { get; }
    internal object EntityInvokingFKSetter { get; internal set; }
    public ObjectStateManager(MetadataWorkspace metadataWorkspace);
    [CompilerGeneratedAttribute]
internal virtual object get_ChangingObject();
    [CompilerGeneratedAttribute]
internal virtual void set_ChangingObject(object value);
    [CompilerGeneratedAttribute]
internal virtual string get_ChangingEntityMember();
    [CompilerGeneratedAttribute]
internal virtual void set_ChangingEntityMember(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ChangingMember();
    [CompilerGeneratedAttribute]
internal virtual void set_ChangingMember(string value);
    [CompilerGeneratedAttribute]
internal virtual EntityState get_ChangingState();
    [CompilerGeneratedAttribute]
internal virtual void set_ChangingState(EntityState value);
    [CompilerGeneratedAttribute]
internal virtual bool get_SaveOriginalValues();
    [CompilerGeneratedAttribute]
internal virtual void set_SaveOriginalValues(bool value);
    [CompilerGeneratedAttribute]
internal virtual object get_ChangingOldValue();
    [CompilerGeneratedAttribute]
internal virtual void set_ChangingOldValue(object value);
    internal virtual bool get_InRelationshipFixup();
    internal virtual ComplexTypeMaterializer get_ComplexTypeMaterializer();
    [CompilerGeneratedAttribute]
internal virtual TransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
private void set_TransactionManager(TransactionManager value);
    internal virtual EntityWrapperFactory get_EntityWrapperFactory();
    public virtual MetadataWorkspace get_MetadataWorkspace();
    public void add_ObjectStateManagerChanged(CollectionChangeEventHandler value);
    public void remove_ObjectStateManagerChanged(CollectionChangeEventHandler value);
    internal void add_EntityDeleted(CollectionChangeEventHandler value);
    internal void remove_EntityDeleted(CollectionChangeEventHandler value);
    internal virtual void OnObjectStateManagerChanged(CollectionChangeAction action, object entity);
    private void OnEntityDeleted(CollectionChangeAction action, object entity);
    internal virtual EntityEntry AddKeyEntry(EntityKey entityKey, EntitySet entitySet);
    internal EntityEntry GetOrAddKeyEntry(EntityKey entityKey, EntitySet entitySet);
    private EntityEntry InternalAddEntityEntry(EntityKey entityKey, EntitySet entitySet);
    private void ValidateProxyType(IEntityWrapper wrappedEntity);
    internal virtual EntityEntry AddEntry(IEntityWrapper wrappedObject, EntityKey passedKey, EntitySet entitySet, string argumentName, bool isAdded);
    internal virtual void FixupReferencesByForeignKeys(EntityEntry newEntry, bool replaceAddedRefs);
    internal virtual void AddEntryContainingForeignKeyToIndex(EntityReference relatedEnd, EntityKey foreignKey, EntityEntry entry);
    [ConditionalAttribute("DEBUG")]
internal virtual void AssertEntryDoesNotExistInForeignKeyIndex(EntityEntry entry);
    [ConditionalAttribute("DEBUG")]
internal virtual void AssertAllForeignKeyIndexEntriesAreValid();
    internal virtual void RemoveEntryFromForeignKeyIndex(EntityReference relatedEnd, EntityKey foreignKey, EntityEntry entry);
    internal virtual void RemoveForeignKeyFromIndex(EntityKey foreignKey);
    internal virtual IEnumerable`1<EntityEntry> GetNonFixedupEntriesContainingForeignKey(EntityKey foreignKey);
    internal virtual void RememberEntryWithConceptualNull(EntityEntry entry);
    internal virtual bool SomeEntryWithConceptualNullExists();
    internal virtual bool EntryHasConceptualNull(EntityEntry entry);
    internal virtual void ForgetEntryWithConceptualNull(EntityEntry entry, bool resetAllKeys);
    internal virtual void PromoteKeyEntryInitialization(ObjectContext contextToAttach, EntityEntry keyEntry, IEntityWrapper wrappedEntity, bool replacingEntry);
    internal virtual void PromoteKeyEntry(EntityEntry keyEntry, IEntityWrapper wrappedEntity, bool replacingEntry, bool setIsLoaded, bool keyEntryInitialized);
    internal virtual void TrackPromotedRelationship(RelatedEnd relatedEnd, IEntityWrapper wrappedEntity);
    internal virtual void DegradePromotedRelationships();
    internal static void AddEntityToCollectionOrReference(MergeOption mergeOption, IEntityWrapper wrappedSource, AssociationEndMember sourceMember, IEntityWrapper wrappedTarget, AssociationEndMember targetMember, bool setIsLoaded, bool relationshipAlreadyExists, bool inKeyEntryPromotion);
    private static void UpdateRelatedEnd(RelatedEnd relatedEnd, IEntityWrapper wrappedRelatedEntity, bool setIsLoaded, MergeOption mergeOption);
    internal virtual int UpdateRelationships(ObjectContext context, MergeOption mergeOption, AssociationSet associationSet, AssociationEndMember sourceMember, IEntityWrapper wrappedSource, AssociationEndMember targetMember, IList targets, bool setIsLoaded);
    internal static ILookup`2<EntityKey, RelationshipEntry> GetRelationshipLookup(ObjectStateManager manager, AssociationSet associationSet, AssociationEndMember sourceMember, EntityKey sourceKey);
    private static void EnsureCollectionNotNull(AssociationEndMember sourceMember, IEntityWrapper wrappedSource, AssociationEndMember targetMember);
    internal virtual void RemoveRelationships(MergeOption mergeOption, AssociationSet associationSet, EntityKey sourceKey, AssociationEndMember sourceMember);
    internal static bool TryUpdateExistingRelationships(ObjectContext context, MergeOption mergeOption, AssociationSet associationSet, AssociationEndMember sourceMember, ILookup`2<EntityKey, RelationshipEntry> relationshipLookup, IEntityWrapper wrappedSource, AssociationEndMember targetMember, EntityKey targetKey, bool setIsLoaded, EntityState& newEntryState);
    internal static void RemoveRelatedEndsAndDetachRelationship(RelationshipEntry relationshipToRemove, bool setIsLoaded);
    private static void UnloadReferenceRelatedEnds(RelationshipEntry relationshipEntry);
    private static void UnloadReferenceRelatedEnds(ObjectStateManager cache, RelationshipEntry relationshipEntry, EntityKey sourceEntityKey, string targetRoleName);
    internal virtual EntityEntry AttachEntry(EntityKey entityKey, IEntityWrapper wrappedObject, EntitySet entitySet);
    private void CheckKeyMatchesEntity(IEntityWrapper wrappedEntity, EntityKey entityKey, EntitySet entitySetForType, bool forAttach);
    internal virtual RelationshipEntry AddNewRelation(RelationshipWrapper wrapper, EntityState desiredState);
    internal virtual RelationshipEntry AddRelation(RelationshipWrapper wrapper, EntityState desiredState);
    private void AddRelationshipToLookup(RelationshipEntry relationship);
    private void AddRelationshipEndToLookup(EntityKey key, RelationshipEntry relationship);
    private void DeleteRelationshipFromLookup(RelationshipEntry relationship);
    private void DeleteRelationshipEndFromLookup(EntityKey key, RelationshipEntry relationship);
    internal virtual RelationshipEntry FindRelationship(RelationshipSet relationshipSet, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal virtual RelationshipEntry FindRelationship(RelationshipWrapper relationshipWrapper);
    internal virtual RelationshipEntry DeleteRelationship(RelationshipSet relationshipSet, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal virtual void DeleteKeyEntry(EntityEntry keyEntry);
    internal virtual RelationshipEntry[] CopyOfRelationshipsByKey(EntityKey key);
    internal virtual RelationshipEndEnumerable FindRelationshipsByKey(EntityKey key);
    private sealed virtual override IEnumerable`1<IEntityStateEntry> System.Data.Entity.Core.IEntityStateManager.FindRelationshipsByKey(EntityKey key);
    [ConditionalAttribute("DEBUG")]
private void ValidateKeylessEntityStore();
    private bool TryGetEntryFromKeylessStore(object entity, EntityEntry& entryRef);
    public virtual IEnumerable`1<ObjectStateEntry> GetObjectStateEntries(EntityState state);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.ObjectStateManager/<System-Data-Entity-Core-IEntityStateManager-GetEntityStateEntries>d__115")]
private sealed virtual override IEnumerable`1<IEntityStateEntry> System.Data.Entity.Core.IEntityStateManager.GetEntityStateEntries(EntityState state);
    internal virtual bool HasChanges();
    internal virtual int GetObjectStateEntriesCount(EntityState state);
    private int GetMaxEntityEntriesForDetectChanges();
    internal virtual IEnumerable`1<ObjectStateEntry> GetObjectStateEntriesInternal(EntityState state);
    private IList`1<EntityEntry> GetEntityEntriesForDetectChanges();
    private void GetEntityEntriesForDetectChanges(Dictionary`2<EntityKey, EntityEntry> entityStore, List`1& entries);
    internal virtual void FixupKey(EntityEntry entry);
    internal virtual void ReplaceKeyWithTemporaryKey(EntityEntry entry);
    private void ResetEntityKey(EntityEntry entry, EntityKey value);
    public virtual ObjectStateEntry ChangeObjectState(object entity, EntityState entityState);
    public virtual ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string navigationProperty, EntityState relationshipState);
    public virtual ObjectStateEntry ChangeRelationshipState(TEntity sourceEntity, object targetEntity, Expression`1<Func`2<TEntity, object>> navigationPropertySelector, EntityState relationshipState);
    public virtual ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, EntityState relationshipState);
    private ObjectStateEntry ChangeRelationshipState(EntityEntry sourceEntry, EntityEntry targetEntry, RelatedEnd relatedEnd, EntityState relationshipState);
    private void VerifyParametersForChangeRelationshipState(object sourceEntity, object targetEntity, EntityEntry& sourceEntry, EntityEntry& targetEntry);
    private static void VerifyInitialStateForChangeRelationshipState(EntityEntry sourceEntry, EntityEntry targetEntry, RelatedEnd relatedEnd, EntityState relationshipState);
    private RelationshipEntry CreateRelationship(EntityEntry targetEntry, RelatedEnd relatedEnd, RelationshipWrapper relationshipWrapper, EntityState requestedState);
    private EntityEntry GetEntityEntryByObjectOrEntityKey(object o);
    private sealed virtual override IEntityStateEntry System.Data.Entity.Core.IEntityStateManager.GetEntityStateEntry(EntityKey key);
    public virtual ObjectStateEntry GetObjectStateEntry(EntityKey key);
    internal virtual EntityEntry GetEntityEntry(EntityKey key);
    public virtual ObjectStateEntry GetObjectStateEntry(object entity);
    internal virtual EntityEntry GetEntityEntry(object entity);
    public virtual bool TryGetObjectStateEntry(object entity, ObjectStateEntry& entry);
    private sealed virtual override bool System.Data.Entity.Core.IEntityStateManager.TryGetEntityStateEntry(EntityKey key, IEntityStateEntry& entry);
    private sealed virtual override bool System.Data.Entity.Core.IEntityStateManager.TryGetReferenceKey(EntityKey dependentKey, AssociationEndMember principalRole, EntityKey& principalKey);
    public virtual bool TryGetObjectStateEntry(EntityKey key, ObjectStateEntry& entry);
    internal virtual bool TryGetEntityEntry(EntityKey key, EntityEntry& entry);
    internal virtual EntityEntry FindEntityEntry(EntityKey key);
    internal virtual EntityEntry FindEntityEntry(object entity);
    public virtual RelationshipManager GetRelationshipManager(object entity);
    public virtual bool TryGetRelationshipManager(object entity, RelationshipManager& relationshipManager);
    internal virtual void ChangeState(RelationshipEntry entry, EntityState oldState, EntityState newState);
    internal virtual void ChangeState(EntityEntry entry, EntityState oldState, EntityState newState);
    private void AddRelationshipEntryToDictionary(RelationshipEntry entry, EntityState state);
    private void AddEntityEntryToDictionary(EntityEntry entry, EntityState state);
    private void AddEntryToKeylessStore(EntityEntry entry);
    private void RemoveObjectStateEntryFromDictionary(RelationshipEntry entry, EntityState state);
    private void RemoveObjectStateEntryFromDictionary(EntityEntry entry, EntityState state);
    internal virtual void RemoveEntryFromKeylessStore(IEntityWrapper wrappedEntity);
    internal virtual StateManagerTypeMetadata GetOrAddStateManagerTypeMetadata(Type entityType, EntitySet entitySet);
    internal virtual StateManagerTypeMetadata GetOrAddStateManagerTypeMetadata(EdmType edmType);
    private StateManagerTypeMetadata AddStateManagerTypeMetadata(EntitySet entitySet, ObjectTypeMapping mapping);
    private StateManagerTypeMetadata AddStateManagerTypeMetadata(EdmType edmType, ObjectTypeMapping mapping);
    internal virtual void Dispose();
    internal virtual bool get_IsDisposed();
    internal virtual void DetectChanges();
    private void DetectConflicts(IList`1<EntityEntry> entries);
    internal virtual EntityKey GetPermanentKey(IEntityWrapper entityFrom, RelatedEnd relatedEndFrom, IEntityWrapper entityTo);
    private static EntitySet GetEntitySetOfOtherEnd(IEntityWrapper entity, RelatedEnd relatedEnd);
    private static void DetectChangesInForeignKeys(IList`1<EntityEntry> entries);
    private void AlignChangesInRelationships(IList`1<EntityEntry> entries);
    private void PerformAdd(IList`1<EntityEntry> entries);
    private void PerformAdd(IEntityWrapper wrappedOwner, RelatedEnd relatedEnd, IEntityWrapper entityToAdd, bool isForeignKeyChange);
    private void PerformDelete(IList`1<EntityEntry> entries);
    private bool ShouldPreserveForeignKeyForPrincipal(IEntityWrapper entity, RelatedEnd relatedEnd, IEntityWrapper relatedEntity, HashSet`1<IEntityWrapper> entitiesToDelete);
    private bool ShouldPreserveForeignKeyForDependent(IEntityWrapper entity, RelatedEnd relatedEnd, IEntityWrapper relatedEntity, HashSet`1<IEntityWrapper> entitiesToDelete);
    private bool HasAddedReference(IEntityWrapper wrappedOwner, EntityReference reference);
    private bool IsReparentingReference(IEntityWrapper wrappedEntity, EntityReference reference);
    private static void DetectChangesInNavigationProperties(IList`1<EntityEntry> entries);
    private static void DetectChangesInScalarAndComplexProperties(IList`1<EntityEntry> entries);
    internal virtual EntityKey CreateEntityKey(EntitySet entitySet, object entity);
    [CompilerGeneratedAttribute]
internal virtual object get_EntityInvokingFKSetter();
    [CompilerGeneratedAttribute]
internal virtual void set_EntityInvokingFKSetter(object value);
}
internal enum System.Data.Entity.Core.Objects.ObjectStateValueRecord : Enum {
    public int value__;
    public static ObjectStateValueRecord OriginalReadonly;
    public static ObjectStateValueRecord CurrentUpdatable;
    public static ObjectStateValueRecord OriginalUpdatableInternal;
    public static ObjectStateValueRecord OriginalUpdatablePublic;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Objects.ObjectView`1 : object {
    private bool _suspendEvent;
    private ListChangedEventHandler onListChanged;
    private ObjectViewListener _listener;
    private int _addNewIndex;
    private IObjectViewData`1<TElement> _viewData;
    private static bool IsElementTypeAbstract { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    public TElement Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    internal ObjectView`1(IObjectViewData`1<TElement> viewData, object eventDataSource);
    private void EnsureWritableList();
    private static bool get_IsElementTypeAbstract();
    private sealed virtual override void System.ComponentModel.ICancelAddNew.CancelNew(int itemIndex);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.EndNew(int itemIndex);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    public TElement get_Item(int index);
    public void set_Item(int index, TElement value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    private void OnListChanged(ListChangedType listchangedType, int newIndex, int oldIndex);
    private void OnListChanged(ListChangedEventArgs changeArgs);
    private sealed virtual override void System.Data.Entity.Core.Objects.IObjectView.EntityPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void System.Data.Entity.Core.Objects.IObjectView.CollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.Entity.Core.Objects.ObjectViewEntityCollectionData`2 : object {
    private List`1<TViewElement> _bindingList;
    private EntityCollection`1<TItemElement> _entityCollection;
    private bool _canEditItems;
    private bool _itemCommitPending;
    public IList`1<TViewElement> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    internal ObjectViewEntityCollectionData`2(EntityCollection`1<TItemElement> entityCollection);
    public sealed virtual IList`1<TViewElement> get_List();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual bool get_FiresEventOnAdd();
    public sealed virtual bool get_FiresEventOnRemove();
    public sealed virtual bool get_FiresEventOnClear();
    public sealed virtual void EnsureCanAddNew();
    public sealed virtual int Add(TViewElement item, bool isAddNew);
    public sealed virtual void CommitItemAt(int index);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(TViewElement item, bool isCancelNew);
    public sealed virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
internal static class System.Data.Entity.Core.Objects.ObjectViewFactory : object {
    private static Type _genericObjectViewType;
    private static Type _genericObjectViewDataInterfaceType;
    private static Type _genericObjectViewQueryResultDataType;
    private static Type _genericObjectViewEntityCollectionDataType;
    private static ObjectViewFactory();
    internal static IBindingList CreateViewForQuery(TypeUsage elementEdmTypeUsage, IEnumerable`1<TElement> queryResults, ObjectContext objectContext, bool forceReadOnly, EntitySet singleEntitySet);
    internal static IBindingList CreateViewForEntityCollection(EntityType entityType, EntityCollection`1<TElement> entityCollection);
    private static IBindingList CreateObjectView(Type clrElementType, Type objectViewDataType, object viewData, object eventDataSource);
    private static TypeUsage GetOSpaceTypeUsage(TypeUsage typeUsage, ObjectContext objectContext);
    private static Type GetClrType(EdmType ospaceEdmType);
}
internal class System.Data.Entity.Core.Objects.ObjectViewListener : object {
    private WeakReference _viewWeak;
    private object _dataSource;
    private IList _list;
    internal ObjectViewListener(IObjectView view, IList list, object dataSource);
    private void CleanUpListener();
    private void RegisterCollectionEvents();
    private void UnregisterCollectionEvents();
    internal void RegisterEntityEvents(object entity);
    private void RegisterEntityEvents();
    internal void UnregisterEntityEvents(object entity);
    private void UnregisterEntityEvents();
    private void EntityPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void CollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.Entity.Core.Objects.ObjectViewQueryResultData`1 : object {
    private List`1<TElement> _bindingList;
    private ObjectContext _objectContext;
    private EntitySet _entitySet;
    private bool _canEditItems;
    private bool _canModifyList;
    public IList`1<TElement> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    internal ObjectViewQueryResultData`1(IEnumerable queryResults, ObjectContext objectContext, bool forceReadOnlyList, EntitySet entitySet);
    private static bool IsEditable(Type elementType);
    private void EnsureEntitySet();
    public sealed virtual IList`1<TElement> get_List();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual bool get_FiresEventOnAdd();
    public sealed virtual bool get_FiresEventOnRemove();
    public sealed virtual bool get_FiresEventOnClear();
    public sealed virtual void EnsureCanAddNew();
    public sealed virtual int Add(TElement item, bool isAddNew);
    public sealed virtual void CommitItemAt(int index);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(TElement item, bool isCancelNew);
    public sealed virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
public abstract class System.Data.Entity.Core.Objects.OriginalValueRecord : DbUpdatableDataRecord {
    internal OriginalValueRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
}
public class System.Data.Entity.Core.Objects.ProxyDataContractResolver : DataContractResolver {
    private XsdDataContractExporter _exporter;
    public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver);
    public virtual bool TryResolveType(Type type, Type declaredType, DataContractResolver knownTypeResolver, XmlDictionaryString& typeName, XmlDictionaryString& typeNamespace);
}
public enum System.Data.Entity.Core.Objects.RefreshMode : Enum {
    public int value__;
    public static RefreshMode ClientWins;
    public static RefreshMode StoreWins;
}
internal class System.Data.Entity.Core.Objects.RelationshipEntry : ObjectStateEntry {
    internal RelationshipWrapper _relationshipWrapper;
    [CompilerGeneratedAttribute]
private RelationshipEntry <NextKey0>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationshipEntry <NextKey1>k__BackingField;
    internal EntityKey Key0 { get; }
    internal EntityKey Key1 { get; }
    internal BitArray ModifiedProperties { get; }
    public bool IsRelationship { get; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    internal bool IsKeyEntry { get; }
    internal RelationshipWrapper RelationshipWrapper { get; internal set; }
    internal RelationshipEntry NextKey0 { get; internal set; }
    internal RelationshipEntry NextKey1 { get; internal set; }
    internal RelationshipEntry(ObjectStateManager cache, EntityState state, RelationshipWrapper relationshipWrapper);
    internal EntityKey get_Key0();
    internal EntityKey get_Key1();
    internal virtual BitArray get_ModifiedProperties();
    public virtual bool get_IsRelationship();
    public virtual void AcceptChanges();
    public virtual void Delete();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Objects.RelationshipEntry/<GetModifiedProperties>d__12")]
public virtual IEnumerable`1<string> GetModifiedProperties();
    public virtual void SetModified();
    public virtual object get_Entity();
    public virtual EntityKey get_EntityKey();
    internal virtual void set_EntityKey(EntityKey value);
    public virtual void SetModifiedProperty(string propertyName);
    public virtual void RejectPropertyChanges(string propertyName);
    public virtual bool IsPropertyChanged(string propertyName);
    public virtual DbDataRecord get_OriginalValues();
    public virtual OriginalValueRecord GetUpdatableOriginalValues();
    public virtual CurrentValueRecord get_CurrentValues();
    public virtual RelationshipManager get_RelationshipManager();
    public virtual void ChangeState(EntityState state);
    public virtual void ApplyCurrentValues(object currentEntity);
    public virtual void ApplyOriginalValues(object originalEntity);
    internal virtual bool get_IsKeyEntry();
    internal virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    internal virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void SetModifiedAll();
    internal virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal virtual void RevertDelete();
    internal virtual void EntityMemberChanging(string entityMemberName);
    internal virtual void EntityMemberChanged(string entityMemberName);
    internal virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal bool IsSameAssociationSetAndRole(AssociationSet associationSet, AssociationEndMember associationMember, EntityKey entityKey);
    private object GetCurrentRelationValue(int ordinal, bool throwException);
    private static void ValidateRelationshipRange(int ordinal);
    internal object GetCurrentRelationValue(int ordinal);
    internal RelationshipWrapper get_RelationshipWrapper();
    internal void set_RelationshipWrapper(RelationshipWrapper value);
    internal virtual void Reset();
    internal void ChangeRelatedEnd(EntityKey oldKey, EntityKey newKey);
    internal void DeleteUnnecessaryKeyEntries();
    internal void Delete(bool doFixup);
    internal object GetOriginalRelationValue(int ordinal);
    internal void DetachRelationshipEntry();
    internal void ChangeRelationshipState(EntityEntry targetEntry, RelatedEnd relatedEnd, EntityState requestedState);
    internal RelationshipEntry GetNextRelationshipEnd(EntityKey entityKey);
    internal void SetNextRelationshipEnd(EntityKey entityKey, RelationshipEntry nextEnd);
    [CompilerGeneratedAttribute]
internal RelationshipEntry get_NextKey0();
    [CompilerGeneratedAttribute]
internal void set_NextKey0(RelationshipEntry value);
    [CompilerGeneratedAttribute]
internal RelationshipEntry get_NextKey1();
    [CompilerGeneratedAttribute]
internal void set_NextKey1(RelationshipEntry value);
}
internal class System.Data.Entity.Core.Objects.RelationshipWrapper : object {
    internal AssociationSet AssociationSet;
    internal EntityKey Key0;
    internal EntityKey Key1;
    internal ReadOnlyMetadataCollection`1<AssociationEndMember> AssociationEndMembers { get; }
    internal RelationshipWrapper(AssociationSet extent, EntityKey key);
    internal RelationshipWrapper(RelationshipWrapper wrapper, int ordinal, EntityKey key);
    internal RelationshipWrapper(AssociationSet extent, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal RelationshipWrapper(AssociationSet extent, string role0, EntityKey key0, string role1, EntityKey key1);
    internal ReadOnlyMetadataCollection`1<AssociationEndMember> get_AssociationEndMembers();
    internal AssociationEndMember GetAssociationEndMember(EntityKey key);
    internal EntityKey GetOtherEntityKey(EntityKey key);
    internal EntityKey GetEntityKey(int ordinal);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RelationshipWrapper wrapper);
}
[FlagsAttribute]
public enum System.Data.Entity.Core.Objects.SaveOptions : Enum {
    public int value__;
    public static SaveOptions None;
    public static SaveOptions AcceptAllChangesAfterSave;
    public static SaveOptions DetectChangesBeforeSave;
}
internal class System.Data.Entity.Core.Objects.Span : object {
    private List`1<SpanPath> _spanList;
    private string _cacheKey;
    internal List`1<SpanPath> SpanList { get; }
    internal List`1<SpanPath> get_SpanList();
    internal static bool RequiresRelationshipSpan(MergeOption mergeOption);
    internal static Span IncludeIn(Span spanToIncludeIn, string pathToInclude);
    internal static Span CopyUnion(Span span1, Span span2);
    internal string GetCacheKey();
    public void Include(string path);
    internal Span Clone();
    internal void AddSpanPath(SpanPath spanPath);
    private bool ValidateSpanPath(SpanPath spanPath);
    private void RemoveExistingSubPaths(SpanPath spanPath);
    private static List`1<string> ParsePath(string path);
}
internal class System.Data.Entity.Core.Objects.StateManagerMemberMetadata : object {
    private EdmProperty _clrProperty;
    private EdmProperty _edmProperty;
    private bool _isPartOfKey;
    private bool _isComplexType;
    internal string CLayerName { get; }
    internal Type ClrType { get; }
    internal bool IsComplex { get; }
    internal EdmProperty CdmMetadata { get; }
    internal EdmProperty ClrMetadata { get; }
    internal bool IsPartOfKey { get; }
    internal StateManagerMemberMetadata(ObjectPropertyMapping memberMap, EdmProperty memberMetadata, bool isPartOfKey);
    internal string get_CLayerName();
    internal Type get_ClrType();
    internal virtual bool get_IsComplex();
    internal virtual EdmProperty get_CdmMetadata();
    internal EdmProperty get_ClrMetadata();
    internal bool get_IsPartOfKey();
    public virtual object GetValue(object userObject);
    public void SetValue(object userObject, object value);
}
internal class System.Data.Entity.Core.Objects.StateManagerTypeMetadata : object {
    private TypeUsage _typeUsage;
    private StateManagerMemberMetadata[] _members;
    private Dictionary`2<string, int> _objectNameToOrdinal;
    private Dictionary`2<string, int> _cLayerNameToOrdinal;
    private DataRecordInfo _recordInfo;
    internal TypeUsage CdmMetadata { get; }
    internal DataRecordInfo DataRecordInfo { get; }
    internal int FieldCount { get; }
    internal IEnumerable`1<StateManagerMemberMetadata> Members { get; }
    internal StateManagerTypeMetadata(EdmType edmType, ObjectTypeMapping mapping);
    internal TypeUsage get_CdmMetadata();
    internal DataRecordInfo get_DataRecordInfo();
    internal virtual int get_FieldCount();
    internal Type GetFieldType(int ordinal);
    internal virtual StateManagerMemberMetadata Member(int ordinal);
    internal IEnumerable`1<StateManagerMemberMetadata> get_Members();
    internal string CLayerMemberName(int ordinal);
    internal int GetOrdinalforOLayerMemberName(string name);
    internal int GetOrdinalforCLayerMemberName(string name);
}
internal class System.Data.Entity.Core.Objects.StateManagerValue : ValueType {
    public StateManagerMemberMetadata MemberMetadata;
    public object UserObject;
    public object OriginalValue;
    public StateManagerValue(StateManagerMemberMetadata metadata, object instance, object value);
}
public class System.Data.Entity.Core.OptimisticConcurrencyException : UpdateException {
    public OptimisticConcurrencyException(string message);
    public OptimisticConcurrencyException(string message, Exception innerException);
    public OptimisticConcurrencyException(string message, Exception innerException, IEnumerable`1<ObjectStateEntry> stateEntries);
    private OptimisticConcurrencyException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Core.PropertyConstraintException : ConstraintException {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public PropertyConstraintException(string message);
    public PropertyConstraintException(string message, Exception innerException);
    public PropertyConstraintException(string message, string propertyName);
    public PropertyConstraintException(string message, string propertyName, Exception innerException);
    private PropertyConstraintException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Core.ProviderIncompatibleException : EntityException {
    public ProviderIncompatibleException(string message);
    public ProviderIncompatibleException(string message, Exception innerException);
    private ProviderIncompatibleException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Entity.Core.Query.InternalTrees.AggregateOp : ScalarOp {
    private EdmFunction m_aggFunc;
    private bool m_distinctAgg;
    internal static AggregateOp Pattern;
    internal EdmFunction AggFunc { get; }
    internal bool IsDistinctAggregate { get; }
    internal bool IsAggregateOp { get; }
    internal AggregateOp(EdmFunction aggFunc, bool distinctAgg);
    private static AggregateOp();
    internal EdmFunction get_AggFunc();
    internal bool get_IsDistinctAggregate();
    internal virtual bool get_IsAggregateOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.AncillaryOp : Op {
    internal bool IsAncillaryOp { get; }
    internal AncillaryOp(OpType opType);
    internal virtual bool get_IsAncillaryOp();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ApplyBaseOp : RelOp {
    internal int Arity { get; }
    internal ApplyBaseOp(OpType opType);
    internal virtual int get_Arity();
}
internal class System.Data.Entity.Core.Query.InternalTrees.ArithmeticOp : ScalarOp {
    internal ArithmeticOp(OpType opType, TypeUsage type);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.BasicOpVisitor : object {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    internal virtual void VisitNode(Node n);
    protected virtual void VisitDefault(Node n);
    protected virtual void VisitConstantOp(ConstantBaseOp op, Node n);
    protected virtual void VisitTableOp(ScanTableBaseOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual void VisitApplyOp(ApplyBaseOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(Op op, Node n);
    protected virtual void VisitScalarOpDefault(ScalarOp op, Node n);
    public virtual void Visit(ConstantOp op, Node n);
    public virtual void Visit(NullOp op, Node n);
    public virtual void Visit(NullSentinelOp op, Node n);
    public virtual void Visit(InternalConstantOp op, Node n);
    public virtual void Visit(ConstantPredicateOp op, Node n);
    public virtual void Visit(FunctionOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(ComparisonOp op, Node n);
    public virtual void Visit(LikeOp op, Node n);
    public virtual void Visit(AggregateOp op, Node n);
    public virtual void Visit(NewInstanceOp op, Node n);
    public virtual void Visit(NewEntityOp op, Node n);
    public virtual void Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual void Visit(NewMultisetOp op, Node n);
    public virtual void Visit(NewRecordOp op, Node n);
    public virtual void Visit(RefOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
    public virtual void Visit(ConditionalOp op, Node n);
    public virtual void Visit(ArithmeticOp op, Node n);
    public virtual void Visit(TreatOp op, Node n);
    public virtual void Visit(CastOp op, Node n);
    public virtual void Visit(SoftCastOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    public virtual void Visit(ExistsOp op, Node n);
    public virtual void Visit(ElementOp op, Node n);
    public virtual void Visit(GetEntityRefOp op, Node n);
    public virtual void Visit(GetRefKeyOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    public virtual void Visit(DerefOp op, Node n);
    public virtual void Visit(NavigateOp op, Node n);
    protected virtual void VisitAncillaryOpDefault(AncillaryOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarDefListOp op, Node n);
    protected virtual void VisitRelOpDefault(RelOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(FilterOp op, Node n);
    public virtual void Visit(SortOp op, Node n);
    public virtual void Visit(ConstrainedSortOp op, Node n);
    public virtual void Visit(GroupByOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(CrossJoinOp op, Node n);
    public virtual void Visit(InnerJoinOp op, Node n);
    public virtual void Visit(LeftOuterJoinOp op, Node n);
    public virtual void Visit(FullOuterJoinOp op, Node n);
    public virtual void Visit(CrossApplyOp op, Node n);
    public virtual void Visit(OuterApplyOp op, Node n);
    public virtual void Visit(UnionAllOp op, Node n);
    public virtual void Visit(IntersectOp op, Node n);
    public virtual void Visit(ExceptOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(SingleRowOp op, Node n);
    public virtual void Visit(SingleRowTableOp op, Node n);
    protected virtual void VisitPhysicalOpDefault(PhysicalOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    public virtual void Visit(SingleStreamNestOp op, Node n);
    public virtual void Visit(MultiStreamNestOp op, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.BasicOpVisitorOfNode : BasicOpVisitorOfT`1<Node> {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitAncillaryOpDefault(AncillaryOp op, Node n);
    protected virtual Node VisitPhysicalOpDefault(PhysicalOp op, Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    protected virtual Node VisitScalarOpDefault(ScalarOp op, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.BasicOpVisitorOfT`1 : object {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    internal TResultType VisitNode(Node n);
    protected virtual TResultType VisitDefault(Node n);
    internal virtual TResultType Unimplemented(Node n);
    public virtual TResultType Visit(Op op, Node n);
    protected virtual TResultType VisitAncillaryOpDefault(AncillaryOp op, Node n);
    public virtual TResultType Visit(VarDefOp op, Node n);
    public virtual TResultType Visit(VarDefListOp op, Node n);
    protected virtual TResultType VisitPhysicalOpDefault(PhysicalOp op, Node n);
    public virtual TResultType Visit(PhysicalProjectOp op, Node n);
    protected virtual TResultType VisitNestOp(NestBaseOp op, Node n);
    public virtual TResultType Visit(SingleStreamNestOp op, Node n);
    public virtual TResultType Visit(MultiStreamNestOp op, Node n);
    protected virtual TResultType VisitRelOpDefault(RelOp op, Node n);
    protected virtual TResultType VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual TResultType Visit(CrossApplyOp op, Node n);
    public virtual TResultType Visit(OuterApplyOp op, Node n);
    protected virtual TResultType VisitJoinOp(JoinBaseOp op, Node n);
    public virtual TResultType Visit(CrossJoinOp op, Node n);
    public virtual TResultType Visit(FullOuterJoinOp op, Node n);
    public virtual TResultType Visit(LeftOuterJoinOp op, Node n);
    public virtual TResultType Visit(InnerJoinOp op, Node n);
    protected virtual TResultType VisitSetOp(SetOp op, Node n);
    public virtual TResultType Visit(ExceptOp op, Node n);
    public virtual TResultType Visit(IntersectOp op, Node n);
    public virtual TResultType Visit(UnionAllOp op, Node n);
    public virtual TResultType Visit(DistinctOp op, Node n);
    public virtual TResultType Visit(FilterOp op, Node n);
    protected virtual TResultType VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual TResultType Visit(GroupByOp op, Node n);
    public virtual TResultType Visit(GroupByIntoOp op, Node n);
    public virtual TResultType Visit(ProjectOp op, Node n);
    protected virtual TResultType VisitTableOp(ScanTableBaseOp op, Node n);
    public virtual TResultType Visit(ScanTableOp op, Node n);
    public virtual TResultType Visit(ScanViewOp op, Node n);
    public virtual TResultType Visit(SingleRowOp op, Node n);
    public virtual TResultType Visit(SingleRowTableOp op, Node n);
    protected virtual TResultType VisitSortOp(SortBaseOp op, Node n);
    public virtual TResultType Visit(SortOp op, Node n);
    public virtual TResultType Visit(ConstrainedSortOp op, Node n);
    public virtual TResultType Visit(UnnestOp op, Node n);
    protected virtual TResultType VisitScalarOpDefault(ScalarOp op, Node n);
    protected virtual TResultType VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual TResultType Visit(AggregateOp op, Node n);
    public virtual TResultType Visit(ArithmeticOp op, Node n);
    public virtual TResultType Visit(CaseOp op, Node n);
    public virtual TResultType Visit(CastOp op, Node n);
    public virtual TResultType Visit(SoftCastOp op, Node n);
    public virtual TResultType Visit(CollectOp op, Node n);
    public virtual TResultType Visit(ComparisonOp op, Node n);
    public virtual TResultType Visit(ConditionalOp op, Node n);
    public virtual TResultType Visit(ConstantOp op, Node n);
    public virtual TResultType Visit(ConstantPredicateOp op, Node n);
    public virtual TResultType Visit(ElementOp op, Node n);
    public virtual TResultType Visit(ExistsOp op, Node n);
    public virtual TResultType Visit(FunctionOp op, Node n);
    public virtual TResultType Visit(GetEntityRefOp op, Node n);
    public virtual TResultType Visit(GetRefKeyOp op, Node n);
    public virtual TResultType Visit(InternalConstantOp op, Node n);
    public virtual TResultType Visit(IsOfOp op, Node n);
    public virtual TResultType Visit(LikeOp op, Node n);
    public virtual TResultType Visit(NewEntityOp op, Node n);
    public virtual TResultType Visit(NewInstanceOp op, Node n);
    public virtual TResultType Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual TResultType Visit(NewMultisetOp op, Node n);
    public virtual TResultType Visit(NewRecordOp op, Node n);
    public virtual TResultType Visit(NullOp op, Node n);
    public virtual TResultType Visit(NullSentinelOp op, Node n);
    public virtual TResultType Visit(PropertyOp op, Node n);
    public virtual TResultType Visit(RelPropertyOp op, Node n);
    public virtual TResultType Visit(RefOp op, Node n);
    public virtual TResultType Visit(TreatOp op, Node n);
    public virtual TResultType Visit(VarRefOp op, Node n);
    public virtual TResultType Visit(DerefOp op, Node n);
    public virtual TResultType Visit(NavigateOp op, Node n);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Query.InternalTrees.BitVec : object {
    private static int BitsPerInt32;
    private static int BytesPerInt32;
    private static int BitsPerByte;
    public Int32[] m_array;
    private int m_length;
    private int _version;
    private static int _ShrinkThreshold;
    public bool Item { get; public set; }
    public int Length { get; public set; }
    public BitVec(int length);
    public BitVec(int length, bool defaultValue);
    public BitVec(Byte[] bytes);
    public BitVec(Boolean[] values);
    public BitVec(Int32[] values);
    public BitVec(BitVec bits);
    public bool get_Item(int index);
    public void set_Item(int index, bool value);
    public bool Get(int index);
    public void Set(int index, bool value);
    public void SetAll(bool value);
    public BitVec And(BitVec value);
    public BitVec Or(BitVec value);
    public BitVec Xor(BitVec value);
    public BitVec Not();
    public int get_Length();
    public void set_Length(int value);
    public static int GetArrayLength(int n, int div);
    private static int GetArraySize(int n, int div);
}
internal class System.Data.Entity.Core.Query.InternalTrees.CaseOp : ScalarOp {
    internal static CaseOp Pattern;
    internal CaseOp(TypeUsage type);
    private static CaseOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.CastOp : ScalarOp {
    internal static CastOp Pattern;
    internal int Arity { get; }
    internal CastOp(TypeUsage type);
    private static CastOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.CollectionColumnMap : ColumnMap {
    private ColumnMap m_element;
    private SimpleColumnMap[] m_foreignKeys;
    private SimpleColumnMap[] m_keys;
    internal SimpleColumnMap[] ForeignKeys { get; }
    internal SimpleColumnMap[] Keys { get; }
    internal ColumnMap Element { get; }
    internal CollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys);
    internal SimpleColumnMap[] get_ForeignKeys();
    internal SimpleColumnMap[] get_Keys();
    internal ColumnMap get_Element();
}
internal class System.Data.Entity.Core.Query.InternalTrees.CollectionInfo : object {
    private Var m_collectionVar;
    private ColumnMap m_columnMap;
    private VarList m_flattenedElementVars;
    private VarVec m_keys;
    private List`1<SortKey> m_sortKeys;
    private object m_discriminatorValue;
    internal Var CollectionVar { get; }
    internal ColumnMap ColumnMap { get; }
    internal VarList FlattenedElementVars { get; }
    internal VarVec Keys { get; }
    internal List`1<SortKey> SortKeys { get; }
    internal object DiscriminatorValue { get; }
    internal CollectionInfo(Var collectionVar, ColumnMap columnMap, VarList flattenedElementVars, VarVec keys, List`1<SortKey> sortKeys, object discriminatorValue);
    internal Var get_CollectionVar();
    internal ColumnMap get_ColumnMap();
    internal VarList get_FlattenedElementVars();
    internal VarVec get_Keys();
    internal List`1<SortKey> get_SortKeys();
    internal object get_DiscriminatorValue();
}
internal class System.Data.Entity.Core.Query.InternalTrees.CollectOp : ScalarOp {
    internal static CollectOp Pattern;
    internal int Arity { get; }
    internal CollectOp(TypeUsage type);
    private static CollectOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ColumnMap : object {
    private TypeUsage _type;
    private string _name;
    internal static string DefaultColumnName;
    internal TypeUsage Type { get; internal set; }
    internal string Name { get; internal set; }
    internal bool IsNamed { get; }
    internal ColumnMap(TypeUsage type, string name);
    internal TypeUsage get_Type();
    internal void set_Type(TypeUsage value);
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_IsNamed();
    [DebuggerNonUserCodeAttribute]
internal abstract virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal abstract virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ColumnMapCopier : ColumnMapVisitorWithResults`2<ColumnMap, VarMap> {
    private static ColumnMapCopier _instance;
    private static ColumnMapCopier();
    internal static ColumnMap Copy(ColumnMap columnMap, VarMap replacementVarMap);
    private static Var GetReplacementVar(Var originalVar, VarMap replacementVarMap);
    internal TListType[] VisitList(TListType[] tList, VarMap replacementVarMap);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, VarMap replacementVarMap);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(ComplexTypeColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(DiscriminatedCollectionColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(EntityColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(SimplePolymorphicColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(RecordColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(RefColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(ScalarColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(SimpleCollectionColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(VarRefColumnMap columnMap, VarMap replacementVarMap);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ColumnMapFactory : object {
    internal virtual CollectionColumnMap CreateFunctionImportStructuralTypeColumnMap(DbDataReader storeDataReader, FunctionImportMappingNonComposable mapping, int resultSetIndex, EntitySet entitySet, StructuralType baseStructuralType);
    internal virtual CollectionColumnMap CreateColumnMapFromReaderAndType(DbDataReader storeDataReader, EdmType edmType, EntitySet entitySet, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    internal virtual CollectionColumnMap CreateColumnMapFromReaderAndClrType(DbDataReader reader, Type type, MetadataWorkspace workspace);
    private static EntityColumnMap CreateEntityTypeElementColumnMap(DbDataReader storeDataReader, EdmType edmType, EntitySet entitySet, ColumnMap[] propertyColumnMaps, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    private static ColumnMap[] GetColumnMapsForType(DbDataReader storeDataReader, EdmType edmType, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    private static ScalarColumnMap[] CreateDiscriminatorColumnMaps(DbDataReader storeDataReader, FunctionImportMappingNonComposable mapping, int resultIndex);
    private static int GetMemberOrdinalFromReader(DbDataReader storeDataReader, EdmMember member, EdmType currentType, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    private static string GetRenameForMember(EdmMember member, EdmType currentType, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    private static int GetDiscriminatorOrdinalFromReader(DbDataReader storeDataReader, string columnName, EdmFunction functionImport);
    private static bool TryGetColumnOrdinalFromReader(DbDataReader storeDataReader, string columnName, Int32& ordinal);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ColumnMapVisitor`1 : object {
    protected void VisitList(TListType[] columnMaps, TArgType arg);
    protected void VisitEntityIdentity(EntityIdentity entityIdentity, TArgType arg);
    protected virtual void VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, TArgType arg);
    protected virtual void VisitEntityIdentity(SimpleEntityIdentity entityIdentity, TArgType arg);
    internal virtual void Visit(ComplexTypeColumnMap columnMap, TArgType arg);
    internal virtual void Visit(DiscriminatedCollectionColumnMap columnMap, TArgType arg);
    internal virtual void Visit(EntityColumnMap columnMap, TArgType arg);
    internal virtual void Visit(SimplePolymorphicColumnMap columnMap, TArgType arg);
    internal virtual void Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, TArgType arg);
    internal virtual void Visit(RecordColumnMap columnMap, TArgType arg);
    internal virtual void Visit(RefColumnMap columnMap, TArgType arg);
    internal virtual void Visit(ScalarColumnMap columnMap, TArgType arg);
    internal virtual void Visit(SimpleCollectionColumnMap columnMap, TArgType arg);
    internal virtual void Visit(VarRefColumnMap columnMap, TArgType arg);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ColumnMapVisitorWithResults`2 : object {
    protected EntityIdentity VisitEntityIdentity(EntityIdentity entityIdentity, TArgType arg);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, TArgType arg);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, TArgType arg);
    internal abstract virtual TResultType Visit(ComplexTypeColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(DiscriminatedCollectionColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(EntityColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(SimplePolymorphicColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(RecordColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(RefColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(ScalarColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(SimpleCollectionColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(VarRefColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, TArgType arg);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ColumnMD : object {
    private string m_name;
    private TypeUsage m_type;
    private EdmMember m_property;
    internal string Name { get; }
    internal TypeUsage Type { get; }
    internal bool IsNullable { get; }
    internal ColumnMD(string name, TypeUsage type);
    internal ColumnMD(EdmMember property);
    internal string get_Name();
    internal TypeUsage get_Type();
    internal bool get_IsNullable();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.ColumnVar : Var {
    private ColumnMD m_columnMetadata;
    private Table m_table;
    internal Table Table { get; }
    internal ColumnMD ColumnMetadata { get; }
    internal ColumnVar(int id, Table table, ColumnMD columnMetadata);
    internal Table get_Table();
    internal ColumnMD get_ColumnMetadata();
    internal virtual bool TryGetName(String& name);
}
internal class System.Data.Entity.Core.Query.InternalTrees.Command : object {
    private Dictionary`2<string, ParameterVar> m_parameterMap;
    private List`1<Var> m_vars;
    private List`1<Table> m_tables;
    private MetadataWorkspace m_metadataWorkspace;
    private TypeUsage m_boolType;
    private TypeUsage m_intType;
    private TypeUsage m_stringType;
    private ConstantPredicateOp m_trueOp;
    private ConstantPredicateOp m_falseOp;
    private NodeInfoVisitor m_nodeInfoVisitor;
    private KeyPullup m_keyPullupVisitor;
    private int m_nextNodeId;
    private int m_nextBranchDiscriminatorValue;
    private bool m_disableVarVecEnumCaching;
    private Stack`1<VarVecEnumerator> m_freeVarVecEnumerators;
    private Stack`1<VarVec> m_freeVarVecs;
    private HashSet`1<RelProperty> m_referencedRelProperties;
    [CompilerGeneratedAttribute]
private Node <Root>k__BackingField;
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal Node Root { get; internal set; }
    internal int NextBranchDiscriminatorValue { get; }
    internal int NextNodeId { get; }
    internal TypeUsage BooleanType { get; }
    internal TypeUsage IntegerType { get; }
    internal TypeUsage StringType { get; }
    internal IEnumerable`1<Var> Vars { get; }
    internal HashSet`1<RelProperty> ReferencedRelProperties { get; }
    internal Command(MetadataWorkspace metadataWorkspace);
    internal virtual MetadataWorkspace get_MetadataWorkspace();
    [CompilerGeneratedAttribute]
internal virtual Node get_Root();
    [CompilerGeneratedAttribute]
internal virtual void set_Root(Node value);
    internal virtual void DisableVarVecEnumCaching();
    internal virtual int get_NextBranchDiscriminatorValue();
    internal virtual int get_NextNodeId();
    internal virtual TypeUsage get_BooleanType();
    internal virtual TypeUsage get_IntegerType();
    internal virtual TypeUsage get_StringType();
    private static bool TryGetPrimitiveType(PrimitiveTypeKind modelType, TypeUsage& type);
    internal virtual VarVec CreateVarVec();
    internal virtual VarVec CreateVarVec(Var v);
    internal virtual VarVec CreateVarVec(IEnumerable`1<Var> v);
    internal virtual VarVec CreateVarVec(VarVec v);
    internal virtual void ReleaseVarVec(VarVec vec);
    internal virtual VarVecEnumerator GetVarVecEnumerator(VarVec vec);
    internal virtual void ReleaseVarVecEnumerator(VarVecEnumerator enumerator);
    internal static VarList CreateVarList();
    internal static VarList CreateVarList(IEnumerable`1<Var> vars);
    private int NewTableId();
    internal static TableMD CreateTableDefinition(TypeUsage elementType);
    internal static TableMD CreateTableDefinition(EntitySetBase extent);
    internal virtual TableMD CreateFlatTableDefinition(RowType type);
    internal virtual TableMD CreateFlatTableDefinition(IEnumerable`1<EdmProperty> properties, IEnumerable`1<EdmMember> keyMembers, EntitySetBase entitySet);
    internal virtual Table CreateTableInstance(TableMD tableMetadata);
    internal virtual IEnumerable`1<Var> get_Vars();
    internal virtual Var GetVar(int id);
    internal virtual ParameterVar GetParameter(string paramName);
    private int NewVarId();
    internal virtual ParameterVar CreateParameterVar(string parameterName, TypeUsage parameterType);
    private ParameterVar ReplaceParameterVar(ParameterVar oldVar, Func`2<TypeUsage, TypeUsage> generateReplacementType);
    internal virtual ParameterVar ReplaceEnumParameterVar(ParameterVar oldVar);
    internal virtual ParameterVar ReplaceStrongSpatialParameterVar(ParameterVar oldVar);
    internal virtual ColumnVar CreateColumnVar(Table table, ColumnMD columnMD);
    internal virtual ComputedVar CreateComputedVar(TypeUsage type);
    internal virtual SetOpVar CreateSetOpVar(TypeUsage type);
    internal virtual Node CreateNode(Op op);
    internal virtual Node CreateNode(Op op, Node arg1);
    internal virtual Node CreateNode(Op op, Node arg1, Node arg2);
    internal virtual Node CreateNode(Op op, Node arg1, Node arg2, Node arg3);
    internal virtual Node CreateNode(Op op, IList`1<Node> args);
    internal virtual Node CreateNode(Op op, List`1<Node> args);
    internal virtual ConstantBaseOp CreateConstantOp(TypeUsage type, object value);
    internal virtual InternalConstantOp CreateInternalConstantOp(TypeUsage type, object value);
    internal virtual NullSentinelOp CreateNullSentinelOp();
    internal virtual NullOp CreateNullOp(TypeUsage type);
    internal virtual ConstantPredicateOp CreateConstantPredicateOp(bool value);
    internal virtual ConstantPredicateOp CreateTrueOp();
    internal virtual ConstantPredicateOp CreateFalseOp();
    internal virtual FunctionOp CreateFunctionOp(EdmFunction function);
    internal virtual TreatOp CreateTreatOp(TypeUsage type);
    internal virtual TreatOp CreateFakeTreatOp(TypeUsage type);
    internal virtual IsOfOp CreateIsOfOp(TypeUsage isOfType);
    internal virtual IsOfOp CreateIsOfOnlyOp(TypeUsage isOfType);
    internal virtual CastOp CreateCastOp(TypeUsage type);
    internal virtual SoftCastOp CreateSoftCastOp(TypeUsage type);
    internal virtual ComparisonOp CreateComparisonOp(OpType opType, bool useDatabaseNullSemantics);
    internal virtual LikeOp CreateLikeOp();
    internal virtual ConditionalOp CreateConditionalOp(OpType opType);
    internal virtual CaseOp CreateCaseOp(TypeUsage type);
    internal virtual AggregateOp CreateAggregateOp(EdmFunction aggFunc, bool distinctAgg);
    internal virtual NewInstanceOp CreateNewInstanceOp(TypeUsage type);
    internal virtual NewEntityOp CreateScopedNewEntityOp(TypeUsage type, List`1<RelProperty> relProperties, EntitySet entitySet);
    internal virtual NewEntityOp CreateNewEntityOp(TypeUsage type, List`1<RelProperty> relProperties);
    internal virtual DiscriminatedNewEntityOp CreateDiscriminatedNewEntityOp(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap, EntitySet entitySet, List`1<RelProperty> relProperties);
    internal virtual NewMultisetOp CreateNewMultisetOp(TypeUsage type);
    internal virtual NewRecordOp CreateNewRecordOp(TypeUsage type);
    internal virtual NewRecordOp CreateNewRecordOp(RowType type);
    internal virtual NewRecordOp CreateNewRecordOp(TypeUsage type, List`1<EdmProperty> fields);
    internal virtual VarRefOp CreateVarRefOp(Var v);
    internal virtual ArithmeticOp CreateArithmeticOp(OpType opType, TypeUsage type);
    internal PropertyOp CreatePropertyOp(EdmMember prop);
    internal RelPropertyOp CreateRelPropertyOp(RelProperty prop);
    internal virtual RefOp CreateRefOp(EntitySet entitySet, TypeUsage type);
    internal ExistsOp CreateExistsOp();
    internal virtual ElementOp CreateElementOp(TypeUsage type);
    internal virtual GetEntityRefOp CreateGetEntityRefOp(TypeUsage type);
    internal virtual GetRefKeyOp CreateGetRefKeyOp(TypeUsage type);
    internal virtual CollectOp CreateCollectOp(TypeUsage type);
    internal virtual DerefOp CreateDerefOp(TypeUsage type);
    internal NavigateOp CreateNavigateOp(TypeUsage type, RelProperty relProperty);
    internal virtual VarDefListOp CreateVarDefListOp();
    internal virtual VarDefOp CreateVarDefOp(Var v);
    internal Node CreateVarDefNode(Node definingExpr, Var& computedVar);
    internal Node CreateVarDefListNode(Node definingExpr, Var& computedVar);
    internal ScanTableOp CreateScanTableOp(TableMD tableMetadata);
    internal virtual ScanTableOp CreateScanTableOp(Table table);
    internal virtual ScanViewOp CreateScanViewOp(Table table);
    internal virtual ScanViewOp CreateScanViewOp(TableMD tableMetadata);
    internal virtual UnnestOp CreateUnnestOp(Var v);
    internal virtual UnnestOp CreateUnnestOp(Var v, Table t);
    internal virtual FilterOp CreateFilterOp();
    internal virtual ProjectOp CreateProjectOp(VarVec vars);
    internal virtual ProjectOp CreateProjectOp(Var v);
    internal virtual InnerJoinOp CreateInnerJoinOp();
    internal virtual LeftOuterJoinOp CreateLeftOuterJoinOp();
    internal virtual FullOuterJoinOp CreateFullOuterJoinOp();
    internal virtual CrossJoinOp CreateCrossJoinOp();
    internal virtual CrossApplyOp CreateCrossApplyOp();
    internal virtual OuterApplyOp CreateOuterApplyOp();
    internal static SortKey CreateSortKey(Var v, bool asc, string collation);
    internal static SortKey CreateSortKey(Var v, bool asc);
    internal static SortKey CreateSortKey(Var v);
    internal virtual SortOp CreateSortOp(List`1<SortKey> sortKeys);
    internal virtual ConstrainedSortOp CreateConstrainedSortOp(List`1<SortKey> sortKeys);
    internal virtual ConstrainedSortOp CreateConstrainedSortOp(List`1<SortKey> sortKeys, bool withTies);
    internal virtual GroupByOp CreateGroupByOp(VarVec gbyKeys, VarVec outputs);
    internal virtual GroupByIntoOp CreateGroupByIntoOp(VarVec gbyKeys, VarVec inputs, VarVec outputs);
    internal virtual DistinctOp CreateDistinctOp(VarVec keyVars);
    internal virtual DistinctOp CreateDistinctOp(Var keyVar);
    internal virtual UnionAllOp CreateUnionAllOp(VarMap leftMap, VarMap rightMap);
    internal virtual UnionAllOp CreateUnionAllOp(VarMap leftMap, VarMap rightMap, Var branchDiscriminator);
    internal virtual IntersectOp CreateIntersectOp(VarMap leftMap, VarMap rightMap);
    internal virtual ExceptOp CreateExceptOp(VarMap leftMap, VarMap rightMap);
    internal virtual SingleRowOp CreateSingleRowOp();
    internal virtual SingleRowTableOp CreateSingleRowTableOp();
    internal virtual PhysicalProjectOp CreatePhysicalProjectOp(VarList outputVars, SimpleCollectionColumnMap columnMap);
    internal virtual PhysicalProjectOp CreatePhysicalProjectOp(Var outputVar);
    internal static CollectionInfo CreateCollectionInfo(Var collectionVar, ColumnMap columnMap, VarList flattenedElementVars, VarVec keys, List`1<SortKey> sortKeys, object discriminatorValue);
    internal virtual SingleStreamNestOp CreateSingleStreamNestOp(VarVec keys, List`1<SortKey> prefixSortKeys, List`1<SortKey> postfixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList, Var discriminatorVar);
    internal virtual MultiStreamNestOp CreateMultiStreamNestOp(List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    internal virtual NodeInfo GetNodeInfo(Node n);
    internal virtual ExtendedNodeInfo GetExtendedNodeInfo(Node n);
    internal virtual void RecomputeNodeInfo(Node n);
    internal virtual KeyVec PullupKeys(Node n);
    internal static bool EqualTypes(TypeUsage x, TypeUsage y);
    internal static bool EqualTypes(EdmType x, EdmType y);
    internal virtual void BuildUnionAllLadder(IList`1<Node> inputNodes, IList`1<Var> inputVars, Node& resultNode, IList`1& resultVars);
    internal virtual void BuildUnionAllLadder(IList`1<Node> inputNodes, IList`1<Var> inputVars, Node& resultNode, Var& resultVar);
    internal virtual Node BuildProject(Node inputNode, IEnumerable`1<Var> inputVars, IEnumerable`1<Node> computedExpressions);
    internal virtual Node BuildProject(Node input, Node computedExpression, Var& projectVar);
    internal virtual void BuildOfTypeTree(Node inputNode, Var inputVar, TypeUsage desiredType, bool includeSubtypes, Node& resultNode, Var& resultVar);
    internal virtual Node BuildFakeTreatProject(Node inputNode, Var inputVar, TypeUsage desiredType, Var& resultVar);
    internal Node BuildComparison(OpType opType, Node arg0, Node arg1, bool useDatabaseNullSemantics);
    internal virtual Node BuildCollect(Node relOpNode, Var relOpVar);
    private void AddRelPropertyReference(RelProperty relProperty);
    internal virtual HashSet`1<RelProperty> get_ReferencedRelProperties();
    internal virtual bool IsRelPropertyReferenced(RelProperty relProperty);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ComparisonOp : ScalarOp {
    internal static ComparisonOp PatternEq;
    [CompilerGeneratedAttribute]
private bool <UseDatabaseNullSemantics>k__BackingField;
    internal int Arity { get; }
    internal bool UseDatabaseNullSemantics { get; internal set; }
    internal ComparisonOp(OpType opType, TypeUsage type);
    private ComparisonOp(OpType opType);
    private static ComparisonOp();
    internal virtual int get_Arity();
    [CompilerGeneratedAttribute]
internal bool get_UseDatabaseNullSemantics();
    [CompilerGeneratedAttribute]
internal void set_UseDatabaseNullSemantics(bool value);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ComplexTypeColumnMap : TypedColumnMap {
    private SimpleColumnMap m_nullSentinel;
    internal SimpleColumnMap NullSentinel { get; }
    internal ComplexTypeColumnMap(TypeUsage type, string name, ColumnMap[] properties, SimpleColumnMap nullSentinel);
    internal virtual SimpleColumnMap get_NullSentinel();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.ComputedVar : Var {
    internal ComputedVar(int id, TypeUsage type);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ConditionalOp : ScalarOp {
    internal static ConditionalOp PatternAnd;
    internal static ConditionalOp PatternOr;
    internal static ConditionalOp PatternIn;
    internal static ConditionalOp PatternNot;
    internal static ConditionalOp PatternIsNull;
    internal ConditionalOp(OpType optype, TypeUsage type);
    private ConditionalOp(OpType opType);
    private static ConditionalOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ConstantBaseOp : ScalarOp {
    private object m_value;
    internal object Value { get; }
    internal int Arity { get; }
    protected ConstantBaseOp(OpType opType, TypeUsage type, object value);
    protected ConstantBaseOp(OpType opType);
    internal virtual object get_Value();
    internal virtual int get_Arity();
    internal virtual bool IsEquivalent(Op other);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ConstantOp : ConstantBaseOp {
    internal static ConstantOp Pattern;
    internal ConstantOp(TypeUsage type, object value);
    private static ConstantOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ConstantPredicateOp : ConstantBaseOp {
    internal static ConstantPredicateOp Pattern;
    internal bool Value { get; }
    internal bool IsTrue { get; }
    internal bool IsFalse { get; }
    internal ConstantPredicateOp(TypeUsage type, bool value);
    private static ConstantPredicateOp();
    internal bool get_Value();
    internal bool get_IsTrue();
    internal bool get_IsFalse();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ConstrainedSortOp : SortBaseOp {
    [CompilerGeneratedAttribute]
private bool <WithTies>k__BackingField;
    internal static ConstrainedSortOp Pattern;
    internal bool WithTies { get; internal set; }
    internal int Arity { get; }
    internal ConstrainedSortOp(List`1<SortKey> sortKeys, bool withTies);
    private static ConstrainedSortOp();
    [CompilerGeneratedAttribute]
internal bool get_WithTies();
    [CompilerGeneratedAttribute]
internal void set_WithTies(bool value);
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.CrossApplyOp : ApplyBaseOp {
    internal static CrossApplyOp Instance;
    internal static CrossApplyOp Pattern;
    private static CrossApplyOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.CrossJoinOp : JoinBaseOp {
    internal static CrossJoinOp Instance;
    internal static CrossJoinOp Pattern;
    internal int Arity { get; }
    private static CrossJoinOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.DerefOp : ScalarOp {
    internal static DerefOp Pattern;
    internal int Arity { get; }
    internal DerefOp(TypeUsage type);
    private static DerefOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.DiscriminatedCollectionColumnMap : CollectionColumnMap {
    private SimpleColumnMap m_discriminator;
    private object m_discriminatorValue;
    internal SimpleColumnMap Discriminator { get; }
    internal object DiscriminatorValue { get; }
    internal DiscriminatedCollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys, SimpleColumnMap discriminator, object discriminatorValue);
    internal SimpleColumnMap get_Discriminator();
    internal object get_DiscriminatorValue();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.DiscriminatedEntityIdentity : EntityIdentity {
    private SimpleColumnMap m_entitySetColumn;
    private EntitySet[] m_entitySetMap;
    internal SimpleColumnMap EntitySetColumnMap { get; }
    internal EntitySet[] EntitySetMap { get; }
    internal DiscriminatedEntityIdentity(SimpleColumnMap entitySetColumn, EntitySet[] entitySetMap, SimpleColumnMap[] keyColumns);
    internal SimpleColumnMap get_EntitySetColumnMap();
    internal EntitySet[] get_EntitySetMap();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.DiscriminatedNewEntityOp : NewEntityBaseOp {
    private ExplicitDiscriminatorMap m_discriminatorMap;
    internal static DiscriminatedNewEntityOp Pattern;
    internal ExplicitDiscriminatorMap DiscriminatorMap { get; }
    internal DiscriminatedNewEntityOp(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap, EntitySet entitySet, List`1<RelProperty> relProperties);
    private static DiscriminatedNewEntityOp();
    internal ExplicitDiscriminatorMap get_DiscriminatorMap();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.DistinctOp : RelOp {
    private VarVec m_keys;
    internal static DistinctOp Pattern;
    internal int Arity { get; }
    internal VarVec Keys { get; }
    internal DistinctOp(VarVec keyVars);
    private static DistinctOp();
    internal virtual int get_Arity();
    internal VarVec get_Keys();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.Dump : BasicOpVisitor {
    private XmlWriter _writer;
    internal static Encoding DefaultEncoding;
    private Dump(Stream stream);
    private Dump(Stream stream, Encoding encoding);
    private static Dump();
    internal static string ToXml(Command itree);
    internal static string ToXml(Node subtree);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Begin(string name, Dictionary`2<string, object> attrs);
    internal void BeginExpression();
    internal void EndExpression();
    internal void End();
    internal void WriteString(string value);
    protected virtual void VisitDefault(Node n);
    protected virtual void VisitScalarOpDefault(ScalarOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    protected virtual void VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    private static string FormatVarList(StringBuilder sb, VarList varList);
    private static string FormatVarList(StringBuilder sb, List`1<SortKey> varList);
    private void VisitNewOp(Op op, Node n);
    public virtual void Visit(NewEntityOp op, Node n);
    public virtual void Visit(NewInstanceOp op, Node n);
    public virtual void Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual void Visit(NewMultisetOp op, Node n);
    public virtual void Visit(NewRecordOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    public virtual void Visit(SortOp op, Node n);
    public virtual void Visit(ConstrainedSortOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
    private void DumpVar(Var v);
    private void DumpVars(List`1<Var> vars);
    private void DumpTable(Table table);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ElementOp : ScalarOp {
    internal static ElementOp Pattern;
    internal int Arity { get; }
    internal ElementOp(TypeUsage type);
    private static ElementOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.EntityColumnMap : TypedColumnMap {
    private EntityIdentity m_entityIdentity;
    internal EntityIdentity EntityIdentity { get; }
    internal EntityColumnMap(TypeUsage type, string name, ColumnMap[] properties, EntityIdentity entityIdentity);
    internal EntityIdentity get_EntityIdentity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.EntityIdentity : object {
    private SimpleColumnMap[] m_keys;
    internal SimpleColumnMap[] Keys { get; }
    internal EntityIdentity(SimpleColumnMap[] keyColumns);
    internal SimpleColumnMap[] get_Keys();
}
internal class System.Data.Entity.Core.Query.InternalTrees.ExceptOp : SetOp {
    internal static ExceptOp Pattern;
    internal ExceptOp(VarVec outputs, VarMap left, VarMap right);
    private static ExceptOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ExistsOp : ScalarOp {
    internal static ExistsOp Pattern;
    internal int Arity { get; }
    internal ExistsOp(TypeUsage type);
    private static ExistsOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ExplicitDiscriminatorMap : object {
    private ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> m_typeMap;
    private EdmMember m_discriminatorProperty;
    private ReadOnlyCollection`1<EdmProperty> m_properties;
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> TypeMap { get; }
    internal EdmMember DiscriminatorProperty { get; }
    internal ReadOnlyCollection`1<EdmProperty> Properties { get; }
    internal ExplicitDiscriminatorMap(DiscriminatorMap template);
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> get_TypeMap();
    internal EdmMember get_DiscriminatorProperty();
    internal ReadOnlyCollection`1<EdmProperty> get_Properties();
    internal object GetTypeId(EntityType entityType);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ExtendedNodeInfo : NodeInfo {
    private VarVec m_localDefinitions;
    private VarVec m_definitions;
    private KeyVec m_keys;
    private VarVec m_nonNullableDefinitions;
    private VarVec m_nonNullableVisibleDefinitions;
    private RowCount m_minRows;
    private RowCount m_maxRows;
    internal VarVec LocalDefinitions { get; }
    internal VarVec Definitions { get; }
    internal KeyVec Keys { get; }
    internal VarVec NonNullableDefinitions { get; }
    internal VarVec NonNullableVisibleDefinitions { get; }
    internal RowCount MinRows { get; internal set; }
    internal RowCount MaxRows { get; internal set; }
    internal ExtendedNodeInfo(Command cmd);
    internal virtual void Clear();
    internal virtual void ComputeHashValue(Command cmd, Node n);
    internal VarVec get_LocalDefinitions();
    internal VarVec get_Definitions();
    internal KeyVec get_Keys();
    internal VarVec get_NonNullableDefinitions();
    internal VarVec get_NonNullableVisibleDefinitions();
    internal RowCount get_MinRows();
    internal void set_MinRows(RowCount value);
    internal RowCount get_MaxRows();
    internal void set_MaxRows(RowCount value);
    internal void SetRowCount(RowCount minRows, RowCount maxRows);
    internal void InitRowCountFrom(ExtendedNodeInfo source);
    [ConditionalAttribute("DEBUG")]
private void ValidateRowCount();
}
internal class System.Data.Entity.Core.Query.InternalTrees.FilterOp : RelOp {
    internal static FilterOp Instance;
    internal static FilterOp Pattern;
    internal int Arity { get; }
    private static FilterOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.FullOuterJoinOp : JoinBaseOp {
    internal static FullOuterJoinOp Instance;
    internal static FullOuterJoinOp Pattern;
    private static FullOuterJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.FunctionOp : ScalarOp {
    private EdmFunction m_function;
    internal static FunctionOp Pattern;
    internal EdmFunction Function { get; }
    internal FunctionOp(EdmFunction function);
    private static FunctionOp();
    internal EdmFunction get_Function();
    internal virtual bool IsEquivalent(Op other);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.GetEntityRefOp : ScalarOp {
    internal static GetEntityRefOp Pattern;
    internal int Arity { get; }
    internal GetEntityRefOp(TypeUsage type);
    private static GetEntityRefOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.GetRefKeyOp : ScalarOp {
    internal static GetRefKeyOp Pattern;
    internal int Arity { get; }
    internal GetRefKeyOp(TypeUsage type);
    private static GetRefKeyOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.GroupByBaseOp : RelOp {
    private VarVec m_keys;
    private VarVec m_outputs;
    internal VarVec Keys { get; }
    internal VarVec Outputs { get; }
    protected GroupByBaseOp(OpType opType);
    internal GroupByBaseOp(OpType opType, VarVec keys, VarVec outputs);
    internal VarVec get_Keys();
    internal VarVec get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.GroupByIntoOp : GroupByBaseOp {
    private VarVec m_inputs;
    internal static GroupByIntoOp Pattern;
    internal VarVec Inputs { get; }
    internal int Arity { get; }
    internal GroupByIntoOp(VarVec keys, VarVec inputs, VarVec outputs);
    private static GroupByIntoOp();
    internal VarVec get_Inputs();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.GroupByOp : GroupByBaseOp {
    internal static GroupByOp Pattern;
    internal int Arity { get; }
    internal GroupByOp(VarVec keys, VarVec outputs);
    private static GroupByOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.InnerJoinOp : JoinBaseOp {
    internal static InnerJoinOp Instance;
    internal static InnerJoinOp Pattern;
    private static InnerJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.InternalConstantOp : ConstantBaseOp {
    internal static InternalConstantOp Pattern;
    internal InternalConstantOp(TypeUsage type, object value);
    private static InternalConstantOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.IntersectOp : SetOp {
    internal static IntersectOp Pattern;
    internal IntersectOp(VarVec outputs, VarMap left, VarMap right);
    private static IntersectOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.IsOfOp : ScalarOp {
    private TypeUsage m_isOfType;
    private bool m_isOfOnly;
    internal static IsOfOp Pattern;
    internal int Arity { get; }
    internal TypeUsage IsOfType { get; }
    internal bool IsOfOnly { get; }
    internal IsOfOp(TypeUsage isOfType, bool isOfOnly, TypeUsage type);
    private static IsOfOp();
    internal virtual int get_Arity();
    internal TypeUsage get_IsOfType();
    internal bool get_IsOfOnly();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.JoinBaseOp : RelOp {
    internal int Arity { get; }
    internal JoinBaseOp(OpType opType);
    internal virtual int get_Arity();
}
internal class System.Data.Entity.Core.Query.InternalTrees.KeyVec : object {
    private VarVec m_keys;
    private bool m_noKeys;
    internal VarVec KeyVars { get; }
    internal bool NoKeys { get; internal set; }
    internal KeyVec(Command itree);
    internal void InitFrom(KeyVec keyset);
    internal void InitFrom(IEnumerable`1<Var> varSet);
    internal void InitFrom(IEnumerable`1<Var> varSet, bool ignoreParameters);
    internal void InitFrom(KeyVec left, KeyVec right);
    internal void InitFrom(List`1<KeyVec> keyVecList);
    internal void Clear();
    internal VarVec get_KeyVars();
    internal bool get_NoKeys();
    internal void set_NoKeys(bool value);
}
internal class System.Data.Entity.Core.Query.InternalTrees.LeafOp : RulePatternOp {
    internal static LeafOp Instance;
    internal static LeafOp Pattern;
    internal int Arity { get; }
    private static LeafOp();
    internal virtual int get_Arity();
}
internal class System.Data.Entity.Core.Query.InternalTrees.LeftOuterJoinOp : JoinBaseOp {
    internal static LeftOuterJoinOp Instance;
    internal static LeftOuterJoinOp Pattern;
    private static LeftOuterJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.LikeOp : ScalarOp {
    internal static LikeOp Pattern;
    internal int Arity { get; }
    internal LikeOp(TypeUsage boolType);
    private static LikeOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.MultipleDiscriminatorPolymorphicColumnMap : TypedColumnMap {
    private SimpleColumnMap[] m_typeDiscriminators;
    private Dictionary`2<EntityType, TypedColumnMap> m_typeChoices;
    private Func`2<Object[], EntityType> m_discriminate;
    internal SimpleColumnMap[] TypeDiscriminators { get; }
    internal Dictionary`2<EntityType, TypedColumnMap> TypeChoices { get; }
    internal Func`2<Object[], EntityType> Discriminate { get; }
    internal MultipleDiscriminatorPolymorphicColumnMap(TypeUsage type, string name, ColumnMap[] baseTypeColumns, SimpleColumnMap[] typeDiscriminators, Dictionary`2<EntityType, TypedColumnMap> typeChoices, Func`2<Object[], EntityType> discriminate);
    internal SimpleColumnMap[] get_TypeDiscriminators();
    internal Dictionary`2<EntityType, TypedColumnMap> get_TypeChoices();
    internal Func`2<Object[], EntityType> get_Discriminate();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.MultiStreamNestOp : NestBaseOp {
    internal MultiStreamNestOp(List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NavigateOp : ScalarOp {
    private RelProperty m_property;
    internal static NavigateOp Pattern;
    internal int Arity { get; }
    internal RelProperty RelProperty { get; }
    internal RelationshipType Relationship { get; }
    internal RelationshipEndMember FromEnd { get; }
    internal RelationshipEndMember ToEnd { get; }
    internal NavigateOp(TypeUsage type, RelProperty relProperty);
    private static NavigateOp();
    internal virtual int get_Arity();
    internal RelProperty get_RelProperty();
    internal RelationshipType get_Relationship();
    internal RelationshipEndMember get_FromEnd();
    internal RelationshipEndMember get_ToEnd();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.NestBaseOp : PhysicalOp {
    private List`1<SortKey> m_prefixSortKeys;
    private VarVec m_outputs;
    private List`1<CollectionInfo> m_collectionInfoList;
    internal List`1<SortKey> PrefixSortKeys { get; }
    internal VarVec Outputs { get; }
    internal List`1<CollectionInfo> CollectionInfo { get; }
    internal NestBaseOp(OpType opType, List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    internal List`1<SortKey> get_PrefixSortKeys();
    internal VarVec get_Outputs();
    internal List`1<CollectionInfo> get_CollectionInfo();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.NewEntityBaseOp : ScalarOp {
    private bool m_scoped;
    private EntitySet m_entitySet;
    private List`1<RelProperty> m_relProperties;
    internal bool Scoped { get; }
    internal EntitySet EntitySet { get; }
    internal List`1<RelProperty> RelationshipProperties { get; }
    internal NewEntityBaseOp(OpType opType, TypeUsage type, bool scoped, EntitySet entitySet, List`1<RelProperty> relProperties);
    protected NewEntityBaseOp(OpType opType);
    internal bool get_Scoped();
    internal EntitySet get_EntitySet();
    internal List`1<RelProperty> get_RelationshipProperties();
}
internal class System.Data.Entity.Core.Query.InternalTrees.NewEntityOp : NewEntityBaseOp {
    internal static NewEntityOp Pattern;
    internal NewEntityOp(TypeUsage type, List`1<RelProperty> relProperties, bool scoped, EntitySet entitySet);
    private static NewEntityOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NewInstanceOp : ScalarOp {
    internal static NewInstanceOp Pattern;
    internal NewInstanceOp(TypeUsage type);
    private static NewInstanceOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NewMultisetOp : ScalarOp {
    internal static NewMultisetOp Pattern;
    internal NewMultisetOp(TypeUsage type);
    private static NewMultisetOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NewRecordOp : ScalarOp {
    private List`1<EdmProperty> m_fields;
    internal static NewRecordOp Pattern;
    internal List`1<EdmProperty> Properties { get; }
    internal NewRecordOp(TypeUsage type);
    internal NewRecordOp(TypeUsage type, List`1<EdmProperty> fields);
    private static NewRecordOp();
    internal bool GetFieldPosition(EdmProperty field, Int32& fieldPosition);
    internal List`1<EdmProperty> get_Properties();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.Node : object {
    private int m_id;
    private List`1<Node> m_children;
    private NodeInfo m_nodeInfo;
    [CompilerGeneratedAttribute]
private Op <Op>k__BackingField;
    internal List`1<Node> Children { get; }
    internal Op Op { get; internal set; }
    internal Node Child0 { get; internal set; }
    internal bool HasChild0 { get; }
    internal Node Child1 { get; internal set; }
    internal bool HasChild1 { get; }
    internal Node Child2 { get; internal set; }
    internal Node Child3 { get; }
    internal bool HasChild2 { get; }
    internal bool HasChild3 { get; }
    internal bool IsNodeInfoInitialized { get; }
    internal Node(int nodeId, Op op, List`1<Node> children);
    internal Node(Op op, Node[] children);
    internal List`1<Node> get_Children();
    [CompilerGeneratedAttribute]
internal Op get_Op();
    [CompilerGeneratedAttribute]
internal void set_Op(Op value);
    internal Node get_Child0();
    internal void set_Child0(Node value);
    internal bool get_HasChild0();
    internal Node get_Child1();
    internal void set_Child1(Node value);
    internal bool get_HasChild1();
    internal Node get_Child2();
    internal void set_Child2(Node value);
    internal Node get_Child3();
    internal bool get_HasChild2();
    internal bool get_HasChild3();
    internal bool IsEquivalent(Node other);
    internal bool get_IsNodeInfoInitialized();
    internal NodeInfo GetNodeInfo(Command command);
    internal ExtendedNodeInfo GetExtendedNodeInfo(Command command);
    private void InitializeNodeInfo(Command command);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NodeCounter : BasicOpVisitorOfT`1<int> {
    internal static int Count(Node subTree);
    protected virtual int VisitDefault(Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NodeInfo : object {
    private VarVec m_externalReferences;
    protected int m_hashValue;
    internal VarVec ExternalReferences { get; }
    internal int HashValue { get; }
    internal NodeInfo(Command cmd);
    internal virtual void Clear();
    internal VarVec get_ExternalReferences();
    internal int get_HashValue();
    internal static int GetHashValue(VarVec vec);
    internal virtual void ComputeHashValue(Command cmd, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NodeInfoVisitor : BasicOpVisitorOfT`1<NodeInfo> {
    private Command m_command;
    internal NodeInfoVisitor(Command command);
    internal void RecomputeNodeInfo(Node n);
    private NodeInfo GetNodeInfo(Node n);
    private ExtendedNodeInfo GetExtendedNodeInfo(Node n);
    private NodeInfo InitNodeInfo(Node n);
    private ExtendedNodeInfo InitExtendedNodeInfo(Node n);
    protected virtual NodeInfo VisitDefault(Node n);
    private static bool IsDefinitionNonNullable(Node definition, VarVec nonNullableInputs);
    public virtual NodeInfo Visit(VarRefOp op, Node n);
    protected virtual NodeInfo VisitRelOpDefault(RelOp op, Node n);
    protected virtual NodeInfo VisitTableOp(ScanTableBaseOp op, Node n);
    public virtual NodeInfo Visit(UnnestOp op, Node n);
    internal static Dictionary`2<Var, Var> ComputeVarRemappings(Node varDefListNode);
    public virtual NodeInfo Visit(ProjectOp op, Node n);
    public virtual NodeInfo Visit(FilterOp op, Node n);
    protected virtual NodeInfo VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual NodeInfo Visit(CrossJoinOp op, Node n);
    protected virtual NodeInfo VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual NodeInfo VisitApplyOp(ApplyBaseOp op, Node n);
    protected virtual NodeInfo VisitSetOp(SetOp op, Node n);
    protected virtual NodeInfo VisitSortOp(SortBaseOp op, Node n);
    public virtual NodeInfo Visit(DistinctOp op, Node n);
    public virtual NodeInfo Visit(SingleRowOp op, Node n);
    public virtual NodeInfo Visit(SingleRowTableOp op, Node n);
    public virtual NodeInfo Visit(PhysicalProjectOp op, Node n);
    protected virtual NodeInfo VisitNestOp(NestBaseOp op, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NullOp : ConstantBaseOp {
    internal static NullOp Pattern;
    internal NullOp(TypeUsage type);
    private static NullOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.NullSentinelOp : ConstantBaseOp {
    internal static NullSentinelOp Pattern;
    internal NullSentinelOp(TypeUsage type, object value);
    private static NullSentinelOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.Op : object {
    private OpType m_opType;
    internal static int ArityVarying;
    internal OpType OpType { get; }
    internal int Arity { get; }
    internal bool IsScalarOp { get; }
    internal bool IsRulePatternOp { get; }
    internal bool IsRelOp { get; }
    internal bool IsAncillaryOp { get; }
    internal bool IsPhysicalOp { get; }
    internal TypeUsage Type { get; internal set; }
    internal Op(OpType opType);
    internal OpType get_OpType();
    internal virtual int get_Arity();
    internal virtual bool get_IsScalarOp();
    internal virtual bool get_IsRulePatternOp();
    internal virtual bool get_IsRelOp();
    internal virtual bool get_IsAncillaryOp();
    internal virtual bool get_IsPhysicalOp();
    internal virtual bool IsEquivalent(Op other);
    internal virtual TypeUsage get_Type();
    internal virtual void set_Type(TypeUsage value);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.OpCopier : BasicOpVisitorOfNode {
    private Command m_srcCmd;
    protected Command m_destCmd;
    protected VarMap m_varMap;
    protected OpCopier(Command cmd);
    private OpCopier(Command destCommand, Command sourceCommand);
    internal static Node Copy(Command cmd, Node n);
    internal static Node Copy(Command cmd, Node node, VarList varList, VarList& newVarList);
    internal static Node Copy(Command cmd, Node n, VarMap& varMap);
    internal static List`1<SortKey> Copy(Command cmd, List`1<SortKey> sortKeys);
    private Var GetMappedVar(Var v);
    private void SetMappedVar(Var v, Var mappedVar);
    private void MapTable(Table newTable, Table oldTable);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.InternalTrees.OpCopier/<MapVars>d__12")]
private IEnumerable`1<Var> MapVars(IEnumerable`1<Var> vars);
    private VarVec Copy(VarVec vars);
    private VarList Copy(VarList varList);
    private SortKey Copy(SortKey sortKey);
    private List`1<SortKey> Copy(List`1<SortKey> sortKeys);
    protected Node CopyNode(Node n);
    private List`1<Node> ProcessChildren(Node n);
    private Node CopyDefault(Op op, Node original);
    public virtual Node Visit(Op op, Node n);
    public virtual Node Visit(ConstantOp op, Node n);
    public virtual Node Visit(NullOp op, Node n);
    public virtual Node Visit(ConstantPredicateOp op, Node n);
    public virtual Node Visit(InternalConstantOp op, Node n);
    public virtual Node Visit(NullSentinelOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RelPropertyOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ComparisonOp op, Node n);
    public virtual Node Visit(LikeOp op, Node n);
    public virtual Node Visit(AggregateOp op, Node n);
    public virtual Node Visit(NewInstanceOp op, Node n);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual Node Visit(NewMultisetOp op, Node n);
    public virtual Node Visit(NewRecordOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    public virtual Node Visit(ArithmeticOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
    public virtual Node Visit(CastOp op, Node n);
    public virtual Node Visit(SoftCastOp op, Node n);
    public virtual Node Visit(DerefOp op, Node n);
    public virtual Node Visit(NavigateOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(GetRefKeyOp op, Node n);
    public virtual Node Visit(GetEntityRefOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    public virtual Node Visit(CrossJoinOp op, Node n);
    public virtual Node Visit(InnerJoinOp op, Node n);
    public virtual Node Visit(LeftOuterJoinOp op, Node n);
    public virtual Node Visit(FullOuterJoinOp op, Node n);
    public virtual Node Visit(CrossApplyOp op, Node n);
    public virtual Node Visit(OuterApplyOp op, Node n);
    private Node CopySetOp(SetOp op, Node n);
    public virtual Node Visit(UnionAllOp op, Node n);
    public virtual Node Visit(IntersectOp op, Node n);
    public virtual Node Visit(ExceptOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(SingleRowOp op, Node n);
    public virtual Node Visit(SingleRowTableOp op, Node n);
    public virtual Node Visit(VarDefOp op, Node n);
    public virtual Node Visit(VarDefListOp op, Node n);
    private ColumnMap Copy(ColumnMap columnMap);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    private Node VisitNestOp(Node n);
    public virtual Node Visit(SingleStreamNestOp op, Node n);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.OpDelegate : MulticastDelegate {
    public OpDelegate(object object, IntPtr method);
    public virtual void Invoke(RuleProcessingContext context, Node node);
    public virtual IAsyncResult BeginInvoke(RuleProcessingContext context, Node node, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Data.Entity.Core.Query.InternalTrees.OpType : Enum {
    public int value__;
    public static OpType Constant;
    public static OpType InternalConstant;
    public static OpType NullSentinel;
    public static OpType Null;
    public static OpType ConstantPredicate;
    public static OpType VarRef;
    public static OpType GT;
    public static OpType GE;
    public static OpType LE;
    public static OpType LT;
    public static OpType EQ;
    public static OpType NE;
    public static OpType Like;
    public static OpType Plus;
    public static OpType Minus;
    public static OpType Multiply;
    public static OpType Divide;
    public static OpType Modulo;
    public static OpType UnaryMinus;
    public static OpType And;
    public static OpType Or;
    public static OpType In;
    public static OpType Not;
    public static OpType IsNull;
    public static OpType Case;
    public static OpType Treat;
    public static OpType IsOf;
    public static OpType Cast;
    public static OpType SoftCast;
    public static OpType Aggregate;
    public static OpType Function;
    public static OpType RelProperty;
    public static OpType Property;
    public static OpType NewEntity;
    public static OpType NewInstance;
    public static OpType DiscriminatedNewEntity;
    public static OpType NewMultiset;
    public static OpType NewRecord;
    public static OpType GetRefKey;
    public static OpType GetEntityRef;
    public static OpType Ref;
    public static OpType Exists;
    public static OpType Element;
    public static OpType Collect;
    public static OpType Deref;
    public static OpType Navigate;
    public static OpType ScanTable;
    public static OpType ScanView;
    public static OpType Filter;
    public static OpType Project;
    public static OpType InnerJoin;
    public static OpType LeftOuterJoin;
    public static OpType FullOuterJoin;
    public static OpType CrossJoin;
    public static OpType CrossApply;
    public static OpType OuterApply;
    public static OpType Unnest;
    public static OpType Sort;
    public static OpType ConstrainedSort;
    public static OpType GroupBy;
    public static OpType GroupByInto;
    public static OpType UnionAll;
    public static OpType Intersect;
    public static OpType Except;
    public static OpType Distinct;
    public static OpType SingleRow;
    public static OpType SingleRowTable;
    public static OpType VarDef;
    public static OpType VarDefList;
    public static OpType Leaf;
    public static OpType PhysicalProject;
    public static OpType SingleStreamNest;
    public static OpType MultiStreamNest;
    public static OpType MaxMarker;
    public static OpType NotValid;
}
internal class System.Data.Entity.Core.Query.InternalTrees.OuterApplyOp : ApplyBaseOp {
    internal static OuterApplyOp Instance;
    internal static OuterApplyOp Pattern;
    private static OuterApplyOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ParameterVar : Var {
    private string m_paramName;
    internal string ParameterName { get; }
    internal ParameterVar(int id, TypeUsage type, string paramName);
    internal string get_ParameterName();
    internal virtual bool TryGetName(String& name);
}
internal class System.Data.Entity.Core.Query.InternalTrees.PatternMatchRule : Rule {
    private Node m_pattern;
    internal PatternMatchRule(Node pattern, ProcessNodeDelegate processDelegate);
    private bool Match(Node pattern, Node original);
    internal virtual bool Match(Node node);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.PhysicalOp : Op {
    internal bool IsPhysicalOp { get; }
    internal PhysicalOp(OpType opType);
    internal virtual bool get_IsPhysicalOp();
}
internal class System.Data.Entity.Core.Query.InternalTrees.PhysicalProjectOp : PhysicalOp {
    internal static PhysicalProjectOp Pattern;
    private SimpleCollectionColumnMap m_columnMap;
    private VarList m_outputVars;
    internal SimpleCollectionColumnMap ColumnMap { get; }
    internal VarList Outputs { get; }
    internal PhysicalProjectOp(VarList outputVars, SimpleCollectionColumnMap columnMap);
    private static PhysicalProjectOp();
    internal SimpleCollectionColumnMap get_ColumnMap();
    internal VarList get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ProjectOp : RelOp {
    private VarVec m_vars;
    internal static ProjectOp Pattern;
    internal int Arity { get; }
    internal VarVec Outputs { get; }
    internal ProjectOp(VarVec vars);
    private static ProjectOp();
    internal virtual int get_Arity();
    internal VarVec get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.PropertyOp : ScalarOp {
    private EdmMember m_property;
    internal static PropertyOp Pattern;
    internal int Arity { get; }
    internal EdmMember PropertyInfo { get; }
    internal PropertyOp(TypeUsage type, EdmMember property);
    private static PropertyOp();
    internal virtual int get_Arity();
    internal EdmMember get_PropertyInfo();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
    internal virtual bool IsEquivalent(Op other);
}
internal class System.Data.Entity.Core.Query.InternalTrees.RecordColumnMap : StructuredColumnMap {
    private SimpleColumnMap m_nullSentinel;
    internal SimpleColumnMap NullSentinel { get; }
    internal RecordColumnMap(TypeUsage type, string name, ColumnMap[] properties, SimpleColumnMap nullSentinel);
    internal virtual SimpleColumnMap get_NullSentinel();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Entity.Core.Query.InternalTrees.RefColumnMap : ColumnMap {
    private EntityIdentity m_entityIdentity;
    internal EntityIdentity EntityIdentity { get; }
    internal RefColumnMap(TypeUsage type, string name, EntityIdentity entityIdentity);
    internal EntityIdentity get_EntityIdentity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Entity.Core.Query.InternalTrees.RefOp : ScalarOp {
    private EntitySet m_entitySet;
    internal static RefOp Pattern;
    internal int Arity { get; }
    internal EntitySet EntitySet { get; }
    internal RefOp(EntitySet entitySet, TypeUsage type);
    private static RefOp();
    internal virtual int get_Arity();
    internal EntitySet get_EntitySet();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.RelOp : Op {
    internal bool IsRelOp { get; }
    internal RelOp(OpType opType);
    internal virtual bool get_IsRelOp();
}
internal class System.Data.Entity.Core.Query.InternalTrees.RelProperty : object {
    private RelationshipType m_relationshipType;
    private RelationshipEndMember m_fromEnd;
    private RelationshipEndMember m_toEnd;
    public RelationshipType Relationship { get; }
    public RelationshipEndMember FromEnd { get; }
    public RelationshipEndMember ToEnd { get; }
    internal RelProperty(RelationshipType relationshipType, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    public RelationshipType get_Relationship();
    public RelationshipEndMember get_FromEnd();
    public RelationshipEndMember get_ToEnd();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.RelPropertyHelper : object {
    private Dictionary`2<EntityTypeBase, List`1<RelProperty>> _relPropertyMap;
    private HashSet`1<RelProperty> _interestingRelProperties;
    internal RelPropertyHelper(MetadataWorkspace ws, HashSet`1<RelProperty> interestingRelProperties);
    private void AddRelProperty(AssociationType associationType, AssociationEndMember fromEnd, AssociationEndMember toEnd);
    private void ProcessRelationship(RelationshipType relationshipType);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.InternalTrees.RelPropertyHelper/<GetDeclaredOnlyRelProperties>d__5")]
internal IEnumerable`1<RelProperty> GetDeclaredOnlyRelProperties(EntityTypeBase entityType);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.InternalTrees.RelPropertyHelper/<GetRelProperties>d__6")]
internal IEnumerable`1<RelProperty> GetRelProperties(EntityTypeBase entityType);
}
internal class System.Data.Entity.Core.Query.InternalTrees.RelPropertyOp : ScalarOp {
    private RelProperty m_property;
    internal static RelPropertyOp Pattern;
    internal int Arity { get; }
    public RelProperty PropertyInfo { get; }
    internal RelPropertyOp(TypeUsage type, RelProperty property);
    private static RelPropertyOp();
    internal virtual int get_Arity();
    public RelProperty get_PropertyInfo();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal enum System.Data.Entity.Core.Query.InternalTrees.RowCount : Enum {
    public byte value__;
    public static RowCount Zero;
    public static RowCount One;
    public static RowCount Unbounded;
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.Rule : object {
    private ProcessNodeDelegate m_nodeDelegate;
    private OpType m_opType;
    internal OpType RuleOpType { get; }
    protected Rule(OpType opType, ProcessNodeDelegate nodeProcessDelegate);
    internal abstract virtual bool Match(Node node);
    internal bool Apply(RuleProcessingContext ruleProcessingContext, Node node, Node& newNode);
    internal OpType get_RuleOpType();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.RulePatternOp : Op {
    internal bool IsRulePatternOp { get; }
    internal RulePatternOp(OpType opType);
    internal virtual bool get_IsRulePatternOp();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.RuleProcessingContext : object {
    private Command m_command;
    internal Command Command { get; }
    internal RuleProcessingContext(Command command);
    internal Command get_Command();
    internal virtual void PreProcess(Node node);
    internal virtual void PreProcessSubTree(Node node);
    internal virtual void PostProcess(Node node, Rule rule);
    internal virtual void PostProcessSubTree(Node node);
    internal virtual int GetHashCode(Node node);
}
internal class System.Data.Entity.Core.Query.InternalTrees.RuleProcessor : object {
    private Dictionary`2<SubTreeId, SubTreeId> m_processedNodeMap;
    private static bool ApplyRulesToNode(RuleProcessingContext context, ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> rules, Node currentNode, Node& newNode);
    private Node ApplyRulesToSubtree(RuleProcessingContext context, ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> rules, Node subTreeRoot, Node parent, int childIndexInParent);
    private static bool ShouldApplyRules(Node node, Node parent);
    internal Node ApplyRulesToSubtree(RuleProcessingContext context, ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> rules, Node subTreeRoot);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ScalarColumnMap : SimpleColumnMap {
    private int m_commandId;
    private int m_columnPos;
    internal int CommandId { get; }
    internal int ColumnPos { get; }
    internal ScalarColumnMap(TypeUsage type, string name, int commandId, int columnPos);
    internal int get_CommandId();
    internal int get_ColumnPos();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ScalarOp : Op {
    private TypeUsage m_type;
    internal bool IsScalarOp { get; }
    internal TypeUsage Type { get; internal set; }
    internal bool IsAggregateOp { get; }
    internal ScalarOp(OpType opType, TypeUsage type);
    protected ScalarOp(OpType opType);
    internal virtual bool get_IsScalarOp();
    internal virtual bool IsEquivalent(Op other);
    internal virtual TypeUsage get_Type();
    internal virtual void set_Type(TypeUsage value);
    internal virtual bool get_IsAggregateOp();
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.ScanTableBaseOp : RelOp {
    private Table m_table;
    internal Table Table { get; }
    protected ScanTableBaseOp(OpType opType, Table table);
    protected ScanTableBaseOp(OpType opType);
    internal Table get_Table();
}
internal class System.Data.Entity.Core.Query.InternalTrees.ScanTableOp : ScanTableBaseOp {
    internal static ScanTableOp Pattern;
    internal int Arity { get; }
    internal ScanTableOp(Table table);
    private static ScanTableOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.ScanViewOp : ScanTableBaseOp {
    internal static ScanViewOp Pattern;
    internal int Arity { get; }
    internal ScanViewOp(Table table);
    private static ScanViewOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.SetOp : RelOp {
    private VarMap[] m_varMap;
    private VarVec m_outputVars;
    internal int Arity { get; }
    internal VarMap[] VarMap { get; }
    internal VarVec Outputs { get; }
    internal SetOp(OpType opType, VarVec outputs, VarMap left, VarMap right);
    protected SetOp(OpType opType);
    internal virtual int get_Arity();
    internal VarMap[] get_VarMap();
    internal VarVec get_Outputs();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SetOpVar : Var {
    internal SetOpVar(int id, TypeUsage type);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SimpleCollectionColumnMap : CollectionColumnMap {
    internal SimpleCollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.SimpleColumnMap : ColumnMap {
    internal SimpleColumnMap(TypeUsage type, string name);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SimpleEntityIdentity : EntityIdentity {
    private EntitySet m_entitySet;
    internal EntitySet EntitySet { get; }
    internal SimpleEntityIdentity(EntitySet entitySet, SimpleColumnMap[] keyColumns);
    internal EntitySet get_EntitySet();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SimplePolymorphicColumnMap : TypedColumnMap {
    private SimpleColumnMap m_typeDiscriminator;
    private Dictionary`2<object, TypedColumnMap> m_typedColumnMap;
    internal SimpleColumnMap TypeDiscriminator { get; }
    internal Dictionary`2<object, TypedColumnMap> TypeChoices { get; }
    internal SimplePolymorphicColumnMap(TypeUsage type, string name, ColumnMap[] baseTypeColumns, SimpleColumnMap typeDiscriminator, Dictionary`2<object, TypedColumnMap> typeChoices);
    internal SimpleColumnMap get_TypeDiscriminator();
    internal Dictionary`2<object, TypedColumnMap> get_TypeChoices();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SimpleRule : Rule {
    internal SimpleRule(OpType opType, ProcessNodeDelegate processDelegate);
    internal virtual bool Match(Node node);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SingleRowOp : RelOp {
    internal static SingleRowOp Instance;
    internal static SingleRowOp Pattern;
    internal int Arity { get; }
    private static SingleRowOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SingleRowTableOp : RelOp {
    internal static SingleRowTableOp Instance;
    internal static SingleRowTableOp Pattern;
    internal int Arity { get; }
    private static SingleRowTableOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SingleStreamNestOp : NestBaseOp {
    private VarVec m_keys;
    private Var m_discriminator;
    private List`1<SortKey> m_postfixSortKeys;
    internal int Arity { get; }
    internal Var Discriminator { get; }
    internal List`1<SortKey> PostfixSortKeys { get; }
    internal VarVec Keys { get; }
    internal SingleStreamNestOp(VarVec keys, List`1<SortKey> prefixSortKeys, List`1<SortKey> postfixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList, Var discriminatorVar);
    internal virtual int get_Arity();
    internal Var get_Discriminator();
    internal List`1<SortKey> get_PostfixSortKeys();
    internal VarVec get_Keys();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.SoftCastOp : ScalarOp {
    internal static SoftCastOp Pattern;
    internal int Arity { get; }
    internal SoftCastOp(TypeUsage type);
    private static SoftCastOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.SortBaseOp : RelOp {
    private List`1<SortKey> m_keys;
    internal List`1<SortKey> Keys { get; }
    internal SortBaseOp(OpType opType);
    internal SortBaseOp(OpType opType, List`1<SortKey> sortKeys);
    internal List`1<SortKey> get_Keys();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SortKey : object {
    private bool m_asc;
    private string m_collation;
    [CompilerGeneratedAttribute]
private Var <Var>k__BackingField;
    internal Var Var { get; internal set; }
    internal bool AscendingSort { get; }
    internal string Collation { get; }
    internal SortKey(Var v, bool asc, string collation);
    [CompilerGeneratedAttribute]
internal Var get_Var();
    [CompilerGeneratedAttribute]
internal void set_Var(Var value);
    internal bool get_AscendingSort();
    internal string get_Collation();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SortOp : SortBaseOp {
    internal static SortOp Pattern;
    internal int Arity { get; }
    internal SortOp(List`1<SortKey> sortKeys);
    private static SortOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.StructuredColumnMap : ColumnMap {
    private ColumnMap[] m_properties;
    internal SimpleColumnMap NullSentinel { get; }
    internal ColumnMap[] Properties { get; }
    internal StructuredColumnMap(TypeUsage type, string name, ColumnMap[] properties);
    internal virtual SimpleColumnMap get_NullSentinel();
    internal ColumnMap[] get_Properties();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.SubTreeId : object {
    public Node m_subTreeRoot;
    private int m_hashCode;
    private Node m_parent;
    private int m_childIndex;
    internal SubTreeId(RuleProcessingContext context, Node node, Node parent, int childIndex);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Data.Entity.Core.Query.InternalTrees.Table : object {
    private TableMD m_tableMetadata;
    private VarList m_columns;
    private VarVec m_referencedColumns;
    private VarVec m_keys;
    private VarVec m_nonnullableColumns;
    private int m_tableId;
    internal TableMD TableMetadata { get; }
    internal VarList Columns { get; }
    internal VarVec ReferencedColumns { get; }
    internal VarVec NonNullableColumns { get; }
    internal VarVec Keys { get; }
    internal int TableId { get; }
    internal Table(Command command, TableMD tableMetadata, int tableId);
    internal TableMD get_TableMetadata();
    internal VarList get_Columns();
    internal VarVec get_ReferencedColumns();
    internal VarVec get_NonNullableColumns();
    internal VarVec get_Keys();
    internal int get_TableId();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.TableMD : object {
    private List`1<ColumnMD> m_columns;
    private List`1<ColumnMD> m_keys;
    private EntitySetBase m_extent;
    private bool m_flattened;
    internal EntitySetBase Extent { get; }
    internal List`1<ColumnMD> Columns { get; }
    internal List`1<ColumnMD> Keys { get; }
    internal bool Flattened { get; }
    private TableMD(EntitySetBase extent);
    internal TableMD(TypeUsage type, EntitySetBase extent);
    internal TableMD(IEnumerable`1<EdmProperty> properties, IEnumerable`1<EdmMember> keyProperties, EntitySetBase extent);
    internal EntitySetBase get_Extent();
    internal List`1<ColumnMD> get_Columns();
    internal List`1<ColumnMD> get_Keys();
    internal bool get_Flattened();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.TreatOp : ScalarOp {
    private bool m_isFake;
    internal static TreatOp Pattern;
    internal int Arity { get; }
    internal bool IsFakeTreat { get; }
    internal TreatOp(TypeUsage type, bool isFake);
    private static TreatOp();
    internal virtual int get_Arity();
    internal bool get_IsFakeTreat();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.TypedColumnMap : StructuredColumnMap {
    internal TypedColumnMap(TypeUsage type, string name, ColumnMap[] properties);
}
internal class System.Data.Entity.Core.Query.InternalTrees.UnionAllOp : SetOp {
    private Var m_branchDiscriminator;
    internal static UnionAllOp Pattern;
    internal Var BranchDiscriminator { get; }
    internal UnionAllOp(VarVec outputs, VarMap left, VarMap right, Var branchDiscriminator);
    private static UnionAllOp();
    internal Var get_BranchDiscriminator();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.UnnestOp : RelOp {
    private Table m_table;
    private Var m_var;
    internal static UnnestOp Pattern;
    internal Var Var { get; }
    internal Table Table { get; }
    internal int Arity { get; }
    internal UnnestOp(Var v, Table t);
    private static UnnestOp();
    internal Var get_Var();
    internal Table get_Table();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Entity.Core.Query.InternalTrees.Var : object {
    private int _id;
    private VarType _varType;
    private TypeUsage _type;
    internal int Id { get; }
    internal VarType VarType { get; }
    internal TypeUsage Type { get; }
    internal Var(int id, VarType varType, TypeUsage type);
    internal int get_Id();
    internal VarType get_VarType();
    internal TypeUsage get_Type();
    internal virtual bool TryGetName(String& name);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.VarDefListOp : AncillaryOp {
    internal static VarDefListOp Instance;
    internal static VarDefListOp Pattern;
    private static VarDefListOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Entity.Core.Query.InternalTrees.VarDefOp : AncillaryOp {
    private Var m_var;
    internal static VarDefOp Pattern;
    internal int Arity { get; }
    internal Var Var { get; }
    internal VarDefOp(Var v);
    private static VarDefOp();
    internal virtual int get_Arity();
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
[DebuggerDisplayAttribute("{{{ToString()}}}")]
internal class System.Data.Entity.Core.Query.InternalTrees.VarList : List`1<Var> {
    internal VarList(IEnumerable`1<Var> vars);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Query.InternalTrees.VarMap : object {
    private Dictionary`2<Var, Var> map;
    private Dictionary`2<Var, Var> reverseMap;
    public Var Item { get; public set; }
    public ICollection`1<Var> Keys { get; }
    public ICollection`1<Var> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private VarMap(Dictionary`2<Var, Var> map, Dictionary`2<Var, Var> reverseMap);
    internal VarMap GetReverseMap();
    public bool ContainsValue(Var value);
    public virtual string ToString();
    public sealed virtual Var get_Item(Var key);
    public sealed virtual void set_Item(Var key, Var value);
    public sealed virtual ICollection`1<Var> get_Keys();
    public sealed virtual ICollection`1<Var> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(Var key, Var value);
    public sealed virtual void Add(KeyValuePair`2<Var, Var> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<Var, Var> item);
    public sealed virtual bool ContainsKey(Var key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<Var, Var>> GetEnumerator();
    public sealed virtual bool Remove(Var key);
    public sealed virtual bool Remove(KeyValuePair`2<Var, Var> item);
    public sealed virtual bool TryGetValue(Var key, Var& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Entity.Core.Query.InternalTrees.VarRefColumnMap : SimpleColumnMap {
    private Var m_var;
    internal Var Var { get; }
    internal VarRefColumnMap(TypeUsage type, string name, Var v);
    internal VarRefColumnMap(Var v);
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.InternalTrees.VarRefOp : ScalarOp {
    private Var m_var;
    internal static VarRefOp Pattern;
    internal int Arity { get; }
    internal Var Var { get; }
    internal VarRefOp(Var v);
    private static VarRefOp();
    internal virtual int get_Arity();
    internal virtual bool IsEquivalent(Op other);
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal enum System.Data.Entity.Core.Query.InternalTrees.VarType : Enum {
    public int value__;
    public static VarType Parameter;
    public static VarType Column;
    public static VarType Computed;
    public static VarType SetOp;
    public static VarType NotValid;
}
internal class System.Data.Entity.Core.Query.InternalTrees.VarVec : object {
    private BitVec m_bitVector;
    private Command m_command;
    internal int Count { get; }
    internal bool IsEmpty { get; }
    internal Var First { get; }
    internal VarVec(Command command);
    internal void Clear();
    internal void And(VarVec other);
    internal void Or(VarVec other);
    internal void Minus(VarVec other);
    internal bool Overlaps(VarVec other);
    internal bool Subsumes(VarVec other);
    internal void InitFrom(VarVec other);
    internal void InitFrom(IEnumerable`1<Var> other);
    internal void InitFrom(IEnumerable`1<Var> other, bool ignoreParameters);
    public sealed virtual IEnumerator`1<Var> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal int get_Count();
    internal bool IsSet(Var v);
    internal void Set(Var v);
    internal void Clear(Var v);
    internal bool get_IsEmpty();
    internal Var get_First();
    internal VarVec Remap(IDictionary`2<Var, Var> varMap);
    private void Align(VarVec other);
    private void Align(int idx);
    public virtual string ToString();
    public VarVec Clone();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.AggregatePushdown : object {
    private Command m_command;
    private TryGetValue m_tryGetParent;
    private AggregatePushdown(Command command);
    internal static void Process(PlanCompiler planCompilerState);
    private void Process();
    private void TryProcessCandidate(KeyValuePair`2<Node, List`1<Node>> candidate, GroupAggregateVarInfo groupAggregateVarInfo);
    private static bool AreAllNodesSupportedForPropagation(IList`1<Node> nodes);
    private void FindPathsToLeastCommonAncestor(Node node1, Node node2, IList`1& ancestors1, IList`1& ancestors2);
    private IList`1<Node> FindAncestors(Node node);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.AggregatePushdownUtil : object {
    internal static bool IsVarRefOverGivenVar(Node node, Var var);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.AllPropertyRef : PropertyRef {
    internal static AllPropertyRef Instance;
    private static AllPropertyRef();
    internal virtual PropertyRef CreateNestedPropertyRef(PropertyRef p);
    public virtual string ToString();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.ApplyOpRules : object {
    internal static PatternMatchRule Rule_CrossApplyOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverProjectInternalConstantOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverProjectNullSentinelOverFilter;
    internal static PatternMatchRule Rule_CrossApplyOverProject;
    internal static PatternMatchRule Rule_OuterApplyOverProject;
    internal static PatternMatchRule Rule_CrossApplyOverAnything;
    internal static PatternMatchRule Rule_OuterApplyOverAnything;
    internal static PatternMatchRule Rule_CrossApplyIntoScalarSubquery;
    internal static PatternMatchRule Rule_OuterApplyIntoScalarSubquery;
    internal static PatternMatchRule Rule_CrossApplyOverLeftOuterJoinOverSingleRowTable;
    internal static Rule[] Rules;
    private static ApplyOpRules();
    private static bool ProcessApplyOverFilter(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool ProcessOuterApplyOverDummyProjectOverFilter(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool ProcessCrossApplyOverProject(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool ProcessOuterApplyOverProject(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool ProcessApplyOverAnything(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool ProcessApplyIntoScalarSubquery(RuleProcessingContext context, Node applyNode, Node& newNode);
    private static bool CanRewriteApply(Node rightChild, ExtendedNodeInfo applyRightChildNodeInfo, OpType applyKind);
    private static bool ProcessCrossApplyOverLeftOuterJoinOverSingleRowTable(RuleProcessingContext context, Node applyNode, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.AugmentedJoinNode : AugmentedNode {
    private List`1<ColumnVar> m_leftVars;
    private List`1<ColumnVar> m_rightVars;
    private Node m_otherPredicate;
    internal Node OtherPredicate { get; }
    internal List`1<ColumnVar> LeftVars { get; }
    internal List`1<ColumnVar> RightVars { get; }
    internal AugmentedJoinNode(int id, Node node, AugmentedNode leftChild, AugmentedNode rightChild, List`1<ColumnVar> leftVars, List`1<ColumnVar> rightVars, Node otherPredicate);
    internal AugmentedJoinNode(int id, Node node, List`1<AugmentedNode> children);
    internal Node get_OtherPredicate();
    internal List`1<ColumnVar> get_LeftVars();
    internal List`1<ColumnVar> get_RightVars();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.AugmentedNode : object {
    private int m_id;
    private Node m_node;
    protected AugmentedNode m_parent;
    private List`1<AugmentedNode> m_children;
    private List`1<JoinEdge> m_joinEdges;
    internal int Id { get; }
    internal Node Node { get; }
    internal AugmentedNode Parent { get; }
    internal List`1<AugmentedNode> Children { get; }
    internal List`1<JoinEdge> JoinEdges { get; }
    internal AugmentedNode(int id, Node node);
    internal AugmentedNode(int id, Node node, List`1<AugmentedNode> children);
    internal int get_Id();
    internal Node get_Node();
    internal AugmentedNode get_Parent();
    internal List`1<AugmentedNode> get_Children();
    internal List`1<JoinEdge> get_JoinEdges();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.AugmentedTableNode : AugmentedNode {
    private Table m_table;
    private AugmentedTableNode m_replacementTable;
    private int m_newLocationId;
    [CompilerGeneratedAttribute]
private int <LastVisibleId>k__BackingField;
    [CompilerGeneratedAttribute]
private VarVec <NullableColumns>k__BackingField;
    internal Table Table { get; }
    internal int LastVisibleId { get; internal set; }
    internal bool IsEliminated { get; }
    internal AugmentedTableNode ReplacementTable { get; internal set; }
    internal int NewLocationId { get; internal set; }
    internal bool IsMoved { get; }
    internal VarVec NullableColumns { get; internal set; }
    internal AugmentedTableNode(int id, Node node);
    internal Table get_Table();
    [CompilerGeneratedAttribute]
internal int get_LastVisibleId();
    [CompilerGeneratedAttribute]
internal void set_LastVisibleId(int value);
    internal bool get_IsEliminated();
    internal AugmentedTableNode get_ReplacementTable();
    internal void set_ReplacementTable(AugmentedTableNode value);
    internal int get_NewLocationId();
    internal void set_NewLocationId(int value);
    internal bool get_IsMoved();
    [CompilerGeneratedAttribute]
internal VarVec get_NullableColumns();
    [CompilerGeneratedAttribute]
internal void set_NullableColumns(VarVec value);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.CodeGen : object {
    private PlanCompiler m_compilerState;
    private List`1<Node> m_subCommands;
    private Command Command { get; }
    private CodeGen(PlanCompiler compilerState);
    internal static void Process(PlanCompiler compilerState, List`1& childCommands, ColumnMap& resultColumnMap, Int32& columnCount);
    private void Process(List`1& childCommands, ColumnMap& resultColumnMap, Int32& columnCount);
    private ColumnMap BuildResultColumnMap(PhysicalProjectOp projectOp);
    private Dictionary`2<Var, KeyValuePair`2<int, int>> BuildVarMap();
    private Command get_Command();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.CollectionVarInfo : VarInfo {
    private List`1<Var> m_newVars;
    internal Var NewVar { get; }
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal CollectionVarInfo(Var newVar);
    internal Var get_NewVar();
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ColumnMapProcessor : object {
    private IEnumerator`1<Var> m_varList;
    private VarInfo m_varInfo;
    private VarRefColumnMap m_columnMap;
    private StructuredTypeInfo m_typeInfo;
    private static string c_TypeIdColumnName;
    private static string c_EntitySetIdColumnName;
    private static string c_NullSentinelColumnName;
    internal ColumnMapProcessor(VarRefColumnMap columnMap, VarInfo varInfo, StructuredTypeInfo typeInfo);
    internal ColumnMap ExpandColumnMap();
    private Var GetNextVar();
    private ColumnMap CreateColumnMap(TypeUsage type, string name);
    private ComplexTypeColumnMap CreateComplexTypeColumnMap(TypeInfo typeInfo, string name, ComplexTypeColumnMap superTypeColumnMap, Dictionary`2<object, TypedColumnMap> discriminatorMap, List`1<TypedColumnMap> allMaps);
    private EntityColumnMap CreateEntityColumnMap(TypeInfo typeInfo, string name, EntityColumnMap superTypeColumnMap, Dictionary`2<object, TypedColumnMap> discriminatorMap, List`1<TypedColumnMap> allMaps, bool handleRelProperties);
    private void BuildRelPropertyColumnMaps(TypeInfo typeInfo, bool includeSupertypeRelProperties);
    private SimpleColumnMap CreateEntitySetIdColumnMap(EdmProperty prop);
    private SimplePolymorphicColumnMap CreatePolymorphicColumnMap(TypeInfo typeInfo, string name);
    private RecordColumnMap CreateRecordColumnMap(TypeInfo typeInfo, string name);
    private RefColumnMap CreateRefColumnMap(TypeInfo typeInfo, string name);
    private SimpleColumnMap CreateSimpleColumnMap(TypeUsage type, string name);
    private SimpleColumnMap CreateTypeIdColumnMap(EdmProperty prop);
    private ColumnMap CreateStructuralColumnMap(TypeUsage type, string name);
    private EntityIdentity CreateEntityIdentity(EntityType entityType, SimpleColumnMap entitySetIdColumnMap, SimpleColumnMap[] keyColumnMaps);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ColumnMapTranslator : ColumnMapVisitorWithResults`2<ColumnMap, ColumnMapTranslatorTranslationDelegate> {
    private static ColumnMapTranslator _instance;
    private static ColumnMapTranslator();
    private static Var GetReplacementVar(Var originalVar, IDictionary`2<Var, Var> replacementVarMap);
    internal static ColumnMap Translate(ColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, Dictionary`2<Var, ColumnMap> varToColumnMap);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, IDictionary`2<Var, Var> varToVarMap);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, Dictionary`2<Var, KeyValuePair`2<int, int>> varToCommandColumnMap);
    private void VisitList(TResultType[] tList, ColumnMapTranslatorTranslationDelegate translationDelegate);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, ColumnMapTranslatorTranslationDelegate translationDelegate);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(ComplexTypeColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(DiscriminatedCollectionColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(EntityColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(SimplePolymorphicColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(RecordColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(RefColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(ScalarColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(SimpleCollectionColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(VarRefColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ColumnMapTranslatorTranslationDelegate : MulticastDelegate {
    public ColumnMapTranslatorTranslationDelegate(object object, IntPtr method);
    public virtual ColumnMap Invoke(ColumnMap columnMap);
    public virtual IAsyncResult BeginInvoke(ColumnMap columnMap, AsyncCallback callback, object object);
    public virtual ColumnMap EndInvoke(IAsyncResult result);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.ConstrainedSortOpRules : object {
    internal static SimpleRule Rule_ConstrainedSortOpOverEmptySet;
    internal static Rule[] Rules;
    private static ConstrainedSortOpRules();
    private static bool ProcessConstrainedSortOpOverEmptySet(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ConstraintManager : object {
    private Dictionary`2<EntityContainer, EntityContainer> m_entityContainerMap;
    private Dictionary`2<ExtentPair, List`1<ForeignKeyConstraint>> m_parentChildRelationships;
    internal bool IsParentChildRelationship(EntitySetBase table1, EntitySetBase table2, List`1& constraints);
    internal void LoadRelationships(EntityContainer entityContainer);
    private static bool IsBinary(RelationshipType relationshipType);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.CTreeGenerator : BasicOpVisitorOfT`1<DbExpression> {
    private Command _iqtCommand;
    private DbQueryCommandTree _queryTree;
    private Dictionary`2<ParameterVar, DbParameterReferenceExpression> _addedParams;
    private Stack`1<IqtVarScope> _bindingScopes;
    private Stack`1<VarDefScope> _varScopes;
    private Dictionary`2<DbExpression, RelOpInfo> _relOpState;
    private AliasGenerator _applyAliases;
    private AliasGenerator _distinctAliases;
    private AliasGenerator _exceptAliases;
    private AliasGenerator _extentAliases;
    private AliasGenerator _filterAliases;
    private AliasGenerator _groupByAliases;
    private AliasGenerator _intersectAliases;
    private AliasGenerator _joinAliases;
    private AliasGenerator _projectAliases;
    private AliasGenerator _sortAliases;
    private AliasGenerator _unionAllAliases;
    private AliasGenerator _elementAliases;
    private AliasGenerator _singleRowTableAliases;
    private AliasGenerator _limitAliases;
    private AliasGenerator _skipAliases;
    private DbProviderManifest _providerManifest;
    private DbProviderManifest ProviderManifest { get; }
    private CTreeGenerator(Command itree, Node toConvert);
    internal static DbCommandTree Generate(Command itree, Node toConvert);
    private void AssertRelOp(DbExpression expr);
    private RelOpInfo PublishRelOp(string name, DbExpression expr, VarInfoList publishedVars);
    private RelOpInfo ConsumeRelOp(DbExpression expr);
    private RelOpInfo VisitAsRelOp(Node inputNode);
    private void PushExpressionBindingScope(RelOpInfo inputState);
    private RelOpInfo EnterExpressionBindingScope(Node inputNode, bool pushScope);
    private RelOpInfo EnterExpressionBindingScope(Node inputNode);
    private void ExitExpressionBindingScope(RelOpInfo scope, bool wasPushed);
    private void ExitExpressionBindingScope(RelOpInfo scope);
    private GroupByScope EnterGroupByScope(Node inputNode);
    private void ExitGroupByScope(GroupByScope scope);
    private void EnterVarDefScope(List`1<Node> varDefNodes);
    private void EnterVarDefListScope(Node varDefListNode);
    private void ExitVarDefScope();
    private DbExpression ResolveVar(Var referencedVar);
    private static void AssertBinary(Node n);
    private DbExpression VisitChild(Node n, int index);
    private List`1<DbExpression> VisitChildren(Node n);
    protected virtual DbExpression VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual DbExpression Visit(ConstantOp op, Node n);
    public virtual DbExpression Visit(InternalConstantOp op, Node n);
    public virtual DbExpression Visit(NullOp op, Node n);
    public virtual DbExpression Visit(NullSentinelOp op, Node n);
    public virtual DbExpression Visit(ConstantPredicateOp op, Node n);
    public virtual DbExpression Visit(FunctionOp op, Node n);
    public virtual DbExpression Visit(PropertyOp op, Node n);
    public virtual DbExpression Visit(RelPropertyOp op, Node n);
    public virtual DbExpression Visit(ArithmeticOp op, Node n);
    public virtual DbExpression Visit(CaseOp op, Node n);
    public virtual DbExpression Visit(ComparisonOp op, Node n);
    public virtual DbExpression Visit(ConditionalOp op, Node n);
    public virtual DbExpression Visit(LikeOp op, Node n);
    public virtual DbExpression Visit(AggregateOp op, Node n);
    public virtual DbExpression Visit(NavigateOp op, Node n);
    public virtual DbExpression Visit(NewEntityOp op, Node n);
    public virtual DbExpression Visit(NewInstanceOp op, Node n);
    public virtual DbExpression Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual DbExpression Visit(NewMultisetOp op, Node n);
    public virtual DbExpression Visit(NewRecordOp op, Node n);
    public virtual DbExpression Visit(RefOp op, Node n);
    public virtual DbExpression Visit(VarRefOp op, Node n);
    public virtual DbExpression Visit(TreatOp op, Node n);
    public virtual DbExpression Visit(CastOp op, Node n);
    public virtual DbExpression Visit(SoftCastOp op, Node n);
    public virtual DbExpression Visit(IsOfOp op, Node n);
    public virtual DbExpression Visit(ExistsOp op, Node n);
    public virtual DbExpression Visit(ElementOp op, Node n);
    public virtual DbExpression Visit(GetRefKeyOp op, Node n);
    public virtual DbExpression Visit(GetEntityRefOp op, Node n);
    public virtual DbExpression Visit(CollectOp op, Node n);
    private static string GenerateNameForVar(Var projectedVar, Dictionary`2<string, AliasGenerator> aliasMap, AliasGenerator defaultAliasGenerator, Dictionary`2<string, string> alreadyUsedNames);
    private DbExpression CreateProject(RelOpInfo sourceInfo, IEnumerable`1<Var> outputVars);
    private static VarInfoList GetTableVars(Table targetTable);
    public virtual DbExpression Visit(ScanTableOp op, Node n);
    public virtual DbExpression Visit(ScanViewOp op, Node n);
    public virtual DbExpression Visit(UnnestOp op, Node n);
    private RelOpInfo BuildEmptyProjection(Node relOpNode);
    private RelOpInfo BuildProjection(Node relOpNode, IEnumerable`1<Var> projectionVars);
    private DbExpression VisitProject(Node n, IEnumerable`1<Var> varList);
    public virtual DbExpression Visit(ProjectOp op, Node n);
    public virtual DbExpression Visit(FilterOp op, Node n);
    private List`1<DbSortClause> VisitSortKeys(IList`1<SortKey> sortKeys);
    public virtual DbExpression Visit(SortOp op, Node n);
    private static DbExpression CreateLimitExpression(DbExpression argument, DbExpression limit, bool withTies);
    public virtual DbExpression Visit(ConstrainedSortOp op, Node n);
    public virtual DbExpression Visit(GroupByOp op, Node n);
    public virtual DbExpression Visit(GroupByIntoOp op, Node n);
    private RelOpInfo VisitJoinInput(Node joinInputNode);
    private DbExpression VisitBinaryJoin(Node joinNode, DbExpressionKind joinKind);
    public virtual DbExpression Visit(CrossJoinOp op, Node n);
    public virtual DbExpression Visit(InnerJoinOp op, Node n);
    public virtual DbExpression Visit(LeftOuterJoinOp op, Node n);
    public virtual DbExpression Visit(FullOuterJoinOp op, Node n);
    private DbExpression VisitApply(Node applyNode, DbExpressionKind applyKind);
    public virtual DbExpression Visit(CrossApplyOp op, Node n);
    public virtual DbExpression Visit(OuterApplyOp op, Node n);
    private DbExpression VisitSetOpArgument(Node argNode, VarVec outputVars, VarMap argVars);
    private DbProviderManifest get_ProviderManifest();
    private DbExpression VisitSetOp(SetOp op, Node n, AliasGenerator alias, Func`3<DbExpression, DbExpression, DbExpression> setOpExpressionBuilder);
    public virtual DbExpression Visit(UnionAllOp op, Node n);
    public virtual DbExpression Visit(IntersectOp op, Node n);
    public virtual DbExpression Visit(ExceptOp op, Node n);
    public virtual DbExpression Visit(DerefOp op, Node n);
    public virtual DbExpression Visit(DistinctOp op, Node n);
    public virtual DbExpression Visit(SingleRowOp op, Node n);
    public virtual DbExpression Visit(SingleRowTableOp op, Node n);
    public virtual DbExpression Visit(VarDefOp op, Node n);
    public virtual DbExpression Visit(VarDefListOp op, Node n);
    public virtual DbExpression Visit(PhysicalProjectOp op, Node n);
    public virtual DbExpression Visit(SingleStreamNestOp op, Node n);
    public virtual DbExpression Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.DiscriminatorMapInfo : object {
    internal EntityTypeBase RootEntityType;
    internal bool IncludesSubTypes;
    internal ExplicitDiscriminatorMap DiscriminatorMap;
    internal DiscriminatorMapInfo(EntityTypeBase rootEntityType, bool includesSubTypes, ExplicitDiscriminatorMap discriminatorMap);
    internal void Merge(EntityTypeBase neededRootEntityType, bool includesSubtypes, ExplicitDiscriminatorMap discriminatorMap);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.DistinctOpRules : object {
    internal static SimpleRule Rule_DistinctOpOfKeys;
    internal static Rule[] Rules;
    private static DistinctOpRules();
    private static bool ProcessDistinctOpOfKeys(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.EntitySetIdPropertyRef : PropertyRef {
    internal static EntitySetIdPropertyRef Instance;
    private static EntitySetIdPropertyRef();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ExtentPair : object {
    private EntitySetBase m_left;
    private EntitySetBase m_right;
    internal EntitySetBase Left { get; }
    internal EntitySetBase Right { get; }
    internal ExtentPair(EntitySetBase left, EntitySetBase right);
    internal EntitySetBase get_Left();
    internal EntitySetBase get_Right();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.FilterOpRules : object {
    internal static PatternMatchRule Rule_FilterOverFilter;
    internal static PatternMatchRule Rule_FilterOverProject;
    internal static PatternMatchRule Rule_FilterOverUnionAll;
    internal static PatternMatchRule Rule_FilterOverIntersect;
    internal static PatternMatchRule Rule_FilterOverExcept;
    internal static PatternMatchRule Rule_FilterOverDistinct;
    internal static PatternMatchRule Rule_FilterOverGroupBy;
    internal static PatternMatchRule Rule_FilterOverCrossJoin;
    internal static PatternMatchRule Rule_FilterOverInnerJoin;
    internal static PatternMatchRule Rule_FilterOverLeftOuterJoin;
    internal static PatternMatchRule Rule_FilterOverOuterApply;
    internal static PatternMatchRule Rule_FilterWithConstantPredicate;
    internal static Rule[] Rules;
    private static FilterOpRules();
    private static Node GetPushdownPredicate(Command command, Node filterNode, VarVec columns, Node& nonPushdownPredicateNode);
    private static bool ProcessFilterOverFilter(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverProject(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverSetOp(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverDistinct(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverGroupBy(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverJoin(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterOverOuterApply(RuleProcessingContext context, Node filterNode, Node& newNode);
    private static bool ProcessFilterWithConstantPredicate(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ForeignKeyConstraint : object {
    private ExtentPair m_extentPair;
    private List`1<string> m_parentKeys;
    private List`1<string> m_childKeys;
    private ReferentialConstraint m_constraint;
    private Dictionary`2<string, string> m_keyMap;
    internal List`1<string> ParentKeys { get; }
    internal List`1<string> ChildKeys { get; }
    internal ExtentPair Pair { get; }
    internal RelationshipMultiplicity ChildMultiplicity { get; }
    internal ForeignKeyConstraint(RelationshipSet relationshipSet, ReferentialConstraint constraint);
    internal List`1<string> get_ParentKeys();
    internal List`1<string> get_ChildKeys();
    internal ExtentPair get_Pair();
    internal RelationshipMultiplicity get_ChildMultiplicity();
    internal bool GetParentProperty(string childPropertyName, String& parentPropertyName);
    private void BuildKeyMap();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.GroupAggregateRefComputingVisitor : BasicOpVisitor {
    private Command _command;
    private GroupAggregateVarInfoManager _groupAggregateVarInfoManager;
    private Dictionary`2<Node, Node> _childToParent;
    private GroupAggregateRefComputingVisitor(Command itree);
    internal static IEnumerable`1<GroupAggregateVarInfo> Process(Command itree, TryGetValue& tryGetParent);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(FunctionOp op, Node n);
    protected virtual void VisitDefault(Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.GroupAggregateVarComputationTranslator : BasicOpVisitorOfNode {
    private GroupAggregateVarInfo _targetGroupAggregateVarInfo;
    private bool _isUnnested;
    private Command _command;
    private GroupAggregateVarInfoManager _groupAggregateVarInfoManager;
    private GroupAggregateVarComputationTranslator(Command command, GroupAggregateVarInfoManager groupAggregateVarInfoManager);
    public static bool TryTranslateOverGroupAggregateVar(Node subtree, bool isVarDefinition, Command command, GroupAggregateVarInfoManager groupAggregateVarInfoManager, GroupAggregateVarInfo& groupAggregateVarInfo, Node& templateNode, Boolean& isUnnested);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    private Node VisitCollect(Node n);
    private static bool IsConstant(Node node);
    private Node TranslateOverGroupAggregateVar(Var var, EdmMember property);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    public virtual Node Visit(AggregateOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.GroupAggregateVarInfo : object {
    private Node _definingGroupByNode;
    private HashSet`1<KeyValuePair`2<Node, List`1<Node>>> _candidateAggregateNodes;
    private Var _groupAggregateVar;
    internal HashSet`1<KeyValuePair`2<Node, List`1<Node>>> CandidateAggregateNodes { get; }
    internal bool HasCandidateAggregateNodes { get; }
    internal Node DefiningGroupNode { get; }
    internal Var GroupAggregateVar { get; }
    internal GroupAggregateVarInfo(Node defingingGroupNode, Var groupAggregateVar);
    internal HashSet`1<KeyValuePair`2<Node, List`1<Node>>> get_CandidateAggregateNodes();
    internal bool get_HasCandidateAggregateNodes();
    internal Node get_DefiningGroupNode();
    internal Var get_GroupAggregateVar();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.GroupAggregateVarInfoManager : object {
    private Dictionary`2<Var, GroupAggregateVarRefInfo> _groupAggregateVarRelatedVarToInfo;
    private Dictionary`2<Var, Dictionary`2<EdmMember, GroupAggregateVarRefInfo>> _groupAggregateVarRelatedVarPropertyToInfo;
    private HashSet`1<GroupAggregateVarInfo> _groupAggregateVarInfos;
    internal IEnumerable`1<GroupAggregateVarInfo> GroupAggregateVarInfos { get; }
    internal IEnumerable`1<GroupAggregateVarInfo> get_GroupAggregateVarInfos();
    internal void Add(Var var, GroupAggregateVarInfo groupAggregateVarInfo, Node computationTemplate, bool isUnnested);
    internal void Add(Var var, GroupAggregateVarInfo groupAggregateVarInfo, Node computationTemplate, bool isUnnested, EdmMember property);
    internal bool TryGetReferencedGroupAggregateVarInfo(Var var, GroupAggregateVarRefInfo& groupAggregateVarRefInfo);
    internal bool TryGetReferencedGroupAggregateVarInfo(Var var, EdmMember property, GroupAggregateVarRefInfo& groupAggregateVarRefInfo);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.GroupAggregateVarRefInfo : object {
    private Node _computation;
    private GroupAggregateVarInfo _groupAggregateVarInfo;
    private bool _isUnnested;
    internal Node Computation { get; }
    internal GroupAggregateVarInfo GroupAggregateVarInfo { get; }
    internal bool IsUnnested { get; }
    internal GroupAggregateVarRefInfo(GroupAggregateVarInfo groupAggregateVarInfo, Node computation, bool isUnnested);
    internal Node get_Computation();
    internal GroupAggregateVarInfo get_GroupAggregateVarInfo();
    internal bool get_IsUnnested();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.GroupByOpRules : object {
    internal static SimpleRule Rule_GroupByOpWithSimpleVarRedefinitions;
    internal static SimpleRule Rule_GroupByOpOnAllInputColumnsWithAggregateOperation;
    internal static PatternMatchRule Rule_GroupByOverProject;
    internal static PatternMatchRule Rule_GroupByOpWithNoAggregates;
    internal static Rule[] Rules;
    private static GroupByOpRules();
    private static bool ProcessGroupByWithSimpleVarRedefinitions(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessGroupByOpOnAllInputColumnsWithAggregateOperation(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessGroupByOverProject(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessGroupByOpWithNoAggregates(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ITreeGenerator : DbExpressionVisitor`1<Node> {
    private static Dictionary`2<DbExpressionKind, OpType> _opMap;
    private bool _useDatabaseNullSemantics;
    private Command _iqtCommand;
    private Stack`1<CqtVariableScope> _varScopes;
    private Dictionary`2<Node, Var> _varMap;
    private Stack`1<EdmFunction> _functionExpansions;
    private Dictionary`2<DbExpression, bool> _functionsIsPredicateFlag;
    private HashSet`1<DbFilterExpression> _processedIsOfFilters;
    private HashSet`1<DbTreatExpression> _fakeTreats;
    private DiscriminatorMap _discriminatorMap;
    private DbProjectExpression _discriminatedViewTopProject;
    internal Dictionary`2<Node, Var> VarMap { get; }
    private ITreeGenerator(DbQueryCommandTree ctree, DiscriminatorMap discriminatorMap);
    private static ITreeGenerator();
    private static Dictionary`2<DbExpressionKind, OpType> InitializeExpressionKindToOpTypeMap();
    internal Dictionary`2<Node, Var> get_VarMap();
    public static Command Generate(DbQueryCommandTree ctree);
    internal static Command Generate(DbQueryCommandTree ctree, DiscriminatorMap discriminatorMap);
    private static bool ValidateParameterType(TypeUsage paramType);
    private static RowType ExtractElementRowType(TypeUsage typeUsage);
    private bool IsPredicate(DbExpression expr);
    private Node VisitExpr(DbExpression e);
    private Node VisitExprAsScalar(DbExpression expr);
    private Node ConvertToScalarOpTree(Node node, DbExpression expr);
    private Node ConvertRelOpToScalarOpTree(Node node, TypeUsage resultType);
    private Node ConvertPredicateToScalarOpTree(Node node, DbExpression expr);
    private bool IsNullable(DbExpression expression);
    private Node VisitExprAsPredicate(DbExpression expr);
    private static IList`1<Node> VisitExpr(IList`1<DbExpression> exprs, VisitExprDelegate exprDelegate);
    private IList`1<Node> VisitExprAsScalar(IList`1<DbExpression> exprs);
    private Node VisitUnary(DbUnaryExpression e, Op op, VisitExprDelegate exprDelegate);
    private Node VisitBinary(DbBinaryExpression e, Op op, VisitExprDelegate exprDelegate);
    private Node EnsureRelOp(Node inputNode);
    private Node CapWithProject(Node input);
    private Node CapWithPhysicalProject(Node input);
    private Node EnterExpressionBinding(DbExpressionBinding binding);
    private Node EnterGroupExpressionBinding(DbGroupExpressionBinding binding);
    private Node VisitBoundExpressionPushBindingScope(DbExpression boundExpression, string bindingName);
    private Node VisitBoundExpression(DbExpression boundExpression, Var& boundVar);
    private void PushBindingScope(Var boundVar, string bindingName);
    private ExpressionBindingScope ExitExpressionBinding();
    private void ExitGroupExpressionBinding();
    private void EnterLambdaFunction(DbLambda lambda, List`1<Tuple`2<Node, bool>> argumentValues, EdmFunction expandingEdmFunction);
    private LambdaScope ExitLambdaFunction(EdmFunction expandingEdmFunction);
    private Node ProjectNewRecord(Node inputNode, RowType recType, IEnumerable`1<Var> colVars);
    public virtual Node Visit(DbExpression e);
    public virtual Node Visit(DbConstantExpression e);
    public virtual Node Visit(DbNullExpression e);
    public virtual Node Visit(DbVariableReferenceExpression e);
    private CqtVariableScope ResolveScope(DbVariableReferenceExpression e);
    public virtual Node Visit(DbParameterReferenceExpression e);
    public virtual Node Visit(DbFunctionExpression e);
    public virtual Node Visit(DbLambdaExpression e);
    private Node VisitLambdaExpression(DbLambda lambda, IList`1<DbExpression> arguments, DbExpression applicationExpr, EdmFunction expandingEdmFunction);
    private Node BuildSoftCast(Node node, TypeUsage targetType);
    private Node BuildSoftCast(Node node, EdmType targetType);
    private Node BuildEntityRef(Node arg, TypeUsage entityType);
    private static bool TryRewriteKeyPropertyAccess(DbPropertyExpression propertyExpression, DbExpression& rewritten);
    public virtual Node Visit(DbPropertyExpression e);
    public virtual Node Visit(DbComparisonExpression e);
    public virtual Node Visit(DbLikeExpression e);
    private Node CreateLimitNode(Node inputNode, Node limitNode, bool withTies);
    public virtual Node Visit(DbLimitExpression expression);
    public virtual Node Visit(DbIsNullExpression e);
    public virtual Node Visit(DbArithmeticExpression e);
    public virtual Node Visit(DbAndExpression e);
    public virtual Node Visit(DbOrExpression e);
    public virtual Node Visit(DbInExpression e);
    public virtual Node Visit(DbNotExpression e);
    public virtual Node Visit(DbDistinctExpression e);
    public virtual Node Visit(DbElementExpression e);
    public virtual Node Visit(DbIsEmptyExpression e);
    private Node VisitSetOpExpression(DbBinaryExpression expression);
    public virtual Node Visit(DbUnionAllExpression e);
    public virtual Node Visit(DbIntersectExpression e);
    public virtual Node Visit(DbExceptExpression e);
    public virtual Node Visit(DbTreatExpression e);
    public virtual Node Visit(DbIsOfExpression e);
    public virtual Node Visit(DbCastExpression e);
    public virtual Node Visit(DbCaseExpression e);
    private DbFilterExpression CreateIsOfFilterExpression(DbExpression input, IsOfFilter typeFilter);
    private static bool IsIsOfFilter(DbFilterExpression filter);
    private DbExpression ApplyIsOfFilter(DbExpression current, IsOfFilter typeFilter);
    public virtual Node Visit(DbOfTypeExpression e);
    public virtual Node Visit(DbNewInstanceExpression e);
    public virtual Node Visit(DbRefExpression e);
    public virtual Node Visit(DbRelationshipNavigationExpression e);
    public virtual Node Visit(DbDerefExpression e);
    public virtual Node Visit(DbRefKeyExpression e);
    public virtual Node Visit(DbEntityRefExpression e);
    public virtual Node Visit(DbScanExpression e);
    public virtual Node Visit(DbFilterExpression e);
    public virtual Node Visit(DbProjectExpression e);
    private Node GenerateDiscriminatedProject(DbProjectExpression e);
    private Node CreateNewInstanceArgument(EdmMember property, DbExpression value);
    private Node GenerateStandardProject(DbProjectExpression e);
    public virtual Node Visit(DbCrossJoinExpression e);
    public virtual Node Visit(DbJoinExpression e);
    private Node VisitJoin(DbExpression e, IList`1<DbExpressionBinding> inputs, DbExpression joinCond);
    public virtual Node Visit(DbApplyExpression e);
    public virtual Node Visit(DbGroupByExpression e);
    private void ExtractKeys(DbGroupByExpression e, VarVec keyVarSet, VarVec outputVarSet, Node& inputNode, List`1& keyVarDefNodes, ExpressionBindingScope& scope);
    private Node ProcessFunctionAggregate(DbFunctionAggregate funcAgg, IList`1<Node> argNodes, Var& aggVar);
    private Node ProcessGroupAggregate(List`1<Node> keyVarDefNodes, Node copyOfInput, List`1<Node> copyOfkeyVarDefNodes, VarVec copyKeyVarSet, TypeUsage inputResultType, Var& groupAggVar);
    private void FlattenProperties(Node input, IList`1<Node> flattenedProperties);
    private Node VisitSortArguments(DbExpressionBinding input, IList`1<DbSortClause> sortOrder, List`1<SortKey> sortKeys, Var& inputVar);
    public virtual Node Visit(DbSkipExpression expression);
    public virtual Node Visit(DbSortExpression e);
    public virtual Node Visit(DbQuantifierExpression e);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.JoinEdge : object {
    private AugmentedTableNode m_left;
    private AugmentedTableNode m_right;
    private AugmentedJoinNode m_joinNode;
    private List`1<ColumnVar> m_leftVars;
    private List`1<ColumnVar> m_rightVars;
    [CompilerGeneratedAttribute]
private JoinKind <JoinKind>k__BackingField;
    internal AugmentedTableNode Left { get; }
    internal AugmentedTableNode Right { get; }
    internal AugmentedJoinNode JoinNode { get; }
    internal JoinKind JoinKind { get; internal set; }
    internal List`1<ColumnVar> LeftVars { get; }
    internal List`1<ColumnVar> RightVars { get; }
    internal bool IsEliminated { get; }
    internal bool RestrictedElimination { get; }
    private JoinEdge(AugmentedTableNode left, AugmentedTableNode right, AugmentedJoinNode joinNode, JoinKind joinKind, List`1<ColumnVar> leftVars, List`1<ColumnVar> rightVars);
    internal AugmentedTableNode get_Left();
    internal AugmentedTableNode get_Right();
    internal AugmentedJoinNode get_JoinNode();
    [CompilerGeneratedAttribute]
internal JoinKind get_JoinKind();
    [CompilerGeneratedAttribute]
internal void set_JoinKind(JoinKind value);
    internal List`1<ColumnVar> get_LeftVars();
    internal List`1<ColumnVar> get_RightVars();
    internal bool get_IsEliminated();
    internal bool get_RestrictedElimination();
    internal static JoinEdge CreateJoinEdge(AugmentedTableNode left, AugmentedTableNode right, AugmentedJoinNode joinNode, ColumnVar leftVar, ColumnVar rightVar);
    internal static JoinEdge CreateTransitiveJoinEdge(AugmentedTableNode left, AugmentedTableNode right, JoinKind joinKind, List`1<ColumnVar> leftVars, List`1<ColumnVar> rightVars);
    internal bool AddCondition(AugmentedJoinNode joinNode, ColumnVar leftVar, ColumnVar rightVar);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.JoinElimination : BasicOpVisitorOfNode {
    private PlanCompiler m_compilerState;
    private Dictionary`2<Node, Node> m_joinGraphUnnecessaryMap;
    private VarRemapper m_varRemapper;
    private bool m_treeModified;
    private VarRefManager m_varRefManager;
    private Command Command { get; }
    private ConstraintManager ConstraintManager { get; }
    private JoinElimination(PlanCompiler compilerState);
    private Command get_Command();
    private ConstraintManager get_ConstraintManager();
    internal static bool Process(PlanCompiler compilerState);
    private void Process();
    private bool NeedsJoinGraph(Node joinNode);
    private Node ProcessJoinGraph(Node joinNode);
    private Node VisitDefaultForAllNodes(Node n);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node joinNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.JoinGraph : object {
    private Command m_command;
    private AugmentedJoinNode m_root;
    private List`1<AugmentedNode> m_vertexes;
    private Dictionary`2<Table, AugmentedTableNode> m_tableVertexMap;
    private VarMap m_varMap;
    private Dictionary`2<Var, VarVec> m_reverseVarMap;
    private Dictionary`2<Var, AugmentedTableNode> m_varToDefiningNodeMap;
    private Dictionary`2<Node, Node> m_processedNodes;
    private bool m_modifiedGraph;
    private ConstraintManager m_constraintManager;
    private VarRefManager m_varRefManager;
    internal JoinGraph(Command command, ConstraintManager constraintManager, VarRefManager varRefManager, Node joinNode);
    internal Node DoJoinElimination(VarMap& varMap, Dictionary`2& processedNodes);
    private VarVec GetColumnVars(VarVec varVec);
    private static void GetColumnVars(List`1<ColumnVar> columnVars, IEnumerable`1<Var> vec);
    private void SplitPredicate(Node joinNode, List`1& leftVars, List`1& rightVars, Node& otherPredicateNode);
    private AugmentedNode BuildAugmentedNodeTree(Node node);
    private bool AddJoinEdge(AugmentedJoinNode joinNode, ColumnVar leftVar, ColumnVar rightVar);
    private static bool SingleTableVars(IEnumerable`1<ColumnVar> varList);
    private void BuildJoinEdges(AugmentedJoinNode joinNode, int maxVisibility);
    private void BuildJoinEdges(AugmentedNode node, int maxVisibility);
    private static bool GenerateTransitiveEdge(JoinEdge edge1, JoinEdge edge2);
    private static IEnumerable`1<KeyValuePair`2<ColumnVar, ColumnVar>> CreateOrderedKeyValueList(List`1<ColumnVar> keyVars, List`1<ColumnVar> valueVars);
    private void TryTurnLeftOuterJoinsIntoInnerJoins();
    private static bool AreAllTableRowsPreserved(AugmentedNode root, AugmentedTableNode table);
    private static bool ContainsJoinEdgeForTable(IEnumerable`1<JoinEdge> joinEdges, Table table);
    private bool CanAllJoinEdgesBeTurnedIntoInnerJoins(AugmentedNode rightNode, IEnumerable`1<JoinEdge> joinEdges);
    private bool CanJoinEdgeBeTurnedIntoInnerJoin(AugmentedNode rightNode, JoinEdge joinEdge);
    private bool IsConstraintPresentForTurningIntoInnerJoin(JoinEdge joinEdge);
    private void GenerateTransitiveEdges();
    private static bool CanBeEliminatedBasedOnLojParticipation(AugmentedTableNode table, AugmentedTableNode replacingTable);
    private static bool CanBeEliminatedViaStarJoinBasedOnOtherJoinParticipation(JoinEdge tableJoinEdge, JoinEdge replacingTableJoinEdge);
    private static bool CanGetFileredByJoins(JoinEdge joinEdge, AugmentedNode leastCommonAncestor, bool disallowAnyJoin);
    private static bool CanBeMovedBasedOnLojParticipation(AugmentedTableNode table, AugmentedTableNode replacingTable);
    private static AugmentedNode GetLeastCommonAncestor(AugmentedNode node1, AugmentedNode node2);
    private void MarkTableAsEliminated(AugmentedTableNode tableNode, AugmentedTableNode replacementNode, List`1<T> tableVars, List`1<T> replacementVars);
    private void AddReverseMapping(Var replacingVar, Var replacedVar);
    private void EliminateSelfJoinedTable(AugmentedTableNode tableNode, AugmentedTableNode replacementNode);
    private void EliminateStarSelfJoin(List`1<JoinEdge> joinEdges);
    private static bool AreMatchingForStarSelfJoinElimination(JoinEdge edge1, JoinEdge edge2);
    private static bool MatchOtherPredicates(JoinEdge edge1, JoinEdge edge2);
    private static bool MatchOtherPredicates(Node x, Node y);
    private bool QualifiesForStarSelfJoinGroup(JoinEdge joinEdge);
    private static bool QualifiesForStarSelfJoinGroup(Node otherPredicateNode, VarVec rightTableColumnVars);
    private void EliminateStarSelfJoins(AugmentedTableNode tableNode);
    private bool EliminateSelfJoin(JoinEdge joinEdge);
    private void EliminateSelfJoins(AugmentedTableNode tableNode);
    private void EliminateSelfJoins();
    private void EliminateLeftTable(JoinEdge joinEdge);
    private void EliminateRightTable(JoinEdge joinEdge);
    private static bool HasNonKeyReferences(Table table);
    private bool RightTableHasKeyReferences(JoinEdge joinEdge);
    private bool TryEliminateParentChildJoin(JoinEdge joinEdge, ForeignKeyConstraint fkConstraint);
    private static bool IsJoinOnFkConstraint(ForeignKeyConstraint fkConstraint, IList`1<ColumnVar> parentVars, IList`1<ColumnVar> childVars, IList`1& childForeignKeyVars);
    private bool TryEliminateChildParentJoin(JoinEdge joinEdge, ForeignKeyConstraint fkConstraint);
    private bool TryEliminateRightTable(JoinEdge joinEdge, int fkConstraintKeyCount, bool allowRefsForJoinedOnFkOnly);
    private void EliminateParentChildJoin(JoinEdge joinEdge);
    private void EliminateParentChildJoins(AugmentedTableNode tableNode);
    private void EliminateParentChildJoins();
    private Node BuildNodeTree();
    private Node BuildFilterForNullableColumns(Node inputNode, VarVec nonNullableColumns);
    private Node BuildFilterNode(Node inputNode, Node predicateNode);
    private Node RebuildPredicate(AugmentedJoinNode joinNode, Int32& minLocationId);
    private Node RebuildNodeTreeForCrossJoins(AugmentedJoinNode joinNode);
    private Node RebuildNodeTree(AugmentedJoinNode joinNode, Dictionary`2& predicates);
    private Node RebuildNodeTree(AugmentedTableNode tableNode);
    private Node RebuildNodeTree(AugmentedNode augmentedNode, Dictionary`2& predicates);
    private Node CombinePredicateNodes(int targetNodeId, Node localPredicateNode, int localPredicateMinLocationId, Dictionary`2<Node, int> leftPredicates, Dictionary`2<Node, int> rightPredicates, Dictionary`2& outPredicates);
    private Node ClassifyPredicate(int targetNodeId, Node predicateNode, int predicateMinLocationId, Node result, Dictionary`2<Node, int> outPredicates);
    private Node CombinePredicates(Node node1, Node node2);
    private int GetLocationId(Var var, int defaultLocationId);
    private int GetLeastCommonAncestor(int nodeId1, int nodeId2);
    private static AugmentedNode PickSubtree(int nodeId, AugmentedNode root);
}
internal enum System.Data.Entity.Core.Query.PlanCompiler.JoinKind : Enum {
    public int value__;
    public static JoinKind Inner;
    public static JoinKind LeftOuter;
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.JoinOpRules : object {
    internal static PatternMatchRule Rule_CrossJoinOverProject1;
    internal static PatternMatchRule Rule_CrossJoinOverProject2;
    internal static PatternMatchRule Rule_InnerJoinOverProject1;
    internal static PatternMatchRule Rule_InnerJoinOverProject2;
    internal static PatternMatchRule Rule_OuterJoinOverProject2;
    internal static PatternMatchRule Rule_CrossJoinOverFilter1;
    internal static PatternMatchRule Rule_CrossJoinOverFilter2;
    internal static PatternMatchRule Rule_InnerJoinOverFilter1;
    internal static PatternMatchRule Rule_InnerJoinOverFilter2;
    internal static PatternMatchRule Rule_OuterJoinOverFilter2;
    internal static PatternMatchRule Rule_CrossJoinOverSingleRowTable1;
    internal static PatternMatchRule Rule_CrossJoinOverSingleRowTable2;
    internal static PatternMatchRule Rule_LeftOuterJoinOverSingleRowTable;
    internal static Rule[] Rules;
    private static JoinOpRules();
    private static bool ProcessJoinOverProject(RuleProcessingContext context, Node joinNode, Node& newNode);
    private static bool ProcessJoinOverFilter(RuleProcessingContext context, Node joinNode, Node& newNode);
    private static bool ProcessJoinOverSingleRowTable(RuleProcessingContext context, Node joinNode, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.KeyPullup : BasicOpVisitor {
    private Command m_command;
    internal KeyPullup(Command command);
    internal KeyVec GetKeys(Node node);
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitRelOpDefault(RelOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(UnionAllOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.NestedPropertyRef : PropertyRef {
    private PropertyRef m_inner;
    private PropertyRef m_outer;
    internal PropertyRef OuterProperty { get; }
    internal PropertyRef InnerProperty { get; }
    internal NestedPropertyRef(PropertyRef innerProperty, PropertyRef outerProperty);
    internal PropertyRef get_OuterProperty();
    internal PropertyRef get_InnerProperty();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.NestPullup : BasicOpVisitorOfNode {
    private PlanCompiler m_compilerState;
    private Dictionary`2<Var, Node> m_definingNodeMap;
    private VarRemapper m_varRemapper;
    private Dictionary`2<Var, Var> m_varRefMap;
    private bool m_foundSortUnderUnnest;
    private Command Command { get; }
    private NestPullup(PlanCompiler compilerState);
    internal static void Process(PlanCompiler compilerState);
    private void Process();
    private Command get_Command();
    private static bool IsNestOpNode(Node n);
    private Node NestingNotSupported(Op op, Node n);
    private Var ResolveVarReference(Var refVar);
    private void UpdateReplacementVarMap(IEnumerable`1<Var> fromVars, IEnumerable`1<Var> toVars);
    private static void RemapSortKeys(List`1<SortKey> sortKeys, Dictionary`2<Var, Var> varMap);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.NestPullup/<RemapVars>d__15")]
private static IEnumerable`1<Var> RemapVars(IEnumerable`1<Var> vars, Dictionary`2<Var, Var> varMap);
    private static VarList RemapVarList(VarList varList, Dictionary`2<Var, Var> varMap);
    private VarVec RemapVarVec(VarVec varVec, Dictionary`2<Var, Var> varMap);
    public virtual Node Visit(VarDefOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    private Node ApplyOpJoinOp(Op op, Node n);
    private Node ApplyIsNotNullFilter(Node node, Var sentinelVar);
    private Node CapWithIsNotNullFilter(Node input, Var var);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    private Node HandleProjectNode(Node n);
    private Node MergeNestedNestOps(Node nestNode);
    private Node ProjectOpCase1(Node projectNode);
    private void EnsureReferencedVarsAreRemoved(List`1<Node> referencedVars, VarVec outputVars);
    private void EnsureReferencedVarsAreRemapped(List`1<Node> referencedVars);
    private void ConvertToNestOpInput(Node physicalProjectNode, Var collectionVar, List`1<CollectionInfo> collectionInfoList, List`1<Node> collectionNodes, VarVec externalReferences, VarVec collectionReferences);
    private Node ProjectOpCase2(Node projectNode);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    public virtual Node Visit(SingleRowOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    private NestBaseOp GetNestOpWithConsolidatedSortKeys(NestBaseOp inputNestOp, List`1<SortKey> sortKeys);
    private List`1<SortKey> ConsolidateSortKeys(List`1<SortKey> sortKeyList1, List`1<SortKey> sortKeyList2);
    public virtual Node Visit(UnnestOp op, Node n);
    private Node CopyCollectionVarDefinition(Node refVarDefiningNode);
    protected virtual Node VisitNestOp(NestBaseOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    private Node BuildSortForNestElimination(SingleStreamNestOp ssnOp, Node nestNode);
    private List`1<SortKey> BuildSortKeyList(SingleStreamNestOp ssnOp);
    private Node ConvertToSingleStreamNest(Node nestNode, Dictionary`2<Var, ColumnMap> varRefReplacementMap, VarList flattenedOutputVarList, SimpleColumnMap[]& parentKeyColumnMaps);
    private void NormalizeNestOpInputs(NestBaseOp nestOp, Node nestNode, VarList& discriminatorVarList, List`1& sortKeys);
    private Node AugmentNodeWithInternalIntegerConstant(Node input, int value, Var& internalConstantVar);
    private Node AugmentNodeWithConstant(Node input, Func`1<ConstantBaseOp> createOp, Var& constantVar);
    private Node BuildUnionAllSubqueryForNestOp(NestBaseOp nestOp, Node nestNode, VarList drivingNodeVars, VarList discriminatorVarList, Var& discriminatorVar, List`1& varMapList);
    private static VarList GetUnionOutputs(UnionAllOp unionOp, VarList leftVars);
    [CompilerGeneratedAttribute]
private ConstantBaseOp <ApplyOpJoinOp>b__23_0();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.NominalTypeEliminator : BasicOpVisitorOfNode {
    private Dictionary`2<Var, PropertyRefList> m_varPropertyMap;
    private Dictionary`2<Node, PropertyRefList> m_nodePropertyMap;
    private VarInfoMap m_varInfoMap;
    private PlanCompiler m_compilerState;
    private StructuredTypeInfo m_typeInfo;
    private Dictionary`2<EdmFunction, EdmProperty[]> m_tvfResultKeys;
    private Dictionary`2<TypeUsage, TypeUsage> m_typeToNewTypeMap;
    private static string PrefixMatchCharacter;
    private Command m_command { get; }
    private TypeUsage DefaultTypeIdType { get; }
    private NominalTypeEliminator(PlanCompiler compilerState, StructuredTypeInfo typeInfo, Dictionary`2<Var, PropertyRefList> varPropertyMap, Dictionary`2<Node, PropertyRefList> nodePropertyMap, Dictionary`2<EdmFunction, EdmProperty[]> tvfResultKeys);
    private Command get_m_command();
    internal static void Process(PlanCompiler compilerState, StructuredTypeInfo structuredTypeInfo, Dictionary`2<EdmFunction, EdmProperty[]> tvfResultKeys);
    private void Process();
    private TypeUsage get_DefaultTypeIdType();
    private TypeUsage GetNewType(TypeUsage type);
    private Node BuildAccessor(Node input, EdmProperty property);
    private Node BuildAccessorWithNulls(Node input, EdmProperty property);
    private Node BuildTypeIdAccessor(Node input, TypeInfo typeInfo);
    private Node BuildSoftCast(Node node, TypeUsage targetType);
    private Node Copy(Node n);
    private Node CreateNullConstantNode(TypeUsage type);
    private Node CreateNullSentinelConstant();
    private Node CreateTypeIdConstant(TypeInfo typeInfo);
    private Node CreateTypeIdConstantForPrefixMatch(TypeInfo typeInfo);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.NominalTypeEliminator/<GetPropertyRefsForComparisonAndIsNull>d__26")]
private IEnumerable`1<PropertyRef> GetPropertyRefsForComparisonAndIsNull(TypeInfo typeInfo, OperationKind opKind);
    private IEnumerable`1<PropertyRef> GetPropertyRefs(TypeInfo typeInfo, OperationKind opKind);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.NominalTypeEliminator/<GetProperties>d__28")]
private IEnumerable`1<EdmProperty> GetProperties(TypeInfo typeInfo, OperationKind opKind);
    private void GetPropertyValues(TypeInfo typeInfo, OperationKind opKind, Node input, bool ignoreMissingProperties, List`1& properties, List`1& values);
    private KeyValuePair`2<EdmProperty, Node> GetPropertyValue(Node input, EdmProperty property, bool ignoreMissingProperties);
    private List`1<SortKey> HandleSortKeys(List`1<SortKey> keys);
    private Node CreateTVFProjection(Node unnestNode, List`1<Var> unnestOpTableColumns, TypeInfo unnestOpTableTypeInfo, List`1& newVars);
    public virtual Node Visit(VarDefListOp op, Node n);
    private void FlattenComputedVar(ComputedVar v, Node node, List`1& newNodes, TypeUsage& newType);
    private static bool IsNullSentinelPropertyRef(PropertyRef propertyRef);
    private Node FlattenEnumOrStrongSpatialVar(VarDefOp varDefOp, Node node);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    private SimpleCollectionColumnMap ExpandColumnMap(SimpleCollectionColumnMap columnMap);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.NominalTypeEliminator/<FlattenVars>d__39")]
private IEnumerable`1<Var> FlattenVars(IEnumerable`1<Var> vars);
    private VarVec FlattenVarSet(VarVec varSet);
    private VarList FlattenVarList(VarList varList);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    internal static Var GetSingletonVar(Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    private IEnumerable`1<EdmProperty> GetTvfResultKeys(EdmFunction tvf);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    private Node FixupSetOpChild(Node setOpChild, VarMap varMap, List`1<ComputedVar> newComputedVars);
    private VarMap FlattenVarMap(VarMap varMap, List`1& newComputedVars);
    private VarInfo FlattenSetOpVar(SetOpVar v);
    public virtual Node Visit(SoftCastOp op, Node n);
    public virtual Node Visit(CastOp op, Node n);
    private Node RewriteAsCastToUnderlyingType(PrimitiveType underlyingType, CastOp op, Node n);
    public virtual Node Visit(ConstantOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    private bool TryRewriteCaseOp(Node n, bool thenClauseIsNull, Node& rewrittenNode);
    private Node FlattenCaseOp(Node n, TypeInfo typeInfo, PropertyRefList desiredProperties);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ComparisonOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(GetEntityRefOp op, Node n);
    public virtual Node Visit(GetRefKeyOp op, Node n);
    private Node FlattenGetKeyOp(ScalarOp op, Node n);
    private Node VisitPropertyOp(Op op, Node n, PropertyRef propertyRef, bool throwIfMissing);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RelPropertyOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    private static void RemoveNullSentinel(TypeInfo inputTypeInfo, List`1<EdmProperty> inputFields, List`1<Node> inputFieldValues);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(NewInstanceOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    private Node NormalizeTypeDiscriminatorValues(DiscriminatedNewEntityOp op, Node discriminator);
    public virtual Node Visit(NewRecordOp op, Node n);
    private Node GetEntitySetIdExpr(EdmProperty entitySetIdProperty, NewEntityBaseOp op);
    private Node FlattenConstructor(ScalarOp op, Node n);
    public virtual Node Visit(NullOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
    private Node CreateTypeComparisonOp(Node input, TypeInfo typeInfo, bool isExact);
    private Node CreateDisjunctiveTypeComparisonOp(TypeInfo typeInfo, Node typeIdProperty);
    private Node CreateTypeEqualsOp(TypeInfo typeInfo, Node typeIdProperty);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.Normalizer : SubqueryTrackingVisitor {
    private Normalizer(PlanCompiler planCompilerState);
    internal static void Process(PlanCompiler planCompilerState);
    private void Process();
    public virtual Node Visit(ExistsOp op, Node n);
    private Node BuildDummyProjectForExists(Node child);
    private Node BuildUnnest(Node collectionNode);
    private Node VisitCollectionFunction(FunctionOp op, Node n);
    private Node VisitCollectionAggregateFunction(FunctionOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.NullSemantics : BasicOpVisitorOfNode {
    private Command _command;
    private bool _modified;
    private bool _negated;
    private VariableNullabilityTable _variableNullabilityTable;
    private NullSemantics(Command command);
    public static bool Process(Command command);
    protected virtual Node VisitDefault(Node n);
    private Node HandleOr(Node n);
    private Node HandleEQ(Node n, bool negated);
    private Node HandleNE(Node n);
    private bool IsNullableVarRef(Node n);
    private Node ImplementEquality(Node n, bool negated);
    private Node Clone(Node x);
    private Node False();
    private Node True();
    private Node IsNull(Node x);
    private Node Not(Node x);
    private Node And(Node x, Node y);
    private Node Or(Node x, Node y);
    private Node Boolean(bool value);
    private Node NotXor(Node x, Node y);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.NullSentinelPropertyRef : PropertyRef {
    private static NullSentinelPropertyRef _singleton;
    internal static NullSentinelPropertyRef Instance { get; }
    private static NullSentinelPropertyRef();
    internal static NullSentinelPropertyRef get_Instance();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.OpCopierTrackingCollectionVars : OpCopier {
    private Dictionary`2<Var, Node> m_newCollectionVarDefinitions;
    private OpCopierTrackingCollectionVars(Command cmd);
    internal static Node Copy(Command cmd, Node n, VarMap& varMap, Dictionary`2& newCollectionVarDefinitions);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.PlanCompiler : object {
    private static BooleanSwitch _legacyApplyTransformationsRegardlessOfSize;
    private static Nullable`1<bool> _applyTransformationsRegardlessOfSize;
    private static Nullable`1<bool> _disableTransformationsRegardlessOfSize;
    private static Nullable`1<int> _maxNodeCountForTransformations;
    private DbCommandTree m_ctree;
    private Command m_command;
    private PlanCompilerPhase m_phase;
    private int _precedingPhases;
    private int m_neededPhases;
    private ConstraintManager m_constraintManager;
    private Nullable`1<bool> m_mayApplyTransformationRules;
    [CompilerGeneratedAttribute]
private bool <HasSortingOnNullSentinels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransformationsDeferred>k__BackingField;
    private static bool applyTransformationsRegardlessOfSize { get; }
    private static bool disableTransformationsRegardlessOfSize { get; }
    private static int maxNodeCountForTransformations { get; }
    internal Command Command { get; }
    internal bool HasSortingOnNullSentinels { get; internal set; }
    internal ConstraintManager ConstraintManager { get; }
    internal bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; }
    internal MetadataWorkspace MetadataWorkspace { get; }
    private bool MayApplyTransformationRules { get; }
    internal bool TransformationsDeferred { get; internal set; }
    private PlanCompiler(DbCommandTree ctree);
    private static PlanCompiler();
    private static bool get_applyTransformationsRegardlessOfSize();
    private static bool get_disableTransformationsRegardlessOfSize();
    private static int get_maxNodeCountForTransformations();
    internal static void Assert(bool condition, string message);
    internal static void Compile(DbCommandTree ctree, List`1& providerCommands, ColumnMap& resultColumnMap, Int32& columnCount, Set`1& entitySets);
    internal Command get_Command();
    [CompilerGeneratedAttribute]
internal bool get_HasSortingOnNullSentinels();
    [CompilerGeneratedAttribute]
internal void set_HasSortingOnNullSentinels(bool value);
    internal ConstraintManager get_ConstraintManager();
    internal bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    internal MetadataWorkspace get_MetadataWorkspace();
    internal bool IsPhaseNeeded(PlanCompilerPhase phase);
    internal void MarkPhaseAsNeeded(PlanCompilerPhase phase);
    internal bool IsAfterPhase(PlanCompilerPhase phase);
    private void Compile(List`1& providerCommands, ColumnMap& resultColumnMap, Int32& columnCount, Set`1& entitySets);
    private bool ApplyTransformations(String& dumpString, TransformationRulesGroup rulesGroup);
    private string SwitchToPhase(PlanCompilerPhase newPhase);
    private bool get_MayApplyTransformationRules();
    [CompilerGeneratedAttribute]
internal bool get_TransformationsDeferred();
    [CompilerGeneratedAttribute]
internal void set_TransformationsDeferred(bool value);
    private bool ComputeMayApplyTransformations();
    private void Initialize();
}
internal enum System.Data.Entity.Core.Query.PlanCompiler.PlanCompilerPhase : Enum {
    public int value__;
    public static PlanCompilerPhase PreProcessor;
    public static PlanCompilerPhase AggregatePushdown;
    public static PlanCompilerPhase Normalization;
    public static PlanCompilerPhase NTE;
    public static PlanCompilerPhase ProjectionPruning;
    public static PlanCompilerPhase NestPullup;
    public static PlanCompilerPhase Transformations;
    public static PlanCompilerPhase JoinElimination;
    public static PlanCompilerPhase NullSemantics;
    public static PlanCompilerPhase CodeGen;
    public static PlanCompilerPhase PostCodeGen;
    public static PlanCompilerPhase MaxMarker;
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.PlanCompilerUtil : object {
    internal static bool IsRowTypeCaseOpWithNullability(CaseOp op, Node n, Boolean& thenClauseIsNull);
    internal static bool IsCollectionAggregateFunction(FunctionOp op, Node n);
    internal static bool IsConstantBaseOp(OpType opType);
    internal static Node CombinePredicates(Node predicate1, Node predicate2, Command command);
    private static IEnumerable`1<Node> BreakIntoAndParts(Node predicate);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.Predicate : object {
    private Command m_command;
    private List`1<Node> m_parts;
    internal Predicate(Command command);
    internal Predicate(Command command, Node andTree);
    internal void AddPart(Node n);
    internal Node BuildAndTree();
    internal Predicate GetSingleTablePredicates(VarVec tableDefinitions, Predicate& otherPredicates);
    internal void GetEquiJoinPredicates(VarVec leftTableDefinitions, VarVec rightTableDefinitions, List`1& leftTableEquiJoinColumns, List`1& rightTableEquiJoinColumns, Predicate& otherPredicates);
    internal Predicate GetJoinPredicates(VarVec leftTableDefinitions, VarVec rightTableDefinitions, Predicate& otherPredicates);
    internal bool SatisfiesKey(VarVec keyVars, VarVec definitions);
    internal bool PreservesNulls(VarVec tableColumns, bool ansiNullSemantics);
    private void InitFromAndTree(Node andTree);
    private void GetSingleTablePredicates(List`1<VarVec> tableDefinitions, List`1& singleTablePredicates, Predicate& otherPredicates);
    private static bool IsEquiJoinPredicate(Node simplePredicateNode, Var& leftVar, Var& rightVar);
    private static bool IsEquiJoinPredicate(Node simplePredicateNode, VarVec leftTableDefinitions, VarVec rightTableDefinitions, Var& leftVar, Var& rightVar);
    private static bool PreservesNulls(Node simplePredNode, VarVec tableColumns);
    private bool IsKeyPredicate(Node left, Node right, VarVec keyVars, VarVec definitions, Var& keyVar);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.PreProcessor : SubqueryTrackingVisitor {
    private Stack`1<EntitySet> m_entityTypeScopes;
    private HashSet`1<EntityContainer> m_referencedEntityContainers;
    private HashSet`1<EntitySet> m_referencedEntitySets;
    private HashSet`1<TypeUsage> m_referencedTypes;
    private HashSet`1<EntityType> m_freeFloatingEntityConstructorTypes;
    private HashSet`1<string> m_typesNeedingNullSentinel;
    private Dictionary`2<EdmFunction, EdmProperty[]> m_tvfResultKeys;
    private RelPropertyHelper m_relPropertyHelper;
    private bool m_suppressDiscriminatorMaps;
    private Dictionary`2<EntitySetBase, DiscriminatorMapInfo> m_discriminatorMaps;
    private Dictionary`2<NavigationPropertyOpInfo, Node> _navigationPropertyOpRewrites;
    private PreProcessor(PlanCompiler planCompilerState);
    internal static void Process(PlanCompiler planCompilerState, StructuredTypeInfo& typeInfo, Dictionary`2& tvfResultKeys);
    internal void Process(Dictionary`2& tvfResultKeys);
    private void AddEntitySetReference(EntitySet entitySet);
    private void AddTypeReference(TypeUsage type);
    private List`1<RelationshipSet> GetRelationshipSets(RelationshipType relType);
    private List`1<EntitySet> GetEntitySets(TypeUsage entityType);
    private Node ExpandView(ScanTableOp scanTableOp, IsOfOp& typeFilter);
    private void DetermineDiscriminatorMapUsage(Node viewNode, EntitySetBase entitySet, EntityTypeBase rootEntityType, bool includeSubtypes);
    private Node RewriteNavigateOp(Node navigateOpNode, NavigateOp navigateOp, Var& outputVar);
    private Node BuildOfTypeTable(EntitySetBase entitySet, TypeUsage ofType, Var& resultVar);
    private Node RewriteDerefOp(Node derefOpNode, DerefOp derefOp, Var& outputVar);
    private static EntitySetBase FindTargetEntitySet(RelationshipSet relationshipSet, RelationshipEndMember targetEnd);
    private Node BuildJoinForNavProperty(RelationshipSet relSet, RelationshipEndMember end, Var& rsVar, Var& esVar);
    private Node RewriteManyToOneNavigationProperty(RelProperty relProperty, Node sourceEntityNode, TypeUsage resultType);
    private Node RewriteOneToManyNavigationProperty(RelProperty relProperty, List`1<RelationshipSet> relationshipSets, Node sourceRefNode);
    private Node RewriteOneToOneNavigationProperty(RelProperty relProperty, List`1<RelationshipSet> relationshipSets, Node sourceRefNode);
    private Node RewriteFromOneNavigationProperty(RelProperty relProperty, List`1<RelationshipSet> relationshipSets, Node sourceRefNode, Var& outputVar);
    private Node RewriteManyToManyNavigationProperty(RelProperty relProperty, List`1<RelationshipSet> relationshipSets, Node sourceRefNode);
    private Node RewriteNavigationProperty(NavigationProperty navProperty, Node sourceEntityNode, TypeUsage resultType);
    protected virtual Node VisitScalarOpDefault(ScalarOp op, Node n);
    public virtual Node Visit(DerefOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    private void ProcessConditionalOp(ConditionalOp op, Node n);
    private static void ValidateNavPropertyOp(PropertyOp op);
    private Node VisitNavPropertyOp(PropertyOp op, Node n);
    private static bool IsNavigationPropertyOverVarRef(Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    private bool CanRewriteTypeTest(EdmType testType, EdmType argumentType);
    private Node RewriteIsOfAsIsNull(IsOfOp op, Node n);
    public virtual Node Visit(NavigateOp op, Node n);
    private EntitySet GetCurrentEntityTypeScope();
    private static RelationshipSet FindRelationshipSet(EntitySetBase entitySet, RelProperty relProperty);
    private static int FindPosition(EdmType type, EdmMember member);
    private Node BuildKeyExpressionForNewEntityOp(Op op, Node n);
    private Node BuildRelPropertyExpression(EntitySetBase entitySet, RelProperty relProperty, Node keyExpr);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.PreProcessor/<BuildAllRelPropertyExpressions>d__54")]
private IEnumerable`1<Node> BuildAllRelPropertyExpressions(EntitySetBase entitySet, List`1<RelProperty> relPropertyList, Dictionary`2<RelProperty, Node> prebuiltExpressions, Node keyExpr);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual Node Visit(NewMultisetOp op, Node n);
    private static bool AreAllConstantsOrNulls(List`1<Node> nodes);
    public virtual Node Visit(CollectOp op, Node n);
    private void HandleTableOpMetadata(ScanTableBaseOp op);
    private Node ProcessScanTable(Node scanTableNode, ScanTableOp scanTableOp, IsOfOp& typeFilter);
    public virtual Node Visit(ScanTableOp op, Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    private bool IsSortUnnecessary();
    public virtual Node Visit(SortOp op, Node n);
    private static bool IsOfTypeOverScanTable(Node n, IsOfOp& typeFilter);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    public virtual Node Visit(ComparisonOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.PrimitiveTypeVarInfo : VarInfo {
    private List`1<Var> m_newVars;
    internal Var NewVar { get; }
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal PrimitiveTypeVarInfo(Var newVar);
    internal Var get_NewVar();
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ProjectionPruner : BasicOpVisitorOfNode {
    private PlanCompiler m_compilerState;
    private VarVec m_referencedVars;
    private Command m_command { get; }
    private ProjectionPruner(PlanCompiler compilerState);
    private Command get_m_command();
    internal static void Process(PlanCompiler compilerState);
    internal static Node Process(PlanCompiler compilerState, Node node);
    private Node Process(Node node);
    private void AddReference(Var v);
    private void AddReference(IEnumerable`1<Var> varSet);
    private bool IsReferenced(Var v);
    private bool IsUnreferenced(Var v);
    private void PruneVarMap(VarMap varMap);
    private void PruneVarSet(VarVec varSet);
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    public virtual Node Visit(VarDefListOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    protected virtual Node VisitNestOp(NestBaseOp op, Node n);
    public virtual Node Visit(SingleStreamNestOp op, Node n);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    protected virtual Node VisitGroupByOp(GroupByBaseOp op, Node n);
    private void RemoveRedundantConstantKeys(VarVec keyVec, VarVec outputVec, Node varDefListNode);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    protected virtual Node VisitSortOp(SortBaseOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.ProjectOpRules : object {
    internal static PatternMatchRule Rule_ProjectOverProject;
    internal static PatternMatchRule Rule_ProjectWithNoLocalDefs;
    internal static SimpleRule Rule_ProjectOpWithSimpleVarRedefinitions;
    internal static SimpleRule Rule_ProjectOpWithNullSentinel;
    internal static Rule[] Rules;
    private static ProjectOpRules();
    private static bool ProcessProjectOverProject(RuleProcessingContext context, Node projectNode, Node& newNode);
    private static bool ProcessProjectWithNoLocalDefinitions(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessProjectWithSimpleVarRedefinitions(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessProjectOpWithNullSentinel(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.PropertyPushdownHelper : BasicOpVisitor {
    private Dictionary`2<Node, PropertyRefList> m_nodePropertyRefMap;
    private Dictionary`2<Var, PropertyRefList> m_varPropertyRefMap;
    internal static void Process(Command itree, Dictionary`2& varPropertyRefs, Dictionary`2& nodePropertyRefs);
    private void Process(Node rootNode);
    private PropertyRefList GetPropertyRefList(Node node);
    private void AddPropertyRefs(Node node, PropertyRefList propertyRefs);
    private PropertyRefList GetPropertyRefList(Var v);
    private void AddPropertyRefs(Var v, PropertyRefList propertyRefs);
    private static PropertyRefList GetIdentityProperties(EntityType type);
    private static PropertyRefList GetKeyProperties(EntityType entityType);
    protected virtual void VisitDefault(Node n);
    public virtual void Visit(SoftCastOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    public virtual void Visit(ComparisonOp op, Node n);
    public virtual void Visit(ElementOp op, Node n);
    public virtual void Visit(GetEntityRefOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    private void VisitPropertyOp(Op op, Node n, PropertyRef propertyRef);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(TreatOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarDefListOp op, Node n);
    protected virtual void VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(FilterOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    public virtual void Visit(MultiStreamNestOp op, Node n);
    public virtual void Visit(SingleStreamNestOp op, Node n);
}
internal abstract class System.Data.Entity.Core.Query.PlanCompiler.PropertyRef : object {
    internal virtual PropertyRef CreateNestedPropertyRef(PropertyRef p);
    internal PropertyRef CreateNestedPropertyRef(EdmMember p);
    internal PropertyRef CreateNestedPropertyRef(RelProperty p);
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.PropertyRefList : object {
    private Dictionary`2<PropertyRef, PropertyRef> m_propertyReferences;
    private bool m_allProperties;
    internal static PropertyRefList All;
    internal bool AllProperties { get; }
    internal IEnumerable`1<PropertyRef> Properties { get; }
    private PropertyRefList(bool allProps);
    private static PropertyRefList();
    private void MakeAllProperties();
    internal void Add(PropertyRef property);
    internal void Append(PropertyRefList propertyRefs);
    internal bool get_AllProperties();
    internal PropertyRefList Clone();
    internal bool Contains(PropertyRef p);
    internal IEnumerable`1<PropertyRef> get_Properties();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.ProviderCommandInfo : object {
    private DbCommandTree _commandTree;
    internal DbCommandTree CommandTree { get; }
    internal ProviderCommandInfo(DbCommandTree commandTree);
    internal DbCommandTree get_CommandTree();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.ProviderCommandInfoUtils : object {
    internal static ProviderCommandInfo Create(Command command, Node node);
    private static Dictionary`2<Var, EdmProperty> BuildOutputVarMap(PhysicalProjectOp projectOp, TypeUsage outputType);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.RelPropertyRef : PropertyRef {
    private RelProperty m_property;
    internal RelProperty Property { get; }
    internal RelPropertyRef(RelProperty property);
    internal RelProperty get_Property();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.RootTypeInfo : TypeInfo {
    private List`1<PropertyRef> m_propertyRefList;
    private Dictionary`2<PropertyRef, EdmProperty> m_propertyMap;
    private EdmProperty m_nullSentinelProperty;
    private EdmProperty m_typeIdProperty;
    private ExplicitDiscriminatorMap m_discriminatorMap;
    private EdmProperty m_entitySetIdProperty;
    private RowType m_flattenedType;
    private TypeUsage m_flattenedTypeUsage;
    [CompilerGeneratedAttribute]
private TypeIdKind <TypeIdKind>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeUsage <TypeIdType>k__BackingField;
    internal TypeIdKind TypeIdKind { get; internal set; }
    internal TypeUsage TypeIdType { get; internal set; }
    internal RowType FlattenedType { get; internal set; }
    internal TypeUsage FlattenedTypeUsage { get; }
    internal ExplicitDiscriminatorMap DiscriminatorMap { get; }
    internal EdmProperty EntitySetIdProperty { get; }
    internal EdmProperty NullSentinelProperty { get; }
    internal IEnumerable`1<PropertyRef> PropertyRefList { get; }
    internal EdmProperty TypeIdProperty { get; }
    internal RootTypeInfo(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap);
    [CompilerGeneratedAttribute]
internal TypeIdKind get_TypeIdKind();
    [CompilerGeneratedAttribute]
internal void set_TypeIdKind(TypeIdKind value);
    [CompilerGeneratedAttribute]
internal TypeUsage get_TypeIdType();
    [CompilerGeneratedAttribute]
internal void set_TypeIdType(TypeUsage value);
    internal void AddPropertyMapping(PropertyRef propertyRef, EdmProperty newProperty);
    internal void AddPropertyRef(PropertyRef propertyRef);
    internal RowType get_FlattenedType();
    internal void set_FlattenedType(RowType value);
    internal TypeUsage get_FlattenedTypeUsage();
    internal ExplicitDiscriminatorMap get_DiscriminatorMap();
    internal EdmProperty get_EntitySetIdProperty();
    internal EdmProperty get_NullSentinelProperty();
    internal IEnumerable`1<PropertyRef> get_PropertyRefList();
    internal int GetNestedStructureOffset(PropertyRef property);
    internal bool TryGetNewProperty(PropertyRef propertyRef, bool throwIfMissing, EdmProperty& property);
    internal EdmProperty get_TypeIdProperty();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.ScalarOpRules : object {
    internal static SimpleRule Rule_SimplifyCase;
    internal static SimpleRule Rule_FlattenCase;
    internal static PatternMatchRule Rule_IsNullOverCase;
    internal static PatternMatchRule Rule_EqualsOverConstant;
    internal static PatternMatchRule Rule_LikeOverConstants;
    internal static PatternMatchRule Rule_AndOverConstantPred1;
    internal static PatternMatchRule Rule_AndOverConstantPred2;
    internal static PatternMatchRule Rule_OrOverConstantPred1;
    internal static PatternMatchRule Rule_OrOverConstantPred2;
    internal static PatternMatchRule Rule_NotOverConstantPred;
    internal static PatternMatchRule Rule_IsNullOverConstant;
    internal static PatternMatchRule Rule_IsNullOverNullSentinel;
    internal static PatternMatchRule Rule_IsNullOverNull;
    internal static PatternMatchRule Rule_NullCast;
    internal static PatternMatchRule Rule_IsNullOverVarRef;
    internal static PatternMatchRule Rule_IsNullOverAnything;
    internal static Rule[] Rules;
    private static ScalarOpRules();
    private static bool ProcessSimplifyCase(RuleProcessingContext context, Node caseOpNode, Node& newNode);
    private static bool ProcessSimplifyCase_Collapse(Node caseOpNode, Node& newNode);
    private static bool ProcessSimplifyCase_EliminateWhenClauses(RuleProcessingContext context, CaseOp caseOp, Node caseOpNode, Node& newNode);
    private static bool ProcessFlattenCase(RuleProcessingContext context, Node caseOpNode, Node& newNode);
    private static bool ProcessIsNullOverCase(RuleProcessingContext context, Node isNullOpNode, Node& newNode);
    private static bool ProcessComparisonsOverConstant(RuleProcessingContext context, Node node, Node& newNode);
    private static Nullable`1<bool> MatchesPattern(string str, string pattern);
    private static bool ProcessLikeOverConstant(RuleProcessingContext context, Node n, Node& newNode);
    private static bool ProcessLogOpOverConstant(RuleProcessingContext context, Node node, Node constantPredicateNode, Node otherNode, Node& newNode);
    private static bool ProcessAndOverConstantPredicate1(RuleProcessingContext context, Node node, Node& newNode);
    private static bool ProcessAndOverConstantPredicate2(RuleProcessingContext context, Node node, Node& newNode);
    private static bool ProcessOrOverConstantPredicate1(RuleProcessingContext context, Node node, Node& newNode);
    private static bool ProcessOrOverConstantPredicate2(RuleProcessingContext context, Node node, Node& newNode);
    private static bool ProcessNotOverConstantPredicate(RuleProcessingContext context, Node node, Node& newNode);
    private static bool ProcessIsNullOverConstant(RuleProcessingContext context, Node isNullNode, Node& newNode);
    private static bool ProcessIsNullOverNull(RuleProcessingContext context, Node isNullNode, Node& newNode);
    private static bool ProcessNullCast(RuleProcessingContext context, Node castNullOp, Node& newNode);
    private static bool ProcessIsNullOverVarRef(RuleProcessingContext context, Node isNullNode, Node& newNode);
    private static bool ProcessIsNullOverAnything(RuleProcessingContext context, Node isNullNode, Node& newNode);
    private static bool PreservesNulls(EdmFunction function);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.SetOpRules : object {
    internal static SimpleRule Rule_UnionAllOverEmptySet;
    internal static SimpleRule Rule_IntersectOverEmptySet;
    internal static SimpleRule Rule_ExceptOverEmptySet;
    internal static Rule[] Rules;
    private static SetOpRules();
    private static bool ProcessSetOpOverEmptySet(RuleProcessingContext context, Node setOpNode, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.SimplePropertyRef : PropertyRef {
    private EdmMember m_property;
    internal EdmMember Property { get; }
    internal SimplePropertyRef(EdmMember property);
    internal EdmMember get_Property();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.SingleRowOpRules : object {
    internal static PatternMatchRule Rule_SingleRowOpOverAnything;
    internal static PatternMatchRule Rule_SingleRowOpOverProject;
    internal static Rule[] Rules;
    private static SingleRowOpRules();
    private static bool ProcessSingleRowOpOverAnything(RuleProcessingContext context, Node singleRowNode, Node& newNode);
    private static bool ProcessSingleRowOpOverProject(RuleProcessingContext context, Node singleRowNode, Node& newNode);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.SortOpRules : object {
    internal static SimpleRule Rule_SortOpOverAtMostOneRow;
    internal static Rule[] Rules;
    private static SortOpRules();
    private static bool ProcessSortOpOverAtMostOneRow(RuleProcessingContext context, Node n, Node& newNode);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.SortRemover : BasicOpVisitorOfNode {
    private Command m_command;
    private Node m_topMostSort;
    private HashSet`1<Node> changedNodes;
    private SortRemover(Command command, Node topMostSort);
    internal static void Process(Command command);
    protected virtual void VisitChildren(Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.StructuredTypeInfo : object {
    private TypeUsage m_stringType;
    private TypeUsage m_intType;
    private Dictionary`2<TypeUsage, TypeInfo> m_typeInfoMap;
    private bool m_typeInfoMapPopulated;
    private EntitySet[] m_entitySetIdToEntitySetMap;
    private Dictionary`2<EntitySet, int> m_entitySetToEntitySetIdMap;
    private Dictionary`2<EntityTypeBase, EntitySet> m_entityTypeToEntitySetMap;
    private Dictionary`2<EntitySetBase, ExplicitDiscriminatorMap> m_discriminatorMaps;
    private RelPropertyHelper m_relPropertyHelper;
    private HashSet`1<string> m_typesNeedingNullSentinel;
    internal EntitySet[] EntitySetIdToEntitySetMap { get; }
    internal RelPropertyHelper RelPropertyHelper { get; }
    private StructuredTypeInfo(HashSet`1<string> typesNeedingNullSentinel);
    internal static void Process(Command itree, HashSet`1<TypeUsage> referencedTypes, HashSet`1<EntitySet> referencedEntitySets, HashSet`1<EntityType> freeFloatingEntityConstructorTypes, Dictionary`2<EntitySetBase, DiscriminatorMapInfo> discriminatorMaps, RelPropertyHelper relPropertyHelper, HashSet`1<string> typesNeedingNullSentinel, StructuredTypeInfo& structuredTypeInfo);
    private void Process(Command itree, HashSet`1<TypeUsage> referencedTypes, HashSet`1<EntitySet> referencedEntitySets, HashSet`1<EntityType> freeFloatingEntityConstructorTypes, Dictionary`2<EntitySetBase, DiscriminatorMapInfo> discriminatorMaps, RelPropertyHelper relPropertyHelper);
    internal EntitySet[] get_EntitySetIdToEntitySetMap();
    internal RelPropertyHelper get_RelPropertyHelper();
    internal EntitySet GetEntitySet(EntityTypeBase type);
    internal int GetEntitySetId(EntitySet e);
    internal Set`1<EntitySet> GetEntitySets();
    internal TypeInfo GetTypeInfo(TypeUsage type);
    private void AddEntityTypeToSetEntry(EntityType entityType, EntitySet entitySet);
    private void ProcessEntitySets(HashSet`1<EntitySet> referencedEntitySets, HashSet`1<EntityType> freeFloatingEntityConstructorTypes);
    private void ProcessDiscriminatorMaps(Dictionary`2<EntitySetBase, DiscriminatorMapInfo> discriminatorMaps);
    private void AssignEntitySetIds(HashSet`1<EntitySet> referencedEntitySets);
    private void ProcessTypes(HashSet`1<TypeUsage> referencedTypes);
    private void PopulateTypeInfoMap(HashSet`1<TypeUsage> referencedTypes);
    private bool TryGetDiscriminatorMap(EdmType type, ExplicitDiscriminatorMap& discriminatorMap);
    private void CreateTypeInfoForType(TypeUsage type);
    private TypeInfo CreateTypeInfoForStructuredType(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap);
    private void AssignTypeIds();
    private void AssignRootTypeId(TypeInfo typeInfo, string typeId);
    private void AssignTypeIdsToSubTypes(TypeInfo typeInfo);
    private void AssignTypeId(TypeInfo typeInfo, int subtypeNum);
    private static bool NeedsTypeIdProperty(TypeInfo typeInfo);
    private bool NeedsNullSentinelProperty(TypeInfo typeInfo);
    private bool NeedsEntitySetIdProperty(TypeInfo typeInfo);
    private void ExplodeTypes();
    private TypeInfo ExplodeType(TypeUsage type);
    private void ExplodeType(TypeInfo typeInfo);
    private void ExplodeRootStructuredType(RootTypeInfo rootType);
    private void ExplodeRootStructuredTypeHelper(TypeInfo typeInfo);
    private void AddRelProperties(TypeInfo typeInfo);
    private void CreateFlattenedRecordType(RootTypeInfo type);
    private TypeUsage GetNewType(TypeUsage type);
    private TypeUsage GetPropertyType(RootTypeInfo typeInfo, PropertyRef p);
    private static EntityTypeBase GetRootType(EntityTypeBase type);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.StructuredTypeNullabilityAnalyzer : ColumnMapVisitor`1<HashSet`1<string>> {
    internal static StructuredTypeNullabilityAnalyzer Instance;
    private static StructuredTypeNullabilityAnalyzer();
    internal virtual void Visit(VarRefColumnMap columnMap, HashSet`1<string> typesNeedingNullSentinel);
    private static void AddTypeNeedingNullSentinel(HashSet`1<string> typesNeedingNullSentinel, TypeUsage typeUsage);
    internal static void MarkAsNeedingNullSentinel(HashSet`1<string> typesNeedingNullSentinel, TypeUsage typeUsage);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.StructuredVarInfo : VarInfo {
    private Dictionary`2<EdmProperty, Var> m_propertyToVarMap;
    private List`1<Var> m_newVars;
    private bool m_newVarsIncludeNullSentinelVar;
    private List`1<EdmProperty> m_newProperties;
    private RowType m_newType;
    private TypeUsage m_newTypeUsage;
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal List`1<EdmProperty> Fields { get; }
    internal bool NewVarsIncludeNullSentinelVar { get; }
    internal RowType NewType { get; }
    internal TypeUsage NewTypeUsage { get; }
    internal StructuredVarInfo(RowType newType, List`1<Var> newVars, List`1<EdmProperty> newTypeProperties, bool newVarsIncludeNullSentinelVar);
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
    internal List`1<EdmProperty> get_Fields();
    internal bool get_NewVarsIncludeNullSentinelVar();
    internal bool TryGetVar(EdmProperty p, Var& v);
    internal RowType get_NewType();
    internal TypeUsage get_NewTypeUsage();
    private void InitPropertyToVarMap();
}
internal abstract class System.Data.Entity.Core.Query.PlanCompiler.SubqueryTrackingVisitor : BasicOpVisitorOfNode {
    protected PlanCompiler m_compilerState;
    protected Stack`1<Node> m_ancestors;
    private Dictionary`2<Node, List`1<Node>> m_nodeSubqueries;
    protected Command m_command { get; }
    protected SubqueryTrackingVisitor(PlanCompiler planCompilerState);
    protected Command get_m_command();
    protected void AddSubqueryToRelOpNode(Node relOpNode, Node subquery);
    protected Node AddSubqueryToParentRelOp(Var outputVar, Node subquery);
    protected Node FindRelOpAncestor();
    protected virtual void VisitChildren(Node n);
    private Node AugmentWithSubqueries(Node input, List`1<Node> subqueries, bool inputFirst);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    protected bool ProcessJoinOp(Node n);
    public virtual Node Visit(UnnestOp op, Node n);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.TransformationRules : object {
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> AllRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> ProjectRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> PostJoinEliminationRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> NullabilityRulesTable;
    internal static HashSet`1<Rule> RulesRequiringProjectionPruning;
    internal static HashSet`1<Rule> RulesRequiringNullabilityRulesToBeReapplied;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> NullSemanticsRulesTable;
    private static List`1<Rule> allRules;
    private static List`1<Rule> postJoinEliminationRules;
    private static List`1<Rule> nullabilityRules;
    private static List`1<Rule> nullSemanticsRules;
    private static List`1<Rule> AllRules { get; }
    private static List`1<Rule> PostJoinEliminationRules { get; }
    private static List`1<Rule> NullabilityRules { get; }
    private static List`1<Rule> NullSemanticsRules { get; }
    private static TransformationRules();
    private static List`1<Rule> get_AllRules();
    private static List`1<Rule> get_PostJoinEliminationRules();
    private static List`1<Rule> get_NullabilityRules();
    private static List`1<Rule> get_NullSemanticsRules();
    private static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> BuildLookupTableForRules(IEnumerable`1<Rule> rules);
    private static HashSet`1<Rule> InitializeRulesRequiringProjectionPruning();
    private static HashSet`1<Rule> InitializeRulesRequiringNullabilityRulesToBeReapplied();
    internal static bool Process(PlanCompiler compilerState, TransformationRulesGroup rulesGroup);
    private static bool Process(PlanCompiler compilerState, ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> rulesTable, Boolean& projectionPruningRequired);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.TransformationRulesContext : RuleProcessingContext {
    private PlanCompiler m_compilerState;
    private VarRemapper m_remapper;
    private Dictionary`2<Node, Node> m_suppressions;
    private VarVec m_remappedVars;
    private bool m_projectionPruningRequired;
    private bool m_reapplyNullabilityRules;
    private Stack`1<Node> m_relOpAncestors;
    internal PlanCompiler PlanCompiler { get; }
    internal bool ProjectionPruningRequired { get; }
    internal bool ReapplyNullabilityRules { get; }
    internal bool CanChangeNullSentinelValue { get; }
    internal TransformationRulesContext(PlanCompiler compilerState);
    internal PlanCompiler get_PlanCompiler();
    internal bool get_ProjectionPruningRequired();
    internal bool get_ReapplyNullabilityRules();
    internal void RemapSubtree(Node subTree);
    internal void AddVarMapping(Var oldVar, Var newVar);
    internal Node ReMap(Node node, Dictionary`2<Var, Node> varMap);
    internal Node Copy(Node node);
    internal bool IsScalarOpTree(Node node);
    internal bool IsNonNullable(Var variable);
    internal bool get_CanChangeNullSentinelValue();
    internal static bool IsOpNotSafeForNullSentinelValueChange(OpType optype);
    internal static bool HasOpNotSafeForNullSentinelValueChange(Node n);
    internal bool IsScalarOpTree(Node node, Dictionary`2<Var, int> varRefMap);
    internal bool IncludeCustomFunctionOp(Node node, Dictionary`2<Var, Node> varMap);
    internal Dictionary`2<Var, Node> GetVarMap(Node varDefListNode, Dictionary`2<Var, int> varRefMap);
    internal Node BuildNullIfExpression(Var conditionVar, Node expr);
    internal void SuppressFilterPushdown(Node n);
    internal bool IsFilterPushdownSuppressed(Node n);
    internal static bool TryGetInt32Var(IEnumerable`1<Var> varList, Var& int32Var);
    internal virtual void PreProcess(Node n);
    internal virtual void PreProcessSubTree(Node subTree);
    internal virtual void PostProcessSubTree(Node subtree);
    internal virtual void PostProcess(Node n, Rule rule);
    internal virtual int GetHashCode(Node node);
    private bool IsScalarOpTree(Node node, Dictionary`2<Var, int> varRefMap, Int32& nonLeafNodeCount);
}
internal enum System.Data.Entity.Core.Query.PlanCompiler.TransformationRulesGroup : Enum {
    public int value__;
    public static TransformationRulesGroup All;
    public static TransformationRulesGroup Project;
    public static TransformationRulesGroup PostJoinElimination;
    public static TransformationRulesGroup NullSemantics;
}
internal class System.Data.Entity.Core.Query.PlanCompiler.TryGetValue : MulticastDelegate {
    public TryGetValue(object object, IntPtr method);
    public virtual bool Invoke(Node key, Node& value);
    public virtual IAsyncResult BeginInvoke(Node key, Node& value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Node& value, IAsyncResult result);
}
internal enum System.Data.Entity.Core.Query.PlanCompiler.TypeIdKind : Enum {
    public int value__;
    public static TypeIdKind UserSpecified;
    public static TypeIdKind Generated;
}
internal class System.Data.Entity.Core.Query.PlanCompiler.TypeIdPropertyRef : PropertyRef {
    internal static TypeIdPropertyRef Instance;
    private static TypeIdPropertyRef();
    public virtual string ToString();
}
internal class System.Data.Entity.Core.Query.PlanCompiler.TypeInfo : object {
    private TypeUsage m_type;
    private List`1<TypeInfo> m_immediateSubTypes;
    private TypeInfo m_superType;
    private RootTypeInfo m_rootType;
    [CompilerGeneratedAttribute]
private object <TypeId>k__BackingField;
    internal bool IsRootType { get; }
    internal List`1<TypeInfo> ImmediateSubTypes { get; }
    internal TypeInfo SuperType { get; }
    internal RootTypeInfo RootType { get; }
    internal TypeUsage Type { get; }
    internal object TypeId { get; internal set; }
    internal RowType FlattenedType { get; }
    internal TypeUsage FlattenedTypeUsage { get; }
    internal EdmProperty EntitySetIdProperty { get; }
    internal bool HasEntitySetIdProperty { get; }
    internal EdmProperty NullSentinelProperty { get; }
    internal bool HasNullSentinelProperty { get; }
    internal EdmProperty TypeIdProperty { get; }
    internal bool HasTypeIdProperty { get; }
    internal IEnumerable`1<PropertyRef> PropertyRefList { get; }
    protected TypeInfo(TypeUsage type, TypeInfo superType);
    internal static TypeInfo Create(TypeUsage type, TypeInfo superTypeInfo, ExplicitDiscriminatorMap discriminatorMap);
    internal bool get_IsRootType();
    internal List`1<TypeInfo> get_ImmediateSubTypes();
    internal TypeInfo get_SuperType();
    internal RootTypeInfo get_RootType();
    internal TypeUsage get_Type();
    [CompilerGeneratedAttribute]
internal object get_TypeId();
    [CompilerGeneratedAttribute]
internal void set_TypeId(object value);
    internal virtual RowType get_FlattenedType();
    internal virtual TypeUsage get_FlattenedTypeUsage();
    internal virtual EdmProperty get_EntitySetIdProperty();
    internal bool get_HasEntitySetIdProperty();
    internal virtual EdmProperty get_NullSentinelProperty();
    internal bool get_HasNullSentinelProperty();
    internal virtual EdmProperty get_TypeIdProperty();
    internal bool get_HasTypeIdProperty();
    internal virtual IEnumerable`1<PropertyRef> get_PropertyRefList();
    internal EdmProperty GetNewProperty(PropertyRef propertyRef);
    internal bool TryGetNewProperty(PropertyRef propertyRef, bool throwIfMissing, EdmProperty& newProperty);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.TypeInfo/<GetKeyPropertyRefs>d__40")]
internal IEnumerable`1<PropertyRef> GetKeyPropertyRefs();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.TypeInfo/<GetIdentityPropertyRefs>d__41")]
internal IEnumerable`1<PropertyRef> GetIdentityPropertyRefs();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.TypeInfo/<GetAllPropertyRefs>d__42")]
internal IEnumerable`1<PropertyRef> GetAllPropertyRefs();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.TypeInfo/<GetAllProperties>d__43")]
internal IEnumerable`1<EdmProperty> GetAllProperties();
    internal List`1<TypeInfo> GetTypeHierarchy();
    private void GetTypeHierarchy(List`1<TypeInfo> result);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.TypeUsageEqualityComparer : object {
    internal static TypeUsageEqualityComparer Instance;
    private static TypeUsageEqualityComparer();
    public sealed virtual bool Equals(TypeUsage x, TypeUsage y);
    public sealed virtual int GetHashCode(TypeUsage obj);
    internal static bool Equals(EdmType x, EdmType y);
}
internal static class System.Data.Entity.Core.Query.PlanCompiler.TypeUtils : object {
    internal static bool IsStructuredType(TypeUsage type);
    internal static bool IsCollectionType(TypeUsage type);
    internal static bool IsEnumerationType(TypeUsage type);
    internal static TypeUsage CreateCollectionType(TypeUsage elementType);
}
internal abstract class System.Data.Entity.Core.Query.PlanCompiler.VarInfo : object {
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal abstract virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal enum System.Data.Entity.Core.Query.PlanCompiler.VarInfoKind : Enum {
    public int value__;
    public static VarInfoKind PrimitiveTypeVarInfo;
    public static VarInfoKind StructuredTypeVarInfo;
    public static VarInfoKind CollectionVarInfo;
}
internal class System.Data.Entity.Core.Query.PlanCompiler.VarInfoMap : object {
    private Dictionary`2<Var, VarInfo> m_map;
    internal VarInfo CreateStructuredVarInfo(Var v, RowType newType, List`1<Var> newVars, List`1<EdmProperty> newProperties, bool newVarsIncludeNullSentinelVar);
    internal VarInfo CreateStructuredVarInfo(Var v, RowType newType, List`1<Var> newVars, List`1<EdmProperty> newProperties);
    internal VarInfo CreateCollectionVarInfo(Var v, Var newVar);
    internal VarInfo CreatePrimitiveTypeVarInfo(Var v, Var newVar);
    internal bool TryGetVarInfo(Var v, VarInfo& varInfo);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.VarRefManager : object {
    private Dictionary`2<Node, Node> m_nodeToParentMap;
    private Dictionary`2<Node, int> m_nodeToSiblingNumber;
    private Command m_command;
    internal VarRefManager(Command command);
    internal void AddChildren(Node parent);
    internal bool HasKeyReferences(VarVec keys, Node definingNode, Node targetJoinNode);
    private static bool HasVarReferencesShallow(Node node, VarVec vars, int childIndex, Boolean& continueUp);
    private static bool HasVarReferences(VarList listToCheck, VarVec vars);
    private static bool HasVarReferences(VarVec listToCheck, VarVec vars);
    private static bool HasVarReferences(List`1<SortKey> listToCheck, VarVec vars);
    private static bool HasVarReferences(SetOp op, VarVec vars, int index);
}
internal class System.Data.Entity.Core.Query.PlanCompiler.VarRemapper : BasicOpVisitor {
    private IDictionary`2<Var, Var> m_varMap;
    protected Command m_command;
    internal VarRemapper(Command command);
    internal VarRemapper(Command command, IDictionary`2<Var, Var> varMap);
    internal void AddMapping(Var oldVar, Var newVar);
    internal virtual void RemapNode(Node node);
    internal virtual void RemapSubtree(Node subTree);
    internal VarList RemapVarList(VarList varList);
    internal static VarList RemapVarList(Command command, IDictionary`2<Var, Var> varMap, VarList varList);
    private Var Map(Var v);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.Query.PlanCompiler.VarRemapper/<MapVars>d__10")]
private IEnumerable`1<Var> MapVars(IEnumerable`1<Var> vars);
    private void Map(VarVec vec);
    private void Map(VarList varList);
    private void Map(VarMap varMap);
    private void Map(List`1<SortKey> sortKeys);
    protected virtual void VisitDefault(Node n);
    public virtual void Visit(VarRefOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader : DbDataReader {
    private Shaper`1<RecordState> _shaper;
    private IEnumerator`1<KeyValuePair`2<Shaper`1<RecordState>, CoordinatorFactory`1<RecordState>>> _nextResultShaperInfoEnumerator;
    private CoordinatorFactory`1<RecordState> _coordinatorFactory;
    private RecordState _defaultRecordState;
    private BridgeDataRecord _dataRecord;
    private bool _hasRows;
    private bool _isClosed;
    private int _initialized;
    private Action _initialize;
    private Func`2<CancellationToken, Task> _initializeAsync;
    public int Depth { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal BridgeDataReader(Shaper`1<RecordState> shaper, CoordinatorFactory`1<RecordState> coordinatorFactory, int depth, IEnumerator`1<KeyValuePair`2<Shaper`1<RecordState>, CoordinatorFactory`1<RecordState>>> nextResultShaperInfos);
    protected virtual void EnsureInitialized();
    protected virtual Task EnsureInitializedAsync(CancellationToken cancellationToken);
    private void SetShaper(Shaper`1<RecordState> shaper, CoordinatorFactory`1<RecordState> coordinatorFactory, int depth);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<SetShaperAsync>d__14")]
private Task SetShaperAsync(Shaper`1<RecordState> shaper, CoordinatorFactory`1<RecordState> coordinatorFactory, int depth, CancellationToken cancellationToken);
    private void InitializeHasRows();
    private void AssertReaderIsOpen(string methodName);
    internal void CloseImplicitly();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<CloseImplicitlyAsync>d__18")]
internal Task CloseImplicitlyAsync(CancellationToken cancellationToken);
    private void Consume();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<ConsumeAsync>d__20")]
private Task ConsumeAsync(CancellationToken cancellationToken);
    internal static Type GetClrTypeFromTypeMetadata(TypeUsage typeUsage);
    public virtual int get_Depth();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual void Close();
    [EditorBrowsableAttribute("1")]
public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<NextResultAsync>d__34")]
public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<ReadAsync>d__36")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private bool ReadInternal();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<ReadInternalAsync>d__38")]
private Task`1<bool> ReadInternalAsync(CancellationToken cancellationToken);
    public virtual int get_FieldCount();
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public virtual object GetValue(int ordinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReader/<GetFieldValueAsync>d__53`1")]
public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual int GetValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int ordinal);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(int ordinal, CancellationToken cancellationToken);
}
internal class System.Data.Entity.Core.Query.ResultAssembly.BridgeDataReaderFactory : object {
    private Translator _translator;
    public BridgeDataReaderFactory(Translator translator);
    public virtual DbDataReader Create(DbDataReader storeDataReader, ColumnMap columnMap, MetadataWorkspace workspace, IEnumerable`1<ColumnMap> nextResultColumnMaps);
    private KeyValuePair`2<Shaper`1<RecordState>, CoordinatorFactory`1<RecordState>> CreateShaperInfo(DbDataReader storeDataReader, ColumnMap columnMap, MetadataWorkspace workspace);
    private IEnumerable`1<KeyValuePair`2<Shaper`1<RecordState>, CoordinatorFactory`1<RecordState>>> GetNextResultShaperInfo(DbDataReader storeDataReader, MetadataWorkspace workspace, IEnumerable`1<ColumnMap> nextResultColumnMaps);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.Query.ResultAssembly.BridgeDataRecord : DbDataRecord {
    internal int Depth;
    private Shaper`1<RecordState> _shaper;
    private RecordState _source;
    private Status _status;
    private int _lastColumnRead;
    private long _lastDataOffsetRead;
    private int _lastOrdinalCheckedForNull;
    private object _lastValueCheckedForNull;
    private BridgeDataReader _currentNestedReader;
    private BridgeDataRecord _currentNestedRecord;
    internal bool HasData { get; }
    internal bool IsClosed { get; }
    internal bool IsExplicitlyClosed { get; }
    internal bool IsImplicitlyClosed { get; }
    public DataRecordInfo DataRecordInfo { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal BridgeDataRecord(Shaper`1<RecordState> shaper, int depth);
    internal void CloseExplicitly();
    internal Task CloseExplicitlyAsync(CancellationToken cancellationToken);
    internal void CloseImplicitly();
    internal Task CloseImplicitlyAsync(CancellationToken cancellationToken);
    private T Close(Status status, Func`1<T> close);
    private object CloseNestedObjectImplicitly();
    [AsyncStateMachineAttribute("System.Data.Entity.Core.Query.ResultAssembly.BridgeDataRecord/<CloseNestedObjectImplicitlyAsync>d__18")]
private Task CloseNestedObjectImplicitlyAsync(CancellationToken cancellationToken);
    internal void SetRecordSource(RecordState newSource, bool hasData);
    private void AssertReaderIsOpen();
    private void AssertReaderIsOpenWithData();
    private void AssertSequentialAccess(int ordinal);
    private void AssertSequentialAccess(int ordinal, long dataOffset, string methodName);
    internal bool get_HasData();
    internal bool get_IsClosed();
    internal bool get_IsExplicitlyClosed();
    internal bool get_IsImplicitlyClosed();
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual int get_FieldCount();
    private TypeUsage GetTypeUsage(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual object GetValue(int ordinal);
    private object GetNestedObjectValue(object result);
    public virtual int GetValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int ordinal);
}
internal enum System.Data.Entity.Core.SchemaObjectModel.Action : Enum {
    public int value__;
    public static Action None;
    public static Action Cascade;
}
internal enum System.Data.Entity.Core.SchemaObjectModel.AddErrorKind : Enum {
    public int value__;
    public static AddErrorKind Succeeded;
    public static AddErrorKind MissingNameError;
    public static AddErrorKind DuplicateNameError;
}
internal class System.Data.Entity.Core.SchemaObjectModel.AliasResolver : object {
    private Dictionary`2<string, string> _aliasToNamespaceMap;
    private List`1<UsingElement> _usingElementCollection;
    private Schema _definingSchema;
    public AliasResolver(Schema schema);
    public void Add(UsingElement usingElement);
    public bool TryResolveAlias(string alias, String& namespaceName);
    public void ResolveNamespaces();
    private bool CheckForSystemNamespace(UsingElement refSchema, string name, NameKind nameKind);
}
internal class System.Data.Entity.Core.SchemaObjectModel.AttributeValueNotification : MulticastDelegate {
    public AttributeValueNotification(object object, IntPtr method);
    public virtual void Invoke(string token, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public virtual IAsyncResult BeginInvoke(string token, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Entity.Core.SchemaObjectModel.BooleanFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public BooleanFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ByteFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public ByteFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.CollectionTypeElement : ModelFunctionTypeElement {
    private ModelFunctionTypeElement _typeSubElement;
    internal ModelFunctionTypeElement SubElement { get; }
    internal CollectionTypeElement(SchemaElement parentElement);
    internal ModelFunctionTypeElement get_SubElement();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleElementTypeAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.DocumentationElement : SchemaElement {
    private Documentation _metdataDocumentation;
    public Documentation MetadataDocumentation { get; }
    public DocumentationElement(SchemaElement parentElement);
    public Documentation get_MetadataDocumentation();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleText(XmlReader reader);
    private void HandleSummaryElement(XmlReader reader);
    private void HandleLongDescriptionElement(XmlReader reader);
}
[DebuggerDisplayAttribute("Name={Name}")]
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainer : SchemaType {
    private SchemaElementLookUpTable`1<SchemaElement> _members;
    private ISchemaElementLookUpTable`1<EntityContainerEntitySet> _entitySets;
    private ISchemaElementLookUpTable`1<EntityContainerRelationshipSet> _relationshipSets;
    private ISchemaElementLookUpTable`1<Function> _functionImports;
    private string _unresolvedExtendedEntityContainerName;
    private EntityContainer _entityContainerGettingExtended;
    private bool _isAlreadyValidated;
    private bool _isAlreadyResolved;
    private SchemaElementLookUpTable`1<SchemaElement> Members { get; }
    public ISchemaElementLookUpTable`1<EntityContainerEntitySet> EntitySets { get; }
    public ISchemaElementLookUpTable`1<EntityContainerRelationshipSet> RelationshipSets { get; }
    public ISchemaElementLookUpTable`1<Function> FunctionImports { get; }
    public EntityContainer ExtendingEntityContainer { get; }
    public string FQName { get; }
    public string Identity { get; }
    public EntityContainer(Schema parentElement);
    private SchemaElementLookUpTable`1<SchemaElement> get_Members();
    public ISchemaElementLookUpTable`1<EntityContainerEntitySet> get_EntitySets();
    public ISchemaElementLookUpTable`1<EntityContainerRelationshipSet> get_RelationshipSets();
    public ISchemaElementLookUpTable`1<Function> get_FunctionImports();
    public EntityContainer get_ExtendingEntityContainer();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    private void HandleEntitySetElement(XmlReader reader);
    private void HandleAssociationSetElement(XmlReader reader);
    private void HandleFunctionImport(XmlReader reader);
    private void HandleExtendsAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    internal EntityContainerEntitySet FindEntitySet(string name);
    private void DuplicateOrEquivalentMemberNameWhileExtendingEntityContainer(SchemaElement schemaElement, AddErrorKind error);
    private void ValidateOnlyBaseEntitySetTypeDefinesConcurrency();
    private void ValidateRelationshipSetHaveUniqueEnds();
    private static bool TypeIsSubTypeOf(SchemaEntityType itemType, Dictionary`2<SchemaEntityType, EntityContainerEntitySet> baseEntitySetTypes, EntityContainerEntitySet& set);
    private static bool TypeDefinesNewConcurrencyProperties(SchemaEntityType itemType);
    public virtual string get_FQName();
    public virtual string get_Identity();
    private void CheckForDuplicateTableMapping(HashSet`1<string> tableKeys, EntityContainerEntitySet entitySet);
    private static bool AreRelationshipEndsEqual(EntityContainerRelationshipSetEnd left, EntityContainerRelationshipSetEnd right);
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainerAssociationSet : EntityContainerRelationshipSet {
    private Dictionary`2<string, EntityContainerAssociationSetEnd> _relationshipEnds;
    private List`1<EntityContainerAssociationSetEnd> _rolelessEnds;
    internal IEnumerable`1<EntityContainerRelationshipSetEnd> Ends { get; }
    public EntityContainerAssociationSet(EntityContainer parentElement);
    [IteratorStateMachineAttribute("System.Data.Entity.Core.SchemaObjectModel.EntityContainerAssociationSet/<get_Ends>d__4")]
internal virtual IEnumerable`1<EntityContainerRelationshipSetEnd> get_Ends();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    private void HandleEndElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    protected virtual void AddEnd(IRelationshipEnd relationshipEnd, EntityContainerEntitySet entitySet);
    protected virtual bool HasEnd(string role);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainerAssociationSetEnd : EntityContainerRelationshipSetEnd {
    private string _unresolvedRelationshipEndRole;
    public string Role { get; public set; }
    public string Name { get; }
    public EntityContainerAssociationSetEnd(EntityContainerAssociationSet parentElement);
    public string get_Role();
    public void set_Role(string value);
    public virtual string get_Name();
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleRoleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    private IRelationshipEnd InferRelationshipEnd(EntityContainerEntitySet set);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainerEntitySet : SchemaElement {
    private SchemaEntityType _entityType;
    private string _unresolvedEntityTypeName;
    private string _schema;
    private string _table;
    private EntityContainerEntitySetDefiningQuery _definingQueryElement;
    public string FQName { get; }
    public SchemaEntityType EntityType { get; }
    public string DbSchema { get; }
    public string Table { get; }
    public string DefiningQuery { get; }
    public EntityContainerEntitySet(EntityContainer parentElement);
    public virtual string get_FQName();
    public SchemaEntityType get_EntityType();
    public string get_DbSchema();
    public string get_Table();
    public string get_DefiningQuery();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleDefiningQueryElement(XmlReader reader);
    protected virtual void HandleNameAttribute(XmlReader reader);
    private void HandleEntityTypeAttribute(XmlReader reader);
    private void HandleDbSchemaAttribute(XmlReader reader);
    private void HandleTableAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainerEntitySetDefiningQuery : SchemaElement {
    private string _query;
    public string Query { get; }
    public EntityContainerEntitySetDefiningQuery(EntityContainerEntitySet parentElement);
    public string get_Query();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual void Validate();
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.EntityContainerRelationshipSet : SchemaElement {
    private IRelationship _relationship;
    private string _unresolvedRelationshipTypeName;
    public string FQName { get; }
    internal IRelationship Relationship { get; internal set; }
    internal IEnumerable`1<EntityContainerRelationshipSetEnd> Ends { get; }
    internal EntityContainer ParentElement { get; }
    public EntityContainerRelationshipSet(EntityContainer parentElement);
    public virtual string get_FQName();
    internal IRelationship get_Relationship();
    internal void set_Relationship(IRelationship value);
    protected abstract virtual bool HasEnd(string role);
    protected abstract virtual void AddEnd(IRelationshipEnd relationshipEnd, EntityContainerEntitySet entitySet);
    internal abstract virtual IEnumerable`1<EntityContainerRelationshipSetEnd> get_Ends();
    protected void HandleRelationshipTypeNameAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    private void InferEnds();
    private EntityContainerEntitySet InferEntitySet(IRelationshipEnd relationshipEnd);
    internal EntityContainer get_ParentElement();
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityContainerRelationshipSetEnd : SchemaElement {
    private IRelationshipEnd _relationshipEnd;
    private string _unresolvedEntitySetName;
    private EntityContainerEntitySet _entitySet;
    public IRelationshipEnd RelationshipEnd { get; internal set; }
    public EntityContainerEntitySet EntitySet { get; internal set; }
    internal EntityContainerRelationshipSet ParentElement { get; }
    public EntityContainerRelationshipSetEnd(EntityContainerRelationshipSet parentElement);
    public IRelationshipEnd get_RelationshipEnd();
    internal void set_RelationshipEnd(IRelationshipEnd value);
    public EntityContainerEntitySet get_EntitySet();
    internal void set_EntitySet(EntityContainerEntitySet value);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleEntitySetAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal EntityContainerRelationshipSet get_ParentElement();
}
internal class System.Data.Entity.Core.SchemaObjectModel.EntityKeyElement : SchemaElement {
    private List`1<PropertyRefElement> _keyProperties;
    public IList`1<PropertyRefElement> KeyProperties { get; }
    public EntityKeyElement(SchemaEntityType parentElement);
    public IList`1<PropertyRefElement> get_KeyProperties();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    private void HandlePropertyRefElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal enum System.Data.Entity.Core.SchemaObjectModel.ErrorCode : Enum {
    public int value__;
    public static ErrorCode InvalidErrorCodeValue;
    public static ErrorCode SecurityError;
    public static ErrorCode IOException;
    public static ErrorCode XmlError;
    public static ErrorCode TooManyErrors;
    public static ErrorCode MalformedXml;
    public static ErrorCode UnexpectedXmlNodeType;
    public static ErrorCode UnexpectedXmlAttribute;
    public static ErrorCode UnexpectedXmlElement;
    public static ErrorCode TextNotAllowed;
    public static ErrorCode EmptyFile;
    public static ErrorCode XsdError;
    public static ErrorCode InvalidAlias;
    public static ErrorCode IntegerExpected;
    public static ErrorCode InvalidName;
    public static ErrorCode AlreadyDefined;
    public static ErrorCode ElementNotInSchema;
    public static ErrorCode InvalidBaseType;
    public static ErrorCode NoConcreteDescendants;
    public static ErrorCode CycleInTypeHierarchy;
    public static ErrorCode InvalidVersionNumber;
    public static ErrorCode InvalidSize;
    public static ErrorCode InvalidBoolean;
    public static ErrorCode BadType;
    public static ErrorCode InvalidVersioningClass;
    public static ErrorCode InvalidVersionIntroduced;
    public static ErrorCode BadNamespace;
    public static ErrorCode UnresolvedReferenceSchema;
    public static ErrorCode NotInNamespace;
    public static ErrorCode NotUnnestedType;
    public static ErrorCode BadProperty;
    public static ErrorCode UndefinedProperty;
    public static ErrorCode InvalidPropertyType;
    public static ErrorCode InvalidAsNestedType;
    public static ErrorCode InvalidChangeUnit;
    public static ErrorCode UnauthorizedAccessException;
    public static ErrorCode MissingNamespaceAttribute;
    public static ErrorCode PrecisionOutOfRange;
    public static ErrorCode ScaleOutOfRange;
    public static ErrorCode DefaultNotAllowed;
    public static ErrorCode InvalidDefault;
    public static ErrorCode RequiredFacetMissing;
    public static ErrorCode BadImageFormatException;
    public static ErrorCode MissingSchemaXml;
    public static ErrorCode BadPrecisionAndScale;
    public static ErrorCode InvalidChangeUnitUsage;
    public static ErrorCode NameTooLong;
    public static ErrorCode CircularlyDefinedType;
    public static ErrorCode InvalidAssociation;
    public static ErrorCode FacetNotAllowedByType;
    public static ErrorCode ConstantFacetSpecifiedInSchema;
    public static ErrorCode BadNavigationProperty;
    public static ErrorCode InvalidKey;
    public static ErrorCode InvalidMultiplicity;
    public static ErrorCode InvalidAction;
    public static ErrorCode InvalidOperation;
    public static ErrorCode InvalidContainerTypeForEnd;
    public static ErrorCode InvalidEndEntitySet;
    public static ErrorCode AmbiguousEntityContainerEnd;
    public static ErrorCode MissingExtentEntityContainerEnd;
    public static ErrorCode BadParameterDirection;
    public static ErrorCode FailedInference;
    public static ErrorCode InvalidFacetInProviderManifest;
    public static ErrorCode InvalidRoleInRelationshipConstraint;
    public static ErrorCode InvalidPropertyInRelationshipConstraint;
    public static ErrorCode TypeMismatchRelationshipConstraint;
    public static ErrorCode InvalidMultiplicityInRoleInRelationshipConstraint;
    public static ErrorCode MismatchNumberOfPropertiesInRelationshipConstraint;
    public static ErrorCode MissingPropertyInRelationshipConstraint;
    public static ErrorCode MissingConstraintOnRelationshipType;
    public static ErrorCode SameRoleReferredInReferentialConstraint;
    public static ErrorCode InvalidValueForParameterTypeSemantics;
    public static ErrorCode InvalidRelationshipEndType;
    public static ErrorCode InvalidPrimitiveTypeKind;
    public static ErrorCode InvalidTypeConversionDestinationType;
    public static ErrorCode ByteValueExpected;
    public static ErrorCode FunctionWithNonPrimitiveTypeNotSupported;
    public static ErrorCode PrecisionMoreThanAllowedMax;
    public static ErrorCode EntityKeyMustBeScalar;
    public static ErrorCode EntityKeyTypeCurrentlyNotSupported;
    public static ErrorCode NoPreferredMappingForPrimitiveTypeKind;
    public static ErrorCode TooManyPreferredMappingsForPrimitiveTypeKind;
    public static ErrorCode EndWithManyMultiplicityCannotHaveOperationsSpecified;
    public static ErrorCode EntitySetTypeHasNoKeys;
    public static ErrorCode InvalidNumberOfParametersForAggregateFunction;
    public static ErrorCode InvalidParameterTypeForAggregateFunction;
    public static ErrorCode ComposableFunctionOrFunctionImportWithoutReturnType;
    public static ErrorCode NonComposableFunctionWithReturnType;
    public static ErrorCode NonComposableFunctionAttributesNotValid;
    public static ErrorCode ComposableFunctionWithCommandText;
    public static ErrorCode FunctionDeclaresCommandTextAndStoreFunctionName;
    public static ErrorCode SystemNamespace;
    public static ErrorCode EmptyDefiningQuery;
    public static ErrorCode TableAndSchemaAreMutuallyExclusiveWithDefiningQuery;
    public static ErrorCode ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    public static ErrorCode FunctionImportUnsupportedReturnType;
    public static ErrorCode FunctionImportUnknownEntitySet;
    public static ErrorCode FunctionImportReturnsEntitiesButDoesNotSpecifyEntitySet;
    public static ErrorCode FunctionImportEntityTypeDoesNotMatchEntitySet;
    public static ErrorCode FunctionImportSpecifiesEntitySetButDoesNotReturnEntityType;
    public static ErrorCode InternalError;
    public static ErrorCode SimilarRelationshipEnd;
    public static ErrorCode DuplicatePropertySpecifiedInEntityKey;
    public static ErrorCode AmbiguousFunctionReturnType;
    public static ErrorCode NullableComplexType;
    public static ErrorCode NonComplexCollections;
    public static ErrorCode KeyMissingOnEntityType;
    public static ErrorCode InvalidNamespaceInUsing;
    public static ErrorCode NeedNotUseSystemNamespaceInUsing;
    public static ErrorCode CannotUseSystemNamespaceAsAlias;
    public static ErrorCode InvalidNamespaceName;
    public static ErrorCode InvalidEntityContainerNameInExtends;
    public static ErrorCode InvalidNamespaceOrAliasSpecified;
    public static ErrorCode EntityContainerCannotExtendItself;
    public static ErrorCode FailedToRetrieveProviderManifest;
    public static ErrorCode ProviderManifestTokenMismatch;
    public static ErrorCode ProviderManifestTokenNotFound;
    public static ErrorCode EmptyCommandText;
    public static ErrorCode InconsistentProvider;
    public static ErrorCode InconsistentProviderManifestToken;
    public static ErrorCode DuplicatedFunctionoverloads;
    public static ErrorCode InvalidProvider;
    public static ErrorCode FunctionWithNonEdmTypeNotSupported;
    public static ErrorCode ComplexTypeAsReturnTypeAndDefinedEntitySet;
    public static ErrorCode ComplexTypeAsReturnTypeAndNestedComplexProperty;
    public static ErrorCode FunctionImportComposableAndSideEffectingNotAllowed;
    public static ErrorCode FunctionImportEntitySetAndEntitySetPathDeclared;
    public static ErrorCode FacetOnNonScalarType;
    public static ErrorCode IncorrectlyPlacedFacet;
    public static ErrorCode ReturnTypeNotDeclared;
    public static ErrorCode TypeNotDeclared;
    public static ErrorCode RowTypeWithoutProperty;
    public static ErrorCode ReturnTypeDeclaredAsAttributeAndElement;
    public static ErrorCode TypeDeclaredAsAttributeAndElement;
    public static ErrorCode ReferenceToNonEntityType;
    public static ErrorCode FunctionImportCollectionAndRefParametersNotAllowed;
    public static ErrorCode IncompatibleSchemaVersion;
    public static ErrorCode NoCodeGenNamespaceInStructuralAnnotation;
    public static ErrorCode AmbiguousFunctionAndType;
    public static ErrorCode CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    public static ErrorCode BoolValueExpected;
    public static ErrorCode EndWithoutMultiplicity;
    public static ErrorCode TVFReturnTypeRowHasNonScalarProperty;
    public static ErrorCode FunctionImportNonNullableParametersNotAllowed;
    public static ErrorCode FunctionWithDefiningExpressionAndEntitySetNotAllowed;
    public static ErrorCode FunctionEntityTypeScopeDoesNotMatchReturnType;
    public static ErrorCode InvalidEnumUnderlyingType;
    public static ErrorCode DuplicateEnumMember;
    public static ErrorCode CalculatedEnumValueOutOfRange;
    public static ErrorCode EnumMemberValueOutOfItsUnderylingTypeRange;
    public static ErrorCode InvalidSystemReferenceId;
    public static ErrorCode UnexpectedSpatialType;
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.FacetDescriptionElement : SchemaElement {
    private Nullable`1<int> _minValue;
    private Nullable`1<int> _maxValue;
    private bool _isConstant;
    private FacetDescription _facetDescription;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    public EdmType FacetType { get; }
    public Nullable`1<int> MinValue { get; }
    public Nullable`1<int> MaxValue { get; }
    public object DefaultValue { get; public set; }
    public FacetDescription FacetDescription { get; }
    public FacetDescriptionElement(TypeElement type, string name);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleMinimumAttribute(XmlReader reader);
    protected void HandleMaximumAttribute(XmlReader reader);
    protected abstract virtual void HandleDefaultAttribute(XmlReader reader);
    protected void HandleConstantAttribute(XmlReader reader);
    public abstract virtual EdmType get_FacetType();
    public Nullable`1<int> get_MinValue();
    public Nullable`1<int> get_MaxValue();
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    public FacetDescription get_FacetDescription();
    internal void CreateAndValidateFacetDescription(string declaringTypeName);
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.FacetEnabledSchemaElement : SchemaElement {
    protected SchemaType _type;
    protected string _unresolvedType;
    protected TypeUsageBuilder _typeUsageBuilder;
    internal Function ParentElement { get; }
    internal SchemaType Type { get; }
    internal TypeUsage TypeUsage { get; }
    internal TypeUsageBuilder TypeUsageBuilder { get; }
    internal bool HasUserDefinedFacets { get; }
    internal string UnresolvedType { get; internal set; }
    internal FacetEnabledSchemaElement(Function parentElement);
    internal FacetEnabledSchemaElement(SchemaElement parentElement);
    internal Function get_ParentElement();
    internal SchemaType get_Type();
    internal virtual TypeUsage get_TypeUsage();
    internal TypeUsageBuilder get_TypeUsageBuilder();
    internal bool get_HasUserDefinedFacets();
    internal string get_UnresolvedType();
    internal void set_UnresolvedType(string value);
    internal virtual void ResolveTopLevelNames();
    internal void ValidateAndSetTypeUsage(ScalarType scalar);
    internal void ValidateAndSetTypeUsage(EdmType edmType);
    protected virtual bool HandleAttribute(XmlReader reader);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.SchemaObjectModel.FilteredSchemaElementLookUpTable`2 : object {
    private SchemaElementLookUpTable`1<S> _lookUpTable;
    public int Count { get; }
    public T Item { get; }
    public FilteredSchemaElementLookUpTable`2(SchemaElementLookUpTable`1<S> lookUpTable);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual T get_Item(string key);
    public sealed virtual T LookUpEquivalentKey(string key);
}
internal class System.Data.Entity.Core.SchemaObjectModel.Function : SchemaType {
    private bool _isAggregate;
    private bool _isBuiltIn;
    private bool _isNiladicFunction;
    protected bool _isComposable;
    protected FunctionCommandText _commandText;
    private string _storeFunctionName;
    protected SchemaType _type;
    private string _unresolvedType;
    protected bool _isRefType;
    protected SchemaElementLookUpTable`1<Parameter> _parameters;
    protected List`1<ReturnType> _returnTypeList;
    private CollectionKind _returnTypeCollectionKind;
    private ParameterTypeSemantics _parameterTypeSemantics;
    private string _schema;
    private string _functionStrongName;
    private static Regex _typeParser;
    public bool IsAggregate { get; internal set; }
    public bool IsBuiltIn { get; internal set; }
    public bool IsNiladicFunction { get; internal set; }
    public bool IsComposable { get; internal set; }
    public string CommandText { get; }
    public ParameterTypeSemantics ParameterTypeSemantics { get; internal set; }
    public string StoreFunctionName { get; internal set; }
    public SchemaType Type { get; }
    public IList`1<ReturnType> ReturnTypeList { get; }
    public SchemaElementLookUpTable`1<Parameter> Parameters { get; }
    public CollectionKind CollectionKind { get; internal set; }
    public string Identity { get; }
    public bool IsReturnAttributeReftype { get; }
    public bool IsFunctionImport { get; }
    public string DbSchema { get; }
    internal string UnresolvedReturnType { get; internal set; }
    public Function(Schema parentElement);
    private static Function();
    internal static void RemoveTypeModifier(String& type, TypeModifier& typeModifier, Boolean& isRefType);
    internal static string GetTypeNameForErrorMessage(SchemaType type, CollectionKind colKind, bool isRef);
    public bool get_IsAggregate();
    internal void set_IsAggregate(bool value);
    public bool get_IsBuiltIn();
    internal void set_IsBuiltIn(bool value);
    public bool get_IsNiladicFunction();
    internal void set_IsNiladicFunction(bool value);
    public bool get_IsComposable();
    internal void set_IsComposable(bool value);
    public string get_CommandText();
    public ParameterTypeSemantics get_ParameterTypeSemantics();
    internal void set_ParameterTypeSemantics(ParameterTypeSemantics value);
    public string get_StoreFunctionName();
    internal void set_StoreFunctionName(string value);
    public virtual SchemaType get_Type();
    public IList`1<ReturnType> get_ReturnTypeList();
    public SchemaElementLookUpTable`1<Parameter> get_Parameters();
    public CollectionKind get_CollectionKind();
    internal void set_CollectionKind(CollectionKind value);
    public virtual string get_Identity();
    public bool get_IsReturnAttributeReftype();
    public virtual bool get_IsFunctionImport();
    public string get_DbSchema();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual void ResolveSecondLevelNames();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    protected void CloneSetFunctionFields(Function clone);
    internal string get_UnresolvedReturnType();
    internal void set_UnresolvedReturnType(string value);
    private void HandleDbSchemaAttribute(XmlReader reader);
    private void HandleAggregateAttribute(XmlReader reader);
    private void HandleBuiltInAttribute(XmlReader reader);
    private void HandleStoreFunctionNameAttribute(XmlReader reader);
    private void HandleNiladicFunctionAttribute(XmlReader reader);
    private void HandleIsComposableAttribute(XmlReader reader);
    private void HandleCommandTextFunctionElement(XmlReader reader);
    protected virtual void HandleReturnTypeAttribute(XmlReader reader);
    protected void HandleParameterElement(XmlReader reader);
    protected void HandleReturnTypeElement(XmlReader reader);
    private void HandleParameterTypeSemanticsAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.FunctionCommandText : SchemaElement {
    private string _commandText;
    public string CommandText { get; }
    public FunctionCommandText(Function parentElement);
    public string get_CommandText();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.FunctionImportElement : Function {
    private string _unresolvedEntitySet;
    private bool _entitySetPathDefined;
    private EntityContainer _container;
    private EntityContainerEntitySet _entitySet;
    private Nullable`1<bool> _isSideEffecting;
    public bool IsFunctionImport { get; }
    public string FQName { get; }
    public string Identity { get; }
    public EntityContainer Container { get; }
    public EntityContainerEntitySet EntitySet { get; }
    internal FunctionImportElement(EntityContainer container);
    public virtual bool get_IsFunctionImport();
    public virtual string get_FQName();
    public virtual string get_Identity();
    public EntityContainer get_Container();
    public EntityContainerEntitySet get_EntitySet();
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal void ResolveEntitySet(SchemaElement owner, string unresolvedEntitySet, EntityContainerEntitySet& entitySet);
    internal virtual void Validate();
    private void ValidateFunctionImportReturnType(SchemaElement owner, SchemaType returnType, CollectionKind returnTypeCollectionKind, EntityContainerEntitySet entitySet, bool entitySetPathDefined);
    private bool ReturnTypeMeetsFunctionImportBasicRequirements(SchemaType type, CollectionKind returnTypeCollectionKind);
    private void ValidateFunctionImportReturnType(SchemaElement owner, SchemaType returnType, EntityContainerEntitySet entitySet, bool entitySetPathDefined);
    private string GetReturnTypeErrorMessage(string functionName);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.Entity.Core.SchemaObjectModel.IntegerFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public IntegerFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal interface System.Data.Entity.Core.SchemaObjectModel.IRelationship {
    public string Name { get; }
    public string FQName { get; }
    public IList`1<IRelationshipEnd> Ends { get; }
    public IList`1<ReferentialConstraint> Constraints { get; }
    public RelationshipKind RelationshipKind { get; }
    public bool IsForeignKey { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FQName();
    public abstract virtual IList`1<IRelationshipEnd> get_Ends();
    public abstract virtual IList`1<ReferentialConstraint> get_Constraints();
    public abstract virtual bool TryGetEnd(string roleName, IRelationshipEnd& end);
    public abstract virtual RelationshipKind get_RelationshipKind();
    public abstract virtual bool get_IsForeignKey();
}
internal interface System.Data.Entity.Core.SchemaObjectModel.IRelationshipEnd {
    public string Name { get; }
    public SchemaEntityType Type { get; }
    public Nullable`1<RelationshipMultiplicity> Multiplicity { get; public set; }
    public ICollection`1<OnOperation> Operations { get; }
    public abstract virtual string get_Name();
    public abstract virtual SchemaEntityType get_Type();
    public abstract virtual Nullable`1<RelationshipMultiplicity> get_Multiplicity();
    public abstract virtual void set_Multiplicity(Nullable`1<RelationshipMultiplicity> value);
    public abstract virtual ICollection`1<OnOperation> get_Operations();
}
[DefaultMemberAttribute("Item")]
internal interface System.Data.Entity.Core.SchemaObjectModel.ISchemaElementLookUpTable`1 {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual T get_Item(string key);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    public abstract virtual T LookUpEquivalentKey(string key);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ModelFunction : Function {
    private TypeUsageBuilder _typeUsageBuilder;
    public SchemaType Type { get; }
    internal TypeUsage TypeUsage { get; }
    public ModelFunction(Schema parentElement);
    public virtual SchemaType get_Type();
    internal TypeUsage get_TypeUsage();
    internal void ValidateAndSetTypeUsage(ScalarType scalar);
    internal void ValidateAndSetTypeUsage(EdmType edmType);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual void HandleReturnTypeAttribute(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    private void HandleDefiningExpressionElement(XmlReader reader);
    internal virtual void Validate();
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.ModelFunctionTypeElement : FacetEnabledSchemaElement {
    protected TypeUsage _typeUsage;
    internal ModelFunctionTypeElement(SchemaElement parentElement);
    internal abstract virtual void WriteIdentity(StringBuilder builder);
    internal abstract virtual TypeUsage GetTypeUsage();
    internal abstract virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
}
[DebuggerDisplayAttribute("Name={Name}, Relationship={_unresolvedRelationshipName}, FromRole={_unresolvedFromEndRole}, ToRole={_unresolvedToEndRole}")]
internal class System.Data.Entity.Core.SchemaObjectModel.NavigationProperty : Property {
    private string _unresolvedFromEndRole;
    private string _unresolvedToEndRole;
    private string _unresolvedRelationshipName;
    private IRelationshipEnd _fromEnd;
    private IRelationshipEnd _toEnd;
    private IRelationship _relationship;
    public SchemaEntityType ParentElement { get; }
    internal IRelationship Relationship { get; }
    internal IRelationshipEnd ToEnd { get; }
    internal IRelationshipEnd FromEnd { get; }
    public SchemaType Type { get; }
    public NavigationProperty(SchemaEntityType parent);
    public SchemaEntityType get_ParentElement();
    internal IRelationship get_Relationship();
    internal IRelationshipEnd get_ToEnd();
    internal IRelationshipEnd get_FromEnd();
    public virtual SchemaType get_Type();
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    private void HandleToRoleAttribute(XmlReader reader);
    private void HandleFromRoleAttribute(XmlReader reader);
    private void HandleAssociationAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.OnOperation : SchemaElement {
    [CompilerGeneratedAttribute]
private Operation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    public Operation Operation { get; private set; }
    public Action Action { get; private set; }
    private RelationshipEnd ParentElement { get; }
    public OnOperation(RelationshipEnd parentElement, Operation operation);
    [CompilerGeneratedAttribute]
public Operation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(Operation value);
    [CompilerGeneratedAttribute]
public Action get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Action value);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleActionAttribute(XmlReader reader);
    private RelationshipEnd get_ParentElement();
}
internal enum System.Data.Entity.Core.SchemaObjectModel.Operation : Enum {
    public int value__;
    public static Operation Delete;
}
internal class System.Data.Entity.Core.SchemaObjectModel.Parameter : FacetEnabledSchemaElement {
    private ParameterDirection _parameterDirection;
    private CollectionKind _collectionKind;
    private ModelFunctionTypeElement _typeSubElement;
    private bool _isRefType;
    internal ParameterDirection ParameterDirection { get; }
    internal CollectionKind CollectionKind { get; internal set; }
    internal bool IsRefType { get; }
    internal TypeUsage TypeUsage { get; }
    internal SchemaType Type { get; }
    internal Parameter(Function parentElement);
    internal ParameterDirection get_ParameterDirection();
    internal CollectionKind get_CollectionKind();
    internal void set_CollectionKind(CollectionKind value);
    internal bool get_IsRefType();
    internal virtual TypeUsage get_TypeUsage();
    internal SchemaType get_Type();
    internal void WriteIdentity(StringBuilder builder);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    internal bool ResolveNestedTypeNames(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleTypeAttribute(XmlReader reader);
    private void HandleModeAttribute(XmlReader reader);
    private void AddErrorBadParameterDirection(string value, XmlReader reader, Func`5<object, object, object, object, string> errorFunc);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.PrimitiveSchema : Schema {
    internal string Alias { get; }
    internal string Namespace { get; }
    public PrimitiveSchema(SchemaManager schemaManager);
    internal virtual string get_Alias();
    internal virtual string get_Namespace();
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.Property : SchemaElement {
    public SchemaType Type { get; }
    internal Property(StructuredType parentElement);
    public abstract virtual SchemaType get_Type();
    protected virtual bool HandleElement(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.PropertyRefElement : SchemaElement {
    private StructuredProperty _property;
    public StructuredProperty Property { get; }
    public PropertyRefElement(SchemaElement parentElement);
    public StructuredProperty get_Property();
    internal virtual void ResolveTopLevelNames();
    internal bool ResolveNames(SchemaEntityType entityType);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ProviderManifestNeeded : MulticastDelegate {
    public ProviderManifestNeeded(object object, IntPtr method);
    public virtual DbProviderManifest Invoke(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public virtual IAsyncResult BeginInvoke(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError, AsyncCallback callback, object object);
    public virtual DbProviderManifest EndInvoke(IAsyncResult result);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ReferenceTypeElement : ModelFunctionTypeElement {
    internal ReferenceTypeElement(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeElementAttribute(XmlReader reader);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.ReferentialConstraint : SchemaElement {
    private static char KEY_DELIMITER;
    private ReferentialConstraintRoleElement _principalRole;
    private ReferentialConstraintRoleElement _dependentRole;
    internal IRelationship ParentElement { get; }
    internal ReferentialConstraintRoleElement PrincipalRole { get; }
    internal ReferentialConstraintRoleElement DependentRole { get; }
    public ReferentialConstraint(Relationship relationship);
    internal virtual void Validate();
    private static bool ReadyForFurtherValidation(ReferentialConstraintRoleElement role);
    private static void IsKeyProperty(ReferentialConstraintRoleElement roleElement, SchemaEntityType itemType, Boolean& isKeyProperty, Boolean& areAllPropertiesNullable, Boolean& isAnyPropertyNullable, Boolean& isSubsetOfKeyProperties);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal void HandleReferentialConstraintPrincipalRoleElement(XmlReader reader);
    internal void HandleReferentialConstraintDependentRoleElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal IRelationship get_ParentElement();
    internal ReferentialConstraintRoleElement get_PrincipalRole();
    internal ReferentialConstraintRoleElement get_DependentRole();
}
internal class System.Data.Entity.Core.SchemaObjectModel.ReferentialConstraintRoleElement : SchemaElement {
    private List`1<PropertyRefElement> _roleProperties;
    private IRelationshipEnd _end;
    public IList`1<PropertyRefElement> RoleProperties { get; }
    public IRelationshipEnd End { get; }
    public ReferentialConstraintRoleElement(ReferentialConstraint parentElement);
    public IList`1<PropertyRefElement> get_RoleProperties();
    public IRelationshipEnd get_End();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandlePropertyRefElement(XmlReader reader);
    private void HandleRoleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.Relationship : SchemaType {
    private RelationshipEndCollection _ends;
    private List`1<ReferentialConstraint> _constraints;
    private bool _isForeignKey;
    [CompilerGeneratedAttribute]
private RelationshipKind <RelationshipKind>k__BackingField;
    public IList`1<IRelationshipEnd> Ends { get; }
    public IList`1<ReferentialConstraint> Constraints { get; }
    public RelationshipKind RelationshipKind { get; private set; }
    public bool IsForeignKey { get; }
    public Relationship(Schema parent, RelationshipKind kind);
    public sealed virtual IList`1<IRelationshipEnd> get_Ends();
    public sealed virtual IList`1<ReferentialConstraint> get_Constraints();
    public sealed virtual bool TryGetEnd(string roleName, IRelationshipEnd& end);
    [CompilerGeneratedAttribute]
public sealed virtual RelationshipKind get_RelationshipKind();
    [CompilerGeneratedAttribute]
private void set_RelationshipKind(RelationshipKind value);
    public sealed virtual bool get_IsForeignKey();
    internal virtual void Validate();
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleElement(XmlReader reader);
    private void HandleEndElement(XmlReader reader);
    private void HandleConstraintElement(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.RelationshipEnd : SchemaElement {
    private string _unresolvedType;
    private Nullable`1<RelationshipMultiplicity> _multiplicity;
    private List`1<OnOperation> _operations;
    [CompilerGeneratedAttribute]
private SchemaEntityType <Type>k__BackingField;
    public SchemaEntityType Type { get; private set; }
    public Nullable`1<RelationshipMultiplicity> Multiplicity { get; public set; }
    public ICollection`1<OnOperation> Operations { get; }
    internal IRelationship ParentElement { get; }
    public RelationshipEnd(Relationship relationship);
    [CompilerGeneratedAttribute]
public sealed virtual SchemaEntityType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(SchemaEntityType value);
    public sealed virtual Nullable`1<RelationshipMultiplicity> get_Multiplicity();
    public sealed virtual void set_Multiplicity(Nullable`1<RelationshipMultiplicity> value);
    public sealed virtual ICollection`1<OnOperation> get_Operations();
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    protected virtual void HandleAttributesComplete();
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    private void HandleTypeAttribute(XmlReader reader);
    private void HandleMultiplicityAttribute(XmlReader reader);
    private void HandleOnDeleteElement(XmlReader reader);
    private void HandleOnOperationElement(XmlReader reader, Operation operation);
    internal IRelationship get_ParentElement();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.SchemaObjectModel.RelationshipEndCollection : object {
    private Dictionary`2<string, IRelationshipEnd> _endLookup;
    private List`1<string> _keysInDefOrder;
    public int Count { get; }
    public IRelationshipEnd Item { get; public set; }
    private Dictionary`2<string, IRelationshipEnd> EndLookup { get; }
    private List`1<string> KeysInDefOrder { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(IRelationshipEnd end);
    private static bool IsEndValid(IRelationshipEnd end);
    private bool ValidateUniqueName(SchemaElement end, string name);
    public sealed virtual bool Remove(IRelationshipEnd end);
    public bool Contains(string name);
    public sealed virtual bool Contains(IRelationshipEnd end);
    public sealed virtual IRelationshipEnd get_Item(int index);
    public sealed virtual void set_Item(int index, IRelationshipEnd value);
    public sealed virtual IEnumerator`1<IRelationshipEnd> GetEnumerator();
    public bool TryGetEnd(string name, IRelationshipEnd& end);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private Dictionary`2<string, IRelationshipEnd> get_EndLookup();
    private List`1<string> get_KeysInDefOrder();
    public sealed virtual void Clear();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.IList<System.Data.Entity.Core.SchemaObjectModel.IRelationshipEnd>.IndexOf(IRelationshipEnd end);
    private sealed virtual override void System.Collections.Generic.IList<System.Data.Entity.Core.SchemaObjectModel.IRelationshipEnd>.Insert(int index, IRelationshipEnd end);
    private sealed virtual override void System.Collections.Generic.IList<System.Data.Entity.Core.SchemaObjectModel.IRelationshipEnd>.RemoveAt(int index);
    public sealed virtual void CopyTo(IRelationshipEnd[] ends, int index);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ReturnType : ModelFunctionTypeElement {
    private CollectionKind _collectionKind;
    private bool _isRefType;
    private string _unresolvedEntitySet;
    private bool _entitySetPathDefined;
    private ModelFunctionTypeElement _typeSubElement;
    private EntityContainerEntitySet _entitySet;
    internal bool IsRefType { get; }
    internal CollectionKind CollectionKind { get; }
    internal EntityContainerEntitySet EntitySet { get; }
    internal bool EntitySetPathDefined { get; }
    internal ModelFunctionTypeElement SubElement { get; }
    internal TypeUsage TypeUsage { get; }
    internal ReturnType(Function parentElement);
    internal bool get_IsRefType();
    internal CollectionKind get_CollectionKind();
    internal EntityContainerEntitySet get_EntitySet();
    internal bool get_EntitySetPathDefined();
    internal ModelFunctionTypeElement get_SubElement();
    internal virtual TypeUsage get_TypeUsage();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal bool ResolveNestedTypeNames(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    private void HandleTypeAttribute(XmlReader reader);
    private void HandleEntitySetAttribute(XmlReader reader);
    private void HandleEntitySetPathAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
}
internal class System.Data.Entity.Core.SchemaObjectModel.ReturnValue`1 : object {
    private bool _succeeded;
    private T _value;
    internal bool Succeeded { get; }
    internal T Value { get; internal set; }
    internal bool get_Succeeded();
    internal T get_Value();
    internal void set_Value(T value);
}
internal class System.Data.Entity.Core.SchemaObjectModel.RowTypeElement : ModelFunctionTypeElement {
    private SchemaElementLookUpTable`1<RowTypePropertyElement> _properties;
    internal SchemaElementLookUpTable`1<RowTypePropertyElement> Properties { get; }
    internal RowTypeElement(SchemaElement parentElement);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandlePropertyElement(XmlReader reader);
    internal SchemaElementLookUpTable`1<RowTypePropertyElement> get_Properties();
    internal virtual void ResolveTopLevelNames();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.RowTypePropertyElement : ModelFunctionTypeElement {
    private ModelFunctionTypeElement _typeSubElement;
    private bool _isRefType;
    private CollectionKind _collectionKind;
    internal RowTypePropertyElement(SchemaElement parentElement);
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal bool ValidateIsScalar();
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.ScalarType : SchemaType {
    internal static string DateTimeFormat;
    internal static string TimeFormat;
    internal static string DateTimeOffsetFormat;
    private static Regex _binaryValueValidator;
    private static Regex _guidValueValidator;
    private PrimitiveType _primitiveType;
    public PrimitiveTypeKind TypeKind { get; }
    public PrimitiveType Type { get; }
    internal ScalarType(Schema parentElement, string typeName, PrimitiveType primitiveType);
    private static ScalarType();
    public bool TryParse(string text, Object& value);
    public PrimitiveTypeKind get_TypeKind();
    public PrimitiveType get_Type();
    private static bool TryParseBoolean(string text, Object& value);
    private static bool TryParseByte(string text, Object& value);
    private static bool TryParseSByte(string text, Object& value);
    private static bool TryParseInt16(string text, Object& value);
    private static bool TryParseInt32(string text, Object& value);
    private static bool TryParseInt64(string text, Object& value);
    private static bool TryParseDouble(string text, Object& value);
    private static bool TryParseDecimal(string text, Object& value);
    private static bool TryParseDateTime(string text, Object& value);
    private static bool TryParseTime(string text, Object& value);
    private static bool TryParseDateTimeOffset(string text, Object& value);
    private static bool TryParseGuid(string text, Object& value);
    private static bool TryParseString(string text, Object& value);
    private static bool TryParseBinary(string text, Object& value);
    internal static Byte[] ConvertToByteArray(string text);
    private static bool TryParseSingle(string text, Object& value);
}
[DebuggerDisplayAttribute("Namespace={Namespace}, PublicKeyToken={PublicKeyToken}, Version={Version}")]
internal class System.Data.Entity.Core.SchemaObjectModel.Schema : SchemaElement {
    private static int RootDepth;
    private List`1<EdmSchemaError> _errors;
    private List`1<Function> _functions;
    private AliasResolver _aliasResolver;
    private string _location;
    protected string _namespaceName;
    private List`1<SchemaType> _schemaTypes;
    private int _depth;
    private double _schemaVersion;
    private SchemaManager _schemaManager;
    private Nullable`1<bool> _useStrongSpatialTypes;
    private HashSet`1<string> _validatableXmlNamespaces;
    private HashSet`1<string> _parseableXmlNamespaces;
    [CompilerGeneratedAttribute]
private string <SchemaXmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    private MetadataProperty _schemaSourceProperty;
    internal string SchemaXmlNamespace { get; private set; }
    internal DbProviderManifest ProviderManifest { get; }
    internal double SchemaVersion { get; internal set; }
    internal string Alias { get; private set; }
    internal string Namespace { get; private set; }
    internal string Location { get; private set; }
    internal MetadataProperty SchemaSource { get; }
    internal List`1<SchemaType> SchemaTypes { get; }
    public string FQName { get; }
    private List`1<Function> Functions { get; }
    internal AliasResolver AliasResolver { get; }
    internal SchemaDataModelOption DataModel { get; }
    internal SchemaManager SchemaManager { get; }
    internal bool UseStrongSpatialTypes { get; }
    public Schema(SchemaManager schemaManager);
    internal IList`1<EdmSchemaError> Resolve();
    internal IList`1<EdmSchemaError> ValidateSchema();
    internal void AddError(EdmSchemaError error);
    internal IList`1<EdmSchemaError> Parse(XmlReader sourceReader, string sourceLocation);
    private IList`1<EdmSchemaError> InternalParse(XmlReader sourceReader, string sourceLocation);
    internal static XmlReaderSettings CreateEdmStandardXmlReaderSettings();
    private XmlReaderSettings CreateXmlReaderSettings();
    internal void OnSchemaValidationEvent(object sender, ValidationEventArgs e);
    public bool IsParseableXmlNamespace(string xmlNamespaceUri, bool isAttribute);
    public bool IsValidateableXmlNamespace(string xmlNamespaceUri, bool isAttribute);
    private static void AddAllSchemaResourceNamespaceNames(HashSet`1<string> hashSet, XmlSchemaResource schemaResource);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    [CompilerGeneratedAttribute]
internal string get_SchemaXmlNamespace();
    [CompilerGeneratedAttribute]
private void set_SchemaXmlNamespace(string value);
    internal DbProviderManifest get_ProviderManifest();
    internal double get_SchemaVersion();
    internal void set_SchemaVersion(double value);
    [CompilerGeneratedAttribute]
internal virtual string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    internal virtual string get_Namespace();
    private void set_Namespace(string value);
    internal string get_Location();
    private void set_Location(string value);
    internal MetadataProperty get_SchemaSource();
    internal List`1<SchemaType> get_SchemaTypes();
    public virtual string get_FQName();
    private List`1<Function> get_Functions();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual void HandleAttributesComplete();
    protected virtual void SkipThroughElement(XmlReader reader);
    internal bool ResolveTypeName(SchemaElement usingElement, string typeName, SchemaType& type);
    internal AliasResolver get_AliasResolver();
    internal SchemaDataModelOption get_DataModel();
    internal SchemaManager get_SchemaManager();
    internal bool get_UseStrongSpatialTypes();
    private void HandleNamespaceAttribute(XmlReader reader);
    private void HandleAliasAttribute(XmlReader reader);
    private void HandleProviderAttribute(XmlReader reader);
    private void HandleProviderManifestTokenAttribute(XmlReader reader);
    private void HandleUseStrongSpatialTypesAnnotation(XmlReader reader);
    private void HandleUsingElement(XmlReader reader);
    private void HandleEnumTypeElement(XmlReader reader);
    private void HandleTopLevelSchemaElement(XmlReader reader);
    private void HandleEntityTypeElement(XmlReader reader);
    private void HandleTypeInformationElement(XmlReader reader);
    private void HandleFunctionElement(XmlReader reader);
    private void HandleModelFunctionElement(XmlReader reader);
    private void HandleAssociationElement(XmlReader reader);
    private void HandleInlineTypeElement(XmlReader reader);
    private void HandleEntityContainerTypeElement(XmlReader reader);
    private List`1<EdmSchemaError> ResetErrors();
    protected void TryAddType(SchemaType schemaType, bool doNotAddErrorForEmptyName);
    protected void TryAddContainer(SchemaType schemaType, bool doNotAddErrorForEmptyName);
    protected void AddFunctionType(Function function);
    [CompilerGeneratedAttribute]
private void <get_ProviderManifest>b__33_0(string message, ErrorCode code, EdmSchemaErrorSeverity severity);
}
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaComplexType : StructuredType {
    internal SchemaComplexType(Schema parentElement);
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleElement(XmlReader reader);
}
internal enum System.Data.Entity.Core.SchemaObjectModel.SchemaDataModelOption : Enum {
    public int value__;
    public static SchemaDataModelOption EntityDataModel;
    public static SchemaDataModelOption ProviderDataModel;
    public static SchemaDataModelOption ProviderManifestModel;
}
[DebuggerDisplayAttribute("Name={Name}")]
internal abstract class System.Data.Entity.Core.SchemaObjectModel.SchemaElement : object {
    internal static string XmlNamespaceNamespace;
    private Schema _schema;
    private int _lineNumber;
    private int _linePosition;
    private string _name;
    private List`1<MetadataProperty> _otherContent;
    private IDbDependencyResolver _resolver;
    protected static int MaxValueVersionComponent;
    [CompilerGeneratedAttribute]
private DocumentationElement <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaElement <ParentElement>k__BackingField;
    internal int LineNumber { get; }
    internal int LinePosition { get; }
    public string Name { get; public set; }
    internal DocumentationElement Documentation { get; internal set; }
    internal SchemaElement ParentElement { get; private set; }
    internal Schema Schema { get; internal set; }
    public string FQName { get; }
    public string Identity { get; }
    public List`1<MetadataProperty> OtherContent { get; }
    protected string SchemaLocation { get; }
    internal SchemaElement(SchemaElement parentElement, IDbDependencyResolver resolver);
    internal SchemaElement(SchemaElement parentElement, string name, IDbDependencyResolver resolver);
    internal int get_LineNumber();
    internal int get_LinePosition();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
internal DocumentationElement get_Documentation();
    [CompilerGeneratedAttribute]
internal void set_Documentation(DocumentationElement value);
    [CompilerGeneratedAttribute]
internal SchemaElement get_ParentElement();
    [CompilerGeneratedAttribute]
private void set_ParentElement(SchemaElement value);
    internal Schema get_Schema();
    internal void set_Schema(Schema value);
    public virtual string get_FQName();
    public virtual string get_Identity();
    public List`1<MetadataProperty> get_OtherContent();
    internal virtual void Validate();
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, int lineNumber, int linePosition, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, XmlReader reader, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, SchemaElement element, object message);
    internal void Parse(XmlReader reader);
    internal void GetPositionInfo(XmlReader reader);
    internal static void GetPositionInfo(XmlReader reader, Int32& lineNumber, Int32& linePosition);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    protected virtual void HandleAttributesComplete();
    protected virtual void HandleChildElementsComplete();
    protected string HandleUndottedNameAttribute(XmlReader reader, string field);
    protected ReturnValue`1<string> HandleDottedNameAttribute(XmlReader reader, string field);
    internal bool HandleIntAttribute(XmlReader reader, Int32& field);
    internal bool HandleByteAttribute(XmlReader reader, Byte& field);
    internal bool HandleBoolAttribute(XmlReader reader, Boolean& field);
    protected virtual void SkipThroughElement(XmlReader reader);
    protected virtual void SkipElement(XmlReader reader);
    protected string get_SchemaLocation();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    private void HandleDocumentationElement(XmlReader reader);
    protected virtual void HandleNameAttribute(XmlReader reader);
    private void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, string sourceLocation, int lineNumber, int linePosition, object message);
    private void ParseAttribute(XmlReader reader);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    internal static bool CanHandleAttribute(XmlReader reader, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    private bool AddOtherContent(XmlReader reader);
    internal static MetadataProperty CreateMetadataPropertyFromXmlElement(string xmlNamespaceUri, string elementName, XElement value);
    internal MetadataProperty CreateMetadataPropertyFromXmlAttribute(string xmlNamespaceUri, string attributeName, string value);
    private bool ParseElement(XmlReader reader);
    protected bool CanHandleElement(XmlReader reader, string localName);
    protected virtual bool HandleElement(XmlReader reader);
    private void ParseText(XmlReader reader);
    [ConditionalAttribute("DEBUG")]
internal static void AssertReaderConsidersSchemaInvalid(XmlReader reader);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaElementLookUpTable`1 : object {
    private Dictionary`2<string, T> _keyToType;
    private List`1<string> _keysInDefOrder;
    public int Count { get; }
    public T Item { get; }
    private Dictionary`2<string, T> KeyToType { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual T LookUpEquivalentKey(string key);
    public sealed virtual T get_Item(string key);
    public T GetElementAt(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator`1<S> GetFilteredEnumerator();
    public AddErrorKind TryAdd(T type);
    public void Add(T type, bool doNotAddErrorForEmptyName, Func`2<object, string> duplicateKeyErrorFormat);
    private static string KeyFromElement(T type);
    private static string KeyFromName(string unnormalizedKey);
    private Dictionary`2<string, T> get_KeyToType();
}
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaElementLookUpTableEnumerator`2 : object {
    private Dictionary`2<string, S> _data;
    private Enumerator<string> _enumerator;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SchemaElementLookUpTableEnumerator`2(Dictionary`2<string, S> data, List`1<string> keysInOrder);
    public sealed virtual void Reset();
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("Name={Name}, BaseType={BaseType.FQName}, HasKeys={HasKeys}")]
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaEntityType : StructuredType {
    private static char KEY_DELIMITER;
    private ISchemaElementLookUpTable`1<NavigationProperty> _navigationProperties;
    private EntityKeyElement _keyElement;
    private static List`1<PropertyRefElement> _emptyKeyProperties;
    public EntityKeyElement KeyElement { get; }
    public IList`1<PropertyRefElement> DeclaredKeyProperties { get; }
    public IList`1<PropertyRefElement> KeyProperties { get; }
    public ISchemaElementLookUpTable`1<NavigationProperty> NavigationProperties { get; }
    public SchemaEntityType(Schema parentElement);
    private static SchemaEntityType();
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleAttribute(XmlReader reader);
    public EntityKeyElement get_KeyElement();
    public IList`1<PropertyRefElement> get_DeclaredKeyProperties();
    public IList`1<PropertyRefElement> get_KeyProperties();
    public ISchemaElementLookUpTable`1<NavigationProperty> get_NavigationProperties();
    internal virtual void Validate();
    protected virtual bool HandleElement(XmlReader reader);
    private void HandleNavigationPropertyElement(XmlReader reader);
    private void HandleKeyElement(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaEnumMember : SchemaElement {
    private Nullable`1<long> _value;
    public Nullable`1<long> Value { get; public set; }
    public SchemaEnumMember(SchemaElement parentElement);
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleValueAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaEnumType : SchemaType {
    private bool _isFlags;
    private string _unresolvedUnderlyingTypeName;
    private SchemaType _underlyingType;
    private IList`1<SchemaEnumMember> _enumMembers;
    public bool IsFlags { get; }
    public SchemaType UnderlyingType { get; }
    public IEnumerable`1<SchemaEnumMember> EnumMembers { get; }
    public SchemaEnumType(Schema parentElement);
    public bool get_IsFlags();
    public SchemaType get_UnderlyingType();
    public IEnumerable`1<SchemaEnumMember> get_EnumMembers();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleMemberElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
[DebuggerDisplayAttribute("DataModel={DataModel}")]
internal class System.Data.Entity.Core.SchemaObjectModel.SchemaManager : object {
    private HashSet`1<string> _namespaceLookUpTable;
    private SchemaElementLookUpTable`1<SchemaType> _schemaTypes;
    private static int MaxErrorCount;
    private DbProviderManifest _providerManifest;
    private PrimitiveSchema _primitiveSchema;
    private double effectiveSchemaVersion;
    private SchemaDataModelOption _dataModel;
    private ProviderManifestNeeded _providerManifestNeeded;
    private AttributeValueNotification _providerNotification;
    private AttributeValueNotification _providerManifestTokenNotification;
    public double SchemaVersion { get; }
    internal SchemaElementLookUpTable`1<SchemaType> SchemaTypes { get; }
    internal SchemaDataModelOption DataModel { get; }
    internal PrimitiveSchema PrimitiveSchema { get; }
    internal AttributeValueNotification ProviderNotification { get; }
    internal AttributeValueNotification ProviderManifestTokenNotification { get; }
    private SchemaManager(SchemaDataModelOption dataModel, AttributeValueNotification providerNotification, AttributeValueNotification providerManifestTokenNotification, ProviderManifestNeeded providerManifestNeeded);
    public static IList`1<EdmSchemaError> LoadProviderManifest(XmlReader xmlReader, string location, bool checkForSystemNamespace, Schema& schema);
    public static void NoOpAttributeValueNotification(string attributeValue, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public static IList`1<EdmSchemaError> ParseAndValidate(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModel, DbProviderManifest providerManifest, IList`1& schemaCollection);
    public static IList`1<EdmSchemaError> ParseAndValidate(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModel, AttributeValueNotification providerNotification, AttributeValueNotification providerManifestTokenNotification, ProviderManifestNeeded providerManifestNeeded, IList`1& schemaCollection);
    internal static bool TryGetSchemaVersion(XmlReader reader, Double& version, DataSpace& dataSpace);
    internal static bool TryGetSchemaVersion(string xmlNamespaceName, Double& version, DataSpace& dataSpace);
    private static bool CheckIsSameVersion(Schema schemaToBeAdded, IEnumerable`1<Schema> schemaCollection, List`1<EdmSchemaError> errorCollection);
    public double get_SchemaVersion();
    public void AddSchema(Schema schema);
    public bool TryResolveType(string namespaceName, string typeName, SchemaType& schemaType);
    public bool IsValidNamespaceName(string namespaceName);
    internal static bool TryGetBaseUri(XmlReader xmlReader, String& location);
    private static bool UpdateErrorCollectionAndCheckForMaxErrors(List`1<EdmSchemaError> errorCollection, IList`1<EdmSchemaError> newErrors, Boolean& errorEncountered);
    internal SchemaElementLookUpTable`1<SchemaType> get_SchemaTypes();
    internal DbProviderManifest GetProviderManifest(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    internal SchemaDataModelOption get_DataModel();
    internal void EnsurePrimitiveSchemaIsLoaded(double forSchemaVersion);
    internal PrimitiveSchema get_PrimitiveSchema();
    internal AttributeValueNotification get_ProviderNotification();
    internal AttributeValueNotification get_ProviderManifestTokenNotification();
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.SchemaType : SchemaElement {
    public string Namespace { get; }
    public string Identity { get; }
    public string FQName { get; }
    internal SchemaType(Schema parentElement);
    public string get_Namespace();
    public virtual string get_Identity();
    public virtual string get_FQName();
}
internal class System.Data.Entity.Core.SchemaObjectModel.SridFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public SridFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.StructuredProperty : Property {
    private SchemaType _type;
    private TypeUsageBuilder _typeUsageBuilder;
    private CollectionKind _collectionKind;
    [CompilerGeneratedAttribute]
private string <UnresolvedType>k__BackingField;
    public SchemaType Type { get; }
    public TypeUsage TypeUsage { get; }
    public bool Nullable { get; }
    public string Default { get; }
    public object DefaultAsObject { get; }
    public CollectionKind CollectionKind { get; }
    internal string UnresolvedType { get; internal set; }
    internal StructuredProperty(StructuredType parentElement);
    public virtual SchemaType get_Type();
    public TypeUsage get_TypeUsage();
    public bool get_Nullable();
    public string get_Default();
    public object get_DefaultAsObject();
    public CollectionKind get_CollectionKind();
    internal virtual void ResolveTopLevelNames();
    internal void EnsureEnumTypeFacets(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    protected virtual SchemaType ResolveType(string typeName);
    [CompilerGeneratedAttribute]
internal string get_UnresolvedType();
    [CompilerGeneratedAttribute]
internal void set_UnresolvedType(string value);
    internal virtual void Validate();
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleTypeAttribute(XmlReader reader);
    private void HandleCollectionKindAttribute(XmlReader reader);
}
internal abstract class System.Data.Entity.Core.SchemaObjectModel.StructuredType : SchemaType {
    private Nullable`1<bool> _baseTypeResolveResult;
    private string _unresolvedBaseType;
    private bool _isAbstract;
    private SchemaElementLookUpTable`1<SchemaElement> _namedMembers;
    private ISchemaElementLookUpTable`1<StructuredProperty> _properties;
    [CompilerGeneratedAttribute]
private StructuredType <BaseType>k__BackingField;
    public StructuredType BaseType { get; private set; }
    public ISchemaElementLookUpTable`1<StructuredProperty> Properties { get; }
    protected SchemaElementLookUpTable`1<SchemaElement> NamedMembers { get; }
    public bool IsTypeHierarchyRoot { get; }
    public bool IsAbstract { get; }
    protected string UnresolvedBaseType { get; protected set; }
    protected StructuredType(Schema parentElement);
    [CompilerGeneratedAttribute]
public StructuredType get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(StructuredType value);
    public ISchemaElementLookUpTable`1<StructuredProperty> get_Properties();
    protected SchemaElementLookUpTable`1<SchemaElement> get_NamedMembers();
    public virtual bool get_IsTypeHierarchyRoot();
    public bool get_IsAbstract();
    public StructuredProperty FindProperty(string name);
    public bool IsOfType(StructuredType baseType);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    protected void AddMember(SchemaElement newMember);
    private HowDefined DefinesMemberName(string name, StructuredType& definingType, SchemaElement& definingMember);
    protected string get_UnresolvedBaseType();
    protected void set_UnresolvedBaseType(string value);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    private bool TryResolveBaseType();
    private void HandleBaseTypeAttribute(XmlReader reader);
    private void HandleAbstractAttribute(XmlReader reader);
    private void HandlePropertyElement(XmlReader reader);
    private bool CheckForInheritanceCycle();
}
internal class System.Data.Entity.Core.SchemaObjectModel.TextElement : SchemaElement {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public TextElement(SchemaElement parentElement);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    protected virtual bool HandleText(XmlReader reader);
    private void TextElementTextHandler(XmlReader reader);
}
internal class System.Data.Entity.Core.SchemaObjectModel.TypeElement : SchemaType {
    private PrimitiveType _primitiveType;
    private List`1<FacetDescriptionElement> _facetDescriptions;
    public string Name { get; public set; }
    public PrimitiveType PrimitiveType { get; }
    public IEnumerable`1<FacetDescription> FacetDescriptions { get; }
    public TypeElement(Schema parent);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandlePrecisionElement(XmlReader reader);
    private void HandleScaleElement(XmlReader reader);
    private void HandleMaxLengthElement(XmlReader reader);
    private void HandleUnicodeElement(XmlReader reader);
    private void HandleFixedLengthElement(XmlReader reader);
    private void HandleSridElement(XmlReader reader);
    private void HandleIsStrictElement(XmlReader reader);
    private void HandlePrimitiveTypeKindAttribute(XmlReader reader);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public PrimitiveType get_PrimitiveType();
    [IteratorStateMachineAttribute("System.Data.Entity.Core.SchemaObjectModel.TypeElement/<get_FacetDescriptions>d__19")]
public IEnumerable`1<FacetDescription> get_FacetDescriptions();
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    private bool ValidateInterFacetConsistency();
    private bool ValidateSufficientFacets();
}
internal enum System.Data.Entity.Core.SchemaObjectModel.TypeModifier : Enum {
    public int value__;
    public static TypeModifier None;
    public static TypeModifier Array;
    public static TypeModifier Set;
    public static TypeModifier Table;
}
internal class System.Data.Entity.Core.SchemaObjectModel.TypeRefElement : ModelFunctionTypeElement {
    internal TypeRefElement(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeAttribute(XmlReader reader);
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual void Validate();
}
internal class System.Data.Entity.Core.SchemaObjectModel.TypeUsageBuilder : object {
    private Dictionary`2<string, object> _facetValues;
    private SchemaElement _element;
    private string _default;
    private object _defaultObject;
    private Nullable`1<bool> _nullable;
    private TypeUsage _typeUsage;
    private bool _hasUserDefinedFacets;
    internal TypeUsage TypeUsage { get; }
    internal bool Nullable { get; }
    internal string Default { get; }
    internal object DefaultAsObject { get; }
    internal bool HasUserDefinedFacets { get; }
    internal TypeUsageBuilder(SchemaElement element);
    internal TypeUsage get_TypeUsage();
    internal bool get_Nullable();
    internal string get_Default();
    internal object get_DefaultAsObject();
    internal bool get_HasUserDefinedFacets();
    private bool TryGetFacets(EdmType edmType, bool complainOnMissingFacet, Dictionary`2& calculatedFacets);
    internal void ValidateAndSetTypeUsage(EdmType edmType, bool complainOnMissingFacet);
    internal void ValidateAndSetTypeUsage(ScalarType scalar, bool complainOnMissingFacet);
    internal void ValidateEnumFacets(SchemaEnumType schemaEnumType);
    internal bool HandleAttribute(XmlReader reader);
    private bool InternalHandleAttribute(XmlReader reader);
    private void ValidateAndSetBinaryFacets(EdmType type, Dictionary`2<string, Facet> facets);
    private void ValidateAndSetDecimalFacets(EdmType type, Dictionary`2<string, Facet> facets);
    private void ValidatePrecisionFacetsForDateTimeFamily(EdmType type, Dictionary`2<string, Facet> facets);
    private void ValidateAndSetStringFacets(EdmType type, Dictionary`2<string, Facet> facets);
    private void ValidateLengthFacets(EdmType type, Dictionary`2<string, Facet> facets);
    private void ValidateSpatialFacets(EdmType type, Dictionary`2<string, Facet> facets);
    internal void HandleMaxLengthAttribute(XmlReader reader);
    internal void HandleSridAttribute(XmlReader reader);
    private void HandleNullableAttribute(XmlReader reader);
    internal void HandleStoreGeneratedPatternAttribute(XmlReader reader);
    internal void HandleConcurrencyModeAttribute(XmlReader reader);
    private void HandleDefaultAttribute(XmlReader reader);
    private void HandlePrecisionAttribute(XmlReader reader);
    private void HandleScaleAttribute(XmlReader reader);
    private void HandleUnicodeAttribute(XmlReader reader);
    private void HandleCollationAttribute(XmlReader reader);
    private void HandleIsFixedLengthAttribute(XmlReader reader);
    internal void ValidateDefaultValue(SchemaType type);
    private void ValidateScalarMemberDefaultValue(ScalarType scalar);
    private void ValidateBinaryDefaultValue(ScalarType scalar);
    private void ValidateBooleanDefaultValue(ScalarType scalar);
    private void ValidateIntegralDefaultValue(ScalarType scalar, long minValue, long maxValue);
    private void ValidateDateTimeDefaultValue(ScalarType scalar);
    private void ValidateTimeDefaultValue(ScalarType scalar);
    private void ValidateDateTimeOffsetDefaultValue(ScalarType scalar);
    private void ValidateDecimalDefaultValue(ScalarType scalar);
    private void ValidateFloatingPointDefaultValue(ScalarType scalar, double minValue, double maxValue);
    private void ValidateGuidDefaultValue(ScalarType scalar);
}
internal class System.Data.Entity.Core.SchemaObjectModel.UsingElement : SchemaElement {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    public string Alias { get; private set; }
    public string NamespaceName { get; private set; }
    public string FQName { get; }
    internal UsingElement(Schema parentElement);
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NamespaceName();
    [CompilerGeneratedAttribute]
private void set_NamespaceName(string value);
    public virtual string get_FQName();
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    private void HandleNamespaceAttribute(XmlReader reader);
    private void HandleAliasAttribute(XmlReader reader);
}
internal static class System.Data.Entity.Core.SchemaObjectModel.Utils : object {
    internal static void ExtractNamespaceAndName(string qualifiedTypeName, String& namespaceName, String& name);
    internal static string ExtractTypeName(string qualifiedTypeName);
    private static void GetBeforeAndAfterLastPeriod(string qualifiedTypeName, String& before, String& after);
    internal static string GetEverythingBeforeLastPeriod(string qualifiedTypeName);
    private static string GetEverythingAfterLastPeriod(string qualifiedTypeName);
    public static bool GetString(Schema schema, XmlReader reader, String& value);
    public static bool GetDottedName(Schema schema, XmlReader reader, String& name);
    internal static bool ValidateDottedName(Schema schema, XmlReader reader, string name);
    public static bool GetUndottedName(Schema schema, XmlReader reader, String& name);
    public static bool GetBool(Schema schema, XmlReader reader, Boolean& value);
    public static bool GetInt(Schema schema, XmlReader reader, Int32& value);
    public static bool GetByte(Schema schema, XmlReader reader, Byte& value);
    public static int CompareNames(string lhsName, string rhsName);
}
internal static class System.Data.Entity.Core.SchemaObjectModel.ValidationHelper : object {
    internal static void ValidateFacets(SchemaElement element, SchemaType type, TypeUsageBuilder typeUsageBuilder);
    internal static void ValidateTypeDeclaration(SchemaElement element, SchemaType type, SchemaElement typeSubElement);
    internal static void ValidateRefType(SchemaElement element, SchemaType type);
}
internal class System.Data.Entity.Core.SchemaObjectModel.XmlSchemaResource : ValueType {
    private static XmlSchemaResource[] _emptyImportList;
    internal string NamespaceUri;
    internal string ResourceName;
    internal XmlSchemaResource[] ImportedSchemas;
    public XmlSchemaResource(string namespaceUri, string resourceName, XmlSchemaResource[] importedSchemas);
    public XmlSchemaResource(string namespaceUri, string resourceName);
    private static XmlSchemaResource();
    internal static Dictionary`2<string, XmlSchemaResource> GetMetadataSchemaResourceMap(double schemaVersion);
    internal static void AddStoreSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
    internal static void AddMappingSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
    internal static void AddEdmSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
}
public class System.Data.Entity.Core.UpdateException : DataException {
    private ReadOnlyCollection`1<ObjectStateEntry> _stateEntries;
    public ReadOnlyCollection`1<ObjectStateEntry> StateEntries { get; }
    public UpdateException(string message);
    public UpdateException(string message, Exception innerException);
    public UpdateException(string message, Exception innerException, IEnumerable`1<ObjectStateEntry> stateEntries);
    protected UpdateException(SerializationInfo info, StreamingContext context);
    public ReadOnlyCollection`1<ObjectStateEntry> get_StateEntries();
}
public class System.Data.Entity.CreateDatabaseIfNotExists`1 : object {
    private static CreateDatabaseIfNotExists`1();
    public virtual void InitializeDatabase(TContext context);
    protected virtual void Seed(TContext context);
}
public class System.Data.Entity.Database : object {
    private static Lazy`1<IDbConnectionFactory> _defaultDefaultConnectionFactory;
    private static Lazy`1 modreq(System.Runtime.CompilerServices.IsVolatile) _defaultConnectionFactory;
    private InternalContext _internalContext;
    private EntityTransaction _entityTransaction;
    private DbContextTransaction _dbContextTransaction;
    public DbContextTransaction CurrentTransaction { get; }
    public DbConnection Connection { get; }
    [ObsoleteAttribute("The default connection factory should be set in the config file or using the DbConfiguration class. (See http://go.microsoft.com/fwlink/?LinkId=260883)")]
public static IDbConnectionFactory DefaultConnectionFactory { get; public set; }
    internal static IDbConnectionFactory SetDefaultConnectionFactory { get; }
    internal static bool DefaultConnectionFactoryChanged { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public Action`1<string> Log { get; public set; }
    internal Database(InternalContext internalContext);
    private static Database();
    public DbContextTransaction get_CurrentTransaction();
    public void UseTransaction(DbTransaction transaction);
    public DbContextTransaction BeginTransaction();
    public DbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    public DbConnection get_Connection();
    public static void SetInitializer(IDatabaseInitializer`1<TContext> strategy);
    public void Initialize(bool force);
    public bool CompatibleWithModel(bool throwIfNoMetadata);
    internal bool CompatibleWithModel(bool throwIfNoMetadata, DatabaseExistenceState existenceState);
    public void Create();
    internal void Create(DatabaseExistenceState existenceState);
    public bool CreateIfNotExists();
    public bool Exists();
    public bool Delete();
    public static bool Exists(string nameOrConnectionString);
    public static bool Delete(string nameOrConnectionString);
    public static bool Exists(DbConnection existingConnection);
    public static bool Delete(DbConnection existingConnection);
    public static IDbConnectionFactory get_DefaultConnectionFactory();
    public static void set_DefaultConnectionFactory(IDbConnectionFactory value);
    internal static IDbConnectionFactory get_SetDefaultConnectionFactory();
    internal static bool get_DefaultConnectionFactoryChanged();
    internal static void ResetDefaultConnectionFactory();
    private static ObjectContext CreateEmptyObjectContext(DbConnection connection);
    public DbRawSqlQuery`1<TElement> SqlQuery(string sql, Object[] parameters);
    public DbRawSqlQuery SqlQuery(Type elementType, string sql, Object[] parameters);
    public int ExecuteSqlCommand(string sql, Object[] parameters);
    public int ExecuteSqlCommand(TransactionalBehavior transactionalBehavior, string sql, Object[] parameters);
    public Task`1<int> ExecuteSqlCommandAsync(string sql, Object[] parameters);
    public Task`1<int> ExecuteSqlCommandAsync(TransactionalBehavior transactionalBehavior, string sql, Object[] parameters);
    public Task`1<int> ExecuteSqlCommandAsync(string sql, CancellationToken cancellationToken, Object[] parameters);
    public Task`1<int> ExecuteSqlCommandAsync(TransactionalBehavior transactionalBehavior, string sql, CancellationToken cancellationToken, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    private StoreItemCollection CreateStoreItemCollection();
    public Nullable`1<int> get_CommandTimeout();
    public void set_CommandTimeout(Nullable`1<int> value);
    public Action`1<string> get_Log();
    public void set_Log(Action`1<string> value);
}
public class System.Data.Entity.DbConfiguration : object {
    private InternalConfiguration _internalConfiguration;
    public static IDbDependencyResolver DependencyResolver { get; }
    internal InternalConfiguration InternalConfiguration { get; }
    internal DbConfiguration(InternalConfiguration internalConfiguration);
    public static void SetConfiguration(DbConfiguration configuration);
    public static void LoadConfiguration(Type contextType);
    public static void LoadConfiguration(Assembly assemblyHint);
    public static void add_Loaded(EventHandler`1<DbConfigurationLoadedEventArgs> value);
    public static void remove_Loaded(EventHandler`1<DbConfigurationLoadedEventArgs> value);
    protected internal void AddDependencyResolver(IDbDependencyResolver resolver);
    protected internal void AddDefaultResolver(IDbDependencyResolver resolver);
    public static IDbDependencyResolver get_DependencyResolver();
    protected internal void SetProviderServices(string providerInvariantName, DbProviderServices provider);
    protected internal void SetProviderFactory(string providerInvariantName, DbProviderFactory providerFactory);
    protected internal void SetExecutionStrategy(string providerInvariantName, Func`1<IDbExecutionStrategy> getExecutionStrategy);
    protected internal void SetExecutionStrategy(string providerInvariantName, Func`1<IDbExecutionStrategy> getExecutionStrategy, string serverName);
    protected internal void SetDefaultTransactionHandler(Func`1<TransactionHandler> transactionHandlerFactory);
    protected internal void SetTransactionHandler(string providerInvariantName, Func`1<TransactionHandler> transactionHandlerFactory);
    protected internal void SetTransactionHandler(string providerInvariantName, Func`1<TransactionHandler> transactionHandlerFactory, string serverName);
    protected internal void SetDefaultConnectionFactory(IDbConnectionFactory connectionFactory);
    protected internal void SetPluralizationService(IPluralizationService pluralizationService);
    protected internal void SetDatabaseInitializer(IDatabaseInitializer`1<TContext> initializer);
    protected internal void SetMigrationSqlGenerator(string providerInvariantName, Func`1<MigrationSqlGenerator> sqlGenerator);
    protected internal void SetManifestTokenResolver(IManifestTokenResolver resolver);
    protected internal void SetMetadataAnnotationSerializer(string annotationName, Func`1<IMetadataAnnotationSerializer> serializerFactory);
    protected internal void SetProviderFactoryResolver(IDbProviderFactoryResolver providerFactoryResolver);
    protected internal void SetModelCacheKey(Func`2<DbContext, IDbModelCacheKey> keyFactory);
    protected internal void SetDefaultHistoryContext(Func`3<DbConnection, string, HistoryContext> factory);
    protected internal void SetHistoryContext(string providerInvariantName, Func`3<DbConnection, string, HistoryContext> factory);
    protected internal void SetDefaultSpatialServices(DbSpatialServices spatialProvider);
    protected internal void SetSpatialServices(DbProviderInfo key, DbSpatialServices spatialProvider);
    protected internal void SetSpatialServices(string providerInvariantName, DbSpatialServices spatialProvider);
    private void RegisterSpatialServices(string providerInvariantName, DbSpatialServices spatialProvider);
    protected internal void SetDatabaseLogFormatter(Func`3<DbContext, Action`1<string>, DatabaseLogFormatter> logFormatterFactory);
    protected internal void AddInterceptor(IDbInterceptor interceptor);
    protected internal void SetContextFactory(Type contextType, Func`1<DbContext> factory);
    protected internal void SetContextFactory(Func`1<TContext> factory);
    protected internal void SetModelStore(DbModelStore modelStore);
    protected internal void SetTableExistenceChecker(string providerInvariantName, TableExistenceChecker tableExistenceChecker);
    internal virtual InternalConfiguration get_InternalConfiguration();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
[AttributeUsageAttribute("4")]
public class System.Data.Entity.DbConfigurationTypeAttribute : Attribute {
    private Type _configurationType;
    public Type ConfigurationType { get; }
    public DbConfigurationTypeAttribute(Type configurationType);
    public DbConfigurationTypeAttribute(string configurationTypeName);
    public Type get_ConfigurationType();
}
public class System.Data.Entity.DbContext : object {
    private InternalContext _internalContext;
    private Database _database;
    public Database Database { get; }
    private ObjectContext System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext { get; }
    public DbChangeTracker ChangeTracker { get; }
    public DbContextConfiguration Configuration { get; }
    internal InternalContext InternalContext { get; }
    protected DbContext(DbCompiledModel model);
    public DbContext(string nameOrConnectionString);
    public DbContext(string nameOrConnectionString, DbCompiledModel model);
    public DbContext(DbConnection existingConnection, bool contextOwnsConnection);
    public DbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection);
    public DbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext);
    internal virtual void InitializeLazyInternalContext(IInternalConnection internalConnection, DbCompiledModel model);
    private void DiscoverAndInitializeSets();
    protected virtual void OnModelCreating(DbModelBuilder modelBuilder);
    internal void CallOnModelCreating(DbModelBuilder modelBuilder);
    public Database get_Database();
    public virtual DbSet`1<TEntity> Set();
    public virtual DbSet Set(Type entityType);
    public virtual int SaveChanges();
    public virtual Task`1<int> SaveChangesAsync();
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    private sealed virtual override ObjectContext System.Data.Entity.Infrastructure.IObjectContextAdapter.get_ObjectContext();
    public IEnumerable`1<DbEntityValidationResult> GetValidationErrors();
    protected virtual bool ShouldValidateEntity(DbEntityEntry entityEntry);
    protected virtual DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary`2<object, object> items);
    internal virtual DbEntityValidationResult CallValidateEntity(DbEntityEntry entityEntry);
    public DbEntityEntry`1<TEntity> Entry(TEntity entity);
    public DbEntityEntry Entry(object entity);
    public DbChangeTracker get_ChangeTracker();
    public DbContextConfiguration get_Configuration();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal virtual InternalContext get_InternalContext();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.DbContextTransaction : object {
    private EntityConnection _connection;
    private EntityTransaction _entityTransaction;
    private bool _shouldCloseConnection;
    private bool _isDisposed;
    public DbTransaction UnderlyingTransaction { get; }
    internal DbContextTransaction(EntityConnection connection);
    internal DbContextTransaction(EntityConnection connection, IsolationLevel isolationLevel);
    internal DbContextTransaction(EntityTransaction transaction);
    private void EnsureOpenConnection();
    public DbTransaction get_UnderlyingTransaction();
    public void Commit();
    public void Rollback();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
[AttributeUsageAttribute("64")]
public class System.Data.Entity.DbFunctionAttribute : Attribute {
    private string _namespaceName;
    private string _functionName;
    public string NamespaceName { get; }
    public string FunctionName { get; }
    public DbFunctionAttribute(string namespaceName, string functionName);
    public string get_NamespaceName();
    public string get_FunctionName();
}
public static class System.Data.Entity.DbFunctions : object {
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<decimal> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<decimal>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<double> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<double>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<int> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<int>> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<long> collection);
    [DbFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<long>> collection);
    [DbFunctionAttribute("Edm", "Left")]
public static string Left(string stringArgument, Nullable`1<long> length);
    [DbFunctionAttribute("Edm", "Right")]
public static string Right(string stringArgument, Nullable`1<long> length);
    [DbFunctionAttribute("Edm", "Reverse")]
public static string Reverse(string stringArgument);
    [DbFunctionAttribute("Edm", "GetTotalOffsetMinutes")]
public static Nullable`1<int> GetTotalOffsetMinutes(Nullable`1<DateTimeOffset> dateTimeOffsetArgument);
    [DbFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTimeOffset> TruncateTime(Nullable`1<DateTimeOffset> dateValue);
    [DbFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTime> TruncateTime(Nullable`1<DateTime> dateValue);
    [DbFunctionAttribute("Edm", "CreateDateTime")]
public static Nullable`1<DateTime> CreateDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [DbFunctionAttribute("Edm", "CreateDateTimeOffset")]
public static Nullable`1<DateTimeOffset> CreateDateTimeOffset(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second, Nullable`1<int> timeZoneOffset);
    [DbFunctionAttribute("Edm", "CreateTime")]
public static Nullable`1<TimeSpan> CreateTime(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [DbFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTimeOffset> AddYears(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTime> AddYears(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTimeOffset> AddMonths(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTime> AddMonths(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTimeOffset> AddDays(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTime> AddDays(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTimeOffset> AddHours(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTime> AddHours(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<TimeSpan> AddHours(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTimeOffset> AddMinutes(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTime> AddMinutes(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<TimeSpan> AddMinutes(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTimeOffset> AddSeconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTime> AddSeconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<TimeSpan> AddSeconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTimeOffset> AddMilliseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTime> AddMilliseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<TimeSpan> AddMilliseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTimeOffset> AddMicroseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTime> AddMicroseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<TimeSpan> AddMicroseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTimeOffset> AddNanoseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTime> AddNanoseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<TimeSpan> AddNanoseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [DbFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [DbFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [DbFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [DbFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<double> Truncate(Nullable`1<double> value, Nullable`1<int> digits);
    [DbFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<decimal> Truncate(Nullable`1<decimal> value, Nullable`1<int> digits);
    public static bool Like(string searchString, string likeExpression);
    public static bool Like(string searchString, string likeExpression, string escapeCharacter);
    public static string AsUnicode(string value);
    public static string AsNonUnicode(string value);
    private static TOut BootstrapFunction(Expression`1<Func`2<IEnumerable`1<TIn>, TOut>> methodExpression, IEnumerable`1<TIn> collection);
}
public class System.Data.Entity.DbModelBuilder : object {
    private ModelConfiguration _modelConfiguration;
    private ConventionsConfiguration _conventionsConfiguration;
    private DbModelBuilderVersion _modelBuilderVersion;
    private object _lock;
    public ConventionsConfiguration Conventions { get; }
    public ConfigurationRegistrar Configurations { get; }
    internal DbModelBuilderVersion Version { get; }
    internal ModelConfiguration ModelConfiguration { get; }
    public DbModelBuilder(DbModelBuilderVersion modelBuilderVersion);
    internal DbModelBuilder(ModelConfiguration modelConfiguration, DbModelBuilderVersion modelBuilderVersion);
    private DbModelBuilder(ModelConfiguration modelConfiguration, ConventionsConfiguration conventionsConfiguration, DbModelBuilderVersion modelBuilderVersion);
    private DbModelBuilder(DbModelBuilder source);
    private static ConventionSet SelectConventionSet(DbModelBuilderVersion modelBuilderVersion);
    internal virtual DbModelBuilder Clone();
    internal DbModel BuildDynamicUpdateModel(DbProviderInfo providerInfo);
    public virtual DbModelBuilder Ignore();
    public virtual DbModelBuilder HasDefaultSchema(string schema);
    public virtual DbModelBuilder Ignore(IEnumerable`1<Type> types);
    public virtual EntityTypeConfiguration`1<TEntityType> Entity();
    public virtual void RegisterEntityType(Type entityType);
    internal virtual EntityTypeConfiguration Entity(Type entityType);
    public virtual ComplexTypeConfiguration`1<TComplexType> ComplexType();
    public TypeConventionConfiguration Types();
    public TypeConventionConfiguration`1<T> Types();
    public PropertyConventionConfiguration Properties();
    public PropertyConventionConfiguration Properties();
    public virtual ConventionsConfiguration get_Conventions();
    public virtual ConfigurationRegistrar get_Configurations();
    public virtual DbModel Build(DbConnection providerConnection);
    public virtual DbModel Build(DbProviderInfo providerInfo);
    internal DbModelBuilderVersion get_Version();
    private DbModel Build(DbProviderManifest providerManifest, DbProviderInfo providerInfo);
    private static DbProviderManifest GetProviderManifest(DbProviderInfo providerInfo);
    private void MapTypes(EdmModel model);
    internal ModelConfiguration get_ModelConfiguration();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public enum System.Data.Entity.DbModelBuilderVersion : Enum {
    public int value__;
    public static DbModelBuilderVersion Latest;
    public static DbModelBuilderVersion V4_1;
    public static DbModelBuilderVersion V5_0_Net4;
    public static DbModelBuilderVersion V5_0;
    public static DbModelBuilderVersion V6_0;
}
[AttributeUsageAttribute("4")]
public class System.Data.Entity.DbModelBuilderVersionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DbModelBuilderVersion <Version>k__BackingField;
    public DbModelBuilderVersion Version { get; private set; }
    public DbModelBuilderVersionAttribute(DbModelBuilderVersion version);
    [CompilerGeneratedAttribute]
public DbModelBuilderVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(DbModelBuilderVersion value);
}
public abstract class System.Data.Entity.DbSet : DbQuery {
    public IList Local { get; }
    private IInternalSet System.Data.Entity.Internal.Linq.IInternalSetAdapter.InternalSet { get; }
    internal IInternalSet InternalSet { get; }
    public virtual object Find(Object[] keyValues);
    public virtual Task`1<object> FindAsync(Object[] keyValues);
    public virtual Task`1<object> FindAsync(CancellationToken cancellationToken, Object[] keyValues);
    public virtual IList get_Local();
    public virtual object Attach(object entity);
    public virtual object Add(object entity);
    public virtual IEnumerable AddRange(IEnumerable entities);
    public virtual object Remove(object entity);
    public virtual IEnumerable RemoveRange(IEnumerable entities);
    public virtual object Create();
    public virtual object Create(Type derivedEntityType);
    public DbSet`1<TEntity> Cast();
    private sealed virtual override IInternalSet System.Data.Entity.Internal.Linq.IInternalSetAdapter.get_InternalSet();
    internal virtual IInternalSet get_InternalSet();
    internal virtual IInternalSet GetInternalSetWithCheck(string memberName);
    public virtual DbSqlQuery SqlQuery(string sql, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.DbSet`1 : DbQuery`1<TEntity> {
    private InternalSet`1<TEntity> _internalSet;
    public ObservableCollection`1<TEntity> Local { get; }
    private IInternalSet System.Data.Entity.Internal.Linq.IInternalSetAdapter.InternalSet { get; }
    internal DbSet`1(InternalSet`1<TEntity> internalSet);
    public virtual TEntity Find(Object[] keyValues);
    public virtual Task`1<TEntity> FindAsync(CancellationToken cancellationToken, Object[] keyValues);
    public virtual Task`1<TEntity> FindAsync(Object[] keyValues);
    public virtual ObservableCollection`1<TEntity> get_Local();
    public virtual TEntity Attach(TEntity entity);
    public virtual TEntity Add(TEntity entity);
    public virtual IEnumerable`1<TEntity> AddRange(IEnumerable`1<TEntity> entities);
    public virtual TEntity Remove(TEntity entity);
    public virtual IEnumerable`1<TEntity> RemoveRange(IEnumerable`1<TEntity> entities);
    public virtual TEntity Create();
    public virtual TDerivedEntity Create();
    public static DbSet op_Implicit(DbSet`1<TEntity> entry);
    private sealed virtual override IInternalSet System.Data.Entity.Internal.Linq.IInternalSetAdapter.get_InternalSet();
    private InternalSet`1<TEntity> GetInternalSetWithCheck(string memberName);
    public virtual DbSqlQuery`1<TEntity> SqlQuery(string sql, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.DropCreateDatabaseAlways`1 : object {
    private static DropCreateDatabaseAlways`1();
    public virtual void InitializeDatabase(TContext context);
    protected virtual void Seed(TContext context);
}
public class System.Data.Entity.DropCreateDatabaseIfModelChanges`1 : object {
    private static DropCreateDatabaseIfModelChanges`1();
    public virtual void InitializeDatabase(TContext context);
    protected virtual void Seed(TContext context);
}
internal abstract class System.Data.Entity.Edm.EdmModelVisitor : object {
    protected static void VisitCollection(IEnumerable`1<T> collection, Action`1<T> visitMethod);
    protected internal virtual void VisitEdmModel(EdmModel item);
    protected virtual void VisitAnnotations(MetadataItem item, IEnumerable`1<MetadataProperty> annotations);
    protected virtual void VisitAnnotation(MetadataProperty item);
    protected internal virtual void VisitMetadataItem(MetadataItem item);
    protected virtual void VisitEntityContainers(IEnumerable`1<EntityContainer> entityContainers);
    protected virtual void VisitEdmEntityContainer(EntityContainer item);
    protected internal virtual void VisitEdmFunction(EdmFunction function);
    protected virtual void VisitEntitySets(EntityContainer container, IEnumerable`1<EntitySet> entitySets);
    protected internal virtual void VisitEdmEntitySet(EntitySet item);
    protected virtual void VisitAssociationSets(EntityContainer container, IEnumerable`1<AssociationSet> associationSets);
    protected virtual void VisitEdmAssociationSet(AssociationSet item);
    protected virtual void VisitEdmAssociationSetEnd(EntitySet item);
    protected internal virtual void VisitFunctionImports(EntityContainer container, IEnumerable`1<EdmFunction> functionImports);
    protected internal virtual void VisitFunctionImport(EdmFunction functionImport);
    protected internal virtual void VisitFunctionImportParameters(IEnumerable`1<FunctionParameter> parameters);
    protected internal virtual void VisitFunctionImportParameter(FunctionParameter parameter);
    protected internal virtual void VisitFunctionImportReturnParameters(IEnumerable`1<FunctionParameter> parameters);
    protected internal virtual void VisitFunctionImportReturnParameter(FunctionParameter parameter);
    protected virtual void VisitComplexTypes(IEnumerable`1<ComplexType> complexTypes);
    protected virtual void VisitComplexType(ComplexType item);
    protected virtual void VisitDeclaredProperties(ComplexType complexType, IEnumerable`1<EdmProperty> properties);
    protected virtual void VisitEntityTypes(IEnumerable`1<EntityType> entityTypes);
    protected virtual void VisitEnumTypes(IEnumerable`1<EnumType> enumTypes);
    protected internal virtual void VisitFunctions(IEnumerable`1<EdmFunction> functions);
    protected virtual void VisitFunctionParameters(IEnumerable`1<FunctionParameter> parameters);
    protected internal virtual void VisitFunctionParameter(FunctionParameter functionParameter);
    protected internal virtual void VisitFunctionReturnParameters(IEnumerable`1<FunctionParameter> returnParameters);
    protected internal virtual void VisitFunctionReturnParameter(FunctionParameter returnParameter);
    protected internal virtual void VisitEdmType(EdmType edmType);
    protected internal virtual void VisitCollectionType(CollectionType collectionType);
    protected internal virtual void VisitRowType(RowType rowType);
    protected internal virtual void VisitPrimitiveType(PrimitiveType primitiveType);
    protected virtual void VisitEdmEnumType(EnumType item);
    protected virtual void VisitEnumMembers(EnumType enumType, IEnumerable`1<EnumMember> members);
    protected internal virtual void VisitEdmEntityType(EntityType item);
    protected virtual void VisitKeyProperties(EntityType entityType, IList`1<EdmProperty> properties);
    protected virtual void VisitDeclaredProperties(EntityType entityType, IList`1<EdmProperty> properties);
    protected virtual void VisitDeclaredNavigationProperties(EntityType entityType, IEnumerable`1<NavigationProperty> navigationProperties);
    protected virtual void VisitAssociationTypes(IEnumerable`1<AssociationType> associationTypes);
    protected internal virtual void VisitEdmAssociationType(AssociationType item);
    protected internal virtual void VisitEdmProperty(EdmProperty item);
    protected virtual void VisitEdmEnumTypeMember(EnumMember item);
    protected virtual void VisitEdmAssociationEnd(RelationshipEndMember item);
    protected virtual void VisitEdmAssociationConstraint(ReferentialConstraint item);
    protected virtual void VisitEdmNavigationProperty(NavigationProperty item);
}
[FlagsAttribute]
public enum System.Data.Entity.EntityState : Enum {
    public int value__;
    public static EntityState Detached;
    public static EntityState Unchanged;
    public static EntityState Added;
    public static EntityState Deleted;
    public static EntityState Modified;
}
public abstract class System.Data.Entity.Hierarchy.DbHierarchyServices : object {
    public abstract virtual HierarchyId GetAncestor(int n);
    public abstract virtual HierarchyId GetDescendant(HierarchyId child1, HierarchyId child2);
    public abstract virtual short GetLevel();
    public static HierarchyId GetRoot();
    public abstract virtual bool IsDescendantOf(HierarchyId parent);
    public abstract virtual HierarchyId GetReparentedValue(HierarchyId oldRoot, HierarchyId newRoot);
    public static HierarchyId Parse(string input);
}
[DataContractAttribute]
public class System.Data.Entity.Hierarchy.HierarchyId : object {
    private string _hierarchyId;
    private Int32[][] _nodes;
    public static string PathSeparator;
    private static string InvalidHierarchyIdExceptionMessage;
    private static string GetReparentedValueOldRootExceptionMessage;
    private static string GetDescendantMostBeChildExceptionMessage;
    private static string GetDescendantChild1MustLessThanChild2ExceptionMessage;
    public HierarchyId(string hierarchyId);
    public HierarchyId GetAncestor(int n);
    public HierarchyId GetDescendant(HierarchyId child1, HierarchyId child2);
    public short GetLevel();
    public static HierarchyId GetRoot();
    public bool IsDescendantOf(HierarchyId parent);
    public HierarchyId GetReparentedValue(HierarchyId oldRoot, HierarchyId newRoot);
    public static HierarchyId Parse(string input);
    private static string IntArrayToStirng(IEnumerable`1<int> array);
    private static int CompareIntArrays(Int32[] array1, Int32[] array2);
    public static int Compare(HierarchyId hid1, HierarchyId hid2);
    public static bool op_LessThan(HierarchyId hid1, HierarchyId hid2);
    public static bool op_GreaterThan(HierarchyId hid1, HierarchyId hid2);
    public static bool op_LessThanOrEqual(HierarchyId hid1, HierarchyId hid2);
    public static bool op_GreaterThanOrEqual(HierarchyId hid1, HierarchyId hid2);
    public static bool op_Equality(HierarchyId hid1, HierarchyId hid2);
    public static bool op_Inequality(HierarchyId hid1, HierarchyId hid2);
    protected bool Equals(HierarchyId other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual int CompareTo(object obj);
}
public interface System.Data.Entity.IDatabaseInitializer`1 {
    public abstract virtual void InitializeDatabase(TContext context);
}
public interface System.Data.Entity.IDbSet`1 {
    public ObservableCollection`1<TEntity> Local { get; }
    public abstract virtual TEntity Find(Object[] keyValues);
    public abstract virtual TEntity Add(TEntity entity);
    public abstract virtual TEntity Remove(TEntity entity);
    public abstract virtual TEntity Attach(TEntity entity);
    public abstract virtual ObservableCollection`1<TEntity> get_Local();
    public abstract virtual TEntity Create();
    public abstract virtual TDerivedEntity Create();
}
public abstract class System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator : object {
    public virtual IEnumerable`1<string> GetExtraNamespaces(IEnumerable`1<string> annotationNames);
    public abstract virtual void Generate(string annotationName, object annotation, IndentedTextWriter writer);
}
public class System.Data.Entity.Infrastructure.Annotations.AnnotationValues : object {
    private object _oldValue;
    private object _newValue;
    public object OldValue { get; }
    public object NewValue { get; }
    public AnnotationValues(object oldValue, object newValue);
    public object get_OldValue();
    public object get_NewValue();
    private bool Equals(AnnotationValues other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AnnotationValues left, AnnotationValues right);
    public static bool op_Inequality(AnnotationValues left, AnnotationValues right);
}
public class System.Data.Entity.Infrastructure.Annotations.CompatibilityResult : object {
    private bool _isCompatible;
    private string _errorMessage;
    public bool IsCompatible { get; }
    public string ErrorMessage { get; }
    public CompatibilityResult(bool isCompatible, string errorMessage);
    public bool get_IsCompatible();
    public string get_ErrorMessage();
    public static bool op_Implicit(CompatibilityResult result);
}
public interface System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation {
    public abstract virtual CompatibilityResult IsCompatibleWith(object other);
    public abstract virtual object MergeWith(object other);
}
public class System.Data.Entity.Infrastructure.Annotations.IndexAnnotation : object {
    public static string AnnotationName;
    private IList`1<IndexAttribute> _indexes;
    public IEnumerable`1<IndexAttribute> Indexes { get; }
    public IndexAnnotation(IndexAttribute indexAttribute);
    public IndexAnnotation(IEnumerable`1<IndexAttribute> indexAttributes);
    internal IndexAnnotation(PropertyInfo propertyInfo, IEnumerable`1<IndexAttribute> indexAttributes);
    private static void MergeLists(ICollection`1<IndexAttribute> existingIndexes, IEnumerable`1<IndexAttribute> newIndexes, PropertyInfo propertyInfo);
    public virtual IEnumerable`1<IndexAttribute> get_Indexes();
    public virtual CompatibilityResult IsCompatibleWith(object other);
    public virtual object MergeWith(object other);
    public virtual string ToString();
}
public class System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer : object {
    internal static string FormatExample;
    private static Regex _indexesSplitter;
    private static Regex _indexPartsSplitter;
    private static IndexAnnotationSerializer();
    public virtual string Serialize(string name, object value);
    internal static string SerializeIndexAttribute(IndexAttribute indexAttribute);
    public virtual object Deserialize(string name, string value);
    private static FormatException BuildFormatException(string value);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Infrastructure.Annotations.IndexAttributeExtensions : object {
    [ExtensionAttribute]
internal static CompatibilityResult IsCompatibleWith(IndexAttribute me, IndexAttribute other, bool ignoreOrder);
    [ExtensionAttribute]
internal static IndexAttribute MergeWith(IndexAttribute me, IndexAttribute other, bool ignoreOrder);
}
public class System.Data.Entity.Infrastructure.CommitFailedException : DataException {
    public CommitFailedException(string message);
    public CommitFailedException(string message, Exception innerException);
    protected CommitFailedException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Infrastructure.CommitFailureHandler : TransactionHandler {
    private HashSet`1<TransactionRow> _rowsToDelete;
    private Func`2<DbConnection, TransactionContext> _transactionContextFactory;
    [CompilerGeneratedAttribute]
private TransactionContext <TransactionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<DbTransaction, TransactionRow> <Transactions>k__BackingField;
    protected internal TransactionContext TransactionContext { get; private set; }
    protected Dictionary`2<DbTransaction, TransactionRow> Transactions { get; private set; }
    protected int PruningLimit { get; }
    public CommitFailureHandler(Func`2<DbConnection, TransactionContext> transactionContextFactory);
    [CompilerGeneratedAttribute]
protected internal TransactionContext get_TransactionContext();
    [CompilerGeneratedAttribute]
private void set_TransactionContext(TransactionContext value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<DbTransaction, TransactionRow> get_Transactions();
    [CompilerGeneratedAttribute]
private void set_Transactions(Dictionary`2<DbTransaction, TransactionRow> value);
    protected virtual IDbExecutionStrategy GetExecutionStrategy();
    public virtual void Initialize(ObjectContext context);
    public virtual void Initialize(DbContext context, DbConnection connection);
    private void Initialize(DbConnection connection);
    protected virtual int get_PruningLimit();
    protected virtual void Dispose(bool disposing);
    public virtual string BuildDatabaseInitializationScript();
    public virtual void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void RolledBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Disposed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void ClearTransactionHistory();
    public Task ClearTransactionHistoryAsync();
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.CommitFailureHandler/<ClearTransactionHistoryAsync>d__26")]
public virtual Task ClearTransactionHistoryAsync(CancellationToken cancellationToken);
    protected virtual void MarkTransactionForPruning(TransactionRow transaction);
    public void PruneTransactionHistory();
    public Task PruneTransactionHistoryAsync();
    public Task PruneTransactionHistoryAsync(CancellationToken cancellationToken);
    protected virtual void PruneTransactionHistory(bool force, bool useExecutionStrategy);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.CommitFailureHandler/<PruneTransactionHistoryAsync>d__32")]
protected virtual Task PruneTransactionHistoryAsync(bool force, bool useExecutionStrategy, CancellationToken cancellationToken);
    private void PruneTransactionHistory(TransactionRow transaction);
    public static CommitFailureHandler FromContext(DbContext context);
    public static CommitFailureHandler FromContext(ObjectContext context);
}
internal class System.Data.Entity.Infrastructure.ConsolidatedIndex : object {
    private string _table;
    private IndexAttribute _index;
    private IDictionary`2<int, string> _columns;
    public IndexAttribute Index { get; }
    public IEnumerable`1<string> Columns { get; }
    public string Table { get; }
    public ConsolidatedIndex(string table, IndexAttribute index);
    public ConsolidatedIndex(string table, string column, IndexAttribute index);
    public static IEnumerable`1<ConsolidatedIndex> BuildIndexes(string tableName, IEnumerable`1<Tuple`2<string, EdmProperty>> columns);
    public IndexAttribute get_Index();
    public IEnumerable`1<string> get_Columns();
    public string get_Table();
    public void Add(string columnName, IndexAttribute index);
    public CreateIndexOperation CreateCreateIndexOperation();
    public DropIndexOperation CreateDropIndexOperation();
}
public class System.Data.Entity.Infrastructure.DbChangeTracker : object {
    private InternalContext _internalContext;
    internal DbChangeTracker(InternalContext internalContext);
    public IEnumerable`1<DbEntityEntry> Entries();
    public IEnumerable`1<DbEntityEntry`1<TEntity>> Entries();
    public bool HasChanges();
    public void DetectChanges();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [CompilerGeneratedAttribute]
private DbEntityEntry <Entries>b__2_0(IEntityStateEntry e);
    [CompilerGeneratedAttribute]
private DbEntityEntry`1<TEntity> <Entries>b__3_0(IEntityStateEntry e);
}
public class System.Data.Entity.Infrastructure.DbCollectionEntry : DbMemberEntry {
    private InternalCollectionEntry _internalCollectionEntry;
    public string Name { get; }
    public object CurrentValue { get; public set; }
    public bool IsLoaded { get; public set; }
    public DbEntityEntry EntityEntry { get; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    internal DbCollectionEntry(InternalCollectionEntry internalCollectionEntry);
    internal static DbCollectionEntry Create(InternalCollectionEntry internalCollectionEntry);
    public virtual string get_Name();
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public void Load();
    public Task LoadAsync();
    public Task LoadAsync(CancellationToken cancellationToken);
    public bool get_IsLoaded();
    public void set_IsLoaded(bool value);
    public IQueryable Query();
    public virtual DbEntityEntry get_EntityEntry();
    internal virtual InternalMemberEntry get_InternalMemberEntry();
    public DbCollectionEntry`2<TEntity, TElement> Cast();
}
public class System.Data.Entity.Infrastructure.DbCollectionEntry`2 : DbMemberEntry`2<TEntity, ICollection`1<TElement>> {
    private InternalCollectionEntry _internalCollectionEntry;
    public string Name { get; }
    public ICollection`1<TElement> CurrentValue { get; public set; }
    public bool IsLoaded { get; public set; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    public DbEntityEntry`1<TEntity> EntityEntry { get; }
    internal DbCollectionEntry`2(InternalCollectionEntry internalCollectionEntry);
    internal static DbCollectionEntry`2<TEntity, TElement> Create(InternalCollectionEntry internalCollectionEntry);
    public virtual string get_Name();
    public virtual ICollection`1<TElement> get_CurrentValue();
    public virtual void set_CurrentValue(ICollection`1<TElement> value);
    public void Load();
    public Task LoadAsync();
    public Task LoadAsync(CancellationToken cancellationToken);
    public bool get_IsLoaded();
    public void set_IsLoaded(bool value);
    public IQueryable`1<TElement> Query();
    public static DbCollectionEntry op_Implicit(DbCollectionEntry`2<TEntity, TElement> entry);
    internal virtual InternalMemberEntry get_InternalMemberEntry();
    public virtual DbEntityEntry`1<TEntity> get_EntityEntry();
}
public class System.Data.Entity.Infrastructure.DbCompiledModel : object {
    private static ConcurrentDictionary`2<Type, Func`2<EntityConnection, ObjectContext>> _contextConstructors;
    private static Func`2<EntityConnection, ObjectContext> _objectContextConstructor;
    private ICachedMetadataWorkspace _workspace;
    private DbModelBuilder _cachedModelBuilder;
    private string _defaultSchema;
    internal DbModelBuilder CachedModelBuilder { get; }
    internal DbProviderInfo ProviderInfo { get; }
    internal string DefaultSchema { get; }
    internal DbCompiledModel(CodeFirstCachedMetadataWorkspace workspace, DbModelBuilder cachedModelBuilder);
    internal DbCompiledModel(CodeFirstCachedMetadataWorkspace workspace, string defaultSchema);
    private static DbCompiledModel();
    internal virtual DbModelBuilder get_CachedModelBuilder();
    internal virtual DbProviderInfo get_ProviderInfo();
    internal string get_DefaultSchema();
    public TContext CreateObjectContext(DbConnection existingConnection);
    internal static Func`2<EntityConnection, ObjectContext> GetConstructorDelegate();
}
public class System.Data.Entity.Infrastructure.DbComplexPropertyEntry : DbPropertyEntry {
    internal DbComplexPropertyEntry(InternalPropertyEntry internalPropertyEntry);
    internal static DbComplexPropertyEntry Create(InternalPropertyEntry internalPropertyEntry);
    public DbPropertyEntry Property(string propertyName);
    public DbComplexPropertyEntry ComplexProperty(string propertyName);
    public DbComplexPropertyEntry`2<TEntity, TComplexProperty> Cast();
}
public class System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2 : DbPropertyEntry`2<TEntity, TComplexProperty> {
    internal DbComplexPropertyEntry`2(InternalPropertyEntry internalPropertyEntry);
    internal static DbComplexPropertyEntry`2<TEntity, TComplexProperty> Create(InternalPropertyEntry internalPropertyEntry);
    public static DbComplexPropertyEntry op_Implicit(DbComplexPropertyEntry`2<TEntity, TComplexProperty> entry);
    public DbPropertyEntry Property(string propertyName);
    public DbPropertyEntry`2<TEntity, TNestedProperty> Property(string propertyName);
    public DbPropertyEntry`2<TEntity, TNestedProperty> Property(Expression`1<Func`2<TComplexProperty, TNestedProperty>> property);
    public DbComplexPropertyEntry ComplexProperty(string propertyName);
    public DbComplexPropertyEntry`2<TEntity, TNestedComplexProperty> ComplexProperty(string propertyName);
    public DbComplexPropertyEntry`2<TEntity, TNestedComplexProperty> ComplexProperty(Expression`1<Func`2<TComplexProperty, TNestedComplexProperty>> property);
}
public class System.Data.Entity.Infrastructure.DbConnectionInfo : object {
    private string _connectionName;
    private string _connectionString;
    private string _providerInvariantName;
    public DbConnectionInfo(string connectionName);
    public DbConnectionInfo(string connectionString, string providerInvariantName);
    internal ConnectionStringSettings GetConnectionString(AppConfig config);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public enum System.Data.Entity.Infrastructure.DbConnectionStringOrigin : Enum {
    public int value__;
    public static DbConnectionStringOrigin Convention;
    public static DbConnectionStringOrigin Configuration;
    public static DbConnectionStringOrigin UserCode;
    public static DbConnectionStringOrigin DbContextInfo;
}
public class System.Data.Entity.Infrastructure.DbContextConfiguration : object {
    private InternalContext _internalContext;
    public bool EnsureTransactionsForFunctionsAndCommands { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseDatabaseNullSemantics { get; public set; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; public set; }
    public bool AutoDetectChangesEnabled { get; public set; }
    public bool ValidateOnSaveEnabled { get; public set; }
    internal DbContextConfiguration(InternalContext internalContext);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    public bool get_EnsureTransactionsForFunctionsAndCommands();
    public void set_EnsureTransactionsForFunctionsAndCommands(bool value);
    public bool get_LazyLoadingEnabled();
    public void set_LazyLoadingEnabled(bool value);
    public bool get_ProxyCreationEnabled();
    public void set_ProxyCreationEnabled(bool value);
    public bool get_UseDatabaseNullSemantics();
    public void set_UseDatabaseNullSemantics(bool value);
    public bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    public void set_DisableFilterOverProjectionSimplificationForCustomFunctions(bool value);
    public bool get_AutoDetectChangesEnabled();
    public void set_AutoDetectChangesEnabled(bool value);
    public bool get_ValidateOnSaveEnabled();
    public void set_ValidateOnSaveEnabled(bool value);
}
public class System.Data.Entity.Infrastructure.DbContextInfo : object {
    [ThreadStaticAttribute]
private static DbContextInfo _currentInfo;
    private Type _contextType;
    private DbProviderInfo _modelProviderInfo;
    private DbConnectionInfo _connectionInfo;
    private AppConfig _appConfig;
    private Func`1<DbContext> _activator;
    private string _connectionString;
    private string _connectionProviderName;
    private bool _isConstructible;
    private DbConnectionStringOrigin _connectionStringOrigin;
    private string _connectionStringName;
    private Func`1<IDbDependencyResolver> _resolver;
    private Action`1<DbModelBuilder> _onModelCreating;
    public Type ContextType { get; }
    public bool IsConstructible { get; }
    public string ConnectionString { get; }
    public string ConnectionStringName { get; }
    public string ConnectionProviderName { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public Action`1<DbModelBuilder> OnModelCreating { get; public set; }
    internal static DbContextInfo CurrentInfo { get; internal set; }
    public DbContextInfo(Type contextType);
    internal DbContextInfo(Type contextType, Func`1<IDbDependencyResolver> resolver);
    public DbContextInfo(Type contextType, DbConnectionInfo connectionInfo);
    [ObsoleteAttribute("The application configuration can contain multiple settings that affect the connection used by a DbContext. To ensure all configuration is taken into account, use a DbContextInfo constructor that accepts System.Configuration.Configuration")]
public DbContextInfo(Type contextType, ConnectionStringSettingsCollection connectionStringSettings);
    public DbContextInfo(Type contextType, Configuration config);
    public DbContextInfo(Type contextType, Configuration config, DbConnectionInfo connectionInfo);
    public DbContextInfo(Type contextType, DbProviderInfo modelProviderInfo);
    public DbContextInfo(Type contextType, Configuration config, DbProviderInfo modelProviderInfo);
    internal DbContextInfo(DbContext context, Func`1<IDbDependencyResolver> resolver);
    private DbContextInfo(Type contextType, DbProviderInfo modelProviderInfo, AppConfig config, DbConnectionInfo connectionInfo, Func`1<IDbDependencyResolver> resolver);
    public virtual Type get_ContextType();
    public virtual bool get_IsConstructible();
    public virtual string get_ConnectionString();
    public virtual string get_ConnectionStringName();
    public virtual string get_ConnectionProviderName();
    public virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public virtual Action`1<DbModelBuilder> get_OnModelCreating();
    public virtual void set_OnModelCreating(Action`1<DbModelBuilder> value);
    public virtual DbContext CreateInstance();
    internal void ConfigureContext(DbContext context);
    private Func`1<DbContext> CreateActivator();
    internal static DbContextInfo get_CurrentInfo();
    internal static void set_CurrentInfo(DbContextInfo value);
    [CompilerGeneratedAttribute]
private void <CreateInstance>b__38_1(object _, EventArgs __);
    [CompilerGeneratedAttribute]
private DbContext <CreateActivator>b__40_0();
    [CompilerGeneratedAttribute]
private bool <CreateActivator>b__40_1(Type t);
}
public class System.Data.Entity.Infrastructure.DbEntityEntry : object {
    private InternalEntityEntry _internalEntityEntry;
    public object Entity { get; }
    public EntityState State { get; public set; }
    public DbPropertyValues CurrentValues { get; }
    public DbPropertyValues OriginalValues { get; }
    internal InternalEntityEntry InternalEntry { get; }
    internal DbEntityEntry(InternalEntityEntry internalEntityEntry);
    public object get_Entity();
    public EntityState get_State();
    public void set_State(EntityState value);
    public DbPropertyValues get_CurrentValues();
    public DbPropertyValues get_OriginalValues();
    public DbPropertyValues GetDatabaseValues();
    public Task`1<DbPropertyValues> GetDatabaseValuesAsync();
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.DbEntityEntry/<GetDatabaseValuesAsync>d__13")]
public Task`1<DbPropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken);
    public void Reload();
    public Task ReloadAsync();
    public Task ReloadAsync(CancellationToken cancellationToken);
    public DbReferenceEntry Reference(string navigationProperty);
    public DbCollectionEntry Collection(string navigationProperty);
    public DbPropertyEntry Property(string propertyName);
    public DbComplexPropertyEntry ComplexProperty(string propertyName);
    public DbMemberEntry Member(string propertyName);
    public DbEntityEntry`1<TEntity> Cast();
    public DbEntityValidationResult GetValidationResult();
    internal InternalEntityEntry get_InternalEntry();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public bool Equals(DbEntityEntry other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbEntityEntry`1 : object {
    private InternalEntityEntry _internalEntityEntry;
    public TEntity Entity { get; }
    public EntityState State { get; public set; }
    public DbPropertyValues CurrentValues { get; }
    public DbPropertyValues OriginalValues { get; }
    internal DbEntityEntry`1(InternalEntityEntry internalEntityEntry);
    public TEntity get_Entity();
    public EntityState get_State();
    public void set_State(EntityState value);
    public DbPropertyValues get_CurrentValues();
    public DbPropertyValues get_OriginalValues();
    public DbPropertyValues GetDatabaseValues();
    public Task`1<DbPropertyValues> GetDatabaseValuesAsync();
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.DbEntityEntry`1/<GetDatabaseValuesAsync>d__13")]
public Task`1<DbPropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken);
    public void Reload();
    public Task ReloadAsync();
    public Task ReloadAsync(CancellationToken cancellationToken);
    public DbReferenceEntry Reference(string navigationProperty);
    public DbReferenceEntry`2<TEntity, TProperty> Reference(string navigationProperty);
    public DbReferenceEntry`2<TEntity, TProperty> Reference(Expression`1<Func`2<TEntity, TProperty>> navigationProperty);
    public DbCollectionEntry Collection(string navigationProperty);
    public DbCollectionEntry`2<TEntity, TElement> Collection(string navigationProperty);
    public DbCollectionEntry`2<TEntity, TElement> Collection(Expression`1<Func`2<TEntity, ICollection`1<TElement>>> navigationProperty);
    public DbPropertyEntry Property(string propertyName);
    public DbPropertyEntry`2<TEntity, TProperty> Property(string propertyName);
    public DbPropertyEntry`2<TEntity, TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> property);
    public DbComplexPropertyEntry ComplexProperty(string propertyName);
    public DbComplexPropertyEntry`2<TEntity, TComplexProperty> ComplexProperty(string propertyName);
    public DbComplexPropertyEntry`2<TEntity, TComplexProperty> ComplexProperty(Expression`1<Func`2<TEntity, TComplexProperty>> property);
    public DbMemberEntry Member(string propertyName);
    public DbMemberEntry`2<TEntity, TMember> Member(string propertyName);
    public static DbEntityEntry op_Implicit(DbEntityEntry`1<TEntity> entry);
    public DbEntityValidationResult GetValidationResult();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public bool Equals(DbEntityEntry`1<TEntity> other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.Infrastructure.DbExecutionStrategy : object {
    private List`1<Exception> _exceptionsEncountered;
    private Random _random;
    private int _maxRetryCount;
    private TimeSpan _maxDelay;
    private static string ContextName;
    private static int DefaultMaxRetryCount;
    private static double DefaultRandomFactor;
    private static double DefaultExponentialBase;
    private static TimeSpan DefaultCoefficient;
    private static TimeSpan DefaultMaxDelay;
    public bool RetriesOnFailure { get; }
    protected internal static bool Suspended { get; protected internal set; }
    protected DbExecutionStrategy(int maxRetryCount, TimeSpan maxDelay);
    private static DbExecutionStrategy();
    public sealed virtual bool get_RetriesOnFailure();
    protected internal static bool get_Suspended();
    protected internal static void set_Suspended(bool value);
    public sealed virtual void Execute(Action operation);
    public sealed virtual TResult Execute(Func`1<TResult> operation);
    public sealed virtual Task ExecuteAsync(Func`1<Task> operation, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.DbExecutionStrategy/<ProtectedExecuteAsync>d__21`1")]
private Task`1<TResult> ProtectedExecuteAsync(Func`1<Task`1<TResult>> operation, CancellationToken cancellationToken);
    private void EnsurePreexecutionState();
    protected internal virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    public static T UnwrapAndHandleException(Exception exception, Func`2<Exception, T> exceptionHandler);
    protected internal abstract virtual bool ShouldRetryOn(Exception exception);
}
public abstract class System.Data.Entity.Infrastructure.DbMemberEntry : object {
    public string Name { get; }
    public object CurrentValue { get; public set; }
    public DbEntityEntry EntityEntry { get; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    internal static DbMemberEntry Create(InternalMemberEntry internalMemberEntry);
    public abstract virtual string get_Name();
    public abstract virtual object get_CurrentValue();
    public abstract virtual void set_CurrentValue(object value);
    public abstract virtual DbEntityEntry get_EntityEntry();
    public ICollection`1<DbValidationError> GetValidationErrors();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    internal abstract virtual InternalMemberEntry get_InternalMemberEntry();
    public DbMemberEntry`2<TEntity, TProperty> Cast();
}
public abstract class System.Data.Entity.Infrastructure.DbMemberEntry`2 : object {
    public string Name { get; }
    public TProperty CurrentValue { get; public set; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    public DbEntityEntry`1<TEntity> EntityEntry { get; }
    internal static DbMemberEntry`2<TEntity, TProperty> Create(InternalMemberEntry internalMemberEntry);
    public abstract virtual string get_Name();
    public abstract virtual TProperty get_CurrentValue();
    public abstract virtual void set_CurrentValue(TProperty value);
    public static DbMemberEntry op_Implicit(DbMemberEntry`2<TEntity, TProperty> entry);
    internal abstract virtual InternalMemberEntry get_InternalMemberEntry();
    public abstract virtual DbEntityEntry`1<TEntity> get_EntityEntry();
    public ICollection`1<DbValidationError> GetValidationErrors();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbModel : object {
    private DbDatabaseMapping _databaseMapping;
    private DbModelBuilder _cachedModelBuilder;
    public DbProviderInfo ProviderInfo { get; }
    public DbProviderManifest ProviderManifest { get; }
    public EdmModel ConceptualModel { get; }
    public EdmModel StoreModel { get; }
    public EntityContainerMapping ConceptualToStoreMapping { get; }
    internal DbModelBuilder CachedModelBuilder { get; }
    internal DbDatabaseMapping DatabaseMapping { get; }
    internal DbModel(DbDatabaseMapping databaseMapping, DbModelBuilder modelBuilder);
    internal DbModel(DbProviderInfo providerInfo, DbProviderManifest providerManifest);
    internal DbModel(EdmModel conceptualModel, EdmModel storeModel);
    public DbProviderInfo get_ProviderInfo();
    public DbProviderManifest get_ProviderManifest();
    public sealed virtual EdmModel get_ConceptualModel();
    public sealed virtual EdmModel get_StoreModel();
    public EntityContainerMapping get_ConceptualToStoreMapping();
    internal DbModelBuilder get_CachedModelBuilder();
    internal DbDatabaseMapping get_DatabaseMapping();
    public DbCompiledModel Compile();
}
public abstract class System.Data.Entity.Infrastructure.DbModelStore : object {
    public abstract virtual DbCompiledModel TryLoad(Type contextType);
    public abstract virtual XDocument TryGetEdmx(Type contextType);
    public abstract virtual void Save(Type contextType, DbModel model);
    protected virtual string GetDefaultSchema(Type contextType);
}
public class System.Data.Entity.Infrastructure.DbPropertyEntry : DbMemberEntry {
    private InternalPropertyEntry _internalPropertyEntry;
    public string Name { get; }
    public object OriginalValue { get; public set; }
    public object CurrentValue { get; public set; }
    public bool IsModified { get; public set; }
    public DbEntityEntry EntityEntry { get; }
    public DbComplexPropertyEntry ParentProperty { get; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    internal DbPropertyEntry(InternalPropertyEntry internalPropertyEntry);
    internal static DbPropertyEntry Create(InternalPropertyEntry internalPropertyEntry);
    public virtual string get_Name();
    public object get_OriginalValue();
    public void set_OriginalValue(object value);
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public bool get_IsModified();
    public void set_IsModified(bool value);
    public virtual DbEntityEntry get_EntityEntry();
    public DbComplexPropertyEntry get_ParentProperty();
    internal virtual InternalMemberEntry get_InternalMemberEntry();
    public DbPropertyEntry`2<TEntity, TProperty> Cast();
}
public class System.Data.Entity.Infrastructure.DbPropertyEntry`2 : DbMemberEntry`2<TEntity, TProperty> {
    private InternalPropertyEntry _internalPropertyEntry;
    public string Name { get; }
    public TProperty OriginalValue { get; public set; }
    public TProperty CurrentValue { get; public set; }
    public bool IsModified { get; public set; }
    public DbEntityEntry`1<TEntity> EntityEntry { get; }
    public DbComplexPropertyEntry ParentProperty { get; }
    internal InternalPropertyEntry InternalPropertyEntry { get; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    internal DbPropertyEntry`2(InternalPropertyEntry internalPropertyEntry);
    internal static DbPropertyEntry`2<TEntity, TProperty> Create(InternalPropertyEntry internalPropertyEntry);
    public virtual string get_Name();
    public TProperty get_OriginalValue();
    public void set_OriginalValue(TProperty value);
    public virtual TProperty get_CurrentValue();
    public virtual void set_CurrentValue(TProperty value);
    public bool get_IsModified();
    public void set_IsModified(bool value);
    public static DbPropertyEntry op_Implicit(DbPropertyEntry`2<TEntity, TProperty> entry);
    public virtual DbEntityEntry`1<TEntity> get_EntityEntry();
    public DbComplexPropertyEntry get_ParentProperty();
    internal InternalPropertyEntry get_InternalPropertyEntry();
    internal virtual InternalMemberEntry get_InternalMemberEntry();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Infrastructure.DbPropertyValues : object {
    private InternalPropertyValues _internalValues;
    public IEnumerable`1<string> PropertyNames { get; }
    public object Item { get; public set; }
    internal InternalPropertyValues InternalPropertyValues { get; }
    internal DbPropertyValues(InternalPropertyValues internalValues);
    public object ToObject();
    public void SetValues(object obj);
    public DbPropertyValues Clone();
    public void SetValues(DbPropertyValues propertyValues);
    public IEnumerable`1<string> get_PropertyNames();
    public object get_Item(string propertyName);
    public void set_Item(string propertyName, object value);
    public TValue GetValue(string propertyName);
    internal InternalPropertyValues get_InternalPropertyValues();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbProviderInfo : object {
    private string _providerInvariantName;
    private string _providerManifestToken;
    public string ProviderInvariantName { get; }
    public string ProviderManifestToken { get; }
    public DbProviderInfo(string providerInvariantName, string providerManifestToken);
    public string get_ProviderInvariantName();
    public string get_ProviderManifestToken();
    private bool Equals(DbProviderInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{DebuggerDisplay()}")]
public abstract class System.Data.Entity.Infrastructure.DbQuery : object {
    private IQueryProvider _provider;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public Type ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public string Sql { get; }
    internal IInternalQuery InternalQuery { get; }
    private IInternalQuery System.Data.Entity.Internal.Linq.IInternalQueryAdapter.InternalQuery { get; }
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    public virtual Type get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public virtual DbQuery Include(string path);
    public virtual DbQuery AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbQuery AsStreaming();
    internal virtual DbQuery WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    public DbQuery`1<TElement> Cast();
    public virtual string ToString();
    private string DebuggerDisplay();
    public string get_Sql();
    internal virtual IInternalQuery get_InternalQuery();
    internal virtual IInternalQuery GetInternalQueryWithCheck(string memberName);
    private sealed virtual override IInternalQuery System.Data.Entity.Internal.Linq.IInternalQueryAdapter.get_InternalQuery();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
[DebuggerDisplayAttribute("{DebuggerDisplay()}")]
public class System.Data.Entity.Infrastructure.DbQuery`1 : object {
    private IInternalQuery`1<TResult> _internalQuery;
    private IQueryProvider _provider;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private IInternalQuery System.Data.Entity.Internal.Linq.IInternalQueryAdapter.InternalQuery { get; }
    internal IInternalQuery`1<TResult> InternalQuery { get; }
    public string Sql { get; }
    internal DbQuery`1(IInternalQuery`1<TResult> internalQuery);
    public virtual DbQuery`1<TResult> Include(string path);
    public virtual DbQuery`1<TResult> AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbQuery`1<TResult> AsStreaming();
    internal virtual DbQuery`1<TResult> WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override IEnumerator`1<TResult> System.Collections.Generic.IEnumerable<TResult>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    private sealed virtual override IDbAsyncEnumerator`1<TResult> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TResult>.GetAsyncEnumerator();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IInternalQuery System.Data.Entity.Internal.Linq.IInternalQueryAdapter.get_InternalQuery();
    internal IInternalQuery`1<TResult> get_InternalQuery();
    private IInternalQuery`1<TResult> GetInternalQueryWithCheck(string memberName);
    public virtual string ToString();
    private string DebuggerDisplay();
    public string get_Sql();
    public static DbQuery op_Implicit(DbQuery`1<TResult> entry);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbRawSqlQuery : object {
    private InternalSqlQuery _internalQuery;
    internal InternalSqlQuery InternalQuery { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal DbRawSqlQuery(InternalSqlQuery internalQuery);
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbRawSqlQuery AsStreaming();
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    public virtual Task ForEachAsync(Action`1<object> action);
    public virtual Task ForEachAsync(Action`1<object> action, CancellationToken cancellationToken);
    public virtual Task`1<List`1<object>> ToListAsync();
    public virtual Task`1<List`1<object>> ToListAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    internal InternalSqlQuery get_InternalQuery();
    private InternalSqlQuery GetInternalQueryWithCheck(string memberName);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbRawSqlQuery`1 : object {
    private InternalSqlQuery _internalQuery;
    internal InternalSqlQuery InternalQuery { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal DbRawSqlQuery`1(InternalSqlQuery internalQuery);
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbRawSqlQuery`1<TElement> AsStreaming();
    public virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDbAsyncEnumerator`1<TElement> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TElement>.GetAsyncEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
    public Task ForEachAsync(Action`1<TElement> action);
    public Task ForEachAsync(Action`1<TElement> action, CancellationToken cancellationToken);
    public Task`1<List`1<TElement>> ToListAsync();
    public Task`1<List`1<TElement>> ToListAsync(CancellationToken cancellationToken);
    public Task`1<TElement[]> ToArrayAsync();
    public Task`1<TElement[]> ToArrayAsync(CancellationToken cancellationToken);
    public Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector);
    public Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, CancellationToken cancellationToken);
    public Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    public Task`1<Dictionary`2<TKey, TResult>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, Func`2<TElement, TResult> elementSelector);
    public Task`1<Dictionary`2<TKey, TResult>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, Func`2<TElement, TResult> elementSelector, CancellationToken cancellationToken);
    public Task`1<Dictionary`2<TKey, TResult>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, Func`2<TElement, TResult> elementSelector, IEqualityComparer`1<TKey> comparer);
    public Task`1<Dictionary`2<TKey, TResult>> ToDictionaryAsync(Func`2<TElement, TKey> keySelector, Func`2<TElement, TResult> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    public Task`1<TElement> FirstAsync();
    public Task`1<TElement> FirstAsync(CancellationToken cancellationToken);
    public Task`1<TElement> FirstAsync(Func`2<TElement, bool> predicate);
    public Task`1<TElement> FirstAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<TElement> FirstOrDefaultAsync();
    public Task`1<TElement> FirstOrDefaultAsync(CancellationToken cancellationToken);
    public Task`1<TElement> FirstOrDefaultAsync(Func`2<TElement, bool> predicate);
    public Task`1<TElement> FirstOrDefaultAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<TElement> SingleAsync();
    public Task`1<TElement> SingleAsync(CancellationToken cancellationToken);
    public Task`1<TElement> SingleAsync(Func`2<TElement, bool> predicate);
    public Task`1<TElement> SingleAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<TElement> SingleOrDefaultAsync();
    public Task`1<TElement> SingleOrDefaultAsync(CancellationToken cancellationToken);
    public Task`1<TElement> SingleOrDefaultAsync(Func`2<TElement, bool> predicate);
    public Task`1<TElement> SingleOrDefaultAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<bool> ContainsAsync(TElement value);
    public Task`1<bool> ContainsAsync(TElement value, CancellationToken cancellationToken);
    public Task`1<bool> AnyAsync();
    public Task`1<bool> AnyAsync(CancellationToken cancellationToken);
    public Task`1<bool> AnyAsync(Func`2<TElement, bool> predicate);
    public Task`1<bool> AnyAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<bool> AllAsync(Func`2<TElement, bool> predicate);
    public Task`1<bool> AllAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<int> CountAsync();
    public Task`1<int> CountAsync(CancellationToken cancellationToken);
    public Task`1<int> CountAsync(Func`2<TElement, bool> predicate);
    public Task`1<int> CountAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<long> LongCountAsync();
    public Task`1<long> LongCountAsync(CancellationToken cancellationToken);
    public Task`1<long> LongCountAsync(Func`2<TElement, bool> predicate);
    public Task`1<long> LongCountAsync(Func`2<TElement, bool> predicate, CancellationToken cancellationToken);
    public Task`1<TElement> MinAsync();
    public Task`1<TElement> MinAsync(CancellationToken cancellationToken);
    public Task`1<TElement> MaxAsync();
    public Task`1<TElement> MaxAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    internal InternalSqlQuery get_InternalQuery();
    private InternalSqlQuery GetInternalQueryWithCheck(string memberName);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbReferenceEntry : DbMemberEntry {
    private InternalReferenceEntry _internalReferenceEntry;
    public string Name { get; }
    public object CurrentValue { get; public set; }
    public bool IsLoaded { get; public set; }
    public DbEntityEntry EntityEntry { get; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    internal DbReferenceEntry(InternalReferenceEntry internalReferenceEntry);
    internal static DbReferenceEntry Create(InternalReferenceEntry internalReferenceEntry);
    public virtual string get_Name();
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public void Load();
    public Task LoadAsync();
    public Task LoadAsync(CancellationToken cancellationToken);
    public bool get_IsLoaded();
    public void set_IsLoaded(bool value);
    public IQueryable Query();
    public virtual DbEntityEntry get_EntityEntry();
    internal virtual InternalMemberEntry get_InternalMemberEntry();
    public DbReferenceEntry`2<TEntity, TProperty> Cast();
}
public class System.Data.Entity.Infrastructure.DbReferenceEntry`2 : DbMemberEntry`2<TEntity, TProperty> {
    private InternalReferenceEntry _internalReferenceEntry;
    public string Name { get; }
    public TProperty CurrentValue { get; public set; }
    public bool IsLoaded { get; public set; }
    internal InternalMemberEntry InternalMemberEntry { get; }
    public DbEntityEntry`1<TEntity> EntityEntry { get; }
    internal DbReferenceEntry`2(InternalReferenceEntry internalReferenceEntry);
    internal static DbReferenceEntry`2<TEntity, TProperty> Create(InternalReferenceEntry internalReferenceEntry);
    public virtual string get_Name();
    public virtual TProperty get_CurrentValue();
    public virtual void set_CurrentValue(TProperty value);
    public void Load();
    public Task LoadAsync();
    public Task LoadAsync(CancellationToken cancellationToken);
    public bool get_IsLoaded();
    public void set_IsLoaded(bool value);
    public IQueryable`1<TProperty> Query();
    public static DbReferenceEntry op_Implicit(DbReferenceEntry`2<TEntity, TProperty> entry);
    internal virtual InternalMemberEntry get_InternalMemberEntry();
    public virtual DbEntityEntry`1<TEntity> get_EntityEntry();
}
public class System.Data.Entity.Infrastructure.DbSqlQuery : DbRawSqlQuery {
    internal DbSqlQuery(InternalSqlQuery internalQuery);
    public virtual DbSqlQuery AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbSqlQuery AsStreaming();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbSqlQuery`1 : DbRawSqlQuery`1<TEntity> {
    internal DbSqlQuery`1(InternalSqlQuery internalQuery);
    public virtual DbSqlQuery`1<TEntity> AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbSqlQuery`1<TEntity> AsStreaming();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.DbUpdateConcurrencyException : DbUpdateException {
    internal DbUpdateConcurrencyException(InternalContext context, OptimisticConcurrencyException innerException);
    public DbUpdateConcurrencyException(string message);
    public DbUpdateConcurrencyException(string message, Exception innerException);
    protected DbUpdateConcurrencyException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Infrastructure.DbUpdateException : DataException {
    private InternalContext _internalContext;
    private bool _involvesIndependentAssociations;
    public IEnumerable`1<DbEntityEntry> Entries { get; }
    internal DbUpdateException(InternalContext internalContext, UpdateException innerException, bool involvesIndependentAssociations);
    public DbUpdateException(string message);
    public DbUpdateException(string message, Exception innerException);
    protected DbUpdateException(SerializationInfo info, StreamingContext context);
    public IEnumerable`1<DbEntityEntry> get_Entries();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private DbEntityEntry <get_Entries>b__4_0(ObjectStateEntry e);
}
public class System.Data.Entity.Infrastructure.DefaultDbModelStore : DbModelStore {
    private static string FileExtension;
    private string _directory;
    public string Directory { get; }
    public DefaultDbModelStore(string directory);
    public string get_Directory();
    public virtual DbCompiledModel TryLoad(Type contextType);
    public virtual XDocument TryGetEdmx(Type contextType);
    internal T LoadXml(Type contextType, Func`2<XmlReader, T> xmlReaderDelegate);
    public virtual void Save(Type contextType, DbModel model);
    protected virtual string GetFilePath(Type contextType);
    protected virtual bool FileIsValid(Type contextType, string filePath);
}
internal class System.Data.Entity.Infrastructure.DefaultDbProviderFactoryResolver : object {
    public sealed virtual DbProviderFactory ResolveProviderFactory(DbConnection connection);
}
public class System.Data.Entity.Infrastructure.DefaultExecutionStrategy : object {
    public bool RetriesOnFailure { get; }
    public sealed virtual bool get_RetriesOnFailure();
    public sealed virtual void Execute(Action operation);
    public sealed virtual TResult Execute(Func`1<TResult> operation);
    public sealed virtual Task ExecuteAsync(Func`1<Task> operation, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> operation, CancellationToken cancellationToken);
}
public class System.Data.Entity.Infrastructure.DefaultManifestTokenResolver : object {
    private ConcurrentDictionary`2<Tuple`3<Type, string, string>, string> _cachedTokens;
    public sealed virtual string ResolveManifestToken(DbConnection connection);
}
internal class System.Data.Entity.Infrastructure.DefaultTransactionHandler : TransactionHandler {
    public virtual string BuildDatabaseInitializationScript();
    public virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.AppConfigDependencyResolver : object {
    private AppConfig _appConfig;
    private InternalConfiguration _internalConfiguration;
    private ConcurrentDictionary`2<Tuple`2<Type, object>, Func`1<object>> _serviceFactories;
    private ConcurrentDictionary`2<Tuple`2<Type, object>, IEnumerable`1<Func`1<object>>> _servicesFactories;
    private Dictionary`2<string, DbProviderServices> _providerFactories;
    private bool _providersRegistered;
    private ProviderServicesFactory _providerServicesFactory;
    public AppConfigDependencyResolver(AppConfig appConfig, InternalConfiguration internalConfiguration, ProviderServicesFactory providerServicesFactory);
    public virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
    public virtual IEnumerable`1<Func`1<object>> GetServicesFactory(Type type, object key);
    public virtual Func`1<object> GetServiceFactory(Type type, string name);
    private void RegisterDbProviderServices();
    private void RegisterSqlServerProvider();
    [CompilerGeneratedAttribute]
private void <RegisterDbProviderServices>b__13_1(NamedDbProviderService p);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.CachingDependencyResolver : object {
    private IDbDependencyResolver _underlyingResolver;
    private ConcurrentDictionary`2<Tuple`2<Type, object>, object> _resolvedDependencies;
    private ConcurrentDictionary`2<Tuple`2<Type, object>, IEnumerable`1<object>> _resolvedAllDependencies;
    public CachingDependencyResolver(IDbDependencyResolver underlyingResolver);
    public virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.ClrTypeAnnotationSerializer : object {
    public sealed virtual string Serialize(string name, object value);
    public sealed virtual object Deserialize(string name, string value);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.CompositeResolver`2 : object {
    private TFirst _firstResolver;
    private TSecond _secondResolver;
    public TFirst First { get; }
    public TSecond Second { get; }
    public CompositeResolver`2(TFirst firstResolver, TSecond secondResolver);
    public TFirst get_First();
    public TSecond get_Second();
    public virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DatabaseInitializerResolver : object {
    private ConcurrentDictionary`2<Type, object> _initializers;
    public virtual object GetService(Type type, object key);
    public virtual void SetInitializer(Type contextType, object initializer);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationFinder : object {
    public virtual Type TryFindConfigurationType(Type contextType, IEnumerable`1<Type> typesToSearch);
    public virtual Type TryFindConfigurationType(Assembly assemblyHint, Type contextTypeHint, IEnumerable`1<Type> typesToSearch);
    public virtual Type TryFindContextType(Assembly assemblyHint, Type contextTypeHint, IEnumerable`1<Type> typesToSearch);
}
public class System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs : EventArgs {
    private InternalConfiguration _internalConfiguration;
    public IDbDependencyResolver DependencyResolver { get; }
    internal DbConfigurationLoadedEventArgs(InternalConfiguration configuration);
    public IDbDependencyResolver get_DependencyResolver();
    public void AddDependencyResolver(IDbDependencyResolver resolver, bool overrideConfigFile);
    public void AddDefaultResolver(IDbDependencyResolver resolver);
    public void ReplaceService(Func`3<TService, object, TService> serviceInterceptor);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoader : object {
    public virtual Type TryLoadFromConfig(AppConfig config);
    public virtual bool AppConfigContainsDbConfigurationType(AppConfig config);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationManager : object {
    private static DbConfigurationManager _configManager;
    private EventHandler`1<DbConfigurationLoadedEventArgs> _loadedHandler;
    private DbConfigurationLoader _loader;
    private DbConfigurationFinder _finder;
    private Lazy`1<InternalConfiguration> _configuration;
    private DbConfiguration modreq(System.Runtime.CompilerServices.IsVolatile) _newConfiguration;
    private Type modreq(System.Runtime.CompilerServices.IsVolatile) _newConfigurationType;
    private object _lock;
    private ConcurrentDictionary`2<Assembly, object> _knownAssemblies;
    private Lazy`1<List`1<Tuple`2<AppConfig, InternalConfiguration>>> _configurationOverrides;
    public static DbConfigurationManager Instance { get; }
    private bool ConfigurationSet { get; }
    public DbConfigurationManager(DbConfigurationLoader loader, DbConfigurationFinder finder);
    private static DbConfigurationManager();
    public static DbConfigurationManager get_Instance();
    public virtual void AddLoadedHandler(EventHandler`1<DbConfigurationLoadedEventArgs> handler);
    public virtual void RemoveLoadedHandler(EventHandler`1<DbConfigurationLoadedEventArgs> handler);
    public virtual void OnLoaded(InternalConfiguration configuration);
    public virtual InternalConfiguration GetConfiguration();
    public virtual void SetConfigurationType(Type configurationType);
    public virtual void SetConfiguration(InternalConfiguration configuration);
    public virtual void EnsureLoadedForContext(Type contextType);
    public virtual void EnsureLoadedForAssembly(Assembly assemblyHint, Type contextTypeHint);
    private bool get_ConfigurationSet();
    public virtual bool PushConfiguration(AppConfig config, Type contextType);
    public virtual void PopConfiguration(AppConfig config);
    [CompilerGeneratedAttribute]
private InternalConfiguration <.ctor>b__10_0();
}
[ExtensionAttribute]
public static class System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions : object {
    [ExtensionAttribute]
public static T GetService(IDbDependencyResolver resolver, object key);
    [ExtensionAttribute]
public static T GetService(IDbDependencyResolver resolver);
    [ExtensionAttribute]
public static object GetService(IDbDependencyResolver resolver, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IDbDependencyResolver resolver, object key);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IDbDependencyResolver resolver);
    [ExtensionAttribute]
public static IEnumerable`1<object> GetServices(IDbDependencyResolver resolver, Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<object> GetServiceAsServices(IDbDependencyResolver resolver, Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DefaultExecutionStrategyResolver : object {
    public sealed virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DefaultInvariantNameResolver : object {
    public virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DefaultProviderFactoryResolver : object {
    public virtual object GetService(Type type, object key);
    private static object GetService(Type type, object key, Func`3<ArgumentException, string, object> handleFailedLookup);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.DefaultProviderServicesResolver : object {
    public virtual object GetService(Type type, object key);
    private static string CheckKey(object key);
    public virtual IEnumerable`1<object> GetServices(Type type, object key);
}
public class System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1 : object {
    private Func`1<T> _getExecutionStrategy;
    private string _providerInvariantName;
    private string _serverName;
    public ExecutionStrategyResolver`1(string providerInvariantName, string serverName, Func`1<T> getExecutionStrategy);
    public sealed virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
public interface System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver {
    public abstract virtual object GetService(Type type, object key);
    public abstract virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.InternalConfiguration : object {
    private CompositeResolver`2<ResolverChain, ResolverChain> _resolvers;
    private RootDependencyResolver _rootResolver;
    private Func`1<DbDispatchers> _dispatchers;
    private bool _isLocked;
    [CompilerGeneratedAttribute]
private DbConfiguration <Owner>k__BackingField;
    public static InternalConfiguration Instance { get; public set; }
    public IDbDependencyResolver DependencyResolver { get; }
    public RootDependencyResolver RootResolver { get; }
    public IDbDependencyResolver ResolverSnapshot { get; }
    public DbConfiguration Owner { get; public set; }
    public InternalConfiguration(ResolverChain appConfigChain, ResolverChain normalResolverChain, RootDependencyResolver rootResolver, AppConfigDependencyResolver appConfigResolver, Func`1<DbDispatchers> dispatchers);
    public static InternalConfiguration get_Instance();
    public static void set_Instance(InternalConfiguration value);
    public virtual void Lock();
    public void DispatchLoadedInterceptors(DbConfigurationLoadedEventArgs loadedEventArgs);
    public virtual void AddAppConfigResolver(IDbDependencyResolver resolver);
    public virtual void AddDependencyResolver(IDbDependencyResolver resolver, bool overrideConfigFile);
    public virtual void AddDefaultResolver(IDbDependencyResolver resolver);
    public virtual void SetDefaultProviderServices(DbProviderServices provider, string invariantName);
    public virtual void RegisterSingleton(TService instance);
    public virtual void RegisterSingleton(TService instance, object key);
    public virtual void RegisterSingleton(TService instance, Func`2<object, bool> keyPredicate);
    public virtual TService GetService(object key);
    public virtual IDbDependencyResolver get_DependencyResolver();
    public virtual RootDependencyResolver get_RootResolver();
    public virtual void SwitchInRootResolver(RootDependencyResolver value);
    public virtual IDbDependencyResolver get_ResolverSnapshot();
    [CompilerGeneratedAttribute]
public virtual DbConfiguration get_Owner();
    [CompilerGeneratedAttribute]
public virtual void set_Owner(DbConfiguration value);
    public virtual void CheckNotLocked(string memberName);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.InvariantNameResolver : object {
    private IProviderInvariantName _invariantName;
    private Type _providerFactoryType;
    public InvariantNameResolver(DbProviderFactory providerFactory, string invariantName);
    public virtual object GetService(Type type, object key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.NamedDbProviderService : object {
    private string _invariantName;
    private DbProviderServices _providerServices;
    public string InvariantName { get; }
    public DbProviderServices ProviderServices { get; }
    public NamedDbProviderService(string invariantName, DbProviderServices providerServices);
    public string get_InvariantName();
    public DbProviderServices get_ProviderServices();
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.ProviderServicesFactory : object {
    public virtual DbProviderServices TryGetInstance(string providerTypeName);
    public virtual DbProviderServices GetInstance(string providerTypeName, string providerInvariantName);
    private static DbProviderServices GetInstance(Type providerType);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.ResolverChain : object {
    private ConcurrentStack`1<IDbDependencyResolver> _resolvers;
    private IDbDependencyResolver[] modreq(System.Runtime.CompilerServices.IsVolatile) _resolversSnapshot;
    public IEnumerable`1<IDbDependencyResolver> Resolvers { get; }
    public virtual void Add(IDbDependencyResolver resolver);
    public virtual IEnumerable`1<IDbDependencyResolver> get_Resolvers();
    public virtual object GetService(Type type, object key);
    public virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.RootDependencyResolver : object {
    private ResolverChain _defaultProviderResolvers;
    private ResolverChain _defaultResolvers;
    private ResolverChain _resolvers;
    private DatabaseInitializerResolver _databaseInitializerResolver;
    public DatabaseInitializerResolver DatabaseInitializerResolver { get; }
    public RootDependencyResolver(DefaultProviderServicesResolver defaultProviderServicesResolver, DatabaseInitializerResolver databaseInitializerResolver);
    public DatabaseInitializerResolver get_DatabaseInitializerResolver();
    public virtual object GetService(Type type, object key);
    public virtual void AddDefaultResolver(IDbDependencyResolver resolver);
    public virtual void SetDefaultProviderServices(DbProviderServices provider, string invariantName);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
public class System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1 : object {
    private T _singletonInstance;
    private Func`2<object, bool> _keyPredicate;
    public SingletonDependencyResolver`1(T singletonInstance);
    public SingletonDependencyResolver`1(T singletonInstance, object key);
    public SingletonDependencyResolver`1(T singletonInstance, Func`2<object, bool> keyPredicate);
    public sealed virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.TransactionContextInitializerResolver : object {
    private ConcurrentDictionary`2<Type, object> _initializers;
    public sealed virtual object GetService(Type type, object key);
    private object CreateInitializerInstance(Type type);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
public class System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver : object {
    private Func`1<TransactionHandler> _transactionHandlerFactory;
    private string _providerInvariantName;
    private string _serverName;
    public TransactionHandlerResolver(Func`1<TransactionHandler> transactionHandlerFactory, string providerInvariantName, string serverName);
    public sealed virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.Infrastructure.DependencyResolution.WrappingDependencyResolver`1 : object {
    private IDbDependencyResolver _snapshot;
    private Func`3<TService, object, TService> _serviceWrapper;
    public WrappingDependencyResolver`1(IDbDependencyResolver snapshot, Func`3<TService, object, TService> serviceWrapper);
    public sealed virtual object GetService(Type type, object key);
    public sealed virtual IEnumerable`1<object> GetServices(Type type, object key);
}
public class System.Data.Entity.Infrastructure.Design.AppConfigReader : object {
    private Configuration _configuration;
    public AppConfigReader(Configuration configuration);
    public string GetProviderServices(string invariantName);
}
public class System.Data.Entity.Infrastructure.Design.Executor : MarshalByRefObject {
    private Assembly _assembly;
    private Reporter _reporter;
    private string _language;
    private string _rootNamespace;
    public Executor(string assemblyFile, IDictionary`2<string, object> anonymousArguments);
    private Assembly LoadAssembly(string assemblyName);
    private string GetContextTypeInternal(string contextTypeName, string contextAssemblyName);
    internal virtual string GetProviderServicesInternal(string invariantName);
    private void OverrideConfiguration(DbMigrationsConfiguration configuration, DbConnectionInfo connectionInfo, bool force);
    private MigrationScaffolder CreateMigrationScaffolder(DbMigrationsConfiguration configuration);
    private static IDictionary ToHashtable(ScaffoldedMigration result);
    internal virtual IDictionary ScaffoldInitialCreateInternal(DbConnectionInfo connectionInfo, string contextTypeName, string contextAssemblyName, string migrationsNamespace, bool auto, string migrationsDir);
    private DbMigrationsConfiguration GetMigrationsConfiguration(string migrationsConfigurationName);
    internal virtual IDictionary ScaffoldInternal(string name, DbConnectionInfo connectionInfo, string migrationsConfigurationName, bool ignoreChanges);
    internal IEnumerable`1<string> GetDatabaseMigrationsInternal(DbConnectionInfo connectionInfo, string migrationsConfigurationName);
    internal string ScriptUpdateInternal(string sourceMigration, string targetMigration, bool force, DbConnectionInfo connectionInfo, string migrationsConfigurationName);
    internal void UpdateInternal(string targetMigration, bool force, DbConnectionInfo connectionInfo, string migrationsConfigurationName);
    private MigratorBase CreateMigrator(DbMigrationsConfiguration configuration);
}
internal class System.Data.Entity.Infrastructure.Design.ForwardingProxy`1 : RealProxy {
    private MarshalByRefObject _target;
    public ForwardingProxy`1(object target);
    public virtual IMessage Invoke(IMessage msg);
    public T GetTransparentProxy();
}
public abstract class System.Data.Entity.Infrastructure.Design.HandlerBase : MarshalByRefObject {
    public virtual bool ImplementsContract(string interfaceName);
}
public interface System.Data.Entity.Infrastructure.Design.IReportHandler {
    public abstract virtual void OnError(string message);
    public abstract virtual void OnWarning(string message);
    public abstract virtual void OnInformation(string message);
    public abstract virtual void OnVerbose(string message);
}
public interface System.Data.Entity.Infrastructure.Design.IResultHandler {
    public abstract virtual void SetResult(object value);
}
public interface System.Data.Entity.Infrastructure.Design.IResultHandler2 {
    public abstract virtual void SetError(string type, string message, string stackTrace);
}
internal class System.Data.Entity.Infrastructure.Design.Reporter : object {
    private IReportHandler _handler;
    public Reporter(IReportHandler handler);
    public void WriteError(string message);
    public void WriteWarning(string message);
    public void WriteInformation(string message);
    public void WriteVerbose(string message);
}
public class System.Data.Entity.Infrastructure.Design.ReportHandler : HandlerBase {
    private Action`1<string> _errorHandler;
    private Action`1<string> _warningHandler;
    private Action`1<string> _informationHandler;
    private Action`1<string> _verboseHandler;
    public ReportHandler(Action`1<string> errorHandler, Action`1<string> warningHandler, Action`1<string> informationHandler, Action`1<string> verboseHandler);
    public virtual void OnError(string message);
    public virtual void OnWarning(string message);
    public virtual void OnInformation(string message);
    public virtual void OnVerbose(string message);
}
public class System.Data.Entity.Infrastructure.Design.ResultHandler : HandlerBase {
    private bool _hasResult;
    private object _result;
    private string _errorType;
    private string _errorMessage;
    private string _errorStackTrace;
    public bool HasResult { get; }
    public object Result { get; }
    public string ErrorType { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public virtual bool get_HasResult();
    public virtual object get_Result();
    public virtual string get_ErrorType();
    public virtual string get_ErrorMessage();
    public virtual string get_ErrorStackTrace();
    public virtual void SetResult(object value);
    public virtual void SetError(string type, string message, string stackTrace);
}
internal class System.Data.Entity.Infrastructure.Design.WrappedReportHandler : object {
    private IReportHandler _handler;
    public WrappedReportHandler(object handler);
    public sealed virtual void OnError(string message);
    public sealed virtual void OnInformation(string message);
    public sealed virtual void OnVerbose(string message);
    public sealed virtual void OnWarning(string message);
}
internal class System.Data.Entity.Infrastructure.Design.WrappedResultHandler : object {
    private IResultHandler _handler;
    private IResultHandler2 _handler2;
    public WrappedResultHandler(object handler);
    public sealed virtual void SetResult(object value);
    public bool SetError(string type, string message, string stackTrace);
}
[ObsoleteAttribute("EdmMetadata is no longer used. The Code First Migrations <see cref="EdmModelDiffer" /> is used instead.")]
public class System.Data.Entity.Infrastructure.EdmMetadata : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelHash>k__BackingField;
    public int Id { get; public set; }
    public string ModelHash { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_ModelHash();
    [CompilerGeneratedAttribute]
public void set_ModelHash(string value);
    public static string TryGetModelHash(DbContext context);
}
public static class System.Data.Entity.Infrastructure.EdmxReader : object {
    public static DbCompiledModel Read(XmlReader reader, string defaultSchema);
}
public static class System.Data.Entity.Infrastructure.EdmxWriter : object {
    public static void WriteEdmx(DbContext context, XmlWriter writer);
    public static void WriteEdmx(DbModel model, XmlWriter writer);
}
public class System.Data.Entity.Infrastructure.ExecutionStrategyKey : object {
    [CompilerGeneratedAttribute]
private string <ProviderInvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    public string ProviderInvariantName { get; private set; }
    public string ServerName { get; private set; }
    public ExecutionStrategyKey(string providerInvariantName, string serverName);
    [CompilerGeneratedAttribute]
public string get_ProviderInvariantName();
    [CompilerGeneratedAttribute]
private void set_ProviderInvariantName(string value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface System.Data.Entity.Infrastructure.IDbAsyncEnumerable {
    public abstract virtual IDbAsyncEnumerator GetAsyncEnumerator();
}
public interface System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1 {
    public abstract virtual IDbAsyncEnumerator`1<T> GetAsyncEnumerator();
}
[ExtensionAttribute]
internal static class System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions : object {
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ForEachAsync>d__0")]
[ExtensionAttribute]
internal static Task ForEachAsync(IDbAsyncEnumerable source, Action`1<object> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ForEachAsync(IDbAsyncEnumerable`1<T> source, Action`1<T> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ForEachAsync>d__2`1")]
private static Task ForEachAsync(IDbAsyncEnumerator`1<T> enumerator, Action`1<T> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ToListAsync(IDbAsyncEnumerable source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ToListAsync>d__4`1")]
[ExtensionAttribute]
internal static Task`1<List`1<T>> ToListAsync(IDbAsyncEnumerable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ToListAsync(IDbAsyncEnumerable`1<T> source);
    [ExtensionAttribute]
internal static Task`1<List`1<T>> ToListAsync(IDbAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<T[]> ToArrayAsync(IDbAsyncEnumerable`1<T> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ToArrayAsync>d__8`1")]
[ExtensionAttribute]
internal static Task`1<T[]> ToArrayAsync(IDbAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ToDictionaryAsync>d__16`3")]
[ExtensionAttribute]
internal static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static IDbAsyncEnumerable`1<TResult> Cast(IDbAsyncEnumerable source);
    [ExtensionAttribute]
internal static Task`1<TSource> FirstAsync(IDbAsyncEnumerable`1<TSource> source);
    [ExtensionAttribute]
internal static Task`1<TSource> FirstAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<FirstAsync>d__20`1")]
[ExtensionAttribute]
internal static Task`1<TSource> FirstAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<FirstAsync>d__21`1")]
[ExtensionAttribute]
internal static Task`1<TSource> FirstAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> FirstOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source);
    [ExtensionAttribute]
internal static Task`1<TSource> FirstOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<FirstOrDefaultAsync>d__24`1")]
[ExtensionAttribute]
internal static Task`1<TSource> FirstOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<FirstOrDefaultAsync>d__25`1")]
[ExtensionAttribute]
internal static Task`1<TSource> FirstOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> SingleAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SingleAsync>d__27`1")]
[ExtensionAttribute]
internal static Task`1<TSource> SingleAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> SingleAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SingleAsync>d__29`1")]
[ExtensionAttribute]
internal static Task`1<TSource> SingleAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> SingleOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SingleOrDefaultAsync>d__31`1")]
[ExtensionAttribute]
internal static Task`1<TSource> SingleOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> SingleOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SingleOrDefaultAsync>d__33`1")]
[ExtensionAttribute]
internal static Task`1<TSource> SingleOrDefaultAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<bool> ContainsAsync(IDbAsyncEnumerable`1<TSource> source, TSource value);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<ContainsAsync>d__35`1")]
[ExtensionAttribute]
internal static Task`1<bool> ContainsAsync(IDbAsyncEnumerable`1<TSource> source, TSource value, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<bool> AnyAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AnyAsync>d__37`1")]
[ExtensionAttribute]
internal static Task`1<bool> AnyAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<bool> AnyAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AnyAsync>d__39`1")]
[ExtensionAttribute]
internal static Task`1<bool> AnyAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<bool> AllAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AllAsync>d__41`1")]
[ExtensionAttribute]
internal static Task`1<bool> AllAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> CountAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<CountAsync>d__43`1")]
[ExtensionAttribute]
internal static Task`1<int> CountAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> CountAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<CountAsync>d__45`1")]
[ExtensionAttribute]
internal static Task`1<int> CountAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<long> LongCountAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<LongCountAsync>d__47`1")]
[ExtensionAttribute]
internal static Task`1<long> LongCountAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<long> LongCountAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<LongCountAsync>d__49`1")]
[ExtensionAttribute]
internal static Task`1<long> LongCountAsync(IDbAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> MinAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<MinAsync>d__51`1")]
[ExtensionAttribute]
internal static Task`1<TSource> MinAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<TSource> MaxAsync(IDbAsyncEnumerable`1<TSource> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<MaxAsync>d__53`1")]
[ExtensionAttribute]
internal static Task`1<TSource> MaxAsync(IDbAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> SumAsync(IDbAsyncEnumerable`1<int> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__55")]
[ExtensionAttribute]
internal static Task`1<int> SumAsync(IDbAsyncEnumerable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<int>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<int>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__57")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<int>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<long> SumAsync(IDbAsyncEnumerable`1<long> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__59")]
[ExtensionAttribute]
internal static Task`1<long> SumAsync(IDbAsyncEnumerable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<long>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<long>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__61")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<long>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<float> SumAsync(IDbAsyncEnumerable`1<float> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__63")]
[ExtensionAttribute]
internal static Task`1<float> SumAsync(IDbAsyncEnumerable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<float>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<float>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__65")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<float>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<double> SumAsync(IDbAsyncEnumerable`1<double> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__67")]
[ExtensionAttribute]
internal static Task`1<double> SumAsync(IDbAsyncEnumerable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<double>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<double>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__69")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<double>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<decimal> SumAsync(IDbAsyncEnumerable`1<decimal> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__71")]
[ExtensionAttribute]
internal static Task`1<decimal> SumAsync(IDbAsyncEnumerable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<decimal>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<decimal>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<SumAsync>d__73")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<decimal>> SumAsync(IDbAsyncEnumerable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<int> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__75")]
[ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<int>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__77")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<long> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__79")]
[ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<long>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__81")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<float> AverageAsync(IDbAsyncEnumerable`1<float> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__83")]
[ExtensionAttribute]
internal static Task`1<float> AverageAsync(IDbAsyncEnumerable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<float>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<float>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__85")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<float>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<double> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__87")]
[ExtensionAttribute]
internal static Task`1<double> AverageAsync(IDbAsyncEnumerable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<double>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__89")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<double>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<decimal> AverageAsync(IDbAsyncEnumerable`1<decimal> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__91")]
[ExtensionAttribute]
internal static Task`1<decimal> AverageAsync(IDbAsyncEnumerable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Nullable`1<decimal>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<decimal>> source);
    [AsyncStateMachineAttribute("System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions/<AverageAsync>d__93")]
[ExtensionAttribute]
internal static Task`1<Nullable`1<decimal>> AverageAsync(IDbAsyncEnumerable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
}
public interface System.Data.Entity.Infrastructure.IDbAsyncEnumerator {
    public object Current { get; }
    public abstract virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public abstract virtual object get_Current();
}
public interface System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
}
[ExtensionAttribute]
internal static class System.Data.Entity.Infrastructure.IDbAsyncEnumeratorExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> MoveNextAsync(IDbAsyncEnumerator enumerator);
    [ExtensionAttribute]
internal static IDbAsyncEnumerator`1<TResult> Cast(IDbAsyncEnumerator source);
}
public interface System.Data.Entity.Infrastructure.IDbAsyncQueryProvider {
    public abstract virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public interface System.Data.Entity.Infrastructure.IDbConnectionFactory {
    public abstract virtual DbConnection CreateConnection(string nameOrConnectionString);
}
public interface System.Data.Entity.Infrastructure.IDbContextFactory`1 {
    public abstract virtual TContext Create();
}
public interface System.Data.Entity.Infrastructure.IDbExecutionStrategy {
    public bool RetriesOnFailure { get; }
    public abstract virtual bool get_RetriesOnFailure();
    public abstract virtual void Execute(Action operation);
    public abstract virtual TResult Execute(Func`1<TResult> operation);
    public abstract virtual Task ExecuteAsync(Func`1<Task> operation, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> operation, CancellationToken cancellationToken);
}
public interface System.Data.Entity.Infrastructure.IDbModelCacheKey {
    public abstract virtual bool Equals(object other);
    public abstract virtual int GetHashCode();
}
public interface System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider {
    public string CacheKey { get; }
    public abstract virtual string get_CacheKey();
}
public interface System.Data.Entity.Infrastructure.IDbProviderFactoryResolver {
    public abstract virtual DbProviderFactory ResolveProviderFactory(DbConnection connection);
}
public interface System.Data.Entity.Infrastructure.IManifestTokenResolver {
    public abstract virtual string ResolveManifestToken(DbConnection connection);
}
public interface System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer {
    public abstract virtual string Serialize(string name, object value);
    public abstract virtual object Deserialize(string name, string value);
}
[ObsoleteAttribute("The IncludeMetadataConvention is no longer used. EdmMetadata is not included in the model. <see cref="EdmModelDiffer" /> is now used to detect changes in the model.")]
public class System.Data.Entity.Infrastructure.IncludeMetadataConvention : Convention {
    internal virtual void Apply(ModelConfiguration modelConfiguration);
}
public class System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext : DbConnectionInterceptionContext`1<DbTransaction> {
    private IsolationLevel _isolationLevel;
    public IsolationLevel IsolationLevel { get; }
    public BeginTransactionInterceptionContext(DbInterceptionContext copyFrom);
    public BeginTransactionInterceptionContext AsAsync();
    public IsolationLevel get_IsolationLevel();
    public BeginTransactionInterceptionContext WithIsolationLevel(IsolationLevel isolationLevel);
    private BeginTransactionInterceptionContext TypedClone();
    protected virtual DbInterceptionContext Clone();
    public BeginTransactionInterceptionContext WithDbContext(DbContext context);
    public BeginTransactionInterceptionContext WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.Infrastructure.Interception.CancelableDbCommandDispatcher : object {
    private InternalDispatcher`1<ICancelableDbCommandInterceptor> _internalDispatcher;
    public InternalDispatcher`1<ICancelableDbCommandInterceptor> InternalDispatcher { get; }
    public InternalDispatcher`1<ICancelableDbCommandInterceptor> get_InternalDispatcher();
    public virtual bool Executing(DbCommand command, DbInterceptionContext interceptionContext);
}
internal class System.Data.Entity.Infrastructure.Interception.CancelableEntityConnectionDispatcher : object {
    private InternalDispatcher`1<ICancelableEntityConnectionInterceptor> _internalDispatcher;
    public InternalDispatcher`1<ICancelableEntityConnectionInterceptor> InternalDispatcher { get; }
    public InternalDispatcher`1<ICancelableEntityConnectionInterceptor> get_InternalDispatcher();
    public virtual bool Opening(EntityConnection entityConnection, DbInterceptionContext interceptionContext);
}
public class System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter : object {
    private static string StopwatchStateKey;
    private WeakReference _context;
    private Action`1<string> _writeAction;
    private Stopwatch _stopwatch;
    protected internal DbContext Context { get; }
    internal Action`1<string> WriteAction { get; }
    [ObsoleteAttribute("This stopwatch can give incorrect times. Use 'GetStopwatch' instead.")]
protected internal Stopwatch Stopwatch { get; }
    public DatabaseLogFormatter(Action`1<string> writeAction);
    public DatabaseLogFormatter(DbContext context, Action`1<string> writeAction);
    protected internal DbContext get_Context();
    internal Action`1<string> get_WriteAction();
    protected virtual void Write(string output);
    protected internal Stopwatch get_Stopwatch();
    protected internal Stopwatch GetStopwatch(DbCommandInterceptionContext interceptionContext);
    private void RestartStopwatch(DbCommandInterceptionContext interceptionContext);
    private void StopStopwatch(DbCommandInterceptionContext interceptionContext);
    public virtual void NonQueryExecuting(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public virtual void NonQueryExecuted(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public virtual void ReaderExecuting(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public virtual void ReaderExecuted(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public virtual void ScalarExecuting(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public virtual void ScalarExecuted(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public virtual void Executing(DbCommand command, DbCommandInterceptionContext`1<TResult> interceptionContext);
    public virtual void Executed(DbCommand command, DbCommandInterceptionContext`1<TResult> interceptionContext);
    public virtual void LogCommand(DbCommand command, DbCommandInterceptionContext`1<TResult> interceptionContext);
    public virtual void LogParameter(DbCommand command, DbCommandInterceptionContext`1<TResult> interceptionContext, DbParameter parameter);
    public virtual void LogResult(DbCommand command, DbCommandInterceptionContext`1<TResult> interceptionContext);
    public virtual void BeginningTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void EnlistingTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public virtual void EnlistedTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public virtual void Opening(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Opened(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Closing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Closed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void ConnectionStringGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringSetting(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringSet(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionTimeoutGetting(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public virtual void ConnectionTimeoutGot(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public virtual void DatabaseGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DatabaseGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DataSourceGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DataSourceGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void Disposing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Disposed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void ServerVersionGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ServerVersionGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void StateGetting(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
    public virtual void StateGot(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
    public virtual void ConnectionGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public virtual void ConnectionGot(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public virtual void IsolationLevelGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public virtual void IsolationLevelGot(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public virtual void Committing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Disposing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Disposed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void RollingBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void RolledBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DatabaseLogger : object {
    private TextWriter _writer;
    private DatabaseLogFormatter _formatter;
    private object _lock;
    public DatabaseLogger(string path);
    public DatabaseLogger(string path, bool append);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void StartLogging();
    public void StopLogging();
    private sealed virtual override void System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded(DbConfigurationLoadedEventArgs loadedEventArgs, DbConfigurationInterceptionContext interceptionContext);
    private void StartLogging(IDbDependencyResolver resolver);
    private void WriteThreadSafe(string value);
}
public class System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher : object {
    private InternalDispatcher`1<IDbCommandInterceptor> _internalDispatcher;
    internal InternalDispatcher`1<IDbCommandInterceptor> InternalDispatcher { get; }
    internal InternalDispatcher`1<IDbCommandInterceptor> get_InternalDispatcher();
    public virtual int NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext);
    public virtual object Scalar(DbCommand command, DbCommandInterceptionContext interceptionContext);
    public virtual DbDataReader Reader(DbCommand command, DbCommandInterceptionContext interceptionContext);
    public virtual Task`1<int> NonQueryAsync(DbCommand command, DbCommandInterceptionContext interceptionContext, CancellationToken cancellationToken);
    public virtual Task`1<object> ScalarAsync(DbCommand command, DbCommandInterceptionContext interceptionContext, CancellationToken cancellationToken);
    public virtual Task`1<DbDataReader> ReaderAsync(DbCommand command, DbCommandInterceptionContext interceptionContext, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext : DbInterceptionContext {
    private CommandBehavior _commandBehavior;
    public CommandBehavior CommandBehavior { get; }
    public DbCommandInterceptionContext(DbInterceptionContext copyFrom);
    public CommandBehavior get_CommandBehavior();
    public DbCommandInterceptionContext WithCommandBehavior(CommandBehavior commandBehavior);
    private DbCommandInterceptionContext TypedClone();
    protected virtual DbInterceptionContext Clone();
    public DbCommandInterceptionContext WithDbContext(DbContext context);
    public DbCommandInterceptionContext WithObjectContext(ObjectContext context);
    public DbCommandInterceptionContext AsAsync();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1 : DbCommandInterceptionContext {
    private InterceptionContextMutableData`1<TResult> _mutableData;
    private InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.MutableData { get; }
    private InterceptionContextMutableData`1<TResult> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<TResult>.MutableData { get; }
    internal InterceptionContextMutableData`1<TResult> MutableData { get; }
    public TResult OriginalResult { get; }
    public TResult Result { get; public set; }
    public bool IsExecutionSuppressed { get; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    public Exception OriginalException { get; }
    public Exception Exception { get; public set; }
    public TaskStatus TaskStatus { get; }
    public DbCommandInterceptionContext`1(DbInterceptionContext copyFrom);
    private sealed virtual override InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.get_MutableData();
    private sealed virtual override InterceptionContextMutableData`1<TResult> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<TResult>.get_MutableData();
    internal InterceptionContextMutableData`1<TResult> get_MutableData();
    public TResult get_OriginalResult();
    public TResult get_Result();
    public void set_Result(TResult value);
    public bool get_IsExecutionSuppressed();
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    public void SuppressExecution();
    public Exception get_OriginalException();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public TaskStatus get_TaskStatus();
    public DbCommandInterceptionContext`1<TResult> AsAsync();
    public DbCommandInterceptionContext`1<TResult> WithCommandBehavior(CommandBehavior commandBehavior);
    protected virtual DbInterceptionContext Clone();
    public DbCommandInterceptionContext`1<TResult> WithDbContext(DbContext context);
    public DbCommandInterceptionContext`1<TResult> WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor : object {
    public virtual void NonQueryExecuting(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public virtual void NonQueryExecuted(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public virtual void ReaderExecuting(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public virtual void ReaderExecuted(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public virtual void ScalarExecuting(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public virtual void ScalarExecuted(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
}
internal class System.Data.Entity.Infrastructure.Interception.DbCommandTreeDispatcher : object {
    private InternalDispatcher`1<IDbCommandTreeInterceptor> _internalDispatcher;
    public InternalDispatcher`1<IDbCommandTreeInterceptor> InternalDispatcher { get; }
    public InternalDispatcher`1<IDbCommandTreeInterceptor> get_InternalDispatcher();
    public virtual DbCommandTree Created(DbCommandTree commandTree, DbInterceptionContext interceptionContext);
}
public class System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext : DbInterceptionContext {
    private InterceptionContextMutableData`1<DbCommandTree> _mutableData;
    internal InterceptionContextMutableData`1<DbCommandTree> MutableData { get; }
    private InterceptionContextMutableData`1<DbCommandTree> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<System.Data.Entity.Core.Common.CommandTrees.DbCommandTree>.MutableData { get; }
    private InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.MutableData { get; }
    public DbCommandTree OriginalResult { get; }
    public DbCommandTree Result { get; public set; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    public DbCommandTreeInterceptionContext(DbInterceptionContext copyFrom);
    internal InterceptionContextMutableData`1<DbCommandTree> get_MutableData();
    private sealed virtual override InterceptionContextMutableData`1<DbCommandTree> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<System.Data.Entity.Core.Common.CommandTrees.DbCommandTree>.get_MutableData();
    private sealed virtual override InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.get_MutableData();
    public DbCommandTree get_OriginalResult();
    public DbCommandTree get_Result();
    public void set_Result(DbCommandTree value);
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    protected virtual DbInterceptionContext Clone();
    public DbCommandTreeInterceptionContext WithDbContext(DbContext context);
    public DbCommandTreeInterceptionContext WithObjectContext(ObjectContext context);
    public DbCommandTreeInterceptionContext AsAsync();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.Infrastructure.Interception.DbConfigurationDispatcher : object {
    private InternalDispatcher`1<IDbConfigurationInterceptor> _internalDispatcher;
    public InternalDispatcher`1<IDbConfigurationInterceptor> InternalDispatcher { get; }
    public InternalDispatcher`1<IDbConfigurationInterceptor> get_InternalDispatcher();
    public virtual void Loaded(DbConfigurationLoadedEventArgs loadedEventArgs, DbInterceptionContext interceptionContext);
}
public class System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext : DbInterceptionContext {
    public DbConfigurationInterceptionContext(DbInterceptionContext copyFrom);
    protected virtual DbInterceptionContext Clone();
    public DbConfigurationInterceptionContext WithDbContext(DbContext context);
    public DbConfigurationInterceptionContext WithObjectContext(ObjectContext context);
    public DbConfigurationInterceptionContext AsAsync();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher : object {
    private InternalDispatcher`1<IDbConnectionInterceptor> _internalDispatcher;
    internal InternalDispatcher`1<IDbConnectionInterceptor> InternalDispatcher { get; }
    internal InternalDispatcher`1<IDbConnectionInterceptor> get_InternalDispatcher();
    public virtual DbTransaction BeginTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void Close(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual void Dispose(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual string GetConnectionString(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual void SetConnectionString(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public virtual int GetConnectionTimeout(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual string GetDatabase(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual string GetDataSource(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual void EnlistTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public virtual void Open(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual Task OpenAsync(DbConnection connection, DbInterceptionContext interceptionContext, CancellationToken cancellationToken);
    public virtual string GetServerVersion(DbConnection connection, DbInterceptionContext interceptionContext);
    public virtual ConnectionState GetState(DbConnection connection, DbInterceptionContext interceptionContext);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext : MutableInterceptionContext {
    public DbConnectionInterceptionContext(DbInterceptionContext copyFrom);
    public DbConnectionInterceptionContext AsAsync();
    public DbConnectionInterceptionContext WithDbContext(DbContext context);
    public DbConnectionInterceptionContext WithObjectContext(ObjectContext context);
    protected virtual DbInterceptionContext Clone();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1 : MutableInterceptionContext`1<TResult> {
    public DbConnectionInterceptionContext`1(DbInterceptionContext copyFrom);
    public DbConnectionInterceptionContext`1<TResult> AsAsync();
    public DbConnectionInterceptionContext`1<TResult> WithDbContext(DbContext context);
    public DbConnectionInterceptionContext`1<TResult> WithObjectContext(ObjectContext context);
    protected virtual DbInterceptionContext Clone();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1 : PropertyInterceptionContext`1<TValue> {
    public DbConnectionPropertyInterceptionContext`1(DbInterceptionContext copyFrom);
    public DbConnectionPropertyInterceptionContext`1<TValue> WithValue(TValue value);
    protected virtual DbInterceptionContext Clone();
    public DbConnectionPropertyInterceptionContext`1<TValue> AsAsync();
    public DbConnectionPropertyInterceptionContext`1<TValue> WithDbContext(DbContext context);
    public DbConnectionPropertyInterceptionContext`1<TValue> WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbDispatchers : object {
    private DbCommandTreeDispatcher _commandTreeDispatcher;
    private DbCommandDispatcher _commandDispatcher;
    private DbTransactionDispatcher _transactionDispatcher;
    private DbConnectionDispatcher _dbConnectionDispatcher;
    private DbConfigurationDispatcher _configurationDispatcher;
    private CancelableEntityConnectionDispatcher _cancelableEntityConnectionDispatcher;
    private CancelableDbCommandDispatcher _cancelableCommandDispatcher;
    internal DbCommandTreeDispatcher CommandTree { get; }
    public DbCommandDispatcher Command { get; }
    public DbTransactionDispatcher Transaction { get; }
    public DbConnectionDispatcher Connection { get; }
    internal DbConfigurationDispatcher Configuration { get; }
    internal CancelableEntityConnectionDispatcher CancelableEntityConnection { get; }
    internal CancelableDbCommandDispatcher CancelableCommand { get; }
    internal virtual DbCommandTreeDispatcher get_CommandTree();
    public virtual DbCommandDispatcher get_Command();
    public virtual DbTransactionDispatcher get_Transaction();
    public virtual DbConnectionDispatcher get_Connection();
    internal virtual DbConfigurationDispatcher get_Configuration();
    internal virtual CancelableEntityConnectionDispatcher get_CancelableEntityConnection();
    internal virtual CancelableDbCommandDispatcher get_CancelableCommand();
    internal virtual void AddInterceptor(IDbInterceptor interceptor);
    internal virtual void RemoveInterceptor(IDbInterceptor interceptor);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public static class System.Data.Entity.Infrastructure.Interception.DbInterception : object {
    private static Lazy`1<DbDispatchers> _dispatchers;
    public static DbDispatchers Dispatch { get; }
    private static DbInterception();
    public static void Add(IDbInterceptor interceptor);
    public static void Remove(IDbInterceptor interceptor);
    public static DbDispatchers get_Dispatch();
}
public class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext : object {
    private IList`1<DbContext> _dbContexts;
    private IList`1<ObjectContext> _objectContexts;
    private bool _isAsync;
    public IEnumerable`1<DbContext> DbContexts { get; }
    public IEnumerable`1<ObjectContext> ObjectContexts { get; }
    public bool IsAsync { get; }
    protected DbInterceptionContext(DbInterceptionContext copyFrom);
    private DbInterceptionContext(IEnumerable`1<DbInterceptionContext> copyFrom);
    public IEnumerable`1<DbContext> get_DbContexts();
    public DbInterceptionContext WithDbContext(DbContext context);
    public IEnumerable`1<ObjectContext> get_ObjectContexts();
    public DbInterceptionContext WithObjectContext(ObjectContext context);
    public bool get_IsAsync();
    public DbInterceptionContext AsAsync();
    protected virtual DbInterceptionContext Clone();
    internal static DbInterceptionContext Combine(IEnumerable`1<DbInterceptionContext> interceptionContexts);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher : object {
    private InternalDispatcher`1<IDbTransactionInterceptor> _internalDispatcher;
    internal InternalDispatcher`1<IDbTransactionInterceptor> InternalDispatcher { get; }
    internal InternalDispatcher`1<IDbTransactionInterceptor> get_InternalDispatcher();
    public virtual DbConnection GetConnection(DbTransaction transaction, DbInterceptionContext interceptionContext);
    public virtual IsolationLevel GetIsolationLevel(DbTransaction transaction, DbInterceptionContext interceptionContext);
    public virtual void Commit(DbTransaction transaction, DbInterceptionContext interceptionContext);
    public virtual void Dispose(DbTransaction transaction, DbInterceptionContext interceptionContext);
    public virtual void Rollback(DbTransaction transaction, DbInterceptionContext interceptionContext);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext : MutableInterceptionContext {
    private DbConnection _connection;
    public DbConnection Connection { get; }
    public DbTransactionInterceptionContext(DbInterceptionContext copyFrom);
    public DbConnection get_Connection();
    public DbTransactionInterceptionContext WithConnection(DbConnection connection);
    public DbTransactionInterceptionContext AsAsync();
    public DbTransactionInterceptionContext WithDbContext(DbContext context);
    public DbTransactionInterceptionContext WithObjectContext(ObjectContext context);
    private DbTransactionInterceptionContext TypedClone();
    protected virtual DbInterceptionContext Clone();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1 : MutableInterceptionContext`1<TResult> {
    public DbTransactionInterceptionContext`1(DbInterceptionContext copyFrom);
    public DbTransactionInterceptionContext`1<TResult> AsAsync();
    public DbTransactionInterceptionContext`1<TResult> WithDbContext(DbContext context);
    public DbTransactionInterceptionContext`1<TResult> WithObjectContext(ObjectContext context);
    protected virtual DbInterceptionContext Clone();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext : DbConnectionInterceptionContext {
    private Transaction _transaction;
    public Transaction Transaction { get; }
    public EnlistTransactionInterceptionContext(DbInterceptionContext copyFrom);
    public EnlistTransactionInterceptionContext AsAsync();
    public Transaction get_Transaction();
    public EnlistTransactionInterceptionContext WithTransaction(Transaction transaction);
    private EnlistTransactionInterceptionContext TypedClone();
    protected virtual DbInterceptionContext Clone();
    public EnlistTransactionInterceptionContext WithDbContext(DbContext context);
    public EnlistTransactionInterceptionContext WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal interface System.Data.Entity.Infrastructure.Interception.ICancelableDbCommandInterceptor {
    public abstract virtual bool CommandExecuting(DbCommand command, DbInterceptionContext interceptionContext);
}
internal interface System.Data.Entity.Infrastructure.Interception.ICancelableEntityConnectionInterceptor {
    public abstract virtual bool ConnectionOpening(EntityConnection connection, DbInterceptionContext interceptionContext);
}
public interface System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor {
    public abstract virtual void NonQueryExecuting(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public abstract virtual void NonQueryExecuted(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public abstract virtual void ReaderExecuting(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public abstract virtual void ReaderExecuted(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public abstract virtual void ScalarExecuting(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public abstract virtual void ScalarExecuted(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
}
public interface System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor {
    public abstract virtual void TreeCreated(DbCommandTreeInterceptionContext interceptionContext);
}
public interface System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor {
    public abstract virtual void Loaded(DbConfigurationLoadedEventArgs loadedEventArgs, DbConfigurationInterceptionContext interceptionContext);
}
public interface System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor {
    public abstract virtual void BeginningTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public abstract virtual void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public abstract virtual void Closing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void Closed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void ConnectionStringGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void ConnectionStringGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void ConnectionStringSetting(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public abstract virtual void ConnectionStringSet(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public abstract virtual void ConnectionTimeoutGetting(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public abstract virtual void ConnectionTimeoutGot(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public abstract virtual void DatabaseGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void DatabaseGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void DataSourceGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void DataSourceGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void Disposing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void Disposed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void EnlistingTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public abstract virtual void EnlistedTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public abstract virtual void Opening(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void Opened(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public abstract virtual void ServerVersionGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void ServerVersionGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public abstract virtual void StateGetting(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
    public abstract virtual void StateGot(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
}
public interface System.Data.Entity.Infrastructure.Interception.IDbInterceptor {
}
internal interface System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext {
    public InterceptionContextMutableData MutableData { get; }
    public abstract virtual InterceptionContextMutableData get_MutableData();
}
internal interface System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext`1 {
    public InterceptionContextMutableData`1<TResult> MutableData { get; }
    public abstract virtual InterceptionContextMutableData`1<TResult> get_MutableData();
}
public interface System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor {
    public abstract virtual void ConnectionGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public abstract virtual void ConnectionGot(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public abstract virtual void IsolationLevelGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public abstract virtual void IsolationLevelGot(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public abstract virtual void Committing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public abstract virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public abstract virtual void Disposing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public abstract virtual void Disposed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public abstract virtual void RollingBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public abstract virtual void RolledBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
}
internal class System.Data.Entity.Infrastructure.Interception.InterceptionContextMutableData : object {
    private static string LegacyUserState;
    private Exception _exception;
    private bool _isSuppressed;
    private IDictionary`2<string, object> _userStateMap;
    [CompilerGeneratedAttribute]
private bool <HasExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <OriginalException>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskStatus <TaskStatus>k__BackingField;
    public bool HasExecuted { get; public set; }
    public Exception OriginalException { get; public set; }
    public TaskStatus TaskStatus { get; public set; }
    private IDictionary`2<string, object> UserStateMap { get; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    public bool IsExecutionSuppressed { get; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasExecuted();
    [CompilerGeneratedAttribute]
public void set_HasExecuted(bool value);
    [CompilerGeneratedAttribute]
public Exception get_OriginalException();
    [CompilerGeneratedAttribute]
public void set_OriginalException(Exception value);
    [CompilerGeneratedAttribute]
public TaskStatus get_TaskStatus();
    [CompilerGeneratedAttribute]
public void set_TaskStatus(TaskStatus value);
    private IDictionary`2<string, object> get_UserStateMap();
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    public bool get_IsExecutionSuppressed();
    public void SuppressExecution();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public void SetExceptionThrown(Exception exception);
}
internal class System.Data.Entity.Infrastructure.Interception.InterceptionContextMutableData`1 : InterceptionContextMutableData {
    private TResult _result;
    [CompilerGeneratedAttribute]
private TResult <OriginalResult>k__BackingField;
    public TResult OriginalResult { get; public set; }
    public TResult Result { get; public set; }
    [CompilerGeneratedAttribute]
public TResult get_OriginalResult();
    [CompilerGeneratedAttribute]
public void set_OriginalResult(TResult value);
    public TResult get_Result();
    public void set_Result(TResult value);
    public void SetExecuted(TResult result);
}
internal class System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1 : object {
    private List`1 modreq(System.Runtime.CompilerServices.IsVolatile) _interceptors;
    private object _lock;
    public void Add(IDbInterceptor interceptor);
    public void Remove(IDbInterceptor interceptor);
    public TResult Dispatch(TResult result, Func`3<TResult, TInterceptor, TResult> accumulator);
    public void Dispatch(Action`1<TInterceptor> action);
    public TResult Dispatch(TResult result, TInterceptionContext interceptionContext, Action`2<TInterceptor, TInterceptionContext> intercept);
    public void Dispatch(TTarget target, Action`2<TTarget, TInterceptionContext> operation, TInterceptionContext interceptionContext, Action`3<TInterceptor, TTarget, TInterceptionContext> executing, Action`3<TInterceptor, TTarget, TInterceptionContext> executed);
    public TResult Dispatch(TTarget target, Func`3<TTarget, TInterceptionContext, TResult> operation, TInterceptionContext interceptionContext, Action`3<TInterceptor, TTarget, TInterceptionContext> executing, Action`3<TInterceptor, TTarget, TInterceptionContext> executed);
    public Task DispatchAsync(TTarget target, Func`4<TTarget, TInterceptionContext, CancellationToken, Task> operation, TInterceptionContext interceptionContext, Action`3<TInterceptor, TTarget, TInterceptionContext> executing, Action`3<TInterceptor, TTarget, TInterceptionContext> executed, CancellationToken cancellationToken);
    public Task`1<TResult> DispatchAsync(TTarget target, Func`4<TTarget, TInterceptionContext, CancellationToken, Task`1<TResult>> operation, TInterceptionContext interceptionContext, Action`3<TInterceptor, TTarget, TInterceptionContext> executing, Action`3<TInterceptor, TTarget, TInterceptionContext> executed, CancellationToken cancellationToken);
}
public abstract class System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext : DbInterceptionContext {
    private InterceptionContextMutableData _mutableData;
    private InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.MutableData { get; }
    internal InterceptionContextMutableData MutableData { get; }
    public bool IsExecutionSuppressed { get; }
    public Exception OriginalException { get; }
    public Exception Exception { get; public set; }
    public TaskStatus TaskStatus { get; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    protected MutableInterceptionContext(DbInterceptionContext copyFrom);
    private sealed virtual override InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.get_MutableData();
    internal InterceptionContextMutableData get_MutableData();
    public bool get_IsExecutionSuppressed();
    public void SuppressExecution();
    public Exception get_OriginalException();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public TaskStatus get_TaskStatus();
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    public MutableInterceptionContext AsAsync();
    public MutableInterceptionContext WithDbContext(DbContext context);
    public MutableInterceptionContext WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1 : DbInterceptionContext {
    private InterceptionContextMutableData`1<TResult> _mutableData;
    private InterceptionContextMutableData`1<TResult> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<TResult>.MutableData { get; }
    private InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.MutableData { get; }
    public TResult OriginalResult { get; }
    public TResult Result { get; public set; }
    public bool IsExecutionSuppressed { get; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    public Exception OriginalException { get; }
    public Exception Exception { get; public set; }
    public TaskStatus TaskStatus { get; }
    protected MutableInterceptionContext`1(DbInterceptionContext copyFrom);
    private sealed virtual override InterceptionContextMutableData`1<TResult> System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext<TResult>.get_MutableData();
    private sealed virtual override InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.get_MutableData();
    public TResult get_OriginalResult();
    public TResult get_Result();
    public void set_Result(TResult value);
    public bool get_IsExecutionSuppressed();
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    public void SuppressExecution();
    public Exception get_OriginalException();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public TaskStatus get_TaskStatus();
    public MutableInterceptionContext`1<TResult> AsAsync();
    public MutableInterceptionContext`1<TResult> WithDbContext(DbContext context);
    public MutableInterceptionContext`1<TResult> WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1 : DbInterceptionContext {
    private InterceptionContextMutableData _mutableData;
    private TValue _value;
    private InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.MutableData { get; }
    public TValue Value { get; }
    [ObsoleteAttribute("Not safe when multiple interceptors are in use. Use SetUserState and FindUserState instead.")]
public object UserState { get; public set; }
    public bool IsExecutionSuppressed { get; }
    public Exception OriginalException { get; }
    public Exception Exception { get; public set; }
    public TaskStatus TaskStatus { get; }
    public PropertyInterceptionContext`1(DbInterceptionContext copyFrom);
    private sealed virtual override InterceptionContextMutableData System.Data.Entity.Infrastructure.Interception.IDbMutableInterceptionContext.get_MutableData();
    public TValue get_Value();
    public object get_UserState();
    public void set_UserState(object value);
    public object FindUserState(string key);
    public void SetUserState(string key, object value);
    public PropertyInterceptionContext`1<TValue> WithValue(TValue value);
    private PropertyInterceptionContext`1<TValue> TypedClone();
    protected virtual DbInterceptionContext Clone();
    public bool get_IsExecutionSuppressed();
    public void SuppressExecution();
    public Exception get_OriginalException();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public TaskStatus get_TaskStatus();
    public PropertyInterceptionContext`1<TValue> AsAsync();
    public PropertyInterceptionContext`1<TValue> WithDbContext(DbContext context);
    public PropertyInterceptionContext`1<TValue> WithObjectContext(ObjectContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public interface System.Data.Entity.Infrastructure.IObjectContextAdapter {
    public ObjectContext ObjectContext { get; }
    public abstract virtual ObjectContext get_ObjectContext();
}
public interface System.Data.Entity.Infrastructure.IProviderInvariantName {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public class System.Data.Entity.Infrastructure.LocalDbConnectionFactory : object {
    private string _baseConnectionString;
    private string _localDbVersion;
    public string BaseConnectionString { get; }
    public LocalDbConnectionFactory(string localDbVersion);
    public LocalDbConnectionFactory(string localDbVersion, string baseConnectionString);
    public string get_BaseConnectionString();
    public sealed virtual DbConnection CreateConnection(string nameOrConnectionString);
}
public class System.Data.Entity.Infrastructure.MappingViews.DbMappingView : object {
    private string _entitySql;
    public string EntitySql { get; }
    public DbMappingView(string entitySql);
    public string get_EntitySql();
}
public abstract class System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache : object {
    public string MappingHashValue { get; }
    public abstract virtual string get_MappingHashValue();
    public abstract virtual DbMappingView GetView(EntitySetBase extent);
}
public abstract class System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory : object {
    public abstract virtual DbMappingViewCache Create(string conceptualModelContainerName, string storeModelContainerName);
    internal DbMappingViewCache Create(EntityContainerMapping mapping);
}
[AttributeUsageAttribute("1")]
public class System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute : Attribute {
    private Type _contextType;
    private Type _cacheType;
    internal Type ContextType { get; }
    internal Type CacheType { get; }
    public DbMappingViewCacheTypeAttribute(Type contextType, Type cacheType);
    public DbMappingViewCacheTypeAttribute(Type contextType, string cacheTypeName);
    internal Type get_ContextType();
    internal Type get_CacheType();
}
internal class System.Data.Entity.Infrastructure.MappingViews.DefaultDbMappingViewCacheFactory : DbMappingViewCacheFactory {
    private Type _cacheType;
    public DefaultDbMappingViewCacheFactory(Type cacheType);
    public virtual DbMappingViewCache Create(string conceptualModelContainerName, string storeModelContainerName);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class System.Data.Entity.Infrastructure.ModelContainerConvention : object {
    private string _containerName;
    internal ModelContainerConvention(string containerName);
    public virtual void Apply(EntityContainer item, DbModel model);
}
public class System.Data.Entity.Infrastructure.ModelNamespaceConvention : Convention {
    private string _modelNamespace;
    internal ModelNamespaceConvention(string modelNamespace);
    internal virtual void ApplyModelConfiguration(ModelConfiguration modelConfiguration);
}
internal class System.Data.Entity.Infrastructure.Net40DefaultDbProviderFactoryResolver : object {
    private ConcurrentDictionary`2<Type, DbProviderFactory> _cache;
    private ProviderRowFinder _finder;
    public Net40DefaultDbProviderFactoryResolver(ProviderRowFinder finder);
    public sealed virtual DbProviderFactory ResolveProviderFactory(DbConnection connection);
    public DbProviderFactory GetProviderFactory(DbConnection connection, IEnumerable`1<DataRow> dataRows);
    private static bool ExactMatch(DataRow row, Type connectionType);
    private static bool AssignableMatch(DataRow row, Type connectionType);
}
public class System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer : object {
    private static ObjectReferenceEqualityComparer _default;
    public static ObjectReferenceEqualityComparer Default { get; }
    private static ObjectReferenceEqualityComparer();
    public static ObjectReferenceEqualityComparer get_Default();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
internal class System.Data.Entity.Infrastructure.Pluralization.BidirectionalDictionary`2 : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<TFirst, TSecond> <FirstToSecondDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TSecond, TFirst> <SecondToFirstDictionary>k__BackingField;
    internal Dictionary`2<TFirst, TSecond> FirstToSecondDictionary { get; internal set; }
    internal Dictionary`2<TSecond, TFirst> SecondToFirstDictionary { get; internal set; }
    internal BidirectionalDictionary`2(Dictionary`2<TFirst, TSecond> firstToSecondDictionary);
    [CompilerGeneratedAttribute]
internal Dictionary`2<TFirst, TSecond> get_FirstToSecondDictionary();
    [CompilerGeneratedAttribute]
internal void set_FirstToSecondDictionary(Dictionary`2<TFirst, TSecond> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<TSecond, TFirst> get_SecondToFirstDictionary();
    [CompilerGeneratedAttribute]
internal void set_SecondToFirstDictionary(Dictionary`2<TSecond, TFirst> value);
    internal virtual bool ExistsInFirst(TFirst value);
    internal virtual bool ExistsInSecond(TSecond value);
    internal virtual TSecond GetSecondValue(TFirst value);
    internal virtual TFirst GetFirstValue(TSecond value);
    internal void AddValue(TFirst firstValue, TSecond secondValue);
}
public class System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry : object {
    [CompilerGeneratedAttribute]
private string <Singular>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Plural>k__BackingField;
    public string Singular { get; private set; }
    public string Plural { get; private set; }
    public CustomPluralizationEntry(string singular, string plural);
    [CompilerGeneratedAttribute]
public string get_Singular();
    [CompilerGeneratedAttribute]
private void set_Singular(string value);
    [CompilerGeneratedAttribute]
public string get_Plural();
    [CompilerGeneratedAttribute]
private void set_Plural(string value);
}
public class System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService : object {
    private BidirectionalDictionary`2<string, string> _userDictionary;
    private StringBidirectionalDictionary _irregularPluralsPluralizationService;
    private StringBidirectionalDictionary _assimilatedClassicalInflectionPluralizationService;
    private StringBidirectionalDictionary _oSuffixPluralizationService;
    private StringBidirectionalDictionary _classicalInflectionPluralizationService;
    private StringBidirectionalDictionary _irregularVerbPluralizationService;
    private StringBidirectionalDictionary _wordsEndingWithSePluralizationService;
    private StringBidirectionalDictionary _wordsEndingWithSisPluralizationService;
    private List`1<string> _knownSingluarWords;
    private List`1<string> _knownPluralWords;
    private CultureInfo _culture;
    private String[] _uninflectiveSuffixes;
    private String[] _uninflectiveWords;
    private Dictionary`2<string, string> _irregularVerbList;
    private List`1<string> _pronounList;
    private Dictionary`2<string, string> _irregularPluralsList;
    private Dictionary`2<string, string> _assimilatedClassicalInflectionList;
    private Dictionary`2<string, string> _oSuffixList;
    private Dictionary`2<string, string> _classicalInflectionList;
    private List`1<string> _knownConflictingPluralList;
    private Dictionary`2<string, string> _wordsEndingWithSeList;
    private Dictionary`2<string, string> _wordsEndingWithSisList;
    public EnglishPluralizationService(IEnumerable`1<CustomPluralizationEntry> userDictionaryEntries);
    public sealed virtual string Pluralize(string word);
    private string InternalPluralize(string word);
    public sealed virtual string Singularize(string word);
    private string InternalSingularize(string word);
    private bool IsPlural(string word);
    private static string Capitalize(string word, Func`2<string, string> action);
    private static string GetSuffixWord(string word, String& prefixWord);
    private static bool IsCapitalized(string word);
    private static bool IsAlphabets(string word);
    private bool IsUninflective(string word);
    private bool IsNoOpWord(string word);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_0(CustomPluralizationEntry entry);
    [CompilerGeneratedAttribute]
private string <InternalPluralize>b__25_11(string s);
}
public interface System.Data.Entity.Infrastructure.Pluralization.IPluralizationService {
    public abstract virtual string Pluralize(string word);
    public abstract virtual string Singularize(string word);
}
internal static class System.Data.Entity.Infrastructure.Pluralization.PluralizationServiceUtil : object {
    internal static bool DoesWordContainSuffix(string word, IEnumerable`1<string> suffixes, CultureInfo culture);
    internal static bool TryGetMatchedSuffixForWord(string word, IEnumerable`1<string> suffixes, CultureInfo culture, String& matchedSuffix);
    internal static bool TryInflectOnSuffixInWord(string word, IEnumerable`1<string> suffixes, Func`2<string, string> operationOnWord, CultureInfo culture, String& newWord);
}
internal class System.Data.Entity.Infrastructure.ProviderInvariantName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ProviderInvariantName(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1 : object {
    private ObjectQuery`1<TElement> _query;
    public ObjectQuery`1<TElement> Query { get; }
    private ReplacementDbQueryWrapper`1(ObjectQuery`1<TElement> query);
    internal static ReplacementDbQueryWrapper`1<TElement> Create(ObjectQuery query);
    public ObjectQuery`1<TElement> get_Query();
}
public class System.Data.Entity.Infrastructure.RetryLimitExceededException : EntityException {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(string message, Exception innerException);
    private RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Infrastructure.SqlCeConnectionFactory : object {
    private string _databaseDirectory;
    private string _baseConnectionString;
    private string _providerInvariantName;
    public string DatabaseDirectory { get; }
    public string BaseConnectionString { get; }
    public string ProviderInvariantName { get; }
    public SqlCeConnectionFactory(string providerInvariantName);
    public SqlCeConnectionFactory(string providerInvariantName, string databaseDirectory, string baseConnectionString);
    public string get_DatabaseDirectory();
    public string get_BaseConnectionString();
    public string get_ProviderInvariantName();
    public sealed virtual DbConnection CreateConnection(string nameOrConnectionString);
}
public class System.Data.Entity.Infrastructure.SqlConnectionFactory : object {
    private string _baseConnectionString;
    private Func`2<string, DbProviderFactory> _providerFactoryCreator;
    internal Func`2<string, DbProviderFactory> ProviderFactory { get; internal set; }
    public string BaseConnectionString { get; }
    public SqlConnectionFactory(string baseConnectionString);
    internal Func`2<string, DbProviderFactory> get_ProviderFactory();
    internal void set_ProviderFactory(Func`2<string, DbProviderFactory> value);
    public string get_BaseConnectionString();
    public sealed virtual DbConnection CreateConnection(string nameOrConnectionString);
}
[AttributeUsageAttribute("132")]
public class System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute : Attribute {
}
public abstract class System.Data.Entity.Infrastructure.TableExistenceChecker : object {
    public abstract virtual bool AnyModelTableExistsInDatabase(ObjectContext context, DbConnection connection, IEnumerable`1<EntitySet> modelTables, string edmMetadataContextTableName);
    protected virtual string GetTableName(EntitySet modelTable);
}
public class System.Data.Entity.Infrastructure.TransactionContext : DbContext {
    private static string _defaultTableName;
    [CompilerGeneratedAttribute]
private IDbSet`1<TransactionRow> <Transactions>k__BackingField;
    public IDbSet`1<TransactionRow> Transactions { get; public set; }
    public TransactionContext(DbConnection existingConnection);
    [CompilerGeneratedAttribute]
public virtual IDbSet`1<TransactionRow> get_Transactions();
    [CompilerGeneratedAttribute]
public virtual void set_Transactions(IDbSet`1<TransactionRow> value);
    protected virtual void OnModelCreating(DbModelBuilder modelBuilder);
}
internal class System.Data.Entity.Infrastructure.TransactionContextInitializer`1 : object {
    public sealed virtual void InitializeDatabase(TContext context);
    internal static IEnumerable`1<MigrationStatement> GenerateMigrationStatements(TransactionContext context);
}
public abstract class System.Data.Entity.Infrastructure.TransactionHandler : object {
    private WeakReference _objectContext;
    private WeakReference _dbContext;
    private WeakReference _connection;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public ObjectContext ObjectContext { get; private set; }
    public DbContext DbContext { get; private set; }
    public DbConnection Connection { get; private set; }
    protected bool IsDisposed { get; protected set; }
    public virtual void Initialize(ObjectContext context);
    public virtual void Initialize(DbContext context, DbConnection connection);
    public ObjectContext get_ObjectContext();
    private void set_ObjectContext(ObjectContext value);
    public DbContext get_DbContext();
    private void set_DbContext(DbContext value);
    public DbConnection get_Connection();
    private void set_Connection(DbConnection value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
protected void set_IsDisposed(bool value);
    protected virtual void Dispose(bool disposing);
    protected internal virtual bool MatchesParentContext(DbConnection connection, DbInterceptionContext interceptionContext);
    public abstract virtual string BuildDatabaseInitializationScript();
    public virtual void BeginningTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext);
    public virtual void Closing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Closed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void ConnectionStringGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringSetting(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionStringSet(DbConnection connection, DbConnectionPropertyInterceptionContext`1<string> interceptionContext);
    public virtual void ConnectionTimeoutGetting(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public virtual void ConnectionTimeoutGot(DbConnection connection, DbConnectionInterceptionContext`1<int> interceptionContext);
    public virtual void DatabaseGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DatabaseGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DataSourceGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void DataSourceGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void Disposing(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Disposed(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void EnlistingTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public virtual void EnlistedTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext);
    public virtual void Opening(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void Opened(DbConnection connection, DbConnectionInterceptionContext interceptionContext);
    public virtual void ServerVersionGetting(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void ServerVersionGot(DbConnection connection, DbConnectionInterceptionContext`1<string> interceptionContext);
    public virtual void StateGetting(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
    public virtual void StateGot(DbConnection connection, DbConnectionInterceptionContext`1<ConnectionState> interceptionContext);
    public virtual void ConnectionGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public virtual void ConnectionGot(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public virtual void IsolationLevelGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public virtual void IsolationLevelGot(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public virtual void Committing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Disposing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void Disposed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void RollingBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public virtual void RolledBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
}
public class System.Data.Entity.Infrastructure.TransactionRow : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public Guid Id { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Data.Entity.Infrastructure.UnintentionalCodeFirstException : InvalidOperationException {
    protected UnintentionalCodeFirstException(SerializationInfo info, StreamingContext context);
    public UnintentionalCodeFirstException(string message);
    public UnintentionalCodeFirstException(string message, Exception innerException);
}
internal class System.Data.Entity.Internal.AppConfig : object {
    public static string EFSectionName;
    private static AppConfig _defaultInstance;
    private KeyValueConfigurationCollection _appSettings;
    private ConnectionStringSettingsCollection _connectionStrings;
    private EntityFrameworkSection _entityFrameworkSettings;
    private Lazy`1<IDbConnectionFactory> _defaultConnectionFactory;
    private Lazy`1<IDbConnectionFactory> _defaultDefaultConnectionFactory;
    private ProviderServicesFactory _providerServicesFactory;
    private Lazy`1<IList`1<NamedDbProviderService>> _providerServices;
    public static AppConfig DefaultInstance { get; }
    public ContextConfig ContextConfigs { get; }
    public InitializerConfig Initializers { get; }
    public string ConfigurationTypeName { get; }
    public IList`1<NamedDbProviderService> DbProviderServices { get; }
    public IEnumerable`1<IDbInterceptor> Interceptors { get; }
    public QueryCacheConfig QueryCache { get; }
    public AppConfig(Configuration configuration);
    public AppConfig(ConnectionStringSettingsCollection connectionStrings);
    internal AppConfig(ConnectionStringSettingsCollection connectionStrings, KeyValueConfigurationCollection appSettings, EntityFrameworkSection entityFrameworkSettings, ProviderServicesFactory providerServicesFactory);
    private static AppConfig();
    public virtual IDbConnectionFactory TryGetDefaultConnectionFactory();
    public ConnectionStringSettings GetConnectionString(string name);
    public static AppConfig get_DefaultInstance();
    private static KeyValueConfigurationCollection Convert(NameValueCollection collection);
    public virtual ContextConfig get_ContextConfigs();
    public virtual InitializerConfig get_Initializers();
    public virtual string get_ConfigurationTypeName();
    public virtual IList`1<NamedDbProviderService> get_DbProviderServices();
    public virtual IEnumerable`1<IDbInterceptor> get_Interceptors();
    public virtual QueryCacheConfig get_QueryCache();
    [CompilerGeneratedAttribute]
private IList`1<NamedDbProviderService> <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private NamedDbProviderService <.ctor>b__12_2(ProviderElement e);
    [CompilerGeneratedAttribute]
private IDbConnectionFactory <.ctor>b__12_1();
}
internal class System.Data.Entity.Internal.ClonedObjectContext : object {
    private ObjectContextProxy _objectContext;
    private bool _connectionCloned;
    private EntityConnectionProxy _clonedEntityConnection;
    public ObjectContextProxy ObjectContext { get; }
    public DbConnection Connection { get; }
    public ClonedObjectContext(ObjectContextProxy objectContext, DbConnection connection, string connectionString, bool transferLoadedAssemblies);
    public virtual ObjectContextProxy get_ObjectContext();
    public virtual DbConnection get_Connection();
    private void TransferLoadedAssemblies(ObjectContextProxy source);
    public sealed virtual void Dispose();
}
internal class System.Data.Entity.Internal.ClonedPropertyValues : InternalPropertyValues {
    private ISet`1<string> _propertyNames;
    private IDictionary`2<string, ClonedPropertyValuesItem> _propertyValues;
    public ISet`1<string> PropertyNames { get; }
    internal ClonedPropertyValues(InternalPropertyValues original, DbDataRecord valuesRecord);
    protected virtual IPropertyValuesItem GetItemImpl(string propertyName);
    public virtual ISet`1<string> get_PropertyNames();
}
internal class System.Data.Entity.Internal.ClonedPropertyValuesItem : object {
    private string _name;
    private bool _isComplex;
    private Type _type;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    public string Name { get; }
    public bool IsComplex { get; }
    public Type Type { get; }
    public ClonedPropertyValuesItem(string name, object value, Type type, bool isComplex);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsComplex();
    public sealed virtual Type get_Type();
}
internal class System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace : object {
    private MetadataWorkspace _metadataWorkspace;
    private IEnumerable`1<Assembly> _assemblies;
    private DbProviderInfo _providerInfo;
    private string _defaultContainerName;
    public string DefaultContainerName { get; }
    public IEnumerable`1<Assembly> Assemblies { get; }
    public DbProviderInfo ProviderInfo { get; }
    private CodeFirstCachedMetadataWorkspace(MetadataWorkspace metadataWorkspace, IEnumerable`1<Assembly> assemblies, DbProviderInfo providerInfo, string defaultContainerName);
    public sealed virtual MetadataWorkspace GetMetadataWorkspace(DbConnection connection);
    public sealed virtual string get_DefaultContainerName();
    public sealed virtual IEnumerable`1<Assembly> get_Assemblies();
    public sealed virtual DbProviderInfo get_ProviderInfo();
    public static CodeFirstCachedMetadataWorkspace Create(DbDatabaseMapping databaseMapping);
    public static CodeFirstCachedMetadataWorkspace Create(StorageMappingItemCollection mappingItemCollection, DbProviderInfo providerInfo);
}
internal class System.Data.Entity.Internal.CommandTracer : object {
    private List`1<DbCommand> _commands;
    private List`1<DbCommandTree> _commandTrees;
    private DbContext _context;
    private DbDispatchers _dispatchers;
    public IEnumerable`1<DbCommand> DbCommands { get; }
    public IEnumerable`1<DbCommandTree> CommandTrees { get; }
    public CommandTracer(DbContext context);
    internal CommandTracer(DbContext context, DbDispatchers dispatchers);
    public IEnumerable`1<DbCommand> get_DbCommands();
    public IEnumerable`1<DbCommandTree> get_CommandTrees();
    public sealed virtual bool CommandExecuting(DbCommand command, DbInterceptionContext interceptionContext);
    public sealed virtual void TreeCreated(DbCommandTreeInterceptionContext interceptionContext);
    public sealed virtual bool ConnectionOpening(EntityConnection connection, DbInterceptionContext interceptionContext);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Data.Entity.Internal.ConfigFile.ContextCollection : ConfigurationElementCollection {
    private static string ContextKey;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    protected virtual void BaseAdd(ConfigurationElement element);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
}
internal class System.Data.Entity.Internal.ConfigFile.ContextElement : ConfigurationElement {
    private static string TypeKey;
    private static string CommandTimeoutKey;
    private static string DisableDatabaseInitializationKey;
    private static string DatabaseInitializerKey;
    [ConfigurationPropertyAttribute("type")]
public string ContextTypeName { get; public set; }
    [ConfigurationPropertyAttribute("commandTimeout")]
public Nullable`1<int> CommandTimeout { get; public set; }
    [ConfigurationPropertyAttribute("disableDatabaseInitialization")]
public bool IsDatabaseInitializationDisabled { get; public set; }
    [ConfigurationPropertyAttribute("databaseInitializer")]
public DatabaseInitializerElement DatabaseInitializer { get; public set; }
    public virtual string get_ContextTypeName();
    public virtual void set_ContextTypeName(string value);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    public virtual bool get_IsDatabaseInitializationDisabled();
    public virtual void set_IsDatabaseInitializationDisabled(bool value);
    public virtual DatabaseInitializerElement get_DatabaseInitializer();
    public virtual void set_DatabaseInitializer(DatabaseInitializerElement value);
}
internal class System.Data.Entity.Internal.ConfigFile.DatabaseInitializerElement : ConfigurationElement {
    private static string TypeKey;
    private static string ParametersKey;
    [ConfigurationPropertyAttribute("type")]
public string InitializerTypeName { get; public set; }
    [ConfigurationPropertyAttribute("parameters")]
public ParameterCollection Parameters { get; }
    public virtual string get_InitializerTypeName();
    public virtual void set_InitializerTypeName(string value);
    public virtual ParameterCollection get_Parameters();
}
internal class System.Data.Entity.Internal.ConfigFile.DefaultConnectionFactoryElement : ConfigurationElement {
    private static string TypeKey;
    private static string ParametersKey;
    [ConfigurationPropertyAttribute("type")]
public string FactoryTypeName { get; public set; }
    [ConfigurationPropertyAttribute("parameters")]
public ParameterCollection Parameters { get; }
    public string get_FactoryTypeName();
    public void set_FactoryTypeName(string value);
    public ParameterCollection get_Parameters();
    public Type GetFactoryType();
}
internal class System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection : ConfigurationSection {
    private static string DefaultConnectionFactoryKey;
    private static string ContextsKey;
    private static string ProviderKey;
    private static string ConfigurationTypeKey;
    private static string InterceptorsKey;
    private static string QueryCacheKey;
    [ConfigurationPropertyAttribute("defaultConnectionFactory")]
public DefaultConnectionFactoryElement DefaultConnectionFactory { get; public set; }
    [ConfigurationPropertyAttribute("codeConfigurationType")]
public string ConfigurationTypeName { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderCollection Providers { get; }
    [ConfigurationPropertyAttribute("contexts")]
public ContextCollection Contexts { get; }
    [ConfigurationPropertyAttribute("interceptors")]
public InterceptorsCollection Interceptors { get; }
    [ConfigurationPropertyAttribute("queryCache")]
public QueryCacheElement QueryCache { get; public set; }
    public virtual DefaultConnectionFactoryElement get_DefaultConnectionFactory();
    public virtual void set_DefaultConnectionFactory(DefaultConnectionFactoryElement value);
    public virtual string get_ConfigurationTypeName();
    public virtual void set_ConfigurationTypeName(string value);
    public virtual ProviderCollection get_Providers();
    public virtual ContextCollection get_Contexts();
    public virtual InterceptorsCollection get_Interceptors();
    public virtual QueryCacheElement get_QueryCache();
    public virtual void set_QueryCache(QueryCacheElement value);
}
internal class System.Data.Entity.Internal.ConfigFile.InterceptorElement : ConfigurationElement {
    private static string TypeKey;
    private static string ParametersKey;
    [CompilerGeneratedAttribute]
private int <Key>k__BackingField;
    internal int Key { get; private set; }
    [ConfigurationPropertyAttribute("type")]
public string TypeName { get; public set; }
    [ConfigurationPropertyAttribute("parameters")]
public ParameterCollection Parameters { get; }
    public InterceptorElement(int key);
    [CompilerGeneratedAttribute]
internal int get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(int value);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    public virtual ParameterCollection get_Parameters();
    public virtual IDbInterceptor CreateInterceptor();
}
internal class System.Data.Entity.Internal.ConfigFile.InterceptorsCollection : ConfigurationElementCollection {
    private static string ElementKey;
    private int _nextKey;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public IEnumerable`1<IDbInterceptor> Interceptors { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    public void AddElement(InterceptorElement element);
    public virtual IEnumerable`1<IDbInterceptor> get_Interceptors();
}
internal class System.Data.Entity.Internal.ConfigFile.ParameterCollection : ConfigurationElementCollection {
    private static string ParameterKey;
    private int _nextKey;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    public virtual Object[] GetTypedParameterValues();
    internal ParameterElement NewElement();
}
internal class System.Data.Entity.Internal.ConfigFile.ParameterElement : ConfigurationElement {
    private static string ValueKey;
    private static string TypeKey;
    [CompilerGeneratedAttribute]
private int <Key>k__BackingField;
    internal int Key { get; private set; }
    [ConfigurationPropertyAttribute("value")]
public string ValueString { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string TypeName { get; public set; }
    public ParameterElement(int key);
    [CompilerGeneratedAttribute]
internal int get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(int value);
    public string get_ValueString();
    public void set_ValueString(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public object GetTypedParameterValue();
}
internal class System.Data.Entity.Internal.ConfigFile.ProviderCollection : ConfigurationElementCollection {
    private static string ProviderKey;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    protected virtual void BaseAdd(ConfigurationElement element);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    private bool ValidateProviderElement(ConfigurationElement element);
    public ProviderElement AddProvider(string invariantName, string providerTypeName);
}
internal class System.Data.Entity.Internal.ConfigFile.ProviderElement : ConfigurationElement {
    private static string InvariantNameKey;
    private static string TypeKey;
    [ConfigurationPropertyAttribute("invariantName")]
public string InvariantName { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string ProviderTypeName { get; public set; }
    public string get_InvariantName();
    public void set_InvariantName(string value);
    public string get_ProviderTypeName();
    public void set_ProviderTypeName(string value);
}
internal class System.Data.Entity.Internal.ConfigFile.QueryCacheElement : ConfigurationElement {
    private static string SizeKey;
    private static string CleaningIntervalInSecondsKey;
    [ConfigurationPropertyAttribute("size")]
[IntegerValidatorAttribute]
public int Size { get; public set; }
    [ConfigurationPropertyAttribute("cleaningIntervalInSeconds")]
[IntegerValidatorAttribute]
public int CleaningIntervalInSeconds { get; public set; }
    public int get_Size();
    public void set_Size(int value);
    public int get_CleaningIntervalInSeconds();
    public void set_CleaningIntervalInSeconds(int value);
}
internal class System.Data.Entity.Internal.ContextConfig : object {
    private EntityFrameworkSection _entityFrameworkSettings;
    private ConcurrentDictionary`2<Type, Nullable`1<int>> _commandTimeouts;
    public ContextConfig(EntityFrameworkSection entityFrameworkSettings);
    public virtual Nullable`1<int> TryGetCommandTimeout(Type contextType);
    private static Nullable`1<int> TryGetCommandTimeout(Type requiredContextType, string contextTypeName, int commandTimeout);
}
internal class System.Data.Entity.Internal.DatabaseCreator : object {
    private IDbDependencyResolver _resolver;
    public DatabaseCreator(IDbDependencyResolver resolver);
    public virtual void CreateDatabase(InternalContext internalContext, Func`3<DbMigrationsConfiguration, DbContext, MigratorBase> createMigrator, ObjectContext objectContext);
}
internal enum System.Data.Entity.Internal.DatabaseExistenceState : Enum {
    public int value__;
    public static DatabaseExistenceState Unknown;
    public static DatabaseExistenceState DoesNotExist;
    public static DatabaseExistenceState ExistsConsideredEmpty;
    public static DatabaseExistenceState Exists;
}
internal class System.Data.Entity.Internal.DatabaseOperations : object {
    public virtual bool Create(ObjectContext objectContext);
    public virtual bool Exists(DbConnection connection, Nullable`1<int> commandTimeout, Lazy`1<StoreItemCollection> storeItemCollection);
    public virtual void Delete(ObjectContext objectContext);
}
internal class System.Data.Entity.Internal.DatabaseTableChecker : object {
    public DatabaseExistenceState AnyModelTableExists(InternalContext internalContext);
    private static StoreItemCollection CreateStoreItemCollection(InternalContext internalContext);
    public virtual bool QueryForTableExistence(TableExistenceChecker checker, ClonedObjectContext clonedObjectContext, List`1<EntitySet> modelTables);
    public virtual IEnumerable`1<EntitySet> GetModelTables(InternalContext internalContext);
}
internal class System.Data.Entity.Internal.DbContextTypesInitializersPair : Tuple`2<Dictionary`2<Type, List`1<string>>, Action`1<DbContext>> {
    public Dictionary`2<Type, List`1<string>> EntityTypeToPropertyNameMap { get; }
    public Action`1<DbContext> SetsInitializer { get; }
    public DbContextTypesInitializersPair(Dictionary`2<Type, List`1<string>> entityTypeToPropertyNameMap, Action`1<DbContext> setsInitializer);
    public Dictionary`2<Type, List`1<string>> get_EntityTypeToPropertyNameMap();
    public Action`1<DbContext> get_SetsInitializer();
}
internal class System.Data.Entity.Internal.DbDataRecordPropertyValues : InternalPropertyValues {
    private DbUpdatableDataRecord _dataRecord;
    private ISet`1<string> _names;
    public ISet`1<string> PropertyNames { get; }
    internal DbDataRecordPropertyValues(InternalContext internalContext, Type type, DbUpdatableDataRecord dataRecord, bool isEntity);
    protected virtual IPropertyValuesItem GetItemImpl(string propertyName);
    public virtual ISet`1<string> get_PropertyNames();
}
internal class System.Data.Entity.Internal.DbDataRecordPropertyValuesItem : object {
    private DbUpdatableDataRecord _dataRecord;
    private int _ordinal;
    private object _value;
    public object Value { get; public set; }
    public string Name { get; }
    public bool IsComplex { get; }
    public Type Type { get; }
    public DbDataRecordPropertyValuesItem(DbUpdatableDataRecord dataRecord, int ordinal, object value);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsComplex();
    public sealed virtual Type get_Type();
}
[ExtensionAttribute]
internal static class System.Data.Entity.Internal.DbHelpers : object {
    public static MethodInfo ConvertAndSetMethod;
    private static ConcurrentDictionary`2<Type, IDictionary`2<string, Type>> _propertyTypes;
    private static ConcurrentDictionary`2<Type, IDictionary`2<string, Action`2<object, object>>> _propertySetters;
    private static ConcurrentDictionary`2<Type, IDictionary`2<string, Func`2<object, object>>> _propertyGetters;
    private static ConcurrentDictionary`2<Type, Type> _collectionTypes;
    private static DbHelpers();
    public static bool KeyValuesEqual(object x, object y);
    public static bool PropertyValuesEqual(object x, object y);
    public static string QuoteIdentifier(string identifier);
    public static bool TreatAsConnectionString(string nameOrConnectionString);
    public static bool TryGetConnectionName(string nameOrConnectionString, String& name);
    public static bool IsFullEFConnectionString(string nameOrConnectionString);
    public static string ParsePropertySelector(Expression`1<Func`2<TEntity, TProperty>> property, string methodName, string paramName);
    public static bool TryParsePath(Expression expression, String& path);
    public static IDictionary`2<string, Type> GetPropertyTypes(Type type);
    public static IDictionary`2<string, Action`2<object, object>> GetPropertySetters(Type type);
    private static void ConvertAndSet(object instance, object value, Action`2<object, object> setter, string propertyName, string typeName);
    public static IDictionary`2<string, Func`2<object, object>> GetPropertyGetters(Type type);
    public static IQueryable CreateNoTrackingQuery(ObjectQuery query);
    public static IQueryable CreateStreamingQuery(ObjectQuery query);
    public static IQueryable CreateQueryWithExecutionStrategy(ObjectQuery query, IDbExecutionStrategy executionStrategy);
    [IteratorStateMachineAttribute("System.Data.Entity.Internal.DbHelpers/<SplitValidationResults>d__19")]
public static IEnumerable`1<DbValidationError> SplitValidationResults(string propertyName, IEnumerable`1<ValidationResult> validationResults);
    public static string GetPropertyPath(InternalMemberEntry property);
    [IteratorStateMachineAttribute("System.Data.Entity.Internal.DbHelpers/<GetPropertyPathSegments>d__21")]
private static IEnumerable`1<string> GetPropertyPathSegments(InternalMemberEntry property);
    public static Type CollectionType(Type elementType);
    [ExtensionAttribute]
public static string DatabaseName(Type contextType);
}
internal class System.Data.Entity.Internal.DbLocalView`1 : ObservableCollection`1<TEntity> {
    private InternalContext _internalContext;
    private bool _inStateManagerChanged;
    private ObservableBackedBindingList`1<TEntity> _bindingList;
    internal ObservableBackedBindingList`1<TEntity> BindingList { get; }
    public DbLocalView`1(IEnumerable`1<TEntity> collection);
    internal DbLocalView`1(InternalContext internalContext);
    internal ObservableBackedBindingList`1<TEntity> get_BindingList();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void StateManagerChangedHandler(object sender, CollectionChangeEventArgs e);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TEntity item);
    public virtual bool Contains(TEntity item);
    public virtual bool Remove(TEntity item);
    private sealed virtual override bool System.Collections.Generic.ICollection<TEntity>.Contains(TEntity item);
    private sealed virtual override bool System.Collections.Generic.ICollection<TEntity>.Remove(TEntity item);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private static bool IsCompatibleObject(object value);
    [CompilerGeneratedAttribute]
private bool <ClearItems>b__10_0(TEntity t);
}
internal class System.Data.Entity.Internal.DbSetDiscoveryService : object {
    private static ConcurrentDictionary`2<Type, DbContextTypesInitializersPair> _objectSetInitializers;
    public static MethodInfo SetMethod;
    private DbContext _context;
    public DbSetDiscoveryService(DbContext context);
    private static DbSetDiscoveryService();
    private Dictionary`2<Type, List`1<string>> GetSets();
    public void InitializeSets();
    public void RegisterSets(DbModelBuilder modelBuilder);
    private static bool DbSetPropertyShouldBeInitialized(PropertyInfo propertyInfo);
    private static Type GetSetType(Type declaredType);
    private static Type GetSetElementType(Type setType);
}
internal class System.Data.Entity.Internal.DefaultModelCacheKey : object {
    private Type _contextType;
    private string _providerName;
    private Type _providerType;
    private string _customKey;
    public DefaultModelCacheKey(Type contextType, string providerName, Type providerType, string customKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private bool Equals(DefaultModelCacheKey other);
}
internal class System.Data.Entity.Internal.DefaultModelCacheKeyFactory : object {
    public IDbModelCacheKey Create(DbContext context);
}
internal class System.Data.Entity.Internal.EagerInternalConnection : InternalConnection {
    private bool _connectionOwned;
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public EagerInternalConnection(DbContext context, DbConnection existingConnection, bool connectionOwned);
    public virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public virtual void Dispose();
}
internal class System.Data.Entity.Internal.EagerInternalContext : InternalContext {
    private ObjectContext _objectContext;
    private bool _objectContextOwned;
    private string _originalConnectionString;
    public ObjectContext ObjectContext { get; }
    private ObjectContext ObjectContextInUse { get; }
    public IDatabaseInitializer`1<DbContext> DefaultInitializer { get; }
    public DbConnection Connection { get; }
    public string OriginalConnectionString { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public bool EnsureTransactionsForFunctionsAndCommands { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseDatabaseNullSemantics { get; public set; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public EagerInternalContext(DbContext owner);
    public EagerInternalContext(DbContext owner, ObjectContext objectContext, bool objectContextOwned);
    public virtual ObjectContext get_ObjectContext();
    public virtual ObjectContext GetObjectContextWithoutDatabaseInitialization();
    private ObjectContext get_ObjectContextInUse();
    protected virtual void InitializeContext();
    public virtual void MarkDatabaseNotInitialized();
    public virtual void MarkDatabaseInitialized();
    protected virtual void InitializeDatabase();
    public virtual IDatabaseInitializer`1<DbContext> get_DefaultInitializer();
    public virtual void DisposeContext(bool disposing);
    public virtual DbConnection get_Connection();
    public virtual string get_OriginalConnectionString();
    public virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public virtual void OverrideConnection(IInternalConnection connection);
    public virtual bool get_EnsureTransactionsForFunctionsAndCommands();
    public virtual void set_EnsureTransactionsForFunctionsAndCommands(bool value);
    public virtual bool get_LazyLoadingEnabled();
    public virtual void set_LazyLoadingEnabled(bool value);
    public virtual bool get_ProxyCreationEnabled();
    public virtual void set_ProxyCreationEnabled(bool value);
    public virtual bool get_UseDatabaseNullSemantics();
    public virtual void set_UseDatabaseNullSemantics(bool value);
    public virtual bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    public virtual void set_DisableFilterOverProjectionSimplificationForCustomFunctions(bool value);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
}
internal class System.Data.Entity.Internal.EdmMetadataContext : DbContext {
    public static string TableName;
    [CompilerGeneratedAttribute]
private IDbSet`1<EdmMetadata> <Metadata>k__BackingField;
    public IDbSet`1<EdmMetadata> Metadata { get; public set; }
    private static EdmMetadataContext();
    public EdmMetadataContext(DbConnection existingConnection);
    [CompilerGeneratedAttribute]
public virtual IDbSet`1<EdmMetadata> get_Metadata();
    [CompilerGeneratedAttribute]
public virtual void set_Metadata(IDbSet`1<EdmMetadata> value);
    protected virtual void OnModelCreating(DbModelBuilder modelBuilder);
    public static void ConfigureEdmMetadata(ModelConfiguration modelConfiguration);
}
internal class System.Data.Entity.Internal.EdmMetadataRepository : RepositoryBase {
    private DbTransaction _existingTransaction;
    public EdmMetadataRepository(InternalContext usersContext, string connectionString, DbProviderFactory providerFactory);
    public virtual string QueryForModelHash(Func`2<DbConnection, EdmMetadataContext> createContext);
}
internal class System.Data.Entity.Internal.EntitySetTypePair : Tuple`2<EntitySet, Type> {
    public EntitySet EntitySet { get; }
    public Type BaseType { get; }
    public EntitySetTypePair(EntitySet entitySet, Type type);
    public EntitySet get_EntitySet();
    public Type get_BaseType();
}
internal interface System.Data.Entity.Internal.ICachedMetadataWorkspace {
    public IEnumerable`1<Assembly> Assemblies { get; }
    public string DefaultContainerName { get; }
    public DbProviderInfo ProviderInfo { get; }
    public abstract virtual MetadataWorkspace GetMetadataWorkspace(DbConnection storeConnection);
    public abstract virtual IEnumerable`1<Assembly> get_Assemblies();
    public abstract virtual string get_DefaultContainerName();
    public abstract virtual DbProviderInfo get_ProviderInfo();
}
internal interface System.Data.Entity.Internal.IDbEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
}
internal interface System.Data.Entity.Internal.IEntityStateEntry {
    public object Entity { get; }
    public EntityState State { get; }
    public DbUpdatableDataRecord CurrentValues { get; }
    public EntitySetBase EntitySet { get; }
    public EntityKey EntityKey { get; }
    public abstract virtual object get_Entity();
    public abstract virtual EntityState get_State();
    public abstract virtual void ChangeState(EntityState state);
    public abstract virtual DbUpdatableDataRecord get_CurrentValues();
    public abstract virtual DbUpdatableDataRecord GetUpdatableOriginalValues();
    public abstract virtual EntitySetBase get_EntitySet();
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual IEnumerable`1<string> GetModifiedProperties();
    public abstract virtual void SetModifiedProperty(string propertyName);
    public abstract virtual bool IsPropertyChanged(string propertyName);
    public abstract virtual void RejectPropertyChanges(string propertyName);
}
internal interface System.Data.Entity.Internal.IInternalConnection {
    public DbConnection Connection { get; }
    public string ConnectionKey { get; }
    public bool ConnectionHasModel { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public AppConfig AppConfig { get; public set; }
    public string ProviderName { get; public set; }
    public string ConnectionStringName { get; }
    public string OriginalConnectionString { get; }
    public abstract virtual DbConnection get_Connection();
    public abstract virtual string get_ConnectionKey();
    public abstract virtual bool get_ConnectionHasModel();
    public abstract virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public abstract virtual AppConfig get_AppConfig();
    public abstract virtual void set_AppConfig(AppConfig value);
    public abstract virtual string get_ProviderName();
    public abstract virtual void set_ProviderName(string value);
    public abstract virtual string get_ConnectionStringName();
    public abstract virtual string get_OriginalConnectionString();
    public abstract virtual ObjectContext CreateObjectContextFromConnectionModel();
}
internal class System.Data.Entity.Internal.InitializerConfig : object {
    private static string ConfigKeyKey;
    private static string DisabledSpecialValue;
    private EntityFrameworkSection _entityFrameworkSettings;
    private KeyValueConfigurationCollection _appSettings;
    public InitializerConfig(EntityFrameworkSection entityFrameworkSettings, KeyValueConfigurationCollection appSettings);
    private static object TryGetInitializer(Type requiredContextType, string contextTypeName, string initializerTypeName, bool isDisabled, Func`1<Object[]> initializerArgs, Func`3<object, object, string> exceptionMessage);
    public virtual object TryGetInitializer(Type contextType);
    private object TryGetInitializerFromEntityFrameworkSection(Type contextType);
    private object TryGetInitializerFromLegacyConfig(Type contextType);
}
internal class System.Data.Entity.Internal.InitializerLockPair : Tuple`2<Action`1<DbContext>, bool> {
    public Action`1<DbContext> InitializerDelegate { get; }
    public bool IsLocked { get; }
    public InitializerLockPair(Action`1<DbContext> initializerDelegate, bool isLocked);
    public Action`1<DbContext> get_InitializerDelegate();
    public bool get_IsLocked();
}
internal class System.Data.Entity.Internal.InterceptableDbCommand : DbCommand {
    private DbCommand _command;
    private DbInterceptionContext _interceptionContext;
    private DbDispatchers _dispatchers;
    public DbInterceptionContext InterceptionContext { get; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public bool DesignTimeVisible { get; public set; }
    public InterceptableDbCommand(DbCommand command, DbInterceptionContext context, DbDispatchers dispatchers);
    public DbInterceptionContext get_InterceptionContext();
    public virtual void Prepare();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual void Cancel();
    protected virtual DbParameter CreateDbParameter();
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.Entity.Internal.InternalCollectionEntry : InternalNavigationEntry {
    private static ConcurrentDictionary`2<Type, Func`2<InternalCollectionEntry, object>> _entryFactories;
    public object CurrentValue { get; public set; }
    public InternalCollectionEntry(InternalEntityEntry internalEntityEntry, NavigationEntryMetadata navigationMetadata);
    private static InternalCollectionEntry();
    protected virtual object GetNavigationPropertyFromRelatedEnd(object entity);
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public virtual DbMemberEntry CreateDbMemberEntry();
    public virtual DbMemberEntry`2<TEntity, TProperty> CreateDbMemberEntry();
    public virtual DbCollectionEntry`2<TEntity, TElement> CreateDbCollectionEntry();
    private DbMemberEntry`2<TEntity, TProperty> CreateDbCollectionEntry(Type elementType);
}
internal abstract class System.Data.Entity.Internal.InternalConnection : object {
    private string _key;
    private string _providerName;
    private string _originalConnectionString;
    private string _originalDatabaseName;
    private string _originalDataSource;
    [CompilerGeneratedAttribute]
private DbInterceptionContext <InterceptionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AppConfig <AppConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <UnderlyingConnection>k__BackingField;
    protected DbInterceptionContext InterceptionContext { get; private set; }
    public DbConnection Connection { get; }
    public string ConnectionKey { get; }
    public bool ConnectionHasModel { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public AppConfig AppConfig { get; public set; }
    public string ProviderName { get; public set; }
    public string ConnectionStringName { get; }
    public string OriginalConnectionString { get; }
    protected DbConnection UnderlyingConnection { get; protected set; }
    public InternalConnection(DbInterceptionContext interceptionContext);
    [CompilerGeneratedAttribute]
protected DbInterceptionContext get_InterceptionContext();
    [CompilerGeneratedAttribute]
private void set_InterceptionContext(DbInterceptionContext value);
    public virtual DbConnection get_Connection();
    public virtual string get_ConnectionKey();
    public virtual bool get_ConnectionHasModel();
    public abstract virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    [CompilerGeneratedAttribute]
public virtual AppConfig get_AppConfig();
    [CompilerGeneratedAttribute]
public virtual void set_AppConfig(AppConfig value);
    public virtual string get_ProviderName();
    public virtual void set_ProviderName(string value);
    public virtual string get_ConnectionStringName();
    public virtual string get_OriginalConnectionString();
    public virtual ObjectContext CreateObjectContextFromConnectionModel();
    public abstract virtual void Dispose();
    [CompilerGeneratedAttribute]
protected DbConnection get_UnderlyingConnection();
    [CompilerGeneratedAttribute]
protected void set_UnderlyingConnection(DbConnection value);
    protected void OnConnectionInitialized();
    public static string GetStoreConnectionString(DbConnection connection);
}
internal abstract class System.Data.Entity.Internal.InternalContext : object {
    public static MethodInfo CreateObjectAsObjectMethod;
    private static ConcurrentDictionary`2<Type, Func`2<InternalContext, object>> _entityFactories;
    public static MethodInfo ExecuteSqlQueryAsIEnumeratorMethod;
    public static MethodInfo ExecuteSqlQueryAsIDbAsyncEnumeratorMethod;
    private static ConcurrentDictionary`2<Type, Func`5<InternalContext, string, Nullable`1<bool>, Object[], IEnumerator>> _queryExecutors;
    private static ConcurrentDictionary`2<Type, Func`5<InternalContext, string, Nullable`1<bool>, Object[], IDbAsyncEnumerator>> _asyncQueryExecutors;
    private static ConcurrentDictionary`2<Type, Func`3<InternalContext, IInternalSet, IInternalSetAdapter>> _setFactories;
    public static MethodInfo CreateInitializationActionMethod;
    private AppConfig _appConfig;
    private DbContext _owner;
    private ClonedObjectContext _tempObjectContext;
    private int _tempObjectContextCount;
    private Dictionary`2<Type, IInternalSetAdapter> _genericSets;
    private Dictionary`2<Type, IInternalSetAdapter> _nonGenericSets;
    private ValidationProvider _validationProvider;
    private bool _oSpaceLoadingForced;
    private DbProviderFactory _providerFactory;
    private Lazy`1<DbDispatchers> _dispatchers;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> OnDisposing;
    private DatabaseLogFormatter _logFormatter;
    private Func`1<DbMigrationsConfiguration> _migrationsConfiguration;
    private Nullable`1<bool> _migrationsConfigurationDiscovered;
    private DbContextInfo _contextInfo;
    private string _defaultContextKey;
    [CompilerGeneratedAttribute]
private bool <InInitializationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDetectChangesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnSaveEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitializerDisabled>k__BackingField;
    public DbContext Owner { get; }
    public ObjectContext ObjectContext { get; }
    protected ObjectContext TempObjectContext { get; }
    public DbCompiledModel CodeFirstModel { get; }
    public DbModel ModelBeingInitialized { get; }
    protected bool InInitializationAction { get; protected set; }
    public IDatabaseInitializer`1<DbContext> DefaultInitializer { get; }
    public bool EnsureTransactionsForFunctionsAndCommands { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseDatabaseNullSemantics { get; public set; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public bool AutoDetectChangesEnabled { get; public set; }
    public bool ValidateOnSaveEnabled { get; public set; }
    public bool IsDisposed { get; private set; }
    public DbConnection Connection { get; }
    public string OriginalConnectionString { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public AppConfig AppConfig { get; public set; }
    public DbProviderInfo ModelProviderInfo { get; public set; }
    public string ConnectionStringName { get; }
    public string ProviderName { get; }
    public DbProviderFactory ProviderFactory { get; }
    public Action`1<DbModelBuilder> OnModelCreating { get; public set; }
    public bool InitializerDisabled { get; public set; }
    public DatabaseOperations DatabaseOperations { get; }
    public ValidationProvider ValidationProvider { get; }
    public string DefaultSchema { get; }
    public string DefaultContextKey { get; public set; }
    public DbMigrationsConfiguration MigrationsConfiguration { get; }
    public Func`3<DbConnection, string, HistoryContext> HistoryContextFactory { get; }
    public bool MigrationsConfigurationDiscovered { get; }
    internal string OwnerShortTypeName { get; }
    public Action`1<string> Log { get; public set; }
    protected InternalContext(DbContext owner, Lazy`1<DbDispatchers> dispatchers);
    private static InternalContext();
    [CompilerGeneratedAttribute]
public void add_OnDisposing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnDisposing(EventHandler`1<EventArgs> value);
    public DbContext get_Owner();
    public abstract virtual ObjectContext get_ObjectContext();
    public abstract virtual ObjectContext GetObjectContextWithoutDatabaseInitialization();
    public virtual ClonedObjectContext CreateObjectContextForDdlOps();
    protected ObjectContext get_TempObjectContext();
    public virtual void UseTempObjectContext();
    public virtual void DisposeTempObjectContext();
    public virtual DbCompiledModel get_CodeFirstModel();
    public virtual DbModel get_ModelBeingInitialized();
    public virtual void CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState);
    public virtual bool CompatibleWithModel(bool throwIfNoMetadata, DatabaseExistenceState existenceState);
    public virtual bool ModelMatches(VersionedModel model);
    public virtual string QueryForModelHash();
    public virtual VersionedModel QueryForModel(DatabaseExistenceState existenceState);
    public virtual void SaveMetadataToDatabase();
    public virtual bool HasHistoryTableEntry();
    private HistoryRepository CreateHistoryRepository(DatabaseExistenceState existenceState);
    public virtual DbTransaction TryGetCurrentStoreTransaction();
    [CompilerGeneratedAttribute]
protected bool get_InInitializationAction();
    [CompilerGeneratedAttribute]
protected void set_InInitializationAction(bool value);
    public void PerformInitializationAction(Action action);
    public virtual void RegisterObjectStateManagerChangedEvent(CollectionChangeEventHandler handler);
    public virtual bool EntityInContextAndNotDeleted(object entity);
    public virtual int SaveChanges();
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    public void Initialize();
    protected abstract virtual void InitializeContext();
    public abstract virtual void MarkDatabaseNotInitialized();
    protected abstract virtual void InitializeDatabase();
    public abstract virtual void MarkDatabaseInitialized();
    public void PerformDatabaseInitialization();
    private Action CreateInitializationAction(IDatabaseInitializer`1<TContext> initializer);
    public abstract virtual IDatabaseInitializer`1<DbContext> get_DefaultInitializer();
    public abstract virtual bool get_EnsureTransactionsForFunctionsAndCommands();
    public abstract virtual void set_EnsureTransactionsForFunctionsAndCommands(bool value);
    public abstract virtual bool get_LazyLoadingEnabled();
    public abstract virtual void set_LazyLoadingEnabled(bool value);
    public abstract virtual bool get_ProxyCreationEnabled();
    public abstract virtual void set_ProxyCreationEnabled(bool value);
    public abstract virtual bool get_UseDatabaseNullSemantics();
    public abstract virtual void set_UseDatabaseNullSemantics(bool value);
    public abstract virtual bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    public abstract virtual void set_DisableFilterOverProjectionSimplificationForCustomFunctions(bool value);
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_AutoDetectChangesEnabled();
    [CompilerGeneratedAttribute]
public void set_AutoDetectChangesEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateOnSaveEnabled();
    [CompilerGeneratedAttribute]
public void set_ValidateOnSaveEnabled(bool value);
    protected void LoadContextConfigs();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public virtual void DisposeContext(bool disposing);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual void DetectChanges(bool force);
    public virtual IDbSet`1<TEntity> Set();
    public virtual IInternalSetAdapter Set(Type entityType);
    private IInternalSetAdapter CreateInternalSet(Type entityType, IInternalSet internalSet);
    public virtual EntitySetTypePair GetEntitySetAndBaseTypeForType(Type entityType);
    public virtual EntitySetTypePair TryGetEntitySetAndBaseTypeForType(Type entityType);
    public virtual bool IsEntityTypeMapped(Type entityType);
    public virtual IEnumerable`1<TEntity> GetLocalEntities();
    public virtual IEnumerator`1<TElement> ExecuteSqlQuery(string sql, Nullable`1<bool> streaming, Object[] parameters);
    public virtual IDbAsyncEnumerator`1<TElement> ExecuteSqlQueryAsync(string sql, Nullable`1<bool> streaming, Object[] parameters);
    public virtual IEnumerator ExecuteSqlQuery(Type elementType, string sql, Nullable`1<bool> streaming, Object[] parameters);
    private IEnumerator ExecuteSqlQueryAsIEnumerator(string sql, Nullable`1<bool> streaming, Object[] parameters);
    public virtual IDbAsyncEnumerator ExecuteSqlQueryAsync(Type elementType, string sql, Nullable`1<bool> streaming, Object[] parameters);
    private IDbAsyncEnumerator ExecuteSqlQueryAsIDbAsyncEnumerator(string sql, Nullable`1<bool> streaming, Object[] parameters);
    public virtual int ExecuteSqlCommand(TransactionalBehavior transactionalBehavior, string sql, Object[] parameters);
    public virtual Task`1<int> ExecuteSqlCommandAsync(TransactionalBehavior transactionalBehavior, string sql, CancellationToken cancellationToken, Object[] parameters);
    public virtual IEntityStateEntry GetStateEntry(object entity);
    public virtual IEnumerable`1<IEntityStateEntry> GetStateEntries();
    public virtual IEnumerable`1<IEntityStateEntry> GetStateEntries();
    private IEnumerable`1<IEntityStateEntry> GetStateEntries(Func`2<ObjectStateEntry, bool> predicate);
    public virtual DbUpdateException WrapUpdateException(UpdateException updateException);
    public virtual TEntity CreateObject();
    public virtual object CreateObject(Type type);
    private object CreateObjectAsObject();
    public abstract virtual DbConnection get_Connection();
    public abstract virtual string get_OriginalConnectionString();
    public abstract virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public abstract virtual void OverrideConnection(IInternalConnection connection);
    public virtual AppConfig get_AppConfig();
    public virtual void set_AppConfig(AppConfig value);
    public virtual DbProviderInfo get_ModelProviderInfo();
    public virtual void set_ModelProviderInfo(DbProviderInfo value);
    public virtual string get_ConnectionStringName();
    public virtual string get_ProviderName();
    public DbProviderFactory get_ProviderFactory();
    public virtual Action`1<DbModelBuilder> get_OnModelCreating();
    public virtual void set_OnModelCreating(Action`1<DbModelBuilder> value);
    [CompilerGeneratedAttribute]
public bool get_InitializerDisabled();
    [CompilerGeneratedAttribute]
public void set_InitializerDisabled(bool value);
    public virtual DatabaseOperations get_DatabaseOperations();
    protected void CheckContextNotDisposed();
    protected void ResetDbSets();
    public void ForceOSpaceLoadingForKnownEntityTypes();
    private bool TryUpdateEntitySetMappingsForType(Type entityType);
    private EntitySetTypePair GetEntitySetMappingForType(Type entityType);
    private void UpdateEntitySetMappingsForType(Type entityType);
    private static bool IsPocoTypeInNonPocoAssembly(Type entityType);
    private bool IsComplexType(Type clrType);
    public void ApplyContextInfo(DbContextInfo info);
    public virtual ValidationProvider get_ValidationProvider();
    public virtual string get_DefaultSchema();
    public string get_DefaultContextKey();
    public void set_DefaultContextKey(string value);
    public DbMigrationsConfiguration get_MigrationsConfiguration();
    public Func`3<DbConnection, string, HistoryContext> get_HistoryContextFactory();
    public virtual bool get_MigrationsConfigurationDiscovered();
    private void DiscoverMigrationsConfiguration();
    internal virtual string get_OwnerShortTypeName();
    public virtual Action`1<string> get_Log();
    public virtual void set_Log(Action`1<string> value);
    [CompilerGeneratedAttribute]
private void <SaveMetadataToDatabase>b__47_0();
}
internal class System.Data.Entity.Internal.InternalEntityEntry : object {
    private Type _entityType;
    private InternalContext _internalContext;
    private object _entity;
    private IEntityStateEntry _stateEntry;
    private EntityType _edmEntityType;
    public object Entity { get; }
    public EntityState State { get; public set; }
    public InternalPropertyValues CurrentValues { get; }
    public InternalPropertyValues OriginalValues { get; }
    public bool IsDetached { get; }
    public Type EntityType { get; }
    public EntityType EdmEntityType { get; }
    public IEntityStateEntry ObjectStateEntry { get; }
    public InternalContext InternalContext { get; }
    public InternalEntityEntry(InternalContext internalContext, IEntityStateEntry stateEntry);
    public InternalEntityEntry(InternalContext internalContext, object entity);
    public virtual object get_Entity();
    public virtual EntityState get_State();
    public virtual void set_State(EntityState value);
    public virtual InternalPropertyValues get_CurrentValues();
    public virtual InternalPropertyValues get_OriginalValues();
    public virtual InternalPropertyValues GetDatabaseValues();
    [AsyncStateMachineAttribute("System.Data.Entity.Internal.InternalEntityEntry/<GetDatabaseValuesAsync>d__17")]
public virtual Task`1<InternalPropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken);
    private ObjectQuery`1<DbDataRecord> GetDatabaseValuesQuery();
    private void AppendEntitySqlRow(StringBuilder queryBuilder, string prefix, InternalPropertyValues templateValues);
    private void ValidateStateToGetValues(string method, EntityState invalidState);
    public virtual void Reload();
    public virtual Task ReloadAsync(CancellationToken cancellationToken);
    public virtual InternalReferenceEntry Reference(string navigationProperty, Type requestedType);
    public virtual InternalCollectionEntry Collection(string navigationProperty, Type requestedType);
    public virtual InternalMemberEntry Member(string propertyName, Type requestedType);
    public virtual InternalPropertyEntry Property(string property, Type requestedType, bool requireComplex);
    public InternalPropertyEntry Property(InternalPropertyEntry parentProperty, string propertyName, Type requestedType, bool requireComplex);
    private InternalPropertyEntry Property(InternalPropertyEntry parentProperty, string propertyName, IList`1<string> properties, Type requestedType, bool requireComplex);
    private NavigationEntryMetadata ValidateAndGetNavigationMetadata(string navigationProperty, Type requestedType, bool requireCollection);
    public virtual NavigationEntryMetadata GetNavigationMetadata(string propertyName);
    private Type GetNavigationTargetType(NavigationProperty navigationProperty);
    public virtual IRelatedEnd GetRelatedEnd(string navigationProperty);
    public virtual PropertyEntryMetadata ValidateAndGetPropertyMetadata(string propertyName, Type declaringType, Type requestedType);
    private static IList`1<string> SplitName(string propertyName);
    private void ValidateNotDetachedAndInitializeRelatedEnd(string method);
    public virtual bool get_IsDetached();
    public virtual Type get_EntityType();
    public virtual EntityType get_EdmEntityType();
    public IEntityStateEntry get_ObjectStateEntry();
    public InternalContext get_InternalContext();
    public virtual DbEntityValidationResult GetValidationResult(IDictionary`2<object, object> items);
    public virtual bool Equals(object obj);
    public bool Equals(InternalEntityEntry other);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.Internal.InternalEntityPropertyEntry : InternalPropertyEntry {
    public InternalPropertyEntry ParentPropertyEntry { get; }
    public InternalPropertyValues ParentCurrentValues { get; }
    public InternalPropertyValues ParentOriginalValues { get; }
    public InternalEntityPropertyEntry(InternalEntityEntry internalEntityEntry, PropertyEntryMetadata propertyMetadata);
    public virtual InternalPropertyEntry get_ParentPropertyEntry();
    public virtual InternalPropertyValues get_ParentCurrentValues();
    public virtual InternalPropertyValues get_ParentOriginalValues();
    protected virtual Func`2<object, object> CreateGetter();
    protected virtual Action`2<object, object> CreateSetter();
    public virtual bool EntityPropertyIsModified();
    public virtual void SetEntityPropertyModified();
    public virtual void RejectEntityPropertyChanges();
    public virtual void UpdateComplexPropertyState();
}
internal abstract class System.Data.Entity.Internal.InternalMemberEntry : object {
    private InternalEntityEntry _internalEntityEntry;
    private MemberEntryMetadata _memberMetadata;
    public string Name { get; }
    public object CurrentValue { get; public set; }
    public InternalEntityEntry InternalEntityEntry { get; }
    public MemberEntryMetadata EntryMetadata { get; }
    protected InternalMemberEntry(InternalEntityEntry internalEntityEntry, MemberEntryMetadata memberMetadata);
    public virtual string get_Name();
    public abstract virtual object get_CurrentValue();
    public abstract virtual void set_CurrentValue(object value);
    public virtual InternalEntityEntry get_InternalEntityEntry();
    public virtual MemberEntryMetadata get_EntryMetadata();
    public virtual IEnumerable`1<DbValidationError> GetValidationErrors();
    public abstract virtual DbMemberEntry CreateDbMemberEntry();
    public abstract virtual DbMemberEntry`2<TEntity, TProperty> CreateDbMemberEntry();
}
internal abstract class System.Data.Entity.Internal.InternalNavigationEntry : InternalMemberEntry {
    private IRelatedEnd _relatedEnd;
    private Func`2<object, object> _getter;
    private bool _triedToGetGetter;
    private Action`2<object, object> _setter;
    private bool _triedToGetSetter;
    public bool IsLoaded { get; public set; }
    protected IRelatedEnd RelatedEnd { get; }
    public object CurrentValue { get; }
    protected Func`2<object, object> Getter { get; }
    protected Action`2<object, object> Setter { get; }
    protected InternalNavigationEntry(InternalEntityEntry internalEntityEntry, NavigationEntryMetadata navigationMetadata);
    public virtual void Load();
    public virtual Task LoadAsync(CancellationToken cancellationToken);
    public virtual bool get_IsLoaded();
    public virtual void set_IsLoaded(bool value);
    public virtual IQueryable Query();
    protected IRelatedEnd get_RelatedEnd();
    public virtual object get_CurrentValue();
    protected Func`2<object, object> get_Getter();
    protected Action`2<object, object> get_Setter();
    protected abstract virtual object GetNavigationPropertyFromRelatedEnd(object entity);
    private void ValidateNotDetached(string method);
}
internal class System.Data.Entity.Internal.InternalNestedPropertyEntry : InternalPropertyEntry {
    private InternalPropertyEntry _parentPropertyEntry;
    public InternalPropertyEntry ParentPropertyEntry { get; }
    public InternalPropertyValues ParentCurrentValues { get; }
    public InternalPropertyValues ParentOriginalValues { get; }
    public InternalNestedPropertyEntry(InternalPropertyEntry parentPropertyEntry, PropertyEntryMetadata propertyMetadata);
    public virtual InternalPropertyEntry get_ParentPropertyEntry();
    public virtual InternalPropertyValues get_ParentCurrentValues();
    public virtual InternalPropertyValues get_ParentOriginalValues();
    protected virtual Func`2<object, object> CreateGetter();
    protected virtual Action`2<object, object> CreateSetter();
    public virtual bool EntityPropertyIsModified();
    public virtual void SetEntityPropertyModified();
    public virtual void RejectEntityPropertyChanges();
    public virtual void UpdateComplexPropertyState();
}
internal abstract class System.Data.Entity.Internal.InternalPropertyEntry : InternalMemberEntry {
    private bool _getterIsCached;
    private Func`2<object, object> _getter;
    private bool _setterIsCached;
    private Action`2<object, object> _setter;
    public InternalPropertyEntry ParentPropertyEntry { get; }
    public InternalPropertyValues ParentCurrentValues { get; }
    public InternalPropertyValues ParentOriginalValues { get; }
    public Func`2<object, object> Getter { get; }
    public Action`2<object, object> Setter { get; }
    public object OriginalValue { get; public set; }
    public object CurrentValue { get; public set; }
    public bool IsModified { get; public set; }
    public PropertyEntryMetadata EntryMetadata { get; }
    protected InternalPropertyEntry(InternalEntityEntry internalEntityEntry, PropertyEntryMetadata propertyMetadata);
    public abstract virtual InternalPropertyEntry get_ParentPropertyEntry();
    public abstract virtual InternalPropertyValues get_ParentCurrentValues();
    public abstract virtual InternalPropertyValues get_ParentOriginalValues();
    protected abstract virtual Func`2<object, object> CreateGetter();
    protected abstract virtual Action`2<object, object> CreateSetter();
    public abstract virtual bool EntityPropertyIsModified();
    public abstract virtual void SetEntityPropertyModified();
    public abstract virtual void RejectEntityPropertyChanges();
    public abstract virtual void UpdateComplexPropertyState();
    public Func`2<object, object> get_Getter();
    public Action`2<object, object> get_Setter();
    public virtual object get_OriginalValue();
    public virtual void set_OriginalValue(object value);
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    private void CheckNotSettingComplexPropertyToNull(object value);
    private bool SetCurrentValueOnClrObject(object value);
    private void SetPropertyValueUsingValues(InternalPropertyValues internalValues, object value);
    public virtual InternalPropertyEntry Property(string property, Type requestedType, bool requireComplex);
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    private void ValidateNotDetachedAndInModel(string method);
    public PropertyEntryMetadata get_EntryMetadata();
    public virtual DbMemberEntry CreateDbMemberEntry();
    public virtual DbMemberEntry`2<TEntity, TProperty> CreateDbMemberEntry();
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Data.Entity.Internal.InternalPropertyValues : object {
    private static ConcurrentDictionary`2<Type, Func`1<object>> _nonEntityFactories;
    private InternalContext _internalContext;
    private Type _type;
    private bool _isEntityValues;
    public ISet`1<string> PropertyNames { get; }
    public object Item { get; public set; }
    public Type ObjectType { get; }
    public InternalContext InternalContext { get; }
    public bool IsEntityValues { get; }
    protected InternalPropertyValues(InternalContext internalContext, Type type, bool isEntityValues);
    private static InternalPropertyValues();
    protected abstract virtual IPropertyValuesItem GetItemImpl(string propertyName);
    public abstract virtual ISet`1<string> get_PropertyNames();
    public object ToObject();
    private object CreateObject();
    public void SetValues(object value);
    public InternalPropertyValues Clone();
    public void SetValues(InternalPropertyValues values);
    public object get_Item(string propertyName);
    public void set_Item(string propertyName, object value);
    public IPropertyValuesItem GetItem(string propertyName);
    private void SetValue(IPropertyValuesItem item, object newValue);
    public Type get_ObjectType();
    public InternalContext get_InternalContext();
    public bool get_IsEntityValues();
}
internal class System.Data.Entity.Internal.InternalReferenceEntry : InternalNavigationEntry {
    private static ConcurrentDictionary`2<Type, Action`2<IRelatedEnd, object>> _entityReferenceValueSetters;
    public static MethodInfo SetValueOnEntityReferenceMethod;
    public object CurrentValue { get; public set; }
    public InternalReferenceEntry(InternalEntityEntry internalEntityEntry, NavigationEntryMetadata navigationMetadata);
    private static InternalReferenceEntry();
    protected virtual object GetNavigationPropertyFromRelatedEnd(object entity);
    protected virtual void SetNavigationPropertyOnRelatedEnd(object value);
    private static void SetValueOnEntityReference(IRelatedEnd entityReference, object value);
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public virtual DbMemberEntry CreateDbMemberEntry();
    public virtual DbMemberEntry`2<TEntity, TProperty> CreateDbMemberEntry();
}
internal class System.Data.Entity.Internal.InternalSqlNonSetQuery : InternalSqlQuery {
    private InternalContext _internalContext;
    private Type _elementType;
    internal InternalSqlNonSetQuery(InternalContext internalContext, Type elementType, string sql, Object[] parameters);
    private InternalSqlNonSetQuery(InternalContext internalContext, Type elementType, string sql, Nullable`1<bool> streaming, Object[] parameters);
    public virtual InternalSqlQuery AsNoTracking();
    public virtual InternalSqlQuery AsStreaming();
    public virtual IEnumerator GetEnumerator();
    public virtual IDbAsyncEnumerator GetAsyncEnumerator();
}
internal abstract class System.Data.Entity.Internal.InternalSqlQuery : object {
    private string _sql;
    private Object[] _parameters;
    private Nullable`1<bool> _streaming;
    public string Sql { get; }
    internal Nullable`1<bool> Streaming { get; }
    public Object[] Parameters { get; }
    internal InternalSqlQuery(string sql, Nullable`1<bool> streaming, Object[] parameters);
    public string get_Sql();
    internal Nullable`1<bool> get_Streaming();
    public Object[] get_Parameters();
    public abstract virtual InternalSqlQuery AsNoTracking();
    public abstract virtual InternalSqlQuery AsStreaming();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IDbAsyncEnumerator GetAsyncEnumerator();
    public virtual string ToString();
}
internal class System.Data.Entity.Internal.InternalSqlSetQuery : InternalSqlQuery {
    private IInternalSet _set;
    private bool _isNoTracking;
    public bool IsNoTracking { get; }
    internal InternalSqlSetQuery(IInternalSet set, string sql, bool isNoTracking, Object[] parameters);
    private InternalSqlSetQuery(IInternalSet set, string sql, bool isNoTracking, Nullable`1<bool> streaming, Object[] parameters);
    public virtual InternalSqlQuery AsNoTracking();
    public bool get_IsNoTracking();
    public virtual InternalSqlQuery AsStreaming();
    public virtual IEnumerator GetEnumerator();
    public virtual IDbAsyncEnumerator GetAsyncEnumerator();
}
internal interface System.Data.Entity.Internal.IPropertyValuesItem {
    public object Value { get; public set; }
    public string Name { get; }
    public bool IsComplex { get; }
    public Type Type { get; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsComplex();
    public abstract virtual Type get_Type();
}
internal class System.Data.Entity.Internal.LazyAsyncEnumerator`1 : object {
    private Func`2<CancellationToken, Task`1<ObjectResult`1<T>>> _getObjectResultAsync;
    private IDbAsyncEnumerator`1<T> _objectResultAsyncEnumerator;
    public T Current { get; }
    private object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current { get; }
    public LazyAsyncEnumerator`1(Func`2<CancellationToken, Task`1<ObjectResult`1<T>>> getObjectResultAsync);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.Internal.LazyAsyncEnumerator`1/<FirstMoveNextAsync>d__9")]
private Task`1<bool> FirstMoveNextAsync(CancellationToken cancellationToken);
}
internal class System.Data.Entity.Internal.LazyEnumerator`1 : object {
    private Func`1<ObjectResult`1<T>> _getObjectResult;
    private IEnumerator`1<T> _objectResultEnumerator;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public LazyEnumerator`1(Func`1<ObjectResult`1<T>> getObjectResult);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class System.Data.Entity.Internal.LazyInternalConnection : InternalConnection {
    private string _nameOrConnectionString;
    private DbConnectionStringOrigin _connectionStringOrigin;
    private string _connectionStringName;
    private DbConnectionInfo _connectionInfo;
    private Nullable`1<bool> _hasModel;
    public DbConnection Connection { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public string ConnectionStringName { get; }
    public string ConnectionKey { get; }
    public string OriginalConnectionString { get; }
    public string ProviderName { get; public set; }
    public bool ConnectionHasModel { get; }
    internal bool IsInitialized { get; }
    public LazyInternalConnection(string nameOrConnectionString);
    public LazyInternalConnection(DbContext context, string nameOrConnectionString);
    public LazyInternalConnection(DbContext context, DbConnectionInfo connectionInfo);
    public virtual DbConnection get_Connection();
    public virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public virtual string get_ConnectionStringName();
    public virtual string get_ConnectionKey();
    public virtual string get_OriginalConnectionString();
    public virtual string get_ProviderName();
    public virtual void set_ProviderName(string value);
    public virtual bool get_ConnectionHasModel();
    public virtual ObjectContext CreateObjectContextFromConnectionModel();
    public virtual void Dispose();
    internal bool get_IsInitialized();
    private void Initialize();
    private bool TryInitializeFromAppConfig(string name, AppConfig config);
    private static ConnectionStringSettings FindConnectionInConfig(string name, AppConfig config);
    private void InitializeFromConnectionStringSetting(ConnectionStringSettings appConfigConnection);
    private void CreateConnectionFromProviderName(string providerInvariantName);
}
internal class System.Data.Entity.Internal.LazyInternalContext : InternalContext {
    private static CreateDatabaseIfNotExists`1<DbContext> _defaultCodeFirstInitializer;
    private static ConcurrentDictionary`2<IDbModelCacheKey, RetryLazy`2<LazyInternalContext, DbCompiledModel>> _cachedModels;
    private static ConcurrentDictionary`2<Tuple`2<DbCompiledModel, string>, RetryAction`1<InternalContext>> InitializedDatabases;
    private IInternalConnection _internalConnection;
    private bool _creatingModel;
    private ObjectContext _objectContext;
    private DbCompiledModel _model;
    private bool _createdWithExistingModel;
    private bool _initialEnsureTransactionsForFunctionsAndCommands;
    private bool _initialLazyLoadingFlag;
    private bool _initialProxyCreationFlag;
    private bool _useDatabaseNullSemanticsFlag;
    private Nullable`1<int> _commandTimeout;
    private bool _inDatabaseInitialization;
    private Action`1<DbModelBuilder> _onModelCreating;
    private Func`2<DbContext, IDbModelCacheKey> _cacheKeyFactory;
    private AttributeProvider _attributeProvider;
    private DbModel _modelBeingInitialized;
    private DbProviderInfo _modelProviderInfo;
    private bool _disableFilterOverProjectionSimplificationForCustomFunctions;
    public ObjectContext ObjectContext { get; }
    public DbCompiledModel CodeFirstModel { get; }
    public DbModel ModelBeingInitialized { get; }
    public ObjectContext ObjectContextInUse { get; }
    public DbConnection Connection { get; }
    public string OriginalConnectionString { get; }
    public DbConnectionStringOrigin ConnectionStringOrigin { get; }
    public AppConfig AppConfig { get; public set; }
    public string ConnectionStringName { get; }
    public DbProviderInfo ModelProviderInfo { get; public set; }
    public string ProviderName { get; }
    public Action`1<DbModelBuilder> OnModelCreating { get; public set; }
    public IDatabaseInitializer`1<DbContext> DefaultInitializer { get; }
    public bool EnsureTransactionsForFunctionsAndCommands { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseDatabaseNullSemantics { get; public set; }
    public bool DisableFilterOverProjectionSimplificationForCustomFunctions { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public string DefaultSchema { get; }
    public LazyInternalContext(DbContext owner, IInternalConnection internalConnection, DbCompiledModel model, Func`2<DbContext, IDbModelCacheKey> cacheKeyFactory, AttributeProvider attributeProvider, Lazy`1<DbDispatchers> dispatchers, ObjectContext objectContext);
    private static LazyInternalContext();
    public virtual ObjectContext get_ObjectContext();
    public virtual DbCompiledModel get_CodeFirstModel();
    public virtual DbModel get_ModelBeingInitialized();
    public virtual ObjectContext GetObjectContextWithoutDatabaseInitialization();
    public virtual ObjectContext get_ObjectContextInUse();
    public virtual int SaveChanges();
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    public virtual void DisposeContext(bool disposing);
    public virtual DbConnection get_Connection();
    public virtual string get_OriginalConnectionString();
    public virtual DbConnectionStringOrigin get_ConnectionStringOrigin();
    public virtual AppConfig get_AppConfig();
    public virtual void set_AppConfig(AppConfig value);
    public virtual string get_ConnectionStringName();
    public virtual DbProviderInfo get_ModelProviderInfo();
    public virtual void set_ModelProviderInfo(DbProviderInfo value);
    public virtual string get_ProviderName();
    public virtual Action`1<DbModelBuilder> get_OnModelCreating();
    public virtual void set_OnModelCreating(Action`1<DbModelBuilder> value);
    public virtual void OverrideConnection(IInternalConnection connection);
    protected virtual void InitializeContext();
    public static DbCompiledModel CreateModel(LazyInternalContext internalContext);
    public DbModelBuilder CreateModelBuilder();
    private static string StripInvalidCharacters(string value);
    public virtual void MarkDatabaseNotInitialized();
    public virtual void MarkDatabaseInitialized();
    protected virtual void InitializeDatabase();
    private void InitializeDatabaseAction(Action`1<InternalContext> action);
    public virtual IDatabaseInitializer`1<DbContext> get_DefaultInitializer();
    public virtual bool get_EnsureTransactionsForFunctionsAndCommands();
    public virtual void set_EnsureTransactionsForFunctionsAndCommands(bool value);
    public virtual bool get_LazyLoadingEnabled();
    public virtual void set_LazyLoadingEnabled(bool value);
    public virtual bool get_ProxyCreationEnabled();
    public virtual void set_ProxyCreationEnabled(bool value);
    public virtual bool get_UseDatabaseNullSemantics();
    public virtual void set_UseDatabaseNullSemantics(bool value);
    public virtual bool get_DisableFilterOverProjectionSimplificationForCustomFunctions();
    public virtual void set_DisableFilterOverProjectionSimplificationForCustomFunctions(bool value);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    public virtual string get_DefaultSchema();
}
internal class System.Data.Entity.Internal.Linq.DbQueryProvider : object {
    private InternalContext _internalContext;
    private IInternalQuery _internalQuery;
    public InternalContext InternalContext { get; }
    public DbQueryProvider(InternalContext internalContext, IInternalQuery internalQuery);
    public virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public virtual IQueryable CreateQuery(Expression expression);
    public virtual TResult Execute(Expression expression);
    public virtual object Execute(Expression expression);
    private sealed virtual override Task`1<TResult> System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Task`1<object> System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private IQueryable CreateQuery(ObjectQuery objectQuery);
    protected ObjectQuery CreateObjectQuery(Expression expression);
    protected IInternalQuery CreateInternalQuery(ObjectQuery objectQuery);
    public InternalContext get_InternalContext();
}
internal class System.Data.Entity.Internal.Linq.DbQueryVisitor : ExpressionVisitor {
    private static BindingFlags SetAccessBindingFlags;
    private static ConcurrentDictionary`2<Type, Func`2<ObjectQuery, object>> _wrapperFactories;
    private static DbQueryVisitor();
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    private static DbContext GetContextFromConstantExpression(Expression expression, MemberInfo member);
    private static object GetExpressionValue(Expression expression);
    private static DbContext GetContextFromMember(MemberInfo member, object value);
    private static Expression CreateObjectQueryConstant(object dbQuery);
    private static ObjectQuery ExtractObjectQuery(object dbQuery);
}
internal interface System.Data.Entity.Internal.Linq.IInternalQuery {
    public InternalContext InternalContext { get; }
    public ObjectQuery ObjectQuery { get; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public ObjectQueryProvider ObjectQueryProvider { get; }
    public abstract virtual void ResetQuery();
    public abstract virtual InternalContext get_InternalContext();
    public abstract virtual ObjectQuery get_ObjectQuery();
    public abstract virtual Type get_ElementType();
    public abstract virtual Expression get_Expression();
    public abstract virtual ObjectQueryProvider get_ObjectQueryProvider();
    public abstract virtual string ToTraceString();
    public abstract virtual IDbAsyncEnumerator GetAsyncEnumerator();
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface System.Data.Entity.Internal.Linq.IInternalQuery`1 {
    public abstract virtual IInternalQuery`1<TElement> Include(string path);
    public abstract virtual IInternalQuery`1<TElement> AsNoTracking();
    public abstract virtual IInternalQuery`1<TElement> AsStreaming();
    public abstract virtual IInternalQuery`1<TElement> WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    public abstract virtual IDbAsyncEnumerator`1<TElement> GetAsyncEnumerator();
    public abstract virtual IEnumerator`1<TElement> GetEnumerator();
}
internal interface System.Data.Entity.Internal.Linq.IInternalQueryAdapter {
    public IInternalQuery InternalQuery { get; }
    public abstract virtual IInternalQuery get_InternalQuery();
}
internal interface System.Data.Entity.Internal.Linq.IInternalSet {
    public abstract virtual void Attach(object entity);
    public abstract virtual void Add(object entity);
    public abstract virtual void AddRange(IEnumerable entities);
    public abstract virtual void RemoveRange(IEnumerable entities);
    public abstract virtual void Remove(object entity);
    public abstract virtual void Initialize();
    public abstract virtual void TryInitialize();
    public abstract virtual IEnumerator ExecuteSqlQuery(string sql, bool asNoTracking, Nullable`1<bool> streaming, Object[] parameters);
    public abstract virtual IDbAsyncEnumerator ExecuteSqlQueryAsync(string sql, bool asNoTracking, Nullable`1<bool> streaming, Object[] parameters);
}
internal interface System.Data.Entity.Internal.Linq.IInternalSet`1 {
    public ObservableCollection`1<TEntity> Local { get; }
    public abstract virtual TEntity Find(Object[] keyValues);
    public abstract virtual Task`1<TEntity> FindAsync(CancellationToken cancellationToken, Object[] keyValues);
    public abstract virtual TEntity Create();
    public abstract virtual TEntity Create(Type derivedEntityType);
    public abstract virtual ObservableCollection`1<TEntity> get_Local();
}
internal interface System.Data.Entity.Internal.Linq.IInternalSetAdapter {
    public IInternalSet InternalSet { get; }
    public abstract virtual IInternalSet get_InternalSet();
}
internal class System.Data.Entity.Internal.Linq.InternalDbQuery`1 : DbQuery {
    private IInternalQuery`1<TElement> _internalQuery;
    internal IInternalQuery InternalQuery { get; }
    public InternalDbQuery`1(IInternalQuery`1<TElement> internalQuery);
    internal virtual IInternalQuery get_InternalQuery();
    public virtual DbQuery Include(string path);
    public virtual DbQuery AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbQuery AsStreaming();
    internal virtual DbQuery WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    internal virtual IInternalQuery GetInternalQueryWithCheck(string memberName);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    public sealed virtual IDbAsyncEnumerator`1<TElement> GetAsyncEnumerator();
}
internal class System.Data.Entity.Internal.Linq.InternalDbSet`1 : DbSet {
    private IInternalSet`1<TEntity> _internalSet;
    internal IInternalQuery InternalQuery { get; }
    internal IInternalSet InternalSet { get; }
    public IList Local { get; }
    public InternalDbSet`1(IInternalSet`1<TEntity> internalSet);
    public static InternalDbSet`1<TEntity> Create(InternalContext internalContext, IInternalSet internalSet);
    internal virtual IInternalQuery get_InternalQuery();
    internal virtual IInternalSet get_InternalSet();
    public virtual DbQuery Include(string path);
    public virtual DbQuery AsNoTracking();
    [ObsoleteAttribute("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public virtual DbQuery AsStreaming();
    internal virtual DbQuery WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    public virtual object Find(Object[] keyValues);
    internal virtual IInternalQuery GetInternalQueryWithCheck(string memberName);
    internal virtual IInternalSet GetInternalSetWithCheck(string memberName);
    [AsyncStateMachineAttribute("System.Data.Entity.Internal.Linq.InternalDbSet`1/<FindAsync>d__14")]
public virtual Task`1<object> FindAsync(CancellationToken cancellationToken, Object[] keyValues);
    public virtual IList get_Local();
    public virtual object Create();
    public virtual object Create(Type derivedEntityType);
    public sealed virtual IEnumerator`1<TEntity> GetEnumerator();
    public sealed virtual IDbAsyncEnumerator`1<TEntity> GetAsyncEnumerator();
}
internal class System.Data.Entity.Internal.Linq.InternalQuery`1 : object {
    private InternalContext _internalContext;
    private ObjectQuery`1<TElement> _objectQuery;
    public InternalContext InternalContext { get; }
    public ObjectQuery`1<TElement> ObjectQuery { get; }
    private ObjectQuery System.Data.Entity.Internal.Linq.IInternalQuery.ObjectQuery { get; }
    public Expression Expression { get; }
    public ObjectQueryProvider ObjectQueryProvider { get; }
    public Type ElementType { get; }
    public InternalQuery`1(InternalContext internalContext);
    public InternalQuery`1(InternalContext internalContext, ObjectQuery objectQuery);
    public virtual void ResetQuery();
    public virtual InternalContext get_InternalContext();
    public virtual IInternalQuery`1<TElement> Include(string path);
    public virtual IInternalQuery`1<TElement> AsNoTracking();
    public virtual IInternalQuery`1<TElement> AsStreaming();
    public virtual IInternalQuery`1<TElement> WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    public virtual ObjectQuery`1<TElement> get_ObjectQuery();
    private sealed virtual override ObjectQuery System.Data.Entity.Internal.Linq.IInternalQuery.get_ObjectQuery();
    protected void InitializeQuery(ObjectQuery`1<TElement> objectQuery);
    public virtual string ToTraceString();
    public virtual Expression get_Expression();
    public virtual ObjectQueryProvider get_ObjectQueryProvider();
    public sealed virtual Type get_ElementType();
    public virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Data.Entity.Internal.Linq.IInternalQuery.GetEnumerator();
    public virtual IDbAsyncEnumerator`1<TElement> GetAsyncEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Internal.Linq.IInternalQuery.GetAsyncEnumerator();
}
internal class System.Data.Entity.Internal.Linq.InternalSet`1 : InternalQuery`1<TEntity> {
    private DbLocalView`1<TEntity> _localView;
    private EntitySet _entitySet;
    private string _entitySetName;
    private string _quotedEntitySetName;
    private Type _baseType;
    public ObservableCollection`1<TEntity> Local { get; }
    public ObjectQuery`1<TEntity> ObjectQuery { get; }
    public string EntitySetName { get; }
    public string QuotedEntitySetName { get; }
    public EntitySet EntitySet { get; }
    public Type EntitySetBaseType { get; }
    public InternalContext InternalContext { get; }
    public Expression Expression { get; }
    public ObjectQueryProvider ObjectQueryProvider { get; }
    public InternalSet`1(InternalContext internalContext);
    public virtual void ResetQuery();
    public sealed virtual TEntity Find(Object[] keyValues);
    public sealed virtual Task`1<TEntity> FindAsync(CancellationToken cancellationToken, Object[] keyValues);
    [AsyncStateMachineAttribute("System.Data.Entity.Internal.Linq.InternalSet`1/<FindInternalAsync>d__9")]
private Task`1<TEntity> FindInternalAsync(CancellationToken cancellationToken, Object[] keyValues);
    private object FindInStateManager(WrappedEntityKey key);
    private object FindInStore(WrappedEntityKey key, string keyValuesParamName);
    [AsyncStateMachineAttribute("System.Data.Entity.Internal.Linq.InternalSet`1/<FindInStoreAsync>d__12")]
private Task`1<object> FindInStoreAsync(WrappedEntityKey key, string keyValuesParamName, CancellationToken cancellationToken);
    private ObjectQuery`1<TEntity> BuildFindQuery(WrappedEntityKey key);
    public sealed virtual ObservableCollection`1<TEntity> get_Local();
    public virtual void Attach(object entity);
    public virtual void Add(object entity);
    public virtual void AddRange(IEnumerable entities);
    public virtual void Remove(object entity);
    public virtual void RemoveRange(IEnumerable entities);
    private void ActOnSet(Action action, EntityState newState, object entity, string methodName);
    private void ActOnSet(Action`1<object> action, EntityState newState, IEnumerable entities, string methodName);
    public sealed virtual TEntity Create();
    public sealed virtual TEntity Create(Type derivedEntityType);
    public virtual ObjectQuery`1<TEntity> get_ObjectQuery();
    public string get_EntitySetName();
    public string get_QuotedEntitySetName();
    public EntitySet get_EntitySet();
    public Type get_EntitySetBaseType();
    public virtual void Initialize();
    public virtual void TryInitialize();
    private void InitializeUnderlyingTypes(EntitySetTypePair pair);
    private ObjectQuery`1<TEntity> CreateObjectQuery(bool asNoTracking, Nullable`1<bool> streaming, IDbExecutionStrategy executionStrategy);
    public virtual string ToString();
    public virtual string ToTraceString();
    public virtual InternalContext get_InternalContext();
    public virtual IInternalQuery`1<TEntity> Include(string path);
    public virtual IInternalQuery`1<TEntity> AsNoTracking();
    public virtual IInternalQuery`1<TEntity> AsStreaming();
    public virtual IInternalQuery`1<TEntity> WithExecutionStrategy(IDbExecutionStrategy executionStrategy);
    public sealed virtual IEnumerator ExecuteSqlQuery(string sql, bool asNoTracking, Nullable`1<bool> streaming, Object[] parameters);
    public sealed virtual IDbAsyncEnumerator ExecuteSqlQueryAsync(string sql, bool asNoTracking, Nullable`1<bool> streaming, Object[] parameters);
    public virtual Expression get_Expression();
    public virtual ObjectQueryProvider get_ObjectQueryProvider();
    public virtual IEnumerator`1<TEntity> GetEnumerator();
    public virtual IDbAsyncEnumerator`1<TEntity> GetAsyncEnumerator();
    [CompilerGeneratedAttribute]
private bool <FindInStateManager>b__10_0(ObjectStateEntry e);
    [CompilerGeneratedAttribute]
private void <AddRange>b__18_0(object entity);
}
internal class System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider : DbQueryProvider {
    public NonGenericDbQueryProvider(InternalContext internalContext, IInternalQuery internalQuery);
    public virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public virtual IQueryable CreateQuery(Expression expression);
    private IQueryable CreateQuery(ObjectQuery objectQuery);
}
internal abstract class System.Data.Entity.Internal.MemberEntryMetadata : object {
    private Type _declaringType;
    private Type _elementType;
    private string _memberName;
    public MemberEntryType MemberEntryType { get; }
    public string MemberName { get; }
    public Type DeclaringType { get; }
    public Type ElementType { get; }
    public Type MemberType { get; }
    protected MemberEntryMetadata(Type declaringType, Type elementType, string memberName);
    public abstract virtual InternalMemberEntry CreateMemberEntry(InternalEntityEntry internalEntityEntry, InternalPropertyEntry parentPropertyEntry);
    public abstract virtual MemberEntryType get_MemberEntryType();
    public string get_MemberName();
    public Type get_DeclaringType();
    public Type get_ElementType();
    public abstract virtual Type get_MemberType();
}
internal enum System.Data.Entity.Internal.MemberEntryType : Enum {
    public int value__;
    public static MemberEntryType ReferenceNavigationProperty;
    public static MemberEntryType CollectionNavigationProperty;
    public static MemberEntryType ScalarProperty;
    public static MemberEntryType ComplexProperty;
}
internal class System.Data.Entity.Internal.MockingProxies.EntityConnectionProxy : object {
    private EntityConnection _entityConnection;
    public DbConnection StoreConnection { get; }
    public EntityConnectionProxy(EntityConnection entityConnection);
    public static EntityConnection op_Implicit(EntityConnectionProxy proxy);
    public virtual DbConnection get_StoreConnection();
    public virtual void Dispose();
    public virtual EntityConnectionProxy CreateNew(DbConnection storeConnection);
}
internal class System.Data.Entity.Internal.MockingProxies.ObjectContextProxy : object {
    private ObjectContext _objectContext;
    private ObjectItemCollection _objectItemCollection;
    public EntityConnectionProxy Connection { get; }
    public string DefaultContainerName { get; public set; }
    public ObjectContextProxy(ObjectContext objectContext);
    public static ObjectContext op_Implicit(ObjectContextProxy proxy);
    public virtual EntityConnectionProxy get_Connection();
    public virtual string get_DefaultContainerName();
    public virtual void set_DefaultContainerName(string value);
    public virtual void Dispose();
    public virtual IEnumerable`1<GlobalItem> GetObjectItemCollection();
    public virtual Type GetClrType(StructuralType item);
    public virtual Type GetClrType(EnumType item);
    public virtual void LoadFromAssembly(Assembly assembly);
    public virtual ObjectContextProxy CreateNew(EntityConnectionProxy entityConnection);
    public virtual void CopyContextOptions(ObjectContextProxy source);
}
internal class System.Data.Entity.Internal.ModelCompatibilityChecker : object {
    public virtual bool CompatibleWithModel(InternalContext internalContext, ModelHashCalculator modelHashCalculator, bool throwIfNoMetadata, DatabaseExistenceState existenceState);
}
internal class System.Data.Entity.Internal.ModelHashCalculator : object {
    public virtual string Calculate(DbCompiledModel compiledModel);
    private static string ComputeSha256Hash(string input);
    private static SHA256 GetSha256HashAlgorithm();
}
internal class System.Data.Entity.Internal.NavigationEntryMetadata : MemberEntryMetadata {
    private bool _isCollection;
    public MemberEntryType MemberEntryType { get; }
    public Type MemberType { get; }
    public NavigationEntryMetadata(Type declaringType, Type propertyType, string propertyName, bool isCollection);
    public virtual MemberEntryType get_MemberEntryType();
    public virtual Type get_MemberType();
    public virtual InternalMemberEntry CreateMemberEntry(InternalEntityEntry internalEntityEntry, InternalPropertyEntry parentPropertyEntry);
}
internal static class System.Data.Entity.Internal.ObjectContextTypeCache : object {
    private static ConcurrentDictionary`2<Type, Type> _typeCache;
    private static ObjectContextTypeCache();
    public static Type GetObjectType(Type type);
}
internal class System.Data.Entity.Internal.ObservableBackedBindingList`1 : SortableBindingList`1<T> {
    private bool _addingNewInstance;
    private T _addNewInstance;
    private T _cancelNewInstance;
    private ObservableCollection`1<T> _obervableCollection;
    private bool _inCollectionChanged;
    private bool _changingObservableCollection;
    public ObservableBackedBindingList`1(ObservableCollection`1<T> obervableCollection);
    protected virtual object AddNewCore();
    public virtual void CancelNew(int itemIndex);
    protected virtual void ClearItems();
    public virtual void EndNew(int itemIndex);
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private void ObservableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddToObservableCollection(T item);
    private void RemoveFromObservableCollection(T item);
}
internal class System.Data.Entity.Internal.PropertyEntryMetadata : MemberEntryMetadata {
    private bool _isMapped;
    private bool _isComplex;
    public bool IsComplex { get; }
    public MemberEntryType MemberEntryType { get; }
    public bool IsMapped { get; }
    public Type MemberType { get; }
    public PropertyEntryMetadata(Type declaringType, Type propertyType, string propertyName, bool isMapped, bool isComplex);
    public static PropertyEntryMetadata ValidateNameAndGetMetadata(InternalContext internalContext, Type declaringType, Type requestedType, string propertyName);
    public virtual InternalMemberEntry CreateMemberEntry(InternalEntityEntry internalEntityEntry, InternalPropertyEntry parentPropertyEntry);
    public bool get_IsComplex();
    public virtual MemberEntryType get_MemberEntryType();
    public bool get_IsMapped();
    public virtual Type get_MemberType();
}
internal class System.Data.Entity.Internal.QueryCacheConfig : object {
    private static int DefaultSize;
    private static int DefaultCleaningIntervalInSeconds;
    private EntityFrameworkSection _entityFrameworkSection;
    public QueryCacheConfig(EntityFrameworkSection entityFrameworkSection);
    public int GetQueryCacheSize();
    public int GetCleaningIntervalInSeconds();
}
internal class System.Data.Entity.Internal.ReadOnlySet`1 : object {
    private ISet`1<T> _set;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReadOnlySet`1(ISet`1<T> set);
    public sealed virtual bool Add(T item);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class System.Data.Entity.Internal.RepositoryBase : object {
    private InternalContext _usersContext;
    private string _connectionString;
    private DbProviderFactory _providerFactory;
    protected RepositoryBase(InternalContext usersContext, string connectionString, DbProviderFactory providerFactory);
    protected DbConnection CreateConnection();
    protected void DisposeConnection(DbConnection connection);
}
internal class System.Data.Entity.Internal.RetryAction`1 : object {
    private object _lock;
    private Action`1<TInput> _action;
    public RetryAction`1(Action`1<TInput> action);
    [DebuggerStepThroughAttribute]
public void PerformAction(TInput input);
}
internal class System.Data.Entity.Internal.RetryLazy`2 : object {
    private object _lock;
    private Func`2<TInput, TResult> _valueFactory;
    private TResult _value;
    public RetryLazy`2(Func`2<TInput, TResult> valueFactory);
    [DebuggerStepThroughAttribute]
public TResult GetValue(TInput input);
}
internal class System.Data.Entity.Internal.SortableBindingList`1 : BindingList`1<T> {
    private bool _isSorted;
    private ListSortDirection _sortDirection;
    private PropertyDescriptor _sortProperty;
    protected bool IsSortedCore { get; }
    protected ListSortDirection SortDirectionCore { get; }
    protected PropertyDescriptor SortPropertyCore { get; }
    protected bool SupportsSortingCore { get; }
    public SortableBindingList`1(List`1<T> list);
    protected virtual void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction);
    protected virtual void RemoveSortCore();
    protected virtual bool get_IsSortedCore();
    protected virtual ListSortDirection get_SortDirectionCore();
    protected virtual PropertyDescriptor get_SortPropertyCore();
    protected virtual bool get_SupportsSortingCore();
}
internal class System.Data.Entity.Internal.StateEntryAdapter : object {
    private ObjectStateEntry _stateEntry;
    public object Entity { get; }
    public EntityState State { get; }
    public DbUpdatableDataRecord CurrentValues { get; }
    public EntitySetBase EntitySet { get; }
    public EntityKey EntityKey { get; }
    public StateEntryAdapter(ObjectStateEntry stateEntry);
    public sealed virtual object get_Entity();
    public sealed virtual EntityState get_State();
    public sealed virtual void ChangeState(EntityState state);
    public sealed virtual DbUpdatableDataRecord get_CurrentValues();
    public sealed virtual DbUpdatableDataRecord GetUpdatableOriginalValues();
    public sealed virtual EntitySetBase get_EntitySet();
    public sealed virtual EntityKey get_EntityKey();
    public sealed virtual IEnumerable`1<string> GetModifiedProperties();
    public sealed virtual void SetModifiedProperty(string propertyName);
    public sealed virtual void RejectPropertyChanges(string propertyName);
    public sealed virtual bool IsPropertyChanged(string propertyName);
}
internal class System.Data.Entity.Internal.ThrowingMonitor : object {
    private int _isInCriticalSection;
    public void Enter();
    public void Exit();
    public void EnsureNotEntered();
}
internal class System.Data.Entity.Internal.Validation.ComplexPropertyValidator : PropertyValidator {
    private ComplexTypeValidator _complexTypeValidator;
    public ComplexTypeValidator ComplexTypeValidator { get; }
    public ComplexPropertyValidator(string propertyName, IEnumerable`1<IValidator> propertyValidators, ComplexTypeValidator complexTypeValidator);
    public ComplexTypeValidator get_ComplexTypeValidator();
    public virtual IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalMemberEntry property);
}
internal class System.Data.Entity.Internal.Validation.ComplexTypeValidator : TypeValidator {
    public ComplexTypeValidator(IEnumerable`1<PropertyValidator> propertyValidators, IEnumerable`1<IValidator> typeLevelValidators);
    public IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalPropertyEntry property);
    protected virtual void ValidateProperties(EntityValidationContext entityValidationContext, InternalPropertyEntry parentProperty, List`1<DbValidationError> validationErrors);
}
internal class System.Data.Entity.Internal.Validation.EntityValidationContext : object {
    private InternalEntityEntry _entityEntry;
    [CompilerGeneratedAttribute]
private ValidationContext <ExternalValidationContext>k__BackingField;
    public ValidationContext ExternalValidationContext { get; private set; }
    public InternalEntityEntry InternalEntity { get; }
    public EntityValidationContext(InternalEntityEntry entityEntry, ValidationContext externalValidationContext);
    [CompilerGeneratedAttribute]
public ValidationContext get_ExternalValidationContext();
    [CompilerGeneratedAttribute]
private void set_ExternalValidationContext(ValidationContext value);
    public InternalEntityEntry get_InternalEntity();
}
internal class System.Data.Entity.Internal.Validation.EntityValidator : TypeValidator {
    public EntityValidator(IEnumerable`1<PropertyValidator> propertyValidators, IEnumerable`1<IValidator> typeLevelValidators);
    public DbEntityValidationResult Validate(EntityValidationContext entityValidationContext);
    protected virtual void ValidateProperties(EntityValidationContext entityValidationContext, InternalPropertyEntry parentProperty, List`1<DbValidationError> validationErrors);
}
internal class System.Data.Entity.Internal.Validation.EntityValidatorBuilder : object {
    private AttributeProvider _attributeProvider;
    public EntityValidatorBuilder(AttributeProvider attributeProvider);
    public virtual EntityValidator BuildEntityValidator(InternalEntityEntry entityEntry);
    protected virtual ComplexTypeValidator BuildComplexTypeValidator(Type clrType, ComplexType complexType);
    private T BuildTypeValidator(Type clrType, IEnumerable`1<EdmProperty> edmProperties, IEnumerable`1<NavigationProperty> navigationProperties, Func`3<IEnumerable`1<PropertyValidator>, IEnumerable`1<IValidator>, T> validatorFactoryFunc);
    protected virtual IList`1<PropertyValidator> BuildValidatorsForProperties(IEnumerable`1<PropertyInfo> clrProperties, IEnumerable`1<EdmProperty> edmProperties, IEnumerable`1<NavigationProperty> navigationProperties);
    protected virtual PropertyValidator BuildPropertyValidator(PropertyInfo clrProperty, EdmProperty edmProperty, bool buildFacetValidators);
    protected virtual PropertyValidator BuildPropertyValidator(PropertyInfo clrProperty);
    protected virtual IList`1<IValidator> BuildValidationAttributeValidators(IEnumerable`1<Attribute> attributes);
    protected virtual IEnumerable`1<PropertyInfo> GetPublicInstanceProperties(Type type);
    protected virtual IEnumerable`1<IValidator> BuildFacetValidators(PropertyInfo clrProperty, EdmMember edmProperty, IEnumerable`1<Attribute> existingAttributes);
}
internal interface System.Data.Entity.Internal.Validation.IValidator {
    public abstract virtual IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalMemberEntry property);
}
internal class System.Data.Entity.Internal.Validation.PropertyValidator : object {
    private IEnumerable`1<IValidator> _propertyValidators;
    private string _propertyName;
    public IEnumerable`1<IValidator> PropertyAttributeValidators { get; }
    public string PropertyName { get; }
    public PropertyValidator(string propertyName, IEnumerable`1<IValidator> propertyValidators);
    public IEnumerable`1<IValidator> get_PropertyAttributeValidators();
    public string get_PropertyName();
    public virtual IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalMemberEntry property);
}
internal abstract class System.Data.Entity.Internal.Validation.TypeValidator : object {
    private IEnumerable`1<IValidator> _typeLevelValidators;
    private IEnumerable`1<PropertyValidator> _propertyValidators;
    public IEnumerable`1<IValidator> TypeLevelValidators { get; }
    public IEnumerable`1<PropertyValidator> PropertyValidators { get; }
    public TypeValidator(IEnumerable`1<PropertyValidator> propertyValidators, IEnumerable`1<IValidator> typeLevelValidators);
    public IEnumerable`1<IValidator> get_TypeLevelValidators();
    public IEnumerable`1<PropertyValidator> get_PropertyValidators();
    protected IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalPropertyEntry property);
    protected abstract virtual void ValidateProperties(EntityValidationContext entityValidationContext, InternalPropertyEntry parentProperty, List`1<DbValidationError> validationErrors);
    public PropertyValidator GetPropertyValidator(string name);
}
internal class System.Data.Entity.Internal.Validation.ValidatableObjectValidator : object {
    private DisplayAttribute _displayAttribute;
    public ValidatableObjectValidator(DisplayAttribute displayAttribute);
    public virtual IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalMemberEntry property);
}
internal class System.Data.Entity.Internal.Validation.ValidationAttributeValidator : object {
    private DisplayAttribute _displayAttribute;
    private ValidationAttribute _validationAttribute;
    public ValidationAttributeValidator(ValidationAttribute validationAttribute, DisplayAttribute displayAttribute);
    public virtual IEnumerable`1<DbValidationError> Validate(EntityValidationContext entityValidationContext, InternalMemberEntry property);
    protected virtual bool AttributeApplicable(EntityValidationContext entityValidationContext, InternalMemberEntry property);
}
internal class System.Data.Entity.Internal.Validation.ValidationProvider : object {
    private Dictionary`2<Type, EntityValidator> _entityValidators;
    private EntityValidatorBuilder _entityValidatorBuilder;
    public ValidationProvider(EntityValidatorBuilder builder, AttributeProvider attributeProvider);
    public virtual EntityValidator GetEntityValidator(InternalEntityEntry entityEntry);
    public virtual PropertyValidator GetPropertyValidator(InternalEntityEntry owningEntity, InternalMemberEntry property);
    protected virtual PropertyValidator GetValidatorForProperty(EntityValidator entityValidator, InternalMemberEntry memberEntry);
    public virtual EntityValidationContext GetEntityValidationContext(InternalEntityEntry entityEntry, IDictionary`2<object, object> items);
}
internal class System.Data.Entity.Internal.WrappedEntityKey : object {
    private IEnumerable`1<KeyValuePair`2<string, object>> _keyValuePairs;
    private EntityKey _key;
    public bool HasNullValues { get; }
    public EntityKey EntityKey { get; }
    public IEnumerable`1<KeyValuePair`2<string, object>> KeyValuePairs { get; }
    public WrappedEntityKey(EntitySet entitySet, string entitySetName, Object[] keyValues, string keyValuesParamName);
    public bool get_HasNullValues();
    public EntityKey get_EntityKey();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_KeyValuePairs();
}
public class System.Data.Entity.MigrateDatabaseToLatestVersion`2 : object {
    private DbMigrationsConfiguration _config;
    private bool _useSuppliedContext;
    private static MigrateDatabaseToLatestVersion`2();
    public MigrateDatabaseToLatestVersion`2(bool useSuppliedContext);
    public MigrateDatabaseToLatestVersion`2(bool useSuppliedContext, TMigrationsConfiguration configuration);
    public MigrateDatabaseToLatestVersion`2(string connectionStringName);
    public virtual void InitializeDatabase(TContext context);
}
public class System.Data.Entity.Migrations.Builders.ColumnBuilder : object {
    public ColumnModel Binary(Nullable`1<bool> nullable, Nullable`1<int> maxLength, Nullable`1<bool> fixedLength, Byte[] defaultValue, string defaultValueSql, bool timestamp, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Boolean(Nullable`1<bool> nullable, Nullable`1<bool> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Byte(Nullable`1<bool> nullable, bool identity, Nullable`1<byte> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel DateTime(Nullable`1<bool> nullable, Nullable`1<byte> precision, Nullable`1<DateTime> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Decimal(Nullable`1<bool> nullable, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<decimal> defaultValue, string defaultValueSql, string name, string storeType, bool identity, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Double(Nullable`1<bool> nullable, Nullable`1<double> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Guid(Nullable`1<bool> nullable, bool identity, Nullable`1<Guid> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Single(Nullable`1<bool> nullable, Nullable`1<float> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Short(Nullable`1<bool> nullable, bool identity, Nullable`1<short> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Int(Nullable`1<bool> nullable, bool identity, Nullable`1<int> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Long(Nullable`1<bool> nullable, bool identity, Nullable`1<long> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel String(Nullable`1<bool> nullable, Nullable`1<int> maxLength, Nullable`1<bool> fixedLength, Nullable`1<bool> unicode, string defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Time(Nullable`1<bool> nullable, Nullable`1<byte> precision, Nullable`1<TimeSpan> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel DateTimeOffset(Nullable`1<bool> nullable, Nullable`1<byte> precision, Nullable`1<DateTimeOffset> defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel HierarchyId(Nullable`1<bool> nullable, HierarchyId defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Geography(Nullable`1<bool> nullable, DbGeography defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    public ColumnModel Geometry(Nullable`1<bool> nullable, DbGeometry defaultValue, string defaultValueSql, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    private static ColumnModel BuildColumn(PrimitiveTypeKind primitiveTypeKind, Nullable`1<bool> nullable, object defaultValue, string defaultValueSql, Nullable`1<int> maxLength, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<bool> unicode, Nullable`1<bool> fixedLength, bool identity, bool timestamp, string name, string storeType, IDictionary`2<string, AnnotationValues> annotations);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
public class System.Data.Entity.Migrations.Builders.ParameterBuilder : object {
    public ParameterModel Binary(Nullable`1<int> maxLength, Nullable`1<bool> fixedLength, Byte[] defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Boolean(Nullable`1<bool> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Byte(Nullable`1<byte> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel DateTime(Nullable`1<byte> precision, Nullable`1<DateTime> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Decimal(Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<decimal> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Double(Nullable`1<double> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Guid(Nullable`1<Guid> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Single(Nullable`1<float> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Short(Nullable`1<short> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Int(Nullable`1<int> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Long(Nullable`1<long> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel String(Nullable`1<int> maxLength, Nullable`1<bool> fixedLength, Nullable`1<bool> unicode, string defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Time(Nullable`1<byte> precision, Nullable`1<TimeSpan> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel DateTimeOffset(Nullable`1<byte> precision, Nullable`1<DateTimeOffset> defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Geography(DbGeography defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    public ParameterModel Geometry(DbGeometry defaultValue, string defaultValueSql, string name, string storeType, bool outParameter);
    private static ParameterModel BuildParameter(PrimitiveTypeKind primitiveTypeKind, object defaultValue, string defaultValueSql, Nullable`1<int> maxLength, Nullable`1<byte> precision, Nullable`1<byte> scale, Nullable`1<bool> unicode, Nullable`1<bool> fixedLength, string name, string storeType, bool outParameter);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
public class System.Data.Entity.Migrations.Builders.TableBuilder`1 : object {
    private CreateTableOperation _createTableOperation;
    private DbMigration _migration;
    public TableBuilder`1(CreateTableOperation createTableOperation, DbMigration migration);
    public TableBuilder`1<TColumns> PrimaryKey(Expression`1<Func`2<TColumns, object>> keyExpression, string name, bool clustered, object anonymousArguments);
    public TableBuilder`1<TColumns> Index(Expression`1<Func`2<TColumns, object>> indexExpression, string name, bool unique, bool clustered, object anonymousArguments);
    public TableBuilder`1<TColumns> ForeignKey(string principalTable, Expression`1<Func`2<TColumns, object>> dependentKeyExpression, bool cascadeDelete, string name, object anonymousArguments);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
public abstract class System.Data.Entity.Migrations.DbMigration : object {
    private List`1<MigrationOperation> _operations;
    internal IEnumerable`1<MigrationOperation> Operations { get; }
    public abstract virtual void Up();
    public virtual void Down();
    public void CreateStoredProcedure(string name, string body, object anonymousArguments);
    public void CreateStoredProcedure(string name, Func`2<ParameterBuilder, TParameters> parametersAction, string body, object anonymousArguments);
    public void AlterStoredProcedure(string name, string body, object anonymousArguments);
    public void AlterStoredProcedure(string name, Func`2<ParameterBuilder, TParameters> parametersAction, string body, object anonymousArguments);
    public void DropStoredProcedure(string name, object anonymousArguments);
    protected internal TableBuilder`1<TColumns> CreateTable(string name, Func`2<ColumnBuilder, TColumns> columnsAction, object anonymousArguments);
    protected internal TableBuilder`1<TColumns> CreateTable(string name, Func`2<ColumnBuilder, TColumns> columnsAction, IDictionary`2<string, object> annotations, object anonymousArguments);
    protected internal void AlterTableAnnotations(string name, Func`2<ColumnBuilder, TColumns> columnsAction, IDictionary`2<string, AnnotationValues> annotations, object anonymousArguments);
    private static void AddColumns(TColumns columns, ICollection`1<ColumnModel> columnModels);
    protected internal void AddForeignKey(string dependentTable, string dependentColumn, string principalTable, string principalColumn, bool cascadeDelete, string name, object anonymousArguments);
    protected internal void AddForeignKey(string dependentTable, String[] dependentColumns, string principalTable, String[] principalColumns, bool cascadeDelete, string name, object anonymousArguments);
    protected internal void DropForeignKey(string dependentTable, string name, object anonymousArguments);
    protected internal void DropForeignKey(string dependentTable, string dependentColumn, string principalTable, object anonymousArguments);
    [ObsoleteAttribute("The principalColumn parameter is no longer required and can be removed.")]
protected internal void DropForeignKey(string dependentTable, string dependentColumn, string principalTable, string principalColumn, object anonymousArguments);
    protected internal void DropForeignKey(string dependentTable, String[] dependentColumns, string principalTable, object anonymousArguments);
    protected internal void DropTable(string name, object anonymousArguments);
    protected internal void DropTable(string name, IDictionary`2<string, IDictionary`2<string, object>> removedColumnAnnotations, object anonymousArguments);
    protected internal void DropTable(string name, IDictionary`2<string, object> removedAnnotations, object anonymousArguments);
    protected internal void DropTable(string name, IDictionary`2<string, object> removedAnnotations, IDictionary`2<string, IDictionary`2<string, object>> removedColumnAnnotations, object anonymousArguments);
    protected internal void MoveTable(string name, string newSchema, object anonymousArguments);
    protected internal void MoveStoredProcedure(string name, string newSchema, object anonymousArguments);
    protected internal void RenameTable(string name, string newName, object anonymousArguments);
    protected internal void RenameStoredProcedure(string name, string newName, object anonymousArguments);
    protected internal void RenameColumn(string table, string name, string newName, object anonymousArguments);
    protected internal void AddColumn(string table, string name, Func`2<ColumnBuilder, ColumnModel> columnAction, object anonymousArguments);
    protected internal void DropColumn(string table, string name, object anonymousArguments);
    protected internal void DropColumn(string table, string name, IDictionary`2<string, object> removedAnnotations, object anonymousArguments);
    protected internal void AlterColumn(string table, string name, Func`2<ColumnBuilder, ColumnModel> columnAction, object anonymousArguments);
    protected internal void AddPrimaryKey(string table, string column, string name, bool clustered, object anonymousArguments);
    protected internal void AddPrimaryKey(string table, String[] columns, string name, bool clustered, object anonymousArguments);
    protected internal void DropPrimaryKey(string table, string name, object anonymousArguments);
    protected internal void DropPrimaryKey(string table, object anonymousArguments);
    protected internal void CreateIndex(string table, string column, bool unique, string name, bool clustered, object anonymousArguments);
    protected internal void CreateIndex(string table, String[] columns, bool unique, string name, bool clustered, object anonymousArguments);
    protected internal void DropIndex(string table, string name, object anonymousArguments);
    protected internal void DropIndex(string table, String[] columns, object anonymousArguments);
    protected internal void RenameIndex(string table, string name, string newName, object anonymousArguments);
    protected internal void Sql(string sql, bool suppressTransaction, object anonymousArguments);
    protected internal void SqlFile(string sqlFile, bool suppressTransaction, object anonymousArguments);
    protected internal void SqlResource(string sqlResource, Assembly resourceAssembly, bool suppressTransaction, object anonymousArguments);
    private sealed virtual override void System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(MigrationOperation migrationOperation);
    internal void AddOperation(MigrationOperation migrationOperation);
    internal IEnumerable`1<MigrationOperation> get_Operations();
    internal void Reset();
    internal VersionedModel GetSourceModel();
    internal VersionedModel GetTargetModel();
    private VersionedModel GetModel(Func`2<IMigrationMetadata, string> modelAccessor);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
public class System.Data.Entity.Migrations.DbMigrationsConfiguration : object {
    public static string DefaultMigrationsDirectory;
    private Dictionary`2<string, MigrationSqlGenerator> _sqlGenerators;
    private Dictionary`2<string, Func`3<DbConnection, string, HistoryContext>> _historyContextFactories;
    private MigrationCodeGenerator _codeGenerator;
    private Type _contextType;
    private Assembly _migrationsAssembly;
    private EdmModelDiffer _modelDiffer;
    private DbConnectionInfo _connectionInfo;
    private string _migrationsDirectory;
    private Lazy`1<IDbDependencyResolver> _resolver;
    private string _contextKey;
    private Nullable`1<int> _commandTimeout;
    [CompilerGeneratedAttribute]
private bool <AutomaticMigrationsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticMigrationDataLossAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationsNamespace>k__BackingField;
    public bool AutomaticMigrationsEnabled { get; public set; }
    public string ContextKey { get; public set; }
    public bool AutomaticMigrationDataLossAllowed { get; public set; }
    public Type ContextType { get; public set; }
    public string MigrationsNamespace { get; public set; }
    public string MigrationsDirectory { get; public set; }
    public MigrationCodeGenerator CodeGenerator { get; public set; }
    public Assembly MigrationsAssembly { get; public set; }
    public DbConnectionInfo TargetDatabase { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    internal EdmModelDiffer ModelDiffer { get; internal set; }
    internal DbMigrationsConfiguration(Lazy`1<IDbDependencyResolver> resolver);
    [CompilerGeneratedAttribute]
public bool get_AutomaticMigrationsEnabled();
    [CompilerGeneratedAttribute]
public void set_AutomaticMigrationsEnabled(bool value);
    public string get_ContextKey();
    public void set_ContextKey(string value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticMigrationDataLossAllowed();
    [CompilerGeneratedAttribute]
public void set_AutomaticMigrationDataLossAllowed(bool value);
    public void SetSqlGenerator(string providerInvariantName, MigrationSqlGenerator migrationSqlGenerator);
    public MigrationSqlGenerator GetSqlGenerator(string providerInvariantName);
    public void SetHistoryContextFactory(string providerInvariantName, Func`3<DbConnection, string, HistoryContext> factory);
    public Func`3<DbConnection, string, HistoryContext> GetHistoryContextFactory(string providerInvariantName);
    public Type get_ContextType();
    public void set_ContextType(Type value);
    [CompilerGeneratedAttribute]
public string get_MigrationsNamespace();
    [CompilerGeneratedAttribute]
public void set_MigrationsNamespace(string value);
    public string get_MigrationsDirectory();
    public void set_MigrationsDirectory(string value);
    public MigrationCodeGenerator get_CodeGenerator();
    public void set_CodeGenerator(MigrationCodeGenerator value);
    public Assembly get_MigrationsAssembly();
    public void set_MigrationsAssembly(Assembly value);
    public DbConnectionInfo get_TargetDatabase();
    public void set_TargetDatabase(DbConnectionInfo value);
    public Nullable`1<int> get_CommandTimeout();
    public void set_CommandTimeout(Nullable`1<int> value);
    internal virtual void OnSeed(DbContext context);
    internal EdmModelDiffer get_ModelDiffer();
    internal void set_ModelDiffer(EdmModelDiffer value);
}
public class System.Data.Entity.Migrations.DbMigrationsConfiguration`1 : DbMigrationsConfiguration {
    private static DbMigrationsConfiguration`1();
    protected virtual void Seed(TContext context);
    internal virtual void OnSeed(DbContext context);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [EditorBrowsableAttribute("1")]
protected object MemberwiseClone();
}
public class System.Data.Entity.Migrations.DbMigrator : MigratorBase {
    public static string InitialDatabase;
    private static string DefaultSchemaResourceKey;
    private Lazy`1<XDocument> _emptyModel;
    private DbMigrationsConfiguration _configuration;
    private XDocument _currentModel;
    private DbProviderFactory _providerFactory;
    private HistoryRepository _historyRepository;
    private MigrationAssembly _migrationAssembly;
    private DbContextInfo _usersContextInfo;
    private EdmModelDiffer _modelDiffer;
    private Lazy`1<ModificationCommandTreeGenerator> _modificationCommandTreeGenerator;
    private DbContext _usersContext;
    private Func`3<DbConnection, string, HistoryContext> _historyContextFactory;
    private DbConnection _connection;
    private bool _calledByCreateDatabase;
    private DatabaseExistenceState _existenceState;
    private string _providerManifestToken;
    private string _targetDatabase;
    private string _legacyContextKey;
    private string _defaultSchema;
    private MigrationSqlGenerator _sqlGenerator;
    private bool _emptyMigrationNeeded;
    private bool _committedStatements;
    public DbMigrationsConfiguration Configuration { get; }
    internal string TargetDatabase { get; }
    private MigrationSqlGenerator SqlGenerator { get; }
    internal DbMigrator(DbContext usersContext, DbProviderFactory providerFactory, MigrationAssembly migrationAssembly);
    public DbMigrator(DbMigrationsConfiguration configuration);
    public DbMigrator(DbMigrationsConfiguration configuration, DbContext context);
    internal DbMigrator(DbMigrationsConfiguration configuration, DbContext usersContext, DatabaseExistenceState existenceState, bool calledByCreateDatabase);
    private Lazy`1<XDocument> GetEmptyModel();
    private XDocument GetHistoryModel(string defaultSchema);
    private IEnumerable`1<string> GetHistorySchemas();
    public virtual DbMigrationsConfiguration get_Configuration();
    internal virtual string get_TargetDatabase();
    private MigrationSqlGenerator get_SqlGenerator();
    public virtual IEnumerable`1<string> GetLocalMigrations();
    public virtual IEnumerable`1<string> GetDatabaseMigrations();
    public virtual IEnumerable`1<string> GetPendingMigrations();
    internal ScaffoldedMigration ScaffoldInitialCreate(string namespace);
    internal ScaffoldedMigration Scaffold(string migrationName, string namespace, bool ignoreChanges);
    private void CheckLegacyCompatibility(Action onCompatible);
    public virtual void Update(string targetMigration);
    private void UpdateInternal(string targetMigration);
    internal virtual void UpgradeHistory(IEnumerable`1<MigrationOperation> upgradeOperations);
    internal virtual string GetMigrationId(string migration);
    internal virtual void Upgrade(IEnumerable`1<string> pendingMigrations, string targetMigrationId, string lastMigrationId);
    internal virtual void SeedDatabase();
    internal virtual bool IsModelOutOfDate(XDocument model, DbMigration lastMigration);
    private VersionedModel GetLastModel(DbMigration lastMigration, string currentMigrationId);
    internal virtual void Downgrade(IEnumerable`1<string> pendingMigrations);
    internal virtual void RevertMigration(string migrationId, DbMigration migration, XDocument targetModel);
    internal virtual void ApplyMigration(DbMigration migration, DbMigration lastMigration);
    private static string GetDefaultSchema(DbMigration migration);
    private string GetLastDefaultSchema(string migrationId);
    internal virtual bool HistoryExists();
    internal virtual void AutoMigrate(string migrationId, VersionedModel sourceModel, VersionedModel targetModel, bool downgrading);
    private void ExecuteOperations(string migrationId, VersionedModel targetModel, IEnumerable`1<MigrationOperation> operations, IEnumerable`1<MigrationOperation> systemOperations, bool downgrading, bool auto);
    internal virtual IEnumerable`1<DbQueryCommandTree> CreateDiscoveryQueryTrees();
    internal virtual IEnumerable`1<MigrationStatement> GenerateStatements(IList`1<MigrationOperation> operations, string migrationId);
    internal virtual void ExecuteStatements(IEnumerable`1<MigrationStatement> migrationStatements);
    internal void ExecuteStatements(IEnumerable`1<MigrationStatement> migrationStatements, DbTransaction existingTransaction);
    private void ExecuteStatementsInternal(IEnumerable`1<MigrationStatement> migrationStatements, DbConnection connection);
    private void ExecuteStatementsInternal(IEnumerable`1<MigrationStatement> migrationStatements, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext);
    private void ExecuteStatementsInternal(IEnumerable`1<MigrationStatement> migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext);
    private void ExecuteStatementsWithinTransaction(IEnumerable`1<MigrationStatement> migrationStatements, DbTransaction transaction, DbInterceptionContext interceptionContext);
    private void ExecuteStatementsWithinNewTransaction(IEnumerable`1<MigrationStatement> migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext);
    internal virtual void ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext);
    private InterceptableDbCommand ConfigureCommand(DbCommand command, string commandText, DbInterceptionContext interceptionContext);
    private void FillInForeignKeyOperations(IEnumerable`1<MigrationOperation> operations, XDocument targetModel);
    private string GetStandardizedTableName(string tableName);
    internal virtual void EnsureDatabaseExists(Action mustSucceedToKeepDatabase);
    private DbConnection CreateConnection();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__26_0(Exception e);
    [CompilerGeneratedAttribute]
private XDocument <GetEmptyModel>b__27_0();
    [CompilerGeneratedAttribute]
private <>f__AnonymousType3`2<string, DbMigration> <GetHistorySchemas>b__29_0(string migrationId);
}
[ExtensionAttribute]
public static class System.Data.Entity.Migrations.DbSetMigrationsExtensions : object {
    [ExtensionAttribute]
public static void AddOrUpdate(IDbSet`1<TEntity> set, TEntity[] entities);
    [ExtensionAttribute]
public static void AddOrUpdate(IDbSet`1<TEntity> set, Expression`1<Func`2<TEntity, object>> identifierExpression, TEntity[] entities);
    [ExtensionAttribute]
private static void AddOrUpdate(DbSet`1<TEntity> set, IEnumerable`1<PropertyPath> identifyingProperties, InternalSet`1<TEntity> internalSet, TEntity[] entities);
    private static IEnumerable`1<PropertyPath> GetKeyProperties(Type entityType, InternalSet`1<TEntity> internalSet);
}
public class System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator : MigrationCodeGenerator {
    private IEnumerable`1<Tuple`2<CreateTableOperation, AddForeignKeyOperation>> _newTableForeignKeys;
    private IEnumerable`1<Tuple`2<CreateTableOperation, CreateIndexOperation>> _newTableIndexes;
    public virtual ScaffoldedMigration Generate(string migrationId, IEnumerable`1<MigrationOperation> operations, string sourceModel, string targetModel, string namespace, string className);
    protected virtual string Generate(IEnumerable`1<MigrationOperation> operations, string namespace, string className);
    protected virtual string Generate(string migrationId, string sourceModel, string targetModel, string namespace, string className);
    protected virtual void WriteProperty(string name, string value, IndentedTextWriter writer);
    protected virtual void WriteClassAttributes(IndentedTextWriter writer, bool designer);
    protected virtual void WriteClassStart(string namespace, string className, IndentedTextWriter writer, string base, bool designer, IEnumerable`1<string> namespaces);
    protected virtual void WriteClassEnd(string namespace, IndentedTextWriter writer);
    protected virtual void Generate(AddColumnOperation addColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropColumnOperation dropColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(AlterColumnOperation alterColumnOperation, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotations(IDictionary`2<string, object> annotations, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotations(IDictionary`2<string, AnnotationValues> annotations, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotation(string name, object annotation, IndentedTextWriter writer);
    protected virtual void Generate(CreateProcedureOperation createProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(AlterProcedureOperation alterProcedureOperation, IndentedTextWriter writer);
    private void Generate(ProcedureOperation procedureOperation, string methodName, IndentedTextWriter writer);
    protected virtual void Generate(ParameterModel parameterModel, IndentedTextWriter writer, bool emitName);
    protected virtual void Generate(DropProcedureOperation dropProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(CreateTableOperation createTableOperation, IndentedTextWriter writer);
    protected internal virtual void Generate(AlterTableOperation alterTableOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(AddPrimaryKeyOperation addPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(AddForeignKeyOperation addForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(IEnumerable`1<string> columns, IndentedTextWriter writer);
    protected virtual void Generate(AddPrimaryKeyOperation addPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropPrimaryKeyOperation dropPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(AddForeignKeyOperation addForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropForeignKeyOperation dropForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    private void WriteIndexParameters(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropIndexOperation dropIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(ColumnModel column, IndentedTextWriter writer, bool emitName);
    protected virtual string Generate(Byte[] defaultValue);
    protected virtual string Generate(DateTime defaultValue);
    protected virtual string Generate(DateTimeOffset defaultValue);
    protected virtual string Generate(decimal defaultValue);
    protected virtual string Generate(Guid defaultValue);
    protected virtual string Generate(long defaultValue);
    protected virtual string Generate(float defaultValue);
    protected virtual string Generate(string defaultValue);
    protected virtual string Generate(TimeSpan defaultValue);
    protected virtual string Generate(HierarchyId defaultValue);
    protected virtual string Generate(DbGeography defaultValue);
    protected virtual string Generate(DbGeometry defaultValue);
    protected virtual string Generate(object defaultValue);
    protected virtual void Generate(DropTableOperation dropTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(MoveTableOperation moveTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(MoveProcedureOperation moveProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameTableOperation renameTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameProcedureOperation renameProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameColumnOperation renameColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameIndexOperation renameIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(SqlOperation sqlOperation, IndentedTextWriter writer);
    protected virtual string ScrubName(string name);
    protected virtual string TranslateColumnType(PrimitiveTypeKind primitiveTypeKind);
    protected virtual string Quote(string identifier);
    [CompilerGeneratedAttribute]
private string <Generate>b__25_0(string c);
}
public abstract class System.Data.Entity.Migrations.Design.MigrationCodeGenerator : object {
    private IDictionary`2<string, Func`1<AnnotationCodeGenerator>> _annotationGenerators;
    public IDictionary`2<string, Func`1<AnnotationCodeGenerator>> AnnotationGenerators { get; }
    public abstract virtual ScaffoldedMigration Generate(string migrationId, IEnumerable`1<MigrationOperation> operations, string sourceModel, string targetModel, string namespace, string className);
    private static bool AnnotationsExist(MigrationOperation[] operations);
    protected virtual IEnumerable`1<string> GetNamespaces(IEnumerable`1<MigrationOperation> operations);
    protected virtual IEnumerable`1<string> GetDefaultNamespaces(bool designer);
    public virtual IDictionary`2<string, Func`1<AnnotationCodeGenerator>> get_AnnotationGenerators();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__3_4(IEnumerable`1<string> c, Func`1<AnnotationCodeGenerator> g);
}
public class System.Data.Entity.Migrations.Design.MigrationScaffolder : object {
    private DbMigrator _migrator;
    private string _namespace;
    private bool _namespaceSpecified;
    public string Namespace { get; public set; }
    public MigrationScaffolder(DbMigrationsConfiguration migrationsConfiguration);
    public string get_Namespace();
    public void set_Namespace(string value);
    public virtual ScaffoldedMigration Scaffold(string migrationName);
    public virtual ScaffoldedMigration Scaffold(string migrationName, bool ignoreChanges);
    public virtual ScaffoldedMigration ScaffoldInitialCreate();
}
public class System.Data.Entity.Migrations.Design.ScaffoldedMigration : object {
    private string _migrationId;
    private string _userCode;
    private string _designerCode;
    private string _language;
    private string _directory;
    private Dictionary`2<string, object> _resources;
    [CompilerGeneratedAttribute]
private bool <IsRescaffold>k__BackingField;
    public string MigrationId { get; public set; }
    public string UserCode { get; public set; }
    public string DesignerCode { get; public set; }
    public string Language { get; public set; }
    public string Directory { get; public set; }
    public IDictionary`2<string, object> Resources { get; }
    public bool IsRescaffold { get; public set; }
    public string get_MigrationId();
    public void set_MigrationId(string value);
    public string get_UserCode();
    public void set_UserCode(string value);
    public string get_DesignerCode();
    public void set_DesignerCode(string value);
    public string get_Language();
    public void set_Language(string value);
    public string get_Directory();
    public void set_Directory(string value);
    public IDictionary`2<string, object> get_Resources();
    [CompilerGeneratedAttribute]
public bool get_IsRescaffold();
    [CompilerGeneratedAttribute]
public void set_IsRescaffold(bool value);
}
[ObsoleteAttribute("Use System.Data.Entity.Infrastructure.Design.IErrorHandler instead.")]
public class System.Data.Entity.Migrations.Design.ToolingException : Exception {
    private ToolingExceptionState _state;
    public string InnerType { get; }
    public string InnerStackTrace { get; }
    public ToolingException(string message);
    public ToolingException(string message, string innerType, string innerStackTrace);
    public ToolingException(string message, Exception innerException);
    public string get_InnerType();
    public string get_InnerStackTrace();
    private void SubscribeToSerializeObjectState();
    [CompilerGeneratedAttribute]
private void <SubscribeToSerializeObjectState>b__9_0(object _, SafeSerializationEventArgs a);
}
[ObsoleteAttribute("Use System.Data.Entity.Infrastructure.Design.Executor instead.")]
public class System.Data.Entity.Migrations.Design.ToolingFacade : object {
    private string _migrationsAssemblyName;
    private string _contextAssemblyName;
    private string _configurationTypeName;
    private string _configurationFile;
    private DbConnectionInfo _connectionStringInfo;
    private AppDomain _appDomain;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogInfoDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogWarningDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogVerboseDelegate>k__BackingField;
    public Action`1<string> LogInfoDelegate { get; public set; }
    public Action`1<string> LogWarningDelegate { get; public set; }
    public Action`1<string> LogVerboseDelegate { get; public set; }
    public ToolingFacade(string migrationsAssemblyName, string contextAssemblyName, string configurationTypeName, string workingDirectory, string configurationFilePath, string dataDirectory, DbConnectionInfo connectionStringInfo);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogInfoDelegate();
    [CompilerGeneratedAttribute]
public void set_LogInfoDelegate(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogWarningDelegate();
    [CompilerGeneratedAttribute]
public void set_LogWarningDelegate(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogVerboseDelegate();
    [CompilerGeneratedAttribute]
public void set_LogVerboseDelegate(Action`1<string> value);
    protected virtual override void Finalize();
    public IEnumerable`1<string> GetContextTypes();
    public string GetContextType(string contextTypeName);
    public virtual IEnumerable`1<string> GetDatabaseMigrations();
    public virtual IEnumerable`1<string> GetPendingMigrations();
    public void Update(string targetMigration, bool force);
    public string ScriptUpdate(string sourceMigration, string targetMigration, bool force);
    public virtual ScaffoldedMigration Scaffold(string migrationName, string language, string rootNamespace, bool ignoreChanges);
    public ScaffoldedMigration ScaffoldInitialCreate(string language, string rootNamespace);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ConfigureRunner(BaseRunner runner);
    private void Run(BaseRunner runner);
}
public class System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator : MigrationCodeGenerator {
    private IEnumerable`1<Tuple`2<CreateTableOperation, AddForeignKeyOperation>> _newTableForeignKeys;
    private IEnumerable`1<Tuple`2<CreateTableOperation, CreateIndexOperation>> _newTableIndexes;
    public virtual ScaffoldedMigration Generate(string migrationId, IEnumerable`1<MigrationOperation> operations, string sourceModel, string targetModel, string namespace, string className);
    protected virtual string Generate(IEnumerable`1<MigrationOperation> operations, string namespace, string className);
    protected virtual string Generate(string migrationId, string sourceModel, string targetModel, string namespace, string className);
    protected virtual void WriteProperty(string name, string value, IndentedTextWriter writer);
    protected virtual void WriteClassAttributes(IndentedTextWriter writer, bool designer);
    protected virtual void WriteClassStart(string namespace, string className, IndentedTextWriter writer, string base, bool designer, IEnumerable`1<string> namespaces);
    protected virtual void WriteClassEnd(string namespace, IndentedTextWriter writer);
    protected virtual void Generate(AddColumnOperation addColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropColumnOperation dropColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(AlterColumnOperation alterColumnOperation, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotations(IDictionary`2<string, object> annotations, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotations(IDictionary`2<string, AnnotationValues> annotations, IndentedTextWriter writer);
    protected internal virtual void GenerateAnnotation(string name, object annotation, IndentedTextWriter writer);
    protected virtual void Generate(CreateProcedureOperation createProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(AlterProcedureOperation alterProcedureOperation, IndentedTextWriter writer);
    private void Generate(ProcedureOperation procedureOperation, string methodName, IndentedTextWriter writer);
    protected virtual void Generate(ParameterModel parameterModel, IndentedTextWriter writer, bool emitName);
    protected virtual void Generate(DropProcedureOperation dropProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(CreateTableOperation createTableOperation, IndentedTextWriter writer);
    protected internal virtual void Generate(AlterTableOperation alterTableOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(AddPrimaryKeyOperation addPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(AddForeignKeyOperation addForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void GenerateInline(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(IEnumerable`1<string> columns, IndentedTextWriter writer);
    protected virtual void Generate(AddForeignKeyOperation addForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropForeignKeyOperation dropForeignKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(AddPrimaryKeyOperation addPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropPrimaryKeyOperation dropPrimaryKeyOperation, IndentedTextWriter writer);
    protected virtual void Generate(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    private void WriteIndexParameters(CreateIndexOperation createIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(DropIndexOperation dropIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(ColumnModel column, IndentedTextWriter writer, bool emitName);
    protected virtual string Generate(Byte[] defaultValue);
    protected virtual string Generate(DateTime defaultValue);
    protected virtual string Generate(DateTimeOffset defaultValue);
    protected virtual string Generate(decimal defaultValue);
    protected virtual string Generate(Guid defaultValue);
    protected virtual string Generate(long defaultValue);
    protected virtual string Generate(float defaultValue);
    protected virtual string Generate(string defaultValue);
    protected virtual string Generate(TimeSpan defaultValue);
    protected virtual string Generate(HierarchyId defaultValue);
    protected virtual string Generate(DbGeography defaultValue);
    protected virtual string Generate(DbGeometry defaultValue);
    protected virtual string Generate(object defaultValue);
    protected virtual void Generate(DropTableOperation dropTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(MoveTableOperation moveTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(MoveProcedureOperation moveProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameTableOperation renameTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameProcedureOperation renameProcedureOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameColumnOperation renameColumnOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameIndexOperation renameIndexOperation, IndentedTextWriter writer);
    protected virtual void Generate(SqlOperation sqlOperation, IndentedTextWriter writer);
    protected virtual string ScrubName(string name);
    protected virtual string TranslateColumnType(PrimitiveTypeKind primitiveTypeKind);
    protected virtual string Quote(string identifier);
    [CompilerGeneratedAttribute]
private string <Generate>b__25_0(string c);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Migrations.Edm.EdmXNames : object {
    private static XNamespace _csdlNamespaceV2;
    private static XNamespace _mslNamespaceV2;
    private static XNamespace _ssdlNamespaceV2;
    private static XNamespace _csdlNamespaceV3;
    private static XNamespace _mslNamespaceV3;
    private static XNamespace _ssdlNamespaceV3;
    private static EdmXNames();
    [ExtensionAttribute]
public static string ActionAttribute(XElement element);
    [ExtensionAttribute]
public static string ColumnNameAttribute(XElement element);
    [ExtensionAttribute]
public static string EntitySetAttribute(XElement element);
    [ExtensionAttribute]
public static string NameAttribute(XElement element);
    [ExtensionAttribute]
public static string NamespaceAttribute(XElement element);
    [ExtensionAttribute]
public static string EntityTypeAttribute(XElement element);
    [ExtensionAttribute]
public static string FromRoleAttribute(XElement element);
    [ExtensionAttribute]
public static string ToRoleAttribute(XElement element);
    [ExtensionAttribute]
public static string NullableAttribute(XElement element);
    [ExtensionAttribute]
public static string MaxLengthAttribute(XElement element);
    [ExtensionAttribute]
public static string MultiplicityAttribute(XElement element);
    [ExtensionAttribute]
public static string FixedLengthAttribute(XElement element);
    [ExtensionAttribute]
public static string PrecisionAttribute(XElement element);
    [ExtensionAttribute]
public static string ProviderAttribute(XElement element);
    [ExtensionAttribute]
public static string ProviderManifestTokenAttribute(XElement element);
    [ExtensionAttribute]
public static string RelationshipAttribute(XElement element);
    [ExtensionAttribute]
public static string ScaleAttribute(XElement element);
    [ExtensionAttribute]
public static string StoreGeneratedPatternAttribute(XElement element);
    [ExtensionAttribute]
public static string UnicodeAttribute(XElement element);
    [ExtensionAttribute]
public static string RoleAttribute(XElement element);
    [ExtensionAttribute]
public static string SchemaAttribute(XElement element);
    [ExtensionAttribute]
public static string StoreEntitySetAttribute(XElement element);
    [ExtensionAttribute]
public static string TableAttribute(XElement element);
    [ExtensionAttribute]
public static string TypeAttribute(XElement element);
    [ExtensionAttribute]
public static string TypeNameAttribute(XElement element);
    [ExtensionAttribute]
public static string ValueAttribute(XElement element);
}
internal class System.Data.Entity.Migrations.Edm.ModelCompressor : object {
    public virtual Byte[] Compress(XDocument model);
    public virtual XDocument Decompress(Byte[] bytes);
}
public class System.Data.Entity.Migrations.History.HistoryContext : DbContext {
    public static string DefaultTableName;
    internal static int ContextKeyMaxLength;
    internal static int MigrationIdMaxLength;
    private string _defaultSchema;
    internal static Func`3<DbConnection, string, HistoryContext> DefaultFactory;
    [CompilerGeneratedAttribute]
private IDbSet`1<HistoryRow> <History>k__BackingField;
    public string CacheKey { get; }
    protected string DefaultSchema { get; }
    public IDbSet`1<HistoryRow> History { get; public set; }
    public HistoryContext(DbConnection existingConnection, string defaultSchema);
    private static HistoryContext();
    public virtual string get_CacheKey();
    protected string get_DefaultSchema();
    [CompilerGeneratedAttribute]
public virtual IDbSet`1<HistoryRow> get_History();
    [CompilerGeneratedAttribute]
public virtual void set_History(IDbSet`1<HistoryRow> value);
    protected virtual void OnModelCreating(DbModelBuilder modelBuilder);
}
internal class System.Data.Entity.Migrations.History.HistoryRepository : RepositoryBase {
    private static string _productVersion;
    public static PropertyInfo MigrationIdProperty;
    public static PropertyInfo ContextKeyProperty;
    private string _contextKey;
    private Nullable`1<int> _commandTimeout;
    private IEnumerable`1<string> _schemas;
    private Func`3<DbConnection, string, HistoryContext> _historyContextFactory;
    private DbContext _contextForInterception;
    private int _contextKeyMaxLength;
    private int _migrationIdMaxLength;
    private DatabaseExistenceState _initialExistence;
    private Func`2<Exception, bool> _permissionDeniedDetector;
    private DbTransaction _existingTransaction;
    private string _currentSchema;
    private Nullable`1<bool> _exists;
    private bool _contextKeyColumnExists;
    public int ContextKeyMaxLength { get; }
    public int MigrationIdMaxLength { get; }
    public string CurrentSchema { get; public set; }
    public HistoryRepository(InternalContext usersContext, string connectionString, DbProviderFactory providerFactory, string contextKey, Nullable`1<int> commandTimeout, Func`3<DbConnection, string, HistoryContext> historyContextFactory, IEnumerable`1<string> schemas, DbContext contextForInterception, DatabaseExistenceState initialExistence, Func`2<Exception, bool> permissionDeniedDetector);
    private static HistoryRepository();
    public int get_ContextKeyMaxLength();
    public int get_MigrationIdMaxLength();
    public string get_CurrentSchema();
    public void set_CurrentSchema(string value);
    public virtual XDocument GetLastModel(String& migrationId, String& productVersion, string contextKey);
    public virtual XDocument GetModel(string migrationId, String& productVersion);
    public virtual IEnumerable`1<string> GetPendingMigrations(IEnumerable`1<string> localMigrations);
    public virtual IEnumerable`1<string> GetMigrationsSince(string migrationId);
    public virtual string GetMigrationId(string migrationName);
    private IQueryable`1<HistoryRow> CreateHistoryQuery(HistoryContext context, string contextKey);
    public virtual bool IsShared();
    public virtual bool HasMigrations();
    public virtual bool Exists(string contextKey);
    private bool QueryExists(string contextKey);
    public virtual void ResetExists();
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.History.HistoryRepository/<GetUpgradeOperations>d__35")]
public virtual IEnumerable`1<MigrationOperation> GetUpgradeOperations();
    public virtual MigrationOperation CreateInsertOperation(string migrationId, VersionedModel versionedModel);
    public virtual MigrationOperation CreateDeleteOperation(string migrationId);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.History.HistoryRepository/<CreateDiscoveryQueryTrees>d__38")]
public virtual IEnumerable`1<DbQueryCommandTree> CreateDiscoveryQueryTrees();
    public virtual void BootstrapUsingEFProviderDdl(VersionedModel versionedModel);
    public HistoryContext CreateContext(DbConnection connection, string schema);
    private void InjectInterceptionContext(DbContext context);
    [CompilerGeneratedAttribute]
private string <GetPendingMigrations>b__26_0(string m);
}
public class System.Data.Entity.Migrations.History.HistoryRow : object {
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    public string MigrationId { get; public set; }
    public string ContextKey { get; public set; }
    public Byte[] Model { get; public set; }
    public string ProductVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MigrationId();
    [CompilerGeneratedAttribute]
public void set_MigrationId(string value);
    [CompilerGeneratedAttribute]
public string get_ContextKey();
    [CompilerGeneratedAttribute]
public void set_ContextKey(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(string value);
}
internal class System.Data.Entity.Migrations.History.LegacyHistoryContext : DbContext {
    [CompilerGeneratedAttribute]
private IDbSet`1<LegacyHistoryRow> <History>k__BackingField;
    public IDbSet`1<LegacyHistoryRow> History { get; public set; }
    public LegacyHistoryContext(DbConnection existingConnection);
    [CompilerGeneratedAttribute]
public IDbSet`1<LegacyHistoryRow> get_History();
    [CompilerGeneratedAttribute]
public void set_History(IDbSet`1<LegacyHistoryRow> value);
}
[TableAttribute("__MigrationHistory")]
internal class System.Data.Entity.Migrations.History.LegacyHistoryRow : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedOn>k__BackingField;
    public int Id { get; public set; }
    public DateTime CreatedOn { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedOn();
    [CompilerGeneratedAttribute]
public void set_CreatedOn(DateTime value);
}
public class System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException : MigrationsException {
    public AutomaticDataLossException(string message);
    public AutomaticDataLossException(string message, Exception innerException);
    private AutomaticDataLossException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException : MigrationsException {
    public AutomaticMigrationsDisabledException(string message);
    public AutomaticMigrationsDisabledException(string message, Exception innerException);
    private AutomaticMigrationsDisabledException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Entity.Migrations.Infrastructure.DynamicToFunctionModificationCommandConverter : DefaultExpressionVisitor {
    private EntityTypeModificationFunctionMapping _entityTypeModificationFunctionMapping;
    private AssociationSetModificationFunctionMapping _associationSetModificationFunctionMapping;
    private EntityContainerMapping _entityContainerMapping;
    private ModificationFunctionMapping _currentFunctionMapping;
    private EdmProperty _currentProperty;
    private List`1<EdmProperty> _storeGeneratedKeys;
    private int _nextStoreGeneratedKey;
    private bool _useOriginalValues;
    public DynamicToFunctionModificationCommandConverter(EntityTypeModificationFunctionMapping entityTypeModificationFunctionMapping, EntityContainerMapping entityContainerMapping);
    public DynamicToFunctionModificationCommandConverter(AssociationSetModificationFunctionMapping associationSetModificationFunctionMapping, EntityContainerMapping entityContainerMapping);
    public IEnumerable`1<TCommandTree> Convert(IEnumerable`1<TCommandTree> modificationCommandTrees);
    private DbModificationCommandTree ConvertInternal(DbInsertCommandTree commandTree);
    private DbModificationCommandTree ConvertInternal(DbUpdateCommandTree commandTree);
    private DbModificationCommandTree ConvertInternal(DbDeleteCommandTree commandTree);
    private ReadOnlyCollection`1<DbModificationClause> VisitSetClauses(IList`1<DbModificationClause> setClauses);
    public virtual DbExpression Visit(DbComparisonExpression expression);
    public virtual DbExpression Visit(DbPropertyExpression expression);
    public virtual DbExpression Visit(DbConstantExpression expression);
    public virtual DbExpression Visit(DbAndExpression expression);
    public virtual DbExpression Visit(DbIsNullExpression expression);
    public virtual DbExpression Visit(DbNullExpression expression);
    public virtual DbExpression Visit(DbNewInstanceExpression expression);
    private Tuple`2<FunctionParameter, bool> GetParameter(EdmProperty column, bool originalValue);
    [CompilerGeneratedAttribute]
private object <Convert>b__10_0(TCommandTree modificationCommandTree);
    [CompilerGeneratedAttribute]
private DbSetClause <VisitSetClauses>b__14_0(DbSetClause s);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType10`2<DbPropertyExpression, ModificationFunctionResultBinding> <Visit>b__21_0(DbPropertyExpression propertyExpression);
}
internal class System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer : object {
    private static PrimitiveTypeKind[] _validIdentityTypes;
    private static DynamicEqualityComparer`1<ForeignKeyOperation> _foreignKeyEqualityComparer;
    private static DynamicEqualityComparer`1<IndexOperation> _indexEqualityComparer;
    private ModelMetadata _source;
    private ModelMetadata _target;
    private static EdmModelDiffer();
    public ICollection`1<MigrationOperation> Diff(XDocument sourceModel, XDocument targetModel, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator, string sourceModelVersion, string targetModelVersion);
    private ICollection`1<MigrationOperation> Diff(ModelMetadata source, ModelMetadata target, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator, string sourceModelVersion, string targetModelVersion);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<BuildLegacyIndexes>d__8")]
private static IEnumerable`1<ConsolidatedIndex> BuildLegacyIndexes(ModelMetadata modelMetadata);
    private IEnumerable`1<Tuple`2<EntityType, EntityType>> FindEntityTypePairs();
    private static bool FuzzyMatchEntities(EntityType entityType1, EntityType entityType2);
    private static bool SourceAndTargetMatch(EntityType sourceEntityType, EntityTypeMapping sourceEntityTypeMapping, EntityType targetEntityType, EntityTypeMapping targetEntityTypeMapping);
    private static bool MappingTypesAreIdentical(EntityTypeMapping sourceEntityTypeMapping, EntityTypeMapping targetEntityTypeMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<FindMappingFragmentPairs>d__13")]
private IEnumerable`1<Tuple`2<MappingFragment, MappingFragment>> FindMappingFragmentPairs(ICollection`1<Tuple`2<EntityType, EntityType>> entityTypePairs);
    private IEnumerable`1<Tuple`2<AssociationType, AssociationType>> FindAssociationTypePairs(ICollection`1<Tuple`2<EntityType, EntityType>> entityTypePairs);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<GetStoreAssociationTypePairs>d__15")]
private IEnumerable`1<Tuple`2<AssociationType, AssociationType>> GetStoreAssociationTypePairs(AssociationType conceptualAssociationType1, AssociationType conceptualAssociationType2, ICollection`1<Tuple`2<EntityType, EntityType>> entityTypePairs);
    private IEnumerable`1<Tuple`2<AssociationType, AssociationType>> FindStoreOnlyAssociationTypePairs(ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs, ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private static string GetStoreAssociationIdentity(string associationName);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<FindTablePairs>d__18")]
private IEnumerable`1<Tuple`2<EntitySet, EntitySet>> FindTablePairs(ICollection`1<Tuple`2<MappingFragment, MappingFragment>> mappingFragmentPairs, ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs);
    private static IEnumerable`1<RenameTableOperation> HandleTransitiveRenameDependencies(IList`1<RenameTableOperation> renameTableOperations);
    private static IEnumerable`1<RenameColumnOperation> HandleTransitiveRenameDependencies(IList`1<RenameColumnOperation> renameColumnOperations);
    private static IEnumerable`1<RenameIndexOperation> HandleTransitiveRenameDependencies(IList`1<RenameIndexOperation> renameIndexOperations);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<HandleTransitiveRenameDependencies>d__22`1")]
private static IEnumerable`1<T> HandleTransitiveRenameDependencies(IList`1<T> renameOperations, Func`3<T, T, bool> dependencyFinder, Func`3<string, T, T> renameCreator, Action`2<T, string> setNewName);
    private IEnumerable`1<MoveProcedureOperation> FindMovedModificationFunctions();
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctionSchemas>d__24")]
private static IEnumerable`1<MoveProcedureOperation> DiffModificationFunctionSchemas(EntityTypeModificationFunctionMapping sourceModificationFunctionMapping, EntityTypeModificationFunctionMapping targetModificationFunctionMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctionSchemas>d__25")]
private static IEnumerable`1<MoveProcedureOperation> DiffModificationFunctionSchemas(AssociationSetModificationFunctionMapping sourceModificationFunctionMapping, AssociationSetModificationFunctionMapping targetModificationFunctionMapping);
    private IEnumerable`1<CreateProcedureOperation> FindAddedModificationFunctions(Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private IEnumerable`1<RenameProcedureOperation> FindRenamedModificationFunctions();
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctionNames>d__28")]
private static IEnumerable`1<RenameProcedureOperation> DiffModificationFunctionNames(AssociationSetModificationFunctionMapping sourceModificationFunctionMapping, AssociationSetModificationFunctionMapping targetModificationFunctionMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctionNames>d__29")]
private static IEnumerable`1<RenameProcedureOperation> DiffModificationFunctionNames(EntityTypeModificationFunctionMapping sourceModificationFunctionMapping, EntityTypeModificationFunctionMapping targetModificationFunctionMapping);
    private static string GetSchemaQualifiedName(string table, string schema);
    private IEnumerable`1<AlterProcedureOperation> FindAlteredModificationFunctions(Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctions>d__32")]
private IEnumerable`1<AlterProcedureOperation> DiffModificationFunctions(AssociationSetModificationFunctionMapping sourceModificationFunctionMapping, AssociationSetModificationFunctionMapping targetModificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<DiffModificationFunctions>d__33")]
private IEnumerable`1<AlterProcedureOperation> DiffModificationFunctions(EntityTypeModificationFunctionMapping sourceModificationFunctionMapping, EntityTypeModificationFunctionMapping targetModificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateInsertFunctionBody(EntityTypeModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateInsertFunctionBody(AssociationSetModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateUpdateFunctionBody(EntityTypeModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateDeleteFunctionBody(EntityTypeModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateDeleteFunctionBody(AssociationSetModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private string GenerateFunctionBody(EntityTypeModificationFunctionMapping modificationFunctionMapping, Func`3<ModificationCommandTreeGenerator, string, IEnumerable`1<TCommandTree>> treeGenerator, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator, string functionName, string rowsAffectedParameterName);
    private string GenerateFunctionBody(AssociationSetModificationFunctionMapping modificationFunctionMapping, Func`3<ModificationCommandTreeGenerator, string, IEnumerable`1<TCommandTree>> treeGenerator, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator, string rowsAffectedParameterName);
    private string GenerateFunctionBody(MigrationSqlGenerator migrationSqlGenerator, string rowsAffectedParameterName, TCommandTree[] commandTrees);
    private bool DiffModificationFunction(ModificationFunctionMapping functionMapping1, ModificationFunctionMapping functionMapping2);
    private bool DiffParameterBinding(ModificationFunctionParameterBinding parameterBinding1, ModificationFunctionParameterBinding parameterBinding2);
    private static bool DiffResultBinding(ModificationFunctionResultBinding resultBinding1, ModificationFunctionResultBinding resultBinding2);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<BuildCreateProcedureOperations>d__45")]
private IEnumerable`1<CreateProcedureOperation> BuildCreateProcedureOperations(EntityTypeModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<BuildCreateProcedureOperations>d__46")]
private IEnumerable`1<CreateProcedureOperation> BuildCreateProcedureOperations(AssociationSetModificationFunctionMapping modificationFunctionMapping, Lazy`1<ModificationCommandTreeGenerator> modificationCommandTreeGenerator, MigrationSqlGenerator migrationSqlGenerator);
    private CreateProcedureOperation BuildCreateProcedureOperation(EdmFunction function, string bodySql);
    private AlterProcedureOperation BuildAlterProcedureOperation(EdmFunction function, string bodySql);
    private static ParameterModel BuildParameterModel(FunctionParameter functionParameter, ModelMetadata modelMetadata);
    private IEnumerable`1<DropProcedureOperation> FindDroppedModificationFunctions();
    private static IEnumerable`1<RenameTableOperation> FindRenamedTables(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private IEnumerable`1<CreateTableOperation> FindAddedTables(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private IEnumerable`1<MoveTableOperation> FindMovedTables(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private IEnumerable`1<DropTableOperation> FindDroppedTables(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private IEnumerable`1<AlterTableOperation> FindAlteredTables(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private AlterTableOperation BuildAlterTableAnnotationsOperation(EntitySet sourceTable, EntitySet destinationTable);
    internal static Dictionary`2<string, object> GetAnnotations(MetadataItem item);
    internal static IndexAttribute GetPrimaryKeyIndexAttribute(EntityType entityType);
    private IEnumerable`1<MigrationOperation> FindAlteredPrimaryKeys(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs, ICollection`1<RenameColumnOperation> renamedColumns, ICollection`1<AlterColumnOperation> alteredColumns);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer/<BuildChangePrimaryKeyOperations>d__60")]
private IEnumerable`1<MigrationOperation> BuildChangePrimaryKeyOperations(Tuple`2<EntitySet, EntitySet> tablePair);
    private IEnumerable`1<AddForeignKeyOperation> FindAddedForeignKeys(ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private IEnumerable`1<DropForeignKeyOperation> FindDroppedForeignKeys(ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private bool DiffAssociations(ReferentialConstraint referentialConstraint1, ReferentialConstraint referentialConstraint2, ICollection`1<RenameColumnOperation> renamedColumns);
    private static AddForeignKeyOperation BuildAddForeignKeyOperation(ReferentialConstraint referentialConstraint, ModelMetadata modelMetadata);
    private static DropForeignKeyOperation BuildDropForeignKeyOperation(ReferentialConstraint referentialConstraint, ModelMetadata modelMetadata);
    private static void BuildForeignKeyOperation(ReferentialConstraint referentialConstraint, ForeignKeyOperation foreignKeyOperation, ModelMetadata modelMetadata);
    private IEnumerable`1<AddColumnOperation> FindAddedColumns(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private IEnumerable`1<DropColumnOperation> FindDroppedColumns(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private IEnumerable`1<DropColumnOperation> FindOrphanedColumns(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private IEnumerable`1<AlterColumnOperation> FindAlteredColumns(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs, ICollection`1<RenameColumnOperation> renamedColumns);
    private IEnumerable`1<ConsolidatedIndex> FindSourceIndexes(ICollection`1<Tuple`2<EntitySet, EntitySet>> tablePairs);
    private IEnumerable`1<ConsolidatedIndex> FindTargetIndexes();
    private static IEnumerable`1<CreateIndexOperation> FindAddedIndexes(ICollection`1<ConsolidatedIndex> sourceIndexes, ICollection`1<ConsolidatedIndex> targetIndexes, ICollection`1<AlterColumnOperation> alteredColumns, ICollection`1<RenameColumnOperation> renamedColumns);
    private static IEnumerable`1<DropIndexOperation> FindDroppedIndexes(ICollection`1<ConsolidatedIndex> sourceIndexes, ICollection`1<ConsolidatedIndex> targetIndexes, ICollection`1<AlterColumnOperation> alteredColumns, ICollection`1<RenameColumnOperation> renamedColumns);
    private static bool IndexesEqual(ConsolidatedIndex consolidatedIndex1, ConsolidatedIndex consolidatedIndex2, ICollection`1<RenameColumnOperation> renamedColumns);
    private static IEnumerable`1<RenameIndexOperation> FindRenamedIndexes(ICollection`1<CreateIndexOperation> addedIndexes, ICollection`1<DropIndexOperation> droppedIndexes, ICollection`1<AlterColumnOperation> alteredColumns, ICollection`1<RenameColumnOperation> renamedColumns);
    private bool DiffColumns(EdmProperty column1, EdmProperty column2);
    private AlterColumnOperation BuildAlterColumnOperation(string table, EdmProperty targetProperty, ModelMetadata targetModelMetadata, EdmProperty sourceProperty, ModelMetadata sourceModelMetadata);
    private static IDictionary`2<string, AnnotationValues> BuildAnnotationPairs(IDictionary`2<string, object> rawSourceAnnotations, IDictionary`2<string, object> rawTargetAnnotations);
    private IEnumerable`1<RenameColumnOperation> FindRenamedColumns(ICollection`1<Tuple`2<MappingFragment, MappingFragment>> mappingFragmentPairs, ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs);
    private static IEnumerable`1<RenameColumnOperation> FindRenamedMappedColumns(ICollection`1<Tuple`2<MappingFragment, MappingFragment>> mappingFragmentPairs);
    private static IEnumerable`1<RenameColumnOperation> FindRenamedMappedColumns(MappingFragment mappingFragment1, MappingFragment mappingFragment2, string table);
    private IEnumerable`1<RenameColumnOperation> FindRenamedForeignKeyColumns(ICollection`1<Tuple`2<AssociationType, AssociationType>> associationTypePairs);
    private static IEnumerable`1<RenameColumnOperation> FindRenamedDiscriminatorColumns(ICollection`1<Tuple`2<MappingFragment, MappingFragment>> mappingFragmentPairs);
    private static IEnumerable`1<RenameColumnOperation> FindRenamedDiscriminatorColumns(MappingFragment mappingFragment1, MappingFragment mappingFragment2, string table);
    private static CreateTableOperation BuildCreateTableOperation(EntitySet entitySet, ModelMetadata modelMetadata);
    private static ColumnModel BuildColumnModel(EdmProperty property, ModelMetadata modelMetadata, IDictionary`2<string, AnnotationValues> annotations);
    public static ColumnModel BuildColumnModel(EdmProperty property, TypeUsage conceptualTypeUsage, TypeUsage defaultStoreTypeUsage, IDictionary`2<string, AnnotationValues> annotations);
    private static DbProviderManifest GetProviderManifest(DbProviderInfo providerInfo);
    private static string GetSchemaQualifiedName(EntitySet entitySet);
    private static string GetSchemaQualifiedName(EdmFunction function);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntitySetMapping> <FindMovedModificationFunctions>b__23_2(<>f__AnonymousType23`2<EntitySetMapping, EntityTypeModificationFunctionMapping> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private IEnumerable`1<AssociationSetMapping> <FindMovedModificationFunctions>b__23_10(AssociationSetMapping asm1);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntitySetMapping> <FindRenamedModificationFunctions>b__27_2(<>f__AnonymousType23`2<EntitySetMapping, EntityTypeModificationFunctionMapping> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private IEnumerable`1<AssociationSetMapping> <FindRenamedModificationFunctions>b__27_10(AssociationSetMapping asm1);
    [CompilerGeneratedAttribute]
private bool <FindDroppedModificationFunctions>b__50_2(<>f__AnonymousType23`2<EntitySetMapping, EntityTypeModificationFunctionMapping> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <FindDroppedModificationFunctions>b__50_6(AssociationSetMapping asm1);
    [CompilerGeneratedAttribute]
private CreateTableOperation <FindAddedTables>b__52_1(EntitySet es);
    [CompilerGeneratedAttribute]
private MoveTableOperation <FindMovedTables>b__53_1(Tuple`2<EntitySet, EntitySet> p);
    [CompilerGeneratedAttribute]
private DropTableOperation <FindDroppedTables>b__54_1(EntitySet es);
    [CompilerGeneratedAttribute]
private AlterTableOperation <FindAlteredTables>b__55_1(Tuple`2<EntitySet, EntitySet> p);
    [CompilerGeneratedAttribute]
private RenameColumnOperation <FindRenamedForeignKeyColumns>b__83_5(<>f__AnonymousType45`2<<>f__AnonymousType44`2<<>f__AnonymousType43`2<Tuple`2<AssociationType, AssociationType>, ReferentialConstraint>, ReferentialConstraint>, KeyValuePair`2<EdmProperty, EdmProperty>> <>h__TransparentIdentifier2);
}
public interface System.Data.Entity.Migrations.Infrastructure.IDbMigration {
    public abstract virtual void AddOperation(MigrationOperation migrationOperation);
}
public interface System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata {
    public string Id { get; }
    public string Source { get; }
    public string Target { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Source();
    public abstract virtual string get_Target();
}
internal class System.Data.Entity.Migrations.Infrastructure.MigrationAssembly : object {
    private IList`1<IMigrationMetadata> _migrations;
    public IEnumerable`1<string> MigrationIds { get; }
    public MigrationAssembly(Assembly migrationsAssembly, string migrationsNamespace);
    public static string CreateMigrationId(string migrationName);
    public static string CreateBootstrapMigrationId();
    public virtual IEnumerable`1<string> get_MigrationIds();
    public virtual string UniquifyName(string migrationName);
    public virtual DbMigration GetMigration(string migrationId);
}
public class System.Data.Entity.Migrations.Infrastructure.MigrationsException : Exception {
    public MigrationsException(string message);
    public MigrationsException(string message, Exception innerException);
    protected MigrationsException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Data.Entity.Migrations.Infrastructure.MigrationsLogger : MarshalByRefObject {
    public abstract virtual void Info(string message);
    public abstract virtual void Warning(string message);
    public abstract virtual void Verbose(string message);
}
public class System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException : MigrationsException {
    public MigrationsPendingException(string message);
    public MigrationsPendingException(string message, Exception innerException);
    private MigrationsPendingException(SerializationInfo info, StreamingContext context);
}
[DebuggerStepThroughAttribute]
public abstract class System.Data.Entity.Migrations.Infrastructure.MigratorBase : object {
    private MigratorBase _this;
    public DbMigrationsConfiguration Configuration { get; }
    internal string TargetDatabase { get; }
    protected MigratorBase(MigratorBase innerMigrator);
    public virtual IEnumerable`1<string> GetPendingMigrations();
    public virtual DbMigrationsConfiguration get_Configuration();
    public void Update();
    public virtual void Update(string targetMigration);
    internal virtual string GetMigrationId(string migration);
    public virtual IEnumerable`1<string> GetLocalMigrations();
    public virtual IEnumerable`1<string> GetDatabaseMigrations();
    internal virtual void AutoMigrate(string migrationId, VersionedModel sourceModel, VersionedModel targetModel, bool downgrading);
    internal virtual void ApplyMigration(DbMigration migration, DbMigration lastMigration);
    internal virtual void EnsureDatabaseExists(Action mustSucceedToKeepDatabase);
    internal virtual void RevertMigration(string migrationId, DbMigration migration, XDocument targetModel);
    internal virtual void SeedDatabase();
    internal virtual void ExecuteStatements(IEnumerable`1<MigrationStatement> migrationStatements);
    internal virtual IEnumerable`1<MigrationStatement> GenerateStatements(IList`1<MigrationOperation> operations, string migrationId);
    internal virtual IEnumerable`1<DbQueryCommandTree> CreateDiscoveryQueryTrees();
    internal virtual void ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext);
    internal virtual void Upgrade(IEnumerable`1<string> pendingMigrations, string targetMigrationId, string lastMigrationId);
    internal virtual void Downgrade(IEnumerable`1<string> pendingMigrations);
    internal virtual void UpgradeHistory(IEnumerable`1<MigrationOperation> upgradeOperations);
    internal virtual string get_TargetDatabase();
    internal virtual bool HistoryExists();
}
public class System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator : MigratorBase {
    private MigrationsLogger _logger;
    private string _lastInfoMessage;
    public MigratorLoggingDecorator(MigratorBase innerMigrator, MigrationsLogger logger);
    internal virtual void AutoMigrate(string migrationId, VersionedModel sourceModel, VersionedModel targetModel, bool downgrading);
    internal virtual void ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext);
    internal virtual void Upgrade(IEnumerable`1<string> pendingMigrations, string targetMigrationId, string lastMigrationId);
    internal virtual void Downgrade(IEnumerable`1<string> pendingMigrations);
    internal virtual void ApplyMigration(DbMigration migration, DbMigration lastMigration);
    internal virtual void RevertMigration(string migrationId, DbMigration migration, XDocument targetModel);
    internal virtual void SeedDatabase();
    internal virtual void UpgradeHistory(IEnumerable`1<MigrationOperation> upgradeOperations);
    [CompilerGeneratedAttribute]
private void <ExecuteSql>b__4_0(string message);
}
public class System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator : MigratorBase {
    private StringBuilder _sqlBuilder;
    private UpdateDatabaseOperation _updateDatabaseOperation;
    public MigratorScriptingDecorator(MigratorBase innerMigrator);
    public string ScriptUpdate(string sourceMigration, string targetMigration);
    internal virtual IEnumerable`1<MigrationStatement> GenerateStatements(IList`1<MigrationOperation> operations, string migrationId);
    internal virtual void EnsureDatabaseExists(Action mustSucceedToKeepDatabase);
    internal virtual void ExecuteStatements(IEnumerable`1<MigrationStatement> migrationStatements);
    internal static void BuildSqlScript(IEnumerable`1<MigrationStatement> migrationStatements, StringBuilder sqlBuilder);
    internal virtual void SeedDatabase();
    internal virtual bool HistoryExists();
}
internal class System.Data.Entity.Migrations.Infrastructure.ModificationCommandTreeGenerator : object {
    private DbCompiledModel _compiledModel;
    private DbConnection _connection;
    private MetadataWorkspace _metadataWorkspace;
    public ModificationCommandTreeGenerator(DbModel model, DbConnection connection);
    private DbContext CreateContext();
    public IEnumerable`1<DbInsertCommandTree> GenerateAssociationInsert(string associationIdentity);
    public IEnumerable`1<DbDeleteCommandTree> GenerateAssociationDelete(string associationIdentity);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.ModificationCommandTreeGenerator/<GenerateAssociation>d__8`1")]
private IEnumerable`1<TCommandTree> GenerateAssociation(string associationIdentity, EntityState state);
    private object InstantiateAndAttachEntity(EntityType entityType, DbContext context);
    private object InstantiateEntity(EntityType entityType, DbContext context, Type clrType, DbSet set);
    public IEnumerable`1<DbModificationCommandTree> GenerateInsert(string entityIdentity);
    public IEnumerable`1<DbModificationCommandTree> GenerateUpdate(string entityIdentity);
    public IEnumerable`1<DbModificationCommandTree> GenerateDelete(string entityIdentity);
    [IteratorStateMachineAttribute("System.Data.Entity.Migrations.Infrastructure.ModificationCommandTreeGenerator/<Generate>d__14")]
private IEnumerable`1<DbModificationCommandTree> Generate(string entityIdentity, EntityState state);
    private void ChangeRelationshipStates(DbContext context, EntityType entityType, object entity, EntityState state);
    private void HandleTableSplitting(DbContext context, EntityType entityType, object entity, EntityState state);
    private static void SetFakeReferenceKeyValues(object entity, EntityType entityType);
    private static object GetFakeReferenceKeyValue(PrimitiveTypeKind primitiveTypeKind);
    private static void SetFakeKeyValues(object entity, EntityType entityType);
    private static object GetFakeKeyValue(PrimitiveTypeKind primitiveTypeKind);
    private static void InstantiateComplexProperties(object structuralObject, IEnumerable`1<EdmProperty> properties);
}
internal class System.Data.Entity.Migrations.Infrastructure.VersionedModel : object {
    private XDocument _model;
    private string _version;
    public XDocument Model { get; }
    public string Version { get; }
    public VersionedModel(XDocument model, string version);
    public XDocument get_Model();
    public string get_Version();
}
public class System.Data.Entity.Migrations.Model.AddColumnOperation : MigrationOperation {
    private string _table;
    private ColumnModel _column;
    public string Table { get; }
    public ColumnModel Column { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public AddColumnOperation(string table, ColumnModel column, object anonymousArguments);
    public string get_Table();
    public ColumnModel get_Column();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public class System.Data.Entity.Migrations.Model.AddForeignKeyOperation : ForeignKeyOperation {
    private List`1<string> _principalColumns;
    [CompilerGeneratedAttribute]
private bool <CascadeDelete>k__BackingField;
    public IList`1<string> PrincipalColumns { get; }
    public bool CascadeDelete { get; public set; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public AddForeignKeyOperation(object anonymousArguments);
    public IList`1<string> get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public bool get_CascadeDelete();
    [CompilerGeneratedAttribute]
public void set_CascadeDelete(bool value);
    public virtual CreateIndexOperation CreateCreateIndexOperation();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation : PrimaryKeyOperation {
    public MigrationOperation Inverse { get; }
    public AddPrimaryKeyOperation(object anonymousArguments);
    public virtual MigrationOperation get_Inverse();
}
public class System.Data.Entity.Migrations.Model.AlterColumnOperation : MigrationOperation {
    private string _table;
    private ColumnModel _column;
    private AlterColumnOperation _inverse;
    private bool _destructiveChange;
    public string Table { get; }
    public ColumnModel Column { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public AlterColumnOperation(string table, ColumnModel column, bool isDestructiveChange, object anonymousArguments);
    public AlterColumnOperation(string table, ColumnModel column, bool isDestructiveChange, AlterColumnOperation inverse, object anonymousArguments);
    public string get_Table();
    public ColumnModel get_Column();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public class System.Data.Entity.Migrations.Model.AlterProcedureOperation : ProcedureOperation {
    public MigrationOperation Inverse { get; }
    public AlterProcedureOperation(string name, string bodySql, object anonymousArguments);
    public virtual MigrationOperation get_Inverse();
}
public class System.Data.Entity.Migrations.Model.AlterTableOperation : MigrationOperation {
    private string _name;
    private List`1<ColumnModel> _columns;
    private IDictionary`2<string, AnnotationValues> _annotations;
    public string Name { get; }
    public IList`1<ColumnModel> Columns { get; }
    public IDictionary`2<string, AnnotationValues> Annotations { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public AlterTableOperation(string name, IDictionary`2<string, AnnotationValues> annotations, object anonymousArguments);
    public virtual string get_Name();
    public virtual IList`1<ColumnModel> get_Columns();
    public virtual IDictionary`2<string, AnnotationValues> get_Annotations();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public class System.Data.Entity.Migrations.Model.ColumnModel : PropertyModel {
    private Type _clrType;
    private PropertyInfo _apiPropertyInfo;
    private IDictionary`2<string, AnnotationValues> _annotations;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTimestamp>k__BackingField;
    private static Dictionary`2<PrimitiveTypeKind, int> _typeSize;
    public Type ClrType { get; }
    public object ClrDefaultValue { get; }
    public Nullable`1<bool> IsNullable { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsTimestamp { get; public set; }
    public IDictionary`2<string, AnnotationValues> Annotations { get; public set; }
    internal PropertyInfo ApiPropertyInfo { get; internal set; }
    public ColumnModel(PrimitiveTypeKind type);
    public ColumnModel(PrimitiveTypeKind type, TypeUsage typeUsage);
    private static ColumnModel();
    public virtual Type get_ClrType();
    public virtual object get_ClrDefaultValue();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public virtual void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsTimestamp();
    [CompilerGeneratedAttribute]
public virtual void set_IsTimestamp(bool value);
    public IDictionary`2<string, AnnotationValues> get_Annotations();
    public void set_Annotations(IDictionary`2<string, AnnotationValues> value);
    internal PropertyInfo get_ApiPropertyInfo();
    internal void set_ApiPropertyInfo(PropertyInfo value);
    public bool IsNarrowerThan(ColumnModel column, DbProviderManifest providerManifest);
    private static bool IsNarrowerThan(TypeUsage typeUsage, TypeUsage other);
    internal virtual FacetValues ToFacetValues();
}
public class System.Data.Entity.Migrations.Model.CreateIndexOperation : IndexOperation {
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClustered>k__BackingField;
    public bool IsUnique { get; public set; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public bool IsClustered { get; public set; }
    public CreateIndexOperation(object anonymousArguments);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    [CompilerGeneratedAttribute]
public bool get_IsClustered();
    [CompilerGeneratedAttribute]
public void set_IsClustered(bool value);
}
public class System.Data.Entity.Migrations.Model.CreateProcedureOperation : ProcedureOperation {
    public MigrationOperation Inverse { get; }
    public CreateProcedureOperation(string name, string bodySql, object anonymousArguments);
    public virtual MigrationOperation get_Inverse();
}
public class System.Data.Entity.Migrations.Model.CreateTableOperation : MigrationOperation {
    private string _name;
    private List`1<ColumnModel> _columns;
    private AddPrimaryKeyOperation _primaryKey;
    private IDictionary`2<string, object> _annotations;
    public string Name { get; }
    public IList`1<ColumnModel> Columns { get; }
    public AddPrimaryKeyOperation PrimaryKey { get; public set; }
    public IDictionary`2<string, object> Annotations { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public CreateTableOperation(string name, object anonymousArguments);
    public CreateTableOperation(string name, IDictionary`2<string, object> annotations, object anonymousArguments);
    public virtual string get_Name();
    public virtual IList`1<ColumnModel> get_Columns();
    public AddPrimaryKeyOperation get_PrimaryKey();
    public void set_PrimaryKey(AddPrimaryKeyOperation value);
    public virtual IDictionary`2<string, object> get_Annotations();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public class System.Data.Entity.Migrations.Model.DropColumnOperation : MigrationOperation {
    private string _table;
    private string _name;
    private AddColumnOperation _inverse;
    private IDictionary`2<string, object> _removedAnnotations;
    public string Table { get; }
    public string Name { get; }
    public IDictionary`2<string, object> RemovedAnnotations { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public DropColumnOperation(string table, string name, object anonymousArguments);
    public DropColumnOperation(string table, string name, IDictionary`2<string, object> removedAnnotations, object anonymousArguments);
    public DropColumnOperation(string table, string name, AddColumnOperation inverse, object anonymousArguments);
    public DropColumnOperation(string table, string name, IDictionary`2<string, object> removedAnnotations, AddColumnOperation inverse, object anonymousArguments);
    public string get_Table();
    public string get_Name();
    public IDictionary`2<string, object> get_RemovedAnnotations();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public class System.Data.Entity.Migrations.Model.DropForeignKeyOperation : ForeignKeyOperation {
    private AddForeignKeyOperation _inverse;
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public DropForeignKeyOperation(object anonymousArguments);
    public DropForeignKeyOperation(AddForeignKeyOperation inverse, object anonymousArguments);
    public virtual DropIndexOperation CreateDropIndexOperation();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.DropIndexOperation : IndexOperation {
    private CreateIndexOperation _inverse;
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public DropIndexOperation(object anonymousArguments);
    public DropIndexOperation(CreateIndexOperation inverse, object anonymousArguments);
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation : PrimaryKeyOperation {
    [CompilerGeneratedAttribute]
private CreateTableOperation <CreateTableOperation>k__BackingField;
    public MigrationOperation Inverse { get; }
    public CreateTableOperation CreateTableOperation { get; internal set; }
    public DropPrimaryKeyOperation(object anonymousArguments);
    public virtual MigrationOperation get_Inverse();
    [CompilerGeneratedAttribute]
public CreateTableOperation get_CreateTableOperation();
    [CompilerGeneratedAttribute]
internal void set_CreateTableOperation(CreateTableOperation value);
}
public class System.Data.Entity.Migrations.Model.DropProcedureOperation : MigrationOperation {
    private string _name;
    public string Name { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public DropProcedureOperation(string name, object anonymousArguments);
    public virtual string get_Name();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.DropTableOperation : MigrationOperation {
    private string _name;
    private CreateTableOperation _inverse;
    private IDictionary`2<string, IDictionary`2<string, object>> _removedColumnAnnotations;
    private IDictionary`2<string, object> _removedAnnotations;
    public string Name { get; }
    public IDictionary`2<string, object> RemovedAnnotations { get; }
    public IDictionary`2<string, IDictionary`2<string, object>> RemovedColumnAnnotations { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    private bool System.Data.Entity.Migrations.Model.IAnnotationTarget.HasAnnotations { get; }
    public DropTableOperation(string name, object anonymousArguments);
    public DropTableOperation(string name, IDictionary`2<string, object> removedAnnotations, IDictionary`2<string, IDictionary`2<string, object>> removedColumnAnnotations, object anonymousArguments);
    public DropTableOperation(string name, CreateTableOperation inverse, object anonymousArguments);
    public DropTableOperation(string name, IDictionary`2<string, object> removedAnnotations, IDictionary`2<string, IDictionary`2<string, object>> removedColumnAnnotations, CreateTableOperation inverse, object anonymousArguments);
    public virtual string get_Name();
    public virtual IDictionary`2<string, object> get_RemovedAnnotations();
    public IDictionary`2<string, IDictionary`2<string, object>> get_RemovedColumnAnnotations();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    private sealed virtual override bool System.Data.Entity.Migrations.Model.IAnnotationTarget.get_HasAnnotations();
}
public abstract class System.Data.Entity.Migrations.Model.ForeignKeyOperation : MigrationOperation {
    private string _principalTable;
    private string _dependentTable;
    private List`1<string> _dependentColumns;
    private string _name;
    public string PrincipalTable { get; public set; }
    public string DependentTable { get; public set; }
    public IList`1<string> DependentColumns { get; }
    public bool HasDefaultName { get; }
    public string Name { get; public set; }
    internal string DefaultName { get; }
    protected ForeignKeyOperation(object anonymousArguments);
    public string get_PrincipalTable();
    public void set_PrincipalTable(string value);
    public string get_DependentTable();
    public void set_DependentTable(string value);
    public IList`1<string> get_DependentColumns();
    public bool get_HasDefaultName();
    public string get_Name();
    public void set_Name(string value);
    internal string get_DefaultName();
}
public class System.Data.Entity.Migrations.Model.HistoryOperation : MigrationOperation {
    private IList`1<DbModificationCommandTree> _commandTrees;
    public IList`1<DbModificationCommandTree> CommandTrees { get; }
    public bool IsDestructiveChange { get; }
    public HistoryOperation(IList`1<DbModificationCommandTree> commandTrees, object anonymousArguments);
    public IList`1<DbModificationCommandTree> get_CommandTrees();
    public virtual bool get_IsDestructiveChange();
}
internal interface System.Data.Entity.Migrations.Model.IAnnotationTarget {
    public bool HasAnnotations { get; }
    public abstract virtual bool get_HasAnnotations();
}
public abstract class System.Data.Entity.Migrations.Model.IndexOperation : MigrationOperation {
    private string _table;
    private List`1<string> _columns;
    private string _name;
    public string Table { get; public set; }
    public IList`1<string> Columns { get; }
    public bool HasDefaultName { get; }
    public string Name { get; public set; }
    internal string DefaultName { get; }
    protected IndexOperation(object anonymousArguments);
    public static string BuildDefaultName(IEnumerable`1<string> columns);
    public string get_Table();
    public void set_Table(string value);
    public IList`1<string> get_Columns();
    public bool get_HasDefaultName();
    public string get_Name();
    public void set_Name(string value);
    internal string get_DefaultName();
}
public abstract class System.Data.Entity.Migrations.Model.MigrationOperation : object {
    private IDictionary`2<string, object> _anonymousArguments;
    public IDictionary`2<string, object> AnonymousArguments { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    protected MigrationOperation(object anonymousArguments);
    public IDictionary`2<string, object> get_AnonymousArguments();
    public virtual MigrationOperation get_Inverse();
    public abstract virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.MoveProcedureOperation : MigrationOperation {
    private string _name;
    private string _newSchema;
    public string Name { get; }
    public string NewSchema { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public MoveProcedureOperation(string name, string newSchema, object anonymousArguments);
    public virtual string get_Name();
    public virtual string get_NewSchema();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.MoveTableOperation : MigrationOperation {
    private string _name;
    private string _newSchema;
    [CompilerGeneratedAttribute]
private string <ContextKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateTableOperation <CreateTableOperation>k__BackingField;
    public string Name { get; }
    public string NewSchema { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public string ContextKey { get; internal set; }
    public bool IsSystem { get; internal set; }
    public CreateTableOperation CreateTableOperation { get; internal set; }
    public MoveTableOperation(string name, string newSchema, object anonymousArguments);
    public virtual string get_Name();
    public virtual string get_NewSchema();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
    [CompilerGeneratedAttribute]
public string get_ContextKey();
    [CompilerGeneratedAttribute]
internal void set_ContextKey(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSystem();
    [CompilerGeneratedAttribute]
internal void set_IsSystem(bool value);
    [CompilerGeneratedAttribute]
public CreateTableOperation get_CreateTableOperation();
    [CompilerGeneratedAttribute]
internal void set_CreateTableOperation(CreateTableOperation value);
}
public class System.Data.Entity.Migrations.Model.NotSupportedOperation : MigrationOperation {
    internal static NotSupportedOperation Instance;
    public bool IsDestructiveChange { get; }
    private static NotSupportedOperation();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.ParameterModel : PropertyModel {
    [CompilerGeneratedAttribute]
private bool <IsOutParameter>k__BackingField;
    public bool IsOutParameter { get; public set; }
    public ParameterModel(PrimitiveTypeKind type);
    public ParameterModel(PrimitiveTypeKind type, TypeUsage typeUsage);
    [CompilerGeneratedAttribute]
public bool get_IsOutParameter();
    [CompilerGeneratedAttribute]
public void set_IsOutParameter(bool value);
}
public abstract class System.Data.Entity.Migrations.Model.PrimaryKeyOperation : MigrationOperation {
    private List`1<string> _columns;
    private string _table;
    private string _name;
    [CompilerGeneratedAttribute]
private bool <IsClustered>k__BackingField;
    public string Table { get; public set; }
    public IList`1<string> Columns { get; }
    public bool HasDefaultName { get; }
    public string Name { get; public set; }
    public bool IsDestructiveChange { get; }
    internal string DefaultName { get; }
    public bool IsClustered { get; public set; }
    protected PrimaryKeyOperation(object anonymousArguments);
    public static string BuildDefaultName(string table);
    public string get_Table();
    public void set_Table(string value);
    public IList`1<string> get_Columns();
    public bool get_HasDefaultName();
    public string get_Name();
    public void set_Name(string value);
    public virtual bool get_IsDestructiveChange();
    internal string get_DefaultName();
    [CompilerGeneratedAttribute]
public bool get_IsClustered();
    [CompilerGeneratedAttribute]
public void set_IsClustered(bool value);
}
public abstract class System.Data.Entity.Migrations.Model.ProcedureOperation : MigrationOperation {
    private string _name;
    private string _bodySql;
    private List`1<ParameterModel> _parameters;
    public string Name { get; }
    public string BodySql { get; }
    public IList`1<ParameterModel> Parameters { get; }
    public bool IsDestructiveChange { get; }
    protected ProcedureOperation(string name, string bodySql, object anonymousArguments);
    public virtual string get_Name();
    public string get_BodySql();
    public virtual IList`1<ParameterModel> get_Parameters();
    public virtual bool get_IsDestructiveChange();
}
public abstract class System.Data.Entity.Migrations.Model.PropertyModel : object {
    private PrimitiveTypeKind _type;
    private TypeUsage _typeUsage;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    public PrimitiveTypeKind Type { get; }
    public TypeUsage TypeUsage { get; }
    public string Name { get; public set; }
    public string StoreType { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public Nullable`1<byte> Precision { get; public set; }
    public Nullable`1<byte> Scale { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    protected PropertyModel(PrimitiveTypeKind type, TypeUsage typeUsage);
    public virtual PrimitiveTypeKind get_Type();
    public TypeUsage get_TypeUsage();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual void set_StoreType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public virtual void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<byte> get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<byte> get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFixedLength();
    [CompilerGeneratedAttribute]
public virtual void set_IsFixedLength(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnicode(Nullable`1<bool> value);
    private TypeUsage BuildTypeUsage();
    internal virtual FacetValues ToFacetValues();
}
public class System.Data.Entity.Migrations.Model.RenameColumnOperation : MigrationOperation {
    private string _table;
    private string _name;
    private string _newName;
    public string Table { get; }
    public string Name { get; }
    public string NewName { get; internal set; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public RenameColumnOperation(string table, string name, string newName, object anonymousArguments);
    public virtual string get_Table();
    public virtual string get_Name();
    public virtual string get_NewName();
    internal virtual void set_NewName(string value);
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.RenameIndexOperation : MigrationOperation {
    private string _table;
    private string _name;
    private string _newName;
    public string Table { get; }
    public string Name { get; }
    public string NewName { get; internal set; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public RenameIndexOperation(string table, string name, string newName, object anonymousArguments);
    public virtual string get_Table();
    public virtual string get_Name();
    public virtual string get_NewName();
    internal virtual void set_NewName(string value);
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.RenameProcedureOperation : MigrationOperation {
    private string _name;
    private string _newName;
    public string Name { get; }
    public string NewName { get; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public RenameProcedureOperation(string name, string newName, object anonymousArguments);
    public virtual string get_Name();
    public virtual string get_NewName();
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.RenameTableOperation : MigrationOperation {
    private string _name;
    private string _newName;
    public string Name { get; }
    public string NewName { get; internal set; }
    public MigrationOperation Inverse { get; }
    public bool IsDestructiveChange { get; }
    public RenameTableOperation(string name, string newName, object anonymousArguments);
    public virtual string get_Name();
    public virtual string get_NewName();
    internal virtual void set_NewName(string value);
    public virtual MigrationOperation get_Inverse();
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.SqlOperation : MigrationOperation {
    private string _sql;
    [CompilerGeneratedAttribute]
private bool <SuppressTransaction>k__BackingField;
    public string Sql { get; }
    public bool SuppressTransaction { get; public set; }
    public bool IsDestructiveChange { get; }
    public SqlOperation(string sql, object anonymousArguments);
    public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressTransaction();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressTransaction(bool value);
    public virtual bool get_IsDestructiveChange();
}
public class System.Data.Entity.Migrations.Model.UpdateDatabaseOperation : MigrationOperation {
    private IList`1<DbQueryCommandTree> _historyQueryTrees;
    private IList`1<Migration> _migrations;
    public IList`1<DbQueryCommandTree> HistoryQueryTrees { get; }
    public IList`1<Migration> Migrations { get; }
    public bool IsDestructiveChange { get; }
    public UpdateDatabaseOperation(IList`1<DbQueryCommandTree> historyQueryTrees);
    public IList`1<DbQueryCommandTree> get_HistoryQueryTrees();
    public IList`1<Migration> get_Migrations();
    public void AddMigration(string migrationId, IList`1<MigrationOperation> operations);
    public virtual bool get_IsDestructiveChange();
}
public abstract class System.Data.Entity.Migrations.Sql.MigrationSqlGenerator : object {
    [CompilerGeneratedAttribute]
private DbProviderManifest <ProviderManifest>k__BackingField;
    protected DbProviderManifest ProviderManifest { get; protected set; }
    [CompilerGeneratedAttribute]
protected DbProviderManifest get_ProviderManifest();
    [CompilerGeneratedAttribute]
protected void set_ProviderManifest(DbProviderManifest value);
    public abstract virtual IEnumerable`1<MigrationStatement> Generate(IEnumerable`1<MigrationOperation> migrationOperations, string providerManifestToken);
    public virtual string GenerateProcedureBody(ICollection`1<DbModificationCommandTree> commandTrees, string rowsAffectedParameter, string providerManifestToken);
    public virtual bool IsPermissionDeniedError(Exception exception);
    protected virtual TypeUsage BuildStoreTypeUsage(string storeTypeName, PropertyModel propertyModel);
}
public class System.Data.Entity.Migrations.Sql.MigrationStatement : object {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchTerminator>k__BackingField;
    public string Sql { get; public set; }
    public bool SuppressTransaction { get; public set; }
    public string BatchTerminator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public bool get_SuppressTransaction();
    [CompilerGeneratedAttribute]
public void set_SuppressTransaction(bool value);
    [CompilerGeneratedAttribute]
public string get_BatchTerminator();
    [CompilerGeneratedAttribute]
public void set_BatchTerminator(string value);
}
internal class System.Data.Entity.Migrations.Utilities.ConfigurationFileUpdater : object {
    private static XNamespace _asm;
    private static XElement _dependentAssemblyElement;
    private static ConfigurationFileUpdater();
    public virtual string Update(string configurationFile);
}
internal class System.Data.Entity.Migrations.Utilities.DatabaseCreator : object {
    private Nullable`1<int> _commandTimeout;
    public DatabaseCreator(Nullable`1<int> commandTimeout);
    public virtual bool Exists(DbConnection connection);
    public virtual void Create(DbConnection connection);
    public virtual void Delete(DbConnection connection);
}
internal class System.Data.Entity.Migrations.Utilities.EmptyContext : DbContext {
    public EmptyContext(DbConnection existingConnection);
}
public class System.Data.Entity.Migrations.Utilities.IndentedTextWriter : TextWriter {
    public static string DefaultTabString;
    public static CultureInfo Culture;
    private TextWriter _writer;
    private int _indentLevel;
    private bool _tabsPending;
    private string _tabString;
    private List`1<string> _cachedIndents;
    public Encoding Encoding { get; }
    public string NewLine { get; public set; }
    public int Indent { get; public set; }
    public TextWriter InnerWriter { get; }
    public IndentedTextWriter(TextWriter writer);
    public IndentedTextWriter(TextWriter writer, string tabString);
    private static IndentedTextWriter();
    public virtual Encoding get_Encoding();
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    public int get_Indent();
    public void set_Indent(int value);
    public TextWriter get_InnerWriter();
    public virtual void Close();
    public virtual void Flush();
    protected virtual void OutputTabs();
    public virtual string CurrentIndentation();
    private string BuildIndent(int numberOfIndents);
    public virtual void Write(string value);
    public virtual void Write(bool value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(double value);
    public virtual void Write(float value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    public virtual void Write(object value);
    public virtual void Write(string format, object arg0);
    public virtual void Write(string format, object arg0, object arg1);
    public virtual void Write(string format, Object[] arg);
    public void WriteLineNoTabs(string value);
    public virtual void WriteLine(string value);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, object arg0);
    public virtual void WriteLine(string format, object arg0, object arg1);
    public virtual void WriteLine(string format, Object[] arg);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(UInt32 value);
}
internal class System.Data.Entity.Migrations.Utilities.MigrationsConfigurationFinder : object {
    private TypeFinder _typeFinder;
    public MigrationsConfigurationFinder(TypeFinder typeFinder);
    public virtual DbMigrationsConfiguration FindMigrationsConfiguration(Type contextType, string configurationTypeName, Func`2<string, Exception> noType, Func`3<string, IEnumerable`1<Type>, Exception> multipleTypes, Func`3<string, string, Exception> noTypeWithName, Func`3<string, string, Exception> multipleTypesWithName);
}
internal static class System.Data.Entity.Migrations.Utilities.UtcNowGenerator : object {
    public static string MigrationIdFormat;
    private static ThreadLocal`1<DateTime> _lastNow;
    private static UtcNowGenerator();
    public static DateTime UtcNow();
    public static string UtcNowAsMigrationIdTimestamp();
}
public class System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1 : StructuralTypeConfiguration`1<TComplexType> {
    private ComplexTypeConfiguration _complexTypeConfiguration;
    internal StructuralTypeConfiguration Configuration { get; }
    internal ComplexTypeConfiguration`1(ComplexTypeConfiguration configuration);
    public ComplexTypeConfiguration`1<TComplexType> Ignore(Expression`1<Func`2<TComplexType, TProperty>> propertyExpression);
    internal virtual StructuralTypeConfiguration get_Configuration();
    internal virtual TPrimitivePropertyConfiguration Property(LambdaExpression lambdaExpression);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration : object {
    internal abstract virtual void Configure(AssociationSetMapping associationSetMapping, EdmModel database, PropertyInfo navigationProperty);
    internal abstract virtual AssociationMappingConfiguration Clone();
}
public class System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1 : object {
    private PropertyInfo _navigationPropertyInfo;
    private ModificationStoredProcedureConfiguration _configuration;
    internal AssociationModificationStoredProcedureConfiguration`1(PropertyInfo navigationPropertyInfo, ModificationStoredProcedureConfiguration configuration);
    public AssociationModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string parameterName);
    public AssociationModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public AssociationModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string parameterName);
    public AssociationModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string parameterName);
}
public class System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration : LengthPropertyConfiguration {
    internal BinaryPropertyConfiguration Configuration { get; }
    internal BinaryPropertyConfiguration(BinaryPropertyConfiguration configuration);
    public BinaryPropertyConfiguration IsMaxLength();
    public BinaryPropertyConfiguration HasMaxLength(Nullable`1<int> value);
    public BinaryPropertyConfiguration IsFixedLength();
    public BinaryPropertyConfiguration IsVariableLength();
    public BinaryPropertyConfiguration IsOptional();
    public BinaryPropertyConfiguration IsRequired();
    public BinaryPropertyConfiguration HasDatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> databaseGeneratedOption);
    public BinaryPropertyConfiguration IsConcurrencyToken();
    public BinaryPropertyConfiguration IsConcurrencyToken(Nullable`1<bool> concurrencyToken);
    public BinaryPropertyConfiguration HasColumnName(string columnName);
    public BinaryPropertyConfiguration HasColumnAnnotation(string name, object value);
    public BinaryPropertyConfiguration HasColumnType(string columnType);
    public BinaryPropertyConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    public BinaryPropertyConfiguration IsRowVersion();
    internal BinaryPropertyConfiguration get_Configuration();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration : object {
    private NavigationPropertyConfiguration _navigationPropertyConfiguration;
    internal NavigationPropertyConfiguration NavigationPropertyConfiguration { get; }
    internal CascadableNavigationPropertyConfiguration(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public void WillCascadeOnDelete();
    public void WillCascadeOnDelete(bool value);
    internal NavigationPropertyConfiguration get_NavigationPropertyConfiguration();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal abstract class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationBase : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar : object {
    private ModelConfiguration _modelConfiguration;
    internal ConfigurationRegistrar(ModelConfiguration modelConfiguration);
    public virtual ConfigurationRegistrar AddFromAssembly(Assembly assembly);
    public virtual ConfigurationRegistrar Add(EntityTypeConfiguration`1<TEntityType> entityTypeConfiguration);
    public virtual ConfigurationRegistrar Add(ComplexTypeConfiguration`1<TComplexType> complexTypeConfiguration);
    internal virtual IEnumerable`1<Type> GetConfiguredTypes();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationTypeActivator : object {
    public virtual TStructuralTypeConfiguration Activate(Type type);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationTypeFilter : object {
    public virtual bool IsEntityTypeConfiguration(Type type);
    public virtual bool IsComplexTypeConfiguration(Type type);
    private static bool IsStructuralTypeConfiguration(Type type, Type structuralTypeConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationTypesFinder : object {
    private ConfigurationTypeActivator _activator;
    private ConfigurationTypeFilter _filter;
    public ConfigurationTypesFinder(ConfigurationTypeActivator activator, ConfigurationTypeFilter filter);
    public virtual void AddConfigurationTypesToModel(IEnumerable`1<Type> types, ModelConfiguration modelConfiguration);
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration : ConventionModificationStoredProcedureConfiguration {
    private Type _type;
    internal ConventionDeleteModificationStoredProcedureConfiguration(Type type);
    public ConventionDeleteModificationStoredProcedureConfiguration HasName(string procedureName);
    public ConventionDeleteModificationStoredProcedureConfiguration HasName(string procedureName, string schemaName);
    public ConventionDeleteModificationStoredProcedureConfiguration Parameter(string propertyName, string parameterName);
    public ConventionDeleteModificationStoredProcedureConfiguration Parameter(PropertyInfo propertyInfo, string parameterName);
    public ConventionDeleteModificationStoredProcedureConfiguration RowsAffectedParameter(string parameterName);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration : ConventionModificationStoredProcedureConfiguration {
    private Type _type;
    internal ConventionInsertModificationStoredProcedureConfiguration(Type type);
    public ConventionInsertModificationStoredProcedureConfiguration HasName(string procedureName);
    public ConventionInsertModificationStoredProcedureConfiguration HasName(string procedureName, string schemaName);
    public ConventionInsertModificationStoredProcedureConfiguration Parameter(string propertyName, string parameterName);
    public ConventionInsertModificationStoredProcedureConfiguration Parameter(PropertyInfo propertyInfo, string parameterName);
    public ConventionInsertModificationStoredProcedureConfiguration Result(string propertyName, string columnName);
    public ConventionInsertModificationStoredProcedureConfiguration Result(PropertyInfo propertyInfo, string columnName);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration : object {
    private ModificationStoredProcedureConfiguration _configuration;
    internal ModificationStoredProcedureConfiguration Configuration { get; }
    internal ModificationStoredProcedureConfiguration get_Configuration();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration : object {
    private Type _type;
    private ModificationStoredProceduresConfiguration _configuration;
    internal ModificationStoredProceduresConfiguration Configuration { get; }
    internal ConventionModificationStoredProceduresConfiguration(Type type);
    internal ModificationStoredProceduresConfiguration get_Configuration();
    public ConventionModificationStoredProceduresConfiguration Insert(Action`1<ConventionInsertModificationStoredProcedureConfiguration> modificationStoredProcedureConfigurationAction);
    public ConventionModificationStoredProceduresConfiguration Update(Action`1<ConventionUpdateModificationStoredProcedureConfiguration> modificationStoredProcedureConfigurationAction);
    public ConventionModificationStoredProceduresConfiguration Delete(Action`1<ConventionDeleteModificationStoredProcedureConfiguration> modificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration : object {
    private PropertyInfo _propertyInfo;
    private Func`1<PrimitivePropertyConfiguration> _configuration;
    private Lazy`1<BinaryPropertyConfiguration> _binaryConfiguration;
    private Lazy`1<DateTimePropertyConfiguration> _dateTimeConfiguration;
    private Lazy`1<DecimalPropertyConfiguration> _decimalConfiguration;
    private Lazy`1<LengthPropertyConfiguration> _lengthConfiguration;
    private Lazy`1<StringPropertyConfiguration> _stringConfiguration;
    public PropertyInfo ClrPropertyInfo { get; }
    internal Func`1<PrimitivePropertyConfiguration> Configuration { get; }
    internal ConventionPrimitivePropertyConfiguration(PropertyInfo propertyInfo, Func`1<PrimitivePropertyConfiguration> configuration);
    public virtual PropertyInfo get_ClrPropertyInfo();
    internal Func`1<PrimitivePropertyConfiguration> get_Configuration();
    public virtual ConventionPrimitivePropertyConfiguration HasColumnName(string columnName);
    public virtual ConventionPrimitivePropertyConfiguration HasColumnAnnotation(string name, object value);
    public virtual ConventionPrimitivePropertyConfiguration HasParameterName(string parameterName);
    public virtual ConventionPrimitivePropertyConfiguration HasColumnOrder(int columnOrder);
    public virtual ConventionPrimitivePropertyConfiguration HasColumnType(string columnType);
    public virtual ConventionPrimitivePropertyConfiguration IsConcurrencyToken();
    public virtual ConventionPrimitivePropertyConfiguration IsConcurrencyToken(bool concurrencyToken);
    public virtual ConventionPrimitivePropertyConfiguration HasDatabaseGeneratedOption(DatabaseGeneratedOption databaseGeneratedOption);
    public virtual ConventionPrimitivePropertyConfiguration IsOptional();
    public virtual ConventionPrimitivePropertyConfiguration IsRequired();
    public virtual ConventionPrimitivePropertyConfiguration IsUnicode();
    public virtual ConventionPrimitivePropertyConfiguration IsUnicode(bool unicode);
    public virtual ConventionPrimitivePropertyConfiguration IsFixedLength();
    public virtual ConventionPrimitivePropertyConfiguration IsVariableLength();
    public virtual ConventionPrimitivePropertyConfiguration HasMaxLength(int maxLength);
    public virtual ConventionPrimitivePropertyConfiguration IsMaxLength();
    public virtual ConventionPrimitivePropertyConfiguration HasPrecision(byte value);
    public virtual ConventionPrimitivePropertyConfiguration HasPrecision(byte precision, byte scale);
    public virtual ConventionPrimitivePropertyConfiguration IsRowVersion();
    public virtual ConventionPrimitivePropertyConfiguration IsKey();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [CompilerGeneratedAttribute]
private BinaryPropertyConfiguration <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private DateTimePropertyConfiguration <.ctor>b__7_1();
    [CompilerGeneratedAttribute]
private DecimalPropertyConfiguration <.ctor>b__7_2();
    [CompilerGeneratedAttribute]
private LengthPropertyConfiguration <.ctor>b__7_3();
    [CompilerGeneratedAttribute]
private StringPropertyConfiguration <.ctor>b__7_4();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration : object {
    private List`1<IConvention> _configurationConventions;
    private List`1<IConvention> _conceptualModelConventions;
    private List`1<IConvention> _conceptualToStoreMappingConventions;
    private List`1<IConvention> _storeModelConventions;
    private ConventionSet _initialConventionSet;
    internal IEnumerable`1<IConvention> ConfigurationConventions { get; }
    internal IEnumerable`1<IConvention> ConceptualModelConventions { get; }
    internal IEnumerable`1<IConvention> ConceptualToStoreMappingConventions { get; }
    internal IEnumerable`1<IConvention> StoreModelConventions { get; }
    internal ConventionsConfiguration(ConventionSet conventionSet);
    private ConventionsConfiguration(ConventionsConfiguration source);
    internal IEnumerable`1<IConvention> get_ConfigurationConventions();
    internal IEnumerable`1<IConvention> get_ConceptualModelConventions();
    internal IEnumerable`1<IConvention> get_ConceptualToStoreMappingConventions();
    internal IEnumerable`1<IConvention> get_StoreModelConventions();
    internal virtual ConventionsConfiguration Clone();
    public void AddFromAssembly(Assembly assembly);
    public void Add(IConvention[] conventions);
    public void Add();
    public void AddAfter(IConvention newConvention);
    public void AddBefore(IConvention newConvention);
    private static void Insert(Type existingConventionType, int offset, IConvention newConvention, IList`1<IConvention> conventions);
    private static int IndexOf(Type existingConventionType, IList`1<IConvention> conventions);
    public void Remove(IConvention[] conventions);
    public void Remove();
    internal void ApplyConceptualModel(DbModel model);
    internal void ApplyStoreModel(DbModel model);
    internal void ApplyPluralizingTableNameConvention(DbModel model);
    internal void ApplyMapping(DbDatabaseMapping databaseMapping);
    internal virtual void ApplyModelConfiguration(ModelConfiguration modelConfiguration);
    internal virtual void ApplyModelConfiguration(Type type, ModelConfiguration modelConfiguration);
    internal virtual void ApplyTypeConfiguration(Type type, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyConfiguration(PropertyInfo propertyInfo, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyConfiguration(PropertyInfo propertyInfo, Func`1<PropertyConfiguration> propertyConfiguration, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyTypeConfiguration(PropertyInfo propertyInfo, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration, ModelConfiguration modelConfiguration);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [CompilerGeneratedAttribute]
private void <AddFromAssembly>b__17_1(IConvention convention);
    [CompilerGeneratedAttribute]
private bool <Add>b__18_0(IConvention initialConvention);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConventionsTypeActivator : object {
    public virtual IConvention Activate(Type conventionType);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConventionsTypeFilter : object {
    public virtual bool IsConvention(Type conventionType);
    public static bool IsConfigurationConvention(Type conventionType);
    public static bool IsConceptualModelConvention(Type conventionType);
    public static bool IsStoreModelConvention(Type conventionType);
    public static bool IsConceptualToStoreMappingConvention(Type conventionType);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ConventionsTypeFinder : object {
    private ConventionsTypeFilter _conventionsTypeFilter;
    private ConventionsTypeActivator _conventionsTypeActivator;
    public ConventionsTypeFinder(ConventionsTypeFilter conventionsTypeFilter, ConventionsTypeActivator conventionsTypeActivator);
    public void AddConventions(IEnumerable`1<Type> types, Action`1<IConvention> addFunction);
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration : object {
    private Type _type;
    private Func`1<EntityTypeConfiguration> _entityTypeConfiguration;
    private ModelConfiguration _modelConfiguration;
    private Func`1<ComplexTypeConfiguration> _complexTypeConfiguration;
    private ConfigurationAspect _currentConfigurationAspect;
    private static List`1<ConfigurationAspect> ConfigurationAspectsConflictingWithIgnoreType;
    private static List`1<ConfigurationAspect> ConfigurationAspectsConflictingWithComplexType;
    public Type ClrType { get; }
    internal ConventionTypeConfiguration(Type type, ModelConfiguration modelConfiguration);
    internal ConventionTypeConfiguration(Type type, Func`1<EntityTypeConfiguration> entityTypeConfiguration, ModelConfiguration modelConfiguration);
    internal ConventionTypeConfiguration(Type type, Func`1<ComplexTypeConfiguration> complexTypeConfiguration, ModelConfiguration modelConfiguration);
    private ConventionTypeConfiguration(Type type, Func`1<EntityTypeConfiguration> entityTypeConfiguration, Func`1<ComplexTypeConfiguration> complexTypeConfiguration, ModelConfiguration modelConfiguration);
    private static ConventionTypeConfiguration();
    public Type get_ClrType();
    public ConventionTypeConfiguration HasEntitySetName(string entitySetName);
    public ConventionTypeConfiguration Ignore();
    public ConventionTypeConfiguration IsComplexType();
    public ConventionTypeConfiguration Ignore(string propertyName);
    public ConventionTypeConfiguration Ignore(PropertyInfo propertyInfo);
    public ConventionPrimitivePropertyConfiguration Property(string propertyName);
    public ConventionPrimitivePropertyConfiguration Property(PropertyInfo propertyInfo);
    internal ConventionPrimitivePropertyConfiguration Property(PropertyPath propertyPath);
    internal ConventionNavigationPropertyConfiguration NavigationProperty(string propertyName);
    internal ConventionNavigationPropertyConfiguration NavigationProperty(PropertyInfo propertyInfo);
    internal ConventionNavigationPropertyConfiguration NavigationProperty(PropertyPath propertyPath);
    public ConventionTypeConfiguration HasKey(string propertyName);
    public ConventionTypeConfiguration HasKey(PropertyInfo propertyInfo);
    public ConventionTypeConfiguration HasKey(IEnumerable`1<string> propertyNames);
    public ConventionTypeConfiguration HasKey(IEnumerable`1<PropertyInfo> keyProperties);
    public ConventionTypeConfiguration ToTable(string tableName);
    public ConventionTypeConfiguration ToTable(string tableName, string schemaName);
    public ConventionTypeConfiguration HasTableAnnotation(string name, object value);
    public ConventionTypeConfiguration MapToStoredProcedures();
    public ConventionTypeConfiguration MapToStoredProcedures(Action`1<ConventionModificationStoredProceduresConfiguration> modificationStoredProceduresConfigurationAction);
    internal void MapToStoredProcedures(ModificationStoredProceduresConfiguration modificationStoredProceduresConfiguration);
    private void ValidateConfiguration(ConfigurationAspect aspect);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [CompilerGeneratedAttribute]
private PropertyInfo <HasKey>b__24_0(string n);
    [CompilerGeneratedAttribute]
private bool <ValidateConfiguration>b__34_0(ConfigurationAspect ca);
    [CompilerGeneratedAttribute]
private bool <ValidateConfiguration>b__34_1(ConfigurationAspect ca);
    [CompilerGeneratedAttribute]
private bool <ValidateConfiguration>b__34_2(ConfigurationAspect ca);
    [CompilerGeneratedAttribute]
private bool <ValidateConfiguration>b__34_3(ConfigurationAspect ca);
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1 : object {
    private ConventionTypeConfiguration _configuration;
    public Type ClrType { get; }
    internal ConventionTypeConfiguration`1(Type type, Func`1<EntityTypeConfiguration> entityTypeConfiguration, ModelConfiguration modelConfiguration);
    internal ConventionTypeConfiguration`1(Type type, Func`1<ComplexTypeConfiguration> complexTypeConfiguration, ModelConfiguration modelConfiguration);
    internal ConventionTypeConfiguration`1(Type type, ModelConfiguration modelConfiguration);
    [ConditionalAttribute("DEBUG")]
private static void VerifyType(Type type);
    public Type get_ClrType();
    public ConventionTypeConfiguration`1<T> HasEntitySetName(string entitySetName);
    public ConventionTypeConfiguration`1<T> Ignore();
    public ConventionTypeConfiguration`1<T> IsComplexType();
    public ConventionTypeConfiguration`1<T> Ignore(Expression`1<Func`2<T, TProperty>> propertyExpression);
    public ConventionPrimitivePropertyConfiguration Property(Expression`1<Func`2<T, TProperty>> propertyExpression);
    internal ConventionNavigationPropertyConfiguration NavigationProperty(Expression`1<Func`2<T, TProperty>> propertyExpression);
    public ConventionTypeConfiguration`1<T> HasKey(Expression`1<Func`2<T, TProperty>> keyExpression);
    public ConventionTypeConfiguration`1<T> ToTable(string tableName);
    public ConventionTypeConfiguration`1<T> ToTable(string tableName, string schemaName);
    public ConventionTypeConfiguration`1<T> HasTableAnnotation(string name, object value);
    public ConventionTypeConfiguration`1<T> MapToStoredProcedures();
    public ConventionTypeConfiguration`1<T> MapToStoredProcedures(Action`1<ModificationStoredProceduresConfiguration`1<T>> modificationStoredProceduresConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration : ConventionModificationStoredProcedureConfiguration {
    private Type _type;
    internal ConventionUpdateModificationStoredProcedureConfiguration(Type type);
    public ConventionUpdateModificationStoredProcedureConfiguration HasName(string procedureName);
    public ConventionUpdateModificationStoredProcedureConfiguration HasName(string procedureName, string schemaName);
    public ConventionUpdateModificationStoredProcedureConfiguration Parameter(string propertyName, string parameterName);
    public ConventionUpdateModificationStoredProcedureConfiguration Parameter(PropertyInfo propertyInfo, string parameterName);
    public ConventionUpdateModificationStoredProcedureConfiguration Parameter(string propertyName, string currentValueParameterName, string originalValueParameterName);
    public ConventionUpdateModificationStoredProcedureConfiguration Parameter(PropertyInfo propertyInfo, string currentValueParameterName, string originalValueParameterName);
    public ConventionUpdateModificationStoredProcedureConfiguration Result(string propertyName, string columnName);
    public ConventionUpdateModificationStoredProcedureConfiguration Result(PropertyInfo propertyInfo, string columnName);
    public ConventionUpdateModificationStoredProcedureConfiguration RowsAffectedParameter(string parameterName);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration : PrimitivePropertyConfiguration {
    internal DateTimePropertyConfiguration Configuration { get; }
    internal DateTimePropertyConfiguration(DateTimePropertyConfiguration configuration);
    public DateTimePropertyConfiguration IsOptional();
    public DateTimePropertyConfiguration IsRequired();
    public DateTimePropertyConfiguration HasDatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> databaseGeneratedOption);
    public DateTimePropertyConfiguration IsConcurrencyToken();
    public DateTimePropertyConfiguration IsConcurrencyToken(Nullable`1<bool> concurrencyToken);
    public DateTimePropertyConfiguration HasColumnName(string columnName);
    public DateTimePropertyConfiguration HasColumnAnnotation(string name, object value);
    public DateTimePropertyConfiguration HasColumnType(string columnType);
    public DateTimePropertyConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    public DateTimePropertyConfiguration HasPrecision(byte value);
    internal DateTimePropertyConfiguration get_Configuration();
}
public class System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration : PrimitivePropertyConfiguration {
    internal DecimalPropertyConfiguration Configuration { get; }
    internal DecimalPropertyConfiguration(DecimalPropertyConfiguration configuration);
    public DecimalPropertyConfiguration IsOptional();
    public DecimalPropertyConfiguration IsRequired();
    public DecimalPropertyConfiguration HasDatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> databaseGeneratedOption);
    public DecimalPropertyConfiguration IsConcurrencyToken();
    public DecimalPropertyConfiguration IsConcurrencyToken(Nullable`1<bool> concurrencyToken);
    public DecimalPropertyConfiguration HasColumnName(string columnName);
    public DecimalPropertyConfiguration HasColumnAnnotation(string name, object value);
    public DecimalPropertyConfiguration HasColumnType(string columnType);
    public DecimalPropertyConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    public DecimalPropertyConfiguration HasPrecision(byte precision, byte scale);
    internal DecimalPropertyConfiguration get_Configuration();
}
public class System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1 : ModificationStoredProcedureConfigurationBase {
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName, string schemaName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> RowsAffectedParameter(string parameterName);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, TEntityType>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    public DeleteModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1 : ForeignKeyNavigationPropertyConfiguration {
    internal DependentNavigationPropertyConfiguration`1(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public CascadableNavigationPropertyConfiguration HasForeignKey(Expression`1<Func`2<TDependentEntityType, TKey>> foreignKeyExpression);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1 : object {
    private EntityMappingConfiguration _entityMappingConfiguration;
    internal EntityMappingConfiguration EntityMappingConfigurationInstance { get; }
    internal EntityMappingConfiguration`1(EntityMappingConfiguration entityMappingConfiguration);
    internal EntityMappingConfiguration get_EntityMappingConfigurationInstance();
    public void Properties(Expression`1<Func`2<TEntityType, TObject>> propertiesExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, T>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Nullable`1<T>>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, string>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, decimal>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Nullable`1<decimal>>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, DateTime>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Nullable`1<DateTime>>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, DateTimeOffset>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Nullable`1<DateTimeOffset>>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, TimeSpan>> propertyExpression);
    public PropertyMappingConfiguration Property(Expression`1<Func`2<TEntityType, Nullable`1<TimeSpan>>> propertyExpression);
    internal TPrimitivePropertyConfiguration Property(LambdaExpression lambdaExpression);
    public EntityMappingConfiguration`1<TEntityType> MapInheritedProperties();
    public EntityMappingConfiguration`1<TEntityType> ToTable(string tableName);
    public EntityMappingConfiguration`1<TEntityType> ToTable(string tableName, string schemaName);
    public EntityMappingConfiguration`1<TEntityType> HasTableAnnotation(string name, object value);
    public ValueConditionConfiguration Requires(string discriminator);
    public NotNullConditionConfiguration Requires(Expression`1<Func`2<TEntityType, TProperty>> property);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration : AssociationMappingConfiguration {
    private List`1<string> _keyColumnNames;
    private IDictionary`2<Tuple`2<string, string>, object> _annotations;
    private DatabaseName _tableName;
    private ForeignKeyAssociationMappingConfiguration(ForeignKeyAssociationMappingConfiguration source);
    internal virtual AssociationMappingConfiguration Clone();
    public ForeignKeyAssociationMappingConfiguration MapKey(String[] keyColumnNames);
    public ForeignKeyAssociationMappingConfiguration HasColumnAnnotation(string keyColumnName, string annotationName, object value);
    public ForeignKeyAssociationMappingConfiguration ToTable(string tableName);
    public ForeignKeyAssociationMappingConfiguration ToTable(string tableName, string schemaName);
    internal virtual void Configure(AssociationSetMapping associationSetMapping, EdmModel database, PropertyInfo navigationProperty);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public bool Equals(ForeignKeyAssociationMappingConfiguration other);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration : CascadableNavigationPropertyConfiguration {
    internal ForeignKeyNavigationPropertyConfiguration(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public CascadableNavigationPropertyConfiguration Map(Action`1<ForeignKeyAssociationMappingConfiguration> configurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration : object {
    private IndexConfiguration _configuration;
    internal IndexConfiguration(IndexConfiguration configuration);
    public IndexConfiguration IsUnique();
    public IndexConfiguration IsUnique(bool unique);
    public IndexConfiguration IsClustered();
    public IndexConfiguration IsClustered(bool clustered);
    public IndexConfiguration HasName(string name);
}
public class System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1 : ModificationStoredProcedureConfigurationBase {
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName, string schemaName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string parameterName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, string>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string columnName);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, TEntityType>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    public InsertModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration : PrimitiveColumnConfiguration {
    internal LengthPropertyConfiguration Configuration { get; }
    internal LengthColumnConfiguration(LengthPropertyConfiguration configuration);
    internal LengthPropertyConfiguration get_Configuration();
    public LengthColumnConfiguration IsMaxLength();
    public LengthColumnConfiguration HasMaxLength(Nullable`1<int> value);
    public LengthColumnConfiguration IsFixedLength();
    public LengthColumnConfiguration IsVariableLength();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration : PrimitivePropertyConfiguration {
    internal LengthPropertyConfiguration Configuration { get; }
    internal LengthPropertyConfiguration(LengthPropertyConfiguration configuration);
    public LengthPropertyConfiguration IsMaxLength();
    public LengthPropertyConfiguration HasMaxLength(Nullable`1<int> value);
    public LengthPropertyConfiguration IsFixedLength();
    public LengthPropertyConfiguration IsVariableLength();
    internal LengthPropertyConfiguration get_Configuration();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2 : object {
    private NavigationPropertyConfiguration _navigationPropertyConfiguration;
    internal ManyNavigationPropertyConfiguration`2(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public ManyToManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntityType> WithMany(Expression`1<Func`2<TTargetEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression);
    public ManyToManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntityType> WithMany();
    public DependentNavigationPropertyConfiguration`1<TTargetEntityType> WithRequired(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public DependentNavigationPropertyConfiguration`1<TTargetEntityType> WithRequired();
    public DependentNavigationPropertyConfiguration`1<TTargetEntityType> WithOptional(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public DependentNavigationPropertyConfiguration`1<TTargetEntityType> WithOptional();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration : AssociationMappingConfiguration {
    private List`1<string> _leftKeyColumnNames;
    private List`1<string> _rightKeyColumnNames;
    private DatabaseName _tableName;
    private IDictionary`2<string, object> _annotations;
    private ManyToManyAssociationMappingConfiguration(ManyToManyAssociationMappingConfiguration source);
    internal virtual AssociationMappingConfiguration Clone();
    public ManyToManyAssociationMappingConfiguration ToTable(string tableName);
    public ManyToManyAssociationMappingConfiguration ToTable(string tableName, string schemaName);
    public ManyToManyAssociationMappingConfiguration HasTableAnnotation(string name, object value);
    public ManyToManyAssociationMappingConfiguration MapLeftKey(String[] keyColumnNames);
    public ManyToManyAssociationMappingConfiguration MapRightKey(String[] keyColumnNames);
    internal virtual void Configure(AssociationSetMapping associationSetMapping, EdmModel database, PropertyInfo navigationProperty);
    private static void ConfigureColumnNames(ICollection`1<string> keyColumnNames, IList`1<ScalarPropertyMapping> propertyMappings);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public bool Equals(ManyToManyAssociationMappingConfiguration other);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2 : ModificationStoredProcedureConfigurationBase {
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> HasName(string procedureName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> HasName(string procedureName, string schemaName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> LeftKeyParameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> LeftKeyParameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> LeftKeyParameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> LeftKeyParameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> RightKeyParameter(Expression`1<Func`2<TTargetEntityType, TProperty>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> RightKeyParameter(Expression`1<Func`2<TTargetEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> RightKeyParameter(Expression`1<Func`2<TTargetEntityType, string>> propertyExpression, string parameterName);
    public ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType> RightKeyParameter(Expression`1<Func`2<TTargetEntityType, Byte[]>> propertyExpression, string parameterName);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2 : object {
    private ModificationStoredProceduresConfiguration _configuration;
    internal ModificationStoredProceduresConfiguration Configuration { get; }
    internal ModificationStoredProceduresConfiguration get_Configuration();
    public ManyToManyModificationStoredProceduresConfiguration`2<TEntityType, TTargetEntityType> Insert(Action`1<ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType>> modificationStoredProcedureConfigurationAction);
    public ManyToManyModificationStoredProceduresConfiguration`2<TEntityType, TTargetEntityType> Delete(Action`1<ManyToManyModificationStoredProcedureConfiguration`2<TEntityType, TTargetEntityType>> modificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2 : object {
    private NavigationPropertyConfiguration _navigationPropertyConfiguration;
    internal ManyToManyNavigationPropertyConfiguration`2(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public ManyToManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntityType> Map(Action`1<ManyToManyAssociationMappingConfiguration> configurationAction);
    public ManyToManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntityType> MapToStoredProcedures();
    public ManyToManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntityType> MapToStoredProcedures(Action`1<ManyToManyModificationStoredProceduresConfiguration`2<TEntityType, TTargetEntityType>> modificationStoredProcedureMappingConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.AssociationMappingOperations : object {
    private static void MoveAssociationSetMappingDependents(AssociationSetMapping associationSetMapping, EndPropertyMapping dependentMapping, EntitySet toSet, bool useExistingColumns);
    public static void MoveAllDeclaredAssociationSetMappings(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType fromTable, EntityType toTable, bool useExistingColumns);
}
[DebuggerDisplayAttribute("{Column.Name}")]
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.ColumnMapping : object {
    private EdmProperty _column;
    private List`1<PropertyMappingSpecification> _propertyMappings;
    public EdmProperty Column { get; }
    public IList`1<PropertyMappingSpecification> PropertyMappings { get; }
    public ColumnMapping(EdmProperty column);
    public EdmProperty get_Column();
    public IList`1<PropertyMappingSpecification> get_PropertyMappings();
    public void AddMapping(EntityType entityType, IList`1<EdmProperty> propertyPath, IEnumerable`1<ConditionPropertyMapping> conditions, bool isDefaultDiscriminatorCondition);
}
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.DatabaseOperations : object {
    public static void AddTypeConstraint(EdmModel database, EntityType entityType, EntityType principalTable, EntityType dependentTable, bool isSplitting);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingConfiguration : object {
    private DatabaseName _tableName;
    private List`1<PropertyPath> _properties;
    private List`1<ValueConditionConfiguration> _valueConditions;
    private List`1<NotNullConditionConfiguration> _notNullConditions;
    private Dictionary`2<PropertyPath, PrimitivePropertyConfiguration> _primitivePropertyConfigurations;
    private IDictionary`2<string, object> _annotations;
    [CompilerGeneratedAttribute]
private bool <MapInheritedProperties>k__BackingField;
    public bool MapInheritedProperties { get; public set; }
    public DatabaseName TableName { get; public set; }
    public IDictionary`2<string, object> Annotations { get; }
    internal List`1<PropertyPath> Properties { get; internal set; }
    internal IDictionary`2<PropertyPath, PrimitivePropertyConfiguration> PrimitivePropertyConfigurations { get; }
    public List`1<ValueConditionConfiguration> ValueConditions { get; }
    public List`1<NotNullConditionConfiguration> NullabilityConditions { get; public set; }
    private EntityMappingConfiguration(EntityMappingConfiguration source);
    internal virtual EntityMappingConfiguration Clone();
    [CompilerGeneratedAttribute]
public bool get_MapInheritedProperties();
    [CompilerGeneratedAttribute]
public void set_MapInheritedProperties(bool value);
    public DatabaseName get_TableName();
    public void set_TableName(DatabaseName value);
    public IDictionary`2<string, object> get_Annotations();
    public virtual void SetAnnotation(string name, object value);
    internal List`1<PropertyPath> get_Properties();
    internal void set_Properties(List`1<PropertyPath> value);
    internal IDictionary`2<PropertyPath, PrimitivePropertyConfiguration> get_PrimitivePropertyConfigurations();
    internal TPrimitivePropertyConfiguration Property(PropertyPath propertyPath, Func`1<TPrimitivePropertyConfiguration> primitivePropertyConfigurationCreator);
    private void Property(PropertyPath property);
    public List`1<ValueConditionConfiguration> get_ValueConditions();
    public void AddValueCondition(ValueConditionConfiguration valueCondition);
    public List`1<NotNullConditionConfiguration> get_NullabilityConditions();
    public void set_NullabilityConditions(List`1<NotNullConditionConfiguration> value);
    public void AddNullabilityCondition(NotNullConditionConfiguration notNullConditionConfiguration);
    public bool MapsAnyInheritedProperties(EntityType entityType);
    public void Configure(DbDatabaseMapping databaseMapping, ICollection`1<EntitySet> entitySets, DbProviderManifest providerManifest, EntityType entityType, EntityTypeMapping& entityTypeMapping, bool isMappingAnyInheritedProperty, int configurationIndex, int configurationCount, IDictionary`2<string, object> commonAnnotations);
    private static void ConfigureAnnotations(EdmType toTable, IDictionary`2<string, object> annotations);
    internal void ConfigurePropertyMappings(IList`1<Tuple`2<ColumnMappingBuilder, EntityType>> propertyMappings, DbProviderManifest providerManifest, bool allowOverride);
    private void ConfigureDefaultDiscriminator(EntityType entityType, MappingFragment fragment);
    private static void CopyDefaultDiscriminator(MappingFragment fromFragment, MappingFragment toFragment);
    private static EntityType FindTableForTemporaryExtraPropertyMapping(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType fromTable, EntityType toTable, ColumnMappingBuilder pm);
    private static EntityType FindTableForExtraPropertyMapping(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType fromTable, EntityType toTable, EntityType& unmappedTable, ColumnMappingBuilder pm);
    private static EntityType FindBaseTableForExtraPropertyMapping(DbDatabaseMapping databaseMapping, EntityType entityType, ColumnMappingBuilder pm);
    private bool DiscoverIsSharingWithBase(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType toTable);
    private static EntityType FindParentTable(DbDatabaseMapping databaseMapping, EntityType fromTable, EntityTypeMapping entityTypeMapping, EntityType toTable, bool isMappingInheritedProperties, int configurationIndex, int configurationCount, Boolean& isSplitting);
    private MappingFragment FindOrCreateTypeMappingFragment(DbDatabaseMapping databaseMapping, EntityTypeMapping& entityTypeMapping, int configurationIndex, EntityType entityType, DbProviderManifest providerManifest);
    private EntityType FindOrCreateTargetTable(DbDatabaseMapping databaseMapping, MappingFragment fragment, EntityType entityType, EntityType fromTable, Boolean& isTableSharing);
    private HashSet`1<EdmPropertyPath> DiscoverAllMappingsToContain(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType toTable, bool isSharingTableWithBase);
    private void ConfigureConditions(DbDatabaseMapping databaseMapping, EntityType entityType, MappingFragment fragment, DbProviderManifest providerManifest);
    internal static void CleanupUnmappedArtifacts(DbDatabaseMapping databaseMapping, EntityType table);
    internal static IEnumerable`1<EdmPropertyPath> PropertyPathToEdmPropertyPath(PropertyPath path, EntityType entityType);
    private static List`1<EntityTypeMapping> FindAllTypeMappingsUsingTable(DbDatabaseMapping databaseMapping, EntityType toTable);
    private static bool IsTableNameEqual(EntityType table, DatabaseName otherTableName);
    private static IEnumerable`1<AssociationType> FindAllOneToOneFKAssociationTypes(EdmModel model, EntityType entityType, EntityType candidateType);
    private static bool UpdateColumnNamesForTableSharing(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType toTable, MappingFragment fragment);
    [CompilerGeneratedAttribute]
private ValueConditionConfiguration <.ctor>b__7_0(ValueConditionConfiguration c);
    [CompilerGeneratedAttribute]
private NotNullConditionConfiguration <.ctor>b__7_1(NotNullConditionConfiguration c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_2(KeyValuePair`2<PropertyPath, PrimitivePropertyConfiguration> c);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingOperations : object {
    public static MappingFragment CreateTypeMappingFragment(EntityTypeMapping entityTypeMapping, MappingFragment templateFragment, EntitySet tableSet);
    private static void UpdatePropertyMapping(DbDatabaseMapping databaseMapping, IEnumerable`1<EntitySet> entitySets, Dictionary`2<EdmProperty, IList`1<ColumnMappingBuilder>> columnMappingIndex, ColumnMappingBuilder propertyMappingBuilder, EntityType fromTable, EntityType toTable, bool useExisting);
    private static Func`2<EdmProperty, bool> GetPropertyPathMatcher(Dictionary`2<EdmProperty, IList`1<ColumnMappingBuilder>> columnMappingIndex, ColumnMappingBuilder propertyMappingBuilder);
    [ExtensionAttribute]
private static bool PathEqual(IList`1<EdmProperty> listA, IList`1<EdmProperty> listB);
    private static Dictionary`2<EdmProperty, IList`1<ColumnMappingBuilder>> GetColumnMappingIndex(DbDatabaseMapping databaseMapping);
    public static void UpdatePropertyMappings(DbDatabaseMapping databaseMapping, IEnumerable`1<EntitySet> entitySets, EntityType fromTable, MappingFragment fragment, bool useExisting);
    public static void MovePropertyMapping(DbDatabaseMapping databaseMapping, IEnumerable`1<EntitySet> entitySets, MappingFragment fromFragment, MappingFragment toFragment, ColumnMappingBuilder propertyMappingBuilder, bool requiresUpdate, bool useExisting);
    public static void CopyPropertyMappingToFragment(ColumnMappingBuilder propertyMappingBuilder, MappingFragment fragment, Func`2<EdmProperty, bool> isCompatible, bool useExisting);
    public static void UpdateConditions(EdmModel database, EntityType fromTable, MappingFragment fragment);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingService : object {
    private DbDatabaseMapping _databaseMapping;
    private Dictionary`2<EntityType, TableMapping> _tableMappings;
    private SortedEntityTypeIndex _entityTypes;
    public EntityMappingService(DbDatabaseMapping databaseMapping);
    public void Configure();
    private void Analyze();
    private void Transform();
    private void ConfigureAssociationSetMappingForeignKeys(EntitySet entitySet);
    private void MarkColumnsAsNonNullableIfNoTableSharing(EntitySet entitySet, EntityType table, EntityType dependentEndEntityType, IEnumerable`1<EdmProperty> columns);
    private static void ConfigureTypeMappings(TableMapping tableMapping, Dictionary`2<EntityType, EntityTypeMapping> rootMappings, EntityType entityType, MappingFragment propertiesTypeMappingFragment, MappingFragment conditionTypeMappingFragment);
    private static MappingFragment FindConditionTypeMappingFragment(EntitySet tableSet, MappingFragment propertiesTypeMappingFragment, EntityTypeMapping conditionTypeMapping);
    private EntityTypeMapping FindConditionTypeMapping(EntityType entityType, bool requiresSplit, EntityTypeMapping propertiesTypeMapping);
    private bool DetermineRequiresIsTypeOf(TableMapping tableMapping, EntitySet entitySet, EntityType entityType);
    private static bool DetermineRequiresSplitEntityTypeMapping(TableMapping tableMapping, EntityType entityType, bool requiresIsTypeOf);
    private bool FindPropertyEntityTypeMapping(TableMapping tableMapping, EntitySet entitySet, EntityType entityType, bool requiresIsTypeOf, EntityTypeMapping& entityTypeMapping, MappingFragment& fragment);
    private void RemoveFragment(EntitySet entitySet, EntityTypeMapping entityTypeMapping, MappingFragment fragment);
    private static void RemoveRedundantDefaultDiscriminators(TableMapping tableMapping);
    private static bool HasConditions(TableMapping tableMapping, EntityType entityType);
    private static bool IsRootTypeMapping(Dictionary`2<EntityType, EntityTypeMapping> rootMappings, EntityType entityType, IList`1<EdmProperty> propertyPath);
    private TableMapping FindOrCreateTableMapping(EntityType table);
}
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.ForeignKeyPrimitiveOperations : object {
    public static void UpdatePrincipalTables(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType fromTable, EntityType toTable, bool isMappingAnyInheritedProperty);
    private static void UpdatePrincipalTables(DbDatabaseMapping databaseMapping, EntityType toTable, EntityType entityType, bool removeFks);
    private static void UpdatePrincipalTables(DbDatabaseMapping databaseMapping, EntityType toTable, bool removeFks, AssociationType associationType, EntityType et);
    private static void MoveForeignKeyConstraint(EntityType fromTable, EntityType toTable, ForeignKeyBuilder fk);
    private static void CopyForeignKeyConstraint(EdmModel database, EntityType toTable, ForeignKeyBuilder fk, Func`2<EdmProperty, EdmProperty> selector);
    private static bool ContainsEquivalentForeignKey(EntityType dependentTable, EntityType principalTable, IEnumerable`1<EdmProperty> columns);
    private static IList`1<EdmProperty> GetDependentColumns(IEnumerable`1<EdmProperty> sourceColumns, IEnumerable`1<EdmProperty> destinationColumns);
    private static IEnumerable`1<ForeignKeyBuilder> FindAllForeignKeyConstraintsForColumn(EntityType fromTable, EntityType toTable, EdmProperty column);
    public static void CopyAllForeignKeyConstraintsForColumn(EdmModel database, EntityType fromTable, EntityType toTable, EdmProperty column, EdmProperty movedColumn);
    public static void MoveAllDeclaredForeignKeyConstraintsForPrimaryKeyColumns(EntityType entityType, EntityType fromTable, EntityType toTable);
    public static void CopyAllForeignKeyConstraintsForPrimaryKeyColumns(EdmModel database, EntityType fromTable, EntityType toTable);
    public static void MoveAllForeignKeyConstraintsForColumn(EntityType fromTable, EntityType toTable, EdmProperty column);
    public static void RemoveAllForeignKeyConstraintsForColumn(EntityType table, EdmProperty column, DbDatabaseMapping databaseMapping);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.PropertyMappingSpecification : object {
    private EntityType _entityType;
    private IList`1<EdmProperty> _propertyPath;
    private IList`1<ConditionPropertyMapping> _conditions;
    private bool _isDefaultDiscriminatorCondition;
    public EntityType EntityType { get; }
    public IList`1<EdmProperty> PropertyPath { get; }
    public IList`1<ConditionPropertyMapping> Conditions { get; }
    public bool IsDefaultDiscriminatorCondition { get; }
    public PropertyMappingSpecification(EntityType entityType, IList`1<EdmProperty> propertyPath, IList`1<ConditionPropertyMapping> conditions, bool isDefaultDiscriminatorCondition);
    public EntityType get_EntityType();
    public IList`1<EdmProperty> get_PropertyPath();
    public IList`1<ConditionPropertyMapping> get_Conditions();
    public bool get_IsDefaultDiscriminatorCondition();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.SortedEntityTypeIndex : object {
    private static EntityType[] _emptyTypes;
    private Dictionary`2<EntitySet, List`1<EntityType>> _entityTypes;
    private static SortedEntityTypeIndex();
    public void Add(EntitySet entitySet, EntityType entityType);
    public bool Contains(EntitySet entitySet, EntityType entityType);
    public bool IsRoot(EntitySet entitySet, EntityType entityType);
    public IEnumerable`1<EntitySet> GetEntitySets();
    public IEnumerable`1<EntityType> GetEntityTypes(EntitySet entitySet);
}
[DebuggerDisplayAttribute("{Table.Name}")]
internal class System.Data.Entity.ModelConfiguration.Configuration.Mapping.TableMapping : object {
    private EntityType _table;
    private SortedEntityTypeIndex _entityTypes;
    private List`1<ColumnMapping> _columns;
    public EntityType Table { get; }
    public SortedEntityTypeIndex EntityTypes { get; }
    public IEnumerable`1<ColumnMapping> ColumnMappings { get; }
    public TableMapping(EntityType table);
    public EntityType get_Table();
    public SortedEntityTypeIndex get_EntityTypes();
    public IEnumerable`1<ColumnMapping> get_ColumnMappings();
    public void AddEntityTypeMappingFragment(EntitySet entitySet, EntityType entityType, MappingFragment fragment);
    private ColumnMapping FindOrCreateColumnMapping(EdmProperty column);
}
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.TableOperations : object {
    public static EdmProperty CopyColumnAndAnyConstraints(EdmModel database, EntityType fromTable, EntityType toTable, EdmProperty column, Func`2<EdmProperty, bool> isCompatible, bool useExisting);
    public static EdmProperty MoveColumnAndAnyConstraints(EntityType fromTable, EntityType toTable, EdmProperty column, bool useExisting);
}
internal static class System.Data.Entity.ModelConfiguration.Configuration.Mapping.TablePrimitiveOperations : object {
    public static void AddColumn(EntityType table, EdmProperty column);
    public static EdmProperty RemoveColumn(EntityType table, EdmProperty column);
    public static EdmProperty IncludeColumn(EntityType table, EdmProperty templateColumn, Func`2<EdmProperty, bool> isCompatible, bool useExisting);
    public static Func`2<EdmProperty, bool> GetNameMatcher(string name);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ModelConfiguration : ConfigurationBase {
    private Dictionary`2<Type, EntityTypeConfiguration> _entityConfigurations;
    private Dictionary`2<Type, ComplexTypeConfiguration> _complexTypeConfigurations;
    private HashSet`1<Type> _ignoredTypes;
    [CompilerGeneratedAttribute]
private string <DefaultSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelNamespace>k__BackingField;
    public IEnumerable`1<Type> ConfiguredTypes { get; }
    internal IEnumerable`1<Type> Entities { get; }
    internal IEnumerable`1<Type> ComplexTypes { get; }
    internal IEnumerable`1<Type> StructuralTypes { get; }
    public string DefaultSchema { get; public set; }
    public string ModelNamespace { get; public set; }
    private IEnumerable`1<EntityTypeConfiguration> ActiveEntityConfigurations { get; }
    private IEnumerable`1<ComplexTypeConfiguration> ActiveComplexTypeConfigurations { get; }
    private ModelConfiguration(ModelConfiguration source);
    internal virtual ModelConfiguration Clone();
    public virtual IEnumerable`1<Type> get_ConfiguredTypes();
    internal virtual IEnumerable`1<Type> get_Entities();
    internal virtual IEnumerable`1<Type> get_ComplexTypes();
    internal virtual IEnumerable`1<Type> get_StructuralTypes();
    [CompilerGeneratedAttribute]
public string get_DefaultSchema();
    [CompilerGeneratedAttribute]
public void set_DefaultSchema(string value);
    [CompilerGeneratedAttribute]
public string get_ModelNamespace();
    [CompilerGeneratedAttribute]
public void set_ModelNamespace(string value);
    internal virtual void Add(EntityTypeConfiguration entityTypeConfiguration);
    internal virtual void Add(ComplexTypeConfiguration complexTypeConfiguration);
    public virtual EntityTypeConfiguration Entity(Type entityType);
    internal virtual EntityTypeConfiguration Entity(Type entityType, bool explicitEntity);
    public virtual ComplexTypeConfiguration ComplexType(Type complexType);
    public virtual void Ignore(Type type);
    internal virtual StructuralTypeConfiguration GetStructuralTypeConfiguration(Type type);
    public virtual bool IsComplexType(Type type);
    public virtual bool IsIgnoredType(Type type);
    public virtual IEnumerable`1<PropertyInfo> GetConfiguredProperties(Type type);
    public virtual bool IsIgnoredProperty(Type type, PropertyInfo propertyInfo);
    internal void Configure(EdmModel model);
    private void ConfigureEntities(EdmModel model);
    private void ConfigureFunctionMappings(EdmModel model, EntityTypeConfiguration entityTypeConfiguration, EntityType entityType);
    private void ConfigureComplexTypes(EdmModel model);
    internal void Configure(DbDatabaseMapping databaseMapping, DbProviderManifest providerManifest);
    private static void ConfigureFunctionParameters(DbDatabaseMapping databaseMapping);
    private static void UniquifyFunctionNames(DbDatabaseMapping databaseMapping);
    private static void UniquifyFunctionName(DbDatabaseMapping databaseMapping, ModificationStoredProcedureConfiguration modificationStoredProcedureConfiguration, ModificationFunctionMapping functionMapping);
    private void ConfigureDefaultSchema(DbDatabaseMapping databaseMapping);
    private void ConfigureEntityTypes(DbDatabaseMapping databaseMapping, ICollection`1<EntitySet> entitySets, DbProviderManifest providerManifest);
    private static void ConfigureUnconfiguredDerivedTypes(DbDatabaseMapping databaseMapping, ICollection`1<EntitySet> entitySets, DbProviderManifest providerManifest, EntityType entityType, IList`1<EntityTypeConfiguration> sortedEntityConfigurations);
    private static void ConfigureTables(EdmModel database);
    private static void ConfigureTable(EdmModel database, EntityType table);
    private IList`1<EntityTypeConfiguration> SortEntityConfigurationsByInheritance(DbDatabaseMapping databaseMapping);
    internal void NormalizeConfigurations();
    private void DiscoverIndirectlyConfiguredComplexTypes();
    private void ReassignSubtypeMappings();
    private static void RemoveDuplicateTphColumns(DbDatabaseMapping databaseMapping);
    private static void RemoveRedundantColumnConditions(DbDatabaseMapping databaseMapping);
    private static void RemoveRedundantTables(DbDatabaseMapping databaseMapping);
    private IEnumerable`1<EntityTypeConfiguration> get_ActiveEntityConfigurations();
    private IEnumerable`1<ComplexTypeConfiguration> get_ActiveComplexTypeConfigurations();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(KeyValuePair`2<Type, EntityTypeConfiguration> c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(KeyValuePair`2<Type, ComplexTypeConfiguration> c);
    [CompilerGeneratedAttribute]
private void <ConfigureFunctionMappings>b__35_0(EntityType e);
    [CompilerGeneratedAttribute]
private string <ConfigureDefaultSchema>b__41_1(EntitySet es);
    [CompilerGeneratedAttribute]
private string <ConfigureDefaultSchema>b__41_3(EdmFunction f);
    [CompilerGeneratedAttribute]
private ComplexTypeConfiguration <DiscoverIndirectlyConfiguredComplexTypes>b__48_1(Type t);
    [CompilerGeneratedAttribute]
private bool <get_ActiveEntityConfigurations>b__54_0(KeyValuePair`2<Type, EntityTypeConfiguration> keyValuePair);
    [CompilerGeneratedAttribute]
private bool <get_ActiveComplexTypeConfigurations>b__56_0(KeyValuePair`2<Type, ComplexTypeConfiguration> keyValuePair);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfiguration : object {
    private Dictionary`2<ParameterKey, Tuple`2<string, string>> _parameterNames;
    private Dictionary`2<PropertyInfo, string> _resultBindings;
    private string _name;
    private string _schema;
    private string _rowsAffectedParameter;
    private List`1<FunctionParameter> _configuredParameters;
    public string Name { get; }
    public string Schema { get; }
    public string RowsAffectedParameterName { get; }
    public IEnumerable`1<Tuple`2<string, string>> ParameterNames { get; }
    public Dictionary`2<PropertyInfo, string> ResultBindings { get; }
    private ModificationStoredProcedureConfiguration(ModificationStoredProcedureConfiguration source);
    public virtual ModificationStoredProcedureConfiguration Clone();
    public void HasName(string name);
    public void HasName(string name, string schema);
    public string get_Name();
    public string get_Schema();
    public void RowsAffectedParameter(string name);
    public string get_RowsAffectedParameterName();
    public IEnumerable`1<Tuple`2<string, string>> get_ParameterNames();
    public void ClearParameterNames();
    public Dictionary`2<PropertyInfo, string> get_ResultBindings();
    public void Parameter(PropertyPath propertyPath, string parameterName, string originalValueParameterName, bool rightKey);
    public void Result(PropertyPath propertyPath, string columnName);
    public virtual void Configure(ModificationFunctionMapping modificationStoredProcedureMapping, DbProviderManifest providerManifest);
    private void ConfigureName(ModificationFunctionMapping modificationStoredProcedureMapping);
    private void ConfigureSchema(ModificationFunctionMapping modificationStoredProcedureMapping);
    private void ConfigureRowsAffectedParameter(ModificationFunctionMapping modificationStoredProcedureMapping, DbProviderManifest providerManifest);
    private void ConfigureParameters(ModificationFunctionMapping modificationStoredProcedureMapping);
    private void ConfigureResultBindings(ModificationFunctionMapping modificationStoredProcedureMapping);
    public bool IsCompatibleWith(ModificationStoredProcedureConfiguration other);
    public void Merge(ModificationStoredProcedureConfiguration modificationStoredProcedureConfiguration, bool allowOverride);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(KeyValuePair`2<ParameterKey, Tuple`2<string, string>> c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1(KeyValuePair`2<PropertyInfo, string> r);
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase : object {
    private ModificationStoredProcedureConfiguration _configuration;
    internal ModificationStoredProcedureConfiguration Configuration { get; }
    internal ModificationStoredProcedureConfiguration get_Configuration();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration : object {
    private ModificationStoredProcedureConfiguration _insertModificationStoredProcedureConfiguration;
    private ModificationStoredProcedureConfiguration _updateModificationStoredProcedureConfiguration;
    private ModificationStoredProcedureConfiguration _deleteModificationStoredProcedureConfiguration;
    public ModificationStoredProcedureConfiguration InsertModificationStoredProcedureConfiguration { get; }
    public ModificationStoredProcedureConfiguration UpdateModificationStoredProcedureConfiguration { get; }
    public ModificationStoredProcedureConfiguration DeleteModificationStoredProcedureConfiguration { get; }
    private ModificationStoredProceduresConfiguration(ModificationStoredProceduresConfiguration source);
    public virtual ModificationStoredProceduresConfiguration Clone();
    public virtual void Insert(ModificationStoredProcedureConfiguration modificationStoredProcedureConfiguration);
    public virtual void Update(ModificationStoredProcedureConfiguration modificationStoredProcedureConfiguration);
    public virtual void Delete(ModificationStoredProcedureConfiguration modificationStoredProcedureConfiguration);
    public ModificationStoredProcedureConfiguration get_InsertModificationStoredProcedureConfiguration();
    public ModificationStoredProcedureConfiguration get_UpdateModificationStoredProcedureConfiguration();
    public ModificationStoredProcedureConfiguration get_DeleteModificationStoredProcedureConfiguration();
    public virtual void Configure(EntityTypeModificationFunctionMapping modificationStoredProcedureMapping, DbProviderManifest providerManifest);
    public void Configure(AssociationSetModificationFunctionMapping modificationStoredProcedureMapping, DbProviderManifest providerManifest);
    public bool IsCompatibleWith(ModificationStoredProceduresConfiguration other);
    public void Merge(ModificationStoredProceduresConfiguration modificationStoredProceduresConfiguration, bool allowOverride);
}
public class System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1 : object {
    private ModificationStoredProceduresConfiguration _configuration;
    internal ModificationStoredProceduresConfiguration Configuration { get; }
    internal ModificationStoredProceduresConfiguration get_Configuration();
    public ModificationStoredProceduresConfiguration`1<TEntityType> Insert(Action`1<InsertModificationStoredProcedureConfiguration`1<TEntityType>> modificationStoredProcedureConfigurationAction);
    public ModificationStoredProceduresConfiguration`1<TEntityType> Update(Action`1<UpdateModificationStoredProcedureConfiguration`1<TEntityType>> modificationStoredProcedureConfigurationAction);
    public ModificationStoredProceduresConfiguration`1<TEntityType> Delete(Action`1<DeleteModificationStoredProcedureConfiguration`1<TEntityType>> modificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration : object {
    private EntityMappingConfiguration _entityMappingConfiguration;
    [CompilerGeneratedAttribute]
private PropertyPath <PropertyPath>k__BackingField;
    internal PropertyPath PropertyPath { get; internal set; }
    internal NotNullConditionConfiguration(EntityMappingConfiguration entityMapConfiguration, PropertyPath propertyPath);
    private NotNullConditionConfiguration(EntityMappingConfiguration owner, NotNullConditionConfiguration source);
    [CompilerGeneratedAttribute]
internal PropertyPath get_PropertyPath();
    [CompilerGeneratedAttribute]
internal void set_PropertyPath(PropertyPath value);
    internal virtual NotNullConditionConfiguration Clone(EntityMappingConfiguration owner);
    public void HasValue();
    internal void Configure(DbDatabaseMapping databaseMapping, MappingFragment fragment, EntityType entityType);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2 : object {
    private NavigationPropertyConfiguration _navigationPropertyConfiguration;
    internal OptionalNavigationPropertyConfiguration`2(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public DependentNavigationPropertyConfiguration`1<TEntityType> WithMany(Expression`1<Func`2<TTargetEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression);
    public DependentNavigationPropertyConfiguration`1<TEntityType> WithMany();
    public ForeignKeyNavigationPropertyConfiguration WithRequired(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithRequired();
    public ForeignKeyNavigationPropertyConfiguration WithOptionalDependent(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithOptionalDependent();
    public ForeignKeyNavigationPropertyConfiguration WithOptionalPrincipal(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithOptionalPrincipal();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration : object {
    private IndexConfiguration _configuration;
    internal PrimaryKeyIndexConfiguration(IndexConfiguration configuration);
    public PrimaryKeyIndexConfiguration IsClustered();
    public PrimaryKeyIndexConfiguration IsClustered(bool clustered);
    public PrimaryKeyIndexConfiguration HasName(string name);
}
public class System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration : object {
    private PrimitivePropertyConfiguration _configuration;
    internal PrimitivePropertyConfiguration Configuration { get; }
    internal PrimitiveColumnConfiguration(PrimitivePropertyConfiguration configuration);
    internal PrimitivePropertyConfiguration get_Configuration();
    public PrimitiveColumnConfiguration IsOptional();
    public PrimitiveColumnConfiguration IsRequired();
    public PrimitiveColumnConfiguration HasColumnType(string columnType);
    public PrimitiveColumnConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration : object {
    private PrimitivePropertyConfiguration _configuration;
    internal PrimitivePropertyConfiguration Configuration { get; }
    internal PrimitivePropertyConfiguration(PrimitivePropertyConfiguration configuration);
    internal PrimitivePropertyConfiguration get_Configuration();
    public PrimitivePropertyConfiguration IsOptional();
    public PrimitivePropertyConfiguration IsRequired();
    public PrimitivePropertyConfiguration HasDatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> databaseGeneratedOption);
    public PrimitivePropertyConfiguration IsConcurrencyToken();
    public PrimitivePropertyConfiguration IsConcurrencyToken(Nullable`1<bool> concurrencyToken);
    public PrimitivePropertyConfiguration HasColumnType(string columnType);
    public PrimitivePropertyConfiguration HasColumnName(string columnName);
    public PrimitivePropertyConfiguration HasColumnAnnotation(string name, object value);
    public PrimitivePropertyConfiguration HasParameterName(string parameterName);
    public PrimitivePropertyConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Index.IndexConfiguration : PropertyConfiguration {
    private Nullable`1<bool> _isUnique;
    private Nullable`1<bool> _isClustered;
    private string _name;
    public Nullable`1<bool> IsUnique { get; public set; }
    public Nullable`1<bool> IsClustered { get; public set; }
    public string Name { get; public set; }
    internal IndexConfiguration(IndexConfiguration source);
    public Nullable`1<bool> get_IsUnique();
    public void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsClustered();
    public void set_IsClustered(Nullable`1<bool> value);
    public string get_Name();
    public void set_Name(string value);
    internal virtual IndexConfiguration Clone();
    internal void Configure(EdmProperty edmProperty, int indexOrder);
    internal void Configure(EntityType entityType);
    private static void AddAnnotationWithMerge(MetadataItem metadataItem, IndexAnnotation newAnnotation);
}
internal abstract class System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.ConstraintConfiguration : object {
    public bool IsFullySpecified { get; }
    internal abstract virtual ConstraintConfiguration Clone();
    internal abstract virtual void Configure(AssociationType associationType, AssociationEndMember dependentEnd, EntityTypeConfiguration entityTypeConfiguration);
    public virtual bool get_IsFullySpecified();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.ConventionNavigationPropertyConfiguration : object {
    private NavigationPropertyConfiguration _configuration;
    private ModelConfiguration _modelConfiguration;
    public PropertyInfo ClrPropertyInfo { get; }
    internal NavigationPropertyConfiguration Configuration { get; }
    internal ConventionNavigationPropertyConfiguration(NavigationPropertyConfiguration configuration, ModelConfiguration modelConfiguration);
    public virtual PropertyInfo get_ClrPropertyInfo();
    internal NavigationPropertyConfiguration get_Configuration();
    public virtual void HasConstraint();
    public virtual void HasConstraint(Action`1<T> constraintConfigurationAction);
    private void HasConstraintInternal(Action`1<T> constraintConfigurationAction);
    private bool HasConfiguredConstraint();
    public virtual ConventionNavigationPropertyConfiguration HasInverseNavigationProperty(Func`2<PropertyInfo, PropertyInfo> inverseNavigationPropertyGetter);
    public virtual ConventionNavigationPropertyConfiguration HasInverseEndMultiplicity(RelationshipMultiplicity multiplicity);
    public virtual ConventionNavigationPropertyConfiguration IsDeclaringTypePrincipal(bool isPrincipal);
    public virtual ConventionNavigationPropertyConfiguration HasDeleteAction(OperationAction deleteAction);
    public virtual ConventionNavigationPropertyConfiguration HasRelationshipMultiplicity(RelationshipMultiplicity multiplicity);
    private static void VerifyMultiplicityCompatibility(RelationshipMultiplicity multiplicity, PropertyInfo propertyInfo);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.ForeignKeyConstraintConfiguration : ConstraintConfiguration {
    private List`1<PropertyInfo> _dependentProperties;
    private bool _isFullySpecified;
    public bool IsFullySpecified { get; }
    internal IEnumerable`1<PropertyInfo> ToProperties { get; }
    internal ForeignKeyConstraintConfiguration(IEnumerable`1<PropertyInfo> dependentProperties);
    private ForeignKeyConstraintConfiguration(ForeignKeyConstraintConfiguration source);
    internal virtual ConstraintConfiguration Clone();
    public virtual bool get_IsFullySpecified();
    internal IEnumerable`1<PropertyInfo> get_ToProperties();
    public void AddColumn(PropertyInfo propertyInfo);
    internal virtual void Configure(AssociationType associationType, AssociationEndMember dependentEnd, EntityTypeConfiguration entityTypeConfiguration);
    public bool Equals(ForeignKeyConstraintConfiguration other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.IndependentConstraintConfiguration : ConstraintConfiguration {
    private static ConstraintConfiguration _instance;
    public static ConstraintConfiguration Instance { get; }
    private static IndependentConstraintConfiguration();
    public static ConstraintConfiguration get_Instance();
    internal virtual ConstraintConfiguration Clone();
    internal virtual void Configure(AssociationType associationType, AssociationEndMember dependentEnd, EntityTypeConfiguration entityTypeConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.NavigationPropertyConfiguration : PropertyConfiguration {
    private PropertyInfo _navigationProperty;
    private Nullable`1<RelationshipMultiplicity> _endKind;
    private PropertyInfo _inverseNavigationProperty;
    private Nullable`1<RelationshipMultiplicity> _inverseEndKind;
    private ConstraintConfiguration _constraint;
    private AssociationMappingConfiguration _associationMappingConfiguration;
    private ModificationStoredProceduresConfiguration _modificationStoredProceduresConfiguration;
    [CompilerGeneratedAttribute]
private Nullable`1<OperationAction> <DeleteAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNavigationPropertyDeclaringTypePrincipal>k__BackingField;
    public Nullable`1<OperationAction> DeleteAction { get; public set; }
    internal PropertyInfo NavigationProperty { get; }
    public Nullable`1<RelationshipMultiplicity> RelationshipMultiplicity { get; public set; }
    internal PropertyInfo InverseNavigationProperty { get; internal set; }
    internal Nullable`1<RelationshipMultiplicity> InverseEndKind { get; internal set; }
    public ConstraintConfiguration Constraint { get; public set; }
    internal Nullable`1<bool> IsNavigationPropertyDeclaringTypePrincipal { get; internal set; }
    internal AssociationMappingConfiguration AssociationMappingConfiguration { get; internal set; }
    internal ModificationStoredProceduresConfiguration ModificationStoredProceduresConfiguration { get; internal set; }
    internal NavigationPropertyConfiguration(PropertyInfo navigationProperty);
    private NavigationPropertyConfiguration(NavigationPropertyConfiguration source);
    internal virtual NavigationPropertyConfiguration Clone();
    [CompilerGeneratedAttribute]
public Nullable`1<OperationAction> get_DeleteAction();
    [CompilerGeneratedAttribute]
public void set_DeleteAction(Nullable`1<OperationAction> value);
    internal PropertyInfo get_NavigationProperty();
    public Nullable`1<RelationshipMultiplicity> get_RelationshipMultiplicity();
    public void set_RelationshipMultiplicity(Nullable`1<RelationshipMultiplicity> value);
    internal PropertyInfo get_InverseNavigationProperty();
    internal void set_InverseNavigationProperty(PropertyInfo value);
    internal Nullable`1<RelationshipMultiplicity> get_InverseEndKind();
    internal void set_InverseEndKind(Nullable`1<RelationshipMultiplicity> value);
    public ConstraintConfiguration get_Constraint();
    public void set_Constraint(ConstraintConfiguration value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsNavigationPropertyDeclaringTypePrincipal();
    [CompilerGeneratedAttribute]
internal void set_IsNavigationPropertyDeclaringTypePrincipal(Nullable`1<bool> value);
    internal AssociationMappingConfiguration get_AssociationMappingConfiguration();
    internal void set_AssociationMappingConfiguration(AssociationMappingConfiguration value);
    internal ModificationStoredProceduresConfiguration get_ModificationStoredProceduresConfiguration();
    internal void set_ModificationStoredProceduresConfiguration(ModificationStoredProceduresConfiguration value);
    internal void Configure(NavigationProperty navigationProperty, EdmModel model, EntityTypeConfiguration entityTypeConfiguration);
    internal void Configure(AssociationSetMapping associationSetMapping, DbDatabaseMapping databaseMapping, DbProviderManifest providerManifest);
    private void ConfigureInverse(AssociationType associationType, EdmModel model);
    private void ConfigureEndKinds(AssociationType associationType, NavigationPropertyConfiguration configuration);
    private void EnsureConsistency(NavigationPropertyConfiguration navigationPropertyConfiguration);
    private void ConfigureDependentBehavior(AssociationType associationType, EdmModel model, EntityTypeConfiguration entityTypeConfiguration);
    private void ConfigureConstraint(AssociationType associationType, AssociationEndMember dependentEnd, EntityTypeConfiguration entityTypeConfiguration);
    private void ConfigureDeleteAction(AssociationEndMember principalEnd);
    internal void Reset();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.BinaryPropertyConfiguration : LengthPropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRowVersion>k__BackingField;
    public Nullable`1<bool> IsRowVersion { get; public set; }
    private BinaryPropertyConfiguration(BinaryPropertyConfiguration source);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRowVersion();
    [CompilerGeneratedAttribute]
public void set_IsRowVersion(Nullable`1<bool> value);
    internal virtual PrimitivePropertyConfiguration Clone();
    protected virtual void ConfigureProperty(EdmProperty property);
    protected virtual void ConfigureColumn(EdmProperty column, EntityType table, DbProviderManifest providerManifest);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.DateTimePropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Precision>k__BackingField;
    public Nullable`1<byte> Precision { get; public set; }
    private DateTimePropertyConfiguration(DateTimePropertyConfiguration source);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<byte> value);
    internal virtual PrimitivePropertyConfiguration Clone();
    protected virtual void ConfigureProperty(EdmProperty property);
    internal virtual void Configure(EdmProperty column, FacetDescription facetDescription);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.DecimalPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Scale>k__BackingField;
    public Nullable`1<byte> Precision { get; public set; }
    public Nullable`1<byte> Scale { get; public set; }
    private DecimalPropertyConfiguration(DecimalPropertyConfiguration source);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<byte> value);
    internal virtual PrimitivePropertyConfiguration Clone();
    protected virtual void ConfigureProperty(EdmProperty property);
    internal virtual void Configure(EdmProperty column, FacetDescription facetDescription);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
}
internal abstract class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.LengthPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMaxLength>k__BackingField;
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public Nullable`1<bool> IsMaxLength { get; public set; }
    protected LengthPropertyConfiguration(LengthPropertyConfiguration source);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFixedLength();
    [CompilerGeneratedAttribute]
public void set_IsFixedLength(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMaxLength();
    [CompilerGeneratedAttribute]
public void set_IsMaxLength(Nullable`1<bool> value);
    protected virtual void ConfigureProperty(EdmProperty property);
    internal virtual void Configure(EdmProperty column, FacetDescription facetDescription);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
}
[FlagsAttribute]
internal enum System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.OverridableConfigurationParts : Enum {
    public int value__;
    public static OverridableConfigurationParts None;
    public static OverridableConfigurationParts OverridableInCSpace;
    public static OverridableConfigurationParts OverridableInSSpace;
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.PrimitivePropertyConfiguration : PropertyConfiguration {
    private IDictionary`2<string, object> _annotations;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConcurrencyMode> <ConcurrencyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DatabaseGeneratedOption> <DatabaseGeneratedOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private OverridableConfigurationParts <OverridableConfigurationParts>k__BackingField;
    [CompilerGeneratedAttribute]
private StructuralTypeConfiguration <TypeConfiguration>k__BackingField;
    public Nullable`1<bool> IsNullable { get; public set; }
    public Nullable`1<ConcurrencyMode> ConcurrencyMode { get; public set; }
    public Nullable`1<DatabaseGeneratedOption> DatabaseGeneratedOption { get; public set; }
    public string ColumnType { get; public set; }
    public string ColumnName { get; public set; }
    public IDictionary`2<string, object> Annotations { get; }
    public string ParameterName { get; public set; }
    public Nullable`1<int> ColumnOrder { get; public set; }
    internal OverridableConfigurationParts OverridableConfigurationParts { get; internal set; }
    internal StructuralTypeConfiguration TypeConfiguration { get; internal set; }
    protected PrimitivePropertyConfiguration(PrimitivePropertyConfiguration source);
    internal virtual PrimitivePropertyConfiguration Clone();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ConcurrencyMode> get_ConcurrencyMode();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyMode(Nullable`1<ConcurrencyMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DatabaseGeneratedOption> get_DatabaseGeneratedOption();
    [CompilerGeneratedAttribute]
public void set_DatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    public IDictionary`2<string, object> get_Annotations();
    public virtual void SetAnnotation(string name, object value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrder();
    [CompilerGeneratedAttribute]
public void set_ColumnOrder(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal OverridableConfigurationParts get_OverridableConfigurationParts();
    [CompilerGeneratedAttribute]
internal void set_OverridableConfigurationParts(OverridableConfigurationParts value);
    [CompilerGeneratedAttribute]
internal StructuralTypeConfiguration get_TypeConfiguration();
    [CompilerGeneratedAttribute]
internal void set_TypeConfiguration(StructuralTypeConfiguration value);
    internal virtual void Configure(EdmProperty property);
    private PrimitivePropertyConfiguration MergeWithExistingConfiguration(EdmProperty property, Func`2<string, Exception> getConflictException, bool inCSpace, bool fillFromExistingConfiguration);
    private PrimitivePropertyConfiguration OverrideFrom(PrimitivePropertyConfiguration overridingConfiguration, bool inCSpace);
    protected virtual void ConfigureProperty(EdmProperty property);
    internal void Configure(IEnumerable`1<Tuple`2<ColumnMappingBuilder, EntityType>> propertyMappings, DbProviderManifest providerManifest, bool allowOverride, bool fillFromExistingConfiguration);
    internal void ConfigureFunctionParameters(IEnumerable`1<FunctionParameter> parameters);
    private void ConfigureParameterName(FunctionParameter parameter);
    internal void Configure(EdmProperty column, EntityType table, DbProviderManifest providerManifest, bool allowOverride, bool fillFromExistingConfiguration);
    protected virtual void ConfigureColumn(EdmProperty column, EntityType table, DbProviderManifest providerManifest);
    private void ConfigureColumnName(EdmProperty column, EntityType table);
    private void ConfigureAnnotations(EdmProperty column);
    internal virtual void Configure(EdmProperty column, FacetDescription facetDescription);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
    private bool AnnotationsAreCompatible(PrimitivePropertyConfiguration other, String& errorMessage);
    protected bool IsCompatible(Expression`1<Func`2<TConfiguration, Nullable`1<TProperty>>> propertyExpression, TConfiguration other, String& errorMessage);
    protected bool IsCompatible(Expression`1<Func`2<TConfiguration, string>> propertyExpression, TConfiguration other, String& errorMessage);
    protected static bool IsCompatible(Nullable`1<T> thisConfiguration, Nullable`1<T> other);
    protected static bool IsCompatible(string thisConfiguration, string other);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.StringPropertyConfiguration : LengthPropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    public Nullable`1<bool> IsUnicode { get; public set; }
    private StringPropertyConfiguration(StringPropertyConfiguration source);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public void set_IsUnicode(Nullable`1<bool> value);
    internal virtual PrimitivePropertyConfiguration Clone();
    protected virtual void ConfigureProperty(EdmProperty property);
    internal virtual void Configure(EdmProperty column, FacetDescription facetDescription);
    internal virtual void CopyFrom(PrimitivePropertyConfiguration other);
    internal virtual void FillFrom(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual void MakeCompatibleWith(PrimitivePropertyConfiguration other, bool inCSpace);
    internal virtual bool IsCompatible(PrimitivePropertyConfiguration other, bool inCSpace, String& errorMessage);
}
internal abstract class System.Data.Entity.ModelConfiguration.Configuration.Properties.PropertyConfiguration : ConfigurationBase {
}
public class System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<PropertyInfo, bool>> _predicates;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> Predicates { get; }
    internal PropertyConventionConfiguration(ConventionsConfiguration conventionsConfiguration);
    private PropertyConventionConfiguration(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<PropertyInfo, bool>> predicates);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> get_Predicates();
    public PropertyConventionConfiguration Where(Func`2<PropertyInfo, bool> predicate);
    public PropertyConventionWithHavingConfiguration`1<T> Having(Func`2<PropertyInfo, T> capturingPredicate);
    public void Configure(Action`1<ConventionPrimitivePropertyConfiguration> propertyConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1 : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<PropertyInfo, bool>> _predicates;
    private Func`2<PropertyInfo, T> _capturingPredicate;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> Predicates { get; }
    internal Func`2<PropertyInfo, T> CapturingPredicate { get; }
    internal PropertyConventionWithHavingConfiguration`1(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<PropertyInfo, bool>> predicates, Func`2<PropertyInfo, T> capturingPredicate);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> get_Predicates();
    internal Func`2<PropertyInfo, T> get_CapturingPredicate();
    public void Configure(Action`2<ConventionPrimitivePropertyConfiguration, T> propertyConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration : object {
    private PrimitivePropertyConfiguration _configuration;
    internal PrimitivePropertyConfiguration Configuration { get; }
    internal PropertyMappingConfiguration(PrimitivePropertyConfiguration configuration);
    internal PrimitivePropertyConfiguration get_Configuration();
    public PropertyMappingConfiguration HasColumnName(string columnName);
    public PropertyMappingConfiguration HasColumnAnnotation(string name, object value);
}
public class System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2 : object {
    private NavigationPropertyConfiguration _navigationPropertyConfiguration;
    internal RequiredNavigationPropertyConfiguration`2(NavigationPropertyConfiguration navigationPropertyConfiguration);
    public DependentNavigationPropertyConfiguration`1<TEntityType> WithMany(Expression`1<Func`2<TTargetEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression);
    public DependentNavigationPropertyConfiguration`1<TEntityType> WithMany();
    public ForeignKeyNavigationPropertyConfiguration WithOptional(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithOptional();
    public ForeignKeyNavigationPropertyConfiguration WithRequiredDependent(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithRequiredDependent();
    public ForeignKeyNavigationPropertyConfiguration WithRequiredPrincipal(Expression`1<Func`2<TTargetEntityType, TEntityType>> navigationPropertyExpression);
    public ForeignKeyNavigationPropertyConfiguration WithRequiredPrincipal();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration : LengthColumnConfiguration {
    internal StringPropertyConfiguration Configuration { get; }
    internal StringColumnConfiguration(StringPropertyConfiguration configuration);
    internal StringPropertyConfiguration get_Configuration();
    public StringColumnConfiguration IsMaxLength();
    public StringColumnConfiguration HasMaxLength(Nullable`1<int> value);
    public StringColumnConfiguration IsFixedLength();
    public StringColumnConfiguration IsVariableLength();
    public StringColumnConfiguration IsOptional();
    public StringColumnConfiguration IsRequired();
    public StringColumnConfiguration HasColumnType(string columnType);
    public StringColumnConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    public StringColumnConfiguration IsUnicode();
    public StringColumnConfiguration IsUnicode(Nullable`1<bool> unicode);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration : LengthPropertyConfiguration {
    internal StringPropertyConfiguration Configuration { get; }
    internal StringPropertyConfiguration(StringPropertyConfiguration configuration);
    public StringPropertyConfiguration IsMaxLength();
    public StringPropertyConfiguration HasMaxLength(Nullable`1<int> value);
    public StringPropertyConfiguration IsFixedLength();
    public StringPropertyConfiguration IsVariableLength();
    public StringPropertyConfiguration IsOptional();
    public StringPropertyConfiguration IsRequired();
    public StringPropertyConfiguration HasDatabaseGeneratedOption(Nullable`1<DatabaseGeneratedOption> databaseGeneratedOption);
    public StringPropertyConfiguration IsConcurrencyToken();
    public StringPropertyConfiguration IsConcurrencyToken(Nullable`1<bool> concurrencyToken);
    public StringPropertyConfiguration HasColumnName(string columnName);
    public StringPropertyConfiguration HasColumnAnnotation(string name, object value);
    public StringPropertyConfiguration HasColumnType(string columnType);
    public StringPropertyConfiguration HasColumnOrder(Nullable`1<int> columnOrder);
    public StringPropertyConfiguration IsUnicode();
    public StringPropertyConfiguration IsUnicode(Nullable`1<bool> unicode);
    internal StringPropertyConfiguration get_Configuration();
}
public abstract class System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1 : object {
    internal StructuralTypeConfiguration Configuration { get; }
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<T>>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, HierarchyId>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DbGeometry>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DbGeography>> propertyExpression);
    public StringPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, string>> propertyExpression);
    public BinaryPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Byte[]>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, decimal>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<decimal>>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DateTime>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<DateTime>>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DateTimeOffset>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<DateTimeOffset>>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeSpan>> propertyExpression);
    public DateTimePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeSpan>>> propertyExpression);
    internal abstract virtual StructuralTypeConfiguration get_Configuration();
    internal abstract virtual TPrimitivePropertyConfiguration Property(LambdaExpression lambdaExpression);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.TphColumnFixer : object {
    private IList`1<ColumnMappingBuilder> _columnMappings;
    private EntityType _table;
    private EdmModel _storeModel;
    public TphColumnFixer(IEnumerable`1<ColumnMappingBuilder> columnMappings, EntityType table, EdmModel storeModel);
    public void RemoveDuplicateTphColumns();
}
public class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<Type, bool>> _predicates;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<Type, bool>> Predicates { get; }
    internal TypeConventionConfiguration(ConventionsConfiguration conventionsConfiguration);
    private TypeConventionConfiguration(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<Type, bool>> predicates);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<Type, bool>> get_Predicates();
    public TypeConventionConfiguration Where(Func`2<Type, bool> predicate);
    public TypeConventionWithHavingConfiguration`1<T> Having(Func`2<Type, T> capturingPredicate);
    public void Configure(Action`1<ConventionTypeConfiguration> entityConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1 : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<Type, bool>> _predicates;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<Type, bool>> Predicates { get; }
    internal TypeConventionConfiguration`1(ConventionsConfiguration conventionsConfiguration);
    private TypeConventionConfiguration`1(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<Type, bool>> predicates);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<Type, bool>> get_Predicates();
    public TypeConventionConfiguration`1<T> Where(Func`2<Type, bool> predicate);
    public TypeConventionWithHavingConfiguration`2<T, TValue> Having(Func`2<Type, TValue> capturingPredicate);
    public void Configure(Action`1<ConventionTypeConfiguration`1<T>> entityConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1 : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<Type, bool>> _predicates;
    private Func`2<Type, T> _capturingPredicate;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<Type, bool>> Predicates { get; }
    internal Func`2<Type, T> CapturingPredicate { get; }
    internal TypeConventionWithHavingConfiguration`1(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<Type, bool>> predicates, Func`2<Type, T> capturingPredicate);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<Type, bool>> get_Predicates();
    internal Func`2<Type, T> get_CapturingPredicate();
    public void Configure(Action`2<ConventionTypeConfiguration, T> entityConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2 : object {
    private ConventionsConfiguration _conventionsConfiguration;
    private IEnumerable`1<Func`2<Type, bool>> _predicates;
    private Func`2<Type, TValue> _capturingPredicate;
    internal ConventionsConfiguration ConventionsConfiguration { get; }
    internal IEnumerable`1<Func`2<Type, bool>> Predicates { get; }
    internal Func`2<Type, TValue> CapturingPredicate { get; }
    internal TypeConventionWithHavingConfiguration`2(ConventionsConfiguration conventionsConfiguration, IEnumerable`1<Func`2<Type, bool>> predicates, Func`2<Type, TValue> capturingPredicate);
    internal ConventionsConfiguration get_ConventionsConfiguration();
    internal IEnumerable`1<Func`2<Type, bool>> get_Predicates();
    internal Func`2<Type, TValue> get_CapturingPredicate();
    public void Configure(Action`2<ConventionTypeConfiguration`1<T>, TValue> entityConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration : StructuralTypeConfiguration {
    internal ComplexTypeConfiguration(Type structuralType);
    private ComplexTypeConfiguration(ComplexTypeConfiguration source);
    internal virtual ComplexTypeConfiguration Clone();
    internal virtual void Configure(ComplexType complexType);
}
internal class System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration : StructuralTypeConfiguration {
    private List`1<PropertyInfo> _keyProperties;
    private IndexConfiguration _keyConfiguration;
    private Dictionary`2<PropertyPath, IndexConfiguration> _indexConfigurations;
    private Dictionary`2<PropertyInfo, NavigationPropertyConfiguration> _navigationPropertyConfigurations;
    private List`1<EntityMappingConfiguration> _entityMappingConfigurations;
    private Dictionary`2<Type, EntityMappingConfiguration> _entitySubTypesMappingConfigurations;
    private List`1<EntityMappingConfiguration> _nonCloneableMappings;
    private IDictionary`2<string, object> _annotations;
    private string _entitySetName;
    private ModificationStoredProceduresConfiguration _modificationStoredProceduresConfiguration;
    [CompilerGeneratedAttribute]
private bool <IsTableNameConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReplaceable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicitEntity>k__BackingField;
    internal IEnumerable`1<Type> ConfiguredComplexTypes { get; }
    internal bool IsStructuralConfigurationOnly { get; }
    internal bool IsKeyConfigured { get; }
    internal IEnumerable`1<PropertyInfo> KeyProperties { get; }
    internal IEnumerable`1<PropertyPath> PropertyIndexes { get; }
    public bool IsTableNameConfigured { get; private set; }
    internal bool IsReplaceable { get; internal set; }
    internal bool IsExplicitEntity { get; internal set; }
    internal ModificationStoredProceduresConfiguration ModificationStoredProceduresConfiguration { get; }
    public string EntitySetName { get; public set; }
    internal IEnumerable`1<PropertyInfo> ConfiguredProperties { get; }
    public string TableName { get; }
    public string SchemaName { get; }
    public IDictionary`2<string, object> Annotations { get; }
    internal Dictionary`2<Type, EntityMappingConfiguration> SubTypeMappingConfigurations { get; }
    internal EntityTypeConfiguration(Type structuralType);
    private EntityTypeConfiguration(EntityTypeConfiguration source);
    internal virtual EntityTypeConfiguration Clone();
    internal IEnumerable`1<Type> get_ConfiguredComplexTypes();
    internal bool get_IsStructuralConfigurationOnly();
    internal virtual void RemoveProperty(PropertyPath propertyPath);
    internal bool get_IsKeyConfigured();
    internal IEnumerable`1<PropertyInfo> get_KeyProperties();
    internal virtual void Key(IEnumerable`1<PropertyInfo> keyProperties);
    public void Key(PropertyInfo propertyInfo);
    internal virtual void Key(PropertyInfo propertyInfo, Nullable`1<OverridableConfigurationParts> overridableConfigurationParts);
    internal virtual IndexConfiguration ConfigureKey();
    internal IEnumerable`1<PropertyPath> get_PropertyIndexes();
    internal virtual IndexConfiguration Index(PropertyPath indexProperties);
    internal void ClearKey();
    [CompilerGeneratedAttribute]
public bool get_IsTableNameConfigured();
    [CompilerGeneratedAttribute]
private void set_IsTableNameConfigured(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsReplaceable();
    [CompilerGeneratedAttribute]
internal void set_IsReplaceable(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsExplicitEntity();
    [CompilerGeneratedAttribute]
internal void set_IsExplicitEntity(bool value);
    internal ModificationStoredProceduresConfiguration get_ModificationStoredProceduresConfiguration();
    internal virtual void MapToStoredProcedures();
    internal virtual void MapToStoredProcedures(ModificationStoredProceduresConfiguration modificationStoredProceduresConfiguration, bool allowOverride);
    internal void ReplaceFrom(EntityTypeConfiguration existing);
    public virtual string get_EntitySetName();
    public virtual void set_EntitySetName(string value);
    internal virtual IEnumerable`1<PropertyInfo> get_ConfiguredProperties();
    public string get_TableName();
    public string get_SchemaName();
    internal DatabaseName GetTableName();
    public void ToTable(string tableName);
    public void ToTable(string tableName, string schemaName);
    public IDictionary`2<string, object> get_Annotations();
    public virtual void SetAnnotation(string name, object value);
    private void UpdateTableNameForSubTypes();
    internal void AddMappingConfiguration(EntityMappingConfiguration mappingConfiguration, bool cloneable);
    internal void AddSubTypeMappingConfiguration(Type subType, EntityMappingConfiguration mappingConfiguration);
    internal Dictionary`2<Type, EntityMappingConfiguration> get_SubTypeMappingConfigurations();
    internal NavigationPropertyConfiguration Navigation(PropertyInfo propertyInfo);
    internal virtual void Configure(EntityType entityType, EdmModel model);
    private void ConfigureEntitySetName(EntityType entityType, EdmModel model);
    private void ConfigureKey(EntityType entityType);
    private void ConfigureIndexes(DbDatabaseMapping mapping, EntityType entityType);
    private void ConfigureAssociations(EntityType entityType, EdmModel model);
    internal void ConfigureTablesAndConditions(EntityTypeMapping entityTypeMapping, DbDatabaseMapping databaseMapping, ICollection`1<EntitySet> entitySets, DbProviderManifest providerManifest);
    internal bool IsMappingAnyInheritedProperty(EntityType entityType);
    internal bool IsNavigationPropertyConfigured(PropertyInfo propertyInfo);
    internal static void ConfigureUnconfiguredType(DbDatabaseMapping databaseMapping, ICollection`1<EntitySet> entitySets, DbProviderManifest providerManifest, EntityType entityType, IDictionary`2<string, object> commonAnnotations);
    internal void Configure(EntityType entityType, DbDatabaseMapping databaseMapping, DbProviderManifest providerManifest);
    internal void ConfigureFunctionParameters(DbDatabaseMapping databaseMapping, EntityType entityType);
    private void ConfigureModificationStoredProcedures(DbDatabaseMapping databaseMapping, EntityType entityType, DbProviderManifest providerManifest);
    private void ConfigurePropertyMappings(DbDatabaseMapping databaseMapping, EntityType entityType, DbProviderManifest providerManifest, bool allowOverride);
    private void ConfigureAssociationMappings(DbDatabaseMapping databaseMapping, EntityType entityType, DbProviderManifest providerManifest);
    private static void ConfigureDependentKeys(DbDatabaseMapping databaseMapping, DbProviderManifest providerManifest);
    private static void VerifyAllCSpacePropertiesAreMapped(ICollection`1<EntityTypeMapping> entityTypeMappings, IEnumerable`1<EdmProperty> properties, IList`1<EdmProperty> propertyPath);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(KeyValuePair`2<PropertyPath, IndexConfiguration> c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(KeyValuePair`2<PropertyInfo, NavigationPropertyConfiguration> c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2(KeyValuePair`2<Type, EntityMappingConfiguration> c);
    [CompilerGeneratedAttribute]
private DatabaseName <UpdateTableNameForSubTypes>b__62_2(EntityMappingConfiguration tphmc);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType54`2<PropertyInfo, Nullable`1<int>> <ConfigureKey>b__70_0(PropertyInfo p);
}
internal abstract class System.Data.Entity.ModelConfiguration.Configuration.Types.StructuralTypeConfiguration : ConfigurationBase {
    private Dictionary`2<PropertyPath, PrimitivePropertyConfiguration> _primitivePropertyConfigurations;
    private HashSet`1<PropertyInfo> _ignoredProperties;
    private Type _clrType;
    internal IEnumerable`1<PropertyInfo> ConfiguredProperties { get; }
    internal IEnumerable`1<PropertyInfo> IgnoredProperties { get; }
    internal Type ClrType { get; }
    internal IEnumerable`1<KeyValuePair`2<PropertyPath, PrimitivePropertyConfiguration>> PrimitivePropertyConfigurations { get; }
    internal StructuralTypeConfiguration(Type clrType);
    internal StructuralTypeConfiguration(StructuralTypeConfiguration source);
    internal static Type GetPropertyConfigurationType(Type propertyType);
    internal virtual IEnumerable`1<PropertyInfo> get_ConfiguredProperties();
    internal IEnumerable`1<PropertyInfo> get_IgnoredProperties();
    internal Type get_ClrType();
    internal IEnumerable`1<KeyValuePair`2<PropertyPath, PrimitivePropertyConfiguration>> get_PrimitivePropertyConfigurations();
    public void Ignore(PropertyInfo propertyInfo);
    internal PrimitivePropertyConfiguration Property(PropertyPath propertyPath, Nullable`1<OverridableConfigurationParts> overridableConfigurationParts);
    internal virtual void RemoveProperty(PropertyPath propertyPath);
    internal TPrimitivePropertyConfiguration Property(PropertyPath propertyPath, Func`1<TPrimitivePropertyConfiguration> primitivePropertyConfigurationCreator);
    internal void ConfigurePropertyMappings(IList`1<Tuple`2<ColumnMappingBuilder, EntityType>> propertyMappings, DbProviderManifest providerManifest, bool allowOverride);
    internal void ConfigureFunctionParameters(IList`1<ModificationFunctionParameterBinding> parameterBindings);
    internal void Configure(string structuralTypeName, IEnumerable`1<EdmProperty> properties, ICollection`1<MetadataProperty> dataModelAnnotations);
    private static void Configure(string structuralTypeName, IEnumerable`1<EdmProperty> properties, IEnumerable`1<PropertyInfo> propertyPath, PrimitivePropertyConfiguration propertyConfiguration);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(KeyValuePair`2<PropertyPath, PrimitivePropertyConfiguration> c);
}
public class System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1 : ModificationStoredProcedureConfigurationBase {
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> HasName(string procedureName, string schemaName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, string>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Parameter(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string currentValueParameterName, string originalValueParameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, Nullable`1<TProperty>>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, string>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, Byte[]>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, DbGeography>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Result(Expression`1<Func`2<TEntityType, DbGeometry>> propertyExpression, string columnName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> RowsAffectedParameter(string parameterName);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, TEntityType>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    public UpdateModificationStoredProcedureConfiguration`1<TEntityType> Navigation(Expression`1<Func`2<TPrincipalEntityType, ICollection`1<TEntityType>>> navigationPropertyExpression, Action`1<AssociationModificationStoredProcedureConfiguration`1<TPrincipalEntityType>> associationModificationStoredProcedureConfigurationAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
[DebuggerDisplayAttribute("{Discriminator}")]
public class System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration : object {
    private EntityMappingConfiguration _entityMappingConfiguration;
    [CompilerGeneratedAttribute]
private string <Discriminator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private PrimitivePropertyConfiguration _configuration;
    internal string Discriminator { get; internal set; }
    internal object Value { get; internal set; }
    internal ValueConditionConfiguration(EntityMappingConfiguration entityMapConfiguration, string discriminator);
    private ValueConditionConfiguration(EntityMappingConfiguration owner, ValueConditionConfiguration source);
    [CompilerGeneratedAttribute]
internal string get_Discriminator();
    [CompilerGeneratedAttribute]
internal void set_Discriminator(string value);
    [CompilerGeneratedAttribute]
internal object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal virtual ValueConditionConfiguration Clone(EntityMappingConfiguration owner);
    private T GetOrCreateConfiguration();
    public PrimitiveColumnConfiguration HasValue(T value);
    public PrimitiveColumnConfiguration HasValue(Nullable`1<T> value);
    public StringColumnConfiguration HasValue(string value);
    private static void ValidateValueType(object value);
    internal static IEnumerable`1<MappingFragment> GetMappingFragmentsWithColumnAsDefaultDiscriminator(DbDatabaseMapping databaseMapping, EntityType table, EdmProperty column);
    internal static bool AnyBaseTypeToTableWithoutColumnCondition(DbDatabaseMapping databaseMapping, EntityType entityType, EntityType table, EdmProperty column);
    internal void Configure(DbDatabaseMapping databaseMapping, MappingFragment fragment, EntityType entityType, DbProviderManifest providerManifest);
    private void ConfigureColumnType(DbProviderManifest providerManifest, PrimitivePropertyConfiguration existingConfiguration, EdmProperty discriminatorColumn);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    [CompilerGeneratedAttribute]
private bool <Configure>b__20_0(EdmProperty c);
}
public class System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention : object {
    public virtual void Apply(EdmModel item, DbModel model);
    private static void FixNavigationProperties(EdmModel model, AssociationType unifiedAssociation, AssociationType redundantAssociation);
}
public class System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2 : Convention {
    public AttributeToColumnAnnotationConvention`2(string annotationName, Func`3<PropertyInfo, IList`1<TAttribute>, TAnnotation> annotationFactory);
}
public class System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2 : Convention {
    public AttributeToTableAnnotationConvention`2(string annotationName, Func`3<Type, IList`1<TAttribute>, TAnnotation> annotationFactory);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<ColumnAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, ColumnAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention : object {
    public virtual void Apply(EntityType item, DbModel model);
    protected virtual void ValidateColumns(EntityType table, string tableName);
    private static IEnumerable`1<EdmProperty> OrderColumns(IEnumerable`1<EdmProperty> columns);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict : ColumnOrderingConvention {
    protected virtual void ValidateColumns(EntityType table, string tableName);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention : TypeAttributeConfigurationConvention`1<ComplexTypeAttribute> {
    public virtual void Apply(ConventionTypeConfiguration configuration, ComplexTypeAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention : object {
    public virtual void Apply(EdmModel item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<ConcurrencyCheckAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, ConcurrencyCheckAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.Convention : object {
    private ConventionsConfiguration _conventionsConfiguration;
    internal Convention(ConventionsConfiguration conventionsConfiguration);
    public TypeConventionConfiguration Types();
    public TypeConventionConfiguration`1<T> Types();
    public PropertyConventionConfiguration Properties();
    public PropertyConventionConfiguration Properties();
    internal virtual void ApplyModelConfiguration(ModelConfiguration modelConfiguration);
    internal virtual void ApplyModelConfiguration(Type type, ModelConfiguration modelConfiguration);
    internal virtual void ApplyTypeConfiguration(Type type, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyConfiguration(PropertyInfo propertyInfo, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyConfiguration(PropertyInfo propertyInfo, Func`1<PropertyConfiguration> propertyConfiguration, ModelConfiguration modelConfiguration);
    internal virtual void ApplyPropertyTypeConfiguration(PropertyInfo propertyInfo, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration, ModelConfiguration modelConfiguration);
}
public class System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<DatabaseGeneratedAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, DatabaseGeneratedAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention : object {
    private byte _precision;
    private byte _scale;
    public DecimalPropertyConvention(byte precision, byte scale);
    public virtual void Apply(EdmProperty item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention : object {
    public virtual void Apply(EntityType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention : object {
    public virtual void Apply(AssociationType item, DbModel model);
}
public abstract class System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention : object {
    protected bool SupportsMultipleAssociations { get; }
    protected virtual bool get_SupportsMultipleAssociations();
    protected abstract virtual bool MatchDependentKeyProperty(AssociationType associationType, AssociationEndMember dependentAssociationEnd, EdmProperty dependentProperty, EntityType principalEntityType, EdmProperty principalKeyProperty);
    public virtual void Apply(AssociationType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention : object {
    public virtual void Apply(AssociationType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention : object {
    public virtual void Apply(NavigationProperty item, DbModel model);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention/<GetDependentProperties>d__1")]
private static IEnumerable`1<EdmProperty> GetDependentProperties(EntityType dependentType, IEnumerable`1<string> dependentPropertyNames, EntityType declaringEntityType, NavigationProperty navigationProperty);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention : PropertyAttributeConfigurationConvention`1<ForeignKeyAttribute> {
    public virtual void Apply(PropertyInfo memberInfo, ConventionTypeConfiguration configuration, ForeignKeyAttribute attribute);
}
public interface System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1 {
    public abstract virtual void Apply(T item, DbModel model);
}
internal interface System.Data.Entity.ModelConfiguration.Conventions.IConfigurationConvention {
    public abstract virtual void Apply(ModelConfiguration modelConfiguration);
}
internal interface System.Data.Entity.ModelConfiguration.Conventions.IConfigurationConvention`1 {
    public abstract virtual void Apply(TMemberInfo memberInfo, ModelConfiguration modelConfiguration);
}
internal interface System.Data.Entity.ModelConfiguration.Conventions.IConfigurationConvention`2 {
    public abstract virtual void Apply(TMemberInfo memberInfo, Func`1<TConfiguration> configuration, ModelConfiguration modelConfiguration);
}
public interface System.Data.Entity.ModelConfiguration.Conventions.IConvention {
}
internal interface System.Data.Entity.ModelConfiguration.Conventions.IDbMappingConvention {
    public abstract virtual void Apply(DbDatabaseMapping databaseMapping);
}
public class System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention : KeyDiscoveryConvention {
    private static string Id;
    protected virtual IEnumerable`1<EdmProperty> MatchKeyProperty(EntityType entityType, IEnumerable`1<EdmProperty> primitiveProperties);
}
public class System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention : AttributeToColumnAnnotationConvention`2<IndexAttribute, IndexAnnotation> {
}
public class System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention : PropertyAttributeConfigurationConvention`1<InversePropertyAttribute> {
    public virtual void Apply(PropertyInfo memberInfo, ConventionTypeConfiguration configuration, InversePropertyAttribute attribute);
}
public interface System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1 {
    public abstract virtual void Apply(T item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention : Convention {
    private AttributeProvider _attributeProvider;
    internal virtual void ApplyPropertyTypeConfiguration(PropertyInfo propertyInfo, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration, ModelConfiguration modelConfiguration);
}
public abstract class System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention : object {
    public virtual void Apply(EntityType item, DbModel model);
    protected abstract virtual IEnumerable`1<EdmProperty> MatchKeyProperty(EntityType entityType, IEnumerable`1<EdmProperty> primitiveProperties);
}
public class System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention : object {
    private sealed virtual override void System.Data.Entity.ModelConfiguration.Conventions.IDbMappingConvention.Apply(DbDatabaseMapping databaseMapping);
}
public class System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention : object {
    private sealed virtual override void System.Data.Entity.ModelConfiguration.Conventions.IDbMappingConvention.Apply(DbDatabaseMapping databaseMapping);
    private static bool RemapsInheritedProperties(DbDatabaseMapping databaseMapping, EntityTypeMapping entityTypeMapping);
    private static MappingFragment GetFragmentForPropertyMapping(EntityTypeMapping entityTypeMapping, EdmProperty property);
    private static bool HasBaseWithIsTypeOf(EntitySetMapping entitySetMapping, EntityType entityType);
}
public class System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<MaxLengthAttribute> {
    private static int MaxLengthIndicator;
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, MaxLengthAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention : ForeignKeyDiscoveryConvention {
    protected bool SupportsMultipleAssociations { get; }
    protected virtual bool MatchDependentKeyProperty(AssociationType associationType, AssociationEndMember dependentAssociationEnd, EdmProperty dependentProperty, EntityType principalEntityType, EdmProperty principalKeyProperty);
    protected virtual bool get_SupportsMultipleAssociations();
}
public class System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention : PropertyAttributeConfigurationConvention`1<NotMappedAttribute> {
    public virtual void Apply(PropertyInfo memberInfo, ConventionTypeConfiguration configuration, NotMappedAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention : TypeAttributeConfigurationConvention`1<NotMappedAttribute> {
    public virtual void Apply(ConventionTypeConfiguration configuration, NotMappedAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention : object {
    public virtual void Apply(AssociationType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention : object {
    public virtual void Apply(AssociationType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention : object {
    private static IPluralizationService _pluralizationService;
    private static PluralizingEntitySetNameConvention();
    public virtual void Apply(EntitySet item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention : object {
    private IPluralizationService _pluralizationService;
    public virtual void Apply(EntityType item, DbModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention : ForeignKeyDiscoveryConvention {
    protected virtual bool MatchDependentKeyProperty(AssociationType associationType, AssociationEndMember dependentAssociationEnd, EdmProperty dependentProperty, EntityType principalEntityType, EdmProperty principalKeyProperty);
}
public abstract class System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1 : Convention {
    private AttributeProvider _attributeProvider;
    public abstract virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, TAttribute attribute);
    [CompilerGeneratedAttribute]
private IEnumerable`1<TAttribute> <.ctor>b__1_0(PropertyInfo pi);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(ConventionPrimitivePropertyConfiguration configuration, IEnumerable`1<TAttribute> attributes);
}
public abstract class System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1 : Convention {
    private AttributeProvider _attributeProvider;
    public abstract virtual void Apply(PropertyInfo memberInfo, ConventionTypeConfiguration configuration, TAttribute attribute);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(ConventionTypeConfiguration ec);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.PropertyConvention : PropertyConventionBase {
    private Action`1<ConventionPrimitivePropertyConfiguration> _propertyConfigurationAction;
    internal Action`1<ConventionPrimitivePropertyConfiguration> PropertyConfigurationAction { get; }
    public PropertyConvention(IEnumerable`1<Func`2<PropertyInfo, bool>> predicates, Action`1<ConventionPrimitivePropertyConfiguration> propertyConfigurationAction);
    internal Action`1<ConventionPrimitivePropertyConfiguration> get_PropertyConfigurationAction();
    protected virtual void ApplyCore(PropertyInfo memberInfo, Func`1<PrimitivePropertyConfiguration> configuration, ModelConfiguration modelConfiguration);
}
internal abstract class System.Data.Entity.ModelConfiguration.Conventions.PropertyConventionBase : object {
    private IEnumerable`1<Func`2<PropertyInfo, bool>> _predicates;
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> Predicates { get; }
    public PropertyConventionBase(IEnumerable`1<Func`2<PropertyInfo, bool>> predicates);
    internal IEnumerable`1<Func`2<PropertyInfo, bool>> get_Predicates();
    public sealed virtual void Apply(PropertyInfo memberInfo, Func`1<PrimitivePropertyConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected abstract virtual void ApplyCore(PropertyInfo memberInfo, Func`1<PrimitivePropertyConfiguration> configuration, ModelConfiguration modelConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.PropertyConventionWithHaving`1 : PropertyConventionBase {
    private Func`2<PropertyInfo, T> _capturingPredicate;
    private Action`2<ConventionPrimitivePropertyConfiguration, T> _propertyConfigurationAction;
    internal Func`2<PropertyInfo, T> CapturingPredicate { get; }
    internal Action`2<ConventionPrimitivePropertyConfiguration, T> PropertyConfigurationAction { get; }
    public PropertyConventionWithHaving`1(IEnumerable`1<Func`2<PropertyInfo, bool>> predicates, Func`2<PropertyInfo, T> capturingPredicate, Action`2<ConventionPrimitivePropertyConfiguration, T> propertyConfigurationAction);
    internal Func`2<PropertyInfo, T> get_CapturingPredicate();
    internal Action`2<ConventionPrimitivePropertyConfiguration, T> get_PropertyConfigurationAction();
    protected virtual void ApplyCore(PropertyInfo memberInfo, Func`1<PrimitivePropertyConfiguration> configuration, ModelConfiguration modelConfiguration);
}
public class System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention : object {
    private static int DefaultLength;
    private int _length;
    public PropertyMaxLengthConvention(int length);
    public virtual void Apply(EntityType item, DbModel model);
    public virtual void Apply(ComplexType item, DbModel model);
    private void SetLength(IEnumerable`1<EdmProperty> properties, ICollection`1<EdmProperty> keyProperties);
    public virtual void Apply(AssociationType item, DbModel model);
    private void SetStringDefaults(EdmProperty property, bool isKey);
    private void SetBinaryDefaults(EdmProperty property, bool isKey);
}
public class System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention : Convention {
    private AttributeProvider _attributeProvider;
    internal virtual void ApplyPropertyConfiguration(PropertyInfo propertyInfo, Func`1<PropertyConfiguration> propertyConfiguration, ModelConfiguration modelConfiguration);
}
public class System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<RequiredAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, RequiredAttribute attribute);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.Sets.ConventionSet : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConvention> <ConfigurationConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConvention> <ConceptualModelConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConvention> <ConceptualToStoreMappingConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConvention> <StoreModelConventions>k__BackingField;
    public IEnumerable`1<IConvention> ConfigurationConventions { get; private set; }
    public IEnumerable`1<IConvention> ConceptualModelConventions { get; private set; }
    public IEnumerable`1<IConvention> ConceptualToStoreMappingConventions { get; private set; }
    public IEnumerable`1<IConvention> StoreModelConventions { get; private set; }
    public ConventionSet(IEnumerable`1<IConvention> configurationConventions, IEnumerable`1<IConvention> entityModelConventions, IEnumerable`1<IConvention> dbMappingConventions, IEnumerable`1<IConvention> dbModelConventions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IConvention> get_ConfigurationConventions();
    [CompilerGeneratedAttribute]
private void set_ConfigurationConventions(IEnumerable`1<IConvention> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IConvention> get_ConceptualModelConventions();
    [CompilerGeneratedAttribute]
private void set_ConceptualModelConventions(IEnumerable`1<IConvention> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IConvention> get_ConceptualToStoreMappingConventions();
    [CompilerGeneratedAttribute]
private void set_ConceptualToStoreMappingConventions(IEnumerable`1<IConvention> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IConvention> get_StoreModelConventions();
    [CompilerGeneratedAttribute]
private void set_StoreModelConventions(IEnumerable`1<IConvention> value);
}
internal static class System.Data.Entity.ModelConfiguration.Conventions.Sets.V1ConventionSet : object {
    private static ConventionSet _conventions;
    public static ConventionSet Conventions { get; }
    private static V1ConventionSet();
    public static ConventionSet get_Conventions();
}
internal static class System.Data.Entity.ModelConfiguration.Conventions.Sets.V2ConventionSet : object {
    private static ConventionSet _conventions;
    public static ConventionSet Conventions { get; }
    private static V2ConventionSet();
    public static ConventionSet get_Conventions();
}
public class System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention : object {
    private static int DefaultLength;
    private int _length;
    public SqlCePropertyMaxLengthConvention(int length);
    public virtual void Apply(EntityType item, DbModel model);
    public virtual void Apply(ComplexType item, DbModel model);
    private void SetLength(IEnumerable`1<EdmProperty> properties);
    private void SetDefaults(EdmProperty property);
}
public class System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention : object {
    private static IEnumerable`1<PrimitiveTypeKind> _applicableTypes;
    private static StoreGeneratedIdentityKeyConvention();
    public virtual void Apply(EntityType item, DbModel model);
    private static bool IsNonTableSplittingForeignKey(AssociationType association, EdmProperty property);
    private static bool ParentOfTpc(EntityType entityType, EdmModel model);
}
public class System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<StringLengthAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, StringLengthAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention : TypeAttributeConfigurationConvention`1<TableAttribute> {
    public virtual void Apply(ConventionTypeConfiguration configuration, TableAttribute attribute);
}
public class System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention : PrimitivePropertyAttributeConfigurationConvention`1<TimestampAttribute> {
    public virtual void Apply(ConventionPrimitivePropertyConfiguration configuration, TimestampAttribute attribute);
}
public abstract class System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1 : Convention {
    private AttributeProvider _attributeProvider;
    public abstract virtual void Apply(ConventionTypeConfiguration configuration, TAttribute attribute);
    [CompilerGeneratedAttribute]
private IEnumerable`1<TAttribute> <.ctor>b__1_0(Type t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(ConventionTypeConfiguration configuration, IEnumerable`1<TAttribute> attributes);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.TypeConvention : TypeConventionBase {
    private Action`1<ConventionTypeConfiguration> _entityConfigurationAction;
    internal Action`1<ConventionTypeConfiguration> EntityConfigurationAction { get; }
    public TypeConvention(IEnumerable`1<Func`2<Type, bool>> predicates, Action`1<ConventionTypeConfiguration> entityConfigurationAction);
    internal Action`1<ConventionTypeConfiguration> get_EntityConfigurationAction();
    protected virtual void ApplyCore(Type memberInfo, ModelConfiguration modelConfiguration);
    protected virtual void ApplyCore(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected virtual void ApplyCore(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.TypeConvention`1 : TypeConventionBase {
    private static Func`2<Type, bool> _ofTypePredicate;
    private Action`1<ConventionTypeConfiguration`1<T>> _entityConfigurationAction;
    internal Action`1<ConventionTypeConfiguration`1<T>> EntityConfigurationAction { get; }
    internal static Func`2<Type, bool> OfTypePredicate { get; }
    public TypeConvention`1(IEnumerable`1<Func`2<Type, bool>> predicates, Action`1<ConventionTypeConfiguration`1<T>> entityConfigurationAction);
    private static TypeConvention`1();
    internal Action`1<ConventionTypeConfiguration`1<T>> get_EntityConfigurationAction();
    internal static Func`2<Type, bool> get_OfTypePredicate();
    protected virtual void ApplyCore(Type memberInfo, ModelConfiguration modelConfiguration);
    protected virtual void ApplyCore(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected virtual void ApplyCore(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
}
internal abstract class System.Data.Entity.ModelConfiguration.Conventions.TypeConventionBase : object {
    private IEnumerable`1<Func`2<Type, bool>> _predicates;
    internal IEnumerable`1<Func`2<Type, bool>> Predicates { get; }
    protected TypeConventionBase(IEnumerable`1<Func`2<Type, bool>> predicates);
    internal IEnumerable`1<Func`2<Type, bool>> get_Predicates();
    public sealed virtual void Apply(Type memberInfo, ModelConfiguration modelConfiguration);
    protected abstract virtual void ApplyCore(Type memberInfo, ModelConfiguration modelConfiguration);
    public sealed virtual void Apply(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected abstract virtual void ApplyCore(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    public sealed virtual void Apply(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected abstract virtual void ApplyCore(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.TypeConventionWithHaving`1 : TypeConventionWithHavingBase`1<T> {
    private Action`2<ConventionTypeConfiguration, T> _entityConfigurationAction;
    internal Action`2<ConventionTypeConfiguration, T> EntityConfigurationAction { get; }
    public TypeConventionWithHaving`1(IEnumerable`1<Func`2<Type, bool>> predicates, Func`2<Type, T> capturingPredicate, Action`2<ConventionTypeConfiguration, T> entityConfigurationAction);
    internal Action`2<ConventionTypeConfiguration, T> get_EntityConfigurationAction();
    protected virtual void InvokeAction(Type memberInfo, ModelConfiguration modelConfiguration, T value);
    protected virtual void InvokeAction(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration, T value);
    protected virtual void InvokeAction(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration, T value);
}
internal class System.Data.Entity.ModelConfiguration.Conventions.TypeConventionWithHaving`2 : TypeConventionWithHavingBase`1<TValue> {
    private Action`2<ConventionTypeConfiguration`1<T>, TValue> _entityConfigurationAction;
    internal Action`2<ConventionTypeConfiguration`1<T>, TValue> EntityConfigurationAction { get; }
    public TypeConventionWithHaving`2(IEnumerable`1<Func`2<Type, bool>> predicates, Func`2<Type, TValue> capturingPredicate, Action`2<ConventionTypeConfiguration`1<T>, TValue> entityConfigurationAction);
    internal Action`2<ConventionTypeConfiguration`1<T>, TValue> get_EntityConfigurationAction();
    protected virtual void InvokeAction(Type memberInfo, ModelConfiguration modelConfiguration, TValue value);
    protected virtual void InvokeAction(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration, TValue value);
    protected virtual void InvokeAction(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration, TValue value);
}
internal abstract class System.Data.Entity.ModelConfiguration.Conventions.TypeConventionWithHavingBase`1 : TypeConventionBase {
    private Func`2<Type, T> _capturingPredicate;
    internal Func`2<Type, T> CapturingPredicate { get; }
    public TypeConventionWithHavingBase`1(IEnumerable`1<Func`2<Type, bool>> predicates, Func`2<Type, T> capturingPredicate);
    internal Func`2<Type, T> get_CapturingPredicate();
    protected virtual void ApplyCore(Type memberInfo, ModelConfiguration modelConfiguration);
    protected abstract virtual void InvokeAction(Type memberInfo, ModelConfiguration configuration, T value);
    protected sealed virtual void ApplyCore(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected abstract virtual void InvokeAction(Type memberInfo, Func`1<EntityTypeConfiguration> configuration, ModelConfiguration modelConfiguration, T value);
    protected virtual void ApplyCore(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration);
    protected abstract virtual void InvokeAction(Type memberInfo, Func`1<ComplexTypeConfiguration> configuration, ModelConfiguration modelConfiguration, T value);
}
public class System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention : ForeignKeyDiscoveryConvention {
    protected virtual bool MatchDependentKeyProperty(AssociationType associationType, AssociationEndMember dependentAssociationEnd, EdmProperty dependentProperty, EntityType principalEntityType, EdmProperty principalKeyProperty);
}
internal class System.Data.Entity.ModelConfiguration.Design.PluralizationServices.StringBidirectionalDictionary : BidirectionalDictionary`2<string, string> {
    internal StringBidirectionalDictionary(Dictionary`2<string, string> firstToSecondDictionary);
    internal virtual bool ExistsInFirst(string value);
    internal virtual bool ExistsInSecond(string value);
    internal virtual string GetFirstValue(string value);
    internal virtual string GetSecondValue(string value);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.AssociationTypeExtensions : object {
    private static string IsIndependentAnnotation;
    private static string IsPrincipalConfiguredAnnotation;
    [ExtensionAttribute]
public static void MarkIndependent(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsIndependent(AssociationType associationType);
    [ExtensionAttribute]
public static void MarkPrincipalConfigured(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsPrincipalConfigured(AssociationType associationType);
    [ExtensionAttribute]
public static AssociationEndMember GetOtherEnd(AssociationType associationType, AssociationEndMember associationEnd);
    [ExtensionAttribute]
public static object GetConfiguration(AssociationType associationType);
    [ExtensionAttribute]
public static void SetConfiguration(AssociationType associationType, object configuration);
    [ExtensionAttribute]
public static bool IsRequiredToMany(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsRequiredToRequired(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsManyToRequired(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsManyToMany(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsOneToOne(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsSelfReferencing(AssociationType associationType);
    [ExtensionAttribute]
public static bool IsRequiredToNonRequired(AssociationType associationType);
    [ExtensionAttribute]
public static bool TryGuessPrincipalAndDependentEnds(AssociationType associationType, AssociationEndMember& principalEnd, AssociationEndMember& dependentEnd);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.ColumnMappingBuilderExtensions : object {
    [ExtensionAttribute]
public static void SyncNullabilityCSSpace(ColumnMappingBuilder propertyMappingBuilder, DbDatabaseMapping databaseMapping, IEnumerable`1<EntitySet> entitySets, EntityType toTable);
    private static EntitySetMapping GetEntitySetMapping(DbDatabaseMapping databaseMapping, EntityType cSpaceEntityType, IEnumerable`1<EntitySet> entitySets);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.ComplexTypeExtensions : object {
    [ExtensionAttribute]
public static EdmProperty AddComplexProperty(ComplexType complexType, string name, ComplexType targetComplexType);
    [ExtensionAttribute]
public static object GetConfiguration(ComplexType complexType);
    [ExtensionAttribute]
public static Type GetClrType(ComplexType complexType);
    [ExtensionAttribute]
internal static IEnumerable`1<ComplexType> ToHierarchy(ComplexType edmType);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.DataModelErrorEventArgsExtensions : object {
    [ExtensionAttribute]
public static string ToErrorMessage(IEnumerable`1<DataModelErrorEventArgs> validationErrors);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.DbDatabaseMappingExtensions : object {
    [ExtensionAttribute]
public static DbDatabaseMapping Initialize(DbDatabaseMapping databaseMapping, EdmModel model, EdmModel database);
    [ExtensionAttribute]
public static MetadataWorkspace ToMetadataWorkspace(DbDatabaseMapping databaseMapping);
    [ExtensionAttribute]
public static StorageMappingItemCollection ToStorageMappingItemCollection(DbDatabaseMapping databaseMapping, EdmItemCollection itemCollection, StoreItemCollection storeItemCollection);
    [ExtensionAttribute]
public static EntityTypeMapping GetEntityTypeMapping(DbDatabaseMapping databaseMapping, EntityType entityType);
    [ExtensionAttribute]
public static IList`1<EntityTypeMapping> GetEntityTypeMappings(DbDatabaseMapping databaseMapping, EntityType entityType);
    [ExtensionAttribute]
public static EntityTypeMapping GetEntityTypeMapping(DbDatabaseMapping databaseMapping, Type clrType);
    [ExtensionAttribute]
public static IEnumerable`1<Tuple`2<ColumnMappingBuilder, EntityType>> GetComplexPropertyMappings(DbDatabaseMapping databaseMapping, Type complexType);
    [ExtensionAttribute]
public static IEnumerable`1<ModificationFunctionParameterBinding> GetComplexParameterBindings(DbDatabaseMapping databaseMapping, Type complexType);
    [ExtensionAttribute]
public static EntitySetMapping GetEntitySetMapping(DbDatabaseMapping databaseMapping, EntitySet entitySet);
    [ExtensionAttribute]
public static IEnumerable`1<EntitySetMapping> GetEntitySetMappings(DbDatabaseMapping databaseMapping);
    [ExtensionAttribute]
public static IEnumerable`1<AssociationSetMapping> GetAssociationSetMappings(DbDatabaseMapping databaseMapping);
    [ExtensionAttribute]
public static EntitySetMapping AddEntitySetMapping(DbDatabaseMapping databaseMapping, EntitySet entitySet);
    [ExtensionAttribute]
public static AssociationSetMapping AddAssociationSetMapping(DbDatabaseMapping databaseMapping, AssociationSet associationSet, EntitySet entitySet);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EdmMemberExtensions : object {
    [ExtensionAttribute]
public static PropertyInfo GetClrPropertyInfo(EdmMember property);
    [ExtensionAttribute]
public static void SetClrPropertyInfo(EdmMember property, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetClrAttributes(EdmMember property);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EdmModelExtensions : object {
    public static string DefaultSchema;
    public static string DefaultModelNamespace;
    public static string DefaultStoreNamespace;
    [ExtensionAttribute]
public static EntityType AddTable(EdmModel database, string name);
    [ExtensionAttribute]
public static EntityType AddTable(EdmModel database, string name, EntityType pkSource);
    [ExtensionAttribute]
public static EdmFunction AddFunction(EdmModel database, string name, EdmFunctionPayload functionPayload);
    [ExtensionAttribute]
public static EntityType FindTableByName(EdmModel database, DatabaseName tableName);
    [ExtensionAttribute]
public static bool HasCascadeDeletePath(EdmModel model, EntityType sourceEntityType, EntityType targetEntityType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetClrTypes(EdmModel model);
    [ExtensionAttribute]
public static NavigationProperty GetNavigationProperty(EdmModel model, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static void ValidateAndSerializeCsdl(EdmModel model, XmlWriter writer);
    [ExtensionAttribute]
private static List`1<DataModelErrorEventArgs> SerializeAndGetCsdlErrors(EdmModel model, XmlWriter writer);
    [ExtensionAttribute]
public static DbDatabaseMapping GenerateDatabaseMapping(EdmModel model, DbProviderInfo providerInfo, DbProviderManifest providerManifest);
    [ExtensionAttribute]
public static EdmType GetStructuralOrEnumType(EdmModel model, string name);
    [ExtensionAttribute]
public static EdmType GetStructuralType(EdmModel model, string name);
    [ExtensionAttribute]
public static EntityType GetEntityType(EdmModel model, string name);
    [ExtensionAttribute]
public static EntityType GetEntityType(EdmModel model, Type clrType);
    [ExtensionAttribute]
public static ComplexType GetComplexType(EdmModel model, string name);
    [ExtensionAttribute]
public static ComplexType GetComplexType(EdmModel model, Type clrType);
    [ExtensionAttribute]
public static EnumType GetEnumType(EdmModel model, string name);
    [ExtensionAttribute]
public static EntityType AddEntityType(EdmModel model, string name, string modelNamespace);
    [ExtensionAttribute]
public static EntitySet GetEntitySet(EdmModel model, EntityType entityType);
    [ExtensionAttribute]
public static AssociationSet GetAssociationSet(EdmModel model, AssociationType associationType);
    [ExtensionAttribute]
public static IEnumerable`1<EntitySet> GetEntitySets(EdmModel model);
    [ExtensionAttribute]
public static EntitySet AddEntitySet(EdmModel model, string name, EntityType elementType, string table);
    [ExtensionAttribute]
public static ComplexType AddComplexType(EdmModel model, string name, string modelNamespace);
    [ExtensionAttribute]
public static EnumType AddEnumType(EdmModel model, string name, string modelNamespace);
    [ExtensionAttribute]
public static AssociationType GetAssociationType(EdmModel model, string name);
    [ExtensionAttribute]
public static IEnumerable`1<AssociationType> GetAssociationTypesBetween(EdmModel model, EntityType first, EntityType second);
    [ExtensionAttribute]
public static AssociationType AddAssociationType(EdmModel model, string name, EntityType sourceEntityType, RelationshipMultiplicity sourceAssociationEndKind, EntityType targetEntityType, RelationshipMultiplicity targetAssociationEndKind, string modelNamespace);
    [ExtensionAttribute]
public static void AddAssociationType(EdmModel model, AssociationType associationType);
    [ExtensionAttribute]
public static void AddAssociationSet(EdmModel model, AssociationSet associationSet);
    [ExtensionAttribute]
public static void RemoveEntityType(EdmModel model, EntityType entityType);
    [ExtensionAttribute]
public static void ReplaceEntitySet(EdmModel model, EntityType entityType, EntitySet newSet);
    [ExtensionAttribute]
public static void RemoveAssociationType(EdmModel model, AssociationType associationType);
    [ExtensionAttribute]
public static AssociationSet AddAssociationSet(EdmModel model, string name, AssociationType associationType);
    [ExtensionAttribute]
public static IEnumerable`1<EntityType> GetDerivedTypes(EdmModel model, EntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<EntityType> GetSelfAndAllDerivedTypes(EdmModel model, EntityType entityType);
    private static void AddSelfAndAllDerivedTypes(EdmModel model, EntityType entityType, List`1<EntityType> entityTypes);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EdmPropertyExtensions : object {
    private static string OrderAnnotation;
    private static string PreferredNameAnnotation;
    private static string UnpreferredUniqueNameAnnotation;
    [ExtensionAttribute]
public static void CopyFrom(EdmProperty column, EdmProperty other);
    [ExtensionAttribute]
public static EdmProperty Clone(EdmProperty tableColumn);
    [ExtensionAttribute]
public static Nullable`1<int> GetOrder(EdmProperty tableColumn);
    [ExtensionAttribute]
public static void SetOrder(EdmProperty tableColumn, int order);
    [ExtensionAttribute]
public static string GetPreferredName(EdmProperty tableColumn);
    [ExtensionAttribute]
public static void SetPreferredName(EdmProperty tableColumn, string name);
    [ExtensionAttribute]
public static string GetUnpreferredUniqueName(EdmProperty tableColumn);
    [ExtensionAttribute]
public static void SetUnpreferredUniqueName(EdmProperty tableColumn, string name);
    [ExtensionAttribute]
public static void RemoveStoreGeneratedIdentityPattern(EdmProperty tableColumn);
    [ExtensionAttribute]
public static bool HasStoreGeneratedPattern(EdmProperty property);
    [ExtensionAttribute]
public static Nullable`1<StoreGeneratedPattern> GetStoreGeneratedPattern(EdmProperty property);
    [ExtensionAttribute]
public static void SetStoreGeneratedPattern(EdmProperty property, StoreGeneratedPattern storeGeneratedPattern);
    [ExtensionAttribute]
public static object GetConfiguration(EdmProperty property);
    [ExtensionAttribute]
public static void SetConfiguration(EdmProperty property, object configuration);
    [ExtensionAttribute]
public static List`1<EdmPropertyPath> ToPropertyPathList(EdmProperty property);
    [ExtensionAttribute]
public static List`1<EdmPropertyPath> ToPropertyPathList(EdmProperty property, List`1<EdmProperty> currentPath);
    private static void IncludePropertyPath(List`1<EdmPropertyPath> propertyPaths, List`1<EdmProperty> currentPath, EdmProperty property);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EdmTypeExtensions : object {
    [ExtensionAttribute]
public static Type GetClrType(EdmType item);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EntitySetExtensions : object {
    [ExtensionAttribute]
public static object GetConfiguration(EntitySet entitySet);
    [ExtensionAttribute]
public static void SetConfiguration(EntitySet entitySet, object configuration);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EntityTypeExtensions : object {
    private static string TableNameAnnotation;
    [ExtensionAttribute]
public static void AddColumn(EntityType table, EdmProperty column);
    [ExtensionAttribute]
public static void SetConfiguration(EntityType table, object configuration);
    [ExtensionAttribute]
public static DatabaseName GetTableName(EntityType table);
    [ExtensionAttribute]
public static void SetTableName(EntityType table, DatabaseName tableName);
    [ExtensionAttribute]
internal static IEnumerable`1<EntityType> ToHierarchy(EntityType edmType);
    [ExtensionAttribute]
public static IEnumerable`1<EdmProperty> GetValidKey(EntityType entityType);
    [ExtensionAttribute]
public static List`1<EdmProperty> GetKeyProperties(EntityType entityType);
    private static void GetKeyProperties(HashSet`1<EntityType> visitedTypes, EntityType visitingType, List`1<EdmProperty> keyProperties);
    [ExtensionAttribute]
public static EntityType GetRootType(EntityType entityType);
    [ExtensionAttribute]
public static bool IsAncestorOf(EntityType ancestor, EntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<EdmProperty> KeyProperties(EntityType entityType);
    [ExtensionAttribute]
public static object GetConfiguration(EntityType entityType);
    [ExtensionAttribute]
public static Type GetClrType(EntityType entityType);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.EntityTypeExtensions/<TypeHierarchyIterator>d__14")]
[ExtensionAttribute]
public static IEnumerable`1<EntityType> TypeHierarchyIterator(EntityType entityType, EdmModel model);
    [ExtensionAttribute]
public static EdmProperty AddComplexProperty(EntityType entityType, string name, ComplexType complexType);
    [ExtensionAttribute]
public static EdmProperty GetDeclaredPrimitiveProperty(EntityType entityType, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<EdmProperty> GetDeclaredPrimitiveProperties(EntityType entityType);
    [ExtensionAttribute]
public static NavigationProperty AddNavigationProperty(EntityType entityType, string name, AssociationType associationType);
    [ExtensionAttribute]
public static NavigationProperty GetNavigationProperty(EntityType entityType, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsRootOfSet(EntityType entityType, IEnumerable`1<EntityType> set);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.EnumTypeExtensions : object {
    [ExtensionAttribute]
public static Type GetClrType(EnumType enumType);
    [ExtensionAttribute]
public static void SetClrType(EnumType enumType, Type type);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.ForeignKeyBuilderExtensions : object {
    private static string IsTypeConstraint;
    private static string IsSplitConstraint;
    private static string AssociationType;
    private static string PreferredNameAnnotation;
    [ExtensionAttribute]
public static string GetPreferredName(ForeignKeyBuilder fk);
    [ExtensionAttribute]
public static void SetPreferredName(ForeignKeyBuilder fk, string name);
    [ExtensionAttribute]
public static bool GetIsTypeConstraint(ForeignKeyBuilder fk);
    [ExtensionAttribute]
public static void SetIsTypeConstraint(ForeignKeyBuilder fk);
    [ExtensionAttribute]
public static void SetIsSplitConstraint(ForeignKeyBuilder fk);
    [ExtensionAttribute]
public static AssociationType GetAssociationType(ForeignKeyBuilder fk);
    [ExtensionAttribute]
public static void SetAssociationType(ForeignKeyBuilder fk, AssociationType associationType);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.FunctionParameterExtensions : object {
    [ExtensionAttribute]
public static object GetConfiguration(FunctionParameter functionParameter);
    [ExtensionAttribute]
public static void SetConfiguration(FunctionParameter functionParameter, object configuration);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.INamedDataModelItemExtensions : object {
    [ExtensionAttribute]
public static string UniquifyName(IEnumerable`1<INamedDataModelItem> namedDataModelItems, string name);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.MetadataPropertyExtensions : object {
    private static string ClrPropertyInfoAnnotation;
    private static string ClrAttributesAnnotation;
    private static string ConfiguationAnnotation;
    [ExtensionAttribute]
public static IList`1<Attribute> GetClrAttributes(IEnumerable`1<MetadataProperty> metadataProperties);
    [ExtensionAttribute]
public static void SetClrAttributes(ICollection`1<MetadataProperty> metadataProperties, IList`1<Attribute> attributes);
    [ExtensionAttribute]
public static PropertyInfo GetClrPropertyInfo(IEnumerable`1<MetadataProperty> metadataProperties);
    [ExtensionAttribute]
public static void SetClrPropertyInfo(ICollection`1<MetadataProperty> metadataProperties, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static Type GetClrType(IEnumerable`1<MetadataProperty> metadataProperties);
    [ExtensionAttribute]
public static void SetClrType(ICollection`1<MetadataProperty> metadataProperties, Type type);
    [ExtensionAttribute]
public static object GetConfiguration(IEnumerable`1<MetadataProperty> metadataProperties);
    [ExtensionAttribute]
public static void SetConfiguration(ICollection`1<MetadataProperty> metadataProperties, object configuration);
    [ExtensionAttribute]
public static object GetAnnotation(IEnumerable`1<MetadataProperty> metadataProperties, string name);
    [ExtensionAttribute]
public static void SetAnnotation(ICollection`1<MetadataProperty> metadataProperties, string name, object value);
    [ExtensionAttribute]
public static void RemoveAnnotation(ICollection`1<MetadataProperty> metadataProperties, string name);
    [ExtensionAttribute]
public static void Copy(ICollection`1<MetadataProperty> sourceAnnotations, ICollection`1<MetadataProperty> targetAnnotations);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.NavigationPropertyExtensions : object {
    [ExtensionAttribute]
public static object GetConfiguration(NavigationProperty navigationProperty);
    [ExtensionAttribute]
public static void SetConfiguration(NavigationProperty navigationProperty, object configuration);
    [ExtensionAttribute]
public static AssociationEndMember GetFromEnd(NavigationProperty navProp);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.RelationshipEndMemberExtensions : object {
    [ExtensionAttribute]
public static bool IsMany(RelationshipEndMember associationEnd);
    [ExtensionAttribute]
public static bool IsOptional(RelationshipEndMember associationEnd);
    [ExtensionAttribute]
public static bool IsRequired(RelationshipEndMember associationEnd);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.RelationshipMultiplicityExtensions : object {
    [ExtensionAttribute]
public static bool IsMany(RelationshipMultiplicity associationEndKind);
    [ExtensionAttribute]
public static bool IsOptional(RelationshipMultiplicity associationEndKind);
    [ExtensionAttribute]
public static bool IsRequired(RelationshipMultiplicity associationEndKind);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Serialization.EdmxSerializer : object {
    private static string EdmXmlNamespaceV1;
    private static string EdmXmlNamespaceV2;
    private static string EdmXmlNamespaceV3;
    private DbDatabaseMapping _databaseMapping;
    private double _version;
    private XmlWriter _xmlWriter;
    private string _namespace;
    public void Serialize(DbDatabaseMapping databaseMapping, XmlWriter xmlWriter);
    private void WriteEdmxRuntime();
    private void WriteEdmxDesigner();
    private void WriteEdmxConnection();
    private void WriteEdmxOptions();
    private void WriteDesignerPropertyElement(string name, string value);
    private void WriteEdmxDiagrams();
    private IDisposable Element(string elementName, String[] attributes);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.AssociationTypeMappingGenerator : StructuralTypeMappingGenerator {
    public AssociationTypeMappingGenerator(DbProviderManifest providerManifest);
    public void Generate(AssociationType associationType, DbDatabaseMapping databaseMapping);
    private static void GenerateForeignKeyAssociationType(AssociationType associationType, DbDatabaseMapping databaseMapping);
    private void GenerateManyToManyAssociation(AssociationType associationType, DbDatabaseMapping databaseMapping);
    private void GenerateIndependentAssociationType(AssociationType associationType, DbDatabaseMapping databaseMapping);
    private static AssociationSetMapping GenerateAssociationSetMapping(AssociationType associationType, DbDatabaseMapping databaseMapping, AssociationEndMember principalEnd, AssociationEndMember dependentEnd, EntityType dependentTable);
    private void GenerateIndependentForeignKeyConstraint(DbDatabaseMapping databaseMapping, EntityType principalEntityType, EntityType dependentEntityType, EntityType dependentTable, AssociationSetMapping associationSetMapping, EndPropertyMapping associationEndMapping, string name, AssociationEndMember principalEnd, bool isPrimaryKeyColumn);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.Services.AssociationTypeMappingGenerator/<GenerateIndependentForeignKeyColumns>d__7")]
private IEnumerable`1<EdmProperty> GenerateIndependentForeignKeyColumns(EntityType principalEntityType, EntityType dependentEntityType, AssociationSetMapping associationSetMapping, EndPropertyMapping associationEndMapping, EntityType dependentTable, bool isPrimaryKeyColumn, NavigationProperty principalNavigationProperty);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.DatabaseMappingGenerator : object {
    private static string DiscriminatorColumnName;
    public static int DiscriminatorMaxLength;
    public static TypeUsage DiscriminatorTypeUsage;
    private DbProviderInfo _providerInfo;
    private DbProviderManifest _providerManifest;
    public DatabaseMappingGenerator(DbProviderInfo providerInfo, DbProviderManifest providerManifest);
    private static DatabaseMappingGenerator();
    public DbDatabaseMapping Generate(EdmModel conceptualModel);
    private DbDatabaseMapping InitializeDatabaseMapping(EdmModel conceptualModel);
    private static void GenerateEntityTypes(DbDatabaseMapping databaseMapping);
    private static void GenerateDiscriminators(DbDatabaseMapping databaseMapping);
    private static void GenerateAssociationTypes(DbDatabaseMapping databaseMapping);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.FunctionParameterMappingGenerator : StructuralTypeMappingGenerator {
    public FunctionParameterMappingGenerator(DbProviderManifest providerManifest);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.Services.FunctionParameterMappingGenerator/<Generate>d__1")]
public IEnumerable`1<ModificationFunctionParameterBinding> Generate(ModificationOperator modificationOperator, IEnumerable`1<EdmProperty> properties, IList`1<ColumnMappingBuilder> columnMappings, IList`1<EdmProperty> propertyPath, bool useOriginalValues);
    public IEnumerable`1<ModificationFunctionParameterBinding> Generate(IEnumerable`1<Tuple`2<ModificationFunctionMemberPath, EdmProperty>> iaFkProperties, bool useOriginalValues);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.ModificationFunctionMappingGenerator : StructuralTypeMappingGenerator {
    public ModificationFunctionMappingGenerator(DbProviderManifest providerManifest);
    public void Generate(EntityType entityType, DbDatabaseMapping databaseMapping);
    private static IEnumerable`1<ColumnMappingBuilder> GetColumnMappings(EntityType entityType, EntitySetMapping entitySetMapping);
    public void Generate(AssociationSetMapping associationSetMapping, DbDatabaseMapping databaseMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.Services.ModificationFunctionMappingGenerator/<GetIndependentFkColumns>d__4")]
private static IEnumerable`1<Tuple`2<ModificationFunctionMemberPath, EdmProperty>> GetIndependentFkColumns(AssociationSetMapping associationSetMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.Services.ModificationFunctionMappingGenerator/<GetIndependentFkColumns>d__5")]
private static IEnumerable`1<Tuple`2<ModificationFunctionMemberPath, EdmProperty>> GetIndependentFkColumns(EntityType entityType, DbDatabaseMapping databaseMapping);
    [IteratorStateMachineAttribute("System.Data.Entity.ModelConfiguration.Edm.Services.ModificationFunctionMappingGenerator/<GetParents>d__6")]
private static IEnumerable`1<EntityType> GetParents(EntityType entityType);
    private ModificationFunctionMapping GenerateFunctionMapping(ModificationOperator modificationOperator, EntitySetBase entitySetBase, EntityTypeBase entityTypeBase, DbDatabaseMapping databaseMapping, IEnumerable`1<EdmProperty> parameterProperties, IEnumerable`1<Tuple`2<ModificationFunctionMemberPath, EdmProperty>> iaFkProperties, IList`1<ColumnMappingBuilder> columnMappings, IEnumerable`1<EdmProperty> resultProperties, string functionNamePrefix);
    private static bool IsTableSplitDependent(EntityTypeBase entityTypeBase, DbDatabaseMapping databaseMapping);
    private static void UniquifyParameterNames(IList`1<FunctionParameter> parameters);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.PropertyMappingGenerator : StructuralTypeMappingGenerator {
    public PropertyMappingGenerator(DbProviderManifest providerManifest);
    public void Generate(EntityType entityType, IEnumerable`1<EdmProperty> properties, EntitySetMapping entitySetMapping, MappingFragment entityTypeMappingFragment, IList`1<EdmProperty> propertyPath, bool createNewColumn);
}
internal abstract class System.Data.Entity.ModelConfiguration.Edm.Services.StructuralTypeMappingGenerator : object {
    protected DbProviderManifest _providerManifest;
    protected StructuralTypeMappingGenerator(DbProviderManifest providerManifest);
    protected EdmProperty MapTableColumn(EdmProperty property, string columnName, bool isInstancePropertyOnDerivedType);
    internal static void MapPrimitivePropertyFacets(EdmProperty property, EdmProperty column, TypeUsage typeUsage);
    private static bool IsValidFacet(TypeUsage typeUsage, string name);
    protected static EntityTypeMapping GetEntityTypeMappingInHierarchy(DbDatabaseMapping databaseMapping, EntityType entityType);
}
internal class System.Data.Entity.ModelConfiguration.Edm.Services.TableMappingGenerator : StructuralTypeMappingGenerator {
    public TableMappingGenerator(DbProviderManifest providerManifest);
    public void Generate(EntityType entityType, DbDatabaseMapping databaseMapping);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.StorageAssociationSetMappingExtensions : object {
    [ExtensionAttribute]
public static AssociationSetMapping Initialize(AssociationSetMapping associationSetMapping);
    [ExtensionAttribute]
public static object GetConfiguration(AssociationSetMapping associationSetMapping);
    [ExtensionAttribute]
public static void SetConfiguration(AssociationSetMapping associationSetMapping, object configuration);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.StorageEntityTypeMappingExtensions : object {
    [ExtensionAttribute]
public static object GetConfiguration(EntityTypeMapping entityTypeMapping);
    [ExtensionAttribute]
public static void SetConfiguration(EntityTypeMapping entityTypeMapping, object configuration);
    [ExtensionAttribute]
public static ColumnMappingBuilder GetPropertyMapping(EntityTypeMapping entityTypeMapping, EdmProperty[] propertyPath);
    [ExtensionAttribute]
public static EntityType GetPrimaryTable(EntityTypeMapping entityTypeMapping);
    [ExtensionAttribute]
public static bool UsesOtherTables(EntityTypeMapping entityTypeMapping, EntityType table);
    [ExtensionAttribute]
public static Type GetClrType(EntityTypeMapping entityTypeMappping);
    [ExtensionAttribute]
public static void SetClrType(EntityTypeMapping entityTypeMapping, Type type);
    [ExtensionAttribute]
public static EntityTypeMapping Clone(EntityTypeMapping entityTypeMapping);
}
[ExtensionAttribute]
internal static class System.Data.Entity.ModelConfiguration.Edm.StorageMappingFragmentExtensions : object {
    private static string DefaultDiscriminatorAnnotation;
    private static string ConditionOnlyFragmentAnnotation;
    private static string UnmappedPropertiesFragmentAnnotation;
    [ExtensionAttribute]
public static EdmProperty GetDefaultDiscriminator(MappingFragment entityTypeMapppingFragment);
    [ExtensionAttribute]
public static void SetDefaultDiscriminator(MappingFragment entityTypeMappingFragment, EdmProperty discriminator);
    [ExtensionAttribute]
public static void RemoveDefaultDiscriminatorAnnotation(MappingFragment entityTypeMappingFragment);
    [ExtensionAttribute]
public static void RemoveDefaultDiscriminator(MappingFragment entityTypeMappingFragment, EntitySetMapping entitySetMapping);
    [ExtensionAttribute]
public static EdmProperty RemoveDefaultDiscriminatorCondition(MappingFragment entityTypeMappingFragment);
    [ExtensionAttribute]
public static void AddDiscriminatorCondition(MappingFragment entityTypeMapppingFragment, EdmProperty discriminatorColumn, object value);
    [ExtensionAttribute]
public static void AddNullabilityCondition(MappingFragment entityTypeMapppingFragment, EdmProperty column, bool isNull);
    [ExtensionAttribute]
public static bool IsConditionOnlyFragment(MappingFragment entityTypeMapppingFragment);
    [ExtensionAttribute]
public static void SetIsConditionOnlyFragment(MappingFragment entityTypeMapppingFragment, bool isConditionOnlyFragment);
    [ExtensionAttribute]
public static bool IsUnmappedPropertiesFragment(MappingFragment entityTypeMapppingFragment);
    [ExtensionAttribute]
public static void SetIsUnmappedPropertiesFragment(MappingFragment entityTypeMapppingFragment, bool isUnmappedPropertiesFragment);
}
public class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1 : StructuralTypeConfiguration`1<TEntityType> {
    private EntityTypeConfiguration _entityTypeConfiguration;
    internal StructuralTypeConfiguration Configuration { get; }
    internal EntityTypeConfiguration`1(EntityTypeConfiguration entityTypeConfiguration);
    internal virtual StructuralTypeConfiguration get_Configuration();
    internal virtual TPrimitivePropertyConfiguration Property(LambdaExpression lambdaExpression);
    public EntityTypeConfiguration`1<TEntityType> HasKey(Expression`1<Func`2<TEntityType, TKey>> keyExpression);
    public EntityTypeConfiguration`1<TEntityType> HasKey(Expression`1<Func`2<TEntityType, TKey>> keyExpression, Action`1<PrimaryKeyIndexConfiguration> buildAction);
    public IndexConfiguration HasIndex(Expression`1<Func`2<TEntityType, TIndex>> indexExpression);
    public EntityTypeConfiguration`1<TEntityType> HasEntitySetName(string entitySetName);
    public EntityTypeConfiguration`1<TEntityType> Ignore(Expression`1<Func`2<TEntityType, TProperty>> propertyExpression);
    public EntityTypeConfiguration`1<TEntityType> ToTable(string tableName);
    public EntityTypeConfiguration`1<TEntityType> ToTable(string tableName, string schemaName);
    public EntityTypeConfiguration`1<TEntityType> HasTableAnnotation(string name, object value);
    public EntityTypeConfiguration`1<TEntityType> MapToStoredProcedures();
    public EntityTypeConfiguration`1<TEntityType> MapToStoredProcedures(Action`1<ModificationStoredProceduresConfiguration`1<TEntityType>> modificationStoredProcedureMappingConfigurationAction);
    public EntityTypeConfiguration`1<TEntityType> Map(Action`1<EntityMappingConfiguration`1<TEntityType>> entityMappingConfigurationAction);
    public EntityTypeConfiguration`1<TEntityType> Map(Action`1<EntityMappingConfiguration`1<TDerived>> derivedTypeMapConfigurationAction);
    public OptionalNavigationPropertyConfiguration`2<TEntityType, TTargetEntity> HasOptional(Expression`1<Func`2<TEntityType, TTargetEntity>> navigationPropertyExpression);
    public RequiredNavigationPropertyConfiguration`2<TEntityType, TTargetEntity> HasRequired(Expression`1<Func`2<TEntityType, TTargetEntity>> navigationPropertyExpression);
    public ManyNavigationPropertyConfiguration`2<TEntityType, TTargetEntity> HasMany(Expression`1<Func`2<TEntityType, ICollection`1<TTargetEntity>>> navigationPropertyExpression);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
internal class System.Data.Entity.ModelConfiguration.Mappers.AttributeMapper : object {
    private AttributeProvider _attributeProvider;
    public AttributeMapper(AttributeProvider attributeProvider);
    public void Map(PropertyInfo propertyInfo, ICollection`1<MetadataProperty> annotations);
    public void Map(Type type, ICollection`1<MetadataProperty> annotations);
}
internal class System.Data.Entity.ModelConfiguration.Mappers.MappingContext : object {
    private ModelConfiguration _modelConfiguration;
    private ConventionsConfiguration _conventionsConfiguration;
    private EdmModel _model;
    private AttributeProvider _attributeProvider;
    private DbModelBuilderVersion _modelBuilderVersion;
    public ModelConfiguration ModelConfiguration { get; }
    public ConventionsConfiguration ConventionsConfiguration { get; }
    public EdmModel Model { get; }
    public AttributeProvider AttributeProvider { get; }
    public DbModelBuilderVersion ModelBuilderVersion { get; }
    public MappingContext(ModelConfiguration modelConfiguration, ConventionsConfiguration conventionsConfiguration, EdmModel model, DbModelBuilderVersion modelBuilderVersion, AttributeProvider attributeProvider);
    public ModelConfiguration get_ModelConfiguration();
    public ConventionsConfiguration get_ConventionsConfiguration();
    public EdmModel get_Model();
    public AttributeProvider get_AttributeProvider();
    public DbModelBuilderVersion get_ModelBuilderVersion();
}
internal class System.Data.Entity.ModelConfiguration.Mappers.NavigationPropertyMapper : object {
    private TypeMapper _typeMapper;
    public NavigationPropertyMapper(TypeMapper typeMapper);
    public void Map(PropertyInfo propertyInfo, EntityType entityType, Func`1<EntityTypeConfiguration> entityTypeConfiguration);
}
internal class System.Data.Entity.ModelConfiguration.Mappers.PropertyFilter : object {
    private DbModelBuilderVersion _modelBuilderVersion;
    public bool EdmV3FeaturesSupported { get; }
    public bool Ef6FeaturesSupported { get; }
    public PropertyFilter(DbModelBuilderVersion modelBuilderVersion);
    public IEnumerable`1<PropertyInfo> GetProperties(Type type, bool declaredOnly, IEnumerable`1<PropertyInfo> explicitlyMappedProperties, IEnumerable`1<Type> knownTypes, bool includePrivate);
    public void ValidatePropertiesForModelVersion(Type type, IEnumerable`1<PropertyInfo> explicitlyMappedProperties);
    public bool get_EdmV3FeaturesSupported();
    public bool get_Ef6FeaturesSupported();
    private static bool IsEnumType(Type type);
    private static bool IsHierarchyIdType(Type type);
    private static bool IsSpatialType(Type type);
}
internal class System.Data.Entity.ModelConfiguration.Mappers.PropertyMapper : object {
    private TypeMapper _typeMapper;
    public PropertyMapper(TypeMapper typeMapper);
    public void Map(PropertyInfo propertyInfo, ComplexType complexType, Func`1<ComplexTypeConfiguration> complexTypeConfiguration);
    public void Map(PropertyInfo propertyInfo, EntityType entityType, Func`1<EntityTypeConfiguration> entityTypeConfiguration);
    internal bool MapIfNotNavigationProperty(PropertyInfo propertyInfo, EntityType entityType, Func`1<EntityTypeConfiguration> entityTypeConfiguration);
    private EdmProperty MapPrimitiveOrComplexOrEnumProperty(PropertyInfo propertyInfo, Func`1<StructuralTypeConfiguration> structuralTypeConfiguration, bool discoverComplexTypes);
}
internal class System.Data.Entity.ModelConfiguration.Mappers.TypeMapper : object {
    private MappingContext _mappingContext;
    private List`1<Type> _knownTypes;
    public MappingContext MappingContext { get; }
    public TypeMapper(MappingContext mappingContext);
    public MappingContext get_MappingContext();
    public EnumType MapEnumType(Type type);
    public ComplexType MapComplexType(Type type, bool discoverNested);
    public EntityType MapEntityType(Type type);
    private static T GetExistingEdmType(EdmModel model, Type type);
    private void MapStructuralElements(Type type, ICollection`1<MetadataProperty> annotations, Action`2<PropertyMapper, PropertyInfo> propertyMappingAction, Func`1<TStructuralTypeConfiguration> structuralTypeConfiguration);
    private void MapDerivedTypes(Type type, EntityType entityType);
    private void LiftDerivedType(Type derivedType, EntityType derivedEntityType, EntityType entityType);
    private void LiftInheritedProperties(Type type, EntityType entityType);
}
public class System.Data.Entity.ModelConfiguration.ModelValidationException : Exception {
    public ModelValidationException(string message);
    public ModelValidationException(string message, Exception innerException);
    internal ModelValidationException(IEnumerable`1<DataModelErrorEventArgs> validationErrors);
    protected ModelValidationException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Entity.ModelConfiguration.Utilities.AttributeProvider : object {
    private ConcurrentDictionary`2<PropertyInfo, IEnumerable`1<Attribute>> _discoveredAttributes;
    public virtual IEnumerable`1<Attribute> GetAttributes(MemberInfo memberInfo);
    public virtual IEnumerable`1<Attribute> GetAttributes(Type type);
    public virtual IEnumerable`1<Attribute> GetAttributes(PropertyInfo propertyInfo);
    private static ICustomTypeDescriptor GetTypeDescriptor(Type type);
    public virtual void ClearCache();
    [CompilerGeneratedAttribute]
private IEnumerable`1<Attribute> <GetAttributes>b__3_0(PropertyInfo pi);
}
internal class System.Data.Entity.ModelConfiguration.Utilities.EdmPropertyPath : object {
    private static EdmPropertyPath _empty;
    private List`1<EdmProperty> _components;
    public static EdmPropertyPath Empty { get; }
    public EdmPropertyPath(IEnumerable`1<EdmProperty> components);
    public EdmPropertyPath(EdmProperty component);
    private static EdmPropertyPath();
    public static EdmPropertyPath get_Empty();
    public virtual string ToString();
    public bool Equals(EdmPropertyPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EdmPropertyPath left, EdmPropertyPath right);
    public static bool op_Inequality(EdmPropertyPath left, EdmPropertyPath right);
    private sealed virtual override IEnumerator`1<EdmProperty> System.Collections.Generic.IEnumerable<System.Data.Entity.Core.Metadata.Edm.EdmProperty>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.ModelConfiguration.Utilities.PropertyPath : object {
    private static PropertyPath _empty;
    private List`1<PropertyInfo> _components;
    public int Count { get; }
    public static PropertyPath Empty { get; }
    public PropertyInfo Item { get; }
    public PropertyPath(IEnumerable`1<PropertyInfo> components);
    public PropertyPath(PropertyInfo component);
    private static PropertyPath();
    public int get_Count();
    public static PropertyPath get_Empty();
    public PropertyInfo get_Item(int index);
    public virtual string ToString();
    public bool Equals(PropertyPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PropertyPath left, PropertyPath right);
    public static bool op_Inequality(PropertyPath left, PropertyPath right);
    private sealed virtual override IEnumerator`1<PropertyInfo> System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Data.Entity.NullDatabaseInitializer`1 : object {
    public virtual void InitializeDatabase(TContext context);
}
[ExtensionAttribute]
public static class System.Data.Entity.ObservableCollectionExtensions : object {
    [ExtensionAttribute]
public static BindingList`1<T> ToBindingList(ObservableCollection`1<T> source);
}
[ExtensionAttribute]
public static class System.Data.Entity.QueryableExtensions : object {
    private static MethodInfo _first;
    private static MethodInfo _first_Predicate;
    private static MethodInfo _firstOrDefault;
    private static MethodInfo _firstOrDefault_Predicate;
    private static MethodInfo _single;
    private static MethodInfo _single_Predicate;
    private static MethodInfo _singleOrDefault;
    private static MethodInfo _singleOrDefault_Predicate;
    private static MethodInfo _contains;
    private static MethodInfo _any;
    private static MethodInfo _any_Predicate;
    private static MethodInfo _all_Predicate;
    private static MethodInfo _count;
    private static MethodInfo _count_Predicate;
    private static MethodInfo _longCount;
    private static MethodInfo _longCount_Predicate;
    private static MethodInfo _min;
    private static MethodInfo _min_Selector;
    private static MethodInfo _max;
    private static MethodInfo _max_Selector;
    private static MethodInfo _sum_Int;
    private static MethodInfo _sum_IntNullable;
    private static MethodInfo _sum_Long;
    private static MethodInfo _sum_LongNullable;
    private static MethodInfo _sum_Float;
    private static MethodInfo _sum_FloatNullable;
    private static MethodInfo _sum_Double;
    private static MethodInfo _sum_DoubleNullable;
    private static MethodInfo _sum_Decimal;
    private static MethodInfo _sum_DecimalNullable;
    private static MethodInfo _sum_Int_Selector;
    private static MethodInfo _sum_IntNullable_Selector;
    private static MethodInfo _sum_Long_Selector;
    private static MethodInfo _sum_LongNullable_Selector;
    private static MethodInfo _sum_Float_Selector;
    private static MethodInfo _sum_FloatNullable_Selector;
    private static MethodInfo _sum_Double_Selector;
    private static MethodInfo _sum_DoubleNullable_Selector;
    private static MethodInfo _sum_Decimal_Selector;
    private static MethodInfo _sum_DecimalNullable_Selector;
    private static MethodInfo _average_Int;
    private static MethodInfo _average_IntNullable;
    private static MethodInfo _average_Long;
    private static MethodInfo _average_LongNullable;
    private static MethodInfo _average_Float;
    private static MethodInfo _average_FloatNullable;
    private static MethodInfo _average_Double;
    private static MethodInfo _average_DoubleNullable;
    private static MethodInfo _average_Decimal;
    private static MethodInfo _average_DecimalNullable;
    private static MethodInfo _average_Int_Selector;
    private static MethodInfo _average_IntNullable_Selector;
    private static MethodInfo _average_Long_Selector;
    private static MethodInfo _average_LongNullable_Selector;
    private static MethodInfo _average_Float_Selector;
    private static MethodInfo _average_FloatNullable_Selector;
    private static MethodInfo _average_Double_Selector;
    private static MethodInfo _average_DoubleNullable_Selector;
    private static MethodInfo _average_Decimal_Selector;
    private static MethodInfo _average_DecimalNullable_Selector;
    private static MethodInfo _skip;
    private static MethodInfo _take;
    private static QueryableExtensions();
    [ExtensionAttribute]
public static IQueryable`1<T> Include(IQueryable`1<T> source, string path);
    [ExtensionAttribute]
public static IQueryable Include(IQueryable source, string path);
    private static T CommonInclude(T source, string path);
    [ExtensionAttribute]
public static IQueryable`1<T> Include(IQueryable`1<T> source, Expression`1<Func`2<T, TProperty>> path);
    [ExtensionAttribute]
public static IQueryable`1<T> AsNoTracking(IQueryable`1<T> source);
    [ExtensionAttribute]
public static IQueryable AsNoTracking(IQueryable source);
    private static T CommonAsNoTracking(T source);
    [ExtensionAttribute]
[ObsoleteAttribute("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public static IQueryable`1<T> AsStreaming(IQueryable`1<T> source);
    [ExtensionAttribute]
[ObsoleteAttribute("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")]
public static IQueryable AsStreaming(IQueryable source);
    private static T CommonAsStreaming(T source);
    [ExtensionAttribute]
internal static IQueryable`1<T> WithExecutionStrategy(IQueryable`1<T> source, IDbExecutionStrategy executionStrategy);
    [ExtensionAttribute]
internal static IQueryable WithExecutionStrategy(IQueryable source, IDbExecutionStrategy executionStrategy);
    private static T CommonWithExecutionStrategy(T source, IDbExecutionStrategy executionStrategy);
    [ExtensionAttribute]
public static void Load(IQueryable source);
    [ExtensionAttribute]
public static Task LoadAsync(IQueryable source);
    [ExtensionAttribute]
public static Task LoadAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ForEachAsync(IQueryable source, Action`1<object> action);
    [ExtensionAttribute]
public static Task ForEachAsync(IQueryable source, Action`1<object> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ForEachAsync(IQueryable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static Task ForEachAsync(IQueryable`1<T> source, Action`1<T> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<object>> ToListAsync(IQueryable source);
    [ExtensionAttribute]
public static Task`1<List`1<object>> ToListAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item);
    [ExtensionAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> source);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> source);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> source);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> source);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> source);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> source);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, Expression`1<Func`1<int>> countAccessor);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Expression`1<Func`1<int>> countAccessor);
    [ExtensionAttribute]
internal static ObjectQuery TryGetObjectQuery(IQueryable source);
    [ExtensionAttribute]
private static IDbAsyncEnumerable AsDbAsyncEnumerable(IQueryable source);
    [ExtensionAttribute]
private static IDbAsyncEnumerable`1<T> AsDbAsyncEnumerable(IQueryable`1<T> source);
    private static MethodInfo GetMethod(string methodName, Func`1<Type[]> getParameterTypes);
    private static MethodInfo GetMethod(string methodName, Func`3<Type, Type, Type[]> getParameterTypes);
    private static MethodInfo GetMethod(string methodName, Func`2<Type, Type[]> getParameterTypes);
    private static MethodInfo GetMethod(string methodName, Delegate getParameterTypesDelegate, int genericArgumentsCount);
    private static bool Matches(MethodInfo methodInfo, Type[] parameterTypes);
    private static string PrettyPrint(MethodInfo getParameterTypesMethod, int genericArgumentsCount);
}
[GeneratedCodeAttribute("Resources.tt", "1.0.0.0")]
internal class System.Data.Entity.Resources.EntityRes : object {
    internal static string AutomaticMigration;
    internal static string BootstrapMigration;
    internal static string InitialCreate;
    internal static string AutomaticDataLoss;
    internal static string LoggingAutoMigrate;
    internal static string LoggingRevertAutoMigrate;
    internal static string LoggingApplyMigration;
    internal static string LoggingRevertMigration;
    internal static string LoggingSeedingDatabase;
    internal static string LoggingPendingMigrations;
    internal static string LoggingPendingMigrationsDown;
    internal static string LoggingNoExplicitMigrations;
    internal static string LoggingAlreadyAtTarget;
    internal static string LoggingTargetDatabase;
    internal static string LoggingTargetDatabaseFormat;
    internal static string LoggingExplicit;
    internal static string UpgradingHistoryTable;
    internal static string MetadataOutOfDate;
    internal static string MigrationNotFound;
    internal static string PartialFkOperation;
    internal static string AutoNotValidTarget;
    internal static string AutoNotValidForScriptWindows;
    internal static string ContextNotConstructible;
    internal static string AmbiguousMigrationName;
    internal static string AutomaticDisabledException;
    internal static string DownScriptWindowsNotSupported;
    internal static string AssemblyMigrator_NoConfigurationWithName;
    internal static string AssemblyMigrator_MultipleConfigurationsWithName;
    internal static string AssemblyMigrator_NoConfiguration;
    internal static string AssemblyMigrator_MultipleConfigurations;
    internal static string MigrationsNamespaceNotUnderRootNamespace;
    internal static string UnableToDispatchAddOrUpdate;
    internal static string NoSqlGeneratorForProvider;
    internal static string ToolingFacade_AssemblyNotFound;
    internal static string ArgumentIsNullOrWhitespace;
    internal static string EntityTypeConfigurationMismatch;
    internal static string ComplexTypeConfigurationMismatch;
    internal static string KeyPropertyNotFound;
    internal static string ForeignKeyPropertyNotFound;
    internal static string PropertyNotFound;
    internal static string NavigationPropertyNotFound;
    internal static string InvalidPropertyExpression;
    internal static string InvalidComplexPropertyExpression;
    internal static string InvalidPropertiesExpression;
    internal static string InvalidComplexPropertiesExpression;
    internal static string DuplicateStructuralTypeConfiguration;
    internal static string ConflictingPropertyConfiguration;
    internal static string ConflictingTypeAnnotation;
    internal static string ConflictingColumnConfiguration;
    internal static string ConflictingConfigurationValue;
    internal static string ConflictingAnnotationValue;
    internal static string ConflictingIndexAttributeProperty;
    internal static string ConflictingIndexAttribute;
    internal static string ConflictingIndexAttributesOnProperty;
    internal static string IncompatibleTypes;
    internal static string AnnotationSerializeWrongType;
    internal static string AnnotationSerializeBadFormat;
    internal static string ConflictWhenConsolidating;
    internal static string OrderConflictWhenConsolidating;
    internal static string CodeFirstInvalidComplexType;
    internal static string InvalidEntityType;
    internal static string SimpleNameCollision;
    internal static string NavigationInverseItself;
    internal static string ConflictingConstraint;
    internal static string ConflictingInferredColumnType;
    internal static string ConflictingMapping;
    internal static string ConflictingCascadeDeleteOperation;
    internal static string ConflictingMultiplicities;
    internal static string MaxLengthAttributeConvention_InvalidMaxLength;
    internal static string StringLengthAttributeConvention_InvalidMaximumLength;
    internal static string ModelGeneration_UnableToDetermineKeyOrder;
    internal static string ForeignKeyAttributeConvention_EmptyKey;
    internal static string ForeignKeyAttributeConvention_InvalidKey;
    internal static string ForeignKeyAttributeConvention_InvalidNavigationProperty;
    internal static string ForeignKeyAttributeConvention_OrderRequired;
    internal static string InversePropertyAttributeConvention_PropertyNotFound;
    internal static string InversePropertyAttributeConvention_SelfInverseDetected;
    internal static string ValidationHeader;
    internal static string ValidationItemFormat;
    internal static string KeyRegisteredOnDerivedType;
    internal static string InvalidTableMapping;
    internal static string InvalidTableMapping_NoTableName;
    internal static string InvalidChainedMappingSyntax;
    internal static string InvalidNotNullCondition;
    internal static string InvalidDiscriminatorType;
    internal static string ConventionNotFound;
    internal static string InvalidEntitySplittingProperties;
    internal static string ProviderNameNotFound;
    internal static string ProviderNotFound;
    internal static string InvalidDatabaseName;
    internal static string EntityMappingConfiguration_DuplicateMapInheritedProperties;
    internal static string EntityMappingConfiguration_DuplicateMappedProperties;
    internal static string EntityMappingConfiguration_DuplicateMappedProperty;
    internal static string EntityMappingConfiguration_CannotMapIgnoredProperty;
    internal static string EntityMappingConfiguration_InvalidTableSharing;
    internal static string EntityMappingConfiguration_TPCWithIAsOnNonLeafType;
    internal static string CannotIgnoreMappedBaseProperty;
    internal static string ModelBuilder_KeyPropertiesMustBePrimitive;
    internal static string TableNotFound;
    internal static string IncorrectColumnCount;
    internal static string BadKeyNameForAnnotation;
    internal static string BadAnnotationName;
    internal static string CircularComplexTypeHierarchy;
    internal static string UnableToDeterminePrincipal;
    internal static string UnmappedAbstractType;
    internal static string UnsupportedHybridInheritanceMapping;
    internal static string OrphanedConfiguredTableDetected;
    internal static string BadTphMappingToSharedColumn;
    internal static string DuplicateConfiguredColumnOrder;
    internal static string UnsupportedUseOfV3Type;
    internal static string MultiplePropertiesMatchedAsKeys;
    internal static string FailedToGetProviderInformation;
    internal static string DbPropertyEntry_CannotGetCurrentValue;
    internal static string DbPropertyEntry_CannotSetCurrentValue;
    internal static string DbPropertyEntry_NotSupportedForDetached;
    internal static string DbPropertyEntry_SettingEntityRefNotSupported;
    internal static string DbPropertyEntry_NotSupportedForPropertiesNotInTheModel;
    internal static string DbEntityEntry_NotSupportedForDetached;
    internal static string DbSet_BadTypeForAddAttachRemove;
    internal static string DbSet_BadTypeForCreate;
    internal static string DbEntity_BadTypeForCast;
    internal static string DbMember_BadTypeForCast;
    internal static string DbEntityEntry_UsedReferenceForCollectionProp;
    internal static string DbEntityEntry_UsedCollectionForReferenceProp;
    internal static string DbEntityEntry_NotANavigationProperty;
    internal static string DbEntityEntry_NotAScalarProperty;
    internal static string DbEntityEntry_NotAComplexProperty;
    internal static string DbEntityEntry_NotAProperty;
    internal static string DbEntityEntry_DottedPartNotComplex;
    internal static string DbEntityEntry_DottedPathMustBeProperty;
    internal static string DbEntityEntry_WrongGenericForNavProp;
    internal static string DbEntityEntry_WrongGenericForCollectionNavProp;
    internal static string DbEntityEntry_WrongGenericForProp;
    internal static string DbEntityEntry_BadPropertyExpression;
    internal static string DbContext_IndependentAssociationUpdateException;
    internal static string DbPropertyValues_CannotGetValuesForState;
    internal static string DbPropertyValues_CannotSetNullValue;
    internal static string DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull;
    internal static string DbPropertyValues_WrongTypeForAssignment;
    internal static string DbPropertyValues_PropertyValueNamesAreReadonly;
    internal static string DbPropertyValues_PropertyDoesNotExist;
    internal static string DbPropertyValues_AttemptToSetValuesFromWrongObject;
    internal static string DbPropertyValues_AttemptToSetValuesFromWrongType;
    internal static string DbPropertyValues_AttemptToSetNonValuesOnComplexProperty;
    internal static string DbPropertyValues_ComplexObjectCannotBeNull;
    internal static string DbPropertyValues_NestedPropertyValuesNull;
    internal static string DbPropertyValues_CannotSetPropertyOnNullCurrentValue;
    internal static string DbPropertyValues_CannotSetPropertyOnNullOriginalValue;
    internal static string DatabaseInitializationStrategy_ModelMismatch;
    internal static string Database_DatabaseAlreadyExists;
    internal static string Database_NonCodeFirstCompatibilityCheck;
    internal static string Database_NoDatabaseMetadata;
    internal static string Database_BadLegacyInitializerEntry;
    internal static string Database_InitializeFromLegacyConfigFailed;
    internal static string Database_InitializeFromConfigFailed;
    internal static string ContextConfiguredMultipleTimes;
    internal static string SetConnectionFactoryFromConfigFailed;
    internal static string DbContext_ContextUsedInModelCreating;
    internal static string DbContext_MESTNotSupported;
    internal static string DbContext_Disposed;
    internal static string DbContext_ProviderReturnedNullConnection;
    internal static string DbContext_ProviderNameMissing;
    internal static string DbContext_ConnectionFactoryReturnedNullConnection;
    internal static string DbSet_WrongNumberOfKeyValuesPassed;
    internal static string DbSet_WrongKeyValueType;
    internal static string DbSet_WrongEntityTypeFound;
    internal static string DbSet_MultipleAddedEntitiesFound;
    internal static string DbSet_DbSetUsedWithComplexType;
    internal static string DbSet_PocoAndNonPocoMixedInSameAssembly;
    internal static string DbSet_EntityTypeNotInModel;
    internal static string DbQuery_BindingToDbQueryNotSupported;
    internal static string DbExtensions_InvalidIncludePathExpression;
    internal static string DbContext_ConnectionStringNotFound;
    internal static string DbContext_ConnectionHasModel;
    internal static string DbCollectionEntry_CannotSetCollectionProp;
    internal static string CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported;
    internal static string Mapping_MESTNotSupported;
    internal static string DbModelBuilder_MissingRequiredCtor;
    internal static string DbEntityValidationException_ValidationFailed;
    internal static string DbUnexpectedValidationException_ValidationAttribute;
    internal static string DbUnexpectedValidationException_IValidatableObject;
    internal static string SqlConnectionFactory_MdfNotSupported;
    internal static string Database_InitializationException;
    internal static string EdmxWriter_EdmxFromObjectContextNotSupported;
    internal static string EdmxWriter_EdmxFromModelFirstNotSupported;
    internal static string EdmxWriter_EdmxFromRawCompiledModelNotSupported;
    internal static string UnintentionalCodeFirstException_Message;
    internal static string DbContextServices_MissingDefaultCtor;
    internal static string CannotCallGenericSetWithProxyType;
    internal static string EdmModel_Validator_Semantic_SystemNamespaceEncountered;
    internal static string EdmModel_Validator_Semantic_SimilarRelationshipEnd;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetNameReference;
    internal static string EdmModel_Validator_Semantic_ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    internal static string EdmModel_Validator_Semantic_EntitySetTypeHasNoKeys;
    internal static string EdmModel_Validator_Semantic_DuplicateEndName;
    internal static string EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey;
    internal static string EdmModel_Validator_Semantic_InvalidCollectionKindNotCollection;
    internal static string EdmModel_Validator_Semantic_InvalidCollectionKindNotV1_1;
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypeAbstract;
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic;
    internal static string EdmModel_Validator_Semantic_InvalidKeyNullablePart;
    internal static string EdmModel_Validator_Semantic_EntityKeyMustBeScalar;
    internal static string EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass;
    internal static string EdmModel_Validator_Semantic_KeyMissingOnEntityType;
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole;
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame;
    internal static string EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation;
    internal static string EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified;
    internal static string EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate;
    internal static string EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleUpperBoundMustBeOne;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNullableV1;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV1;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV2;
    internal static string EdmModel_Validator_Semantic_InvalidToPropertyInRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeOne;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeMany;
    internal static string EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_NullableComplexType;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType;
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName;
    internal static string EdmModel_Validator_Semantic_TypeNameAlreadyDefinedDuplicate;
    internal static string EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName;
    internal static string EdmModel_Validator_Semantic_PropertyNameAlreadyDefinedDuplicate;
    internal static string EdmModel_Validator_Semantic_CycleInTypeHierarchy;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType_V1_1;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType_V3;
    internal static string EdmModel_Validator_Semantic_ComposableFunctionImportsNotSupportedForSchemaVersion;
    internal static string EdmModel_Validator_Syntactic_MissingName;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationType_AssociationEndMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentEndMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty;
    internal static string EdmModel_Validator_Syntactic_EdmNavigationProperty_AssociationMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmNavigationProperty_ResultEndMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationEnd_EntityTypeMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmEntitySet_ElementTypeMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_ElementTypeMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_SourceSetMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_TargetSetMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EdmTypeReferenceNotValid;
    internal static string MetadataItem_InvalidDataSpace;
    internal static string EdmModel_AddItem_NonMatchingNamespace;
    internal static string Serializer_OneNamespaceAndOneContainer;
    internal static string MaxLengthAttribute_ValidationError;
    internal static string MaxLengthAttribute_InvalidMaxLength;
    internal static string MinLengthAttribute_ValidationError;
    internal static string MinLengthAttribute_InvalidMinLength;
    internal static string DbConnectionInfo_ConnectionStringNotFound;
    internal static string EagerInternalContext_CannotSetConnectionInfo;
    internal static string LazyInternalContext_CannotReplaceEfConnectionWithDbConnection;
    internal static string LazyInternalContext_CannotReplaceDbConnectionWithEfConnection;
    internal static string EntityKey_EntitySetDoesNotMatch;
    internal static string EntityKey_IncorrectNumberOfKeyValuePairs;
    internal static string EntityKey_IncorrectValueType;
    internal static string EntityKey_NoCorrespondingOSpaceTypeForEnumKeyMember;
    internal static string EntityKey_MissingKeyValue;
    internal static string EntityKey_NoNullsAllowedInKeyValuePairs;
    internal static string EntityKey_UnexpectedNull;
    internal static string EntityKey_DoesntMatchKeyOnEntity;
    internal static string EntityKey_EntityKeyMustHaveValues;
    internal static string EntityKey_InvalidQualifiedEntitySetName;
    internal static string EntityKey_MissingEntitySetName;
    internal static string EntityKey_InvalidName;
    internal static string EntityKey_CannotChangeKey;
    internal static string EntityTypesDoNotAgree;
    internal static string EntityKey_NullKeyValue;
    internal static string EdmMembersDefiningTypeDoNotAgreeWithMetadataType;
    internal static string CannotCallNoncomposableFunction;
    internal static string EntityClient_ConnectionStringMissingInfo;
    internal static string EntityClient_ValueNotString;
    internal static string EntityClient_KeywordNotSupported;
    internal static string EntityClient_NoCommandText;
    internal static string EntityClient_ConnectionStringNeededBeforeOperation;
    internal static string EntityClient_ConnectionNotOpen;
    internal static string EntityClient_DuplicateParameterNames;
    internal static string EntityClient_NoConnectionForCommand;
    internal static string EntityClient_NoConnectionForAdapter;
    internal static string EntityClient_ClosedConnectionForUpdate;
    internal static string EntityClient_InvalidNamedConnection;
    internal static string EntityClient_NestedNamedConnection;
    internal static string EntityClient_InvalidStoreProvider;
    internal static string EntityClient_DataReaderIsStillOpen;
    internal static string EntityClient_SettingsCannotBeChangedOnOpenConnection;
    internal static string EntityClient_ExecutingOnClosedConnection;
    internal static string EntityClient_ConnectionStateClosed;
    internal static string EntityClient_ConnectionStateBroken;
    internal static string EntityClient_CannotCloneStoreProvider;
    internal static string EntityClient_UnsupportedCommandType;
    internal static string EntityClient_ErrorInClosingConnection;
    internal static string EntityClient_ErrorInBeginningTransaction;
    internal static string EntityClient_ExtraParametersWithNamedConnection;
    internal static string EntityClient_CommandDefinitionPreparationFailed;
    internal static string EntityClient_CommandDefinitionExecutionFailed;
    internal static string EntityClient_CommandExecutionFailed;
    internal static string EntityClient_StoreReaderFailed;
    internal static string EntityClient_FailedToGetInformation;
    internal static string EntityClient_TooFewColumns;
    internal static string EntityClient_InvalidParameterName;
    internal static string EntityClient_EmptyParameterName;
    internal static string EntityClient_ReturnedNullOnProviderMethod;
    internal static string EntityClient_CannotDeduceDbType;
    internal static string EntityClient_InvalidParameterDirection;
    internal static string EntityClient_UnknownParameterType;
    internal static string EntityClient_UnsupportedDbType;
    internal static string EntityClient_IncompatibleNavigationPropertyResult;
    internal static string EntityClient_TransactionAlreadyStarted;
    internal static string EntityClient_InvalidTransactionForCommand;
    internal static string EntityClient_NoStoreConnectionForUpdate;
    internal static string EntityClient_CommandTreeMetadataIncompatible;
    internal static string EntityClient_ProviderGeneralError;
    internal static string EntityClient_ProviderSpecificError;
    internal static string EntityClient_FunctionImportEmptyCommandText;
    internal static string EntityClient_UnableToFindFunctionImportContainer;
    internal static string EntityClient_UnableToFindFunctionImport;
    internal static string EntityClient_FunctionImportMustBeNonComposable;
    internal static string EntityClient_UnmappedFunctionImport;
    internal static string EntityClient_InvalidStoredProcedureCommandText;
    internal static string EntityClient_ItemCollectionsNotRegisteredInWorkspace;
    internal static string EntityClient_DbConnectionHasNoProvider;
    internal static string EntityClient_RequiresNonStoreCommandTree;
    internal static string EntityClient_CannotReprepareCommandDefinitionBasedCommand;
    internal static string EntityClient_EntityParameterEdmTypeNotScalar;
    internal static string EntityClient_EntityParameterInconsistentEdmType;
    internal static string EntityClient_CannotGetCommandText;
    internal static string EntityClient_CannotSetCommandText;
    internal static string EntityClient_CannotGetCommandTree;
    internal static string EntityClient_CannotSetCommandTree;
    internal static string ELinq_ExpressionMustBeIQueryable;
    internal static string ELinq_UnsupportedExpressionType;
    internal static string ELinq_UnsupportedUseOfContextParameter;
    internal static string ELinq_UnboundParameterExpression;
    internal static string ELinq_UnsupportedConstructor;
    internal static string ELinq_UnsupportedInitializers;
    internal static string ELinq_UnsupportedBinding;
    internal static string ELinq_UnsupportedMethod;
    internal static string ELinq_UnsupportedMethodSuggestedAlternative;
    internal static string ELinq_ThenByDoesNotFollowOrderBy;
    internal static string ELinq_UnrecognizedMember;
    internal static string ELinq_UnresolvableFunctionForMethod;
    internal static string ELinq_UnresolvableFunctionForMethodAmbiguousMatch;
    internal static string ELinq_UnresolvableFunctionForMethodNotFound;
    internal static string ELinq_UnresolvableFunctionForMember;
    internal static string ELinq_UnresolvableStoreFunctionForMember;
    internal static string ELinq_UnresolvableFunctionForExpression;
    internal static string ELinq_UnresolvableStoreFunctionForExpression;
    internal static string ELinq_UnsupportedType;
    internal static string ELinq_UnsupportedNullConstant;
    internal static string ELinq_UnsupportedConstant;
    internal static string ELinq_UnsupportedCast;
    internal static string ELinq_UnsupportedIsOrAs;
    internal static string ELinq_UnsupportedQueryableMethod;
    internal static string ELinq_InvalidOfTypeResult;
    internal static string ELinq_UnsupportedNominalType;
    internal static string ELinq_UnsupportedEnumerableType;
    internal static string ELinq_UnsupportedHeterogeneousInitializers;
    internal static string ELinq_UnsupportedDifferentContexts;
    internal static string ELinq_UnsupportedCastToDecimal;
    internal static string ELinq_UnsupportedKeySelector;
    internal static string ELinq_CreateOrderedEnumerableNotSupported;
    internal static string ELinq_UnsupportedPassthrough;
    internal static string ELinq_UnexpectedTypeForNavigationProperty;
    internal static string ELinq_SkipWithoutOrder;
    internal static string ELinq_PropertyIndexNotSupported;
    internal static string ELinq_NotPropertyOrField;
    internal static string ELinq_UnsupportedStringRemoveCase;
    internal static string ELinq_UnsupportedTrimStartTrimEndCase;
    internal static string ELinq_UnsupportedVBDatePartNonConstantInterval;
    internal static string ELinq_UnsupportedVBDatePartInvalidInterval;
    internal static string ELinq_UnsupportedAsUnicodeAndAsNonUnicode;
    internal static string ELinq_UnsupportedComparison;
    internal static string ELinq_UnsupportedRefComparison;
    internal static string ELinq_UnsupportedRowComparison;
    internal static string ELinq_UnsupportedRowMemberComparison;
    internal static string ELinq_UnsupportedRowTypeComparison;
    internal static string ELinq_AnonymousType;
    internal static string ELinq_ClosureType;
    internal static string ELinq_UnhandledExpressionType;
    internal static string ELinq_UnhandledBindingType;
    internal static string ELinq_UnsupportedNestedFirst;
    internal static string ELinq_UnsupportedNestedSingle;
    internal static string ELinq_UnsupportedInclude;
    internal static string ELinq_UnsupportedMergeAs;
    internal static string ELinq_MethodNotDirectlyCallable;
    internal static string ELinq_CycleDetected;
    internal static string ELinq_DbFunctionAttributedFunctionWithWrongReturnType;
    internal static string ELinq_DbFunctionDirectCall;
    internal static string ELinq_HasFlagArgumentAndSourceTypeMismatch;
    internal static string Elinq_ToStringNotSupportedForType;
    internal static string Elinq_ToStringNotSupportedForEnumsWithFlags;
    internal static string CompiledELinq_UnsupportedParameterTypes;
    internal static string CompiledELinq_UnsupportedNamedParameterType;
    internal static string CompiledELinq_UnsupportedNamedParameterUseAsType;
    internal static string Update_UnsupportedExpressionKind;
    internal static string Update_UnsupportedCastArgument;
    internal static string Update_UnsupportedExtentType;
    internal static string Update_ConstraintCycle;
    internal static string Update_UnsupportedJoinType;
    internal static string Update_UnsupportedProjection;
    internal static string Update_ConcurrencyError;
    internal static string Update_MissingEntity;
    internal static string Update_RelationshipCardinalityConstraintViolation;
    internal static string Update_GeneralExecutionException;
    internal static string Update_MissingRequiredEntity;
    internal static string Update_RelationshipCardinalityViolation;
    internal static string Update_NotSupportedComputedKeyColumn;
    internal static string Update_AmbiguousServerGenIdentifier;
    internal static string Update_WorkspaceMismatch;
    internal static string Update_MissingRequiredRelationshipValue;
    internal static string Update_MissingResultColumn;
    internal static string Update_NullReturnValueForNonNullableMember;
    internal static string Update_ReturnValueHasUnexpectedType;
    internal static string Update_UnableToConvertRowsAffectedParameter;
    internal static string Update_MappingNotFound;
    internal static string Update_ModifyingIdentityColumn;
    internal static string Update_GeneratedDependent;
    internal static string Update_ReferentialConstraintIntegrityViolation;
    internal static string Update_ErrorLoadingRecord;
    internal static string Update_NullValue;
    internal static string Update_CircularRelationships;
    internal static string Update_RelationshipCardinalityConstraintViolationSingleValue;
    internal static string Update_MissingFunctionMapping;
    internal static string Update_InvalidChanges;
    internal static string Update_DuplicateKeys;
    internal static string Update_AmbiguousForeignKey;
    internal static string Update_InsertingOrUpdatingReferenceToDeletedEntity;
    internal static string ViewGen_Extent;
    internal static string ViewGen_Null;
    internal static string ViewGen_CommaBlank;
    internal static string ViewGen_Entities;
    internal static string ViewGen_Tuples;
    internal static string ViewGen_NotNull;
    internal static string ViewGen_NegatedCellConstant;
    internal static string ViewGen_Error;
    internal static string Viewgen_CannotGenerateQueryViewUnderNoValidation;
    internal static string ViewGen_Missing_Sets_Mapping;
    internal static string ViewGen_Missing_Type_Mapping;
    internal static string ViewGen_Missing_Set_Mapping;
    internal static string ViewGen_Concurrency_Derived_Class;
    internal static string ViewGen_Concurrency_Invalid_Condition;
    internal static string ViewGen_TableKey_Missing;
    internal static string ViewGen_EntitySetKey_Missing;
    internal static string ViewGen_AssociationSetKey_Missing;
    internal static string ViewGen_Cannot_Recover_Attributes;
    internal static string ViewGen_Cannot_Recover_Types;
    internal static string ViewGen_Cannot_Disambiguate_MultiConstant;
    internal static string ViewGen_No_Default_Value;
    internal static string ViewGen_No_Default_Value_For_Configuration;
    internal static string ViewGen_KeyConstraint_Violation;
    internal static string ViewGen_KeyConstraint_Update_Violation_EntitySet;
    internal static string ViewGen_KeyConstraint_Update_Violation_AssociationSet;
    internal static string ViewGen_AssociationEndShouldBeMappedToKey;
    internal static string ViewGen_Duplicate_CProperties;
    internal static string ViewGen_Duplicate_CProperties_IsMapped;
    internal static string ViewGen_NotNull_No_Projected_Slot;
    internal static string ViewGen_InvalidCondition;
    internal static string ViewGen_NonKeyProjectedWithOverlappingPartitions;
    internal static string ViewGen_CQ_PartitionConstraint;
    internal static string ViewGen_CQ_DomainConstraint;
    internal static string ViewGen_ErrorLog;
    internal static string ViewGen_ErrorLog2;
    internal static string ViewGen_Foreign_Key_Missing_Table_Mapping;
    internal static string ViewGen_Foreign_Key_ParentTable_NotMappedToEnd;
    internal static string ViewGen_Foreign_Key;
    internal static string ViewGen_Foreign_Key_UpperBound_MustBeOne;
    internal static string ViewGen_Foreign_Key_LowerBound_MustBeOne;
    internal static string ViewGen_Foreign_Key_Missing_Relationship_Mapping;
    internal static string ViewGen_Foreign_Key_Not_Guaranteed_InCSpace;
    internal static string ViewGen_Foreign_Key_ColumnOrder_Incorrect;
    internal static string ViewGen_AssociationSet_AsUserString;
    internal static string ViewGen_AssociationSet_AsUserString_Negated;
    internal static string ViewGen_EntitySet_AsUserString;
    internal static string ViewGen_EntitySet_AsUserString_Negated;
    internal static string ViewGen_EntityInstanceToken;
    internal static string Viewgen_ConfigurationErrorMsg;
    internal static string ViewGen_HashOnMappingClosure_Not_Matching;
    internal static string Viewgen_RightSideNotDisjoint;
    internal static string Viewgen_QV_RewritingNotFound;
    internal static string Viewgen_NullableMappingForNonNullableColumn;
    internal static string Viewgen_ErrorPattern_ConditionMemberIsMapped;
    internal static string Viewgen_ErrorPattern_DuplicateConditionValue;
    internal static string Viewgen_ErrorPattern_TableMappedToMultipleES;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Eq;
    internal static string Viewgen_ErrorPattern_NotNullConditionMappedToNullableMember;
    internal static string Viewgen_ErrorPattern_Partition_MultipleTypesMappedToSameTable_WithoutCondition;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Unk;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Disj;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk_Association;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Disj;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Unk;
    internal static string Viewgen_NoJoinKeyOrFK;
    internal static string Viewgen_MultipleFragmentsBetweenCandSExtentWithDistinct;
    internal static string Validator_EmptyIdentity;
    internal static string Validator_CollectionHasNoTypeUsage;
    internal static string Validator_NoKeyMembers;
    internal static string Validator_FacetTypeIsNull;
    internal static string Validator_MemberHasNullDeclaringType;
    internal static string Validator_MemberHasNullTypeUsage;
    internal static string Validator_ItemAttributeHasNullTypeUsage;
    internal static string Validator_RefTypeHasNullEntityType;
    internal static string Validator_TypeUsageHasNullEdmType;
    internal static string Validator_BaseTypeHasMemberOfSameName;
    internal static string Validator_CollectionTypesCannotHaveBaseType;
    internal static string Validator_RefTypesCannotHaveBaseType;
    internal static string Validator_TypeHasNoName;
    internal static string Validator_TypeHasNoNamespace;
    internal static string Validator_FacetHasNoName;
    internal static string Validator_MemberHasNoName;
    internal static string Validator_MetadataPropertyHasNoName;
    internal static string Validator_NullableEntityKeyProperty;
    internal static string Validator_OSpace_InvalidNavPropReturnType;
    internal static string Validator_OSpace_ScalarPropertyNotPrimitive;
    internal static string Validator_OSpace_ComplexPropertyNotComplex;
    internal static string Validator_OSpace_Convention_MultipleTypesWithSameName;
    internal static string Validator_OSpace_Convention_NonPrimitiveTypeProperty;
    internal static string Validator_OSpace_Convention_MissingRequiredProperty;
    internal static string Validator_OSpace_Convention_BaseTypeIncompatible;
    internal static string Validator_OSpace_Convention_MissingOSpaceType;
    internal static string Validator_OSpace_Convention_RelationshipNotLoaded;
    internal static string Validator_OSpace_Convention_AttributeAssemblyReferenced;
    internal static string Validator_OSpace_Convention_ScalarPropertyMissginGetterOrSetter;
    internal static string Validator_OSpace_Convention_AmbiguousClrType;
    internal static string Validator_OSpace_Convention_Struct;
    internal static string Validator_OSpace_Convention_BaseTypeNotLoaded;
    internal static string Validator_OSpace_Convention_SSpaceOSpaceTypeMismatch;
    internal static string Validator_OSpace_Convention_NonMatchingUnderlyingTypes;
    internal static string Validator_UnsupportedEnumUnderlyingType;
    internal static string ExtraInfo;
    internal static string Metadata_General_Error;
    internal static string InvalidNumberOfParametersForAggregateFunction;
    internal static string InvalidParameterTypeForAggregateFunction;
    internal static string InvalidSchemaEncountered;
    internal static string SystemNamespaceEncountered;
    internal static string NoCollectionForSpace;
    internal static string OperationOnReadOnlyCollection;
    internal static string OperationOnReadOnlyItem;
    internal static string EntitySetInAnotherContainer;
    internal static string InvalidKeyMember;
    internal static string InvalidFileExtension;
    internal static string NewTypeConflictsWithExistingType;
    internal static string NotValidInputPath;
    internal static string UnableToDetermineApplicationContext;
    internal static string WildcardEnumeratorReturnedNull;
    internal static string InvalidUseOfWebPath;
    internal static string UnableToFindReflectedType;
    internal static string AssemblyMissingFromAssembliesToConsider;
    internal static string UnableToLoadResource;
    internal static string EdmVersionNotSupportedByRuntime;
    internal static string AtleastOneSSDLNeeded;
    internal static string InvalidMetadataPath;
    internal static string UnableToResolveAssembly;
    internal static string DuplicatedFunctionoverloads;
    internal static string EntitySetNotInCSPace;
    internal static string TypeNotInEntitySet;
    internal static string TypeNotInAssociationSet;
    internal static string DifferentSchemaVersionInCollection;
    internal static string InvalidCollectionForMapping;
    internal static string OnlyStoreConnectionsSupported;
    internal static string StoreItemCollectionMustHaveOneArtifact;
    internal static string CheckArgumentContainsNullFailed;
    internal static string InvalidRelationshipSetName;
    internal static string InvalidEntitySetName;
    internal static string OnlyFunctionImportsCanBeAddedToEntityContainer;
    internal static string ItemInvalidIdentity;
    internal static string ItemDuplicateIdentity;
    internal static string NotStringTypeForTypeUsage;
    internal static string NotBinaryTypeForTypeUsage;
    internal static string NotDateTimeTypeForTypeUsage;
    internal static string NotDateTimeOffsetTypeForTypeUsage;
    internal static string NotTimeTypeForTypeUsage;
    internal static string NotDecimalTypeForTypeUsage;
    internal static string ArrayTooSmall;
    internal static string MoreThanOneItemMatchesIdentity;
    internal static string MissingDefaultValueForConstantFacet;
    internal static string MinAndMaxValueMustBeSameForConstantFacet;
    internal static string BothMinAndMaxValueMustBeSpecifiedForNonConstantFacet;
    internal static string MinAndMaxValueMustBeDifferentForNonConstantFacet;
    internal static string MinAndMaxMustBePositive;
    internal static string MinMustBeLessThanMax;
    internal static string SameRoleNameOnRelationshipAttribute;
    internal static string RoleTypeInEdmRelationshipAttributeIsInvalidType;
    internal static string TargetRoleNameInNavigationPropertyNotValid;
    internal static string RelationshipNameInNavigationPropertyNotValid;
    internal static string NestedClassNotSupported;
    internal static string NullParameterForEdmRelationshipAttribute;
    internal static string NullRelationshipNameforEdmRelationshipAttribute;
    internal static string NavigationPropertyRelationshipEndTypeMismatch;
    internal static string AllArtifactsMustTargetSameProvider_InvariantName;
    internal static string AllArtifactsMustTargetSameProvider_ManifestToken;
    internal static string ProviderManifestTokenNotFound;
    internal static string FailedToRetrieveProviderManifest;
    internal static string InvalidMaxLengthSize;
    internal static string ArgumentMustBeCSpaceType;
    internal static string ArgumentMustBeOSpaceType;
    internal static string FailedToFindOSpaceTypeMapping;
    internal static string FailedToFindCSpaceTypeMapping;
    internal static string FailedToFindClrTypeMapping;
    internal static string GenericTypeNotSupported;
    internal static string InvalidEDMVersion;
    internal static string Mapping_General_Error;
    internal static string Mapping_InvalidContent_General;
    internal static string Mapping_InvalidContent_EntityContainer;
    internal static string Mapping_InvalidContent_StorageEntityContainer;
    internal static string Mapping_AlreadyMapped_StorageEntityContainer;
    internal static string Mapping_InvalidContent_Entity_Set;
    internal static string Mapping_InvalidContent_Entity_Type;
    internal static string Mapping_InvalidContent_AbstractEntity_FunctionMapping;
    internal static string Mapping_InvalidContent_AbstractEntity_Type;
    internal static string Mapping_InvalidContent_AbstractEntity_IsOfType;
    internal static string Mapping_InvalidContent_Entity_Type_For_Entity_Set;
    internal static string Mapping_Invalid_Association_Type_For_Association_Set;
    internal static string Mapping_InvalidContent_Table;
    internal static string Mapping_InvalidContent_Complex_Type;
    internal static string Mapping_InvalidContent_Association_Set;
    internal static string Mapping_InvalidContent_AssociationSet_Condition;
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set;
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set_PKtoPK;
    internal static string Mapping_InvalidContent_Association_Type;
    internal static string Mapping_InvalidContent_EndProperty;
    internal static string Mapping_InvalidContent_Association_Type_Empty;
    internal static string Mapping_InvalidContent_Table_Expected;
    internal static string Mapping_InvalidContent_Cdm_Member;
    internal static string Mapping_InvalidContent_Column;
    internal static string Mapping_InvalidContent_End;
    internal static string Mapping_InvalidContent_Container_SubElement;
    internal static string Mapping_InvalidContent_Duplicate_Cdm_Member;
    internal static string Mapping_InvalidContent_Duplicate_Condition_Member;
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Members;
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Members;
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Values;
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Values;
    internal static string Mapping_InvalidContent_ConditionMapping_NonScalar;
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidPrimitiveTypeKind;
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidMember;
    internal static string Mapping_InvalidContent_ConditionMapping_Computed;
    internal static string Mapping_InvalidContent_Emtpty_SetMap;
    internal static string Mapping_InvalidContent_TypeMapping_QueryView;
    internal static string Mapping_Default_OCMapping_Clr_Member;
    internal static string Mapping_Default_OCMapping_Clr_Member2;
    internal static string Mapping_Default_OCMapping_Invalid_MemberType;
    internal static string Mapping_Default_OCMapping_MemberKind_Mismatch;
    internal static string Mapping_Default_OCMapping_MultiplicityMismatch;
    internal static string Mapping_Default_OCMapping_Member_Count_Mismatch;
    internal static string Mapping_Default_OCMapping_Member_Type_Mismatch;
    internal static string Mapping_Enum_OCMapping_UnderlyingTypesMismatch;
    internal static string Mapping_Enum_OCMapping_MemberMismatch;
    internal static string Mapping_NotFound_EntityContainer;
    internal static string Mapping_Duplicate_CdmAssociationSet_StorageMap;
    internal static string Mapping_Invalid_CSRootElementMissing;
    internal static string Mapping_ConditionValueTypeMismatch;
    internal static string Mapping_Storage_InvalidSpace;
    internal static string Mapping_Invalid_Member_Mapping;
    internal static string Mapping_Invalid_CSide_ScalarProperty;
    internal static string Mapping_Duplicate_Type;
    internal static string Mapping_Duplicate_PropertyMap_CaseInsensitive;
    internal static string Mapping_Enum_EmptyValue;
    internal static string Mapping_Enum_InvalidValue;
    internal static string Mapping_InvalidMappingSchema_Parsing;
    internal static string Mapping_InvalidMappingSchema_validation;
    internal static string Mapping_Object_InvalidType;
    internal static string Mapping_Provider_WrongConnectionType;
    internal static string Mapping_Views_For_Extent_Not_Generated;
    internal static string Mapping_TableName_QueryView;
    internal static string Mapping_Empty_QueryView;
    internal static string Mapping_Empty_QueryView_OfType;
    internal static string Mapping_Empty_QueryView_OfTypeOnly;
    internal static string Mapping_QueryView_PropertyMaps;
    internal static string Mapping_Invalid_QueryView;
    internal static string Mapping_Invalid_QueryView2;
    internal static string Mapping_Invalid_QueryView_Type;
    internal static string Mapping_TypeName_For_First_QueryView;
    internal static string Mapping_AllQueryViewAtCompileTime;
    internal static string Mapping_QueryViewMultipleTypeInTypeName;
    internal static string Mapping_QueryView_Duplicate_OfType;
    internal static string Mapping_QueryView_Duplicate_OfTypeOnly;
    internal static string Mapping_QueryView_TypeName_Not_Defined;
    internal static string Mapping_QueryView_For_Base_Type;
    internal static string Mapping_UnsupportedExpressionKind_QueryView;
    internal static string Mapping_UnsupportedFunctionCall_QueryView;
    internal static string Mapping_UnsupportedScanTarget_QueryView;
    internal static string Mapping_UnsupportedPropertyKind_QueryView;
    internal static string Mapping_UnsupportedInitialization_QueryView;
    internal static string Mapping_EntitySetMismatchOnAssociationSetEnd_QueryView;
    internal static string Mapping_Invalid_Query_Views_MissingSetClosure;
    internal static string DbMappingViewCacheTypeAttribute_InvalidContextType;
    internal static string DbMappingViewCacheTypeAttribute_CacheTypeNotFound;
    internal static string DbMappingViewCacheTypeAttribute_MultipleInstancesWithSameContextType;
    internal static string DbMappingViewCacheFactory_CreateFailure;
    internal static string Generated_View_Type_Super_Class;
    internal static string Generated_Views_Invalid_Extent;
    internal static string MappingViewCacheFactory_MustNotChange;
    internal static string Mapping_ItemWithSameNameExistsBothInCSpaceAndSSpace;
    internal static string Mapping_AbstractTypeMappingToNonAbstractType;
    internal static string Mapping_EnumTypeMappingToNonEnumType;
    internal static string StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping;
    internal static string Mapping_InvalidContent_IsTypeOfNotTerminated;
    internal static string Mapping_CannotMapCLRTypeMultipleTimes;
    internal static string Mapping_ModificationFunction_In_Table_Context;
    internal static string Mapping_ModificationFunction_Multiple_Types;
    internal static string Mapping_ModificationFunction_UnknownFunction;
    internal static string Mapping_ModificationFunction_AmbiguousFunction;
    internal static string Mapping_ModificationFunction_NotValidFunction;
    internal static string Mapping_ModificationFunction_NotValidFunctionParameter;
    internal static string Mapping_ModificationFunction_MissingParameter;
    internal static string Mapping_ModificationFunction_AssociationSetDoesNotExist;
    internal static string Mapping_ModificationFunction_AssociationSetRoleDoesNotExist;
    internal static string Mapping_ModificationFunction_AssociationSetFromRoleIsNotEntitySet;
    internal static string Mapping_ModificationFunction_AssociationSetCardinality;
    internal static string Mapping_ModificationFunction_ComplexTypeNotFound;
    internal static string Mapping_ModificationFunction_WrongComplexType;
    internal static string Mapping_ModificationFunction_MissingVersion;
    internal static string Mapping_ModificationFunction_VersionMustBeOriginal;
    internal static string Mapping_ModificationFunction_VersionMustBeCurrent;
    internal static string Mapping_ModificationFunction_ParameterNotFound;
    internal static string Mapping_ModificationFunction_PropertyNotFound;
    internal static string Mapping_ModificationFunction_PropertyNotKey;
    internal static string Mapping_ModificationFunction_ParameterBoundTwice;
    internal static string Mapping_ModificationFunction_RedundantEntityTypeMapping;
    internal static string Mapping_ModificationFunction_MissingSetClosure;
    internal static string Mapping_ModificationFunction_MissingEntityType;
    internal static string Mapping_ModificationFunction_PropertyParameterTypeMismatch;
    internal static string Mapping_ModificationFunction_AssociationSetAmbiguous;
    internal static string Mapping_ModificationFunction_MultipleEndsOfAssociationMapped;
    internal static string Mapping_ModificationFunction_AmbiguousResultBinding;
    internal static string Mapping_ModificationFunction_AssociationSetNotMappedForOperation;
    internal static string Mapping_ModificationFunction_AssociationEndMappingInvalidForEntityType;
    internal static string Mapping_ModificationFunction_AssociationEndMappingForeignKeyAssociation;
    internal static string Mapping_StoreTypeMismatch_ScalarPropertyMapping;
    internal static string Mapping_DistinctFlagInReadWriteContainer;
    internal static string Mapping_ProviderReturnsNullType;
    internal static string Mapping_DifferentEdmStoreVersion;
    internal static string Mapping_DifferentMappingEdmStoreVersion;
    internal static string Mapping_FunctionImport_StoreFunctionDoesNotExist;
    internal static string Mapping_FunctionImport_FunctionImportDoesNotExist;
    internal static string Mapping_FunctionImport_FunctionImportMappedMultipleTimes;
    internal static string Mapping_FunctionImport_TargetFunctionMustBeNonComposable;
    internal static string Mapping_FunctionImport_TargetFunctionMustBeComposable;
    internal static string Mapping_FunctionImport_TargetParameterHasNoCorrespondingImportParameter;
    internal static string Mapping_FunctionImport_ImportParameterHasNoCorrespondingTargetParameter;
    internal static string Mapping_FunctionImport_IncompatibleParameterMode;
    internal static string Mapping_FunctionImport_IncompatibleParameterType;
    internal static string Mapping_FunctionImport_IncompatibleEnumParameterType;
    internal static string Mapping_FunctionImport_RowsAffectedParameterDoesNotExist;
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongType;
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongMode;
    internal static string Mapping_FunctionImport_EntityTypeMappingForFunctionNotReturningEntitySet;
    internal static string Mapping_FunctionImport_InvalidContentEntityTypeForEntitySet;
    internal static string Mapping_FunctionImport_ConditionValueTypeMismatch;
    internal static string Mapping_FunctionImport_UnsupportedType;
    internal static string Mapping_FunctionImport_ResultMappingCountDoesNotMatchResultCount;
    internal static string Mapping_FunctionImport_ResultMapping_MappedTypeDoesNotMatchReturnType;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeCTExpected;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeETExpected;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidSType;
    internal static string Mapping_FunctionImport_PropertyNotMapped;
    internal static string Mapping_FunctionImport_ImplicitMappingForAbstractReturnType;
    internal static string Mapping_FunctionImport_ScalarMappingToMulticolumnTVF;
    internal static string Mapping_FunctionImport_ScalarMappingTypeMismatch;
    internal static string Mapping_FunctionImport_UnreachableType;
    internal static string Mapping_FunctionImport_UnreachableIsTypeOf;
    internal static string Mapping_FunctionImport_FunctionAmbiguous;
    internal static string Mapping_FunctionImport_CannotInferTargetFunctionKeys;
    internal static string Entity_EntityCantHaveMultipleChangeTrackers;
    internal static string ComplexObject_NullableComplexTypesNotSupported;
    internal static string ComplexObject_ComplexObjectAlreadyAttachedToParent;
    internal static string ComplexObject_ComplexChangeRequestedOnScalarProperty;
    internal static string ObjectStateEntry_SetModifiedOnInvalidProperty;
    internal static string ObjectStateEntry_OriginalValuesDoesNotExist;
    internal static string ObjectStateEntry_CurrentValuesDoesNotExist;
    internal static string ObjectStateEntry_InvalidState;
    internal static string ObjectStateEntry_CannotModifyKeyProperty;
    internal static string ObjectStateEntry_CantModifyRelationValues;
    internal static string ObjectStateEntry_CantModifyRelationState;
    internal static string ObjectStateEntry_CantModifyDetachedDeletedEntries;
    internal static string ObjectStateEntry_SetModifiedStates;
    internal static string ObjectStateEntry_CantSetEntityKey;
    internal static string ObjectStateEntry_CannotAccessKeyEntryValues;
    internal static string ObjectStateEntry_CannotModifyKeyEntryState;
    internal static string ObjectStateEntry_CannotDeleteOnKeyEntry;
    internal static string ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging;
    internal static string ObjectStateEntry_ChangeOnUnmappedProperty;
    internal static string ObjectStateEntry_ChangeOnUnmappedComplexProperty;
    internal static string ObjectStateEntry_ChangedInDifferentStateFromChanging;
    internal static string ObjectStateEntry_UnableToEnumerateCollection;
    internal static string ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers;
    internal static string ObjectStateEntry_InvalidTypeForComplexTypeProperty;
    internal static string ObjectStateEntry_ComplexObjectUsedMultipleTimes;
    internal static string ObjectStateEntry_SetOriginalComplexProperties;
    internal static string ObjectStateEntry_NullOriginalValueForNonNullableProperty;
    internal static string ObjectStateEntry_SetOriginalPrimaryKey;
    internal static string ObjectStateManager_NoEntryExistForEntityKey;
    internal static string ObjectStateManager_NoEntryExistsForObject;
    internal static string ObjectStateManager_EntityNotTracked;
    internal static string ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager;
    internal static string ObjectStateManager_ObjectStateManagerContainsThisEntityKey;
    internal static string ObjectStateManager_DoesnotAllowToReAddUnchangedOrModifiedOrDeletedEntity;
    internal static string ObjectStateManager_CannotFixUpKeyToExistingValues;
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKey;
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach;
    internal static string ObjectStateManager_InvalidKey;
    internal static string ObjectStateManager_EntityTypeDoesnotMatchtoEntitySetType;
    internal static string ObjectStateManager_AcceptChangesEntityKeyIsNotValid;
    internal static string ObjectStateManager_EntityConflictsWithKeyEntry;
    internal static string ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity;
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityDeleted;
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityAdded;
    internal static string ObjectStateManager_CannotChangeRelationshipStateKeyEntry;
    internal static string ObjectStateManager_ConflictingChangesOfRelationshipDetected;
    internal static string ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations;
    internal static string ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid;
    internal static string ObjectContext_ClientEntityRemovedFromStore;
    internal static string ObjectContext_StoreEntityNotPresentInClient;
    internal static string ObjectContext_InvalidConnectionString;
    internal static string ObjectContext_InvalidConnection;
    internal static string ObjectContext_InvalidDefaultContainerName;
    internal static string ObjectContext_NthElementInAddedState;
    internal static string ObjectContext_NthElementIsDuplicate;
    internal static string ObjectContext_NthElementIsNull;
    internal static string ObjectContext_NthElementNotInObjectStateManager;
    internal static string ObjectContext_ObjectNotFound;
    internal static string ObjectContext_CannotDeleteEntityNotInObjectStateManager;
    internal static string ObjectContext_CannotDetachEntityNotInObjectStateManager;
    internal static string ObjectContext_EntitySetNotFoundForName;
    internal static string ObjectContext_EntityContainerNotFoundForName;
    internal static string ObjectContext_InvalidCommandTimeout;
    internal static string ObjectContext_NoMappingForEntityType;
    internal static string ObjectContext_EntityAlreadyExistsInObjectStateManager;
    internal static string ObjectContext_InvalidEntitySetInKey;
    internal static string ObjectContext_CannotAttachEntityWithoutKey;
    internal static string ObjectContext_CannotAttachEntityWithTemporaryKey;
    internal static string ObjectContext_EntitySetNameOrEntityKeyRequired;
    internal static string ObjectContext_ExecuteFunctionTypeMismatch;
    internal static string ObjectContext_ExecuteFunctionCalledWithScalarFunction;
    internal static string ObjectContext_ExecuteFunctionCalledWithNonQueryFunction;
    internal static string ObjectContext_ExecuteFunctionCalledWithNullParameter;
    internal static string ObjectContext_ContainerQualifiedEntitySetNameRequired;
    internal static string ObjectContext_CannotSetDefaultContainerName;
    internal static string ObjectContext_QualfiedEntitySetName;
    internal static string ObjectContext_EntitiesHaveDifferentType;
    internal static string ObjectContext_EntityMustBeUnchangedOrModified;
    internal static string ObjectContext_EntityMustBeUnchangedOrModifiedOrDeleted;
    internal static string ObjectContext_AcceptAllChangesFailure;
    internal static string ObjectContext_CommitWithConceptualNull;
    internal static string ObjectContext_InvalidEntitySetOnEntity;
    internal static string ObjectContext_InvalidObjectSetTypeForEntitySet;
    internal static string ObjectContext_InvalidEntitySetInKeyFromName;
    internal static string ObjectContext_ObjectDisposed;
    internal static string ObjectContext_CannotExplicitlyLoadDetachedRelationships;
    internal static string ObjectContext_CannotLoadReferencesUsingDifferentContext;
    internal static string ObjectContext_SelectorExpressionMustBeMemberAccess;
    internal static string ObjectContext_MultipleEntitySetsFoundInSingleContainer;
    internal static string ObjectContext_MultipleEntitySetsFoundInAllContainers;
    internal static string ObjectContext_NoEntitySetFoundForType;
    internal static string ObjectContext_EntityNotInObjectSet_Delete;
    internal static string ObjectContext_EntityNotInObjectSet_Detach;
    internal static string ObjectContext_InvalidEntityState;
    internal static string ObjectContext_InvalidRelationshipState;
    internal static string ObjectContext_EntityNotTrackedOrHasTempKey;
    internal static string ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues;
    internal static string ObjectContext_InvalidEntitySetForStoreQuery;
    internal static string ObjectContext_InvalidTypeForStoreQuery;
    internal static string ObjectContext_TwoPropertiesMappedToSameColumn;
    internal static string RelatedEnd_InvalidOwnerStateForAttach;
    internal static string RelatedEnd_InvalidNthElementNullForAttach;
    internal static string RelatedEnd_InvalidNthElementContextForAttach;
    internal static string RelatedEnd_InvalidNthElementStateForAttach;
    internal static string RelatedEnd_InvalidEntityContextForAttach;
    internal static string RelatedEnd_InvalidEntityStateForAttach;
    internal static string RelatedEnd_UnableToAddEntity;
    internal static string RelatedEnd_UnableToRemoveEntity;
    internal static string RelatedEnd_UnableToAddRelationshipWithDeletedEntity;
    internal static string RelatedEnd_CannotSerialize;
    internal static string RelatedEnd_CannotAddToFixedSizeArray;
    internal static string RelatedEnd_CannotRemoveFromFixedSizeArray;
    internal static string Materializer_PropertyIsNotNullable;
    internal static string Materializer_PropertyIsNotNullableWithName;
    internal static string Materializer_SetInvalidValue;
    internal static string Materializer_InvalidCastReference;
    internal static string Materializer_InvalidCastNullable;
    internal static string Materializer_NullReferenceCast;
    internal static string Materializer_RecyclingEntity;
    internal static string Materializer_AddedEntityAlreadyExists;
    internal static string Materializer_CannotReEnumerateQueryResults;
    internal static string Materializer_UnsupportedType;
    internal static string Collections_NoRelationshipSetMatched;
    internal static string Collections_ExpectedCollectionGotReference;
    internal static string Collections_InvalidEntityStateSource;
    internal static string Collections_InvalidEntityStateLoad;
    internal static string Collections_CannotFillTryDifferentMergeOption;
    internal static string Collections_UnableToMergeCollections;
    internal static string EntityReference_ExpectedReferenceGotCollection;
    internal static string EntityReference_CannotAddMoreThanOneEntityToEntityReference;
    internal static string EntityReference_LessThanExpectedRelatedEntitiesFound;
    internal static string EntityReference_MoreThanExpectedRelatedEntitiesFound;
    internal static string EntityReference_CannotChangeReferentialConstraintProperty;
    internal static string EntityReference_CannotSetSpecialKeys;
    internal static string EntityReference_EntityKeyValueMismatch;
    internal static string RelatedEnd_RelatedEndNotFound;
    internal static string RelatedEnd_RelatedEndNotAttachedToContext;
    internal static string RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd;
    internal static string RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd;
    internal static string RelatedEnd_InvalidContainedType_Collection;
    internal static string RelatedEnd_InvalidContainedType_Reference;
    internal static string RelatedEnd_CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities;
    internal static string RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts;
    internal static string RelatedEnd_MismatchedMergeOptionOnLoad;
    internal static string RelatedEnd_EntitySetIsNotValidForRelationship;
    internal static string RelatedEnd_OwnerIsNull;
    internal static string RelationshipManager_UnableToRetrieveReferentialConstraintProperties;
    internal static string RelationshipManager_InconsistentReferentialConstraintProperties;
    internal static string RelationshipManager_CircularRelationshipsWithReferentialConstraints;
    internal static string RelationshipManager_UnableToFindRelationshipTypeInMetadata;
    internal static string RelationshipManager_InvalidTargetRole;
    internal static string RelationshipManager_UnexpectedNull;
    internal static string RelationshipManager_InvalidRelationshipManagerOwner;
    internal static string RelationshipManager_OwnerIsNotSourceType;
    internal static string RelationshipManager_UnexpectedNullContext;
    internal static string RelationshipManager_ReferenceAlreadyInitialized;
    internal static string RelationshipManager_RelationshipManagerAttached;
    internal static string RelationshipManager_InitializeIsForDeserialization;
    internal static string RelationshipManager_CollectionAlreadyInitialized;
    internal static string RelationshipManager_CollectionRelationshipManagerAttached;
    internal static string RelationshipManager_CollectionInitializeIsForDeserialization;
    internal static string RelationshipManager_NavigationPropertyNotFound;
    internal static string RelationshipManager_CannotGetRelatEndForDetachedPocoEntity;
    internal static string ObjectView_CannotReplacetheEntityorRow;
    internal static string ObjectView_IndexBasedInsertIsNotSupported;
    internal static string ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList;
    internal static string ObjectView_AddNewOperationNotAllowedOnAbstractBindingList;
    internal static string ObjectView_IncompatibleArgument;
    internal static string ObjectView_CannotResolveTheEntitySet;
    internal static string CodeGen_ConstructorNoParameterless;
    internal static string CodeGen_PropertyDeclaringTypeIsValueType;
    internal static string CodeGen_PropertyUnsupportedType;
    internal static string CodeGen_PropertyIsIndexed;
    internal static string CodeGen_PropertyIsStatic;
    internal static string CodeGen_PropertyNoGetter;
    internal static string CodeGen_PropertyNoSetter;
    internal static string PocoEntityWrapper_UnableToSetFieldOrProperty;
    internal static string PocoEntityWrapper_UnexpectedTypeForNavigationProperty;
    internal static string PocoEntityWrapper_UnableToMaterializeArbitaryNavPropType;
    internal static string GeneralQueryError;
    internal static string CtxAlias;
    internal static string CtxAliasedNamespaceImport;
    internal static string CtxAnd;
    internal static string CtxAnyElement;
    internal static string CtxApplyClause;
    internal static string CtxBetween;
    internal static string CtxCase;
    internal static string CtxCaseElse;
    internal static string CtxCaseWhenThen;
    internal static string CtxCast;
    internal static string CtxCollatedOrderByClauseItem;
    internal static string CtxCollectionTypeDefinition;
    internal static string CtxCommandExpression;
    internal static string CtxCreateRef;
    internal static string CtxDeref;
    internal static string CtxDivide;
    internal static string CtxElement;
    internal static string CtxEquals;
    internal static string CtxEscapedIdentifier;
    internal static string CtxExcept;
    internal static string CtxExists;
    internal static string CtxExpressionList;
    internal static string CtxFlatten;
    internal static string CtxFromApplyClause;
    internal static string CtxFromClause;
    internal static string CtxFromClauseItem;
    internal static string CtxFromClauseList;
    internal static string CtxFromJoinClause;
    internal static string CtxFunction;
    internal static string CtxFunctionDefinition;
    internal static string CtxGreaterThan;
    internal static string CtxGreaterThanEqual;
    internal static string CtxGroupByClause;
    internal static string CtxGroupPartition;
    internal static string CtxHavingClause;
    internal static string CtxIdentifier;
    internal static string CtxIn;
    internal static string CtxIntersect;
    internal static string CtxIsNotNull;
    internal static string CtxIsNotOf;
    internal static string CtxIsNull;
    internal static string CtxIsOf;
    internal static string CtxJoinClause;
    internal static string CtxJoinOnClause;
    internal static string CtxKey;
    internal static string CtxLessThan;
    internal static string CtxLessThanEqual;
    internal static string CtxLike;
    internal static string CtxLimitSubClause;
    internal static string CtxLiteral;
    internal static string CtxMemberAccess;
    internal static string CtxMethod;
    internal static string CtxMinus;
    internal static string CtxModulus;
    internal static string CtxMultiply;
    internal static string CtxMultisetCtor;
    internal static string CtxNamespaceImport;
    internal static string CtxNamespaceImportList;
    internal static string CtxNavigate;
    internal static string CtxNot;
    internal static string CtxNotBetween;
    internal static string CtxNotEqual;
    internal static string CtxNotIn;
    internal static string CtxNotLike;
    internal static string CtxNullLiteral;
    internal static string CtxOfType;
    internal static string CtxOfTypeOnly;
    internal static string CtxOr;
    internal static string CtxOrderByClause;
    internal static string CtxOrderByClauseItem;
    internal static string CtxOverlaps;
    internal static string CtxParen;
    internal static string CtxPlus;
    internal static string CtxTypeNameWithTypeSpec;
    internal static string CtxQueryExpression;
    internal static string CtxQueryStatement;
    internal static string CtxRef;
    internal static string CtxRefTypeDefinition;
    internal static string CtxRelationship;
    internal static string CtxRelationshipList;
    internal static string CtxRowCtor;
    internal static string CtxRowTypeDefinition;
    internal static string CtxSelectRowClause;
    internal static string CtxSelectValueClause;
    internal static string CtxSet;
    internal static string CtxSimpleIdentifier;
    internal static string CtxSkipSubClause;
    internal static string CtxTopSubClause;
    internal static string CtxTreat;
    internal static string CtxTypeCtor;
    internal static string CtxTypeName;
    internal static string CtxUnaryMinus;
    internal static string CtxUnaryPlus;
    internal static string CtxUnion;
    internal static string CtxUnionAll;
    internal static string CtxWhereClause;
    internal static string CannotConvertNumericLiteral;
    internal static string GenericSyntaxError;
    internal static string InFromClause;
    internal static string InGroupClause;
    internal static string InRowCtor;
    internal static string InSelectProjectionList;
    internal static string InvalidAliasName;
    internal static string InvalidEmptyIdentifier;
    internal static string InvalidEmptyQuery;
    internal static string InvalidEscapedIdentifier;
    internal static string InvalidEscapedIdentifierUnbalanced;
    internal static string InvalidOperatorSymbol;
    internal static string InvalidPunctuatorSymbol;
    internal static string InvalidSimpleIdentifier;
    internal static string InvalidSimpleIdentifierNonASCII;
    internal static string LocalizedCollection;
    internal static string LocalizedColumn;
    internal static string LocalizedComplex;
    internal static string LocalizedEntity;
    internal static string LocalizedEntityContainerExpression;
    internal static string LocalizedFunction;
    internal static string LocalizedInlineFunction;
    internal static string LocalizedKeyword;
    internal static string LocalizedLeft;
    internal static string LocalizedLine;
    internal static string LocalizedMetadataMemberExpression;
    internal static string LocalizedNamespace;
    internal static string LocalizedNear;
    internal static string LocalizedPrimitive;
    internal static string LocalizedReference;
    internal static string LocalizedRight;
    internal static string LocalizedRow;
    internal static string LocalizedTerm;
    internal static string LocalizedType;
    internal static string LocalizedEnumMember;
    internal static string LocalizedValueExpression;
    internal static string AliasNameAlreadyUsed;
    internal static string AmbiguousFunctionArguments;
    internal static string AmbiguousMetadataMemberName;
    internal static string ArgumentTypesAreIncompatible;
    internal static string BetweenLimitsCannotBeUntypedNulls;
    internal static string BetweenLimitsTypesAreNotCompatible;
    internal static string BetweenLimitsTypesAreNotOrderComparable;
    internal static string BetweenValueIsNotOrderComparable;
    internal static string CannotCreateEmptyMultiset;
    internal static string CannotCreateMultisetofNulls;
    internal static string CannotInstantiateAbstractType;
    internal static string CannotResolveNameToTypeOrFunction;
    internal static string ConcatBuiltinNotSupported;
    internal static string CouldNotResolveIdentifier;
    internal static string CreateRefTypeIdentifierMustBeASubOrSuperType;
    internal static string CreateRefTypeIdentifierMustSpecifyAnEntityType;
    internal static string DeRefArgIsNotOfRefType;
    internal static string DuplicatedInlineFunctionOverload;
    internal static string ElementOperatorIsNotSupported;
    internal static string MemberDoesNotBelongToEntityContainer;
    internal static string ExpressionCannotBeNull;
    internal static string OfTypeExpressionElementTypeMustBeEntityType;
    internal static string OfTypeExpressionElementTypeMustBeNominalType;
    internal static string ExpressionMustBeCollection;
    internal static string ExpressionMustBeNumericType;
    internal static string ExpressionTypeMustBeBoolean;
    internal static string ExpressionTypeMustBeEqualComparable;
    internal static string ExpressionTypeMustBeEntityType;
    internal static string ExpressionTypeMustBeNominalType;
    internal static string ExpressionTypeMustNotBeCollection;
    internal static string ExprIsNotValidEntitySetForCreateRef;
    internal static string FailedToResolveAggregateFunction;
    internal static string GeneralExceptionAsQueryInnerException;
    internal static string GroupingKeysMustBeEqualComparable;
    internal static string GroupPartitionOutOfContext;
    internal static string HavingRequiresGroupClause;
    internal static string ImcompatibleCreateRefKeyElementType;
    internal static string ImcompatibleCreateRefKeyType;
    internal static string InnerJoinMustHaveOnPredicate;
    internal static string InvalidAssociationTypeForUnion;
    internal static string InvalidCaseResultTypes;
    internal static string InvalidCaseWhenThenNullType;
    internal static string InvalidCast;
    internal static string InvalidCastExpressionType;
    internal static string InvalidCastType;
    internal static string InvalidComplexType;
    internal static string InvalidCreateRefKeyType;
    internal static string InvalidCtorArgumentType;
    internal static string InvalidCtorUseOnType;
    internal static string InvalidDateTimeOffsetLiteral;
    internal static string InvalidDay;
    internal static string InvalidDayInMonth;
    internal static string InvalidDeRefProperty;
    internal static string InvalidDistinctArgumentInCtor;
    internal static string InvalidDistinctArgumentInNonAggFunction;
    internal static string InvalidEntityRootTypeArgument;
    internal static string InvalidEntityTypeArgument;
    internal static string InvalidExpressionResolutionClass;
    internal static string InvalidFlattenArgument;
    internal static string InvalidGroupIdentifierReference;
    internal static string InvalidHour;
    internal static string InvalidImplicitRelationshipFromEnd;
    internal static string InvalidImplicitRelationshipToEnd;
    internal static string InvalidInExprArgs;
    internal static string InvalidJoinLeftCorrelation;
    internal static string InvalidKeyArgument;
    internal static string InvalidKeyTypeForCollation;
    internal static string InvalidLiteralFormat;
    internal static string InvalidMetadataMemberName;
    internal static string InvalidMinute;
    internal static string InvalidModeForWithRelationshipClause;
    internal static string InvalidMonth;
    internal static string InvalidNamespaceAlias;
    internal static string InvalidNullArithmetic;
    internal static string InvalidNullComparison;
    internal static string InvalidNullLiteralForNonNullableMember;
    internal static string InvalidParameterFormat;
    internal static string InvalidPlaceholderRootTypeArgument;
    internal static string InvalidPlaceholderTypeArgument;
    internal static string InvalidPredicateForCrossJoin;
    internal static string InvalidRelationshipMember;
    internal static string InvalidMetadataMemberClassResolution;
    internal static string InvalidRootComplexType;
    internal static string InvalidRootRowType;
    internal static string InvalidRowType;
    internal static string InvalidSecond;
    internal static string InvalidSelectValueAliasedExpression;
    internal static string InvalidSelectValueList;
    internal static string InvalidTypeForWithRelationshipClause;
    internal static string InvalidUnarySetOpArgument;
    internal static string InvalidUnsignedTypeForUnaryMinusOperation;
    internal static string InvalidYear;
    internal static string InvalidWithRelationshipTargetEndMultiplicity;
    internal static string InvalidQueryResultType;
    internal static string IsNullInvalidType;
    internal static string KeyMustBeCorrelated;
    internal static string LeftSetExpressionArgsMustBeCollection;
    internal static string LikeArgMustBeStringType;
    internal static string LiteralTypeNotFoundInMetadata;
    internal static string MalformedSingleQuotePayload;
    internal static string MalformedStringLiteralPayload;
    internal static string MethodInvocationNotSupported;
    internal static string MultipleDefinitionsOfParameter;
    internal static string MultipleDefinitionsOfVariable;
    internal static string MultisetElemsAreNotTypeCompatible;
    internal static string NamespaceAliasAlreadyUsed;
    internal static string NamespaceAlreadyImported;
    internal static string NestedAggregateCannotBeUsedInAggregate;
    internal static string NoAggrFunctionOverloadMatch;
    internal static string NoCanonicalAggrFunctionOverloadMatch;
    internal static string NoCanonicalFunctionOverloadMatch;
    internal static string NoFunctionOverloadMatch;
    internal static string NotAMemberOfCollection;
    internal static string NotAMemberOfType;
    internal static string NotASuperOrSubType;
    internal static string NullLiteralCannotBePromotedToCollectionOfNulls;
    internal static string NumberOfTypeCtorIsLessThenFormalSpec;
    internal static string NumberOfTypeCtorIsMoreThenFormalSpec;
    internal static string OrderByKeyIsNotOrderComparable;
    internal static string OfTypeOnlyTypeArgumentCannotBeAbstract;
    internal static string ParameterTypeNotSupported;
    internal static string ParameterWasNotDefined;
    internal static string PlaceholderExpressionMustBeCompatibleWithEdm64;
    internal static string PlaceholderExpressionMustBeConstant;
    internal static string PlaceholderExpressionMustBeGreaterThanOrEqualToZero;
    internal static string PlaceholderSetArgTypeIsNotEqualComparable;
    internal static string PlusLeftExpressionInvalidType;
    internal static string PlusRightExpressionInvalidType;
    internal static string PrecisionMustBeGreaterThanScale;
    internal static string RefArgIsNotOfEntityType;
    internal static string RefTypeIdentifierMustSpecifyAnEntityType;
    internal static string RelatedEndExprTypeMustBeReference;
    internal static string RelatedEndExprTypeMustBePromotoableToToEnd;
    internal static string RelationshipFromEndIsAmbiguos;
    internal static string RelationshipTypeExpected;
    internal static string RelationshipToEndIsAmbiguos;
    internal static string RelationshipTargetMustBeUnique;
    internal static string ResultingExpressionTypeCannotBeNull;
    internal static string RightSetExpressionArgsMustBeCollection;
    internal static string RowCtorElementCannotBeNull;
    internal static string SelectDistinctMustBeEqualComparable;
    internal static string SourceTypeMustBePromotoableToFromEndRelationType;
    internal static string TopAndLimitCannotCoexist;
    internal static string TopAndSkipCannotCoexist;
    internal static string TypeDoesNotSupportSpec;
    internal static string TypeDoesNotSupportFacet;
    internal static string TypeArgumentCountMismatch;
    internal static string TypeArgumentMustBeLiteral;
    internal static string TypeArgumentBelowMin;
    internal static string TypeArgumentExceedsMax;
    internal static string TypeArgumentIsNotValid;
    internal static string TypeKindMismatch;
    internal static string TypeMustBeInheritableType;
    internal static string TypeMustBeEntityType;
    internal static string TypeMustBeNominalType;
    internal static string TypeNameNotFound;
    internal static string GroupVarNotFoundInScope;
    internal static string InvalidArgumentTypeForAggregateFunction;
    internal static string InvalidSavePoint;
    internal static string InvalidScopeIndex;
    internal static string LiteralTypeNotSupported;
    internal static string ParserFatalError;
    internal static string ParserInputError;
    internal static string StackOverflowInParser;
    internal static string UnknownAstCommandExpression;
    internal static string UnknownAstExpressionType;
    internal static string UnknownBuiltInAstExpressionType;
    internal static string UnknownExpressionResolutionClass;
    internal static string Cqt_General_UnsupportedExpression;
    internal static string Cqt_General_PolymorphicTypeRequired;
    internal static string Cqt_General_PolymorphicArgRequired;
    internal static string Cqt_General_MetadataNotReadOnly;
    internal static string Cqt_General_NoProviderBooleanType;
    internal static string Cqt_General_NoProviderIntegerType;
    internal static string Cqt_General_NoProviderStringType;
    internal static string Cqt_Metadata_EdmMemberIncorrectSpace;
    internal static string Cqt_Metadata_EntitySetEntityContainerNull;
    internal static string Cqt_Metadata_EntitySetIncorrectSpace;
    internal static string Cqt_Metadata_EntityTypeNullKeyMembersInvalid;
    internal static string Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid;
    internal static string Cqt_Metadata_FunctionReturnParameterNull;
    internal static string Cqt_Metadata_FunctionIncorrectSpace;
    internal static string Cqt_Metadata_FunctionParameterIncorrectSpace;
    internal static string Cqt_Metadata_TypeUsageIncorrectSpace;
    internal static string Cqt_Exceptions_InvalidCommandTree;
    internal static string Cqt_Util_CheckListEmptyInvalid;
    internal static string Cqt_Util_CheckListDuplicateName;
    internal static string Cqt_ExpressionLink_TypeMismatch;
    internal static string Cqt_ExpressionList_IncorrectElementCount;
    internal static string Cqt_Copier_EntityContainerNotFound;
    internal static string Cqt_Copier_EntitySetNotFound;
    internal static string Cqt_Copier_FunctionNotFound;
    internal static string Cqt_Copier_PropertyNotFound;
    internal static string Cqt_Copier_NavPropertyNotFound;
    internal static string Cqt_Copier_EndNotFound;
    internal static string Cqt_Copier_TypeNotFound;
    internal static string Cqt_CommandTree_InvalidDataSpace;
    internal static string Cqt_CommandTree_InvalidParameterName;
    internal static string Cqt_Validator_InvalidIncompatibleParameterReferences;
    internal static string Cqt_Validator_InvalidOtherWorkspaceMetadata;
    internal static string Cqt_Validator_InvalidIncorrectDataSpaceMetadata;
    internal static string Cqt_Factory_NewCollectionInvalidCommonType;
    internal static string NoSuchProperty;
    internal static string Cqt_Factory_NoSuchRelationEnd;
    internal static string Cqt_Factory_IncompatibleRelationEnds;
    internal static string Cqt_Factory_MethodResultTypeNotSupported;
    internal static string Cqt_Aggregate_InvalidFunction;
    internal static string Cqt_Binding_CollectionRequired;
    internal static string Cqt_GroupBinding_CollectionRequired;
    internal static string Cqt_Binary_CollectionsRequired;
    internal static string Cqt_Unary_CollectionRequired;
    internal static string Cqt_And_BooleanArgumentsRequired;
    internal static string Cqt_Apply_DuplicateVariableNames;
    internal static string Cqt_Arithmetic_NumericCommonType;
    internal static string Cqt_Arithmetic_InvalidUnsignedTypeForUnaryMinus;
    internal static string Cqt_Case_WhensMustEqualThens;
    internal static string Cqt_Case_InvalidResultType;
    internal static string Cqt_Cast_InvalidCast;
    internal static string Cqt_Comparison_ComparableRequired;
    internal static string Cqt_Constant_InvalidType;
    internal static string Cqt_Constant_InvalidValueForType;
    internal static string Cqt_Constant_InvalidConstantType;
    internal static string Cqt_Constant_ClrEnumTypeDoesNotMatchEdmEnumType;
    internal static string Cqt_Distinct_InvalidCollection;
    internal static string Cqt_DeRef_RefRequired;
    internal static string Cqt_Element_InvalidArgumentForUnwrapSingleProperty;
    internal static string Cqt_Function_VoidResultInvalid;
    internal static string Cqt_Function_NonComposableInExpression;
    internal static string Cqt_Function_CommandTextInExpression;
    internal static string Cqt_Function_CanonicalFunction_NotFound;
    internal static string Cqt_Function_CanonicalFunction_AmbiguousMatch;
    internal static string Cqt_GetEntityRef_EntityRequired;
    internal static string Cqt_GetRefKey_RefRequired;
    internal static string Cqt_GroupBy_AtLeastOneKeyOrAggregate;
    internal static string Cqt_GroupBy_KeyNotEqualityComparable;
    internal static string Cqt_GroupBy_AggregateColumnExistsAsGroupColumn;
    internal static string Cqt_GroupBy_MoreThanOneGroupAggregate;
    internal static string Cqt_CrossJoin_AtLeastTwoInputs;
    internal static string Cqt_CrossJoin_DuplicateVariableNames;
    internal static string Cqt_IsNull_CollectionNotAllowed;
    internal static string Cqt_IsNull_InvalidType;
    internal static string Cqt_InvalidTypeForSetOperation;
    internal static string Cqt_Join_DuplicateVariableNames;
    internal static string Cqt_Limit_ConstantOrParameterRefRequired;
    internal static string Cqt_Limit_IntegerRequired;
    internal static string Cqt_Limit_NonNegativeLimitRequired;
    internal static string Cqt_NewInstance_CollectionTypeRequired;
    internal static string Cqt_NewInstance_StructuralTypeRequired;
    internal static string Cqt_NewInstance_CannotInstantiateMemberlessType;
    internal static string Cqt_NewInstance_CannotInstantiateAbstractType;
    internal static string Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid;
    internal static string Cqt_Not_BooleanArgumentRequired;
    internal static string Cqt_Or_BooleanArgumentsRequired;
    internal static string Cqt_In_SameResultTypeRequired;
    internal static string Cqt_Property_InstanceRequiredForInstance;
    internal static string Cqt_Ref_PolymorphicArgRequired;
    internal static string Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship;
    internal static string Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne;
    internal static string Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd;
    internal static string Cqt_RelatedEntityRef_TargetEntityNotRef;
    internal static string Cqt_RelatedEntityRef_TargetEntityNotCompatible;
    internal static string Cqt_RelNav_NoCompositions;
    internal static string Cqt_RelNav_WrongSourceType;
    internal static string Cqt_Skip_ConstantOrParameterRefRequired;
    internal static string Cqt_Skip_IntegerRequired;
    internal static string Cqt_Skip_NonNegativeCountRequired;
    internal static string Cqt_Sort_NonStringCollationInvalid;
    internal static string Cqt_Sort_OrderComparable;
    internal static string Cqt_UDF_FunctionDefinitionGenerationFailed;
    internal static string Cqt_UDF_FunctionDefinitionWithCircularReference;
    internal static string Cqt_UDF_FunctionDefinitionResultTypeMismatch;
    internal static string Cqt_UDF_FunctionHasNoDefinition;
    internal static string Cqt_Validator_VarRefInvalid;
    internal static string Cqt_Validator_VarRefTypeMismatch;
    internal static string Iqt_General_UnsupportedOp;
    internal static string Iqt_CTGen_UnexpectedAggregate;
    internal static string Iqt_CTGen_UnexpectedVarDefList;
    internal static string Iqt_CTGen_UnexpectedVarDef;
    internal static string ADP_MustUseSequentialAccess;
    internal static string ADP_ProviderDoesNotSupportCommandTrees;
    internal static string ADP_ClosedDataReaderError;
    internal static string ADP_DataReaderClosed;
    internal static string ADP_ImplicitlyClosedDataReaderError;
    internal static string ADP_NoData;
    internal static string ADP_GetSchemaTableIsNotSupported;
    internal static string ADP_InvalidDataReaderFieldCountForScalarType;
    internal static string ADP_InvalidDataReaderMissingColumnForType;
    internal static string ADP_InvalidDataReaderMissingDiscriminatorColumn;
    internal static string ADP_InvalidDataReaderUnableToDetermineType;
    internal static string ADP_InvalidDataReaderUnableToMaterializeNonScalarType;
    internal static string ADP_KeysRequiredForJoinOverNest;
    internal static string ADP_KeysRequiredForNesting;
    internal static string ADP_NestingNotSupported;
    internal static string ADP_NoQueryMappingView;
    internal static string ADP_InternalProviderError;
    internal static string ADP_InvalidEnumerationValue;
    internal static string ADP_InvalidBufferSizeOrIndex;
    internal static string ADP_InvalidDataLength;
    internal static string ADP_InvalidDataType;
    internal static string ADP_InvalidDestinationBufferIndex;
    internal static string ADP_InvalidSourceBufferIndex;
    internal static string ADP_NonSequentialChunkAccess;
    internal static string ADP_NonSequentialColumnAccess;
    internal static string ADP_UnknownDataTypeCode;
    internal static string DataCategory_Data;
    internal static string DbParameter_Direction;
    internal static string DbParameter_Size;
    internal static string DataCategory_Update;
    internal static string DbParameter_SourceColumn;
    internal static string DbParameter_SourceVersion;
    internal static string ADP_CollectionParameterElementIsNull;
    internal static string ADP_CollectionParameterElementIsNullOrEmpty;
    internal static string NonReturnParameterInReturnParameterCollection;
    internal static string ReturnParameterInInputParameterCollection;
    internal static string NullEntitySetsForFunctionReturningMultipleResultSets;
    internal static string NumberOfEntitySetsDoesNotMatchNumberOfReturnParameters;
    internal static string EntityParameterCollectionInvalidParameterName;
    internal static string EntityParameterCollectionInvalidIndex;
    internal static string InvalidEntityParameterType;
    internal static string EntityParameterContainedByAnotherCollection;
    internal static string EntityParameterCollectionRemoveInvalidObject;
    internal static string ADP_ConnectionStringSyntax;
    internal static string ExpandingDataDirectoryFailed;
    internal static string ADP_InvalidDataDirectory;
    internal static string ADP_InvalidMultipartNameDelimiterUsage;
    internal static string ADP_InvalidSizeValue;
    internal static string ADP_KeywordNotSupported;
    internal static string ConstantFacetSpecifiedInSchema;
    internal static string DuplicateAnnotation;
    internal static string EmptyFile;
    internal static string EmptySchemaTextReader;
    internal static string EmptyName;
    internal static string InvalidName;
    internal static string MissingName;
    internal static string UnexpectedXmlAttribute;
    internal static string UnexpectedXmlElement;
    internal static string TextNotAllowed;
    internal static string UnexpectedXmlNodeType;
    internal static string MalformedXml;
    internal static string ValueNotUnderstood;
    internal static string EntityContainerAlreadyExists;
    internal static string TypeNameAlreadyDefinedDuplicate;
    internal static string PropertyNameAlreadyDefinedDuplicate;
    internal static string DuplicateMemberNameInExtendedEntityContainer;
    internal static string DuplicateEntityContainerMemberName;
    internal static string PropertyTypeAlreadyDefined;
    internal static string InvalidSize;
    internal static string InvalidSystemReferenceId;
    internal static string BadNamespaceOrAlias;
    internal static string MissingNamespaceAttribute;
    internal static string InvalidBaseTypeForStructuredType;
    internal static string InvalidPropertyType;
    internal static string InvalidBaseTypeForItemType;
    internal static string InvalidBaseTypeForNestedType;
    internal static string DefaultNotAllowed;
    internal static string FacetNotAllowed;
    internal static string RequiredFacetMissing;
    internal static string InvalidDefaultBinaryWithNoMaxLength;
    internal static string InvalidDefaultIntegral;
    internal static string InvalidDefaultDateTime;
    internal static string InvalidDefaultTime;
    internal static string InvalidDefaultDateTimeOffset;
    internal static string InvalidDefaultDecimal;
    internal static string InvalidDefaultFloatingPoint;
    internal static string InvalidDefaultGuid;
    internal static string InvalidDefaultBoolean;
    internal static string DuplicateMemberName;
    internal static string GeneratorErrorSeverityError;
    internal static string GeneratorErrorSeverityWarning;
    internal static string GeneratorErrorSeverityUnknown;
    internal static string SourceUriUnknown;
    internal static string BadPrecisionAndScale;
    internal static string InvalidNamespaceInUsing;
    internal static string BadNavigationPropertyRelationshipNotRelationship;
    internal static string BadNavigationPropertyRolesCannotBeTheSame;
    internal static string BadNavigationPropertyUndefinedRole;
    internal static string BadNavigationPropertyBadFromRoleType;
    internal static string InvalidMemberNameMatchesTypeName;
    internal static string InvalidKeyKeyDefinedInBaseClass;
    internal static string InvalidKeyNullablePart;
    internal static string InvalidKeyNoProperty;
    internal static string KeyMissingOnEntityType;
    internal static string InvalidDocumentationBothTextAndStructure;
    internal static string ArgumentOutOfRangeExpectedPostiveNumber;
    internal static string ArgumentOutOfRange;
    internal static string UnacceptableUri;
    internal static string UnexpectedTypeInCollection;
    internal static string AllElementsMustBeInSchema;
    internal static string AliasNameIsAlreadyDefined;
    internal static string NeedNotUseSystemNamespaceInUsing;
    internal static string CannotUseSystemNamespaceAsAlias;
    internal static string EntitySetTypeHasNoKeys;
    internal static string TableAndSchemaAreMutuallyExclusiveWithDefiningQuery;
    internal static string UnexpectedRootElement;
    internal static string UnexpectedRootElementNoNamespace;
    internal static string ParameterNameAlreadyDefinedDuplicate;
    internal static string FunctionWithNonPrimitiveTypeNotSupported;
    internal static string FunctionWithNonEdmPrimitiveTypeNotSupported;
    internal static string FunctionImportWithUnsupportedReturnTypeV1;
    internal static string FunctionImportWithUnsupportedReturnTypeV1_1;
    internal static string FunctionImportWithUnsupportedReturnTypeV2;
    internal static string FunctionImportUnknownEntitySet;
    internal static string FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet;
    internal static string FunctionImportEntityTypeDoesNotMatchEntitySet;
    internal static string FunctionImportSpecifiesEntitySetButNotEntityType;
    internal static string FunctionImportEntitySetAndEntitySetPathDeclared;
    internal static string FunctionImportComposableAndSideEffectingNotAllowed;
    internal static string FunctionImportCollectionAndRefParametersNotAllowed;
    internal static string FunctionImportNonNullableParametersNotAllowed;
    internal static string TVFReturnTypeRowHasNonScalarProperty;
    internal static string DuplicateEntitySetTable;
    internal static string ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    internal static string SimilarRelationshipEnd;
    internal static string InvalidRelationshipEndMultiplicity;
    internal static string EndNameAlreadyDefinedDuplicate;
    internal static string InvalidRelationshipEndType;
    internal static string BadParameterDirection;
    internal static string BadParameterDirectionForComposableFunctions;
    internal static string InvalidOperationMultipleEndsInAssociation;
    internal static string InvalidAction;
    internal static string DuplicationOperation;
    internal static string NotInNamespaceAlias;
    internal static string NotNamespaceQualified;
    internal static string NotInNamespaceNoAlias;
    internal static string InvalidValueForParameterTypeSemanticsAttribute;
    internal static string DuplicatePropertyNameSpecifiedInEntityKey;
    internal static string InvalidEntitySetType;
    internal static string InvalidRelationshipSetType;
    internal static string InvalidEntityContainerNameInExtends;
    internal static string InvalidNamespaceOrAliasSpecified;
    internal static string PrecisionOutOfRange;
    internal static string ScaleOutOfRange;
    internal static string InvalidEntitySetNameReference;
    internal static string InvalidEntityEndName;
    internal static string DuplicateEndName;
    internal static string AmbiguousEntityContainerEnd;
    internal static string MissingEntityContainerEnd;
    internal static string InvalidEndEntitySetTypeMismatch;
    internal static string InferRelationshipEndFailedNoEntitySetMatch;
    internal static string InferRelationshipEndAmbiguous;
    internal static string InferRelationshipEndGivesAlreadyDefinedEnd;
    internal static string TooManyAssociationEnds;
    internal static string InvalidEndRoleInRelationshipConstraint;
    internal static string InvalidFromPropertyInRelationshipConstraint;
    internal static string InvalidToPropertyInRelationshipConstraint;
    internal static string InvalidPropertyInRelationshipConstraint;
    internal static string TypeMismatchRelationshipConstraint;
    internal static string InvalidMultiplicityFromRoleUpperBoundMustBeOne;
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV1;
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV2;
    internal static string InvalidMultiplicityFromRoleToPropertyNullableV1;
    internal static string InvalidMultiplicityToRoleLowerBoundMustBeZero;
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeOne;
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeMany;
    internal static string MismatchNumberOfPropertiesinRelationshipConstraint;
    internal static string MissingConstraintOnRelationshipType;
    internal static string SameRoleReferredInReferentialConstraint;
    internal static string InvalidPrimitiveTypeKind;
    internal static string EntityKeyMustBeScalar;
    internal static string EntityKeyTypeCurrentlyNotSupportedInSSDL;
    internal static string EntityKeyTypeCurrentlyNotSupported;
    internal static string MissingFacetDescription;
    internal static string EndWithManyMultiplicityCannotHaveOperationsSpecified;
    internal static string EndWithoutMultiplicity;
    internal static string EntityContainerCannotExtendItself;
    internal static string ComposableFunctionOrFunctionImportMustDeclareReturnType;
    internal static string NonComposableFunctionCannotBeMappedAsComposable;
    internal static string ComposableFunctionImportsReturningEntitiesNotSupported;
    internal static string StructuralTypeMappingsMustNotBeNullForFunctionImportsReturningNonScalarValues;
    internal static string InvalidReturnTypeForComposableFunction;
    internal static string NonComposableFunctionMustNotDeclareReturnType;
    internal static string CommandTextFunctionsNotComposable;
    internal static string CommandTextFunctionsCannotDeclareStoreFunctionName;
    internal static string NonComposableFunctionHasDisallowedAttribute;
    internal static string EmptyDefiningQuery;
    internal static string EmptyCommandText;
    internal static string AmbiguousFunctionOverload;
    internal static string AmbiguousFunctionAndType;
    internal static string CycleInTypeHierarchy;
    internal static string IncorrectProviderManifest;
    internal static string ComplexTypeAsReturnTypeAndDefinedEntitySet;
    internal static string ComplexTypeAsReturnTypeAndNestedComplexProperty;
    internal static string FacetsOnNonScalarType;
    internal static string FacetDeclarationRequiresTypeAttribute;
    internal static string TypeMustBeDeclared;
    internal static string RowTypeWithoutProperty;
    internal static string TypeDeclaredAsAttributeAndElement;
    internal static string ReferenceToNonEntityType;
    internal static string NoCodeGenNamespaceInStructuralAnnotation;
    internal static string CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    internal static string InvalidEnumUnderlyingType;
    internal static string DuplicateEnumMember;
    internal static string CalculatedEnumValueOutOfRange;
    internal static string EnumMemberValueOutOfItsUnderylingTypeRange;
    internal static string SpatialWithUseStrongSpatialTypesFalse;
    internal static string ObjectQuery_QueryBuilder_InvalidResultType;
    internal static string ObjectQuery_QueryBuilder_InvalidQueryArgument;
    internal static string ObjectQuery_QueryBuilder_NotSupportedLinqSource;
    internal static string ObjectQuery_InvalidConnection;
    internal static string ObjectQuery_InvalidQueryName;
    internal static string ObjectQuery_UnableToMapResultType;
    internal static string ObjectQuery_UnableToMaterializeArray;
    internal static string ObjectQuery_UnableToMaterializeArbitaryProjectionType;
    internal static string ObjectParameter_InvalidParameterName;
    internal static string ObjectParameter_InvalidParameterType;
    internal static string ObjectParameterCollection_ParameterNameNotFound;
    internal static string ObjectParameterCollection_ParameterAlreadyExists;
    internal static string ObjectParameterCollection_DuplicateParameterName;
    internal static string ObjectParameterCollection_ParametersLocked;
    internal static string ProviderReturnedNullForGetDbInformation;
    internal static string ProviderReturnedNullForCreateCommandDefinition;
    internal static string ProviderDidNotReturnAProviderManifest;
    internal static string ProviderDidNotReturnAProviderManifestToken;
    internal static string ProviderDidNotReturnSpatialServices;
    internal static string SpatialProviderNotUsable;
    internal static string ProviderRequiresStoreCommandTree;
    internal static string ProviderShouldOverrideEscapeLikeArgument;
    internal static string ProviderEscapeLikeArgumentReturnedNull;
    internal static string ProviderDidNotCreateACommandDefinition;
    internal static string ProviderDoesNotSupportCreateDatabaseScript;
    internal static string ProviderDoesNotSupportCreateDatabase;
    internal static string ProviderDoesNotSupportDatabaseExists;
    internal static string ProviderDoesNotSupportDeleteDatabase;
    internal static string Spatial_GeographyValueNotCompatibleWithSpatialServices;
    internal static string Spatial_GeometryValueNotCompatibleWithSpatialServices;
    internal static string Spatial_ProviderValueNotCompatibleWithSpatialServices;
    internal static string Spatial_WellKnownValueSerializationPropertyNotDirectlySettable;
    internal static string EntityConnectionString_Name;
    internal static string EntityConnectionString_Provider;
    internal static string EntityConnectionString_Metadata;
    internal static string EntityConnectionString_ProviderConnectionString;
    internal static string EntityDataCategory_Context;
    internal static string EntityDataCategory_NamedConnectionString;
    internal static string EntityDataCategory_Source;
    internal static string ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection;
    internal static string ObjectQuery_Span_NoNavProp;
    internal static string ObjectQuery_Span_SpanPathSyntaxError;
    internal static string EntityProxyTypeInfo_ProxyHasWrongWrapper;
    internal static string EntityProxyTypeInfo_CannotSetEntityCollectionProperty;
    internal static string EntityProxyTypeInfo_ProxyMetadataIsUnavailable;
    internal static string EntityProxyTypeInfo_DuplicateOSpaceType;
    internal static string InvalidEdmMemberInstance;
    internal static string EF6Providers_NoProviderFound;
    internal static string EF6Providers_ProviderTypeMissing;
    internal static string EF6Providers_InstanceMissing;
    internal static string EF6Providers_NotDbProviderServices;
    internal static string ProviderInvariantRepeatedInConfig;
    internal static string DbDependencyResolver_NoProviderInvariantName;
    internal static string DbDependencyResolver_InvalidKey;
    internal static string DefaultConfigurationUsedBeforeSet;
    internal static string AddHandlerToInUseConfiguration;
    internal static string ConfigurationSetTwice;
    internal static string ConfigurationNotDiscovered;
    internal static string SetConfigurationNotDiscovered;
    internal static string MultipleConfigsInAssembly;
    internal static string CreateInstance_BadMigrationsConfigurationType;
    internal static string CreateInstance_BadSqlGeneratorType;
    internal static string CreateInstance_BadDbConfigurationType;
    internal static string DbConfigurationTypeNotFound;
    internal static string DbConfigurationTypeInAttributeNotFound;
    internal static string CreateInstance_NoParameterlessConstructor;
    internal static string CreateInstance_AbstractType;
    internal static string CreateInstance_GenericType;
    internal static string ConfigurationLocked;
    internal static string EnableMigrationsForContext;
    internal static string EnableMigrations_MultipleContexts;
    internal static string EnableMigrations_MultipleContextsWithName;
    internal static string EnableMigrations_NoContext;
    internal static string EnableMigrations_NoContextWithName;
    internal static string MoreThanOneElement;
    internal static string IQueryable_Not_Async;
    internal static string IQueryable_Provider_Not_Async;
    internal static string EmptySequence;
    internal static string UnableToMoveHistoryTableWithAuto;
    internal static string NoMatch;
    internal static string MoreThanOneMatch;
    internal static string CreateConfigurationType_NoParameterlessConstructor;
    internal static string CollectionEmpty;
    internal static string DbMigrationsConfiguration_ContextType;
    internal static string ContextFactoryContextType;
    internal static string DbMigrationsConfiguration_RootedPath;
    internal static string ModelBuilder_PropertyFilterTypeMustBePrimitive;
    internal static string LightweightEntityConfiguration_NonScalarProperty;
    internal static string MigrationsPendingException;
    internal static string ExecutionStrategy_ExistingTransaction;
    internal static string ExecutionStrategy_MinimumMustBeLessThanMaximum;
    internal static string ExecutionStrategy_NegativeDelay;
    internal static string ExecutionStrategy_RetryLimitExceeded;
    internal static string BaseTypeNotMappedToFunctions;
    internal static string InvalidResourceName;
    internal static string ModificationFunctionParameterNotFound;
    internal static string EntityClient_CannotOpenBrokenConnection;
    internal static string ModificationFunctionParameterNotFoundOriginal;
    internal static string ResultBindingNotFound;
    internal static string ConflictingFunctionsMapping;
    internal static string DbContext_InvalidTransactionForConnection;
    internal static string DbContext_InvalidTransactionNoConnection;
    internal static string DbContext_TransactionAlreadyStarted;
    internal static string DbContext_TransactionAlreadyEnlistedInUserTransaction;
    internal static string ExecutionStrategy_StreamingNotSupported;
    internal static string EdmProperty_InvalidPropertyType;
    internal static string ConcurrentMethodInvocation;
    internal static string AssociationSet_EndEntityTypeMismatch;
    internal static string VisitDbInExpressionNotImplemented;
    internal static string InvalidColumnBuilderArgument;
    internal static string StorageScalarPropertyMapping_OnlyScalarPropertiesAllowed;
    internal static string StorageComplexPropertyMapping_OnlyComplexPropertyAllowed;
    internal static string MetadataItemErrorsFoundDuringGeneration;
    internal static string AutomaticStaleFunctions;
    internal static string ScaffoldSprocInDownNotSupported;
    internal static string LightweightEntityConfiguration_ConfigurationConflict_ComplexType;
    internal static string LightweightEntityConfiguration_ConfigurationConflict_IgnoreType;
    internal static string AttemptToAddEdmMemberFromWrongDataSpace;
    internal static string LightweightEntityConfiguration_InvalidNavigationProperty;
    internal static string LightweightEntityConfiguration_InvalidInverseNavigationProperty;
    internal static string LightweightEntityConfiguration_MismatchedInverseNavigationProperty;
    internal static string DuplicateParameterName;
    internal static string CommandLogFailed;
    internal static string CommandLogCanceled;
    internal static string CommandLogComplete;
    internal static string CommandLogAsync;
    internal static string CommandLogNonAsync;
    internal static string SuppressionAfterExecution;
    internal static string BadContextTypeForDiscovery;
    internal static string ErrorGeneratingCommandTree;
    internal static string LightweightNavigationPropertyConfiguration_IncompatibleMultiplicity;
    internal static string LightweightNavigationPropertyConfiguration_InvalidMultiplicity;
    internal static string LightweightPrimitivePropertyConfiguration_NonNullableProperty;
    internal static string TestDoubleNotImplemented;
    internal static string TestDoublesCannotBeConverted;
    internal static string InvalidNavigationPropertyComplexType;
    internal static string ConventionsConfiguration_InvalidConventionType;
    internal static string ConventionsConfiguration_ConventionTypeMissmatch;
    internal static string LightweightPrimitivePropertyConfiguration_DateTimeScale;
    internal static string LightweightPrimitivePropertyConfiguration_DecimalNoScale;
    internal static string LightweightPrimitivePropertyConfiguration_HasPrecisionNonDateTime;
    internal static string LightweightPrimitivePropertyConfiguration_HasPrecisionNonDecimal;
    internal static string LightweightPrimitivePropertyConfiguration_IsRowVersionNonBinary;
    internal static string LightweightPrimitivePropertyConfiguration_IsUnicodeNonString;
    internal static string LightweightPrimitivePropertyConfiguration_NonLength;
    internal static string UnableToUpgradeHistoryWhenCustomFactory;
    internal static string CommitFailed;
    internal static string InterceptorTypeNotFound;
    internal static string InterceptorTypeNotInterceptor;
    internal static string ViewGenContainersNotFound;
    internal static string HashCalcContainersNotFound;
    internal static string ViewGenMultipleContainers;
    internal static string HashCalcMultipleContainers;
    internal static string BadConnectionWrapping;
    internal static string ConnectionClosedLog;
    internal static string ConnectionCloseErrorLog;
    internal static string ConnectionOpenedLog;
    internal static string ConnectionOpenErrorLog;
    internal static string ConnectionOpenedLogAsync;
    internal static string ConnectionOpenErrorLogAsync;
    internal static string TransactionStartedLog;
    internal static string TransactionStartErrorLog;
    internal static string TransactionCommittedLog;
    internal static string TransactionCommitErrorLog;
    internal static string TransactionRolledBackLog;
    internal static string TransactionRollbackErrorLog;
    internal static string ConnectionOpenCanceledLog;
    internal static string TransactionHandler_AlreadyInitialized;
    internal static string ConnectionDisposedLog;
    internal static string TransactionDisposedLog;
    internal static string UnableToLoadEmbeddedResource;
    internal static string CannotSetBaseTypeCyclicInheritance;
    internal static string CannotDefineKeysOnBothBaseAndDerivedTypes;
    internal static string StoreTypeNotFound;
    internal static string ProviderDoesNotSupportEscapingLikeArgument;
    internal static string IndexPropertyNotFound;
    internal static string ConflictingIndexAttributeMatches;
    private static EntityRes loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static EntityRes GetLoader();
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[GeneratedCodeAttribute("Resources.tt", "1.0.0.0")]
internal static class System.Data.Entity.Resources.Error : object {
    internal static Exception AutomaticDataLoss();
    internal static Exception MetadataOutOfDate();
    internal static Exception MigrationNotFound(object p0);
    internal static Exception PartialFkOperation(object p0, object p1);
    internal static Exception AutoNotValidTarget(object p0);
    internal static Exception AutoNotValidForScriptWindows(object p0);
    internal static Exception ContextNotConstructible(object p0);
    internal static Exception AmbiguousMigrationName(object p0);
    internal static Exception AutomaticDisabledException();
    internal static Exception DownScriptWindowsNotSupported();
    internal static Exception AssemblyMigrator_NoConfigurationWithName(object p0, object p1);
    internal static Exception AssemblyMigrator_MultipleConfigurationsWithName(object p0, object p1);
    internal static Exception AssemblyMigrator_NoConfiguration(object p0);
    internal static Exception AssemblyMigrator_MultipleConfigurations(object p0);
    internal static Exception MigrationsNamespaceNotUnderRootNamespace(object p0, object p1);
    internal static Exception UnableToDispatchAddOrUpdate(object p0);
    internal static Exception NoSqlGeneratorForProvider(object p0);
    internal static Exception EntityTypeConfigurationMismatch(object p0);
    internal static Exception ComplexTypeConfigurationMismatch(object p0);
    internal static Exception KeyPropertyNotFound(object p0, object p1);
    internal static Exception ForeignKeyPropertyNotFound(object p0, object p1);
    internal static Exception PropertyNotFound(object p0, object p1);
    internal static Exception NavigationPropertyNotFound(object p0, object p1);
    internal static Exception InvalidPropertyExpression(object p0);
    internal static Exception InvalidComplexPropertyExpression(object p0);
    internal static Exception InvalidPropertiesExpression(object p0);
    internal static Exception InvalidComplexPropertiesExpression(object p0);
    internal static Exception DuplicateStructuralTypeConfiguration(object p0);
    internal static Exception ConflictingPropertyConfiguration(object p0, object p1, object p2);
    internal static Exception ConflictingTypeAnnotation(object p0, object p1, object p2, object p3);
    internal static Exception ConflictingColumnConfiguration(object p0, object p1, object p2);
    internal static Exception CodeFirstInvalidComplexType(object p0);
    internal static Exception InvalidEntityType(object p0);
    internal static Exception NavigationInverseItself(object p0, object p1);
    internal static Exception ConflictingConstraint(object p0, object p1);
    internal static Exception ConflictingInferredColumnType(object p0, object p1, object p2);
    internal static Exception ConflictingMapping(object p0, object p1);
    internal static Exception ConflictingCascadeDeleteOperation(object p0, object p1);
    internal static Exception ConflictingMultiplicities(object p0, object p1);
    internal static Exception MaxLengthAttributeConvention_InvalidMaxLength(object p0, object p1);
    internal static Exception StringLengthAttributeConvention_InvalidMaximumLength(object p0, object p1);
    internal static Exception ModelGeneration_UnableToDetermineKeyOrder(object p0);
    internal static Exception ForeignKeyAttributeConvention_EmptyKey(object p0, object p1);
    internal static Exception ForeignKeyAttributeConvention_InvalidKey(object p0, object p1, object p2, object p3);
    internal static Exception ForeignKeyAttributeConvention_InvalidNavigationProperty(object p0, object p1, object p2);
    internal static Exception ForeignKeyAttributeConvention_OrderRequired(object p0);
    internal static Exception InversePropertyAttributeConvention_PropertyNotFound(object p0, object p1, object p2, object p3);
    internal static Exception InversePropertyAttributeConvention_SelfInverseDetected(object p0, object p1);
    internal static Exception KeyRegisteredOnDerivedType(object p0, object p1);
    internal static Exception InvalidTableMapping(object p0, object p1);
    internal static Exception InvalidTableMapping_NoTableName(object p0);
    internal static Exception InvalidChainedMappingSyntax(object p0);
    internal static Exception InvalidNotNullCondition(object p0, object p1);
    internal static Exception InvalidDiscriminatorType(object p0);
    internal static Exception ConventionNotFound(object p0, object p1);
    internal static Exception InvalidEntitySplittingProperties(object p0);
    internal static Exception InvalidDatabaseName(object p0);
    internal static Exception EntityMappingConfiguration_DuplicateMapInheritedProperties(object p0);
    internal static Exception EntityMappingConfiguration_DuplicateMappedProperties(object p0);
    internal static Exception EntityMappingConfiguration_DuplicateMappedProperty(object p0, object p1);
    internal static Exception EntityMappingConfiguration_CannotMapIgnoredProperty(object p0, object p1);
    internal static Exception EntityMappingConfiguration_InvalidTableSharing(object p0, object p1, object p2);
    internal static Exception EntityMappingConfiguration_TPCWithIAsOnNonLeafType(object p0, object p1, object p2);
    internal static Exception CannotIgnoreMappedBaseProperty(object p0, object p1, object p2);
    internal static Exception ModelBuilder_KeyPropertiesMustBePrimitive(object p0, object p1);
    internal static Exception TableNotFound(object p0);
    internal static Exception IncorrectColumnCount(object p0);
    internal static Exception CircularComplexTypeHierarchy();
    internal static Exception UnableToDeterminePrincipal(object p0, object p1);
    internal static Exception UnmappedAbstractType(object p0);
    internal static Exception UnsupportedHybridInheritanceMapping(object p0);
    internal static Exception OrphanedConfiguredTableDetected(object p0);
    internal static Exception DuplicateConfiguredColumnOrder(object p0);
    internal static Exception UnsupportedUseOfV3Type(object p0, object p1);
    internal static Exception MultiplePropertiesMatchedAsKeys(object p0, object p1);
    internal static Exception DbPropertyEntry_CannotGetCurrentValue(object p0, object p1);
    internal static Exception DbPropertyEntry_CannotSetCurrentValue(object p0, object p1);
    internal static Exception DbPropertyEntry_NotSupportedForDetached(object p0, object p1, object p2);
    internal static Exception DbPropertyEntry_SettingEntityRefNotSupported(object p0, object p1, object p2);
    internal static Exception DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(object p0, object p1, object p2);
    internal static Exception DbEntityEntry_NotSupportedForDetached(object p0, object p1);
    internal static Exception DbSet_BadTypeForAddAttachRemove(object p0, object p1, object p2);
    internal static Exception DbSet_BadTypeForCreate(object p0, object p1);
    internal static Exception DbEntity_BadTypeForCast(object p0, object p1, object p2);
    internal static Exception DbMember_BadTypeForCast(object p0, object p1, object p2, object p3, object p4);
    internal static Exception DbEntityEntry_UsedReferenceForCollectionProp(object p0, object p1);
    internal static Exception DbEntityEntry_UsedCollectionForReferenceProp(object p0, object p1);
    internal static Exception DbEntityEntry_NotANavigationProperty(object p0, object p1);
    internal static Exception DbEntityEntry_NotAScalarProperty(object p0, object p1);
    internal static Exception DbEntityEntry_NotAComplexProperty(object p0, object p1);
    internal static Exception DbEntityEntry_NotAProperty(object p0, object p1);
    internal static Exception DbEntityEntry_DottedPartNotComplex(object p0, object p1, object p2);
    internal static Exception DbEntityEntry_DottedPathMustBeProperty(object p0);
    internal static Exception DbEntityEntry_WrongGenericForNavProp(object p0, object p1, object p2, object p3);
    internal static Exception DbEntityEntry_WrongGenericForCollectionNavProp(object p0, object p1, object p2, object p3);
    internal static Exception DbEntityEntry_WrongGenericForProp(object p0, object p1, object p2, object p3);
    internal static Exception DbPropertyValues_CannotGetValuesForState(object p0, object p1);
    internal static Exception DbPropertyValues_CannotSetNullValue(object p0, object p1, object p2);
    internal static Exception DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(object p0, object p1);
    internal static Exception DbPropertyValues_WrongTypeForAssignment(object p0, object p1, object p2, object p3);
    internal static Exception DbPropertyValues_PropertyValueNamesAreReadonly();
    internal static Exception DbPropertyValues_PropertyDoesNotExist(object p0, object p1);
    internal static Exception DbPropertyValues_AttemptToSetValuesFromWrongObject(object p0, object p1);
    internal static Exception DbPropertyValues_AttemptToSetValuesFromWrongType(object p0, object p1);
    internal static Exception DbPropertyValues_AttemptToSetNonValuesOnComplexProperty();
    internal static Exception DbPropertyValues_ComplexObjectCannotBeNull(object p0, object p1);
    internal static Exception DbPropertyValues_NestedPropertyValuesNull(object p0, object p1);
    internal static Exception DbPropertyValues_CannotSetPropertyOnNullCurrentValue(object p0, object p1);
    internal static Exception DbPropertyValues_CannotSetPropertyOnNullOriginalValue(object p0, object p1);
    internal static Exception DatabaseInitializationStrategy_ModelMismatch(object p0);
    internal static Exception Database_DatabaseAlreadyExists(object p0);
    internal static Exception Database_NonCodeFirstCompatibilityCheck();
    internal static Exception Database_NoDatabaseMetadata();
    internal static Exception ContextConfiguredMultipleTimes(object p0);
    internal static Exception DbContext_ContextUsedInModelCreating();
    internal static Exception DbContext_MESTNotSupported();
    internal static Exception DbContext_Disposed();
    internal static Exception DbContext_ProviderReturnedNullConnection();
    internal static Exception DbContext_ProviderNameMissing(object p0);
    internal static Exception DbContext_ConnectionFactoryReturnedNullConnection();
    internal static Exception DbSet_WrongEntityTypeFound(object p0, object p1);
    internal static Exception DbSet_MultipleAddedEntitiesFound();
    internal static Exception DbSet_DbSetUsedWithComplexType(object p0);
    internal static Exception DbSet_PocoAndNonPocoMixedInSameAssembly(object p0);
    internal static Exception DbSet_EntityTypeNotInModel(object p0);
    internal static Exception DbQuery_BindingToDbQueryNotSupported();
    internal static Exception DbContext_ConnectionStringNotFound(object p0);
    internal static Exception DbContext_ConnectionHasModel();
    internal static Exception DbCollectionEntry_CannotSetCollectionProp(object p0, object p1);
    internal static Exception CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported();
    internal static Exception Mapping_MESTNotSupported(object p0, object p1, object p2);
    internal static Exception DbModelBuilder_MissingRequiredCtor(object p0);
    internal static Exception SqlConnectionFactory_MdfNotSupported(object p0);
    internal static Exception EdmxWriter_EdmxFromObjectContextNotSupported();
    internal static Exception EdmxWriter_EdmxFromModelFirstNotSupported();
    internal static Exception EdmxWriter_EdmxFromRawCompiledModelNotSupported();
    internal static Exception DbContextServices_MissingDefaultCtor(object p0);
    internal static Exception CannotCallGenericSetWithProxyType();
    internal static Exception MaxLengthAttribute_InvalidMaxLength();
    internal static Exception MinLengthAttribute_InvalidMinLength();
    internal static Exception DbConnectionInfo_ConnectionStringNotFound(object p0);
    internal static Exception EagerInternalContext_CannotSetConnectionInfo();
    internal static Exception LazyInternalContext_CannotReplaceEfConnectionWithDbConnection();
    internal static Exception LazyInternalContext_CannotReplaceDbConnectionWithEfConnection();
    internal static Exception EntityKey_UnexpectedNull();
    internal static Exception EntityClient_ConnectionStringNeededBeforeOperation();
    internal static Exception EntityClient_ConnectionNotOpen();
    internal static Exception EntityClient_NoConnectionForAdapter();
    internal static Exception EntityClient_ClosedConnectionForUpdate();
    internal static Exception EntityClient_NoStoreConnectionForUpdate();
    internal static Exception Mapping_Default_OCMapping_Member_Type_Mismatch(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7);
    internal static Exception ObjectStateManager_ConflictingChangesOfRelationshipDetected(object p0, object p1);
    internal static Exception RelatedEnd_InvalidOwnerStateForAttach();
    internal static Exception RelatedEnd_InvalidNthElementNullForAttach(object p0);
    internal static Exception RelatedEnd_InvalidNthElementContextForAttach(object p0);
    internal static Exception RelatedEnd_InvalidNthElementStateForAttach(object p0);
    internal static Exception RelatedEnd_InvalidEntityContextForAttach();
    internal static Exception RelatedEnd_InvalidEntityStateForAttach();
    internal static Exception RelatedEnd_UnableToAddRelationshipWithDeletedEntity();
    internal static Exception Collections_NoRelationshipSetMatched(object p0);
    internal static Exception Collections_InvalidEntityStateSource();
    internal static Exception Collections_InvalidEntityStateLoad(object p0);
    internal static Exception EntityReference_LessThanExpectedRelatedEntitiesFound();
    internal static Exception EntityReference_MoreThanExpectedRelatedEntitiesFound();
    internal static Exception EntityReference_CannotSetSpecialKeys();
    internal static Exception RelatedEnd_RelatedEndNotFound();
    internal static Exception RelatedEnd_RelatedEndNotAttachedToContext(object p0);
    internal static Exception RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd();
    internal static Exception RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd();
    internal static Exception RelatedEnd_CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities(object p0);
    internal static Exception RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts();
    internal static Exception RelatedEnd_MismatchedMergeOptionOnLoad(object p0);
    internal static Exception RelatedEnd_EntitySetIsNotValidForRelationship(object p0, object p1, object p2, object p3, object p4);
    internal static Exception RelatedEnd_OwnerIsNull();
    internal static Exception RelationshipManager_NavigationPropertyNotFound(object p0);
    internal static Exception ADP_ClosedDataReaderError();
    internal static Exception ADP_DataReaderClosed(object p0);
    internal static Exception ADP_ImplicitlyClosedDataReaderError();
    internal static Exception ADP_NoData();
    internal static Exception InvalidEdmMemberInstance();
    internal static Exception EnableMigrations_MultipleContextsWithName(object p0, object p1);
    internal static Exception EnableMigrations_NoContext(object p0);
    internal static Exception EnableMigrations_NoContextWithName(object p0, object p1);
    internal static Exception MoreThanOneElement();
    internal static Exception IQueryable_Not_Async(object p0);
    internal static Exception IQueryable_Provider_Not_Async();
    internal static Exception EmptySequence();
    internal static Exception UnableToMoveHistoryTableWithAuto();
    internal static Exception NoMatch();
    internal static Exception MoreThanOneMatch();
    internal static Exception ModelBuilder_PropertyFilterTypeMustBePrimitive(object p0);
    internal static Exception MigrationsPendingException(object p0);
    internal static Exception BaseTypeNotMappedToFunctions(object p0, object p1);
    internal static Exception InvalidResourceName(object p0);
    internal static Exception ModificationFunctionParameterNotFound(object p0, object p1);
    internal static Exception EntityClient_CannotOpenBrokenConnection();
    internal static Exception ModificationFunctionParameterNotFoundOriginal(object p0, object p1);
    internal static Exception ResultBindingNotFound(object p0, object p1);
    internal static Exception ConflictingFunctionsMapping(object p0, object p1);
    internal static Exception AutomaticStaleFunctions(object p0);
    internal static Exception UnableToUpgradeHistoryWhenCustomFactory();
    internal static Exception StoreTypeNotFound(object p0, object p1);
    internal static Exception IndexPropertyNotFound(object p0, object p1);
    internal static Exception ConflictingIndexAttributeMatches(object p0, object p1);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
[GeneratedCodeAttribute("Resources.tt", "1.0.0.0")]
internal static class System.Data.Entity.Resources.Strings : object {
    internal static string AutomaticMigration { get; }
    internal static string BootstrapMigration { get; }
    internal static string InitialCreate { get; }
    internal static string AutomaticDataLoss { get; }
    internal static string LoggingSeedingDatabase { get; }
    internal static string LoggingNoExplicitMigrations { get; }
    internal static string LoggingExplicit { get; }
    internal static string UpgradingHistoryTable { get; }
    internal static string MetadataOutOfDate { get; }
    internal static string AutomaticDisabledException { get; }
    internal static string DownScriptWindowsNotSupported { get; }
    internal static string ValidationHeader { get; }
    internal static string CircularComplexTypeHierarchy { get; }
    internal static string FailedToGetProviderInformation { get; }
    internal static string DbContext_IndependentAssociationUpdateException { get; }
    internal static string DbPropertyValues_PropertyValueNamesAreReadonly { get; }
    internal static string DbPropertyValues_AttemptToSetNonValuesOnComplexProperty { get; }
    internal static string Database_NonCodeFirstCompatibilityCheck { get; }
    internal static string Database_NoDatabaseMetadata { get; }
    internal static string DbContext_ContextUsedInModelCreating { get; }
    internal static string DbContext_MESTNotSupported { get; }
    internal static string DbContext_Disposed { get; }
    internal static string DbContext_ProviderReturnedNullConnection { get; }
    internal static string DbContext_ConnectionFactoryReturnedNullConnection { get; }
    internal static string DbSet_WrongNumberOfKeyValuesPassed { get; }
    internal static string DbSet_WrongKeyValueType { get; }
    internal static string DbSet_MultipleAddedEntitiesFound { get; }
    internal static string DbQuery_BindingToDbQueryNotSupported { get; }
    internal static string DbExtensions_InvalidIncludePathExpression { get; }
    internal static string DbContext_ConnectionHasModel { get; }
    internal static string CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported { get; }
    internal static string DbEntityValidationException_ValidationFailed { get; }
    internal static string Database_InitializationException { get; }
    internal static string EdmxWriter_EdmxFromObjectContextNotSupported { get; }
    internal static string EdmxWriter_EdmxFromModelFirstNotSupported { get; }
    internal static string EdmxWriter_EdmxFromRawCompiledModelNotSupported { get; }
    internal static string UnintentionalCodeFirstException_Message { get; }
    internal static string CannotCallGenericSetWithProxyType { get; }
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame { get; }
    internal static string EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation { get; }
    internal static string EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint { get; }
    internal static string EdmModel_Validator_Semantic_ComposableFunctionImportsNotSupportedForSchemaVersion { get; }
    internal static string EdmModel_Validator_Syntactic_MissingName { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationType_AssociationEndMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentEndMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty { get; }
    internal static string EdmModel_Validator_Syntactic_EdmNavigationProperty_AssociationMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmNavigationProperty_ResultEndMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationEnd_EntityTypeMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmEntitySet_ElementTypeMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_ElementTypeMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_SourceSetMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmAssociationSet_TargetSetMustNotBeNull { get; }
    internal static string EdmModel_Validator_Syntactic_EdmTypeReferenceNotValid { get; }
    internal static string EdmModel_AddItem_NonMatchingNamespace { get; }
    internal static string Serializer_OneNamespaceAndOneContainer { get; }
    internal static string MaxLengthAttribute_InvalidMaxLength { get; }
    internal static string MinLengthAttribute_InvalidMinLength { get; }
    internal static string EagerInternalContext_CannotSetConnectionInfo { get; }
    internal static string LazyInternalContext_CannotReplaceEfConnectionWithDbConnection { get; }
    internal static string LazyInternalContext_CannotReplaceDbConnectionWithEfConnection { get; }
    internal static string EntityKey_NoNullsAllowedInKeyValuePairs { get; }
    internal static string EntityKey_UnexpectedNull { get; }
    internal static string EntityKey_EntityKeyMustHaveValues { get; }
    internal static string EntityKey_InvalidQualifiedEntitySetName { get; }
    internal static string EntityKey_MissingEntitySetName { get; }
    internal static string EntityKey_CannotChangeKey { get; }
    internal static string EntityTypesDoNotAgree { get; }
    internal static string EdmMembersDefiningTypeDoNotAgreeWithMetadataType { get; }
    internal static string EntityClient_ValueNotString { get; }
    internal static string EntityClient_NoCommandText { get; }
    internal static string EntityClient_ConnectionStringNeededBeforeOperation { get; }
    internal static string EntityClient_ConnectionNotOpen { get; }
    internal static string EntityClient_NoConnectionForCommand { get; }
    internal static string EntityClient_NoConnectionForAdapter { get; }
    internal static string EntityClient_ClosedConnectionForUpdate { get; }
    internal static string EntityClient_InvalidNamedConnection { get; }
    internal static string EntityClient_DataReaderIsStillOpen { get; }
    internal static string EntityClient_SettingsCannotBeChangedOnOpenConnection { get; }
    internal static string EntityClient_ConnectionStateClosed { get; }
    internal static string EntityClient_ConnectionStateBroken { get; }
    internal static string EntityClient_CannotCloneStoreProvider { get; }
    internal static string EntityClient_UnsupportedCommandType { get; }
    internal static string EntityClient_ErrorInClosingConnection { get; }
    internal static string EntityClient_ErrorInBeginningTransaction { get; }
    internal static string EntityClient_ExtraParametersWithNamedConnection { get; }
    internal static string EntityClient_CommandDefinitionPreparationFailed { get; }
    internal static string EntityClient_CommandDefinitionExecutionFailed { get; }
    internal static string EntityClient_CommandExecutionFailed { get; }
    internal static string EntityClient_StoreReaderFailed { get; }
    internal static string EntityClient_TooFewColumns { get; }
    internal static string EntityClient_EmptyParameterName { get; }
    internal static string EntityClient_CannotDeduceDbType { get; }
    internal static string EntityClient_TransactionAlreadyStarted { get; }
    internal static string EntityClient_InvalidTransactionForCommand { get; }
    internal static string EntityClient_NoStoreConnectionForUpdate { get; }
    internal static string EntityClient_CommandTreeMetadataIncompatible { get; }
    internal static string EntityClient_ProviderGeneralError { get; }
    internal static string EntityClient_FunctionImportEmptyCommandText { get; }
    internal static string EntityClient_InvalidStoredProcedureCommandText { get; }
    internal static string EntityClient_RequiresNonStoreCommandTree { get; }
    internal static string EntityClient_CannotReprepareCommandDefinitionBasedCommand { get; }
    internal static string EntityClient_CannotGetCommandText { get; }
    internal static string EntityClient_CannotSetCommandText { get; }
    internal static string EntityClient_CannotGetCommandTree { get; }
    internal static string EntityClient_CannotSetCommandTree { get; }
    internal static string ELinq_ExpressionMustBeIQueryable { get; }
    internal static string ELinq_UnsupportedConstructor { get; }
    internal static string ELinq_UnsupportedInitializers { get; }
    internal static string ELinq_UnsupportedBinding { get; }
    internal static string ELinq_ThenByDoesNotFollowOrderBy { get; }
    internal static string ELinq_UnsupportedQueryableMethod { get; }
    internal static string ELinq_UnsupportedDifferentContexts { get; }
    internal static string ELinq_UnsupportedCastToDecimal { get; }
    internal static string ELinq_CreateOrderedEnumerableNotSupported { get; }
    internal static string ELinq_SkipWithoutOrder { get; }
    internal static string ELinq_PropertyIndexNotSupported { get; }
    internal static string ELinq_AnonymousType { get; }
    internal static string ELinq_ClosureType { get; }
    internal static string ELinq_UnsupportedNestedFirst { get; }
    internal static string ELinq_UnsupportedNestedSingle { get; }
    internal static string ELinq_UnsupportedInclude { get; }
    internal static string ELinq_UnsupportedMergeAs { get; }
    internal static string ELinq_MethodNotDirectlyCallable { get; }
    internal static string ELinq_CycleDetected { get; }
    internal static string ELinq_DbFunctionDirectCall { get; }
    internal static string Elinq_ToStringNotSupportedForEnumsWithFlags { get; }
    internal static string Update_ConstraintCycle { get; }
    internal static string Update_GeneralExecutionException { get; }
    internal static string Update_AmbiguousServerGenIdentifier { get; }
    internal static string Update_WorkspaceMismatch { get; }
    internal static string Update_ReferentialConstraintIntegrityViolation { get; }
    internal static string Update_ErrorLoadingRecord { get; }
    internal static string Update_CircularRelationships { get; }
    internal static string Update_InvalidChanges { get; }
    internal static string Update_DuplicateKeys { get; }
    internal static string ViewGen_Extent { get; }
    internal static string ViewGen_Null { get; }
    internal static string ViewGen_CommaBlank { get; }
    internal static string ViewGen_Entities { get; }
    internal static string ViewGen_Tuples { get; }
    internal static string ViewGen_NotNull { get; }
    internal static string ViewGen_Error { get; }
    internal static string ViewGen_EntityInstanceToken { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Eq { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Unk { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Disj { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk_Association { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Disj { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Unk { get; }
    internal static string Viewgen_NoJoinKeyOrFK { get; }
    internal static string Validator_EmptyIdentity { get; }
    internal static string Validator_CollectionHasNoTypeUsage { get; }
    internal static string Validator_FacetTypeIsNull { get; }
    internal static string Validator_MemberHasNullDeclaringType { get; }
    internal static string Validator_MemberHasNullTypeUsage { get; }
    internal static string Validator_ItemAttributeHasNullTypeUsage { get; }
    internal static string Validator_RefTypeHasNullEntityType { get; }
    internal static string Validator_TypeUsageHasNullEdmType { get; }
    internal static string Validator_BaseTypeHasMemberOfSameName { get; }
    internal static string Validator_CollectionTypesCannotHaveBaseType { get; }
    internal static string Validator_RefTypesCannotHaveBaseType { get; }
    internal static string Validator_TypeHasNoName { get; }
    internal static string Validator_TypeHasNoNamespace { get; }
    internal static string Validator_FacetHasNoName { get; }
    internal static string Validator_MemberHasNoName { get; }
    internal static string Validator_MetadataPropertyHasNoName { get; }
    internal static string Validator_OSpace_Convention_NonMatchingUnderlyingTypes { get; }
    internal static string ExtraInfo { get; }
    internal static string Metadata_General_Error { get; }
    internal static string OperationOnReadOnlyCollection { get; }
    internal static string OperationOnReadOnlyItem { get; }
    internal static string EntitySetInAnotherContainer { get; }
    internal static string NotValidInputPath { get; }
    internal static string UnableToDetermineApplicationContext { get; }
    internal static string WildcardEnumeratorReturnedNull { get; }
    internal static string UnableToLoadResource { get; }
    internal static string AtleastOneSSDLNeeded { get; }
    internal static string InvalidMetadataPath { get; }
    internal static string OnlyStoreConnectionsSupported { get; }
    internal static string NotStringTypeForTypeUsage { get; }
    internal static string NotBinaryTypeForTypeUsage { get; }
    internal static string NotDateTimeTypeForTypeUsage { get; }
    internal static string NotDateTimeOffsetTypeForTypeUsage { get; }
    internal static string NotTimeTypeForTypeUsage { get; }
    internal static string NotDecimalTypeForTypeUsage { get; }
    internal static string ArrayTooSmall { get; }
    internal static string ProviderManifestTokenNotFound { get; }
    internal static string FailedToRetrieveProviderManifest { get; }
    internal static string InvalidMaxLengthSize { get; }
    internal static string ArgumentMustBeCSpaceType { get; }
    internal static string ArgumentMustBeOSpaceType { get; }
    internal static string Mapping_General_Error { get; }
    internal static string Mapping_InvalidContent_General { get; }
    internal static string Mapping_InvalidContent_Association_Type_Empty { get; }
    internal static string Mapping_InvalidContent_Table_Expected { get; }
    internal static string Mapping_InvalidContent_Container_SubElement { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Members { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Members { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Values { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Values { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_NonScalar { get; }
    internal static string Mapping_InvalidContent_TypeMapping_QueryView { get; }
    internal static string Mapping_ConditionValueTypeMismatch { get; }
    internal static string Mapping_TypeName_For_First_QueryView { get; }
    internal static string DbMappingViewCacheFactory_CreateFailure { get; }
    internal static string MappingViewCacheFactory_MustNotChange { get; }
    internal static string Mapping_InvalidContent_IsTypeOfNotTerminated { get; }
    internal static string Mapping_ModificationFunction_In_Table_Context { get; }
    internal static string Mapping_ModificationFunction_Multiple_Types { get; }
    internal static string Mapping_ModificationFunction_MissingVersion { get; }
    internal static string Mapping_ModificationFunction_VersionMustBeOriginal { get; }
    internal static string Mapping_ModificationFunction_VersionMustBeCurrent { get; }
    internal static string Mapping_DistinctFlagInReadWriteContainer { get; }
    internal static string Mapping_DifferentEdmStoreVersion { get; }
    internal static string Mapping_DifferentMappingEdmStoreVersion { get; }
    internal static string Entity_EntityCantHaveMultipleChangeTrackers { get; }
    internal static string ComplexObject_ComplexObjectAlreadyAttachedToParent { get; }
    internal static string ObjectStateEntry_OriginalValuesDoesNotExist { get; }
    internal static string ObjectStateEntry_CurrentValuesDoesNotExist { get; }
    internal static string ObjectStateEntry_InvalidState { get; }
    internal static string ObjectStateEntry_CantModifyRelationValues { get; }
    internal static string ObjectStateEntry_CantModifyRelationState { get; }
    internal static string ObjectStateEntry_CantModifyDetachedDeletedEntries { get; }
    internal static string ObjectStateEntry_CantSetEntityKey { get; }
    internal static string ObjectStateEntry_CannotAccessKeyEntryValues { get; }
    internal static string ObjectStateEntry_CannotModifyKeyEntryState { get; }
    internal static string ObjectStateEntry_CannotDeleteOnKeyEntry { get; }
    internal static string ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging { get; }
    internal static string ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers { get; }
    internal static string ObjectStateEntry_InvalidTypeForComplexTypeProperty { get; }
    internal static string ObjectStateManager_NoEntryExistForEntityKey { get; }
    internal static string ObjectStateManager_EntityNotTracked { get; }
    internal static string ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager { get; }
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKey { get; }
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach { get; }
    internal static string ObjectStateManager_InvalidKey { get; }
    internal static string ObjectStateManager_AcceptChangesEntityKeyIsNotValid { get; }
    internal static string ObjectStateManager_EntityConflictsWithKeyEntry { get; }
    internal static string ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityDeleted { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityAdded { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateKeyEntry { get; }
    internal static string ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations { get; }
    internal static string ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid { get; }
    internal static string ObjectContext_StoreEntityNotPresentInClient { get; }
    internal static string ObjectContext_InvalidConnectionString { get; }
    internal static string ObjectContext_InvalidConnection { get; }
    internal static string ObjectContext_ObjectNotFound { get; }
    internal static string ObjectContext_CannotDeleteEntityNotInObjectStateManager { get; }
    internal static string ObjectContext_CannotDetachEntityNotInObjectStateManager { get; }
    internal static string ObjectContext_InvalidCommandTimeout { get; }
    internal static string ObjectContext_EntityAlreadyExistsInObjectStateManager { get; }
    internal static string ObjectContext_CannotAttachEntityWithoutKey { get; }
    internal static string ObjectContext_CannotAttachEntityWithTemporaryKey { get; }
    internal static string ObjectContext_EntitySetNameOrEntityKeyRequired { get; }
    internal static string ObjectContext_ContainerQualifiedEntitySetNameRequired { get; }
    internal static string ObjectContext_CannotSetDefaultContainerName { get; }
    internal static string ObjectContext_QualfiedEntitySetName { get; }
    internal static string ObjectContext_CommitWithConceptualNull { get; }
    internal static string ObjectContext_ObjectDisposed { get; }
    internal static string ObjectContext_SelectorExpressionMustBeMemberAccess { get; }
    internal static string ObjectContext_InvalidEntityState { get; }
    internal static string ObjectContext_InvalidRelationshipState { get; }
    internal static string ObjectContext_EntityNotTrackedOrHasTempKey { get; }
    internal static string ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues { get; }
    internal static string RelatedEnd_InvalidOwnerStateForAttach { get; }
    internal static string RelatedEnd_InvalidEntityContextForAttach { get; }
    internal static string RelatedEnd_InvalidEntityStateForAttach { get; }
    internal static string RelatedEnd_UnableToAddEntity { get; }
    internal static string RelatedEnd_UnableToRemoveEntity { get; }
    internal static string RelatedEnd_UnableToAddRelationshipWithDeletedEntity { get; }
    internal static string Materializer_PropertyIsNotNullable { get; }
    internal static string Materializer_CannotReEnumerateQueryResults { get; }
    internal static string Materializer_UnsupportedType { get; }
    internal static string Collections_InvalidEntityStateSource { get; }
    internal static string Collections_UnableToMergeCollections { get; }
    internal static string EntityReference_LessThanExpectedRelatedEntitiesFound { get; }
    internal static string EntityReference_MoreThanExpectedRelatedEntitiesFound { get; }
    internal static string EntityReference_CannotChangeReferentialConstraintProperty { get; }
    internal static string EntityReference_CannotSetSpecialKeys { get; }
    internal static string EntityReference_EntityKeyValueMismatch { get; }
    internal static string RelatedEnd_RelatedEndNotFound { get; }
    internal static string RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd { get; }
    internal static string RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd { get; }
    internal static string RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts { get; }
    internal static string RelatedEnd_OwnerIsNull { get; }
    internal static string RelationshipManager_UnableToRetrieveReferentialConstraintProperties { get; }
    internal static string RelationshipManager_CircularRelationshipsWithReferentialConstraints { get; }
    internal static string RelationshipManager_UnexpectedNull { get; }
    internal static string RelationshipManager_InvalidRelationshipManagerOwner { get; }
    internal static string RelationshipManager_UnexpectedNullContext { get; }
    internal static string RelationshipManager_InitializeIsForDeserialization { get; }
    internal static string RelationshipManager_CollectionInitializeIsForDeserialization { get; }
    internal static string RelationshipManager_CannotGetRelatEndForDetachedPocoEntity { get; }
    internal static string ObjectView_CannotReplacetheEntityorRow { get; }
    internal static string ObjectView_IndexBasedInsertIsNotSupported { get; }
    internal static string ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList { get; }
    internal static string ObjectView_AddNewOperationNotAllowedOnAbstractBindingList { get; }
    internal static string ObjectView_IncompatibleArgument { get; }
    internal static string CodeGen_PropertyDeclaringTypeIsValueType { get; }
    internal static string CodeGen_PropertyUnsupportedType { get; }
    internal static string CodeGen_PropertyIsIndexed { get; }
    internal static string CodeGen_PropertyIsStatic { get; }
    internal static string CodeGen_PropertyNoGetter { get; }
    internal static string CodeGen_PropertyNoSetter { get; }
    internal static string GeneralQueryError { get; }
    internal static string CtxAlias { get; }
    internal static string CtxAliasedNamespaceImport { get; }
    internal static string CtxAnd { get; }
    internal static string CtxAnyElement { get; }
    internal static string CtxApplyClause { get; }
    internal static string CtxBetween { get; }
    internal static string CtxCase { get; }
    internal static string CtxCaseElse { get; }
    internal static string CtxCaseWhenThen { get; }
    internal static string CtxCast { get; }
    internal static string CtxCollatedOrderByClauseItem { get; }
    internal static string CtxCollectionTypeDefinition { get; }
    internal static string CtxCommandExpression { get; }
    internal static string CtxCreateRef { get; }
    internal static string CtxDeref { get; }
    internal static string CtxDivide { get; }
    internal static string CtxElement { get; }
    internal static string CtxEquals { get; }
    internal static string CtxEscapedIdentifier { get; }
    internal static string CtxExcept { get; }
    internal static string CtxExists { get; }
    internal static string CtxExpressionList { get; }
    internal static string CtxFlatten { get; }
    internal static string CtxFromApplyClause { get; }
    internal static string CtxFromClause { get; }
    internal static string CtxFromClauseItem { get; }
    internal static string CtxFromClauseList { get; }
    internal static string CtxFromJoinClause { get; }
    internal static string CtxFunctionDefinition { get; }
    internal static string CtxGreaterThan { get; }
    internal static string CtxGreaterThanEqual { get; }
    internal static string CtxGroupByClause { get; }
    internal static string CtxGroupPartition { get; }
    internal static string CtxHavingClause { get; }
    internal static string CtxIdentifier { get; }
    internal static string CtxIn { get; }
    internal static string CtxIntersect { get; }
    internal static string CtxIsNotNull { get; }
    internal static string CtxIsNotOf { get; }
    internal static string CtxIsNull { get; }
    internal static string CtxIsOf { get; }
    internal static string CtxJoinClause { get; }
    internal static string CtxJoinOnClause { get; }
    internal static string CtxKey { get; }
    internal static string CtxLessThan { get; }
    internal static string CtxLessThanEqual { get; }
    internal static string CtxLike { get; }
    internal static string CtxLimitSubClause { get; }
    internal static string CtxLiteral { get; }
    internal static string CtxMemberAccess { get; }
    internal static string CtxMethod { get; }
    internal static string CtxMinus { get; }
    internal static string CtxModulus { get; }
    internal static string CtxMultiply { get; }
    internal static string CtxMultisetCtor { get; }
    internal static string CtxNamespaceImport { get; }
    internal static string CtxNamespaceImportList { get; }
    internal static string CtxNavigate { get; }
    internal static string CtxNot { get; }
    internal static string CtxNotBetween { get; }
    internal static string CtxNotEqual { get; }
    internal static string CtxNotIn { get; }
    internal static string CtxNotLike { get; }
    internal static string CtxNullLiteral { get; }
    internal static string CtxOfType { get; }
    internal static string CtxOfTypeOnly { get; }
    internal static string CtxOr { get; }
    internal static string CtxOrderByClause { get; }
    internal static string CtxOrderByClauseItem { get; }
    internal static string CtxOverlaps { get; }
    internal static string CtxParen { get; }
    internal static string CtxPlus { get; }
    internal static string CtxTypeNameWithTypeSpec { get; }
    internal static string CtxQueryExpression { get; }
    internal static string CtxQueryStatement { get; }
    internal static string CtxRef { get; }
    internal static string CtxRefTypeDefinition { get; }
    internal static string CtxRelationship { get; }
    internal static string CtxRelationshipList { get; }
    internal static string CtxRowCtor { get; }
    internal static string CtxRowTypeDefinition { get; }
    internal static string CtxSelectRowClause { get; }
    internal static string CtxSelectValueClause { get; }
    internal static string CtxSet { get; }
    internal static string CtxSimpleIdentifier { get; }
    internal static string CtxSkipSubClause { get; }
    internal static string CtxTopSubClause { get; }
    internal static string CtxTreat { get; }
    internal static string CtxTypeName { get; }
    internal static string CtxUnaryMinus { get; }
    internal static string CtxUnaryPlus { get; }
    internal static string CtxUnion { get; }
    internal static string CtxUnionAll { get; }
    internal static string CtxWhereClause { get; }
    internal static string GenericSyntaxError { get; }
    internal static string InFromClause { get; }
    internal static string InGroupClause { get; }
    internal static string InRowCtor { get; }
    internal static string InSelectProjectionList { get; }
    internal static string InvalidEmptyIdentifier { get; }
    internal static string InvalidEmptyQuery { get; }
    internal static string InvalidOperatorSymbol { get; }
    internal static string InvalidPunctuatorSymbol { get; }
    internal static string LocalizedCollection { get; }
    internal static string LocalizedColumn { get; }
    internal static string LocalizedComplex { get; }
    internal static string LocalizedEntity { get; }
    internal static string LocalizedEntityContainerExpression { get; }
    internal static string LocalizedFunction { get; }
    internal static string LocalizedInlineFunction { get; }
    internal static string LocalizedKeyword { get; }
    internal static string LocalizedLeft { get; }
    internal static string LocalizedLine { get; }
    internal static string LocalizedMetadataMemberExpression { get; }
    internal static string LocalizedNamespace { get; }
    internal static string LocalizedNear { get; }
    internal static string LocalizedPrimitive { get; }
    internal static string LocalizedReference { get; }
    internal static string LocalizedRight { get; }
    internal static string LocalizedRow { get; }
    internal static string LocalizedTerm { get; }
    internal static string LocalizedType { get; }
    internal static string LocalizedEnumMember { get; }
    internal static string LocalizedValueExpression { get; }
    internal static string AmbiguousFunctionArguments { get; }
    internal static string BetweenLimitsCannotBeUntypedNulls { get; }
    internal static string CannotCreateEmptyMultiset { get; }
    internal static string CannotCreateMultisetofNulls { get; }
    internal static string ConcatBuiltinNotSupported { get; }
    internal static string ElementOperatorIsNotSupported { get; }
    internal static string ExpressionCannotBeNull { get; }
    internal static string ExpressionMustBeCollection { get; }
    internal static string ExpressionMustBeNumericType { get; }
    internal static string ExpressionTypeMustBeBoolean { get; }
    internal static string ExpressionTypeMustBeEqualComparable { get; }
    internal static string ExpressionTypeMustNotBeCollection { get; }
    internal static string ExprIsNotValidEntitySetForCreateRef { get; }
    internal static string GroupingKeysMustBeEqualComparable { get; }
    internal static string GroupPartitionOutOfContext { get; }
    internal static string HavingRequiresGroupClause { get; }
    internal static string ImcompatibleCreateRefKeyElementType { get; }
    internal static string ImcompatibleCreateRefKeyType { get; }
    internal static string InnerJoinMustHaveOnPredicate { get; }
    internal static string InvalidCaseResultTypes { get; }
    internal static string InvalidCaseWhenThenNullType { get; }
    internal static string InvalidCastExpressionType { get; }
    internal static string InvalidCastType { get; }
    internal static string InvalidCreateRefKeyType { get; }
    internal static string InvalidDistinctArgumentInCtor { get; }
    internal static string InvalidDistinctArgumentInNonAggFunction { get; }
    internal static string InvalidFlattenArgument { get; }
    internal static string InvalidJoinLeftCorrelation { get; }
    internal static string InvalidMetadataMemberName { get; }
    internal static string InvalidModeForWithRelationshipClause { get; }
    internal static string InvalidNamespaceAlias { get; }
    internal static string InvalidNullArithmetic { get; }
    internal static string InvalidNullComparison { get; }
    internal static string InvalidPredicateForCrossJoin { get; }
    internal static string InvalidSelectValueAliasedExpression { get; }
    internal static string InvalidSelectValueList { get; }
    internal static string InvalidTypeForWithRelationshipClause { get; }
    internal static string IsNullInvalidType { get; }
    internal static string LeftSetExpressionArgsMustBeCollection { get; }
    internal static string LikeArgMustBeStringType { get; }
    internal static string MalformedSingleQuotePayload { get; }
    internal static string MalformedStringLiteralPayload { get; }
    internal static string MethodInvocationNotSupported { get; }
    internal static string MultisetElemsAreNotTypeCompatible { get; }
    internal static string NullLiteralCannotBePromotedToCollectionOfNulls { get; }
    internal static string OrderByKeyIsNotOrderComparable { get; }
    internal static string PlusLeftExpressionInvalidType { get; }
    internal static string PlusRightExpressionInvalidType { get; }
    internal static string RelatedEndExprTypeMustBeReference { get; }
    internal static string RelationshipFromEndIsAmbiguos { get; }
    internal static string RelationshipToEndIsAmbiguos { get; }
    internal static string ResultingExpressionTypeCannotBeNull { get; }
    internal static string RightSetExpressionArgsMustBeCollection { get; }
    internal static string RowCtorElementCannotBeNull { get; }
    internal static string SelectDistinctMustBeEqualComparable { get; }
    internal static string TopAndLimitCannotCoexist { get; }
    internal static string TopAndSkipCannotCoexist { get; }
    internal static string TypeArgumentMustBeLiteral { get; }
    internal static string TypeArgumentIsNotValid { get; }
    internal static string TypeMustBeInheritableType { get; }
    internal static string GroupVarNotFoundInScope { get; }
    internal static string InvalidArgumentTypeForAggregateFunction { get; }
    internal static string InvalidSavePoint { get; }
    internal static string InvalidScopeIndex { get; }
    internal static string ParserFatalError { get; }
    internal static string ParserInputError { get; }
    internal static string StackOverflowInParser { get; }
    internal static string UnknownAstCommandExpression { get; }
    internal static string UnknownAstExpressionType { get; }
    internal static string UnknownBuiltInAstExpressionType { get; }
    internal static string Cqt_General_MetadataNotReadOnly { get; }
    internal static string Cqt_General_NoProviderBooleanType { get; }
    internal static string Cqt_General_NoProviderIntegerType { get; }
    internal static string Cqt_General_NoProviderStringType { get; }
    internal static string Cqt_Metadata_EdmMemberIncorrectSpace { get; }
    internal static string Cqt_Metadata_EntitySetEntityContainerNull { get; }
    internal static string Cqt_Metadata_EntitySetIncorrectSpace { get; }
    internal static string Cqt_Metadata_EntityTypeNullKeyMembersInvalid { get; }
    internal static string Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid { get; }
    internal static string Cqt_Metadata_FunctionReturnParameterNull { get; }
    internal static string Cqt_Metadata_FunctionIncorrectSpace { get; }
    internal static string Cqt_Metadata_FunctionParameterIncorrectSpace { get; }
    internal static string Cqt_Metadata_TypeUsageIncorrectSpace { get; }
    internal static string Cqt_Exceptions_InvalidCommandTree { get; }
    internal static string Cqt_Util_CheckListEmptyInvalid { get; }
    internal static string Cqt_ExpressionList_IncorrectElementCount { get; }
    internal static string Cqt_CommandTree_InvalidDataSpace { get; }
    internal static string Cqt_Factory_NewCollectionInvalidCommonType { get; }
    internal static string Cqt_Factory_NoSuchRelationEnd { get; }
    internal static string Cqt_Factory_IncompatibleRelationEnds { get; }
    internal static string Cqt_Aggregate_InvalidFunction { get; }
    internal static string Cqt_Binding_CollectionRequired { get; }
    internal static string Cqt_GroupBinding_CollectionRequired { get; }
    internal static string Cqt_And_BooleanArgumentsRequired { get; }
    internal static string Cqt_Apply_DuplicateVariableNames { get; }
    internal static string Cqt_Arithmetic_NumericCommonType { get; }
    internal static string Cqt_Case_WhensMustEqualThens { get; }
    internal static string Cqt_Case_InvalidResultType { get; }
    internal static string Cqt_Comparison_ComparableRequired { get; }
    internal static string Cqt_Constant_InvalidType { get; }
    internal static string Cqt_Distinct_InvalidCollection { get; }
    internal static string Cqt_DeRef_RefRequired { get; }
    internal static string Cqt_Element_InvalidArgumentForUnwrapSingleProperty { get; }
    internal static string Cqt_Function_VoidResultInvalid { get; }
    internal static string Cqt_Function_NonComposableInExpression { get; }
    internal static string Cqt_Function_CommandTextInExpression { get; }
    internal static string Cqt_GetEntityRef_EntityRequired { get; }
    internal static string Cqt_GetRefKey_RefRequired { get; }
    internal static string Cqt_GroupBy_AtLeastOneKeyOrAggregate { get; }
    internal static string Cqt_GroupBy_MoreThanOneGroupAggregate { get; }
    internal static string Cqt_CrossJoin_AtLeastTwoInputs { get; }
    internal static string Cqt_IsNull_CollectionNotAllowed { get; }
    internal static string Cqt_IsNull_InvalidType { get; }
    internal static string Cqt_Join_DuplicateVariableNames { get; }
    internal static string Cqt_Limit_ConstantOrParameterRefRequired { get; }
    internal static string Cqt_Limit_IntegerRequired { get; }
    internal static string Cqt_Limit_NonNegativeLimitRequired { get; }
    internal static string Cqt_NewInstance_CollectionTypeRequired { get; }
    internal static string Cqt_NewInstance_StructuralTypeRequired { get; }
    internal static string Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid { get; }
    internal static string Cqt_Not_BooleanArgumentRequired { get; }
    internal static string Cqt_Or_BooleanArgumentsRequired { get; }
    internal static string Cqt_In_SameResultTypeRequired { get; }
    internal static string Cqt_Property_InstanceRequiredForInstance { get; }
    internal static string Cqt_Ref_PolymorphicArgRequired { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd { get; }
    internal static string Cqt_RelatedEntityRef_TargetEntityNotRef { get; }
    internal static string Cqt_RelatedEntityRef_TargetEntityNotCompatible { get; }
    internal static string Cqt_RelNav_NoCompositions { get; }
    internal static string Cqt_Skip_ConstantOrParameterRefRequired { get; }
    internal static string Cqt_Skip_IntegerRequired { get; }
    internal static string Cqt_Skip_NonNegativeCountRequired { get; }
    internal static string Cqt_Sort_NonStringCollationInvalid { get; }
    internal static string Cqt_Sort_OrderComparable { get; }
    internal static string Iqt_CTGen_UnexpectedAggregate { get; }
    internal static string Iqt_CTGen_UnexpectedVarDefList { get; }
    internal static string Iqt_CTGen_UnexpectedVarDef { get; }
    internal static string ADP_MustUseSequentialAccess { get; }
    internal static string ADP_ProviderDoesNotSupportCommandTrees { get; }
    internal static string ADP_ClosedDataReaderError { get; }
    internal static string ADP_ImplicitlyClosedDataReaderError { get; }
    internal static string ADP_NoData { get; }
    internal static string ADP_GetSchemaTableIsNotSupported { get; }
    internal static string ADP_InvalidDataReaderFieldCountForScalarType { get; }
    internal static string ADP_InvalidDataReaderUnableToDetermineType { get; }
    internal static string ADP_KeysRequiredForNesting { get; }
    internal static string DataCategory_Data { get; }
    internal static string DbParameter_Direction { get; }
    internal static string DbParameter_Size { get; }
    internal static string DataCategory_Update { get; }
    internal static string DbParameter_SourceColumn { get; }
    internal static string DbParameter_SourceVersion { get; }
    internal static string NonReturnParameterInReturnParameterCollection { get; }
    internal static string ReturnParameterInInputParameterCollection { get; }
    internal static string NullEntitySetsForFunctionReturningMultipleResultSets { get; }
    internal static string NumberOfEntitySetsDoesNotMatchNumberOfReturnParameters { get; }
    internal static string EntityParameterContainedByAnotherCollection { get; }
    internal static string EntityParameterCollectionRemoveInvalidObject { get; }
    internal static string ExpandingDataDirectoryFailed { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidMultipartNameDelimiterUsage { get; }
    internal static string EmptySchemaTextReader { get; }
    internal static string MissingName { get; }
    internal static string MissingNamespaceAttribute { get; }
    internal static string DefaultNotAllowed { get; }
    internal static string GeneratorErrorSeverityError { get; }
    internal static string GeneratorErrorSeverityWarning { get; }
    internal static string GeneratorErrorSeverityUnknown { get; }
    internal static string SourceUriUnknown { get; }
    internal static string BadNavigationPropertyRolesCannotBeTheSame { get; }
    internal static string InvalidDocumentationBothTextAndStructure { get; }
    internal static string AllElementsMustBeInSchema { get; }
    internal static string TVFReturnTypeRowHasNonScalarProperty { get; }
    internal static string InvalidOperationMultipleEndsInAssociation { get; }
    internal static string MismatchNumberOfPropertiesinRelationshipConstraint { get; }
    internal static string ComposableFunctionOrFunctionImportMustDeclareReturnType { get; }
    internal static string ComposableFunctionImportsReturningEntitiesNotSupported { get; }
    internal static string StructuralTypeMappingsMustNotBeNullForFunctionImportsReturningNonScalarValues { get; }
    internal static string InvalidReturnTypeForComposableFunction { get; }
    internal static string NonComposableFunctionMustNotDeclareReturnType { get; }
    internal static string CommandTextFunctionsNotComposable { get; }
    internal static string CommandTextFunctionsCannotDeclareStoreFunctionName { get; }
    internal static string NonComposableFunctionHasDisallowedAttribute { get; }
    internal static string EmptyDefiningQuery { get; }
    internal static string EmptyCommandText { get; }
    internal static string IncorrectProviderManifest { get; }
    internal static string FacetDeclarationRequiresTypeAttribute { get; }
    internal static string TypeMustBeDeclared { get; }
    internal static string RowTypeWithoutProperty { get; }
    internal static string TypeDeclaredAsAttributeAndElement { get; }
    internal static string CannotLoadDifferentVersionOfSchemaInTheSameItemCollection { get; }
    internal static string InvalidEnumUnderlyingType { get; }
    internal static string DuplicateEnumMember { get; }
    internal static string CalculatedEnumValueOutOfRange { get; }
    internal static string SpatialWithUseStrongSpatialTypesFalse { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidQueryArgument { get; }
    internal static string ObjectQuery_QueryBuilder_NotSupportedLinqSource { get; }
    internal static string ObjectQuery_InvalidConnection { get; }
    internal static string ObjectQuery_UnableToMapResultType { get; }
    internal static string ObjectParameterCollection_ParametersLocked { get; }
    internal static string ProviderReturnedNullForCreateCommandDefinition { get; }
    internal static string ProviderDidNotReturnAProviderManifest { get; }
    internal static string ProviderDidNotReturnAProviderManifestToken { get; }
    internal static string ProviderDidNotReturnSpatialServices { get; }
    internal static string SpatialProviderNotUsable { get; }
    internal static string ProviderRequiresStoreCommandTree { get; }
    internal static string ProviderShouldOverrideEscapeLikeArgument { get; }
    internal static string ProviderEscapeLikeArgumentReturnedNull { get; }
    internal static string ProviderDidNotCreateACommandDefinition { get; }
    internal static string ProviderDoesNotSupportCreateDatabaseScript { get; }
    internal static string ProviderDoesNotSupportCreateDatabase { get; }
    internal static string ProviderDoesNotSupportDatabaseExists { get; }
    internal static string ProviderDoesNotSupportDeleteDatabase { get; }
    internal static string Spatial_GeographyValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_GeometryValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_ProviderValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_WellKnownValueSerializationPropertyNotDirectlySettable { get; }
    internal static string EntityConnectionString_Name { get; }
    internal static string EntityConnectionString_Provider { get; }
    internal static string EntityConnectionString_Metadata { get; }
    internal static string EntityConnectionString_ProviderConnectionString { get; }
    internal static string EntityDataCategory_Context { get; }
    internal static string EntityDataCategory_NamedConnectionString { get; }
    internal static string EntityDataCategory_Source { get; }
    internal static string ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection { get; }
    internal static string ObjectQuery_Span_SpanPathSyntaxError { get; }
    internal static string EntityProxyTypeInfo_ProxyHasWrongWrapper { get; }
    internal static string InvalidEdmMemberInstance { get; }
    internal static string AddHandlerToInUseConfiguration { get; }
    internal static string MoreThanOneElement { get; }
    internal static string IQueryable_Provider_Not_Async { get; }
    internal static string EmptySequence { get; }
    internal static string UnableToMoveHistoryTableWithAuto { get; }
    internal static string NoMatch { get; }
    internal static string MoreThanOneMatch { get; }
    internal static string EntityClient_CannotOpenBrokenConnection { get; }
    internal static string DbContext_InvalidTransactionForConnection { get; }
    internal static string DbContext_InvalidTransactionNoConnection { get; }
    internal static string DbContext_TransactionAlreadyStarted { get; }
    internal static string DbContext_TransactionAlreadyEnlistedInUserTransaction { get; }
    internal static string ConcurrentMethodInvocation { get; }
    internal static string AssociationSet_EndEntityTypeMismatch { get; }
    internal static string VisitDbInExpressionNotImplemented { get; }
    internal static string StorageScalarPropertyMapping_OnlyScalarPropertiesAllowed { get; }
    internal static string StorageComplexPropertyMapping_OnlyComplexPropertyAllowed { get; }
    internal static string MetadataItemErrorsFoundDuringGeneration { get; }
    internal static string ScaffoldSprocInDownNotSupported { get; }
    internal static string SuppressionAfterExecution { get; }
    internal static string TestDoublesCannotBeConverted { get; }
    internal static string UnableToUpgradeHistoryWhenCustomFactory { get; }
    internal static string CommitFailed { get; }
    internal static string ViewGenMultipleContainers { get; }
    internal static string HashCalcMultipleContainers { get; }
    internal static string BadConnectionWrapping { get; }
    internal static string TransactionHandler_AlreadyInitialized { get; }
    internal static string CannotDefineKeysOnBothBaseAndDerivedTypes { get; }
    internal static string ProviderDoesNotSupportEscapingLikeArgument { get; }
    internal static string get_AutomaticMigration();
    internal static string get_BootstrapMigration();
    internal static string get_InitialCreate();
    internal static string get_AutomaticDataLoss();
    internal static string LoggingAutoMigrate(object p0);
    internal static string LoggingRevertAutoMigrate(object p0);
    internal static string LoggingApplyMigration(object p0);
    internal static string LoggingRevertMigration(object p0);
    internal static string get_LoggingSeedingDatabase();
    internal static string LoggingPendingMigrations(object p0, object p1);
    internal static string LoggingPendingMigrationsDown(object p0, object p1);
    internal static string get_LoggingNoExplicitMigrations();
    internal static string LoggingAlreadyAtTarget(object p0);
    internal static string LoggingTargetDatabase(object p0);
    internal static string LoggingTargetDatabaseFormat(object p0, object p1, object p2, object p3);
    internal static string get_LoggingExplicit();
    internal static string get_UpgradingHistoryTable();
    internal static string get_MetadataOutOfDate();
    internal static string MigrationNotFound(object p0);
    internal static string PartialFkOperation(object p0, object p1);
    internal static string AutoNotValidTarget(object p0);
    internal static string AutoNotValidForScriptWindows(object p0);
    internal static string ContextNotConstructible(object p0);
    internal static string AmbiguousMigrationName(object p0);
    internal static string get_AutomaticDisabledException();
    internal static string get_DownScriptWindowsNotSupported();
    internal static string AssemblyMigrator_NoConfigurationWithName(object p0, object p1);
    internal static string AssemblyMigrator_MultipleConfigurationsWithName(object p0, object p1);
    internal static string AssemblyMigrator_NoConfiguration(object p0);
    internal static string AssemblyMigrator_MultipleConfigurations(object p0);
    internal static string MigrationsNamespaceNotUnderRootNamespace(object p0, object p1);
    internal static string UnableToDispatchAddOrUpdate(object p0);
    internal static string NoSqlGeneratorForProvider(object p0);
    internal static string ToolingFacade_AssemblyNotFound(object p0);
    internal static string ArgumentIsNullOrWhitespace(object p0);
    internal static string EntityTypeConfigurationMismatch(object p0);
    internal static string ComplexTypeConfigurationMismatch(object p0);
    internal static string KeyPropertyNotFound(object p0, object p1);
    internal static string ForeignKeyPropertyNotFound(object p0, object p1);
    internal static string PropertyNotFound(object p0, object p1);
    internal static string NavigationPropertyNotFound(object p0, object p1);
    internal static string InvalidPropertyExpression(object p0);
    internal static string InvalidComplexPropertyExpression(object p0);
    internal static string InvalidPropertiesExpression(object p0);
    internal static string InvalidComplexPropertiesExpression(object p0);
    internal static string DuplicateStructuralTypeConfiguration(object p0);
    internal static string ConflictingPropertyConfiguration(object p0, object p1, object p2);
    internal static string ConflictingTypeAnnotation(object p0, object p1, object p2, object p3);
    internal static string ConflictingColumnConfiguration(object p0, object p1, object p2);
    internal static string ConflictingConfigurationValue(object p0, object p1, object p2, object p3);
    internal static string ConflictingAnnotationValue(object p0, object p1, object p2);
    internal static string ConflictingIndexAttributeProperty(object p0, object p1, object p2);
    internal static string ConflictingIndexAttribute(object p0, object p1);
    internal static string ConflictingIndexAttributesOnProperty(object p0, object p1, object p2, object p3);
    internal static string IncompatibleTypes(object p0, object p1);
    internal static string AnnotationSerializeWrongType(object p0, object p1, object p2);
    internal static string AnnotationSerializeBadFormat(object p0, object p1, object p2);
    internal static string ConflictWhenConsolidating(object p0, object p1, object p2);
    internal static string OrderConflictWhenConsolidating(object p0, object p1, object p2, object p3, object p4);
    internal static string CodeFirstInvalidComplexType(object p0);
    internal static string InvalidEntityType(object p0);
    internal static string SimpleNameCollision(object p0, object p1, object p2);
    internal static string NavigationInverseItself(object p0, object p1);
    internal static string ConflictingConstraint(object p0, object p1);
    internal static string ConflictingInferredColumnType(object p0, object p1, object p2);
    internal static string ConflictingMapping(object p0, object p1);
    internal static string ConflictingCascadeDeleteOperation(object p0, object p1);
    internal static string ConflictingMultiplicities(object p0, object p1);
    internal static string MaxLengthAttributeConvention_InvalidMaxLength(object p0, object p1);
    internal static string StringLengthAttributeConvention_InvalidMaximumLength(object p0, object p1);
    internal static string ModelGeneration_UnableToDetermineKeyOrder(object p0);
    internal static string ForeignKeyAttributeConvention_EmptyKey(object p0, object p1);
    internal static string ForeignKeyAttributeConvention_InvalidKey(object p0, object p1, object p2, object p3);
    internal static string ForeignKeyAttributeConvention_InvalidNavigationProperty(object p0, object p1, object p2);
    internal static string ForeignKeyAttributeConvention_OrderRequired(object p0);
    internal static string InversePropertyAttributeConvention_PropertyNotFound(object p0, object p1, object p2, object p3);
    internal static string InversePropertyAttributeConvention_SelfInverseDetected(object p0, object p1);
    internal static string get_ValidationHeader();
    internal static string ValidationItemFormat(object p0, object p1, object p2);
    internal static string KeyRegisteredOnDerivedType(object p0, object p1);
    internal static string InvalidTableMapping(object p0, object p1);
    internal static string InvalidTableMapping_NoTableName(object p0);
    internal static string InvalidChainedMappingSyntax(object p0);
    internal static string InvalidNotNullCondition(object p0, object p1);
    internal static string InvalidDiscriminatorType(object p0);
    internal static string ConventionNotFound(object p0, object p1);
    internal static string InvalidEntitySplittingProperties(object p0);
    internal static string ProviderNameNotFound(object p0);
    internal static string ProviderNotFound(object p0);
    internal static string InvalidDatabaseName(object p0);
    internal static string EntityMappingConfiguration_DuplicateMapInheritedProperties(object p0);
    internal static string EntityMappingConfiguration_DuplicateMappedProperties(object p0);
    internal static string EntityMappingConfiguration_DuplicateMappedProperty(object p0, object p1);
    internal static string EntityMappingConfiguration_CannotMapIgnoredProperty(object p0, object p1);
    internal static string EntityMappingConfiguration_InvalidTableSharing(object p0, object p1, object p2);
    internal static string EntityMappingConfiguration_TPCWithIAsOnNonLeafType(object p0, object p1, object p2);
    internal static string CannotIgnoreMappedBaseProperty(object p0, object p1, object p2);
    internal static string ModelBuilder_KeyPropertiesMustBePrimitive(object p0, object p1);
    internal static string TableNotFound(object p0);
    internal static string IncorrectColumnCount(object p0);
    internal static string BadKeyNameForAnnotation(object p0, object p1);
    internal static string BadAnnotationName(object p0);
    internal static string get_CircularComplexTypeHierarchy();
    internal static string UnableToDeterminePrincipal(object p0, object p1);
    internal static string UnmappedAbstractType(object p0);
    internal static string UnsupportedHybridInheritanceMapping(object p0);
    internal static string OrphanedConfiguredTableDetected(object p0);
    internal static string BadTphMappingToSharedColumn(object p0, object p1, object p2, object p3, object p4, object p5, object p6);
    internal static string DuplicateConfiguredColumnOrder(object p0);
    internal static string UnsupportedUseOfV3Type(object p0, object p1);
    internal static string MultiplePropertiesMatchedAsKeys(object p0, object p1);
    internal static string get_FailedToGetProviderInformation();
    internal static string DbPropertyEntry_CannotGetCurrentValue(object p0, object p1);
    internal static string DbPropertyEntry_CannotSetCurrentValue(object p0, object p1);
    internal static string DbPropertyEntry_NotSupportedForDetached(object p0, object p1, object p2);
    internal static string DbPropertyEntry_SettingEntityRefNotSupported(object p0, object p1, object p2);
    internal static string DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(object p0, object p1, object p2);
    internal static string DbEntityEntry_NotSupportedForDetached(object p0, object p1);
    internal static string DbSet_BadTypeForAddAttachRemove(object p0, object p1, object p2);
    internal static string DbSet_BadTypeForCreate(object p0, object p1);
    internal static string DbEntity_BadTypeForCast(object p0, object p1, object p2);
    internal static string DbMember_BadTypeForCast(object p0, object p1, object p2, object p3, object p4);
    internal static string DbEntityEntry_UsedReferenceForCollectionProp(object p0, object p1);
    internal static string DbEntityEntry_UsedCollectionForReferenceProp(object p0, object p1);
    internal static string DbEntityEntry_NotANavigationProperty(object p0, object p1);
    internal static string DbEntityEntry_NotAScalarProperty(object p0, object p1);
    internal static string DbEntityEntry_NotAComplexProperty(object p0, object p1);
    internal static string DbEntityEntry_NotAProperty(object p0, object p1);
    internal static string DbEntityEntry_DottedPartNotComplex(object p0, object p1, object p2);
    internal static string DbEntityEntry_DottedPathMustBeProperty(object p0);
    internal static string DbEntityEntry_WrongGenericForNavProp(object p0, object p1, object p2, object p3);
    internal static string DbEntityEntry_WrongGenericForCollectionNavProp(object p0, object p1, object p2, object p3);
    internal static string DbEntityEntry_WrongGenericForProp(object p0, object p1, object p2, object p3);
    internal static string DbEntityEntry_BadPropertyExpression(object p0, object p1);
    internal static string get_DbContext_IndependentAssociationUpdateException();
    internal static string DbPropertyValues_CannotGetValuesForState(object p0, object p1);
    internal static string DbPropertyValues_CannotSetNullValue(object p0, object p1, object p2);
    internal static string DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(object p0, object p1);
    internal static string DbPropertyValues_WrongTypeForAssignment(object p0, object p1, object p2, object p3);
    internal static string get_DbPropertyValues_PropertyValueNamesAreReadonly();
    internal static string DbPropertyValues_PropertyDoesNotExist(object p0, object p1);
    internal static string DbPropertyValues_AttemptToSetValuesFromWrongObject(object p0, object p1);
    internal static string DbPropertyValues_AttemptToSetValuesFromWrongType(object p0, object p1);
    internal static string get_DbPropertyValues_AttemptToSetNonValuesOnComplexProperty();
    internal static string DbPropertyValues_ComplexObjectCannotBeNull(object p0, object p1);
    internal static string DbPropertyValues_NestedPropertyValuesNull(object p0, object p1);
    internal static string DbPropertyValues_CannotSetPropertyOnNullCurrentValue(object p0, object p1);
    internal static string DbPropertyValues_CannotSetPropertyOnNullOriginalValue(object p0, object p1);
    internal static string DatabaseInitializationStrategy_ModelMismatch(object p0);
    internal static string Database_DatabaseAlreadyExists(object p0);
    internal static string get_Database_NonCodeFirstCompatibilityCheck();
    internal static string get_Database_NoDatabaseMetadata();
    internal static string Database_BadLegacyInitializerEntry(object p0, object p1);
    internal static string Database_InitializeFromLegacyConfigFailed(object p0, object p1);
    internal static string Database_InitializeFromConfigFailed(object p0, object p1);
    internal static string ContextConfiguredMultipleTimes(object p0);
    internal static string SetConnectionFactoryFromConfigFailed(object p0);
    internal static string get_DbContext_ContextUsedInModelCreating();
    internal static string get_DbContext_MESTNotSupported();
    internal static string get_DbContext_Disposed();
    internal static string get_DbContext_ProviderReturnedNullConnection();
    internal static string DbContext_ProviderNameMissing(object p0);
    internal static string get_DbContext_ConnectionFactoryReturnedNullConnection();
    internal static string get_DbSet_WrongNumberOfKeyValuesPassed();
    internal static string get_DbSet_WrongKeyValueType();
    internal static string DbSet_WrongEntityTypeFound(object p0, object p1);
    internal static string get_DbSet_MultipleAddedEntitiesFound();
    internal static string DbSet_DbSetUsedWithComplexType(object p0);
    internal static string DbSet_PocoAndNonPocoMixedInSameAssembly(object p0);
    internal static string DbSet_EntityTypeNotInModel(object p0);
    internal static string get_DbQuery_BindingToDbQueryNotSupported();
    internal static string get_DbExtensions_InvalidIncludePathExpression();
    internal static string DbContext_ConnectionStringNotFound(object p0);
    internal static string get_DbContext_ConnectionHasModel();
    internal static string DbCollectionEntry_CannotSetCollectionProp(object p0, object p1);
    internal static string get_CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported();
    internal static string Mapping_MESTNotSupported(object p0, object p1, object p2);
    internal static string DbModelBuilder_MissingRequiredCtor(object p0);
    internal static string get_DbEntityValidationException_ValidationFailed();
    internal static string DbUnexpectedValidationException_ValidationAttribute(object p0, object p1);
    internal static string DbUnexpectedValidationException_IValidatableObject(object p0, object p1);
    internal static string SqlConnectionFactory_MdfNotSupported(object p0);
    internal static string get_Database_InitializationException();
    internal static string get_EdmxWriter_EdmxFromObjectContextNotSupported();
    internal static string get_EdmxWriter_EdmxFromModelFirstNotSupported();
    internal static string get_EdmxWriter_EdmxFromRawCompiledModelNotSupported();
    internal static string get_UnintentionalCodeFirstException_Message();
    internal static string DbContextServices_MissingDefaultCtor(object p0);
    internal static string get_CannotCallGenericSetWithProxyType();
    internal static string EdmModel_Validator_Semantic_SystemNamespaceEncountered(object p0);
    internal static string EdmModel_Validator_Semantic_SimilarRelationshipEnd(object p0, object p1, object p2, object p3, object p4);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetNameReference(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_ConcurrencyRedefinedOnSubTypeOfEntitySetType(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_EntitySetTypeHasNoKeys(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_DuplicateEndName(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidCollectionKindNotCollection(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidCollectionKindNotV1_1(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypeAbstract(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidKeyNullablePart(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntityKeyMustBeScalar(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_KeyMissingOnEntityType(object p0);
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole(object p0, object p1, object p2);
    internal static string get_EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame();
    internal static string get_EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation();
    internal static string EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate(object p0);
    internal static string EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNullableV1(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV1(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV2(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidToPropertyInRelationshipConstraint(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeMany(object p0, object p1);
    internal static string get_EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint();
    internal static string EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint(object p0, object p1, object p2, object p3, object p4);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraint(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_NullableComplexType(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName(object p0);
    internal static string EdmModel_Validator_Semantic_TypeNameAlreadyDefinedDuplicate(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_PropertyNameAlreadyDefinedDuplicate(object p0);
    internal static string EdmModel_Validator_Semantic_CycleInTypeHierarchy(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType_V1_1(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType_V3(object p0);
    internal static string get_EdmModel_Validator_Semantic_ComposableFunctionImportsNotSupportedForSchemaVersion();
    internal static string get_EdmModel_Validator_Syntactic_MissingName();
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong(object p0);
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed(object p0);
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationType_AssociationEndMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentEndMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty();
    internal static string get_EdmModel_Validator_Syntactic_EdmNavigationProperty_AssociationMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmNavigationProperty_ResultEndMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationEnd_EntityTypeMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmEntitySet_ElementTypeMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationSet_ElementTypeMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationSet_SourceSetMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmAssociationSet_TargetSetMustNotBeNull();
    internal static string get_EdmModel_Validator_Syntactic_EdmTypeReferenceNotValid();
    internal static string MetadataItem_InvalidDataSpace(object p0, object p1);
    internal static string get_EdmModel_AddItem_NonMatchingNamespace();
    internal static string get_Serializer_OneNamespaceAndOneContainer();
    internal static string MaxLengthAttribute_ValidationError(object p0, object p1);
    internal static string get_MaxLengthAttribute_InvalidMaxLength();
    internal static string MinLengthAttribute_ValidationError(object p0, object p1);
    internal static string get_MinLengthAttribute_InvalidMinLength();
    internal static string DbConnectionInfo_ConnectionStringNotFound(object p0);
    internal static string get_EagerInternalContext_CannotSetConnectionInfo();
    internal static string get_LazyInternalContext_CannotReplaceEfConnectionWithDbConnection();
    internal static string get_LazyInternalContext_CannotReplaceDbConnectionWithEfConnection();
    internal static string EntityKey_EntitySetDoesNotMatch(object p0);
    internal static string EntityKey_IncorrectNumberOfKeyValuePairs(object p0, object p1, object p2);
    internal static string EntityKey_IncorrectValueType(object p0, object p1, object p2);
    internal static string EntityKey_NoCorrespondingOSpaceTypeForEnumKeyMember(object p0, object p1);
    internal static string EntityKey_MissingKeyValue(object p0, object p1);
    internal static string get_EntityKey_NoNullsAllowedInKeyValuePairs();
    internal static string get_EntityKey_UnexpectedNull();
    internal static string EntityKey_DoesntMatchKeyOnEntity(object p0);
    internal static string get_EntityKey_EntityKeyMustHaveValues();
    internal static string get_EntityKey_InvalidQualifiedEntitySetName();
    internal static string get_EntityKey_MissingEntitySetName();
    internal static string EntityKey_InvalidName(object p0);
    internal static string get_EntityKey_CannotChangeKey();
    internal static string get_EntityTypesDoNotAgree();
    internal static string EntityKey_NullKeyValue(object p0, object p1);
    internal static string get_EdmMembersDefiningTypeDoNotAgreeWithMetadataType();
    internal static string CannotCallNoncomposableFunction(object p0);
    internal static string EntityClient_ConnectionStringMissingInfo(object p0);
    internal static string get_EntityClient_ValueNotString();
    internal static string EntityClient_KeywordNotSupported(object p0);
    internal static string get_EntityClient_NoCommandText();
    internal static string get_EntityClient_ConnectionStringNeededBeforeOperation();
    internal static string get_EntityClient_ConnectionNotOpen();
    internal static string EntityClient_DuplicateParameterNames(object p0);
    internal static string get_EntityClient_NoConnectionForCommand();
    internal static string get_EntityClient_NoConnectionForAdapter();
    internal static string get_EntityClient_ClosedConnectionForUpdate();
    internal static string get_EntityClient_InvalidNamedConnection();
    internal static string EntityClient_NestedNamedConnection(object p0);
    internal static string EntityClient_InvalidStoreProvider(object p0);
    internal static string get_EntityClient_DataReaderIsStillOpen();
    internal static string get_EntityClient_SettingsCannotBeChangedOnOpenConnection();
    internal static string EntityClient_ExecutingOnClosedConnection(object p0);
    internal static string get_EntityClient_ConnectionStateClosed();
    internal static string get_EntityClient_ConnectionStateBroken();
    internal static string get_EntityClient_CannotCloneStoreProvider();
    internal static string get_EntityClient_UnsupportedCommandType();
    internal static string get_EntityClient_ErrorInClosingConnection();
    internal static string get_EntityClient_ErrorInBeginningTransaction();
    internal static string get_EntityClient_ExtraParametersWithNamedConnection();
    internal static string get_EntityClient_CommandDefinitionPreparationFailed();
    internal static string get_EntityClient_CommandDefinitionExecutionFailed();
    internal static string get_EntityClient_CommandExecutionFailed();
    internal static string get_EntityClient_StoreReaderFailed();
    internal static string EntityClient_FailedToGetInformation(object p0);
    internal static string get_EntityClient_TooFewColumns();
    internal static string EntityClient_InvalidParameterName(object p0);
    internal static string get_EntityClient_EmptyParameterName();
    internal static string EntityClient_ReturnedNullOnProviderMethod(object p0, object p1);
    internal static string get_EntityClient_CannotDeduceDbType();
    internal static string EntityClient_InvalidParameterDirection(object p0);
    internal static string EntityClient_UnknownParameterType(object p0);
    internal static string EntityClient_UnsupportedDbType(object p0, object p1);
    internal static string EntityClient_IncompatibleNavigationPropertyResult(object p0, object p1);
    internal static string get_EntityClient_TransactionAlreadyStarted();
    internal static string get_EntityClient_InvalidTransactionForCommand();
    internal static string get_EntityClient_NoStoreConnectionForUpdate();
    internal static string get_EntityClient_CommandTreeMetadataIncompatible();
    internal static string get_EntityClient_ProviderGeneralError();
    internal static string EntityClient_ProviderSpecificError(object p0);
    internal static string get_EntityClient_FunctionImportEmptyCommandText();
    internal static string EntityClient_UnableToFindFunctionImportContainer(object p0);
    internal static string EntityClient_UnableToFindFunctionImport(object p0, object p1);
    internal static string EntityClient_FunctionImportMustBeNonComposable(object p0);
    internal static string EntityClient_UnmappedFunctionImport(object p0);
    internal static string get_EntityClient_InvalidStoredProcedureCommandText();
    internal static string EntityClient_ItemCollectionsNotRegisteredInWorkspace(object p0);
    internal static string EntityClient_DbConnectionHasNoProvider(object p0);
    internal static string get_EntityClient_RequiresNonStoreCommandTree();
    internal static string get_EntityClient_CannotReprepareCommandDefinitionBasedCommand();
    internal static string EntityClient_EntityParameterEdmTypeNotScalar(object p0);
    internal static string EntityClient_EntityParameterInconsistentEdmType(object p0, object p1);
    internal static string get_EntityClient_CannotGetCommandText();
    internal static string get_EntityClient_CannotSetCommandText();
    internal static string get_EntityClient_CannotGetCommandTree();
    internal static string get_EntityClient_CannotSetCommandTree();
    internal static string get_ELinq_ExpressionMustBeIQueryable();
    internal static string ELinq_UnsupportedExpressionType(object p0);
    internal static string ELinq_UnsupportedUseOfContextParameter(object p0);
    internal static string ELinq_UnboundParameterExpression(object p0);
    internal static string get_ELinq_UnsupportedConstructor();
    internal static string get_ELinq_UnsupportedInitializers();
    internal static string get_ELinq_UnsupportedBinding();
    internal static string ELinq_UnsupportedMethod(object p0);
    internal static string ELinq_UnsupportedMethodSuggestedAlternative(object p0, object p1);
    internal static string get_ELinq_ThenByDoesNotFollowOrderBy();
    internal static string ELinq_UnrecognizedMember(object p0);
    internal static string ELinq_UnresolvableFunctionForMethod(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMethodAmbiguousMatch(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMethodNotFound(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMember(object p0, object p1);
    internal static string ELinq_UnresolvableStoreFunctionForMember(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForExpression(object p0);
    internal static string ELinq_UnresolvableStoreFunctionForExpression(object p0);
    internal static string ELinq_UnsupportedType(object p0);
    internal static string ELinq_UnsupportedNullConstant(object p0);
    internal static string ELinq_UnsupportedConstant(object p0);
    internal static string ELinq_UnsupportedCast(object p0, object p1);
    internal static string ELinq_UnsupportedIsOrAs(object p0, object p1, object p2);
    internal static string get_ELinq_UnsupportedQueryableMethod();
    internal static string ELinq_InvalidOfTypeResult(object p0);
    internal static string ELinq_UnsupportedNominalType(object p0);
    internal static string ELinq_UnsupportedEnumerableType(object p0);
    internal static string ELinq_UnsupportedHeterogeneousInitializers(object p0);
    internal static string get_ELinq_UnsupportedDifferentContexts();
    internal static string get_ELinq_UnsupportedCastToDecimal();
    internal static string ELinq_UnsupportedKeySelector(object p0);
    internal static string get_ELinq_CreateOrderedEnumerableNotSupported();
    internal static string ELinq_UnsupportedPassthrough(object p0, object p1);
    internal static string ELinq_UnexpectedTypeForNavigationProperty(object p0, object p1, object p2, object p3);
    internal static string get_ELinq_SkipWithoutOrder();
    internal static string get_ELinq_PropertyIndexNotSupported();
    internal static string ELinq_NotPropertyOrField(object p0);
    internal static string ELinq_UnsupportedStringRemoveCase(object p0, object p1);
    internal static string ELinq_UnsupportedTrimStartTrimEndCase(object p0);
    internal static string ELinq_UnsupportedVBDatePartNonConstantInterval(object p0, object p1);
    internal static string ELinq_UnsupportedVBDatePartInvalidInterval(object p0, object p1, object p2);
    internal static string ELinq_UnsupportedAsUnicodeAndAsNonUnicode(object p0);
    internal static string ELinq_UnsupportedComparison(object p0);
    internal static string ELinq_UnsupportedRefComparison(object p0, object p1);
    internal static string ELinq_UnsupportedRowComparison(object p0);
    internal static string ELinq_UnsupportedRowMemberComparison(object p0);
    internal static string ELinq_UnsupportedRowTypeComparison(object p0);
    internal static string get_ELinq_AnonymousType();
    internal static string get_ELinq_ClosureType();
    internal static string ELinq_UnhandledExpressionType(object p0);
    internal static string ELinq_UnhandledBindingType(object p0);
    internal static string get_ELinq_UnsupportedNestedFirst();
    internal static string get_ELinq_UnsupportedNestedSingle();
    internal static string get_ELinq_UnsupportedInclude();
    internal static string get_ELinq_UnsupportedMergeAs();
    internal static string get_ELinq_MethodNotDirectlyCallable();
    internal static string get_ELinq_CycleDetected();
    internal static string ELinq_DbFunctionAttributedFunctionWithWrongReturnType(object p0, object p1);
    internal static string get_ELinq_DbFunctionDirectCall();
    internal static string ELinq_HasFlagArgumentAndSourceTypeMismatch(object p0, object p1);
    internal static string Elinq_ToStringNotSupportedForType(object p0);
    internal static string get_Elinq_ToStringNotSupportedForEnumsWithFlags();
    internal static string CompiledELinq_UnsupportedParameterTypes(object p0);
    internal static string CompiledELinq_UnsupportedNamedParameterType(object p0, object p1);
    internal static string CompiledELinq_UnsupportedNamedParameterUseAsType(object p0, object p1);
    internal static string Update_UnsupportedExpressionKind(object p0, object p1);
    internal static string Update_UnsupportedCastArgument(object p0);
    internal static string Update_UnsupportedExtentType(object p0, object p1);
    internal static string get_Update_ConstraintCycle();
    internal static string Update_UnsupportedJoinType(object p0);
    internal static string Update_UnsupportedProjection(object p0);
    internal static string Update_ConcurrencyError(object p0);
    internal static string Update_MissingEntity(object p0, object p1);
    internal static string Update_RelationshipCardinalityConstraintViolation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string get_Update_GeneralExecutionException();
    internal static string Update_MissingRequiredEntity(object p0, object p1, object p2);
    internal static string Update_RelationshipCardinalityViolation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Update_NotSupportedComputedKeyColumn(object p0, object p1, object p2, object p3, object p4);
    internal static string get_Update_AmbiguousServerGenIdentifier();
    internal static string get_Update_WorkspaceMismatch();
    internal static string Update_MissingRequiredRelationshipValue(object p0, object p1);
    internal static string Update_MissingResultColumn(object p0);
    internal static string Update_NullReturnValueForNonNullableMember(object p0, object p1);
    internal static string Update_ReturnValueHasUnexpectedType(object p0, object p1, object p2, object p3);
    internal static string Update_UnableToConvertRowsAffectedParameter(object p0, object p1);
    internal static string Update_MappingNotFound(object p0);
    internal static string Update_ModifyingIdentityColumn(object p0, object p1, object p2);
    internal static string Update_GeneratedDependent(object p0);
    internal static string get_Update_ReferentialConstraintIntegrityViolation();
    internal static string get_Update_ErrorLoadingRecord();
    internal static string Update_NullValue(object p0);
    internal static string get_Update_CircularRelationships();
    internal static string Update_RelationshipCardinalityConstraintViolationSingleValue(object p0, object p1, object p2, object p3, object p4);
    internal static string Update_MissingFunctionMapping(object p0, object p1, object p2);
    internal static string get_Update_InvalidChanges();
    internal static string get_Update_DuplicateKeys();
    internal static string Update_AmbiguousForeignKey(object p0);
    internal static string Update_InsertingOrUpdatingReferenceToDeletedEntity(object p0);
    internal static string get_ViewGen_Extent();
    internal static string get_ViewGen_Null();
    internal static string get_ViewGen_CommaBlank();
    internal static string get_ViewGen_Entities();
    internal static string get_ViewGen_Tuples();
    internal static string get_ViewGen_NotNull();
    internal static string ViewGen_NegatedCellConstant(object p0);
    internal static string get_ViewGen_Error();
    internal static string Viewgen_CannotGenerateQueryViewUnderNoValidation(object p0);
    internal static string ViewGen_Missing_Sets_Mapping(object p0);
    internal static string ViewGen_Missing_Type_Mapping(object p0);
    internal static string ViewGen_Missing_Set_Mapping(object p0);
    internal static string ViewGen_Concurrency_Derived_Class(object p0, object p1, object p2);
    internal static string ViewGen_Concurrency_Invalid_Condition(object p0, object p1);
    internal static string ViewGen_TableKey_Missing(object p0, object p1);
    internal static string ViewGen_EntitySetKey_Missing(object p0, object p1);
    internal static string ViewGen_AssociationSetKey_Missing(object p0, object p1, object p2);
    internal static string ViewGen_Cannot_Recover_Attributes(object p0, object p1, object p2);
    internal static string ViewGen_Cannot_Recover_Types(object p0, object p1);
    internal static string ViewGen_Cannot_Disambiguate_MultiConstant(object p0, object p1);
    internal static string ViewGen_No_Default_Value(object p0, object p1);
    internal static string ViewGen_No_Default_Value_For_Configuration(object p0);
    internal static string ViewGen_KeyConstraint_Violation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string ViewGen_KeyConstraint_Update_Violation_EntitySet(object p0, object p1, object p2, object p3);
    internal static string ViewGen_KeyConstraint_Update_Violation_AssociationSet(object p0, object p1, object p2);
    internal static string ViewGen_AssociationEndShouldBeMappedToKey(object p0, object p1);
    internal static string ViewGen_Duplicate_CProperties(object p0);
    internal static string ViewGen_Duplicate_CProperties_IsMapped(object p0, object p1);
    internal static string ViewGen_NotNull_No_Projected_Slot(object p0);
    internal static string ViewGen_InvalidCondition(object p0);
    internal static string ViewGen_NonKeyProjectedWithOverlappingPartitions(object p0);
    internal static string ViewGen_CQ_PartitionConstraint(object p0);
    internal static string ViewGen_CQ_DomainConstraint(object p0);
    internal static string ViewGen_ErrorLog(object p0);
    internal static string ViewGen_ErrorLog2(object p0);
    internal static string ViewGen_Foreign_Key_Missing_Table_Mapping(object p0, object p1);
    internal static string ViewGen_Foreign_Key_ParentTable_NotMappedToEnd(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string ViewGen_Foreign_Key(object p0, object p1, object p2, object p3, object p4);
    internal static string ViewGen_Foreign_Key_UpperBound_MustBeOne(object p0, object p1, object p2);
    internal static string ViewGen_Foreign_Key_LowerBound_MustBeOne(object p0, object p1, object p2);
    internal static string ViewGen_Foreign_Key_Missing_Relationship_Mapping(object p0);
    internal static string ViewGen_Foreign_Key_Not_Guaranteed_InCSpace(object p0);
    internal static string ViewGen_Foreign_Key_ColumnOrder_Incorrect(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8);
    internal static string ViewGen_AssociationSet_AsUserString(object p0, object p1, object p2);
    internal static string ViewGen_AssociationSet_AsUserString_Negated(object p0, object p1, object p2);
    internal static string ViewGen_EntitySet_AsUserString(object p0, object p1);
    internal static string ViewGen_EntitySet_AsUserString_Negated(object p0, object p1);
    internal static string get_ViewGen_EntityInstanceToken();
    internal static string Viewgen_ConfigurationErrorMsg(object p0);
    internal static string ViewGen_HashOnMappingClosure_Not_Matching(object p0);
    internal static string Viewgen_RightSideNotDisjoint(object p0);
    internal static string Viewgen_QV_RewritingNotFound(object p0);
    internal static string Viewgen_NullableMappingForNonNullableColumn(object p0, object p1);
    internal static string Viewgen_ErrorPattern_ConditionMemberIsMapped(object p0);
    internal static string Viewgen_ErrorPattern_DuplicateConditionValue(object p0);
    internal static string Viewgen_ErrorPattern_TableMappedToMultipleES(object p0, object p1, object p2);
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Eq();
    internal static string Viewgen_ErrorPattern_NotNullConditionMappedToNullableMember(object p0, object p1);
    internal static string Viewgen_ErrorPattern_Partition_MultipleTypesMappedToSameTable_WithoutCondition(object p0, object p1);
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Subs_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Subs();
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Unk();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Disj();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Subs_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Subs();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Unk();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Unk_Association();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Disj();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Eq();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Eq_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Unk();
    internal static string get_Viewgen_NoJoinKeyOrFK();
    internal static string Viewgen_MultipleFragmentsBetweenCandSExtentWithDistinct(object p0, object p1);
    internal static string get_Validator_EmptyIdentity();
    internal static string get_Validator_CollectionHasNoTypeUsage();
    internal static string Validator_NoKeyMembers(object p0);
    internal static string get_Validator_FacetTypeIsNull();
    internal static string get_Validator_MemberHasNullDeclaringType();
    internal static string get_Validator_MemberHasNullTypeUsage();
    internal static string get_Validator_ItemAttributeHasNullTypeUsage();
    internal static string get_Validator_RefTypeHasNullEntityType();
    internal static string get_Validator_TypeUsageHasNullEdmType();
    internal static string get_Validator_BaseTypeHasMemberOfSameName();
    internal static string get_Validator_CollectionTypesCannotHaveBaseType();
    internal static string get_Validator_RefTypesCannotHaveBaseType();
    internal static string get_Validator_TypeHasNoName();
    internal static string get_Validator_TypeHasNoNamespace();
    internal static string get_Validator_FacetHasNoName();
    internal static string get_Validator_MemberHasNoName();
    internal static string get_Validator_MetadataPropertyHasNoName();
    internal static string Validator_NullableEntityKeyProperty(object p0, object p1);
    internal static string Validator_OSpace_InvalidNavPropReturnType(object p0, object p1, object p2);
    internal static string Validator_OSpace_ScalarPropertyNotPrimitive(object p0, object p1, object p2);
    internal static string Validator_OSpace_ComplexPropertyNotComplex(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MultipleTypesWithSameName(object p0);
    internal static string Validator_OSpace_Convention_NonPrimitiveTypeProperty(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MissingRequiredProperty(object p0, object p1);
    internal static string Validator_OSpace_Convention_BaseTypeIncompatible(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MissingOSpaceType(object p0);
    internal static string Validator_OSpace_Convention_RelationshipNotLoaded(object p0, object p1);
    internal static string Validator_OSpace_Convention_AttributeAssemblyReferenced(object p0);
    internal static string Validator_OSpace_Convention_ScalarPropertyMissginGetterOrSetter(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_AmbiguousClrType(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_Struct(object p0, object p1);
    internal static string Validator_OSpace_Convention_BaseTypeNotLoaded(object p0, object p1);
    internal static string Validator_OSpace_Convention_SSpaceOSpaceTypeMismatch(object p0, object p1);
    internal static string get_Validator_OSpace_Convention_NonMatchingUnderlyingTypes();
    internal static string Validator_UnsupportedEnumUnderlyingType(object p0);
    internal static string get_ExtraInfo();
    internal static string get_Metadata_General_Error();
    internal static string InvalidNumberOfParametersForAggregateFunction(object p0);
    internal static string InvalidParameterTypeForAggregateFunction(object p0, object p1);
    internal static string InvalidSchemaEncountered(object p0);
    internal static string SystemNamespaceEncountered(object p0);
    internal static string NoCollectionForSpace(object p0);
    internal static string get_OperationOnReadOnlyCollection();
    internal static string get_OperationOnReadOnlyItem();
    internal static string get_EntitySetInAnotherContainer();
    internal static string InvalidKeyMember(object p0);
    internal static string InvalidFileExtension(object p0, object p1, object p2);
    internal static string NewTypeConflictsWithExistingType(object p0, object p1);
    internal static string get_NotValidInputPath();
    internal static string get_UnableToDetermineApplicationContext();
    internal static string get_WildcardEnumeratorReturnedNull();
    internal static string InvalidUseOfWebPath(object p0);
    internal static string UnableToFindReflectedType(object p0, object p1);
    internal static string AssemblyMissingFromAssembliesToConsider(object p0);
    internal static string get_UnableToLoadResource();
    internal static string EdmVersionNotSupportedByRuntime(object p0, object p1);
    internal static string get_AtleastOneSSDLNeeded();
    internal static string get_InvalidMetadataPath();
    internal static string UnableToResolveAssembly(object p0);
    internal static string DuplicatedFunctionoverloads(object p0, object p1);
    internal static string EntitySetNotInCSPace(object p0);
    internal static string TypeNotInEntitySet(object p0, object p1, object p2);
    internal static string TypeNotInAssociationSet(object p0, object p1, object p2);
    internal static string DifferentSchemaVersionInCollection(object p0, object p1, object p2);
    internal static string InvalidCollectionForMapping(object p0);
    internal static string get_OnlyStoreConnectionsSupported();
    internal static string StoreItemCollectionMustHaveOneArtifact(object p0);
    internal static string CheckArgumentContainsNullFailed(object p0);
    internal static string InvalidRelationshipSetName(object p0);
    internal static string InvalidEntitySetName(object p0);
    internal static string OnlyFunctionImportsCanBeAddedToEntityContainer(object p0);
    internal static string ItemInvalidIdentity(object p0);
    internal static string ItemDuplicateIdentity(object p0);
    internal static string get_NotStringTypeForTypeUsage();
    internal static string get_NotBinaryTypeForTypeUsage();
    internal static string get_NotDateTimeTypeForTypeUsage();
    internal static string get_NotDateTimeOffsetTypeForTypeUsage();
    internal static string get_NotTimeTypeForTypeUsage();
    internal static string get_NotDecimalTypeForTypeUsage();
    internal static string get_ArrayTooSmall();
    internal static string MoreThanOneItemMatchesIdentity(object p0);
    internal static string MissingDefaultValueForConstantFacet(object p0, object p1);
    internal static string MinAndMaxValueMustBeSameForConstantFacet(object p0, object p1);
    internal static string BothMinAndMaxValueMustBeSpecifiedForNonConstantFacet(object p0, object p1);
    internal static string MinAndMaxValueMustBeDifferentForNonConstantFacet(object p0, object p1);
    internal static string MinAndMaxMustBePositive(object p0, object p1);
    internal static string MinMustBeLessThanMax(object p0, object p1, object p2);
    internal static string SameRoleNameOnRelationshipAttribute(object p0, object p1);
    internal static string RoleTypeInEdmRelationshipAttributeIsInvalidType(object p0, object p1, object p2);
    internal static string TargetRoleNameInNavigationPropertyNotValid(object p0, object p1, object p2, object p3);
    internal static string RelationshipNameInNavigationPropertyNotValid(object p0, object p1, object p2);
    internal static string NestedClassNotSupported(object p0, object p1);
    internal static string NullParameterForEdmRelationshipAttribute(object p0, object p1);
    internal static string NullRelationshipNameforEdmRelationshipAttribute(object p0);
    internal static string NavigationPropertyRelationshipEndTypeMismatch(object p0, object p1, object p2, object p3, object p4);
    internal static string AllArtifactsMustTargetSameProvider_InvariantName(object p0, object p1);
    internal static string AllArtifactsMustTargetSameProvider_ManifestToken(object p0, object p1);
    internal static string get_ProviderManifestTokenNotFound();
    internal static string get_FailedToRetrieveProviderManifest();
    internal static string get_InvalidMaxLengthSize();
    internal static string get_ArgumentMustBeCSpaceType();
    internal static string get_ArgumentMustBeOSpaceType();
    internal static string FailedToFindOSpaceTypeMapping(object p0);
    internal static string FailedToFindCSpaceTypeMapping(object p0);
    internal static string FailedToFindClrTypeMapping(object p0);
    internal static string GenericTypeNotSupported(object p0);
    internal static string InvalidEDMVersion(object p0);
    internal static string get_Mapping_General_Error();
    internal static string get_Mapping_InvalidContent_General();
    internal static string Mapping_InvalidContent_EntityContainer(object p0);
    internal static string Mapping_InvalidContent_StorageEntityContainer(object p0);
    internal static string Mapping_AlreadyMapped_StorageEntityContainer(object p0);
    internal static string Mapping_InvalidContent_Entity_Set(object p0);
    internal static string Mapping_InvalidContent_Entity_Type(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_FunctionMapping(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_Type(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_IsOfType(object p0);
    internal static string Mapping_InvalidContent_Entity_Type_For_Entity_Set(object p0, object p1, object p2);
    internal static string Mapping_Invalid_Association_Type_For_Association_Set(object p0, object p1, object p2);
    internal static string Mapping_InvalidContent_Table(object p0);
    internal static string Mapping_InvalidContent_Complex_Type(object p0);
    internal static string Mapping_InvalidContent_Association_Set(object p0);
    internal static string Mapping_InvalidContent_AssociationSet_Condition(object p0);
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set(object p0);
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set_PKtoPK(object p0);
    internal static string Mapping_InvalidContent_Association_Type(object p0);
    internal static string Mapping_InvalidContent_EndProperty(object p0);
    internal static string get_Mapping_InvalidContent_Association_Type_Empty();
    internal static string get_Mapping_InvalidContent_Table_Expected();
    internal static string Mapping_InvalidContent_Cdm_Member(object p0);
    internal static string Mapping_InvalidContent_Column(object p0);
    internal static string Mapping_InvalidContent_End(object p0);
    internal static string get_Mapping_InvalidContent_Container_SubElement();
    internal static string Mapping_InvalidContent_Duplicate_Cdm_Member(object p0);
    internal static string Mapping_InvalidContent_Duplicate_Condition_Member(object p0);
    internal static string get_Mapping_InvalidContent_ConditionMapping_Both_Members();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Either_Members();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Both_Values();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Either_Values();
    internal static string get_Mapping_InvalidContent_ConditionMapping_NonScalar();
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidPrimitiveTypeKind(object p0, object p1);
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidMember(object p0);
    internal static string Mapping_InvalidContent_ConditionMapping_Computed(object p0);
    internal static string Mapping_InvalidContent_Emtpty_SetMap(object p0);
    internal static string get_Mapping_InvalidContent_TypeMapping_QueryView();
    internal static string Mapping_Default_OCMapping_Clr_Member(object p0, object p1, object p2);
    internal static string Mapping_Default_OCMapping_Clr_Member2(object p0, object p1, object p2);
    internal static string Mapping_Default_OCMapping_Invalid_MemberType(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_MemberKind_Mismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_MultiplicityMismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_Member_Count_Mismatch(object p0, object p1);
    internal static string Mapping_Default_OCMapping_Member_Type_Mismatch(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7);
    internal static string Mapping_Enum_OCMapping_UnderlyingTypesMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_Enum_OCMapping_MemberMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_NotFound_EntityContainer(object p0);
    internal static string Mapping_Duplicate_CdmAssociationSet_StorageMap(object p0);
    internal static string Mapping_Invalid_CSRootElementMissing(object p0, object p1, object p2);
    internal static string get_Mapping_ConditionValueTypeMismatch();
    internal static string Mapping_Storage_InvalidSpace(object p0);
    internal static string Mapping_Invalid_Member_Mapping(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Invalid_CSide_ScalarProperty(object p0);
    internal static string Mapping_Duplicate_Type(object p0);
    internal static string Mapping_Duplicate_PropertyMap_CaseInsensitive(object p0);
    internal static string Mapping_Enum_EmptyValue(object p0);
    internal static string Mapping_Enum_InvalidValue(object p0);
    internal static string Mapping_InvalidMappingSchema_Parsing(object p0);
    internal static string Mapping_InvalidMappingSchema_validation(object p0);
    internal static string Mapping_Object_InvalidType(object p0);
    internal static string Mapping_Provider_WrongConnectionType(object p0);
    internal static string Mapping_Views_For_Extent_Not_Generated(object p0, object p1);
    internal static string Mapping_TableName_QueryView(object p0);
    internal static string Mapping_Empty_QueryView(object p0);
    internal static string Mapping_Empty_QueryView_OfType(object p0, object p1);
    internal static string Mapping_Empty_QueryView_OfTypeOnly(object p0, object p1);
    internal static string Mapping_QueryView_PropertyMaps(object p0);
    internal static string Mapping_Invalid_QueryView(object p0, object p1);
    internal static string Mapping_Invalid_QueryView2(object p0, object p1);
    internal static string Mapping_Invalid_QueryView_Type(object p0);
    internal static string get_Mapping_TypeName_For_First_QueryView();
    internal static string Mapping_AllQueryViewAtCompileTime(object p0);
    internal static string Mapping_QueryViewMultipleTypeInTypeName(object p0);
    internal static string Mapping_QueryView_Duplicate_OfType(object p0, object p1);
    internal static string Mapping_QueryView_Duplicate_OfTypeOnly(object p0, object p1);
    internal static string Mapping_QueryView_TypeName_Not_Defined(object p0);
    internal static string Mapping_QueryView_For_Base_Type(object p0, object p1);
    internal static string Mapping_UnsupportedExpressionKind_QueryView(object p0, object p1, object p2);
    internal static string Mapping_UnsupportedFunctionCall_QueryView(object p0, object p1);
    internal static string Mapping_UnsupportedScanTarget_QueryView(object p0, object p1);
    internal static string Mapping_UnsupportedPropertyKind_QueryView(object p0, object p1, object p2);
    internal static string Mapping_UnsupportedInitialization_QueryView(object p0, object p1);
    internal static string Mapping_EntitySetMismatchOnAssociationSetEnd_QueryView(object p0, object p1, object p2, object p3);
    internal static string Mapping_Invalid_Query_Views_MissingSetClosure(object p0);
    internal static string DbMappingViewCacheTypeAttribute_InvalidContextType(object p0);
    internal static string DbMappingViewCacheTypeAttribute_CacheTypeNotFound(object p0);
    internal static string DbMappingViewCacheTypeAttribute_MultipleInstancesWithSameContextType(object p0);
    internal static string get_DbMappingViewCacheFactory_CreateFailure();
    internal static string Generated_View_Type_Super_Class(object p0);
    internal static string Generated_Views_Invalid_Extent(object p0);
    internal static string get_MappingViewCacheFactory_MustNotChange();
    internal static string Mapping_ItemWithSameNameExistsBothInCSpaceAndSSpace(object p0);
    internal static string Mapping_AbstractTypeMappingToNonAbstractType(object p0, object p1);
    internal static string Mapping_EnumTypeMappingToNonEnumType(object p0, object p1);
    internal static string StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping(object p0, object p1, object p2);
    internal static string get_Mapping_InvalidContent_IsTypeOfNotTerminated();
    internal static string Mapping_CannotMapCLRTypeMultipleTimes(object p0);
    internal static string get_Mapping_ModificationFunction_In_Table_Context();
    internal static string get_Mapping_ModificationFunction_Multiple_Types();
    internal static string Mapping_ModificationFunction_UnknownFunction(object p0);
    internal static string Mapping_ModificationFunction_AmbiguousFunction(object p0);
    internal static string Mapping_ModificationFunction_NotValidFunction(object p0);
    internal static string Mapping_ModificationFunction_NotValidFunctionParameter(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_MissingParameter(object p0, object p1);
    internal static string Mapping_ModificationFunction_AssociationSetDoesNotExist(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetRoleDoesNotExist(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetFromRoleIsNotEntitySet(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetCardinality(object p0);
    internal static string Mapping_ModificationFunction_ComplexTypeNotFound(object p0);
    internal static string Mapping_ModificationFunction_WrongComplexType(object p0, object p1);
    internal static string get_Mapping_ModificationFunction_MissingVersion();
    internal static string get_Mapping_ModificationFunction_VersionMustBeOriginal();
    internal static string get_Mapping_ModificationFunction_VersionMustBeCurrent();
    internal static string Mapping_ModificationFunction_ParameterNotFound(object p0, object p1);
    internal static string Mapping_ModificationFunction_PropertyNotFound(object p0, object p1);
    internal static string Mapping_ModificationFunction_PropertyNotKey(object p0, object p1);
    internal static string Mapping_ModificationFunction_ParameterBoundTwice(object p0);
    internal static string Mapping_ModificationFunction_RedundantEntityTypeMapping(object p0);
    internal static string Mapping_ModificationFunction_MissingSetClosure(object p0);
    internal static string Mapping_ModificationFunction_MissingEntityType(object p0);
    internal static string Mapping_ModificationFunction_PropertyParameterTypeMismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_ModificationFunction_AssociationSetAmbiguous(object p0);
    internal static string Mapping_ModificationFunction_MultipleEndsOfAssociationMapped(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_AmbiguousResultBinding(object p0, object p1);
    internal static string Mapping_ModificationFunction_AssociationSetNotMappedForOperation(object p0, object p1, object p2, object p3);
    internal static string Mapping_ModificationFunction_AssociationEndMappingInvalidForEntityType(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_AssociationEndMappingForeignKeyAssociation(object p0);
    internal static string Mapping_StoreTypeMismatch_ScalarPropertyMapping(object p0, object p1);
    internal static string get_Mapping_DistinctFlagInReadWriteContainer();
    internal static string Mapping_ProviderReturnsNullType(object p0);
    internal static string get_Mapping_DifferentEdmStoreVersion();
    internal static string get_Mapping_DifferentMappingEdmStoreVersion();
    internal static string Mapping_FunctionImport_StoreFunctionDoesNotExist(object p0);
    internal static string Mapping_FunctionImport_FunctionImportDoesNotExist(object p0, object p1);
    internal static string Mapping_FunctionImport_FunctionImportMappedMultipleTimes(object p0);
    internal static string Mapping_FunctionImport_TargetFunctionMustBeNonComposable(object p0, object p1);
    internal static string Mapping_FunctionImport_TargetFunctionMustBeComposable(object p0, object p1);
    internal static string Mapping_FunctionImport_TargetParameterHasNoCorrespondingImportParameter(object p0);
    internal static string Mapping_FunctionImport_ImportParameterHasNoCorrespondingTargetParameter(object p0);
    internal static string Mapping_FunctionImport_IncompatibleParameterMode(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_IncompatibleParameterType(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_IncompatibleEnumParameterType(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_RowsAffectedParameterDoesNotExist(object p0, object p1);
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongType(object p0, object p1);
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongMode(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_EntityTypeMappingForFunctionNotReturningEntitySet(object p0, object p1);
    internal static string Mapping_FunctionImport_InvalidContentEntityTypeForEntitySet(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_ConditionValueTypeMismatch(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_UnsupportedType(object p0, object p1);
    internal static string Mapping_FunctionImport_ResultMappingCountDoesNotMatchResultCount(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_MappedTypeDoesNotMatchReturnType(object p0, object p1);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeCTExpected(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeETExpected(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidSType(object p0);
    internal static string Mapping_FunctionImport_PropertyNotMapped(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_ImplicitMappingForAbstractReturnType(object p0, object p1);
    internal static string Mapping_FunctionImport_ScalarMappingToMulticolumnTVF(object p0, object p1);
    internal static string Mapping_FunctionImport_ScalarMappingTypeMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_UnreachableType(object p0, object p1);
    internal static string Mapping_FunctionImport_UnreachableIsTypeOf(object p0, object p1);
    internal static string Mapping_FunctionImport_FunctionAmbiguous(object p0);
    internal static string Mapping_FunctionImport_CannotInferTargetFunctionKeys(object p0);
    internal static string get_Entity_EntityCantHaveMultipleChangeTrackers();
    internal static string ComplexObject_NullableComplexTypesNotSupported(object p0);
    internal static string get_ComplexObject_ComplexObjectAlreadyAttachedToParent();
    internal static string ComplexObject_ComplexChangeRequestedOnScalarProperty(object p0);
    internal static string ObjectStateEntry_SetModifiedOnInvalidProperty(object p0);
    internal static string get_ObjectStateEntry_OriginalValuesDoesNotExist();
    internal static string get_ObjectStateEntry_CurrentValuesDoesNotExist();
    internal static string get_ObjectStateEntry_InvalidState();
    internal static string ObjectStateEntry_CannotModifyKeyProperty(object p0);
    internal static string get_ObjectStateEntry_CantModifyRelationValues();
    internal static string get_ObjectStateEntry_CantModifyRelationState();
    internal static string get_ObjectStateEntry_CantModifyDetachedDeletedEntries();
    internal static string ObjectStateEntry_SetModifiedStates(object p0);
    internal static string get_ObjectStateEntry_CantSetEntityKey();
    internal static string get_ObjectStateEntry_CannotAccessKeyEntryValues();
    internal static string get_ObjectStateEntry_CannotModifyKeyEntryState();
    internal static string get_ObjectStateEntry_CannotDeleteOnKeyEntry();
    internal static string get_ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging();
    internal static string ObjectStateEntry_ChangeOnUnmappedProperty(object p0);
    internal static string ObjectStateEntry_ChangeOnUnmappedComplexProperty(object p0);
    internal static string ObjectStateEntry_ChangedInDifferentStateFromChanging(object p0, object p1);
    internal static string ObjectStateEntry_UnableToEnumerateCollection(object p0, object p1);
    internal static string get_ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers();
    internal static string get_ObjectStateEntry_InvalidTypeForComplexTypeProperty();
    internal static string ObjectStateEntry_ComplexObjectUsedMultipleTimes(object p0, object p1);
    internal static string ObjectStateEntry_SetOriginalComplexProperties(object p0);
    internal static string ObjectStateEntry_NullOriginalValueForNonNullableProperty(object p0, object p1, object p2);
    internal static string ObjectStateEntry_SetOriginalPrimaryKey(object p0);
    internal static string get_ObjectStateManager_NoEntryExistForEntityKey();
    internal static string ObjectStateManager_NoEntryExistsForObject(object p0);
    internal static string get_ObjectStateManager_EntityNotTracked();
    internal static string get_ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager();
    internal static string ObjectStateManager_ObjectStateManagerContainsThisEntityKey(object p0);
    internal static string ObjectStateManager_DoesnotAllowToReAddUnchangedOrModifiedOrDeletedEntity(object p0);
    internal static string ObjectStateManager_CannotFixUpKeyToExistingValues(object p0);
    internal static string get_ObjectStateManager_KeyPropertyDoesntMatchValueInKey();
    internal static string get_ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach();
    internal static string get_ObjectStateManager_InvalidKey();
    internal static string ObjectStateManager_EntityTypeDoesnotMatchtoEntitySetType(object p0, object p1);
    internal static string get_ObjectStateManager_AcceptChangesEntityKeyIsNotValid();
    internal static string get_ObjectStateManager_EntityConflictsWithKeyEntry();
    internal static string get_ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateEntityDeleted();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateEntityAdded();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateKeyEntry();
    internal static string ObjectStateManager_ConflictingChangesOfRelationshipDetected(object p0, object p1);
    internal static string get_ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations();
    internal static string get_ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid();
    internal static string ObjectContext_ClientEntityRemovedFromStore(object p0);
    internal static string get_ObjectContext_StoreEntityNotPresentInClient();
    internal static string get_ObjectContext_InvalidConnectionString();
    internal static string get_ObjectContext_InvalidConnection();
    internal static string ObjectContext_InvalidDefaultContainerName(object p0);
    internal static string ObjectContext_NthElementInAddedState(object p0);
    internal static string ObjectContext_NthElementIsDuplicate(object p0);
    internal static string ObjectContext_NthElementIsNull(object p0);
    internal static string ObjectContext_NthElementNotInObjectStateManager(object p0);
    internal static string get_ObjectContext_ObjectNotFound();
    internal static string get_ObjectContext_CannotDeleteEntityNotInObjectStateManager();
    internal static string get_ObjectContext_CannotDetachEntityNotInObjectStateManager();
    internal static string ObjectContext_EntitySetNotFoundForName(object p0);
    internal static string ObjectContext_EntityContainerNotFoundForName(object p0);
    internal static string get_ObjectContext_InvalidCommandTimeout();
    internal static string ObjectContext_NoMappingForEntityType(object p0);
    internal static string get_ObjectContext_EntityAlreadyExistsInObjectStateManager();
    internal static string ObjectContext_InvalidEntitySetInKey(object p0, object p1, object p2, object p3);
    internal static string get_ObjectContext_CannotAttachEntityWithoutKey();
    internal static string get_ObjectContext_CannotAttachEntityWithTemporaryKey();
    internal static string get_ObjectContext_EntitySetNameOrEntityKeyRequired();
    internal static string ObjectContext_ExecuteFunctionTypeMismatch(object p0, object p1);
    internal static string ObjectContext_ExecuteFunctionCalledWithScalarFunction(object p0, object p1);
    internal static string ObjectContext_ExecuteFunctionCalledWithNonQueryFunction(object p0);
    internal static string ObjectContext_ExecuteFunctionCalledWithNullParameter(object p0);
    internal static string get_ObjectContext_ContainerQualifiedEntitySetNameRequired();
    internal static string get_ObjectContext_CannotSetDefaultContainerName();
    internal static string get_ObjectContext_QualfiedEntitySetName();
    internal static string ObjectContext_EntitiesHaveDifferentType(object p0, object p1);
    internal static string ObjectContext_EntityMustBeUnchangedOrModified(object p0);
    internal static string ObjectContext_EntityMustBeUnchangedOrModifiedOrDeleted(object p0);
    internal static string ObjectContext_AcceptAllChangesFailure(object p0);
    internal static string get_ObjectContext_CommitWithConceptualNull();
    internal static string ObjectContext_InvalidEntitySetOnEntity(object p0, object p1);
    internal static string ObjectContext_InvalidObjectSetTypeForEntitySet(object p0, object p1, object p2);
    internal static string ObjectContext_InvalidEntitySetInKeyFromName(object p0, object p1, object p2, object p3, object p4);
    internal static string get_ObjectContext_ObjectDisposed();
    internal static string ObjectContext_CannotExplicitlyLoadDetachedRelationships(object p0);
    internal static string ObjectContext_CannotLoadReferencesUsingDifferentContext(object p0);
    internal static string get_ObjectContext_SelectorExpressionMustBeMemberAccess();
    internal static string ObjectContext_MultipleEntitySetsFoundInSingleContainer(object p0, object p1);
    internal static string ObjectContext_MultipleEntitySetsFoundInAllContainers(object p0);
    internal static string ObjectContext_NoEntitySetFoundForType(object p0);
    internal static string ObjectContext_EntityNotInObjectSet_Delete(object p0, object p1, object p2, object p3);
    internal static string ObjectContext_EntityNotInObjectSet_Detach(object p0, object p1, object p2, object p3);
    internal static string get_ObjectContext_InvalidEntityState();
    internal static string get_ObjectContext_InvalidRelationshipState();
    internal static string get_ObjectContext_EntityNotTrackedOrHasTempKey();
    internal static string get_ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues();
    internal static string ObjectContext_InvalidEntitySetForStoreQuery(object p0, object p1, object p2);
    internal static string ObjectContext_InvalidTypeForStoreQuery(object p0);
    internal static string ObjectContext_TwoPropertiesMappedToSameColumn(object p0, object p1);
    internal static string get_RelatedEnd_InvalidOwnerStateForAttach();
    internal static string RelatedEnd_InvalidNthElementNullForAttach(object p0);
    internal static string RelatedEnd_InvalidNthElementContextForAttach(object p0);
    internal static string RelatedEnd_InvalidNthElementStateForAttach(object p0);
    internal static string get_RelatedEnd_InvalidEntityContextForAttach();
    internal static string get_RelatedEnd_InvalidEntityStateForAttach();
    internal static string get_RelatedEnd_UnableToAddEntity();
    internal static string get_RelatedEnd_UnableToRemoveEntity();
    internal static string get_RelatedEnd_UnableToAddRelationshipWithDeletedEntity();
    internal static string RelatedEnd_CannotSerialize(object p0);
    internal static string RelatedEnd_CannotAddToFixedSizeArray(object p0);
    internal static string RelatedEnd_CannotRemoveFromFixedSizeArray(object p0);
    internal static string get_Materializer_PropertyIsNotNullable();
    internal static string Materializer_PropertyIsNotNullableWithName(object p0);
    internal static string Materializer_SetInvalidValue(object p0, object p1, object p2, object p3);
    internal static string Materializer_InvalidCastReference(object p0, object p1);
    internal static string Materializer_InvalidCastNullable(object p0, object p1);
    internal static string Materializer_NullReferenceCast(object p0);
    internal static string Materializer_RecyclingEntity(object p0, object p1, object p2);
    internal static string Materializer_AddedEntityAlreadyExists(object p0);
    internal static string get_Materializer_CannotReEnumerateQueryResults();
    internal static string get_Materializer_UnsupportedType();
    internal static string Collections_NoRelationshipSetMatched(object p0);
    internal static string Collections_ExpectedCollectionGotReference(object p0, object p1, object p2);
    internal static string get_Collections_InvalidEntityStateSource();
    internal static string Collections_InvalidEntityStateLoad(object p0);
    internal static string Collections_CannotFillTryDifferentMergeOption(object p0, object p1);
    internal static string get_Collections_UnableToMergeCollections();
    internal static string EntityReference_ExpectedReferenceGotCollection(object p0, object p1, object p2);
    internal static string EntityReference_CannotAddMoreThanOneEntityToEntityReference(object p0, object p1);
    internal static string get_EntityReference_LessThanExpectedRelatedEntitiesFound();
    internal static string get_EntityReference_MoreThanExpectedRelatedEntitiesFound();
    internal static string get_EntityReference_CannotChangeReferentialConstraintProperty();
    internal static string get_EntityReference_CannotSetSpecialKeys();
    internal static string get_EntityReference_EntityKeyValueMismatch();
    internal static string get_RelatedEnd_RelatedEndNotFound();
    internal static string RelatedEnd_RelatedEndNotAttachedToContext(object p0);
    internal static string get_RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd();
    internal static string get_RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd();
    internal static string RelatedEnd_InvalidContainedType_Collection(object p0, object p1);
    internal static string RelatedEnd_InvalidContainedType_Reference(object p0, object p1);
    internal static string RelatedEnd_CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities(object p0);
    internal static string get_RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts();
    internal static string RelatedEnd_MismatchedMergeOptionOnLoad(object p0);
    internal static string RelatedEnd_EntitySetIsNotValidForRelationship(object p0, object p1, object p2, object p3, object p4);
    internal static string get_RelatedEnd_OwnerIsNull();
    internal static string get_RelationshipManager_UnableToRetrieveReferentialConstraintProperties();
    internal static string RelationshipManager_InconsistentReferentialConstraintProperties(object p0, object p1);
    internal static string get_RelationshipManager_CircularRelationshipsWithReferentialConstraints();
    internal static string RelationshipManager_UnableToFindRelationshipTypeInMetadata(object p0);
    internal static string RelationshipManager_InvalidTargetRole(object p0, object p1);
    internal static string get_RelationshipManager_UnexpectedNull();
    internal static string get_RelationshipManager_InvalidRelationshipManagerOwner();
    internal static string RelationshipManager_OwnerIsNotSourceType(object p0, object p1, object p2, object p3);
    internal static string get_RelationshipManager_UnexpectedNullContext();
    internal static string RelationshipManager_ReferenceAlreadyInitialized(object p0);
    internal static string RelationshipManager_RelationshipManagerAttached(object p0);
    internal static string get_RelationshipManager_InitializeIsForDeserialization();
    internal static string RelationshipManager_CollectionAlreadyInitialized(object p0);
    internal static string RelationshipManager_CollectionRelationshipManagerAttached(object p0);
    internal static string get_RelationshipManager_CollectionInitializeIsForDeserialization();
    internal static string RelationshipManager_NavigationPropertyNotFound(object p0);
    internal static string get_RelationshipManager_CannotGetRelatEndForDetachedPocoEntity();
    internal static string get_ObjectView_CannotReplacetheEntityorRow();
    internal static string get_ObjectView_IndexBasedInsertIsNotSupported();
    internal static string get_ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList();
    internal static string get_ObjectView_AddNewOperationNotAllowedOnAbstractBindingList();
    internal static string get_ObjectView_IncompatibleArgument();
    internal static string ObjectView_CannotResolveTheEntitySet(object p0);
    internal static string CodeGen_ConstructorNoParameterless(object p0);
    internal static string get_CodeGen_PropertyDeclaringTypeIsValueType();
    internal static string get_CodeGen_PropertyUnsupportedType();
    internal static string get_CodeGen_PropertyIsIndexed();
    internal static string get_CodeGen_PropertyIsStatic();
    internal static string get_CodeGen_PropertyNoGetter();
    internal static string get_CodeGen_PropertyNoSetter();
    internal static string PocoEntityWrapper_UnableToSetFieldOrProperty(object p0, object p1);
    internal static string PocoEntityWrapper_UnexpectedTypeForNavigationProperty(object p0, object p1);
    internal static string PocoEntityWrapper_UnableToMaterializeArbitaryNavPropType(object p0, object p1);
    internal static string get_GeneralQueryError();
    internal static string get_CtxAlias();
    internal static string get_CtxAliasedNamespaceImport();
    internal static string get_CtxAnd();
    internal static string get_CtxAnyElement();
    internal static string get_CtxApplyClause();
    internal static string get_CtxBetween();
    internal static string get_CtxCase();
    internal static string get_CtxCaseElse();
    internal static string get_CtxCaseWhenThen();
    internal static string get_CtxCast();
    internal static string get_CtxCollatedOrderByClauseItem();
    internal static string get_CtxCollectionTypeDefinition();
    internal static string get_CtxCommandExpression();
    internal static string get_CtxCreateRef();
    internal static string get_CtxDeref();
    internal static string get_CtxDivide();
    internal static string get_CtxElement();
    internal static string get_CtxEquals();
    internal static string get_CtxEscapedIdentifier();
    internal static string get_CtxExcept();
    internal static string get_CtxExists();
    internal static string get_CtxExpressionList();
    internal static string get_CtxFlatten();
    internal static string get_CtxFromApplyClause();
    internal static string get_CtxFromClause();
    internal static string get_CtxFromClauseItem();
    internal static string get_CtxFromClauseList();
    internal static string get_CtxFromJoinClause();
    internal static string CtxFunction(object p0);
    internal static string get_CtxFunctionDefinition();
    internal static string get_CtxGreaterThan();
    internal static string get_CtxGreaterThanEqual();
    internal static string get_CtxGroupByClause();
    internal static string get_CtxGroupPartition();
    internal static string get_CtxHavingClause();
    internal static string get_CtxIdentifier();
    internal static string get_CtxIn();
    internal static string get_CtxIntersect();
    internal static string get_CtxIsNotNull();
    internal static string get_CtxIsNotOf();
    internal static string get_CtxIsNull();
    internal static string get_CtxIsOf();
    internal static string get_CtxJoinClause();
    internal static string get_CtxJoinOnClause();
    internal static string get_CtxKey();
    internal static string get_CtxLessThan();
    internal static string get_CtxLessThanEqual();
    internal static string get_CtxLike();
    internal static string get_CtxLimitSubClause();
    internal static string get_CtxLiteral();
    internal static string get_CtxMemberAccess();
    internal static string get_CtxMethod();
    internal static string get_CtxMinus();
    internal static string get_CtxModulus();
    internal static string get_CtxMultiply();
    internal static string get_CtxMultisetCtor();
    internal static string get_CtxNamespaceImport();
    internal static string get_CtxNamespaceImportList();
    internal static string get_CtxNavigate();
    internal static string get_CtxNot();
    internal static string get_CtxNotBetween();
    internal static string get_CtxNotEqual();
    internal static string get_CtxNotIn();
    internal static string get_CtxNotLike();
    internal static string get_CtxNullLiteral();
    internal static string get_CtxOfType();
    internal static string get_CtxOfTypeOnly();
    internal static string get_CtxOr();
    internal static string get_CtxOrderByClause();
    internal static string get_CtxOrderByClauseItem();
    internal static string get_CtxOverlaps();
    internal static string get_CtxParen();
    internal static string get_CtxPlus();
    internal static string get_CtxTypeNameWithTypeSpec();
    internal static string get_CtxQueryExpression();
    internal static string get_CtxQueryStatement();
    internal static string get_CtxRef();
    internal static string get_CtxRefTypeDefinition();
    internal static string get_CtxRelationship();
    internal static string get_CtxRelationshipList();
    internal static string get_CtxRowCtor();
    internal static string get_CtxRowTypeDefinition();
    internal static string get_CtxSelectRowClause();
    internal static string get_CtxSelectValueClause();
    internal static string get_CtxSet();
    internal static string get_CtxSimpleIdentifier();
    internal static string get_CtxSkipSubClause();
    internal static string get_CtxTopSubClause();
    internal static string get_CtxTreat();
    internal static string CtxTypeCtor(object p0);
    internal static string get_CtxTypeName();
    internal static string get_CtxUnaryMinus();
    internal static string get_CtxUnaryPlus();
    internal static string get_CtxUnion();
    internal static string get_CtxUnionAll();
    internal static string get_CtxWhereClause();
    internal static string CannotConvertNumericLiteral(object p0, object p1);
    internal static string get_GenericSyntaxError();
    internal static string get_InFromClause();
    internal static string get_InGroupClause();
    internal static string get_InRowCtor();
    internal static string get_InSelectProjectionList();
    internal static string InvalidAliasName(object p0);
    internal static string get_InvalidEmptyIdentifier();
    internal static string get_InvalidEmptyQuery();
    internal static string InvalidEscapedIdentifier(object p0);
    internal static string InvalidEscapedIdentifierUnbalanced(object p0);
    internal static string get_InvalidOperatorSymbol();
    internal static string get_InvalidPunctuatorSymbol();
    internal static string InvalidSimpleIdentifier(object p0);
    internal static string InvalidSimpleIdentifierNonASCII(object p0);
    internal static string get_LocalizedCollection();
    internal static string get_LocalizedColumn();
    internal static string get_LocalizedComplex();
    internal static string get_LocalizedEntity();
    internal static string get_LocalizedEntityContainerExpression();
    internal static string get_LocalizedFunction();
    internal static string get_LocalizedInlineFunction();
    internal static string get_LocalizedKeyword();
    internal static string get_LocalizedLeft();
    internal static string get_LocalizedLine();
    internal static string get_LocalizedMetadataMemberExpression();
    internal static string get_LocalizedNamespace();
    internal static string get_LocalizedNear();
    internal static string get_LocalizedPrimitive();
    internal static string get_LocalizedReference();
    internal static string get_LocalizedRight();
    internal static string get_LocalizedRow();
    internal static string get_LocalizedTerm();
    internal static string get_LocalizedType();
    internal static string get_LocalizedEnumMember();
    internal static string get_LocalizedValueExpression();
    internal static string AliasNameAlreadyUsed(object p0);
    internal static string get_AmbiguousFunctionArguments();
    internal static string AmbiguousMetadataMemberName(object p0, object p1, object p2);
    internal static string ArgumentTypesAreIncompatible(object p0, object p1);
    internal static string get_BetweenLimitsCannotBeUntypedNulls();
    internal static string BetweenLimitsTypesAreNotCompatible(object p0, object p1);
    internal static string BetweenLimitsTypesAreNotOrderComparable(object p0, object p1);
    internal static string BetweenValueIsNotOrderComparable(object p0, object p1);
    internal static string get_CannotCreateEmptyMultiset();
    internal static string get_CannotCreateMultisetofNulls();
    internal static string CannotInstantiateAbstractType(object p0);
    internal static string CannotResolveNameToTypeOrFunction(object p0);
    internal static string get_ConcatBuiltinNotSupported();
    internal static string CouldNotResolveIdentifier(object p0);
    internal static string CreateRefTypeIdentifierMustBeASubOrSuperType(object p0, object p1);
    internal static string CreateRefTypeIdentifierMustSpecifyAnEntityType(object p0, object p1);
    internal static string DeRefArgIsNotOfRefType(object p0);
    internal static string DuplicatedInlineFunctionOverload(object p0);
    internal static string get_ElementOperatorIsNotSupported();
    internal static string MemberDoesNotBelongToEntityContainer(object p0, object p1);
    internal static string get_ExpressionCannotBeNull();
    internal static string OfTypeExpressionElementTypeMustBeEntityType(object p0, object p1);
    internal static string OfTypeExpressionElementTypeMustBeNominalType(object p0, object p1);
    internal static string get_ExpressionMustBeCollection();
    internal static string get_ExpressionMustBeNumericType();
    internal static string get_ExpressionTypeMustBeBoolean();
    internal static string get_ExpressionTypeMustBeEqualComparable();
    internal static string ExpressionTypeMustBeEntityType(object p0, object p1, object p2);
    internal static string ExpressionTypeMustBeNominalType(object p0, object p1, object p2);
    internal static string get_ExpressionTypeMustNotBeCollection();
    internal static string get_ExprIsNotValidEntitySetForCreateRef();
    internal static string FailedToResolveAggregateFunction(object p0);
    internal static string GeneralExceptionAsQueryInnerException(object p0);
    internal static string get_GroupingKeysMustBeEqualComparable();
    internal static string get_GroupPartitionOutOfContext();
    internal static string get_HavingRequiresGroupClause();
    internal static string get_ImcompatibleCreateRefKeyElementType();
    internal static string get_ImcompatibleCreateRefKeyType();
    internal static string get_InnerJoinMustHaveOnPredicate();
    internal static string InvalidAssociationTypeForUnion(object p0);
    internal static string get_InvalidCaseResultTypes();
    internal static string get_InvalidCaseWhenThenNullType();
    internal static string InvalidCast(object p0, object p1);
    internal static string get_InvalidCastExpressionType();
    internal static string get_InvalidCastType();
    internal static string InvalidComplexType(object p0, object p1, object p2, object p3);
    internal static string get_InvalidCreateRefKeyType();
    internal static string InvalidCtorArgumentType(object p0, object p1, object p2);
    internal static string InvalidCtorUseOnType(object p0);
    internal static string InvalidDateTimeOffsetLiteral(object p0);
    internal static string InvalidDay(object p0, object p1);
    internal static string InvalidDayInMonth(object p0, object p1, object p2);
    internal static string InvalidDeRefProperty(object p0, object p1, object p2);
    internal static string get_InvalidDistinctArgumentInCtor();
    internal static string get_InvalidDistinctArgumentInNonAggFunction();
    internal static string InvalidEntityRootTypeArgument(object p0, object p1);
    internal static string InvalidEntityTypeArgument(object p0, object p1, object p2, object p3);
    internal static string InvalidExpressionResolutionClass(object p0, object p1);
    internal static string get_InvalidFlattenArgument();
    internal static string InvalidGroupIdentifierReference(object p0);
    internal static string InvalidHour(object p0, object p1);
    internal static string InvalidImplicitRelationshipFromEnd(object p0);
    internal static string InvalidImplicitRelationshipToEnd(object p0);
    internal static string InvalidInExprArgs(object p0, object p1);
    internal static string get_InvalidJoinLeftCorrelation();
    internal static string InvalidKeyArgument(object p0);
    internal static string InvalidKeyTypeForCollation(object p0);
    internal static string InvalidLiteralFormat(object p0, object p1);
    internal static string get_InvalidMetadataMemberName();
    internal static string InvalidMinute(object p0, object p1);
    internal static string get_InvalidModeForWithRelationshipClause();
    internal static string InvalidMonth(object p0, object p1);
    internal static string get_InvalidNamespaceAlias();
    internal static string get_InvalidNullArithmetic();
    internal static string get_InvalidNullComparison();
    internal static string InvalidNullLiteralForNonNullableMember(object p0, object p1);
    internal static string InvalidParameterFormat(object p0);
    internal static string InvalidPlaceholderRootTypeArgument(object p0, object p1, object p2, object p3);
    internal static string InvalidPlaceholderTypeArgument(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string get_InvalidPredicateForCrossJoin();
    internal static string InvalidRelationshipMember(object p0, object p1);
    internal static string InvalidMetadataMemberClassResolution(object p0, object p1, object p2);
    internal static string InvalidRootComplexType(object p0, object p1);
    internal static string InvalidRootRowType(object p0, object p1);
    internal static string InvalidRowType(object p0, object p1, object p2, object p3);
    internal static string InvalidSecond(object p0, object p1);
    internal static string get_InvalidSelectValueAliasedExpression();
    internal static string get_InvalidSelectValueList();
    internal static string get_InvalidTypeForWithRelationshipClause();
    internal static string InvalidUnarySetOpArgument(object p0);
    internal static string InvalidUnsignedTypeForUnaryMinusOperation(object p0);
    internal static string InvalidYear(object p0, object p1);
    internal static string InvalidWithRelationshipTargetEndMultiplicity(object p0, object p1);
    internal static string InvalidQueryResultType(object p0);
    internal static string get_IsNullInvalidType();
    internal static string KeyMustBeCorrelated(object p0);
    internal static string get_LeftSetExpressionArgsMustBeCollection();
    internal static string get_LikeArgMustBeStringType();
    internal static string LiteralTypeNotFoundInMetadata(object p0);
    internal static string get_MalformedSingleQuotePayload();
    internal static string get_MalformedStringLiteralPayload();
    internal static string get_MethodInvocationNotSupported();
    internal static string MultipleDefinitionsOfParameter(object p0);
    internal static string MultipleDefinitionsOfVariable(object p0);
    internal static string get_MultisetElemsAreNotTypeCompatible();
    internal static string NamespaceAliasAlreadyUsed(object p0);
    internal static string NamespaceAlreadyImported(object p0);
    internal static string NestedAggregateCannotBeUsedInAggregate(object p0, object p1);
    internal static string NoAggrFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoCanonicalAggrFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoCanonicalFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NotAMemberOfCollection(object p0, object p1);
    internal static string NotAMemberOfType(object p0, object p1);
    internal static string NotASuperOrSubType(object p0, object p1);
    internal static string get_NullLiteralCannotBePromotedToCollectionOfNulls();
    internal static string NumberOfTypeCtorIsLessThenFormalSpec(object p0);
    internal static string NumberOfTypeCtorIsMoreThenFormalSpec(object p0);
    internal static string get_OrderByKeyIsNotOrderComparable();
    internal static string OfTypeOnlyTypeArgumentCannotBeAbstract(object p0);
    internal static string ParameterTypeNotSupported(object p0, object p1);
    internal static string ParameterWasNotDefined(object p0);
    internal static string PlaceholderExpressionMustBeCompatibleWithEdm64(object p0, object p1);
    internal static string PlaceholderExpressionMustBeConstant(object p0);
    internal static string PlaceholderExpressionMustBeGreaterThanOrEqualToZero(object p0);
    internal static string PlaceholderSetArgTypeIsNotEqualComparable(object p0, object p1, object p2);
    internal static string get_PlusLeftExpressionInvalidType();
    internal static string get_PlusRightExpressionInvalidType();
    internal static string PrecisionMustBeGreaterThanScale(object p0, object p1);
    internal static string RefArgIsNotOfEntityType(object p0);
    internal static string RefTypeIdentifierMustSpecifyAnEntityType(object p0, object p1);
    internal static string get_RelatedEndExprTypeMustBeReference();
    internal static string RelatedEndExprTypeMustBePromotoableToToEnd(object p0, object p1);
    internal static string get_RelationshipFromEndIsAmbiguos();
    internal static string RelationshipTypeExpected(object p0);
    internal static string get_RelationshipToEndIsAmbiguos();
    internal static string RelationshipTargetMustBeUnique(object p0);
    internal static string get_ResultingExpressionTypeCannotBeNull();
    internal static string get_RightSetExpressionArgsMustBeCollection();
    internal static string get_RowCtorElementCannotBeNull();
    internal static string get_SelectDistinctMustBeEqualComparable();
    internal static string SourceTypeMustBePromotoableToFromEndRelationType(object p0, object p1);
    internal static string get_TopAndLimitCannotCoexist();
    internal static string get_TopAndSkipCannotCoexist();
    internal static string TypeDoesNotSupportSpec(object p0);
    internal static string TypeDoesNotSupportFacet(object p0, object p1);
    internal static string TypeArgumentCountMismatch(object p0, object p1);
    internal static string get_TypeArgumentMustBeLiteral();
    internal static string TypeArgumentBelowMin(object p0);
    internal static string TypeArgumentExceedsMax(object p0);
    internal static string get_TypeArgumentIsNotValid();
    internal static string TypeKindMismatch(object p0, object p1, object p2, object p3);
    internal static string get_TypeMustBeInheritableType();
    internal static string TypeMustBeEntityType(object p0, object p1, object p2);
    internal static string TypeMustBeNominalType(object p0, object p1, object p2);
    internal static string TypeNameNotFound(object p0);
    internal static string get_GroupVarNotFoundInScope();
    internal static string get_InvalidArgumentTypeForAggregateFunction();
    internal static string get_InvalidSavePoint();
    internal static string get_InvalidScopeIndex();
    internal static string LiteralTypeNotSupported(object p0);
    internal static string get_ParserFatalError();
    internal static string get_ParserInputError();
    internal static string get_StackOverflowInParser();
    internal static string get_UnknownAstCommandExpression();
    internal static string get_UnknownAstExpressionType();
    internal static string get_UnknownBuiltInAstExpressionType();
    internal static string UnknownExpressionResolutionClass(object p0);
    internal static string Cqt_General_UnsupportedExpression(object p0);
    internal static string Cqt_General_PolymorphicTypeRequired(object p0);
    internal static string Cqt_General_PolymorphicArgRequired(object p0);
    internal static string get_Cqt_General_MetadataNotReadOnly();
    internal static string get_Cqt_General_NoProviderBooleanType();
    internal static string get_Cqt_General_NoProviderIntegerType();
    internal static string get_Cqt_General_NoProviderStringType();
    internal static string get_Cqt_Metadata_EdmMemberIncorrectSpace();
    internal static string get_Cqt_Metadata_EntitySetEntityContainerNull();
    internal static string get_Cqt_Metadata_EntitySetIncorrectSpace();
    internal static string get_Cqt_Metadata_EntityTypeNullKeyMembersInvalid();
    internal static string get_Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid();
    internal static string get_Cqt_Metadata_FunctionReturnParameterNull();
    internal static string get_Cqt_Metadata_FunctionIncorrectSpace();
    internal static string get_Cqt_Metadata_FunctionParameterIncorrectSpace();
    internal static string get_Cqt_Metadata_TypeUsageIncorrectSpace();
    internal static string get_Cqt_Exceptions_InvalidCommandTree();
    internal static string get_Cqt_Util_CheckListEmptyInvalid();
    internal static string Cqt_Util_CheckListDuplicateName(object p0, object p1, object p2);
    internal static string Cqt_ExpressionLink_TypeMismatch(object p0, object p1);
    internal static string get_Cqt_ExpressionList_IncorrectElementCount();
    internal static string Cqt_Copier_EntityContainerNotFound(object p0);
    internal static string Cqt_Copier_EntitySetNotFound(object p0, object p1);
    internal static string Cqt_Copier_FunctionNotFound(object p0);
    internal static string Cqt_Copier_PropertyNotFound(object p0, object p1);
    internal static string Cqt_Copier_NavPropertyNotFound(object p0, object p1);
    internal static string Cqt_Copier_EndNotFound(object p0, object p1);
    internal static string Cqt_Copier_TypeNotFound(object p0);
    internal static string get_Cqt_CommandTree_InvalidDataSpace();
    internal static string Cqt_CommandTree_InvalidParameterName(object p0);
    internal static string Cqt_Validator_InvalidIncompatibleParameterReferences(object p0);
    internal static string Cqt_Validator_InvalidOtherWorkspaceMetadata(object p0);
    internal static string Cqt_Validator_InvalidIncorrectDataSpaceMetadata(object p0, object p1);
    internal static string get_Cqt_Factory_NewCollectionInvalidCommonType();
    internal static string NoSuchProperty(object p0, object p1);
    internal static string get_Cqt_Factory_NoSuchRelationEnd();
    internal static string get_Cqt_Factory_IncompatibleRelationEnds();
    internal static string Cqt_Factory_MethodResultTypeNotSupported(object p0);
    internal static string get_Cqt_Aggregate_InvalidFunction();
    internal static string get_Cqt_Binding_CollectionRequired();
    internal static string get_Cqt_GroupBinding_CollectionRequired();
    internal static string Cqt_Binary_CollectionsRequired(object p0);
    internal static string Cqt_Unary_CollectionRequired(object p0);
    internal static string get_Cqt_And_BooleanArgumentsRequired();
    internal static string get_Cqt_Apply_DuplicateVariableNames();
    internal static string get_Cqt_Arithmetic_NumericCommonType();
    internal static string Cqt_Arithmetic_InvalidUnsignedTypeForUnaryMinus(object p0);
    internal static string get_Cqt_Case_WhensMustEqualThens();
    internal static string get_Cqt_Case_InvalidResultType();
    internal static string Cqt_Cast_InvalidCast(object p0, object p1);
    internal static string get_Cqt_Comparison_ComparableRequired();
    internal static string get_Cqt_Constant_InvalidType();
    internal static string Cqt_Constant_InvalidValueForType(object p0);
    internal static string Cqt_Constant_InvalidConstantType(object p0);
    internal static string Cqt_Constant_ClrEnumTypeDoesNotMatchEdmEnumType(object p0, object p1, object p2);
    internal static string get_Cqt_Distinct_InvalidCollection();
    internal static string get_Cqt_DeRef_RefRequired();
    internal static string get_Cqt_Element_InvalidArgumentForUnwrapSingleProperty();
    internal static string get_Cqt_Function_VoidResultInvalid();
    internal static string get_Cqt_Function_NonComposableInExpression();
    internal static string get_Cqt_Function_CommandTextInExpression();
    internal static string Cqt_Function_CanonicalFunction_NotFound(object p0);
    internal static string Cqt_Function_CanonicalFunction_AmbiguousMatch(object p0);
    internal static string get_Cqt_GetEntityRef_EntityRequired();
    internal static string get_Cqt_GetRefKey_RefRequired();
    internal static string get_Cqt_GroupBy_AtLeastOneKeyOrAggregate();
    internal static string Cqt_GroupBy_KeyNotEqualityComparable(object p0);
    internal static string Cqt_GroupBy_AggregateColumnExistsAsGroupColumn(object p0);
    internal static string get_Cqt_GroupBy_MoreThanOneGroupAggregate();
    internal static string get_Cqt_CrossJoin_AtLeastTwoInputs();
    internal static string Cqt_CrossJoin_DuplicateVariableNames(object p0, object p1, object p2);
    internal static string get_Cqt_IsNull_CollectionNotAllowed();
    internal static string get_Cqt_IsNull_InvalidType();
    internal static string Cqt_InvalidTypeForSetOperation(object p0, object p1);
    internal static string get_Cqt_Join_DuplicateVariableNames();
    internal static string get_Cqt_Limit_ConstantOrParameterRefRequired();
    internal static string get_Cqt_Limit_IntegerRequired();
    internal static string get_Cqt_Limit_NonNegativeLimitRequired();
    internal static string get_Cqt_NewInstance_CollectionTypeRequired();
    internal static string get_Cqt_NewInstance_StructuralTypeRequired();
    internal static string Cqt_NewInstance_CannotInstantiateMemberlessType(object p0);
    internal static string Cqt_NewInstance_CannotInstantiateAbstractType(object p0);
    internal static string get_Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid();
    internal static string get_Cqt_Not_BooleanArgumentRequired();
    internal static string get_Cqt_Or_BooleanArgumentsRequired();
    internal static string get_Cqt_In_SameResultTypeRequired();
    internal static string get_Cqt_Property_InstanceRequiredForInstance();
    internal static string get_Cqt_Ref_PolymorphicArgRequired();
    internal static string get_Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship();
    internal static string get_Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne();
    internal static string get_Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd();
    internal static string get_Cqt_RelatedEntityRef_TargetEntityNotRef();
    internal static string get_Cqt_RelatedEntityRef_TargetEntityNotCompatible();
    internal static string get_Cqt_RelNav_NoCompositions();
    internal static string Cqt_RelNav_WrongSourceType(object p0);
    internal static string get_Cqt_Skip_ConstantOrParameterRefRequired();
    internal static string get_Cqt_Skip_IntegerRequired();
    internal static string get_Cqt_Skip_NonNegativeCountRequired();
    internal static string get_Cqt_Sort_NonStringCollationInvalid();
    internal static string get_Cqt_Sort_OrderComparable();
    internal static string Cqt_UDF_FunctionDefinitionGenerationFailed(object p0);
    internal static string Cqt_UDF_FunctionDefinitionWithCircularReference(object p0);
    internal static string Cqt_UDF_FunctionDefinitionResultTypeMismatch(object p0, object p1, object p2);
    internal static string Cqt_UDF_FunctionHasNoDefinition(object p0);
    internal static string Cqt_Validator_VarRefInvalid(object p0);
    internal static string Cqt_Validator_VarRefTypeMismatch(object p0);
    internal static string Iqt_General_UnsupportedOp(object p0);
    internal static string get_Iqt_CTGen_UnexpectedAggregate();
    internal static string get_Iqt_CTGen_UnexpectedVarDefList();
    internal static string get_Iqt_CTGen_UnexpectedVarDef();
    internal static string get_ADP_MustUseSequentialAccess();
    internal static string get_ADP_ProviderDoesNotSupportCommandTrees();
    internal static string get_ADP_ClosedDataReaderError();
    internal static string ADP_DataReaderClosed(object p0);
    internal static string get_ADP_ImplicitlyClosedDataReaderError();
    internal static string get_ADP_NoData();
    internal static string get_ADP_GetSchemaTableIsNotSupported();
    internal static string get_ADP_InvalidDataReaderFieldCountForScalarType();
    internal static string ADP_InvalidDataReaderMissingColumnForType(object p0, object p1);
    internal static string ADP_InvalidDataReaderMissingDiscriminatorColumn(object p0, object p1);
    internal static string get_ADP_InvalidDataReaderUnableToDetermineType();
    internal static string ADP_InvalidDataReaderUnableToMaterializeNonScalarType(object p0, object p1);
    internal static string ADP_KeysRequiredForJoinOverNest(object p0);
    internal static string get_ADP_KeysRequiredForNesting();
    internal static string ADP_NestingNotSupported(object p0, object p1);
    internal static string ADP_NoQueryMappingView(object p0, object p1);
    internal static string ADP_InternalProviderError(object p0);
    internal static string ADP_InvalidEnumerationValue(object p0, object p1);
    internal static string ADP_InvalidBufferSizeOrIndex(object p0, object p1);
    internal static string ADP_InvalidDataLength(object p0);
    internal static string ADP_InvalidDataType(object p0);
    internal static string ADP_InvalidDestinationBufferIndex(object p0, object p1);
    internal static string ADP_InvalidSourceBufferIndex(object p0, object p1);
    internal static string ADP_NonSequentialChunkAccess(object p0, object p1, object p2);
    internal static string ADP_NonSequentialColumnAccess(object p0, object p1);
    internal static string ADP_UnknownDataTypeCode(object p0, object p1);
    internal static string get_DataCategory_Data();
    internal static string get_DbParameter_Direction();
    internal static string get_DbParameter_Size();
    internal static string get_DataCategory_Update();
    internal static string get_DbParameter_SourceColumn();
    internal static string get_DbParameter_SourceVersion();
    internal static string ADP_CollectionParameterElementIsNull(object p0);
    internal static string ADP_CollectionParameterElementIsNullOrEmpty(object p0);
    internal static string get_NonReturnParameterInReturnParameterCollection();
    internal static string get_ReturnParameterInInputParameterCollection();
    internal static string get_NullEntitySetsForFunctionReturningMultipleResultSets();
    internal static string get_NumberOfEntitySetsDoesNotMatchNumberOfReturnParameters();
    internal static string EntityParameterCollectionInvalidParameterName(object p0);
    internal static string EntityParameterCollectionInvalidIndex(object p0, object p1);
    internal static string InvalidEntityParameterType(object p0);
    internal static string get_EntityParameterContainedByAnotherCollection();
    internal static string get_EntityParameterCollectionRemoveInvalidObject();
    internal static string ADP_ConnectionStringSyntax(object p0);
    internal static string get_ExpandingDataDirectoryFailed();
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidMultipartNameDelimiterUsage();
    internal static string ADP_InvalidSizeValue(object p0);
    internal static string ADP_KeywordNotSupported(object p0);
    internal static string ConstantFacetSpecifiedInSchema(object p0, object p1);
    internal static string DuplicateAnnotation(object p0, object p1);
    internal static string EmptyFile(object p0);
    internal static string get_EmptySchemaTextReader();
    internal static string EmptyName(object p0);
    internal static string InvalidName(object p0, object p1);
    internal static string get_MissingName();
    internal static string UnexpectedXmlAttribute(object p0);
    internal static string UnexpectedXmlElement(object p0);
    internal static string TextNotAllowed(object p0);
    internal static string UnexpectedXmlNodeType(object p0);
    internal static string MalformedXml(object p0, object p1);
    internal static string ValueNotUnderstood(object p0, object p1);
    internal static string EntityContainerAlreadyExists(object p0);
    internal static string TypeNameAlreadyDefinedDuplicate(object p0);
    internal static string PropertyNameAlreadyDefinedDuplicate(object p0);
    internal static string DuplicateMemberNameInExtendedEntityContainer(object p0, object p1, object p2);
    internal static string DuplicateEntityContainerMemberName(object p0);
    internal static string PropertyTypeAlreadyDefined(object p0);
    internal static string InvalidSize(object p0, object p1, object p2, object p3);
    internal static string InvalidSystemReferenceId(object p0, object p1, object p2, object p3);
    internal static string BadNamespaceOrAlias(object p0);
    internal static string get_MissingNamespaceAttribute();
    internal static string InvalidBaseTypeForStructuredType(object p0, object p1);
    internal static string InvalidPropertyType(object p0);
    internal static string InvalidBaseTypeForItemType(object p0, object p1);
    internal static string InvalidBaseTypeForNestedType(object p0, object p1);
    internal static string get_DefaultNotAllowed();
    internal static string FacetNotAllowed(object p0, object p1);
    internal static string RequiredFacetMissing(object p0, object p1);
    internal static string InvalidDefaultBinaryWithNoMaxLength(object p0);
    internal static string InvalidDefaultIntegral(object p0, object p1, object p2);
    internal static string InvalidDefaultDateTime(object p0, object p1);
    internal static string InvalidDefaultTime(object p0, object p1);
    internal static string InvalidDefaultDateTimeOffset(object p0, object p1);
    internal static string InvalidDefaultDecimal(object p0, object p1, object p2);
    internal static string InvalidDefaultFloatingPoint(object p0, object p1, object p2);
    internal static string InvalidDefaultGuid(object p0);
    internal static string InvalidDefaultBoolean(object p0);
    internal static string DuplicateMemberName(object p0, object p1, object p2);
    internal static string get_GeneratorErrorSeverityError();
    internal static string get_GeneratorErrorSeverityWarning();
    internal static string get_GeneratorErrorSeverityUnknown();
    internal static string get_SourceUriUnknown();
    internal static string BadPrecisionAndScale(object p0, object p1);
    internal static string InvalidNamespaceInUsing(object p0);
    internal static string BadNavigationPropertyRelationshipNotRelationship(object p0);
    internal static string get_BadNavigationPropertyRolesCannotBeTheSame();
    internal static string BadNavigationPropertyUndefinedRole(object p0, object p1);
    internal static string BadNavigationPropertyBadFromRoleType(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidMemberNameMatchesTypeName(object p0, object p1);
    internal static string InvalidKeyKeyDefinedInBaseClass(object p0, object p1);
    internal static string InvalidKeyNullablePart(object p0, object p1);
    internal static string InvalidKeyNoProperty(object p0, object p1);
    internal static string KeyMissingOnEntityType(object p0);
    internal static string get_InvalidDocumentationBothTextAndStructure();
    internal static string ArgumentOutOfRangeExpectedPostiveNumber(object p0);
    internal static string ArgumentOutOfRange(object p0);
    internal static string UnacceptableUri(object p0);
    internal static string UnexpectedTypeInCollection(object p0, object p1);
    internal static string get_AllElementsMustBeInSchema();
    internal static string AliasNameIsAlreadyDefined(object p0);
    internal static string NeedNotUseSystemNamespaceInUsing(object p0);
    internal static string CannotUseSystemNamespaceAsAlias(object p0);
    internal static string EntitySetTypeHasNoKeys(object p0, object p1);
    internal static string TableAndSchemaAreMutuallyExclusiveWithDefiningQuery(object p0);
    internal static string UnexpectedRootElement(object p0, object p1, object p2);
    internal static string UnexpectedRootElementNoNamespace(object p0, object p1, object p2);
    internal static string ParameterNameAlreadyDefinedDuplicate(object p0);
    internal static string FunctionWithNonPrimitiveTypeNotSupported(object p0, object p1);
    internal static string FunctionWithNonEdmPrimitiveTypeNotSupported(object p0, object p1);
    internal static string FunctionImportWithUnsupportedReturnTypeV1(object p0);
    internal static string FunctionImportWithUnsupportedReturnTypeV1_1(object p0);
    internal static string FunctionImportWithUnsupportedReturnTypeV2(object p0);
    internal static string FunctionImportUnknownEntitySet(object p0, object p1);
    internal static string FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet(object p0);
    internal static string FunctionImportEntityTypeDoesNotMatchEntitySet(object p0, object p1, object p2);
    internal static string FunctionImportSpecifiesEntitySetButNotEntityType(object p0);
    internal static string FunctionImportEntitySetAndEntitySetPathDeclared(object p0);
    internal static string FunctionImportComposableAndSideEffectingNotAllowed(object p0);
    internal static string FunctionImportCollectionAndRefParametersNotAllowed(object p0);
    internal static string FunctionImportNonNullableParametersNotAllowed(object p0);
    internal static string get_TVFReturnTypeRowHasNonScalarProperty();
    internal static string DuplicateEntitySetTable(object p0, object p1, object p2);
    internal static string ConcurrencyRedefinedOnSubTypeOfEntitySetType(object p0, object p1, object p2);
    internal static string SimilarRelationshipEnd(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidRelationshipEndMultiplicity(object p0, object p1);
    internal static string EndNameAlreadyDefinedDuplicate(object p0);
    internal static string InvalidRelationshipEndType(object p0, object p1);
    internal static string BadParameterDirection(object p0, object p1, object p2, object p3);
    internal static string BadParameterDirectionForComposableFunctions(object p0, object p1, object p2, object p3);
    internal static string get_InvalidOperationMultipleEndsInAssociation();
    internal static string InvalidAction(object p0, object p1);
    internal static string DuplicationOperation(object p0);
    internal static string NotInNamespaceAlias(object p0, object p1, object p2);
    internal static string NotNamespaceQualified(object p0);
    internal static string NotInNamespaceNoAlias(object p0, object p1);
    internal static string InvalidValueForParameterTypeSemanticsAttribute(object p0);
    internal static string DuplicatePropertyNameSpecifiedInEntityKey(object p0, object p1);
    internal static string InvalidEntitySetType(object p0);
    internal static string InvalidRelationshipSetType(object p0);
    internal static string InvalidEntityContainerNameInExtends(object p0);
    internal static string InvalidNamespaceOrAliasSpecified(object p0);
    internal static string PrecisionOutOfRange(object p0, object p1, object p2, object p3);
    internal static string ScaleOutOfRange(object p0, object p1, object p2, object p3);
    internal static string InvalidEntitySetNameReference(object p0, object p1);
    internal static string InvalidEntityEndName(object p0, object p1);
    internal static string DuplicateEndName(object p0);
    internal static string AmbiguousEntityContainerEnd(object p0, object p1);
    internal static string MissingEntityContainerEnd(object p0, object p1);
    internal static string InvalidEndEntitySetTypeMismatch(object p0);
    internal static string InferRelationshipEndFailedNoEntitySetMatch(object p0, object p1, object p2, object p3, object p4);
    internal static string InferRelationshipEndAmbiguous(object p0, object p1, object p2, object p3, object p4);
    internal static string InferRelationshipEndGivesAlreadyDefinedEnd(object p0, object p1);
    internal static string TooManyAssociationEnds(object p0);
    internal static string InvalidEndRoleInRelationshipConstraint(object p0, object p1);
    internal static string InvalidFromPropertyInRelationshipConstraint(object p0, object p1, object p2);
    internal static string InvalidToPropertyInRelationshipConstraint(object p0, object p1, object p2);
    internal static string InvalidPropertyInRelationshipConstraint(object p0, object p1);
    internal static string TypeMismatchRelationshipConstraint(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidMultiplicityFromRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV1(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV2(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNullableV1(object p0, object p1);
    internal static string InvalidMultiplicityToRoleLowerBoundMustBeZero(object p0, object p1);
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeMany(object p0, object p1);
    internal static string get_MismatchNumberOfPropertiesinRelationshipConstraint();
    internal static string MissingConstraintOnRelationshipType(object p0);
    internal static string SameRoleReferredInReferentialConstraint(object p0);
    internal static string InvalidPrimitiveTypeKind(object p0);
    internal static string EntityKeyMustBeScalar(object p0, object p1);
    internal static string EntityKeyTypeCurrentlyNotSupportedInSSDL(object p0, object p1, object p2, object p3, object p4);
    internal static string EntityKeyTypeCurrentlyNotSupported(object p0, object p1, object p2);
    internal static string MissingFacetDescription(object p0, object p1, object p2);
    internal static string EndWithManyMultiplicityCannotHaveOperationsSpecified(object p0, object p1);
    internal static string EndWithoutMultiplicity(object p0, object p1);
    internal static string EntityContainerCannotExtendItself(object p0);
    internal static string get_ComposableFunctionOrFunctionImportMustDeclareReturnType();
    internal static string NonComposableFunctionCannotBeMappedAsComposable(object p0);
    internal static string get_ComposableFunctionImportsReturningEntitiesNotSupported();
    internal static string get_StructuralTypeMappingsMustNotBeNullForFunctionImportsReturningNonScalarValues();
    internal static string get_InvalidReturnTypeForComposableFunction();
    internal static string get_NonComposableFunctionMustNotDeclareReturnType();
    internal static string get_CommandTextFunctionsNotComposable();
    internal static string get_CommandTextFunctionsCannotDeclareStoreFunctionName();
    internal static string get_NonComposableFunctionHasDisallowedAttribute();
    internal static string get_EmptyDefiningQuery();
    internal static string get_EmptyCommandText();
    internal static string AmbiguousFunctionOverload(object p0, object p1);
    internal static string AmbiguousFunctionAndType(object p0, object p1);
    internal static string CycleInTypeHierarchy(object p0);
    internal static string get_IncorrectProviderManifest();
    internal static string ComplexTypeAsReturnTypeAndDefinedEntitySet(object p0, object p1);
    internal static string ComplexTypeAsReturnTypeAndNestedComplexProperty(object p0, object p1, object p2);
    internal static string FacetsOnNonScalarType(object p0);
    internal static string get_FacetDeclarationRequiresTypeAttribute();
    internal static string get_TypeMustBeDeclared();
    internal static string get_RowTypeWithoutProperty();
    internal static string get_TypeDeclaredAsAttributeAndElement();
    internal static string ReferenceToNonEntityType(object p0);
    internal static string NoCodeGenNamespaceInStructuralAnnotation(object p0);
    internal static string get_CannotLoadDifferentVersionOfSchemaInTheSameItemCollection();
    internal static string get_InvalidEnumUnderlyingType();
    internal static string get_DuplicateEnumMember();
    internal static string get_CalculatedEnumValueOutOfRange();
    internal static string EnumMemberValueOutOfItsUnderylingTypeRange(object p0, object p1, object p2);
    internal static string get_SpatialWithUseStrongSpatialTypesFalse();
    internal static string ObjectQuery_QueryBuilder_InvalidResultType(object p0);
    internal static string get_ObjectQuery_QueryBuilder_InvalidQueryArgument();
    internal static string get_ObjectQuery_QueryBuilder_NotSupportedLinqSource();
    internal static string get_ObjectQuery_InvalidConnection();
    internal static string ObjectQuery_InvalidQueryName(object p0);
    internal static string get_ObjectQuery_UnableToMapResultType();
    internal static string ObjectQuery_UnableToMaterializeArray(object p0, object p1);
    internal static string ObjectQuery_UnableToMaterializeArbitaryProjectionType(object p0);
    internal static string ObjectParameter_InvalidParameterName(object p0);
    internal static string ObjectParameter_InvalidParameterType(object p0);
    internal static string ObjectParameterCollection_ParameterNameNotFound(object p0);
    internal static string ObjectParameterCollection_ParameterAlreadyExists(object p0);
    internal static string ObjectParameterCollection_DuplicateParameterName(object p0);
    internal static string get_ObjectParameterCollection_ParametersLocked();
    internal static string ProviderReturnedNullForGetDbInformation(object p0);
    internal static string get_ProviderReturnedNullForCreateCommandDefinition();
    internal static string get_ProviderDidNotReturnAProviderManifest();
    internal static string get_ProviderDidNotReturnAProviderManifestToken();
    internal static string get_ProviderDidNotReturnSpatialServices();
    internal static string get_SpatialProviderNotUsable();
    internal static string get_ProviderRequiresStoreCommandTree();
    internal static string get_ProviderShouldOverrideEscapeLikeArgument();
    internal static string get_ProviderEscapeLikeArgumentReturnedNull();
    internal static string get_ProviderDidNotCreateACommandDefinition();
    internal static string get_ProviderDoesNotSupportCreateDatabaseScript();
    internal static string get_ProviderDoesNotSupportCreateDatabase();
    internal static string get_ProviderDoesNotSupportDatabaseExists();
    internal static string get_ProviderDoesNotSupportDeleteDatabase();
    internal static string get_Spatial_GeographyValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_GeometryValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_ProviderValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_WellKnownValueSerializationPropertyNotDirectlySettable();
    internal static string get_EntityConnectionString_Name();
    internal static string get_EntityConnectionString_Provider();
    internal static string get_EntityConnectionString_Metadata();
    internal static string get_EntityConnectionString_ProviderConnectionString();
    internal static string get_EntityDataCategory_Context();
    internal static string get_EntityDataCategory_NamedConnectionString();
    internal static string get_EntityDataCategory_Source();
    internal static string get_ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection();
    internal static string ObjectQuery_Span_NoNavProp(object p0, object p1);
    internal static string get_ObjectQuery_Span_SpanPathSyntaxError();
    internal static string get_EntityProxyTypeInfo_ProxyHasWrongWrapper();
    internal static string EntityProxyTypeInfo_CannotSetEntityCollectionProperty(object p0, object p1);
    internal static string EntityProxyTypeInfo_ProxyMetadataIsUnavailable(object p0);
    internal static string EntityProxyTypeInfo_DuplicateOSpaceType(object p0);
    internal static string get_InvalidEdmMemberInstance();
    internal static string EF6Providers_NoProviderFound(object p0);
    internal static string EF6Providers_ProviderTypeMissing(object p0, object p1);
    internal static string EF6Providers_InstanceMissing(object p0);
    internal static string EF6Providers_NotDbProviderServices(object p0);
    internal static string ProviderInvariantRepeatedInConfig(object p0);
    internal static string DbDependencyResolver_NoProviderInvariantName(object p0);
    internal static string DbDependencyResolver_InvalidKey(object p0, object p1);
    internal static string DefaultConfigurationUsedBeforeSet(object p0);
    internal static string get_AddHandlerToInUseConfiguration();
    internal static string ConfigurationSetTwice(object p0, object p1);
    internal static string ConfigurationNotDiscovered(object p0);
    internal static string SetConfigurationNotDiscovered(object p0, object p1);
    internal static string MultipleConfigsInAssembly(object p0, object p1);
    internal static string CreateInstance_BadMigrationsConfigurationType(object p0, object p1);
    internal static string CreateInstance_BadSqlGeneratorType(object p0, object p1);
    internal static string CreateInstance_BadDbConfigurationType(object p0, object p1);
    internal static string DbConfigurationTypeNotFound(object p0);
    internal static string DbConfigurationTypeInAttributeNotFound(object p0);
    internal static string CreateInstance_NoParameterlessConstructor(object p0);
    internal static string CreateInstance_AbstractType(object p0);
    internal static string CreateInstance_GenericType(object p0);
    internal static string ConfigurationLocked(object p0);
    internal static string EnableMigrationsForContext(object p0);
    internal static string EnableMigrations_MultipleContexts(object p0);
    internal static string EnableMigrations_MultipleContextsWithName(object p0, object p1);
    internal static string EnableMigrations_NoContext(object p0);
    internal static string EnableMigrations_NoContextWithName(object p0, object p1);
    internal static string get_MoreThanOneElement();
    internal static string IQueryable_Not_Async(object p0);
    internal static string get_IQueryable_Provider_Not_Async();
    internal static string get_EmptySequence();
    internal static string get_UnableToMoveHistoryTableWithAuto();
    internal static string get_NoMatch();
    internal static string get_MoreThanOneMatch();
    internal static string CreateConfigurationType_NoParameterlessConstructor(object p0);
    internal static string CollectionEmpty(object p0, object p1);
    internal static string DbMigrationsConfiguration_ContextType(object p0);
    internal static string ContextFactoryContextType(object p0);
    internal static string DbMigrationsConfiguration_RootedPath(object p0);
    internal static string ModelBuilder_PropertyFilterTypeMustBePrimitive(object p0);
    internal static string LightweightEntityConfiguration_NonScalarProperty(object p0);
    internal static string MigrationsPendingException(object p0);
    internal static string ExecutionStrategy_ExistingTransaction(object p0);
    internal static string ExecutionStrategy_MinimumMustBeLessThanMaximum(object p0, object p1);
    internal static string ExecutionStrategy_NegativeDelay(object p0);
    internal static string ExecutionStrategy_RetryLimitExceeded(object p0, object p1);
    internal static string BaseTypeNotMappedToFunctions(object p0, object p1);
    internal static string InvalidResourceName(object p0);
    internal static string ModificationFunctionParameterNotFound(object p0, object p1);
    internal static string get_EntityClient_CannotOpenBrokenConnection();
    internal static string ModificationFunctionParameterNotFoundOriginal(object p0, object p1);
    internal static string ResultBindingNotFound(object p0, object p1);
    internal static string ConflictingFunctionsMapping(object p0, object p1);
    internal static string get_DbContext_InvalidTransactionForConnection();
    internal static string get_DbContext_InvalidTransactionNoConnection();
    internal static string get_DbContext_TransactionAlreadyStarted();
    internal static string get_DbContext_TransactionAlreadyEnlistedInUserTransaction();
    internal static string ExecutionStrategy_StreamingNotSupported(object p0);
    internal static string EdmProperty_InvalidPropertyType(object p0);
    internal static string get_ConcurrentMethodInvocation();
    internal static string get_AssociationSet_EndEntityTypeMismatch();
    internal static string get_VisitDbInExpressionNotImplemented();
    internal static string InvalidColumnBuilderArgument(object p0);
    internal static string get_StorageScalarPropertyMapping_OnlyScalarPropertiesAllowed();
    internal static string get_StorageComplexPropertyMapping_OnlyComplexPropertyAllowed();
    internal static string get_MetadataItemErrorsFoundDuringGeneration();
    internal static string AutomaticStaleFunctions(object p0);
    internal static string get_ScaffoldSprocInDownNotSupported();
    internal static string LightweightEntityConfiguration_ConfigurationConflict_ComplexType(object p0, object p1);
    internal static string LightweightEntityConfiguration_ConfigurationConflict_IgnoreType(object p0, object p1);
    internal static string AttemptToAddEdmMemberFromWrongDataSpace(object p0, object p1, object p2, object p3);
    internal static string LightweightEntityConfiguration_InvalidNavigationProperty(object p0);
    internal static string LightweightEntityConfiguration_InvalidInverseNavigationProperty(object p0, object p1, object p2, object p3);
    internal static string LightweightEntityConfiguration_MismatchedInverseNavigationProperty(object p0, object p1, object p2, object p3);
    internal static string DuplicateParameterName(object p0);
    internal static string CommandLogFailed(object p0, object p1, object p2);
    internal static string CommandLogCanceled(object p0, object p1);
    internal static string CommandLogComplete(object p0, object p1, object p2);
    internal static string CommandLogAsync(object p0, object p1);
    internal static string CommandLogNonAsync(object p0, object p1);
    internal static string get_SuppressionAfterExecution();
    internal static string BadContextTypeForDiscovery(object p0);
    internal static string ErrorGeneratingCommandTree(object p0, object p1);
    internal static string LightweightNavigationPropertyConfiguration_IncompatibleMultiplicity(object p0, object p1, object p2);
    internal static string LightweightNavigationPropertyConfiguration_InvalidMultiplicity(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_NonNullableProperty(object p0, object p1);
    internal static string TestDoubleNotImplemented(object p0, object p1, object p2);
    internal static string get_TestDoublesCannotBeConverted();
    internal static string InvalidNavigationPropertyComplexType(object p0, object p1, object p2);
    internal static string ConventionsConfiguration_InvalidConventionType(object p0);
    internal static string ConventionsConfiguration_ConventionTypeMissmatch(object p0, object p1);
    internal static string LightweightPrimitivePropertyConfiguration_DateTimeScale(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_DecimalNoScale(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_HasPrecisionNonDateTime(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_HasPrecisionNonDecimal(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_IsRowVersionNonBinary(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_IsUnicodeNonString(object p0);
    internal static string LightweightPrimitivePropertyConfiguration_NonLength(object p0);
    internal static string get_UnableToUpgradeHistoryWhenCustomFactory();
    internal static string get_CommitFailed();
    internal static string InterceptorTypeNotFound(object p0);
    internal static string InterceptorTypeNotInterceptor(object p0);
    internal static string ViewGenContainersNotFound(object p0, object p1);
    internal static string HashCalcContainersNotFound(object p0, object p1);
    internal static string get_ViewGenMultipleContainers();
    internal static string get_HashCalcMultipleContainers();
    internal static string get_BadConnectionWrapping();
    internal static string ConnectionClosedLog(object p0, object p1);
    internal static string ConnectionCloseErrorLog(object p0, object p1, object p2);
    internal static string ConnectionOpenedLog(object p0, object p1);
    internal static string ConnectionOpenErrorLog(object p0, object p1, object p2);
    internal static string ConnectionOpenedLogAsync(object p0, object p1);
    internal static string ConnectionOpenErrorLogAsync(object p0, object p1, object p2);
    internal static string TransactionStartedLog(object p0, object p1);
    internal static string TransactionStartErrorLog(object p0, object p1, object p2);
    internal static string TransactionCommittedLog(object p0, object p1);
    internal static string TransactionCommitErrorLog(object p0, object p1, object p2);
    internal static string TransactionRolledBackLog(object p0, object p1);
    internal static string TransactionRollbackErrorLog(object p0, object p1, object p2);
    internal static string ConnectionOpenCanceledLog(object p0, object p1);
    internal static string get_TransactionHandler_AlreadyInitialized();
    internal static string ConnectionDisposedLog(object p0, object p1);
    internal static string TransactionDisposedLog(object p0, object p1);
    internal static string UnableToLoadEmbeddedResource(object p0, object p1);
    internal static string CannotSetBaseTypeCyclicInheritance(object p0, object p1);
    internal static string get_CannotDefineKeysOnBothBaseAndDerivedTypes();
    internal static string StoreTypeNotFound(object p0, object p1);
    internal static string get_ProviderDoesNotSupportEscapingLikeArgument();
    internal static string IndexPropertyNotFound(object p0, object p1);
    internal static string ConflictingIndexAttributeMatches(object p0, object p1);
}
[DataContractAttribute]
public class System.Data.Entity.Spatial.DbGeography : object {
    private DbSpatialServices _spatialProvider;
    private object _providerValue;
    public static int DefaultCoordinateSystemId { get; }
    public object ProviderValue { get; }
    public DbSpatialServices Provider { get; }
    [DataMemberAttribute]
public DbGeographyWellKnownValue WellKnownValue { get; public set; }
    public int CoordinateSystemId { get; }
    public int Dimension { get; }
    public string SpatialTypeName { get; }
    public bool IsEmpty { get; }
    public Nullable`1<int> ElementCount { get; }
    public Nullable`1<double> Latitude { get; }
    public Nullable`1<double> Longitude { get; }
    public Nullable`1<double> Elevation { get; }
    public Nullable`1<double> Measure { get; }
    public Nullable`1<double> Length { get; }
    public DbGeography StartPoint { get; }
    public DbGeography EndPoint { get; }
    public Nullable`1<bool> IsClosed { get; }
    public Nullable`1<int> PointCount { get; }
    public Nullable`1<double> Area { get; }
    internal DbGeography(DbSpatialServices spatialServices, object spatialProviderValue);
    public static int get_DefaultCoordinateSystemId();
    public object get_ProviderValue();
    public virtual DbSpatialServices get_Provider();
    public DbGeographyWellKnownValue get_WellKnownValue();
    public void set_WellKnownValue(DbGeographyWellKnownValue value);
    public static DbGeography FromBinary(Byte[] wellKnownBinary);
    public static DbGeography FromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public static DbGeography LineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public static DbGeography PointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public static DbGeography PolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public static DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionWellKnownBinary, int coordinateSystemId);
    public static DbGeography FromGml(string geographyMarkup);
    public static DbGeography FromGml(string geographyMarkup, int coordinateSystemId);
    public static DbGeography FromText(string wellKnownText);
    public static DbGeography FromText(string wellKnownText, int coordinateSystemId);
    public static DbGeography LineFromText(string lineWellKnownText, int coordinateSystemId);
    public static DbGeography PointFromText(string pointWellKnownText, int coordinateSystemId);
    public static DbGeography PolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public static DbGeography MultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public static DbGeography MultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public static DbGeography MultiPolygonFromText(string multiPolygonWellKnownText, int coordinateSystemId);
    public static DbGeography GeographyCollectionFromText(string geographyCollectionWellKnownText, int coordinateSystemId);
    public int get_CoordinateSystemId();
    public int get_Dimension();
    public string get_SpatialTypeName();
    public bool get_IsEmpty();
    public virtual string AsText();
    internal string AsTextIncludingElevationAndMeasure();
    public Byte[] AsBinary();
    public string AsGml();
    public bool SpatialEquals(DbGeography other);
    public bool Disjoint(DbGeography other);
    public bool Intersects(DbGeography other);
    public DbGeography Buffer(Nullable`1<double> distance);
    public Nullable`1<double> Distance(DbGeography other);
    public DbGeography Intersection(DbGeography other);
    public DbGeography Union(DbGeography other);
    public DbGeography Difference(DbGeography other);
    public DbGeography SymmetricDifference(DbGeography other);
    public Nullable`1<int> get_ElementCount();
    public DbGeography ElementAt(int index);
    public Nullable`1<double> get_Latitude();
    public Nullable`1<double> get_Longitude();
    public Nullable`1<double> get_Elevation();
    public Nullable`1<double> get_Measure();
    public Nullable`1<double> get_Length();
    public DbGeography get_StartPoint();
    public DbGeography get_EndPoint();
    public Nullable`1<bool> get_IsClosed();
    public Nullable`1<int> get_PointCount();
    public DbGeography PointAt(int index);
    public Nullable`1<double> get_Area();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Data.Entity.Spatial.DbGeographyWellKnownValue : object {
    [CompilerGeneratedAttribute]
private int <CoordinateSystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WellKnownText>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WellKnownBinary>k__BackingField;
    [DataMemberAttribute]
public int CoordinateSystemId { get; public set; }
    [DataMemberAttribute]
public string WellKnownText { get; public set; }
    [DataMemberAttribute]
public Byte[] WellKnownBinary { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CoordinateSystemId();
    [CompilerGeneratedAttribute]
public void set_CoordinateSystemId(int value);
    [CompilerGeneratedAttribute]
public string get_WellKnownText();
    [CompilerGeneratedAttribute]
public void set_WellKnownText(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WellKnownBinary();
    [CompilerGeneratedAttribute]
public void set_WellKnownBinary(Byte[] value);
}
[DataContractAttribute]
public class System.Data.Entity.Spatial.DbGeometry : object {
    private DbSpatialServices _spatialProvider;
    private object _providerValue;
    public static int DefaultCoordinateSystemId { get; }
    public object ProviderValue { get; }
    public DbSpatialServices Provider { get; }
    [DataMemberAttribute]
public DbGeometryWellKnownValue WellKnownValue { get; public set; }
    public int CoordinateSystemId { get; }
    public DbGeometry Boundary { get; }
    public int Dimension { get; }
    public DbGeometry Envelope { get; }
    public string SpatialTypeName { get; }
    public bool IsEmpty { get; }
    public bool IsSimple { get; }
    public bool IsValid { get; }
    public DbGeometry ConvexHull { get; }
    public Nullable`1<int> ElementCount { get; }
    public Nullable`1<double> XCoordinate { get; }
    public Nullable`1<double> YCoordinate { get; }
    public Nullable`1<double> Elevation { get; }
    public Nullable`1<double> Measure { get; }
    public Nullable`1<double> Length { get; }
    public DbGeometry StartPoint { get; }
    public DbGeometry EndPoint { get; }
    public Nullable`1<bool> IsClosed { get; }
    public Nullable`1<bool> IsRing { get; }
    public Nullable`1<int> PointCount { get; }
    public Nullable`1<double> Area { get; }
    public DbGeometry Centroid { get; }
    public DbGeometry PointOnSurface { get; }
    public DbGeometry ExteriorRing { get; }
    public Nullable`1<int> InteriorRingCount { get; }
    internal DbGeometry(DbSpatialServices spatialServices, object spatialProviderValue);
    public static int get_DefaultCoordinateSystemId();
    public object get_ProviderValue();
    public virtual DbSpatialServices get_Provider();
    public DbGeometryWellKnownValue get_WellKnownValue();
    public void set_WellKnownValue(DbGeometryWellKnownValue value);
    public static DbGeometry FromBinary(Byte[] wellKnownBinary);
    public static DbGeometry FromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public static DbGeometry LineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public static DbGeometry PointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public static DbGeometry PolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public static DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionWellKnownBinary, int coordinateSystemId);
    public static DbGeometry FromGml(string geometryMarkup);
    public static DbGeometry FromGml(string geometryMarkup, int coordinateSystemId);
    public static DbGeometry FromText(string wellKnownText);
    public static DbGeometry FromText(string wellKnownText, int coordinateSystemId);
    public static DbGeometry LineFromText(string lineWellKnownText, int coordinateSystemId);
    public static DbGeometry PointFromText(string pointWellKnownText, int coordinateSystemId);
    public static DbGeometry PolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiPolygonFromText(string multiPolygonWellKnownText, int coordinateSystemId);
    public static DbGeometry GeometryCollectionFromText(string geometryCollectionWellKnownText, int coordinateSystemId);
    public int get_CoordinateSystemId();
    public DbGeometry get_Boundary();
    public int get_Dimension();
    public DbGeometry get_Envelope();
    public string get_SpatialTypeName();
    public bool get_IsEmpty();
    public bool get_IsSimple();
    public bool get_IsValid();
    public virtual string AsText();
    internal string AsTextIncludingElevationAndMeasure();
    public Byte[] AsBinary();
    public string AsGml();
    public bool SpatialEquals(DbGeometry other);
    public bool Disjoint(DbGeometry other);
    public bool Intersects(DbGeometry other);
    public bool Touches(DbGeometry other);
    public bool Crosses(DbGeometry other);
    public bool Within(DbGeometry other);
    public bool Contains(DbGeometry other);
    public bool Overlaps(DbGeometry other);
    public bool Relate(DbGeometry other, string matrix);
    public DbGeometry Buffer(Nullable`1<double> distance);
    public Nullable`1<double> Distance(DbGeometry other);
    public DbGeometry get_ConvexHull();
    public DbGeometry Intersection(DbGeometry other);
    public DbGeometry Union(DbGeometry other);
    public DbGeometry Difference(DbGeometry other);
    public DbGeometry SymmetricDifference(DbGeometry other);
    public Nullable`1<int> get_ElementCount();
    public DbGeometry ElementAt(int index);
    public Nullable`1<double> get_XCoordinate();
    public Nullable`1<double> get_YCoordinate();
    public Nullable`1<double> get_Elevation();
    public Nullable`1<double> get_Measure();
    public Nullable`1<double> get_Length();
    public DbGeometry get_StartPoint();
    public DbGeometry get_EndPoint();
    public Nullable`1<bool> get_IsClosed();
    public Nullable`1<bool> get_IsRing();
    public Nullable`1<int> get_PointCount();
    public DbGeometry PointAt(int index);
    public Nullable`1<double> get_Area();
    public DbGeometry get_Centroid();
    public DbGeometry get_PointOnSurface();
    public DbGeometry get_ExteriorRing();
    public Nullable`1<int> get_InteriorRingCount();
    public DbGeometry InteriorRingAt(int index);
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Data.Entity.Spatial.DbGeometryWellKnownValue : object {
    [CompilerGeneratedAttribute]
private int <CoordinateSystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WellKnownText>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WellKnownBinary>k__BackingField;
    [DataMemberAttribute]
public int CoordinateSystemId { get; public set; }
    [DataMemberAttribute]
public string WellKnownText { get; public set; }
    [DataMemberAttribute]
public Byte[] WellKnownBinary { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CoordinateSystemId();
    [CompilerGeneratedAttribute]
public void set_CoordinateSystemId(int value);
    [CompilerGeneratedAttribute]
public string get_WellKnownText();
    [CompilerGeneratedAttribute]
public void set_WellKnownText(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WellKnownBinary();
    [CompilerGeneratedAttribute]
public void set_WellKnownBinary(Byte[] value);
}
public abstract class System.Data.Entity.Spatial.DbSpatialDataReader : object {
    public abstract virtual DbGeography GetGeography(int ordinal);
    public virtual Task`1<DbGeography> GetGeographyAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual DbGeometry GetGeometry(int ordinal);
    public virtual Task`1<DbGeometry> GetGeometryAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool IsGeographyColumn(int ordinal);
    public abstract virtual bool IsGeometryColumn(int ordinal);
}
public abstract class System.Data.Entity.Spatial.DbSpatialServices : object {
    private static Lazy`1<DbSpatialServices> _defaultServices;
    public static DbSpatialServices Default { get; }
    public bool NativeTypesAvailable { get; }
    private static DbSpatialServices();
    public static DbSpatialServices get_Default();
    public virtual bool get_NativeTypesAvailable();
    protected static DbGeography CreateGeography(DbSpatialServices spatialServices, object providerValue);
    public abstract virtual DbGeography GeographyFromProviderValue(object providerValue);
    public abstract virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public abstract virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public abstract virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary);
    public abstract virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyFromText(string wellKnownText);
    public abstract virtual DbGeography GeographyFromText(string wellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyLineFromText(string lineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPointFromText(string pointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPolygonFromText(string multiPolygonKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyCollectionFromText(string geographyCollectionWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyFromGml(string geographyMarkup);
    public abstract virtual DbGeography GeographyFromGml(string geographyMarkup, int coordinateSystemId);
    public abstract virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public abstract virtual int GetDimension(DbGeography geographyValue);
    public abstract virtual string GetSpatialTypeName(DbGeography geographyValue);
    public abstract virtual bool GetIsEmpty(DbGeography geographyValue);
    public abstract virtual string AsText(DbGeography geographyValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeography geographyValue);
    public abstract virtual Byte[] AsBinary(DbGeography geographyValue);
    public abstract virtual string AsGml(DbGeography geographyValue);
    public abstract virtual bool SpatialEquals(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual bool Disjoint(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual bool Intersects(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public abstract virtual double Distance(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Union(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public abstract virtual DbGeography ElementAt(DbGeography geographyValue, int index);
    public abstract virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public abstract virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public abstract virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public abstract virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public abstract virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public abstract virtual DbGeography PointAt(DbGeography geographyValue, int index);
    public abstract virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    protected static DbGeometry CreateGeometry(DbSpatialServices spatialServices, object providerValue);
    public abstract virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public abstract virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    public abstract virtual DbGeometry GeometryFromProviderValue(object providerValue);
    public abstract virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary);
    public abstract virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryFromText(string wellKnownText);
    public abstract virtual DbGeometry GeometryFromText(string wellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryLineFromText(string lineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPointFromText(string pointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPolygonFromText(string multiPolygonKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryCollectionFromText(string geometryCollectionWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryFromGml(string geometryMarkup);
    public abstract virtual DbGeometry GeometryFromGml(string geometryMarkup, int coordinateSystemId);
    public abstract virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public abstract virtual int GetDimension(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public abstract virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public abstract virtual bool GetIsEmpty(DbGeometry geometryValue);
    public abstract virtual bool GetIsSimple(DbGeometry geometryValue);
    public abstract virtual bool GetIsValid(DbGeometry geometryValue);
    public abstract virtual string AsText(DbGeometry geometryValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeometry geometryValue);
    public abstract virtual Byte[] AsBinary(DbGeometry geometryValue);
    public abstract virtual string AsGml(DbGeometry geometryValue);
    public abstract virtual bool SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Intersects(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Touches(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Crosses(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Within(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Contains(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Relate(DbGeometry geometryValue, DbGeometry otherGeometry, string matrix);
    public abstract virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public abstract virtual double Distance(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public abstract virtual DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry ElementAt(DbGeometry geometryValue, int index);
    public abstract virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public abstract virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public abstract virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public abstract virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry PointAt(DbGeometry geometryValue, int index);
    public abstract virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public abstract virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int index);
}
internal class System.Data.Entity.Spatial.DefaultSpatialServices : DbSpatialServices {
    internal static DefaultSpatialServices Instance;
    private static DefaultSpatialServices();
    private static Exception SpatialServicesUnavailable();
    private static ReadOnlySpatialValues CheckProviderValue(object providerValue);
    private static ReadOnlySpatialValues CheckCompatible(DbGeography geographyValue);
    private static ReadOnlySpatialValues CheckCompatible(DbGeometry geometryValue);
    public virtual DbGeography GeographyFromProviderValue(object providerValue);
    public virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBinary);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyLineFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPointFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPolygonFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiLineFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPointFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyFromText(string geographyText);
    public virtual DbGeography GeographyFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyLineFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPointFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPolygonFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiLineFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPointFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPolygonFromText(string multiPolygonKnownText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyCollectionFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyFromGml(string geographyMarkup);
    public virtual DbGeography GeographyFromGml(string geographyMarkup, int spatialReferenceSystemId);
    public virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public virtual int GetDimension(DbGeography geographyValue);
    public virtual string GetSpatialTypeName(DbGeography geographyValue);
    public virtual bool GetIsEmpty(DbGeography geographyValue);
    public virtual string AsText(DbGeography geographyValue);
    public virtual Byte[] AsBinary(DbGeography geographyValue);
    public virtual string AsGml(DbGeography geographyValue);
    public virtual bool SpatialEquals(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Disjoint(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Intersects(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public virtual double Distance(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Union(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public virtual DbGeography ElementAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public virtual DbGeography PointAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    public virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    public virtual DbGeometry GeometryFromProviderValue(object providerValue);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBinary);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryLineFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPointFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPolygonFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiLineFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPointFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryFromText(string geometryText);
    public virtual DbGeometry GeometryFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryLineFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPointFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPolygonFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiLineFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPointFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryCollectionFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup, int spatialReferenceSystemId);
    public virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public virtual int GetDimension(DbGeometry geometryValue);
    public virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public virtual bool GetIsEmpty(DbGeometry geometryValue);
    public virtual bool GetIsSimple(DbGeometry geometryValue);
    public virtual bool GetIsValid(DbGeometry geometryValue);
    public virtual string AsText(DbGeometry geometryValue);
    public virtual Byte[] AsBinary(DbGeometry geometryValue);
    public virtual string AsGml(DbGeometry geometryValue);
    public virtual bool SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Intersects(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Touches(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Crosses(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Within(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Contains(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Relate(DbGeometry geometryValue, DbGeometry otherGeometry, string matrix);
    public virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public virtual double Distance(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public virtual DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public virtual DbGeometry ElementAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public virtual DbGeometry PointAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int index);
}
internal static class System.Data.Entity.Spatial.SpatialHelpers : object {
    internal static object GetSpatialValue(MetadataWorkspace workspace, DbDataReader reader, TypeUsage columnType, int columnOrdinal);
    [AsyncStateMachineAttribute("System.Data.Entity.Spatial.SpatialHelpers/<GetSpatialValueAsync>d__1")]
internal static Task`1<object> GetSpatialValueAsync(MetadataWorkspace workspace, DbDataReader reader, TypeUsage columnType, int columnOrdinal, CancellationToken cancellationToken);
    internal static DbSpatialDataReader CreateSpatialDataReader(MetadataWorkspace workspace, DbDataReader reader);
}
internal class System.Data.Entity.Spatial.SpatialServicesLoader : object {
    private IDbDependencyResolver _resolver;
    public SpatialServicesLoader(IDbDependencyResolver resolver);
    public virtual DbSpatialServices LoadDefaultServices();
}
public enum System.Data.Entity.TransactionalBehavior : Enum {
    public int value__;
    public static TransactionalBehavior EnsureTransaction;
    public static TransactionalBehavior DoNotEnsureTransaction;
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetInformationalVersion(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetAccessibleTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.BoolExtensions : object {
    [ExtensionAttribute]
internal static Nullable`1<bool> Not(Nullable`1<bool> operand);
    [ExtensionAttribute]
internal static Nullable`1<bool> And(Nullable`1<bool> left, Nullable`1<bool> right);
    [ExtensionAttribute]
internal static Nullable`1<bool> Or(Nullable`1<bool> left, Nullable`1<bool> right);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.ByteExtensions : object {
    [ExtensionAttribute]
public static string ToHexString(IEnumerable`1<byte> bytes);
}
internal class System.Data.Entity.Utilities.Check : object {
    public static T NotNull(T value, string parameterName);
    public static Nullable`1<T> NotNull(Nullable`1<T> value, string parameterName);
    public static string NotEmpty(string value, string parameterName);
}
internal class System.Data.Entity.Utilities.DatabaseName : object {
    private static string NamePartRegex;
    private static Regex _partExtractor;
    private string _name;
    private string _schema;
    public string Name { get; }
    public string Schema { get; }
    public DatabaseName(string name);
    public DatabaseName(string name, string schema);
    private static DatabaseName();
    public static DatabaseName Parse(string name);
    public string get_Name();
    public string get_Schema();
    public virtual string ToString();
    private static string Escape(string name);
    public bool Equals(DatabaseName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbConnectionExtensions : object {
    [ExtensionAttribute]
public static string GetProviderInvariantName(DbConnection connection);
    [ExtensionAttribute]
public static DbProviderInfo GetProviderInfo(DbConnection connection, DbProviderManifest& providerManifest);
    [ExtensionAttribute]
public static DbProviderFactory GetProviderFactory(DbConnection connection);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbContextExtensions : object {
    [ExtensionAttribute]
public static XDocument GetModel(DbContext context);
    public static XDocument GetModel(Action`1<XmlWriter> writeXml);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbModelBuilderVersionExtensions : object {
    [ExtensionAttribute]
public static double GetEdmVersion(DbModelBuilderVersion modelBuilderVersion);
    [ExtensionAttribute]
public static bool IsEF6OrHigher(DbModelBuilderVersion modelBuilderVersion);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbModelExtensions : object {
    [ExtensionAttribute]
public static XDocument GetModel(DbModel model);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbProviderFactoryExtensions : object {
    [ExtensionAttribute]
public static string GetProviderInvariantName(DbProviderFactory factory);
    [ExtensionAttribute]
internal static DbProviderServices GetProviderServices(DbProviderFactory factory);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbProviderInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsSqlCe(DbProviderInfo providerInfo);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbProviderManifestExtensions : object {
    [ExtensionAttribute]
public static PrimitiveType GetStoreTypeFromName(DbProviderManifest providerManifest, string name);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DbProviderServicesExtensions : object {
    [ExtensionAttribute]
public static string GetProviderManifestTokenChecked(DbProviderServices providerServices, DbConnection connection);
}
internal class System.Data.Entity.Utilities.DebugCheck : object {
    [ConditionalAttribute("DEBUG")]
public static void NotNull(T value);
    [ConditionalAttribute("DEBUG")]
public static void NotNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void NotEmpty(string value);
}
internal class System.Data.Entity.Utilities.DynamicEqualityComparer`1 : object {
    private Func`3<T, T, bool> _func;
    public DynamicEqualityComparer`1(Func`3<T, T, bool> func);
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.DynamicEqualityComparerLinqIntegration : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> func);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TSource, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`3<TSource, TSource, bool> func);
    [ExtensionAttribute]
public static IEnumerable`1<T> Intersect(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`3<T, T, bool> func);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`3<T, T, bool> func);
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<T> source, T value, Func`3<T, T, bool> func);
    [ExtensionAttribute]
public static bool SequenceEqual(IEnumerable`1<TSource> source, IEnumerable`1<TSource> other, Func`3<TSource, TSource, bool> func);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsCatchableExceptionType(Exception e);
    [ExtensionAttribute]
public static bool IsCatchableEntityExceptionType(Exception e);
    [ExtensionAttribute]
public static bool RequiresContext(Exception e);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.ExpressionExtensions : object {
    [ExtensionAttribute]
public static PropertyPath GetSimplePropertyAccess(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static PropertyPath GetComplexPropertyAccess(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyPath> GetSimplePropertyAccessList(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyPath> GetComplexPropertyAccessList(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
private static IEnumerable`1<PropertyPath> MatchPropertyAccessList(LambdaExpression lambdaExpression, Func`3<Expression, Expression, PropertyPath> propertyMatcher);
    [ExtensionAttribute]
private static bool HasDefaultMembersOnly(NewExpression newExpression, IEnumerable`1<PropertyPath> propertyPaths);
    [ExtensionAttribute]
private static PropertyPath MatchSimplePropertyAccess(Expression parameterExpression, Expression propertyAccessExpression);
    [ExtensionAttribute]
private static PropertyPath MatchComplexPropertyAccess(Expression parameterExpression, Expression propertyAccessExpression);
    [ExtensionAttribute]
private static PropertyPath MatchPropertyAccess(Expression parameterExpression, Expression propertyAccessExpression);
    [ExtensionAttribute]
public static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static bool IsNullConstant(Expression expression);
    [ExtensionAttribute]
public static bool IsStringAddExpression(Expression expression);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.HashSetExtensions : object {
    [ExtensionAttribute]
public static void AddRange(HashSet`1<T> set, IEnumerable`1<T> items);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Data.Entity.Utilities.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static string Uniquify(IEnumerable`1<string> inputStrings, string targetString);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Action`2<T, int> action);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Action`1<T> action);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Func`2<T, S> action);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<T> ts, Func`2<T, string> selector, string separator);
    [IteratorStateMachineAttribute("System.Data.Entity.Utilities.IEnumerableExtensions/<Prepend>d__5`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource value);
    [IteratorStateMachineAttribute("System.Data.Entity.Utilities.IEnumerableExtensions/<Append>d__6`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> Append(IEnumerable`1<TSource> source, TSource value);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static object GetValue(MemberInfo memberInfo);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsSameAs(PropertyInfo propertyInfo, PropertyInfo otherPropertyInfo);
    [ExtensionAttribute]
public static bool ContainsSame(IEnumerable`1<PropertyInfo> enumerable, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidInterfaceStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidEdmScalarProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidEdmNavigationProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static EdmProperty AsEdmPrimitiveProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool CanWriteExtended(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyInfoForSet(PropertyInfo propertyInfo);
    private static PropertyInfo GetDeclaredProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(PropertyInfo property);
    private static void CollectProperties(PropertyInfo property, IList`1<PropertyInfo> collection);
    private static void FindNextProperty(PropertyInfo property, IList`1<PropertyInfo> collection, bool getter);
    [ExtensionAttribute]
public static MethodInfo Getter(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo Setter(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsPublic(PropertyInfo property);
}
internal class System.Data.Entity.Utilities.ProviderRowFinder : object {
    public virtual DataRow FindRow(Type hintType, Func`2<DataRow, bool> selector, IEnumerable`1<DataRow> dataRows);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.StringExtensions : object {
    private static string StartCharacterExp;
    private static string OtherCharacterExp;
    private static string NameExp;
    private static Regex _undottedNameValidator;
    private static Regex _migrationIdPattern;
    private static String[] _lineEndings;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string s1, string s2);
    [ExtensionAttribute]
internal static bool EqualsOrdinal(string s1, string s2);
    [ExtensionAttribute]
public static string MigrationName(string migrationId);
    [ExtensionAttribute]
public static string RestrictTo(string s, int size);
    [ExtensionAttribute]
public static void EachLine(string s, Action`1<string> action);
    [ExtensionAttribute]
public static bool IsValidMigrationId(string migrationId);
    [ExtensionAttribute]
public static bool IsAutomaticMigration(string migrationId);
    [ExtensionAttribute]
public static string ToAutomaticMigrationId(string migrationId);
    [ExtensionAttribute]
public static bool IsValidUndottedName(string name);
}
[ExtensionAttribute]
public static class System.Data.Entity.Utilities.TaskExtensions : object {
    [ExtensionAttribute]
public static CultureAwaiter`1<T> WithCurrentCulture(Task`1<T> task);
    [ExtensionAttribute]
public static CultureAwaiter WithCurrentCulture(Task task);
}
internal static class System.Data.Entity.Utilities.TaskHelper : object {
    internal static Task`1<T> FromException(Exception ex);
    internal static Task`1<T> FromCancellation();
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.TypeExtensions : object {
    private static Dictionary`2<Type, PrimitiveType> _primitiveTypesMap;
    private static TypeExtensions();
    [ExtensionAttribute]
public static bool IsCollection(Type type);
    [ExtensionAttribute]
public static bool IsCollection(Type type, Type& elementType);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetNonIndexerProperties(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.Data.Entity.Utilities.TypeExtensions/<GetBaseTypes>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static Type GetTargetType(Type type);
    [ExtensionAttribute]
public static bool TryUnwrapNullableType(Type type, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsValidStructuralType(Type type);
    [ExtensionAttribute]
public static bool IsValidStructuralPropertyType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitiveType(Type type, PrimitiveType& primitiveType);
    [ExtensionAttribute]
public static T CreateInstance(Type type, Func`3<string, string, string> typeMessageFactory, Func`2<string, Exception> exceptionFactory);
    [ExtensionAttribute]
public static T CreateInstance(Type type, Func`2<string, Exception> exceptionFactory);
    [ExtensionAttribute]
public static bool IsValidEdmScalarType(Type type);
    [ExtensionAttribute]
public static string NestingNamespace(Type type);
    [ExtensionAttribute]
public static string FullNameWithNesting(Type type);
    [ExtensionAttribute]
public static bool OverridesEqualsOrGetHashCode(Type type);
    [ExtensionAttribute]
public static bool IsPublic(Type type);
    [ExtensionAttribute]
public static bool IsNotPublic(Type type);
    [ExtensionAttribute]
public static MethodInfo GetOnlyDeclaredMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo GetPublicInstanceMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo GetRuntimeMethod(Type type, string name, Func`2<MethodInfo, bool> predicate, Type[][] parameterTypes);
    [ExtensionAttribute]
private static MethodInfo GetRuntimeMethod(Type type, string name, Func`2<MethodInfo, bool> predicate, Type[] parameterTypes);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetDeclaredProperty(Type type, string name);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetDeclaredProperties(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetInstanceProperties(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetNonHiddenProperties(Type type);
    private static PropertyInfo MostDerived(IEnumerable`1<PropertyInfo> properties);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetInstanceProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetStaticProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetTopProperty(Type type, string name);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static TypeAttributes Attributes(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsSerializable(Type type);
    [ExtensionAttribute]
public static bool IsGenericParameter(Type type);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ConstructorInfo> GetDeclaredConstructors(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInfo GetPublicConstructor(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Func`2<ConstructorInfo, bool> predicate, Type[][] parameterTypes);
    [ExtensionAttribute]
public static bool IsSubclassOf(Type type, Type otherType);
}
internal class System.Data.Entity.Utilities.TypeFinder : object {
    private Assembly _assembly;
    public TypeFinder(Assembly assembly);
    public Type FindType(Type baseType, string typeName, Func`2<IEnumerable`1<Type>, IEnumerable`1<Type>> filter, Func`2<string, Exception> noType, Func`3<string, IEnumerable`1<Type>, Exception> multipleTypes, Func`3<string, string, Exception> noTypeWithName, Func`3<string, string, Exception> multipleTypesWithName);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.ValidationContextExtensions : object {
    [ExtensionAttribute]
public static void SetDisplayName(ValidationContext validationContext, InternalMemberEntry property, DisplayAttribute displayAttribute);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.XContainerExtensions : object {
    [ExtensionAttribute]
public static XElement GetOrAddElement(XContainer container, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Descendants(XContainer container, IEnumerable`1<XName> name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Elements(XContainer container, IEnumerable`1<XName> name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source, IEnumerable`1<XName> name);
}
[ExtensionAttribute]
internal static class System.Data.Entity.Utilities.XDocumentExtensions : object {
    [ExtensionAttribute]
public static StorageMappingItemCollection GetStorageMappingItemCollection(XDocument model, DbProviderInfo& providerInfo);
}
public class System.Data.Entity.Validation.DbEntityValidationException : DataException {
    private IList`1<DbEntityValidationResult> _entityValidationResults;
    public IEnumerable`1<DbEntityValidationResult> EntityValidationErrors { get; }
    public DbEntityValidationException(string message);
    public DbEntityValidationException(string message, IEnumerable`1<DbEntityValidationResult> entityValidationResults);
    public DbEntityValidationException(string message, Exception innerException);
    public DbEntityValidationException(string message, IEnumerable`1<DbEntityValidationResult> entityValidationResults, Exception innerException);
    protected DbEntityValidationException(SerializationInfo info, StreamingContext context);
    public IEnumerable`1<DbEntityValidationResult> get_EntityValidationErrors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void InititializeValidationResults(IEnumerable`1<DbEntityValidationResult> entityValidationResults);
}
public class System.Data.Entity.Validation.DbEntityValidationResult : object {
    private InternalEntityEntry _entry;
    private List`1<DbValidationError> _validationErrors;
    public DbEntityEntry Entry { get; }
    public ICollection`1<DbValidationError> ValidationErrors { get; }
    public bool IsValid { get; }
    public DbEntityValidationResult(DbEntityEntry entry, IEnumerable`1<DbValidationError> validationErrors);
    internal DbEntityValidationResult(InternalEntityEntry entry, IEnumerable`1<DbValidationError> validationErrors);
    public DbEntityEntry get_Entry();
    public ICollection`1<DbValidationError> get_ValidationErrors();
    public bool get_IsValid();
}
public class System.Data.Entity.Validation.DbUnexpectedValidationException : DataException {
    public DbUnexpectedValidationException(string message);
    public DbUnexpectedValidationException(string message, Exception innerException);
    [ExcludeFromCodeCoverageAttribute]
protected DbUnexpectedValidationException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Entity.Validation.DbValidationError : object {
    private string _propertyName;
    private string _errorMessage;
    public string PropertyName { get; }
    public string ErrorMessage { get; }
    public DbValidationError(string propertyName, string errorMessage);
    public string get_PropertyName();
    public string get_ErrorMessage();
}
internal abstract class System.Linq.Expressions.EntityExpressionVisitor : object {
    internal static ExpressionType CustomExpression;
    internal virtual Expression Visit(Expression exp);
    internal virtual MemberBinding VisitBinding(MemberBinding binding);
    internal virtual ElementInit VisitElementInitializer(ElementInit initializer);
    internal virtual Expression VisitUnary(UnaryExpression u);
    internal virtual Expression VisitBinary(BinaryExpression b);
    internal virtual Expression VisitComparison(BinaryExpression expression);
    internal virtual Expression VisitTypeIs(TypeBinaryExpression b);
    internal virtual Expression VisitConstant(ConstantExpression c);
    internal virtual Expression VisitConditional(ConditionalExpression c);
    internal virtual Expression VisitParameter(ParameterExpression p);
    internal virtual Expression VisitMemberAccess(MemberExpression m);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
    internal virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    internal virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    internal virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    internal virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    internal virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    internal virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    internal virtual Expression VisitLambda(LambdaExpression lambda);
    internal virtual NewExpression VisitNew(NewExpression nex);
    internal virtual Expression VisitMemberInit(MemberInitExpression init);
    internal virtual Expression VisitListInit(ListInitExpression init);
    internal virtual Expression VisitNewArray(NewArrayExpression na);
    internal virtual Expression VisitInvocation(InvocationExpression iv);
    internal virtual Expression VisitExtension(Expression ext);
    internal static Expression Visit(Expression exp, Func`3<Expression, Func`2<Expression, Expression>, Expression> visit);
    private static BinaryExpression RemoveUnnecessaryConverts(BinaryExpression expression);
    private static bool CanRemoveConverts(UnaryExpression leftConvert, UnaryExpression rightConvert);
    private static bool TryConvertConstant(ConstantExpression& constant, Type type);
    private static BinaryExpression MakeBinaryExpression(ExpressionType expressionType, Expression left, Expression right);
}
internal static class System.Linq.Expressions.Internal.Error : object {
    internal static Exception UnhandledExpressionType(ExpressionType expressionType);
    internal static Exception UnhandledBindingType(MemberBindingType memberBindingType);
}
[ExtensionAttribute]
internal static class System.Linq.Expressions.Internal.ReadOnlyCollectionExtensions : object {
    [ExtensionAttribute]
internal static ReadOnlyCollection`1<T> ToReadOnlyCollection(IEnumerable`1<T> sequence);
}
