[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.DotNet.Cli.CommandLine.CommandArgument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
}
internal class Microsoft.DotNet.Cli.CommandLine.CommandLineApplication : object {
    private bool _throwOnUnexpectedArg;
    [CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandArgument> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <Invoke>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandLineApplication> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleRemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArgumentSeparatorHelpText>k__BackingField;
    public CommandLineApplication Parent { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string Syntax { get; public set; }
    public string Description { get; public set; }
    public List`1<CommandOption> Options { get; }
    public CommandOption OptionHelp { get; private set; }
    public CommandOption OptionVersion { get; private set; }
    public List`1<CommandArgument> Arguments { get; }
    public List`1<string> RemainingArguments { get; }
    public bool IsShowingInformation { get; protected set; }
    public Func`1<int> Invoke { get; public set; }
    public Func`1<string> LongVersionGetter { get; public set; }
    public Func`1<string> ShortVersionGetter { get; public set; }
    public List`1<CommandLineApplication> Commands { get; }
    public bool HandleResponseFiles { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public bool HandleRemainingArguments { get; public set; }
    public string ArgumentSeparatorHelpText { get; public set; }
    public CommandLineApplication(bool throwOnUnexpectedArg);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<CommandOption> get_Options();
    [CompilerGeneratedAttribute]
public CommandOption get_OptionHelp();
    [CompilerGeneratedAttribute]
private void set_OptionHelp(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [CompilerGeneratedAttribute]
private void set_OptionVersion(CommandOption value);
    [CompilerGeneratedAttribute]
public List`1<CommandArgument> get_Arguments();
    [CompilerGeneratedAttribute]
public List`1<string> get_RemainingArguments();
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
protected void set_IsShowingInformation(bool value);
    [CompilerGeneratedAttribute]
public Func`1<int> get_Invoke();
    [CompilerGeneratedAttribute]
public void set_Invoke(Func`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<CommandLineApplication> get_Commands();
    [CompilerGeneratedAttribute]
public bool get_HandleResponseFiles();
    [CompilerGeneratedAttribute]
public void set_HandleResponseFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public bool get_HandleRemainingArguments();
    [CompilerGeneratedAttribute]
public void set_HandleRemainingArguments(bool value);
    [CompilerGeneratedAttribute]
public string get_ArgumentSeparatorHelpText();
    [CompilerGeneratedAttribute]
public void set_ArgumentSeparatorHelpText(string value);
    public CommandLineApplication Command(string name, bool throwOnUnexpectedArg);
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration, bool throwOnUnexpectedArg);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public void OnExecute(Func`1<int> invoke);
    public void OnExecute(Func`1<Task`1<int>> invoke);
    public int Execute(String[] args);
    private ParseOptionResult ParseOption(bool isLongOption, CommandLineApplication command, String[] args, Int32& index, CommandOption& option);
    private static CommandLineApplication ParseSubCommand(string arg, CommandLineApplication command);
    public CommandOption HelpOption(string template);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public void ShowHint();
    public void ShowHelp(string commandName);
    public void ShowVersion();
    public string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    private static int MaxOptionTemplateLength(IEnumerable`1<CommandOption> options);
    private static int MaxCommandLength(IEnumerable`1<CommandLineApplication> commands);
    private static int MaxArgumentLength(IEnumerable`1<CommandArgument> arguments);
    private static void HandleUnexpectedArg(CommandLineApplication command, String[] args, int index, string argTypeName);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Cli.CommandLine.CommandLineApplication/<ExpandResponseFiles>d__98")]
private IEnumerable`1<string> ExpandResponseFiles(IEnumerable`1<string> args);
    private IEnumerable`1<string> ParseResponseFile(string fileName);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Cli.CommandLine.CommandLineApplicationExtensions : object {
    [ExtensionAttribute]
public static CommandOption Option(CommandLineApplication command, string template, string description);
}
internal class Microsoft.DotNet.Cli.CommandLine.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; }
    public Nullable`1<bool> BoolValue { get; private set; }
    public CommandOptionType OptionType { get; }
    public CommandOption(string template, CommandOptionType optionType);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BoolValue();
    [CompilerGeneratedAttribute]
private void set_BoolValue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    private static bool IsEnglishLetter(char c);
}
internal enum Microsoft.DotNet.Cli.CommandLine.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType BoolValue;
    public static CommandOptionType NoValue;
}
internal class Microsoft.DotNet.Cli.CommandLine.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
public abstract class System.Data.Entity.Infrastructure.Design.HandlerBase : MarshalByRefObject {
    public virtual bool ImplementsContract(string interfaceName);
}
public interface System.Data.Entity.Infrastructure.Design.IReportHandler {
    public abstract virtual void OnError(string message);
    public abstract virtual void OnWarning(string message);
    public abstract virtual void OnInformation(string message);
    public abstract virtual void OnVerbose(string message);
}
public interface System.Data.Entity.Infrastructure.Design.IResultHandler {
    public abstract virtual void SetResult(object value);
}
public interface System.Data.Entity.Infrastructure.Design.IResultHandler2 {
    public abstract virtual void SetError(string type, string message, string stackTrace);
}
public class System.Data.Entity.Infrastructure.Design.ReportHandler : HandlerBase {
    private Action`1<string> _errorHandler;
    private Action`1<string> _warningHandler;
    private Action`1<string> _informationHandler;
    private Action`1<string> _verboseHandler;
    public ReportHandler(Action`1<string> errorHandler, Action`1<string> warningHandler, Action`1<string> informationHandler, Action`1<string> verboseHandler);
    public virtual void OnError(string message);
    public virtual void OnWarning(string message);
    public virtual void OnInformation(string message);
    public virtual void OnVerbose(string message);
}
public class System.Data.Entity.Infrastructure.Design.ResultHandler : HandlerBase {
    private bool _hasResult;
    private object _result;
    private string _errorType;
    private string _errorMessage;
    private string _errorStackTrace;
    public bool HasResult { get; }
    public object Result { get; }
    public string ErrorType { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public virtual bool get_HasResult();
    public virtual object get_Result();
    public virtual string get_ErrorType();
    public virtual string get_ErrorMessage();
    public virtual string get_ErrorStackTrace();
    public virtual void SetResult(object value);
    public virtual void SetError(string type, string message, string stackTrace);
}
internal static class System.Data.Entity.Tools.AnsiConsole : object {
    public static AnsiTextWriter _out;
    private static AnsiConsole();
    public static void WriteLine(string text);
}
internal static class System.Data.Entity.Tools.AnsiConstants : object {
    public static string Reset;
    public static string Bold;
    public static string Dark;
    public static string Black;
    public static string Red;
    public static string Green;
    public static string Yellow;
    public static string Blue;
    public static string Magenta;
    public static string Cyan;
    public static string Gray;
}
internal class System.Data.Entity.Tools.AnsiTextWriter : object {
    private TextWriter _writer;
    public AnsiTextWriter(TextWriter writer);
    public void WriteLine(string text);
    private void Interpret(string value);
    private static void Apply(string parameter);
    private static void ApplyBold();
    private static void ResetBold();
    private static void ApplyColor(ConsoleColor color);
    private static void ResetColor();
}
internal class System.Data.Entity.Tools.CommandException : Exception {
    public CommandException(string message);
    public CommandException(string message, Exception innerException);
}
internal abstract class System.Data.Entity.Tools.Commands.CommandBase : object {
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
    protected virtual int Execute();
}
internal class System.Data.Entity.Tools.Commands.DatabaseCommand : HelpCommandBase {
    public virtual void Configure(CommandLineApplication command);
}
internal class System.Data.Entity.Tools.Commands.DatabaseUpdateCommand : MigrationsCommandBase {
    private CommandOption _sourceMigration;
    private CommandOption _targetMigration;
    private CommandOption _script;
    private CommandOption _force;
    public virtual void Configure(CommandLineApplication command);
    protected virtual int Execute();
}
internal abstract class System.Data.Entity.Tools.Commands.EFCommandBase : CommandBase {
    public virtual void Configure(CommandLineApplication command);
}
internal class System.Data.Entity.Tools.Commands.HelpCommandBase : EFCommandBase {
    private CommandLineApplication _command;
    public virtual void Configure(CommandLineApplication command);
    protected virtual int Execute();
}
internal class System.Data.Entity.Tools.Commands.MigrationsAddCommand : MigrationsCommandBase {
    private CommandArgument _name;
    private CommandOption _force;
    private CommandOption _ignoreChanges;
    private CommandOption _json;
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
    protected virtual int Execute();
}
internal class System.Data.Entity.Tools.Commands.MigrationsCommand : HelpCommandBase {
    public virtual void Configure(CommandLineApplication command);
}
internal abstract class System.Data.Entity.Tools.Commands.MigrationsCommandBase : ProjectCommandBase {
    [CompilerGeneratedAttribute]
private CommandOption <MigrationsConfig>k__BackingField;
    protected CommandOption MigrationsConfig { get; private set; }
    [CompilerGeneratedAttribute]
protected CommandOption get_MigrationsConfig();
    [CompilerGeneratedAttribute]
private void set_MigrationsConfig(CommandOption value);
    public virtual void Configure(CommandLineApplication command);
}
internal class System.Data.Entity.Tools.Commands.MigrationsEnableCommand : ProjectCommandBase {
    private CommandOption _force;
    private CommandOption _auto;
    private CommandOption _migrationsDir;
    private CommandOption _context;
    private CommandOption _contextAssembly;
    private CommandOption _json;
    public virtual void Configure(CommandLineApplication command);
    protected virtual int Execute();
}
internal class System.Data.Entity.Tools.Commands.MigrationsListCommand : MigrationsCommandBase {
    public virtual void Configure(CommandLineApplication command);
    protected virtual int Execute();
}
internal abstract class System.Data.Entity.Tools.Commands.ProjectCommandBase : EFCommandBase {
    [CompilerGeneratedAttribute]
private CommandOption <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ConnectionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ConnectionStringName>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <DataDir>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <RootNamespace>k__BackingField;
    protected CommandOption Assembly { get; private set; }
    protected CommandOption Config { get; private set; }
    protected CommandOption ConnectionProvider { get; private set; }
    protected CommandOption ConnectionString { get; private set; }
    protected CommandOption ConnectionStringName { get; private set; }
    protected CommandOption DataDir { get; private set; }
    protected CommandOption Language { get; private set; }
    protected CommandOption ProjectDir { get; private set; }
    protected CommandOption RootNamespace { get; private set; }
    [CompilerGeneratedAttribute]
protected CommandOption get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_ConnectionProvider();
    [CompilerGeneratedAttribute]
private void set_ConnectionProvider(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_ConnectionStringName();
    [CompilerGeneratedAttribute]
private void set_ConnectionStringName(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_DataDir();
    [CompilerGeneratedAttribute]
private void set_DataDir(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_ProjectDir();
    [CompilerGeneratedAttribute]
private void set_ProjectDir(CommandOption value);
    [CompilerGeneratedAttribute]
protected CommandOption get_RootNamespace();
    [CompilerGeneratedAttribute]
private void set_RootNamespace(CommandOption value);
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
    protected ExecutorBase CreateExecutor();
    protected string WriteMigration(ScaffoldedMigration scaffoldedMigration, bool rescaffolding, bool force, string name);
}
internal class System.Data.Entity.Tools.Commands.RootCommand : HelpCommandBase {
    public virtual void Configure(CommandLineApplication command);
    protected virtual int Execute();
    private static string GetVersion();
}
internal abstract class System.Data.Entity.Tools.ExecutorBase : object {
    protected static string ExecutorTypeName;
    public string GetContextType(string contextTypeName, string contextAssemblyName);
    public ScaffoldedMigration ScaffoldInitialCreate(string connectionStringName, string connectionString, string connectionProviderName, string contextTypeName, string contextAssemblyName, string migrationsNamespace, bool auto, string migrationsDir);
    private static ScaffoldedMigration ToScaffoldedMigration(IDictionary result);
    public ScaffoldedMigration Scaffold(string name, string connectionStringName, string connectionString, string connectionProviderName, string migrationsConfigurationName, bool ignoreChanges);
    public IEnumerable`1<string> GetDatabaseMigrations(string connectionStringName, string connectionString, string connectionProviderName, string migrationsConfigurationName);
    public string ScriptUpdate(string sourceMigration, string targetMigration, bool force, string connectionStringName, string connectionString, string connectionProviderName, string migrationsConfigurationName);
    public void Update(string targetMigration, bool force, string connectionStringName, string connectionString, string connectionProviderName, string migrationsConfigurationName);
    protected abstract virtual object CreateResultHandler();
    protected abstract virtual void Execute(string operation, object resultHandler, IDictionary args);
    private TResult Invoke(string operation, IDictionary args);
    private object InvokeImpl(string operation, IDictionary args);
}
internal static class System.Data.Entity.Tools.Json : object {
    public static CommandOption ConfigureOption(CommandLineApplication command);
    public static string Literal(string text);
}
internal class System.Data.Entity.Tools.Migrations.Design.ScaffoldedMigration : object {
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DesignerCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRescaffold>k__BackingField;
    public string MigrationId { get; public set; }
    public string UserCode { get; public set; }
    public string DesignerCode { get; public set; }
    public string Language { get; public set; }
    public string Directory { get; public set; }
    public IDictionary`2<string, object> Resources { get; }
    public bool IsRescaffold { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MigrationId();
    [CompilerGeneratedAttribute]
public void set_MigrationId(string value);
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
public void set_UserCode(string value);
    [CompilerGeneratedAttribute]
public string get_DesignerCode();
    [CompilerGeneratedAttribute]
public void set_DesignerCode(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Resources();
    [CompilerGeneratedAttribute]
public bool get_IsRescaffold();
    [CompilerGeneratedAttribute]
public void set_IsRescaffold(bool value);
}
internal static class System.Data.Entity.Tools.Program : object {
    private static String[] _knownExceptions;
    private static Program();
    private static int Main(String[] args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Data.Entity.Tools.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyDescription { get; }
    internal static string AutomaticMigrationDisabledInfo { get; }
    internal static string ConfigDescription { get; }
    internal static string ConnectionProviderDescription { get; }
    internal static string ConnectionStringDescription { get; }
    internal static string ConnectionStringNameDescription { get; }
    internal static string ContextAssemblyDescription { get; }
    internal static string ContextDescription { get; }
    internal static string DatabaseDescription { get; }
    internal static string DatabaseUpdateDescription { get; }
    internal static string DatabaseUpdateForceDescription { get; }
    internal static string DatabaseUpdateScriptDescription { get; }
    internal static string DatabaseUpdateSourceDescription { get; }
    internal static string DatabaseUpdateTargetDescription { get; }
    internal static string DataDirDescription { get; }
    internal static string DidYouMeanToRescaffold { get; }
    internal static string EF6FullName { get; }
    internal static string EnableMigrations_BeginInitialScaffold { get; }
    internal static string EnableMigrations_InitialScaffold { get; }
    internal static string EnableMigrations_Success { get; }
    internal static string EntityFrameworkNotFound { get; }
    internal static string GetMigrationsCommand_Intro { get; }
    internal static string GetMigrationsCommand_NoHistory { get; }
    internal static string IgnoreChangesDescription { get; }
    internal static string JsonDescription { get; }
    internal static string LanguageDescription { get; }
    internal static string MigrationNameDescription { get; }
    internal static string MigrationsAddDescription { get; }
    internal static string MigrationsAddForceDescription { get; }
    internal static string MigrationsAlreadyEnabled { get; }
    internal static string MigrationsConfigDescription { get; }
    internal static string MigrationsDescription { get; }
    internal static string MigrationsDirDescription { get; }
    internal static string MigrationsDirectoryParamIsRooted { get; }
    internal static string MigrationsEnableAutoDescription { get; }
    internal static string MigrationsEnableDescription { get; }
    internal static string MigrationsEnableForceDescription { get; }
    internal static string MigrationsListDescription { get; }
    internal static string MissingArgument { get; }
    internal static string MissingOption { get; }
    internal static string MutuallyExclusiveOptions { get; }
    internal static string NoColorDescription { get; }
    internal static string PrefixDescription { get; }
    internal static string ProjectDirDescription { get; }
    internal static string RescaffoldingMigration { get; }
    internal static string RescaffoldNoForce { get; }
    internal static string RootNamespaceDescription { get; }
    internal static string ScaffoldingMigration { get; }
    internal static string SnapshotBehindWarning { get; }
    internal static string UpdateDatabaseCommand_VerboseInstructions { get; }
    internal static string VerboseDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyDescription();
    internal static string get_AutomaticMigrationDisabledInfo();
    internal static string get_ConfigDescription();
    internal static string get_ConnectionProviderDescription();
    internal static string get_ConnectionStringDescription();
    internal static string get_ConnectionStringNameDescription();
    internal static string get_ContextAssemblyDescription();
    internal static string get_ContextDescription();
    internal static string get_DatabaseDescription();
    internal static string get_DatabaseUpdateDescription();
    internal static string get_DatabaseUpdateForceDescription();
    internal static string get_DatabaseUpdateScriptDescription();
    internal static string get_DatabaseUpdateSourceDescription();
    internal static string get_DatabaseUpdateTargetDescription();
    internal static string get_DataDirDescription();
    internal static string get_DidYouMeanToRescaffold();
    internal static string get_EF6FullName();
    internal static string get_EnableMigrations_BeginInitialScaffold();
    internal static string get_EnableMigrations_InitialScaffold();
    internal static string get_EnableMigrations_Success();
    internal static string get_EntityFrameworkNotFound();
    internal static string get_GetMigrationsCommand_Intro();
    internal static string get_GetMigrationsCommand_NoHistory();
    internal static string get_IgnoreChangesDescription();
    internal static string get_JsonDescription();
    internal static string get_LanguageDescription();
    internal static string get_MigrationNameDescription();
    internal static string get_MigrationsAddDescription();
    internal static string get_MigrationsAddForceDescription();
    internal static string get_MigrationsAlreadyEnabled();
    internal static string get_MigrationsConfigDescription();
    internal static string get_MigrationsDescription();
    internal static string get_MigrationsDirDescription();
    internal static string get_MigrationsDirectoryParamIsRooted();
    internal static string get_MigrationsEnableAutoDescription();
    internal static string get_MigrationsEnableDescription();
    internal static string get_MigrationsEnableForceDescription();
    internal static string get_MigrationsListDescription();
    internal static string get_MissingArgument();
    internal static string get_MissingOption();
    internal static string get_MutuallyExclusiveOptions();
    internal static string get_NoColorDescription();
    internal static string get_PrefixDescription();
    internal static string get_ProjectDirDescription();
    internal static string get_RescaffoldingMigration();
    internal static string get_RescaffoldNoForce();
    internal static string get_RootNamespaceDescription();
    internal static string get_ScaffoldingMigration();
    internal static string get_SnapshotBehindWarning();
    internal static string get_UpdateDatabaseCommand_VerboseInstructions();
    internal static string get_VerboseDescription();
}
internal class System.Data.Entity.Tools.ReflectionExecutor : ExecutorBase {
    private string _applicationBase;
    private Assembly _assembly;
    private object _executor;
    private Type _resultHandlerType;
    public ReflectionExecutor(string assembly, string dataDirectory, string configurationFile, string rootNamespace, string language);
    protected virtual object CreateResultHandler();
    protected virtual void Execute(string operation, object resultHandler, IDictionary args);
    private Assembly ResolveAssembly(object sender, ResolveEventArgs args);
}
internal static class System.Data.Entity.Tools.Reporter : object {
    [CompilerGeneratedAttribute]
private static bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <PrefixOutput>k__BackingField;
    public static bool IsVerbose { get; public set; }
    public static bool NoColor { get; public set; }
    public static bool PrefixOutput { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public static void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public static bool get_NoColor();
    [CompilerGeneratedAttribute]
public static void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public static bool get_PrefixOutput();
    [CompilerGeneratedAttribute]
public static void set_PrefixOutput(bool value);
    public static string Colorize(string value, Func`2<string, string> colorizeFunc);
    public static void WriteError(string message);
    public static void WriteWarning(string message);
    public static void WriteInformation(string message);
    public static void WriteData(string message);
    public static void WriteVerbose(string message);
    private static string Prefix(string prefix, string value);
    private static void WriteLine(string value);
}
internal class System.Data.Entity.Tools.Utilities.DebugCheck : object {
    [ConditionalAttribute("DEBUG")]
public static void NotNull(T value);
    [ConditionalAttribute("DEBUG")]
public static void NotNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void NotEmpty(string value);
}
internal class System.Data.Entity.Tools.Utilities.TemplateProcessor : object {
    private static Regex _tokenRegex;
    private static TemplateProcessor();
    public string Process(string input, IDictionary`2<string, string> tokens);
}
internal class System.Data.Entity.Tools.WrappedException : Exception {
    private string _stackTrace;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; }
    public WrappedException(string type, string message, string stackTrace);
    [CompilerGeneratedAttribute]
public string get_Type();
    public virtual string ToString();
}
internal class System.Resources.ResXResourceWriter : object {
    private TextWriter _writer;
    private bool _first;
    public ResXResourceWriter(string fileName);
    public void AddResource(string name, object value);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    private static string InitialDatabase;
    private static Regex _migrationIdPattern;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string s1, string s2);
    [ExtensionAttribute]
public static string MigrationName(string migrationId);
    [ExtensionAttribute]
public static bool IsValidMigrationId(string migrationId);
}
