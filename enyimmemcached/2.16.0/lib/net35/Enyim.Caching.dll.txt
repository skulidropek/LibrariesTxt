public class Enyim.Caching.Configuration.AuthenticationConfiguration : object {
    private Type authenticator;
    private Dictionary`2<string, object> parameters;
    private Type Enyim.Caching.Configuration.IAuthenticationConfiguration.Type { get; private set; }
    private Dictionary`2<string, object> Enyim.Caching.Configuration.IAuthenticationConfiguration.Parameters { get; }
    private sealed virtual override Type Enyim.Caching.Configuration.IAuthenticationConfiguration.get_Type();
    private sealed virtual override void Enyim.Caching.Configuration.IAuthenticationConfiguration.set_Type(Type value);
    private sealed virtual override Dictionary`2<string, object> Enyim.Caching.Configuration.IAuthenticationConfiguration.get_Parameters();
}
public class Enyim.Caching.Configuration.AuthenticationElement : ConfigurationElement {
    private Dictionary`2<string, object> parameters;
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
[InterfaceValidatorAttribute("Enyim.Caching.Memcached.ISaslAuthenticationProvider")]
public Type Type { get; public set; }
    private Type Enyim.Caching.Configuration.IAuthenticationConfiguration.Type { get; private set; }
    private Dictionary`2<string, object> Enyim.Caching.Configuration.IAuthenticationConfiguration.Parameters { get; }
    public Type get_Type();
    public void set_Type(Type value);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    private sealed virtual override Type Enyim.Caching.Configuration.IAuthenticationConfiguration.get_Type();
    private sealed virtual override void Enyim.Caching.Configuration.IAuthenticationConfiguration.set_Type(Type value);
    private sealed virtual override Dictionary`2<string, object> Enyim.Caching.Configuration.IAuthenticationConfiguration.get_Parameters();
}
internal class Enyim.Caching.Configuration.ConfigurationElementException : ConfigurationErrorsException {
    public ConfigurationElementException(string message, ConfigurationElement element);
    public ConfigurationElementException(string message, Exception inner, ConfigurationElement element);
}
public static class Enyim.Caching.Configuration.ConfigurationHelper : object {
    internal static bool TryGetAndRemove(Dictionary`2<string, string> dict, string name, Int32& value, bool required);
    internal static bool TryGetAndRemove(Dictionary`2<string, string> dict, string name, TimeSpan& value, bool required);
    internal static bool TryGetAndRemove(Dictionary`2<string, string> dict, string name, String& value, bool required);
    internal static void CheckForUnknownAttributes(Dictionary`2<string, string> dict);
    public static void CheckForInterface(Type type, Type interfaceType);
    public static IPEndPoint ResolveToEndPoint(string value);
    public static IPEndPoint ResolveToEndPoint(string host, int port);
}
public class Enyim.Caching.Configuration.EndPointElement : ConfigurationElement {
    private IPEndPoint endpoint;
    [ConfigurationPropertyAttribute("address")]
public string Address { get; public set; }
    [ConfigurationPropertyAttribute("port")]
[IntegerValidatorAttribute]
public int Port { get; public set; }
    public IPEndPoint EndPoint { get; }
    public string get_Address();
    public void set_Address(string value);
    public int get_Port();
    public void set_Port(int value);
    public IPEndPoint get_EndPoint();
}
public class Enyim.Caching.Configuration.EndPointElementCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public IList`1<IPEndPoint> ToIPEndPointCollection();
}
public class Enyim.Caching.Configuration.FactoryElement`1 : ConfigurationElement {
    protected Dictionary`2<string, string> Parameters;
    private TFactory instance;
    protected bool IsOptional { get; }
    [ConfigurationPropertyAttribute("factory")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
public Type Factory { get; public set; }
    protected virtual bool get_IsOptional();
    public Type get_Factory();
    public void set_Factory(Type value);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    public TFactory CreateInstance();
}
public interface Enyim.Caching.Configuration.IAuthenticationConfiguration {
    public Type Type { get; public set; }
    public Dictionary`2<string, object> Parameters { get; }
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
    public abstract virtual Dictionary`2<string, object> get_Parameters();
}
public interface Enyim.Caching.Configuration.IMemcachedClientConfiguration {
    public IList`1<IPEndPoint> Servers { get; }
    public ISocketPoolConfiguration SocketPool { get; }
    public IAuthenticationConfiguration Authentication { get; }
    public abstract virtual IList`1<IPEndPoint> get_Servers();
    public abstract virtual ISocketPoolConfiguration get_SocketPool();
    public abstract virtual IAuthenticationConfiguration get_Authentication();
    public abstract virtual IMemcachedKeyTransformer CreateKeyTransformer();
    public abstract virtual IMemcachedNodeLocator CreateNodeLocator();
    public abstract virtual ITranscoder CreateTranscoder();
    public abstract virtual IServerPool CreatePool();
    public abstract virtual IPerformanceMonitor CreatePerformanceMonitor();
}
public class Enyim.Caching.Configuration.InterfaceValidator : ConfigurationValidatorBase {
    private Type interfaceType;
    public InterfaceValidator(Type type);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
public class Enyim.Caching.Configuration.InterfaceValidatorAttribute : ConfigurationValidatorAttribute {
    private Type interfaceType;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public InterfaceValidatorAttribute(Type type);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
public interface Enyim.Caching.Configuration.ISocketPoolConfiguration {
    public int MinPoolSize { get; public set; }
    public int MaxPoolSize { get; public set; }
    public TimeSpan ConnectionTimeout { get; public set; }
    public TimeSpan QueueTimeout { get; public set; }
    public TimeSpan ReceiveTimeout { get; public set; }
    public TimeSpan DeadTimeout { get; public set; }
    public TimeSpan KeepAliveStartDelay { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public INodeFailurePolicyFactory FailurePolicyFactory { get; public set; }
    public abstract virtual int get_MinPoolSize();
    public abstract virtual void set_MinPoolSize(int value);
    public abstract virtual int get_MaxPoolSize();
    public abstract virtual void set_MaxPoolSize(int value);
    public abstract virtual TimeSpan get_ConnectionTimeout();
    public abstract virtual void set_ConnectionTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_QueueTimeout();
    public abstract virtual void set_QueueTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_ReceiveTimeout();
    public abstract virtual void set_ReceiveTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_DeadTimeout();
    public abstract virtual void set_DeadTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_KeepAliveStartDelay();
    public abstract virtual void set_KeepAliveStartDelay(TimeSpan value);
    public abstract virtual TimeSpan get_KeepAliveInterval();
    public abstract virtual void set_KeepAliveInterval(TimeSpan value);
    public abstract virtual INodeFailurePolicyFactory get_FailurePolicyFactory();
    public abstract virtual void set_FailurePolicyFactory(INodeFailurePolicyFactory value);
}
public interface Enyim.Caching.Configuration.IVBucketConfiguration {
    public IList`1<IPEndPoint> Servers { get; }
    public IList`1<VBucket> Buckets { get; }
    public abstract virtual HashAlgorithm CreateHashAlgorithm();
    public abstract virtual IList`1<IPEndPoint> get_Servers();
    public abstract virtual IList`1<VBucket> get_Buckets();
}
public class Enyim.Caching.Configuration.LoggerSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("factory")]
[InterfaceValidatorAttribute("Enyim.Caching.ILogFactory")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
public Type LogFactory { get; public set; }
    public Type get_LogFactory();
    public void set_LogFactory(Type value);
}
public class Enyim.Caching.Configuration.MemcachedClientConfiguration : object {
    private Type nodeLocator;
    private ITranscoder transcoder;
    private IMemcachedKeyTransformer keyTransformer;
    [CompilerGeneratedAttribute]
private IList`1<IPEndPoint> <Servers>k__BackingField;
    [CompilerGeneratedAttribute]
private ISocketPoolConfiguration <SocketPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationConfiguration <Authentication>k__BackingField;
    [CompilerGeneratedAttribute]
private IProviderFactory`1<IMemcachedNodeLocator> <NodeLocatorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceMonitor <PerformanceMonitor>k__BackingField;
    [CompilerGeneratedAttribute]
private MemcachedProtocol <Protocol>k__BackingField;
    public IList`1<IPEndPoint> Servers { get; private set; }
    public ISocketPoolConfiguration SocketPool { get; private set; }
    public IAuthenticationConfiguration Authentication { get; private set; }
    public IMemcachedKeyTransformer KeyTransformer { get; public set; }
    public Type NodeLocator { get; public set; }
    public IProviderFactory`1<IMemcachedNodeLocator> NodeLocatorFactory { get; public set; }
    public ITranscoder Transcoder { get; public set; }
    public IPerformanceMonitor PerformanceMonitor { get; public set; }
    public MemcachedProtocol Protocol { get; public set; }
    private IList`1<IPEndPoint> Enyim.Caching.Configuration.IMemcachedClientConfiguration.Servers { get; }
    private ISocketPoolConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.SocketPool { get; }
    private IAuthenticationConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.Authentication { get; }
    public void AddServer(string address);
    public void AddServer(string host, int port);
    [CompilerGeneratedAttribute]
public IList`1<IPEndPoint> get_Servers();
    [CompilerGeneratedAttribute]
private void set_Servers(IList`1<IPEndPoint> value);
    [CompilerGeneratedAttribute]
public ISocketPoolConfiguration get_SocketPool();
    [CompilerGeneratedAttribute]
private void set_SocketPool(ISocketPoolConfiguration value);
    [CompilerGeneratedAttribute]
public IAuthenticationConfiguration get_Authentication();
    [CompilerGeneratedAttribute]
private void set_Authentication(IAuthenticationConfiguration value);
    public IMemcachedKeyTransformer get_KeyTransformer();
    public void set_KeyTransformer(IMemcachedKeyTransformer value);
    public Type get_NodeLocator();
    public void set_NodeLocator(Type value);
    [CompilerGeneratedAttribute]
public IProviderFactory`1<IMemcachedNodeLocator> get_NodeLocatorFactory();
    [CompilerGeneratedAttribute]
public void set_NodeLocatorFactory(IProviderFactory`1<IMemcachedNodeLocator> value);
    public ITranscoder get_Transcoder();
    public void set_Transcoder(ITranscoder value);
    [CompilerGeneratedAttribute]
public IPerformanceMonitor get_PerformanceMonitor();
    [CompilerGeneratedAttribute]
public void set_PerformanceMonitor(IPerformanceMonitor value);
    [CompilerGeneratedAttribute]
public MemcachedProtocol get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(MemcachedProtocol value);
    private sealed virtual override IList`1<IPEndPoint> Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_Servers();
    private sealed virtual override ISocketPoolConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_SocketPool();
    private sealed virtual override IAuthenticationConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_Authentication();
    private sealed virtual override IMemcachedKeyTransformer Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateKeyTransformer();
    private sealed virtual override IMemcachedNodeLocator Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateNodeLocator();
    private sealed virtual override ITranscoder Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateTranscoder();
    private sealed virtual override IServerPool Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreatePool();
    private sealed virtual override IPerformanceMonitor Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreatePerformanceMonitor();
}
public class Enyim.Caching.Configuration.MemcachedClientSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("servers")]
public EndPointElementCollection Servers { get; }
    [ConfigurationPropertyAttribute("socketPool")]
public SocketPoolElement SocketPool { get; public set; }
    [ConfigurationPropertyAttribute("authentication")]
public AuthenticationElement Authentication { get; public set; }
    [ConfigurationPropertyAttribute("locator")]
public ProviderElement`1<IMemcachedNodeLocator> NodeLocator { get; public set; }
    [ConfigurationPropertyAttribute("keyTransformer")]
public ProviderElement`1<IMemcachedKeyTransformer> KeyTransformer { get; public set; }
    [ConfigurationPropertyAttribute("transcoder")]
public ProviderElement`1<ITranscoder> Transcoder { get; public set; }
    [ConfigurationPropertyAttribute("performanceMonitor")]
public ProviderElement`1<IPerformanceMonitor> PerformanceMonitor { get; public set; }
    [ConfigurationPropertyAttribute("protocol")]
public MemcachedProtocol Protocol { get; public set; }
    private IList`1<IPEndPoint> Enyim.Caching.Configuration.IMemcachedClientConfiguration.Servers { get; }
    private ISocketPoolConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.SocketPool { get; }
    private IAuthenticationConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.Authentication { get; }
    public EndPointElementCollection get_Servers();
    public SocketPoolElement get_SocketPool();
    public void set_SocketPool(SocketPoolElement value);
    public AuthenticationElement get_Authentication();
    public void set_Authentication(AuthenticationElement value);
    public ProviderElement`1<IMemcachedNodeLocator> get_NodeLocator();
    public void set_NodeLocator(ProviderElement`1<IMemcachedNodeLocator> value);
    public ProviderElement`1<IMemcachedKeyTransformer> get_KeyTransformer();
    public void set_KeyTransformer(ProviderElement`1<IMemcachedKeyTransformer> value);
    public ProviderElement`1<ITranscoder> get_Transcoder();
    public void set_Transcoder(ProviderElement`1<ITranscoder> value);
    public ProviderElement`1<IPerformanceMonitor> get_PerformanceMonitor();
    public void set_PerformanceMonitor(ProviderElement`1<IPerformanceMonitor> value);
    protected virtual void PostDeserialize();
    public MemcachedProtocol get_Protocol();
    public void set_Protocol(MemcachedProtocol value);
    private sealed virtual override IList`1<IPEndPoint> Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_Servers();
    private sealed virtual override ISocketPoolConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_SocketPool();
    private sealed virtual override IMemcachedKeyTransformer Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateKeyTransformer();
    private sealed virtual override IMemcachedNodeLocator Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateNodeLocator();
    private sealed virtual override ITranscoder Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreateTranscoder();
    private sealed virtual override IAuthenticationConfiguration Enyim.Caching.Configuration.IMemcachedClientConfiguration.get_Authentication();
    private sealed virtual override IServerPool Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreatePool();
    private sealed virtual override IPerformanceMonitor Enyim.Caching.Configuration.IMemcachedClientConfiguration.CreatePerformanceMonitor();
}
public class Enyim.Caching.Configuration.OptionalFactoryElement`1 : FactoryElement`1<TResult> {
    protected bool IsOptional { get; }
    protected virtual bool get_IsOptional();
}
public class Enyim.Caching.Configuration.ProviderElement`1 : ConfigurationElement {
    private Dictionary`2<string, string> parameters;
    private IProviderFactory`1<T> factoryInstance;
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
public Type Type { get; public set; }
    [ConfigurationPropertyAttribute("factory")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
public Type Factory { get; public set; }
    [ConfigurationPropertyAttribute("data")]
public TextElement Content { get; public set; }
    public Type get_Type();
    public void set_Type(Type value);
    public Type get_Factory();
    public void set_Factory(Type value);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    public T CreateInstance();
    public TextElement get_Content();
    public void set_Content(TextElement value);
    protected virtual void PostDeserialize();
}
public class Enyim.Caching.Configuration.SocketPoolConfiguration : object {
    private int minPoolSize;
    private int maxPoolSize;
    private TimeSpan connectionTimeout;
    private TimeSpan receiveTimeout;
    private TimeSpan deadTimeout;
    private TimeSpan queueTimeout;
    private INodeFailurePolicyFactory policyFactory;
    private TimeSpan keepAliveInterval;
    private TimeSpan keepAliveStartDelay;
    private int Enyim.Caching.Configuration.ISocketPoolConfiguration.MinPoolSize { get; private set; }
    private int Enyim.Caching.Configuration.ISocketPoolConfiguration.MaxPoolSize { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.ConnectionTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.ReceiveTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.QueueTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.DeadTimeout { get; private set; }
    private INodeFailurePolicyFactory Enyim.Caching.Configuration.ISocketPoolConfiguration.FailurePolicyFactory { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.KeepAliveInterval { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.KeepAliveStartDelay { get; private set; }
    private sealed virtual override int Enyim.Caching.Configuration.ISocketPoolConfiguration.get_MinPoolSize();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_MinPoolSize(int value);
    private sealed virtual override int Enyim.Caching.Configuration.ISocketPoolConfiguration.get_MaxPoolSize();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_MaxPoolSize(int value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_ConnectionTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_ConnectionTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_ReceiveTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_ReceiveTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_QueueTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_QueueTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_DeadTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_DeadTimeout(TimeSpan value);
    private sealed virtual override INodeFailurePolicyFactory Enyim.Caching.Configuration.ISocketPoolConfiguration.get_FailurePolicyFactory();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_FailurePolicyFactory(INodeFailurePolicyFactory value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_KeepAliveInterval();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_KeepAliveInterval(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_KeepAliveStartDelay();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_KeepAliveStartDelay(TimeSpan value);
}
public class Enyim.Caching.Configuration.SocketPoolElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("minPoolSize")]
[IntegerValidatorAttribute]
public int MinPoolSize { get; public set; }
    [ConfigurationPropertyAttribute("maxPoolSize")]
[IntegerValidatorAttribute]
public int MaxPoolSize { get; public set; }
    [ConfigurationPropertyAttribute("connectionTimeout")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan ConnectionTimeout { get; public set; }
    [ConfigurationPropertyAttribute("queueTimeout")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan QueueTimeout { get; public set; }
    [ConfigurationPropertyAttribute("receiveTimeout")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan ReceiveTimeout { get; public set; }
    [ConfigurationPropertyAttribute("keepAliveInterval")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan KeepAliveInterval { get; public set; }
    [ConfigurationPropertyAttribute("keepAliveStartFrom")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan KeepAliveStartDelay { get; public set; }
    [ConfigurationPropertyAttribute("deadTimeout")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan DeadTimeout { get; public set; }
    [ConfigurationPropertyAttribute("failurePolicyFactory")]
public ProviderElement`1<INodeFailurePolicyFactory> FailurePolicyFactory { get; public set; }
    private int Enyim.Caching.Configuration.ISocketPoolConfiguration.MinPoolSize { get; private set; }
    private int Enyim.Caching.Configuration.ISocketPoolConfiguration.MaxPoolSize { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.ConnectionTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.DeadTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.QueueTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.ReceiveTimeout { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.KeepAliveStartDelay { get; private set; }
    private TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.KeepAliveInterval { get; private set; }
    private INodeFailurePolicyFactory Enyim.Caching.Configuration.ISocketPoolConfiguration.FailurePolicyFactory { get; private set; }
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public TimeSpan get_ConnectionTimeout();
    public void set_ConnectionTimeout(TimeSpan value);
    public TimeSpan get_QueueTimeout();
    public void set_QueueTimeout(TimeSpan value);
    public TimeSpan get_ReceiveTimeout();
    public void set_ReceiveTimeout(TimeSpan value);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    public TimeSpan get_KeepAliveStartDelay();
    public void set_KeepAliveStartDelay(TimeSpan value);
    public TimeSpan get_DeadTimeout();
    public void set_DeadTimeout(TimeSpan value);
    protected virtual void PostDeserialize();
    public ProviderElement`1<INodeFailurePolicyFactory> get_FailurePolicyFactory();
    public void set_FailurePolicyFactory(ProviderElement`1<INodeFailurePolicyFactory> value);
    private sealed virtual override int Enyim.Caching.Configuration.ISocketPoolConfiguration.get_MinPoolSize();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_MinPoolSize(int value);
    private sealed virtual override int Enyim.Caching.Configuration.ISocketPoolConfiguration.get_MaxPoolSize();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_MaxPoolSize(int value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_ConnectionTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_ConnectionTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_DeadTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_DeadTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_QueueTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_QueueTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_ReceiveTimeout();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_ReceiveTimeout(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_KeepAliveStartDelay();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_KeepAliveStartDelay(TimeSpan value);
    private sealed virtual override TimeSpan Enyim.Caching.Configuration.ISocketPoolConfiguration.get_KeepAliveInterval();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_KeepAliveInterval(TimeSpan value);
    private sealed virtual override INodeFailurePolicyFactory Enyim.Caching.Configuration.ISocketPoolConfiguration.get_FailurePolicyFactory();
    private sealed virtual override void Enyim.Caching.Configuration.ISocketPoolConfiguration.set_FailurePolicyFactory(INodeFailurePolicyFactory value);
}
public class Enyim.Caching.Configuration.TextElement : ConfigurationElement {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
}
public class Enyim.Caching.Configuration.VBucket : ValueType {
    private int master;
    private Int32[] replicas;
    public int Master { get; }
    public Int32[] Replicas { get; }
    public VBucket(int master, Int32[] replicas);
    public int get_Master();
    public Int32[] get_Replicas();
}
public class Enyim.Caching.ConsoleLogFactory : object {
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(string name);
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(Type type);
}
public class Enyim.Caching.CountdownEvent : object {
    private int count;
    private ManualResetEvent mre;
    public CountdownEvent(int count);
    public void Signal();
    public void Wait();
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose();
}
public class Enyim.Caching.DiagnosticsLogFactory : object {
    private TextWriter writer;
    public DiagnosticsLogFactory(string logPath);
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(string name);
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(Type type);
}
public interface Enyim.Caching.ILog {
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
    public abstract virtual void Debug(object message);
    public abstract virtual void Debug(object message, Exception exception);
    public abstract virtual void DebugFormat(string format, object arg0);
    public abstract virtual void DebugFormat(string format, object arg0, object arg1);
    public abstract virtual void DebugFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void DebugFormat(string format, Object[] args);
    public abstract virtual void DebugFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Info(object message);
    public abstract virtual void Info(object message, Exception exception);
    public abstract virtual void InfoFormat(string format, object arg0);
    public abstract virtual void InfoFormat(string format, object arg0, object arg1);
    public abstract virtual void InfoFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void InfoFormat(string format, Object[] args);
    public abstract virtual void InfoFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Warn(object message);
    public abstract virtual void Warn(object message, Exception exception);
    public abstract virtual void WarnFormat(string format, object arg0);
    public abstract virtual void WarnFormat(string format, object arg0, object arg1);
    public abstract virtual void WarnFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void WarnFormat(string format, Object[] args);
    public abstract virtual void WarnFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Error(object message);
    public abstract virtual void Error(object message, Exception exception);
    public abstract virtual void ErrorFormat(string format, object arg0);
    public abstract virtual void ErrorFormat(string format, object arg0, object arg1);
    public abstract virtual void ErrorFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void ErrorFormat(string format, Object[] args);
    public abstract virtual void ErrorFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Fatal(object message);
    public abstract virtual void Fatal(object message, Exception exception);
    public abstract virtual void FatalFormat(string format, object arg0);
    public abstract virtual void FatalFormat(string format, object arg0, object arg1);
    public abstract virtual void FatalFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void FatalFormat(string format, Object[] args);
    public abstract virtual void FatalFormat(IFormatProvider provider, string format, Object[] args);
}
public interface Enyim.Caching.ILogFactory {
    public abstract virtual ILog GetLogger(string name);
    public abstract virtual ILog GetLogger(Type type);
}
public interface Enyim.Caching.IMemcachedClient {
    public abstract virtual object Get(string key);
    public abstract virtual T Get(string key);
    public abstract virtual IDictionary`2<string, object> Get(IEnumerable`1<string> keys);
    public abstract virtual bool TryGet(string key, Object& value);
    public abstract virtual bool TryGetWithCas(string key, CasResult`1& value);
    public abstract virtual CasResult`1<object> GetWithCas(string key);
    public abstract virtual CasResult`1<T> GetWithCas(string key);
    public abstract virtual IDictionary`2<string, CasResult`1<object>> GetWithCas(IEnumerable`1<string> keys);
    public abstract virtual bool Append(string key, ArraySegment`1<byte> data);
    public abstract virtual CasResult`1<bool> Append(string key, ulong cas, ArraySegment`1<byte> data);
    public abstract virtual bool Prepend(string key, ArraySegment`1<byte> data);
    public abstract virtual CasResult`1<bool> Prepend(string key, ulong cas, ArraySegment`1<byte> data);
    public abstract virtual bool Store(StoreMode mode, string key, object value);
    public abstract virtual bool Store(StoreMode mode, string key, object value, DateTime expiresAt);
    public abstract virtual bool Store(StoreMode mode, string key, object value, TimeSpan validFor);
    public abstract virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value);
    public abstract virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, ulong cas);
    public abstract virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, DateTime expiresAt, ulong cas);
    public abstract virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, TimeSpan validFor, ulong cas);
    public abstract virtual ulong Decrement(string key, ulong defaultValue, ulong delta);
    public abstract virtual ulong Decrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public abstract virtual ulong Decrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public abstract virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public abstract virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public abstract virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public abstract virtual ulong Increment(string key, ulong defaultValue, ulong delta);
    public abstract virtual ulong Increment(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public abstract virtual ulong Increment(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public abstract virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, ulong cas);
    public abstract virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public abstract virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public abstract virtual bool Remove(string key);
    public abstract virtual void FlushAll();
    public abstract virtual ServerStats Stats();
    public abstract virtual ServerStats Stats(string type);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NodeFailed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NodeFailed(Action`1<IMemcachedNode> value);
}
public interface Enyim.Caching.IMemcachedResultsClient {
    public abstract virtual IGetOperationResult ExecuteGet(string key);
    public abstract virtual IGetOperationResult`1<T> ExecuteGet(string key);
    public abstract virtual IDictionary`2<string, IGetOperationResult> ExecuteGet(IEnumerable`1<string> keys);
    public abstract virtual IGetOperationResult ExecuteTryGet(string key, Object& value);
    public abstract virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value);
    public abstract virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value, DateTime expiresAt);
    public abstract virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value, TimeSpan validFor);
    public abstract virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value);
    public abstract virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, ulong cas);
    public abstract virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, DateTime expiresAt, ulong cas);
    public abstract virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, TimeSpan validFor, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public abstract virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public abstract virtual IConcatOperationResult ExecuteAppend(string key, ArraySegment`1<byte> data);
    public abstract virtual IConcatOperationResult ExecuteAppend(string key, ulong cas, ArraySegment`1<byte> data);
    public abstract virtual IConcatOperationResult ExecutePrepend(string key, ArraySegment`1<byte> data);
    public abstract virtual IConcatOperationResult ExecutePrepend(string key, ulong cas, ArraySegment`1<byte> data);
    public abstract virtual IRemoveOperationResult ExecuteRemove(string key);
}
public static class Enyim.Caching.LogManager : object {
    private static ILogFactory factory;
    private static LogManager();
    public static void AssignFactory(ILogFactory factory);
    public static ILog GetLogger(Type type);
    public static ILog GetLogger(string name);
}
public class Enyim.Caching.Memcached.AsyncIOArgs : object {
    [CompilerGeneratedAttribute]
private Action`1<AsyncIOArgs> <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fail>k__BackingField;
    public Action`1<AsyncIOArgs> Next { get; public set; }
    public int Count { get; public set; }
    public Byte[] Result { get; internal set; }
    public bool Fail { get; internal set; }
    [CompilerGeneratedAttribute]
public Action`1<AsyncIOArgs> get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(Action`1<AsyncIOArgs> value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_Fail();
    [CompilerGeneratedAttribute]
internal void set_Fail(bool value);
}
public class Enyim.Caching.Memcached.Base64KeyTransformer : KeyTransformerBase {
    public virtual string Transform(string key);
}
public class Enyim.Caching.Memcached.CacheItem : ValueType {
    private ArraySegment`1<byte> data;
    private UInt32 flags;
    public ArraySegment`1<byte> Data { get; public set; }
    public UInt32 Flags { get; public set; }
    public CacheItem(UInt32 flags, ArraySegment`1<byte> data);
    public ArraySegment`1<byte> get_Data();
    public void set_Data(ArraySegment`1<byte> value);
    public UInt32 get_Flags();
    public void set_Flags(UInt32 value);
}
public class Enyim.Caching.Memcached.CasResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public T Result { get; public set; }
    public ulong Cas { get; public set; }
    public int StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(T value);
    [CompilerGeneratedAttribute]
public ulong get_Cas();
    [CompilerGeneratedAttribute]
public void set_Cas(ulong value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
}
public class Enyim.Caching.Memcached.CommandNotSupportedException : MemcachedClientException {
    public CommandNotSupportedException(string message);
    public CommandNotSupportedException(string message, Exception inner);
    protected CommandNotSupportedException(SerializationInfo info, StreamingContext context);
}
public enum Enyim.Caching.Memcached.ConcatenationMode : Enum {
    public byte value__;
    public static ConcatenationMode Append;
    public static ConcatenationMode Prepend;
}
public class Enyim.Caching.Memcached.DataContractTranscoder : DefaultTranscoder {
    protected virtual object DeserializeObject(ArraySegment`1<byte> value);
    protected virtual ArraySegment`1<byte> SerializeObject(object value);
}
public class Enyim.Caching.Memcached.DefaultKeyTransformer : KeyTransformerBase {
    private static Char[] ForbiddenChars;
    private static DefaultKeyTransformer();
    public virtual string Transform(string key);
}
public class Enyim.Caching.Memcached.DefaultNodeLocator : object {
    private static int ServerAddressMutations;
    private UInt32[] keys;
    private Dictionary`2<UInt32, IMemcachedNode> servers;
    private Dictionary`2<IMemcachedNode, bool> deadServers;
    private List`1<IMemcachedNode> allServers;
    private ReaderWriterLockSlim serverAccessLock;
    private void BuildIndex(List`1<IMemcachedNode> nodes);
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNodeLocator.Initialize(IList`1<IMemcachedNode> nodes);
    private sealed virtual override IMemcachedNode Enyim.Caching.Memcached.IMemcachedNodeLocator.Locate(string key);
    private sealed virtual override IEnumerable`1<IMemcachedNode> Enyim.Caching.Memcached.IMemcachedNodeLocator.GetWorkingNodes();
    private IMemcachedNode Locate(string key);
    private IMemcachedNode FindNode(string key);
    private static UInt32[] GenerateKeys(IMemcachedNode node, int numberOfKeys);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Enyim.Caching.Memcached.DefaultPerformanceMonitor : object {
    private OpMonitor pcGet;
    private OpMonitor pcSet;
    private OpMonitor pcAdd;
    private OpMonitor pcReplace;
    private OpMonitor pcDelete;
    private OpMonitor pcIncrement;
    private OpMonitor pcDecrement;
    private OpMonitor pcAppend;
    private OpMonitor pcPrepend;
    public static string CategoryName;
    public DefaultPerformanceMonitor(string instance);
    protected virtual override void Finalize();
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void Enyim.Caching.Memcached.IPerformanceMonitor.Get(int amount, bool success);
    private sealed virtual override void Enyim.Caching.Memcached.IPerformanceMonitor.Store(StoreMode mode, int amount, bool success);
    private sealed virtual override void Enyim.Caching.Memcached.IPerformanceMonitor.Delete(int amount, bool success);
    private sealed virtual override void Enyim.Caching.Memcached.IPerformanceMonitor.Mutate(MutationMode mode, int amount, bool success);
    private sealed virtual override void Enyim.Caching.Memcached.IPerformanceMonitor.Concatenate(ConcatenationMode mode, int amount, bool success);
}
public class Enyim.Caching.Memcached.DefaultPerformanceMonitorFactory : object {
    private string name;
    public DefaultPerformanceMonitorFactory(string name);
    private sealed virtual override void Enyim.Caching.Memcached.IProvider.Initialize(Dictionary`2<string, string> parameters);
    private sealed virtual override IPerformanceMonitor Enyim.Caching.Memcached.IProviderFactory<Enyim.Caching.Memcached.IPerformanceMonitor>.Create();
}
public class Enyim.Caching.Memcached.DefaultServerPool : object {
    private static ILog log;
    private IMemcachedNode[] allNodes;
    private IMemcachedClientConfiguration configuration;
    private IOperationFactory factory;
    private IMemcachedNodeLocator nodeLocator;
    private object DeadSync;
    private Timer resurrectTimer;
    private bool isTimerActive;
    private long deadTimeoutMsec;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private Action`1<IMemcachedNode> nodeFailed;
    private IOperationFactory Enyim.Caching.Memcached.IServerPool.OperationFactory { get; }
    public DefaultServerPool(IMemcachedClientConfiguration configuration, IOperationFactory opFactory);
    private static DefaultServerPool();
    [CompilerGeneratedAttribute]
private void add_nodeFailed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
private void remove_nodeFailed(Action`1<IMemcachedNode> value);
    protected virtual override void Finalize();
    protected virtual IMemcachedNode CreateNode(IPEndPoint endpoint);
    private void rezCallback(object state);
    private void NodeFail(IMemcachedNode node);
    private sealed virtual override IMemcachedNode Enyim.Caching.Memcached.IServerPool.Locate(string key);
    private sealed virtual override IOperationFactory Enyim.Caching.Memcached.IServerPool.get_OperationFactory();
    private sealed virtual override IEnumerable`1<IMemcachedNode> Enyim.Caching.Memcached.IServerPool.GetWorkingNodes();
    private sealed virtual override void Enyim.Caching.Memcached.IServerPool.Start();
    private sealed virtual override void Enyim.Caching.Memcached.IServerPool.add_NodeFailed(Action`1<IMemcachedNode> value);
    private sealed virtual override void Enyim.Caching.Memcached.IServerPool.remove_NodeFailed(Action`1<IMemcachedNode> value);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private IMemcachedNode <Enyim.Caching.Memcached.IServerPool.Start>b__22_0(IPEndPoint ip);
}
public class Enyim.Caching.Memcached.DefaultTranscoder : object {
    public static UInt32 RawDataFlag;
    private static ArraySegment`1<byte> NullArray;
    private static DefaultTranscoder();
    private sealed virtual override CacheItem Enyim.Caching.Memcached.ITranscoder.Serialize(object value);
    private sealed virtual override object Enyim.Caching.Memcached.ITranscoder.Deserialize(CacheItem item);
    protected virtual CacheItem Serialize(object value);
    public static UInt32 TypeCodeToFlag(TypeCode code);
    public static bool IsFlagHandled(UInt32 flag);
    protected virtual object Deserialize(CacheItem item);
    protected virtual ArraySegment`1<byte> SerializeNull();
    protected virtual ArraySegment`1<byte> SerializeString(string value);
    protected virtual ArraySegment`1<byte> SerializeByte(byte value);
    protected virtual ArraySegment`1<byte> SerializeSByte(sbyte value);
    protected virtual ArraySegment`1<byte> SerializeBoolean(bool value);
    protected virtual ArraySegment`1<byte> SerializeInt16(short value);
    protected virtual ArraySegment`1<byte> SerializeInt32(int value);
    protected virtual ArraySegment`1<byte> SerializeInt64(long value);
    protected virtual ArraySegment`1<byte> SerializeUInt16(ushort value);
    protected virtual ArraySegment`1<byte> SerializeUInt32(UInt32 value);
    protected virtual ArraySegment`1<byte> SerializeUInt64(ulong value);
    protected virtual ArraySegment`1<byte> SerializeChar(char value);
    protected virtual ArraySegment`1<byte> SerializeDateTime(DateTime value);
    protected virtual ArraySegment`1<byte> SerializeDouble(double value);
    protected virtual ArraySegment`1<byte> SerializeSingle(float value);
    protected virtual ArraySegment`1<byte> SerializeObject(object value);
    protected virtual string DeserializeString(ArraySegment`1<byte> value);
    protected virtual bool DeserializeBoolean(ArraySegment`1<byte> value);
    protected virtual short DeserializeInt16(ArraySegment`1<byte> value);
    protected virtual int DeserializeInt32(ArraySegment`1<byte> value);
    protected virtual long DeserializeInt64(ArraySegment`1<byte> value);
    protected virtual ushort DeserializeUInt16(ArraySegment`1<byte> value);
    protected virtual UInt32 DeserializeUInt32(ArraySegment`1<byte> value);
    protected virtual ulong DeserializeUInt64(ArraySegment`1<byte> value);
    protected virtual char DeserializeChar(ArraySegment`1<byte> value);
    protected virtual DateTime DeserializeDateTime(ArraySegment`1<byte> value);
    protected virtual double DeserializeDouble(ArraySegment`1<byte> value);
    protected virtual float DeserializeSingle(ArraySegment`1<byte> value);
    protected virtual byte DeserializeByte(ArraySegment`1<byte> data);
    protected virtual sbyte DeserializeSByte(ArraySegment`1<byte> data);
    protected virtual object DeserializeObject(ArraySegment`1<byte> value);
}
public class Enyim.Caching.Memcached.FailImmediatelyPolicy : object {
    private sealed virtual override bool Enyim.Caching.Memcached.INodeFailurePolicy.ShouldFail();
}
public class Enyim.Caching.Memcached.FailImmediatelyPolicyFactory : object {
    private static INodeFailurePolicy PolicyInstance;
    private static FailImmediatelyPolicyFactory();
    private sealed virtual override INodeFailurePolicy Enyim.Caching.Memcached.INodeFailurePolicyFactory.Create(IMemcachedNode node);
}
public interface Enyim.Caching.Memcached.IAuthenticator {
    public abstract virtual bool Authenticate(PooledSocket socket);
}
public interface Enyim.Caching.Memcached.IConcatOperation {
    public ConcatenationMode Mode { get; }
    public abstract virtual ConcatenationMode get_Mode();
}
public interface Enyim.Caching.Memcached.IDeleteOperation {
}
public interface Enyim.Caching.Memcached.IFlushOperation {
}
public interface Enyim.Caching.Memcached.IGetOperation {
    public CacheItem Result { get; }
    public abstract virtual CacheItem get_Result();
}
public interface Enyim.Caching.Memcached.IMemcachedKeyTransformer {
    public abstract virtual string Transform(string key);
}
public interface Enyim.Caching.Memcached.IMemcachedNode {
    public IPEndPoint EndPoint { get; }
    public bool IsAlive { get; }
    public abstract virtual IPEndPoint get_EndPoint();
    public abstract virtual bool get_IsAlive();
    public abstract virtual bool Ping();
    public abstract virtual IOperationResult Execute(IOperation op);
    public abstract virtual bool ExecuteAsync(IOperation op, Action`1<bool> next);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Failed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Failed(Action`1<IMemcachedNode> value);
}
public interface Enyim.Caching.Memcached.IMemcachedNodeLocator {
    public abstract virtual void Initialize(IList`1<IMemcachedNode> nodes);
    public abstract virtual IMemcachedNode Locate(string key);
    public abstract virtual IEnumerable`1<IMemcachedNode> GetWorkingNodes();
}
public interface Enyim.Caching.Memcached.IMultiGetOperation {
    public Dictionary`2<string, CacheItem> Result { get; }
    public abstract virtual Dictionary`2<string, CacheItem> get_Result();
}
public interface Enyim.Caching.Memcached.IMultiItemOperation {
    public IList`1<string> Keys { get; }
    public Dictionary`2<string, ulong> Cas { get; }
    public abstract virtual IList`1<string> get_Keys();
    public abstract virtual Dictionary`2<string, ulong> get_Cas();
}
public interface Enyim.Caching.Memcached.IMutatorOperation {
    public MutationMode Mode { get; }
    public ulong Result { get; }
    public abstract virtual MutationMode get_Mode();
    public abstract virtual ulong get_Result();
}
public interface Enyim.Caching.Memcached.INodeFailurePolicy {
    public abstract virtual bool ShouldFail();
}
public interface Enyim.Caching.Memcached.INodeFailurePolicyFactory {
    public abstract virtual INodeFailurePolicy Create(IMemcachedNode node);
}
public interface Enyim.Caching.Memcached.IOperation {
    public int StatusCode { get; }
    public abstract virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    public abstract virtual IOperationResult ReadResponse(PooledSocket socket);
    public abstract virtual int get_StatusCode();
    public abstract virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public interface Enyim.Caching.Memcached.IOperationFactory {
    public abstract virtual IGetOperation Get(string key);
    public abstract virtual IMultiGetOperation MultiGet(IList`1<string> keys);
    public abstract virtual IStoreOperation Store(StoreMode mode, string key, CacheItem value, UInt32 expires, ulong cas);
    public abstract virtual IDeleteOperation Delete(string key, ulong cas);
    public abstract virtual IMutatorOperation Mutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires, ulong cas);
    public abstract virtual IConcatOperation Concat(ConcatenationMode mode, string key, ulong cas, ArraySegment`1<byte> data);
    public abstract virtual IStatsOperation Stats(string type);
    public abstract virtual IFlushOperation Flush();
}
public interface Enyim.Caching.Memcached.IPerformanceMonitor {
    public abstract virtual void Get(int amount, bool success);
    public abstract virtual void Store(StoreMode mode, int amount, bool success);
    public abstract virtual void Delete(int amount, bool success);
    public abstract virtual void Mutate(MutationMode mode, int amount, bool success);
    public abstract virtual void Concatenate(ConcatenationMode mode, int amount, bool success);
}
public interface Enyim.Caching.Memcached.IProvider {
    public abstract virtual void Initialize(Dictionary`2<string, string> parameters);
}
public interface Enyim.Caching.Memcached.IProviderFactory`1 {
    public abstract virtual T Create();
}
public interface Enyim.Caching.Memcached.ISaslAuthenticationProvider {
    public string Type { get; }
    public abstract virtual string get_Type();
    public abstract virtual void Initialize(Dictionary`2<string, object> parameters);
    public abstract virtual Byte[] Authenticate();
    public abstract virtual Byte[] Continue(Byte[] data);
}
public interface Enyim.Caching.Memcached.IServerPool {
    public IOperationFactory OperationFactory { get; }
    public abstract virtual IMemcachedNode Locate(string key);
    public abstract virtual IOperationFactory get_OperationFactory();
    public abstract virtual IEnumerable`1<IMemcachedNode> GetWorkingNodes();
    public abstract virtual void Start();
    [CompilerGeneratedAttribute]
public abstract virtual void add_NodeFailed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NodeFailed(Action`1<IMemcachedNode> value);
}
public interface Enyim.Caching.Memcached.ISingleItemOperation {
    public string Key { get; }
    public ulong CasValue { get; }
    public abstract virtual string get_Key();
    public abstract virtual ulong get_CasValue();
}
public interface Enyim.Caching.Memcached.IStatsOperation {
    public Dictionary`2<string, string> Result { get; }
    public abstract virtual Dictionary`2<string, string> get_Result();
}
public interface Enyim.Caching.Memcached.IStoreOperation {
    public StoreMode Mode { get; }
    public abstract virtual StoreMode get_Mode();
}
public interface Enyim.Caching.Memcached.ITranscoder {
    public abstract virtual CacheItem Serialize(object value);
    public abstract virtual object Deserialize(CacheItem item);
}
public class Enyim.Caching.Memcached.KetamaNodeLocator : object {
    private static string DefaultHashName;
    private static int ServerAddressMutations;
    private LookupData lookupData;
    private string hashName;
    private Func`1<HashAlgorithm> factory;
    private static Dictionary`2<string, Func`1<HashAlgorithm>> hashFactory;
    public KetamaNodeLocator(string hashName);
    private static KetamaNodeLocator();
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNodeLocator.Initialize(IList`1<IMemcachedNode> nodes);
    private UInt32 GetKeyHash(string key);
    private sealed virtual override IMemcachedNode Enyim.Caching.Memcached.IMemcachedNodeLocator.Locate(string key);
    private sealed virtual override IEnumerable`1<IMemcachedNode> Enyim.Caching.Memcached.IMemcachedNodeLocator.GetWorkingNodes();
    private static IMemcachedNode LocateNode(LookupData ld, UInt32 itemKeyHash);
    [CompilerGeneratedAttribute]
private HashAlgorithm <.ctor>b__6_0();
}
public class Enyim.Caching.Memcached.KetamaNodeLocatorFactory : object {
    private string hashName;
    private sealed virtual override void Enyim.Caching.Memcached.IProvider.Initialize(Dictionary`2<string, string> parameters);
    private sealed virtual override IMemcachedNodeLocator Enyim.Caching.Memcached.IProviderFactory<Enyim.Caching.Memcached.IMemcachedNodeLocator>.Create();
}
public abstract class Enyim.Caching.Memcached.KeyTransformerBase : object {
    public abstract virtual string Transform(string key);
    private sealed virtual override string Enyim.Caching.Memcached.IMemcachedKeyTransformer.Transform(string key);
}
public class Enyim.Caching.Memcached.MemcachedClientException : MemcachedException {
    public MemcachedClientException(string message);
    public MemcachedClientException(string message, Exception inner);
    protected MemcachedClientException(SerializationInfo info, StreamingContext context);
}
public class Enyim.Caching.Memcached.MemcachedException : Exception {
    public MemcachedException(string message);
    public MemcachedException(string message, Exception inner);
    protected MemcachedException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{{MemcachedNode [ Address: {EndPoint}, IsAlive = {IsAlive} ]}}")]
public class Enyim.Caching.Memcached.MemcachedNode : object {
    private static ILog log;
    private static object SyncRoot;
    private bool isDisposed;
    private IPEndPoint endPoint;
    private ISocketPoolConfiguration config;
    private InternalPoolImpl internalPoolImpl;
    private bool isInitialized;
    [CompilerGeneratedAttribute]
private Action`1<IMemcachedNode> Failed;
    private INodeFailurePolicy failurePolicy;
    protected INodeFailurePolicy FailurePolicy { get; }
    public IPEndPoint EndPoint { get; }
    public bool IsAlive { get; }
    private IPEndPoint Enyim.Caching.Memcached.IMemcachedNode.EndPoint { get; }
    private bool Enyim.Caching.Memcached.IMemcachedNode.IsAlive { get; }
    public MemcachedNode(IPEndPoint endpoint, ISocketPoolConfiguration socketPoolConfig);
    private static MemcachedNode();
    [CompilerGeneratedAttribute]
public void add_Failed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
public void remove_Failed(Action`1<IMemcachedNode> value);
    protected INodeFailurePolicy get_FailurePolicy();
    public IPEndPoint get_EndPoint();
    public bool get_IsAlive();
    public bool Ping();
    public IPooledSocketResult Acquire();
    protected virtual override void Finalize();
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    protected internal virtual PooledSocket CreateSocket();
    protected virtual IPooledSocketResult ExecuteOperation(IOperation op);
    protected virtual bool ExecuteOperationAsync(IOperation op, Action`1<bool> next);
    private sealed virtual override IPEndPoint Enyim.Caching.Memcached.IMemcachedNode.get_EndPoint();
    private sealed virtual override bool Enyim.Caching.Memcached.IMemcachedNode.get_IsAlive();
    private sealed virtual override bool Enyim.Caching.Memcached.IMemcachedNode.Ping();
    private sealed virtual override IOperationResult Enyim.Caching.Memcached.IMemcachedNode.Execute(IOperation op);
    private sealed virtual override bool Enyim.Caching.Memcached.IMemcachedNode.ExecuteAsync(IOperation op, Action`1<bool> next);
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNode.add_Failed(Action`1<IMemcachedNode> value);
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNode.remove_Failed(Action`1<IMemcachedNode> value);
}
public enum Enyim.Caching.Memcached.MemcachedProtocol : Enum {
    public int value__;
    public static MemcachedProtocol Binary;
    public static MemcachedProtocol Text;
}
public enum Enyim.Caching.Memcached.MutationMode : Enum {
    public byte value__;
    public static MutationMode Increment;
    public static MutationMode Decrement;
}
[RunInstallerAttribute("True")]
public class Enyim.Caching.Memcached.PerformanceCounterInstaller : PerformanceCounterInstaller {
}
public class Enyim.Caching.Memcached.PlainTextAuthenticator : object {
    private Byte[] authData;
    private string Enyim.Caching.Memcached.ISaslAuthenticationProvider.Type { get; }
    public PlainTextAuthenticator(string zone, string userName, string password);
    private sealed virtual override string Enyim.Caching.Memcached.ISaslAuthenticationProvider.get_Type();
    private sealed virtual override void Enyim.Caching.Memcached.ISaslAuthenticationProvider.Initialize(Dictionary`2<string, object> parameters);
    private sealed virtual override Byte[] Enyim.Caching.Memcached.ISaslAuthenticationProvider.Authenticate();
    private sealed virtual override Byte[] Enyim.Caching.Memcached.ISaslAuthenticationProvider.Continue(Byte[] data);
    private static Byte[] CreateAuthData(string zone, string userName, string password);
}
[DebuggerDisplayAttribute("[ Address: {endpoint}, IsAlive = {IsAlive} ]")]
public class Enyim.Caching.Memcached.PooledSocket : object {
    private static ILog log;
    private bool isAlive;
    private Socket socket;
    private IPEndPoint endpoint;
    private BufferedStream inputStream;
    private AsyncSocketHelper helper;
    [CompilerGeneratedAttribute]
private Action`1<PooledSocket> <CleanupCallback>k__BackingField;
    public Guid InstanceId;
    public Action`1<PooledSocket> CleanupCallback { get; public set; }
    public int Available { get; }
    public bool IsAlive { get; }
    public PooledSocket(IPEndPoint endpoint, TimeSpan connectionTimeout, TimeSpan receiveTimeout, TimeSpan keepAliveStartDelay, TimeSpan keepAliveInterval);
    private static PooledSocket();
    private static void ConfigureKeepAlive(Socket socket, TimeSpan keepAliveStartFrom, TimeSpan keepAliveInterval);
    private static void ConnectWithTimeout(Socket socket, IPEndPoint endpoint, int timeout);
    [CompilerGeneratedAttribute]
public Action`1<PooledSocket> get_CleanupCallback();
    [CompilerGeneratedAttribute]
public void set_CleanupCallback(Action`1<PooledSocket> value);
    public int get_Available();
    public void Reset();
    public bool get_IsAlive();
    public void Destroy();
    protected virtual override void Finalize();
    protected void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    private void CheckDisposed();
    public int ReadByte();
    public void Read(Byte[] buffer, int offset, int count);
    public void Write(Byte[] data, int offset, int length);
    public void Write(IList`1<ArraySegment`1<byte>> buffers);
    public bool ReceiveAsync(AsyncIOArgs p);
}
public static class Enyim.Caching.Memcached.Protocol.Binary.BinaryConverter : object {
    public static ushort DecodeUInt16(Byte[] buffer, int offset);
    public static ushort DecodeUInt16(Byte* buffer, int offset);
    public static int DecodeInt32(ArraySegment`1<byte> segment, int offset);
    public static int DecodeInt32(Byte* buffer, int offset);
    public static int DecodeInt32(Byte[] buffer, int offset);
    public static ulong DecodeUInt64(Byte[] buffer, int offset);
    public static ulong DecodeUInt64(Byte* buffer, int offset);
    public static void EncodeUInt16(UInt32 value, Byte[] buffer, int offset);
    public static void EncodeUInt16(UInt32 value, Byte* buffer, int offset);
    public static void EncodeUInt32(UInt32 value, Byte[] buffer, int offset);
    public static void EncodeUInt32(UInt32 value, Byte* buffer, int offset);
    public static void EncodeUInt64(ulong value, Byte[] buffer, int offset);
    public static void EncodeUInt64(ulong value, Byte* buffer, int offset);
    public static Byte[] EncodeKey(string key);
    public static string DecodeKey(Byte[] data);
    public static string DecodeKey(Byte[] data, int index, int count);
}
public abstract class Enyim.Caching.Memcached.Protocol.Binary.BinaryMultiItemOperation : MultiItemOperation {
    public BinaryMultiItemOperation(IList`1<string> keys);
    protected abstract virtual BinaryRequest Build(string key);
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
}
public class Enyim.Caching.Memcached.Protocol.Binary.BinaryNode : MemcachedNode {
    private static ILog log;
    private ISaslAuthenticationProvider authenticationProvider;
    public BinaryNode(IPEndPoint endpoint, ISocketPoolConfiguration config, ISaslAuthenticationProvider authenticationProvider);
    private static BinaryNode();
    protected internal virtual PooledSocket CreateSocket();
    private bool Auth(PooledSocket socket);
}
public abstract class Enyim.Caching.Memcached.Protocol.Binary.BinaryOperation : Operation {
    protected abstract virtual BinaryRequest Build();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Binary.BinaryOperationFactory : object {
    private sealed virtual override IGetOperation Enyim.Caching.Memcached.IOperationFactory.Get(string key);
    private sealed virtual override IMultiGetOperation Enyim.Caching.Memcached.IOperationFactory.MultiGet(IList`1<string> keys);
    private sealed virtual override IStoreOperation Enyim.Caching.Memcached.IOperationFactory.Store(StoreMode mode, string key, CacheItem value, UInt32 expires, ulong cas);
    private sealed virtual override IDeleteOperation Enyim.Caching.Memcached.IOperationFactory.Delete(string key, ulong cas);
    private sealed virtual override IMutatorOperation Enyim.Caching.Memcached.IOperationFactory.Mutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires, ulong cas);
    private sealed virtual override IConcatOperation Enyim.Caching.Memcached.IOperationFactory.Concat(ConcatenationMode mode, string key, ulong cas, ArraySegment`1<byte> data);
    private sealed virtual override IStatsOperation Enyim.Caching.Memcached.IOperationFactory.Stats(string type);
    private sealed virtual override IFlushOperation Enyim.Caching.Memcached.IOperationFactory.Flush();
}
public class Enyim.Caching.Memcached.Protocol.Binary.BinaryPool : DefaultServerPool {
    private ISaslAuthenticationProvider authenticationProvider;
    private IMemcachedClientConfiguration configuration;
    public BinaryPool(IMemcachedClientConfiguration configuration);
    protected virtual IMemcachedNode CreateNode(IPEndPoint endpoint);
    private static ISaslAuthenticationProvider GetProvider(IMemcachedClientConfiguration configuration);
}
public class Enyim.Caching.Memcached.Protocol.Binary.BinaryRequest : object {
    private static ILog log;
    private static int InstanceCounter;
    public byte Operation;
    public int CorrelationId;
    public string Key;
    public ulong Cas;
    public ushort Reserved;
    public ArraySegment`1<byte> Extra;
    public ArraySegment`1<byte> Data;
    public BinaryRequest(OpCode operation);
    public BinaryRequest(byte commandCode);
    private static BinaryRequest();
    public IList`1<ArraySegment`1<byte>> CreateBuffer();
    public IList`1<ArraySegment`1<byte>> CreateBuffer(IList`1<ArraySegment`1<byte>> appendTo);
}
public class Enyim.Caching.Memcached.Protocol.Binary.BinaryResponse : object {
    private static ILog log;
    private static byte MAGIC_VALUE;
    private static int HeaderLength;
    private static int HEADER_OPCODE;
    private static int HEADER_KEY;
    private static int HEADER_EXTRA;
    private static int HEADER_DATATYPE;
    private static int HEADER_STATUS;
    private static int HEADER_BODY;
    private static int HEADER_OPAQUE;
    private static int HEADER_CAS;
    public byte Opcode;
    public int KeyLength;
    public byte DataType;
    public int StatusCode;
    public int CorrelationId;
    public ulong CAS;
    public ArraySegment`1<byte> Extra;
    public ArraySegment`1<byte> Data;
    private string responseMessage;
    private PooledSocket currentSocket;
    private int dataLength;
    private int extraLength;
    private bool shouldCallNext;
    private Action`1<bool> next;
    private static BinaryResponse();
    public string GetStatusMessage();
    public bool Read(PooledSocket socket);
    public bool ReadAsync(PooledSocket socket, Action`1<bool> next, Boolean& ioPending);
    private void DoDecodeHeaderAsync(AsyncIOArgs asyncEvent);
    private bool DoDecodeHeader(AsyncIOArgs asyncEvent, Boolean& pendingIO);
    private void DoDecodeBodyAsync(AsyncIOArgs asyncEvent);
    private void DoDecodeBody(AsyncIOArgs asyncEvent);
    private void DeserializeHeader(Byte[] header, Int32& dataLength, Int32& extraLength);
}
public abstract class Enyim.Caching.Memcached.Protocol.Binary.BinarySingleItemOperation : SingleItemOperation {
    protected BinarySingleItemOperation(string key);
    protected abstract virtual BinaryRequest Build();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected abstract virtual IOperationResult ProcessResponse(BinaryResponse response);
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Binary.ConcatOperation : BinarySingleItemOperation {
    private ArraySegment`1<byte> data;
    private ConcatenationMode mode;
    private ConcatenationMode Enyim.Caching.Memcached.IConcatOperation.Mode { get; }
    public ConcatOperation(ConcatenationMode mode, string key, ArraySegment`1<byte> data);
    protected virtual BinaryRequest Build();
    protected virtual IOperationResult ProcessResponse(BinaryResponse response);
    private sealed virtual override ConcatenationMode Enyim.Caching.Memcached.IConcatOperation.get_Mode();
}
public class Enyim.Caching.Memcached.Protocol.Binary.DeleteOperation : BinarySingleItemOperation {
    private static ILog log;
    public DeleteOperation(string key);
    private static DeleteOperation();
    protected virtual BinaryRequest Build();
    protected virtual IOperationResult ProcessResponse(BinaryResponse response);
}
public class Enyim.Caching.Memcached.Protocol.Binary.FlushOperation : BinaryOperation {
    protected virtual BinaryRequest Build();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
}
public class Enyim.Caching.Memcached.Protocol.Binary.GetOperation : BinarySingleItemOperation {
    private static ILog log;
    private CacheItem result;
    private CacheItem Enyim.Caching.Memcached.IGetOperation.Result { get; }
    public GetOperation(string key);
    private static GetOperation();
    protected virtual BinaryRequest Build();
    protected virtual IOperationResult ProcessResponse(BinaryResponse response);
    private sealed virtual override CacheItem Enyim.Caching.Memcached.IGetOperation.get_Result();
}
public class Enyim.Caching.Memcached.Protocol.Binary.MultiGetOperation : BinaryMultiItemOperation {
    private static ILog log;
    private Dictionary`2<string, CacheItem> result;
    private Dictionary`2<int, string> idToKey;
    private int noopId;
    private PooledSocket currentSocket;
    private BinaryResponse asyncReader;
    private Nullable`1<bool> asyncLoopState;
    private Action`1<bool> afterAsyncRead;
    public Dictionary`2<string, CacheItem> Result { get; }
    private Dictionary`2<string, CacheItem> Enyim.Caching.Memcached.IMultiGetOperation.Result { get; }
    public MultiGetOperation(IList`1<string> keys);
    private static MultiGetOperation();
    protected virtual BinaryRequest Build(string key);
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
    private bool DoReadAsync();
    private void EndReadAsync(bool readSuccess);
    private void StoreResult(BinaryResponse reader);
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    public Dictionary`2<string, CacheItem> get_Result();
    private sealed virtual override Dictionary`2<string, CacheItem> Enyim.Caching.Memcached.IMultiGetOperation.get_Result();
}
public class Enyim.Caching.Memcached.Protocol.Binary.MutatorOperation : BinarySingleItemOperation {
    private ulong defaultValue;
    private ulong delta;
    private UInt32 expires;
    private MutationMode mode;
    private ulong result;
    private MutationMode Enyim.Caching.Memcached.IMutatorOperation.Mode { get; }
    private ulong Enyim.Caching.Memcached.IMutatorOperation.Result { get; }
    public MutatorOperation(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires);
    protected void UpdateExtra(BinaryRequest request);
    protected virtual BinaryRequest Build();
    protected virtual IOperationResult ProcessResponse(BinaryResponse response);
    private sealed virtual override MutationMode Enyim.Caching.Memcached.IMutatorOperation.get_Mode();
    private sealed virtual override ulong Enyim.Caching.Memcached.IMutatorOperation.get_Result();
}
public enum Enyim.Caching.Memcached.Protocol.Binary.OpCode : Enum {
    public byte value__;
    public static OpCode Get;
    public static OpCode Set;
    public static OpCode Add;
    public static OpCode Replace;
    public static OpCode Delete;
    public static OpCode Increment;
    public static OpCode Decrement;
    public static OpCode Quit;
    public static OpCode Flush;
    public static OpCode GetQ;
    public static OpCode NoOp;
    public static OpCode Version;
    public static OpCode GetK;
    public static OpCode GetKQ;
    public static OpCode Append;
    public static OpCode Prepend;
    public static OpCode Stat;
    public static OpCode SetQ;
    public static OpCode AddQ;
    public static OpCode ReplaceQ;
    public static OpCode DeleteQ;
    public static OpCode IncrementQ;
    public static OpCode DecrementQ;
    public static OpCode QuitQ;
    public static OpCode FlushQ;
    public static OpCode AppendQ;
    public static OpCode PrependQ;
    public static OpCode SaslList;
    public static OpCode SaslStart;
    public static OpCode SaslStep;
}
public class Enyim.Caching.Memcached.Protocol.Binary.SaslContinue : SaslStep {
    private Byte[] continuation;
    public SaslContinue(ISaslAuthenticationProvider provider, Byte[] continuation);
    protected virtual BinaryRequest Build();
}
public class Enyim.Caching.Memcached.Protocol.Binary.SaslStart : SaslStep {
    public SaslStart(ISaslAuthenticationProvider provider);
    protected virtual BinaryRequest Build();
}
public abstract class Enyim.Caching.Memcached.Protocol.Binary.SaslStep : BinaryOperation {
    [CompilerGeneratedAttribute]
private ISaslAuthenticationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    protected ISaslAuthenticationProvider Provider { get; private set; }
    public Byte[] Data { get; private set; }
    protected SaslStep(ISaslAuthenticationProvider provider);
    [CompilerGeneratedAttribute]
protected ISaslAuthenticationProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(ISaslAuthenticationProvider value);
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
}
public class Enyim.Caching.Memcached.Protocol.Binary.StatsOperation : BinaryOperation {
    private static ILog log;
    private string type;
    private Dictionary`2<string, string> result;
    private Dictionary`2<string, string> Enyim.Caching.Memcached.IStatsOperation.Result { get; }
    public StatsOperation(string type);
    private static StatsOperation();
    protected virtual BinaryRequest Build();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    private sealed virtual override Dictionary`2<string, string> Enyim.Caching.Memcached.IStatsOperation.get_Result();
}
public class Enyim.Caching.Memcached.Protocol.Binary.StoreOperation : BinarySingleItemOperation {
    private static ILog log;
    private StoreMode mode;
    private CacheItem value;
    private UInt32 expires;
    private StoreMode Enyim.Caching.Memcached.IStoreOperation.Mode { get; }
    public StoreOperation(StoreMode mode, string key, CacheItem value, UInt32 expires);
    private static StoreOperation();
    protected virtual BinaryRequest Build();
    protected virtual IOperationResult ProcessResponse(BinaryResponse response);
    private sealed virtual override StoreMode Enyim.Caching.Memcached.IStoreOperation.get_Mode();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public abstract class Enyim.Caching.Memcached.Protocol.MultiItemOperation : Operation {
    [CompilerGeneratedAttribute]
private IList`1<string> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ulong> <Cas>k__BackingField;
    public IList`1<string> Keys { get; private set; }
    public Dictionary`2<string, ulong> Cas { get; protected set; }
    private IList`1<string> Enyim.Caching.Memcached.IMultiItemOperation.Keys { get; }
    private Dictionary`2<string, ulong> Enyim.Caching.Memcached.IMultiItemOperation.Cas { get; }
    public MultiItemOperation(IList`1<string> keys);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ulong> get_Cas();
    [CompilerGeneratedAttribute]
protected void set_Cas(Dictionary`2<string, ulong> value);
    private sealed virtual override IList`1<string> Enyim.Caching.Memcached.IMultiItemOperation.get_Keys();
    private sealed virtual override Dictionary`2<string, ulong> Enyim.Caching.Memcached.IMultiItemOperation.get_Cas();
}
public abstract class Enyim.Caching.Memcached.Protocol.Operation : object {
    private static ILog log;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    private int Enyim.Caching.Memcached.IOperation.StatusCode { get; }
    public int StatusCode { get; protected set; }
    private static Operation();
    protected internal abstract virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal abstract virtual IOperationResult ReadResponse(PooledSocket socket);
    protected internal abstract virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
    private sealed virtual override IList`1<ArraySegment`1<byte>> Enyim.Caching.Memcached.IOperation.GetBuffer();
    private sealed virtual override IOperationResult Enyim.Caching.Memcached.IOperation.ReadResponse(PooledSocket socket);
    private sealed virtual override bool Enyim.Caching.Memcached.IOperation.ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
    private sealed virtual override int Enyim.Caching.Memcached.IOperation.get_StatusCode();
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
protected void set_StatusCode(int value);
}
public abstract class Enyim.Caching.Memcached.Protocol.SingleItemOperation : Operation {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    public string Key { get; private set; }
    public ulong Cas { get; public set; }
    private string Enyim.Caching.Memcached.ISingleItemOperation.Key { get; }
    private ulong Enyim.Caching.Memcached.ISingleItemOperation.CasValue { get; }
    protected SingleItemOperation(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public ulong get_Cas();
    [CompilerGeneratedAttribute]
public void set_Cas(ulong value);
    private sealed virtual override string Enyim.Caching.Memcached.ISingleItemOperation.get_Key();
    private sealed virtual override ulong Enyim.Caching.Memcached.ISingleItemOperation.get_CasValue();
}
public class Enyim.Caching.Memcached.Protocol.Text.CasOperation : StoreOperationBase {
    private StoreMode Enyim.Caching.Memcached.IStoreOperation.Mode { get; }
    internal CasOperation(string key, CacheItem value, UInt32 expires, ulong cas);
    private sealed virtual override StoreMode Enyim.Caching.Memcached.IStoreOperation.get_Mode();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.ConcateOperation : StoreOperationBase {
    private ConcatenationMode mode;
    private ConcatenationMode Enyim.Caching.Memcached.IConcatOperation.Mode { get; }
    internal ConcateOperation(ConcatenationMode mode, string key, ArraySegment`1<byte> data);
    private sealed virtual override ConcatenationMode Enyim.Caching.Memcached.IConcatOperation.get_Mode();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.DeleteOperation : SingleItemOperation {
    internal DeleteOperation(string key);
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.FlushOperation : Operation {
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
internal static class Enyim.Caching.Memcached.Protocol.Text.GetHelper : object {
    private static ILog log;
    private static GetHelper();
    public static void FinishCurrent(PooledSocket socket);
    public static GetResponse ReadItem(PooledSocket socket);
}
public class Enyim.Caching.Memcached.Protocol.Text.GetOperation : SingleItemOperation {
    private CacheItem result;
    private CacheItem Enyim.Caching.Memcached.IGetOperation.Result { get; }
    internal GetOperation(string key);
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    private sealed virtual override CacheItem Enyim.Caching.Memcached.IGetOperation.get_Result();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.GetResponse : object {
    public string Key;
    public ulong CasValue;
    public CacheItem Item;
    public GetResponse(string key, ushort flags, ulong casValue, Byte[] data);
    public GetResponse(string key, ushort flags, ulong casValue, Byte[] data, int offset, int count);
}
public class Enyim.Caching.Memcached.Protocol.Text.MultiGetOperation : MultiItemOperation {
    private static ILog log;
    private Dictionary`2<string, CacheItem> result;
    private Dictionary`2<string, CacheItem> Enyim.Caching.Memcached.IMultiGetOperation.Result { get; }
    public MultiGetOperation(IList`1<string> keys);
    private static MultiGetOperation();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    private sealed virtual override Dictionary`2<string, CacheItem> Enyim.Caching.Memcached.IMultiGetOperation.get_Result();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.MutatorOperation : SingleItemOperation {
    private MutationMode mode;
    private ulong delta;
    private ulong result;
    public ulong Result { get; }
    private MutationMode Enyim.Caching.Memcached.IMutatorOperation.Mode { get; }
    private ulong Enyim.Caching.Memcached.IMutatorOperation.Result { get; }
    internal MutatorOperation(MutationMode mode, string key, ulong delta);
    public ulong get_Result();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    private sealed virtual override MutationMode Enyim.Caching.Memcached.IMutatorOperation.get_Mode();
    private sealed virtual override ulong Enyim.Caching.Memcached.IMutatorOperation.get_Result();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.StatsOperation : Operation {
    private static ILog log;
    private string type;
    private Dictionary`2<string, string> result;
    private Dictionary`2<string, string> Enyim.Caching.Memcached.IStatsOperation.Result { get; }
    public StatsOperation(string type);
    private static StatsOperation();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    private sealed virtual override Dictionary`2<string, string> Enyim.Caching.Memcached.IStatsOperation.get_Result();
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.StoreOperation : StoreOperationBase {
    private StoreMode mode;
    private StoreMode Enyim.Caching.Memcached.IStoreOperation.Mode { get; }
    internal StoreOperation(StoreMode mode, string key, CacheItem value, UInt32 expires);
    private sealed virtual override StoreMode Enyim.Caching.Memcached.IStoreOperation.get_Mode();
}
public class Enyim.Caching.Memcached.Protocol.Text.StoreOperationBase : SingleItemOperation {
    private static ArraySegment`1<byte> DataTerminator;
    private StoreCommand command;
    private CacheItem value;
    private UInt32 expires;
    private ulong cas;
    internal StoreOperationBase(StoreCommand mode, string key, CacheItem value, UInt32 expires, ulong cas);
    private static StoreOperationBase();
    protected internal virtual IList`1<ArraySegment`1<byte>> GetBuffer();
    protected internal virtual IOperationResult ReadResponse(PooledSocket socket);
    protected internal virtual bool ReadResponseAsync(PooledSocket socket, Action`1<bool> next);
}
public class Enyim.Caching.Memcached.Protocol.Text.TextOperationFactory : object {
    private sealed virtual override IGetOperation Enyim.Caching.Memcached.IOperationFactory.Get(string key);
    private sealed virtual override IMultiGetOperation Enyim.Caching.Memcached.IOperationFactory.MultiGet(IList`1<string> keys);
    private sealed virtual override IStoreOperation Enyim.Caching.Memcached.IOperationFactory.Store(StoreMode mode, string key, CacheItem value, UInt32 expires, ulong cas);
    private sealed virtual override IDeleteOperation Enyim.Caching.Memcached.IOperationFactory.Delete(string key, ulong cas);
    private sealed virtual override IMutatorOperation Enyim.Caching.Memcached.IOperationFactory.Mutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires, ulong cas);
    private sealed virtual override IConcatOperation Enyim.Caching.Memcached.IOperationFactory.Concat(ConcatenationMode mode, string key, ulong cas, ArraySegment`1<byte> data);
    private sealed virtual override IStatsOperation Enyim.Caching.Memcached.IOperationFactory.Stats(string type);
    private sealed virtual override IFlushOperation Enyim.Caching.Memcached.IOperationFactory.Flush();
}
internal static class Enyim.Caching.Memcached.Protocol.Text.TextSocketHelper : object {
    private static string GenericErrorResponse;
    private static string ClientErrorResponse;
    private static string ServerErrorResponse;
    private static int ErrorResponseLength;
    public static string CommandTerminator;
    private static ILog log;
    private static TextSocketHelper();
    public static string ReadResponse(PooledSocket socket);
    private static string ReadLine(PooledSocket socket);
    public static IList`1<ArraySegment`1<byte>> GetCommandBuffer(string value);
    public static IList`1<ArraySegment`1<byte>> GetCommandBuffer(string value, IList`1<ArraySegment`1<byte>> list);
}
public class Enyim.Caching.Memcached.Results.BinaryOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    public ulong Cas { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
}
public class Enyim.Caching.Memcached.Results.ConcatOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    public ulong Cas { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
}
[ExtensionAttribute]
public static class Enyim.Caching.Memcached.Results.Extensions.OperationResultExtensions : object {
    [ExtensionAttribute]
public static IOperationResult Fail(IOperationResult source, string message, Exception ex);
    [ExtensionAttribute]
public static IOperationResult Pass(IOperationResult source, string message);
    [ExtensionAttribute]
public static void Copy(IOperationResult source, IOperationResult target);
    [ExtensionAttribute]
public static IOperationResult PassOrFail(IOperationResult source, bool success, string message, Exception ex);
    [ExtensionAttribute]
public static void Combine(IOperationResult source, IOperationResult target);
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultConcatOperationResultFactory : object {
    public sealed virtual IConcatOperationResult Create();
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultGetOperationResultFactory : object {
    public sealed virtual IGetOperationResult Create();
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultGetOperationResultFactory`1 : object {
    public sealed virtual IGetOperationResult`1<T> Create();
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultMutateOperationResultFactory : object {
    public sealed virtual IMutateOperationResult Create();
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultRemoveOperationResultFactory : object {
    public sealed virtual IRemoveOperationResult Create();
}
public class Enyim.Caching.Memcached.Results.Factories.DefaultStoreOperationResultFactory : object {
    public sealed virtual IStoreOperationResult Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IConcatOperationResultFactory {
    public abstract virtual IConcatOperationResult Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IGetOperationResultFactory {
    public abstract virtual IGetOperationResult Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IGetOperationResultFactory`1 {
    public abstract virtual IGetOperationResult`1<T> Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IMutateOperationResultFactory {
    public abstract virtual IMutateOperationResult Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IRemoveOperationResultFactory {
    public abstract virtual IRemoveOperationResult Create();
}
public interface Enyim.Caching.Memcached.Results.Factories.IStoreOperationResultFactory {
    public abstract virtual IStoreOperationResult Create();
}
public class Enyim.Caching.Memcached.Results.GetOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ulong Cas { get; public set; }
    public bool HasValue { get; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
    public sealed virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
}
public class Enyim.Caching.Memcached.Results.GetOperationResult`1 : OperationResultBase {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    public bool HasValue { get; }
    public T Value { get; public set; }
    public ulong Cas { get; public set; }
    public sealed virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(T value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
}
public static class Enyim.Caching.Memcached.Results.Helpers.ResultHelper : object {
    public static string ProcessResponseData(ArraySegment`1<byte> data, string message);
}
public interface Enyim.Caching.Memcached.Results.ICasOperationResult {
    public ulong Cas { get; public set; }
    public abstract virtual ulong get_Cas();
    public abstract virtual void set_Cas(ulong value);
}
public interface Enyim.Caching.Memcached.Results.IConcatOperationResult {
}
public interface Enyim.Caching.Memcached.Results.IGetOperationResult {
}
public interface Enyim.Caching.Memcached.Results.IGetOperationResult`1 {
}
public interface Enyim.Caching.Memcached.Results.IMutateOperationResult {
    public ulong Value { get; public set; }
    public abstract virtual ulong get_Value();
    public abstract virtual void set_Value(ulong value);
}
public interface Enyim.Caching.Memcached.Results.INullableOperationResult`1 {
    public bool HasValue { get; }
    public T Value { get; public set; }
    public abstract virtual bool get_HasValue();
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
public interface Enyim.Caching.Memcached.Results.IOperationResult {
    public bool Success { get; public set; }
    public string Message { get; public set; }
    public Exception Exception { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public IOperationResult InnerResult { get; public set; }
    public abstract virtual bool get_Success();
    public abstract virtual void set_Success(bool value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual Exception get_Exception();
    public abstract virtual void set_Exception(Exception value);
    public abstract virtual Nullable`1<int> get_StatusCode();
    public abstract virtual void set_StatusCode(Nullable`1<int> value);
    public abstract virtual IOperationResult get_InnerResult();
    public abstract virtual void set_InnerResult(IOperationResult value);
}
public interface Enyim.Caching.Memcached.Results.IPooledSocketResult {
}
public interface Enyim.Caching.Memcached.Results.IRemoveOperationResult {
}
public interface Enyim.Caching.Memcached.Results.IStoreOperationResult {
}
public class Enyim.Caching.Memcached.Results.MutateOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public ulong Cas { get; public set; }
    public ulong Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(ulong value);
}
public abstract class Enyim.Caching.Memcached.Results.OperationResultBase : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperationResult <InnerResult>k__BackingField;
    public bool Success { get; public set; }
    public string Message { get; public set; }
    public Exception Exception { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public IOperationResult InnerResult { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Success();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Success(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IOperationResult get_InnerResult();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InnerResult(IOperationResult value);
}
public class Enyim.Caching.Memcached.Results.PooledSocketResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private PooledSocket <Value>k__BackingField;
    public bool HasValue { get; }
    public PooledSocket Value { get; public set; }
    public sealed virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public sealed virtual PooledSocket get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(PooledSocket value);
}
public class Enyim.Caching.Memcached.Results.RemoveOperationResult : OperationResultBase {
}
public enum Enyim.Caching.Memcached.Results.StatusCodes.StatusCodeEnums : Enum {
    public int value__;
    public static StatusCodeEnums Success;
    public static StatusCodeEnums NotFound;
}
public static class Enyim.Caching.Memcached.Results.StatusCodes.StatusCodeMessages : object {
    public static string NOT_FOUND;
}
public class Enyim.Caching.Memcached.Results.StoreOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private ulong <Cas>k__BackingField;
    public ulong Cas { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Cas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cas(ulong value);
}
public class Enyim.Caching.Memcached.Results.TextOperationResult : OperationResultBase {
}
public class Enyim.Caching.Memcached.ServerStats : object {
    private static int OpAllowsSum;
    private static ILog log;
    public static IPEndPoint All;
    private static Int32[] Optable;
    private static String[] StatKeys;
    private Dictionary`2<IPEndPoint, Dictionary`2<string, string>> results;
    internal ServerStats(Dictionary`2<IPEndPoint, Dictionary`2<string, string>> results);
    private static ServerStats();
    public long GetValue(IPEndPoint server, StatItem item);
    public Version GetVersion(IPEndPoint server);
    public TimeSpan GetUptime(IPEndPoint server);
    public string GetRaw(IPEndPoint server, string key);
    public string GetRaw(IPEndPoint server, StatItem item);
    public IEnumerable`1<KeyValuePair`2<IPEndPoint, string>> GetRaw(string key);
}
public class Enyim.Caching.Memcached.SHA1KeyTransformer : KeyTransformerBase {
    public virtual string Transform(string key);
}
public class Enyim.Caching.Memcached.SingleNodeLocator : object {
    private IMemcachedNode node;
    private bool isInitialized;
    private object initLock;
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNodeLocator.Initialize(IList`1<IMemcachedNode> nodes);
    private sealed virtual override IMemcachedNode Enyim.Caching.Memcached.IMemcachedNodeLocator.Locate(string key);
    private sealed virtual override IEnumerable`1<IMemcachedNode> Enyim.Caching.Memcached.IMemcachedNodeLocator.GetWorkingNodes();
}
internal class Enyim.Caching.Memcached.SlidingBuffer : object {
    private InterlockedQueue`1<Segment> buffers;
    private int chunkSize;
    private Segment lastSegment;
    private int available;
    public int Available { get; }
    public SlidingBuffer(int chunkSize);
    public int get_Available();
    public int Read(Byte[] buffer, int offset, int count);
    public void Append(Byte[] buffer, int offset, int count);
    public void UnsafeClear();
}
public enum Enyim.Caching.Memcached.StatItem : Enum {
    public int value__;
    public static StatItem Uptime;
    public static StatItem ServerTime;
    public static StatItem Version;
    public static StatItem ItemCount;
    public static StatItem TotalItems;
    public static StatItem ConnectionCount;
    public static StatItem TotalConnections;
    public static StatItem ConnectionStructures;
    public static StatItem GetCount;
    public static StatItem SetCount;
    public static StatItem GetHits;
    public static StatItem GetMisses;
    public static StatItem UsedBytes;
    public static StatItem BytesRead;
    public static StatItem BytesWritten;
    public static StatItem MaxBytes;
}
internal enum Enyim.Caching.Memcached.StoreCommand : Enum {
    public int value__;
    public static StoreCommand Add;
    public static StoreCommand Replace;
    public static StoreCommand Set;
    public static StoreCommand Append;
    public static StoreCommand Prepend;
    public static StoreCommand CheckAndSet;
}
public enum Enyim.Caching.Memcached.StoreMode : Enum {
    public int value__;
    public static StoreMode Add;
    public static StoreMode Replace;
    public static StoreMode Set;
}
public class Enyim.Caching.Memcached.ThrottlingFailurePolicy : object {
    private static ILog log;
    private static bool LogIsDebugEnabled;
    private int resetAfter;
    private int failureThreshold;
    private DateTime lastFailed;
    private int failCounter;
    public ThrottlingFailurePolicy(int resetAfter, int failureThreshold);
    private static ThrottlingFailurePolicy();
    private sealed virtual override bool Enyim.Caching.Memcached.INodeFailurePolicy.ShouldFail();
}
public class Enyim.Caching.Memcached.ThrottlingFailurePolicyFactory : object {
    [CompilerGeneratedAttribute]
private int <ResetAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailureThreshold>k__BackingField;
    public int ResetAfter { get; private set; }
    public int FailureThreshold { get; private set; }
    public ThrottlingFailurePolicyFactory(int failureThreshold, TimeSpan resetAfter);
    public ThrottlingFailurePolicyFactory(int failureThreshold, int resetAfter);
    [CompilerGeneratedAttribute]
public int get_ResetAfter();
    [CompilerGeneratedAttribute]
private void set_ResetAfter(int value);
    [CompilerGeneratedAttribute]
public int get_FailureThreshold();
    [CompilerGeneratedAttribute]
private void set_FailureThreshold(int value);
    private sealed virtual override INodeFailurePolicy Enyim.Caching.Memcached.INodeFailurePolicyFactory.Create(IMemcachedNode node);
    private sealed virtual override INodeFailurePolicyFactory Enyim.Caching.Memcached.IProviderFactory<Enyim.Caching.Memcached.INodeFailurePolicyFactory>.Create();
    private sealed virtual override void Enyim.Caching.Memcached.IProvider.Initialize(Dictionary`2<string, string> parameters);
}
internal static class Enyim.Caching.Memcached.ThrowHelper : object {
    public static void ThrowSocketWriteError(IPEndPoint endpoint, SocketError error);
}
public class Enyim.Caching.Memcached.TigerHashKeyTransformer : KeyTransformerBase {
    public virtual string Transform(string key);
}
public class Enyim.Caching.Memcached.VBucketNodeLocator : object {
    private VBucket[] buckets;
    private int mask;
    private Func`1<HashAlgorithm> factory;
    private IMemcachedNode[] nodes;
    private static Dictionary`2<string, Func`1<HashAlgorithm>> hashFactory;
    public VBucketNodeLocator(string hashAlgorithm, VBucket[] buckets);
    private static VBucketNodeLocator();
    private sealed virtual override void Enyim.Caching.Memcached.IMemcachedNodeLocator.Initialize(IList`1<IMemcachedNode> nodes);
    private sealed virtual override IMemcachedNode Enyim.Caching.Memcached.IMemcachedNodeLocator.Locate(string key);
    public int GetIndex(string key);
    public VBucket GetVBucket(string key);
    private sealed virtual override IEnumerable`1<IMemcachedNode> Enyim.Caching.Memcached.IMemcachedNodeLocator.GetWorkingNodes();
}
public class Enyim.Caching.Memcached.VBucketNodeLocatorFactory : object {
    private string hashAlgo;
    private VBucket[] buckets;
    private sealed virtual override void Enyim.Caching.Memcached.IProvider.Initialize(Dictionary`2<string, string> parameters);
    private sealed virtual override IMemcachedNodeLocator Enyim.Caching.Memcached.IProviderFactory<Enyim.Caching.Memcached.IMemcachedNodeLocator>.Create();
}
public class Enyim.Caching.MemcachedClient : object {
    public static TimeSpan Infinite;
    internal static MemcachedClientSection DefaultSettings;
    private static ILog log;
    private IServerPool pool;
    private IMemcachedKeyTransformer keyTransformer;
    private ITranscoder transcoder;
    private IPerformanceMonitor performanceMonitor;
    [CompilerGeneratedAttribute]
private IStoreOperationResultFactory <StoreOperationResultFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IGetOperationResultFactory <GetOperationResultFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutateOperationResultFactory <MutateOperationResultFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcatOperationResultFactory <ConcatOperationResultFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemoveOperationResultFactory <RemoveOperationResultFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IMemcachedNode> NodeFailed;
    protected static int MaxSeconds;
    protected static DateTime UnixEpoch;
    public IStoreOperationResultFactory StoreOperationResultFactory { get; public set; }
    public IGetOperationResultFactory GetOperationResultFactory { get; public set; }
    public IMutateOperationResultFactory MutateOperationResultFactory { get; public set; }
    public IConcatOperationResultFactory ConcatOperationResultFactory { get; public set; }
    public IRemoveOperationResultFactory RemoveOperationResultFactory { get; public set; }
    protected IServerPool Pool { get; }
    protected IMemcachedKeyTransformer KeyTransformer { get; }
    protected ITranscoder Transcoder { get; }
    protected IPerformanceMonitor PerformanceMonitor { get; }
    public MemcachedClient(string sectionName);
    public MemcachedClient(IMemcachedClientConfiguration configuration);
    public MemcachedClient(IServerPool pool, IMemcachedKeyTransformer keyTransformer, ITranscoder transcoder);
    public MemcachedClient(IServerPool pool, IMemcachedKeyTransformer keyTransformer, ITranscoder transcoder, IPerformanceMonitor performanceMonitor);
    private static MemcachedClient();
    [CompilerGeneratedAttribute]
public IStoreOperationResultFactory get_StoreOperationResultFactory();
    [CompilerGeneratedAttribute]
public void set_StoreOperationResultFactory(IStoreOperationResultFactory value);
    [CompilerGeneratedAttribute]
public IGetOperationResultFactory get_GetOperationResultFactory();
    [CompilerGeneratedAttribute]
public void set_GetOperationResultFactory(IGetOperationResultFactory value);
    [CompilerGeneratedAttribute]
public IMutateOperationResultFactory get_MutateOperationResultFactory();
    [CompilerGeneratedAttribute]
public void set_MutateOperationResultFactory(IMutateOperationResultFactory value);
    [CompilerGeneratedAttribute]
public IConcatOperationResultFactory get_ConcatOperationResultFactory();
    [CompilerGeneratedAttribute]
public void set_ConcatOperationResultFactory(IConcatOperationResultFactory value);
    [CompilerGeneratedAttribute]
public IRemoveOperationResultFactory get_RemoveOperationResultFactory();
    [CompilerGeneratedAttribute]
public void set_RemoveOperationResultFactory(IRemoveOperationResultFactory value);
    protected IServerPool get_Pool();
    protected IMemcachedKeyTransformer get_KeyTransformer();
    protected ITranscoder get_Transcoder();
    protected IPerformanceMonitor get_PerformanceMonitor();
    private void StartPool();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NodeFailed(Action`1<IMemcachedNode> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NodeFailed(Action`1<IMemcachedNode> value);
    private static IMemcachedClientConfiguration GetSection(string sectionName);
    public sealed virtual object Get(string key);
    public sealed virtual T Get(string key);
    public sealed virtual bool TryGet(string key, Object& value);
    public sealed virtual CasResult`1<object> GetWithCas(string key);
    public sealed virtual CasResult`1<T> GetWithCas(string key);
    public sealed virtual bool TryGetWithCas(string key, CasResult`1& value);
    protected virtual IGetOperationResult PerformTryGet(string key, UInt64& cas, Object& value);
    public sealed virtual bool Store(StoreMode mode, string key, object value);
    public sealed virtual bool Store(StoreMode mode, string key, object value, TimeSpan validFor);
    public sealed virtual bool Store(StoreMode mode, string key, object value, DateTime expiresAt);
    public sealed virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, ulong cas);
    public sealed virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, TimeSpan validFor, ulong cas);
    public sealed virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value, DateTime expiresAt, ulong cas);
    public sealed virtual CasResult`1<bool> Cas(StoreMode mode, string key, object value);
    private IStoreOperationResult PerformStore(StoreMode mode, string key, object value, UInt32 expires, ulong cas);
    protected virtual IStoreOperationResult PerformStore(StoreMode mode, string key, object value, UInt32 expires, UInt64& cas, Int32& statusCode);
    public sealed virtual ulong Increment(string key, ulong defaultValue, ulong delta);
    public sealed virtual ulong Increment(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public sealed virtual ulong Increment(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public sealed virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, ulong cas);
    public sealed virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public sealed virtual CasResult`1<ulong> Increment(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public sealed virtual ulong Decrement(string key, ulong defaultValue, ulong delta);
    public sealed virtual ulong Decrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public sealed virtual ulong Decrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public sealed virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public sealed virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public sealed virtual CasResult`1<ulong> Decrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    private IMutateOperationResult PerformMutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires);
    private IMutateOperationResult CasMutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires, ulong cas);
    protected virtual IMutateOperationResult PerformMutate(MutationMode mode, string key, ulong defaultValue, ulong delta, UInt32 expires, UInt64& cas);
    public sealed virtual bool Append(string key, ArraySegment`1<byte> data);
    public sealed virtual bool Prepend(string key, ArraySegment`1<byte> data);
    public sealed virtual CasResult`1<bool> Append(string key, ulong cas, ArraySegment`1<byte> data);
    public sealed virtual CasResult`1<bool> Prepend(string key, ulong cas, ArraySegment`1<byte> data);
    protected virtual IConcatOperationResult PerformConcatenate(ConcatenationMode mode, string key, UInt64& cas, ArraySegment`1<byte> data);
    public sealed virtual void FlushAll();
    public sealed virtual ServerStats Stats();
    public sealed virtual ServerStats Stats(string type);
    public sealed virtual bool Remove(string key);
    public sealed virtual IDictionary`2<string, object> Get(IEnumerable`1<string> keys);
    public sealed virtual IDictionary`2<string, CasResult`1<object>> GetWithCas(IEnumerable`1<string> keys);
    protected virtual IDictionary`2<string, T> PerformMultiGet(IEnumerable`1<string> keys, Func`3<IMultiGetOperation, KeyValuePair`2<string, CacheItem>, T> collector);
    protected Dictionary`2<IMemcachedNode, IList`1<string>> GroupByServer(IEnumerable`1<string> keys);
    private static void SafeWaitAllAndDispose(WaitHandle[] waitHandles);
    protected static UInt32 GetExpiration(TimeSpan validFor);
    protected static UInt32 GetExpiration(DateTime expiresAt);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose();
    public sealed virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value);
    public sealed virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value, TimeSpan validFor);
    public sealed virtual IStoreOperationResult ExecuteStore(StoreMode mode, string key, object value, DateTime expiresAt);
    public sealed virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value);
    public sealed virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, ulong cas);
    public sealed virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, TimeSpan validFor, ulong cas);
    public sealed virtual IStoreOperationResult ExecuteCas(StoreMode mode, string key, object value, DateTime expiresAt, ulong cas);
    public sealed virtual IGetOperationResult ExecuteGet(string key);
    public sealed virtual IGetOperationResult ExecuteTryGet(string key, Object& value);
    public sealed virtual IGetOperationResult`1<T> ExecuteGet(string key);
    public sealed virtual IDictionary`2<string, IGetOperationResult> ExecuteGet(IEnumerable`1<string> keys);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public sealed virtual IMutateOperationResult ExecuteIncrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, ulong cas);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, TimeSpan validFor, ulong cas);
    public sealed virtual IMutateOperationResult ExecuteDecrement(string key, ulong defaultValue, ulong delta, DateTime expiresAt, ulong cas);
    public sealed virtual IConcatOperationResult ExecuteAppend(string key, ArraySegment`1<byte> data);
    public sealed virtual IConcatOperationResult ExecuteAppend(string key, ulong cas, ArraySegment`1<byte> data);
    public sealed virtual IConcatOperationResult ExecutePrepend(string key, ArraySegment`1<byte> data);
    public sealed virtual IConcatOperationResult ExecutePrepend(string key, ulong cas, ArraySegment`1<byte> data);
    public sealed virtual IRemoveOperationResult ExecuteRemove(string key);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_0(IMemcachedNode n);
    [CompilerGeneratedAttribute]
private void <StartPool>b__40_0(IMemcachedNode n);
    [CompilerGeneratedAttribute]
private object <Get>b__85_0(IMultiGetOperation mget, KeyValuePair`2<string, CacheItem> kvp);
    [CompilerGeneratedAttribute]
private CasResult`1<object> <GetWithCas>b__86_0(IMultiGetOperation mget, KeyValuePair`2<string, CacheItem> kvp);
    [CompilerGeneratedAttribute]
private IGetOperationResult <ExecuteGet>b__107_0(IMultiGetOperation mget, KeyValuePair`2<string, CacheItem> kvp);
}
public class Enyim.Caching.NullLoggerFactory : object {
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(string name);
    private sealed virtual override ILog Enyim.Caching.ILogFactory.GetLogger(Type type);
}
internal class Enyim.Caching.TextWriterLog : object {
    private static string PrefixDebug;
    private static string PrefixInfo;
    private static string PrefixWarn;
    private static string PrefixError;
    private static string PrefixFatal;
    private TextWriter writer;
    private string name;
    private bool Enyim.Caching.ILog.IsDebugEnabled { get; }
    private bool Enyim.Caching.ILog.IsInfoEnabled { get; }
    private bool Enyim.Caching.ILog.IsWarnEnabled { get; }
    private bool Enyim.Caching.ILog.IsErrorEnabled { get; }
    private bool Enyim.Caching.ILog.IsFatalEnabled { get; }
    public TextWriterLog(string name, TextWriter writer);
    private void Dump(string prefix, string message, Object[] args);
    private void Dump(string prefix, object message);
    private sealed virtual override bool Enyim.Caching.ILog.get_IsDebugEnabled();
    private sealed virtual override bool Enyim.Caching.ILog.get_IsInfoEnabled();
    private sealed virtual override bool Enyim.Caching.ILog.get_IsWarnEnabled();
    private sealed virtual override bool Enyim.Caching.ILog.get_IsErrorEnabled();
    private sealed virtual override bool Enyim.Caching.ILog.get_IsFatalEnabled();
    private sealed virtual override void Enyim.Caching.ILog.Debug(object message);
    private sealed virtual override void Enyim.Caching.ILog.Debug(object message, Exception exception);
    private sealed virtual override void Enyim.Caching.ILog.DebugFormat(string format, object arg0);
    private sealed virtual override void Enyim.Caching.ILog.DebugFormat(string format, object arg0, object arg1);
    private sealed virtual override void Enyim.Caching.ILog.DebugFormat(string format, object arg0, object arg1, object arg2);
    private sealed virtual override void Enyim.Caching.ILog.DebugFormat(string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.DebugFormat(IFormatProvider provider, string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.Info(object message);
    private sealed virtual override void Enyim.Caching.ILog.Info(object message, Exception exception);
    private sealed virtual override void Enyim.Caching.ILog.InfoFormat(string format, object arg0);
    private sealed virtual override void Enyim.Caching.ILog.InfoFormat(string format, object arg0, object arg1);
    private sealed virtual override void Enyim.Caching.ILog.InfoFormat(string format, object arg0, object arg1, object arg2);
    private sealed virtual override void Enyim.Caching.ILog.InfoFormat(string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.InfoFormat(IFormatProvider provider, string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.Warn(object message);
    private sealed virtual override void Enyim.Caching.ILog.Warn(object message, Exception exception);
    private sealed virtual override void Enyim.Caching.ILog.WarnFormat(string format, object arg0);
    private sealed virtual override void Enyim.Caching.ILog.WarnFormat(string format, object arg0, object arg1);
    private sealed virtual override void Enyim.Caching.ILog.WarnFormat(string format, object arg0, object arg1, object arg2);
    private sealed virtual override void Enyim.Caching.ILog.WarnFormat(string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.WarnFormat(IFormatProvider provider, string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.Error(object message);
    private sealed virtual override void Enyim.Caching.ILog.Error(object message, Exception exception);
    private sealed virtual override void Enyim.Caching.ILog.ErrorFormat(string format, object arg0);
    private sealed virtual override void Enyim.Caching.ILog.ErrorFormat(string format, object arg0, object arg1);
    private sealed virtual override void Enyim.Caching.ILog.ErrorFormat(string format, object arg0, object arg1, object arg2);
    private sealed virtual override void Enyim.Caching.ILog.ErrorFormat(string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.ErrorFormat(IFormatProvider provider, string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.Fatal(object message);
    private sealed virtual override void Enyim.Caching.ILog.Fatal(object message, Exception exception);
    private sealed virtual override void Enyim.Caching.ILog.FatalFormat(string format, object arg0);
    private sealed virtual override void Enyim.Caching.ILog.FatalFormat(string format, object arg0, object arg1);
    private sealed virtual override void Enyim.Caching.ILog.FatalFormat(string format, object arg0, object arg1, object arg2);
    private sealed virtual override void Enyim.Caching.ILog.FatalFormat(string format, Object[] args);
    private sealed virtual override void Enyim.Caching.ILog.FatalFormat(IFormatProvider provider, string format, Object[] args);
}
public class Enyim.Caching.UIntEqualityComparer : object {
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.UInt32>.Equals(UInt32 x, UInt32 y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.UInt32>.GetHashCode(UInt32 value);
}
public class Enyim.Collections.InterlockedQueue`1 : object {
    private Node<T> headNode;
    private Node<T> tailNode;
    public bool Dequeue(T& value);
    public bool Peek(T& value);
    public void Enqueue(T value);
}
public class Enyim.Collections.InterlockedStack`1 : object {
    private Node<TItem> head;
    public void Push(TItem item);
    public bool TryPop(TItem& value);
}
public class Enyim.FNV1 : HashAlgorithm {
    protected static UInt32 Prime;
    protected static UInt32 Init;
    protected UInt32 CurrentHashValue;
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private sealed virtual override UInt32 Enyim.IUIntHashAlgorithm.ComputeHash(Byte[] data);
}
public class Enyim.FNV1a : FNV1 {
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
}
public class Enyim.FNV64 : HashAlgorithm {
    protected static ulong Init;
    protected static ulong Prime;
    protected ulong CurrentHashValue;
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private sealed virtual override UInt32 Enyim.IUIntHashAlgorithm.ComputeHash(Byte[] data);
}
public class Enyim.FNV64a : FNV64 {
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
}
public class Enyim.HashCodeCombiner : object {
    private int currentHash;
    public int CurrentHash { get; }
    public HashCodeCombiner(int initialValue);
    public static int Combine(int code1, int code2);
    public void Add(int value);
    public int get_CurrentHash();
    public static int Combine(int code1, int code2, int code3);
    public static int Combine(int code1, int code2, int code3, int code4);
}
internal class Enyim.HashkitCrc32 : HashAlgorithm {
    private bool shouldReset;
    private UInt32 currentHash;
    private static UInt32[] CrcTable;
    public UInt32 CurrentHash { get; }
    private static HashkitCrc32();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void FinalizeHash();
    protected virtual Byte[] HashFinal();
    public UInt32 get_CurrentHash();
    private void UnsafeHashCore(Byte[] buffer, int offset, int count);
    private sealed virtual override UInt32 Enyim.IUIntHashAlgorithm.ComputeHash(Byte[] data);
}
internal class Enyim.HashkitMurmur : HashAlgorithm {
    [CompilerGeneratedAttribute]
private UInt32 <CurrentHash>k__BackingField;
    public bool CanTransformMultipleBlocks { get; }
    public UInt32 CurrentHash { get; private set; }
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    [CompilerGeneratedAttribute]
public UInt32 get_CurrentHash();
    [CompilerGeneratedAttribute]
private void set_CurrentHash(UInt32 value);
    private static UInt32 UnsafeHashCore(Byte[] data, int offset, int length);
    private sealed virtual override UInt32 Enyim.IUIntHashAlgorithm.ComputeHash(Byte[] data);
}
internal class Enyim.HashkitOneAtATime : HashAlgorithm {
    [CompilerGeneratedAttribute]
private UInt32 <CurrentHash>k__BackingField;
    public bool CanTransformMultipleBlocks { get; }
    public UInt32 CurrentHash { get; private set; }
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    [CompilerGeneratedAttribute]
public UInt32 get_CurrentHash();
    [CompilerGeneratedAttribute]
private void set_CurrentHash(UInt32 value);
    private static UInt32 UnsafeHashCore(Byte[] data, int offset, int count);
    private sealed virtual override UInt32 Enyim.IUIntHashAlgorithm.ComputeHash(Byte[] data);
}
internal interface Enyim.IUIntHashAlgorithm {
    public abstract virtual UInt32 ComputeHash(Byte[] data);
}
public class Enyim.ModifiedFNV : FNV1a {
    protected virtual Byte[] HashFinal();
}
public static class Enyim.Reflection.FastActivator : object {
    private static Dictionary`2<Type, Func`1<object>> factoryCache;
    private static FastActivator();
    public static T Create();
    public static object Create(Type type);
}
public interface Enyim.Reflection.IFastMultiArgObjectFacory {
    public abstract virtual object CreateInstance(Object[] args);
}
public interface Enyim.Reflection.IFastObjectFacory {
    public abstract virtual object CreateInstance();
}
public class Enyim.TigerHash : HashAlgorithm {
    private static int PASSES;
    private static int BLOCKSIZE;
    private long totalLength;
    private ulong a;
    private ulong b;
    private ulong c;
    private Byte[] internalDataBuffer;
    private int bufferPosition;
    private UInt64[] block;
    private static UInt64[] T;
    private static TigerHash();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private void ProcessBlock();
    private void Compress();
    private static void Schedule(UInt64[] x);
    private void RoundABC(ulong x, UInt32 mul);
    private void RoundBCA(ulong x, UInt32 mul);
    private void RoundCAB(ulong x, UInt32 mul);
    private static void LongToBytes(ulong value, Byte[] buffer, int offset);
}
