internal class EO.Internal.niqh : muhe {
    private static UInt32 dffk;
    private WebView dffl;
    private Dictionary`2<int, niug> dffm;
    private Exception dffn;
    private Dictionary`2<int, muht> dffo;
    private bool dffp;
    private int dffq;
    private Nullable`1<DateTime> dffr;
    private tsvn dffs;
    private static niqh();
    public niqh(WebView d);
    private static void fbeb(Engine a, muhe b, muht c);
    protected virtual void uryi(Exception agz);
    protected virtual void ssqi();
    public WebView fbec();
    private IntPtr fbed(tsvn e, IntPtr f, int g, IntPtr h, IntPtr i, Boolean& j);
    protected virtual void kryb();
    protected virtual void kryc();
    protected virtual void npju();
    protected virtual void hanj(object aha);
    private void fbee(muht k);
    private bool fbef(muhq l);
    internal void fbeg(bool m);
    protected virtual void meql(int ahb);
    internal int fbeh(ResourceHandler n, ResourceHandlerContext o);
}
internal class EO.Internal.niqi : object {
    private int hvbn;
    private int hvbo;
    public niqi(muht u);
    public void ogrc(muhs v);
    public static void ogrd(muhs w);
    public long ogre();
    public static bool ogrf(niqi x);
    public bool ogrg();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class EO.Internal.niqj : object {
    private static int dtqj;
    private niqh dtqk;
    private niqi dtql;
    private static Dictionary`2<long, WeakReference> dtqm;
    [CompilerGeneratedAttribute]
private BrowserObject dtqn;
    public niqh ojfo { get; }
    public niqi ojfp { get; }
    public BrowserObject ojfq { get; private set; }
    private niqj(niqh ae, niqi af);
    private static niqj();
    public static niqj iabv(niqh y, niqi z, object aa);
    public static niqj iabv(niqh ab, niqi ac, object ad);
    protected virtual override void Finalize();
    private void iabw(bool ag);
    public sealed virtual void Dispose();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public niqh get_ojfo();
    public niqi get_ojfp();
    [CompilerGeneratedAttribute]
public BrowserObject get_ojfq();
    [CompilerGeneratedAttribute]
private void set_ojfq(BrowserObject value);
}
internal enum EO.Internal.niqv : Enum {
    public int value__;
    public static niqv vqsl;
    public static niqv ccbk;
    public static niqv ccbl;
    public static niqv ccbm;
    public static niqv ccbn;
    public static niqv ccbo;
}
internal class EO.Internal.niqw : BrowserObject {
    private niqw ccbp;
    public void nyvu();
    public int nyvv();
    public void nyvw(int az);
    public void nyvx(int ba, int bb, string bc);
    public void nyvy(int bd, int be, string bf);
    public void nyvz(int bg, int bh, string bi, int bj);
    public void nywa(int bk, int bl, string bm);
    public niqv nywb(int bn);
    public niqw nywc(int bo);
    public void nywd(int bp);
    public int nywe(int bq);
    public void nywf(int br, int bs);
    public string nywg(int bt);
    public void nywh(int bu, string bv);
    public int nywi(int bw);
    public void nywj(int bx, int by);
    public bool nywk(int bz);
    public void nywl(int ca, bool cb);
    public bool nywm(int cc);
    public void nywn(int cd, bool ce);
    public bool nywo(int cf);
    public void nywp(int cg, bool ch);
    public void nywq(int ci, Shortcut cj);
}
internal enum EO.Internal.nirh : Enum {
    public int value__;
    public static nirh vqsl;
    public static nirh jdyr;
    public static nirh jdys;
    public static nirh jdyt;
}
internal class EO.Internal.nirj : BrowserObject {
    public int wujo(string dj, bool dk);
}
internal class EO.Internal.nirn : BrowserObject {
    public void csyi(nirh ds);
}
internal class EO.Internal.niro : DownloadEventArgs {
    private nirn bxvu;
    internal niro(niqh dt, muht du);
    internal nirn payv();
}
internal class EO.Internal.niru : object {
    public static string navf(ErrorCode eb);
}
internal enum EO.Internal.nisc : Enum {
    public int value__;
    public static nisc gkue;
    public static nisc gkuf;
    public static nisc gkug;
}
internal class EO.Internal.nish : tsvn {
    private Font nyal;
    private String[] nyam;
    public nish(IntPtr oj, string ok);
    private void rubq(Graphics ol, SizeF& om, SizeF& on, SizeF& oo, SizeF& op, Single& oq, Single& or);
    protected virtual IntPtr wsjg(IntPtr ahq, int ahr, IntPtr ahs, IntPtr aht, Boolean& ahu);
    private GraphicsPath rubr(RectangleF os, float ot, float ou, bool ov, bool ow, bool ox, bool oy);
}
internal enum EO.Internal.nisk : Enum {
    public int value__;
    public static nisk maqj;
    public static nisk navf;
    public static nisk maqk;
    public static nisk maql;
}
internal class EO.Internal.nisl : MulticastDelegate {
    public nisl(object object, IntPtr method);
    public virtual int Invoke(int nCode, IntPtr wParam, IntPtr lParam, Boolean& bContinue);
    public virtual IAsyncResult BeginInvoke(int nCode, IntPtr wParam, IntPtr lParam, Boolean& bContinue, AsyncCallback callback, object object);
    public virtual int EndInvoke(Boolean& bContinue, IAsyncResult result);
}
internal class EO.Internal.nism : object {
    private nisl yrxj;
    private mypz yrxk;
    private int yrxl;
    private bool yrxm;
    public nism(nisk pj, nisl pk);
    public bool iabw();
    private int upkt(int pl, IntPtr pm, IntPtr pn);
    private static int upku(int po, mypz pp, IntPtr pq, int pr);
    private static bool upkv(int ps);
    private static int upkw(int pt, int pu, IntPtr pv, IntPtr pw);
}
internal class EO.Internal.niso : BrowserObject {
    public void wujo(bool qc, string qd);
}
internal enum EO.Internal.nisp : Enum {
    public int value__;
    public static nisp myeo;
    public static nisp myep;
    public static nisp myeq;
}
internal class EO.Internal.niss : object {
    private static Nullable`1<bool> phyw;
    private static List`1<string> vrng;
    private static DateTime vrnh;
    private static TimeSpan vrni;
    private static niss();
    public static bool pupz(object qi);
    private static bool puqa(object qj);
    internal static void puqb(List`1<string> qk);
}
internal class EO.Internal.nist : object {
}
internal enum EO.Internal.nisu : Enum {
    public int value__;
    public static nisu samr;
    public static nisu sams;
}
internal class EO.Internal.nisx : object {
    private WebView dffl;
    private dydd picd;
    private NavigationTask laqm;
    private NavigationTask laqn;
    private List`1<NavigationTask> laqo;
    private muhu laqp;
    private bool laqq;
    internal NavigationTask[] gmdr { get; }
    public nisx(WebView ri);
    public WebView puro();
    public NavigationTask[] qbuu();
    public NavigationTask rdpc(string rj, Request rk, bool rl);
    internal void qbuv(NavigationTask rm);
    internal NavigationTask[] get_gmdr();
    private NavigationTask qbuw(muhs rn);
    public NavigationTask kbhv(bool ro);
    public NavigationTask rdoz();
    public NavigationTask rdpa();
    public void kbhx();
    public NavigationTask rdpg(string rp, string rq, bool rr);
    private void qbux(NavigationTask rs);
    internal void qbuy(int rt);
    internal void qbuz(int ru);
    private bool qbva(NavigationTask rv);
    internal void rdsz(NavigationTask rw, bool rx);
    internal void rdta(NavigationTask ry);
    internal int qbvb(bool rz, string sa, bool sb);
    internal void qbvc();
    internal void qbvd(muht sc);
    private void rdsu(muht sd);
}
internal enum EO.Internal.niti : Enum {
    public int value__;
    public static niti bawy;
    public static niti jdyr;
    public static niti bawz;
}
internal class EO.Internal.nitp : object {
    private long bjff;
    private bool vmhp;
    private muhl vmhq;
    private string huid;
    private string vmhr;
    private bool vmhs;
    private string didi;
    private bool vmht;
    private nitu vmhu;
    private int vmhv;
    private PostDataCollection vmhw;
    private CookieCollection vmhx;
    public long ojfp { get; }
    public bool kaxw { get; }
    public string smiw { get; public set; }
    public string kaxx { get; }
    public string hwqk { get; public set; }
    public ResourceType kaxy { get; }
    public nitu kaxz { get; }
    public PostDataCollection kaya { get; }
    public CookieCollection kayb { get; }
    public nitp(niqh tq, muht tr);
    public long get_ojfp();
    public bool get_kaxw();
    private void mtfi();
    public string get_smiw();
    public void set_smiw(string value);
    public string get_kaxx();
    public string get_hwqk();
    public void set_hwqk(string value);
    internal static ResourceType mtfj(muhl ts);
    public ResourceType get_kaxy();
    public nitu get_kaxz();
    public PostDataCollection get_kaya();
    public CookieCollection get_kayb();
    internal void mtfk(muhs tt);
    private bool mtfl();
}
internal class EO.Internal.nitu : NameValueCollection {
    private nitp cmol;
    private Response eywg;
    private string eywh;
    private int eywi;
    private string eywj;
    [CompilerGeneratedAttribute]
private bool ffmk;
    public bool qvke { get; public set; }
    public string ikhj { get; public set; }
    public string ikhl { get; public set; }
    public int ikhk { get; public set; }
    internal nitu(nitp uk);
    internal nitu(Response ul);
    [CompilerGeneratedAttribute]
public bool get_qvke();
    [CompilerGeneratedAttribute]
public void set_qvke(bool value);
    internal void jcez();
    public void ewny();
    public virtual void Clear();
    public virtual void Add(string name, string value);
    public virtual void Set(string name, string value);
    public virtual void Remove(string name);
    private bool qihm(bidl um, string un, string uo);
    public string get_ikhj();
    public void set_ikhj(string value);
    public string get_ikhl();
    public void set_ikhl(string value);
    public int get_ikhk();
    public void set_ikhk(int value);
}
internal class EO.Internal.nitv : object {
    private muhh picg;
    private long jwvt;
    public Request lixq { get; public set; }
    public int hwfi { get; public set; }
    private nitv(muhh up, long uq);
    public static nitv iabv(muhh ur, long us);
    public Request get_lixq();
    public void set_lixq(Request value);
    public int get_hwfi();
    public void set_hwfi(int value);
    public static NavigationTask knsw(muhh ut, long uu);
}
internal class EO.Internal.niug : object {
    private niqh dtqk;
    private Response eywg;
    private pjgl khyo;
    private ResourceHandler khyp;
    private ResourceHandlerContext khyq;
    private niva xbnc;
    private int khyr;
    private ManualResetEvent khys;
    private List`1<Byte[]> khyt;
    private bool khyu;
    private bool khyv;
    private pjgk khyw;
    private int flar;
    private pjgk khyx;
    public niug(niqh vu, ResourceHandler vv, ResourceHandlerContext vw);
    internal static bool rdqy(niqh vx, muht vy, niug vz);
    private static void ckjo(niqh wa, muht wb, niug wc);
    private static void ckjp(niqh wd, muht we, niug wf);
    private static bool ckjq(niqh wg, muht wh, niug wi);
    private void ckjr(nitp wj, pjgk wk);
    private void ckjs(pjgl wl, muhs wm);
    private bool ckjt(int wn, muhs wo, pjgk wp);
    private void ckju();
    internal void ckjv(Byte[] wq);
    internal void ckjw();
    internal void jdyr();
    internal void xqiu();
    internal void ckjx();
    private void ckjy();
    [CompilerGeneratedAttribute]
private void ckjz();
    [CompilerGeneratedAttribute]
private void ckka();
}
internal enum EO.Internal.niui : Enum {
    public int value__;
    public static niui fgsw;
    public static niui fgsx;
    public static niui fgsy;
    public static niui fgsz;
    public static niui fgta;
    public static niui fgtb;
    public static niui fgtc;
    public static niui fgtd;
    public static niui fgte;
    public static niui fgtf;
    public static niui qrct;
}
internal class EO.Internal.niuk : object {
    private GCHandle dtqk;
    private int xxmt;
    private int xxmu;
    private int hvbo;
    public niuk(niqh wu, muht wv);
    protected virtual override void Finalize();
    public void iabw();
    public niqh hctw();
    public void ogrc(muhs ww);
}
internal abstract class EO.Internal.niuz : object {
    private Action ysry;
    public niuz(Action zn);
    public void vpys();
    public virtual void jdyr();
}
internal class EO.Internal.niva : object {
    private static Dictionary`2<oqsw, string> cmoh;
    private static Thread masn;
    private static bool maso;
    private oqsw masp;
    private niva(oqsw zo);
    private static niva();
    public static niva mlme(niuz zp);
    public void gkue(int zq);
    private static void rdsx();
    public void jdyr();
    private static void mlmh();
}
internal class EO.Internal.nivd : object {
    private static Nullable`1<bool> ewpk;
    private static Type ewpl;
    private static Type ewpm;
    private static Type ewpn;
    private static Type ewpo;
    private static MethodInfo ewpp;
    private static MethodInfo ewpq;
    private static MethodInfo ewpr;
    private static Type ewps;
    private static Type ewpt;
    private static Type ewpu;
    private static MethodInfo ewpv;
    private static MethodInfo ewpw;
    private static Type ewpx;
    private static Type ewpy;
    private static Type ewpz;
    private static MethodInfo ewqa;
    private static MethodInfo ewqb;
    private static MethodInfo ewqc;
    private static MethodInfo ewqd;
    private static MethodInfo ewqe;
    private static MethodInfo ewqf;
    private static MethodInfo ewqg;
    [ThreadStaticAttribute]
private static Dictionary`2<IntPtr, gubz> ewqh;
    public static void iosl(IntPtr aaq);
    public static void iosm(IntPtr aar);
    private static bool futu();
}
internal class EO.Internal.nive`2 : MulticastDelegate {
    public nive`2(object object, IntPtr method);
    public virtual void Invoke(b a1, c a2);
    public virtual IAsyncResult BeginInvoke(b a1, c a2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class EO.Internal.nivf : object {
    public static IntPtr auah(IntPtr abg, int abh);
}
internal enum EO.Internal.nivi : Enum {
    public int value__;
    public static nivi ducu;
    public static nivi ducv;
    public static nivi ducw;
    public static nivi rdtr;
    public static nivi ducx;
}
internal enum EO.Internal.niwd : Enum {
    public int value__;
    public static niwd mgyl;
    public static niwd fxav;
    public static niwd fxaw;
}
internal interface EO.Internal.niwg {
    public bool ksxz { get; }
    public WebView puro { get; public set; }
    public abstract virtual bool get_ksxz();
    [CompilerGeneratedAttribute]
public abstract virtual void add_tqcg(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_tqcg(EventHandler value);
    public abstract virtual WebView get_puro();
    public abstract virtual void set_puro(WebView value);
    public abstract virtual void sfql(string agy);
}
internal class EO.Internal.niwh : object {
    public static string acgo;
    public static string acgp;
    public static string acgq;
    public static string acgr;
}
internal enum EO.Internal.niwi : Enum {
    public int value__;
    public static niwi bcjb;
    public static niwi kewv;
    public static niwi keww;
    public static niwi kewx;
    public static niwi kewy;
    public static niwi kewz;
    public static niwi kexa;
}
internal class EO.Internal.niwl : BaseException {
    [CompilerGeneratedAttribute]
private Engine dnyn;
    public Engine ksxu { get; private set; }
    public niwl(Engine acp, string acq, Exception acr);
    [CompilerGeneratedAttribute]
private void set_ksxu(Engine value);
    [CompilerGeneratedAttribute]
public Engine get_ksxu();
}
internal class EO.Internal.niwn : object {
    public static int aiaz;
    public static int aiba;
    public static int aibb;
    public static int aibc;
    public static int aibd;
    public static int aibe;
    public static int aibf;
    public static int aibg;
    public static UInt32 aibh;
    public static UInt32 aibi;
    public static UInt32 aibj;
    public static int aibk;
    public static int aibl;
    public static int aibm;
    public static int aibn;
    public static int aibo;
    public static int aibp;
    public static UInt32 aibq;
    public static UInt32 aibr;
    public static UInt32 aibs;
    public static UInt32 aibt;
    public static UInt32 aibu;
    public static UInt32 aibv;
    public static UInt32 aibw;
    public static UInt32 aibx;
    public static int aiby;
    public static int aibz;
    public static int aica;
    public static IntPtr jirq(IntPtr acv, IntPtr acw, IntPtr acx, UInt32 acy);
    public static bool jirr(IntPtr acz);
    public static IntPtr jirs(string ada, UInt32 adb, UInt32 adc, UInt32 add, UInt32 ade, UInt32 adf, UInt32 adg, IntPtr adh);
    public static bool jirt(IntPtr adi, int adj, IntPtr adk, IntPtr adl);
    public static bool jiru(IntPtr adm, Int32& adn, IntPtr& ado, IntPtr& adp, int adq);
    public static bool jirv(IntPtr adr, IntPtr ads);
    public static bool jirw(IntPtr adt, Byte[] adu, int adv, Int32& adw, IntPtr adx);
    public static bool jirw(IntPtr ady, IntPtr adz, int aea, IntPtr aeb, IntPtr aec);
    public static bool jirx(IntPtr aed, IntPtr aee, int aef, Int32& aeg, IntPtr aeh);
    public static bool jirx(IntPtr aei, IntPtr aej, int aek, IntPtr ael, IntPtr aem);
    public static IntPtr jiry(string aen, UInt32 aeo, UInt32 aep, IntPtr aeq, UInt32 aer, UInt32 aes, IntPtr aet);
    public static int jirz(Char[] aeu, UInt32 aev);
    public static IntPtr jisa(IntPtr aew, ysrj aex, int aey, int aez, int afa);
    public static bool jisb(IntPtr afb);
    public static void jisc(IntPtr afc, IntPtr afd, int afe);
    public static short jisd(int aff);
    public static IntPtr jise(IntPtr afg, bool afh, string afi);
    public static IntPtr jisf(UInt32 afj, bool afk, string afl);
    public static bool jisg(IntPtr afm);
    public static void jish(IntPtr afn, IntPtr afo, int afp);
    public static IntPtr jisi(IntPtr afq, IntPtr afr);
    public static IntPtr jisj(IntPtr afs);
    public static bool jisk(IntPtr aft, IntPtr afu);
    public static int jisl(IntPtr afv, int afw);
}
internal class EO.Internal.niwo : tsrp {
    private static Thread gokb;
    private static niwo gokc;
    private static string gokd;
    private static int goke;
    private static int gokf;
    private static int gokg;
    private static int gokh;
    private static int goki;
    private static int gokj;
    private static int gokk;
    private static int gokl;
    private tsrv gokm;
    private tsru gokn;
    private tssd goko;
    private tsrw gokp;
    private Engine[] gokq;
    private int gokr;
    private List`1<WebView> anxu;
    private List`1<string> goks;
    private WebView gokt;
    private string goku;
    private tsvn gokv;
    public static EventHandler gokw;
    public static void nhgz();
    public static void nhha();
    public static bool nhhb();
    private static void nhhc();
    protected virtual void euef();
    private void nhhd();
    private void nhhe();
    protected virtual void eueg();
    private void nhhf();
    protected virtual void euec(IntPtr aie, int aif, int aig);
    private void nhhg();
    private void rdra();
    private void nhhh();
    private void nhhi();
    [CompilerGeneratedAttribute]
private void nhhj(object afx, EventArgs afy);
    [CompilerGeneratedAttribute]
private void nhhk(object afz, EventArgs aga);
}
internal class EO.Internal.niwp : tsrp {
    private static int lish;
    private static int lisi;
    private JSDialogEventArgs lisj;
    private niwp(JSDialogEventArgs agb, string agc, int agd, string age);
    public static void nhgz(WebView agf, JSDialogEventArgs agg);
    protected virtual void euef();
    protected virtual void eueh(int aih, ndnm aii);
}
internal class EO.Internal.niwq : tsrp {
    private muhp smxc;
    private NeedCredentialsEventArgs lisj;
    public niwq(WebView agh, NeedCredentialsEventArgs agi);
    protected virtual void euef();
    protected virtual void eueh(int aij, ndnm aik);
}
public class EO.WebBrowser.AfterPrintEventArgs : EventArgs {
    private PrintResult ufle;
    private string uflf;
    public PrintResult Result { get; }
    public string ErrorMessage { get; public set; }
    internal AfterPrintEventArgs(muhm tm, string tn);
    public PrintResult get_Result();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
}
public class EO.WebBrowser.AfterPrintHandler : MulticastDelegate {
    public AfterPrintHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AfterPrintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AfterPrintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.BeforeContextMenuEventArgs : FrameEventArgs {
    private ContextMenu mtoo;
    private ContextMenuInfo skmj;
    public ContextMenuInfo MenuInfo { get; }
    public ContextMenu Menu { get; }
    internal BeforeContextMenuEventArgs(niqh cv, muht cw);
    public ContextMenuInfo get_MenuInfo();
    public ContextMenu get_Menu();
}
public class EO.WebBrowser.BeforeContextMenuHandler : MulticastDelegate {
    public BeforeContextMenuHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeContextMenuEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeContextMenuEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.BeforeDownloadEventArgs : DownloadEventArgs {
    private nirj bxvu;
    [CompilerGeneratedAttribute]
private string bxvv;
    [CompilerGeneratedAttribute]
private bool bxvw;
    public string FilePath { get; public set; }
    public bool ShowDialog { get; public set; }
    internal BeforeDownloadEventArgs(niqh dn, muht dp);
    internal nirj payv();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowDialog();
    [CompilerGeneratedAttribute]
public void set_ShowDialog(bool value);
}
public class EO.WebBrowser.BeforeDownloadHandler : MulticastDelegate {
    public BeforeDownloadHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeDownloadEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeDownloadEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.BeforeNavigateEventArgs : CancelEventArgs {
    private string didf;
    private string didg;
    private bool gkuh;
    private string didh;
    private string didi;
    [CompilerGeneratedAttribute]
private NavigationType didj;
    [CompilerGeneratedAttribute]
private bool didk;
    [CompilerGeneratedAttribute]
private bool didl;
    public string OldUrl { get; }
    public string NewUrl { get; }
    public string FrameName { get; }
    public NavigationType NavigationType { get; private set; }
    public bool IsMainFrame { get; }
    public bool IsUserGesture { get; private set; }
    public bool IsRedirect { get; private set; }
    public string Method { get; }
    internal BeforeNavigateEventArgs(muht se);
    public string get_OldUrl();
    public string get_NewUrl();
    public string get_FrameName();
    [CompilerGeneratedAttribute]
public NavigationType get_NavigationType();
    [CompilerGeneratedAttribute]
private void set_NavigationType(NavigationType value);
    public bool get_IsMainFrame();
    [CompilerGeneratedAttribute]
public bool get_IsUserGesture();
    [CompilerGeneratedAttribute]
private void set_IsUserGesture(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRedirect();
    [CompilerGeneratedAttribute]
private void set_IsRedirect(bool value);
    public string get_Method();
}
public class EO.WebBrowser.BeforeNavigateHandler : MulticastDelegate {
    public BeforeNavigateHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeNavigateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeNavigateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.BeforePrintEventArgs : EventArgs {
    private bool fgbb;
    private PrinterSettings fgbc;
    private PageSettings fgbd;
    private int fgbe;
    private int fgbf;
    private niti ysry;
    public bool IsFromScript { get; }
    public int MaxPageCount { get; }
    public PrinterSettings PrinterSettings { get; }
    public PageSettings PageSettings { get; }
    internal void futu(int sv, bool sw, PrinterSettings sx, PageSettings sy);
    private void futv();
    public void UpdateSettings(PrinterSettings printerSettings, PageSettings pageSettings);
    public bool get_IsFromScript();
    public int get_MaxPageCount();
    public PrinterSettings get_PrinterSettings();
    public PageSettings get_PageSettings();
    public void Cancel();
    public void Continue(bool showPrintOptionDialog);
    internal void rohw(muhs sz);
    private int futx(int ta);
    private int futy(int tb, int tc);
    private int futy(float td, int te);
    private static bool futz(ogrj& tf);
    private static bool fuua(ogrk& tg);
    private static int fuub(IntPtr th, int ti);
    private static bool fuuc(IntPtr tj);
}
public class EO.WebBrowser.BeforePrintHandler : MulticastDelegate {
    public BeforePrintHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforePrintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BeforePrintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.BeforeRequestLoadEventArgs : RequestEventArgs {
    private niqi xhkd;
    private niqi xhke;
    [CompilerGeneratedAttribute]
private bool xhkf;
    public bool Canceled { get; public set; }
    internal BeforeRequestLoadEventArgs(muhh ve, niqh vf, muht vg);
    [CompilerGeneratedAttribute]
public bool get_Canceled();
    [CompilerGeneratedAttribute]
public void set_Canceled(bool value);
    internal void hcuc();
}
public class EO.WebBrowser.BeforeRequestLoadHandler : MulticastDelegate {
    public BeforeRequestLoadHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeRequestLoadEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeRequestLoadEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class EO.WebBrowser.BrowserObject : object {
    private niqj pbxo;
    private bool pbxp;
    internal void hcts(niqj ah);
    internal void hctt(BrowserObject ai);
    internal virtual void rohu();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal static a iabv(niqh aj, niqi ak, object al);
    internal void hctu(muhs am);
    internal bool hctv();
    internal niqh hctw();
    protected virtual bool hcts();
    internal virtual void phua(object agk);
    internal muhs hctx(muhq an);
    internal void hcty();
}
public class EO.WebBrowser.CertificateErrorEventArgs : EventArgs {
    private string huid;
    private ErrorCode jmft;
    private ResourceType vmhq;
    private X509Certificate2 gggn;
    internal bool xuqh;
    public string Url { get; }
    public ErrorCode ErrorCode { get; }
    public ResourceType ResourceType { get; }
    public X509Certificate2 Certificate { get; }
    internal CertificateErrorEventArgs(muht acc);
    public string get_Url();
    public ErrorCode get_ErrorCode();
    public ResourceType get_ResourceType();
    public X509Certificate2 get_Certificate();
    public void Continue();
}
public class EO.WebBrowser.CertificateErrorHandler : MulticastDelegate {
    public CertificateErrorHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CertificateErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CertificateErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.CommandEventArgs : FrameEventArgs {
    private ContextMenuInfo skmj;
    private int skmk;
    private EventFlags skml;
    [CompilerGeneratedAttribute]
private bool skmm;
    public ContextMenuInfo MenuInfo { get; }
    public int CommandId { get; }
    public EventFlags Flags { get; }
    public bool Handled { get; public set; }
    internal CommandEventArgs(niqh ar, muht as);
    internal CommandEventArgs(Frame at, int au, EventFlags av);
    public ContextMenuInfo get_MenuInfo();
    public int get_CommandId();
    public EventFlags get_Flags();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class EO.WebBrowser.CommandHandler : MulticastDelegate {
    public CommandHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.CommandIds : object {
    public static int Back;
    public static int Forward;
    public static int Reload;
    public static int ReloadNoCache;
    public static int StopLoad;
    public static int Undo;
    public static int Redo;
    public static int Cut;
    public static int Copy;
    public static int Paste;
    public static int Delete;
    public static int SelectAll;
    public static int Print;
    public static int ViewSource;
    internal static int kbih;
    private static int kbii;
    private static int kbij;
    public static int SpellCheckSuggestion0;
    public static int SpellCheckSuggestion1;
    public static int SpellCheckSuggestion2;
    public static int SpellCheckSuggestion3;
    public static int SpellCheckSuggestion4;
    internal static int kbip;
    public static int SpellCheckAddToDictionary;
    public static int PluginFirst;
    public static int PluginLast;
    private static int kbit;
    private static Dictionary`2<object, int> kbiu;
    private static CommandIds();
    public static int RegisterUserCommand(object key);
    public static bool IsUserCommand(int id);
}
public class EO.WebBrowser.ConsoleMessageEventArgs : EventArgs {
    private ConsoleMessageSeverity jrtw;
    private ConsoleMessageType govf;
    private string dhxo;
    private string jrtx;
    private int wybm;
    public ConsoleMessageType Type { get; }
    public ConsoleMessageSeverity Severity { get; }
    public string Message { get; }
    public string Source { get; }
    public int LineNumber { get; }
    internal ConsoleMessageEventArgs(muht abk);
    public ConsoleMessageType get_Type();
    public ConsoleMessageSeverity get_Severity();
    public string get_Message();
    public string get_Source();
    public int get_LineNumber();
    public virtual string ToString();
}
public class EO.WebBrowser.ConsoleMessageHandler : MulticastDelegate {
    public ConsoleMessageHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConsoleMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConsoleMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum EO.WebBrowser.ConsoleMessageSeverity : Enum {
    public int value__;
    public static ConsoleMessageSeverity Debug;
    public static ConsoleMessageSeverity Log;
    public static ConsoleMessageSeverity Warning;
    public static ConsoleMessageSeverity Error;
}
public enum EO.WebBrowser.ConsoleMessageType : Enum {
    public int value__;
    public static ConsoleMessageType Unknown;
    public static ConsoleMessageType JavaScript;
    public static ConsoleMessageType Network;
    public static ConsoleMessageType ConsoleAPI;
}
public class EO.WebBrowser.ContextMenu : object {
    private niqw luvu;
    private MenuItemCollection luvv;
    public MenuItemCollection Items { get; }
    internal ContextMenu(niqw ck);
    public MenuItemCollection get_Items();
}
public class EO.WebBrowser.ContextMenuInfo : object {
    private int vedc;
    private int vedd;
    private ContextMenuSourceFlags vede;
    private ContextMenuMediaType vedf;
    private string vedg;
    private string vedh;
    private string vedi;
    private string vedj;
    private string vedk;
    private MediaState vedl;
    private string vedm;
    private bool vedn;
    private EditState vedo;
    private string vedp;
    private String[] vedq;
    public int X { get; }
    public int Y { get; }
    public ContextMenuSourceFlags SourceFlags { get; }
    public ContextMenuMediaType MediaType { get; }
    public string SourceUrl { get; }
    public string LinkUrl { get; }
    public string PageUrl { get; }
    public string FrameUrl { get; }
    public string FrameCharSet { get; }
    private MediaState ecgf { get; }
    public string SelectionText { get; }
    public bool IsEditable { get; }
    public EditState EditState { get; }
    public string MisspelledWord { get; }
    public String[] Suggestions { get; }
    internal ContextMenuInfo(muht ay);
    public int get_X();
    public int get_Y();
    public ContextMenuSourceFlags get_SourceFlags();
    public ContextMenuMediaType get_MediaType();
    public string get_SourceUrl();
    public string get_LinkUrl();
    public string get_PageUrl();
    public string get_FrameUrl();
    public string get_FrameCharSet();
    private MediaState get_ecgf();
    public string get_SelectionText();
    public bool get_IsEditable();
    public EditState get_EditState();
    public string get_MisspelledWord();
    public String[] get_Suggestions();
}
public enum EO.WebBrowser.ContextMenuMediaType : Enum {
    public int value__;
    public static ContextMenuMediaType None;
    public static ContextMenuMediaType Image;
    public static ContextMenuMediaType Video;
    public static ContextMenuMediaType Audio;
    public static ContextMenuMediaType Canvas;
    public static ContextMenuMediaType File;
    public static ContextMenuMediaType Plugin;
}
[FlagsAttribute]
public enum EO.WebBrowser.ContextMenuSourceFlags : Enum {
    public int value__;
    public static ContextMenuSourceFlags None;
    public static ContextMenuSourceFlags Page;
    public static ContextMenuSourceFlags Frame;
    public static ContextMenuSourceFlags Link;
    public static ContextMenuSourceFlags Media;
    public static ContextMenuSourceFlags Selection;
    public static ContextMenuSourceFlags Editable;
}
[DefaultMemberAttribute("Item")]
public class EO.WebBrowser.DOM.Collection`1 : JSObject {
    public int length { get; }
    public T Item { get; }
    public int get_length();
    public T get_Item(int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class EO.WebBrowser.DOM.Document : JSObject {
    public string title { get; public set; }
    public string URL { get; }
    public Element body { get; }
    public Element getElementById(string id);
    public Element[] getElementsByName(string name);
    public Element[] getElementsByTagName(string tagName);
    public string get_title();
    public void set_title(string value);
    public string get_URL();
    public Element get_body();
}
public class EO.WebBrowser.DOM.Element : JSObject {
    public string id { get; public set; }
    public string tagName { get; }
    public string className { get; }
    public string innerHTML { get; public set; }
    public string outerHTML { get; }
    public string innerText { get; }
    public JSObject style { get; }
    public string get_id();
    public void set_id(string value);
    public string get_tagName();
    public string get_className();
    public string get_innerHTML();
    public void set_innerHTML(string value);
    public string get_outerHTML();
    public string get_innerText();
    public JSObject get_style();
}
public class EO.WebBrowser.DOM.Window : JSObject {
    public Document document { get; }
    public int pageXOffset { get; }
    public int pageYOffset { get; }
    public int screenX { get; }
    public int screenY { get; }
    public Document get_document();
    public int get_pageXOffset();
    public int get_pageYOffset();
    public int get_screenX();
    public int get_screenY();
}
public class EO.WebBrowser.DOMNodeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DOMNodeInfo igul;
    public DOMNodeInfo Node { get; private set; }
    internal DOMNodeEventArgs(DOMNodeInfo db);
    [CompilerGeneratedAttribute]
public DOMNodeInfo get_Node();
    [CompilerGeneratedAttribute]
private void set_Node(DOMNodeInfo value);
}
public class EO.WebBrowser.DOMNodeEventHandler : MulticastDelegate {
    public DOMNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DOMNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DOMNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.DOMNodeInfo : object {
    [CompilerGeneratedAttribute]
private DOMNodeType fkfz;
    [CompilerGeneratedAttribute]
private string fkga;
    [CompilerGeneratedAttribute]
private bool fkgb;
    private ceix fkgc;
    [CompilerGeneratedAttribute]
private Rectangle fkgd;
    public DOMNodeType Type { get; private set; }
    public string TagName { get; private set; }
    public bool IsEditable { get; private set; }
    public NameValueCollection Attributes { get; }
    public Rectangle Bounds { get; private set; }
    internal DOMNodeInfo(DOMNodeType cz, muht da);
    [CompilerGeneratedAttribute]
public DOMNodeType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(DOMNodeType value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEditable();
    [CompilerGeneratedAttribute]
private void set_IsEditable(bool value);
    public NameValueCollection get_Attributes();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
private void set_Bounds(Rectangle value);
}
public enum EO.WebBrowser.DOMNodeType : Enum {
    public int value__;
    public static DOMNodeType Unsupported;
    public static DOMNodeType Element;
    public static DOMNodeType Text;
}
public class EO.WebBrowser.DownloadEventArgs : EventArgs {
    private DownloadItem xbnb;
    private NavigationTask xbnc;
    public DownloadItem Item { get; }
    internal DownloadEventArgs(muht dl);
    internal DownloadEventArgs(DownloadItem dm);
    public DownloadItem get_Item();
}
public class EO.WebBrowser.DownloadEventHandler : MulticastDelegate {
    public DownloadEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.DownloadItem : object {
    [CompilerGeneratedAttribute]
private int ysrl;
    [CompilerGeneratedAttribute]
private DownloadState ysrm;
    [CompilerGeneratedAttribute]
private long ysrn;
    [CompilerGeneratedAttribute]
private int ysro;
    [CompilerGeneratedAttribute]
private long ysrp;
    [CompilerGeneratedAttribute]
private long ysrq;
    [CompilerGeneratedAttribute]
private DateTime ysrr;
    [CompilerGeneratedAttribute]
private DateTime ysrs;
    [CompilerGeneratedAttribute]
private string ysrt;
    [CompilerGeneratedAttribute]
private string ysru;
    [CompilerGeneratedAttribute]
private string ysrv;
    [CompilerGeneratedAttribute]
private string ysrw;
    [CompilerGeneratedAttribute]
private ErrorCode ysrx;
    private static Dictionary`2<int, WeakReference> luvv;
    private nirh ysry;
    internal nirn ysrz;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler yssa;
    public int Id { get; private set; }
    public DownloadState State { get; private set; }
    public long CurrentSpeed { get; private set; }
    public int PercentageComplete { get; private set; }
    public long TotalBytes { get; private set; }
    public long ReceivedBytes { get; private set; }
    public DateTime StartTime { get; private set; }
    public DateTime EndTime { get; private set; }
    public string FullPath { get; private set; }
    public string Url { get; private set; }
    public string ContentDisposition { get; private set; }
    public string MimeType { get; private set; }
    public ErrorCode ErrorCode { get; internal set; }
    private DownloadItem(int de);
    private static DownloadItem();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public DownloadState get_State();
    [CompilerGeneratedAttribute]
private void set_State(DownloadState value);
    [CompilerGeneratedAttribute]
public long get_CurrentSpeed();
    [CompilerGeneratedAttribute]
private void set_CurrentSpeed(long value);
    [CompilerGeneratedAttribute]
public int get_PercentageComplete();
    [CompilerGeneratedAttribute]
private void set_PercentageComplete(int value);
    [CompilerGeneratedAttribute]
public long get_TotalBytes();
    [CompilerGeneratedAttribute]
private void set_TotalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_ReceivedBytes();
    [CompilerGeneratedAttribute]
private void set_ReceivedBytes(long value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
private void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
private void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ContentDisposition();
    [CompilerGeneratedAttribute]
private void set_ContentDisposition(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
private void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(ErrorCode value);
    internal static DownloadItem jkxs(int df);
    internal void jkxt(muht dg);
    private void jkxu(string dh);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void Cancel();
    public void Pause();
    public void Resume();
    private void jkxv(nirh di);
    internal nirh jkxw();
    internal void jkxx();
}
public class EO.WebBrowser.DownloadResult : object {
    internal string huid;
    internal ErrorCode jmft;
    internal string jmfu;
    internal long jmfv;
    internal string huie;
    public string Url { get; }
    public ErrorCode ErrorCode { get; }
    public string FileName { get; }
    public long TotalBytes { get; }
    public string MimeType { get; }
    public string get_Url();
    public ErrorCode get_ErrorCode();
    public string get_FileName();
    public long get_TotalBytes();
    public string get_MimeType();
}
public enum EO.WebBrowser.DownloadState : Enum {
    public int value__;
    public static DownloadState Invalid;
    public static DownloadState InProgress;
    public static DownloadState Paused;
    public static DownloadState Complete;
    public static DownloadState Canceled;
}
public enum EO.WebBrowser.EditState : Enum {
    public int value__;
    public static EditState None;
    public static EditState CanUndo;
    public static EditState CanRedo;
    public static EditState CanCut;
    public static EditState CanCopy;
    public static EditState CanPaste;
    public static EditState CanDelete;
    public static EditState CanSelectAll;
    public static EditState CanTranslate;
}
public enum EO.WebBrowser.ErrorCode : Enum {
    public int value__;
    public static ErrorCode ProceedAsDownload;
    public static ErrorCode ProceedAsLaunchUrl;
    public static ErrorCode OK;
    public static ErrorCode GenericError;
    public static ErrorCode Canceled;
    public static ErrorCode InvalidArgument;
    public static ErrorCode InvalidHandle;
    public static ErrorCode FileNotFound;
    public static ErrorCode TimedOut;
    public static ErrorCode FileTooBig;
    public static ErrorCode UnexpectedError;
    public static ErrorCode AccessDenied;
    public static ErrorCode NotImplemented;
    public static ErrorCode ConnectionClosed;
    public static ErrorCode ConnectionReset;
    public static ErrorCode ConnectionRefused;
    public static ErrorCode ConnectionAborted;
    public static ErrorCode ConnectionFailed;
    public static ErrorCode NameNotResolved;
    public static ErrorCode InternetDisconnected;
    public static ErrorCode SSLProtocolError;
    public static ErrorCode AddressInvalid;
    public static ErrorCode AddressUnreachable;
    public static ErrorCode SSLClientCertificateNeeded;
    public static ErrorCode TunnelConnectionFailed;
    public static ErrorCode NoSSLVersionsEnabled;
    public static ErrorCode SSLVersionOrCipherMismatch;
    public static ErrorCode SSLRenegotiationRequested;
    public static ErrorCode ConnectionTimeout;
    public static ErrorCode HostResolverQueueTooLarge;
    public static ErrorCode SocksConnectionFailed;
    public static ErrorCode SocksConnectionHostUnreachable;
    public static ErrorCode NpnNegotiationFailed;
    public static ErrorCode SslNoRenegotiation;
    public static ErrorCode ProxyConnectionFailed;
    public static ErrorCode CertificateCommonNameInvalid;
    public static ErrorCode CertificateDateInvalid;
    public static ErrorCode CertificateAuthorityInvalid;
    public static ErrorCode CertificateContainsError;
    public static ErrorCode CertificateNoRevocationMechanism;
    public static ErrorCode CertificateUnableTocheckRevocation;
    public static ErrorCode CertificateRevoked;
    public static ErrorCode CertificateInvalid;
    public static ErrorCode InvalidUrl;
    public static ErrorCode DisallowedUrlScheme;
    public static ErrorCode UnknownUrlScheme;
    public static ErrorCode TooManyRedirects;
    public static ErrorCode UnsafeRedirect;
    public static ErrorCode UnsafePort;
    public static ErrorCode InvalidResponse;
    public static ErrorCode InvalidChunkedEncoding;
    public static ErrorCode MethodNotSupported;
    public static ErrorCode EmptyResponse;
    public static ErrorCode ResponseHeadersTooBig;
    public static ErrorCode InvalidSpdyStream;
    public static ErrorCode InsecureResponse;
}
[FlagsAttribute]
public enum EO.WebBrowser.EventFlags : Enum {
    public int value__;
    public static EventFlags None;
    public static EventFlags CapsLockOn;
    public static EventFlags ShiftDown;
    public static EventFlags ControlDown;
    public static EventFlags AltDown;
    public static EventFlags LeftMouseDown;
    public static EventFlags MiddleMouseDown;
    public static EventFlags RightMouseDown;
}
public class EO.WebBrowser.FileDialogEventArgs : EventArgs {
    private niqh dtqk;
    private int qwbh;
    private FileDialogMode qwbi;
    private string qwbj;
    private string qwbk;
    private String[] qwbl;
    private string qwbm;
    [CompilerGeneratedAttribute]
private bool skmm;
    public FileDialogMode Mode { get; }
    public string Title { get; }
    public string DefaultFileName { get; }
    public String[] AcceptTypes { get; }
    public string Filter { get; }
    public bool Handled { get; public set; }
    private FileDialogEventArgs(niqh ee, muht ef);
    internal static void krfk(niqh ec, muht ed);
    public FileDialogMode get_Mode();
    public string get_Title();
    public string get_DefaultFileName();
    public String[] get_AcceptTypes();
    public string get_Filter();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    public void Continue(String[] filePaths);
    public void Cancel();
}
public class EO.WebBrowser.FileDialogHandler : MulticastDelegate {
    public FileDialogHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FileDialogEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FileDialogEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum EO.WebBrowser.FileDialogMode : Enum {
    public int value__;
    public static FileDialogMode Open;
    public static FileDialogMode OpenMultiple;
    public static FileDialogMode Save;
}
public class EO.WebBrowser.FindSession : object {
    private static int kbit;
    private int bjff;
    private WebView dffl;
    private string govj;
    private bool bjfg;
    [CompilerGeneratedAttribute]
private int bjfh;
    [CompilerGeneratedAttribute]
private int bjfi;
    [CompilerGeneratedAttribute]
private EventHandler bjfj;
    public int MatchCount { get; private set; }
    public int CurrentMatchIndex { get; private set; }
    internal FindSession(WebView ei, string ej, bool ek);
    public void Next();
    public void Previous();
    public void Stop();
    internal void nugm(int el, int em);
    [CompilerGeneratedAttribute]
public int get_MatchCount();
    [CompilerGeneratedAttribute]
private void set_MatchCount(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentMatchIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentMatchIndex(int value);
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler value);
}
public class EO.WebBrowser.Frame : BrowserObject {
    private bool gkuh;
    private nisc gkui;
    private string huid;
    private string gkuj;
    internal nisc tghh { get; }
    public bool IsMainFrame { get; }
    public string Name { get; }
    public string Url { get; }
    internal virtual void phua(object agl);
    internal nisc get_tghh();
    public bool get_IsMainFrame();
    public string get_Name();
    public string get_Url();
}
public class EO.WebBrowser.FrameEventArgs : EventArgs {
    private Frame tghk;
    public Frame Frame { get; }
    internal FrameEventArgs(niqh en, muht eo);
    internal FrameEventArgs(Frame ep);
    public Frame get_Frame();
}
public class EO.WebBrowser.FrameEventHandler : MulticastDelegate {
    public FrameEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FrameEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FrameEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.FullscreenModeChangedArgs : EventArgs {
    private bool oqkj;
    private bool oqkk;
    private IntPtr oqkl;
    [CompilerGeneratedAttribute]
private IntPtr oqkm;
    public bool Fullscreen { get; }
    public IntPtr HWndOwner { get; public set; }
    public IntPtr HWndParent { get; public set; }
    public bool ShowExitInstruction { get; public set; }
    internal FullscreenModeChangedArgs(IntPtr oz, bool pa);
    public bool get_Fullscreen();
    [CompilerGeneratedAttribute]
public IntPtr get_HWndOwner();
    [CompilerGeneratedAttribute]
public void set_HWndOwner(IntPtr value);
    public IntPtr get_HWndParent();
    public void set_HWndParent(IntPtr value);
    public bool get_ShowExitInstruction();
    public void set_ShowExitInstruction(bool value);
}
public class EO.WebBrowser.FullScreenModeChangedHandler : MulticastDelegate {
    public FullScreenModeChangedHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FullscreenModeChangedArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FullscreenModeChangedArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.GetClientCertificateHandler : MulticastDelegate {
    public GetClientCertificateHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NeedClientCertificateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NeedClientCertificateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.GiveFocusEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool rjjf;
    public bool Next { get; private set; }
    internal GiveFocusEventArgs(bool abr);
    [CompilerGeneratedAttribute]
public bool get_Next();
    [CompilerGeneratedAttribute]
private void set_Next(bool value);
}
public class EO.WebBrowser.GiveFocusHandler : MulticastDelegate {
    public GiveFocusHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GiveFocusEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GiveFocusEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface EO.WebBrowser.IInputMsgFilter {
    public abstract virtual InputMsgTarget PreDispatchMsg(int Msg, IntPtr wParam, IntPtr lParam);
}
public interface EO.WebBrowser.INavigationResult {
    public ErrorCode ErrorCode { get; }
    public int HttpStatusCode { get; }
    public abstract virtual ErrorCode get_ErrorCode();
    public abstract virtual int get_HttpStatusCode();
}
public enum EO.WebBrowser.InputMsgTarget : Enum {
    public int value__;
    public static InputMsgTarget None;
    public static InputMsgTarget WebView;
    public static InputMsgTarget Application;
}
public class EO.WebBrowser.JSDialogEventArgs : EventArgs {
    private WebView dffl;
    private JSDialogType crud;
    private string crue;
    private string cruf;
    private string crug;
    private niso bxvu;
    internal Nullable`1<bool> cruh;
    private IntPtr[] crui;
    [CompilerGeneratedAttribute]
private bool cruj;
    public JSDialogType DialogType { get; }
    public string OriginUrl { get; }
    public string MessageText { get; }
    public string DefaultPromptText { get; }
    public bool AutoCancel { get; public set; }
    internal JSDialogEventArgs(niqh qe, muht qf);
    public JSDialogType get_DialogType();
    public string get_OriginUrl();
    public string get_MessageText();
    public string get_DefaultPromptText();
    [CompilerGeneratedAttribute]
public bool get_AutoCancel();
    [CompilerGeneratedAttribute]
public void set_AutoCancel(bool value);
    public void OK();
    public void OK(string userInput);
    public void Cancel();
    internal void abff();
}
public class EO.WebBrowser.JSDialogEventHandler : MulticastDelegate {
    public JSDialogEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, JSDialogEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, JSDialogEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum EO.WebBrowser.JSDialogType : Enum {
    public int value__;
    public static JSDialogType Alert;
    public static JSDialogType Confirm;
    public static JSDialogType Prompt;
    public static JSDialogType BeforeUnload;
}
public class EO.WebBrowser.JSException : JSInvokeException {
    private string wybl;
    private int wybm;
    private int wybn;
    private int wybo;
    public string ResourceName { get; }
    public int LineNumber { get; }
    public int StartColumn { get; }
    public int EndColumn { get; }
    internal JSException(string xs, int xt, int xu, int xv, string xw);
    internal static JSException xvov(muht xr);
    private static string xvow(string xx, int xy, int xz, int ya, string yb);
    public string get_ResourceName();
    public int get_LineNumber();
    public int get_StartColumn();
    public int get_EndColumn();
}
public class EO.WebBrowser.JSExtInvokeArgs : EventArgs {
    private string iewv;
    private Object[] ieww;
    private static Object[] iewx;
    [CompilerGeneratedAttribute]
private object iewy;
    [CompilerGeneratedAttribute]
private bool skmm;
    public string FunctionName { get; }
    public Object[] Arguments { get; }
    public object ReturnValue { get; public set; }
    public bool Handled { get; public set; }
    internal JSExtInvokeArgs(niqh yc, muht yd);
    private static JSExtInvokeArgs();
    public string get_FunctionName();
    public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
public void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class EO.WebBrowser.JSExtInvokeHandler : MulticastDelegate {
    public JSExtInvokeHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, JSExtInvokeArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, JSExtInvokeArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.JSFunction : JSObject {
    private string gkuj;
    [DebuggerBrowsableAttribute("0")]
public string Name { get; }
    [DebuggerBrowsableAttribute("0")]
public Object[] Arguments { get; }
    [DebuggerBrowsableAttribute("0")]
public JSFunction Caller { get; }
    public string get_Name();
    public Object[] get_Arguments();
    public JSFunction get_Caller();
    public virtual string ToString();
    public object Invoke(JSObject thisObj, bool throwOnError, Object[] arguments);
    public object Invoke(JSObject thisObj, Object[] arguments);
}
public class EO.WebBrowser.JSInvokeException : BaseException {
    private JSInvokeResult cfdp;
    public JSInvokeResult ResultCode { get; }
    internal JSInvokeException(JSInvokeResult xp, string xq);
    public JSInvokeResult get_ResultCode();
}
public enum EO.WebBrowser.JSInvokeResult : Enum {
    public int value__;
    public static JSInvokeResult OK;
    public static JSInvokeResult InvalidContext;
    public static JSInvokeResult InvalidObject;
    public static JSInvokeResult InvalidChannel;
    public static JSInvokeResult InvalidFunction;
    public static JSInvokeResult JSException;
    public static JSInvokeResult WebViewDestroyed;
    public static JSInvokeResult UnsafeContext;
}
public class EO.WebBrowser.JSNull : JSObject {
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("EO.WebBrowser.JSObject/brbv")]
public abstract class EO.WebBrowser.JSObject : object {
    private niuk pbxo;
    public static JSObject Undefined;
    public static JSObject Null;
    public object Item { get; public set; }
    public object Item { get; public set; }
    private static JSObject();
    public sealed virtual void Dispose();
    internal niqh hctw(bool wx);
    internal virtual object jpkw();
    internal static object jkxt(niqh wy, muht wz);
    internal static void ogrc(object xa, muhs xb);
    public virtual String[] GetPropertyNames();
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public static T CastTo(object from);
    internal static a[] ynvu(object xc);
    public object InvokeFunction(string functionName, Object[] args);
    internal object rdqe(string xd, bool xe, Object[] xf);
    public static bool IsTheSame(JSObject obj1, JSObject obj2);
    public bool IsTheSame(JSObject other);
    public Object[] ToArray();
    [CompilerGeneratedAttribute]
private void ynvx(muhs xg);
}
public class EO.WebBrowser.JSRealObject : JSObject {
    public virtual string ToString();
}
public class EO.WebBrowser.JSUndefined : JSObject {
    public virtual string ToString();
}
public enum EO.WebBrowser.KeyboardEventType : Enum {
    public int value__;
    public static KeyboardEventType KeyDown;
    public static KeyboardEventType KeyUp;
    public static KeyboardEventType Char;
}
public enum EO.WebBrowser.KeyCode : Enum {
    public int value__;
    public static KeyCode A;
    public static KeyCode Add;
    public static KeyCode Apps;
    public static KeyCode Attn;
    public static KeyCode B;
    public static KeyCode Back;
    public static KeyCode BrowserBack;
    public static KeyCode BrowserFavorites;
    public static KeyCode BrowserForward;
    public static KeyCode BrowserHome;
    public static KeyCode BrowserRefresh;
    public static KeyCode BrowserSearch;
    public static KeyCode BrowserStop;
    public static KeyCode C;
    public static KeyCode Cancel;
    public static KeyCode Capital;
    public static KeyCode CapsLock;
    public static KeyCode Clear;
    public static KeyCode ControlKey;
    public static KeyCode Crsel;
    public static KeyCode D;
    public static KeyCode D0;
    public static KeyCode D1;
    public static KeyCode D2;
    public static KeyCode D3;
    public static KeyCode D4;
    public static KeyCode D5;
    public static KeyCode D6;
    public static KeyCode D7;
    public static KeyCode D8;
    public static KeyCode D9;
    public static KeyCode Decimal;
    public static KeyCode Delete;
    public static KeyCode Divide;
    public static KeyCode Down;
    public static KeyCode E;
    public static KeyCode End;
    public static KeyCode Enter;
    public static KeyCode EraseEof;
    public static KeyCode Escape;
    public static KeyCode Execute;
    public static KeyCode Exsel;
    public static KeyCode F;
    public static KeyCode F1;
    public static KeyCode F10;
    public static KeyCode F11;
    public static KeyCode F12;
    public static KeyCode F13;
    public static KeyCode F14;
    public static KeyCode F15;
    public static KeyCode F16;
    public static KeyCode F17;
    public static KeyCode F18;
    public static KeyCode F19;
    public static KeyCode F2;
    public static KeyCode F20;
    public static KeyCode F21;
    public static KeyCode F22;
    public static KeyCode F23;
    public static KeyCode F24;
    public static KeyCode F3;
    public static KeyCode F4;
    public static KeyCode F5;
    public static KeyCode F6;
    public static KeyCode F7;
    public static KeyCode F8;
    public static KeyCode F9;
    public static KeyCode G;
    public static KeyCode H;
    public static KeyCode Help;
    public static KeyCode Home;
    public static KeyCode I;
    public static KeyCode Insert;
    public static KeyCode J;
    public static KeyCode K;
    public static KeyCode L;
    public static KeyCode LaunchApplication1;
    public static KeyCode LaunchApplication2;
    public static KeyCode LaunchMail;
    public static KeyCode LButton;
    public static KeyCode LControlKey;
    public static KeyCode Left;
    public static KeyCode LineFeed;
    public static KeyCode LMenu;
    public static KeyCode LShiftKey;
    public static KeyCode LWin;
    public static KeyCode M;
    public static KeyCode Menu;
    public static KeyCode Multiply;
    public static KeyCode N;
    public static KeyCode Next;
    public static KeyCode NumLock;
    public static KeyCode NumPad0;
    public static KeyCode NumPad1;
    public static KeyCode NumPad2;
    public static KeyCode NumPad3;
    public static KeyCode NumPad4;
    public static KeyCode NumPad5;
    public static KeyCode NumPad6;
    public static KeyCode NumPad7;
    public static KeyCode NumPad8;
    public static KeyCode NumPad9;
    public static KeyCode O;
    public static KeyCode Oem1;
    public static KeyCode Oem102;
    public static KeyCode Oem2;
    public static KeyCode Oem3;
    public static KeyCode Oem4;
    public static KeyCode Oem5;
    public static KeyCode Oem6;
    public static KeyCode Oem7;
    public static KeyCode Oem8;
    public static KeyCode OemBackslash;
    public static KeyCode OemClear;
    public static KeyCode OemCloseBrackets;
    public static KeyCode Oemcomma;
    public static KeyCode OemMinus;
    public static KeyCode OemOpenBrackets;
    public static KeyCode OemPeriod;
    public static KeyCode OemPipe;
    public static KeyCode Oemplus;
    public static KeyCode OemQuestion;
    public static KeyCode OemQuotes;
    public static KeyCode OemSemicolon;
    public static KeyCode Oemtilde;
    public static KeyCode P;
    public static KeyCode PageDown;
    public static KeyCode PageUp;
    public static KeyCode Pause;
    public static KeyCode Play;
    public static KeyCode Print;
    public static KeyCode PrintScreen;
    public static KeyCode Prior;
    public static KeyCode Q;
    public static KeyCode R;
    public static KeyCode RControlKey;
    public static KeyCode Return;
    public static KeyCode Right;
    public static KeyCode RMenu;
    public static KeyCode RShiftKey;
    public static KeyCode RWin;
    public static KeyCode S;
    public static KeyCode Scroll;
    public static KeyCode Select;
    public static KeyCode ShiftKey;
    public static KeyCode Sleep;
    public static KeyCode Space;
    public static KeyCode Subtract;
    public static KeyCode T;
    public static KeyCode Tab;
    public static KeyCode U;
    public static KeyCode Up;
    public static KeyCode V;
    public static KeyCode VolumeDown;
    public static KeyCode VolumeMute;
    public static KeyCode VolumeUp;
    public static KeyCode W;
    public static KeyCode X;
    public static KeyCode Y;
    public static KeyCode Z;
    public static KeyCode Zoom;
}
public class EO.WebBrowser.LaunchUrlEventArgs : EventArgs {
    private string huid;
    private bool tiuc;
    public string Url { get; }
    public bool UseOSHandler { get; public set; }
    internal LaunchUrlEventArgs(string acf);
    public string get_Url();
    public bool get_UseOSHandler();
    public void set_UseOSHandler(bool value);
}
public class EO.WebBrowser.LaunchUrlHandler : MulticastDelegate {
    public LaunchUrlHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LaunchUrlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LaunchUrlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.LoadCompletedEventArgs : EventArgs {
    private NavigationTask xbnc;
    public NavigationTask Task { get; }
    public string Url { get; }
    public int HttpStatusCode { get; }
    internal LoadCompletedEventArgs(NavigationTask sh);
    public NavigationTask get_Task();
    public string get_Url();
    public int get_HttpStatusCode();
}
public class EO.WebBrowser.LoadCompletedEventHandler : MulticastDelegate {
    public LoadCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.LoadFailedEventArgs : LoadCompletedEventArgs {
    private string dhxo;
    private bool dhxp;
    private bool dhxq;
    internal bool dhxr;
    public ErrorCode ErrorCode { get; }
    public bool IsLastTask { get; }
    public string ErrorMessage { get; public set; }
    public bool ShouldShowError { get; public set; }
    internal LoadFailedEventArgs(NavigationTask si, bool sj, bool sk);
    public ErrorCode get_ErrorCode();
    public bool get_IsLastTask();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public bool get_ShouldShowError();
    public void set_ShouldShowError(bool value);
    public void UseDefaultMessage();
}
public class EO.WebBrowser.LoadFailedEventHandler : MulticastDelegate {
    public LoadFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum EO.WebBrowser.MediaState : Enum {
    public int value__;
    public static MediaState None;
    public static MediaState Error;
    public static MediaState Paused;
    public static MediaState Muted;
    public static MediaState Loop;
    public static MediaState CanSave;
    public static MediaState HasAudio;
    public static MediaState HasVideo;
    public static MediaState MediaControl;
    public static MediaState CanPrint;
    public static MediaState CanRotate;
}
public class EO.WebBrowser.MenuItem : object {
    internal int gove;
    private niqw luvu;
    private niqv govf;
    private bool govg;
    private bool govh;
    private bool govi;
    private string govj;
    private int skmk;
    private int govk;
    private bool govl;
    private bool govm;
    private MenuItemCollection govn;
    public MenuItemCollection SubItems { get; }
    public bool IsSeparator { get; public set; }
    public bool IsCheckItem { get; public set; }
    public bool IsRadioItem { get; public set; }
    public int Index { get; }
    public string Text { get; public set; }
    public int CommandId { get; public set; }
    public int GroupId { get; public set; }
    public bool Checked { get; public set; }
    public bool Enabled { get; public set; }
    public MenuItem(string text);
    public MenuItem(string text, int commandId);
    internal MenuItem(niqw co, int cp);
    public static MenuItem CreateSeparator();
    internal void nywd(bool cq);
    internal void rohu();
    internal void rohv();
    internal void rohw(niqw cr);
    private void rohx();
    public MenuItemCollection get_SubItems();
    private bool rohy();
    public bool get_IsSeparator();
    public void set_IsSeparator(bool value);
    public bool get_IsCheckItem();
    public void set_IsCheckItem(bool value);
    public bool get_IsRadioItem();
    public void set_IsRadioItem(bool value);
    public int get_Index();
    public string get_Text();
    public void set_Text(string value);
    public int get_CommandId();
    public void set_CommandId(int value);
    public int get_GroupId();
    public void set_GroupId(int value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[ClassInterfaceAttribute("0")]
public class EO.WebBrowser.MenuItemCollection : Collection`1<MenuItem> {
    private MenuItem ccbp;
    private niqw luvu;
    private bool kbkb;
    private bool kbkc;
    internal MenuItemCollection(MenuItem cs, niqw ct);
    internal void rohw(niqw cu);
    internal void rohu();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, MenuItem item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, MenuItem item);
    public void AddSpellCheckSuggstions(String[] suggestions);
    private int mtom();
    public bool HasPluginMenuItems();
    public void Clear(bool clearPluginMenuItems);
    public void Clear();
}
public enum EO.WebBrowser.MouseEventType : Enum {
    public int value__;
    public static MouseEventType Click;
    public static MouseEventType Move;
    public static MouseEventType Wheel;
    public static MouseEventType Down;
    public static MouseEventType Up;
}
public class EO.WebBrowser.NavigationTask : WebViewTask {
    internal static tsrc cmod;
    internal static tsrc cmoe;
    internal static tsrc cmof;
    internal static tsrc cmog;
    private static tspq`2<int, int> cmoh;
    private static int kbit;
    private int bjff;
    private nisx cmoi;
    private muhq cmoj;
    private muhs cmok;
    private string huid;
    private string sxwh;
    private Request cmol;
    private string cmom;
    private ErrorCode jmft;
    private int cmon;
    private dwkq picd;
    private yqji cmoo;
    private bool cmop;
    private bool cmoq;
    private bool cmor;
    internal bool cmos;
    internal bool cmot;
    internal bool cmou;
    internal DownloadItem cmov;
    private bool cmow;
    private ManualResetEvent cmox;
    public int ID { get; }
    public string Url { get; internal set; }
    public Request Request { get; }
    public ErrorCode ErrorCode { get; }
    public int HttpStatusCode { get; }
    internal NavigationTask(nisx ql, muhq qm, string qn, string qo, Request qp, bool qq, bool qr);
    internal NavigationTask(nisx qs, muhs qt);
    private static NavigationTask();
    internal void ifnk();
    internal static NavigationTask ifnl(int qu);
    internal void ifnm();
    internal void ifnn(yqji qv, int qw);
    internal void ifno(nisc qx, muht qy);
    public virtual void SetCanceled();
    internal void jdyr(ErrorCode qz, nisu ra);
    internal muhq ifnp();
    private bool ifnq();
    private void bcjh(bool rb);
    internal bool ifnr();
    internal void ifns();
    internal void ifnt();
    internal void ifnu(dwkr rc);
    public int get_ID();
    public string get_Url();
    internal void set_Url(string value);
    public Request get_Request();
    public sealed virtual ErrorCode get_ErrorCode();
    public sealed virtual int get_HttpStatusCode();
    private sealed virtual override void tspp.dpif();
    internal static bool ifnv(string rd);
    internal static string ifnw(string re);
    private static string ifnx(string rf);
    [CompilerGeneratedAttribute]
private void ifny(object rg);
}
public enum EO.WebBrowser.NavigationType : Enum {
    public int value__;
    public static NavigationType LinkClicked;
    public static NavigationType FormSubmitted;
    public static NavigationType BackOrForward;
    public static NavigationType Reload;
    public static NavigationType Other;
}
public class EO.WebBrowser.NeedClientCertificateEventArgs : EventArgs {
    private string gggk;
    private int gggl;
    internal bool gggm;
    internal X509Certificate gggn;
    internal Byte[] gggo;
    internal string gggp;
    [CompilerGeneratedAttribute]
private Byte[][] gggq;
    public string Host { get; }
    public int Port { get; }
    public Byte[][] TrustedAuthorities { get; private set; }
    internal NeedClientCertificateEventArgs(muht ao);
    public string get_Host();
    public int get_Port();
    [CompilerGeneratedAttribute]
public Byte[][] get_TrustedAuthorities();
    [CompilerGeneratedAttribute]
private void set_TrustedAuthorities(Byte[][] value);
    public void Continue(X509Certificate certificate, string password);
    public void Continue(Byte[] certificateData, string password);
    public void Continue(Byte[] certificateData);
    public void ContinueWithoutCertificate();
}
public class EO.WebBrowser.NeedCredentialsEventArgs : EventArgs {
    private bool xuqd;
    private string gggk;
    private int gggl;
    private string xuqe;
    private string xuqf;
    private string huid;
    private int xuqg;
    private bool xuqh;
    private SecureString xuqi;
    private SecureString gggp;
    private lnyj bxvu;
    public bool IsProxy { get; }
    public string Host { get; }
    public int Port { get; }
    public string Realm { get; }
    public string Scheme { get; }
    public string Url { get; }
    public int Retries { get; }
    internal NeedCredentialsEventArgs(niqh abu, muht abv);
    public bool get_IsProxy();
    public string get_Host();
    public int get_Port();
    public string get_Realm();
    public string get_Scheme();
    public string get_Url();
    public int get_Retries();
    public void Continue(SecureString userName, SecureString password);
    public void Continue(string userName, SecureString password);
    public void Continue(string userName, string password);
    internal void bcjh();
}
public class EO.WebBrowser.NeedCredentialsHandler : MulticastDelegate {
    public NeedCredentialsHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NeedCredentialsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NeedCredentialsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.NewWindowEventArgs : EventArgs {
    private WebView dffl;
    private string kdww;
    private Nullable`1<int> kdwx;
    private Nullable`1<int> kdwy;
    private Nullable`1<int> kdwz;
    private Nullable`1<int> kdxa;
    private bool kdxb;
    [CompilerGeneratedAttribute]
private bool kdxc;
    public WebView WebView { get; }
    public string TargetUrl { get; }
    public Nullable`1<int> Left { get; }
    public Nullable`1<int> Top { get; }
    public Nullable`1<int> Width { get; }
    public Nullable`1<int> Height { get; }
    public bool IsPopup { get; }
    public string WindowName { get; }
    public bool Accepted { get; public set; }
    internal NewWindowEventArgs(WebView abn, muht abo);
    public WebView get_WebView();
    public string get_TargetUrl();
    public Nullable`1<int> get_Left();
    public Nullable`1<int> get_Top();
    public Nullable`1<int> get_Width();
    public Nullable`1<int> get_Height();
    public bool get_IsPopup();
    public string get_WindowName();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
public void set_Accepted(bool value);
}
public class EO.WebBrowser.NewWindowHandler : MulticastDelegate {
    public NewWindowHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NewWindowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NewWindowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum EO.WebBrowser.Permissions : Enum {
    public int value__;
    public static Permissions Microphone;
    public static Permissions WebCam;
    public static Permissions GeoLocation;
    public static Permissions Clipboard;
    public static Permissions DesktopVideoCapture;
}
[ClassInterfaceAttribute("0")]
public class EO.WebBrowser.PostDataCollection : Collection`1<PostDataItem> {
    private nitp cmol;
    private PostDataItem dali;
    [CompilerGeneratedAttribute]
private bool ffmk;
    internal bool qvke { get; internal set; }
    internal PostDataCollection(nitp uj);
    [CompilerGeneratedAttribute]
internal bool get_qvke();
    [CompilerGeneratedAttribute]
internal void set_qvke(bool value);
    private void jcez();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, PostDataItem item);
    protected virtual void RemoveItem(int index);
    private PostDataItem jcfa();
    private void jcfb();
    public void AddValue(string name, string value);
    public void RemoveValue(string name);
    public void SetRawData(Byte[] data);
}
public class EO.WebBrowser.PostDataItem : object {
    private PostDataItemType govf;
    private string jmfu;
    private WebView dffl;
    private niqj pbxo;
    private int dalf;
    private Byte[] dalg;
    private bool dalh;
    private NameValueCollection dali;
    private Byte[] dalj;
    public PostDataItemType Type { get; }
    public string FileName { get; }
    public int DataLength { get; }
    [DebuggerBrowsableAttribute("0")]
public Byte[] Data { get; }
    internal PostDataItem(WebView tx, int ty, niqj tz);
    public PostDataItem(string fileName);
    public PostDataItem(Byte[] data);
    internal void rohw(muhs uc);
    public PostDataItemType get_Type();
    public string get_FileName();
    public int get_DataLength();
    public Byte[] get_Data();
    private Byte[] ewfg();
    internal bool ewfh();
    internal void ewfi(string ud, string ue);
    internal void ewfj(string uf);
    private static bool ewfk(Byte[] ug, NameValueCollection uh);
    private static Byte[] ewfl(NameValueCollection ui);
}
public enum EO.WebBrowser.PostDataItemType : Enum {
    public int value__;
    public static PostDataItemType Empty;
    public static PostDataItemType Byte;
    public static PostDataItemType File;
    public static PostDataItemType Other;
}
public class EO.WebBrowser.PreloadTask : WebViewTask {
    internal NavigationTask kjcb;
    public NavigationTask NavigationTask { get; }
    public NavigationTask get_NavigationTask();
}
public enum EO.WebBrowser.PrintResult : Enum {
    public int value__;
    public static PrintResult OK;
    public static PrintResult Canceled;
    public static PrintResult Failed;
}
public class EO.WebBrowser.RawBitmapData : object {
    [CompilerGeneratedAttribute]
private int iheo;
    [CompilerGeneratedAttribute]
private int ihep;
    [CompilerGeneratedAttribute]
private Byte[] iheq;
    private Byte[] iher;
    public int Width { get; private set; }
    public int Height { get; private set; }
    public Byte[] Data { get; private set; }
    public Byte[] BmpHeader { get; }
    internal RawBitmapData(int acs, int act, Byte[] acu);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public Byte[] get_BmpHeader();
    public void Save(Stream stream);
    public void Save(string fileName);
}
public class EO.WebBrowser.RenderUnresponsiveEventArgs : EventArgs {
}
public class EO.WebBrowser.RenderUnresponsiveEventHandler : MulticastDelegate {
    public RenderUnresponsiveEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderUnresponsiveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderUnresponsiveEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.Request : object {
    private nitp rpbv;
    private bool rpbw;
    public long ID { get; }
    public bool IsReadOnly { get; }
    public string Url { get; public set; }
    public string Initiator { get; }
    public string Method { get; public set; }
    public ResourceType ResourceType { get; }
    public NameValueCollection Headers { get; }
    public PostDataCollection PostData { get; }
    public string ContentEncoding { get; public set; }
    public int ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public CookieCollection Cookies { get; }
    internal Request(nitp tu);
    public Request(string url);
    public long get_ID();
    public bool get_IsReadOnly();
    public string get_Url();
    public void set_Url(string value);
    public string get_Initiator();
    public string get_Method();
    public void set_Method(string value);
    public ResourceType get_ResourceType();
    public NameValueCollection get_Headers();
    public PostDataCollection get_PostData();
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public int get_ContentLength();
    public void set_ContentLength(int value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public CookieCollection get_Cookies();
    internal void mtfk(muhs tw);
}
public class EO.WebBrowser.RequestCanceledException : Exception {
}
public class EO.WebBrowser.RequestEventArgs : EventArgs {
    internal niqh dtqk;
    internal muht okjk;
    internal nitp okjl;
    private Request cmol;
    private string didg;
    [CompilerGeneratedAttribute]
private NavigationTask okjm;
    internal bool xhkc { get; }
    public NavigationTask Task { get; private set; }
    public Request Request { get; }
    public string FrameName { get; }
    internal RequestEventArgs(muhh uv, niqh uw, muht ux);
    internal RequestEventArgs(muhh uy, string uz, Request va);
    private void ehqj(muhh vb);
    internal bool get_xhkc();
    [CompilerGeneratedAttribute]
private void set_Task(NavigationTask value);
    [CompilerGeneratedAttribute]
public NavigationTask get_Task();
    public Request get_Request();
    public string get_FrameName();
}
public class EO.WebBrowser.RequestEventHandler : MulticastDelegate {
    public RequestEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RequestEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RequestEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.RequestPermissionEventArgs : EventArgs {
    private int bfwx;
    private int bfwy;
    private string huid;
    private Permissions bfwz;
    private niqh dtqk;
    private bool bfxa;
    private bool bfxb;
    public string Url { get; }
    public Permissions Permissions { get; }
    internal RequestPermissionEventArgs(niqh sp, muht sq, string sr);
    public string get_Url();
    public Permissions get_Permissions();
    public void Allow();
    public void Deny();
    public void Later();
    internal void hcuc(Nullable`1<bool> ss);
}
public class EO.WebBrowser.RequestPermissionEventHandler : MulticastDelegate {
    public RequestPermissionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RequestPermissionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RequestPermissionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class EO.WebBrowser.ResourceHandler : object {
    private int flar;
    private int flas;
    public static int DefaultTimeOutInSeconds;
    public static int DefaultWriteBufferSize;
    public int TimeOutInSeconds { get; }
    public int WriteBufferSize { get; }
    public ResourceHandler(int timeOutInSeconds, int writeBufferSize);
    public int get_TimeOutInSeconds();
    public int get_WriteBufferSize();
    public virtual bool Match(Request request);
    public virtual bool Match(ResourceHandlerContext context);
    public virtual void ProcessRequest(Request request, Response response);
    public virtual void ProcessRequest(ResourceHandlerContext context);
}
public class EO.WebBrowser.ResourceHandlerContext : object {
    [CompilerGeneratedAttribute]
private Request vqhy;
    [CompilerGeneratedAttribute]
private Response vqhz;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> vqia;
    public Request Request { get; internal set; }
    public Response Response { get; internal set; }
    public Dictionary`2<string, object> UserData { get; private set; }
    internal ResourceHandlerContext(Request vr);
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
internal void set_Request(Request value);
    [CompilerGeneratedAttribute]
public Response get_Response();
    [CompilerGeneratedAttribute]
internal void set_Response(Response value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_UserData();
    [CompilerGeneratedAttribute]
private void set_UserData(Dictionary`2<string, object> value);
}
public enum EO.WebBrowser.ResourceType : Enum {
    public int value__;
    public static ResourceType Unknown;
    public static ResourceType MainFrame;
    public static ResourceType SubFrame;
    public static ResourceType StyleSheet;
    public static ResourceType Script;
    public static ResourceType Image;
    public static ResourceType Font;
    public static ResourceType SubResource;
    public static ResourceType Object;
    public static ResourceType Media;
    public static ResourceType Favicon;
    public static ResourceType XMLHttpRequest;
}
public class EO.WebBrowser.Response : object {
    private niug efcm;
    private CookieCollection vmhx;
    private nitu vmhu;
    private NameValueCollection efcn;
    private string efco;
    private bdlv efcp;
    internal bool efcq;
    internal bool efcr;
    private int efcs;
    private string efct;
    public int StatusCode { get; public set; }
    public string StatusText { get; public set; }
    public string ContentEncoding { get; public set; }
    public int ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public string RedirectLocation { get; public set; }
    public NameValueCollection Headers { get; }
    public NameValueCollection RawHeaders { get; }
    public CookieCollection Cookies { get; }
    public Stream OutputStream { get; }
    internal Response(niug vj);
    internal Response(muht vk);
    internal void ougd();
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_StatusText();
    public void set_StatusText(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public int get_ContentLength();
    public void set_ContentLength(int value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_RedirectLocation();
    public void set_RedirectLocation(string value);
    public NameValueCollection get_Headers();
    public NameValueCollection get_RawHeaders();
    public CookieCollection get_Cookies();
    public Stream get_OutputStream();
    public void Write(string s);
    public void Write(string s, Encoding encoding);
    public void WriteFile(string file, string contentType);
    public void Write(Byte[] data);
    public void WriteResource(Assembly assembly, string resourceName, string contentType);
    public void End();
    private sealed virtual override void mugt.uolx();
}
public class EO.WebBrowser.ResponseEventArgs : RequestEventArgs {
    private Response eywg;
    public Response Response { get; }
    internal ResponseEventArgs(muhh vm, niqh vn, muht vo);
    public Response get_Response();
}
public class EO.WebBrowser.ResponseEventHandler : MulticastDelegate {
    public ResponseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResponseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResponseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.Runtime : object {
    private static List`1<string> vrng;
    private static Dictionary`2<string, string> elly;
    public static EngineOptions DefaultEngineOptions { get; }
    private static Runtime();
    public static EngineOptions get_DefaultEngineOptions();
    public static void AddLicense(string license);
}
public class EO.WebBrowser.ScriptTask : WebViewTask {
    private object ncbu;
    private string ncbv;
    private ScriptTaskDoneHandler ncbw;
    internal bool ncbx;
    private Dictionary`2<int, muho> ncby;
    private tsql`1<int> ncbz;
    [CompilerGeneratedAttribute]
private string ncca;
    public object Tag { get; }
    public string Script { get; }
    public string FrameName { get; public set; }
    public ScriptTask(object tag, string script, ScriptTaskDoneHandler doneHandler);
    public ScriptTask(object tag, string script, Action doneHandler);
    public ScriptTask(string script, ScriptTaskDoneHandler doneHandler);
    public ScriptTask(string script, Action doneHandler);
    public ScriptTask(ScriptTaskDoneHandler doneHandler);
    public ScriptTask(Action doneHandler);
    public ScriptTask(string script);
    public object get_Tag();
    public string get_Script();
    [CompilerGeneratedAttribute]
public string get_FrameName();
    [CompilerGeneratedAttribute]
public void set_FrameName(string value);
    internal bool ifnm(niqh yt, muhs yu, string yv);
    internal void lhwr(JSInvokeResult yw, muhs yx, tssu yy, string yz);
    internal void ljii();
    public sealed virtual void Dispose();
}
public class EO.WebBrowser.ScriptTaskDoneEventArgs : EventArgs {
    private ScriptTask sgxb;
    public ScriptTask Call { get; }
    internal ScriptTaskDoneEventArgs(ScriptTask zd);
    public ScriptTask get_Call();
}
public class EO.WebBrowser.ScriptTaskDoneHandler : MulticastDelegate {
    public ScriptTaskDoneHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptTaskDoneEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptTaskDoneEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.Shortcut : object {
    [CompilerGeneratedAttribute]
private KeyCode hbbm;
    [CompilerGeneratedAttribute]
private int hbbn;
    [CompilerGeneratedAttribute]
private bool hbbo;
    [CompilerGeneratedAttribute]
private bool hbbp;
    [CompilerGeneratedAttribute]
private bool hbbq;
    public KeyCode KeyCode { get; public set; }
    public int CommandId { get; public set; }
    public bool ShiftDown { get; public set; }
    public bool CtrlDown { get; public set; }
    public bool AltDown { get; public set; }
    public Shortcut(int commandId, KeyCode keyCode, bool ctrlDown, bool altDown, bool shiftDown);
    public Shortcut(int commandId, KeyCode keyCode);
    [CompilerGeneratedAttribute]
public KeyCode get_KeyCode();
    [CompilerGeneratedAttribute]
public void set_KeyCode(KeyCode value);
    [CompilerGeneratedAttribute]
public int get_CommandId();
    [CompilerGeneratedAttribute]
public void set_CommandId(int value);
    [CompilerGeneratedAttribute]
public bool get_ShiftDown();
    [CompilerGeneratedAttribute]
public void set_ShiftDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_CtrlDown();
    [CompilerGeneratedAttribute]
public void set_CtrlDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_AltDown();
    [CompilerGeneratedAttribute]
public void set_AltDown(bool value);
}
public class EO.WebBrowser.ShouldForceDownloadEventArgs : EventArgs {
    private string huid;
    private string huie;
    [CompilerGeneratedAttribute]
private bool huif;
    public string Url { get; }
    public string MimeType { get; }
    public bool ForceDownload { get; public set; }
    internal ShouldForceDownloadEventArgs(string dx, string dy);
    public string get_Url();
    public string get_MimeType();
    [CompilerGeneratedAttribute]
public bool get_ForceDownload();
    [CompilerGeneratedAttribute]
public void set_ForceDownload(bool value);
}
public class EO.WebBrowser.ShouldForceDownloadHandler : MulticastDelegate {
    public ShouldForceDownloadHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ShouldForceDownloadEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ShouldForceDownloadEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.SSLStatus : object {
    [CompilerGeneratedAttribute]
private ErrorCode ysrx;
    [CompilerGeneratedAttribute]
private X509Certificate2 wbux;
    public ErrorCode ErrorCode { get; private set; }
    public X509Certificate2 Certificate { get; private set; }
    internal SSLStatus(muht aca);
    [CompilerGeneratedAttribute]
public ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(ErrorCode value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(X509Certificate2 value);
    internal static X509Certificate2 dejd(muht acb);
}
public class EO.WebBrowser.ThreadRunner : ThreadRunnerBase {
    private List`1<WebView> anxu;
    private tsvn anxv;
    private Engine picg;
    [ThreadStaticAttribute]
private static ThreadRunner anxw;
    public Engine Engine { get; }
    public ThreadRunner(string threadName);
    public ThreadRunner(string threadName, Engine engine);
    private ThreadRunner(umxm zz);
    internal static ThreadRunner bvwh();
    protected virtual void vvhz();
    protected virtual void vvia();
    private WebView bvwi(int aaa, int aab, bool aac, WebViewOptions aad);
    internal void bvwj(WebView aae, bool aaf);
    private void bvwk(WebView aag, int aah, int aai, bool aaj);
    public Engine get_Engine();
    public WebView CreateWebView();
    public WebView CreateWebView(WebViewOptions options);
    public WebView CreateWebView(int width, int height);
    public WebView CreateWebView(int width, int height, WebViewOptions options);
    internal void bvwl(WebView aak);
    internal void bvwm(WebView aal);
    private void bvwn(object aam, EventArgs aan);
    public object Send(WebViewCallback callback, WebView webView, object args);
    public void Post(WebViewCallback callback, WebView webView, object args);
}
[DescriptionAttribute("Represents a class that can be used to render or load a web page.")]
public class EO.WebBrowser.WebView : Component {
    private tsvn phyg;
    private tsvn phyh;
    private int phyi;
    private IntPtr phyj;
    private IntPtr phyk;
    [CompilerGeneratedAttribute]
private FullScreenModeChangedHandler phyl;
    private tstc dtql;
    private static int phym;
    private static List`1<WebView> phyn;
    private object phyo;
    internal nivi phyp;
    internal bool phyq;
    private WebViewOptions phyr;
    private IntPtr phys;
    private cuyc phyt;
    private cuyc phyu;
    private cuyd phyv;
    private bool phyw;
    private int phyx;
    private tsvn phyy;
    private IntPtr phyz;
    private bool phza;
    private Nullable`1<Size> phzb;
    internal ThreadRunner phzc;
    internal tsvn phzd;
    private WaitableTask phze;
    private tsqq phzf;
    private List`1<Action> phzg;
    private niqh phzh;
    private bool phzi;
    private bool phzj;
    private bool phzk;
    private bool phzl;
    private string qwbj;
    private string phzm;
    private string phzn;
    private Image phzo;
    private JSDialogEventArgs phzp;
    private string phzq;
    private double phzr;
    private Nullable`1<double> phzs;
    private string huid;
    private string phzt;
    private nisx phzu;
    private static Shortcut[] phzv;
    private Shortcut[] phzw;
    private Dictionary`2<int, DownloadItem> phzx;
    private Dictionary`2<int, DownloadItem> phzy;
    private DownloadItem[] phzz;
    private List`1<ResourceHandler> piaa;
    private Dictionary`2<string, JSExtInvokeHandler> piab;
    private string piac;
    private string piad;
    private object piae;
    private string piaf;
    private Dictionary`2<string, MethodInfo> piag;
    private LinkedList`1<ScriptTask> piah;
    private WebViewClosedEventHandler piai;
    private EventHandler piaj;
    private EventHandler piak;
    private EventHandler pial;
    private EventHandler piam;
    private EventHandler pian;
    private EventHandler piao;
    private EventHandler piap;
    private ConsoleMessageHandler piaq;
    private BeforeContextMenuHandler piar;
    private FrameEventHandler pias;
    private CommandHandler piat;
    private ShouldForceDownloadHandler piau;
    private DownloadEventHandler piav;
    private DownloadEventHandler piaw;
    private DownloadEventHandler piax;
    private JSDialogEventHandler piay;
    private ScriptTaskDoneHandler piaz;
    private BeforeRequestLoadHandler piba;
    private JSExtInvokeHandler pibb;
    private FileDialogHandler pibc;
    private NewWindowHandler pibd;
    private EventHandler pibe;
    private EventHandler pibf;
    private GiveFocusHandler pibg;
    private NeedCredentialsHandler pibh;
    private CertificateErrorHandler pibi;
    private LaunchUrlHandler pibj;
    private BeforeNavigateHandler pibk;
    private LoadCompletedEventHandler pibl;
    private LoadFailedEventHandler pibm;
    private BeforePrintHandler pibn;
    private AfterPrintHandler pibo;
    private WndMsgEventHandler pibp;
    private WndMsgEventHandler pibq;
    private tssb pibr;
    private cuyn pibs;
    private bool pibt;
    private cuye pibu;
    private bool pibv;
    private string pibw;
    private JSException pibx;
    private cuyf piby;
    private Dictionary`2<WeakReference, string> pibz;
    private int pica;
    private tsps picb;
    private int picc;
    private cuyg picd;
    private bool pice;
    private bool picf;
    private muhh picg;
    private Engine pich;
    internal bool pici;
    internal WebViewCloseReason picj;
    private cuyh pick;
    private FindSession picl;
    [CompilerGeneratedAttribute]
private CancelEventHandler picm;
    [CompilerGeneratedAttribute]
private int picn;
    [CompilerGeneratedAttribute]
private EventHandler pico;
    [CompilerGeneratedAttribute]
private RenderUnresponsiveEventHandler picp;
    private int picq;
    [CompilerGeneratedAttribute]
private BeforeDownloadHandler picr;
    [CompilerGeneratedAttribute]
private RequestEventHandler pics;
    [CompilerGeneratedAttribute]
private ResponseEventHandler pict;
    [CompilerGeneratedAttribute]
private EventHandler picu;
    [CompilerGeneratedAttribute]
private MouseEventHandler picv;
    [CompilerGeneratedAttribute]
private MouseEventHandler picw;
    [CompilerGeneratedAttribute]
private MouseEventHandler picx;
    [CompilerGeneratedAttribute]
private MouseEventHandler picy;
    [CompilerGeneratedAttribute]
private MouseEventHandler picz;
    [CompilerGeneratedAttribute]
private EventHandler pida;
    [CompilerGeneratedAttribute]
private EventHandler pidb;
    [CompilerGeneratedAttribute]
private DOMNodeEventHandler pidc;
    [CompilerGeneratedAttribute]
private GetClientCertificateHandler pidd;
    [CompilerGeneratedAttribute]
private RequestPermissionEventHandler pide;
    [CompilerGeneratedAttribute]
private IInputMsgFilter pidf;
    [BrowsableAttribute("False")]
public bool IsFullscreenMode { get; }
    internal tstc ojfp { get; }
    internal nivi ksxt { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Engine Engine { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ThreadRunner ThreadRunner { get; }
    internal muhp ksxw { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IntPtr Handle { get; }
    [DefaultValueAttribute("300")]
[DescriptionAttribute("Specifies the amount of the time the WebView should wait before it destroys after it has been taken off the screen.")]
public int UnloadDelay { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsReady { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsLoading { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoBack { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoForward { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Returns the name of the window.")]
public string WindowName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Returns whether this WebView is created due to a NewWindow event.")]
public bool IsNewWindow { get; }
    private bool ksyf { get; }
    [DefaultValueAttribute("")]
[DescriptionAttribute("Gets or sets the current Url.")]
public string Url { get; public set; }
    [DefaultValueAttribute("")]
[DescriptionAttribute("Gets or sets the Accept-Langauge header entry.")]
public string AcceptLanguage { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Gets or sets the page title.")]
public string Title { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Gets the status message.")]
public string StatusMessage { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Image Favicon { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Shortcut[] Shortcuts { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Gets a list of download that have started or completed.")]
public DownloadItem[] Downloads { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Returns a value indicating whether EvalScript can be called at this moment.")]
public bool CanEvalScript { get; }
    [DefaultValueAttribute("1")]
[DescriptionAttribute("Gets or sets the zoom factor for this WebView. A value of "1" is 100%.")]
public double ZoomFactor { get; public set; }
    [DefaultValueAttribute("True")]
public bool AllowDropLoad { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Get the last JavaScript exception.")]
public JSException LastJSException { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("Returns a value indicating whether this WebView has focus.")]
public bool HasFocus { get; }
    [DefaultValueAttribute("")]
[DescriptionAttribute("Gets or sets the JavaScript code to be run immediately after the window has been created.")]
public string JSInitCode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object ObjectForScripting { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsCreated { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IInputMsgFilter InputMsgFilter { get; public set; }
    internal cuyn ksyu { get; internal set; }
    private static WebView();
    internal WebView(nivi fb, bool fc);
    private WebView(cuye ff, Engine fg);
    [CompilerGeneratedAttribute]
public void add_FullScreenModeChanged(FullScreenModeChangedHandler value);
    [CompilerGeneratedAttribute]
public void remove_FullScreenModeChanged(FullScreenModeChangedHandler value);
    private void rdnz(niqh es, muht et);
    private IntPtr rdoa(tsvn eu, IntPtr ev, int ew, IntPtr ex, IntPtr ey, Boolean& ez);
    private void rdob();
    private void rdoc(tsvn& fa);
    public bool get_IsFullscreenMode();
    public void ExitFullscreenMode();
    internal void rdod();
    internal tstc get_ojfp();
    internal int rdoe();
    private void rdof(object fd, EventArgs fe);
    private bool rdog();
    internal nivi get_ksxt();
    public Engine get_Engine();
    public void set_Engine(Engine value);
    public ThreadRunner get_ThreadRunner();
    internal muhp get_ksxw();
    public void SetOptions(WebViewOptions options);
    public void Create(IntPtr hWnd);
    internal void iabv(IntPtr fh, bool fi);
    private void rdoi();
    internal bool rdoj();
    public IntPtr get_Handle();
    internal IntPtr rdok();
    internal IntPtr rdol();
    private void iabv();
    internal static bool rdom(int fj, IntPtr fk);
    private static List`1<IntPtr> rdon(IntPtr fl, bool fm);
    internal static void rdoo(IntPtr fn, int fo);
    internal WaitableTask rdop(tsqc`1<WaitableTask> fp, bool fq);
    public void RunLater(Action action);
    public void Close(bool force);
    public void Destroy();
    internal NavigationTask[] rdos(bool fr);
    private void rdot(cuyc fs);
    private void rdou();
    private void rdov();
    internal static int rdow();
    private bool rdox();
    [CompilerGeneratedAttribute]
public void add_Closing(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closing(CancelEventHandler value);
    [ComVisibleAttribute("False")]
public void add_Closed(WebViewClosedEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_Closed(WebViewClosedEventHandler value);
    [CompilerGeneratedAttribute]
public int get_UnloadDelay();
    [CompilerGeneratedAttribute]
public void set_UnloadDelay(int value);
    public bool get_IsReady();
    [CompilerGeneratedAttribute]
public void add_IsReadyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsReadyChanged(EventHandler value);
    public bool get_IsLoading();
    private void set_IsLoading(bool value);
    [ComVisibleAttribute("False")]
public void add_IsLoadingChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_IsLoadingChanged(EventHandler value);
    public bool get_CanGoBack();
    private void set_CanGoBack(bool value);
    [ComVisibleAttribute("False")]
public void add_CanGoBackChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_CanGoBackChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RenderUnresponsive(RenderUnresponsiveEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RenderUnresponsive(RenderUnresponsiveEventHandler value);
    private bool rdoy(bool ft);
    public NavigationTask GoBack();
    public bool get_CanGoForward();
    private void set_CanGoForward(bool value);
    [ComVisibleAttribute("False")]
public void add_CanGoForwardChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_CanGoForwardChanged(EventHandler value);
    public NavigationTask GoForward();
    public string get_WindowName();
    public bool get_IsNewWindow();
    private bool get_ksyf();
    public string get_Url();
    public void set_Url(string value);
    public string get_AcceptLanguage();
    public void set_AcceptLanguage(string value);
    [ComVisibleAttribute("False")]
public void add_UrlChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_UrlChanged(EventHandler value);
    private void rdpb();
    public NavigationTask LoadUrl(string url);
    public NavigationTask LoadUrl(string url, bool skipCache);
    public void LoadUrlAndWait(string url);
    public NavigationTask LoadRequest(Request request);
    internal NavigationTask rdpe(Request fu, bool fv);
    public void LoadRequestAndWait(Request request);
    public NavigationTask Reload(bool ignoreCache);
    public NavigationTask Reload();
    public void StopLoad();
    public NavigationTask LoadHtml(string html, string baseUrl);
    public NavigationTask LoadHtml(string html);
    public void LoadHtmlAndWait(string html);
    public void LoadHtmlAndWait(string html, string baseUrl);
    public string GetHtml();
    public string GetText();
    private string rdpk(bool fw);
    public string get_Title();
    public void set_Title(string value);
    [ComVisibleAttribute("False")]
public void add_TitleChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_TitleChanged(EventHandler value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    [ComVisibleAttribute("False")]
public void add_StatusMessageChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_StatusMessageChanged(EventHandler value);
    public Image get_Favicon();
    internal void set_Favicon(Image value);
    [ComVisibleAttribute("False")]
public void add_FaviconChanged(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_FaviconChanged(EventHandler value);
    public Shortcut[] get_Shortcuts();
    public void set_Shortcuts(Shortcut[] value);
    private void rdpl();
    private static bool rdpm(KeyCode fx, List`1<WebView> fy, bool fz);
    private bool rdpm(KeyCode ga, bool gb, bool gc, bool gd, bool ge);
    [ComVisibleAttribute("False")]
public void add_ConsoleMessage(ConsoleMessageHandler value);
    [ComVisibleAttribute("False")]
public void remove_ConsoleMessage(ConsoleMessageHandler value);
    [ComVisibleAttribute("False")]
public void add_BeforeContextMenu(BeforeContextMenuHandler value);
    [ComVisibleAttribute("False")]
public void remove_BeforeContextMenu(BeforeContextMenuHandler value);
    [ComVisibleAttribute("False")]
public void add_ContextMenuDismissed(FrameEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_ContextMenuDismissed(FrameEventHandler value);
    [ComVisibleAttribute("False")]
public void add_Command(CommandHandler value);
    [ComVisibleAttribute("False")]
public void remove_Command(CommandHandler value);
    internal void rdpn(CommandEventArgs gf, muht gg);
    public void ExecCommand(int commandId);
    [ComVisibleAttribute("False")]
public void add_ShouldForceDownload(ShouldForceDownloadHandler value);
    [ComVisibleAttribute("False")]
public void remove_ShouldForceDownload(ShouldForceDownloadHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeDownload(BeforeDownloadHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeDownload(BeforeDownloadHandler value);
    [ComVisibleAttribute("False")]
public void add_DownloadUpdated(DownloadEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_DownloadUpdated(DownloadEventHandler value);
    [ComVisibleAttribute("False")]
public void add_DownloadCompleted(DownloadEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_DownloadCompleted(DownloadEventHandler value);
    [ComVisibleAttribute("False")]
public void add_DownloadCanceled(DownloadEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_DownloadCanceled(DownloadEventHandler value);
    public DownloadItem[] get_Downloads();
    private void rdpo();
    public bool get_CanEvalScript();
    private JSInvokeResult rdpp();
    [ComVisibleAttribute("False")]
public void add_BeforeRequestLoad(BeforeRequestLoadHandler value);
    [ComVisibleAttribute("False")]
public void remove_BeforeRequestLoad(BeforeRequestLoadHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeSendHeaders(RequestEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeSendHeaders(RequestEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterReceiveHeaders(ResponseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterReceiveHeaders(ResponseEventHandler value);
    public double get_ZoomFactor();
    public void set_ZoomFactor(double value);
    [CompilerGeneratedAttribute]
public void add_ZoomFactorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ZoomFactorChanged(EventHandler value);
    private void rdpq();
    public bool get_AllowDropLoad();
    public void set_AllowDropLoad(bool value);
    private void rdpr(bool gh);
    public void RegisterResourceHandler(ResourceHandler handler);
    internal ResourceHandler[] rdpt();
    public bool UnregisterResourceHandler(ResourceHandler handler);
    internal void rdpv(niqh gi, muht gj);
    public Size GetPageSize();
    public void Resize(Size size);
    public void Resize(int width, int height);
    [ComVisibleAttribute("False")]
public void add_JSDialog(JSDialogEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_JSDialog(JSDialogEventHandler value);
    [ComVisibleAttribute("False")]
public void add_ScriptTaskDone(ScriptTaskDoneHandler value);
    [ComVisibleAttribute("False")]
public void remove_ScriptTaskDone(ScriptTaskDoneHandler value);
    [ComVisibleAttribute("False")]
public void add_JSExtInvoke(JSExtInvokeHandler value);
    [ComVisibleAttribute("False")]
public void remove_JSExtInvoke(JSExtInvokeHandler value);
    public JSException get_LastJSException();
    public void RegisterJSExtensionFunction(string functionName, JSExtInvokeHandler handler);
    private void rdpz();
    private void rdqa();
    internal void rdqb(string gk);
    public object EvalScript(string code, string frameName, bool throwOnError);
    public object EvalScript(string code, bool throwOnError);
    public object EvalScript(string code);
    public Window GetDOMWindow();
    public object InvokeFunction(string functionName, Object[] args);
    private object rdqf(muhq gl, Action`1<muhs> gm, bool gn, bool go, string gp);
    internal object rdqg(string gq, JSInvokeResult gr, muht gs, Exception& gt);
    internal void rdqh(ScriptTask gu, ScriptTaskDoneHandler gv);
    internal object rdqf(muhq gw, Action`1<muhs> gx, bool gy, string gz);
    internal object rdqf(muhq ha, Action`1<muhs> hb);
    public ScriptTask QueueScriptTask(ScriptTask task);
    public ScriptTask QueueScriptTask(string script);
    public ScriptTask QueueScriptTask(Action action);
    internal void rdqj();
    [ComVisibleAttribute("False")]
public void add_FileDialog(FileDialogHandler value);
    [ComVisibleAttribute("False")]
public void remove_FileDialog(FileDialogHandler value);
    [ComVisibleAttribute("False")]
public void add_NewWindow(NewWindowHandler value);
    [ComVisibleAttribute("False")]
public void remove_NewWindow(NewWindowHandler value);
    [ComVisibleAttribute("False")]
public void add_Activate(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_Activate(EventHandler value);
    [ComVisibleAttribute("False")]
public void add_GotFocus(EventHandler value);
    [ComVisibleAttribute("False")]
public void remove_GotFocus(EventHandler value);
    [ComVisibleAttribute("False")]
public void add_GiveFocus(GiveFocusHandler value);
    [ComVisibleAttribute("False")]
public void remove_GiveFocus(GiveFocusHandler value);
    public void SetFocus(bool preserveFocusedNode);
    internal void rdqk(niwi hc);
    public bool get_HasFocus();
    [ComVisibleAttribute("False")]
public void add_NeedCredentials(NeedCredentialsHandler value);
    [ComVisibleAttribute("False")]
public void remove_NeedCredentials(NeedCredentialsHandler value);
    [ComVisibleAttribute("False")]
public void add_CertificateError(CertificateErrorHandler value);
    [ComVisibleAttribute("False")]
public void remove_CertificateError(CertificateErrorHandler value);
    [ComVisibleAttribute("False")]
public void add_LaunchUrl(LaunchUrlHandler value);
    [ComVisibleAttribute("False")]
public void remove_LaunchUrl(LaunchUrlHandler value);
    [ComVisibleAttribute("False")]
public void add_BeforeNavigate(BeforeNavigateHandler value);
    [ComVisibleAttribute("False")]
public void remove_BeforeNavigate(BeforeNavigateHandler value);
    [ComVisibleAttribute("False")]
public void add_LoadCompleted(LoadCompletedEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_LoadCompleted(LoadCompletedEventHandler value);
    [ComVisibleAttribute("False")]
public void add_LoadFailed(LoadFailedEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_LoadFailed(LoadFailedEventHandler value);
    [ComVisibleAttribute("False")]
public void add_BeforePrint(BeforePrintHandler value);
    [ComVisibleAttribute("False")]
public void remove_BeforePrint(BeforePrintHandler value);
    [ComVisibleAttribute("False")]
public void add_AfterPrint(AfterPrintHandler value);
    [ComVisibleAttribute("False")]
public void remove_AfterPrint(AfterPrintHandler value);
    [ComVisibleAttribute("False")]
public void add_KeyDown(WndMsgEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_KeyDown(WndMsgEventHandler value);
    [ComVisibleAttribute("False")]
public void add_KeyUp(WndMsgEventHandler value);
    [ComVisibleAttribute("False")]
public void remove_KeyUp(WndMsgEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseUp(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseUp(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseDoubleClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseDoubleClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseEnter(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseEnter(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseLeave(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseLeave(EventHandler value);
    public string get_JSInitCode();
    public void set_JSInitCode(string value);
    public object get_ObjectForScripting();
    public void set_ObjectForScripting(object value);
    public static bool DoEvents();
    public static void DoEvents(int milliSeconds);
    public Size GetContentAreaSize(bool excludeScrollBars);
    public Size GetContentAreaSize();
    private static object rdqn(IntPtr hd, int he, int hf, bool hg);
    internal static Image rdqo(IntPtr hh, int hi, int hj);
    internal static Image rdqp(IntPtr hk, int hl, int hm);
    private object rdqq(Rectangle hn, Size ho, bool hp);
    public Image Capture(Rectangle srcRect, Size targetSize);
    public RawBitmapData CaptureRaw(Rectangle srcRect, Size targetSize);
    public Image Capture(Rectangle srcRect);
    public Image Capture(bool excludeScrollBars);
    public Image Capture();
    public RawBitmapData CaptureRaw();
    public bool Capture(string fileName);
    public Point GetScrollOffset();
    public void SetScrollOffset(int x, int y);
    public static PrinterSettings GetDefaultPrinterSettings();
    public WaitableTask Print(PrinterSettings printerSettings, PageSettings pageSettings);
    internal void rdqv(PrinterSettings hq, PageSettings hr);
    public WaitableTask Print(PrinterSettings printerSettings);
    public WaitableTask Print();
    internal WaitableTask rdqw(WaitableTask hs, PrinterSettings ht, PageSettings hu);
    internal muht rdqx(muhs hv, tssw hw, bool hx);
    internal void rdqx(muhs hy, tssw hz);
    internal muht rdqx(muhs ia, bool ib);
    internal void rdqx(muhs ic);
    internal void rdqy(niqh id, muht ie);
    private void rdqz(string ig);
    public void ShowDevTools(IntPtr hWnd);
    public void HideDevTools();
    private bool rdrc();
    private void rdrd(niqh ih, muht ii);
    private void rdre(muhs ij);
    private void rdrf(niqh ik, muht il);
    private void rdrg(niqh im, muht in);
    private void rdrh(niqh io, muht ip);
    private void rdri(niqh iq, muht ir);
    private void rdrj(niqh is, muht it);
    private void rdrk(niqh iu, muht iv);
    private void rdrl(niqh iw, muht ix);
    internal void rdrm(niqh iy, FileDialogEventArgs iz);
    private void rdrn(niqh ja, muht jb);
    private void rdro(niqh jc, muht jd);
    private void rdrp(niqh je, muht jf);
    private void rdrq(niqh jg, muht jh);
    internal void rdrr(niqh ji, muht jj);
    private void rdrs(niqh jk, muht jl);
    private void rdrt(niqh jm, muht jn);
    private void rdru(niqh jo, muht jp);
    internal void rdrv(niqh jq, muht jr);
    internal void rdrw(string js);
    private void rdrx(niqh jt, muht ju);
    private void rdry(niqh jv, muht jw);
    private void rdrz(niqh jx, muht jy);
    private void rdsa(niqh jz, muht ka);
    [CompilerGeneratedAttribute]
public void add_FocusedNodeChanged(DOMNodeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FocusedNodeChanged(DOMNodeEventHandler value);
    private void rdsb(niqh kb, muht kc);
    private muho rdsc();
    internal bool rdsd(muht kd, string ke, string kf);
    private void rdse(niqh kg, muht kh);
    private void rdsf(niqh ki, muht kj);
    internal void rdsg(niqh kk, muht kl);
    private void rdsh(niqh km, muht kn);
    private void rdsi(niqh ko, muht kp);
    private void rdsj(niqh kq, muht kr);
    private void rdsk(niqh ks, muht kt);
    [CompilerGeneratedAttribute]
public void add_NeedClientCertificate(GetClientCertificateHandler value);
    [CompilerGeneratedAttribute]
public void remove_NeedClientCertificate(GetClientCertificateHandler value);
    private void rdsl(niqh ku, muht kv);
    private void rdsm(niqh kw, muht kx);
    private void rdsn(niqh ky, muht kz);
    private void rdso(niqh la, muht lb);
    [CompilerGeneratedAttribute]
public void add_RequestPermissions(RequestPermissionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RequestPermissions(RequestPermissionEventHandler value);
    private void rdsp(niqh lc, muht ld);
    private void rdsq(niqh le, muht lf);
    private void rdsr(niqh lg, muht lh);
    private void rdss(niqh li, muht lj);
    private void rdst(Exception lk, bool ll);
    private void rdsu(niqh lm, muht ln);
    private void rdsv(niqh lo, muht lp);
    internal bool rdsw();
    private static void rdsx();
    internal bool rdsy(int lq);
    internal void rdsz(NavigationTask lr, bool ls);
    internal void rdta(NavigationTask lt);
    internal void rdtb(WebViewTask lu, bool lv);
    private void rdtc();
    private sealed virtual override IntPtr tssa.wqcm();
    private sealed virtual override void tssa.tciq(MouseEventArgs ahc);
    private sealed virtual override void tssa.tcir(MouseEventArgs ahd);
    private sealed virtual override void tssa.tcis(MouseEventArgs ahe);
    private sealed virtual override void tssa.ginu(MouseEventArgs ahf);
    private sealed virtual override void tssa.tcit(MouseEventArgs ahg);
    private sealed virtual override void tssa.tciu(EventArgs ahh);
    private sealed virtual override void tssa.tciv(EventArgs ahi);
    public FindSession StartFindSession(string text, bool matchCase);
    internal void rdte(int lw, string lx, bool ly, bool lz, bool ma, bool mb);
    internal void rdtf();
    private void rdtg(niqh mc, muht md);
    internal int rdth();
    internal Frame rdti(muht me);
    public bool get_IsCreated();
    private void rdtj(MouseEventType mf, MouseEventArgs mg, EventFlags mh);
    public void SendMouseEvent(MouseEventType type, MouseEventArgs e);
    public void SendKeyEvent(bool keyDown, KeyCode keyCode, EventFlags modifiers);
    public void SendKeyEvent(bool keyDown, KeyCode keyCode);
    public void SendChar(char ch, EventFlags modifiers);
    public void SendChar(char ch);
    private void rdtk(KeyboardEventType mi, EventFlags mj, KeyCode mk, char ml);
    internal void rdtm(NavigationTask mm);
    private sealed virtual override void tsuz.ysaq(tsuy ahj);
    public static PreloadTask Preload(int width, int height, string url, WebViewCallback doneCallback, object doneCallbackArgs);
    public static PreloadTask Preload(int width, int height, string url);
    public static PreloadTask Preload(string url);
    public static void ShowDebugUI();
    public static void CloseDebugUI();
    internal static WebView[] rdtq();
    public string GetSource();
    public string Download(string url, string filePath);
    public DownloadResult DownloadWithResult(string url, string filePath);
    [CompilerGeneratedAttribute]
public IInputMsgFilter get_InputMsgFilter();
    [CompilerGeneratedAttribute]
public void set_InputMsgFilter(IInputMsgFilter value);
    internal cuyn get_ksyu();
    internal void set_ksyu(cuyn value);
    private void rdtu(gmln mn);
    internal bool rdtv();
    public SSLStatus GetSSLStatus();
    [CompilerGeneratedAttribute]
private void rdtx();
    [CompilerGeneratedAttribute]
private void rdty(object mo, EventArgs mp);
}
public class EO.WebBrowser.WebViewCallback : MulticastDelegate {
    public WebViewCallback(object object, IntPtr method);
    public virtual object Invoke(WebView webView, object args);
    public virtual IAsyncResult BeginInvoke(WebView webView, object args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class EO.WebBrowser.WebViewClosedEventArgs : EventArgs {
    private WebViewCloseReason mneg;
    public WebViewCloseReason Reason { get; }
    internal WebViewClosedEventArgs(WebViewCloseReason aci);
    public WebViewCloseReason get_Reason();
}
public class EO.WebBrowser.WebViewClosedEventHandler : MulticastDelegate {
    public WebViewClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebViewClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebViewClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum EO.WebBrowser.WebViewCloseReason : Enum {
    public int value__;
    public static WebViewCloseReason Normal;
    public static WebViewCloseReason RenderCrash;
    public static WebViewCloseReason EngineCrash;
    public static WebViewCloseReason EngineShutdown;
    public static WebViewCloseReason WebViewCrash;
}
public class EO.WebBrowser.WebViewClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private bool yyjj;
    public bool SkipBeforeUnload { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipBeforeUnload();
    [CompilerGeneratedAttribute]
public void set_SkipBeforeUnload(bool value);
}
public class EO.WebBrowser.WebViewClosingEventHandler : MulticastDelegate {
    public WebViewClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebViewClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebViewClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class EO.WebBrowser.WebViewTask : WaitableTask {
    private WebView dffl;
    public WebView WebView { get; }
    internal void bvwh(WebView abi, bool abj);
    public WebView get_WebView();
    protected virtual void vvhy(bool aid);
}
